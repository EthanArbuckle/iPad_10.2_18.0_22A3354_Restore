uint64_t `global constructor keyed to'_032768()
{
}

_QWORD *kaldi::WriteBasicType<BOOL>(_QWORD *a1, char a2, int a3)
{
  const char *v5;
  _QWORD *result;
  _QWORD v7[34];

  if (a3)
    v5 = "T";
  else
    v5 = "F";
  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v5, 1);
  if ((a2 & 1) == 0)
    result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7, "WriteBasicType", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/base/io-funcs.cc", 38);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "Write failure in WriteBasicType<BOOL>");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  return result;
}

_QWORD *std::operator<<[abi:ne180100]<std::char_traits<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t kaldi::ReadBasicType<BOOL>(_QWORD *a1, char a2, char *a3, uint64_t a4, const char *a5)
{
  int v6;
  char v7;
  _QWORD *v9;
  _QWORD *v10;
  std::string __p;
  _QWORD v12[34];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!a3)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadBasicType", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/base/io-funcs.cc", (const char *)0x2B, "b != NULL", a5);
  if ((a2 & 1) == 0)
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  v6 = std::istream::peek();
  v13 = v6;
  if (v6 << 24 == 1409286144)
  {
    v7 = 1;
  }
  else
  {
    if (v6 << 24 != 1174405120)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "ReadBasicType", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/base/io-funcs.cc", 53);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Read failure in ReadBasicType<BOOL>, file position is ", 54);
      std::istream::tellg();
      v9 = (_QWORD *)std::ostream::operator<<();
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", next char is ", 15);
      kaldi::CharToString((kaldi *)&v13, &__p);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, (uint64_t)&__p);
      std::string::~string(&__p);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
    }
    v7 = 0;
  }
  *a3 = v7;
  return std::istream::get();
}

void sub_1DE3F82EC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *std::ws[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1)
{
  const std::locale::facet *v2;
  _QWORD *v3;
  _QWORD *v4;
  _BYTE *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  std::locale v11;
  char v12;

  MEMORY[0x1DF0ECBF4](&v12, a1, 1);
  if (!v12)
    return a1;
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v11, MEMORY[0x1E0DE4A90]);
  std::locale::~locale(&v11);
  v3 = a1 + 5;
  while (1)
  {
    v4 = *(_QWORD **)((char *)v3 + *(_QWORD *)(*a1 - 24));
    v5 = (_BYTE *)v4[3];
    if (v5 == (_BYTE *)v4[4])
      break;
    LOBYTE(v6) = *v5;
LABEL_6:
    if ((v6 & 0x80) != 0 || (*((_DWORD *)&v2[1].~facet + v6) & 0x4000) == 0)
    {
      v9 = 0;
      goto LABEL_12;
    }
    v7 = *(_QWORD **)((char *)v3 + *(_QWORD *)(*a1 - 24));
    v8 = v7[3];
    if (v8 == v7[4])
      (*(void (**)(_QWORD *))(*v7 + 80))(v7);
    else
      v7[3] = v8 + 1;
  }
  v6 = (*(uint64_t (**)(_QWORD *))(*v4 + 72))(v4);
  if (v6 != -1)
    goto LABEL_6;
  v9 = 2;
LABEL_12:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1DE3F8414(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  _QWORD *v9;
  uint64_t v11;

  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  v11 = *v9;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v9 + *(_QWORD *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1DE3F83DCLL);
  }
  __cxa_rethrow();
}

void sub_1DE3F8470(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, a2, v3);
}

_QWORD *kaldi::WriteBasicType<float>(uint64_t a1, int a2)
{
  _QWORD *v3;

  if (a2)
  {
    std::ostream::put();
    return (_QWORD *)std::ostream::write();
  }
  else
  {
    v3 = (_QWORD *)std::ostream::operator<<();
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" ", 1);
  }
}

float kaldi::ReadBasicType<float>(_QWORD *a1, int a2, float *a3, uint64_t a4, const char *a5)
{
  int v7;
  uint64_t v8;
  const char *v9;
  float result;
  _QWORD *v11;
  _QWORD v12[34];
  double v13[19];

  v13[18] = *(double *)MEMORY[0x1E0C80C00];
  if (!a3)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadBasicType", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/base/io-funcs.cc", (const char *)0x52, "f != NULL", a5);
  if (a2)
  {
    v13[0] = 0.0;
    v7 = std::istream::peek();
    if (v7 == 8)
    {
      kaldi::ReadBasicType<double>(a1, 1, v13, v8, v9);
      result = v13[0];
      *a3 = result;
    }
    else
    {
      if (v7 != 4)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "ReadBasicType", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/base/io-funcs.cc", 93);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ReadBasicType: expected float, saw ", 35);
        std::istream::peek();
        v11 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", at file position ", 19);
        std::istream::tellg();
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
      }
      std::istream::get();
      std::istream::read();
    }
  }
  else
  {
    MEMORY[0x1DF0ECC24](a1, a3);
  }
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "ReadBasicType", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/base/io-funcs.cc", 100);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ReadBasicType: failed to read, at file position ", 48);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  return result;
}

void sub_1DE3F8700(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

double kaldi::ReadBasicType<double>(_QWORD *a1, int a2, double *a3, uint64_t a4, const char *a5)
{
  int v7;
  double result;
  _QWORD *v9;
  _QWORD v10[34];
  float v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!a3)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadBasicType", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/base/io-funcs.cc", (const char *)0x6B, "d != NULL", a5);
  if (a2)
  {
    v11 = 0.0;
    v7 = std::istream::peek();
    if (v7 == 4)
    {
      kaldi::ReadBasicType<float>(a1, 1, &v11);
      result = v11;
      *a3 = v11;
    }
    else
    {
      if (v7 != 8)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "ReadBasicType", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/base/io-funcs.cc", 118);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ReadBasicType: expected float, saw ", 35);
        std::istream::peek();
        v9 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", at file position ", 19);
        std::istream::tellg();
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
      }
      std::istream::get();
      std::istream::read();
    }
  }
  else
  {
    MEMORY[0x1DF0ECC18](a1, a3);
  }
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "ReadBasicType", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/base/io-funcs.cc", 125);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ReadBasicType: failed to read, at file position ", 48);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return result;
}

void sub_1DE3F8900(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x1DF0ECBF4](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1DE3F8A38(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1DE3F8A04);
  }
  __cxa_rethrow();
}

void sub_1DE3F8A7C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t kaldi::CheckToken(kaldi *this, const char *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  char v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t result;
  int v9;

  v5 = *(_BYTE *)this;
  if (!*(_BYTE *)this)
    kaldi::KaldiAssertFailure_((kaldi *)"CheckToken", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/base/io-funcs.cc", (const char *)0xA6, "*token != '\\0'", a5);
  v6 = (unsigned __int8 *)this + 1;
  v7 = MEMORY[0x1E0C80978];
  do
  {
    if (v5 < 0)
    {
      result = __maskrune(v5, 0x4000uLL);
      if ((_DWORD)result)
LABEL_9:
        kaldi::KaldiAssertFailure_((kaldi *)"CheckToken", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/base/io-funcs.cc", (const char *)0xA8, "!::isspace(*token)", a5);
    }
    else
    {
      result = *(_DWORD *)(v7 + 4 * v5 + 60) & 0x4000;
      if ((_DWORD)result)
        goto LABEL_9;
    }
    v9 = *v6++;
    v5 = v9;
  }
  while (v9);
  return result;
}

_QWORD *kaldi::WriteToken(_QWORD *a1, const char *a2, kaldi *this, uint64_t a4, const char *a5)
{
  size_t v7;
  _QWORD *v8;
  _QWORD *result;
  std::runtime_error *exception;

  if (!this)
    kaldi::KaldiAssertFailure_((kaldi *)"WriteToken", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/base/io-funcs.cc", (const char *)0xB0, "token != NULL", a5);
  kaldi::CheckToken(this, a2, (uint64_t)this, a4, a5);
  v7 = strlen((const char *)this);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)this, v7);
  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteToken.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1DE3F8BEC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::Peek(_QWORD *a1, char a2)
{
  if ((a2 & 1) == 0)
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  return std::istream::peek();
}

_QWORD *kaldi::WriteToken(_QWORD *a1, uint64_t a2, char *a3, uint64_t a4, const char *a5)
{
  if (a3[23] < 0)
    a3 = *(char **)a3;
  return kaldi::WriteToken(a1, 0, (kaldi *)a3, a4, a5);
}

uint64_t kaldi::ReadToken(uint64_t *a1, char a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unsigned int v7;
  int v8;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v12[34];
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!a3)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadToken", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/base/io-funcs.cc", (const char *)0xC2, "str != NULL", a5);
  if ((a2 & 1) == 0)
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, a3);
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "ReadToken", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/base/io-funcs.cc", 198);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ReadToken, failed to read token at file position ", 49);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  v7 = std::istream::peek();
  if (v7 <= 0x7F)
    v8 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v7 + 60) & 0x4000;
  else
    v8 = __maskrune(v7, 0x4000uLL);
  if (!v8)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "ReadToken", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/base/io-funcs.cc", 202);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ReadToken, expected space after token, saw instead ", 51);
    v13[0] = std::istream::peek();
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v13, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", at file position ", 19);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  return std::istream::get();
}

void sub_1DE3F8E28(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t *std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const std::locale::facet *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::locale v19;
  char v20;

  MEMORY[0x1DF0ECBF4](&v20, a1, 0);
  if (!v20)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v4 = *(_QWORD *)(*a1 - 24);
  v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  v7 = std::locale::use_facet(&v19, MEMORY[0x1E0DE4A90]);
  std::locale::~locale(&v19);
  v8 = 0;
  v9 = a1 + 5;
  if (v5 >= 1)
    v10 = v6;
  else
    v10 = 0x7FFFFFFFFFFFFFF7;
  while (1)
  {
    v11 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v12 = (_BYTE *)v11[3];
    if (v12 == (_BYTE *)v11[4])
      break;
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    v14 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v15 = v14[3];
    if (v15 == v14[4])
      (*(void (**)(_QWORD *))(*v14 + 80))(v14);
    else
      v14[3] = v15 + 1;
    if (v10 == ++v8)
    {
      v16 = 0;
      v17 = *a1;
      *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
      goto LABEL_25;
    }
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*v11 + 72))(v11);
  if (v13 != -1)
    goto LABEL_14;
  v16 = 2;
LABEL_23:
  v17 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  if (!v8)
    v16 |= 4u;
LABEL_25:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_1DE3F8FE8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  _QWORD *v9;
  uint64_t v11;

  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  v11 = *v9;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v9 + *(_QWORD *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1DE3F8FB4);
  }
  __cxa_rethrow();
}

void sub_1DE3F904C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t kaldi::PeekToken(_QWORD *a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD v6[34];

  if ((a2 & 1) == 0)
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  if (std::istream::peek() != 60)
    return std::istream::peek();
  std::istream::get();
  v2 = std::istream::peek();
  v3 = (_QWORD *)std::istream::unget();
  if ((*((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 32) & 5) != 0 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6, "PeekToken", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/base/io-funcs.cc", 221);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Error ungetting '<' in PeekToken", 32);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
  }
  return v2;
}

void sub_1DE3F914C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::ExpectToken(uint64_t *a1, char a2, kaldi *a3)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *p_s1;
  uint64_t v19;
  _QWORD *v20;
  char *__s1;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[35];

  v24[34] = *MEMORY[0x1E0C80C00];
  std::istream::tellg();
  if (!a3)
    kaldi::KaldiAssertFailure_((kaldi *)"ExpectToken", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/base/io-funcs.cc", (const char *)0xE5, "token != NULL", v9);
  kaldi::CheckToken(a3, v6, v7, v8, v9);
  if ((a2 & 1) == 0)
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  __s1 = 0;
  v22 = 0;
  v23 = 0;
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)&__s1);
  std::istream::get();
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24, "ExpectToken", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/base/io-funcs.cc", 236);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Failed to read token [started at file position ", 47);
    v11 = (_QWORD *)std::ostream::operator<<();
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"], expected ", 12);
    v13 = strlen((const char *)a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)a3, v13);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
  }
  if (SHIBYTE(v23) < 0)
  {
    v10 = __s1;
    if (strcmp(__s1, (const char *)a3))
      goto LABEL_13;
    operator delete(v10);
  }
  else if (strcmp((const char *)&__s1, (const char *)a3))
  {
LABEL_13:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24, "ExpectToken", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/base/io-funcs.cc", 240);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Expected token \"", 16);
    v15 = strlen((const char *)a3);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)a3, v15);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\", got instead \"", 16);
    if (v23 >= 0)
      p_s1 = &__s1;
    else
      p_s1 = __s1;
    if (v23 >= 0)
      v19 = HIBYTE(v23);
    else
      v19 = v22;
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)p_s1, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\".", 2);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
  }
}

void sub_1DE3F939C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1DF0ECC6C](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1DF0ECC78](v13);
  return a1;
}

{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1DF0ECC6C](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1DF0ECC78](v13);
  return a1;
}

void sub_1DE3F94E0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1DF0ECC78](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1DE3F94C0);
}

void sub_1DE3F9528(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_1DE3F965C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1EA909368, MEMORY[0x1E0DE42D0]);
}

{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1EA909368, MEMORY[0x1E0DE42D0]);
}

void sub_1DE3F9770(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

uint64_t kaldi::StandardErrorLogger(uint64_t a1)
{
  const char *v1;

  if (*(char *)(a1 + 23) >= 0)
    v1 = (const char *)a1;
  else
    v1 = *(const char **)a1;
  return fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s\n", v1);
}

uint64_t kaldi::StandardErrorVLogger(uint64_t a1)
{
  const char *v1;

  if (*(char *)(a1 + 23) >= 0)
    v1 = (const char *)a1;
  else
    v1 = *(const char **)a1;
  return fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s\n", v1);
}

void kaldi::KaldiGetStackTrace(std::string *a1@<X8>)
{
  signed int v3;
  char **v4;
  char **v5;
  uint64_t v6;
  char **v7;
  uint64_t i;
  unint64_t v9;
  _OWORD v10[25];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  memset(v10, 0, sizeof(v10));
  v3 = backtrace((void **)v10, 50);
  v4 = backtrace_symbols((void *const *)v10, v3);
  v5 = v4;
  v6 = v3;
  if (v3 >= 0x33)
  {
    for (i = 0; i != 25; ++i)
    {
      kaldi::KALDI_APPEND_POSSIBLY_DEMANGLED_STRING(a1, v5[i]);
      std::string::append(a1, "\n");
    }
    std::string::append(a1, ".\n.\n.\n");
    v9 = v3 - 25;
    do
    {
      kaldi::KALDI_APPEND_POSSIBLY_DEMANGLED_STRING(a1, v5[v9]);
      std::string::append(a1, "\n");
      ++v9;
    }
    while (v9 < v3);
  }
  else if (v3)
  {
    v7 = v4;
    do
    {
      kaldi::KALDI_APPEND_POSSIBLY_DEMANGLED_STRING(a1, *v7);
      std::string::append(a1, "\n");
      ++v7;
      --v6;
    }
    while (v6);
  }
  free(v5);
}

void sub_1DE3F99D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void kaldi::KALDI_APPEND_POSSIBLY_DEMANGLED_STRING(std::string *a1, char *__s)
{
  char *v4;
  char *v5;
  char *v6;
  void **v7;
  char *v8;
  void *__p[2];
  char v10;
  int status;

  v4 = strchr(__s, 40);
  if (v4 && (v5 = v4, (v6 = strchr(v4, 43)) != 0))
  {
    status = 0;
    std::string::basic_string[abi:ne180100](__p, v5 + 1, v6 - (v5 + 1));
    if (v10 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    v8 = __cxa_demangle((const char *)v7, 0, 0, &status);
    if (v8)
    {
      std::string::append(a1, v8);
      free(v8);
    }
    else
    {
      std::string::append(a1, __s);
    }
    if (v10 < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::string::append(a1, __s);
  }
}

void sub_1DE3F9AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::KaldiAssertFailure_(kaldi *this, char *a2, const char *a3, const char *a4, const char *a5)
{
  _QWORD *v8;
  _QWORD *v9;
  const char *v10;
  size_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  const char *v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  size_t v22;
  _QWORD *v23;
  fst *v24;
  _QWORD *v25;
  _QWORD *v26;
  fst *v27;
  std::string v28;

  v8 = (_QWORD *)fst::cerr(this);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"KALDI_ASSERT: at ", 17);
  if (kaldi::g_program_name)
    v10 = (const char *)kaldi::g_program_name;
  else
    v10 = &byte_1DEBD87CE;
  v11 = strlen(v10);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  v13 = strlen((const char *)this);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)this, v13);
  v28.__r_.__value_.__s.__data_[0] = 58;
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v28, 1);
  v16 = strrchr(a2, 47);
  if (v16)
  {
    do
    {
      v17 = v16;
      if (v16 <= a2)
        break;
      --v16;
    }
    while (*(v17 - 1) != 47);
  }
  else
  {
    v17 = a2;
  }
  v18 = strlen(v17);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
  v28.__r_.__value_.__s.__data_[0] = 58;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)&v28, 1);
  v20 = (_QWORD *)std::ostream::operator<<();
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", failed: ", 10);
  v22 = strlen(a4);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)a4, v22);
  v28.__r_.__value_.__s.__data_[0] = 10;
  v24 = (fst *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)&v28, 1);
  v25 = (_QWORD *)fst::cerr(v24);
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Stack trace is:\n", 16);
  kaldi::KaldiGetStackTrace(&v28);
  std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v26, (uint64_t)&v28);
  std::string::~string(&v28);
  fst::cerr(v27);
  std::ostream::flush();
  abort();
}

void sub_1DE3F9C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1DE3F9D64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1DF0ECF6C](v1);
  _Unwind_Resume(a1);
}

kaldi::KaldiWarnMessage *kaldi::KaldiWarnMessage::KaldiWarnMessage(kaldi::KaldiWarnMessage *this, const char *a2, char *a3)
{
  uint64_t v3;
  _QWORD *v7;
  _QWORD *v8;
  const char *v9;
  size_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  const char *v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  char v21;

  v7 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this);
  v7[33] = v3;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"WARNING (", 9);
  if (kaldi::g_program_name)
    v9 = (const char *)kaldi::g_program_name;
  else
    v9 = &byte_1DEBD87CE;
  v10 = strlen(v9);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  v12 = strlen(a2);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)a2, v12);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"():", 3);
  v15 = strrchr(a3, 47);
  if (v15)
  {
    do
    {
      v16 = v15;
      if (v15 <= a3)
        break;
      --v15;
    }
    while (*(v16 - 1) != 47);
  }
  else
  {
    v16 = a3;
  }
  v17 = strlen(v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
  v21 = 58;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v21, 1);
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)") ", 2);
  return this;
}

void sub_1DE3F9EC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostringstream::~ostringstream(v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1DF0ECF6C](a1 + 112);
  return a1;
}

void kaldi::KaldiWarnMessage::~KaldiWarnMessage(kaldi::KaldiWarnMessage *this)
{
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  void *exception;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  std::string::size_type size;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;
  __int128 v18;
  std::string::size_type v19;

  v2 = (void (*)(uint64_t))kaldi::KaldiWarnMessage::g_logger[0];
  std::stringbuf::str();
  v2((uint64_t)&v18);
  if (SHIBYTE(v19) < 0)
    operator delete((void *)v18);
  if (getenv("QSR_CRASH_ON_WARN"))
  {
    if (std::uncaught_exception())
      abort();
    exception = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    v6 = std::string::append(&v15, "\n\n[stack trace: ]\n");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    kaldi::KaldiGetStackTrace(&v14);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v14;
    else
      v8 = (std::string *)v14.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    else
      size = v14.__r_.__value_.__l.__size_;
    v10 = std::string::append(&v16, (const std::string::value_type *)v8, size);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v17, "\n");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v19 = v12->__r_.__value_.__r.__words[2];
    v18 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1DF0EC9E4](exception, &v18);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = MEMORY[0x1E0DE4F60];
  v4 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)this = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *((_QWORD *)this + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1DF0ECF6C]((char *)this + 112);
}

void sub_1DE3FA11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v34;
  int v35;
  uint64_t v36;

  if (*(char *)(v36 - 41) < 0)
    operator delete(*(void **)(v36 - 64));
  if (a33 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v35 & 1) == 0)
    {
LABEL_14:
      std::ostringstream::~ostringstream(v33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v34);
  goto LABEL_14;
}

kaldi::KaldiLogMessage *kaldi::KaldiLogMessage::KaldiLogMessage(kaldi::KaldiLogMessage *this, const char *a2, char *a3)
{
  uint64_t v3;
  _QWORD *v7;
  _QWORD *v8;
  const char *v9;
  size_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  const char *v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  char v21;

  v7 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this);
  v7[33] = v3;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"LOG (", 5);
  if (kaldi::g_program_name)
    v9 = (const char *)kaldi::g_program_name;
  else
    v9 = &byte_1DEBD87CE;
  v10 = strlen(v9);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  v12 = strlen(a2);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)a2, v12);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"():", 3);
  v15 = strrchr(a3, 47);
  if (v15)
  {
    do
    {
      v16 = v15;
      if (v15 <= a3)
        break;
      --v15;
    }
    while (*(v16 - 1) != 47);
  }
  else
  {
    v16 = a3;
  }
  v17 = strlen(v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
  v21 = 58;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v21, 1);
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)") ", 2);
  return this;
}

void sub_1DE3FA33C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostringstream::~ostringstream(v1);
  _Unwind_Resume(a1);
}

kaldi::KaldiVlogMessage *kaldi::KaldiVlogMessage::KaldiVlogMessage(kaldi::KaldiVlogMessage *this, const char *a2, char *a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  const char *v20;
  size_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char v25;

  v10 = std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this);
  *(_DWORD *)(v10 + 264) = a5;
  *(_QWORD *)(v10 + 272) = v5;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)v10, (uint64_t)"VLOG[", 5);
  v11 = (_QWORD *)std::ostream::operator<<();
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"] (", 3);
  if (kaldi::g_program_name)
    v13 = (const char *)kaldi::g_program_name;
  else
    v13 = &byte_1DEBD87CE;
  v14 = strlen(v13);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
  v16 = strlen(a2);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)a2, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"():", 3);
  v19 = strrchr(a3, 47);
  if (v19)
  {
    do
    {
      v20 = v19;
      if (v19 <= a3)
        break;
      --v19;
    }
    while (*(v20 - 1) != 47);
  }
  else
  {
    v20 = a3;
  }
  v21 = strlen(v20);
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v20, v21);
  v25 = 58;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)&v25, 1);
  v23 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)") ", 2);
  return this;
}

void sub_1DE3FA4B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostringstream::~ostringstream(v1);
  _Unwind_Resume(a1);
}

kaldi::KaldiErrorMessage *kaldi::KaldiErrorMessage::KaldiErrorMessage(kaldi::KaldiErrorMessage *this, const char *a2, char *a3)
{
  uint64_t v3;
  _QWORD *v7;
  _QWORD *v8;
  const char *v9;
  size_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  const char *v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  char v21;

  v7 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this);
  v7[33] = v3;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ERROR (", 7);
  if (kaldi::g_program_name)
    v9 = (const char *)kaldi::g_program_name;
  else
    v9 = &byte_1DEBD87CE;
  v10 = strlen(v9);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  v12 = strlen(a2);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)a2, v12);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"():", 3);
  v15 = strrchr(a3, 47);
  if (v15)
  {
    do
    {
      v16 = v15;
      if (v15 <= a3)
        break;
      --v15;
    }
    while (*(v16 - 1) != 47);
  }
  else
  {
    v16 = a3;
  }
  v17 = strlen(v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
  v21 = 58;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v21, 1);
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)") ", 2);
  return this;
}

void sub_1DE3FA604(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostringstream::~ostringstream(v1);
  _Unwind_Resume(a1);
}

void kaldi::KaldiErrorMessage::~KaldiErrorMessage(kaldi::KaldiErrorMessage *this)
{
  void (*v1)(uint64_t);
  void *exception;
  std::string *v3;
  __int128 v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string v11;
  std::string v12;
  std::string v13;
  std::string v14;
  __int128 v15;
  std::string::size_type v16;

  v1 = (void (*)(uint64_t))kaldi::KaldiErrorMessage::g_logger;
  std::stringbuf::str();
  v1((uint64_t)&v15);
  if (SHIBYTE(v16) < 0)
    operator delete((void *)v15);
  if (std::uncaught_exception())
    abort();
  exception = __cxa_allocate_exception(0x10uLL);
  std::stringbuf::str();
  v3 = std::string::append(&v12, "\n\n[stack trace: ]\n");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  kaldi::KaldiGetStackTrace(&v11);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v11;
  else
    v5 = (std::string *)v11.__r_.__value_.__r.__words[0];
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  else
    size = v11.__r_.__value_.__l.__size_;
  v7 = std::string::append(&v13, (const std::string::value_type *)v5, size);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = std::string::append(&v14, "\n");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16 = v9->__r_.__value_.__r.__words[2];
  v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x1DF0EC9E4](exception, &v15);
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage(this);
}

void sub_1DE3FA758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v34;
  int v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;

  if (*(char *)(v36 - 57) < 0)
    operator delete(*(void **)(v36 - 80));
  if (a33 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v35 & 1) == 0)
    {
LABEL_14:
      v38 = MEMORY[0x1E0DE4F60];
      v39 = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)v33 = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)(v33 + *(_QWORD *)(v39 - 24)) = *(_QWORD *)(v38 + 24);
      *(_QWORD *)(v33 + 8) = MEMORY[0x1E0DE4FB8] + 16;
      if (*(char *)(v33 + 95) < 0)
        operator delete(*(void **)(v33 + 72));
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1DF0ECF6C](v33 + 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v34);
  goto LABEL_14;
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

uint64_t kaldi::Rand(unsigned int *a1)
{
  const char *v2;
  uint64_t v3;
  const char *v4;

  if (a1)
    return rand_r(a1);
  if (pthread_mutex_lock(&kaldi::_RandMutex))
    kaldi::KaldiAssertFailure_((kaldi *)"Rand", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/base/kaldi-math.cc", (const char *)0x63, "rs == 0", v2);
  if ((kaldi::_SrandCalled & 1) == 0)
  {
    kaldi::_RandSeed = 1;
    srand(1u);
    kaldi::_SrandCalled = 1;
  }
  v3 = rand_r((unsigned int *)&kaldi::_RandSeed);
  if (pthread_mutex_unlock(&kaldi::_RandMutex))
    kaldi::KaldiAssertFailure_((kaldi *)"Rand", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/base/kaldi-math.cc", (const char *)0x6D, "rs == 0", v4);
  return v3;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void std::vector<int>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

uint64_t std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1DE3FAB6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DE3FABDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t std::vector<std::vector<int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<int>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<int>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<int>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void std::vector<std::vector<int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

_QWORD *kaldi::CharToString@<X0>(kaldi *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v4;
  int v5;
  char __str[20];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = *(char *)this;
  if ((v4 & 0x80000000) != 0)
    v5 = __maskrune(v4, 0x40000uLL);
  else
    v5 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v4 + 60) & 0x40000;
  if (v5)
    snprintf(__str, 0x14uLL, "'%c'");
  else
    snprintf(__str, 0x14uLL, "[character %d]");
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

void kaldi::UniformRandomNumber::SetRandomSeeds(kaldi::UniformRandomNumber *this, int a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;

  v6 = *((_QWORD *)this + 5);
  v4 = (char *)this + 40;
  v5 = v6;
  v7 = (_DWORD *)*((_QWORD *)v4 - 2);
  *((_QWORD *)v4 - 1) = v7;
  if ((unint64_t)v7 >= v6)
  {
    v9 = v5 - (_QWORD)v7;
    v10 = v9 >> 1;
    if ((unint64_t)(v9 >> 1) <= 1)
      v10 = 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v4, v11);
    v13 = (char *)*((_QWORD *)this + 3);
    v14 = (char *)*((_QWORD *)this + 4);
    v16 = &v12[v15];
    *v12 = a2;
    v8 = v12 + 1;
    while (v14 != v13)
    {
      v17 = *((_DWORD *)v14 - 1);
      v14 -= 4;
      *--v12 = v17;
    }
    *((_QWORD *)this + 3) = v12;
    *((_QWORD *)this + 4) = v8;
    *((_QWORD *)this + 5) = v16;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 4) = v8;
  *(_QWORD *)this = 1;
}

float kaldi::UniformRandomNumber::RandUniform(kaldi::UniformRandomNumber *this, unint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_QWORD *)this <= a2)
    kaldi::KaldiAssertFailure_((kaldi *)"RandUniform", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/base/random-number.cc", (const char *)0xAE, "sequence_id < num_sequences_", a5);
  return (float)rand_r((unsigned int *)(*((_QWORD *)this + 3) + 4 * a2)) * 4.6566e-10;
}

kaldi::GaussRandomNumber *kaldi::GaussRandomNumber::GaussRandomNumber(kaldi::GaussRandomNumber *this, const kaldi::UniformRandomNumber *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = v4;
  v5 = (_QWORD *)((char *)this + 16);
  std::vector<std::vector<float>>::vector((_QWORD *)this + 2, v4);
  std::vector<short>::vector((_QWORD *)this + 5, *(_QWORD *)a2);
  *((_DWORD *)this + 16) = 2;
  if (*((_QWORD *)this + 1))
  {
    v6 = 0;
    v7 = 0;
    v8 = 2;
    do
    {
      std::vector<float>::resize(*v5 + v6, v8);
      v8 = *((_DWORD *)this + 16);
      *(_WORD *)(*((_QWORD *)this + 5) + 2 * v7++) = v8;
      v6 += 24;
    }
    while (*((_QWORD *)this + 1) > v7);
  }
  return this;
}

void sub_1DE3FB14C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void kaldi::GaussRandomNumber::Rand(kaldi::GaussRandomNumber *this, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6;
  uint64_t v7;
  int v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float *v17;

  if ((a2 & 0x80000000) != 0 || *((_QWORD *)this + 1) <= (unint64_t)a2)
    kaldi::KaldiAssertFailure_((kaldi *)"Rand", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/base/random-number.cc", (const char *)0xC9, "sequence_id >= 0 && sequence_id < num_sequences_", a5);
  v6 = a2;
  v7 = *((_QWORD *)this + 5);
  v8 = *(__int16 *)(v7 + 2 * a2);
  if (*((_DWORD *)this + 16) <= v8)
  {
    do
    {
      v9 = kaldi::UniformRandomNumber::RandUniform(*(kaldi::UniformRandomNumber **)this, v6, a3, a4, a5) * 2.0 + -1.0;
      v13 = kaldi::UniformRandomNumber::RandUniform(*(kaldi::UniformRandomNumber **)this, v6, v10, v11, v12) * 2.0
          + -1.0;
      v14 = (float)(v13 * v13) + (float)(v9 * v9);
    }
    while (v14 >= 1.0);
    v15 = logf(v14) * -2.0 / v14;
    v16 = sqrtf(v15);
    v17 = *(float **)(*((_QWORD *)this + 2) + 24 * v6);
    *v17 = v16 * v9;
    v17[1] = v16 * v13;
    *(_WORD *)(*((_QWORD *)this + 5) + 2 * v6) = 1;
  }
  else
  {
    *(_WORD *)(v7 + 2 * a2) = v8 + 1;
  }
}

_QWORD *std::vector<std::vector<float>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1DE3FB370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<float>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

_QWORD *std::vector<short>::vector(_QWORD *a1, uint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<short>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_1DE3FB46C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<short>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

uint64_t kaldi::CuSubMatrix<float>::~CuSubMatrix(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1EA926508;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return kaldi::CuMatrixBase<float>::~CuMatrixBase();
}

uint64_t kaldi::WriteBasicType<int>(_QWORD *a1, int a2)
{
  uint64_t result;
  _QWORD *v4;
  std::runtime_error *exception;

  if (a2)
  {
    std::ostream::put();
    result = std::ostream::write();
  }
  else
  {
    v4 = (_QWORD *)std::ostream::operator<<();
    result = (uint64_t)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
  }
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteBasicType.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1DE3FB6C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::ReadBasicType<int>(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6;
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v12[52];

  v12[51] = *MEMORY[0x1E0C80C00];
  if (!a3)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadBasicType", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", (const char *)0x43, "t != NULL", a5);
  if (a2)
  {
    v6 = std::istream::get();
    if (v6 == -1)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "ReadBasicType", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", 73);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "ReadBasicType: encountered end of stream.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
    }
    if (v6 << 24 != 0x4000000)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "ReadBasicType", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", 79);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ReadBasicType: did not get expected integer type, ", 50);
      v9 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" vs. ", 5);
      v10 = (_QWORD *)std::ostream::operator<<();
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)".  You can change this code to successfully", 43);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, " read it later, if needed.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
    }
    result = std::istream::read();
  }
  else
  {
    result = MEMORY[0x1DF0ECC30](a1, a3);
  }
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "ReadBasicType", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", 97);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Read failure in ReadBasicType, file position is ", 48);
    std::istream::tellg();
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", next char is ", 15);
    std::istream::peek();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  return result;
}

void sub_1DE3FB8FC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<kaldi::CuMatrix<float>>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;

  v2 = result;
  v3 = result[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *result) >> 4);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return (uint64_t *)std::vector<kaldi::CuMatrix<float>>::__append(result, v6);
  if (!v5)
  {
    v7 = *result + 48 * a2;
    if (v3 != v7)
    {
      v8 = (_QWORD *)(v3 - 48);
      v9 = (_QWORD *)(v3 - 48);
      do
      {
        v10 = *v9;
        v9 -= 6;
        result = (uint64_t *)(*(uint64_t (**)(_QWORD *))(v10 + 16))(v8);
        v11 = v8 == (_QWORD *)v7;
        v8 = v9;
      }
      while (!v11);
    }
    v2[1] = v7;
  }
  return result;
}

void kaldi::CuSubMatrix<float>::Read()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "Read", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", 1029);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Function not implemented for this class");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::CuSubMatrix<float>::~CuSubMatrix(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1EA926508;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase();
  JUMPOUT(0x1DF0ED014);
}

void std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 48;
      v7 = v4 - 48;
      do
      {
        v8 = *(_QWORD *)v7;
        v7 -= 48;
        (*(void (**)(char *))(v8 + 16))(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<kaldi::CuMatrix<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD v18[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 48 * a2;
      v14 = 48 * a2;
      do
      {
        *(_OWORD *)(v7 + 24) = 0uLL;
        *(_OWORD *)(v7 + 8) = 0uLL;
        *(_QWORD *)v7 = &unk_1EA92DFA8;
        *(_BYTE *)(v7 + 40) = 0;
        v7 += 48;
        v14 -= 48;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    v18[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>>(result, v11);
    else
      v12 = 0;
    v15 = &v12[48 * v8];
    v18[0] = v12;
    v18[1] = v15;
    v18[3] = &v12[48 * v11];
    v16 = &v15[48 * a2];
    v17 = 48 * a2;
    do
    {
      *(_OWORD *)(v15 + 24) = 0uLL;
      *(_OWORD *)(v15 + 8) = 0uLL;
      *(_QWORD *)v15 = &unk_1EA92DFA8;
      v15[40] = 0;
      v15 += 48;
      v17 -= 48;
    }
    while (v17);
    v18[2] = v16;
    std::vector<kaldi::CuMatrix<float>>::__swap_out_circular_buffer(a1, v18);
    return std::__split_buffer<kaldi::CuMatrix<float>>::~__split_buffer((uint64_t)v18);
  }
  return result;
}

void sub_1DE3FBC2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::CuMatrix<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::CuMatrix<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,std::reverse_iterator<kaldi::CuMatrix<float>*>,std::reverse_iterator<kaldi::CuMatrix<float>*>,std::reverse_iterator<kaldi::CuMatrix<float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,std::reverse_iterator<kaldi::CuMatrix<float>*>,std::reverse_iterator<kaldi::CuMatrix<float>*>,std::reverse_iterator<kaldi::CuMatrix<float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = a7 - 48;
  while (a3 + v10 != a5)
  {
    v12 = v11 + v10;
    v10 -= 48;
    kaldi::CuMatrix<float>::CuMatrix(v12, v10 + a3, 111);
  }
  return a6;
}

uint64_t std::__split_buffer<kaldi::CuMatrix<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(_QWORD *)(i - 48);
    *(_QWORD *)(a1 + 16) = i - 48;
    (*(void (**)(void))(v4 + 16))();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t kaldi::CuSubMatrix<float>::CuSubMatrix(uint64_t result, uint64_t a2, int a3, int a4, const char *a5, int a6)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v6 = *(_DWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8) + 4 * v6 * a3 + 4 * (int)a5;
  v8 = *(_DWORD *)(a2 + 28) - (_DWORD)a5 - v6 * a3;
  v9 = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(result + 16) = a6;
  *(_DWORD *)(result + 20) = a4;
  *(_DWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 28) = v8;
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)result = &unk_1EA926508;
  *(_QWORD *)(result + 8) = v7;
  if (((a5 | a3) & 0x80000000) != 0
    || a4 + a3 > *(_DWORD *)(a2 + 20)
    || a6 + (int)a5 > *(_DWORD *)(a2 + 16))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubMatrix", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x39B, "(row_offset >= 0) && (col_offset >= 0) && (row_offset + num_rows <= mat.num_rows_) && (col_offset + num_cols <= mat.num_cols_)", a5);
  }
  return result;
}

void sub_1DE3FBE8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::cu::RegularizeL1<float>(uint64_t a1, uint64_t a2, float a3, float a4, uint64_t a5, uint64_t a6, const char *a7)
{
  uint64_t v11;
  uint64_t result;
  signed int v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  const char *v17;
  signed int v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  float v23;
  float v24;
  uint64_t v25;
  const char *v26;
  float v27;
  uint64_t v28;
  const char *v29;
  _BOOL4 v30;
  uint64_t v31;
  const char *v32;
  float *v33;
  uint64_t v34;
  const char *v35;

  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20) || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"RegularizeL1", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-math.cc", (const char *)0x2F, "SameDim(*weight, *grad)", a7);
  v11 = a1 + 8;
  result = kaldi::MatrixBase<float>::NumRows(a1 + 8);
  if ((int)result >= 1)
  {
    v13 = 0;
    v14 = a2 + 8;
    v15 = -a4;
    do
    {
      if ((int)kaldi::MatrixBase<float>::NumCols(v11) >= 1)
      {
        v18 = 0;
        do
        {
          if (*(float *)kaldi::MatrixBase<float>::operator()(v11, v13, v18, v16, v17) != 0.0)
          {
            if (*(float *)kaldi::MatrixBase<float>::operator()(v11, v13, v18, v19, v20) >= 0.0)
              v23 = a3;
            else
              v23 = -a3;
            v24 = *(float *)kaldi::MatrixBase<float>::operator()(v11, v13, v18, v21, v22);
            v27 = *(float *)kaldi::MatrixBase<float>::operator()(v11, v13, v18, v25, v26);
            v30 = (float)((float)(v27
                                + (float)(v15 * *(float *)kaldi::MatrixBase<float>::operator()(v14, v13, v18, v28, v29)))
                        - v23) > 0.0;
            v33 = (float *)kaldi::MatrixBase<float>::operator()(v11, v13, v18, v31, v32);
            if (v24 > 0.0 == v30)
            {
              *v33 = *v33 - v23;
            }
            else
            {
              *v33 = 0.0;
              *(_DWORD *)kaldi::MatrixBase<float>::operator()(v14, v13, v18, v34, v35) = 0;
            }
          }
          ++v18;
        }
        while (v18 < (int)kaldi::MatrixBase<float>::NumCols(v11));
      }
      ++v13;
      result = kaldi::MatrixBase<float>::NumRows(v11);
    }
    while (v13 < (int)result);
  }
  return result;
}

uint64_t kaldi::cu::Splice<float>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  uint64_t i;
  int v13;
  const char *v14;
  uint64_t v15;
  int v16;
  int v17;
  const char *v18;
  void *v19;
  const void *v20;
  int v21;

  v5 = *a2;
  if ((_DWORD)v5 * *(_DWORD *)(a1 + 16) != *(_DWORD *)(a3 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"Splice", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-math.cc", (const char *)0x7F, "src.NumCols()*frame_offsets.Dim() == tgt->NumCols()", a5);
  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a3 + 20))
    kaldi::KaldiAssertFailure_((kaldi *)"Splice", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-math.cc", (const char *)0x80, "src.NumRows() == tgt->NumRows()", a5);
  v7 = *((_QWORD *)a2 + 1);
  v8 = a3 + 8;
  result = kaldi::MatrixBase<float>::NumRows(a3 + 8);
  if ((int)result >= 1)
  {
    v10 = 0;
    v11 = a1 + 8;
    do
    {
      if ((int)v5 >= 1)
      {
        for (i = 0; i != v5; ++i)
        {
          v13 = (*(_DWORD *)(v7 + 4 * i) + v10) & ~((*(_DWORD *)(v7 + 4 * i) + v10) >> 31);
          if (v13 >= (int)kaldi::MatrixBase<float>::NumRows(v11))
            v13 = kaldi::MatrixBase<float>::NumRows(v11) - 1;
          if (*(_DWORD *)(v8 + 12) <= v10)
            kaldi::KaldiAssertFailure_((kaldi *)"RowData", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xBC, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v14);
          v15 = *(_QWORD *)v8;
          v16 = *(_DWORD *)(v8 + 16);
          v17 = kaldi::MatrixBase<float>::NumCols(v11);
          if (*(_DWORD *)(v11 + 12) <= v13)
            kaldi::KaldiAssertFailure_((kaldi *)"RowData", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xC3, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v18);
          v19 = (void *)(v15 + 4 * v16 * v10 + 4 * v17 * (int)i);
          v20 = (const void *)(*(_QWORD *)v11 + 4 * *(_DWORD *)(v11 + 16) * v13);
          v21 = kaldi::MatrixBase<float>::NumCols(v11);
          memcpy(v19, v20, 4 * v21);
        }
      }
      ++v10;
      result = kaldi::MatrixBase<float>::NumRows(v8);
    }
    while (v10 < (int)result);
  }
  return result;
}

uint64_t kaldi::cu::Copy<float>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  const char *v11;
  signed int v12;
  uint64_t v13;
  uint64_t i;
  float v15;
  uint64_t v16;
  const char *v17;

  v5 = *a2;
  if ((_DWORD)v5 != *(_DWORD *)(a3 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"Copy", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-math.cc", (const char *)0x9F, "copy_from_indices.Dim() == tgt->NumCols()", a5);
  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a3 + 20))
    kaldi::KaldiAssertFailure_((kaldi *)"Copy", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-math.cc", (const char *)0xA0, "src.NumRows() == tgt->NumRows()", a5);
  v7 = *((_QWORD *)a2 + 1);
  v8 = a3 + 8;
  result = kaldi::MatrixBase<float>::NumRows(a3 + 8);
  if ((int)result >= 1)
  {
    v12 = 0;
    v13 = a1 + 8;
    do
    {
      if ((int)v5 >= 1)
      {
        for (i = 0; i != v5; ++i)
        {
          v15 = kaldi::MatrixBase<float>::operator()(v13, v12, *(_DWORD *)(v7 + 4 * i), v10, v11);
          *(float *)kaldi::MatrixBase<float>::operator()(v8, v12, i, v16, v17) = v15;
        }
      }
      ++v12;
      result = kaldi::MatrixBase<float>::NumRows(v8);
    }
    while (v12 < (int)result);
  }
  return result;
}

unsigned int *kaldi::CuMatrixBase<float>::CopyFromMat<float>(unsigned int *result, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a2 + 20))
    return kaldi::MatrixBase<float>::CopyFromMat<float>(result + 2, a2 + 8, a3, a4, a5);
  return result;
}

uint64_t kaldi::CuMatrix<float>::~CuMatrix(uint64_t a1)
{
  void *v2;
  _QWORD *v3;

  *(_QWORD *)a1 = &unk_1EA92DFA8;
  v3 = (_QWORD *)(a1 + 8);
  v2 = *(void **)(a1 + 8);
  if (v2 && !*(_BYTE *)(a1 + 40))
    free(v2);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  return a1;
}

{
  void *v2;
  _QWORD *v3;

  *(_QWORD *)a1 = &unk_1EA92DFA8;
  v3 = (_QWORD *)(a1 + 8);
  v2 = *(void **)(a1 + 8);
  if (v2 && !*(_BYTE *)(a1 + 40))
    free(v2);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  return a1;
}

uint64_t kaldi::CuMatrix<float>::CuMatrix<float>(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1EA92DFA8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a4;
  if (a3 == 111)
  {
    v7 = kaldi::MatrixBase<float>::NumRows(a2);
    v8 = kaldi::MatrixBase<float>::NumCols(a2);
  }
  else
  {
    v7 = kaldi::MatrixBase<float>::NumCols(a2);
    v8 = kaldi::MatrixBase<float>::NumRows(a2);
  }
  kaldi::CuMatrix<float>::Resize(a1, v7, v8, 1u, 0);
  kaldi::MatrixBase<float>::CopyFromMat<float>((unsigned int *)(a1 + 8), a2, a3, v9, v10);
  return a1;
}

void kaldi::CuMatrix<float>::Resize(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const char *a5)
{
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30[8];
  uint64_t v31;
  __int128 v32;
  char v33;

  if (a4 >= 4)
    kaldi::KaldiAssertFailure_((kaldi *)"Resize", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x49, "resize_type == kSetZero || resize_type == kUndefined || resize_type == kSetZeroIfNewMemory || resize_type == kCopyData", a5);
  if ((_DWORD)a3 * (_DWORD)a2)
  {
    v9 = a4;
    if ((_DWORD)a5)
      v10 = *(_DWORD *)(a1 + 24) != a3;
    else
      v10 = 0;
    if (a4 == 3)
    {
      if (*(_DWORD *)(a1 + 20) == (_DWORD)a2 && ((*(_DWORD *)(a1 + 16) == (_DWORD)a3) & ~v10) != 0)
        return;
      v9 = 0;
    }
    v11 = *(_DWORD *)(a1 + 24);
    if (v11 < 1)
      v12 = 0;
    else
      v12 = *(_DWORD *)(a1 + 28) / v11;
    if (v11 < (int)a3)
      goto LABEL_19;
    if (v12 < (int)a2)
      LOBYTE(v10) = 1;
    if ((v10 & 1) != 0)
    {
LABEL_19:
      if (v9 == 2)
      {
        v14 = *(_DWORD *)(a1 + 16);
        v13 = *(_DWORD *)(a1 + 20);
        if (v13 >= (int)a2)
          v15 = a2;
        else
          v15 = v13;
        if (v14 >= (int)a3)
          v16 = a3;
        else
          v16 = v14;
        kaldi::Matrix<float>::Matrix((uint64_t)&v31, a2, a3, 0, a5);
        kaldi::SubMatrix<float>::SubMatrix(v30, &v31, 0, v15, 0, v16);
        v19 = *(_QWORD *)(a1 + 8);
        v20 = *(_QWORD *)(a1 + 32);
        v26 = v16;
        v27 = v15;
        v28 = *(_QWORD *)(a1 + 24);
        v29 = v20;
        v25 = v19;
        if ((int)v15 > *(_DWORD *)(a1 + 20) || (int)v16 > *(_DWORD *)(a1 + 16))
          kaldi::KaldiAssertFailure_((kaldi *)"CuSubMatrix", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x39B, "(row_offset >= 0) && (col_offset >= 0) && (row_offset + num_rows <= mat.num_rows_) && (col_offset + num_cols <= mat.num_cols_)", v18);
        kaldi::MatrixBase<float>::CopyFromMat<float>(v30, (uint64_t)&v25, 111, v17, v18);
        kaldi::CuMatrixBase<float>::~CuMatrixBase(v30);
      }
      else
      {
        v22 = (_QWORD *)(a1 + 8);
        v21 = *(void **)(a1 + 8);
        if (v21 && !*(_BYTE *)(a1 + 40))
          free(v21);
        *v22 = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        kaldi::Matrix<float>::Matrix((uint64_t)&v31, a2, a3, v9, a5);
      }
      v23 = v31;
      v31 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v23;
      v24 = v32;
      v32 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(a1 + 16) = v24;
      LOBYTE(v23) = v33;
      v33 = *(_BYTE *)(a1 + 40);
      *(_BYTE *)(a1 + 40) = v23;
      kaldi::Matrix<float>::~Matrix((uint64_t)&v31);
    }
    else
    {
      *(_DWORD *)(a1 + 16) = a3;
      *(_DWORD *)(a1 + 20) = a2;
      if (!v9)
        kaldi::MatrixBase<float>::SetZero(a1 + 8);
    }
  }
  else
  {
    if (a3 | a2)
      kaldi::KaldiAssertFailure_((kaldi *)"Resize", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x4F, "rows == 0 && cols == 0", a5);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

void sub_1DE3FC6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  kaldi::CuMatrixBase<float>::~CuMatrixBase((uint64_t *)va);
  kaldi::Matrix<float>::~Matrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

unsigned int *kaldi::CuMatrixBase<float>::CopyFromMat(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::MatrixBase<float>::CopyFromMat<float>((unsigned int *)(a1 + 8), a2, a3, a4, a5);
}

unsigned int *kaldi::CuMatrixBase<float>::CopyToMat<float>(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::MatrixBase<float>::CopyFromMat<float>(a2, a1 + 8, a3, a4, a5);
}

void *kaldi::VectorBase<float>::CopyRowsFromMat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 20) * *(_DWORD *)(a2 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"CopyRowsFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x7D9, "dim_ == mat.NumCols() * mat.NumRows()", a5);
  return kaldi::VectorBase<float>::CopyRowsFromMat((char **)a1, a2 + 8);
}

uint64_t kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a1, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16));
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(v4, a2 + 8);
  return a1;
}

{
  int v4;
  int v5;

  v4 = kaldi::MatrixBase<float>::NumRows(a2);
  v5 = kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a1, v4, v5);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(a1, a2);
  return a1;
}

void sub_1DE3FC764(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::QuantizedMatrix<short>::QuantizedMatrix(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = kaldi::QuantizedMatrix<short>::QuantizedMatrix(a1, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16));
  kaldi::QuantizedMatrixBase<short>::CopyFromMat(v4, a2 + 8);
  return a1;
}

{
  int v4;
  int v5;

  v4 = kaldi::MatrixBase<float>::NumRows(a2);
  v5 = kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(a1, v4, v5);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat(a1, a2);
  return a1;
}

void sub_1DE3FC7B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(uint64_t a1, uint64_t a2)
{
  int *v4;

  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(a1, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 16));
  kaldi::VectorwiseQuantizedMatrix<signed char>::CopyFromMat(v4, a2 + 8);
  return a1;
}

void sub_1DE3FC7FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::VectorwiseQuantizedMatrix<signed char>::~VectorwiseQuantizedMatrix(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::VectorwiseQuantizedMatrix<signed char>::~VectorwiseQuantizedMatrix(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    MEMORY[0x1DF0ED014](v2, 0x1000C4077774924);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    MEMORY[0x1DF0ED014](v3, 0x1000C4052888210);
  return a1;
}

uint64_t kaldi::VectorwiseQuantizedMatrix<short>::~VectorwiseQuantizedMatrix(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    MEMORY[0x1DF0ED014](v2, 0x1000C40BDFB0063);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    MEMORY[0x1DF0ED014](v3, 0x1000C4052888210);
  return a1;
}

void kaldi::QuantizedMatrixBase<signed char>::AddMat()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "AddMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", 2422);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::QuantizedMatrixBase<short>::AddMat()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "AddMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", 2422);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::CuMatrix<float>::CuMatrix(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, const char *a6)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1EA92DFA8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a5;
  kaldi::CuMatrix<float>::Resize(a1, a2, a3, a4, a6);
  return a1;
}

uint64_t kaldi::CuMatrix<float>::CuMatrix(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  const char *v10;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_1EA92DFA8;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (a3 == 111)
  {
    v7 = *(unsigned int *)(a2 + 16);
    v6 = *(unsigned int *)(a2 + 20);
    v8 = *(_DWORD *)(a2 + 24) == (_DWORD)v7;
  }
  else
  {
    v6 = *(unsigned int *)(a2 + 16);
    v7 = *(unsigned int *)(a2 + 20);
    v8 = 0;
  }
  kaldi::CuMatrix<float>::Resize(a1, v6, v7, 1u, (const char *)v8);
  if (*(_DWORD *)(a2 + 20))
    kaldi::MatrixBase<float>::CopyFromMat<float>((unsigned int *)(a1 + 8), a2 + 8, a3, v9, v10);
  return a1;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_1EA92DFA8;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (a3 == 111)
  {
    v7 = *(unsigned int *)(a2 + 16);
    v6 = *(unsigned int *)(a2 + 20);
  }
  else
  {
    v6 = *(unsigned int *)(a2 + 16);
    v7 = *(unsigned int *)(a2 + 20);
  }
  kaldi::CuMatrix<float>::Resize(a1, v6, v7, 1u, 0);
  if (*(_DWORD *)(a2 + 20))
    kaldi::MatrixBase<float>::CopyFromMat<float>((unsigned int *)(a1 + 8), a2 + 8, a3, v8, v9);
  return a1;
}

uint64_t kaldi::CuMatrix<float>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const char *v5;

  if (!*(_QWORD *)(a1 + 32))
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  kaldi::CuMatrix<float>::Resize(a1, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 1u, 0);
  if (*(_DWORD *)(a2 + 20))
    kaldi::MatrixBase<float>::CopyFromMat<float>((unsigned int *)(a1 + 8), a2 + 8, 111, v4, v5);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;

  v4 = kaldi::MatrixBase<float>::NumRows(a2);
  v5 = kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::CuMatrix<float>::Resize(a1, v4, v5, 1u, 0);
  kaldi::MatrixBase<float>::CopyFromMat<float>((unsigned int *)(a1 + 8), a2, 111, v6, v7);
  return a1;
}

void kaldi::CuMatrix<float>::Transpose(uint64_t a1)
{
  void *v2;
  __int128 v3;
  uint64_t v4;
  char v5;
  int v6;
  void *v7;
  void *v8;
  __int128 v9;
  uint64_t v10;
  char v11;

  if (*(_DWORD *)(a1 + 20))
  {
    kaldi::CuMatrix<float>::CuMatrix((uint64_t)&v7, a1, 112);
    v2 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v3 = v9;
    v9 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v3;
    v4 = v10;
    v10 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v4;
    v5 = v11;
    v6 = *(unsigned __int8 *)(a1 + 40);
    v11 = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v5;
    v7 = &unk_1EA92DFA8;
    v8 = v2;
    if (v2)
    {
      if (!v6)
        free(v2);
    }
  }
}

uint64_t kaldi::CuMatrix<float>::Swap(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(result + 20);
  *(_DWORD *)(result + 20) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(result + 28);
  *(_DWORD *)(result + 28) = v2;
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = v3;
  LOBYTE(v3) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(result + 40);
  *(_BYTE *)(result + 40) = v3;
  return result;
}

void kaldi::CuMatrixBase<float>::SetZero(uint64_t a1)
{
  kaldi::MatrixBase<float>::SetZero(a1 + 8);
}

uint64_t kaldi::CuMatrix<float>::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  __int128 v9;
  char v10;
  uint64_t v12;
  __int128 v13;
  char v14;

  kaldi::Matrix<float>::Matrix((uint64_t)&v12, *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 16), 1, (const char *)(*(_DWORD *)(a1 + 24) == *(_DWORD *)(a1 + 16)));
  kaldi::Matrix<float>::Read((uint64_t)&v12, a2, a3, 0, a4);
  v8 = *(void **)(a1 + 8);
  if (v8 && !*(_BYTE *)(a1 + 40))
    free(v8);
  *(_QWORD *)(a1 + 8) = v12;
  v9 = v13;
  v12 = 0;
  v13 = 0uLL;
  *(_OWORD *)(a1 + 16) = v9;
  v10 = v14;
  v14 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v10;
  return kaldi::Matrix<float>::~Matrix((uint64_t)&v12);
}

void sub_1DE3FCD88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::CuMatrix<float>::~CuMatrix(uint64_t a1)
{
  void *v2;
  _QWORD *v3;

  *(_QWORD *)a1 = &unk_1EA92DFA8;
  v3 = (_QWORD *)(a1 + 8);
  v2 = *(void **)(a1 + 8);
  if (v2 && !*(_BYTE *)(a1 + 40))
    free(v2);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::CuMatrix<float>::DataUnowned(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t kaldi::CuMatrixBase<float>::CopyCols(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, const char *a5)
{
  return kaldi::MatrixBase<float>::CopyCols(a1 + 8, (uint64_t *)(a2 + 8), a3, a4, a5);
}

void *kaldi::CuArray<int>::CopyToVec(const void **a1, std::vector<int> *this)
{
  std::vector<int>::pointer begin;
  unint64_t v5;
  std::vector<int>::size_type v6;

  begin = this->__begin_;
  v5 = (unint64_t)((char *)this->__end_ - (char *)this->__begin_) >> 2;
  v6 = *(int *)a1;
  if ((_DWORD)v6 != (_DWORD)v5)
  {
    std::vector<int>::resize(this, v6);
    begin = this->__begin_;
    LODWORD(v5) = *(_DWORD *)a1;
  }
  return memcpy(begin, a1[1], 4 * (int)v5);
}

uint64_t kaldi::CuMatrixBase<float>::CopyIndexedItems(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int a5)
{
  const char *v6;

  v6 = (const char *)*a3;
  if ((_DWORD)v6 != *(_DWORD *)a4)
    kaldi::KaldiAssertFailure_((kaldi *)"CopyIndexedItems", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x820, "row_index.Dim() == col_index.Dim()", v6);
  return kaldi::MatrixBase<float>::CopyIndexedItems(a1 + 8, (uint64_t *)(a2 + 8), *((_QWORD *)a3 + 1), *(_QWORD *)(a4 + 8), v6, a5);
}

void kaldi::CuMatrixBase<float>::CopyRows(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, const char *a5)
{
  kaldi::MatrixBase<float>::CopyRows((char **)(a1 + 8), a2 + 8, a3, a4, a5);
}

void kaldi::CuMatrixBase<float>::CopySelectedRows(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  int v5;

  v5 = *(_DWORD *)(a2 + 20);
  if (*(_DWORD *)(a1 + 20) < v5)
    kaldi::KaldiAssertFailure_((kaldi *)"CopySelectedRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x847, "num_rows_ >= src.NumRows()", a5);
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"CopySelectedRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x848, "num_cols_ == src.NumCols()", a5);
  if (*(_DWORD *)(a3 + 16) != v5)
    kaldi::KaldiAssertFailure_((kaldi *)"CopySelectedRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x849, "selection.Dim() == src.NumRows()", a5);
  kaldi::MatrixBase<float>::CopySelectedRows(a1 + 8, a2 + 8, a3 + 8, a4, a5);
}

uint64_t kaldi::CuMatrixBase<float>::AddToDiag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6, float a7)
{
  return kaldi::MatrixBase<float>::AddToDiag(a1 + 8, a2 + 8, a6, a7, a3, a4, a5);
}

uint64_t kaldi::CuMatrixBase<float>::SetStride(uint64_t result, int a2)
{
  int v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD v9[34];

  v2 = *(_DWORD *)(result + 24);
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "SetStride", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", 531);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"New stride (", 12);
      v3 = (_QWORD *)std::ostream::operator<<();
      v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") must not be smaller than", 26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" the current stride (", 21);
      v5 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, ").");
      goto LABEL_8;
    }
    if (a2 % v2)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "SetStride", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", 536);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"New stride (", 12);
      v6 = (_QWORD *)std::ostream::operator<<();
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)") must be a multiple of ", 24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"current stride (", 16);
      v8 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, ").");
LABEL_8:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
    }
    *(_DWORD *)(result + 20) = (*(_DWORD *)(result + 20) - 1) / (a2 / v2) + 1;
    *(_DWORD *)(result + 24) = a2;
  }
  return result;
}

void kaldi::CuMatrixBase<float>::AddMat(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5, float a6, float a7)
{
  kaldi::MatrixBase<float>::AddMat(a1 + 8, a2 + 8, a3, a6, a7, a4, a5);
}

void **kaldi::CuMatrixBase<float>::CopyRowsFromVec(uint64_t a1, uint64_t a2)
{
  return kaldi::MatrixBase<float>::CopyRowsFromVec((void **)(a1 + 8), (char **)(a2 + 8));
}

void **kaldi::CuMatrixBase<float>::CopyRowsFromVec(uint64_t a1, char **a2)
{
  return kaldi::MatrixBase<float>::CopyRowsFromVec((void **)(a1 + 8), a2);
}

void kaldi::CuMatrixBase<float>::Sigmoid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20) || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"Sigmoid", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x4ED, "SameDim(*this, src)", a5);
  kaldi::MatrixBase<float>::Sigmoid(a1 + 8, a2 + 8, a3, a4, a5);
}

float *kaldi::CuMatrixBase<float>::GroupPnorm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  if (*(_DWORD *)(a2 + 16) % *(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
    kaldi::KaldiAssertFailure_((kaldi *)"GroupPnorm", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x538, "src.NumCols() == this->NumCols() * group_size && this->NumRows() == src.NumRows()", a5);
  return kaldi::MatrixBase<float>::GroupPnorm((float *)(a1 + 8), a2 + 8, a6, a3, a4, a5);
}

uint64_t kaldi::CuMatrixBase<float>::GroupPnormDeriv(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  int v6;

  v6 = *(_DWORD *)(a3 + 16);
  if (v6 <= 0)
    kaldi::KaldiAssertFailure_((kaldi *)"GroupPnormDeriv", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x310, "src2.NumCols() > 0", a5);
  if (*(_DWORD *)(a1 + 16) % v6)
    kaldi::KaldiAssertFailure_((kaldi *)"GroupPnormDeriv", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x312, "this->NumCols() == src2.NumCols() * group_size", a5);
  return kaldi::MatrixBase<float>::GroupPnormDeriv(a1 + 8, a2 + 8, a3 + 8, a4, a5, a6);
}

void kaldi::CuMatrixBase<float>::Tanh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20) || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"Tanh", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x5C2, "SameDim(*this, src)", a5);
  kaldi::MatrixBase<float>::Tanh(a1 + 8, a2 + 8, a3, a4, a5);
}

void kaldi::CuMatrixBase<float>::ApplyTanh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::MatrixBase<float>::ApplyTanh(a1 + 8, a2, a3, a4, a5);
}

uint64_t *kaldi::CuMatrixBase<float>::DiffSigmoid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  int v6;
  BOOL v7;
  BOOL v8;

  v6 = *(_DWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 20);
  v7 = v5 == *(_DWORD *)(a2 + 20) && v6 == *(_DWORD *)(a2 + 16);
  if (!v7 || (v5 == *(_DWORD *)(a3 + 20) ? (v8 = v6 == *(_DWORD *)(a3 + 16)) : (v8 = 0), !v8))
    kaldi::KaldiAssertFailure_((kaldi *)"DiffSigmoid", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x59B, "SameDim(*this, value) && SameDim(*this, diff)", a5);
  return kaldi::MatrixBase<float>::DiffSigmoid((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8), (uint64_t *)(a3 + 8), a4, a5);
}

uint64_t kaldi::CuMatrixBase<float>::DiffRelu(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  uint64_t v6;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v6 = *(unsigned int *)(result + 16);
  v5 = *(_DWORD *)(result + 20);
  if (v5 != *(_DWORD *)(a2 + 20) || (_DWORD)v6 != *(_DWORD *)(a2 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"DiffRelu", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x5A9, "SameDim(*this, value)", a5);
  if (v5 != *(_DWORD *)(a3 + 20) || (_DWORD)v6 != *(_DWORD *)(a3 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"DiffRelu", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x5AA, "SameDim(*this, diff)", a5);
  if (v5 >= 1)
  {
    v9 = 0;
    v10 = *(_QWORD *)(a3 + 8);
    v11 = *(_QWORD *)(a2 + 8);
    v12 = *(_QWORD *)(result + 8);
    v13 = 4 * *(int *)(result + 24);
    v14 = 4 * *(int *)(a3 + 24);
    v15 = 4 * *(int *)(a2 + 24);
    do
    {
      if ((int)v6 >= 1)
      {
        result = 0;
        do
        {
          v16 = 0;
          if (*(float *)(v11 + result) > 0.0)
            v16 = *(_DWORD *)(v10 + result);
          *(_DWORD *)(v12 + result) = v16;
          result += 4;
        }
        while (4 * v6 != result);
      }
      ++v9;
      v12 += v13;
      v10 += v14;
      v11 += v15;
    }
    while (v9 != v5);
  }
  return result;
}

uint64_t *kaldi::CuMatrixBase<float>::DiffTanh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::MatrixBase<float>::DiffTanh((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8), (uint64_t *)(a3 + 8), a4, a5);
}

void kaldi::CuMatrixBase<float>::AddMatMat(uint64_t a1, uint64_t a2, CBLAS_TRANSPOSE a3, uint64_t a4, const char *a5, float a6, float a7)
{
  int v7;
  int v8;
  int v9;
  int v10;

  v7 = *(_DWORD *)(a4 + 20);
  if ((_DWORD)a5 == 112)
    v8 = *(_DWORD *)(a4 + 20);
  else
    v8 = *(_DWORD *)(a4 + 16);
  if ((_DWORD)a5 == 112)
    v7 = *(_DWORD *)(a4 + 16);
  v9 = *(_DWORD *)(a2 + 20);
  if (a3 == CblasTrans)
    v10 = *(_DWORD *)(a2 + 20);
  else
    v10 = *(_DWORD *)(a2 + 16);
  if (v8 != *(_DWORD *)(a1 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x45C, "m == NumCols()", a5);
  if (a3 == CblasTrans)
    v9 = *(_DWORD *)(a2 + 16);
  if (v9 != *(_DWORD *)(a1 + 20))
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x45D, "n == NumRows()", a5);
  if (v7 != v10)
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x45E, "k == k1", a5);
  if (v8)
    kaldi::MatrixBase<float>::AddMatMat(a1 + 8, a2 + 8, a3, a4 + 8, a5, a6, a7);
}

_DWORD *kaldi::CuMatrixBase<float>::MaxoutForward(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a2 + 16) % a1[4] || a1[5] != *(_DWORD *)(a2 + 20))
    kaldi::KaldiAssertFailure_((kaldi *)"MaxoutForward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0xAA7, "input.NumCols() % this->NumCols() == 0 && this->NumRows() == input.NumRows()", a5);
  return kaldi::MatrixBase<float>::MaxoutForward(a1 + 2, a2 + 8, a3, a4, a5);
}

uint64_t kaldi::CuMatrixBase<float>::MaxoutDerivative(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  int v6;

  v5 = *(_DWORD *)(a1 + 16);
  if (v5 % *(_DWORD *)(a3 + 16) || (v6 = *(_DWORD *)(a1 + 20), v6 != *(_DWORD *)(a3 + 20)))
    kaldi::KaldiAssertFailure_((kaldi *)"MaxoutDerivative", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0xAB7, "this->NumCols() % output.NumCols() == 0 && this->NumRows() == output.NumRows()", a5);
  if (v5 != *(_DWORD *)(a2 + 16) || v6 != *(_DWORD *)(a2 + 20))
    kaldi::KaldiAssertFailure_((kaldi *)"MaxoutDerivative", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0xAB9, "this->NumCols() == input.NumCols() && this->NumRows() == input.NumRows()", a5);
  return kaldi::MatrixBase<float>::MaxoutDerivative(a1 + 8, a2 + 8, a3 + 8, a4, a5);
}

void kaldi::CuMatrixBase<float>::ApplyPow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  kaldi::MatrixBase<float>::ApplyPow(a1 + 8, a6, a2, a3, a4, a5);
}

uint64_t kaldi::CuMatrixBase<float>::ApplyHeaviside(uint64_t a1)
{
  return kaldi::MatrixBase<float>::ApplyHeaviside(a1 + 8);
}

uint64_t kaldi::CuMatrixBase<float>::ApplyFloor(uint64_t a1, float a2)
{
  return kaldi::MatrixBase<float>::ApplyFloor(a1 + 8, a2);
}

uint64_t kaldi::CuMatrixBase<float>::ApplyCeiling(uint64_t a1, float a2)
{
  return kaldi::MatrixBase<float>::ApplyCeiling(a1 + 8, a2);
}

void kaldi::CuMatrixBase<float>::ApplyExp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::MatrixBase<float>::ApplyExp(a1 + 8, a2, a3, a4, a5);
}

uint64_t kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  uint64_t result;
  const char *v8;
  signed int v9;
  uint64_t v10[3];

  if (a1[5] != *(_DWORD *)(a2 + 20) || a1[4] != *(_DWORD *)(a2 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"ApplySoftMaxPerRow", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x588, "SameDim(*this, src)", a5);
  v6 = (uint64_t)(a1 + 2);
  kaldi::MatrixBase<float>::CopyFromMat<float>(a1 + 2, a2 + 8, 111, a4, a5);
  result = kaldi::MatrixBase<float>::NumRows(v6);
  if ((int)result >= 1)
  {
    v9 = 0;
    do
    {
      kaldi::MatrixBase<float>::Row(v6, v9, v8, v10);
      kaldi::VectorBase<float>::ApplySoftMax((uint64_t)v10);
      ++v9;
      result = kaldi::MatrixBase<float>::NumRows(v6);
    }
    while (v9 < (int)result);
  }
  return result;
}

void kaldi::CuMatrixBase<float>::ApplyMaxNorm(uint64_t a1, int a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  char v32;

  kaldi::CuMatrix<float>::CuMatrix((uint64_t)&v30, a1, 111);
  v6 = a1 + 8;
  kaldi::MatrixBase<float>::MulElements((uint64_t)&v31, a1 + 8, v7, v8, v9);
  if (a2)
  {
    v12 = *(unsigned int *)(a1 + 20);
    v28 = 0;
    v29 = 0;
    v26 = &unk_1EA92DFD8;
    v27 = 0;
    kaldi::CuVector<float>::Resize((uint64_t)&v26, v12, 0, v10, v11);
    v29 = *(_QWORD *)(a1 + 32);
    kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)&v26, (uint64_t)&v30, 1.0, 0.0, v13, v14, v15);
    kaldi::CuVectorBase<float>::ApplyPow((uint64_t)&v26, 0.5);
    kaldi::CuVectorBase<float>::Scale((uint64_t)&v26, 1.0 / a3);
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)&v26, 1.0);
    kaldi::CuVectorBase<float>::InvertElements((uint64_t)&v26);
    kaldi::MatrixBase<float>::MulRowsVec(v6, (uint64_t)&v27, v16, v17, v18);
  }
  else
  {
    v19 = *(unsigned int *)(a1 + 16);
    v28 = 0;
    v29 = 0;
    v26 = &unk_1EA92DFD8;
    v27 = 0;
    kaldi::CuVector<float>::Resize((uint64_t)&v26, v19, 0, v10, v11);
    v29 = *(_QWORD *)(a1 + 32);
    kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)&v26, (uint64_t)&v30, 1.0, 0.0, v20, v21, v22);
    kaldi::CuVectorBase<float>::ApplyPow((uint64_t)&v26, 0.5);
    kaldi::CuVectorBase<float>::Scale((uint64_t)&v26, 1.0 / a3);
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)&v26, 1.0);
    kaldi::CuVectorBase<float>::InvertElements((uint64_t)&v26);
    kaldi::MatrixBase<float>::MulColsVec(v6, (uint64_t)&v27, v23, v24, v25);
  }
  v26 = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)&v26);
  v30 = &unk_1EA92DFA8;
  if (v31)
  {
    if (!v32)
      free(v31);
  }
}

void sub_1DE3FD858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  BOOL v19;

  if (a14)
    v19 = a18 == 0;
  else
    v19 = 0;
  if (v19)
    free(a14);
  _Unwind_Resume(exception_object);
}

float32_t kaldi::CuMatrixBase<float>::MulElements(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::MatrixBase<float>::MulElements(a1 + 8, a2 + 8, a3, a4, a5);
}

uint64_t kaldi::CuMatrixBase<float>::MulRowsVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::MatrixBase<float>::MulRowsVec(a1 + 8, a2 + 8, a3, a4, a5);
}

uint64_t kaldi::CuMatrixBase<float>::MulColsVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::MatrixBase<float>::MulColsVec(a1 + 8, a2 + 8, a3, a4, a5);
}

void kaldi::CuMatrixBase<float>::FindRowMaxId(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  float v16;

  if (!a2)
    kaldi::KaldiAssertFailure_((kaldi *)"FindRowMaxId", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x5E9, "id", a5);
  kaldi::CuArray<int>::Resize((uint64_t)a2, *(_DWORD *)(a1 + 20), 0, a4, a5);
  if (*a2 >= 1)
  {
    v8 = 0;
    v9 = *((_QWORD *)a2 + 1);
    do
      *(_DWORD *)(v9 + 4 * v8++) = -1;
    while (v8 < *a2);
  }
  v10 = *(unsigned int *)(a1 + 20);
  if ((int)v10 >= 1)
  {
    v11 = 0;
    v12 = *(unsigned int *)(a1 + 16);
    do
    {
      if (v11 >= *(unsigned int *)(a1 + 20))
        kaldi::KaldiAssertFailure_((kaldi *)"RowData", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xC3, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v7);
      if ((int)v12 < 1)
      {
        v15 = -1;
      }
      else
      {
        v13 = 0;
        v15 = -1;
        v16 = -1.0e21;
        do
        {
          v14 = *(_QWORD *)(a1 + 8) + 4 * *(_DWORD *)(a1 + 24) * (int)v11;
          if (v16 < *(float *)(v14 + 4 * v13))
          {
            v16 = *(float *)(v14 + 4 * v13);
            v15 = v13;
          }
          ++v13;
        }
        while (v12 != v13);
      }
      *(_DWORD *)(*((_QWORD *)a2 + 1) + 4 * v11++) = v15;
    }
    while (v11 != v10);
  }
}

void kaldi::CuArray<int>::Resize(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, const char *a5)
{
  BOOL v6;
  _BOOL4 v7;
  void *v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD v16[34];

  v6 = a3 < 2 || a3 == 3;
  if ((a2 & 0x80000000) != 0 || !v6)
    kaldi::KaldiAssertFailure_((kaldi *)"Resize", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-array-inl.h", (const char *)0x2C, "(resize_type == kSetZero || resize_type == kUndefined || resize_type == kSetZeroIfNewMemory) && dim >= 0", a5);
  v7 = a3;
  if (a3 == 3)
    v7 = *(_DWORD *)a1 >= (int)a2;
  if (*(_DWORD *)(a1 + 4) >= (signed int)a2)
  {
    *(_DWORD *)a1 = a2;
    if (a2 && !v7)
    {
      v12 = *(void **)(a1 + 8);
      v13 = 4 * a2;
      goto LABEL_21;
    }
  }
  else
  {
    v10 = *(void **)(a1 + 8);
    v11 = *(_QWORD *)(a1 + 16);
    if (v10)
      free(v10);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = v11;
    if (a2)
    {
      v12 = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
      *(_QWORD *)(a1 + 8) = v12;
      if (!v12)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16, "Resize", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-array-inl.h", 76);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Memory allocation failed when initializing CuVector ", 52);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"with dimension ", 15);
        v15 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" object size in bytes: ", 23);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
      }
      *(_DWORD *)a1 = a2;
      *(_DWORD *)(a1 + 4) = a2;
      if (!v7)
      {
        v13 = 4 * a2;
LABEL_21:
        bzero(v12, v13);
      }
    }
  }
}

uint64_t kaldi::CuMatrixBase<float>::Set(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  return kaldi::MatrixBase<float>::Set(a1 + 8, a6, a2, a3, a4, a5);
}

uint64_t kaldi::CuMatrixBase<float>::Add(uint64_t a1, float a2)
{
  return kaldi::MatrixBase<float>::Add(a1 + 8, a2);
}

void kaldi::CuMatrixBase<float>::Scale(uint64_t a1, float a2)
{
  kaldi::MatrixBase<float>::Scale(a1 + 8, a2);
}

void kaldi::CuMatrixBase<float>::ApplyLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::MatrixBase<float>::ApplyLog(a1 + 8, a2, a3, a4, a5);
}

uint64_t kaldi::CuMatrixBase<float>::DivElements(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::MatrixBase<float>::DivElements(a1 + 8, a2 + 8, a3, a4, a5);
}

uint64_t kaldi::CuMatrixBase<float>::Max(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::MatrixBase<float>::Max(a1 + 8, a2 + 8, a3, a4, a5);
}

void kaldi::CuMatrixBase<float>::MulRowsGroupMat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(int *)(a2 + 16) <= 0)
    kaldi::KaldiAssertFailure_((kaldi *)"MulRowsGroupMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x2FF, "src.NumCols() > 0", a5);
  kaldi::MatrixBase<float>::MulRowsGroupMat(a1 + 8, a2 + 8, a3, a4, a5);
}

uint64_t *kaldi::CuMatrixBase<float>::AddVecToCols(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6, float a7)
{
  uint64_t *v9;
  _QWORD *v11;
  _QWORD v12[34];

  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 20))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "AddVecToCols", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", 1062);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Non matching dimensions: Rows:", 30);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" VectorDim:", 11);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  v9 = (uint64_t *)(a1 + 8);
  if (a7 != 1.0)
    kaldi::MatrixBase<float>::Scale(a1 + 8, a7);
  return kaldi::MatrixBase<float>::AddVecToCols<float>(v9, (uint64_t *)(a2 + 8), a6, a3, a4, a5);
}

uint64_t *kaldi::CuMatrixBase<float>::AddVecToRows(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6, float a7)
{
  uint64_t *v9;
  _QWORD *v11;
  _QWORD v12[34];

  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "AddVecToRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", 1084);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Non matching dimensions: Cols:", 30);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" VectorDim:", 11);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  v9 = (uint64_t *)(a1 + 8);
  if (a7 != 1.0)
    kaldi::MatrixBase<float>::Scale(a1 + 8, a7);
  return kaldi::MatrixBase<float>::AddVecToRows<float>(v9, (uint64_t *)(a2 + 8), a6, a3, a4, a5);
}

void kaldi::CuMatrixBase<float>::AddVecVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6, float a7)
{
  uint64_t v10;

  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 20))
    kaldi::KaldiAssertFailure_((kaldi *)"AddVecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x414, "vecA.Dim() == num_rows_", a5);
  if (*(_DWORD *)(a3 + 16) != *(_DWORD *)(a1 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"AddVecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x415, "vecB.Dim() == num_cols_", a5);
  v10 = a1 + 8;
  if (a7 != 1.0)
    kaldi::MatrixBase<float>::Scale(a1 + 8, a7);
  kaldi::MatrixBase<float>::AddVecVec<float>(v10, a2 + 8, a3 + 8, a6, a4, a5);
}

void kaldi::CuMatrixBase<float>::AddMatMatMasked(uint64_t a1, uint64_t a2, CBLAS_TRANSPOSE a3, uint64_t a4, const char *a5, uint64_t a6, float a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  _QWORD v11[34];

  v7 = *(_DWORD *)(a2 + 20);
  if (v7 != *(_DWORD *)(a6 + 20))
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMatMasked", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x39D, "A.num_rows_ == M.num_rows_", a5);
  if (a3 == CblasTrans && (_DWORD)a5 == 112)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11, "AddMatMatMasked", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", 927);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "matrix A and B can not be transposed at the same time, not implemented yet");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  v8 = *(_DWORD *)(a1 + 20);
  if (a3 == CblasTrans)
  {
    if (v8 != *(_DWORD *)(a2 + 16) || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a4 + 16))
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMatMasked", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x3A1, "num_rows_ == A.num_cols_ && num_cols_ == B.num_cols_", a5);
    if (v7 != *(_DWORD *)(a4 + 20))
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMatMasked", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x3A2, "A.num_rows_ == B.num_rows_", a5);
    if (v8 <= *(_DWORD *)(a6 + 16))
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMatMasked", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x3A3, "A.num_cols_ > M.num_cols_", a5);
  }
  else if ((_DWORD)a5 == 112)
  {
    if (v8 != v7 || (v9 = *(_DWORD *)(a1 + 16), v9 != *(_DWORD *)(a4 + 20)))
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMatMasked", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x3A5, "num_rows_ == A.num_rows_ && num_cols_ == B.num_rows_", a5);
    if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a4 + 16))
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMatMasked", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x3A6, "A.num_cols_ == B.num_cols_", a5);
    if (v9 <= *(_DWORD *)(a6 + 16))
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMatMasked", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x3A7, "B.num_rows_ > M.num_cols_", a5);
  }
  else
  {
    if (v8 != v7 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a4 + 16))
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMatMasked", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x3A9, "num_rows_ == A.num_rows_ && num_cols_ == B.num_cols_", a5);
    v10 = *(_DWORD *)(a2 + 16);
    if (v10 != *(_DWORD *)(a4 + 20))
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMatMasked", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x3AA, "A.num_cols_ == B.num_rows_", a5);
    if (v10 <= *(_DWORD *)(a6 + 16))
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMatMasked", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x3AB, "A.num_cols_ > M.num_cols_", a5);
  }
  kaldi::MatrixBase<float>::AddMatMat(a1 + 8, a2 + 8, a3, a4 + 8, a5, a7, 1.0);
}

void sub_1DE3FE0DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t kaldi::CuMatrixBase<float>::AddMatEwpMat(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5, float a6, float a7)
{
  return kaldi::MatrixBase<float>::AddMatEwpMat(a1 + 8, a2 + 8, a3, a4 + 8, a5, a6, a7);
}

void kaldi::CuMatrixBase<float>::AddDiagVecMat(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5, float a6, float a7)
{
  kaldi::MatrixBase<float>::AddDiagVecMat(a1 + 8, a2 + 8, a3 + 8, a4, a5, a6, a7);
}

void kaldi::CuMatrixBase<float>::AddMatDiagVec(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5, float a6, float a7)
{
  kaldi::MatrixBase<float>::AddMatDiagVec(a1 + 8, a2 + 8, a3, a4 + 8, a5, a6, a7);
}

void kaldi::CuMatrixBase<float>::AddIndexedRows(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  kaldi::MatrixBase<float>::AddIndexedRows(a1 + 8, a2 + 8, a3 + 8, a4, a5, a6);
}

float kaldi::CuMatrixBase<float>::Sum(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  float v11;
  _QWORD v13[4];

  v6 = *(unsigned int *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 32);
  v13[0] = &unk_1EA92DFD8;
  v13[1] = 0;
  v13[2] = 0;
  v13[3] = v7;
  kaldi::CuVector<float>::Resize((uint64_t)v13, v6, 0, a4, a5);
  kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)v13, a1, 1.0, 0.0, v8, v9, v10);
  v11 = kaldi::CuVectorBase<float>::Sum((uint64_t)v13);
  v13[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v13);
  return v11;
}

void sub_1DE3FE1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuVector<float>::~CuVector(&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CuMatrixBase<float>::CountZeros(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::MatrixBase<float>::CountZeros(a1 + 8, a2, a3, a4, a5);
}

void kaldi::CuMatrixBase<float>::SetRandn(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20))
    kaldi::MatrixBase<float>::SetRandn(a1 + 8);
}

uint64_t kaldi::CuMatrixBase<float>::Write(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  uint64_t v8;
  const char *v9;
  unsigned int v11[10];

  kaldi::Matrix<float>::Matrix((uint64_t)v11, *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 16), 1, 0);
  kaldi::MatrixBase<float>::CopyFromMat<float>(v11, a1 + 8, 111, v8, v9);
  kaldi::MatrixBase<float>::Write(v11, a2, a3, a4);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v11);
}

void sub_1DE3FE260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::CuMatrixBase<float>::EqualElementColMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  const char *v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float v16;

  v6 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v6 != *(_DWORD *)(a1 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"EqualElementColMask", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0xA77, "vec.Dim() == NumCols()", a5);
  if (!a3)
    kaldi::KaldiAssertFailure_((kaldi *)"EqualElementColMask", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0xA78, "mask != NULL", a5);
  kaldi::CuMatrix<float>::Resize(a3, *(unsigned int *)(a1 + 20), v6, 0, 0);
  v10 = *(_DWORD *)(a1 + 20);
  if (v10 >= 1)
  {
    v11 = 0;
    v12 = *(unsigned int *)(a1 + 16);
    v13 = *(unsigned int *)(a2 + 16);
    do
    {
      if ((int)v12 >= 1)
      {
        v14 = 0;
        v15 = *(_QWORD *)(a2 + 8);
        do
        {
          if (v13 == v14)
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x10E, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v9);
          if (*(float *)(*(_QWORD *)(a1 + 8) + 4 * (int)(v11 * *(_DWORD *)(a1 + 24)) + 4 * v14) == *(float *)(v15 + 4 * v14))
            v16 = 1.0;
          else
            v16 = 0.0;
          if (*(_DWORD *)(a3 + 20) <= v11 || v14 >= *(unsigned int *)(a3 + 16))
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v9);
          *(float *)(*(_QWORD *)(a3 + 8) + 4 * (int)(v11 * *(_DWORD *)(a3 + 24)) + 4 * v14++) = v16;
        }
        while (v12 != v14);
      }
      ++v11;
    }
    while (v11 != v10);
  }
}

void kaldi::CuMatrixBase<float>::EqualElementMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  uint64_t v9;
  const char *v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float v18;

  v6 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v6 != *(_DWORD *)(a1 + 20) || (v9 = *(unsigned int *)(a2 + 16), (_DWORD)v9 != *(_DWORD *)(a1 + 16)))
    kaldi::KaldiAssertFailure_((kaldi *)"EqualElementMask", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0xA8F, "mat.NumRows() == NumRows() && mat.NumCols() == NumCols()", a5);
  if (!a3)
    kaldi::KaldiAssertFailure_((kaldi *)"EqualElementMask", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0xA90, "mask != NULL", a5);
  kaldi::CuMatrix<float>::Resize(a3, v6, v9, 0, 0);
  v11 = *(_DWORD *)(a1 + 20);
  if (v11 >= 1)
  {
    v12 = 0;
    v13 = *(_DWORD *)(a2 + 20);
    v14 = v11 & ~(v11 >> 31);
    v15 = *(unsigned int *)(a1 + 16);
    do
    {
      if ((int)v15 >= 1)
      {
        if (v13 > v12)
        {
          v16 = 0;
          v17 = *(_QWORD *)(a2 + 8) + 4 * (int)(*(_DWORD *)(a2 + 24) * v12);
          while (v16 < *(unsigned int *)(a2 + 16))
          {
            if (*(float *)(*(_QWORD *)(a1 + 8) + 4 * (int)(v12 * *(_DWORD *)(a1 + 24)) + 4 * v16) == *(float *)(v17 + 4 * v16))
              v18 = 1.0;
            else
              v18 = 0.0;
            if (*(_DWORD *)(a3 + 20) <= v12 || v16 >= *(unsigned int *)(a3 + 16))
              kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v10);
            *(float *)(*(_QWORD *)(a3 + 8) + 4 * (int)(v12 * *(_DWORD *)(a3 + 24)) + 4 * v16++) = v18;
            if (v15 == v16)
              goto LABEL_16;
          }
        }
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x227, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v10);
      }
LABEL_16:
      ++v12;
    }
    while (v12 != v14);
  }
}

float *kaldi::CuMatrixBase<float>::ConcatenateVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a3 + 20))
    kaldi::KaldiAssertFailure_((kaldi *)"ConcatenateVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x33F, "num_rows_ == index.NumRows()", a5);
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16) * *(_DWORD *)(a3 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"ConcatenateVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x340, "num_cols_ == index.NumCols() * vec_table.NumCols()", a5);
  return kaldi::MatrixBase<float>::ConcatenateVec(a1 + 8, a2 + 8, a3 + 8, a4, a5);
}

uint64_t kaldi::CuMatrixBase<float>::ConcatenateVec(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;

  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a3 + 20))
    kaldi::KaldiAssertFailure_((kaldi *)"ConcatenateVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x352, "num_rows_ == index.NumRows()", a5);
  v5 = *a2;
  if (*a2)
    LODWORD(v5) = *(_DWORD *)(v5 + 12);
  if (*(_DWORD *)(a1 + 16) != (_DWORD)v5 * *(_DWORD *)(a3 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"ConcatenateVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x353, "num_cols_ == index.NumCols() * vec_table.NumCols()", a5);
  return kaldi::MatrixBase<float>::ConcatenateVec(a1 + 8, a2, a3 + 8, a4, a5);
}

void kaldi::CuMatrixBase<float>::SummarizeVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a3 + 20))
    kaldi::KaldiAssertFailure_((kaldi *)"SummarizeVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x365, "num_rows_ == index.NumRows()", a5);
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"SummarizeVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0x366, "num_cols_ == vec_table.NumCols()", a5);
  kaldi::MatrixBase<float>::SummarizeVec(a1 + 8, a2 + 8, a3 + 8, a4, a5);
}

void kaldi::CuMatrixBase<float>::SummarizeVec(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::MatrixBase<float>::SummarizeVec(a1 + 8, a2, a3 + 8, a4, a5);
}

void kaldi::CuMatrixBase<float>::DataUnowned()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "DataUnowned", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", 219);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Function not implemented for this class");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

uint64_t kaldi::CuMatrixBase<float>::AddMatMat<signed char>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, const char *a5, float a6, float a7)
{
  return kaldi::MatrixBase<float>::AddMatMat<signed char>(a1 + 8, a2 + 8, a3, a4, a5, a6, a7);
}

uint64_t kaldi::CuMatrixBase<float>::AddMatMat<short>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, const char *a5, float a6, float a7)
{
  return kaldi::MatrixBase<float>::AddMatMat<short>(a1 + 8, a2 + 8, a3, a4, a5, a6, a7);
}

unsigned int *kaldi::CuMatrixBase<float>::AddMatMat<signed char>(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, const char *a5, float a6, float a7)
{
  return kaldi::MatrixBase<float>::AddMatMat<signed char>((unsigned int *)(a1 + 8), a2 + 8, a3, a4, a5, a6, a7);
}

unsigned int *kaldi::CuMatrixBase<float>::AddMatMat<short>(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, const char *a5, float a6, float a7)
{
  return kaldi::MatrixBase<float>::AddMatMat<short>((unsigned int *)(a1 + 8), a2 + 8, a3, a4, a5, a6, a7);
}

float *kaldi::Quant3Levels<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  if (a6 <= 0.0)
    kaldi::KaldiAssertFailure_((kaldi *)"Quant3Levels", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0xADB, "value > 0.0", a5);
  return kaldi::Quant3Levels<float>((float *)(a1 + 8), a2 + 8, a6, a3, a4, a5);
}

_DWORD *kaldi::ZeroSmallValues<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  if (a6 <= 0.0)
    kaldi::KaldiAssertFailure_((kaldi *)"ZeroSmallValues", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)0xAEA, "threshold > 0.0", a5);
  return kaldi::ZeroSmallValues<float>((_DWORD *)(a1 + 8), a2 + 8, a6, a3, a4, a5);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v5;
  int *value;
  int *end;
  std::vector<int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

_QWORD *kaldi::SubVector<float>::SubVector(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4, const char *a5)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (*(_DWORD *)(a2 + 12) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"RowData", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xC3, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a5);
  *a1 = *(_QWORD *)a2 + 4 * (int)(*(_DWORD *)(a2 + 16) * a3);
  *((_DWORD *)a1 + 2) = kaldi::MatrixBase<float>::NumCols(a2);
  return a1;
}

void kaldi::CuSubVector<float>::Read()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "Read", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", 517);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Function is not implemented for this class");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::CuSubVector<float>::~CuSubVector(uint64_t result)
{
  *(_QWORD *)result = &unk_1EA926538;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

void kaldi::CuSubVector<float>::~CuSubVector(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1EA926538;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::Matrix<float>::Matrix<float>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  const char *v13;

  *(_BYTE *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v8 = *(_DWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 20);
  if (a3 == 111)
    v10 = *(_DWORD *)(a2 + 20);
  else
    v10 = *(_DWORD *)(a2 + 16);
  if (a3 == 111)
    v11 = v8;
  else
    v11 = v9;
  kaldi::Matrix<float>::Init(a1, v10, v11, 0, a5);
  kaldi::MatrixBase<float>::CopyFromMat<float>((unsigned int *)a1, a2 + 8, a3, v12, v13);
  return a1;
}

void sub_1DE3FEAE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  _Unwind_Resume(a1);
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

void kaldi::CuRandom::RandGauss<float>(int *a1, uint64_t a2, float a3, float a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t i;
  int v8;
  float *v9;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v10;
  unint64_t v11;
  char v12;

  v4 = *(_DWORD *)(a2 + 16);
  if (v4)
  {
    if (!*((_BYTE *)a1 + 4))
    {
      v5 = *a1;
      a1[2] = *a1;
      v6 = 1;
      for (i = 3; i != 626; ++i)
      {
        v8 = 1812433253 * (v5 ^ (v5 >> 30));
        v5 = v8 + v6;
        a1[i] = i + v8 - 2;
        ++v6;
      }
      *((_QWORD *)a1 + 313) = 0;
      *((_BYTE *)a1 + 4) = 1;
      v4 = *(_DWORD *)(a2 + 16);
    }
    v9 = *(float **)(a2 + 8);
    v11 = __PAIR64__(LODWORD(a4), LODWORD(a3));
    v12 = 0;
    if (v4 >= 1)
    {
      v10 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)(a1 + 2);
      do
      {
        *v9++ = std::normal_distribution<float>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v11, v10, (float *)&v11);
        --v4;
      }
      while (v4);
    }
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11, "RandGauss", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-rand.cc", 72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"cannot write data to zero size vector", 37);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
  }
}

void sub_1DE3FED44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CuRand<float>::~CuRand(uint64_t a1)
{
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 40);
  return a1;
}

void kaldi::CuRand<float>::RandGaussian(uint64_t a1, uint64_t a2)
{
  kaldi::VectorBase<float>::SetRandn(a2 + 8);
}

void kaldi::CuRand<float>::BinarizeProbs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  signed int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  signed int i;
  float v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  float v15;

  v3 = *(_DWORD *)(a3 + 20);
  if (v3 >= 1)
  {
    v5 = 0;
    v6 = a2 + 8;
    v7 = a3 + 8;
    v8 = *(_DWORD *)(a3 + 16);
    do
    {
      if (v8 >= 1)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = ((double)(int)kaldi::Rand(0) + 1.0) / 2147483650.0;
          if (kaldi::MatrixBase<float>::operator()(v6, v5, i, v11, v12) <= v10)
            v15 = 0.0;
          else
            v15 = 1.0;
          *(float *)kaldi::MatrixBase<float>::operator()(v7, v5, i, v13, v14) = v15;
          v8 = *(_DWORD *)(a3 + 16);
        }
        v3 = *(_DWORD *)(a3 + 20);
      }
      ++v5;
    }
    while (v5 < v3);
  }
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i;
  size_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;

  i = this->__i_;
  v2 = (i + 1) % 0x270;
  v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)i << 15) & 0xEFC60000 ^ i ^ ((((_DWORD)i << 15) & 0xEFC60000 ^ i) >> 18);
}

float std::normal_distribution<float>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(uint64_t a1, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this, float *a3)
{
  float v5;
  float v7;
  float v8;
  float v9;
  float v10;

  if (*(_BYTE *)(a1 + 12))
  {
    *(_BYTE *)(a1 + 12) = 0;
    v5 = *(float *)(a1 + 8);
  }
  else
  {
    do
    {
      do
      {
        v7 = (float)((float)((float)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this)
                           * 2.3283e-10)
                   * 2.0)
           + -1.0;
        v8 = (float)((float)((float)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this)
                           * 2.3283e-10)
                   * 2.0)
           + -1.0;
        v9 = (float)(v8 * v8) + (float)(v7 * v7);
      }
      while (v9 > 1.0);
    }
    while (v9 == 0.0);
    v10 = sqrtf((float)(logf((float)(v8 * v8) + (float)(v7 * v7)) * -2.0) / v9);
    *(float *)(a1 + 8) = v8 * v10;
    *(_BYTE *)(a1 + 12) = 1;
    v5 = v7 * v10;
  }
  return *a3 + (float)(v5 * a3[1]);
}

float kaldi::VecVec<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"VecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)0x23, "a.Dim() == b.Dim()", a5);
  return kaldi::VecVec<float>(a1 + 8, a2 + 8, a3, a4, a5);
}

{
  int v6;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"VecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x41, "adim == b.Dim()", a5);
  return cblas_sdot(v6, *(const float **)a1, 1, *(const float **)a2, 1);
}

_QWORD *kaldi::CuVector<float>::~CuVector(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;

  *a1 = &unk_1EA92DFD8;
  v3 = a1 + 1;
  v2 = (void *)a1[1];
  if (v2)
    free(v2);
  *v3 = 0;
  v3[1] = 0;
  return a1;
}

float kaldi::VecVec<float,signed char>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"VecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)0x42, "a.Dim() == b.Dim()", a5);
  return kaldi::VecVec<signed char>(a1 + 8, a2, a3, a4, a5);
}

float kaldi::VecVec<float,short>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"VecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)0x42, "a.Dim() == b.Dim()", a5);
  return kaldi::VecVec<short>(a1 + 8, a2, a3, a4, a5);
}

_DWORD *kaldi::CuVectorBase<float>::CopyFromVec<float>(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 != result[4])
    kaldi::KaldiAssertFailure_((kaldi *)"CopyFromVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)0x310, "src.Dim() == dim_", a5);
  if (v5)
    return kaldi::VectorBase<float>::CopyFromVec((uint64_t)(result + 2), a2, a3, a4, a5);
  return result;
}

_DWORD *kaldi::CuVectorBase<float>::CopyToVec<float>(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;

  v5 = result[4];
  if (v5 != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"CopyToVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)0x32C, "dim_ == dst->Dim()", a5);
  if (v5)
    return kaldi::VectorBase<float>::CopyFromVec(a2, (uint64_t)(result + 2), a3, a4, a5);
  return result;
}

void kaldi::CuVectorBase<float>::AddVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6, float a7)
{
  uint64_t v9;

  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"AddVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)0x470, "vec.Dim() == Dim()", a5);
  v9 = a1 + 8;
  if (a7 != 1.0)
    kaldi::VectorBase<float>::Scale(a1 + 8, a7);
  kaldi::VectorBase<float>::AddVec<float>(v9, a2 + 8, a6, a3, a4, a5);
}

_DWORD *kaldi::CuVectorBase<float>::CopyFromVec(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;

  v5 = *(int *)(a2 + 16);
  if ((_DWORD)v5 != result[4])
    kaldi::KaldiAssertFailure_((kaldi *)"CopyFromVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)0x3AD, "src.Dim() == dim_", a5);
  if ((_DWORD)v5)
  {
    result = (_DWORD *)*((_QWORD *)result + 1);
    if (result)
      return memcpy(result, *(const void **)(a2 + 8), 4 * v5);
  }
  return result;
}

float kaldi::CuVectorBase<float>::ReverseCopyFromVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  float result;

  v5 = *(_DWORD *)(a2 + 16);
  if (v5 != *(_DWORD *)(a1 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"ReverseCopyFromVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)0x3BB, "src.Dim() == dim_", a5);
  if (v5)
    return kaldi::VectorBase<float>::ReverseCopyFromVec(a1 + 8, (uint64_t *)(a2 + 8), a3, a4, a5);
  return result;
}

void *kaldi::CuVectorBase<float>::CopyRowsFromMat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 20) * *(_DWORD *)(a2 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"CopyRowsFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)0x84, "dim_ == mat.NumCols() * mat.NumRows()", a5);
  return kaldi::VectorBase<float>::CopyRowsFromMat((char **)(a1 + 8), a2 + 8);
}

void kaldi::CuVectorBase<float>::SetZero(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16))
  {
    if (*(_QWORD *)(a1 + 8))
      kaldi::VectorBase<float>::SetZero(a1 + 8);
  }
}

uint64_t kaldi::CuVectorBase<float>::Set(uint64_t a1, float a2)
{
  return kaldi::VectorBase<float>::Set(a1 + 8, a2);
}

uint64_t kaldi::CuVectorBase<float>::Add(uint64_t a1, float a2)
{
  return kaldi::VectorBase<float>::Add(a1 + 8, a2);
}

void kaldi::CuVectorBase<float>::Scale(uint64_t a1, float a2)
{
  kaldi::VectorBase<float>::Scale(a1 + 8, a2);
}

void kaldi::CuVectorBase<float>::AddRowSumMat(uint64_t a1, uint64_t a2, float a3, float a4, uint64_t a5, uint64_t a6, const char *a7)
{
  uint64_t v11;
  const char *v12;
  void *v13[3];

  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"AddRowSumMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)0x494, "mat.NumCols() == Dim()", a7);
  v11 = *(unsigned int *)(a2 + 20);
  memset(v13, 0, sizeof(v13));
  kaldi::Vector<float>::Resize(v13, v11, 1, a6, a7);
  kaldi::VectorBase<float>::Set((uint64_t)v13, 1.0);
  kaldi::VectorBase<float>::AddMatVec(a1 + 8, (const float **)(a2 + 8), CblasTrans, (uint64_t)v13, v12, a3, a4);
  kaldi::Vector<float>::Destroy((uint64_t)v13);
}

void sub_1DE3FF410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::CuVectorBase<float>::AddColSumMat(uint64_t a1, uint64_t a2, float a3, float a4, uint64_t a5, uint64_t a6, const char *a7)
{
  uint64_t v11;
  const char *v12;
  void *v13[3];

  if (*(_DWORD *)(a2 + 20) != *(_DWORD *)(a1 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"AddColSumMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)0x4A4, "mat.NumRows() == Dim()", a7);
  v11 = *(unsigned int *)(a2 + 16);
  memset(v13, 0, sizeof(v13));
  kaldi::Vector<float>::Resize(v13, v11, 1, a6, a7);
  kaldi::VectorBase<float>::Set((uint64_t)v13, 1.0);
  kaldi::VectorBase<float>::AddMatVec(a1 + 8, (const float **)(a2 + 8), CblasNoTrans, (uint64_t)v13, v12, a3, a4);
  kaldi::Vector<float>::Destroy((uint64_t)v13);
}

void sub_1DE3FF4DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CuVector<float>::CuVector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1EA92DFD8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  kaldi::CuVector<float>::Resize(a1, *(unsigned int *)(a2 + 16), 1u, a4, a5);
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)a1, a2, v7, v8, v9);
  return a1;
}

{
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  *(_QWORD *)a1 = &unk_1EA92DFD8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a3;
  kaldi::CuVector<float>::Resize(a1, *(unsigned int *)(a2 + 8), 1u, a4, a5);
  kaldi::CuVectorBase<float>::CopyFromVec<float>((_DWORD *)a1, a2, v7, v8, v9);
  return a1;
}

uint64_t kaldi::CuVectorBase<float>::InvertElements(uint64_t a1)
{
  return kaldi::VectorBase<float>::InvertElements(a1 + 8);
}

float kaldi::CuVectorBase<float>::ApplySoftMax(uint64_t a1)
{
  return kaldi::VectorBase<float>::ApplySoftMax(a1 + 8);
}

void kaldi::CuVectorBase<float>::ApplyExp(uint64_t a1)
{
  kaldi::VectorBase<float>::ApplyExp(a1 + 8);
}

void kaldi::CuVectorBase<float>::ApplyLog(uint64_t a1)
{
  kaldi::VectorBase<float>::ApplyLog(a1 + 8);
}

uint64_t kaldi::CuVectorBase<float>::ApplyFloor(uint64_t a1, float a2)
{
  return kaldi::VectorBase<float>::ApplyFloor(a1 + 8, a2);
}

uint64_t kaldi::CuVectorBase<float>::ApplyCeiling(uint64_t a1, float a2)
{
  return kaldi::VectorBase<float>::ApplyCeiling(a1 + 8, a2);
}

void kaldi::CuVectorBase<float>::ApplyMaxNorm(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  float v15;
  void *v16;
  void *v17[3];

  v16 = &unk_1EA92DFD8;
  v17[0] = 0;
  v8 = *(void **)(a1 + 24);
  v17[1] = 0;
  v17[2] = v8;
  kaldi::CuVector<float>::Resize((uint64_t)&v16, *(unsigned int *)(a1 + 16), 1u, a5, a6);
  kaldi::CuVectorBase<float>::CopyFromVec(&v16, a1, v9, v10, v11);
  kaldi::CuVectorBase<float>::MulElements((uint64_t)&v16, a1, v12, v13, v14);
  v15 = sqrtf(kaldi::VectorBase<float>::Sum((uint64_t)v17));
  if (v15 > a2)
    kaldi::VectorBase<float>::Scale(a1 + 8, a2 / v15);
  v16 = &unk_1EA92DFD8;
  if (v17[0])
    free(v17[0]);
}

void sub_1DE3FF62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)
    free(a10);
  _Unwind_Resume(exception_object);
}

float kaldi::CuVectorBase<float>::MulElements(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"MulElements", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)0x2D2, "dim_ == v.dim_", a5);
  return kaldi::VectorBase<float>::MulElements(a1 + 8, a2 + 8, a3, a4, a5);
}

float kaldi::CuVectorBase<float>::Sum(uint64_t a1)
{
  return kaldi::VectorBase<float>::Sum(a1 + 8);
}

void kaldi::CuVectorBase<float>::ApplyPow(uint64_t a1, float a2)
{
  kaldi::VectorBase<float>::ApplyPow(a1 + 8, a2);
}

uint64_t kaldi::CuVectorBase<float>::CountZeros(uint64_t a1)
{
  return kaldi::VectorBase<float>::CountZeros(a1 + 8);
}

uint64_t kaldi::CuVectorBase<float>::SetRandn(uint64_t result)
{
  _OWORD v1[2];
  int v2;
  void *v3;
  __int128 v4;
  __int128 v5;
  char v6;
  uint64_t v7;

  if (*(_DWORD *)(result + 16))
  {
    v4 = 0u;
    v5 = 0u;
    memset(v1, 0, sizeof(v1));
    v2 = 0;
    v3 = &unk_1EA92DFA8;
    v6 = 0;
    v7 = 0;
    kaldi::CuRand<float>::RandGaussian((uint64_t)v1, result);
    return kaldi::CuRand<float>::~CuRand((uint64_t)v1);
  }
  return result;
}

void sub_1DE3FF714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuRand<float>::~CuRand((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void kaldi::CuVectorBase<float>::Tanh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"Tanh", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)0x1A4, "this->Dim() == src.Dim()", a5);
  kaldi::VectorBase<float>::Tanh(a1 + 8, a2 + 8, a3, a4, a5);
}

void kaldi::CuVectorBase<float>::Sigmoid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"Sigmoid", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)0x197, "this->Dim() == src.Dim()", a5);
  kaldi::VectorBase<float>::Sigmoid(a1 + 8, a2 + 8, a3, a4, a5);
}

void kaldi::CuVectorBase<float>::ApplyTanh(uint64_t a1)
{
  kaldi::VectorBase<float>::ApplyTanh(a1 + 8);
}

void kaldi::CuVectorBase<float>::CopyColFromMat(uint64_t a1, uint64_t a2, signed int a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a2 + 16) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"CopyColFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)0x52, "col < mat.NumCols()", a5);
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 20))
    kaldi::KaldiAssertFailure_((kaldi *)"CopyColFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)0x53, "dim_ == mat.NumRows()", a5);
  kaldi::VectorBase<float>::CopyColFromMat<float>(a1 + 8, a2 + 8, a3);
}

void kaldi::CuVectorBase<float>::AddMatVec(uint64_t a1, uint64_t a2, CBLAS_TRANSPOSE a3, uint64_t a4, const char *a5, float a6, float a7)
{
  int v7;

  if (a3 == CblasTrans)
  {
    if (*(_DWORD *)(a2 + 20) != *(_DWORD *)(a4 + 16))
      goto LABEL_10;
    v7 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    if (a3 != CblasNoTrans || *(_DWORD *)(a2 + 16) != *(_DWORD *)(a4 + 16))
LABEL_10:
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)0x1DC, "(trans == kNoTrans && M.NumCols() == v.dim_ && M.NumRows() == dim_) || (trans == kTrans && M.NumRows() == v.dim_ && M.NumCols() == dim_)", a5);
    v7 = *(_DWORD *)(a2 + 20);
  }
  if (v7 != *(_DWORD *)(a1 + 16))
    goto LABEL_10;
  if (a4 == a1)
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)0x1DD, "&v != this", a5);
  kaldi::VectorBase<float>::AddMatVec(a1 + 8, (const float **)(a2 + 8), a3, a4 + 8, a5, a6, a7);
}

void kaldi::CuVectorBase<float>::AddVecVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6, float a7)
{
  int v7;

  v7 = *(_DWORD *)(a1 + 16);
  if (v7 != *(_DWORD *)(a2 + 16) || v7 != *(_DWORD *)(a3 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"AddVecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)0x223, "(dim_ == v.dim_ && dim_ == r.dim_)", a5);
  if (a1 == a2 || a1 == a3)
    kaldi::KaldiAssertFailure_((kaldi *)"AddVecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)0x224, "this != &v && this != &r", a5);
  kaldi::VectorBase<float>::AddVecVec(a1 + 8, a2 + 8, a3 + 8, a6, a7, a4, a5);
}

void kaldi::CuVectorBase<float>::AddDiagMat2(uint64_t a1, uint64_t a2, int a3, float a4, float a5)
{
  kaldi::VectorBase<float>::AddDiagMat2(a1 + 8, (const float **)(a2 + 8), a3, a4, a5);
}

void kaldi::CuVectorBase<float>::AddDiagMatMat(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, float a6, float a7)
{
  kaldi::VectorBase<float>::AddDiagMatMat(a1 + 8, (const float **)(a2 + 8), a3, (const float **)(a4 + 8), a5, a6, a7);
}

uint64_t kaldi::CuVectorBase<float>::ReplaceValue(uint64_t a1, float a2, float a3)
{
  return kaldi::VectorBase<float>::ReplaceValue(a1 + 8, a2, a3);
}

float kaldi::CuVectorBase<float>::DivElements(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"DivElements", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)0x2DF, "dim_ == v.dim_", a5);
  return kaldi::VectorBase<float>::DivElements(a1 + 8, a2 + 8, a3, a4, a5);
}

void kaldi::CuVectorBase<float>::Write(_DWORD *a1, _QWORD *a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  void *v12[3];

  v8 = a1[4];
  memset(v12, 0, sizeof(v12));
  kaldi::Vector<float>::Resize(v12, v8, 1, a4, a5);
  kaldi::CuVectorBase<float>::CopyToVec<float>(a1, (uint64_t)v12, v9, v10, v11);
  kaldi::VectorBase<float>::Write((uint64_t)v12, a2, a3);
  kaldi::Vector<float>::Destroy((uint64_t)v12);
}

void sub_1DE3FFA44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::CuVector<float>::Resize(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, const char *a5)
{
  void *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 >= 2)
  {
    if (a3 != 3)
      kaldi::KaldiAssertFailure_((kaldi *)"Resize", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)0x35E, "t == kSetZero || t == kUndefined || t == kSetZeroIfNewMemory", a5);
    a3 = *(_DWORD *)(a1 + 16) >= (int)a2;
  }
  if (*(_DWORD *)(a1 + 20) >= (int)a2)
  {
    *(_DWORD *)(a1 + 16) = a2;
    if ((_DWORD)a2 && !a3 && *(_QWORD *)(a1 + 8))
      kaldi::VectorBase<float>::SetZero(a1 + 8);
  }
  else
  {
    if (*(_DWORD *)(a1 + 16))
    {
      v8 = (_QWORD *)(a1 + 8);
      v7 = *(void **)(a1 + 8);
      if (v7)
        free(v7);
      *v8 = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if ((_DWORD)a2)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      kaldi::Vector<float>::Resize(&v11, a2, 0, a4, a5);
      v9 = v11;
      v11 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v9;
      v10 = v12;
      v12 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v10;
      kaldi::Vector<float>::Destroy((uint64_t)&v11);
    }
  }
}

void kaldi::CuVector<float>::Destroy(uint64_t a1)
{
  void *v1;
  _QWORD *v2;

  v2 = (_QWORD *)(a1 + 8);
  v1 = *(void **)(a1 + 8);
  if (v1)
    free(v1);
  *v2 = 0;
  v2[1] = 0;
}

void kaldi::CuVector<float>::~CuVector(_QWORD *a1)
{
  void *v1;
  _QWORD *v2;

  *a1 = &unk_1EA92DFD8;
  v2 = a1 + 1;
  v1 = (void *)a1[1];
  if (v1)
    free(v1);
  *v2 = 0;
  v2[1] = 0;
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::CuVector<float>::operator=(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  if (!*(_QWORD *)(a1 + 24))
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  kaldi::CuVector<float>::Resize(a1, *(unsigned int *)(a2 + 16), 1u, a4, a5);
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)a1, a2, v7, v8, v9);
  return a1;
}

double kaldi::CuVector<float>::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  void *v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  kaldi::Vector<float>::Read((uint64_t)&v9, a2, a3, 0, a5);
  v6 = *(void **)(a1 + 8);
  if (v6)
    free(v6);
  *(_QWORD *)(a1 + 8) = v9;
  v7 = v10;
  v9 = 0;
  v10 = 0;
  *(_QWORD *)(a1 + 16) = v7;
  kaldi::Vector<float>::Destroy((uint64_t)&v9);
  return result;
}

void sub_1DE3FFCEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::CuVectorBase<float>::AddMatVec<signed char>()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "AddMatVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", 506);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::CuVectorBase<float>::AddMatVec<short>()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "AddMatVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", 506);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::CuVectorBase<float>::AddMatVec<signed char>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5, float a6, float a7)
{
  int v7;

  if (a3 == 112)
  {
    if (*(_DWORD *)(a2 + 20) != *(_DWORD *)(a4 + 8))
      goto LABEL_9;
    v7 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    if (a3 != 111 || *(_DWORD *)(a2 + 16) != *(_DWORD *)(a4 + 8))
LABEL_9:
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)0x202, "(trans == kNoTrans && M.NumCols() == v.Dim() && M.NumRows() == dim_) || (trans == kTrans && M.NumRows() == v.Dim() && M.NumCols() == dim_)", a5);
    v7 = *(_DWORD *)(a2 + 20);
  }
  if (v7 != *(_DWORD *)(a1 + 16))
    goto LABEL_9;
  kaldi::VectorBase<float>::AddMatVec<signed char>(a1 + 8, a2 + 8, a3, a4, a5, a6, a7);
}

void kaldi::CuVectorBase<float>::AddMatVec<short>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5, float a6, float a7)
{
  int v7;

  if (a3 == 112)
  {
    if (*(_DWORD *)(a2 + 20) != *(_DWORD *)(a4 + 8))
      goto LABEL_9;
    v7 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    if (a3 != 111 || *(_DWORD *)(a2 + 16) != *(_DWORD *)(a4 + 8))
LABEL_9:
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)0x202, "(trans == kNoTrans && M.NumCols() == v.Dim() && M.NumRows() == dim_) || (trans == kTrans && M.NumRows() == v.Dim() && M.NumCols() == dim_)", a5);
    v7 = *(_DWORD *)(a2 + 20);
  }
  if (v7 != *(_DWORD *)(a1 + 16))
    goto LABEL_9;
  kaldi::VectorBase<float>::AddMatVec<short>(a1 + 8, a2 + 8, a3, a4, a5, a6, a7);
}

uint64_t kaldi::CuWorkspace::GetMatrix<float>@<X0>(_QWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v7;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v12[34];

  v7 = a3 * a2;
  if (a1[8] < (unint64_t)(4 * v7))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "GetMatrix", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-workspace.cc", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Failed to create a ", 19);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" by ", 4);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" matrix with only ", 18);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, " bytes available in the workspace");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  kaldi::CuWorkspace::GetVector<float>(a1, v7, a4, v12);
  return kaldi::CuSubMatrix<float>::CuSubMatrix(a5, (uint64_t)v12, a2);
}

void kaldi::CuWorkspace::GetVector<float>(_QWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD v10[34];

  v6 = 4 * a2;
  if (v6 > a1[8])
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "GetVector", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-workspace.cc", 72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Failed to create a vector of ", 29);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" elements with only ", 20);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, " bytes available in the workspace");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  v7 = a1[1];
  a4[2] = 0;
  a4[3] = 0;
  *a4 = &unk_1EA926538;
  a4[1] = v7;
  *((_DWORD *)a4 + 4) = a2;
  if (a3 == 3 || !a3)
    kaldi::CuVectorBase<float>::SetZero((uint64_t)a4);
  std::deque<char *>::push_back(a1 + 2, a1 + 1);
  a1[1] += v6;
  a1[8] -= v6;
}

void sub_1DE4000B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)v1 = v2 + 16;
  *(_QWORD *)(v1 + 8) = 0;
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  _Unwind_Resume(a1);
}

void kaldi::CuWorkspace::Destroy(kaldi::CuWorkspace *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v6 = (_QWORD *)*((_QWORD *)this + 9);
  if (v6)
  {
    v7 = v6[7] - 1;
    v8 = *(_QWORD *)(*(_QWORD *)(v6[3] + (((unint64_t)(v7 + v6[6]) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v7 + v6[6]) & 0x1FF));
    if (v8 != *(_QWORD *)this)
      kaldi::KaldiAssertFailure_((kaldi *)"Destroy", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-workspace.cc", (const char *)0x1B, "parent_->used_mem_.top() == base_ptr_", a5);
    v9 = v6[1] - v8 + v6[8];
    v6[1] = v8;
    v6[7] = v7;
    v6[8] = v9;
    std::deque<char *>::__maybe_remove_back_spare[abi:ne180100](v6 + 2, 1);
  }
  else
  {
    v10 = *(void **)this;
    if (*(_QWORD *)this)
      free(v10);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
}

uint64_t kaldi::CuWorkspace::GetChildWorkspace(kaldi::CuWorkspace *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD v8[34];

  v2 = a2;
  if (a2 == -1)
    v2 = *((_QWORD *)this + 8);
  if (v2 < 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8, "GetChildWorkspace", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-workspace.cc", 123);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "mem_size_bytes >= 0");
    goto LABEL_7;
  }
  if (v2 > *((_QWORD *)this + 8))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8, "GetChildWorkspace", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-workspace.cc", 125);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Can't create a child workspace of ", 34);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)". Only have ", 12);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " bytes");
LABEL_7:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  v4 = operator new();
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)v4 = *(_OWORD *)this;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 64) = v2;
  *(_QWORD *)(v4 + 72) = this;
  *((_QWORD *)this + 8) -= v2;
  std::deque<char *>::push_back((_QWORD *)this + 2, (_QWORD *)this + 1);
  *((_QWORD *)this + 1) += v2;
  return v4;
}

void sub_1DE4002B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void kaldi::CuWorkspace::~CuWorkspace(kaldi::CuWorkspace *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::CuWorkspace::Destroy(this, a2, a3, a4, a5);
  std::deque<char *>::~deque[abi:ne180100]((_QWORD *)this + 2);
}

uint64_t std::deque<char *>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<char **>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<char **>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t std::deque<char *>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 6) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200)
    a2 = 1;
  if (v5 < 0x400)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<char *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<char *>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<char *>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<char **>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<char **>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<char **>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char **>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1DE400790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<char **>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<char **>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t kaldi::CuSubMatrix<float>::CuSubMatrix(uint64_t result, uint64_t a2, int a3)
{
  int v3;
  int v4;
  _QWORD *v5;
  _QWORD v6[34];

  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  *(_QWORD *)result = &unk_1EA926508;
  v3 = *(_DWORD *)(a2 + 16);
  v4 = v3 / a3;
  if (v3 % a3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6, "CuSubMatrix", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", 975);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"the vector cannot be represented as a matrix with rows ", 55);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" , while it has dimension ", 26);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 20) = a3;
  *(_DWORD *)(result + 24) = v4;
  *(_DWORD *)(result + 28) = v3;
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 24);
  return result;
}

void sub_1DE400D20(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::CompressedMatrix::CopyFromMat<float>(uint64_t a1, float **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  float v15;
  float v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  _OWORD *Data;
  uint64_t v23;
  float *v24;
  _WORD *v25;
  _BYTE *v26;
  int v27;
  __int128 v28;

  if (*(_QWORD *)a1)
  {
    if (*(_BYTE *)(a1 + 8))
      *(_BYTE *)(a1 + 8) = 0;
    else
      MEMORY[0x1DF0ECFFC]();
    *(_QWORD *)a1 = 0;
  }
  if (kaldi::MatrixBase<float>::NumRows((uint64_t)a2))
  {
    kaldi::MatrixBase<float>::Min((uint64_t)a2, v4, v5, v6, v7);
    v9 = v8;
    kaldi::MatrixBase<float>::Max((uint64_t)a2, v10, v11, v12, v13);
    if (v15 == v9)
      v15 = fabsf(v9) + 1.0 + v9;
    v16 = v15 - v9;
    *(_QWORD *)&v28 = __PAIR64__(LODWORD(v16), LODWORD(v9));
    if ((LODWORD(v9) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v16) & 0x7FFFFFFFu) >= 0x7F800000)
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)0x46, "KALDI_ISFINITE(global_header.min_value) && KALDI_ISFINITE(global_header.range)", v14);
    if (v16 <= 0.0)
      DWORD1(v28) = 925353388;
    DWORD2(v28) = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
    v17 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
    HIDWORD(v28) = v17;
    Data = (_OWORD *)kaldi::CompressedMatrix::AllocateData((kaldi::CompressedMatrix *)((DWORD2(v28) + 8) * v17 + 16), v18, v19, v20, v21);
    *(_QWORD *)a1 = Data;
    *Data = v28;
    if (v17 >= 1)
    {
      v23 = 0;
      v24 = *a2;
      v25 = Data + 1;
      v26 = (char *)Data + 8 * v17 + 16;
      do
      {
        v27 = kaldi::MatrixBase<float>::Stride((uint64_t)a2);
        kaldi::CompressedMatrix::CompressColumn<float>((float *)&v28, v24, v27, SDWORD2(v28), v25, v26);
        v25 += 4;
        v26 += SDWORD2(v28);
        ++v23;
        ++v24;
      }
      while (v23 < SHIDWORD(v28));
    }
  }
}

uint64_t kaldi::CompressedMatrix::Destroy(kaldi::CompressedMatrix *this)
{
  uint64_t result;

  result = *(_QWORD *)this;
  if (result)
  {
    if (*((_BYTE *)this + 8))
      *((_BYTE *)this + 8) = 0;
    else
      result = MEMORY[0x1DF0ECFFC]();
    *(_QWORD *)this = 0;
  }
  return result;
}

uint64_t kaldi::CompressedMatrix::AllocateData(kaldi::CompressedMatrix *this, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if ((int)this <= 0)
    kaldi::KaldiAssertFailure_((kaldi *)"AllocateData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)0x119, "num_bytes > 0", a5);
  return operator new[]();
}

void kaldi::CompressedMatrix::CompressColumn<float>(float *a1, float *a2, int a3, int a4, _WORD *a5, _BYTE *a6)
{
  float *v10;
  unint64_t v12;
  unint64_t v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  double v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  double v23;
  unsigned int v24;
  double v25;
  double v26;
  unsigned int v27;
  char v28;

  v10 = a2;
  kaldi::CompressedMatrix::ComputeColHeader<float>(a1, a2, a3, a4, (uint64_t)a5);
  if (a4 >= 1)
  {
    v14 = *a1;
    *(double *)&v15 = a1[1];
    v16 = 0x3EF000100010000ALL;
    v17 = *(double *)&v15 * 0.0000152590219;
    LOWORD(v15) = *a5;
    v18 = v14 + v17 * (double)v15;
    LOWORD(v16) = a5[1];
    v19 = v14 + v17 * (double)v16;
    LOWORD(v12) = a5[2];
    *(float *)&v12 = v14 + v17 * (double)v12;
    LOWORD(v13) = a5[3];
    *(float *)&v14 = v14 + v17 * (double)v13;
    v20 = *(float *)&v14 - *(float *)&v12;
    v21 = a4;
    do
    {
      v22 = *v10;
      if (*v10 >= v19)
      {
        v25 = (float)((float)((float)(v22 - *(float *)&v12) / v20) * 63.0) + 0.5;
        v24 = (int)v25 & ~((int)v25 >> 31);
        if (v24 >= 0x3F)
          LOBYTE(v24) = 63;
        LOBYTE(v24) = v24 | 0xC0;
        v26 = (float)((float)((float)(v22 - v19) / (float)(*(float *)&v12 - v19)) * 128.0) + 0.5;
        v27 = (int)v26 & ~((int)v26 >> 31);
        if (v27 >= 0x80)
          LOBYTE(v27) = 0x80;
        v28 = v27 + 64;
        if (v22 < *(float *)&v12)
          LOBYTE(v24) = v28;
      }
      else
      {
        v23 = (float)((float)((float)(v22 - v18) / (float)(v19 - v18)) * 64.0) + 0.5;
        v24 = (int)v23 & ~((int)v23 >> 31);
        if (v24 >= 0x40)
          LOBYTE(v24) = 64;
      }
      *a6++ = v24;
      v10 += a3;
      --v21;
    }
    while (v21);
  }
}

float *kaldi::CompressedMatrix::CopyToMat<float>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  const char *v6;
  float *result;
  uint64_t v8;
  const char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  double v18;
  double v19;
  float v20;
  float v21;
  double v22;
  float v23;
  double v24;
  float v25;
  double v26;
  float v27;
  unsigned int v28;
  int v29;
  double v30;
  BOOL v31;
  int v32;
  float v33;
  const char *v34;
  const char *v35;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 + 8);
    v5 = *(int *)(v3 + 12);
    if (kaldi::MatrixBase<float>::NumRows(a2) != v4)
      kaldi::KaldiAssertFailure_((kaldi *)"CopyToMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)0x1CE, "mat->NumRows() == num_rows", v6);
    result = (float *)kaldi::MatrixBase<float>::NumCols(a2);
    if ((_DWORD)result != (_DWORD)v5)
      kaldi::KaldiAssertFailure_((kaldi *)"CopyToMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)0x1CF, "mat->NumCols() == num_cols", v9);
    if ((int)v5 >= 1)
    {
      v13 = 0;
      v14 = (_WORD *)(v3 + 16);
      v15 = v3 + 16 + 8 * v5;
      do
      {
        if (v4 >= 1)
        {
          v16 = 0;
          v17 = 0x3EF000100010000ALL;
          v18 = *(float *)(v3 + 4) * 0.0000152590219;
          LOWORD(v17) = v14[3];
          v19 = *(float *)v3;
          *(float *)&v17 = v19 + v18 * (double)v17;
          LOWORD(v10) = v14[2];
          v20 = v19 + v18 * (double)v10;
          LOWORD(v11) = v14[1];
          v21 = v19 + v18 * (double)v11;
          LOWORD(v12) = *v14;
          *(float *)&v18 = v19 + v18 * (double)v12;
          v22 = v20;
          v23 = *(float *)&v17 - v20;
          v24 = v21;
          v25 = v20 - v21;
          v26 = *(float *)&v18;
          v27 = v21 - *(float *)&v18;
          do
          {
            v28 = *(unsigned __int8 *)(v15 + v16);
            v29 = v28 - 64;
            if (v28 > 0x40)
            {
              v31 = v28 >= 0xC0;
              v32 = v28 - 192;
              if (v32 != 0 && v31)
                v30 = v22 + (float)(v23 * (float)v32) * 0.0158730159;
              else
                v30 = v24 + (float)(v25 * (float)v29) * 0.0078125;
            }
            else
            {
              v30 = v26 + (float)(v27 * (float)v28) * 0.015625;
            }
            v33 = v30;
            result = (float *)kaldi::MatrixBase<float>::operator()(a2, v16, v13, v8, v9);
            *result = v33;
            ++v16;
          }
          while (v4 != (_DWORD)v16);
          v15 += v16;
        }
        ++v13;
        v14 += 4;
      }
      while (v13 != (_DWORD)v5);
    }
  }
  else
  {
    if (kaldi::MatrixBase<float>::NumRows(a2))
      kaldi::KaldiAssertFailure_((kaldi *)"CopyToMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)0x1C6, "mat->NumRows() == 0", v34);
    result = (float *)kaldi::MatrixBase<float>::NumCols(a2);
    if ((_DWORD)result)
      kaldi::KaldiAssertFailure_((kaldi *)"CopyToMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)0x1C7, "mat->NumCols() == 0", v35);
  }
  return result;
}

double *kaldi::CompressedMatrix::CopyToMat<double>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  const char *v6;
  double *result;
  uint64_t v8;
  const char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  double v18;
  double v19;
  float v20;
  float v21;
  double v22;
  float v23;
  double v24;
  float v25;
  double v26;
  float v27;
  unsigned int v28;
  int v29;
  double v30;
  BOOL v31;
  int v32;
  float v33;
  double v34;
  const char *v35;
  const char *v36;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 + 8);
    v5 = *(int *)(v3 + 12);
    if (kaldi::MatrixBase<float>::NumRows(a2) != v4)
      kaldi::KaldiAssertFailure_((kaldi *)"CopyToMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)0x1CE, "mat->NumRows() == num_rows", v6);
    result = (double *)kaldi::MatrixBase<float>::NumCols(a2);
    if ((_DWORD)result != (_DWORD)v5)
      kaldi::KaldiAssertFailure_((kaldi *)"CopyToMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)0x1CF, "mat->NumCols() == num_cols", v9);
    if ((int)v5 >= 1)
    {
      v13 = 0;
      v14 = (_WORD *)(v3 + 16);
      v15 = v3 + 16 + 8 * v5;
      do
      {
        if (v4 >= 1)
        {
          v16 = 0;
          v17 = 0x3EF000100010000ALL;
          v18 = *(float *)(v3 + 4) * 0.0000152590219;
          LOWORD(v17) = v14[3];
          v19 = *(float *)v3;
          *(float *)&v17 = v19 + v18 * (double)v17;
          LOWORD(v10) = v14[2];
          v20 = v19 + v18 * (double)v10;
          LOWORD(v11) = v14[1];
          v21 = v19 + v18 * (double)v11;
          LOWORD(v12) = *v14;
          *(float *)&v18 = v19 + v18 * (double)v12;
          v22 = v20;
          v23 = *(float *)&v17 - v20;
          v24 = v21;
          v25 = v20 - v21;
          v26 = *(float *)&v18;
          v27 = v21 - *(float *)&v18;
          do
          {
            v28 = *(unsigned __int8 *)(v15 + v16);
            v29 = v28 - 64;
            if (v28 > 0x40)
            {
              v31 = v28 >= 0xC0;
              v32 = v28 - 192;
              if (v32 != 0 && v31)
                v30 = v22 + (float)(v23 * (float)v32) * 0.0158730159;
              else
                v30 = v24 + (float)(v25 * (float)v29) * 0.0078125;
            }
            else
            {
              v30 = v26 + (float)(v27 * (float)v28) * 0.015625;
            }
            v33 = v30;
            v34 = v33;
            result = (double *)kaldi::MatrixBase<double>::operator()(a2, v16, v13, v8, v9);
            *result = v34;
            ++v16;
          }
          while (v4 != (_DWORD)v16);
          v15 += v16;
        }
        ++v13;
        v14 += 4;
      }
      while (v13 != (_DWORD)v5);
    }
  }
  else
  {
    if (kaldi::MatrixBase<float>::NumRows(a2))
      kaldi::KaldiAssertFailure_((kaldi *)"CopyToMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)0x1C6, "mat->NumRows() == 0", v35);
    result = (double *)kaldi::MatrixBase<float>::NumCols(a2);
    if ((_DWORD)result)
      kaldi::KaldiAssertFailure_((kaldi *)"CopyToMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)0x1C7, "mat->NumCols() == 0", v36);
  }
  return result;
}

uint64_t kaldi::CompressedMatrix::CopyRowsFromVec<float>(uint64_t *a1, char **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8[5];

  v4 = *a1;
  if (*a1)
  {
    v5 = *(unsigned int *)(v4 + 8);
    v6 = *(unsigned int *)(v4 + 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v8, v5, v6, 0, 0);
  kaldi::MatrixBase<float>::CopyRowsFromVec(v8, a2);
  kaldi::CompressedMatrix::CopyFromMat<float>((uint64_t)a1, (float **)v8);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v8);
}

void sub_1DE40163C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::CompressedMatrix::CopyColToVec<float>(uint64_t *a1, unsigned int a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, const char *a10)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  double v17;
  double v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  double v23;
  float v24;
  double v25;
  float v26;
  unsigned int v27;
  int v28;
  double v29;
  BOOL v30;
  int v31;
  float v32;

  v10 = *a1;
  if (*a1)
    v11 = *(_DWORD *)(v10 + 12);
  else
    v11 = 0;
  if (v11 <= (int)a2)
    kaldi::KaldiAssertFailure_((kaldi *)"CopyColToVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)0x21C, "col < this->NumCols()", a10);
  if ((a2 & 0x80000000) != 0)
    kaldi::KaldiAssertFailure_((kaldi *)"CopyColToVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)0x21D, "col >= 0", a10);
  v12 = *(unsigned int *)(a3 + 8);
  if (v10)
    v13 = *(_DWORD *)(v10 + 8);
  else
    v13 = 0;
  if ((_DWORD)v12 != v13)
    kaldi::KaldiAssertFailure_((kaldi *)"CopyColToVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)0x21E, "v->Dim() == this->NumRows()", a10);
  v14 = *(unsigned int *)(v10 + 8);
  if ((int)v14 >= 1)
  {
    v15 = 0;
    v16 = (_WORD *)(v10 + 16 + 8 * a2);
    LOWORD(a5) = v16[3];
    LOWORD(a6) = v16[2];
    LOWORD(a7) = v16[1];
    LOWORD(a8) = *v16;
    v17 = *(float *)(v10 + 4) * 0.0000152590219;
    v18 = *(float *)v10;
    v19 = v18 + v17 * (double)*(unint64_t *)&a5;
    v20 = v18 + v17 * (double)*(unint64_t *)&a6;
    v21 = v18 + v17 * (double)*(unint64_t *)&a7;
    *(float *)&v18 = v18 + v17 * (double)*(unint64_t *)&a8;
    v22 = v10 + 16 + 8 * *(int *)(v10 + 12) + (int)(v14 * a2);
    a4 = v20;
    *(float *)&a5 = v19 - v20;
    v23 = v21;
    v24 = v20 - v21;
    v25 = *(float *)&v18;
    v26 = v21 - *(float *)&v18;
    do
    {
      v27 = *(unsigned __int8 *)(v22 + v15);
      v28 = v27 - 64;
      if (v27 > 0x40)
      {
        v30 = v27 >= 0xC0;
        v31 = v27 - 192;
        if (v31 != 0 && v30)
          v29 = a4 + (float)(*(float *)&a5 * (float)v31) * 0.0158730159;
        else
          v29 = v23 + (float)(v24 * (float)v28) * 0.0078125;
      }
      else
      {
        v29 = v25 + (float)(v26 * (float)v27) * 0.015625;
      }
      if (v12 == v15)
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a10);
      v32 = v29;
      *(float *)(*(_QWORD *)a3 + 4 * v15++) = v32;
    }
    while (v14 != v15);
  }
  return *(float *)&a4;
}

uint64_t *kaldi::CompressedMatrix::CopyRowToVec<float>(uint64_t *result, unsigned int a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, uint64_t a10, const char *a11)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  double v21;
  double v22;
  double v23;
  unsigned int v24;
  int v25;
  float v26;
  double v27;
  double v28;
  double v29;
  BOOL v30;
  int v31;
  double v32;
  double v33;
  float v34;
  float v35;

  v11 = *result;
  if (*result)
    v12 = *(_DWORD *)(v11 + 8);
  else
    v12 = 0;
  if (v12 <= (int)a2)
    kaldi::KaldiAssertFailure_((kaldi *)"CopyRowToVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)0x206, "row < this->NumRows()", a11);
  if ((a2 & 0x80000000) != 0)
    kaldi::KaldiAssertFailure_((kaldi *)"CopyRowToVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)0x207, "row >= 0", a11);
  v13 = *(unsigned int *)(a3 + 8);
  if (v11)
    v14 = *(_DWORD *)(v11 + 12);
  else
    v14 = 0;
  if ((_DWORD)v13 != v14)
    kaldi::KaldiAssertFailure_((kaldi *)"CopyRowToVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)0x208, "v->Dim() == this->NumCols()", a11);
  v15 = *(unsigned int *)(v11 + 12);
  if ((int)v15 >= 1)
  {
    v16 = 0;
    v17 = (unsigned __int8 *)(v11 + 8 * v15 + a2 + 16);
    v18 = 4 * v13;
    v19 = 4 * v15;
    v20 = (_WORD *)(v11 + 22);
    do
    {
      v21 = *(float *)v11;
      v22 = *(float *)(v11 + 4) * 0.0000152590219;
      LOWORD(a8) = *(v20 - 2);
      v23 = v21 + v22 * (double)*(unint64_t *)&a8;
      *(float *)&v23 = v23;
      v24 = *v17;
      v25 = v24 - 64;
      if (v24 > 0x40)
      {
        LOWORD(a9) = *(v20 - 1);
        a9 = v21 + v22 * (double)*(unint64_t *)&a9;
        *(float *)&a9 = a9;
        v30 = v24 >= 0xC0;
        v31 = v24 - 192;
        if (v31 != 0 && v30)
        {
          LOWORD(v23) = *v20;
          a8 = (double)*(unint64_t *)&v23;
          v34 = v21 + v22 * a8;
          *(float *)&a8 = (float)v31;
          v29 = *(float *)&a9 + (float)((float)(v34 - *(float *)&a9) * (float)v31) * 0.0158730159;
        }
        else
        {
          v32 = *(float *)&v23;
          v33 = (float)((float)(*(float *)&a9 - *(float *)&v23) * (float)v25);
          a8 = 0.0078125;
          v29 = v32 + v33 * 0.0078125;
        }
      }
      else
      {
        LOWORD(a9) = *(v20 - 3);
        a9 = (double)*(unint64_t *)&a9;
        v26 = v21 + v22 * a9;
        v27 = v26;
        v28 = (float)((float)(*(float *)&v23 - v26) * (float)v24);
        a8 = 0.015625;
        v29 = v27 + v28 * 0.015625;
      }
      if (v18 == v16)
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a11);
      v20 += 4;
      v35 = v29;
      *(float *)(*(_QWORD *)a3 + v16) = v35;
      v17 += *(int *)(v11 + 8);
      v16 += 4;
    }
    while (v19 != v16);
  }
  return result;
}

uint64_t kaldi::CompressedMatrix::Write(uint64_t *a1, _QWORD *a2, int a3, uint64_t a4, const char *a5)
{
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[34];

  if (a3)
  {
    v7 = a4;
    if ((_DWORD)a4)
      v8 = "CN";
    else
      v8 = "CM";
    kaldi::WriteToken(a2, (const char *)1, (kaldi *)v8, a4, a5);
    if (v7 && (fst::AlignOutput(a2) & 1) == 0)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "Write", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/compressed-matrix.cc", 295);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "Could not align output");
LABEL_18:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
    }
    if (!*a1)
    {
      v13[0] = 0;
      v13[1] = 0;
    }
    result = std::ostream::write();
  }
  else
  {
    v9 = *a1;
    if (*a1)
    {
      v10 = *(unsigned int *)(v9 + 8);
      v11 = *(unsigned int *)(v9 + 12);
    }
    else
    {
      v10 = 0;
      v11 = 0;
    }
    kaldi::Matrix<float>::Matrix((uint64_t)v13, v10, v11, 1, 0);
    kaldi::CompressedMatrix::CopyToMat<float>(a1, (uint64_t)v13);
    kaldi::MatrixBase<float>::Write(v13, a2, 0, 0);
    result = kaldi::Matrix<float>::~Matrix((uint64_t)v13);
  }
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "Write", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/compressed-matrix.cc", 341);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "Error writing compressed matrix to stream.");
    goto LABEL_18;
  }
  return result;
}

void sub_1DE401BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void kaldi::CompressedMatrix::Read(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  char *v8;
  uint64_t v9;
  const char *v10;
  int v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *p_p;
  void **p_s1;
  uint64_t v18;
  double v19;
  double v20;
  unsigned __int8 *v21;
  int v22;
  unsigned __int8 *v23;
  _BYTE *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  _OWORD *Data;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  size_t v36;
  _QWORD *v37;
  __int128 v38;
  void *__s1;
  size_t __n;
  uint64_t v41;
  void *__p;
  uint64_t v43;
  unsigned __int8 v44;
  float *v45[35];

  v45[34] = *(float **)MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a1)
  {
    if (*(_BYTE *)(a1 + 8))
      *(_BYTE *)(a1 + 8) = 0;
    else
      MEMORY[0x1DF0ECFFC]();
    *(_QWORD *)a1 = 0;
  }
  if (!a3)
  {
    v19 = kaldi::Matrix<float>::Matrix((uint64_t)v45);
    kaldi::Matrix<float>::Read(v45, a2, 0, 0, 0, v19);
    kaldi::CompressedMatrix::CopyFromMat<float>(a1, v45);
LABEL_28:
    kaldi::Matrix<float>::~Matrix((uint64_t)v45);
LABEL_29:
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/compressed-matrix.cc", 448);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v45, "Failed to read data.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
    }
    return;
  }
  if (kaldi::Peek(a2, 1) != 67)
  {
    v20 = kaldi::Matrix<float>::Matrix((uint64_t)v45);
    kaldi::Matrix<float>::Read(v45, a2, 1, a4 != 0, 0, v20);
    kaldi::CompressedMatrix::CopyFromMat<float>(a1, v45);
    goto LABEL_28;
  }
  if (a4)
    v8 = "CN";
  else
    v8 = "CM";
  std::string::basic_string[abi:ne180100]<0>(&__p, v8);
  __s1 = 0;
  __n = 0;
  v41 = 0;
  kaldi::ReadToken(a2, 1, (uint64_t)&__s1, v9, v10);
  v11 = SHIBYTE(v41);
  v12 = __n;
  if (v41 >= 0)
    v13 = HIBYTE(v41);
  else
    v13 = __n;
  v14 = v44;
  v15 = (char)v44;
  if ((v44 & 0x80u) != 0)
    v14 = v43;
  if (v13 != v14)
    goto LABEL_31;
  if ((v44 & 0x80u) == 0)
    p_p = (unsigned __int8 *)&__p;
  else
    p_p = (unsigned __int8 *)__p;
  if (v41 < 0)
  {
    if (memcmp(__s1, p_p, __n))
      goto LABEL_35;
LABEL_45:
    if (!a4)
      goto LABEL_49;
    goto LABEL_46;
  }
  if (!HIBYTE(v41))
    goto LABEL_45;
  p_s1 = &__s1;
  v18 = HIBYTE(v41);
  while (*(unsigned __int8 *)p_s1 == *p_p)
  {
    p_s1 = (void **)((char *)p_s1 + 1);
    ++p_p;
    if (!--v18)
      goto LABEL_45;
  }
LABEL_31:
  if ((v41 & 0x8000000000000000) == 0)
  {
    if (HIBYTE(v41) != 2)
      goto LABEL_61;
    v21 = (unsigned __int8 *)&__s1;
    goto LABEL_37;
  }
LABEL_35:
  if (v12 != 2)
    goto LABEL_61;
  v21 = (unsigned __int8 *)__s1;
LABEL_37:
  v22 = *v21;
  v23 = (unsigned __int8 *)__p;
  if (v15 >= 0)
    v23 = (unsigned __int8 *)&__p;
  if (v22 != *v23)
    goto LABEL_61;
  v24 = __s1;
  if (v11 >= 0)
    v24 = &__s1;
  if (v24[1] != 78)
  {
LABEL_61:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/compressed-matrix.cc", 361);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Expected token ", 15);
    if ((v44 & 0x80u) == 0)
      v31 = &__p;
    else
      v31 = __p;
    if ((v44 & 0x80u) == 0)
      v32 = v44;
    else
      v32 = v43;
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", got ", 6);
    if (v41 >= 0)
      v35 = &__s1;
    else
      v35 = __s1;
    if (v41 >= 0)
      v36 = HIBYTE(v41);
    else
      v36 = __n;
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)". This could mean that you're trying to memory map an unaligned file.", 69);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v45, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/compressed-matrix.cc", 358);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Reading aligned matrix as a stream", 34);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v45);
  }
LABEL_46:
  fst::AlignInput();
  if (a4)
  {
    std::istream::tellg();
    *(_QWORD *)a1 = (char *)v45[16] + a4;
    *(_BYTE *)(a1 + 8) = 1;
    std::istream::seekg();
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/compressed-matrix.cc", 379);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Seeking for aligned data failed", 31);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
    }
    goto LABEL_52;
  }
LABEL_49:
  std::istream::read();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/compressed-matrix.cc", 387);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Failed to read header", 21);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
  }
  if (HIDWORD(v38))
  {
    Data = (_OWORD *)kaldi::CompressedMatrix::AllocateData((kaldi::CompressedMatrix *)((DWORD2(v38) + 8) * HIDWORD(v38) + 16), v25, v26, v27, v28);
    *Data = v38;
    std::istream::read();
    *(_QWORD *)a1 = Data;
    *(_BYTE *)(a1 + 8) = 0;
LABEL_52:
    if (SHIBYTE(v41) < 0)
      operator delete(__s1);
    if ((char)v44 < 0)
      operator delete(__p);
    goto LABEL_29;
  }
  if (SHIBYTE(v41) < 0)
    operator delete(__s1);
  if ((char)v44 < 0)
    operator delete(__p);
}

void sub_1DE402150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::CompressedMatrix::Sum(kaldi::CompressedMatrix *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  signed int v14;
  float v15;
  uint64_t v16;
  void *v18[3];

  if (*(_QWORD *)this)
    v6 = *(unsigned int *)(*(_QWORD *)this + 8);
  else
    v6 = 0;
  memset(v18, 0, sizeof(v18));
  kaldi::Vector<float>::Resize(v18, v6, 0, a4, a5);
  v14 = 0;
  v15 = 0.0;
  while (1)
  {
    v16 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      LODWORD(v16) = *(_DWORD *)(v16 + 12);
    if (v14 >= (int)v16)
      break;
    kaldi::CompressedMatrix::CopyColToVec<float>((uint64_t *)this, v14, (uint64_t)v18, v9, v10, v11, v12, v13, v7, v8);
    *(float *)&v9 = kaldi::VectorBase<float>::Sum((uint64_t)v18);
    v15 = v15 + *(float *)&v9;
    ++v14;
  }
  kaldi::Vector<float>::Destroy((uint64_t)v18);
  return v15;
}

void sub_1DE402224(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CompressedMatrix::operator=(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v7;
  void *Data;

  if (*(_QWORD *)a1)
  {
    if (*(_BYTE *)(a1 + 8))
      *(_BYTE *)(a1 + 8) = 0;
    else
      MEMORY[0x1DF0ECFFC]();
    *(_QWORD *)a1 = 0;
  }
  if (*a2)
  {
    v7 = (*((_DWORD *)*a2 + 2) + 8) * *((_DWORD *)*a2 + 3) + 16;
    Data = (void *)kaldi::CompressedMatrix::AllocateData((kaldi::CompressedMatrix *)v7, (int)a2, a3, a4, a5);
    memcpy(Data, *a2, v7);
    *(_QWORD *)a1 = Data;
  }
  return a1;
}

uint64_t kaldi::CompressedMatrix::CompressedMatrix(uint64_t this, const void **a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *(_QWORD *)this = 0;
  *(_BYTE *)(this + 8) = 0;
  return kaldi::CompressedMatrix::operator=(this, a2, a3, a4, a5);
}

void kaldi::KaldiLogMessage::~KaldiLogMessage(kaldi::KaldiLogMessage *this)
{
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  void *__p;
  char v6;

  v2 = (void (*)(uint64_t))kaldi::KaldiLogMessage::g_logger[0];
  std::stringbuf::str();
  v2((uint64_t)&__p);
  if (v6 < 0)
    operator delete(__p);
  v3 = MEMORY[0x1E0DE4F60];
  v4 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)this = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *((_QWORD *)this + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1DF0ECF6C]((char *)this + 112);
}

void kaldi::CompressedMatrix::ComputeColHeader<float>(float *a1, float *a2, int a3, int a4, uint64_t a5)
{
  float v10;
  float *v11;
  float *v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  float *v16;
  float v17;
  uint64_t v18;
  float *v19;
  float *v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  BOOL v26;
  float v27;
  int v28;
  float v29;
  float v30;
  unsigned int v31;
  float v32;
  float v33;
  unsigned int v34;
  float v35;
  double v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  void *__p;
  float *v48;

  if (a4 <= 0)
    kaldi::KaldiAssertFailure_((kaldi *)"ComputeColHeader", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)0x95, "num_rows > 0", (const char *)a5);
  std::vector<float>::vector(&__p, a4);
  v11 = (float *)__p;
  v12 = v48;
  if (v48 != __p)
  {
    v13 = ((char *)v48 - (_BYTE *)__p) >> 2;
    if (v13 <= 1)
      v13 = 1;
    v14 = __p;
    do
    {
      v10 = *a2;
      *v14++ = *(_DWORD *)a2;
      a2 += a3;
      --v13;
    }
    while (v13);
  }
  if (a4 <= 4)
  {
    std::__sort<std::__less<float,float> &,float *>();
    v21 = (float *)__p;
    v37 = *a1;
    v38 = a1[1];
    v39 = 1.0;
    if ((float)((float)(*(float *)__p - *a1) / v38) <= 1.0)
      v40 = (float)(*(float *)__p - *a1) / v38;
    else
      v40 = 1.0;
    if (v40 >= 0.0)
      v41 = v40 * 65535.0;
    else
      v41 = 0.0;
    v34 = (int)(v41 + 0.499);
    *(_WORD *)a5 = v34;
    if (a4 <= 1)
    {
      LOWORD(v34) = v34 + 1;
      *(_WORD *)(a5 + 2) = v34;
    }
    else
    {
      if ((float)((float)(v21[1] - v37) / v38) <= 1.0)
        v39 = (float)(v21[1] - v37) / v38;
      if (v39 >= 0.0)
        v42 = v39 * 65535.0;
      else
        v42 = 0.0;
      v34 = (unsigned __int16)(v34 + 1);
      if (v34 <= (unsigned __int16)(int)(v42 + 0.499))
        LOWORD(v34) = (int)(v42 + 0.499);
      *(_WORD *)(a5 + 2) = v34;
      if (a4 != 2)
      {
        v43 = (float)(v21[2] - v37) / v38;
        if (v43 > 1.0)
          v43 = 1.0;
        v44 = v43 * 65535.0;
        if (v43 < 0.0)
          v44 = 0.0;
        v34 = (unsigned __int16)(v34 + 1);
        if (v34 <= (unsigned __int16)(int)(v44 + 0.499))
          LOWORD(v34) = (int)(v44 + 0.499);
        *(_WORD *)(a5 + 4) = v34;
        if (a4 >= 4)
        {
          v45 = (float)(v21[3] - v37) / v38;
          if (v45 > 1.0)
            v45 = 1.0;
          if (v45 >= 0.0)
            v46 = v45 * 65535.0;
          else
            v46 = 0.0;
          v36 = v46 + 0.499;
          goto LABEL_35;
        }
LABEL_67:
        LOWORD(v34) = v34 + 1;
        goto LABEL_68;
      }
    }
    LOWORD(v34) = v34 + 1;
    *(_WORD *)(a5 + 4) = v34;
    goto LABEL_67;
  }
  v15 = a4 >> 2;
  v16 = &v11[v15];
  if (v16 != v12)
  {
    v10 = std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v11, v16, v12, v10);
    v11 = (float *)__p;
  }
  v17 = std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v11, v11, &v11[v15], v10);
  v18 = (3 * v15);
  v19 = (float *)__p;
  v20 = (float *)((char *)__p + 4 * v18);
  if (v20 != v48)
  {
    v17 = std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>((float *)__p + v15 + 1, (float *)__p + v18, v48, v17);
    v19 = (float *)__p;
    v20 = v48;
  }
  std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(&v19[v18 + 1], v20 - 1, v20, v17);
  v21 = (float *)__p;
  v22 = *a1;
  v23 = a1[1];
  v24 = (float)(*(float *)__p - *a1) / v23;
  if (v24 > 1.0)
    v24 = 1.0;
  v25 = v24 * 65535.0;
  v26 = v24 < 0.0;
  v27 = 0.0;
  if (v26)
    v25 = 0.0;
  v28 = (int)(v25 + 0.499);
  *(_WORD *)a5 = v28;
  v29 = (float)(v21[v15] - v22) / v23;
  if (v29 > 1.0)
    v29 = 1.0;
  if (v29 >= 0.0)
    v30 = v29 * 65535.0;
  else
    v30 = 0.0;
  v31 = (unsigned __int16)(v28 + 1);
  if (v31 <= (unsigned __int16)(int)(v30 + 0.499))
    LOWORD(v31) = (int)(v30 + 0.499);
  *(_WORD *)(a5 + 2) = v31;
  v32 = (float)(v21[v18] - v22) / v23;
  if (v32 > 1.0)
    v32 = 1.0;
  if (v32 >= 0.0)
    v33 = v32 * 65535.0;
  else
    v33 = 0.0;
  v34 = (unsigned __int16)(v31 + 1);
  if (v34 <= (unsigned __int16)(int)(v33 + 0.499))
    LOWORD(v34) = (int)(v33 + 0.499);
  *(_WORD *)(a5 + 4) = v34;
  v35 = (float)(v21[a4 - 1] - v22) / v23;
  if (v35 > 1.0)
    v35 = 1.0;
  if (v35 >= 0.0)
    v27 = v35 * 65535.0;
  v36 = v27 + 0.499;
LABEL_35:
  v34 = (unsigned __int16)(v34 + 1);
  if (v34 <= (unsigned __int16)(int)v36)
    LOWORD(v34) = (int)v36;
LABEL_68:
  *(_WORD *)(a5 + 6) = v34;
  v48 = v21;
  operator delete(v21);
}

void sub_1DE402734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1DE4027B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *a1, float *a2, float *a3, float result)
{
  float *v4;
  unint64_t v7;
  float *v8;
  float *v9;
  int v10;
  float *v11;
  float *v12;
  float *v13;
  float v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  float v30;

  if (a3 != a2)
  {
    v4 = a3;
    do
    {
      v7 = v4 - a1;
      if (v7 < 2)
        break;
      if (v7 == 3)
      {
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(a1, a1 + 1, v4 - 1);
        return result;
      }
      if (v7 == 2)
      {
        result = *(v4 - 1);
        v30 = *a1;
        if (result < *a1)
        {
          *a1 = result;
          *(v4 - 1) = v30;
        }
        return result;
      }
      if ((char *)v4 - (char *)a1 <= 31)
        return std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(a1, v4, result);
      v8 = &a1[v7 >> 1];
      v9 = v4 - 1;
      v10 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(a1, v8, v4 - 1);
      result = *a1;
      if (*a1 >= *v8)
      {
        v11 = v4 - 1;
        while (--v11 != a1)
        {
          if (*v11 < *v8)
          {
            *a1 = *v11;
            *v11 = result;
            ++v10;
            goto LABEL_13;
          }
        }
        v21 = a1 + 1;
        if (result >= *v9)
        {
          while (v21 != v9)
          {
            v22 = *v21;
            if (result < *v21)
            {
              *v21++ = *v9;
              *v9 = v22;
              goto LABEL_45;
            }
            ++v21;
          }
          return result;
        }
LABEL_45:
        if (v21 == v9)
          return result;
        while (1)
        {
          v25 = *a1;
          do
          {
            v26 = *v21++;
            result = v26;
          }
          while (v25 >= v26);
          v27 = v21 - 1;
          do
          {
            v28 = *--v9;
            v29 = v28;
          }
          while (v25 < v28);
          if (v27 >= v9)
            break;
          *v27 = v29;
          *v9 = result;
        }
        a1 = v21 - 1;
        if (v27 > a2)
          return result;
      }
      else
      {
        v11 = v4 - 1;
LABEL_13:
        v12 = a1 + 1;
        if (a1 + 1 >= v11)
        {
          v16 = a1 + 1;
        }
        else
        {
          v13 = a1 + 1;
          while (1)
          {
            v14 = *v8;
            do
            {
              v15 = *v13++;
              result = v15;
            }
            while (v15 < v14);
            v16 = v13 - 1;
            do
            {
              v17 = *--v11;
              v18 = v17;
            }
            while (v17 >= v14);
            if (v16 >= v11)
              break;
            *v16 = v18;
            *v11 = result;
            ++v10;
            if (v16 == v8)
              v8 = v11;
          }
        }
        if (v16 != v8)
        {
          result = *v8;
          v19 = *v16;
          if (*v8 < *v16)
          {
            *v16 = result;
            *v8 = v19;
            ++v10;
          }
        }
        if (v16 == a2)
          return result;
        if (!v10)
        {
          if (v16 <= a2)
          {
            v23 = v16 + 1;
            while (v23 != v4)
            {
              v24 = *(v23 - 1);
              result = *v23++;
              if (result < v24)
                goto LABEL_29;
            }
          }
          else
          {
            while (v12 != v16)
            {
              v20 = *(v12 - 1);
              result = *v12++;
              if (result < v20)
                goto LABEL_29;
            }
          }
          return result;
        }
LABEL_29:
        if (v16 <= a2)
          a1 = v16 + 1;
        else
          v4 = v16;
      }
    }
    while (v4 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

float std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *a1, float *a2, float result)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float v7;
  float v8;

  while (a1 != a2 - 1)
  {
    v3 = a1++;
    if (v3 != a2 && a1 != a2)
    {
      result = *v3;
      v4 = a1;
      v5 = v3;
      v6 = a1;
      do
      {
        v7 = *v6++;
        v8 = v7;
        if (v7 < result)
        {
          result = v8;
          v5 = v4;
        }
        v4 = v6;
      }
      while (v6 != a2);
      if (v5 != v3)
      {
        result = *v3;
        *v3 = *v5;
        *v5 = result;
      }
    }
  }
  return result;
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1DE402BB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t kaldi::MatrixBase<float>::NumRows(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t kaldi::MatrixBase<float>::NumCols(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t kaldi::MatrixBase<float>::operator()(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 12) <= a2 || *(_DWORD *)(a1 + 8) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", a5);
  return *(_QWORD *)a1 + 4 * (int)(*(_DWORD *)(a1 + 16) * a2) + 4 * (int)a3;
}

uint64_t kaldi::MatrixBase<double>::operator()(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 12) <= a2 || *(_DWORD *)(a1 + 8) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", a5);
  return *(_QWORD *)a1 + 8 * (int)(*(_DWORD *)(a1 + 16) * a2) + 8 * (int)a3;
}

uint64_t kaldi::MatrixBase<float>::Stride(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t kaldi::Matrix<float>::Matrix<double>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  const char *v6;
  int v7;

  *(_BYTE *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (a3 == 111)
  {
    kaldi::Matrix<float>::Resize(a1, *(unsigned int *)(a2 + 12), *(unsigned int *)(a2 + 8), 0, 0);
    v7 = 111;
  }
  else
  {
    kaldi::Matrix<float>::Resize(a1, *(unsigned int *)(a2 + 8), *(unsigned int *)(a2 + 12), 0, 0);
    v7 = 112;
  }
  kaldi::MatrixBase<float>::CopyFromMat<double>(a1, a2, v7, v5, v6);
  return a1;
}

void kaldi::Matrix<float>::Resize(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  int v5;
  int v6;
  signed int v7;
  int v8;
  int v10;
  unsigned int v11;
  char v12;
  void *v13;
  char v14;
  unsigned int v16;
  _BOOL8 v17;
  char v19;
  const char *v20;
  const char *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  const char *v25;
  void *v26;
  void *v27;
  __int128 v28;
  char v29;
  int v30;
  int v31;
  int v32;
  _BYTE v33[32];
  void *v34;
  unsigned int v35;
  unsigned int v36;
  void *v37;
  uint64_t v38;
  void *v39[4];
  char v40;

  v5 = (int)a5;
  v6 = a4;
  v7 = a3;
  v8 = a2;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10 < 1)
    v11 = 0;
  else
    v11 = *(_DWORD *)(a1 + 20) / v10;
  if (v10 == (_DWORD)a3)
    v12 = 0;
  else
    v12 = (char)a5;
  if (a4 == 2)
  {
    v6 = 0;
    v13 = *(void **)a1;
    if ((_DWORD)a2 && v13)
    {
      if (v10 < (int)a3 || v11 < a2)
        v12 = 1;
      v16 = *(_DWORD *)(a1 + 12);
      if ((v12 & 1) != 0)
      {
        v17 = (int)a2 <= (int)v16 && *(_DWORD *)(a1 + 8) >= (int)a3;
        v40 = 0;
        memset(v39, 0, sizeof(v39));
        kaldi::Matrix<float>::Resize(v39, a2, a3, v17, a5);
        if (*(_DWORD *)(a1 + 12) >= v8)
          v22 = v8;
        else
          v22 = *(_DWORD *)(a1 + 12);
        if (*(_DWORD *)(a1 + 8) >= v7)
          v23 = v7;
        else
          v23 = *(_DWORD *)(a1 + 8);
        v38 = 0;
        if (!HIDWORD(v39[1]) || !LODWORD(v39[1]) || HIDWORD(v39[1]) < v22 || LODWORD(v39[1]) < v23)
          kaldi::KaldiAssertFailure_((kaldi *)"SubMatrix", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x78E, "static_cast<UnsignedMatrixIndexT>(ro) < static_cast<UnsignedMatrixIndexT>(M.num_rows_) && static_cast<UnsignedMatrixIndexT>(co) < static_cast<UnsignedMatrixIndexT>(M.num_cols_) && static_cast<UnsignedMatrixIndexT>(r) <= static_cast<UnsignedMatrixIndexT>(M.num_rows_ - ro) && static_cast<UnsignedMatrixIndexT>(c) <= static_cast<UnsignedMatrixIndexT>(M.num_cols_ - co)", v21);
        v35 = v23;
        v36 = v22;
        v34 = v39[0];
        v37 = v39[2];
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v33, a1, 0, v22, 0, v23);
        kaldi::MatrixBase<float>::CopyFromMat<float>((unsigned int *)&v34, (uint64_t)v33, 111, v24, v25);
        v26 = v39[0];
        v39[0] = *(void **)a1;
        v27 = v39[0];
        *(_QWORD *)a1 = v26;
        v28 = *(_OWORD *)&v39[1];
        *(_OWORD *)&v39[1] = *(_OWORD *)(a1 + 8);
        *(_OWORD *)(a1 + 8) = v28;
        v29 = v40;
        v30 = *(unsigned __int8 *)(a1 + 32);
        v40 = *(_BYTE *)(a1 + 32);
        *(_BYTE *)(a1 + 32) = v29;
        if (v27 && !v30)
          free(v27);
      }
      else
      {
        v20 = (const char *)*(unsigned int *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = v10;
        *(_DWORD *)(a1 + 12) = v11;
        if (a3 > v20)
        {
          kaldi::SubMatrix<float>::SubMatrix((uint64_t)v39, a1, 0, a2, v20, a3 - (_DWORD)v20);
          if (LODWORD(v39[1]) == LODWORD(v39[2]))
          {
            bzero(v39[0], 4 * SLODWORD(v39[1]) * (uint64_t)SHIDWORD(v39[1]));
          }
          else if (SHIDWORD(v39[1]) >= 1)
          {
            v31 = 0;
            do
              bzero((char *)v39[0] + 4 * LODWORD(v39[2]) * v31++, 4 * SLODWORD(v39[1]));
            while (v31 < SHIDWORD(v39[1]));
          }
        }
        if (v8 > v16)
        {
          kaldi::SubMatrix<float>::SubMatrix((uint64_t)v39, a1, v16, v8 - v16, 0, v7);
          if (LODWORD(v39[1]) == LODWORD(v39[2]))
          {
            bzero(v39[0], 4 * SLODWORD(v39[1]) * (uint64_t)SHIDWORD(v39[1]));
          }
          else if (SHIDWORD(v39[1]) >= 1)
          {
            v32 = 0;
            do
              bzero((char *)v39[0] + 4 * LODWORD(v39[2]) * v32++, 4 * SLODWORD(v39[1]));
            while (v32 < SHIDWORD(v39[1]));
          }
        }
        *(_DWORD *)(a1 + 8) = v7;
        *(_DWORD *)(a1 + 12) = v8;
      }
      return;
    }
LABEL_27:
    if (!v13)
    {
LABEL_38:
      kaldi::Matrix<float>::Init(a1, v8, v7, v5, a5);
      if (!v6)
        goto LABEL_43;
      return;
    }
LABEL_28:
    if (v10 >= (int)a3 && v11 >= a2)
      v19 = v12;
    else
      v19 = 1;
    if ((v19 & 1) == 0)
    {
      *(_DWORD *)(a1 + 8) = a3;
      *(_DWORD *)(a1 + 12) = a2;
      if (!v6)
        goto LABEL_43;
      return;
    }
    if (!*(_BYTE *)(a1 + 32))
      free(v13);
    *(_BYTE *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    goto LABEL_38;
  }
  if (a4 != 3)
  {
    v13 = *(void **)a1;
    goto LABEL_27;
  }
  v13 = *(void **)a1;
  if (!*(_QWORD *)a1)
  {
    kaldi::Matrix<float>::Init(a1, a2, a3, (int)a5, a5);
LABEL_43:
    kaldi::MatrixBase<float>::SetZero(a1);
    return;
  }
  if (*(_DWORD *)(a1 + 12) != (_DWORD)a2
    || (*(_DWORD *)(a1 + 8) != (_DWORD)a3 ? (v14 = 1) : (v14 = v12), (v14 & 1) != 0))
  {
    v6 = 0;
    goto LABEL_28;
  }
}

void sub_1DE4030C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a17)
  {
    if (!a21)
      free(a17);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::MatrixBase<float>::CopyFromMat<double>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  float *v24;
  float v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30[3];

  v7 = *(_DWORD *)(a2 + 12);
  if (a3 == 111)
  {
    v8 = *(_DWORD *)(a1 + 12);
    if (v8 != v7 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x38D, "num_rows_ == M.NumRows() && num_cols_ == M.NumCols()", a5);
    if (v8 >= 1)
    {
      v9 = 0;
      do
      {
        kaldi::MatrixBase<float>::Row(a1, v9, a5, v30);
        if (*(_DWORD *)(a2 + 12) <= v9)
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0x132, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v12);
        v13 = *(_QWORD *)a2 + 8 * (int)(*(_DWORD *)(a2 + 16) * v9);
        v14 = *(_DWORD *)(a2 + 8);
        v28 = 0;
        v29 = 0;
        v26 = v13;
        v27 = v14;
        kaldi::VectorBase<float>::CopyFromVec<double>((uint64_t)v30, (uint64_t)&v26, v10, v11, v12);
        ++v9;
      }
      while ((signed int)v9 < *(_DWORD *)(a1 + 12));
    }
  }
  else
  {
    v15 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v15 != v7 || (v16 = *(unsigned int *)(a1 + 12), (_DWORD)v16 != *(_DWORD *)(a2 + 8)))
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x391, "num_cols_ == M.NumRows() && num_rows_ == M.NumCols()", a5);
    if ((int)v16 >= 1)
    {
      v17 = 0;
      v18 = *(float **)a1;
      v19 = *(double **)a2;
      v20 = 4 * *(int *)(a1 + 16);
      v21 = 8 * *(int *)(a2 + 16);
      do
      {
        v22 = v15;
        v23 = v19;
        v24 = v18;
        if ((int)v15 >= 1)
        {
          do
          {
            v25 = *v23;
            *v24++ = v25;
            v23 = (double *)((char *)v23 + v21);
            --v22;
          }
          while (v22);
        }
        ++v17;
        v18 = (float *)((char *)v18 + v20);
        ++v19;
      }
      while (v17 != v16);
    }
  }
}

void kaldi::Matrix<double>::Resize(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  int v5;
  int v6;
  signed int v7;
  int v8;
  int v10;
  unsigned int v11;
  char v12;
  void *v13;
  char v14;
  unsigned int v16;
  _BOOL8 v17;
  char v19;
  const char *v20;
  const char *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  const char *v25;
  void *v26;
  void *v27;
  __int128 v28;
  char v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33[8];
  void *v34;
  unsigned int v35;
  unsigned int v36;
  void *v37;
  uint64_t v38;
  void *v39[4];
  char v40;

  v5 = (int)a5;
  v6 = a4;
  v7 = a3;
  v8 = a2;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10 < 1)
    v11 = 0;
  else
    v11 = *(_DWORD *)(a1 + 20) / v10;
  if (v10 == (_DWORD)a3)
    v12 = 0;
  else
    v12 = (char)a5;
  if (a4 == 2)
  {
    v6 = 0;
    v13 = *(void **)a1;
    if ((_DWORD)a2 && v13)
    {
      if (v10 < (int)a3 || v11 < a2)
        v12 = 1;
      v16 = *(_DWORD *)(a1 + 12);
      if ((v12 & 1) != 0)
      {
        v17 = (int)a2 <= (int)v16 && *(_DWORD *)(a1 + 8) >= (int)a3;
        v40 = 0;
        memset(v39, 0, sizeof(v39));
        kaldi::Matrix<double>::Resize(v39, a2, a3, v17, a5);
        if (*(_DWORD *)(a1 + 12) >= v8)
          v22 = v8;
        else
          v22 = *(_DWORD *)(a1 + 12);
        if (*(_DWORD *)(a1 + 8) >= v7)
          v23 = v7;
        else
          v23 = *(_DWORD *)(a1 + 8);
        v38 = 0;
        if (!HIDWORD(v39[1]) || !LODWORD(v39[1]) || HIDWORD(v39[1]) < v22 || LODWORD(v39[1]) < v23)
          kaldi::KaldiAssertFailure_((kaldi *)"SubMatrix", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x78E, "static_cast<UnsignedMatrixIndexT>(ro) < static_cast<UnsignedMatrixIndexT>(M.num_rows_) && static_cast<UnsignedMatrixIndexT>(co) < static_cast<UnsignedMatrixIndexT>(M.num_cols_) && static_cast<UnsignedMatrixIndexT>(r) <= static_cast<UnsignedMatrixIndexT>(M.num_rows_ - ro) && static_cast<UnsignedMatrixIndexT>(c) <= static_cast<UnsignedMatrixIndexT>(M.num_cols_ - co)", v21);
        v35 = v23;
        v36 = v22;
        v34 = v39[0];
        v37 = v39[2];
        kaldi::SubMatrix<double>::SubMatrix((uint64_t)v33, a1, 0, v22, 0, v23);
        kaldi::MatrixBase<double>::CopyFromMat<double>((unsigned int *)&v34, v33, 111, v24, v25);
        v26 = v39[0];
        v39[0] = *(void **)a1;
        v27 = v39[0];
        *(_QWORD *)a1 = v26;
        v28 = *(_OWORD *)&v39[1];
        *(_OWORD *)&v39[1] = *(_OWORD *)(a1 + 8);
        *(_OWORD *)(a1 + 8) = v28;
        v29 = v40;
        v30 = *(unsigned __int8 *)(a1 + 32);
        v40 = *(_BYTE *)(a1 + 32);
        *(_BYTE *)(a1 + 32) = v29;
        if (v27 && !v30)
          free(v27);
      }
      else
      {
        v20 = (const char *)*(unsigned int *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = v10;
        *(_DWORD *)(a1 + 12) = v11;
        if (a3 > v20)
        {
          kaldi::SubMatrix<double>::SubMatrix((uint64_t)v39, a1, 0, a2, v20, a3 - (_DWORD)v20);
          if (LODWORD(v39[1]) == LODWORD(v39[2]))
          {
            bzero(v39[0], 8 * SLODWORD(v39[1]) * (uint64_t)SHIDWORD(v39[1]));
          }
          else if (SHIDWORD(v39[1]) >= 1)
          {
            v31 = 0;
            do
              bzero((char *)v39[0] + 8 * LODWORD(v39[2]) * v31++, 8 * SLODWORD(v39[1]));
            while (v31 < SHIDWORD(v39[1]));
          }
        }
        if (v8 > v16)
        {
          kaldi::SubMatrix<double>::SubMatrix((uint64_t)v39, a1, v16, v8 - v16, 0, v7);
          if (LODWORD(v39[1]) == LODWORD(v39[2]))
          {
            bzero(v39[0], 8 * SLODWORD(v39[1]) * (uint64_t)SHIDWORD(v39[1]));
          }
          else if (SHIDWORD(v39[1]) >= 1)
          {
            v32 = 0;
            do
              bzero((char *)v39[0] + 8 * LODWORD(v39[2]) * v32++, 8 * SLODWORD(v39[1]));
            while (v32 < SHIDWORD(v39[1]));
          }
        }
        *(_DWORD *)(a1 + 8) = v7;
        *(_DWORD *)(a1 + 12) = v8;
      }
      return;
    }
LABEL_27:
    if (!v13)
    {
LABEL_38:
      kaldi::Matrix<double>::Init(a1, v8, v7, v5, a5);
      if (!v6)
        goto LABEL_43;
      return;
    }
LABEL_28:
    if (v10 >= (int)a3 && v11 >= a2)
      v19 = v12;
    else
      v19 = 1;
    if ((v19 & 1) == 0)
    {
      *(_DWORD *)(a1 + 8) = a3;
      *(_DWORD *)(a1 + 12) = a2;
      if (!v6)
        goto LABEL_43;
      return;
    }
    if (!*(_BYTE *)(a1 + 32))
      free(v13);
    *(_BYTE *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    goto LABEL_38;
  }
  if (a4 != 3)
  {
    v13 = *(void **)a1;
    goto LABEL_27;
  }
  v13 = *(void **)a1;
  if (!*(_QWORD *)a1)
  {
    kaldi::Matrix<double>::Init(a1, a2, a3, (int)a5, a5);
LABEL_43:
    kaldi::MatrixBase<double>::SetZero(a1);
    return;
  }
  if (*(_DWORD *)(a1 + 12) != (_DWORD)a2
    || (*(_DWORD *)(a1 + 8) != (_DWORD)a3 ? (v14 = 1) : (v14 = v12), (v14 & 1) != 0))
  {
    v6 = 0;
    goto LABEL_28;
  }
}

void sub_1DE403608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a17)
  {
    if (!a21)
      free(a17);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::MatrixBase<double>::CopyFromMat<float>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  int v7;
  int v8;
  signed int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  double *v24;
  uint64_t v25[3];
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;

  v7 = *(_DWORD *)(a2 + 12);
  if (a3 == 111)
  {
    v8 = *(_DWORD *)(a1 + 12);
    if (v8 != v7 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x38D, "num_rows_ == M.NumRows() && num_cols_ == M.NumCols()", a5);
    if (v8 >= 1)
    {
      v9 = 0;
      do
      {
        v10 = *(_QWORD *)a1 + 8 * *(_DWORD *)(a1 + 16) * v9;
        v11 = *(_DWORD *)(a1 + 8);
        v28 = 0;
        v29 = 0;
        v26 = v10;
        v27 = v11;
        kaldi::MatrixBase<float>::Row(a2, v9, a5, v25);
        kaldi::VectorBase<double>::CopyFromVec<float>((uint64_t)&v26, (uint64_t)v25, v12, v13, v14);
        ++v9;
      }
      while (v9 < *(_DWORD *)(a1 + 12));
    }
  }
  else
  {
    v15 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v15 != v7 || (v16 = *(unsigned int *)(a1 + 12), (_DWORD)v16 != *(_DWORD *)(a2 + 8)))
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x391, "num_cols_ == M.NumRows() && num_rows_ == M.NumCols()", a5);
    if ((int)v16 >= 1)
    {
      v17 = 0;
      v18 = *(double **)a1;
      v19 = *(float **)a2;
      v20 = 8 * *(int *)(a1 + 16);
      v21 = 4 * *(int *)(a2 + 16);
      do
      {
        v22 = v15;
        v23 = v19;
        v24 = v18;
        if ((int)v15 >= 1)
        {
          do
          {
            *v24++ = *v23;
            v23 = (float *)((char *)v23 + v21);
            --v22;
          }
          while (v22);
        }
        ++v17;
        v18 = (double *)((char *)v18 + v20);
        ++v19;
      }
      while (v17 != v16);
    }
  }
}

uint64_t kaldi::MatrixBase<float>::Row@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, const char *a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  int v5;

  if (*(_DWORD *)(result + 12) <= a2)
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0x139, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a3);
  v4 = *(_QWORD *)result + 4 * (int)(*(_DWORD *)(result + 16) * a2);
  v5 = *(_DWORD *)(result + 8);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = v4;
  *((_DWORD *)a4 + 2) = v5;
  return result;
}

{
  uint64_t v4;
  int v5;

  if (*(_DWORD *)(result + 12) <= a2)
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0x132, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a3);
  v4 = *(_QWORD *)result + 4 * (int)(*(_DWORD *)(result + 16) * a2);
  v5 = *(_DWORD *)(result + 8);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = v4;
  *((_DWORD *)a4 + 2) = v5;
  return result;
}

unsigned int *kaldi::MatrixBase<float>::CopyFromMat<float>(unsigned int *result, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  int v7;
  int v8;
  signed int v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24[3];
  uint64_t v25[3];

  if ((unsigned int *)a2 != result)
  {
    v6 = (uint64_t)result;
    v7 = *(_DWORD *)(a2 + 12);
    if (a3 == 111)
    {
      v8 = result[3];
      if (v8 != v7 || result[2] != *(_DWORD *)(a2 + 8))
        kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x38D, "num_rows_ == M.NumRows() && num_cols_ == M.NumCols()", a5);
      if (v8 >= 1)
      {
        v9 = 0;
        do
        {
          kaldi::MatrixBase<float>::Row(v6, v9, a5, v25);
          kaldi::MatrixBase<float>::Row(a2, v9, v10, v24);
          result = (unsigned int *)kaldi::VectorBase<float>::CopyFromVec((uint64_t)v25, (uint64_t)v24, v11, v12, v13);
          ++v9;
        }
        while (v9 < *(_DWORD *)(v6 + 12));
      }
    }
    else
    {
      v14 = result[2];
      if ((_DWORD)v14 != v7 || (v15 = result[3], (_DWORD)v15 != *(_DWORD *)(a2 + 8)))
        kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x391, "num_cols_ == M.NumRows() && num_rows_ == M.NumCols()", a5);
      if ((int)v15 >= 1)
      {
        v16 = 0;
        v17 = *(_DWORD **)result;
        v18 = *(_DWORD **)a2;
        v19 = 4 * (int)result[4];
        v20 = 4 * *(int *)(a2 + 16);
        do
        {
          v21 = v14;
          v22 = v18;
          v23 = v17;
          if ((int)v14 >= 1)
          {
            do
            {
              *v23++ = *v22;
              v22 = (_DWORD *)((char *)v22 + v20);
              --v21;
            }
            while (v21);
          }
          ++v16;
          v17 = (_DWORD *)((char *)v17 + v19);
          ++v18;
        }
        while (v16 != v15);
      }
    }
  }
  return result;
}

unsigned int *kaldi::MatrixBase<double>::CopyFromMat<double>(unsigned int *result, unsigned int *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unsigned int *v6;
  unsigned int v7;
  int v8;
  signed int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;

  if (a2 != result)
  {
    v6 = result;
    v7 = a2[3];
    if ((_DWORD)a3 == 111)
    {
      v8 = result[3];
      if (v8 != v7 || result[2] != a2[2])
        kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x38D, "num_rows_ == M.NumRows() && num_cols_ == M.NumCols()", a5);
      if (v8 >= 1)
      {
        v9 = 0;
        do
        {
          v10 = *(_QWORD *)v6 + 8 * (int)(v6[4] * v9);
          v11 = v6[2];
          v30 = 0;
          v31 = 0;
          v28 = v10;
          v29 = v11;
          if (a2[3] <= v9)
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0x132, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a5);
          v12 = *(_QWORD *)a2 + 8 * (int)(a2[4] * v9);
          v13 = a2[2];
          v26 = 0;
          v27 = 0;
          v24 = v12;
          v25 = v13;
          result = (unsigned int *)kaldi::VectorBase<double>::CopyFromVec((uint64_t)&v28, (uint64_t)&v24, a3, a4, a5);
          ++v9;
        }
        while (v9 < (int)v6[3]);
      }
    }
    else
    {
      v14 = result[2];
      if ((_DWORD)v14 != v7 || (v15 = result[3], (_DWORD)v15 != a2[2]))
        kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x391, "num_cols_ == M.NumRows() && num_rows_ == M.NumCols()", a5);
      if ((int)v15 >= 1)
      {
        v16 = 0;
        v17 = *(_QWORD **)result;
        v18 = *(_QWORD **)a2;
        v19 = 8 * (int)result[4];
        v20 = 8 * (int)a2[4];
        do
        {
          v21 = v14;
          v22 = v18;
          v23 = v17;
          if ((int)v14 >= 1)
          {
            do
            {
              *v23++ = *v22;
              v22 = (_QWORD *)((char *)v22 + v20);
              --v21;
            }
            while (v21);
          }
          ++v16;
          v17 = (_QWORD *)((char *)v17 + v19);
          ++v18;
        }
        while (v16 != v15);
      }
    }
  }
  return result;
}

void kaldi::MatrixBase<float>::SetZero(uint64_t a1)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 == *(_DWORD *)(a1 + 16))
  {
    bzero(*(void **)a1, 4 * v2 * (uint64_t)*(int *)(a1 + 12));
  }
  else if (*(int *)(a1 + 12) >= 1)
  {
    v3 = 0;
    do
      bzero((void *)(*(_QWORD *)a1 + 4 * *(_DWORD *)(a1 + 16) * v3++), 4 * *(int *)(a1 + 8));
    while (v3 < *(_DWORD *)(a1 + 12));
  }
}

void kaldi::MatrixBase<double>::SetZero(uint64_t a1)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 == *(_DWORD *)(a1 + 16))
  {
    bzero(*(void **)a1, 8 * v2 * (uint64_t)*(int *)(a1 + 12));
  }
  else if (*(int *)(a1 + 12) >= 1)
  {
    v3 = 0;
    do
      bzero((void *)(*(_QWORD *)a1 + 8 * *(_DWORD *)(a1 + 16) * v3++), 8 * *(int *)(a1 + 8));
    while (v3 < *(_DWORD *)(a1 + 12));
  }
}

uint64_t kaldi::MatrixBase<float>::CopyFromMat<signed char>(uint64_t a1, unsigned int *a2, int a3)
{
  int v6;
  const char *v7;
  uint64_t result;
  uint64_t v9;
  const char *v10;
  int v11;
  signed int i;
  int v13;
  float v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  signed int v19;
  int v20;
  signed int j;
  float v22;
  uint64_t v23;
  const char *v24;

  v6 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  if (a3 == 111)
  {
    if (v6 != *(_DWORD *)(a1 + 8))
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x98E, "qm.NumCols() == num_cols_", v7);
    result = kaldi::QuantizedMatrixBase<short>::NumRows(a2);
    if ((_DWORD)result != *(_DWORD *)(a1 + 12))
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x98F, "qm.NumRows() == num_rows_", v10);
    v11 = *(_DWORD *)(a1 + 8);
    if (v11 >= 1)
    {
      for (i = 0; i < v11; ++i)
      {
        if ((int)result >= 1)
        {
          v13 = 0;
          do
          {
            v14 = kaldi::QuantizedMatrixBase<signed char>::operator()((uint64_t)a2, v13, i, v9, v10);
            *(float *)kaldi::MatrixBase<float>::operator()(a1, v13++, i, v15, v16) = v14;
            result = *(unsigned int *)(a1 + 12);
          }
          while (v13 < (int)result);
          v11 = *(_DWORD *)(a1 + 8);
        }
      }
    }
  }
  else
  {
    if (v6 != *(_DWORD *)(a1 + 12))
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x996, "qm.NumCols() == num_rows_", v7);
    result = kaldi::QuantizedMatrixBase<short>::NumRows(a2);
    if ((_DWORD)result != *(_DWORD *)(a1 + 8))
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x997, "qm.NumRows() == num_cols_", v18);
    if ((int)result >= 1)
    {
      v19 = 0;
      v20 = *(_DWORD *)(a1 + 12);
      do
      {
        if (v20 >= 1)
        {
          for (j = 0; j < v20; ++j)
          {
            v22 = kaldi::QuantizedMatrixBase<signed char>::operator()((uint64_t)a2, v19, j, v17, v18);
            *(float *)kaldi::MatrixBase<float>::operator()(a1, j, v19, v23, v24) = v22;
            v20 = *(_DWORD *)(a1 + 12);
          }
          result = *(unsigned int *)(a1 + 8);
        }
        ++v19;
      }
      while (v19 < (int)result);
    }
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::CopyFromMat<short>(uint64_t a1, unsigned int *a2, int a3)
{
  int v6;
  const char *v7;
  uint64_t result;
  uint64_t v9;
  const char *v10;
  int v11;
  signed int i;
  int v13;
  float v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  signed int v19;
  int v20;
  signed int j;
  float v22;
  uint64_t v23;
  const char *v24;

  v6 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  if (a3 == 111)
  {
    if (v6 != *(_DWORD *)(a1 + 8))
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x98E, "qm.NumCols() == num_cols_", v7);
    result = kaldi::QuantizedMatrixBase<short>::NumRows(a2);
    if ((_DWORD)result != *(_DWORD *)(a1 + 12))
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x98F, "qm.NumRows() == num_rows_", v10);
    v11 = *(_DWORD *)(a1 + 8);
    if (v11 >= 1)
    {
      for (i = 0; i < v11; ++i)
      {
        if ((int)result >= 1)
        {
          v13 = 0;
          do
          {
            v14 = kaldi::QuantizedMatrixBase<short>::operator()((uint64_t)a2, v13, i, v9, v10);
            *(float *)kaldi::MatrixBase<float>::operator()(a1, v13++, i, v15, v16) = v14;
            result = *(unsigned int *)(a1 + 12);
          }
          while (v13 < (int)result);
          v11 = *(_DWORD *)(a1 + 8);
        }
      }
    }
  }
  else
  {
    if (v6 != *(_DWORD *)(a1 + 12))
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x996, "qm.NumCols() == num_rows_", v7);
    result = kaldi::QuantizedMatrixBase<short>::NumRows(a2);
    if ((_DWORD)result != *(_DWORD *)(a1 + 8))
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x997, "qm.NumRows() == num_cols_", v18);
    if ((int)result >= 1)
    {
      v19 = 0;
      v20 = *(_DWORD *)(a1 + 12);
      do
      {
        if (v20 >= 1)
        {
          for (j = 0; j < v20; ++j)
          {
            v22 = kaldi::QuantizedMatrixBase<short>::operator()((uint64_t)a2, v19, j, v17, v18);
            *(float *)kaldi::MatrixBase<float>::operator()(a1, j, v19, v23, v24) = v22;
            v20 = *(_DWORD *)(a1 + 12);
          }
          result = *(unsigned int *)(a1 + 8);
        }
        ++v19;
      }
      while (v19 < (int)result);
    }
  }
  return result;
}

uint64_t kaldi::Matrix<float>::Matrix(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  *(_BYTE *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  kaldi::Matrix<float>::Resize(a1, a2, a3, a4, a5);
  return a1;
}

uint64_t kaldi::Matrix<float>::Matrix<signed char>(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = kaldi::QuantizedMatrixBase<short>::NumRows(a2);
  v5 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 0;
  kaldi::Matrix<float>::Resize(a1, v4, v5, 0, 0);
  kaldi::MatrixBase<float>::CopyFromMat<signed char>(a1, a2, 111);
  return a1;
}

void sub_1DE4040E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
  {
    if (!*(_BYTE *)(v1 + 32))
      free(*(void **)v1);
  }
  *(_BYTE *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = 0;
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::Matrix<float>::~Matrix(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2 && !*(_BYTE *)(a1 + 32))
    free(v2);
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  return a1;
}

uint64_t kaldi::Matrix<float>::Matrix<short>(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = kaldi::QuantizedMatrixBase<short>::NumRows(a2);
  v5 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 0;
  kaldi::Matrix<float>::Resize(a1, v4, v5, 0, 0);
  kaldi::MatrixBase<float>::CopyFromMat<short>(a1, a2, 111);
  return a1;
}

void sub_1DE4041C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
  {
    if (!*(_BYTE *)(v1 + 32))
      free(*(void **)v1);
  }
  *(_BYTE *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = 0;
  _Unwind_Resume(exception_object);
}

void kaldi::MatrixBase<float>::AddMatMat(uint64_t a1, uint64_t a2, CBLAS_TRANSPOSE __TransA, uint64_t a4, const char *__TransB, float a6, float a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  _BOOL4 v11;
  int v12;

  if (__TransA != CblasNoTrans || (_DWORD)__TransB != 111)
  {
    if (__TransA == CblasTrans && (_DWORD)__TransB == 111)
    {
      v8 = *(_DWORD *)(a2 + 12);
      if (v8 != *(_DWORD *)(a4 + 12))
        goto LABEL_33;
      v7 = *(_DWORD *)(a2 + 8);
      if (v7 != *(_DWORD *)(a1 + 12))
        goto LABEL_33;
      v9 = *(_DWORD *)(a4 + 8);
    }
    else
    {
      v11 = (_DWORD)__TransB == 112;
      if (__TransA == CblasNoTrans && (_DWORD)__TransB == 112)
      {
        v7 = *(_DWORD *)(a2 + 8);
        if (v7 == *(_DWORD *)(a4 + 8))
        {
          v8 = *(_DWORD *)(a2 + 12);
          if (v8 == *(_DWORD *)(a1 + 12))
          {
            v9 = *(_DWORD *)(a4 + 12);
            if (v9 == *(_DWORD *)(a1 + 8))
              goto LABEL_6;
          }
        }
        v11 = 1;
      }
      if (!v11
        || __TransA != CblasTrans
        || (v8 = *(_DWORD *)(a2 + 12), v8 != *(_DWORD *)(a4 + 8))
        || (v7 = *(_DWORD *)(a2 + 8), v7 != *(_DWORD *)(a1 + 12)))
      {
LABEL_33:
        kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xC7, "(transA == kNoTrans && transB == kNoTrans && A.num_cols_ == B.num_rows_ && A.num_rows_ == num_rows_ && B.num_cols_ == num_cols_) || (transA == kTrans && transB == kNoTrans && A.num_rows_ == B.num_rows_ && A.num_cols_ == num_rows_ && B.num_cols_ == num_cols_) || (transA == kNoTrans && transB == kTrans && A.num_cols_ == B.num_cols_ && A.num_rows_ == num_rows_ && B.num_rows_ == num_cols_) || (transA == kTrans && transB == kTrans && A.num_rows_ == B.num_cols_ && A.num_cols_ == num_rows_ && B.num_rows_ == num_cols_)", __TransB);
      }
      v9 = *(_DWORD *)(a4 + 12);
    }
    if (v9 == *(_DWORD *)(a1 + 8))
    {
      v10 = v7;
      goto LABEL_25;
    }
    goto LABEL_33;
  }
  v7 = *(_DWORD *)(a2 + 8);
  if (v7 != *(_DWORD *)(a4 + 12))
    goto LABEL_33;
  v8 = *(_DWORD *)(a2 + 12);
  if (v8 != *(_DWORD *)(a1 + 12))
    goto LABEL_33;
  v9 = *(_DWORD *)(a4 + 8);
  if (v9 != *(_DWORD *)(a1 + 8))
    goto LABEL_33;
LABEL_6:
  v10 = v8;
LABEL_25:
  if (a2 == a1 || a4 == a1)
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xC8, "&A != this && &B != this", __TransB);
  if (v10)
  {
    if (__TransA == CblasNoTrans)
      v12 = v7;
    else
      v12 = v8;
    cblas_sgemm(CblasRowMajor, __TransA, (const CBLAS_TRANSPOSE)__TransB, v10, v9, v12, a6, *(const float **)a2, *(_DWORD *)(a2 + 16), *(const float **)a4, *(_DWORD *)(a4 + 16), a7, *(float **)a1, *(_DWORD *)(a1 + 16));
  }
}

uint64_t *kaldi::MatrixBase<float>::AddVecToRows<float>(uint64_t *result, uint64_t *a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *((unsigned int *)result + 2);
  if (*((_DWORD *)a2 + 2) != (_DWORD)v6)
    kaldi::KaldiAssertFailure_((kaldi *)"AddVecToRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xD63, "v.Dim() == num_cols", a6);
  v7 = *((_DWORD *)result + 3);
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = *a2;
    v10 = *result;
    v11 = 4 * *((int *)result + 4);
    do
    {
      if ((int)v6 >= 1)
      {
        v12 = 0;
        do
        {
          *(float *)(v10 + v12) = *(float *)(v10 + v12) + (float)(a3 * *(float *)(v9 + v12));
          v12 += 4;
        }
        while (4 * v6 != v12);
      }
      ++v8;
      v10 += v11;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t *kaldi::MatrixBase<float>::AddVecToCols<float>(uint64_t *result, uint64_t *a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;

  v6 = *((unsigned int *)result + 3);
  if (*((_DWORD *)a2 + 2) != (_DWORD)v6)
    kaldi::KaldiAssertFailure_((kaldi *)"AddVecToCols", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xD7C, "v.Dim() == num_rows", a6);
  if ((int)v6 >= 1)
  {
    v7 = 0;
    v8 = *((unsigned int *)result + 2);
    v9 = *a2;
    v10 = *result;
    v11 = 4 * *((int *)result + 4);
    do
    {
      if ((int)v8 >= 1)
      {
        v12 = 0;
        v13 = *(float *)(v9 + 4 * v7) * a3;
        do
        {
          *(float *)(v10 + v12) = v13 + *(float *)(v10 + v12);
          v12 += 4;
        }
        while (4 * v8 != v12);
      }
      ++v7;
      v10 += v11;
    }
    while (v7 != v6);
  }
  return result;
}

double kaldi::Matrix<float>::Matrix(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t kaldi::Matrix<float>::Matrix(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  const char *v6;
  int v7;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (a3 == 111)
  {
    kaldi::Matrix<float>::Resize(a1, *(unsigned int *)(a2 + 12), *(unsigned int *)(a2 + 8), 0, 0);
    v7 = 111;
  }
  else
  {
    kaldi::Matrix<float>::Resize(a1, *(unsigned int *)(a2 + 8), *(unsigned int *)(a2 + 12), 0, 0);
    v7 = 112;
  }
  kaldi::MatrixBase<float>::CopyFromMat<float>((unsigned int *)a1, a2, v7, v5, v6);
  return a1;
}

uint64_t kaldi::Matrix<float>::Matrix(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  const char *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  kaldi::Matrix<float>::Resize(a1, a2[3], a2[2], 1, (const char *)(a2[2] == a2[4]));
  kaldi::MatrixBase<float>::CopyFromMat<float>((unsigned int *)a1, (uint64_t)a2, 111, v4, v5);
  return a1;
}

uint64_t kaldi::Matrix<float>::Matrix(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = *a2;
  if (*a2)
  {
    v5 = *(unsigned int *)(v4 + 8);
    v6 = *(unsigned int *)(v4 + 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  kaldi::Matrix<float>::Resize(a1, v5, v6, 1, 0);
  kaldi::CompressedMatrix::CopyToMat<float>(a2, a1);
  return a1;
}

void kaldi::Matrix<float>::Read(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5)
{
  int v6;
  uint64_t v9;
  const char *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  _BOOL4 v21;
  const std::string::value_type *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  int v27;
  size_t v28;
  size_t v29;
  std::string::size_type size;
  int v31;
  std::string *v32;
  void **p_s1;
  uint64_t v34;
  unsigned __int8 *v35;
  std::string *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  _QWORD *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  _DWORD *v46;
  size_t v47;
  size_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  int v53;
  _DWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  int v64;
  const char *v65;
  char **v66;
  const char *v67;
  char **v68;
  char *v69;
  _DWORD *v70;
  int v71;
  _QWORD *v72;
  void *v73;
  uint64_t v74;
  char v75;
  _QWORD *v76;
  std::string *v77;
  std::string::size_type v78;
  _QWORD *v79;
  int v80;
  int v81;
  std::string *v82;
  _BYTE *v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  _QWORD *v89;
  std::string *v90;
  std::string::size_type v91;
  _QWORD *v92;
  _QWORD *v93;
  void *v94;
  size_t v95;
  _QWORD *v96;
  int v97;
  _QWORD *v98;
  void *v99;
  size_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  int v107;
  unsigned int v108;
  _QWORD *v109;
  uint64_t v110;
  int v111;
  _DWORD *v112;
  _QWORD *v113;
  size_t v114;
  unint64_t v115;
  uint64_t v116;
  void *v117;
  unsigned int v118;
  _DWORD *v120;
  size_t v121;
  _BYTE *v122;
  _QWORD *v123;
  const char *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  uint64_t *v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void **v145;
  uint64_t v146;
  int v147;
  void *v148;
  _QWORD *v149;
  _QWORD *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *__s1;
  size_t __n;
  int64_t v157;
  void *v158[2];
  __int128 v159;
  char v160;
  void *__p;
  char v162;
  uint64_t v163;
  std::string v164;
  __int128 v165;
  __int128 v166;
  char v167;
  uint64_t v168;
  uint64_t v169;

  v6 = a3;
  v169 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v160 = 0;
    *(_OWORD *)v158 = 0u;
    v159 = 0u;
    kaldi::Matrix<float>::Read(v158, a2, a3, 0, a5, 0.0);
    if (*(_DWORD *)(a1 + 12))
    {
      if (*(void **)(a1 + 8) != v158[1])
      {
        if (HIDWORD(v158[1]))
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v165, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1675);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v165, (uint64_t)"Matrix::Read, size mismatch ", 28);
          v11 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
          v12 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" vs. ", 5);
          v13 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
          std::ostream::operator<<();
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v165);
        }
        goto LABEL_15;
      }
    }
    else
    {
      kaldi::Matrix<float>::Resize(a1, HIDWORD(v158[1]), LODWORD(v158[1]), 0, 0);
    }
    kaldi::MatrixBase<float>::AddMat(a1, (uint64_t)v158, 111, 1.0, 1.0, v9, v10);
LABEL_15:
    if (v158[0])
    {
      if (!v160)
        free(v158[0]);
    }
    return;
  }
  std::istream::tellg();
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v158);
  if (v6)
  {
    v14 = kaldi::Peek(a2, 1);
    if (v14 == 68)
    {
      if (a5)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v165, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1704);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v165, (uint64_t)"Can not map into the wrong matrix data type", 43);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v165);
      }
      v18 = *(unsigned int *)(a1 + 8);
      v17 = *(unsigned int *)(a1 + 12);
      v165 = 0u;
      v166 = 0u;
      v167 = 0;
      kaldi::Matrix<double>::Resize((uint64_t)&v165, v17, v18, 0, 0);
      kaldi::Matrix<double>::Read((uint64_t)&v165, a2, 1, 0, 0);
      kaldi::Matrix<float>::Resize(a1, HIDWORD(v165), DWORD2(v165), 0, 0);
      kaldi::MatrixBase<float>::CopyFromMat<double>(a1, (uint64_t)&v165, 111, v19, v20);
      if ((_QWORD)v165 && !v167)
        free((void *)v165);
      goto LABEL_163;
    }
    if (v14 == 67)
    {
      *(_QWORD *)&v165 = 0;
      BYTE8(v165) = 0;
      kaldi::CompressedMatrix::Read((uint64_t)&v165, a2, 1, a5);
      if ((_QWORD)v165)
      {
        v15 = *(unsigned int *)(v165 + 8);
        v16 = *(unsigned int *)(v165 + 12);
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
      kaldi::Matrix<float>::Resize(a1, v15, v16, 0, 0);
      kaldi::CompressedMatrix::CopyToMat<float>((uint64_t *)&v165, a1);
      kaldi::WarnOnZeros<float>(a1, v37, v38, v39, v40);
      kaldi::CompressedMatrix::Destroy((kaldi::CompressedMatrix *)&v165);
      goto LABEL_163;
    }
    memset(&v164, 0, sizeof(v164));
    std::string::append(&v164, "F");
    v21 = a5 != 0;
    if (a5)
      v22 = "N";
    else
      v22 = "M";
    std::string::append(&v164, v22);
    __s1 = 0;
    __n = 0;
    v157 = 0;
    kaldi::ReadToken(a2, 1, (uint64_t)&__s1, v23, v24);
    v27 = SHIBYTE(v157);
    v28 = __n;
    if (v157 >= 0)
      v29 = HIBYTE(v157);
    else
      v29 = __n;
    size = HIBYTE(v164.__r_.__value_.__r.__words[2]);
    v31 = SHIBYTE(v164.__r_.__value_.__r.__words[2]);
    if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v164.__r_.__value_.__l.__size_;
    if (v29 == size)
    {
      if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &v164;
      else
        v32 = (std::string *)v164.__r_.__value_.__r.__words[0];
      if (v157 < 0)
      {
        if (!memcmp(__s1, v32, __n))
          goto LABEL_179;
        goto LABEL_168;
      }
      if (!HIBYTE(v157))
        goto LABEL_179;
      p_s1 = &__s1;
      v34 = HIBYTE(v157);
      while (*(unsigned __int8 *)p_s1 == v32->__r_.__value_.__s.__data_[0])
      {
        p_s1 = (void **)((char *)p_s1 + 1);
        v32 = (std::string *)((char *)v32 + 1);
        if (!--v34)
          goto LABEL_179;
      }
    }
    if ((v157 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v157) != 2)
        goto LABEL_181;
      v35 = (unsigned __int8 *)&__s1;
LABEL_170:
      v81 = *v35;
      v82 = (std::string *)v164.__r_.__value_.__r.__words[0];
      if (v31 >= 0)
        v82 = &v164;
      if (v81 == v82->__r_.__value_.__s.__data_[0])
      {
        v83 = __s1;
        if (v27 >= 0)
          v83 = &__s1;
        if (v83[1] == 78)
        {
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v165, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1721);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v165, (uint64_t)"Reading aligned matrix as a stream", 34);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v165);
          }
          v21 = 1;
LABEL_179:
          LODWORD(v151) = 0;
          v154 = 0;
          kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v151, v25, v26);
          kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v154 + 4, v84, v85);
          if (v21)
          {
            kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v154, v87, v88);
            fst::AlignInput();
          }
          else
          {
            LODWORD(v154) = HIDWORD(v154);
          }
          v103 = v151;
          if (a5)
          {
            *(_DWORD *)(a1 + 8) = HIDWORD(v154);
            *(_DWORD *)(a1 + 12) = v103;
            *(_DWORD *)(a1 + 16) = v154;
            if (*(_QWORD *)a1 && !*(_BYTE *)(a1 + 32))
              free(*(void **)a1);
            std::istream::tellg();
            *(_QWORD *)a1 = a5 + v168;
            *(_BYTE *)(a1 + 32) = 1;
            std::istream::seekg();
            if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)": Seeking failed", 16);
LABEL_194:
              v97 = 2;
              goto LABEL_195;
            }
          }
          else
          {
            v104 = HIDWORD(v154);
            if (__PAIR64__(v151, HIDWORD(v154)) == *(_QWORD *)(a1 + 8))
            {
              v105 = HIDWORD(v154);
            }
            else
            {
              kaldi::Matrix<float>::Resize(a1, v151, HIDWORD(v154), 1, 0);
              v105 = *(_DWORD *)(a1 + 8);
              v104 = HIDWORD(v154);
              v103 = v151;
            }
            v106 = *(_DWORD *)(a1 + 16);
            v107 = v154;
            if (v106 == v105 && v106 == (_DWORD)v154 && v104 * (_DWORD)v103)
            {
              std::istream::read();
              if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)": Reading whole matrix failed", 29);
                goto LABEL_194;
              }
            }
            else if ((int)v103 >= 1)
            {
              v108 = 0;
              v109 = a2 + 4;
              v110 = 29;
              while (1)
              {
                if (*(_DWORD *)(a1 + 12) <= v108)
                  kaldi::KaldiAssertFailure_((kaldi *)"RowData", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xBC, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v88);
                std::istream::read();
                if ((*((_BYTE *)v109 + *(_QWORD *)(*a2 - 24)) & 5) != 0)
                {
                  v123 = v158;
                  v124 = ": Reading a matrix row failed";
                  goto LABEL_268;
                }
                if (v107 != v104)
                {
                  std::istream::seekg();
                  if ((*((_BYTE *)v109 + *(_QWORD *)(*a2 - 24)) & 5) != 0)
                    break;
                }
                if ((int)++v108 >= (int)v151)
                  goto LABEL_232;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)": Seek for padding ", 19);
              v123 = (_QWORD *)std::ostream::operator<<();
              v124 = " failed";
              v110 = 7;
LABEL_268:
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)v124, v110);
              goto LABEL_194;
            }
          }
LABEL_232:
          kaldi::WarnOnZeros<float>(a1, v103, v86, v87, v88);
          v111 = *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32);
          v97 = 1;
          if ((v111 & 2) == 0)
          {
            if ((v111 & 5) != 0)
              v97 = 2;
            else
              v97 = 1;
          }
LABEL_195:
          if (SHIBYTE(v157) < 0)
            operator delete(__s1);
          if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v164.__r_.__value_.__l.__data_);
          if (v97 != 2)
            goto LABEL_163;
LABEL_200:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v165, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1912);
          v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v165, (uint64_t)"Failed to read matrix from stream.  ", 36);
          std::stringbuf::str();
          if (v157 >= 0)
            v99 = &__s1;
          else
            v99 = __s1;
          if (v157 >= 0)
            v100 = HIBYTE(v157);
          else
            v100 = __n;
          v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)v99, v100);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)" File position at start is ", 27);
          v102 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)", currently ", 12);
          std::istream::tellg();
          std::ostream::operator<<();
          if (SHIBYTE(v157) < 0)
            operator delete(__s1);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v165);
        }
      }
LABEL_181:
      v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)": Expected token ", 17);
      if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v90 = &v164;
      else
        v90 = (std::string *)v164.__r_.__value_.__r.__words[0];
      if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v91 = HIBYTE(v164.__r_.__value_.__r.__words[2]);
      else
        v91 = v164.__r_.__value_.__l.__size_;
      v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)v90, v91);
      v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)", got ", 6);
      if (v157 >= 0)
        v94 = &__s1;
      else
        v94 = __s1;
      if (v157 >= 0)
        v95 = HIBYTE(v157);
      else
        v95 = __n;
      v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)v94, v95);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)". This could mean that you're trying to memory map an unaligned file.", 69);
      goto LABEL_194;
    }
LABEL_168:
    if (v28 != 2)
      goto LABEL_181;
    v35 = (unsigned __int8 *)__s1;
    goto LABEL_170;
  }
  memset(&v164, 0, sizeof(v164));
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v164);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)": Expected \"[\", got EOF", 23);
LABEL_159:
    v80 = 2;
    goto LABEL_160;
  }
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v164.__r_.__value_.__l.__size_ != 1)
    {
      if (v164.__r_.__value_.__l.__size_ == 2 && *(_WORD *)v164.__r_.__value_.__l.__data_ == 23899)
        goto LABEL_216;
      goto LABEL_152;
    }
    v36 = (std::string *)v164.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (HIBYTE(v164.__r_.__value_.__r.__words[2]) != 1)
    {
      if (HIBYTE(v164.__r_.__value_.__r.__words[2]) == 2 && LOWORD(v164.__r_.__value_.__l.__data_) == 23899)
      {
LABEL_216:
        kaldi::Matrix<float>::Resize(a1, 0, 0, 0, 0);
        v80 = 1;
        goto LABEL_160;
      }
LABEL_152:
      v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)": Expected \"[\", got \"", 21);
      if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = &v164;
      else
        v77 = (std::string *)v164.__r_.__value_.__r.__words[0];
      if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v78 = HIBYTE(v164.__r_.__value_.__r.__words[2]);
      else
        v78 = v164.__r_.__value_.__l.__size_;
      v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)v77, v78);
      LOBYTE(v165) = 34;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)&v165, 1);
      goto LABEL_159;
    }
    v36 = &v164;
  }
  if (v36->__r_.__value_.__s.__data_[0] != 91)
    goto LABEL_152;
  __s1 = 0;
  __n = 0;
  v157 = 0;
  v41 = operator new();
  v42 = a2 + 4;
  *(_QWORD *)v41 = 0;
  *(_QWORD *)(v41 + 8) = 0;
  *(_QWORD *)(v41 + 16) = 0;
  while (1)
  {
    v43 = std::istream::peek();
    if (v43 == -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)"Got EOF while reading matrix data", 33);
      goto LABEL_237;
    }
    v44 = v43 << 24;
    if (v43 << 24 == 167772160 || v44 == 989855744)
    {
      std::istream::get();
      if (*(_QWORD *)(v41 + 8) != *(_QWORD *)v41)
      {
        v47 = __n;
        if (__n >= v157)
        {
          v49 = (uint64_t)(__n - (_QWORD)__s1) >> 3;
          if ((unint64_t)(v49 + 1) >> 61)
            goto LABEL_306;
          v50 = (v157 - (uint64_t)__s1) >> 2;
          if (v50 <= v49 + 1)
            v50 = v49 + 1;
          if ((unint64_t)(v157 - (_QWORD)__s1) >= 0x7FFFFFFFFFFFFFF8)
            v51 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v51 = v50;
          if (v51)
            v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v157, v51);
          else
            v52 = 0;
          v60 = (uint64_t *)&v52[8 * v49];
          *v60 = v41;
          v48 = (size_t)(v60 + 1);
          v62 = (char *)__s1;
          v61 = (char *)__n;
          if ((void *)__n != __s1)
          {
            do
            {
              v63 = *((_QWORD *)v61 - 1);
              v61 -= 8;
              *--v60 = v63;
            }
            while (v61 != v62);
            v61 = (char *)__s1;
          }
          __s1 = v60;
          __n = v48;
          v157 = (int64_t)&v52[8 * v51];
          if (v61)
            operator delete(v61);
        }
        else
        {
          *(_QWORD *)__n = v41;
          v48 = v47 + 8;
        }
        __n = v48;
        v41 = operator new();
        *(_QWORD *)v41 = 0;
        *(_QWORD *)(v41 + 8) = 0;
        *(_QWORD *)(v41 + 16) = 0;
        std::vector<float>::reserve((void **)v41, (uint64_t)(*(_QWORD *)(*(_QWORD *)(__n - 8) + 8) - **(_QWORD **)(__n - 8)) >> 2);
      }
      goto LABEL_98;
    }
    if (v44 == 1560281088)
      break;
    if (v43 - 48 <= 9)
    {
      LODWORD(v165) = 0;
      MEMORY[0x1DF0ECC24](a2, &v165);
      if ((*((_BYTE *)v42 + *(_QWORD *)(*a2 - 24)) & 5) != 0)
        goto LABEL_266;
      v45 = *(_QWORD *)(v41 + 16);
      v46 = *(_DWORD **)(v41 + 8);
      if ((unint64_t)v46 >= v45)
      {
        v54 = *(_DWORD **)v41;
        v55 = ((uint64_t)v46 - *(_QWORD *)v41) >> 2;
        v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v57 = v45 - (_QWORD)v54;
        if (v57 >> 1 > v56)
          v56 = v57 >> 1;
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
          v58 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v58 = v56;
        if (v58)
        {
          v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v41 + 16, v58);
          v54 = *(_DWORD **)v41;
          v46 = *(_DWORD **)(v41 + 8);
        }
        else
        {
          v59 = 0;
        }
        v69 = &v59[4 * v55];
        *(_DWORD *)v69 = v165;
        v70 = v69 + 4;
        while (v46 != v54)
        {
          v71 = *--v46;
          *((_DWORD *)v69 - 1) = v71;
          v69 -= 4;
        }
        *(_QWORD *)v41 = v69;
        *(_QWORD *)(v41 + 8) = v70;
        *(_QWORD *)(v41 + 16) = &v59[4 * v58];
        if (v54)
          operator delete(v54);
        *(_QWORD *)(v41 + 8) = v70;
      }
      else
      {
        *v46 = v165;
        *(_QWORD *)(v41 + 8) = v46 + 1;
      }
      goto LABEL_98;
    }
    if (v43 == 45)
    {
      std::istream::get();
      if (std::istream::peek() - 48 <= 9)
      {
        LODWORD(v165) = 0;
        MEMORY[0x1DF0ECC24](a2, &v165);
        if ((*((_BYTE *)v42 + *(_QWORD *)(*a2 - 24)) & 5) != 0)
        {
LABEL_266:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)"Stream failure/EOF while reading matrix data.", 45);
          goto LABEL_237;
        }
        *(float *)&v151 = -*(float *)&v165;
        std::vector<float>::push_back[abi:ne180100](v41, &v151);
        goto LABEL_98;
      }
      v151 = 0;
      v152 = 0;
      v153 = 0;
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v151);
      if (SHIBYTE(v153) < 0)
      {
        v65 = v151;
        if (!strcasecmp(v151, "inf"))
          goto LABEL_127;
        v66 = (char **)v65;
      }
      else
      {
        if (!strcasecmp((const char *)&v151, "inf"))
          goto LABEL_127;
        v65 = (const char *)&v151;
        v66 = &v151;
      }
      if (!strcasecmp((const char *)v66, "infinity"))
      {
LABEL_127:
        LODWORD(v165) = -8388608;
        std::vector<float>::push_back[abi:ne180100](v41, &v165);
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v165, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1876);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v165, (uint64_t)"Reading negative infinite value into matrix.", 44);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v165);
        }
        goto LABEL_146;
      }
      if (strcasecmp(v65, "nan"))
      {
        v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)"Expecting numeric matrix data, got ", 35);
        if (v153 >= 0)
          v73 = &v151;
        else
          v73 = v151;
        if (v153 >= 0)
          v74 = HIBYTE(v153);
        else
          v74 = v152;
LABEL_139:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v73, v74);
        v75 = 0;
        v64 = 8;
        goto LABEL_147;
      }
      LODWORD(v165) = -4194304;
      std::vector<float>::push_back[abi:ne180100](v41, &v165);
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v165, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1879);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v165, (uint64_t)"Reading negative NaN value into matrix.", 39);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v165);
      }
    }
    else
    {
      if (v43 <= 0x7F)
        v53 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v43 + 60) & 0x4000;
      else
        v53 = __maskrune(v43, 0x4000uLL);
      if (v53)
      {
        std::istream::get();
        goto LABEL_98;
      }
      v151 = 0;
      v152 = 0;
      v153 = 0;
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v151);
      if (SHIBYTE(v153) < 0)
      {
        v67 = v151;
        if (!strcasecmp(v151, "inf"))
          goto LABEL_140;
        v68 = (char **)v67;
      }
      else
      {
        if (!strcasecmp((const char *)&v151, "inf"))
          goto LABEL_140;
        v67 = (const char *)&v151;
        v68 = &v151;
      }
      if (!strcasecmp((const char *)v68, "infinity"))
      {
LABEL_140:
        LODWORD(v165) = 2139095040;
        std::vector<float>::push_back[abi:ne180100](v41, &v165);
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v165, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1893);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v165, (uint64_t)"Reading infinite value into matrix.", 35);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v165);
        }
        goto LABEL_146;
      }
      if (strcasecmp(v67, "nan"))
      {
        v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)"Expecting numeric matrix data, got ", 35);
        if (v153 >= 0)
          v73 = &v151;
        else
          v73 = v151;
        if (v153 >= 0)
          v74 = HIBYTE(v153);
        else
          v74 = v152;
        goto LABEL_139;
      }
      LODWORD(v165) = 2143289344;
      std::vector<float>::push_back[abi:ne180100](v41, &v165);
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v165, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1896);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v165, (uint64_t)"Reading NaN value into matrix.", 30);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v165);
      }
    }
LABEL_146:
    v64 = 0;
    v75 = 1;
LABEL_147:
    if (SHIBYTE(v153) < 0)
    {
      operator delete(v151);
      if ((v75 & 1) == 0)
        goto LABEL_99;
    }
    else if ((v75 & 1) == 0)
    {
      goto LABEL_99;
    }
LABEL_98:
    v64 = 0;
LABEL_99:
    if (v64)
      goto LABEL_237;
  }
  std::istream::get();
  v118 = std::istream::peek() << 24;
  if (v118 == 167772160)
    goto LABEL_256;
  if (v118 == 218103808)
  {
    std::istream::get();
LABEL_256:
    std::istream::get();
  }
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v165, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1818);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v165, (uint64_t)"After end of matrix data, read error.", 37);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v165);
  }
  v120 = *(_DWORD **)v41;
  if (*(_QWORD *)v41 == *(_QWORD *)(v41 + 8))
  {
    if (v120)
    {
      *(_QWORD *)(v41 + 8) = v120;
      operator delete(v120);
    }
    MEMORY[0x1DF0ED014](v41, 0x80C40D6874129);
    v122 = (_BYTE *)__n;
  }
  else
  {
    v121 = __n;
    if (__n >= v157)
    {
      v125 = (uint64_t)(__n - (_QWORD)__s1) >> 3;
      if ((unint64_t)(v125 + 1) >> 61)
LABEL_306:
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v126 = (v157 - (uint64_t)__s1) >> 2;
      if (v126 <= v125 + 1)
        v126 = v125 + 1;
      if ((unint64_t)(v157 - (_QWORD)__s1) >= 0x7FFFFFFFFFFFFFF8)
        v127 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v127 = v126;
      if (v127)
        v128 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v157, v127);
      else
        v128 = 0;
      v129 = (uint64_t *)&v128[8 * v125];
      v130 = &v128[8 * v127];
      *v129 = v41;
      v122 = v129 + 1;
      v132 = (char *)__s1;
      v131 = (char *)__n;
      if ((void *)__n != __s1)
      {
        do
        {
          v133 = *((_QWORD *)v131 - 1);
          v131 -= 8;
          *--v129 = v133;
        }
        while (v131 != v132);
        v131 = (char *)__s1;
      }
      __s1 = v129;
      __n = (size_t)v122;
      v157 = (int64_t)v130;
      if (v131)
        operator delete(v131);
    }
    else
    {
      *(_QWORD *)__n = v41;
      v122 = (_BYTE *)(v121 + 8);
    }
    __n = (size_t)v122;
  }
  if (__s1 == v122)
  {
    kaldi::Matrix<float>::Resize(a1, 0, 0, 0, 0);
    goto LABEL_302;
  }
  v134 = v122 - (_BYTE *)__s1;
  v135 = (unint64_t)(v122 - (_BYTE *)__s1) >> 3;
  v136 = *(_QWORD *)(*(_QWORD *)__s1 + 8) - **(_QWORD **)__s1;
  v137 = v136 >> 2;
  kaldi::Matrix<float>::Resize(a1, v135, v136 >> 2, 0, 0);
  if ((int)v135 < 1)
  {
LABEL_300:
    kaldi::WarnOnZeros<float>(a1, v138, v139, v140, v141);
LABEL_302:
    v80 = 1;
LABEL_249:
    v113 = __s1;
    goto LABEL_251;
  }
  v142 = 0;
  v143 = (v134 >> 3);
  v144 = (v136 >> 2);
  while (1)
  {
    v145 = (void **)*((_QWORD *)__s1 + v142);
    if (((unint64_t)((_BYTE *)v145[1] - (_BYTE *)*v145) >> 2) != (_DWORD)v137)
      break;
    if ((int)v137 < 1)
      goto LABEL_296;
    v146 = 0;
    do
    {
      v147 = *(_DWORD *)(**((_QWORD **)__s1 + v142) + 4 * v146);
      *(_DWORD *)kaldi::MatrixBase<float>::operator()(a1, v142, v146++, v140, v141) = v147;
    }
    while (v144 != v146);
    v145 = (void **)*((_QWORD *)__s1 + v142);
    if (v145)
    {
LABEL_296:
      v148 = *v145;
      if (*v145)
      {
        v145[1] = v148;
        operator delete(v148);
      }
      MEMORY[0x1DF0ED014](v145, 0x80C40D6874129);
    }
    if (++v142 == v143)
      goto LABEL_300;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)"Matrix has inconsistent #cols: ", 31);
  v149 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v149, (uint64_t)" vs.", 4);
  v150 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)" (processing row", 16);
  std::ostream::operator<<();
LABEL_237:
  if (v41)
  {
    v112 = *(_DWORD **)v41;
    if (*(_QWORD *)v41)
    {
      *(_QWORD *)(v41 + 8) = v112;
      operator delete(v112);
    }
    MEMORY[0x1DF0ED014](v41, 0x80C40D6874129);
  }
  v113 = __s1;
  v114 = __n;
  if ((void *)__n != __s1)
  {
    v115 = 0;
    do
    {
      v116 = v113[v115];
      if (v116)
      {
        v117 = *(void **)v116;
        if (*(_QWORD *)v116)
        {
          *(_QWORD *)(v116 + 8) = v117;
          operator delete(v117);
        }
        MEMORY[0x1DF0ED014](v116, 0x80C40D6874129);
        v113 = __s1;
        v114 = __n;
      }
      ++v115;
    }
    while (v115 < (uint64_t)(v114 - (_QWORD)v113) >> 3);
    v80 = 0;
    goto LABEL_249;
  }
  v80 = 0;
LABEL_251:
  if (v113)
  {
    __n = (size_t)v113;
    operator delete(v113);
  }
LABEL_160:
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v164.__r_.__value_.__l.__data_);
  if ((v80 | 2) == 2)
    goto LABEL_200;
LABEL_163:
  v158[0] = *(void **)MEMORY[0x1E0DE4F60];
  *(void **)((char *)v158 + *((_QWORD *)v158[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  v158[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  if (v162 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1DF0ECF6C](&v163);
}

void sub_1DE405BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  char a71;

  if (a67)
  {
    if (!a71)
      free(a67);
  }
  JUMPOUT(0x1DE405C6CLL);
}

void sub_1DE405C14()
{
  JUMPOUT(0x1DE405C6CLL);
}

void sub_1DE405C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  kaldi::CompressedMatrix::Destroy((kaldi::CompressedMatrix *)&a67);
  JUMPOUT(0x1DE405C6CLL);
}

void sub_1DE405C2C(uint64_t a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1DE405C98);
}

void sub_1DE405C40(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15[35];
  char v16;

  if (__p)
    operator delete(__p);
  if (v16 < 0)
    operator delete(v15[33]);
  std::ostringstream::~ostringstream((uint64_t)v15);
  JUMPOUT(0x1DE405C98);
}

void kaldi::MatrixBase<float>::AddMat(uint64_t a1, uint64_t a2, int a3, float a4, float a5, uint64_t a6, const char *a7)
{
  uint64_t v11;
  const float *v12;
  float *v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  const float *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const float *v29;
  float *v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const float *v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  float v43;

  if (a2 == a1)
  {
    if (a3 == 111)
    {
      kaldi::MatrixBase<float>::Scale(a2, a4 + a5);
    }
    else
    {
      v23 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v23 != *(_DWORD *)(a2 + 8))
        kaldi::KaldiAssertFailure_((kaldi *)"AddMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x1D0, "num_rows_ == num_cols_ && \"AddMat: adding to self (transposed): not symmetric.\"", a7);
      v24 = *(const float **)a2;
      if (a4 == 1.0 && a5 == 1.0)
      {
        if ((int)v23 >= 1)
        {
          v35 = 0;
          v36 = *(int *)(a2 + 16);
          v37 = 4 * v36;
          v38 = *(const float **)a2;
          v39 = *(float **)a2;
          do
          {
            if (v35)
            {
              v40 = 0;
              v41 = v35 * v36;
              v42 = v39;
              do
              {
                v43 = v38[v40] + *v42;
                *v42 = v43;
                v38[v40++] = v43;
                v42 = (float *)((char *)v42 + v37);
              }
              while (v35 != v40);
            }
            else
            {
              v41 = 0;
            }
            v24[v41 + v35] = v24[v41 + v35] + v24[v41 + v35];
            ++v35;
            ++v39;
            v38 = (const float *)((char *)v38 + v37);
          }
          while (v35 != v23);
        }
      }
      else if ((int)v23 >= 1)
      {
        v26 = 0;
        v27 = *(int *)(a2 + 16);
        v28 = 4 * v27;
        v29 = *(const float **)a2;
        v30 = *(float **)a2;
        do
        {
          if (v26)
          {
            v31 = 0;
            v32 = v26 * v27;
            v33 = v30;
            do
            {
              v34 = v29[v31];
              v29[v31] = (float)(v34 * a5) + (float)(a4 * *v33);
              *v33 = (float)(*v33 * a5) + (float)(a4 * v34);
              ++v31;
              v33 = (float *)((char *)v33 + v28);
            }
            while (v26 != v31);
          }
          else
          {
            v32 = 0;
          }
          v24[v32 + v26] = (float)(a4 + a5) * v24[v32 + v26];
          ++v26;
          ++v30;
          v29 = (const float *)((char *)v29 + v28);
        }
        while (v26 != v23);
      }
    }
  }
  else
  {
    if (a5 != 1.0)
      kaldi::MatrixBase<float>::Scale(a1, a5);
    v11 = *(int *)(a2 + 16);
    v12 = *(const float **)a2;
    v13 = *(float **)a1;
    v14 = *(_DWORD *)(a1 + 12);
    v15 = *(int *)(a1 + 16);
    if (a3 == 111)
    {
      v16 = *(_DWORD *)(a2 + 12);
      if (v16 != v14 || *(_DWORD *)(a2 + 8) != *(_DWORD *)(a1 + 8))
        kaldi::KaldiAssertFailure_((kaldi *)"AddMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x1EE, "A.num_rows_ == num_rows_ && A.num_cols_ == num_cols_", a7);
      if (v16 >= 1)
      {
        v17 = 0;
        v18 = 4 * v15;
        v19 = 4 * v11;
        do
        {
          cblas_saxpy(*(_DWORD *)(a1 + 8), a4, v12, 1, v13, 1);
          ++v17;
          v13 = (float *)((char *)v13 + v18);
          v12 = (const float *)((char *)v12 + v19);
        }
        while (v17 < *(_DWORD *)(a1 + 12));
      }
    }
    else
    {
      v20 = *(_DWORD *)(a2 + 8);
      if (v20 != v14 || *(_DWORD *)(a2 + 12) != *(_DWORD *)(a1 + 8))
        kaldi::KaldiAssertFailure_((kaldi *)"AddMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x1F5, "A.num_cols_ == num_rows_ && A.num_rows_ == num_cols_", a7);
      if (v20 >= 1)
      {
        v21 = 0;
        v22 = 4 * v15;
        do
        {
          cblas_saxpy(*(_DWORD *)(a1 + 8), a4, v12, v11, v13, 1);
          ++v21;
          ++v12;
          v13 = (float *)((char *)v13 + v22);
        }
        while (v21 < *(_DWORD *)(a1 + 12));
      }
    }
  }
}

void kaldi::WarnOnZeros<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  const char *v6;
  _QWORD *v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11[34];

  if (kaldi::MatrixBase<float>::IsZero(a1, 0.0, a2, a3, a4, a5))
  {
    if (kaldi::g_kaldi_verbose_level < -1)
      return;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11, "WarnOnZeros", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1652);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"The matrix is entirely 0. If this is unexpected, ", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"this could be a sign of data corruption.", 40);
    goto LABEL_11;
  }
  if (*(int *)(a1 + 12) >= 1)
  {
    v8 = 0;
    while (1)
    {
      kaldi::MatrixBase<float>::Row(a1, v8, v6, v11);
      if (kaldi::VectorBase<float>::IsZero((uint64_t)v11, 0.0))
        break;
      if ((signed int)++v8 >= *(_DWORD *)(a1 + 12))
        return;
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11, "WarnOnZeros", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1658);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Row ", 4);
      v9 = (_QWORD *)std::ostream::operator<<();
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" of the matrix is entirely 0. If this is ", 41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"unexpected, this could be a sign of data corruption.", 52);
LABEL_11:
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    }
  }
}

void sub_1DE4060E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::Matrix<double>::Read(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5)
{
  int v6;
  uint64_t v9;
  const char *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  const char *v21;
  _BOOL4 v22;
  const std::string::value_type *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  int v28;
  size_t v29;
  size_t v30;
  std::string::size_type size;
  int v32;
  std::string *v33;
  void **p_s1;
  uint64_t v35;
  unsigned __int8 *v36;
  std::string *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  _QWORD *v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  _QWORD *v47;
  size_t v48;
  size_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  int v65;
  const char *v66;
  char **v67;
  const char *v68;
  char **v69;
  char *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  void *v74;
  uint64_t v75;
  char v76;
  _QWORD *v77;
  std::string *v78;
  std::string::size_type v79;
  _QWORD *v80;
  int v81;
  int v82;
  std::string *v83;
  _BYTE *v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  _QWORD *v90;
  std::string *v91;
  std::string::size_type v92;
  _QWORD *v93;
  _QWORD *v94;
  void *v95;
  size_t v96;
  _QWORD *v97;
  int v98;
  _QWORD *v99;
  void *v100;
  size_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  int v105;
  int v106;
  int v107;
  int v108;
  unsigned int v109;
  _QWORD *v110;
  uint64_t v111;
  int v112;
  _QWORD *v113;
  _QWORD *v114;
  size_t v115;
  unint64_t v116;
  uint64_t v117;
  void *v118;
  unsigned int v119;
  _QWORD *v121;
  size_t v122;
  _BYTE *v123;
  _QWORD *v124;
  const char *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t *v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void **v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  _QWORD *v150;
  _QWORD *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *__s1;
  size_t __n;
  int64_t v158;
  void *v159[2];
  __int128 v160;
  char v161;
  void *__p;
  char v163;
  uint64_t v164;
  std::string v165;
  __int128 v166;
  __int128 v167;
  char v168;
  uint64_t v169;
  uint64_t v170;

  v6 = a3;
  v170 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v161 = 0;
    *(_OWORD *)v159 = 0u;
    v160 = 0u;
    kaldi::Matrix<double>::Read(v159, a2, a3, 0, a5);
    if (*(_DWORD *)(a1 + 12))
    {
      if (*(void **)(a1 + 8) != v159[1])
      {
        if (HIDWORD(v159[1]))
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v166, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1675);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v166, (uint64_t)"Matrix::Read, size mismatch ", 28);
          v11 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
          v12 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" vs. ", 5);
          v13 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
          std::ostream::operator<<();
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v166);
        }
        goto LABEL_15;
      }
    }
    else
    {
      kaldi::Matrix<double>::Resize(a1, HIDWORD(v159[1]), LODWORD(v159[1]), 0, 0);
    }
    kaldi::MatrixBase<double>::AddMat(a1, (uint64_t)v159, 111, 1.0, 1.0, v9, v10);
LABEL_15:
    if (v159[0])
    {
      if (!v161)
        free(v159[0]);
    }
    return;
  }
  std::istream::tellg();
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v159);
  if (v6)
  {
    v14 = kaldi::Peek(a2, 1);
    if (v14 == 70)
    {
      if (a5)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v166, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1704);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v166, (uint64_t)"Can not map into the wrong matrix data type", 43);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v166);
      }
      v18 = *(unsigned int *)(a1 + 8);
      v17 = *(unsigned int *)(a1 + 12);
      v166 = 0u;
      v167 = 0u;
      v168 = 0;
      kaldi::Matrix<float>::Resize((uint64_t)&v166, v17, v18, 0, 0);
      kaldi::Matrix<float>::Read(&v166, a2, 1, 0, 0, v19);
      kaldi::Matrix<double>::Resize(a1, HIDWORD(v166), DWORD2(v166), 0, 0);
      kaldi::MatrixBase<double>::CopyFromMat<float>(a1, (uint64_t)&v166, 111, v20, v21);
      if ((_QWORD)v166 && !v168)
        free((void *)v166);
      goto LABEL_163;
    }
    if (v14 == 67)
    {
      *(_QWORD *)&v166 = 0;
      BYTE8(v166) = 0;
      kaldi::CompressedMatrix::Read((uint64_t)&v166, a2, 1, a5);
      if ((_QWORD)v166)
      {
        v15 = *(unsigned int *)(v166 + 8);
        v16 = *(unsigned int *)(v166 + 12);
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
      kaldi::Matrix<double>::Resize(a1, v15, v16, 0, 0);
      kaldi::CompressedMatrix::CopyToMat<double>((uint64_t *)&v166, a1);
      kaldi::WarnOnZeros<double>(a1, v38, v39, v40, v41);
      kaldi::CompressedMatrix::Destroy((kaldi::CompressedMatrix *)&v166);
      goto LABEL_163;
    }
    memset(&v165, 0, sizeof(v165));
    std::string::append(&v165, "D");
    v22 = a5 != 0;
    if (a5)
      v23 = "N";
    else
      v23 = "M";
    std::string::append(&v165, v23);
    __s1 = 0;
    __n = 0;
    v158 = 0;
    kaldi::ReadToken(a2, 1, (uint64_t)&__s1, v24, v25);
    v28 = SHIBYTE(v158);
    v29 = __n;
    if (v158 >= 0)
      v30 = HIBYTE(v158);
    else
      v30 = __n;
    size = HIBYTE(v165.__r_.__value_.__r.__words[2]);
    v32 = SHIBYTE(v165.__r_.__value_.__r.__words[2]);
    if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v165.__r_.__value_.__l.__size_;
    if (v30 == size)
    {
      if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = &v165;
      else
        v33 = (std::string *)v165.__r_.__value_.__r.__words[0];
      if (v158 < 0)
      {
        if (!memcmp(__s1, v33, __n))
          goto LABEL_179;
        goto LABEL_168;
      }
      if (!HIBYTE(v158))
        goto LABEL_179;
      p_s1 = &__s1;
      v35 = HIBYTE(v158);
      while (*(unsigned __int8 *)p_s1 == v33->__r_.__value_.__s.__data_[0])
      {
        p_s1 = (void **)((char *)p_s1 + 1);
        v33 = (std::string *)((char *)v33 + 1);
        if (!--v35)
          goto LABEL_179;
      }
    }
    if ((v158 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v158) != 2)
        goto LABEL_181;
      v36 = (unsigned __int8 *)&__s1;
LABEL_170:
      v82 = *v36;
      v83 = (std::string *)v165.__r_.__value_.__r.__words[0];
      if (v32 >= 0)
        v83 = &v165;
      if (v82 == v83->__r_.__value_.__s.__data_[0])
      {
        v84 = __s1;
        if (v28 >= 0)
          v84 = &__s1;
        if (v84[1] == 78)
        {
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v166, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1721);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v166, (uint64_t)"Reading aligned matrix as a stream", 34);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v166);
          }
          v22 = 1;
LABEL_179:
          LODWORD(v152) = 0;
          v155 = 0;
          kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v152, v26, v27);
          kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v155 + 4, v85, v86);
          if (v22)
          {
            kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v155, v88, v89);
            fst::AlignInput();
          }
          else
          {
            LODWORD(v155) = HIDWORD(v155);
          }
          v104 = v152;
          if (a5)
          {
            *(_DWORD *)(a1 + 8) = HIDWORD(v155);
            *(_DWORD *)(a1 + 12) = v104;
            *(_DWORD *)(a1 + 16) = v155;
            if (*(_QWORD *)a1 && !*(_BYTE *)(a1 + 32))
              free(*(void **)a1);
            std::istream::tellg();
            *(_QWORD *)a1 = a5 + v169;
            *(_BYTE *)(a1 + 32) = 1;
            std::istream::seekg();
            if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)": Seeking failed", 16);
LABEL_194:
              v98 = 2;
              goto LABEL_195;
            }
          }
          else
          {
            v105 = HIDWORD(v155);
            if (__PAIR64__(v152, HIDWORD(v155)) == *(_QWORD *)(a1 + 8))
            {
              v106 = HIDWORD(v155);
            }
            else
            {
              kaldi::Matrix<double>::Resize(a1, v152, HIDWORD(v155), 1, 0);
              v106 = *(_DWORD *)(a1 + 8);
              v105 = HIDWORD(v155);
              v104 = v152;
            }
            v107 = *(_DWORD *)(a1 + 16);
            v108 = v155;
            if (v107 == v106 && v107 == (_DWORD)v155 && v105 * (_DWORD)v104)
            {
              std::istream::read();
              if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)": Reading whole matrix failed", 29);
                goto LABEL_194;
              }
            }
            else if ((int)v104 >= 1)
            {
              v109 = 0;
              v110 = a2 + 4;
              v111 = 29;
              while (1)
              {
                if (*(_DWORD *)(a1 + 12) <= v109)
                  kaldi::KaldiAssertFailure_((kaldi *)"RowData", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xBC, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v89);
                std::istream::read();
                if ((*((_BYTE *)v110 + *(_QWORD *)(*a2 - 24)) & 5) != 0)
                {
                  v124 = v159;
                  v125 = ": Reading a matrix row failed";
                  goto LABEL_268;
                }
                if (v108 != v105)
                {
                  std::istream::seekg();
                  if ((*((_BYTE *)v110 + *(_QWORD *)(*a2 - 24)) & 5) != 0)
                    break;
                }
                if ((int)++v109 >= (int)v152)
                  goto LABEL_232;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)": Seek for padding ", 19);
              v124 = (_QWORD *)std::ostream::operator<<();
              v125 = " failed";
              v111 = 7;
LABEL_268:
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)v125, v111);
              goto LABEL_194;
            }
          }
LABEL_232:
          kaldi::WarnOnZeros<double>(a1, v104, v87, v88, v89);
          v112 = *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32);
          v98 = 1;
          if ((v112 & 2) == 0)
          {
            if ((v112 & 5) != 0)
              v98 = 2;
            else
              v98 = 1;
          }
LABEL_195:
          if (SHIBYTE(v158) < 0)
            operator delete(__s1);
          if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v165.__r_.__value_.__l.__data_);
          if (v98 != 2)
            goto LABEL_163;
LABEL_200:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v166, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1912);
          v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v166, (uint64_t)"Failed to read matrix from stream.  ", 36);
          std::stringbuf::str();
          if (v158 >= 0)
            v100 = &__s1;
          else
            v100 = __s1;
          if (v158 >= 0)
            v101 = HIBYTE(v158);
          else
            v101 = __n;
          v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)v100, v101);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)" File position at start is ", 27);
          v103 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)", currently ", 12);
          std::istream::tellg();
          std::ostream::operator<<();
          if (SHIBYTE(v158) < 0)
            operator delete(__s1);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v166);
        }
      }
LABEL_181:
      v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)": Expected token ", 17);
      if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v91 = &v165;
      else
        v91 = (std::string *)v165.__r_.__value_.__r.__words[0];
      if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v92 = HIBYTE(v165.__r_.__value_.__r.__words[2]);
      else
        v92 = v165.__r_.__value_.__l.__size_;
      v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)v91, v92);
      v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)", got ", 6);
      if (v158 >= 0)
        v95 = &__s1;
      else
        v95 = __s1;
      if (v158 >= 0)
        v96 = HIBYTE(v158);
      else
        v96 = __n;
      v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)v95, v96);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)". This could mean that you're trying to memory map an unaligned file.", 69);
      goto LABEL_194;
    }
LABEL_168:
    if (v29 != 2)
      goto LABEL_181;
    v36 = (unsigned __int8 *)__s1;
    goto LABEL_170;
  }
  memset(&v165, 0, sizeof(v165));
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v165);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)": Expected \"[\", got EOF", 23);
LABEL_159:
    v81 = 2;
    goto LABEL_160;
  }
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v165.__r_.__value_.__l.__size_ != 1)
    {
      if (v165.__r_.__value_.__l.__size_ == 2 && *(_WORD *)v165.__r_.__value_.__l.__data_ == 23899)
        goto LABEL_216;
      goto LABEL_152;
    }
    v37 = (std::string *)v165.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (HIBYTE(v165.__r_.__value_.__r.__words[2]) != 1)
    {
      if (HIBYTE(v165.__r_.__value_.__r.__words[2]) == 2 && LOWORD(v165.__r_.__value_.__l.__data_) == 23899)
      {
LABEL_216:
        kaldi::Matrix<double>::Resize(a1, 0, 0, 0, 0);
        v81 = 1;
        goto LABEL_160;
      }
LABEL_152:
      v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)": Expected \"[\", got \"", 21);
      if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v78 = &v165;
      else
        v78 = (std::string *)v165.__r_.__value_.__r.__words[0];
      if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v79 = HIBYTE(v165.__r_.__value_.__r.__words[2]);
      else
        v79 = v165.__r_.__value_.__l.__size_;
      v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v78, v79);
      LOBYTE(v166) = 34;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)&v166, 1);
      goto LABEL_159;
    }
    v37 = &v165;
  }
  if (v37->__r_.__value_.__s.__data_[0] != 91)
    goto LABEL_152;
  __s1 = 0;
  __n = 0;
  v158 = 0;
  v42 = operator new();
  v43 = a2 + 4;
  *(_QWORD *)v42 = 0;
  *(_QWORD *)(v42 + 8) = 0;
  *(_QWORD *)(v42 + 16) = 0;
  while (1)
  {
    v44 = std::istream::peek();
    if (v44 == -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)"Got EOF while reading matrix data", 33);
      goto LABEL_237;
    }
    v45 = v44 << 24;
    if (v44 << 24 == 167772160 || v45 == 989855744)
    {
      std::istream::get();
      if (*(_QWORD *)(v42 + 8) != *(_QWORD *)v42)
      {
        v48 = __n;
        if (__n >= v158)
        {
          v50 = (uint64_t)(__n - (_QWORD)__s1) >> 3;
          if ((unint64_t)(v50 + 1) >> 61)
            goto LABEL_306;
          v51 = (v158 - (uint64_t)__s1) >> 2;
          if (v51 <= v50 + 1)
            v51 = v50 + 1;
          if ((unint64_t)(v158 - (_QWORD)__s1) >= 0x7FFFFFFFFFFFFFF8)
            v52 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v52 = v51;
          if (v52)
            v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v158, v52);
          else
            v53 = 0;
          v61 = (uint64_t *)&v53[8 * v50];
          *v61 = v42;
          v49 = (size_t)(v61 + 1);
          v63 = (char *)__s1;
          v62 = (char *)__n;
          if ((void *)__n != __s1)
          {
            do
            {
              v64 = *((_QWORD *)v62 - 1);
              v62 -= 8;
              *--v61 = v64;
            }
            while (v62 != v63);
            v62 = (char *)__s1;
          }
          __s1 = v61;
          __n = v49;
          v158 = (int64_t)&v53[8 * v52];
          if (v62)
            operator delete(v62);
        }
        else
        {
          *(_QWORD *)__n = v42;
          v49 = v48 + 8;
        }
        __n = v49;
        v42 = operator new();
        *(_QWORD *)v42 = 0;
        *(_QWORD *)(v42 + 8) = 0;
        *(_QWORD *)(v42 + 16) = 0;
        std::vector<double>::reserve((void **)v42, (uint64_t)(*(_QWORD *)(*(_QWORD *)(__n - 8) + 8) - **(_QWORD **)(__n - 8)) >> 3);
      }
      goto LABEL_98;
    }
    if (v45 == 1560281088)
      break;
    if (v44 - 48 <= 9)
    {
      *(_QWORD *)&v166 = 0;
      MEMORY[0x1DF0ECC18](a2, &v166);
      if ((*((_BYTE *)v43 + *(_QWORD *)(*a2 - 24)) & 5) != 0)
        goto LABEL_266;
      v46 = *(_QWORD *)(v42 + 16);
      v47 = *(_QWORD **)(v42 + 8);
      if ((unint64_t)v47 >= v46)
      {
        v55 = *(_QWORD **)v42;
        v56 = ((uint64_t)v47 - *(_QWORD *)v42) >> 3;
        v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v58 = v46 - (_QWORD)v55;
        if (v58 >> 2 > v57)
          v57 = v58 >> 2;
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
          v59 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v59 = v57;
        if (v59)
        {
          v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v42 + 16, v59);
          v55 = *(_QWORD **)v42;
          v47 = *(_QWORD **)(v42 + 8);
        }
        else
        {
          v60 = 0;
        }
        v70 = &v60[8 * v56];
        *(_QWORD *)v70 = v166;
        v71 = v70 + 8;
        while (v47 != v55)
        {
          v72 = *--v47;
          *((_QWORD *)v70 - 1) = v72;
          v70 -= 8;
        }
        *(_QWORD *)v42 = v70;
        *(_QWORD *)(v42 + 8) = v71;
        *(_QWORD *)(v42 + 16) = &v60[8 * v59];
        if (v55)
          operator delete(v55);
        *(_QWORD *)(v42 + 8) = v71;
      }
      else
      {
        *v47 = v166;
        *(_QWORD *)(v42 + 8) = v47 + 1;
      }
      goto LABEL_98;
    }
    if (v44 == 45)
    {
      std::istream::get();
      if (std::istream::peek() - 48 <= 9)
      {
        *(_QWORD *)&v166 = 0;
        MEMORY[0x1DF0ECC18](a2, &v166);
        if ((*((_BYTE *)v43 + *(_QWORD *)(*a2 - 24)) & 5) != 0)
        {
LABEL_266:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)"Stream failure/EOF while reading matrix data.", 45);
          goto LABEL_237;
        }
        *(double *)&v152 = -*(double *)&v166;
        std::vector<double>::push_back[abi:ne180100](v42, &v152);
        goto LABEL_98;
      }
      v152 = 0;
      v153 = 0;
      v154 = 0;
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v152);
      if (SHIBYTE(v154) < 0)
      {
        v66 = v152;
        if (!strcasecmp(v152, "inf"))
          goto LABEL_127;
        v67 = (char **)v66;
      }
      else
      {
        if (!strcasecmp((const char *)&v152, "inf"))
          goto LABEL_127;
        v66 = (const char *)&v152;
        v67 = &v152;
      }
      if (!strcasecmp((const char *)v67, "infinity"))
      {
LABEL_127:
        *(_QWORD *)&v166 = 0xFFF0000000000000;
        std::vector<double>::push_back[abi:ne180100](v42, &v166);
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v166, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1876);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v166, (uint64_t)"Reading negative infinite value into matrix.", 44);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v166);
        }
        goto LABEL_146;
      }
      if (strcasecmp(v66, "nan"))
      {
        v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)"Expecting numeric matrix data, got ", 35);
        if (v154 >= 0)
          v74 = &v152;
        else
          v74 = v152;
        if (v154 >= 0)
          v75 = HIBYTE(v154);
        else
          v75 = v153;
LABEL_139:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)v74, v75);
        v76 = 0;
        v65 = 8;
        goto LABEL_147;
      }
      *(_QWORD *)&v166 = 0xFFF8000000000000;
      std::vector<double>::push_back[abi:ne180100](v42, &v166);
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v166, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1879);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v166, (uint64_t)"Reading negative NaN value into matrix.", 39);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v166);
      }
    }
    else
    {
      if (v44 <= 0x7F)
        v54 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v44 + 60) & 0x4000;
      else
        v54 = __maskrune(v44, 0x4000uLL);
      if (v54)
      {
        std::istream::get();
        goto LABEL_98;
      }
      v152 = 0;
      v153 = 0;
      v154 = 0;
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v152);
      if (SHIBYTE(v154) < 0)
      {
        v68 = v152;
        if (!strcasecmp(v152, "inf"))
          goto LABEL_140;
        v69 = (char **)v68;
      }
      else
      {
        if (!strcasecmp((const char *)&v152, "inf"))
          goto LABEL_140;
        v68 = (const char *)&v152;
        v69 = &v152;
      }
      if (!strcasecmp((const char *)v69, "infinity"))
      {
LABEL_140:
        *(_QWORD *)&v166 = 0x7FF0000000000000;
        std::vector<double>::push_back[abi:ne180100](v42, &v166);
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v166, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1893);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v166, (uint64_t)"Reading infinite value into matrix.", 35);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v166);
        }
        goto LABEL_146;
      }
      if (strcasecmp(v68, "nan"))
      {
        v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)"Expecting numeric matrix data, got ", 35);
        if (v154 >= 0)
          v74 = &v152;
        else
          v74 = v152;
        if (v154 >= 0)
          v75 = HIBYTE(v154);
        else
          v75 = v153;
        goto LABEL_139;
      }
      *(_QWORD *)&v166 = 0x7FF8000000000000;
      std::vector<double>::push_back[abi:ne180100](v42, &v166);
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v166, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1896);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v166, (uint64_t)"Reading NaN value into matrix.", 30);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v166);
      }
    }
LABEL_146:
    v65 = 0;
    v76 = 1;
LABEL_147:
    if (SHIBYTE(v154) < 0)
    {
      operator delete(v152);
      if ((v76 & 1) == 0)
        goto LABEL_99;
    }
    else if ((v76 & 1) == 0)
    {
      goto LABEL_99;
    }
LABEL_98:
    v65 = 0;
LABEL_99:
    if (v65)
      goto LABEL_237;
  }
  std::istream::get();
  v119 = std::istream::peek() << 24;
  if (v119 == 167772160)
    goto LABEL_256;
  if (v119 == 218103808)
  {
    std::istream::get();
LABEL_256:
    std::istream::get();
  }
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v166, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1818);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v166, (uint64_t)"After end of matrix data, read error.", 37);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v166);
  }
  v121 = *(_QWORD **)v42;
  if (*(_QWORD *)v42 == *(_QWORD *)(v42 + 8))
  {
    if (v121)
    {
      *(_QWORD *)(v42 + 8) = v121;
      operator delete(v121);
    }
    MEMORY[0x1DF0ED014](v42, 0x80C40D6874129);
    v123 = (_BYTE *)__n;
  }
  else
  {
    v122 = __n;
    if (__n >= v158)
    {
      v126 = (uint64_t)(__n - (_QWORD)__s1) >> 3;
      if ((unint64_t)(v126 + 1) >> 61)
LABEL_306:
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v127 = (v158 - (uint64_t)__s1) >> 2;
      if (v127 <= v126 + 1)
        v127 = v126 + 1;
      if ((unint64_t)(v158 - (_QWORD)__s1) >= 0x7FFFFFFFFFFFFFF8)
        v128 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v128 = v127;
      if (v128)
        v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v158, v128);
      else
        v129 = 0;
      v130 = (uint64_t *)&v129[8 * v126];
      v131 = &v129[8 * v128];
      *v130 = v42;
      v123 = v130 + 1;
      v133 = (char *)__s1;
      v132 = (char *)__n;
      if ((void *)__n != __s1)
      {
        do
        {
          v134 = *((_QWORD *)v132 - 1);
          v132 -= 8;
          *--v130 = v134;
        }
        while (v132 != v133);
        v132 = (char *)__s1;
      }
      __s1 = v130;
      __n = (size_t)v123;
      v158 = (int64_t)v131;
      if (v132)
        operator delete(v132);
    }
    else
    {
      *(_QWORD *)__n = v42;
      v123 = (_BYTE *)(v122 + 8);
    }
    __n = (size_t)v123;
  }
  if (__s1 == v123)
  {
    kaldi::Matrix<double>::Resize(a1, 0, 0, 0, 0);
    goto LABEL_302;
  }
  v135 = v123 - (_BYTE *)__s1;
  v136 = (unint64_t)(v123 - (_BYTE *)__s1) >> 3;
  v137 = *(_QWORD *)(*(_QWORD *)__s1 + 8) - **(_QWORD **)__s1;
  v138 = v137 >> 3;
  kaldi::Matrix<double>::Resize(a1, v136, v137 >> 3, 0, 0);
  if ((int)v136 < 1)
  {
LABEL_300:
    kaldi::WarnOnZeros<double>(a1, v139, v140, v141, v142);
LABEL_302:
    v81 = 1;
LABEL_249:
    v114 = __s1;
    goto LABEL_251;
  }
  v143 = 0;
  v144 = (v135 >> 3);
  v145 = (v137 >> 3);
  while (1)
  {
    v146 = (void **)*((_QWORD *)__s1 + v143);
    if (((unint64_t)((_BYTE *)v146[1] - (_BYTE *)*v146) >> 3) != (_DWORD)v138)
      break;
    if ((int)v138 < 1)
      goto LABEL_296;
    v147 = 0;
    do
    {
      v148 = *(_QWORD *)(**((_QWORD **)__s1 + v143) + 8 * v147);
      *(_QWORD *)kaldi::MatrixBase<double>::operator()(a1, v143, v147++, v141, v142) = v148;
    }
    while (v145 != v147);
    v146 = (void **)*((_QWORD *)__s1 + v143);
    if (v146)
    {
LABEL_296:
      v149 = *v146;
      if (*v146)
      {
        v146[1] = v149;
        operator delete(v149);
      }
      MEMORY[0x1DF0ED014](v146, 0x80C40D6874129);
    }
    if (++v143 == v144)
      goto LABEL_300;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)"Matrix has inconsistent #cols: ", 31);
  v150 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)" vs.", 4);
  v151 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v151, (uint64_t)" (processing row", 16);
  std::ostream::operator<<();
LABEL_237:
  if (v42)
  {
    v113 = *(_QWORD **)v42;
    if (*(_QWORD *)v42)
    {
      *(_QWORD *)(v42 + 8) = v113;
      operator delete(v113);
    }
    MEMORY[0x1DF0ED014](v42, 0x80C40D6874129);
  }
  v114 = __s1;
  v115 = __n;
  if ((void *)__n != __s1)
  {
    v116 = 0;
    do
    {
      v117 = v114[v116];
      if (v117)
      {
        v118 = *(void **)v117;
        if (*(_QWORD *)v117)
        {
          *(_QWORD *)(v117 + 8) = v118;
          operator delete(v118);
        }
        MEMORY[0x1DF0ED014](v117, 0x80C40D6874129);
        v114 = __s1;
        v115 = __n;
      }
      ++v116;
    }
    while (v116 < (uint64_t)(v115 - (_QWORD)v114) >> 3);
    v81 = 0;
    goto LABEL_249;
  }
  v81 = 0;
LABEL_251:
  if (v114)
  {
    __n = (size_t)v114;
    operator delete(v114);
  }
LABEL_160:
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v165.__r_.__value_.__l.__data_);
  if ((v81 | 2) == 2)
    goto LABEL_200;
LABEL_163:
  v159[0] = *(void **)MEMORY[0x1E0DE4F60];
  *(void **)((char *)v159 + *((_QWORD *)v159[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  v159[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  if (v163 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1DF0ECF6C](&v164);
}

void sub_1DE4076B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  char a71;

  if (a67)
  {
    if (!a71)
      free(a67);
  }
  JUMPOUT(0x1DE407744);
}

void sub_1DE4076EC()
{
  JUMPOUT(0x1DE407744);
}

void sub_1DE4076F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  kaldi::CompressedMatrix::Destroy((kaldi::CompressedMatrix *)&a67);
  JUMPOUT(0x1DE407744);
}

void sub_1DE407704(uint64_t a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1DE407770);
}

void sub_1DE407718(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15[35];
  char v16;

  if (__p)
    operator delete(__p);
  if (v16 < 0)
    operator delete(v15[33]);
  std::ostringstream::~ostringstream((uint64_t)v15);
  JUMPOUT(0x1DE407770);
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<float>::push_back[abi:ne180100](uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_DWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v4, v12);
      v8 = *(_DWORD **)a1;
      v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

uint64_t kaldi::Matrix<float>::Init(uint64_t result, int a2, int a3, int a4, const char *a5)
{
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  std::bad_alloc *exception;
  std::bad_alloc *v12;
  void *memptr;

  v7 = result;
  if (a3 * a2)
  {
    if (a2 < 1 || a3 <= 0)
      kaldi::KaldiAssertFailure_((kaldi *)"Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x30E, "rows > 0 && cols > 0", a5);
    memptr = 0;
    v8 = -a3 & 3;
    if (a4)
      v8 = 0;
    v9 = v8 + a3;
    result = malloc_type_posix_memalign(&memptr, 0x10uLL, 4 * a2 * (unint64_t)(v8 + a3), 0xC333CEFEuLL);
    if ((_DWORD)result)
      v10 = 1;
    else
      v10 = memptr == 0;
    if (v10)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v12 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v12, MEMORY[0x1E0DE4EA8], MEMORY[0x1E0DE4DC0]);
    }
    *(_QWORD *)v7 = memptr;
    *(_BYTE *)(v7 + 32) = 0;
    *(_DWORD *)(v7 + 8) = a3;
    *(_DWORD *)(v7 + 12) = a2;
    *(_DWORD *)(v7 + 16) = v9;
    *(_DWORD *)(v7 + 20) = v9 * a2;
  }
  else
  {
    if (a3 | a2)
      kaldi::KaldiAssertFailure_((kaldi *)"Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x305, "rows == 0 && cols == 0", a5);
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = 0;
  }
  return result;
}

uint64_t kaldi::Matrix<double>::Matrix(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  *(_BYTE *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  kaldi::Matrix<double>::Resize(a1, a2, a3, a4, a5);
  return a1;
}

uint64_t kaldi::Matrix<double>::Matrix(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  const char *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  kaldi::Matrix<double>::Resize(a1, a2[3], a2[2], 1, (const char *)(a2[2] == a2[4]));
  kaldi::MatrixBase<double>::CopyFromMat<double>((unsigned int *)a1, a2, 111, v4, v5);
  return a1;
}

void kaldi::MatrixBase<double>::AddMat(uint64_t a1, uint64_t a2, int a3, double a4, double a5, uint64_t a6, const char *a7)
{
  uint64_t v11;
  const double *v12;
  double *v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  const double *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const double *v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const double *v38;
  double *v39;
  uint64_t v40;
  uint64_t v41;
  double *v42;
  double v43;

  if (a2 == a1)
  {
    if (a3 == 111)
    {
      kaldi::MatrixBase<double>::Scale(a2, a4 + a5);
    }
    else
    {
      v23 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v23 != *(_DWORD *)(a2 + 8))
        kaldi::KaldiAssertFailure_((kaldi *)"AddMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x1D0, "num_rows_ == num_cols_ && \"AddMat: adding to self (transposed): not symmetric.\"", a7);
      v24 = *(const double **)a2;
      if (a4 == 1.0 && a5 == 1.0)
      {
        if ((int)v23 >= 1)
        {
          v35 = 0;
          v36 = *(int *)(a2 + 16);
          v37 = 8 * v36;
          v38 = *(const double **)a2;
          v39 = *(double **)a2;
          do
          {
            if (v35)
            {
              v40 = 0;
              v41 = v35 * v36;
              v42 = v39;
              do
              {
                v43 = v38[v40] + *v42;
                *v42 = v43;
                v38[v40++] = v43;
                v42 = (double *)((char *)v42 + v37);
              }
              while (v35 != v40);
            }
            else
            {
              v41 = 0;
            }
            v24[v41 + v35] = v24[v41 + v35] + v24[v41 + v35];
            ++v35;
            ++v39;
            v38 = (const double *)((char *)v38 + v37);
          }
          while (v35 != v23);
        }
      }
      else if ((int)v23 >= 1)
      {
        v26 = 0;
        v27 = *(int *)(a2 + 16);
        v28 = 8 * v27;
        v29 = *(const double **)a2;
        v30 = *(double **)a2;
        do
        {
          if (v26)
          {
            v31 = 0;
            v32 = v26 * v27;
            v33 = v30;
            do
            {
              v34 = v29[v31];
              v29[v31] = v34 * a5 + a4 * *v33;
              *v33 = *v33 * a5 + a4 * v34;
              ++v31;
              v33 = (double *)((char *)v33 + v28);
            }
            while (v26 != v31);
          }
          else
          {
            v32 = 0;
          }
          v24[v32 + v26] = (a4 + a5) * v24[v32 + v26];
          ++v26;
          ++v30;
          v29 = (const double *)((char *)v29 + v28);
        }
        while (v26 != v23);
      }
    }
  }
  else
  {
    if (a5 != 1.0)
      kaldi::MatrixBase<double>::Scale(a1, a5);
    v11 = *(int *)(a2 + 16);
    v12 = *(const double **)a2;
    v13 = *(double **)a1;
    v14 = *(_DWORD *)(a1 + 12);
    v15 = *(int *)(a1 + 16);
    if (a3 == 111)
    {
      v16 = *(_DWORD *)(a2 + 12);
      if (v16 != v14 || *(_DWORD *)(a2 + 8) != *(_DWORD *)(a1 + 8))
        kaldi::KaldiAssertFailure_((kaldi *)"AddMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x1EE, "A.num_rows_ == num_rows_ && A.num_cols_ == num_cols_", a7);
      if (v16 >= 1)
      {
        v17 = 0;
        v18 = 8 * v15;
        v19 = 8 * v11;
        do
        {
          cblas_daxpy(*(_DWORD *)(a1 + 8), a4, v12, 1, v13, 1);
          ++v17;
          v13 = (double *)((char *)v13 + v18);
          v12 = (const double *)((char *)v12 + v19);
        }
        while (v17 < *(_DWORD *)(a1 + 12));
      }
    }
    else
    {
      v20 = *(_DWORD *)(a2 + 8);
      if (v20 != v14 || *(_DWORD *)(a2 + 12) != *(_DWORD *)(a1 + 8))
        kaldi::KaldiAssertFailure_((kaldi *)"AddMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x1F5, "A.num_cols_ == num_rows_ && A.num_rows_ == num_cols_", a7);
      if (v20 >= 1)
      {
        v21 = 0;
        v22 = 8 * v15;
        do
        {
          cblas_daxpy(*(_DWORD *)(a1 + 8), a4, v12, v11, v13, 1);
          ++v21;
          ++v12;
          v13 = (double *)((char *)v13 + v22);
        }
        while (v21 < *(_DWORD *)(a1 + 12));
      }
    }
  }
}

void kaldi::WarnOnZeros<double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;

  if (kaldi::MatrixBase<double>::IsZero(a1, 0.0, a2, a3, a4, a5))
  {
    if (kaldi::g_kaldi_verbose_level < -1)
      return;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12, "WarnOnZeros", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1652);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"The matrix is entirely 0. If this is unexpected, ", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"this could be a sign of data corruption.", 40);
    goto LABEL_11;
  }
  if (*(int *)(a1 + 12) >= 1)
  {
    v7 = 0;
    while (1)
    {
      v8 = *(_QWORD *)a1 + 8 * *(_DWORD *)(a1 + 16) * v7;
      v9 = *(_DWORD *)(a1 + 8);
      v14 = 0;
      v15 = 0;
      v12 = v8;
      v13 = v9;
      if (kaldi::VectorBase<double>::IsZero((uint64_t)&v12, 0.0))
        break;
      if (++v7 >= *(_DWORD *)(a1 + 12))
        return;
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12, "WarnOnZeros", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1658);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Row ", 4);
      v10 = (_QWORD *)std::ostream::operator<<();
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" of the matrix is entirely 0. If this is ", 41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"unexpected, this could be a sign of data corruption.", 52);
LABEL_11:
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
    }
  }
}

void sub_1DE407EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<double>::push_back[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_QWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v12);
      v8 = *(_QWORD **)a1;
      v6 = *(_QWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v7 = v14 + 8;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

uint64_t kaldi::Matrix<double>::Init(uint64_t result, int a2, int a3, int a4, const char *a5)
{
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  std::bad_alloc *exception;
  std::bad_alloc *v12;
  void *memptr;

  v7 = result;
  if (a3 * a2)
  {
    if (a2 < 1 || a3 <= 0)
      kaldi::KaldiAssertFailure_((kaldi *)"Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x30E, "rows > 0 && cols > 0", a5);
    memptr = 0;
    v8 = a3 & 1;
    if (a4)
      v8 = 0;
    v9 = v8 + a3;
    result = malloc_type_posix_memalign(&memptr, 0x10uLL, 8 * a2 * (unint64_t)(v8 + a3), 0xC333CEFEuLL);
    if ((_DWORD)result)
      v10 = 1;
    else
      v10 = memptr == 0;
    if (v10)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v12 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v12, MEMORY[0x1E0DE4EA8], MEMORY[0x1E0DE4DC0]);
    }
    *(_QWORD *)v7 = memptr;
    *(_BYTE *)(v7 + 32) = 0;
    *(_DWORD *)(v7 + 8) = a3;
    *(_DWORD *)(v7 + 12) = a2;
    *(_DWORD *)(v7 + 16) = v9;
    *(_DWORD *)(v7 + 20) = v9 * a2;
  }
  else
  {
    if (a3 | a2)
      kaldi::KaldiAssertFailure_((kaldi *)"Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x305, "rows == 0 && cols == 0", a5);
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = 0;
  }
  return result;
}

float kaldi::MatrixBase<float>::operator()(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 12) <= a2 || *(_DWORD *)(a1 + 8) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xDA, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", a5);
  return *(float *)(*(_QWORD *)a1 + 4 * (int)(*(_DWORD *)(a1 + 16) * a2) + 4 * (int)a3);
}

uint64_t kaldi::MatrixBase<float>::Set(uint64_t result, float a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  int v6;
  uint64_t v8;
  signed int v9;
  int v10;
  signed int i;

  v6 = *(_DWORD *)(result + 12);
  if (v6 >= 1)
  {
    v8 = result;
    v9 = 0;
    v10 = *(_DWORD *)(result + 8);
    do
    {
      if (v10 >= 1)
      {
        for (i = 0; i < v10; ++i)
        {
          result = kaldi::MatrixBase<float>::operator()(v8, v9, i, a5, a6);
          *(float *)result = a2;
          v10 = *(_DWORD *)(v8 + 8);
        }
        v6 = *(_DWORD *)(v8 + 12);
      }
      ++v9;
    }
    while (v9 < v6);
  }
  return result;
}

void kaldi::MatrixBase<float>::SetRandn(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  unsigned int v11;

  v11 = kaldi::Rand(0);
  v2 = *(_DWORD *)(a1 + 12);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a1 + 8);
    do
    {
      if (v4 >= 1)
      {
        v5 = 0;
        v6 = *(_QWORD *)a1 + 4 * *(_DWORD *)(a1 + 16) * v3;
        do
        {
          v7 = ((double)(int)kaldi::Rand(&v11) + 1.0) / 2147483650.0;
          v8 = sqrtf(logf(v7) * -2.0);
          v9 = ((double)(int)kaldi::Rand(&v11) + 1.0) / 2147483650.0;
          v10 = v9 * 6.28318531;
          *(float *)(v6 + 4 * v5) = v8 * cosf(v10);
          v4 = *(_DWORD *)(a1 + 8);
          ++v5;
        }
        while ((int)v5 < v4);
        v2 = *(_DWORD *)(a1 + 12);
      }
      ++v3;
    }
    while (v3 < v2);
  }
}

void **kaldi::MatrixBase<float>::CopyRowsFromVec(void **result, char **a2)
{
  void **v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[34];

  v2 = result;
  v3 = *((_DWORD *)a2 + 2);
  v4 = *((int *)result + 2);
  v5 = *((_DWORD *)result + 3);
  if (v3 == (_DWORD)v4 * v5)
  {
    v6 = *((int *)result + 4);
    if ((_DWORD)v6 == (_DWORD)v4)
    {
      return (void **)memcpy(*result, *a2, 4 * v5 * (uint64_t)(int)v4);
    }
    else
    {
      v9 = *((unsigned int *)result + 3);
      if ((int)v9 >= 1)
      {
        v10 = 0;
        v11 = *a2;
        v12 = (char *)*result;
        v13 = 4 * v6;
        do
        {
          if ((int)v4 >= 1)
          {
            v14 = 0;
            do
            {
              *(_DWORD *)&v12[v14] = *(_DWORD *)&v11[v14];
              v14 += 4;
            }
            while (4 * v4 != v14);
          }
          ++v10;
          v12 += v13;
          v11 += 4 * v4;
        }
        while (v10 != v9);
      }
    }
  }
  else
  {
    if (v3 != (_DWORD)v4)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15, "CopyRowsFromVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1054);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "Wrong sized arguments");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
    }
    if (v5 >= 1)
    {
      v7 = 0;
      v8 = *a2;
      do
        result = (void **)memcpy((char *)*v2 + 4 * *((_DWORD *)v2 + 4) * v7++, v8, 4 * *((int *)v2 + 2));
      while (v7 < *((_DWORD *)v2 + 3));
    }
  }
  return result;
}

float *kaldi::MatrixBase<float>::ConcatenateVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  float v12;
  float *result;
  uint64_t v14;
  const char *v15;
  float v16;
  int v17;
  signed int v18;
  int v19;
  signed int i;
  unsigned int v21;
  float v22;
  uint64_t v23;
  const char *v24;
  float v25;
  uint64_t v26;
  const char *v27;

  if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(a3 + 12))
    kaldi::KaldiAssertFailure_((kaldi *)"ConcatenateVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x480, "num_rows_ == index.NumRows()", a5);
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8) * *(_DWORD *)(a3 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"ConcatenateVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x481, "num_cols_ == index.NumCols() * vec_table.NumCols()", a5);
  kaldi::MatrixBase<float>::Min(a3, a2, a3, a4, a5);
  if (v12 < 0.0)
    kaldi::KaldiAssertFailure_((kaldi *)"ConcatenateVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x482, "index.Min() >= 0", v11);
  result = (float *)kaldi::MatrixBase<float>::Max(a3, v8, v9, v10, v11);
  if (v16 >= (float)*(int *)(a2 + 12))
    kaldi::KaldiAssertFailure_((kaldi *)"ConcatenateVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x483, "index.Max() < vec_table.NumRows()", v15);
  v17 = *(_DWORD *)(a1 + 12);
  if (v17 >= 1)
  {
    v18 = 0;
    v19 = *(_DWORD *)(a1 + 8);
    do
    {
      if (v19 >= 1)
      {
        for (i = 0; i < v19; ++i)
        {
          v21 = i / *(_DWORD *)(a2 + 8);
          v22 = kaldi::MatrixBase<float>::operator()(a3, v18, v21, v14, v15);
          v25 = kaldi::MatrixBase<float>::operator()(a2, (int)v22, i - *(_DWORD *)(a2 + 8) * v21, v23, v24);
          result = (float *)kaldi::MatrixBase<float>::operator()(a1, v18, i, v26, v27);
          *result = v25;
          v19 = *(_DWORD *)(a1 + 8);
        }
        v17 = *(_DWORD *)(a1 + 12);
      }
      ++v18;
    }
    while (v18 < v17);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::Min(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  int v6;
  float *v7;
  float v8;
  uint64_t v9;
  float *v10;
  float v11;
  float v12;

  v5 = *(_DWORD *)(result + 12);
  if (v5 < 1 || *(int *)(result + 8) <= 0)
    kaldi::KaldiAssertFailure_((kaldi *)"Min", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x7E7, "num_rows_ > 0 && num_cols_ > 0", a5);
  v6 = 0;
  v7 = *(float **)result;
  v8 = **(float **)result;
  do
  {
    v9 = *(unsigned int *)(result + 8);
    v10 = v7;
    do
    {
      v11 = *v10++;
      v12 = v11;
      if (v11 < v8)
        v8 = v12;
      --v9;
    }
    while (v9);
    ++v6;
    v7 += *(int *)(result + 16);
  }
  while (v6 != v5);
  return result;
}

uint64_t kaldi::MatrixBase<float>::Max(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  int v6;
  float *v7;
  float v8;
  uint64_t v9;
  float *v10;
  float v11;
  float v12;

  v5 = *(_DWORD *)(result + 12);
  if (v5 < 1 || *(int *)(result + 8) <= 0)
    kaldi::KaldiAssertFailure_((kaldi *)"Max", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x7DC, "num_rows_ > 0 && num_cols_ > 0", a5);
  v6 = 0;
  v7 = *(float **)result;
  v8 = **(float **)result;
  do
  {
    v9 = *(unsigned int *)(result + 8);
    v10 = v7;
    do
    {
      v11 = *v10++;
      v12 = v11;
      if (v11 > v8)
        v8 = v12;
      --v9;
    }
    while (v9);
    ++v6;
    v7 += *(int *)(result + 16);
  }
  while (v6 != v5);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  float *v14;
  float v15;
  float v16;

  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5 != *(_DWORD *)(result + 12) || (v6 = *(unsigned int *)(a2 + 8), (_DWORD)v6 != *(_DWORD *)(result + 8)))
    kaldi::KaldiAssertFailure_((kaldi *)"Max", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x51E, "A.NumRows() == NumRows() && A.NumCols() == NumCols()", a5);
  if ((int)v5 >= 1)
  {
    v7 = 0;
    v8 = *(float **)result;
    v9 = *(float **)a2;
    v10 = 4 * *(int *)(a2 + 16);
    v11 = 4 * *(int *)(result + 16);
    do
    {
      v12 = v6;
      v13 = v8;
      v14 = v9;
      if ((int)v6 >= 1)
      {
        do
        {
          v15 = *v14++;
          v16 = v15;
          if (*v13 >= v15)
            v16 = *v13;
          *v13++ = v16;
          --v12;
        }
        while (v12);
      }
      ++v7;
      v9 = (float *)((char *)v9 + v10);
      v8 = (float *)((char *)v8 + v11);
    }
    while (v7 != v5);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::ConcatenateVec(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  float v13;
  uint64_t result;
  const char *v15;
  float v16;
  uint64_t v17;
  int v18;
  int v19;
  signed int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  double v27;
  uint64_t v28;
  const char *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(a3 + 12))
    kaldi::KaldiAssertFailure_((kaldi *)"ConcatenateVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x490, "num_rows_ == index.NumRows()", a5);
  v8 = *a2;
  if (*a2)
    LODWORD(v8) = *(_DWORD *)(v8 + 12);
  if (*(_DWORD *)(a1 + 8) != (_DWORD)v8 * *(_DWORD *)(a3 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"ConcatenateVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x491, "num_cols_ == index.NumCols() * vec_table.NumCols()", a5);
  kaldi::MatrixBase<float>::Min(a3, (uint64_t)a2, a3, a4, a5);
  if (v13 < 0.0)
    kaldi::KaldiAssertFailure_((kaldi *)"ConcatenateVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x492, "index.Min() >= 0", v12);
  result = kaldi::MatrixBase<float>::Max(a3, v9, v10, v11, v12);
  v17 = *a2;
  if (*a2)
  {
    if (v16 < (float)*(int *)(v17 + 8))
    {
      v18 = *(_DWORD *)(v17 + 12);
      goto LABEL_11;
    }
LABEL_24:
    kaldi::KaldiAssertFailure_((kaldi *)"ConcatenateVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x493, "index.Max() < vec_table.NumRows()", v15);
  }
  if (v16 >= 0.0)
    goto LABEL_24;
  v18 = 0;
LABEL_11:
  v19 = *(_DWORD *)(a3 + 12);
  if (v19 >= 1)
  {
    v20 = 0;
    LODWORD(v21) = *(_DWORD *)(a3 + 8);
    do
    {
      if ((int)v21 >= 1)
      {
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          kaldi::MatrixBase<float>::Row(a1, v20, v15, &v35);
          v37 = 0;
          v38 = 0;
          v39 = 0;
          v22 += v18;
          if (v22 > v36)
            kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v26);
          v37 = v35 + v23;
          LODWORD(v38) = v18;
          *(float *)&v27 = kaldi::MatrixBase<float>::operator()(a3, v20, v24, v25, v26);
          result = (uint64_t)kaldi::CompressedMatrix::CopyRowToVec<float>(a2, (int)*(float *)&v27, (uint64_t)&v37, v27, v30, v31, v32, v33, v34, v28, v29);
          v21 = *(int *)(a3 + 8);
          v23 += 4 * v18;
          ++v24;
        }
        while (v24 < v21);
        v19 = *(_DWORD *)(a3 + 12);
      }
      ++v20;
    }
    while (v20 < v19);
  }
  return result;
}

void kaldi::MatrixBase<float>::SummarizeVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  signed int v9;
  signed int v10;
  int v11;
  signed int i;
  signed int v13;
  signed int v14;
  float v15;
  uint64_t v16;
  const char *v17;
  float *v18;
  _QWORD v19[34];

  v5 = *(_DWORD *)(a1 + 12);
  if (v5 != *(_DWORD *)(a3 + 12))
    kaldi::KaldiAssertFailure_((kaldi *)"SummarizeVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x4A1, "num_rows_ == index.NumRows()", a5);
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SummarizeVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x4A2, "num_cols_ == vec_table.NumCols()", a5);
  if (v5 >= 1)
  {
    v9 = 0;
    v10 = *(_DWORD *)(a2 + 12);
    v11 = *(_DWORD *)(a3 + 8);
    do
    {
      if (v11 >= 1)
      {
        for (i = 0; i < v11; ++i)
        {
          v13 = (int)kaldi::MatrixBase<float>::operator()(a3, v9, i, a4, a5);
          if ((v13 & 0x80000000) == 0)
          {
            if (v10 <= v13)
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "SummarizeVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1195);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"index item is bigger than the voc size ", 39);
              std::ostream::operator<<();
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
            }
            if (*(int *)(a1 + 8) >= 1)
            {
              v14 = 0;
              do
              {
                v15 = kaldi::MatrixBase<float>::operator()(a2, v13, v14, a4, a5);
                v18 = (float *)kaldi::MatrixBase<float>::operator()(a1, v9, v14, v16, v17);
                *v18 = v15 + *v18;
                ++v14;
              }
              while (v14 < *(_DWORD *)(a1 + 8));
            }
          }
          v11 = *(_DWORD *)(a3 + 8);
        }
        v5 = *(_DWORD *)(a1 + 12);
      }
      ++v9;
    }
    while (v9 < v5);
  }
}

void sub_1DE408B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void kaldi::MatrixBase<float>::SummarizeVec(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  int v9;
  uint64_t v10;
  signed int v11;
  signed int v12;
  int v13;
  signed int i;
  signed int v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;
  float v28;
  float *v29;
  float *v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *(_DWORD *)(a1 + 12);
  if (v5 != *(_DWORD *)(a3 + 12))
    kaldi::KaldiAssertFailure_((kaldi *)"SummarizeVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x4B5, "num_rows_ == index.NumRows()", a5);
  v9 = *(_DWORD *)(a1 + 8);
  v10 = *a2;
  if (*a2)
  {
    if (v9 == *(_DWORD *)(v10 + 12))
    {
      v11 = *(_DWORD *)(v10 + 8);
      goto LABEL_7;
    }
LABEL_25:
    kaldi::KaldiAssertFailure_((kaldi *)"SummarizeVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x4B6, "num_cols_ == vec_table.NumCols()", a5);
  }
  if (v9)
    goto LABEL_25;
  v11 = 0;
LABEL_7:
  if (v5 >= 1)
  {
    v12 = 0;
    v13 = *(_DWORD *)(a3 + 8);
    do
    {
      if (v13 >= 1)
      {
        for (i = 0; i < v13; ++i)
        {
          v15 = (int)kaldi::MatrixBase<float>::operator()(a3, v12, i, a4, a5);
          if ((v15 & 0x80000000) == 0)
          {
            if (v11 <= v15)
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v30, "SummarizeVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1215);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"index item is bigger than the voc size ", 39);
              std::ostream::operator<<();
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v30);
            }
            v16 = *(unsigned int *)(a1 + 8);
            v31 = 0;
            v32 = 0;
            v30 = 0;
            kaldi::Vector<float>::Resize((void **)&v30, v16, 0, a4, a5);
            kaldi::CompressedMatrix::CopyRowToVec<float>(a2, v15, (uint64_t)&v30, v19, v20, v21, v22, v23, v24, v17, v18);
            if (*(int *)(a1 + 8) >= 1)
            {
              v27 = 0;
              do
              {
                if (v27 >= v31)
                  kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v26);
                v28 = v30[v27];
                v29 = (float *)kaldi::MatrixBase<float>::operator()(a1, v12, v27, v25, v26);
                *v29 = v28 + *v29;
                ++v27;
              }
              while ((uint64_t)v27 < *(int *)(a1 + 8));
            }
            kaldi::Vector<float>::Destroy((uint64_t)&v30);
          }
          v13 = *(_DWORD *)(a3 + 8);
        }
        v5 = *(_DWORD *)(a1 + 12);
      }
      ++v12;
    }
    while (v12 < v5);
  }
}

void sub_1DE408D6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void sub_1DE408D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::Vector<float>::Destroy((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::MatrixBase<float>::CountZeros(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  signed int v7;
  uint64_t v8;
  int v9;
  signed int i;

  v5 = *(_DWORD *)(a1 + 12);
  if (v5 < 1)
    return 0;
  v7 = 0;
  v8 = 0;
  v9 = *(_DWORD *)(a1 + 8);
  do
  {
    if (v9 >= 1)
    {
      for (i = 0; i < v9; ++i)
      {
        if (kaldi::MatrixBase<float>::operator()(a1, v7, i, a4, a5) == 0.0)
          v8 = (v8 + 1);
        else
          v8 = v8;
        v9 = *(_DWORD *)(a1 + 8);
      }
      v5 = *(_DWORD *)(a1 + 12);
    }
    ++v7;
  }
  while (v7 < v5);
  return v8;
}

float kaldi::MatrixBase<float>::AbsMax(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6;
  float *v7;
  float v8;
  int v9;
  int v10;
  float v11;

  if (*(int *)(a1 + 12) < 1 || *(int *)(a1 + 8) <= 0)
    kaldi::KaldiAssertFailure_((kaldi *)"AbsMax", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x7F2, "num_rows_ > 0 && num_cols_ > 0", a5);
  v6 = 0;
  v7 = *(float **)a1;
  v8 = **(float **)a1;
  v9 = *(_DWORD *)(a1 + 16);
  do
  {
    v10 = cblas_isamax(*(_DWORD *)(a1 + 8), &v7[v9 * v6], 1);
    v7 = *(float **)a1;
    v9 = *(_DWORD *)(a1 + 16);
    v11 = fabsf(*(float *)(*(_QWORD *)a1 + 4 * (v10 + v9 * v6)));
    if (v11 > v8)
      v8 = v11;
    ++v6;
  }
  while (v6 < *(_DWORD *)(a1 + 12));
  return v8;
}

float32_t kaldi::MatrixBase<float>::MulElements(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v10;
  uint64_t v11;
  float32x4_t *v12;
  float32x4_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t i;
  float32x4_t v19;
  uint64_t v20;
  unint64_t v21;
  float32x4_t *v22;
  float32x4_t *v23;
  int v24;
  unint64_t v25;
  float32x4_t *v26;
  float32x4_t *v27;
  float32x4_t v28;
  float *v29;
  float *v30;
  float v31;

  v5 = *(_DWORD *)(a2 + 12);
  if (v5 != *(_DWORD *)(a1 + 12) || (v6 = *(unsigned int *)(a2 + 8), (_DWORD)v6 != *(_DWORD *)(a1 + 8)))
    kaldi::KaldiAssertFailure_((kaldi *)"MulElements", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x4E9, "a.NumRows() == num_rows_ && a.NumCols() == num_cols_", a5);
  v7 = *(int *)(a1 + 16);
  v8 = *(_DWORD *)(a2 + 16);
  if ((_DWORD)v6 == (_DWORD)v7 && (_DWORD)v6 == v8)
  {
    v21 = (v6 * v5);
    v22 = *(float32x4_t **)a2;
    v23 = *(float32x4_t **)a1;
    if ((int)v21 >= 4)
    {
      v25 = 4;
      v26 = *(float32x4_t **)a2;
      v27 = *(float32x4_t **)a1;
      do
      {
        v28 = *v26++;
        v19 = vmulq_f32(v28, *v27);
        *v27++ = v19;
        v25 += 4;
      }
      while (v25 <= v21);
      v24 = v21 & 0x7FFFFFFC;
    }
    else
    {
      v24 = 0;
    }
    if (v24 < (int)v21)
    {
      v29 = &v23->f32[v24];
      v30 = &v22->f32[v24];
      do
      {
        v31 = *v30++;
        v19.f32[0] = v31 * *v29;
        *v29++ = v19.f32[0];
        ++v24;
      }
      while ((int)v21 > v24);
    }
  }
  else if (v5 >= 1)
  {
    v10 = 0;
    v11 = v8;
    v12 = *(float32x4_t **)a2;
    v13 = *(float32x4_t **)a1;
    v14 = 4 * v7;
    v15 = 4 * v11;
    do
    {
      if ((int)v6 >= 4)
      {
        v17 = 0;
        for (i = 4; i <= v6; i += 4)
        {
          v19 = vmulq_f32(v12[v17], v13[v17]);
          v13[v17++] = v19;
        }
        v16 = v6 & 0x7FFFFFFC;
      }
      else
      {
        v16 = 0;
      }
      if (v16 < (int)v6)
      {
        v20 = v16;
        do
        {
          v19.f32[0] = v12->f32[v20] * v13->f32[v20];
          v13->i32[v20] = v19.i32[0];
          ++v16;
          ++v20;
        }
        while ((int)v6 > v16);
      }
      ++v10;
      v13 = (float32x4_t *)((char *)v13 + v14);
      v12 = (float32x4_t *)((char *)v12 + v15);
    }
    while (v10 != v5);
  }
  return v19.f32[0];
}

uint64_t kaldi::MatrixBase<float>::DivElements(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  uint64_t v7;
  int v8;
  signed int i;
  signed int j;
  float v11;
  uint64_t v12;
  const char *v13;

  v5 = *(_DWORD *)(a2 + 12);
  if (v5 != *(_DWORD *)(result + 12) || (v7 = result, v8 = *(_DWORD *)(a2 + 8), v8 != *(_DWORD *)(result + 8)))
    kaldi::KaldiAssertFailure_((kaldi *)"DivElements", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x4FA, "a.NumRows() == num_rows_ && a.NumCols() == num_cols_", a5);
  if (v5 >= 1)
  {
    for (i = 0; i < v5; ++i)
    {
      if (v8 >= 1)
      {
        for (j = 0; j < v8; ++j)
        {
          v11 = kaldi::MatrixBase<float>::operator()(a2, i, j, a4, a5);
          result = kaldi::MatrixBase<float>::operator()(v7, i, j, v12, v13);
          *(float *)result = *(float *)result / v11;
          v8 = *(_DWORD *)(v7 + 8);
        }
        v5 = *(_DWORD *)(v7 + 12);
      }
    }
  }
  return result;
}

void kaldi::MatrixBase<float>::Scale(uint64_t a1, float a2)
{
  int v4;
  int v5;
  int v6;
  float *v7;

  if (a2 != 1.0)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4)
    {
      v5 = *(_DWORD *)(a1 + 8);
      if (v5 == *(_DWORD *)(a1 + 16))
      {
        cblas_sscal(v5 * v4, a2, *(float **)a1, 1);
      }
      else if (v4 >= 1)
      {
        v6 = 0;
        v7 = *(float **)a1;
        do
        {
          cblas_sscal(*(_DWORD *)(a1 + 8), a2, v7, 1);
          ++v6;
          v7 += *(int *)(a1 + 16);
        }
        while (v6 < *(_DWORD *)(a1 + 12));
      }
    }
  }
}

uint64_t kaldi::MatrixBase<float>::MulColsVec(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int64_t v5;
  uint64_t v6;
  int v7;
  signed int i;
  unint64_t v10;
  float v11;

  LODWORD(v5) = *(_DWORD *)(a2 + 8);
  if ((_DWORD)v5 != *(_DWORD *)(result + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"MulColsVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x57B, "scale.Dim() == num_cols_", a5);
  v6 = result;
  v7 = *(_DWORD *)(result + 12);
  if (v7 >= 1)
  {
    for (i = 0; i < v7; ++i)
    {
      if ((int)v5 >= 1)
      {
        v10 = 0;
        do
        {
          if (v10 >= *(unsigned int *)(a2 + 8))
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x61, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
          v11 = *(float *)(*(_QWORD *)a2 + 4 * v10);
          result = kaldi::MatrixBase<float>::operator()(v6, i, v10, a4, a5);
          *(float *)result = v11 * *(float *)result;
          ++v10;
          v5 = *(int *)(v6 + 8);
        }
        while ((uint64_t)v10 < v5);
        v7 = *(_DWORD *)(v6 + 12);
      }
    }
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::MulRowsVec(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  float v11;

  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != *(_DWORD *)(result + 12))
    kaldi::KaldiAssertFailure_((kaldi *)"MulRowsVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x53B, "scale.Dim() == num_rows_", a5);
  if ((int)v5 >= 1)
  {
    v7 = result;
    v8 = 0;
    v9 = *(_DWORD *)(result + 8);
    do
    {
      if (v8 >= *(unsigned int *)(a2 + 8))
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x61, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
      if (v9 >= 1)
      {
        v10 = 0;
        v11 = *(float *)(*(_QWORD *)a2 + 4 * v8);
        do
        {
          result = kaldi::MatrixBase<float>::operator()(v7, v8, v10, a4, a5);
          *(float *)result = v11 * *(float *)result;
          ++v10;
        }
        while (v9 != v10);
      }
      ++v8;
    }
    while (v8 != v5);
  }
  return result;
}

void kaldi::MatrixBase<float>::MulRowsGroupMat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  float *v14;
  float v15;

  v5 = *(_DWORD *)(a2 + 12);
  if (v5 != *(_DWORD *)(a1 + 12) || (v8 = *(_DWORD *)(a1 + 8), v9 = *(_DWORD *)(a2 + 8), v10 = v8 / v9, v8 % v9))
    kaldi::KaldiAssertFailure_((kaldi *)"MulRowsGroupMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x54A, "src.NumRows() == this->NumRows() && this->NumCols() % src.NumCols() == 0", a5);
  if (v5 >= 1)
  {
    v11 = 0;
    v12 = v8 / v10;
    do
    {
      if (*(_DWORD *)(a1 + 12) <= v11)
        kaldi::KaldiAssertFailure_((kaldi *)"RowData", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xBC, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a5);
      if (v12 >= 1)
      {
        v13 = 0;
        v14 = (float *)(*(_QWORD *)a1 + 4 * (int)(*(_DWORD *)(a1 + 16) * v11));
        do
        {
          v15 = kaldi::MatrixBase<float>::operator()(a2, v11, v13, a4, a5);
          cblas_sscal(v10, v15, v14, 1);
          ++v13;
          v14 += v10;
        }
        while (v12 != v13);
      }
      ++v11;
    }
    while (v11 != v5);
  }
}

uint64_t kaldi::MatrixBase<float>::InvertElements(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  uint64_t v6;
  signed int v7;
  int v8;
  signed int i;
  float v10;
  uint64_t v11;
  const char *v12;

  v5 = *(_DWORD *)(result + 12);
  if (v5 >= 1)
  {
    v6 = result;
    v7 = 0;
    v8 = *(_DWORD *)(result + 8);
    do
    {
      if (v8 >= 1)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = 1.0 / *(float *)kaldi::MatrixBase<float>::operator()(v6, v7, i, a4, a5);
          result = kaldi::MatrixBase<float>::operator()(v6, v7, i, v11, v12);
          *(float *)result = v10;
          v8 = *(_DWORD *)(v6 + 8);
        }
        v5 = *(_DWORD *)(v6 + 12);
      }
      ++v7;
    }
    while (v7 < v5);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::CopyCols(uint64_t result, uint64_t *a2, unsigned int **a3, uint64_t a4, const char *a5)
{
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  int v15;
  uint64_t v16;
  uint64_t i;
  int v18;

  v5 = *(_DWORD *)(result + 12);
  if (v5 != *((_DWORD *)a2 + 3))
    kaldi::KaldiAssertFailure_((kaldi *)"CopyCols", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xC87, "NumRows() == src.NumRows()", a5);
  v6 = *(unsigned int *)(result + 8);
  v7 = *a3;
  v8 = a3[1];
  if ((_DWORD)v6 != ((unint64_t)((char *)v8 - (char *)*a3) >> 2))
    kaldi::KaldiAssertFailure_((kaldi *)"CopyCols", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xC88, "NumCols() == static_cast<MatrixIndexT>(indices.size())", a5);
  v9 = *(int *)(result + 16);
  v10 = *((int *)a2 + 4);
  v11 = *(_QWORD *)result;
  v12 = *a2;
  if (v7 != v8)
  {
    v13 = *a3;
    do
    {
      result = *v13;
      if ((int)result < -1 || (int)result >= *((_DWORD *)a2 + 2))
        kaldi::KaldiAssertFailure_((kaldi *)"CopyCols", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xC91, "*iter >= -1 && *iter < src_cols", a5);
      ++v13;
    }
    while (v13 != v8);
  }
  if (v5 >= 1)
  {
    v15 = 0;
    v16 = 4 * v9;
    do
    {
      if ((int)v6 >= 1)
      {
        for (i = 0; i != v6; ++i)
        {
          result = v7[i];
          if ((result & 0x80000000) != 0)
            v18 = 0;
          else
            v18 = *(_DWORD *)(v12 + 4 * result);
          *(_DWORD *)(v11 + i * 4) = v18;
        }
      }
      ++v15;
      v12 += 4 * v10;
      v11 += v16;
    }
    while (v15 != v5);
  }
  return result;
}

void kaldi::MatrixBase<float>::CopyRows(char **a1, uint64_t a2, _QWORD *a3, uint64_t a4, const char *a5)
{
  int v5;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  v5 = *((_DWORD *)a1 + 2);
  if (v5 != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"CopyRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xCA2, "NumCols() == src.NumCols()", a5);
  v8 = *((unsigned int *)a1 + 3);
  if ((_DWORD)v8 != ((a3[1] - *a3) >> 2))
    kaldi::KaldiAssertFailure_((kaldi *)"CopyRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xCA3, "NumRows() == static_cast<MatrixIndexT>(indices.size())", a5);
  if ((int)v8 >= 1)
  {
    v10 = 0;
    v11 = *a1;
    v12 = 4 * v8;
    v13 = 4 * *((int *)a1 + 4);
    do
    {
      v14 = *(_DWORD *)(*a3 + v10);
      if ((v14 & 0x80000000) != 0)
      {
        bzero(v11, 4 * *((int *)a1 + 2));
      }
      else
      {
        if (*(_DWORD *)(a2 + 12) <= v14)
          kaldi::KaldiAssertFailure_((kaldi *)"RowData", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xC3, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a5);
        cblas_scopy(v5, (const float *)(*(_QWORD *)a2 + 4 * (int)(*(_DWORD *)(a2 + 16) * v14)), 1, (float *)v11, 1);
      }
      v10 += 4;
      v11 += v13;
    }
    while (v12 != v10);
  }
}

uint64_t kaldi::MatrixBase<float>::CopyIndexedItems(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5, int a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;

  v6 = *(unsigned int *)(result + 12);
  if ((int)v6 >= 1)
  {
    v7 = 0;
    v8 = 0;
    v9 = *a2;
    v10 = *((_DWORD *)a2 + 4);
    v11 = v10 * *((_DWORD *)a2 + 3);
    v12 = *(unsigned int *)(result + 8);
    v13 = *(_DWORD **)result;
    v14 = *(_DWORD *)(result + 16) - (int)v12;
    v15 = *(_DWORD *)(result + 8);
    do
    {
      result = v12;
      v16 = v7;
      if (v15 >= 1)
      {
        do
        {
          v17 = *(_DWORD *)(a4 + 4 * (int)(v16 % (unint64_t)a5))
              + *(_DWORD *)(a3 + 4 * (int)(v16 % (unint64_t)a5)) * v10;
          v18 = v17 + v16 / (unint64_t)a5 * a6;
          if (v18 >= v11)
            kaldi::KaldiAssertFailure_((kaldi *)"CopyIndexedItems", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xCCA, "src_index + shift < max_index", a5);
          if (v17 < 0)
            v19 = 0;
          else
            v19 = *(_DWORD *)(v9 + 4 * v18);
          *v13++ = v19;
          ++v16;
          --result;
        }
        while (result);
      }
      ++v8;
      v13 += v14;
      v7 += (int)v12;
    }
    while (v8 != v6);
  }
  return result;
}

void kaldi::MatrixBase<float>::CopySelectedRows(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  int v5;
  uint64_t v7;
  unint64_t v10;
  float *v11;
  uint64_t v12;

  v5 = *(_DWORD *)(a1 + 8);
  if (v5 != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"CopySelectedRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xCD6, "NumCols() == src.NumCols()", a5);
  v7 = *(unsigned int *)(a3 + 8);
  if (*(_DWORD *)(a1 + 12) < (int)v7)
    kaldi::KaldiAssertFailure_((kaldi *)"CopySelectedRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xCD7, "NumRows() >= selection.Dim()", a5);
  if (*(_DWORD *)(a2 + 12) != (_DWORD)v7)
    kaldi::KaldiAssertFailure_((kaldi *)"CopySelectedRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xCD8, "src.NumRows() == selection.Dim()", a5);
  if ((int)v7 >= 1)
  {
    v10 = 0;
    v11 = *(float **)a1;
    v12 = 4 * *(int *)(a1 + 16);
    do
    {
      if (v10 >= *(unsigned int *)(a3 + 8))
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x61, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
      if (((int)*(float *)(*(_QWORD *)a3 + 4 * v10) == 1) != a4)
      {
        if (v10 >= *(unsigned int *)(a2 + 12))
          kaldi::KaldiAssertFailure_((kaldi *)"RowData", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xC3, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a5);
        cblas_scopy(v5, (const float *)(*(_QWORD *)a2 + 4 * *(_DWORD *)(a2 + 16) * (int)v10), 1, v11, 1);
      }
      ++v10;
      v11 = (float *)((char *)v11 + v12);
    }
    while (v7 != v10);
  }
}

uint64_t kaldi::MatrixBase<float>::ApplyFloor(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;

  v2 = *(unsigned int *)(a1 + 12);
  if ((int)v2 < 1)
    return 0;
  v4 = 0;
  result = 0;
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(float **)a1;
  v8 = 4 * *(int *)(a1 + 16);
  do
  {
    v9 = v6;
    v10 = v7;
    if ((int)v6 >= 1)
    {
      do
      {
        if (*v10 < a2)
        {
          *v10 = a2;
          result = (result + 1);
        }
        ++v10;
        --v9;
      }
      while (v9);
    }
    ++v4;
    v7 = (float *)((char *)v7 + v8);
  }
  while (v4 != v2);
  return result;
}

uint64_t kaldi::MatrixBase<float>::ApplyCeiling(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;

  v2 = *(unsigned int *)(a1 + 12);
  if ((int)v2 < 1)
    return 0;
  v4 = 0;
  result = 0;
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(float **)a1;
  v8 = 4 * *(int *)(a1 + 16);
  do
  {
    v9 = v6;
    v10 = v7;
    if ((int)v6 >= 1)
    {
      do
      {
        if (*v10 > a2)
        {
          *v10 = a2;
          result = (result + 1);
        }
        ++v10;
        --v9;
      }
      while (v9);
    }
    ++v4;
    v7 = (float *)((char *)v7 + v8);
  }
  while (v4 != v2);
  return result;
}

void kaldi::MatrixBase<float>::ApplyLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  signed int v6;
  uint64_t v7[3];

  if (*(int *)(a1 + 12) >= 1)
  {
    v6 = 0;
    do
    {
      kaldi::MatrixBase<float>::Row(a1, v6, a5, v7);
      kaldi::VectorBase<float>::ApplyLog((uint64_t)v7);
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 12));
  }
}

void kaldi::MatrixBase<float>::ApplyExp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  signed int v6;
  uint64_t v7[3];

  if (*(int *)(a1 + 12) >= 1)
  {
    v6 = 0;
    do
    {
      kaldi::MatrixBase<float>::Row(a1, v6, a5, v7);
      kaldi::VectorBase<float>::ApplyExp((uint64_t)v7);
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 12));
  }
}

void kaldi::MatrixBase<float>::ApplyPow(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  signed int v8;
  uint64_t v9[3];

  if (*(int *)(a1 + 12) >= 1)
  {
    v8 = 0;
    do
    {
      kaldi::MatrixBase<float>::Row(a1, v8, a6, v9);
      kaldi::VectorBase<float>::ApplyPow((uint64_t)v9, a2);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
}

uint64_t kaldi::MatrixBase<float>::ApplyHeaviside(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float v8;

  v1 = *(unsigned int *)(result + 12);
  if ((int)v1 >= 1)
  {
    v2 = 0;
    v3 = *(unsigned int *)(result + 8);
    v4 = *(float **)result;
    v5 = 4 * *(int *)(result + 16);
    do
    {
      v6 = v3;
      v7 = v4;
      if ((int)v3 >= 1)
      {
        do
        {
          if (*v7 <= 0.0)
            v8 = 0.0;
          else
            v8 = 1.0;
          *v7++ = v8;
          --v6;
        }
        while (v6);
      }
      ++v2;
      v4 = (float *)((char *)v4 + v5);
    }
    while (v2 != v1);
  }
  return result;
}

BOOL kaldi::MatrixBase<float>::IsZero(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  int v7;
  unsigned int v9;
  int v10;
  float v11;
  unsigned int i;
  float v13;

  v7 = *(_DWORD *)(a1 + 12);
  if (v7 < 1)
  {
    v11 = 0.0;
  }
  else
  {
    v9 = 0;
    v10 = *(_DWORD *)(a1 + 8);
    v11 = 0.0;
    do
    {
      if (v10 >= 1)
      {
        for (i = 0; i != v10; ++i)
        {
          v13 = fabsf(kaldi::MatrixBase<float>::operator()(a1, v9, i, a5, a6));
          if (v11 < v13)
            v11 = v13;
        }
      }
      ++v9;
    }
    while (v9 != v7);
  }
  return v11 <= a2;
}

uint64_t kaldi::MatrixBase<float>::Add(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;

  v2 = *(unsigned int *)(result + 12);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = *(float **)result;
    v5 = *(unsigned int *)(result + 8);
    v6 = 4 * *(int *)(result + 16);
    do
    {
      v7 = v5;
      v8 = v4;
      if ((int)v5 >= 1)
      {
        do
        {
          *v8 = *v8 + a2;
          ++v8;
          --v7;
        }
        while (v7);
      }
      ++v3;
      v4 = (float *)((char *)v4 + v6);
    }
    while (v3 != v2);
  }
  return result;
}

void kaldi::MatrixBase<float>::Sigmoid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  int v6;
  signed int v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  if (v5 != *(_DWORD *)(a2 + 12) || v6 != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"Sigmoid", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xD2D, "SameDim(*this, src)", a5);
  if (v6 == *(_DWORD *)(a1 + 16) && v6 == *(_DWORD *)(a2 + 16))
  {
    v17 = *(_QWORD *)a2;
    v21 = 0;
    v18[2] = 0;
    v19 = v17;
    v20 = (v6 * v5);
    v18[0] = *(_QWORD *)a1;
    v18[1] = v20;
    kaldi::VectorBase<float>::Sigmoid((uint64_t)v18, (uint64_t)&v19, a3, a4, a5);
  }
  else if (v5 >= 1)
  {
    v11 = 0;
    do
    {
      kaldi::SubVector<float>::SubVector(&v19, a2, v11, a4, a5);
      kaldi::SubVector<float>::SubVector(v18, a1, v11, v12, v13);
      kaldi::VectorBase<float>::Sigmoid((uint64_t)v18, (uint64_t)&v19, v14, v15, v16);
      ++v11;
    }
    while (v11 < *(_DWORD *)(a1 + 12));
  }
}

float *kaldi::MatrixBase<float>::GroupPnorm(float *result, uint64_t a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  int v6;
  signed int v7;
  int v8;
  int v10;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  float v21;
  uint64_t v22;
  const char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *(_DWORD *)(a2 + 8);
  v7 = *((_DWORD *)result + 2);
  v8 = v6 / v7;
  v25 = v7;
  if (v6 % v7 || (v10 = *(_DWORD *)(a2 + 12), v10 != *((_DWORD *)result + 3)))
    kaldi::KaldiAssertFailure_((kaldi *)"GroupPnorm", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xC7C, "src.NumCols() % this->NumCols() == 0 && src.NumRows() == this->NumRows()", a6);
  if (v10 >= 1)
  {
    v12 = (uint64_t)result;
    v13 = 0;
    v24 = *(_DWORD *)(a2 + 12);
    do
    {
      if ((int)v25 >= 1)
      {
        v14 = 0;
        v15 = 0;
        for (i = 0; i != v25; ++i)
        {
          kaldi::MatrixBase<float>::Row(a2, v13, a6, &v26);
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v14 += v8;
          if (v14 > v27)
            kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v20);
          v28 = v26 + v15;
          LODWORD(v29) = v8;
          v21 = kaldi::VectorBase<float>::Norm((uint64_t)&v28, a3, v17, v18, v19, v20);
          result = (float *)kaldi::MatrixBase<float>::operator()(v12, v13, i, v22, v23);
          *result = v21;
          v15 += 4 * v8;
        }
      }
      ++v13;
    }
    while (v13 != v24);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::GroupPnormDeriv(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  int v6;
  uint64_t v8;
  int v9;
  int v11;
  int v12;
  BOOL v13;
  unsigned int i;
  unsigned int j;
  uint64_t v16;
  const char *v17;
  float v18;
  BOOL v19;
  float v20;
  float v21;
  unsigned int v22;
  float v23;
  float v24;
  signed int k;
  float v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;

  v6 = *(_DWORD *)(a2 + 8);
  if (v6 != *(_DWORD *)(result + 8) || (v8 = result, v9 = *(_DWORD *)(a2 + 12), v9 != *(_DWORD *)(result + 12)))
    kaldi::KaldiAssertFailure_((kaldi *)"GroupPnormDeriv", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x55C, "input.NumCols() == this->NumCols() && input.NumRows() == this->NumRows()", a5);
  v11 = *(_DWORD *)(a3 + 8);
  v12 = v6 / v11;
  if (v6 % v11)
    v13 = 0;
  else
    v13 = v9 == *(_DWORD *)(a3 + 12);
  if (!v13)
    kaldi::KaldiAssertFailure_((kaldi *)"GroupPnormDeriv", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x55E, "this->NumCols() % output.NumCols() == 0 && this->NumRows() == output.NumRows()", a5);
  if (a6 == 1.0)
  {
    if (v9 >= 1)
    {
      for (i = 0; i != v9; ++i)
      {
        if (v6 >= 1)
        {
          for (j = 0; j != v6; ++j)
          {
            v18 = kaldi::MatrixBase<float>::operator()(a2, i, j, a4, a5);
            v19 = v18 == 0.0;
            if (v18 <= 0.0)
              v20 = -1.0;
            else
              v20 = 1.0;
            if (v19)
              v21 = 0.0;
            else
              v21 = v20;
            result = kaldi::MatrixBase<float>::operator()(v8, i, j, v16, v17);
            *(float *)result = v21;
          }
        }
      }
    }
  }
  else if (v9 >= 1)
  {
    v22 = 0;
    v23 = a6 + -1.0;
    v24 = 1.0 - a6;
    do
    {
      if (v6 >= 1)
      {
        for (k = 0; k != v6; ++k)
        {
          v26 = kaldi::MatrixBase<float>::operator()(a3, v22, k / v12, a4, a5);
          v31 = kaldi::MatrixBase<float>::operator()(a2, v22, k, v27, v28);
          v32 = 0.0;
          if (v26 != 0.0)
          {
            v33 = v31;
            v34 = powf(fabsf(v31), v23);
            v35 = powf(v26, v24) * v34;
            if (v33 < 0.0)
              v32 = -v35;
            else
              v32 = v35;
          }
          result = kaldi::MatrixBase<float>::operator()(v8, v22, k, v29, v30);
          *(float *)result = v32;
        }
      }
      ++v22;
    }
    while (v22 != v9);
  }
  return result;
}

void kaldi::MatrixBase<float>::Tanh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  int v6;
  signed int v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  if (v5 != *(_DWORD *)(a2 + 12) || v6 != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"Tanh", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xC53, "SameDim(*this, src)", a5);
  if (v6 == *(_DWORD *)(a1 + 16) && v6 == *(_DWORD *)(a2 + 16))
  {
    v17 = *(_QWORD *)a2;
    v21 = 0;
    v18[2] = 0;
    v19 = v17;
    v20 = (v6 * v5);
    v18[0] = *(_QWORD *)a1;
    v18[1] = v20;
    kaldi::VectorBase<float>::Tanh((uint64_t)v18, (uint64_t)&v19, a3, a4, a5);
  }
  else if (v5 >= 1)
  {
    v11 = 0;
    do
    {
      kaldi::SubVector<float>::SubVector(&v19, a2, v11, a4, a5);
      kaldi::SubVector<float>::SubVector(v18, a1, v11, v12, v13);
      kaldi::VectorBase<float>::Tanh((uint64_t)v18, (uint64_t)&v19, v14, v15, v16);
      ++v11;
    }
    while (v11 < *(_DWORD *)(a1 + 12));
  }
}

void kaldi::MatrixBase<float>::ApplyTanh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  signed int v6;
  uint64_t v7[3];

  if (*(int *)(a1 + 12) >= 1)
  {
    v6 = 0;
    do
    {
      kaldi::MatrixBase<float>::Row(a1, v6, a5, v7);
      kaldi::VectorBase<float>::ApplyTanh((uint64_t)v7);
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 12));
  }
}

uint64_t *kaldi::MatrixBase<float>::DiffSigmoid(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4, const char *a5)
{
  int v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;

  v6 = *((unsigned int *)result + 2);
  v5 = *((_DWORD *)result + 3);
  v7 = v5 == *((_DWORD *)a2 + 3) && (_DWORD)v6 == *((_DWORD *)a2 + 2);
  if (!v7 || (v5 == *((_DWORD *)a3 + 3) ? (v8 = (_DWORD)v6 == *((_DWORD *)a3 + 2)) : (v8 = 0), !v8))
    kaldi::KaldiAssertFailure_((kaldi *)"DiffSigmoid", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xD3E, "SameDim(*this, value) && SameDim(*this, diff)", a5);
  if (v5 >= 1)
  {
    v9 = 0;
    v10 = *a3;
    v11 = *a2;
    v12 = *result;
    v13 = 4 * *((int *)result + 4);
    v14 = 4 * *((int *)a2 + 4);
    v15 = 4 * *((int *)a3 + 4);
    do
    {
      if ((int)v6 >= 1)
      {
        result = 0;
        do
        {
          v16 = (1.0 - *(float *)((char *)result + v11))
              * (float)(*(float *)((char *)result + v10) * *(float *)((char *)result + v11));
          *(float *)((char *)result + v12) = v16;
          result = (uint64_t *)((char *)result + 4);
        }
        while ((uint64_t *)(4 * v6) != result);
      }
      ++v9;
      v12 += v13;
      v11 += v14;
      v10 += v15;
    }
    while (v9 != v5);
  }
  return result;
}

uint64_t *kaldi::MatrixBase<float>::DiffTanh(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4, const char *a5)
{
  int v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;

  v6 = *((unsigned int *)result + 2);
  v5 = *((_DWORD *)result + 3);
  v7 = v5 == *((_DWORD *)a2 + 3) && (_DWORD)v6 == *((_DWORD *)a2 + 2);
  if (!v7 || (v5 == *((_DWORD *)a3 + 3) ? (v8 = (_DWORD)v6 == *((_DWORD *)a3 + 2)) : (v8 = 0), !v8))
    kaldi::KaldiAssertFailure_((kaldi *)"DiffTanh", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xD4F, "SameDim(*this, value) && SameDim(*this, diff)", a5);
  if (v5 >= 1)
  {
    v9 = 0;
    v10 = *a3;
    v11 = *a2;
    v12 = *result;
    v13 = 4 * *((int *)result + 4);
    v14 = 4 * *((int *)a2 + 4);
    v15 = 4 * *((int *)a3 + 4);
    do
    {
      if ((int)v6 >= 1)
      {
        result = 0;
        do
        {
          v16 = (1.0 - (float)(*(float *)((char *)result + v11) * *(float *)((char *)result + v11)))
              * *(float *)((char *)result + v10);
          *(float *)((char *)result + v12) = v16;
          result = (uint64_t *)((char *)result + 4);
        }
        while ((uint64_t *)(4 * v6) != result);
      }
      ++v9;
      v12 += v13;
      v11 += v14;
      v10 += v15;
    }
    while (v9 != v5);
  }
  return result;
}

_DWORD *kaldi::MatrixBase<float>::MaxoutForward(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  int v10;
  signed int i;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  int v16;
  int v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(a2 + 8);
  LODWORD(v6) = result[2];
  v7 = v5 / (int)v6;
  if (v5 % (int)v6 || (v9 = (uint64_t)result, v10 = *(_DWORD *)(a2 + 12), v10 != result[3]))
    kaldi::KaldiAssertFailure_((kaldi *)"MaxoutForward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xD94, "input.NumCols() % this->NumCols() == 0 && input.NumRows() == this->NumRows()", a5);
  if (v10 >= 1)
  {
    for (i = 0; i < v10; ++i)
    {
      if ((int)v6 >= 1)
      {
        v12 = 0;
        v13 = 0;
        v14 = 0;
        do
        {
          kaldi::MatrixBase<float>::Row(a2, i, a5, &v20);
          v22 = 0;
          v23 = 0;
          v24 = 0;
          v12 += v7;
          if (v12 > v21)
            kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v15);
          v22 = v20 + v13;
          LODWORD(v23) = v7;
          kaldi::VectorBase<float>::Max(&v22);
          v17 = v16;
          result = (_DWORD *)kaldi::MatrixBase<float>::operator()(v9, i, v14, v18, v19);
          *result = v17;
          v6 = *(int *)(v9 + 8);
          v13 += 4 * v7;
          ++v14;
        }
        while (v14 < v6);
        v10 = *(_DWORD *)(v9 + 12);
      }
    }
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::MaxoutDerivative(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  uint64_t v7;
  int v8;
  signed int v10;
  int v11;
  signed int i;
  float v13;
  uint64_t v14;
  const char *v15;
  float v16;
  uint64_t v17;
  const char *v18;
  float v19;

  v5 = *(_DWORD *)(result + 8);
  if (*(_DWORD *)(a2 + 8) % v5 || (v7 = result, v8 = *(_DWORD *)(a2 + 12), v8 != *(_DWORD *)(result + 12)))
    kaldi::KaldiAssertFailure_((kaldi *)"MaxoutDerivative", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xDA0, "input.NumCols() % this->NumCols() == 0 && input.NumRows() == this->NumRows()", a5);
  if (v8 >= 1)
  {
    v10 = 0;
    v11 = v5 / *(_DWORD *)(a3 + 8);
    do
    {
      if (v5 >= 1)
      {
        for (i = 0; i < v5; ++i)
        {
          v13 = kaldi::MatrixBase<float>::operator()(a2, v10, i, a4, a5);
          v16 = kaldi::MatrixBase<float>::operator()(a3, v10, i / v11, v14, v15);
          result = kaldi::MatrixBase<float>::operator()(v7, v10, i, v17, v18);
          if (v13 == v16)
            v19 = 1.0;
          else
            v19 = 0.0;
          *(float *)result = v19;
          v5 = *(_DWORD *)(v7 + 8);
        }
        v8 = *(_DWORD *)(v7 + 12);
      }
      ++v10;
    }
    while (v10 < v8);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::AddToDiag(uint64_t result, float a2)
{
  uint64_t v2;
  int v3;
  float *v4;
  uint64_t v5;

  LODWORD(v2) = *(_DWORD *)(result + 8);
  v3 = *(_DWORD *)(result + 12);
  if ((int)v2 >= v3)
    v2 = v3;
  else
    v2 = v2;
  if ((int)v2 >= 1)
  {
    v4 = *(float **)result;
    v5 = 4 * *(int *)(result + 16) + 4;
    do
    {
      *v4 = *v4 + a2;
      v4 = (float *)((char *)v4 + v5);
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::AddToDiag(uint64_t result, uint64_t a2, float a3, float a4, uint64_t a5, uint64_t a6, const char *a7)
{
  uint64_t v7;
  int v8;
  float *v9;
  float *v10;
  uint64_t v11;
  float v12;

  LODWORD(v7) = *(_DWORD *)(result + 8);
  v8 = *(_DWORD *)(result + 12);
  if ((int)v7 >= v8)
    v7 = v8;
  else
    v7 = v7;
  if (*(_DWORD *)(a2 + 8) != (_DWORD)v7)
    kaldi::KaldiAssertFailure_((kaldi *)"AddToDiag", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x7C1, "src.Dim() == num_to_add", a7);
  if ((int)v7 >= 1)
  {
    v9 = *(float **)a2;
    v10 = *(float **)result;
    v11 = 4 * (*(int *)(result + 16) + 1);
    do
    {
      v12 = *v9++;
      *v10 = (float)(*v10 * a4) + (float)(a3 * v12);
      v10 = (float *)((char *)v10 + v11);
      --v7;
    }
    while (v7);
  }
  return result;
}

void kaldi::MatrixBase<float>::AddIndexedRows(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  int v6;
  int v9;
  signed int i;
  signed int j;
  signed int v14;
  int v15;
  signed int k;
  float v17;
  uint64_t v18;
  const char *v19;
  float *v20;
  _QWORD *v21;
  _QWORD v22[34];

  v6 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)(a1 + 8) * v6 != *(_DWORD *)(a3 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"AddIndexedRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xD0C, "indices.NumCols() * NumCols() == src.NumCols()", a5);
  v9 = *(_DWORD *)(a2 + 12);
  if (v9 != *(_DWORD *)(a3 + 12))
    kaldi::KaldiAssertFailure_((kaldi *)"AddIndexedRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xD0D, "indices.NumRows() == src.NumRows()", a5);
  if (v9 >= 1)
  {
    for (i = 0; i < v9; ++i)
    {
      if (v6 >= 1)
      {
        for (j = 0; j < v6; ++j)
        {
          v14 = (int)kaldi::MatrixBase<float>::operator()(a2, i, j, a4, a5);
          if ((v14 & 0x80000000) == 0)
          {
            if (*(_DWORD *)(a1 + 12) <= v14)
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "AddIndexedRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 3349);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"index ", 6);
              v21 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" is too big for matrix that has rows = ", 39);
              std::ostream::operator<<();
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
            }
            v15 = *(_DWORD *)(a1 + 8);
            if (v15 >= 1)
            {
              for (k = 0; k < v15; ++k)
              {
                v17 = kaldi::MatrixBase<float>::operator()(a3, i, k + j * v15, a4, a5);
                v20 = (float *)kaldi::MatrixBase<float>::operator()(a1, v14, k, v18, v19);
                *v20 = *v20 + (float)(a6 * v17);
                v15 = *(_DWORD *)(a1 + 8);
              }
            }
          }
          v6 = *(_DWORD *)(a2 + 8);
        }
        v9 = *(_DWORD *)(a2 + 12);
      }
    }
  }
}

void sub_1DE40AABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void kaldi::MatrixBase<float>::AddDiagVecMat(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5, float a6, float a7)
{
  int v12;
  int v13;
  int v15;
  int v16;
  float *v17;
  const float *v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  float v22;

  if (a7 != 1.0)
    kaldi::MatrixBase<float>::Scale(a1, a7);
  if (a4 == 111)
  {
    v12 = *(_DWORD *)(a1 + 8);
    v13 = *(_DWORD *)(a1 + 12);
    if (v13 != *(_DWORD *)(a3 + 12) || v12 != *(_DWORD *)(a3 + 8))
      kaldi::KaldiAssertFailure_((kaldi *)"AddDiagVecMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x220, "SameDim(*this, M)", a5);
  }
  else
  {
    v12 = *(_DWORD *)(a3 + 12);
    if (v12 != *(_DWORD *)(a1 + 8) || (v13 = *(_DWORD *)(a3 + 8), v13 != *(_DWORD *)(a1 + 12)))
      kaldi::KaldiAssertFailure_((kaldi *)"AddDiagVecMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x222, "M.NumRows() == NumCols() && M.NumCols() == NumRows()", a5);
  }
  if (*(_DWORD *)(a2 + 8) != v13)
    kaldi::KaldiAssertFailure_((kaldi *)"AddDiagVecMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x224, "v.Dim() == this->NumRows()", a5);
  v15 = *(_DWORD *)(a3 + 16);
  if (a4 == 112)
    v16 = *(_DWORD *)(a3 + 16);
  else
    v16 = 1;
  if (v13 >= 1)
  {
    v17 = *(float **)a2;
    v18 = *(const float **)a3;
    v19 = *(float **)a1;
    if (a4 == 112)
      v15 = 1;
    v20 = 4 * v15;
    v21 = 4 * *(int *)(a1 + 16);
    do
    {
      v22 = *v17++;
      cblas_saxpy(v12, v22 * a6, v18, v16, v19, 1);
      v18 = (const float *)((char *)v18 + v20);
      v19 = (float *)((char *)v19 + v21);
      --v13;
    }
    while (v13);
  }
}

void kaldi::MatrixBase<float>::AddMatDiagVec(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5, float a6, float a7)
{
  int v12;
  int v13;
  int v15;
  int v16;
  int v17;
  float *v18;
  const float *v19;
  float *v20;
  uint64_t v21;
  float v22;

  if (a7 != 1.0)
    kaldi::MatrixBase<float>::Scale(a1, a7);
  if (a3 == 111)
  {
    v13 = *(_DWORD *)(a1 + 8);
    v12 = *(_DWORD *)(a1 + 12);
    if (v12 != *(_DWORD *)(a2 + 12) || v13 != *(_DWORD *)(a2 + 8))
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatDiagVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x23A, "SameDim(*this, M)", a5);
  }
  else
  {
    v13 = *(_DWORD *)(a2 + 12);
    if (v13 != *(_DWORD *)(a1 + 8) || (v12 = *(_DWORD *)(a2 + 8), v12 != *(_DWORD *)(a1 + 12)))
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatDiagVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x23C, "M.NumRows() == NumCols() && M.NumCols() == NumRows()", a5);
  }
  if (*(_DWORD *)(a4 + 8) != v13)
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatDiagVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x23E, "v.Dim() == this->NumCols()", a5);
  v15 = *(_DWORD *)(a2 + 16);
  if (a3 == 112)
    v16 = 1;
  else
    v16 = *(_DWORD *)(a2 + 16);
  if (v12 && v13 >= 1)
  {
    v17 = *(_DWORD *)(a1 + 16);
    v18 = *(float **)a4;
    v19 = *(const float **)a2;
    v20 = *(float **)a1;
    if (a3 != 112)
      v15 = 1;
    v21 = 4 * v15;
    do
    {
      v22 = *v18++;
      cblas_saxpy(v12, v22 * a6, v19, v16, v20++, v17);
      v19 = (const float *)((char *)v19 + v21);
      --v13;
    }
    while (v13);
  }
}

uint64_t kaldi::MatrixBase<float>::AddMatEwpMat(uint64_t result, uint64_t a2, int a3, uint64_t a4, const char *a5, float a6, float a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  float *v21;
  float *v22;
  float *v23;
  int v24;

  v7 = *(unsigned int *)(result + 12);
  if (a3 == 111)
  {
    if ((_DWORD)v7 != *(_DWORD *)(a2 + 12) || (v8 = *(_DWORD *)(result + 8), v8 != *(_DWORD *)(a2 + 8)))
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatEwpMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x83C, "num_rows_ == A.num_rows_ && num_cols_ == A.num_cols_", a5);
  }
  else if ((_DWORD)v7 != *(_DWORD *)(a2 + 8) || (v8 = *(_DWORD *)(result + 8), v8 != *(_DWORD *)(a2 + 12)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatEwpMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x83E, "num_rows_ == A.num_cols_ && num_cols_ == A.num_rows_", a5);
  }
  if ((_DWORD)a5 == 111)
  {
    if (__PAIR64__(v7, v8) != *(_QWORD *)(a4 + 8))
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatEwpMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x842, "num_rows_ == B.num_rows_ && num_cols_ == B.num_cols_", a5);
  }
  else if (__PAIR64__(v8, v7) != *(_QWORD *)(a4 + 8))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatEwpMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x844, "num_rows_ == B.num_cols_ && num_cols_ == B.num_rows_", a5);
  }
  if ((int)v7 >= 1)
  {
    v9 = 0;
    if ((_DWORD)a5 == 112)
      v10 = 1;
    else
      v10 = *(_DWORD *)(a4 + 16);
    if ((_DWORD)a5 == 112)
      v11 = *(_DWORD *)(a4 + 16);
    else
      v11 = 1;
    if (a3 == 112)
      v12 = 1;
    else
      v12 = *(_DWORD *)(a2 + 16);
    if (a3 == 112)
      v13 = *(_DWORD *)(a2 + 16);
    else
      v13 = 1;
    v14 = *(_QWORD *)result;
    v15 = *(int *)(result + 16);
    v16 = *(float **)a2;
    v17 = 4 * v10;
    v18 = 4 * v11;
    v19 = *(float **)a4;
    v20 = 4 * v12;
    result = 4 * v13;
    do
    {
      if (v8 >= 1)
      {
        v21 = (float *)(v14 + 4 * v9 * v15);
        v22 = v16;
        v23 = v19;
        v24 = v8;
        do
        {
          *v21 = (float)((float)(*v22 * a6) * *v23) + (float)(a7 * *v21);
          ++v21;
          v23 = (float *)((char *)v23 + v18);
          v22 = (float *)((char *)v22 + result);
          --v24;
        }
        while (v24);
      }
      ++v9;
      v19 = (float *)((char *)v19 + v17);
      v16 = (float *)((char *)v16 + v20);
    }
    while (v9 != v7);
  }
  return result;
}

void kaldi::MatrixBase<float>::Write(_DWORD *a1, _QWORD *a2, int a3, int a4)
{
  const std::string::value_type *v7;
  uint64_t v8;
  const char *v9;
  signed int v10;
  uint64_t v11;
  const char *v12;
  signed int v13;
  _QWORD *v14;
  int v15;
  std::string v16;
  _QWORD v17[34];

  if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Write", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1567);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "Failed to write matrix to stream: stream not good");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  if (a3)
  {
    memset(&v16, 0, sizeof(v16));
    std::string::append(&v16, "F");
    if (a4)
      v7 = "N";
    else
      v7 = "M";
    std::string::append(&v16, v7);
    kaldi::WriteToken(a2, 1, (char *)&v16, v8, v9);
    kaldi::WriteBasicType<int>(a2, 1);
    kaldi::WriteBasicType<int>(a2, 1);
    if (a4)
    {
      kaldi::WriteBasicType<int>(a2, 1);
      if ((fst::AlignOutput(a2) & 1) == 0)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Write", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1589);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Could not align output", 22);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
      }
    }
    else if (a1[4] != a1[2])
    {
      if ((int)a1[3] >= 1)
      {
        v15 = 0;
        do
        {
          std::ostream::write();
          ++v15;
        }
        while (v15 < a1[3]);
      }
      goto LABEL_23;
    }
    std::ostream::write();
LABEL_23:
    if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Write", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1604);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Failed to write matrix to stream", 32);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    return;
  }
  if (a1[2])
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" [", 2);
    if ((int)a1[3] >= 1)
    {
      v10 = 0;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n  ", 3);
        if ((int)a1[2] >= 1)
        {
          v13 = 0;
          do
          {
            kaldi::MatrixBase<float>::operator()((uint64_t)a1, v10, v13, v11, v12);
            v14 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" ", 1);
            ++v13;
          }
          while (v13 < a1[2]);
        }
        ++v10;
      }
      while (v10 < a1[3]);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]\n", 2);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" [ ]\n", 5);
  }
}

void sub_1DE40B2A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double kaldi::MatrixBase<double>::operator()(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 12) <= a2 || *(_DWORD *)(a1 + 8) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xDA, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", a5);
  return *(double *)(*(_QWORD *)a1 + 8 * (int)(*(_DWORD *)(a1 + 16) * a2) + 8 * (int)a3);
}

void kaldi::MatrixBase<double>::Scale(uint64_t a1, double a2)
{
  int v4;
  int v5;
  int v6;
  double *v7;

  if (a2 != 1.0)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4)
    {
      v5 = *(_DWORD *)(a1 + 8);
      if (v5 == *(_DWORD *)(a1 + 16))
      {
        cblas_dscal(v5 * v4, a2, *(double **)a1, 1);
      }
      else if (v4 >= 1)
      {
        v6 = 0;
        v7 = *(double **)a1;
        do
        {
          cblas_dscal(*(_DWORD *)(a1 + 8), a2, v7, 1);
          ++v6;
          v7 += *(int *)(a1 + 16);
        }
        while (v6 < *(_DWORD *)(a1 + 12));
      }
    }
  }
}

BOOL kaldi::MatrixBase<double>::IsZero(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  int v7;
  unsigned int v9;
  int v10;
  double v11;
  unsigned int i;
  double v13;

  v7 = *(_DWORD *)(a1 + 12);
  if (v7 < 1)
  {
    v11 = 0.0;
  }
  else
  {
    v9 = 0;
    v10 = *(_DWORD *)(a1 + 8);
    v11 = 0.0;
    do
    {
      if (v10 >= 1)
      {
        for (i = 0; i != v10; ++i)
        {
          v13 = fabs(kaldi::MatrixBase<double>::operator()(a1, v9, i, a5, a6));
          if (v11 < v13)
            v11 = v13;
        }
      }
      ++v9;
    }
    while (v9 != v7);
  }
  return v11 <= a2;
}

void kaldi::MatrixBase<double>::Write(_DWORD *a1, _QWORD *a2, int a3, int a4)
{
  const std::string::value_type *v7;
  uint64_t v8;
  const char *v9;
  signed int v10;
  uint64_t v11;
  const char *v12;
  signed int v13;
  _QWORD *v14;
  int v15;
  std::string v16;
  _QWORD v17[34];

  if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Write", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1567);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "Failed to write matrix to stream: stream not good");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  if (a3)
  {
    memset(&v16, 0, sizeof(v16));
    std::string::append(&v16, "D");
    if (a4)
      v7 = "N";
    else
      v7 = "M";
    std::string::append(&v16, v7);
    kaldi::WriteToken(a2, 1, (char *)&v16, v8, v9);
    kaldi::WriteBasicType<int>(a2, 1);
    kaldi::WriteBasicType<int>(a2, 1);
    if (a4)
    {
      kaldi::WriteBasicType<int>(a2, 1);
      if ((fst::AlignOutput(a2) & 1) == 0)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Write", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1589);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Could not align output", 22);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
      }
    }
    else if (a1[4] != a1[2])
    {
      if ((int)a1[3] >= 1)
      {
        v15 = 0;
        do
        {
          std::ostream::write();
          ++v15;
        }
        while (v15 < a1[3]);
      }
      goto LABEL_23;
    }
    std::ostream::write();
LABEL_23:
    if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Write", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1604);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Failed to write matrix to stream", 32);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    return;
  }
  if (a1[2])
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" [", 2);
    if ((int)a1[3] >= 1)
    {
      v10 = 0;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n  ", 3);
        if ((int)a1[2] >= 1)
        {
          v13 = 0;
          do
          {
            kaldi::MatrixBase<double>::operator()((uint64_t)a1, v10, v13, v11, v12);
            v14 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" ", 1);
            ++v13;
          }
          while (v13 < a1[2]);
        }
        ++v10;
      }
      while (v10 < a1[3]);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]\n", 2);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" [ ]\n", 5);
  }
}

void sub_1DE40B7C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::SubMatrix<float>::SubMatrix(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, const char *a5, unsigned int a6)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  BOOL v11;
  int v12;
  int v13;

  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  v6 = *(_DWORD *)(a2 + 12);
  v10 = v6 >= a3;
  v7 = v6 - a3;
  if (v7 == 0
    || !v10
    || ((v8 = *(_DWORD *)(a2 + 8), v10 = v8 >= a5, v9 = v8 - (_DWORD)a5, v9 != 0 && v10)
      ? (v10 = v7 >= a4)
      : (v10 = 0),
        v10 ? (v11 = v9 >= a6) : (v11 = 0),
        !v11))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubMatrix", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x78E, "static_cast<UnsignedMatrixIndexT>(ro) < static_cast<UnsignedMatrixIndexT>(M.num_rows_) && static_cast<UnsignedMatrixIndexT>(co) < static_cast<UnsignedMatrixIndexT>(M.num_cols_) && static_cast<UnsignedMatrixIndexT>(r) <= static_cast<UnsignedMatrixIndexT>(M.num_rows_ - ro) && static_cast<UnsignedMatrixIndexT>(c) <= static_cast<UnsignedMatrixIndexT>(M.num_cols_ - co)", a5);
  }
  *(_DWORD *)(result + 8) = a6;
  *(_DWORD *)(result + 12) = a4;
  v12 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  v13 = *(_DWORD *)(a2 + 16) * a3;
  *(_QWORD *)result = *(_QWORD *)a2 + 4 * (int)a5 + 4 * v13;
  *(_DWORD *)(result + 20) = v12 - (_DWORD)a5 - v13;
  return result;
}

uint64_t kaldi::SubMatrix<float>::SubMatrix(uint64_t result, uint64_t a2, int a3, int a4, const char *a5)
{
  *(_DWORD *)(result + 8) = a4;
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = (_DWORD)a5;
  *(_DWORD *)(result + 20) = (_DWORD)a5 * a3;
  *(_QWORD *)(result + 24) = 0;
  if (a2)
  {
    if ((int)a5 < a4)
      kaldi::KaldiAssertFailure_((kaldi *)"SubMatrix", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x7A5, "this->stride_ >= this->num_cols_", a5);
  }
  else
  {
    if (a4 * a3)
      kaldi::KaldiAssertFailure_((kaldi *)"SubMatrix", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x79F, "num_rows * num_cols == 0", a5);
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
  }
  return result;
}

uint64_t kaldi::SubMatrix<double>::SubMatrix(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, const char *a5, unsigned int a6)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  BOOL v11;
  int v12;
  int v13;

  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  v6 = *(_DWORD *)(a2 + 12);
  v10 = v6 >= a3;
  v7 = v6 - a3;
  if (v7 == 0
    || !v10
    || ((v8 = *(_DWORD *)(a2 + 8), v10 = v8 >= a5, v9 = v8 - (_DWORD)a5, v9 != 0 && v10)
      ? (v10 = v7 >= a4)
      : (v10 = 0),
        v10 ? (v11 = v9 >= a6) : (v11 = 0),
        !v11))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubMatrix", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x78E, "static_cast<UnsignedMatrixIndexT>(ro) < static_cast<UnsignedMatrixIndexT>(M.num_rows_) && static_cast<UnsignedMatrixIndexT>(co) < static_cast<UnsignedMatrixIndexT>(M.num_cols_) && static_cast<UnsignedMatrixIndexT>(r) <= static_cast<UnsignedMatrixIndexT>(M.num_rows_ - ro) && static_cast<UnsignedMatrixIndexT>(c) <= static_cast<UnsignedMatrixIndexT>(M.num_cols_ - co)", a5);
  }
  *(_DWORD *)(result + 8) = a6;
  *(_DWORD *)(result + 12) = a4;
  v12 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  v13 = *(_DWORD *)(a2 + 16) * a3;
  *(_QWORD *)result = *(_QWORD *)a2 + 8 * (int)a5 + 8 * v13;
  *(_DWORD *)(result + 20) = v12 - (_DWORD)a5 - v13;
  return result;
}

float *kaldi::Quant3Levels<float>(float *result, uint64_t a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v6;
  int v7;
  signed int v10;
  float v11;
  int v12;
  signed int i;
  float v14;
  uint64_t v15;
  const char *v16;
  float *v17;
  uint64_t v18;
  const char *v19;
  float v20;
  float v21;
  float *v22;

  if (a3 <= 0.0)
    kaldi::KaldiAssertFailure_((kaldi *)"Quant3Levels", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xDAF, "value > 0.0", a6);
  v6 = (uint64_t)result;
  v7 = *((_DWORD *)result + 3);
  if (v7 >= 1)
  {
    v10 = 0;
    v11 = -a3;
    v12 = *((_DWORD *)result + 2);
    do
    {
      if (v12 >= 1)
      {
        for (i = 0; i < v12; ++i)
        {
          v14 = *(float *)kaldi::MatrixBase<float>::operator()(v6, v10, i, a5, a6);
          v17 = (float *)kaldi::MatrixBase<float>::operator()(v6, v10, i, v15, v16);
          v20 = *v17;
          if (v14 >= a3)
          {
            *v17 = v20 - a3;
            v21 = a3;
          }
          else
          {
            v21 = 0.0;
            if (v20 <= v11)
            {
              v22 = (float *)kaldi::MatrixBase<float>::operator()(v6, v10, i, v18, v19);
              *v22 = *v22 + a3;
              v21 = v11;
            }
          }
          result = (float *)kaldi::MatrixBase<float>::operator()(a2, v10, i, v18, v19);
          *result = v21;
          v12 = *(_DWORD *)(v6 + 8);
        }
        v7 = *(_DWORD *)(v6 + 12);
      }
      ++v10;
    }
    while (v10 < v7);
  }
  return result;
}

_DWORD *kaldi::ZeroSmallValues<float>(_DWORD *result, uint64_t a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v6;
  int v7;
  signed int v10;
  float v11;
  int v12;
  signed int i;
  float v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  float v19;
  uint64_t v20;

  if (a3 <= 0.0)
    kaldi::KaldiAssertFailure_((kaldi *)"ZeroSmallValues", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xDC1, "threshold > 0.0", a6);
  v6 = (uint64_t)result;
  v7 = result[3];
  if (v7 < 1)
    return result;
  v10 = 0;
  v11 = -a3;
  v12 = result[2];
  do
  {
    if (v12 < 1)
      goto LABEL_12;
    for (i = 0; i < v12; ++i)
    {
      v14 = *(float *)kaldi::MatrixBase<float>::operator()(v6, v10, i, a5, a6);
      v19 = *(float *)kaldi::MatrixBase<float>::operator()(v6, v10, i, v15, v16);
      if (v14 < a3)
      {
        v20 = a2;
        if (v19 > v11)
          goto LABEL_10;
        v19 = *(float *)kaldi::MatrixBase<float>::operator()(v6, v10, i, v17, v18);
      }
      *(float *)kaldi::MatrixBase<float>::operator()(a2, v10, i, v17, v18) = v19;
      v20 = v6;
LABEL_10:
      result = (_DWORD *)kaldi::MatrixBase<float>::operator()(v20, v10, i, v17, v18);
      *result = 0;
      v12 = *(_DWORD *)(v6 + 8);
    }
    v7 = *(_DWORD *)(v6 + 12);
LABEL_12:
    ++v10;
  }
  while (v10 < v7);
  return result;
}

uint64_t kaldi::MatrixBase<float>::AddMatMat<signed char>(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, const char *a5, float a6, float a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  int v17;
  int v18[12];

  v12 = result;
  if ((_DWORD)a5 == 111)
  {
    v13 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a4);
    v14 = kaldi::QuantizedMatrixBase<short>::NumRows(a4);
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v18, v13, v14);
    kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(v18, (uint64_t)a4, 112, v15, v16);
    kaldi::MatrixBase<float>::AddMatMat<signed char>(v12, a2, a3, v18, 112, a6, a7);
    return kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase((uint64_t)v18);
  }
  else
  {
    if ((_DWORD)a3 != 111)
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xF2, "transA == kNoTrans", a5);
    if ((_DWORD)a5 != 112)
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xF3, "transB == kTrans", a5);
    if (*(_DWORD *)(a2 + 8) != a4[1])
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xF4, "A.num_cols_ == B.num_cols_", a5);
    v17 = *(_DWORD *)(a2 + 12);
    if (v17 != *(_DWORD *)(result + 12))
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xF5, "A.num_rows_ == num_rows_", a5);
    if (*a4 != *(_DWORD *)(result + 8))
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xF6, "B.num_rows_ == num_cols_", a5);
    if (a6 != 1.0)
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xF8, "alpha == 1.0", a5);
    if (a2 == result)
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xF9, "&A != this", a5);
    if (v17)
      return kaldi::QuantizedMatrixBase<signed char>::AddMatMat((uint64_t)a4, a2, (void **)result, (uint64_t)a4, a5, a7);
  }
  return result;
}

void sub_1DE40BDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::MatrixBase<float>::AddMatMat<short>(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, const char *a5, float a6, float a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  int v17;
  int v18[12];

  v12 = result;
  if ((_DWORD)a5 == 111)
  {
    v13 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a4);
    v14 = kaldi::QuantizedMatrixBase<short>::NumRows(a4);
    kaldi::QuantizedMatrix<short>::QuantizedMatrix(v18, v13, v14);
    kaldi::QuantizedMatrixBase<short>::CopyFromMat(v18, (uint64_t)a4, 112, v15, v16);
    kaldi::MatrixBase<float>::AddMatMat<short>(v12, a2, a3, v18, 112, a6, a7);
    return kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase((uint64_t)v18);
  }
  else
  {
    if ((_DWORD)a3 != 111)
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xF2, "transA == kNoTrans", a5);
    if ((_DWORD)a5 != 112)
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xF3, "transB == kTrans", a5);
    if (*(_DWORD *)(a2 + 8) != a4[1])
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xF4, "A.num_cols_ == B.num_cols_", a5);
    v17 = *(_DWORD *)(a2 + 12);
    if (v17 != *(_DWORD *)(result + 12))
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xF5, "A.num_rows_ == num_rows_", a5);
    if (*a4 != *(_DWORD *)(result + 8))
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xF6, "B.num_rows_ == num_cols_", a5);
    if (a6 != 1.0)
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xF8, "alpha == 1.0", a5);
    if (a2 == result)
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0xF9, "&A != this", a5);
    if (v17)
      return kaldi::QuantizedMatrixBase<short>::AddMatMat((uint64_t)a4, a2, (void **)result, (uint64_t)a4, a5, a7);
  }
  return result;
}

void sub_1DE40C008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned int *kaldi::MatrixBase<float>::AddMatMat<signed char>(unsigned int *result, uint64_t a2, int a3, _DWORD *a4, const char *a5, float a6, float a7)
{
  int v7;
  _QWORD v8[34];

  if ((_DWORD)a5 == 111)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8, "AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 263);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "Unimplemented");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  if (a3 != 111)
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x10A, "transA == kNoTrans", a5);
  if ((_DWORD)a5 != 112)
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x10B, "transB == kTrans", a5);
  if (*(_DWORD *)(a2 + 8) != a4[1])
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x10C, "A.num_cols_ == B.num_cols_", a5);
  v7 = *(_DWORD *)(a2 + 12);
  if (v7 != result[3])
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x10D, "A.num_rows_ == num_rows_", a5);
  if (*a4 != result[2])
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x10E, "B.num_rows_ == num_cols_", a5);
  if (a6 != 1.0)
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x110, "alpha == 1.0", a5);
  if ((unsigned int *)a2 == result)
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x111, "&A != this", a5);
  if (v7)
    return (unsigned int *)kaldi::VectorwiseQuantizedMatrix<signed char>::AddMatMat((uint64_t)a4, a2, result, a7);
  return result;
}

void sub_1DE40C1D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

unsigned int *kaldi::MatrixBase<float>::AddMatMat<short>(unsigned int *result, uint64_t a2, int a3, _DWORD *a4, const char *a5, float a6, float a7)
{
  int v7;
  _QWORD v8[34];

  if ((_DWORD)a5 == 111)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8, "AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 263);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "Unimplemented");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  if (a3 != 111)
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x10A, "transA == kNoTrans", a5);
  if ((_DWORD)a5 != 112)
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x10B, "transB == kTrans", a5);
  if (*(_DWORD *)(a2 + 8) != a4[1])
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x10C, "A.num_cols_ == B.num_cols_", a5);
  v7 = *(_DWORD *)(a2 + 12);
  if (v7 != result[3])
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x10D, "A.num_rows_ == num_rows_", a5);
  if (*a4 != result[2])
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x10E, "B.num_rows_ == num_cols_", a5);
  if (a6 != 1.0)
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x110, "alpha == 1.0", a5);
  if ((unsigned int *)a2 == result)
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x111, "&A != this", a5);
  if (v7)
    return (unsigned int *)kaldi::VectorwiseQuantizedMatrix<short>::AddMatMat((uint64_t)a4, a2, result, a7);
  return result;
}

void sub_1DE40C394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void kaldi::MatrixBase<float>::AddVecVec<float>(uint64_t a1, uint64_t a2, uint64_t a3, float a4, uint64_t a5, const char *a6)
{
  int v7;
  int v8;

  v7 = *(_DWORD *)(a2 + 8);
  if (v7 != *(_DWORD *)(a1 + 12) || (v8 = *(_DWORD *)(a3 + 8), v8 != *(_DWORD *)(a1 + 8)))
    kaldi::KaldiAssertFailure_((kaldi *)"AddVecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)0x8D, "a.Dim() == num_rows_ && rb.Dim() == num_cols_", a6);
  cblas_sger(CblasRowMajor, v7, v8, a4, *(const float **)a2, 1, *(const float **)a3, 1, *(float **)a1, *(_DWORD *)(a1 + 16));
}

void kaldi::KaldiVlogMessage::~KaldiVlogMessage(kaldi::KaldiVlogMessage *this)
{
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  void *__p;
  char v6;

  v2 = (void (*)(uint64_t))kaldi::KaldiVlogMessage::g_logger[0];
  std::stringbuf::str();
  v2((uint64_t)&__p);
  if (v6 < 0)
    operator delete(__p);
  v3 = MEMORY[0x1E0DE4F60];
  v4 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)this = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *((_QWORD *)this + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1DF0ECF6C]((char *)this + 112);
}

uint64_t kaldi::QuantizedMatrixBase<short>::NumRows(unsigned int *a1)
{
  return *a1;
}

uint64_t kaldi::QuantizedMatrixBase<short>::NumCols(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(uint64_t a1, int a2, int a3)
{
  int v6;
  void *v7;
  uint64_t v8;
  void *memptr;

  kaldi::QuantizedMatrixBase<signed char>::QuantizedMatrixBase(a1, a2, a3);
  memptr = 0;
  v6 = malloc_type_posix_memalign(&memptr, 0x20uLL, a3 * a2, 0x100004077774924uLL);
  v7 = memptr;
  if (v6)
    v7 = 0;
  memptr = v7;
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  if (v8)
    (*(void (**)(void))(a1 + 24))();
  kaldi::QuantizedMatrixBase<signed char>::UpdateFilter((int *)a1);
  return a1;
}

void sub_1DE40C594(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD v22[34];

  if (kaldi::MatrixBase<float>::NumRows(a2) != *(_DWORD *)a1)
    kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", (const char *)0x8E, "M.NumRows() == NumRows()", v4);
  if (kaldi::MatrixBase<float>::NumCols(a2) != *(_DWORD *)(a1 + 4))
    kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", (const char *)0x8F, "M.NumCols() == NumCols()", v5);
  v6 = kaldi::MatrixBase<float>::NumRows(a2);
  v7 = kaldi::MatrixBase<float>::NumCols(a2);
  if (v6)
  {
    v10 = v7;
    v11 = 0;
    v12 = v6;
    if (v7 <= 1)
      v13 = 1;
    else
      v13 = v7;
    v14 = v13;
    v15 = -INFINITY;
    v16 = INFINITY;
    do
    {
      if (v10)
      {
        v17 = 0;
        do
        {
          v18 = kaldi::MatrixBase<float>::operator()(a2, v11, v17, v8, v9);
          if (v18 < v16)
            v16 = v18;
          if (v15 < v18)
            v15 = v18;
          ++v17;
        }
        while (v14 != v17);
      }
      ++v11;
    }
    while (v11 != v12);
  }
  else
  {
    v16 = INFINITY;
    v15 = -INFINITY;
  }
  if ((float)((float)*(int *)(a1 + 4) * 16129.0) > 2147500000.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", 170);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, "Too many rows*cols for 8-bit Matrix");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  v19 = fabsf(v15);
  v20 = fabsf(v16);
  if (v19 < v20)
    v19 = v20;
  *(_DWORD *)(a1 + 8) = 1123942400;
  *(float *)(a1 + 12) = 127.0 / v19;
  v21 = kaldi::QuantizedMatrixBase<signed char>::MutableData(a1);
  kaldi::ComputeQuantizedData<signed char>(v21, a2, *(float *)(a1 + 12));
  kaldi::QuantizedMatrixBase<signed char>::UpdateFilter((int *)a1);
}

uint64_t kaldi::QuantizedMatrix<signed char>::QuantizedMatrix<short>(uint64_t a1, int *a2)
{
  _BYTE v5[40];

  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a1, *a2, a2[1]);
  kaldi::Matrix<float>::Matrix<short>((uint64_t)v5, (unsigned int *)a2);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(a1, (uint64_t)v5);
  kaldi::Matrix<float>::~Matrix((uint64_t)v5);
  return a1;
}

void sub_1DE40C7E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::QuantizedMatrix<short>::QuantizedMatrix(uint64_t a1, int a2, int a3)
{
  int v6;
  void *v7;
  uint64_t v8;
  void *memptr;

  kaldi::QuantizedMatrixBase<short>::QuantizedMatrixBase(a1, a2, a3);
  memptr = 0;
  v6 = malloc_type_posix_memalign(&memptr, 0x20uLL, 2 * a3 * a2, 0x1000040BDFB0063uLL);
  v7 = memptr;
  if (v6)
    v7 = 0;
  memptr = v7;
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  if (v8)
    (*(void (**)(void))(a1 + 24))();
  kaldi::QuantizedMatrixBase<short>::UpdateFilter((int *)a1);
  return a1;
}

void sub_1DE40C8A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::QuantizedMatrixBase<short>::CopyFromMat(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;

  if (kaldi::MatrixBase<float>::NumRows(a2) != *(_DWORD *)a1)
    kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", (const char *)0x8E, "M.NumRows() == NumRows()", v4);
  if (kaldi::MatrixBase<float>::NumCols(a2) != *(_DWORD *)(a1 + 4))
    kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", (const char *)0x8F, "M.NumCols() == NumCols()", v5);
  v6 = kaldi::MatrixBase<float>::NumRows(a2);
  v7 = kaldi::MatrixBase<float>::NumCols(a2);
  v10 = v7;
  v11 = v6;
  if (v6)
  {
    v12 = 0;
    if (v7 <= 1)
      v13 = 1;
    else
      v13 = v7;
    v14 = v13;
    v15 = -INFINITY;
    v16 = INFINITY;
    do
    {
      if (v10)
      {
        v17 = 0;
        do
        {
          v18 = kaldi::MatrixBase<float>::operator()(a2, v12, v17, v8, v9);
          if (v18 < v16)
            v16 = v18;
          if (v15 < v18)
            v15 = v18;
          ++v17;
        }
        while (v14 != v17);
      }
      ++v12;
    }
    while (v12 != v11);
  }
  else
  {
    v16 = INFINITY;
    v15 = -INFINITY;
  }
  v19 = fabsf(v15);
  v20 = fabsf(v16);
  if (v19 < v20)
    v19 = v20;
  v21 = 2147500000.0 / (float)(int)(v10 * v11);
  if (v21 > 32767.0)
    v21 = 32767.0;
  *(float *)(a1 + 8) = v21;
  *(float *)(a1 + 12) = v21 / v19;
  v22 = kaldi::QuantizedMatrixBase<short>::MutableData(a1);
  kaldi::ComputeQuantizedData<short>(v22, a2, *(float *)(a1 + 12));
  kaldi::QuantizedMatrixBase<short>::UpdateFilter((int *)a1);
}

uint64_t kaldi::QuantizedMatrix<short>::QuantizedMatrix<signed char>(uint64_t a1, int *a2)
{
  _BYTE v5[40];

  kaldi::QuantizedMatrix<short>::QuantizedMatrix(a1, *a2, a2[1]);
  kaldi::Matrix<float>::Matrix<signed char>((uint64_t)v5, (unsigned int *)a2);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat(a1, (uint64_t)v5);
  kaldi::Matrix<float>::~Matrix((uint64_t)v5);
  return a1;
}

void sub_1DE40CA98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = *(void **)(a1 + 40);
  if (v2)
    BNNSFilterDestroy(v2);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(void))(a1 + 24))();
  return a1;
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::AddMatMat(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, const char *a5, float a6)
{
  uint64_t v9;
  uint64_t v10;
  float v11;
  void *v12;
  const void *v13;
  size_t v14;
  void *v15;
  int v16;
  void *v17;
  int v18;
  const void *v19;
  size_t v20;
  void *v21;
  int v22;
  uint64_t v23;
  const char *v24;
  uint64_t result;
  _QWORD v26[5];
  const void *v27;
  uint64_t (*v28)(void);
  uint64_t v29;
  int v30;
  uint64_t v31;

  v27 = 0;
  v28 = (uint64_t (*)(void))kaldi::kaldi_memalign_free;
  v30 = 0;
  v29 = 0;
  v31 = 0;
  kaldi::QuantizedMatrixBase<signed char>::PrepareMatMat((float *)a1, a2, (uint64_t)&v27, a4, a5);
  v9 = kaldi::MatrixBase<float>::NumRows((uint64_t)a3);
  v10 = kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
  v11 = 1.0 / (float)(*(float *)(a1 + 12) * *(float *)&v29);
  if (a6 == 0.0)
  {
    v12 = *(void **)(a1 + 40);
    v13 = v27;
    v14 = *(int *)(a1 + 4);
    v15 = *a3;
    v16 = kaldi::MatrixBase<float>::Stride((uint64_t)a3);
    BNNSFilterApplyBatch(v12, (int)v9, v13, v14, v15, v16);
    kaldi::MatrixBase<float>::Scale((uint64_t)a3, v11);
  }
  else
  {
    kaldi::Matrix<float>::Matrix((uint64_t)v26, v9, v10, 0, 0);
    v17 = *(void **)(a1 + 40);
    v18 = kaldi::MatrixBase<float>::NumRows((uint64_t)v26);
    v19 = v27;
    v20 = *(int *)(a1 + 4);
    v21 = (void *)v26[0];
    v22 = kaldi::MatrixBase<float>::Stride((uint64_t)v26);
    BNNSFilterApplyBatch(v17, v18, v19, v20, v21, v22);
    kaldi::MatrixBase<float>::AddMat((uint64_t)a3, (uint64_t)v26, 111, v11, a6, v23, v24);
    kaldi::Matrix<float>::~Matrix((uint64_t)v26);
  }
  result = (uint64_t)v27;
  v27 = 0;
  if (result)
    return v28();
  return result;
}

void sub_1DE40CC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(void))
{
  if (a14)
    a15();
  _Unwind_Resume(exception_object);
}

void kaldi::QuantizedMatrixBase<signed char>::PrepareMatMat(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v8;
  float v9;
  int v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  void *v16;
  void *v17;
  float v18;
  uint64_t v19;
  int v20;
  void *memptr;

  v8 = kaldi::MatrixBase<float>::AbsMax(a2, a2, a3, a4, a5);
  if (v8 == 0.0)
    v9 = 1.0;
  else
    v9 = v8;
  v10 = kaldi::MatrixBase<float>::NumRows(a2);
  v11 = kaldi::MatrixBase<float>::NumCols(a2);
  v12 = a1[2];
  v13 = 2147500000.0 / (float)(v12 * (float)v11);
  v14 = v12 / v9;
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, 0x20uLL, v11 * v10, 0x100004077774924uLL))
    v16 = 0;
  else
    v16 = memptr;
  memptr = v16;
  v17 = *(void **)a3;
  *(_QWORD *)a3 = v16;
  if (v17)
  {
    (*(void (**)(void *))(a3 + 8))(v17);
    v16 = *(void **)a3;
  }
  kaldi::ComputeQuantizedData<signed char>((uint64_t)v16, a2, v15);
  *(float *)(a3 + 16) = v15;
  v18 = *a1;
  v19 = *((_QWORD *)a1 + 4);
  if (!v19)
    v19 = *((_QWORD *)a1 + 2);
  v20 = *((_DWORD *)a1 + 1);
  if (*(_DWORD *)(a3 + 20) != LODWORD(v18) || *(_DWORD *)(a3 + 24) != v20 || *(_QWORD *)(a3 + 32) != v19)
  {
    *(float *)(a3 + 20) = v18;
    *(_DWORD *)(a3 + 24) = v20;
    *(_QWORD *)(a3 + 32) = v19;
  }
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(unsigned int *a1, char **a2)
{
  void *v5[5];

  kaldi::Matrix<float>::Matrix((uint64_t)v5, *a1, a1[1], 0, 0);
  kaldi::MatrixBase<float>::CopyRowsFromVec(v5, a2);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat((uint64_t)a1, (uint64_t)v5);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v5);
}

void sub_1DE40CE3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(int *a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;

  *((_QWORD *)a1 + 1) = *(_QWORD *)(a2 + 8);
  if (a3 == 111)
  {
    if (*a1 != *(_DWORD *)a2)
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", (const char *)0x11A, "num_rows_ == M.NumRows()", a5);
    if (a1[1] != *(_DWORD *)(a2 + 4))
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", (const char *)0x11B, "num_cols_ == M.NumCols()", a5);
    v7 = (void *)kaldi::QuantizedMatrixBase<signed char>::MutableData((uint64_t)a1);
    if (*(_QWORD *)(a2 + 32))
      v8 = *(const void **)(a2 + 32);
    else
      v8 = *(const void **)(a2 + 16);
    memmove(v7, v8, *a1 * (uint64_t)a1[1]);
  }
  else
  {
    v9 = a1[1];
    if ((_DWORD)v9 != *(_DWORD *)a2)
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", (const char *)0x11E, "num_cols_ == M.NumRows()", a5);
    v10 = *a1;
    if ((_DWORD)v10 != *(_DWORD *)(a2 + 4))
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", (const char *)0x11F, "num_rows_ == M.NumCols()", a5);
    v11 = kaldi::QuantizedMatrixBase<signed char>::MutableData((uint64_t)a1);
    v12 = *(_BYTE **)(a2 + 32);
    if (!v12)
      v12 = *(_BYTE **)(a2 + 16);
    v13 = *a1;
    if (*a1 >= 1)
    {
      v14 = 0;
      LODWORD(v15) = a1[1];
      do
      {
        if ((int)v15 >= 1)
        {
          v16 = 0;
          v17 = v12;
          do
          {
            *(_BYTE *)(v11 + v16++) = *v17;
            v15 = a1[1];
            v17 += v10;
          }
          while (v16 < v15);
          v13 = *a1;
        }
        ++v14;
        v11 += v9;
        ++v12;
      }
      while (v14 < v13);
    }
  }
  kaldi::QuantizedMatrixBase<signed char>::UpdateFilter(a1);
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::MutableData(uint64_t a1)
{
  _QWORD v2[34];

  if (*(_QWORD *)(a1 + 32))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "MutableData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", 271);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Attempt to write into immutable matrix");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return *(_QWORD *)(a1 + 16);
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::Data(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (!result)
    return *(_QWORD *)(a1 + 16);
  return result;
}

void kaldi::QuantizedMatrixBase<signed char>::UpdateFilter(int *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[2];
  __int128 v17;
  _QWORD v18[3];
  _QWORD v19[3];

  v2 = (void *)*((_QWORD *)a1 + 5);
  if (v2)
  {
    BNNSFilterDestroy(v2);
    *((_QWORD *)a1 + 5) = 0;
  }
  v3 = *((_QWORD *)a1 + 4);
  if (v3 || *((_QWORD *)a1 + 2))
  {
    v5 = *a1;
    v4 = a1[1];
    v18[2] = 0;
    v19[0] = v4;
    v19[1] = 0x3F80000000020008;
    v19[2] = 0;
    v18[0] = v5;
    v18[1] = 65568;
    if (!v3)
      v3 = *((_QWORD *)a1 + 2);
    v16[0] = 1;
    v17 = 0u;
    v16[1] = 1;
    v6[0] = v4;
    v6[1] = v5;
    v6[2] = v3;
    v7 = 131080;
    v8 = 1065353216;
    v9 = 0;
    v10 = 0;
    v11 = xmmword_1DEC3D338;
    v12 = unk_1DEC3D348;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    *((_QWORD *)a1 + 5) = MEMORY[0x1DF0EC72C](v19, v18, v6, v16);
  }
}

float kaldi::QuantizedMatrixBase<signed char>::Sum(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  unint64_t v7;
  unint64_t v8;
  float v9;
  unint64_t v10;

  v5 = *a1;
  if (!*a1)
    return 0.0;
  v7 = 0;
  LODWORD(v8) = a1[1];
  v9 = 0.0;
  do
  {
    if ((_DWORD)v8)
    {
      v10 = 0;
      do
      {
        v9 = v9 + kaldi::QuantizedMatrixBase<signed char>::operator()((uint64_t)a1, v7, v10++, a4, a5);
        v8 = a1[1];
      }
      while (v10 < v8);
      v5 = *a1;
    }
    ++v7;
  }
  while (v7 < v5);
  return v9;
}

float kaldi::QuantizedMatrixBase<signed char>::operator()(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, const char *a5)
{
  unsigned int v5;
  uint64_t v6;

  if (*(_DWORD *)a1 <= a2 || (v5 = *(_DWORD *)(a1 + 4), v5 <= a3))
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.h", (const char *)0x5F, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", a5);
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
    v6 = *(_QWORD *)(a1 + 16);
  return (float)*(char *)(v6 + (int)(v5 * a2) + (int)a3) / *(float *)(a1 + 12);
}

float kaldi::QuantizedMatrixBase<signed char>::Row@<S0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 32);
  if (!v5)
    v5 = *(_QWORD *)(a1 + 16);
  return kaldi::QuantizedSubVector<signed char>::QuantizedSubVector(a3, v5 + *(_DWORD *)(a1 + 4) * a2, *(_DWORD *)(a1 + 4), *(float *)(a1 + 12));
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::Range@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  LODWORD(v8) = a3;
  LODWORD(v9) = a2;
  result = kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a6, a3, a5);
  *(_QWORD *)(a6 + 8) = *(_QWORD *)(a1 + 8);
  if ((_DWORD)v8)
  {
    v13 = 0;
    v8 = (int)v8;
    v9 = (int)v9;
    do
    {
      v14 = kaldi::QuantizedMatrixBase<signed char>::MutableData(a6);
      v15 = *(_QWORD *)(a1 + 32);
      if (!v15)
        v15 = *(_QWORD *)(a1 + 16);
      result = (uint64_t)memcpy((void *)(v14 + v13), (const void *)(v15 + v9 * *(int *)(a1 + 4) + a4), a5);
      ++v9;
      v13 += a5;
      --v8;
    }
    while (v8);
  }
  return result;
}

void sub_1DE40D30C(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::ComputeQuantizedData<signed char>(uint64_t a1, uint64_t a2, float a3)
{
  int v6;
  int v7;
  uint64_t v8;
  const char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = kaldi::MatrixBase<float>::NumRows(a2);
  v7 = kaldi::MatrixBase<float>::NumCols(a2);
  if (v6)
  {
    v10 = v7;
    v11 = 0;
    v12 = v6;
    v13 = v7;
    if ((unint64_t)v7 <= 1)
      v14 = 1;
    else
      v14 = v7;
    do
    {
      if (v10)
      {
        v15 = 0;
        do
        {
          *(_BYTE *)(a1 + v15) = llroundf(kaldi::MatrixBase<float>::operator()(a2, v11, v15, v8, v9) * a3);
          ++v15;
        }
        while (v14 != v15);
      }
      ++v11;
      a1 += v13;
    }
    while (v11 != v12);
  }
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::QuantizedMatrixBase(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = kaldi::kaldi_memalign_free;
  kaldi::QuantizedMatrixBase<signed char>::UpdateFilter((int *)a1);
  return a1;
}

void sub_1DE40D410(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    (*(void (**)(void))(v1 + 24))();
  _Unwind_Resume(exception_object);
}

int *kaldi::QuantizedMatrixBase<signed char>::QuantizedMatrixBase(int *a1, int *a2)
{
  int v3;
  int v4;
  void *v6;
  uint64_t v7;
  void *memptr;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = kaldi::kaldi_memalign_free;
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a1 + 5) = 0;
  if (*((_QWORD *)a2 + 2))
  {
    memptr = 0;
    if (malloc_type_posix_memalign(&memptr, 0x20uLL, v4 * v3, 0x100004077774924uLL))
      v6 = 0;
    else
      v6 = memptr;
    memptr = v6;
    v7 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = v6;
    if (v7)
    {
      (*((void (**)(uint64_t))a1 + 3))(v7);
      v6 = (void *)*((_QWORD *)a1 + 2);
    }
    memcpy(v6, *((const void **)a2 + 2), a1[1] * (uint64_t)*a1);
  }
  kaldi::QuantizedMatrixBase<signed char>::UpdateFilter(a1);
  return a1;
}

void sub_1DE40D4FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    (*(void (**)(void))(v1 + 24))();
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = *(void **)(a1 + 40);
  if (v2)
    BNNSFilterDestroy(v2);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(void))(a1 + 24))();
  return a1;
}

uint64_t kaldi::QuantizedMatrixBase<short>::AddMatMat(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, const char *a5, float a6)
{
  uint64_t v9;
  uint64_t v10;
  float v11;
  void *v12;
  const void *v13;
  size_t v14;
  void *v15;
  int v16;
  void *v17;
  int v18;
  const void *v19;
  size_t v20;
  void *v21;
  int v22;
  uint64_t v23;
  const char *v24;
  uint64_t result;
  _QWORD v26[5];
  const void *v27;
  uint64_t (*v28)(void);
  uint64_t v29;
  int v30;
  uint64_t v31;

  v27 = 0;
  v28 = (uint64_t (*)(void))kaldi::kaldi_memalign_free;
  v30 = 0;
  v29 = 0;
  v31 = 0;
  kaldi::QuantizedMatrixBase<short>::PrepareMatMat((float *)a1, a2, (uint64_t)&v27, a4, a5);
  v9 = kaldi::MatrixBase<float>::NumRows((uint64_t)a3);
  v10 = kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
  v11 = 1.0 / (float)(*(float *)(a1 + 12) * *(float *)&v29);
  if (a6 == 0.0)
  {
    v12 = *(void **)(a1 + 40);
    v13 = v27;
    v14 = *(int *)(a1 + 4);
    v15 = *a3;
    v16 = kaldi::MatrixBase<float>::Stride((uint64_t)a3);
    BNNSFilterApplyBatch(v12, (int)v9, v13, v14, v15, v16);
    kaldi::MatrixBase<float>::Scale((uint64_t)a3, v11);
  }
  else
  {
    kaldi::Matrix<float>::Matrix((uint64_t)v26, v9, v10, 0, 0);
    v17 = *(void **)(a1 + 40);
    v18 = kaldi::MatrixBase<float>::NumRows((uint64_t)v26);
    v19 = v27;
    v20 = *(int *)(a1 + 4);
    v21 = (void *)v26[0];
    v22 = kaldi::MatrixBase<float>::Stride((uint64_t)v26);
    BNNSFilterApplyBatch(v17, v18, v19, v20, v21, v22);
    kaldi::MatrixBase<float>::AddMat((uint64_t)a3, (uint64_t)v26, 111, v11, a6, v23, v24);
    kaldi::Matrix<float>::~Matrix((uint64_t)v26);
  }
  result = (uint64_t)v27;
  v27 = 0;
  if (result)
    return v28();
  return result;
}

void sub_1DE40D6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(void))
{
  if (a14)
    a15();
  _Unwind_Resume(exception_object);
}

void kaldi::QuantizedMatrixBase<short>::PrepareMatMat(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v8;
  float v9;
  int v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  void *v16;
  void *v17;
  float v18;
  uint64_t v19;
  int v20;
  void *memptr;

  v8 = kaldi::MatrixBase<float>::AbsMax(a2, a2, a3, a4, a5);
  if (v8 == 0.0)
    v9 = 1.0;
  else
    v9 = v8;
  v10 = kaldi::MatrixBase<float>::NumRows(a2);
  v11 = kaldi::MatrixBase<float>::NumCols(a2);
  v12 = a1[2];
  v13 = 2147500000.0 / (float)(v12 * (float)v11);
  v14 = v12 / v9;
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, 0x20uLL, 2 * v11 * v10, 0x1000040BDFB0063uLL))
    v16 = 0;
  else
    v16 = memptr;
  memptr = v16;
  v17 = *(void **)a3;
  *(_QWORD *)a3 = v16;
  if (v17)
  {
    (*(void (**)(void *))(a3 + 8))(v17);
    v16 = *(void **)a3;
  }
  kaldi::ComputeQuantizedData<short>((uint64_t)v16, a2, v15);
  *(float *)(a3 + 16) = v15;
  v18 = *a1;
  v19 = *((_QWORD *)a1 + 4);
  if (!v19)
    v19 = *((_QWORD *)a1 + 2);
  v20 = *((_DWORD *)a1 + 1);
  if (*(_DWORD *)(a3 + 20) != LODWORD(v18) || *(_DWORD *)(a3 + 24) != v20 || *(_QWORD *)(a3 + 32) != v19)
  {
    *(float *)(a3 + 20) = v18;
    *(_DWORD *)(a3 + 24) = v20;
    *(_QWORD *)(a3 + 32) = v19;
  }
}

uint64_t kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(unsigned int *a1, char **a2)
{
  void *v5[5];

  kaldi::Matrix<float>::Matrix((uint64_t)v5, *a1, a1[1], 0, 0);
  kaldi::MatrixBase<float>::CopyRowsFromVec(v5, a2);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat((uint64_t)a1, (uint64_t)v5);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v5);
}

void sub_1DE40D8A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::QuantizedMatrixBase<short>::CopyFromMat(int *a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  _WORD *v18;

  *((_QWORD *)a1 + 1) = *(_QWORD *)(a2 + 8);
  if (a3 == 111)
  {
    if (*a1 != *(_DWORD *)a2)
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", (const char *)0x11A, "num_rows_ == M.NumRows()", a5);
    if (a1[1] != *(_DWORD *)(a2 + 4))
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", (const char *)0x11B, "num_cols_ == M.NumCols()", a5);
    v7 = (void *)kaldi::QuantizedMatrixBase<short>::MutableData((uint64_t)a1);
    if (*(_QWORD *)(a2 + 32))
      v8 = *(const void **)(a2 + 32);
    else
      v8 = *(const void **)(a2 + 16);
    memmove(v7, v8, 2 * *a1 * a1[1]);
  }
  else
  {
    v9 = a1[1];
    if ((_DWORD)v9 != *(_DWORD *)a2)
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", (const char *)0x11E, "num_cols_ == M.NumRows()", a5);
    v10 = *a1;
    if ((_DWORD)v10 != *(_DWORD *)(a2 + 4))
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", (const char *)0x11F, "num_rows_ == M.NumCols()", a5);
    v11 = kaldi::QuantizedMatrixBase<short>::MutableData((uint64_t)a1);
    v12 = *(_WORD **)(a2 + 32);
    if (!v12)
      v12 = *(_WORD **)(a2 + 16);
    v13 = *a1;
    if ((int)v13 >= 1)
    {
      v14 = 0;
      v15 = a1[1];
      do
      {
        v16 = v15;
        v17 = v12;
        v18 = (_WORD *)v11;
        if ((int)v15 >= 1)
        {
          do
          {
            *v18++ = *v17;
            v17 += v10;
            --v16;
          }
          while (v16);
        }
        ++v14;
        v11 += 2 * v9;
        ++v12;
      }
      while (v14 != v13);
    }
  }
  kaldi::QuantizedMatrixBase<short>::UpdateFilter(a1);
}

uint64_t kaldi::QuantizedMatrixBase<short>::MutableData(uint64_t a1)
{
  _QWORD v2[34];

  if (*(_QWORD *)(a1 + 32))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "MutableData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", 271);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Attempt to write into immutable matrix");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return *(_QWORD *)(a1 + 16);
}

void kaldi::QuantizedMatrixBase<short>::UpdateFilter(int *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[2];
  __int128 v17;
  _QWORD v18[3];
  _QWORD v19[3];

  v2 = (void *)*((_QWORD *)a1 + 5);
  if (v2)
  {
    BNNSFilterDestroy(v2);
    *((_QWORD *)a1 + 5) = 0;
  }
  v3 = *((_QWORD *)a1 + 4);
  if (v3 || *((_QWORD *)a1 + 2))
  {
    v5 = *a1;
    v4 = a1[1];
    v18[2] = 0;
    v19[0] = v4;
    v19[1] = 0x3F80000000020010;
    v19[2] = 0;
    v18[0] = v5;
    v18[1] = 65568;
    if (!v3)
      v3 = *((_QWORD *)a1 + 2);
    v16[0] = 1;
    v17 = 0u;
    v16[1] = 1;
    v6[0] = v4;
    v6[1] = v5;
    v6[2] = v3;
    v7 = 131088;
    v8 = 1065353216;
    v9 = 0;
    v10 = 0;
    v11 = xmmword_1DEC3D338;
    v12 = unk_1DEC3D348;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    *((_QWORD *)a1 + 5) = MEMORY[0x1DF0EC72C](v19, v18, v6, v16);
  }
}

float kaldi::QuantizedMatrixBase<short>::Sum(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  unint64_t v7;
  unint64_t v8;
  float v9;
  unint64_t v10;

  v5 = *a1;
  if (!*a1)
    return 0.0;
  v7 = 0;
  LODWORD(v8) = a1[1];
  v9 = 0.0;
  do
  {
    if ((_DWORD)v8)
    {
      v10 = 0;
      do
      {
        v9 = v9 + kaldi::QuantizedMatrixBase<short>::operator()((uint64_t)a1, v7, v10++, a4, a5);
        v8 = a1[1];
      }
      while (v10 < v8);
      v5 = *a1;
    }
    ++v7;
  }
  while (v7 < v5);
  return v9;
}

float kaldi::QuantizedMatrixBase<short>::operator()(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, const char *a5)
{
  unsigned int v5;
  uint64_t v6;

  if (*(_DWORD *)a1 <= a2 || (v5 = *(_DWORD *)(a1 + 4), v5 <= a3))
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.h", (const char *)0x5F, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", a5);
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
    v6 = *(_QWORD *)(a1 + 16);
  return (float)*(__int16 *)(v6 + 2 * (int)(v5 * a2) + 2 * (int)a3) / *(float *)(a1 + 12);
}

float kaldi::QuantizedMatrixBase<short>::Row@<S0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 32);
  if (!v5)
    v5 = *(_QWORD *)(a1 + 16);
  return kaldi::QuantizedSubVector<signed char>::QuantizedSubVector(a3, v5 + 2 * *(_DWORD *)(a1 + 4) * a2, *(_DWORD *)(a1 + 4), *(float *)(a1 + 12));
}

uint64_t kaldi::QuantizedMatrixBase<short>::Range@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;

  LODWORD(v8) = a3;
  LODWORD(v9) = a2;
  result = kaldi::QuantizedMatrix<short>::QuantizedMatrix(a6, a3, a5);
  *(_QWORD *)(a6 + 8) = *(_QWORD *)(a1 + 8);
  if ((_DWORD)v8)
  {
    v13 = 0;
    v8 = (int)v8;
    v9 = (int)v9;
    v14 = 2 * a5;
    do
    {
      v15 = kaldi::QuantizedMatrixBase<short>::MutableData(a6);
      v16 = *(_QWORD *)(a1 + 32);
      if (!v16)
        v16 = *(_QWORD *)(a1 + 16);
      result = (uint64_t)memcpy((void *)(v15 + v13), (const void *)(v16 + 2 * v9 * *(int *)(a1 + 4) + 2 * a4), v14);
      ++v9;
      v13 += v14;
      --v8;
    }
    while (v8);
  }
  return result;
}

void sub_1DE40DD60(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::ComputeQuantizedData<short>(uint64_t a1, uint64_t a2, float a3)
{
  int v6;
  int v7;
  uint64_t v8;
  const char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = kaldi::MatrixBase<float>::NumRows(a2);
  v7 = kaldi::MatrixBase<float>::NumCols(a2);
  if (v6)
  {
    v10 = v7;
    v11 = 0;
    v12 = v6;
    if ((unint64_t)v7 <= 1)
      v13 = 1;
    else
      v13 = v7;
    do
    {
      if (v10)
      {
        v14 = 0;
        do
        {
          *(_WORD *)(a1 + 2 * v14) = llroundf(kaldi::MatrixBase<float>::operator()(a2, v11, v14, v8, v9) * a3);
          ++v14;
        }
        while (v13 != v14);
      }
      ++v11;
      a1 += 2 * v10;
    }
    while (v11 != v12);
  }
}

uint64_t kaldi::QuantizedMatrixBase<short>::QuantizedMatrixBase(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = kaldi::kaldi_memalign_free;
  kaldi::QuantizedMatrixBase<short>::UpdateFilter((int *)a1);
  return a1;
}

void sub_1DE40DE68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    (*(void (**)(void))(v1 + 24))();
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::QuantizedMatrixBase<short>::QuantizedMatrixBase(uint64_t a1, int *a2)
{
  int v3;
  int v4;
  void *v6;
  uint64_t v7;
  void *memptr;

  v3 = *a2;
  v4 = a2[1];
  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 4) = v4;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = kaldi::kaldi_memalign_free;
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_QWORD *)(a1 + 40) = 0;
  if (*((_QWORD *)a2 + 2))
  {
    memptr = 0;
    if (malloc_type_posix_memalign(&memptr, 0x20uLL, 2 * v4 * v3, 0x1000040BDFB0063uLL))
      v6 = 0;
    else
      v6 = memptr;
    memptr = v6;
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v6;
    if (v7)
    {
      (*(void (**)(uint64_t))(a1 + 24))(v7);
      v6 = *(void **)(a1 + 16);
    }
    memcpy(v6, *((const void **)a2 + 2), 2 * *(_DWORD *)(a1 + 4) * *(_DWORD *)a1);
  }
  kaldi::QuantizedMatrixBase<short>::UpdateFilter((int *)a1);
  return a1;
}

void sub_1DE40DF58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    (*(void (**)(void))(v1 + 24))();
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(uint64_t a1, int *a2)
{
  int *v4;
  uint64_t v5;
  const char *v6;

  v4 = (int *)kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a1, *a2, a2[1]);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(v4, (uint64_t)a2, 111, v5, v6);
  return a1;
}

void sub_1DE40DFBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void sub_1DE40E02C(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::QuantizedMatrix<signed char>::Read(int *a1, _QWORD *a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *memptr[34];
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;

  kaldi::ReadBasicType<float>(a2, a3, (float *)a1 + 3, a4, a5);
  a1[2] = 1123942400;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  kaldi::ReadIntegerVector<signed char>(a2, a3, (unint64_t *)&v13, a4, (char *)a1 + 32, 0, 0);
  if (*((_QWORD *)a1 + 4))
  {
    v9 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = 0;
    if (v9)
      (*((void (**)(void))a1 + 3))();
  }
  else
  {
    if (v14 - v13 != a1[1] * (uint64_t)*a1)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)memptr, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", 498);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(memptr, (uint64_t)"Quantized matrix improperly serialized", 38);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)memptr);
    }
    memptr[0] = 0;
    if (malloc_type_posix_memalign(memptr, 0x20uLL, v14 - v13, 0x100004077774924uLL))
      v10 = 0;
    else
      v10 = memptr[0];
    memptr[0] = v10;
    v11 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = v10;
    if (v11)
    {
      (*((void (**)(uint64_t))a1 + 3))(v11);
      v10 = (void *)*((_QWORD *)a1 + 2);
    }
    memcpy(v10, v13, v14 - v13);
  }
  kaldi::QuantizedMatrixBase<signed char>::UpdateFilter(a1);
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
}

void sub_1DE40E1BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 72);
  if (v3)
  {
    *(_QWORD *)(v1 - 64) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::ReadIntegerVector<signed char>(_QWORD *a1, int a2, unint64_t *a3, uint64_t a4, char *a5, _QWORD *a6, _QWORD *a7)
{
  int v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  unint64_t v17;
  int v18;
  _QWORD *v19;
  char v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  size_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t *v36;
  void *__p;
  char *v38;
  unint64_t v39;
  signed int v40;
  _QWORD v41[16];
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (!a3)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadIntegerVector", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", (const char *)0x11A, "v != NULL", a5);
  if (a5)
    *(_QWORD *)a5 = 0;
  if (a2)
  {
    if (std::istream::peek() != 1)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v41, "ReadIntegerVector", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", 291);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"ReadIntegerVector: expected to see type of size ", 48);
      v33 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", saw instead ", 14);
      v34 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", at file position ", 19);
      std::istream::tellg();
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v41);
    }
    std::istream::get();
    v40 = 0;
    std::istream::read();
    if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
    {
      v13 = v40;
      v14 = v40;
      if (a7)
        *a7 = v40;
      if (a4 && (a5 ? (v15 = v13 < 0) : (v15 = 0), !v15 ? (v16 = 0) : (v16 = 1), a6 || v16))
      {
        if (v16)
        {
          std::istream::tellg();
          *(_QWORD *)a5 = a4 + v42;
        }
        else if (a6)
        {
          std::istream::tellg();
          *a6 = a4 + v42;
        }
        std::istream::seekg();
        a3[1] = *a3;
        std::vector<signed char>::shrink_to_fit(a3);
      }
      else
      {
        v17 = a3[1] - *a3;
        if (v14 <= v17)
        {
          if (v14 < v17)
            a3[1] = *a3 + v14;
        }
        else
        {
          std::vector<signed char>::__append(a3, v14 - v17);
          v14 = v40;
        }
        if ((int)v14 >= 1)
          std::istream::read();
      }
      goto LABEL_59;
    }
LABEL_62:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v41, "ReadIntegerVector", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", 358);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"ReadIntegerVector: read failure at file position ", 49);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v41);
  }
  __p = 0;
  v38 = 0;
  v39 = 0;
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  if (std::istream::peek() != 91)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v41, "ReadIntegerVector", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", 329);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"ReadIntegerVector: expected to see [, saw ", 42);
    std::istream::peek();
    v35 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", at file position ", 19);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v41);
  }
  std::istream::get();
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  v36 = a3;
  while (1)
  {
    v18 = std::istream::peek();
    if (v18 == 93)
      break;
    LOWORD(v41[0]) = 0;
    v19 = (_QWORD *)MEMORY[0x1DF0ECC3C](a1, v41);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(v19);
    if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
      goto LABEL_46;
    v20 = v41[0];
    v21 = v38;
    if ((unint64_t)v38 >= v39)
    {
      v23 = (char *)__p;
      v24 = v38 - (_BYTE *)__p;
      v25 = v38 - (_BYTE *)__p + 1;
      if (v25 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v26 = v39 - (_QWORD)__p;
      if (2 * (v39 - (unint64_t)__p) > v25)
        v25 = 2 * v26;
      if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
        v27 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
        v28 = (char *)operator new(v27);
      else
        v28 = 0;
      v29 = &v28[v24];
      v30 = &v28[v24];
      *v30 = v20;
      v22 = v30 + 1;
      if (v21 != v23)
      {
        v31 = &v21[~(unint64_t)v23];
        do
        {
          v32 = *--v21;
          (v31--)[(_QWORD)v28] = v32;
        }
        while (v21 != v23);
        v21 = (char *)__p;
        v29 = v28;
      }
      __p = v29;
      v38 = v22;
      v39 = (unint64_t)&v28[v27];
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v38 = v41[0];
      v22 = v21 + 1;
    }
    v38 = v22;
  }
  std::istream::get();
  if (&__p != (void **)v36)
    std::vector<signed char>::__assign_with_size[abi:ne180100]<signed char *,signed char *>(v36, (char *)__p, v38, v38 - (_BYTE *)__p);
  if (a7)
    *a7 = v36[1] - *v36;
LABEL_46:
  if (__p)
  {
    v38 = (char *)__p;
    operator delete(__p);
  }
  if (v18 != 93)
    goto LABEL_62;
LABEL_59:
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
    goto LABEL_62;
}

void sub_1DE40E704(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1DE40E740);
}

void sub_1DE40E71C()
{
  JUMPOUT(0x1DE40E740);
}

void sub_1DE40E72C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::QuantizedMatrix<signed char>::Write(int *a1, _QWORD *a2, int a3, int a4)
{
  uint64_t v8;

  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  v8 = *((_QWORD *)a1 + 4);
  if (!v8)
    v8 = *((_QWORD *)a1 + 2);
  return kaldi::WriteIntegerByteArray<signed char>(a2, a3, a4, a1[1] * (uint64_t)*a1, v8);
}

uint64_t kaldi::QuantizedMatrix<short>::QuantizedMatrix(uint64_t a1, int *a2)
{
  int *v4;
  uint64_t v5;
  const char *v6;

  v4 = (int *)kaldi::QuantizedMatrix<short>::QuantizedMatrix(a1, *a2, a2[1]);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat(v4, (uint64_t)a2, 111, v5, v6);
  return a1;
}

void sub_1DE40E7E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void sub_1DE40E854(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::QuantizedMatrix<short>::Read(int *a1, _QWORD *a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *memptr[34];
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;

  kaldi::ReadBasicType<float>(a2, a3, (float *)a1 + 3, a4, a5);
  kaldi::ReadBasicType<float>(a2, a3, (float *)a1 + 2, v9, v10);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  kaldi::ReadIntegerVector<short>(a2, a3, (uint64_t)&v15, a4, (char *)a1 + 32, 0, 0);
  if (*((_QWORD *)a1 + 4))
  {
    v11 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = 0;
    if (v11)
      (*((void (**)(void))a1 + 3))();
  }
  else
  {
    if (a1[1] * (uint64_t)*a1 != (v16 - v15) >> 1)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)memptr, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", 498);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(memptr, (uint64_t)"Quantized matrix improperly serialized", 38);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)memptr);
    }
    memptr[0] = 0;
    if (malloc_type_posix_memalign(memptr, 0x20uLL, v16 - v15, 0x1000040BDFB0063uLL))
      v12 = 0;
    else
      v12 = memptr[0];
    memptr[0] = v12;
    v13 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = v12;
    if (v13)
    {
      (*((void (**)(uint64_t))a1 + 3))(v13);
      v12 = (void *)*((_QWORD *)a1 + 2);
    }
    memcpy(v12, v15, v16 - v15);
  }
  kaldi::QuantizedMatrixBase<short>::UpdateFilter(a1);
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
}

void sub_1DE40E9EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 72);
  if (v3)
  {
    *(_QWORD *)(v1 - 64) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::ReadIntegerVector<short>(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, char *a5, _QWORD *a6, uint64_t *a7)
{
  int v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  int v17;
  _QWORD *v18;
  _WORD *v19;
  _WORD *v20;
  _WORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int16 v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *__p;
  _WORD *v33;
  unint64_t v34;
  int v35;
  _QWORD v36[16];
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!a3)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadIntegerVector", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", (const char *)0x11A, "v != NULL", a5);
  if (a5)
    *(_QWORD *)a5 = 0;
  if (a2)
  {
    if (std::istream::peek() != 2)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36, "ReadIntegerVector", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", 291);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"ReadIntegerVector: expected to see type of size ", 48);
      v29 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", saw instead ", 14);
      v30 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", at file position ", 19);
      std::istream::tellg();
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
    }
    std::istream::get();
    v35 = 0;
    std::istream::read();
    if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
    {
      v13 = v35;
      v14 = v35;
      if (a7)
        *a7 = v35;
      if (a4 && (a5 ? (v15 = v13 < 0) : (v15 = 0), !v15 ? (v16 = 0) : (v16 = 1), a6 || v16))
      {
        if (v16)
        {
          std::istream::tellg();
          *(_QWORD *)a5 = a4 + v37;
        }
        else if (a6)
        {
          std::istream::tellg();
          *a6 = a4 + v37;
        }
        std::istream::seekg();
        *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
        std::vector<short>::shrink_to_fit(a3);
      }
      else
      {
        std::vector<short>::resize(a3, v14);
        if (v35 >= 1)
          std::istream::read();
      }
      goto LABEL_55;
    }
LABEL_58:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36, "ReadIntegerVector", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", 358);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"ReadIntegerVector: read failure at file position ", 49);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
  }
  __p = 0;
  v33 = 0;
  v34 = 0;
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  if (std::istream::peek() != 91)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36, "ReadIntegerVector", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", 329);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"ReadIntegerVector: expected to see [, saw ", 42);
    std::istream::peek();
    v31 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", at file position ", 19);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
  }
  std::istream::get();
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  while (1)
  {
    v17 = std::istream::peek();
    if (v17 == 93)
      break;
    LOWORD(v36[0]) = 0;
    v18 = (_QWORD *)MEMORY[0x1DF0ECC3C](a1, v36);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(v18);
    if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
      goto LABEL_46;
    v19 = v33;
    if ((unint64_t)v33 >= v34)
    {
      v21 = __p;
      v22 = (char *)v33 - (_BYTE *)__p;
      if ((char *)v33 - (_BYTE *)__p <= -3)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v23 = v22 >> 1;
      if (v34 - (unint64_t)__p <= (v22 >> 1) + 1)
        v24 = v23 + 1;
      else
        v24 = v34 - (_QWORD)__p;
      if (v34 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFELL)
        v25 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
      {
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>((uint64_t)&v34, v25);
        v21 = __p;
        v19 = v33;
      }
      else
      {
        v26 = 0;
      }
      v27 = &v26[2 * v23];
      *(_WORD *)v27 = v36[0];
      v20 = v27 + 2;
      while (v19 != v21)
      {
        v28 = *--v19;
        *((_WORD *)v27 - 1) = v28;
        v27 -= 2;
      }
      __p = v27;
      v33 = v20;
      v34 = (unint64_t)&v26[2 * v25];
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v33 = v36[0];
      v20 = v19 + 1;
    }
    v33 = v20;
  }
  std::istream::get();
  if (&__p != (void **)a3)
    std::vector<short>::__assign_with_size[abi:ne180100]<short *,short *>((char *)a3, (char *)__p, (uint64_t)v33, ((char *)v33 - (_BYTE *)__p) >> 1);
  if (a7)
    *a7 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 1;
LABEL_46:
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  if (v17 != 93)
    goto LABEL_58;
LABEL_55:
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
    goto LABEL_58;
}

void sub_1DE40EF14(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1DE40EF4CLL);
}

void sub_1DE40EF28()
{
  JUMPOUT(0x1DE40EF4CLL);
}

void sub_1DE40EF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::QuantizedMatrix<short>::Write(int *a1, _QWORD *a2, int a3, int a4)
{
  uint64_t v8;

  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  v8 = *((_QWORD *)a1 + 4);
  if (!v8)
    v8 = *((_QWORD *)a1 + 2);
  return kaldi::WriteIntegerByteArray<short>(a2, a3, a4, a1[1] * (uint64_t)*a1, v8);
}

double kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

uint64_t kaldi::VectorwiseQuantizedMatrix<signed char>::CopyFromMat(int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  const void *v9;
  _DWORD v10[4];
  const void *v11;
  const void *v12;
  _BYTE v13[32];

  v4 = operator new[]();
  v5 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = v4;
  if (v5)
    MEMORY[0x1DF0ED014](v5, 0x1000C4052888210);
  v6 = operator new[]();
  result = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = v6;
  if (result)
    result = MEMORY[0x1DF0ED014](result, 0x1000C4077774924);
  if (*a1)
  {
    v8 = 0;
    do
    {
      kaldi::SubMatrix<float>::SubMatrix(v13, a2, v8, 1, 0, a1[1]);
      kaldi::QuantizedMatrix<signed char>::QuantizedMatrix((uint64_t)v10, (uint64_t)v13);
      *(_DWORD *)(*((_QWORD *)a1 + 1) + 4 * v8) = v10[3];
      if (v12)
        v9 = v12;
      else
        v9 = v11;
      memcpy((void *)(*((_QWORD *)a1 + 3) + v8 * a1[1]), v9, a1[1]);
      kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase((uint64_t)v10);
      result = kaldi::CuMatrixBase<float>::~CuMatrixBase(v13);
      ++v8;
    }
    while (v8 < *a1);
  }
  return result;
}

void sub_1DE40F110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(va);
  _Unwind_Resume(a1);
}

int *kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(int *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 2) = 0u;
  v4 = (void **)(a1 + 2);
  *(_OWORD *)(a1 + 6) = 0u;
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    *((_QWORD *)a1 + 2) = v5;
  }
  else
  {
    v6 = (void *)operator new[]();
    v7 = *v4;
    *v4 = v6;
    if (v7)
    {
      MEMORY[0x1DF0ED014](v7, 0x1000C4052888210);
      v6 = *v4;
    }
    memcpy(v6, *(const void **)(a2 + 8), 4 * *a1);
  }
  v8 = *(_QWORD *)(a2 + 32);
  if (v8)
  {
    *((_QWORD *)a1 + 4) = v8;
  }
  else
  {
    v9 = (void *)operator new[]();
    v10 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 3) = v9;
    if (v10)
    {
      MEMORY[0x1DF0ED014](v10, 0x1000C4077774924);
      v9 = (void *)*((_QWORD *)a1 + 3);
    }
    memcpy(v9, *(const void **)(a2 + 24), a1[1] * (uint64_t)*a1);
  }
  return a1;
}

void sub_1DE40F234(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v4)
    MEMORY[0x1DF0ED014](v4, 0x1000C4077774924);
  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::VectorwiseQuantizedMatrix<signed char>::Read(unsigned int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v17[34];
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  const void *v21[4];
  char v22;

  v8 = kaldi::Matrix<float>::Matrix((uint64_t)v21, 1, *a1, 0, 0);
  kaldi::Matrix<float>::Read(v8, a2, a3, 0, a4);
  if (v22)
  {
    v9 = v21[0];
    v10 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = v9;
    if (v10)
      MEMORY[0x1DF0ED014](v10, 0x1000C4052888210);
  }
  else
  {
    *((_QWORD *)a1 + 2) = 0;
    v11 = (void *)operator new[]();
    v12 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v11;
    if (v12)
    {
      MEMORY[0x1DF0ED014](v12, 0x1000C4052888210);
      v11 = (void *)*((_QWORD *)a1 + 1);
    }
    memcpy(v11, v21[0], 4 * (int)*a1);
  }
  v18 = 0;
  v19 = 0;
  v20 = 0;
  kaldi::ReadIntegerVector<signed char>(a2, a3, (unint64_t *)&v18, a4, (char *)a1 + 32, 0, 0);
  if (*((_QWORD *)a1 + 4))
  {
    v13 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 3) = 0;
    if (v13)
      MEMORY[0x1DF0ED014](v13, 0x1000C4077774924);
  }
  else
  {
    if (v19 - v18 != (int)a1[1] * (uint64_t)(int)*a1)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", 611);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Quantized matrix improperly serialized", 38);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
    }
    v14 = (void *)operator new[]();
    v15 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 3) = v14;
    if (v15)
    {
      MEMORY[0x1DF0ED014](v15, 0x1000C4077774924);
      v14 = (void *)*((_QWORD *)a1 + 3);
    }
    memcpy(v14, v18, v19 - v18);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  return kaldi::Matrix<float>::~Matrix((uint64_t)v21);
}

void sub_1DE40F484(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(_QWORD *)(v1 - 104) = v3;
    operator delete(v3);
  }
  kaldi::Matrix<float>::~Matrix(v1 - 88);
  _Unwind_Resume(a1);
}

uint64_t kaldi::VectorwiseQuantizedMatrix<signed char>::Write(unsigned int *a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD v9[8];

  v6 = *((_QWORD *)a1 + 2);
  if (!v6)
    v6 = *((_QWORD *)a1 + 1);
  kaldi::SubMatrix<float>::SubMatrix(v9, v6, 1, *a1, *a1);
  kaldi::MatrixBase<float>::Write(v9, a2, a3, a3);
  v7 = *((_QWORD *)a1 + 4);
  if (!v7)
    v7 = *((_QWORD *)a1 + 3);
  kaldi::WriteIntegerByteArray<signed char>(a2, a3, a3, (int)a1[1] * (uint64_t)(int)*a1, v7);
  return kaldi::CuMatrixBase<float>::~CuMatrixBase(v9);
}

void sub_1DE40F548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a9);
  _Unwind_Resume(a1);
}

float kaldi::VectorwiseQuantizedMatrix<signed char>::Row@<S0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a1 + 32);
  if (!v5)
    v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
    v6 = *(_QWORD *)(a1 + 8);
  return kaldi::QuantizedSubVector<signed char>::QuantizedSubVector(a3, v5 + *(int *)(a1 + 4) * (uint64_t)a2, *(_DWORD *)(a1 + 4), *(float *)(v6 + 4 * a2));
}

uint64_t kaldi::VectorwiseQuantizedMatrix<signed char>::AddMatMat(uint64_t a1, uint64_t a2, unsigned int *a3, float a4)
{
  int v8;
  uint64_t v9;
  const char *v10;
  uint64_t i;
  uint64_t v12;
  const char *v13;
  _BYTE v15[16];
  uint64_t v16[3];
  _BYTE v17[40];

  v8 = kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
  kaldi::Matrix<float>::Matrix(v17, a3, 112);
  if (v8)
  {
    for (i = 0; i != v8; ++i)
    {
      kaldi::MatrixBase<float>::Row((uint64_t)v17, i, v10, v16);
      kaldi::VectorwiseQuantizedMatrix<signed char>::Row(a1, i, (uint64_t)v15);
      kaldi::QuantizedVectorBase<signed char>::AddMatVec((uint64_t)v15, a2, (uint64_t)v16, a4, v12, v13);
    }
  }
  kaldi::MatrixBase<float>::CopyFromMat<float>(a3, (uint64_t)v17, 112, v9, v10);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v17);
}

void sub_1DE40F65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

int *kaldi::VectorwiseQuantizedMatrix<short>::VectorwiseQuantizedMatrix(int *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 2) = 0u;
  v4 = (void **)(a1 + 2);
  *(_OWORD *)(a1 + 6) = 0u;
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    *((_QWORD *)a1 + 2) = v5;
  }
  else
  {
    v6 = (void *)operator new[]();
    v7 = *v4;
    *v4 = v6;
    if (v7)
    {
      MEMORY[0x1DF0ED014](v7, 0x1000C4052888210);
      v6 = *v4;
    }
    memcpy(v6, *(const void **)(a2 + 8), 4 * *a1);
  }
  v8 = *(_QWORD *)(a2 + 32);
  if (v8)
  {
    *((_QWORD *)a1 + 4) = v8;
  }
  else
  {
    v9 = (void *)operator new[]();
    v10 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 3) = v9;
    if (v10)
    {
      MEMORY[0x1DF0ED014](v10, 0x1000C40BDFB0063);
      v9 = (void *)*((_QWORD *)a1 + 3);
    }
    memcpy(v9, *(const void **)(a2 + 24), 2 * *a1 * (uint64_t)a1[1]);
  }
  return a1;
}

void sub_1DE40F79C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v4)
    MEMORY[0x1DF0ED014](v4, 0x1000C40BDFB0063);
  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::VectorwiseQuantizedMatrix<short>::Read(unsigned int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v17[34];
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  const void *v21[4];
  char v22;

  v8 = kaldi::Matrix<float>::Matrix((uint64_t)v21, 1, *a1, 0, 0);
  kaldi::Matrix<float>::Read(v8, a2, a3, 0, a4);
  if (v22)
  {
    v9 = v21[0];
    v10 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = v9;
    if (v10)
      MEMORY[0x1DF0ED014](v10, 0x1000C4052888210);
  }
  else
  {
    *((_QWORD *)a1 + 2) = 0;
    v11 = (void *)operator new[]();
    v12 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v11;
    if (v12)
    {
      MEMORY[0x1DF0ED014](v12, 0x1000C4052888210);
      v11 = (void *)*((_QWORD *)a1 + 1);
    }
    memcpy(v11, v21[0], 4 * (int)*a1);
  }
  v18 = 0;
  v19 = 0;
  v20 = 0;
  kaldi::ReadIntegerVector<short>(a2, a3, (uint64_t)&v18, a4, (char *)a1 + 32, 0, 0);
  if (*((_QWORD *)a1 + 4))
  {
    v13 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 3) = 0;
    if (v13)
      MEMORY[0x1DF0ED014](v13, 0x1000C40BDFB0063);
  }
  else
  {
    if ((int)a1[1] * (uint64_t)(int)*a1 != (v19 - v18) >> 1)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", 611);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Quantized matrix improperly serialized", 38);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
    }
    v14 = (void *)operator new[]();
    v15 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 3) = v14;
    if (v15)
    {
      MEMORY[0x1DF0ED014](v15, 0x1000C40BDFB0063);
      v14 = (void *)*((_QWORD *)a1 + 3);
    }
    memcpy(v14, v18, v19 - v18);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  return kaldi::Matrix<float>::~Matrix((uint64_t)v21);
}

void sub_1DE40F9F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(_QWORD *)(v1 - 104) = v3;
    operator delete(v3);
  }
  kaldi::Matrix<float>::~Matrix(v1 - 88);
  _Unwind_Resume(a1);
}

uint64_t kaldi::VectorwiseQuantizedMatrix<short>::Write(unsigned int *a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD v9[8];

  v6 = *((_QWORD *)a1 + 2);
  if (!v6)
    v6 = *((_QWORD *)a1 + 1);
  kaldi::SubMatrix<float>::SubMatrix(v9, v6, 1, *a1, *a1);
  kaldi::MatrixBase<float>::Write(v9, a2, a3, a3);
  v7 = *((_QWORD *)a1 + 4);
  if (!v7)
    v7 = *((_QWORD *)a1 + 3);
  kaldi::WriteIntegerByteArray<short>(a2, a3, a3, (int)a1[1] * (uint64_t)(int)*a1, v7);
  return kaldi::CuMatrixBase<float>::~CuMatrixBase(v9);
}

void sub_1DE40FAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a9);
  _Unwind_Resume(a1);
}

float kaldi::VectorwiseQuantizedMatrix<short>::Row@<S0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a1 + 32);
  if (!v5)
    v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
    v6 = *(_QWORD *)(a1 + 8);
  return kaldi::QuantizedSubVector<signed char>::QuantizedSubVector(a3, v5 + 2 * *(_DWORD *)(a1 + 4) * a2, *(_DWORD *)(a1 + 4), *(float *)(v6 + 4 * a2));
}

uint64_t kaldi::VectorwiseQuantizedMatrix<short>::AddMatMat(uint64_t a1, uint64_t a2, unsigned int *a3, float a4)
{
  int v8;
  uint64_t v9;
  const char *v10;
  uint64_t i;
  uint64_t v12;
  const char *v13;
  _BYTE v15[16];
  uint64_t v16[3];
  _BYTE v17[40];

  v8 = kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
  kaldi::Matrix<float>::Matrix(v17, a3, 112);
  if (v8)
  {
    for (i = 0; i != v8; ++i)
    {
      kaldi::MatrixBase<float>::Row((uint64_t)v17, i, v10, v16);
      kaldi::VectorwiseQuantizedMatrix<short>::Row(a1, i, (uint64_t)v15);
      kaldi::QuantizedVectorBase<short>::AddMatVec((uint64_t)v15, a2, (uint64_t)v16, a4, v12, v13);
    }
  }
  kaldi::MatrixBase<float>::CopyFromMat<float>(a3, (uint64_t)v17, 112, v9, v10);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v17);
}

void sub_1DE40FBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<signed char>::shrink_to_fit(unint64_t *a1)
{
  char *v1;
  unint64_t v2;
  char *v3;
  unint64_t v5;
  char *v6;
  char v7;

  v1 = (char *)a1[1];
  v2 = *a1;
  v3 = &v1[-*a1];
  if (a1[2] - *a1 > (unint64_t)v3)
  {
    if (v1 == (char *)v2)
    {
      v5 = (unint64_t)&v1[-*a1];
    }
    else
    {
      v5 = (unint64_t)operator new((size_t)&v1[-*a1]);
      v3 += v5;
      v6 = &v1[~v2];
      do
      {
        v7 = *--v1;
        (v6--)[v5] = v7;
      }
      while (v1 != (char *)v2);
      v2 = *a1;
    }
    *a1 = v5;
    a1[1] = (unint64_t)v3;
    a1[2] = (unint64_t)v3;
    if (v2)
      operator delete((void *)v2);
  }
}

void std::vector<signed char>::__append(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

_QWORD *std::vector<signed char>::__assign_with_size[abi:ne180100]<signed char *,signed char *>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<signed char>::__vallocate[abi:ne180100](v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v16 = a3 - __src;
    if (v16)
      result = memmove(v9, __src, v16);
    v15 = &v9[v16];
    goto LABEL_20;
  }
  v14 = &__src[v13];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v13);
    v9 = (char *)v7[1];
  }
  if (a3 != v14)
    result = memmove(v9, v14, a3 - v14);
  v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

char *std::vector<signed char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t kaldi::WriteIntegerByteArray<signed char>(_QWORD *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  const char *v9;
  int v10;
  uint64_t result;
  _QWORD *v12;
  std::runtime_error *exception;
  _QWORD v14[34];
  int v15;
  char v16;

  if (a2)
  {
    v16 = 1;
    std::ostream::write();
    if (a4 != (int)a4)
      kaldi::KaldiAssertFailure_((kaldi *)"WriteIntegerByteArray", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", (const char *)0xDD, "static_cast<size_t>(vecsz) == count", v9);
    if (a3)
      v10 = -(int)a4;
    else
      v10 = a4;
    v15 = v10;
    result = std::ostream::write();
    if ((_DWORD)a4)
    {
      if (a3 && (fst::AlignOutput(a1) & 1) == 0)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14, "WriteIntegerByteArray", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", 227);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "Could not align output");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
      }
      result = std::ostream::write();
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[ ", 2);
    for (; a4; --a4)
    {
      ++a5;
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
    }
    result = (uint64_t)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]\n", 2);
  }
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteIntegerType.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1DE4100B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<short>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int16 v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 1;
  if (v6 < (v3 - (uint64_t)v4) >> 1)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 2 * v6;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[2 * v6];
      v11 = &v7[2 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_WORD *)v8 - 1);
          v8 -= 2;
          *(_WORD *)(v12 - 2) = v13;
          v12 -= 2;
        }
        while (v8 != v4);
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

void std::vector<short>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    std::vector<short>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<short>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 1);
    if (v10 < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 1;
    v12 = v5 - v8;
    if (v12 > v10)
      v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v11];
    v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

char *std::vector<short>::__assign_with_size[abi:ne180100]<short *,short *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(_QWORD *)result) >> 1)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    if (v8 <= a4)
      v10 = a4;
    else
      v10 = v8;
    if (v8 >= 0x7FFFFFFFFFFFFFFELL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<short>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_17:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 1;
  if (v15 >= a4)
    goto LABEL_17;
  v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_19:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  *v12 = &v9[v17];
  return result;
}

uint64_t kaldi::WriteIntegerByteArray<short>(_QWORD *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  const char *v9;
  int v10;
  uint64_t result;
  _QWORD *v12;
  std::runtime_error *exception;
  _QWORD v14[34];
  int v15;
  char v16;

  if (a2)
  {
    v16 = 2;
    std::ostream::write();
    if (a4 != (int)a4)
      kaldi::KaldiAssertFailure_((kaldi *)"WriteIntegerByteArray", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", (const char *)0xDD, "static_cast<size_t>(vecsz) == count", v9);
    if (a3)
      v10 = -(int)a4;
    else
      v10 = a4;
    v15 = v10;
    result = std::ostream::write();
    if ((_DWORD)a4)
    {
      if (a3 && (fst::AlignOutput(a1) & 1) == 0)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14, "WriteIntegerByteArray", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", 227);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "Could not align output");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
      }
      result = std::ostream::write();
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[ ", 2);
    for (; a4; --a4)
    {
      a5 += 2;
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
    }
    result = (uint64_t)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]\n", 2);
  }
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteIntegerType.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1DE41055C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0()
{
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
    OUTLINED_FUNCTION_0();
  return result;
}

float kaldi::QuantizedSubVector<signed char>::QuantizedSubVector(uint64_t a1, uint64_t a2, int a3, float a4)
{
  float result;

  *(_DWORD *)(a1 + 8) = a3;
  *(_QWORD *)a1 = a2;
  result = 1.0 / a4;
  *(float *)(a1 + 12) = result;
  return result;
}

void kaldi::QuantizedVectorBase<signed char>::AddMatVec(uint64_t a1, uint64_t a2, uint64_t a3, float a4, uint64_t a5, const char *a6)
{
  unint64_t v9;
  float32x4_t *v10;
  int v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x8_t v24;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  int v37;
  float v38;
  float v39;
  uint64_t v40;
  unint64_t v41;
  _OWORD v42[2];
  _OWORD v43[2];
  _OWORD v44[2];
  _OWORD v45[2];
  float32x4_t *v46;

  if (a4 != 1.0)
    kaldi::VectorBase<float>::Scale(a3, a4);
  v41 = *(int *)(a3 + 8);
  v9 = 0;
  if ((v41 & 0xFFFFFFFFFFFFFFFCLL) != 0)
  {
    do
    {
      if (*(_DWORD *)(a2 + 12) <= v9)
        kaldi::KaldiAssertFailure_((kaldi *)"RowData", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xC3, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a6);
      v10 = (float32x4_t *)(*(_QWORD *)a2 + 4 * *(_DWORD *)(a2 + 16) * (int)v9);
      v11 = kaldi::MatrixBase<float>::Stride(a2);
      v12 = *(char **)a1;
      v13 = *(int *)(a1 + 8);
      v14 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v15 = 0;
        v16 = 0uLL;
        v17 = 0uLL;
        v18 = 0uLL;
        v19 = 0uLL;
        v20 = 0uLL;
        v21 = 0uLL;
        v22 = 0uLL;
        v23 = 0uLL;
        do
        {
          v24 = *(int8x8_t *)&v12[v15];
          v25 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v24, *(int8x8_t *)v22.f32), 8uLL), 8uLL)));
          v26 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v24, *(int8x8_t *)v22.f32), 8uLL), 8uLL)));
          v23 = vmlaq_f32(v23, v26, v10[1]);
          v22 = vmlaq_f32(v22, v25, *v10);
          v21 = vmlaq_f32(v21, v26, *(float32x4_t *)((char *)v10 + 4 * v11 + 16));
          v20 = vmlaq_f32(v20, v25, *(float32x4_t *)((char *)v10 + 4 * v11));
          v19 = vmlaq_f32(v19, v26, *(float32x4_t *)((char *)v10 + 8 * v11 + 16));
          v18 = vmlaq_f32(v18, v25, *(float32x4_t *)((char *)v10 + 8 * v11));
          v17 = vmlaq_f32(v17, v26, *(float32x4_t *)((char *)v10 + 12 * v11 + 16));
          v16 = vmlaq_f32(v16, v25, *(float32x4_t *)((char *)v10 + 12 * v11));
          v10 += 2;
          v15 += 8;
        }
        while (v15 < v14);
        v14 = ((v14 - 1) & 0xFFFFFFFFFFFFFFF8) + 8;
        v12 += v15;
      }
      else
      {
        v22 = 0uLL;
        v23 = 0uLL;
        v20 = 0uLL;
        v21 = 0uLL;
        v18 = 0uLL;
        v19 = 0uLL;
        v16 = 0uLL;
        v17 = 0uLL;
      }
      v27 = 0;
      v28 = (float *)(*(_QWORD *)a3 + 4 * v9);
      v29 = *(float *)(a1 + 12);
      v30 = 0.0;
      v31 = 0.0;
      v32 = 0.0;
      v33 = 0.0;
      do
      {
        v45[0] = v22;
        v45[1] = v23;
        v34 = 4 * (v27 & 7);
        v33 = *(float *)((char *)v45 + v34) + v33;
        v44[0] = v20;
        v44[1] = v21;
        v32 = *(float *)((char *)v44 + v34) + v32;
        v43[0] = v18;
        v43[1] = v19;
        v31 = *(float *)((char *)v43 + v34) + v31;
        v42[0] = v16;
        v42[1] = v17;
        v30 = v30 + *(float *)((char *)v42 + v34);
        ++v27;
      }
      while (v27 != 8);
      v35 = v13 > v14;
      v36 = v13 - v14;
      if (v35)
      {
        do
        {
          v37 = *v12++;
          v33 = v33 + (float)(v10->f32[0] * (float)v37);
          v32 = v32 + (float)(v10->f32[v11] * (float)v37);
          v31 = v31 + (float)(v10->f32[2 * v11] * (float)v37);
          v30 = v30 + (float)(v10->f32[3 * v11] * (float)v37);
          v10 = (float32x4_t *)((char *)v10 + 4);
          --v36;
        }
        while (v36);
      }
      v38 = v28[1] + (float)(v32 * v29);
      *v28 = *v28 + (float)(v33 * v29);
      v28[1] = v38;
      v39 = v28[3] + (float)(v30 * v29);
      v28[2] = v28[2] + (float)(v31 * v29);
      v28[3] = v39;
      v9 += 4;
    }
    while (v9 < (v41 & 0xFFFFFFFFFFFFFFFCLL));
  }
  if (v9 < v41)
  {
    v40 = 4 * v9;
    do
    {
      kaldi::MatrixBase<float>::Row(a2, v9, a6, (uint64_t *)&v46);
      kaldi::VecVecOne<signed char>(v46, *(char **)a1, (float *)(*(_QWORD *)a3 + v40), *(int *)(a1 + 8), *(float *)(a1 + 12));
      ++v9;
      v40 += 4;
    }
    while (v41 != v9);
  }
}

float kaldi::VecVecOne<signed char>(float32x4_t *a1, char *a2, float *a3, unint64_t a4, float a5)
{
  unint64_t v5;
  unint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  int16x8_t v12;
  int16x8_t v13;
  float32x4_t v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  int v19;
  float result;

  v5 = a4 & 0xFFFFFFFFFFFFFFF0;
  if ((a4 & 0xFFFFFFFFFFFFFFF0) != 0)
  {
    v6 = 0;
    v7 = 0uLL;
    v8 = 0uLL;
    v9 = 0uLL;
    v10 = 0uLL;
    do
    {
      v11 = *(int8x16_t *)&a2[v6];
      v12 = vmovl_s8(*(int8x8_t *)v11.i8);
      v13 = vmovl_high_s8(v11);
      v7 = vmlaq_f32(v7, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v12.i8)), *a1);
      v8 = vmlaq_f32(v8, vcvtq_f32_s32(vmovl_high_s16(v12)), a1[1]);
      v9 = vmlaq_f32(v9, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v13.i8)), a1[2]);
      v10 = vmlaq_f32(v10, vcvtq_f32_s32(vmovl_high_s16(v13)), a1[3]);
      a1 += 4;
      v6 += 16;
    }
    while (v6 < v5);
    v5 = ((v5 - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
    v14 = vaddq_f32(vaddq_f32(v10, v9), vaddq_f32(v8, v7));
    a2 += v6;
  }
  else
  {
    v14 = 0uLL;
  }
  v15 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v14, v14));
  v16 = a4 - v5;
  if (a4 > v5)
  {
    do
    {
      v17 = a1->f32[0];
      a1 = (float32x4_t *)((char *)a1 + 4);
      v18 = v17;
      v19 = *a2++;
      v15 = v15 + (float)(v18 * (float)v19);
      --v16;
    }
    while (v16);
  }
  result = *a3 + (float)(v15 * a5);
  *a3 = result;
  return result;
}

float kaldi::QuantizedVectorBase<signed char>::VecVec(uint64_t a1, float32x4_t **a2)
{
  float v3;

  v3 = 0.0;
  kaldi::VecVecOne<signed char>(*a2, *(char **)a1, &v3, *(int *)(a1 + 8), *(float *)(a1 + 12));
  return v3;
}

void kaldi::QuantizedVectorBase<short>::AddMatVec(uint64_t a1, uint64_t a2, uint64_t a3, float a4, uint64_t a5, const char *a6)
{
  unint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  int v12;
  int16x8_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t *v25;
  float32x4_t *v26;
  int16x8_t v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  unint64_t v33;
  __int32 *v34;
  __int32 *v35;
  __int32 *v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  BOOL v43;
  unint64_t v44;
  int v45;
  int v46;
  __int32 v47;
  float32x4_t v48;
  __int32 v49;
  uint64_t v50;
  uint64_t v51[3];

  if (a4 != 1.0)
    kaldi::VectorBase<float>::Scale(a3, a4);
  v9 = *(int *)(a3 + 8);
  v10 = 0;
  if ((v9 & 0xFFFFFFFFFFFFFFFCLL) != 0)
  {
    do
    {
      if (*(_DWORD *)(a2 + 12) <= v10)
        kaldi::KaldiAssertFailure_((kaldi *)"RowData", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xC3, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a6);
      v11 = (_OWORD *)(*(_QWORD *)a2 + 4 * *(_DWORD *)(a2 + 16) * (int)v10);
      v12 = kaldi::MatrixBase<float>::Stride(a2);
      v13 = *(int16x8_t **)a1;
      v14 = *(int *)(a1 + 8);
      v15 = v14 & 0xFFFFFFFFFFFFFFF8;
      if ((v14 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v16 = 0;
        v17 = v12;
        v18 = 4 * v12;
        v19 = 12 * v12;
        v20 = 8 * v12;
        v21 = 0uLL;
        v22 = 0uLL;
        v23 = 0uLL;
        v24 = 0uLL;
        do
        {
          v25 = (float32x4_t *)((char *)v11 + v18);
          v26 = (float32x4_t *)((char *)v11 + v19);
          v27 = *v13++;
          v28 = (float32x4_t *)((char *)v11 + v20);
          v29 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v27.i8));
          v30 = vcvtq_f32_s32(vmovl_high_s16(v27));
          v31 = *(float32x4_t *)v11;
          v32 = *((float32x4_t *)v11 + 1);
          v11 += 2;
          v21 = vmlaq_f32(vmlaq_f32(v21, v29, v31), v30, v32);
          v22 = vmlaq_f32(vmlaq_f32(v22, v29, *v25), v30, v25[1]);
          v23 = vmlaq_f32(vmlaq_f32(v23, v29, *v28), v30, v28[1]);
          v24 = vmlaq_f32(vmlaq_f32(v24, v29, *v26), v30, v26[1]);
          v16 += 8;
        }
        while (v16 < v15);
        v33 = ((v15 - 1) & 0xFFFFFFFFFFFFFFF8) + 8;
        v34 = (__int32 *)v11 + v17;
        v35 = (__int32 *)v11 + 2 * v17;
        v36 = (__int32 *)v11 + 3 * (int)v17;
      }
      else
      {
        v33 = 0;
        v34 = (__int32 *)v11 + v12;
        v36 = (__int32 *)v11 + 3 * v12;
        v24 = 0uLL;
        v23 = 0uLL;
        v22 = 0uLL;
        v21 = 0uLL;
        v35 = (__int32 *)v11 + 2 * v12;
      }
      v37 = vzip1q_s32((int32x4_t)v21, (int32x4_t)v22);
      v38 = vzip2q_s32((int32x4_t)v21, (int32x4_t)v22);
      v39 = vzip1q_s32((int32x4_t)v23, (int32x4_t)v24);
      v40 = vzip2q_s32((int32x4_t)v23, (int32x4_t)v24);
      v41 = (int32x4_t)vaddq_f32(vaddq_f32((float32x4_t)vzip1q_s32(v37, v39), (float32x4_t)vzip2q_s32(v37, v39)), vaddq_f32((float32x4_t)vzip1q_s32(v38, v40), (float32x4_t)vzip2q_s32(v38, v40)));
      v42 = (float32x4_t)vuzp1q_s32(v41, vrev64q_s32(v41));
      v43 = v14 > v33;
      v44 = v14 - v33;
      if (v43)
      {
        do
        {
          v46 = v13->i16[0];
          v13 = (int16x8_t *)((char *)v13 + 2);
          v45 = v46;
          v47 = *(_DWORD *)v11;
          v11 = (_OWORD *)((char *)v11 + 4);
          v48.i32[0] = v47;
          v49 = *v36++;
          v48.i32[1] = *v34++;
          v48.i32[2] = *v35++;
          v48.i32[3] = v49;
          v42 = vmlaq_n_f32(v42, v48, (float)v45);
          --v44;
        }
        while (v44);
      }
      *(float32x4_t *)(*(_QWORD *)a3 + 4 * v10) = vmlaq_n_f32(*(float32x4_t *)(*(_QWORD *)a3 + 4 * v10), v42, *(float *)(a1 + 12));
      v10 += 4;
    }
    while (v10 < (v9 & 0xFFFFFFFFFFFFFFFCLL));
  }
  if (v10 < v9)
  {
    v50 = 4 * v10;
    do
    {
      kaldi::MatrixBase<float>::Row(a2, v10, a6, v51);
      kaldi::VecVecOne<short>((_OWORD *)v51[0], *(int16x8_t **)a1, (float *)(*(_QWORD *)a3 + v50), *(int *)(a1 + 8), *(float *)(a1 + 12));
      ++v10;
      v50 += 4;
    }
    while (v9 != v10);
  }
}

float kaldi::VecVecOne<short>(_OWORD *a1, int16x8_t *a2, float *a3, unint64_t a4, float a5)
{
  unint64_t v5;
  unint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int16x8_t v10;
  float v11;
  BOOL v12;
  unint64_t v13;
  float v14;
  float v15;
  int v16;
  float result;

  v5 = a4 & 0xFFFFFFFFFFFFFFF8;
  if ((a4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v6 = 0;
    v7 = 0uLL;
    do
    {
      v8 = *(float32x4_t *)a1;
      v9 = *((float32x4_t *)a1 + 1);
      a1 += 2;
      v10 = *a2++;
      v7 = vmlaq_f32(vmlaq_f32(v7, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v10.i8)), v8), vcvtq_f32_s32(vmovl_high_s16(v10)), v9);
      v6 += 8;
    }
    while (v6 < v5);
    v5 = ((v5 - 1) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else
  {
    v7 = 0uLL;
  }
  LODWORD(v11) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1)))).u32[0];
  v12 = a4 >= v5;
  v13 = a4 - v5;
  if (v13 != 0 && v12)
  {
    do
    {
      v14 = *(float *)a1;
      a1 = (_OWORD *)((char *)a1 + 4);
      v15 = v14;
      v16 = a2->i16[0];
      a2 = (int16x8_t *)((char *)a2 + 2);
      v11 = v11 + (float)(v15 * (float)v16);
      --v13;
    }
    while (v13);
  }
  result = *a3 + (float)(v11 * a5);
  *a3 = result;
  return result;
}

float kaldi::QuantizedVectorBase<short>::VecVec(uint64_t a1, _OWORD **a2)
{
  float v3;

  v3 = 0.0;
  kaldi::VecVecOne<short>(*a2, *(int16x8_t **)a1, &v3, *(int *)(a1 + 8), *(float *)(a1 + 12));
  return v3;
}

float kaldi::VecVec<signed char>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"VecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x63, "a.Dim() == b.Dim()", a5);
  return kaldi::QuantizedVectorBase<signed char>::VecVec(a2, (float32x4_t **)a1);
}

float kaldi::VecVec<short>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"VecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x63, "a.Dim() == b.Dim()", a5);
  return kaldi::QuantizedVectorBase<short>::VecVec(a2, (_OWORD **)a1);
}

float kaldi::VectorBase<float>::CopyFromVec<double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  float *v6;
  double *v7;
  double v8;
  float result;

  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"CopyFromVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x154, "dim_ == other.Dim()", a5);
  if ((int)v5 >= 1)
  {
    v6 = *(float **)a1;
    v7 = *(double **)a2;
    do
    {
      v8 = *v7++;
      result = v8;
      *v6++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

void *kaldi::VectorBase<float>::CopyFromVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  void *result;
  const void *v7;

  v5 = *(int *)(a1 + 8);
  if ((_DWORD)v5 != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"CopyFromVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x12D, "Dim() == v.Dim()", a5);
  result = *(void **)a1;
  v7 = *(const void **)a2;
  if (result != v7)
    return memcpy(result, v7, 4 * v5);
  return result;
}

void *kaldi::VectorBase<double>::CopyFromVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  void *result;
  const void *v7;

  v5 = *(int *)(a1 + 8);
  if ((_DWORD)v5 != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"CopyFromVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x12D, "Dim() == v.Dim()", a5);
  result = *(void **)a1;
  v7 = *(const void **)a2;
  if (result != v7)
    return memcpy(result, v7, 8 * v5);
  return result;
}

double kaldi::VectorBase<double>::CopyFromVec<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  double *v6;
  float *v7;
  float v8;
  double result;

  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"CopyFromVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x154, "dim_ == other.Dim()", a5);
  if ((int)v5 >= 1)
  {
    v6 = *(double **)a1;
    v7 = *(float **)a2;
    do
    {
      v8 = *v7++;
      result = v8;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void kaldi::VectorBase<float>::CopyRowsFromMat<signed char>(uint64_t *a1, unsigned int *a2)
{
  int v4;
  int v5;
  const char *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  const char *v11;
  int v12;
  unsigned int i;
  uint64_t j;

  v4 = *((_DWORD *)a1 + 2);
  v5 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  if (v4 != kaldi::QuantizedMatrixBase<short>::NumRows(a2) * v5)
    kaldi::KaldiAssertFailure_((kaldi *)"CopyRowsFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x1CE, "dim_ == mat.NumCols() * mat.NumRows()", v6);
  v7 = *a1;
  v8 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  v9 = kaldi::QuantizedMatrixBase<short>::NumRows(a2);
  if (v9 >= 1)
  {
    v12 = v9;
    for (i = 0; i != v12; ++i)
    {
      if (v8 >= 1)
      {
        for (j = 0; j != v8; ++j)
          *(float *)(v7 + 4 * j) = kaldi::QuantizedMatrixBase<signed char>::operator()((uint64_t)a2, i, j, v10, v11);
      }
      v7 += 4 * v8;
    }
  }
}

void kaldi::VectorBase<float>::CopyRowsFromMat<short>(uint64_t *a1, unsigned int *a2)
{
  int v4;
  int v5;
  const char *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  const char *v11;
  int v12;
  unsigned int i;
  uint64_t j;

  v4 = *((_DWORD *)a1 + 2);
  v5 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  if (v4 != kaldi::QuantizedMatrixBase<short>::NumRows(a2) * v5)
    kaldi::KaldiAssertFailure_((kaldi *)"CopyRowsFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x1CE, "dim_ == mat.NumCols() * mat.NumRows()", v6);
  v7 = *a1;
  v8 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  v9 = kaldi::QuantizedMatrixBase<short>::NumRows(a2);
  if (v9 >= 1)
  {
    v12 = v9;
    for (i = 0; i != v12; ++i)
    {
      if (v8 >= 1)
      {
        for (j = 0; j != v8; ++j)
          *(float *)(v7 + 4 * j) = kaldi::QuantizedMatrixBase<short>::operator()((uint64_t)a2, i, j, v10, v11);
      }
      v7 += 4 * v8;
    }
  }
}

void kaldi::VectorBase<float>::CopyColFromMat<float>(uint64_t a1, uint64_t a2, signed int a3)
{
  const char *v6;
  int v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;

  if ((int)kaldi::MatrixBase<float>::NumCols(a2) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"CopyColFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x315, "col < mat.NumCols()", v6);
  v7 = *(_DWORD *)(a1 + 8);
  if (v7 != kaldi::MatrixBase<float>::NumRows(a2))
    kaldi::KaldiAssertFailure_((kaldi *)"CopyColFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x316, "dim_ == mat.NumRows()", v9);
  if (*(int *)(a1 + 8) >= 1)
  {
    v10 = 0;
    do
    {
      *(float *)(*(_QWORD *)a1 + 4 * v10) = kaldi::MatrixBase<float>::operator()(a2, v10, a3, v8, v9);
      ++v10;
    }
    while (v10 < *(int *)(a1 + 8));
  }
}

void kaldi::VectorBase<float>::AddMatVec(uint64_t a1, const float **a2, CBLAS_TRANSPOSE a3, uint64_t a4, const char *a5, float a6, float a7)
{
  int v13;
  int v14;
  int v15;
  const float *v16;
  int v17;

  if (a3 == CblasTrans)
  {
    if (kaldi::MatrixBase<float>::NumRows((uint64_t)a2) != *(_DWORD *)(a4 + 8))
      goto LABEL_10;
    v13 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
  }
  else
  {
    if (a3 != CblasNoTrans || kaldi::MatrixBase<float>::NumCols((uint64_t)a2) != *(_DWORD *)(a4 + 8))
LABEL_10:
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x89, "(trans == kNoTrans && M.NumCols() == v.dim_ && M.NumRows() == dim_) || (trans == kTrans && M.NumRows() == v.dim_ && M.NumCols() == dim_)", a5);
    v13 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  }
  if (v13 != *(_DWORD *)(a1 + 8))
    goto LABEL_10;
  if (a4 == a1)
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x8A, "&v != this", a5);
  v14 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  v15 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
  v16 = *a2;
  v17 = kaldi::MatrixBase<float>::Stride((uint64_t)a2);
  cblas_sgemv(CblasRowMajor, a3, v14, v15, a6, v16, v17, *(const float **)a4, 1, a7, *(float **)a1, 1);
}

void kaldi::Vector<float>::Resize(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  int v7;
  char *v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  char *v15;
  void *__dst;
  char *v17;
  uint64_t v18;

  v5 = a2;
  if ((_DWORD)a3 != 2)
  {
    v7 = a3;
    if ((_DWORD)a3 == 3)
    {
      v8 = (char *)*a1;
      if (!*a1)
      {
        kaldi::Vector<float>::Init(a1, a2, a3, a4, a5);
LABEL_22:
        v8 = (char *)*a1;
        v11 = 4 * *((int *)a1 + 2);
LABEL_23:
        bzero(v8, v11);
        return;
      }
      if (*((_DWORD *)a1 + 2) == (_DWORD)a2)
        return;
      v7 = 0;
      goto LABEL_13;
    }
    v8 = (char *)*a1;
LABEL_12:
    if (!v8)
      goto LABEL_16;
LABEL_13:
    if (*((_DWORD *)a1 + 3) >= (int)a2)
    {
      *((_DWORD *)a1 + 2) = a2;
    }
    else if (*((_DWORD *)a1 + 2) != (_DWORD)a2)
    {
      free(v8);
      *a1 = 0;
      a1[1] = 0;
LABEL_16:
      kaldi::Vector<float>::Init(a1, v5, a3, a4, a5);
      if (v7)
        return;
      goto LABEL_22;
    }
    if (v7)
      return;
    v11 = 4 * (int)a2;
    goto LABEL_23;
  }
  v7 = 0;
  v8 = (char *)*a1;
  if (!(_DWORD)a2 || !v8)
    goto LABEL_12;
  if (*((_DWORD *)a1 + 3) >= (int)a2)
  {
    v12 = *((int *)a1 + 2);
    if ((int)a2 > (int)v12)
      bzero(&v8[4 * v12], 4 * ((int)a2 - (int)v12));
    *((_DWORD *)a1 + 2) = v5;
  }
  else
  {
    __dst = 0;
    v17 = 0;
    v18 = 0;
    kaldi::Vector<float>::Resize(&__dst, a2, 1);
    v9 = *((int *)a1 + 2);
    v10 = *a1;
    if ((int)v9 >= v5)
    {
      memcpy(__dst, v10, 4 * v5);
    }
    else
    {
      memcpy(__dst, v10, 4 * v9);
      bzero((char *)__dst + 4 * *((int *)a1 + 2), 4 * (v5 - *((_DWORD *)a1 + 2)));
    }
    v13 = (char *)__dst;
    __dst = *a1;
    v14 = __dst;
    *a1 = v13;
    v15 = v17;
    v17 = (char *)a1[1];
    a1[1] = v15;
    if (v14)
      free(v14);
  }
}

void kaldi::Vector<float>::Destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
    free(v2);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
}

void kaldi::Vector<float>::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  int v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  int v20;
  void *v21;
  uint64_t v22;
  const char *v23;
  void **v24;
  uint64_t v25;
  const char *v26;
  _QWORD *v27;
  std::string *v28;
  std::string::size_type size;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  int data;
  _QWORD *v38;
  uint64_t *v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  std::string *v54;
  std::string *v55;
  std::string *v56;
  std::string *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  int *v72;
  unint64_t v73;
  _DWORD *v74;
  int v75;
  unsigned int v76;
  _QWORD *v78;
  std::string *v79;
  std::string::size_type v80;
  _QWORD *v81;
  _QWORD *v82;
  void *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  const char *v88;
  float v89;
  void *v90;
  char *v91;
  char *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  void *__p;
  char v97;
  uint64_t v98;
  std::string v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a4)
  {
    v8 = *(unsigned int *)(a1 + 8);
    v94 = 0;
    v95 = 0;
    v93 = 0;
    kaldi::Vector<float>::Resize(&v93, v8, 0, a4, a5);
    kaldi::Vector<float>::Read(&v93, a2, a3, 0);
    v12 = *(_DWORD *)(a1 + 8);
    if (!v12)
    {
      kaldi::Vector<float>::Resize((void **)a1, v94, 0, v10, v11);
      v12 = *(_DWORD *)(a1 + 8);
    }
    if (v12 != (_DWORD)v94)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v100, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1378);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v100, (uint64_t)"Vector<Real>::Read, adding but dimensions mismatch ", 51);
      v81 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)" vs. ", 5);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v100);
    }
    kaldi::VectorBase<float>::AddVec<float>(a1, (uint64_t)&v93, 1.0, v9, v10, v11);
    if (v93)
      free(v93);
    return;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v93);
  std::istream::tellg();
  if ((_DWORD)a3)
  {
    if (kaldi::Peek(a2, 1) == 68)
    {
      v15 = *(unsigned int *)(a1 + 8);
      v101 = 0;
      v102 = 0;
      v100 = 0;
      kaldi::Vector<double>::Resize(&v100, v15, 0, v13, v14);
      kaldi::Vector<double>::Read((uint64_t)&v100, a2, 1, 0, v16);
      if (*(_DWORD *)(a1 + 8) != (_DWORD)v101)
        kaldi::Vector<float>::Resize((void **)a1, v101, 0, v18, v19);
      kaldi::VectorBase<float>::CopyFromVec<double>(a1, (uint64_t)&v100, v17, v18, v19);
      if (v100)
        free(v100);
      goto LABEL_45;
    }
    v100 = 0;
    v101 = 0;
    v102 = 0;
    kaldi::ReadToken(a2, 1, (uint64_t)&v100, v13, v14);
    if (SHIBYTE(v102) < 0)
    {
      if (v101 != 2)
        goto LABEL_33;
      v24 = (void **)v100;
    }
    else
    {
      if (SHIBYTE(v102) != 2)
        goto LABEL_33;
      v24 = &v100;
    }
    if (*(_WORD *)v24 == 22086)
    {
      LODWORD(v99.__r_.__value_.__l.__data_) = 0;
      kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v99, v22, v23);
      data = (int)v99.__r_.__value_.__l.__data_;
      if (LODWORD(v99.__r_.__value_.__l.__data_) != *(_DWORD *)(a1 + 8))
      {
        kaldi::Vector<float>::Resize((void **)a1, LODWORD(v99.__r_.__value_.__l.__data_), 0, v35, v36);
        data = (int)v99.__r_.__value_.__l.__data_;
      }
      if (data >= 1)
        std::istream::read();
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
      {
        v20 = 1;
LABEL_41:
        if (SHIBYTE(v102) < 0)
        {
          v21 = v100;
LABEL_43:
          operator delete(v21);
        }
        goto LABEL_44;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)"Error reading vector data (binary mode); truncated stream? (size = ",
        67);
      v38 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)")", 1);
LABEL_40:
      v20 = 2;
      goto LABEL_41;
    }
LABEL_33:
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)": Expected token ", 17);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"FV", 2);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", got ", 6);
    if (v102 >= 0)
      v33 = &v100;
    else
      v33 = (void **)v100;
    if (v102 >= 0)
      v34 = HIBYTE(v102);
    else
      v34 = v101;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
    goto LABEL_40;
  }
  memset(&v99, 0, sizeof(v99));
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v99);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)"EOF while trying to read vector.", 32);
LABEL_15:
    v20 = 2;
    goto LABEL_16;
  }
  if (!std::string::compare(&v99, "[]"))
  {
    kaldi::Vector<float>::Resize((void **)a1, 0, 0, v25, v26);
    v20 = 1;
    goto LABEL_16;
  }
  if (std::string::compare(&v99, "["))
  {
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)"Expected \"[\" but got ", 21);
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v99;
    else
      v28 = (std::string *)v99.__r_.__value_.__r.__words[0];
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v99.__r_.__value_.__r.__words[2]);
    else
      size = v99.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, size);
    goto LABEL_15;
  }
  v39 = a2 + 4;
  v90 = 0;
  v91 = 0;
  v87 = 22;
  v88 = "Failed to read number.";
  v92 = 0;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v40 = std::istream::peek();
        if ((v40 - 48) > 9)
          break;
        LODWORD(v100) = 0;
        MEMORY[0x1DF0ECC24](a2, &v100);
        if ((*((_BYTE *)v39 + *(_QWORD *)(*a2 - 24)) & 5) != 0)
          goto LABEL_142;
        v41 = std::istream::peek();
        if (v41 <= 0x7F)
        {
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v41 + 60) & 0x4000) != 0)
            goto LABEL_71;
        }
        else if (__maskrune(v41, 0x4000uLL))
        {
          goto LABEL_71;
        }
        if (std::istream::peek() != 93)
        {
          v87 = 33;
          v88 = "Expected whitespace after number.";
          goto LABEL_142;
        }
LABEL_71:
        v44 = v91;
        if (v91 >= v92)
        {
          v46 = (char *)v90;
          v47 = (v91 - (_BYTE *)v90) >> 2;
          v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v49 = v92 - (_BYTE *)v90;
          if ((v92 - (_BYTE *)v90) >> 1 > v48)
            v48 = v49 >> 1;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
            v50 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v50 = v48;
          if (v50)
          {
            v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v92, v50);
            v46 = (char *)v90;
            v44 = v91;
          }
          else
          {
            v51 = 0;
          }
          v52 = &v51[4 * v47];
          *(_DWORD *)v52 = (_DWORD)v100;
          v45 = v52 + 4;
          while (v44 != v46)
          {
            v53 = *((_DWORD *)v44 - 1);
            v44 -= 4;
            *((_DWORD *)v52 - 1) = v53;
            v52 -= 4;
          }
          v90 = v52;
          v91 = v45;
          v92 = &v51[4 * v50];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *(_DWORD *)v91 = (_DWORD)v100;
          v45 = v44 + 4;
        }
        v91 = v45;
      }
      if (v40 > 31)
        break;
      if (v40 > 9)
      {
        if (v40 == 10 || v40 == 13)
        {
          v68 = "Newline found while reading vector (maybe it's a matrix?)";
          v69 = 57;
LABEL_158:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)v68, v69);
          goto LABEL_159;
        }
LABEL_100:
        std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v99);
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
        {
          v56 = (std::string *)v99.__r_.__value_.__r.__words[0];
          if (!strcasecmp(v99.__r_.__value_.__l.__data_, "inf"))
            goto LABEL_109;
          v57 = v56;
        }
        else
        {
          if (!strcasecmp((const char *)&v99, "inf"))
            goto LABEL_109;
          v56 = &v99;
          v57 = &v99;
        }
        if (!strcasecmp((const char *)v57, "infinity"))
        {
LABEL_109:
          v58 = v91;
          if (v91 >= v92)
          {
            v60 = (char *)v90;
            v61 = (v91 - (_BYTE *)v90) >> 2;
            v62 = v61 + 1;
            if ((unint64_t)(v61 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v63 = v92 - (_BYTE *)v90;
            if ((v92 - (_BYTE *)v90) >> 1 > v62)
              v62 = v63 >> 1;
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
              v64 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v64 = v62;
            if (v64)
            {
              v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v92, v64);
              v60 = (char *)v90;
              v58 = v91;
            }
            else
            {
              v65 = 0;
            }
            v66 = &v65[4 * v61];
            *(_DWORD *)v66 = 2139095040;
            v59 = v66 + 4;
            while (v58 != v60)
            {
              v67 = *((_DWORD *)v58 - 1);
              v58 -= 4;
              *((_DWORD *)v66 - 1) = v67;
              v66 -= 4;
            }
            v90 = v66;
            v91 = v59;
            v92 = &v65[4 * v64];
            if (v60)
              operator delete(v60);
          }
          else
          {
            *(_DWORD *)v91 = 2139095040;
            v59 = v58 + 4;
          }
          v91 = v59;
          if (kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v100, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1496);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v100, (uint64_t)"Reading infinite value into vector.", 35);
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v100);
          }
        }
        else
        {
          if (strcasecmp((const char *)v56, "nan"))
            goto LABEL_162;
          LODWORD(v100) = 2143289344;
          std::vector<float>::push_back[abi:ne180100]((uint64_t)&v90, &v100);
          if (kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v100, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1499);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v100, (uint64_t)"Reading NaN value into vector.", 30);
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v100);
          }
        }
      }
      else
      {
        if (v40 != 9)
        {
          if (v40 == -1)
          {
            v68 = "EOF while reading vector data.";
            v69 = 30;
            goto LABEL_158;
          }
          goto LABEL_100;
        }
LABEL_83:
        std::istream::get();
      }
    }
    if (v40 == 32)
      goto LABEL_83;
    if (v40 != 45)
      break;
    std::istream::get();
    if (std::istream::peek() - 48 > 9)
    {
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v99);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      {
        v54 = (std::string *)v99.__r_.__value_.__r.__words[0];
        if (!strcasecmp(v99.__r_.__value_.__l.__data_, "inf"))
          goto LABEL_129;
        v55 = v54;
LABEL_125:
        if (!strcasecmp((const char *)v55, "infinity"))
          goto LABEL_129;
        if (strcasecmp((const char *)v54, "nan"))
        {
LABEL_162:
          v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)"Expecting numeric vector data, got ", 35);
          if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v79 = &v99;
          else
            v79 = (std::string *)v99.__r_.__value_.__r.__words[0];
          if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v80 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
          else
            v80 = v99.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)v79, v80);
          goto LABEL_159;
        }
        LODWORD(v100) = -4194304;
        std::vector<float>::push_back[abi:ne180100]((uint64_t)&v90, &v100);
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v100, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1462);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v100, (uint64_t)"Reading negative NaN value into vector.", 39);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v100);
        }
      }
      else
      {
        if (strcasecmp((const char *)&v99, "inf"))
        {
          v54 = &v99;
          v55 = &v99;
          goto LABEL_125;
        }
LABEL_129:
        LODWORD(v100) = -8388608;
        std::vector<float>::push_back[abi:ne180100]((uint64_t)&v90, &v100);
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v100, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1459);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v100, (uint64_t)"Reading negative infinite value into vector.", 44);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v100);
        }
      }
    }
    else
    {
      LODWORD(v100) = 0;
      MEMORY[0x1DF0ECC24](a2, &v100);
      if ((*((_BYTE *)v39 + *(_QWORD *)(*a2 - 24)) & 5) != 0)
        goto LABEL_142;
      v42 = std::istream::peek();
      if (v42 <= 0x7F)
        v43 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v42 + 60) & 0x4000;
      else
        v43 = __maskrune(v42, 0x4000uLL);
      if (!v43 && std::istream::peek() != 93)
      {
        v87 = 33;
        v88 = "Expected whitespace after number.";
LABEL_142:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)v88, v87);
LABEL_159:
        v20 = 2;
        goto LABEL_160;
      }
      v89 = -*(float *)&v100;
      std::vector<float>::push_back[abi:ne180100]((uint64_t)&v90, &v89);
    }
  }
  if (v40 != 93)
    goto LABEL_100;
  std::istream::get();
  kaldi::Vector<float>::Resize((void **)a1, (unint64_t)(v91 - (_BYTE *)v90) >> 2, 0, v70, v71);
  v72 = (int *)v90;
  if (v91 != v90)
  {
    v73 = (v91 - (_BYTE *)v90) >> 2;
    v74 = *(_DWORD **)a1;
    if (v73 <= 1)
      v73 = 1;
    do
    {
      v75 = *v72++;
      *v74++ = v75;
      --v73;
    }
    while (v73);
  }
  v76 = std::istream::peek() << 24;
  if (v76 == 167772160)
  {
LABEL_150:
    std::istream::get();
  }
  else if (v76 == 218103808)
  {
    std::istream::get();
    goto LABEL_150;
  }
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v100, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1481);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v100, (uint64_t)"After end of vector data, read error.", 37);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v100);
  }
  v20 = 1;
LABEL_160:
  if (v90)
  {
    v91 = (char *)v90;
    operator delete(v90);
  }
LABEL_16:
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
  {
    v21 = (void *)v99.__r_.__value_.__r.__words[0];
    goto LABEL_43;
  }
LABEL_44:
  if (v20 == 2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v100, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1509);
    v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v100, (uint64_t)"Failed to read vector from stream.  ", 36);
    std::stringbuf::str();
    if (SHIBYTE(v92) >= 0)
      v83 = &v90;
    else
      v83 = v90;
    if (SHIBYTE(v92) >= 0)
      v84 = HIBYTE(v92);
    else
      v84 = (uint64_t)v91;
    v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)v83, v84);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)" File position at start is ", 27);
    v86 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)", currently ", 12);
    std::istream::tellg();
    std::ostream::operator<<();
    if (SHIBYTE(v92) < 0)
      operator delete(v90);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v100);
  }
LABEL_45:
  v93 = (void *)*MEMORY[0x1E0DE4F60];
  *(void **)((char *)&v93 + *((_QWORD *)v93 - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  v94 = MEMORY[0x1E0DE4FB8] + 16;
  if (v97 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1DF0ECF6C](&v98);
}

void sub_1DE412218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  void *v9;
  va_list va;

  va_start(va, a7);
  v9 = *(void **)(v7 + 136);
  if (v9)
    free(v9);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DE41222C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1DE412290);
}

void sub_1DE41223C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DE412244()
{
  JUMPOUT(0x1DE412278);
}

void sub_1DE412260()
{
  void **v0;
  void *v1;
  char v2;

  if (v1)
    operator delete(v1);
  if (v2 < 0)
    operator delete(*v0);
  JUMPOUT(0x1DE412288);
}

void sub_1DE412298()
{
  JUMPOUT(0x1DE412290);
}

void sub_1DE4122A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  if (a15)
    free(a15);
  JUMPOUT(0x1DE412290);
}

void kaldi::VectorBase<float>::AddVec<float>(uint64_t a1, uint64_t a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  int v7;

  v7 = *(_DWORD *)(a1 + 8);
  if (v7 != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"AddVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x74, "dim_ == v.dim_", a6);
  if (a2 == a1)
    kaldi::KaldiAssertFailure_((kaldi *)"AddVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x75, "&v != this", a6);
  cblas_saxpy(v7, a3, *(const float **)a2, 1, *(float **)a1, 1);
}

void kaldi::Vector<double>::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  int v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  int v19;
  void *v20;
  uint64_t v21;
  const char *v22;
  _WORD *p_p;
  uint64_t v24;
  const char *v25;
  _QWORD *v26;
  std::string *v27;
  std::string::size_type size;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  int data;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  double *v44;
  double *v45;
  double *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  double *v52;
  uint64_t v53;
  std::string *v54;
  std::string *v55;
  std::string *v56;
  std::string *v57;
  double *v58;
  double *v59;
  double *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  double *v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unsigned int v76;
  _QWORD *v78;
  std::string *v79;
  std::string::size_type v80;
  _QWORD *v81;
  _QWORD *v82;
  void *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  const char *v88;
  double v89;
  void *v90;
  double *v91;
  char *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  char v97;
  uint64_t v98;
  std::string v99;
  void *__p;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a4)
  {
    v8 = *(unsigned int *)(a1 + 8);
    v94 = 0;
    v95 = 0;
    v93 = 0;
    kaldi::Vector<double>::Resize(&v93, v8, 0, a4, a5);
    kaldi::Vector<double>::Read(&v93, a2, a3, 0);
    v12 = *(_DWORD *)(a1 + 8);
    if (!v12)
    {
      kaldi::Vector<double>::Resize((void **)a1, v94, 0, v10, v11);
      v12 = *(_DWORD *)(a1 + 8);
    }
    if (v12 != (_DWORD)v94)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1378);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Vector<Real>::Read, adding but dimensions mismatch ", 51);
      v81 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)" vs. ", 5);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    kaldi::VectorBase<double>::AddVec<double>(a1, (uint64_t)&v93, 1.0, v9, v10, v11);
    if (v93)
      free(v93);
    return;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v93);
  std::istream::tellg();
  if ((_DWORD)a3)
  {
    if (kaldi::Peek(a2, 1) == 70)
    {
      v15 = *(unsigned int *)(a1 + 8);
      v101 = 0;
      v102 = 0;
      *(double *)&__p = 0.0;
      kaldi::Vector<float>::Resize(&__p, v15, 0, v13, v14);
      kaldi::Vector<float>::Read(&__p, a2, 1, 0);
      if (*(_DWORD *)(a1 + 8) != (_DWORD)v101)
        kaldi::Vector<double>::Resize((void **)a1, v101, 0, v17, v18);
      kaldi::VectorBase<double>::CopyFromVec<float>(a1, (uint64_t)&__p, v16, v17, v18);
      if (*(double *)&__p != 0.0)
        free(__p);
      goto LABEL_45;
    }
    *(double *)&__p = 0.0;
    v101 = 0;
    v102 = 0;
    kaldi::ReadToken(a2, 1, (uint64_t)&__p, v13, v14);
    if (SHIBYTE(v102) < 0)
    {
      if (v101 != 2)
        goto LABEL_33;
      p_p = __p;
    }
    else
    {
      if (SHIBYTE(v102) != 2)
        goto LABEL_33;
      p_p = &__p;
    }
    if (*p_p == 22084)
    {
      LODWORD(v99.__r_.__value_.__l.__data_) = 0;
      kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v99, v21, v22);
      data = (int)v99.__r_.__value_.__l.__data_;
      if (LODWORD(v99.__r_.__value_.__l.__data_) != *(_DWORD *)(a1 + 8))
      {
        kaldi::Vector<double>::Resize((void **)a1, LODWORD(v99.__r_.__value_.__l.__data_), 0, v34, v35);
        data = (int)v99.__r_.__value_.__l.__data_;
      }
      if (data >= 1)
        std::istream::read();
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
      {
        v19 = 1;
LABEL_41:
        if (SHIBYTE(v102) < 0)
        {
          v20 = __p;
LABEL_43:
          operator delete(v20);
        }
        goto LABEL_44;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)"Error reading vector data (binary mode); truncated stream? (size = ",
        67);
      v37 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)")", 1);
LABEL_40:
      v19 = 2;
      goto LABEL_41;
    }
LABEL_33:
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)": Expected token ", 17);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"DV", 2);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", got ", 6);
    if (v102 >= 0)
      v32 = &__p;
    else
      v32 = __p;
    if (v102 >= 0)
      v33 = HIBYTE(v102);
    else
      v33 = v101;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
    goto LABEL_40;
  }
  memset(&v99, 0, sizeof(v99));
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v99);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)"EOF while trying to read vector.", 32);
LABEL_15:
    v19 = 2;
    goto LABEL_16;
  }
  if (!std::string::compare(&v99, "[]"))
  {
    kaldi::Vector<double>::Resize((void **)a1, 0, 0, v24, v25);
    v19 = 1;
    goto LABEL_16;
  }
  if (std::string::compare(&v99, "["))
  {
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)"Expected \"[\" but got ", 21);
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v99;
    else
      v27 = (std::string *)v99.__r_.__value_.__r.__words[0];
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v99.__r_.__value_.__r.__words[2]);
    else
      size = v99.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, size);
    goto LABEL_15;
  }
  v38 = a2 + 4;
  v90 = 0;
  v91 = 0;
  v87 = 22;
  v88 = "Failed to read number.";
  v92 = 0;
  v39 = MEMORY[0x1E0C80978];
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v40 = std::istream::peek();
        if ((v40 - 48) > 9)
          break;
        *(double *)&__p = 0.0;
        MEMORY[0x1DF0ECC18](a2, &__p);
        if ((*((_BYTE *)v38 + *(_QWORD *)(*a2 - 24)) & 5) != 0)
          goto LABEL_142;
        v41 = std::istream::peek();
        if (v41 <= 0x7F)
        {
          if ((*(_DWORD *)(v39 + 4 * v41 + 60) & 0x4000) != 0)
            goto LABEL_71;
        }
        else if (__maskrune(v41, 0x4000uLL))
        {
          goto LABEL_71;
        }
        if (std::istream::peek() != 93)
        {
          v87 = 33;
          v88 = "Expected whitespace after number.";
          goto LABEL_142;
        }
LABEL_71:
        v44 = v91;
        if (v91 >= (double *)v92)
        {
          v46 = (double *)v90;
          v47 = ((char *)v91 - (_BYTE *)v90) >> 3;
          v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v49 = v92 - (_BYTE *)v90;
          if ((v92 - (_BYTE *)v90) >> 2 > v48)
            v48 = v49 >> 2;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
            v50 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v50 = v48;
          if (v50)
          {
            v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v92, v50);
            v46 = (double *)v90;
            v44 = v91;
          }
          else
          {
            v51 = 0;
          }
          v52 = (double *)&v51[8 * v47];
          *v52 = *(double *)&__p;
          v45 = v52 + 1;
          while (v44 != v46)
          {
            v53 = *((_QWORD *)v44-- - 1);
            *((_QWORD *)v52-- - 1) = v53;
          }
          v90 = v52;
          v91 = v45;
          v92 = &v51[8 * v50];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *v91 = *(double *)&__p;
          v45 = v44 + 1;
        }
        v91 = v45;
      }
      if (v40 > 31)
        break;
      if (v40 > 9)
      {
        if (v40 == 10 || v40 == 13)
        {
          v68 = "Newline found while reading vector (maybe it's a matrix?)";
          v69 = 57;
LABEL_158:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)v68, v69);
          goto LABEL_159;
        }
LABEL_100:
        std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v99);
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
        {
          v56 = (std::string *)v99.__r_.__value_.__r.__words[0];
          if (!strcasecmp(v99.__r_.__value_.__l.__data_, "inf"))
            goto LABEL_109;
          v57 = v56;
        }
        else
        {
          if (!strcasecmp((const char *)&v99, "inf"))
            goto LABEL_109;
          v56 = &v99;
          v57 = &v99;
        }
        if (!strcasecmp((const char *)v57, "infinity"))
        {
LABEL_109:
          v58 = v91;
          if (v91 >= (double *)v92)
          {
            v60 = (double *)v90;
            v61 = ((char *)v91 - (_BYTE *)v90) >> 3;
            v62 = v61 + 1;
            if ((unint64_t)(v61 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v63 = v92 - (_BYTE *)v90;
            if ((v92 - (_BYTE *)v90) >> 2 > v62)
              v62 = v63 >> 2;
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
              v64 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v64 = v62;
            if (v64)
            {
              v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v92, v64);
              v60 = (double *)v90;
              v58 = v91;
            }
            else
            {
              v65 = 0;
            }
            v66 = (double *)&v65[8 * v61];
            *v66 = INFINITY;
            v59 = v66 + 1;
            while (v58 != v60)
            {
              v67 = *((_QWORD *)v58-- - 1);
              *((_QWORD *)v66-- - 1) = v67;
            }
            v90 = v66;
            v91 = v59;
            v92 = &v65[8 * v64];
            if (v60)
              operator delete(v60);
          }
          else
          {
            *v91 = INFINITY;
            v59 = v58 + 1;
          }
          v91 = v59;
          if (kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1496);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reading infinite value into vector.", 35);
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          }
        }
        else
        {
          if (strcasecmp((const char *)v56, "nan"))
            goto LABEL_162;
          *(double *)&__p = NAN;
          std::vector<double>::push_back[abi:ne180100]((uint64_t)&v90, &__p);
          if (kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1499);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reading NaN value into vector.", 30);
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          }
        }
      }
      else
      {
        if (v40 != 9)
        {
          if (v40 == -1)
          {
            v68 = "EOF while reading vector data.";
            v69 = 30;
            goto LABEL_158;
          }
          goto LABEL_100;
        }
LABEL_83:
        std::istream::get();
      }
    }
    if (v40 == 32)
      goto LABEL_83;
    if (v40 != 45)
      break;
    std::istream::get();
    if (std::istream::peek() - 48 > 9)
    {
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v99);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      {
        v54 = (std::string *)v99.__r_.__value_.__r.__words[0];
        if (!strcasecmp(v99.__r_.__value_.__l.__data_, "inf"))
          goto LABEL_129;
        v55 = v54;
LABEL_125:
        if (!strcasecmp((const char *)v55, "infinity"))
          goto LABEL_129;
        if (strcasecmp((const char *)v54, "nan"))
        {
LABEL_162:
          v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)"Expecting numeric vector data, got ", 35);
          if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v79 = &v99;
          else
            v79 = (std::string *)v99.__r_.__value_.__r.__words[0];
          if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v80 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
          else
            v80 = v99.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)v79, v80);
          goto LABEL_159;
        }
        *(double *)&__p = NAN;
        std::vector<double>::push_back[abi:ne180100]((uint64_t)&v90, &__p);
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1462);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reading negative NaN value into vector.", 39);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        }
      }
      else
      {
        if (strcasecmp((const char *)&v99, "inf"))
        {
          v54 = &v99;
          v55 = &v99;
          goto LABEL_125;
        }
LABEL_129:
        *(double *)&__p = -INFINITY;
        std::vector<double>::push_back[abi:ne180100]((uint64_t)&v90, &__p);
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1459);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reading negative infinite value into vector.", 44);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        }
      }
    }
    else
    {
      *(double *)&__p = 0.0;
      MEMORY[0x1DF0ECC18](a2, &__p);
      if ((*((_BYTE *)v38 + *(_QWORD *)(*a2 - 24)) & 5) != 0)
        goto LABEL_142;
      v42 = std::istream::peek();
      if (v42 <= 0x7F)
        v43 = *(_DWORD *)(v39 + 4 * v42 + 60) & 0x4000;
      else
        v43 = __maskrune(v42, 0x4000uLL);
      if (!v43 && std::istream::peek() != 93)
      {
        v87 = 33;
        v88 = "Expected whitespace after number.";
LABEL_142:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)v88, v87);
LABEL_159:
        v19 = 2;
        goto LABEL_160;
      }
      v89 = -*(double *)&__p;
      std::vector<double>::push_back[abi:ne180100]((uint64_t)&v90, &v89);
    }
  }
  if (v40 != 93)
    goto LABEL_100;
  std::istream::get();
  kaldi::Vector<double>::Resize((void **)a1, (unint64_t)((char *)v91 - (_BYTE *)v90) >> 3, 0, v70, v71);
  v72 = (uint64_t *)v90;
  if (v91 != v90)
  {
    v73 = ((char *)v91 - (_BYTE *)v90) >> 3;
    v74 = *(_QWORD **)a1;
    if (v73 <= 1)
      v73 = 1;
    do
    {
      v75 = *v72++;
      *v74++ = v75;
      --v73;
    }
    while (v73);
  }
  v76 = std::istream::peek() << 24;
  if (v76 == 167772160)
  {
LABEL_150:
    std::istream::get();
  }
  else if (v76 == 218103808)
  {
    std::istream::get();
    goto LABEL_150;
  }
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1481);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"After end of vector data, read error.", 37);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
  }
  v19 = 1;
LABEL_160:
  if (v90)
  {
    v91 = (double *)v90;
    operator delete(v90);
  }
LABEL_16:
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
  {
    v20 = (void *)v99.__r_.__value_.__r.__words[0];
    goto LABEL_43;
  }
LABEL_44:
  if (v19 == 2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1509);
    v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Failed to read vector from stream.  ", 36);
    std::stringbuf::str();
    if (SHIBYTE(v92) >= 0)
      v83 = &v90;
    else
      v83 = v90;
    if (SHIBYTE(v92) >= 0)
      v84 = HIBYTE(v92);
    else
      v84 = (uint64_t)v91;
    v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)v83, v84);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)" File position at start is ", 27);
    v86 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)", currently ", 12);
    std::istream::tellg();
    std::ostream::operator<<();
    if (SHIBYTE(v92) < 0)
      operator delete(v90);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
LABEL_45:
  v93 = (void *)*MEMORY[0x1E0DE4F60];
  *(void **)((char *)&v93 + *((_QWORD *)v93 - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  v94 = MEMORY[0x1E0DE4FB8] + 16;
  if (v97 < 0)
    operator delete(v96);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1DF0ECF6C](&v98);
}

void sub_1DE41305C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;

  if (a65)
    free(a65);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1DE413070(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1DE4130D4);
}

void sub_1DE413080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DE413088()
{
  JUMPOUT(0x1DE4130BCLL);
}

void sub_1DE4130A4()
{
  void *v0;
  void *v1;
  char v2;

  if (v0)
    operator delete(v0);
  if (v2 < 0)
    operator delete(v1);
  JUMPOUT(0x1DE4130CCLL);
}

void sub_1DE4130DC()
{
  JUMPOUT(0x1DE4130D4);
}

void sub_1DE4130E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  if (a15)
    free(a15);
  JUMPOUT(0x1DE4130D4);
}

void kaldi::VectorBase<float>::SetZero(uint64_t a1)
{
  bzero(*(void **)a1, 4 * *(int *)(a1 + 8));
}

void **kaldi::Vector<float>::Init(void **result, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  void **v6;
  int v7;
  std::bad_alloc *exception;
  std::bad_alloc *v9;
  _QWORD v10[34];
  void *memptr;

  if (a2 < 0)
    kaldi::KaldiAssertFailure_((kaldi *)"Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0xDC, "dim >= 0", a5);
  v6 = result;
  if (a2)
  {
    memptr = 0;
    v7 = 4 * a2;
    result = (void **)malloc_type_posix_memalign(&memptr, 0x10uLL, 4 * a2, 0x12C09453uLL);
    if ((_DWORD)result || !memptr)
    {
      if (v7 < 0 && kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10, "Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 239);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Negative dimension: size=", 25);
        std::ostream::operator<<();
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      }
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v9 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v9, MEMORY[0x1E0DE4EA8], MEMORY[0x1E0DE4DC0]);
    }
    *v6 = memptr;
    *((_DWORD *)v6 + 2) = a2;
    *((_DWORD *)v6 + 3) = a2;
  }
  else
  {
    *result = 0;
    result[1] = 0;
  }
  return result;
}

void sub_1DE413218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::Vector<double>::Resize(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  int v7;
  char *v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  char *v15;
  void *__dst;
  char *v17;
  uint64_t v18;

  v5 = a2;
  if ((_DWORD)a3 != 2)
  {
    v7 = a3;
    if ((_DWORD)a3 == 3)
    {
      v8 = (char *)*a1;
      if (!*a1)
      {
        kaldi::Vector<double>::Init(a1, a2, a3, a4, a5);
LABEL_22:
        v8 = (char *)*a1;
        v11 = 8 * *((int *)a1 + 2);
LABEL_23:
        bzero(v8, v11);
        return;
      }
      if (*((_DWORD *)a1 + 2) == (_DWORD)a2)
        return;
      v7 = 0;
      goto LABEL_13;
    }
    v8 = (char *)*a1;
LABEL_12:
    if (!v8)
      goto LABEL_16;
LABEL_13:
    if (*((_DWORD *)a1 + 3) >= (int)a2)
    {
      *((_DWORD *)a1 + 2) = a2;
    }
    else if (*((_DWORD *)a1 + 2) != (_DWORD)a2)
    {
      free(v8);
      *a1 = 0;
      a1[1] = 0;
LABEL_16:
      kaldi::Vector<double>::Init(a1, v5, a3, a4, a5);
      if (v7)
        return;
      goto LABEL_22;
    }
    if (v7)
      return;
    v11 = 8 * (int)a2;
    goto LABEL_23;
  }
  v7 = 0;
  v8 = (char *)*a1;
  if (!(_DWORD)a2 || !v8)
    goto LABEL_12;
  if (*((_DWORD *)a1 + 3) >= (int)a2)
  {
    v12 = *((int *)a1 + 2);
    if ((int)a2 > (int)v12)
      bzero(&v8[8 * v12], 8 * ((int)a2 - (int)v12));
    *((_DWORD *)a1 + 2) = v5;
  }
  else
  {
    __dst = 0;
    v17 = 0;
    v18 = 0;
    kaldi::Vector<double>::Resize(&__dst, a2, 1);
    v9 = *((int *)a1 + 2);
    v10 = *a1;
    if ((int)v9 >= v5)
    {
      memcpy(__dst, v10, 8 * v5);
    }
    else
    {
      memcpy(__dst, v10, 8 * v9);
      bzero((char *)__dst + 8 * *((int *)a1 + 2), 8 * (v5 - *((_DWORD *)a1 + 2)));
    }
    v13 = (char *)__dst;
    __dst = *a1;
    v14 = __dst;
    *a1 = v13;
    v15 = v17;
    v17 = (char *)a1[1];
    a1[1] = v15;
    if (v14)
      free(v14);
  }
}

void kaldi::VectorBase<double>::AddVec<double>(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, const char *a6)
{
  int v7;

  v7 = *(_DWORD *)(a1 + 8);
  if (v7 != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"AddVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x7D, "dim_ == v.dim_", a6);
  if (a2 == a1)
    kaldi::KaldiAssertFailure_((kaldi *)"AddVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x7E, "&v != this", a6);
  cblas_daxpy(v7, a3, *(const double **)a2, 1, *(double **)a1, 1);
}

void **kaldi::Vector<double>::Init(void **result, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  void **v6;
  int v7;
  std::bad_alloc *exception;
  std::bad_alloc *v9;
  _QWORD v10[34];
  void *memptr;

  if (a2 < 0)
    kaldi::KaldiAssertFailure_((kaldi *)"Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0xDC, "dim >= 0", a5);
  v6 = result;
  if (a2)
  {
    memptr = 0;
    v7 = 8 * a2;
    result = (void **)malloc_type_posix_memalign(&memptr, 0x10uLL, 8 * a2, 0x12C09453uLL);
    if ((_DWORD)result || !memptr)
    {
      if (v7 < 0 && kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10, "Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 239);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Negative dimension: size=", 25);
        std::ostream::operator<<();
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      }
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v9 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v9, MEMORY[0x1E0DE4EA8], MEMORY[0x1E0DE4DC0]);
    }
    *v6 = memptr;
    *((_DWORD *)v6 + 2) = a2;
    *((_DWORD *)v6 + 3) = a2;
  }
  else
  {
    *result = 0;
    result[1] = 0;
  }
  return result;
}

void sub_1DE413550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

BOOL kaldi::VectorBase<float>::IsZero(uint64_t a1, float a2)
{
  uint64_t v2;
  float *v3;
  float v4;
  float v5;
  float v6;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 < 1)
  {
    v4 = 0.0;
  }
  else
  {
    v3 = *(float **)a1;
    v4 = 0.0;
    do
    {
      v5 = *v3++;
      v6 = fabsf(v5);
      if (v6 >= v4)
        v4 = v6;
      --v2;
    }
    while (v2);
  }
  return v4 <= a2;
}

uint64_t kaldi::VectorBase<float>::Set(uint64_t result, float a2)
{
  uint64_t v2;
  float *v3;

  v2 = *(unsigned int *)(result + 8);
  if ((int)v2 >= 1)
  {
    v3 = *(float **)result;
    do
    {
      *v3++ = a2;
      --v2;
    }
    while (v2);
  }
  return result;
}

void kaldi::VectorBase<float>::SetRandn(uint64_t a1)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  unsigned int v7;

  v7 = kaldi::Rand(0);
  if (*(int *)(a1 + 8) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = ((double)(int)kaldi::Rand(&v7) + 1.0) / 2147483650.0;
      v4 = sqrtf(logf(v3) * -2.0);
      v5 = ((double)(int)kaldi::Rand(&v7) + 1.0) / 2147483650.0;
      v6 = v5 * 6.28318531;
      *(float *)(*(_QWORD *)a1 + 4 * v2++) = v4 * cosf(v6);
    }
    while (v2 < *(int *)(a1 + 8));
  }
}

float kaldi::VectorBase<float>::Sum(uint64_t a1)
{
  uint64_t v1;
  float *v2;
  double v3;
  float v4;

  v1 = *(unsigned int *)(a1 + 8);
  if ((int)v1 < 1)
    return 0.0;
  v2 = *(float **)a1;
  v3 = 0.0;
  do
  {
    v4 = *v2++;
    v3 = v3 + v4;
    --v1;
  }
  while (v1);
  return v3;
}

uint64_t *kaldi::VectorBase<float>::Min(uint64_t *result)
{
  unint64_t v1;
  uint64_t v2;
  int v3;
  float v4;
  uint64_t v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float *v14;
  float v15;
  float v16;
  _QWORD v17[34];

  v1 = *((unsigned int *)result + 2);
  if (!(_DWORD)v1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Min", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 745);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "Empty vector");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  v2 = *result;
  if ((int)v1 >= 4)
  {
    v5 = 0;
    v3 = v1 & 0xFFFFFFFC;
    v4 = INFINITY;
    do
    {
      v6 = (float *)(v2 + 4 * v5);
      v7 = *v6;
      v8 = v6[1];
      v9 = v6[2];
      v10 = v6[3];
      if (*v6 < v4 || v8 < v4 || v9 < v4 || v10 < v4)
      {
        if (v7 >= v8)
          v7 = v6[1];
        if (v9 >= v10)
          v9 = v6[3];
        if (v7 < v4)
          v4 = v7;
        if (v9 < v4)
          v4 = v9;
      }
      v5 += 4;
    }
    while (v5 + 4 <= v1);
  }
  else
  {
    v3 = 0;
    v4 = INFINITY;
  }
  if (v3 < (int)v1)
  {
    v14 = (float *)(v2 + 4 * v3);
    do
    {
      v15 = *v14++;
      v16 = v15;
      if (v15 < v4)
        v4 = v16;
      ++v3;
    }
    while ((int)v1 > v3);
  }
  return result;
}

float kaldi::VectorBase<float>::ReverseCopyFromVec(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  float *v6;
  uint64_t v7;
  float result;

  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 != *((_DWORD *)a2 + 2) || (v6 = *(float **)a1, v7 = *a2, *(_QWORD *)a1 == *a2))
    kaldi::KaldiAssertFailure_((kaldi *)"ReverseCopyFromVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x136, "Dim() == v.Dim() && data_ != v.data_", a5);
  if ((int)v5 >= 1)
  {
    do
    {
      result = *(float *)(v7 + 4 * (int)--v5);
      *v6++ = result;
    }
    while (v5);
  }
  return result;
}

uint64_t kaldi::VectorBase<float>::ApplyFloor(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t result;
  float *v5;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 < 1)
    return 0;
  result = 0;
  v5 = *(float **)a1;
  do
  {
    if (*v5 < a2)
    {
      *v5 = a2;
      result = (result + 1);
    }
    ++v5;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t kaldi::VectorBase<float>::ApplyCeiling(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t result;
  float *v5;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 < 1)
    return 0;
  result = 0;
  v5 = *(float **)a1;
  do
  {
    if (*v5 > a2)
    {
      *v5 = a2;
      result = (result + 1);
    }
    ++v5;
    --v2;
  }
  while (v2);
  return result;
}

float kaldi::VectorBase<float>::MulElements(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  float *v6;
  float *v7;
  float v8;
  float result;

  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"MulElements", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x4D0, "dim_ == v.dim_", a5);
  if ((int)v5 >= 1)
  {
    v6 = *(float **)a2;
    v7 = *(float **)a1;
    do
    {
      v8 = *v6++;
      result = v8 * *v7;
      *v7++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

void kaldi::VectorBase<float>::Scale(uint64_t a1, float a2)
{
  cblas_sscal(*(_DWORD *)(a1 + 8), a2, *(float **)a1, 1);
}

float kaldi::VectorBase<float>::ApplySoftMax(uint64_t a1)
{
  float v2;
  float v3;
  int v4;
  float *v5;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  double v11;
  float v12;
  _QWORD v14[34];

  kaldi::VectorBase<float>::Max((uint64_t *)a1);
  v3 = v2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(float **)a1;
  if (v4 >= 1)
  {
    v6 = *(float **)a1;
    v7 = *(unsigned int *)(a1 + 8);
    do
    {
      *v6 = *v6 - v2;
      ++v6;
      --v7;
    }
    while (v7);
  }
  LODWORD(v14[0]) = v4;
  vvexpf(v5, v5, (const int *)v14);
  v8 = *(unsigned int *)(a1 + 8);
  if ((int)v8 < 1)
    goto LABEL_9;
  v9 = 0;
  v10 = *(float **)a1;
  v11 = 0.0;
  do
    v11 = v11 + v10[v9++];
  while (v8 != v9);
  v12 = v11;
  if (v12 == 0.0)
  {
LABEL_9:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14, "ApplySoftMax", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1066);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "SoftMax produced NaN on vector");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  cblas_sscal(v8, 1.0 / v12, v10, 1);
  return v3 + logf(v12);
}

uint64_t *kaldi::VectorBase<float>::Max(uint64_t *result)
{
  unint64_t v1;
  uint64_t v2;
  int v3;
  float v4;
  uint64_t v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  float *v17;
  float v18;
  float v19;
  _QWORD v20[34];

  v1 = *((unsigned int *)result + 2);
  if (!(_DWORD)v1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Max", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 703);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, "Empty vector");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
  }
  v2 = *result;
  if ((int)v1 >= 4)
  {
    v5 = 0;
    v3 = v1 & 0xFFFFFFFC;
    v4 = -INFINITY;
    do
    {
      v6 = (float *)(v2 + 4 * v5);
      v7 = *v6;
      v8 = v6[1];
      v9 = v6[2];
      v10 = v6[3];
      if (*v6 <= v4)
      {
        v11 = v8 == v4;
        v12 = v8 < v4;
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
      if (v12 || v11)
      {
        v13 = v9 == v4;
        v14 = v9 < v4;
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
      if (v14 || v13)
      {
        v15 = v10 == v4;
        v16 = v10 < v4;
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
      if (!v16 && !v15)
      {
        if (v7 <= v8)
          v7 = v6[1];
        if (v9 <= v10)
          v9 = v6[3];
        if (v7 > v4)
          v4 = v7;
        if (v9 > v4)
          v4 = v9;
      }
      v5 += 4;
    }
    while (v5 + 4 <= v1);
  }
  else
  {
    v3 = 0;
    v4 = -INFINITY;
  }
  if (v3 < (int)v1)
  {
    v17 = (float *)(v2 + 4 * v3);
    do
    {
      v18 = *v17++;
      v19 = v18;
      if (v18 > v4)
        v4 = v19;
      ++v3;
    }
    while ((int)v1 > v3);
  }
  return result;
}

uint64_t kaldi::VectorBase<float>::Add(uint64_t result, float a2)
{
  uint64_t v2;
  float *v3;

  v2 = *(unsigned int *)(result + 8);
  if ((int)v2 >= 1)
  {
    v3 = *(float **)result;
    do
    {
      *v3 = *v3 + a2;
      ++v3;
      --v2;
    }
    while (v2);
  }
  return result;
}

void kaldi::VectorBase<float>::ApplyExp(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8);
  vvexpf(*(float **)a1, *(const float **)a1, &v1);
}

void kaldi::VectorBase<float>::Sigmoid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6;
  float *v7;
  float *v8;
  uint64_t v9;
  int v10;

  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"Sigmoid", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x492, "dim_ == src.dim_", a5);
  kaldi::VectorBase<float>::CopyFromVec(a1, a2, a3, a4, a5);
  cblas_sscal(*(_DWORD *)(a1 + 8), 0.5, *(float **)a1, 1);
  v10 = *(_DWORD *)(a1 + 8);
  vvtanhf(*(float **)a1, *(const float **)a1, &v10);
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(float **)a1;
  if (v6 >= 1)
  {
    v8 = *(float **)a1;
    v9 = *(unsigned int *)(a1 + 8);
    do
    {
      *v8 = *v8 + 1.0;
      ++v8;
      --v9;
    }
    while (v9);
  }
  cblas_sscal(v6, 0.5, v7, 1);
}

void kaldi::VectorBase<float>::ApplyTanh(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8);
  vvtanhf(*(float **)a1, *(const float **)a1, &v1);
}

float kaldi::VectorBase<float>::Norm(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v7;
  float *v8;
  float result;
  float v10;
  uint64_t v12;
  const float *v13;
  char v14;
  float v15;
  float v16;
  float v17;
  const char *v18;
  float v19;
  float v20;
  uint64_t v21;
  const char *v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  float v28;
  float *__X;
  int __N[2];
  uint64_t v31;

  if (a2 < 0.0)
    kaldi::KaldiAssertFailure_((kaldi *)"Norm", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x289, "p >= 0.0", a6);
  if (a2 == 0.0)
  {
    v7 = *(unsigned int *)(a1 + 8);
    if ((int)v7 < 1)
      return 0.0;
    v8 = *(float **)a1;
    result = 0.0;
    do
    {
      v10 = *v8++;
      if (v10 != 0.0)
        result = result + 1.0;
      --v7;
    }
    while (v7);
    return result;
  }
  if (a2 == 1.0)
    return cblas_sasum(*(_DWORD *)(a1 + 8), *(const float **)a1, 1);
  v12 = *(unsigned int *)(a1 + 8);
  if (a2 == 2.0)
    return cblas_snrm2(*(_DWORD *)(a1 + 8), *(const float **)a1, 1);
  if ((int)v12 < 1)
  {
    result = powf(0.0, 1.0 / a2);
    if (result != INFINITY)
      return result;
LABEL_27:
    kaldi::KaldiAssertFailure_((kaldi *)"Norm", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x29D, "tmp != HUGE_VAL", v18);
  }
  v13 = *(const float **)a1;
  v14 = 1;
  v15 = 0.0;
  do
  {
    v16 = *v13++;
    v17 = powf(fabsf(v16), a2);
    v14 &= v17 != INFINITY;
    v15 = v15 + v17;
    --v12;
  }
  while (v12);
  result = powf(v15, 1.0 / a2);
  if (result == INFINITY)
    goto LABEL_27;
  if ((v14 & 1) == 0)
  {
    kaldi::VectorBase<float>::Max((uint64_t *)a1);
    v20 = v19;
    kaldi::VectorBase<float>::Min((uint64_t *)a1);
    v24 = -v23;
    if (v20 < v24)
      v20 = v24;
    if (v20 <= 0.0)
      kaldi::KaldiAssertFailure_((kaldi *)"Norm", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x2A3, "max_abs > 0", v22);
    __X = 0;
    *(_QWORD *)__N = 0;
    v31 = 0;
    kaldi::Vector<float>::Resize((void **)&__X, *(unsigned int *)(a1 + 8), 1, v21, v22);
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&__X, a1, v25, v26, v27);
    cblas_sscal(__N[0], 1.0 / v20, __X, 1);
    v28 = kaldi::VectorBase<float>::Norm(&__X, a2);
    if (__X)
      free(__X);
    return v20 * v28;
  }
  return result;
}

void sub_1DE413F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)
    free(a10);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::VectorBase<float>::InvertElements(uint64_t result)
{
  uint64_t v1;
  float *v2;

  v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    v2 = *(float **)result;
    do
    {
      *v2 = 1.0 / *v2;
      ++v2;
      --v1;
    }
    while (v1);
  }
  return result;
}

uint64_t kaldi::VectorBase<float>::ReplaceValue(uint64_t result, float a2, float a3)
{
  uint64_t v3;
  float *v4;

  v3 = *(unsigned int *)(result + 8);
  if ((int)v3 >= 1)
  {
    v4 = *(float **)result;
    do
    {
      if (*v4 == a2)
        *v4 = a3;
      ++v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

float kaldi::VectorBase<float>::DivElements(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  float *v6;
  float *v7;
  float v8;
  float result;

  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"DivElements", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x4FB, "dim_ == v.dim_", a5);
  if ((int)v5 >= 1)
  {
    v6 = *(float **)a2;
    v7 = *(float **)a1;
    do
    {
      v8 = *v6++;
      result = *v7 / v8;
      *v7++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

void kaldi::VectorBase<float>::AddVecVec(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5, uint64_t a6, const char *a7)
{
  float *__Y;
  const float *__X;
  int v10;
  int v11;

  __Y = *(float **)a1;
  if (*(_QWORD *)a2 == *(_QWORD *)a1 || (__X = *(const float **)a3, *(float **)a3 == __Y))
    kaldi::KaldiAssertFailure_((kaldi *)"AddVecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x4F1, "v.data_ != this->data_ && r.data_ != this->data_", a7);
  v10 = *(_DWORD *)(a1 + 8);
  v11 = *(_DWORD *)(a3 + 8);
  if (v10 != *(_DWORD *)(a2 + 8) || v10 != v11)
    kaldi::KaldiAssertFailure_((kaldi *)"AddVecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x4F3, "dim_ == v.dim_ && dim_ == r.dim_", a7);
  cblas_sgbmv(CblasRowMajor, CblasNoTrans, v10, v10, 0, 0, a4, *(const float **)a2, 1, __X, 1, a5, __Y, 1);
}

void *kaldi::VectorBase<float>::CopyRowsFromMat(char **a1, uint64_t a2)
{
  int v4;
  int v5;
  const char *v6;
  char *v7;
  int v8;
  int v9;
  int v10;
  void *result;
  const char *v12;
  unsigned int v13;
  size_t v14;

  v4 = *((_DWORD *)a1 + 2);
  v5 = kaldi::MatrixBase<float>::NumCols(a2);
  if (v4 != kaldi::MatrixBase<float>::NumRows(a2) * v5)
    kaldi::KaldiAssertFailure_((kaldi *)"CopyRowsFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x1B3, "dim_ == mat.NumCols() * mat.NumRows()", v6);
  v7 = *a1;
  v8 = kaldi::MatrixBase<float>::NumCols(a2);
  v9 = kaldi::MatrixBase<float>::NumRows(a2);
  v10 = kaldi::MatrixBase<float>::Stride(a2);
  result = (void *)kaldi::MatrixBase<float>::NumCols(a2);
  if (v10 == (_DWORD)result)
    return memcpy(v7, *(const void **)a2, 4 * v9 * v8);
  if (v9 >= 1)
  {
    v13 = 0;
    v14 = 4 * v8;
    do
    {
      if (*(_DWORD *)(a2 + 12) <= v13)
        kaldi::KaldiAssertFailure_((kaldi *)"RowData", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xC3, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v12);
      result = memcpy(v7, (const void *)(*(_QWORD *)a2 + 4 * (int)(*(_DWORD *)(a2 + 16) * v13++)), v14);
      v7 += v14;
    }
    while (v9 != v13);
  }
  return result;
}

double kaldi::VectorBase<float>::CopyRowsFromMat(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  uint64_t v7;
  double result;
  _BYTE v9[32];

  v6 = *(unsigned int *)(a1 + 8);
  v7 = *a2;
  if (*a2)
    LODWORD(v7) = *(_DWORD *)(v7 + 8) * *(_DWORD *)(v7 + 12);
  if ((_DWORD)v6 != (_DWORD)v7)
    kaldi::KaldiAssertFailure_((kaldi *)"CopyRowsFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x1C6, "dim_ == mat.NumCols() * mat.NumRows()", a5);
  kaldi::SubMatrix<float>::SubMatrix(v9, *(_QWORD *)a1, 1, v6, v6);
  kaldi::CompressedMatrix::CopyToMat<float>(a2, (uint64_t)v9);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(v9).n128_u64[0];
  return result;
}

void sub_1DE414270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::VectorBase<float>::CountZeros(uint64_t a1)
{
  uint64_t v1;
  float *v2;
  double v3;
  float v4;

  v1 = *(unsigned int *)(a1 + 8);
  if ((int)v1 < 1)
    return 0;
  v2 = *(float **)a1;
  v3 = 0.0;
  do
  {
    v4 = *v2++;
    if (v4 == 0.0)
      v3 = v3 + 1.0;
    --v1;
  }
  while (v1);
  return (int)v3;
}

uint64_t kaldi::VectorBase<float>::AddColSumMat(uint64_t a1, uint64_t a2, float a3, float a4)
{
  int v8;
  const char *v9;
  uint64_t result;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  float *v19;
  float v20;
  float v21;

  v8 = *(_DWORD *)(a1 + 8);
  if (v8 != kaldi::MatrixBase<float>::NumRows(a2))
    kaldi::KaldiAssertFailure_((kaldi *)"AddColSumMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x365, "dim_ == M.NumRows()", v9);
  result = kaldi::MatrixBase<float>::NumCols(a2);
  v12 = *(unsigned int *)(a1 + 8);
  if ((int)v12 >= 1)
  {
    v13 = 0;
    v14 = *(float **)a2;
    v15 = *(unsigned int *)(a2 + 12);
    v16 = 4 * *(int *)(a2 + 16);
    do
    {
      if (v13 == v15)
        kaldi::KaldiAssertFailure_((kaldi *)"RowData", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xC3, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v11);
      v17 = 0.0;
      if ((int)result >= 1)
      {
        v18 = result;
        v19 = v14;
        do
        {
          v20 = *v19++;
          v17 = v17 + v20;
          --v18;
        }
        while (v18);
      }
      v21 = (float)(*(float *)(*(_QWORD *)a1 + 4 * v13) * a4) + a3 * v17;
      *(float *)(*(_QWORD *)a1 + 4 * v13++) = v21;
      v14 = (float *)((char *)v14 + v16);
    }
    while (v13 != v12);
  }
  return result;
}

void kaldi::VectorBase<float>::AddDiagMat2(uint64_t a1, const float **a2, int a3, float a4, float a5)
{
  int v9;
  const char *v10;
  int v11;
  int v12;
  int v13;
  const float *v14;
  float *v15;
  uint64_t v16;
  float v17;
  const char *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  const float *v23;
  float *v24;
  float v25;

  v9 = *(_DWORD *)(a1 + 8);
  if (a3 == 111)
  {
    if (v9 != kaldi::MatrixBase<float>::NumRows((uint64_t)a2))
      kaldi::KaldiAssertFailure_((kaldi *)"AddDiagMat2", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x63A, "this->dim_ == M.NumRows()", v10);
    v11 = *(_DWORD *)(a1 + 8);
    v12 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
    v13 = kaldi::MatrixBase<float>::Stride((uint64_t)a2);
    if (v11 >= 1)
    {
      v14 = *a2;
      v15 = *(float **)a1;
      v16 = 4 * v13;
      do
      {
        v17 = *v15;
        *v15++ = (float)(cblas_sdot(v12, v14, 1, v14, 1) * a4) + (float)(a5 * v17);
        v14 = (const float *)((char *)v14 + v16);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    if (v9 != kaldi::MatrixBase<float>::NumCols((uint64_t)a2))
      kaldi::KaldiAssertFailure_((kaldi *)"AddDiagMat2", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x642, "this->dim_ == M.NumCols()", v18);
    v19 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
    v20 = *(_DWORD *)(a1 + 8);
    v21 = kaldi::MatrixBase<float>::Stride((uint64_t)a2);
    if (v20 >= 1)
    {
      v22 = v21;
      v23 = *a2;
      v24 = *(float **)a1;
      do
      {
        v25 = *v24;
        *v24++ = (float)(cblas_sdot(v19, v23, v22, v23, v22) * a4) + (float)(a5 * v25);
        ++v23;
        --v20;
      }
      while (v20);
    }
  }
}

void kaldi::VectorBase<float>::AddDiagMatMat(uint64_t a1, const float **a2, int a3, const float **a4, int a5, float a6, float a7)
{
  int v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  const float *v24;
  const float *v25;
  float *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  float v31;

  v14 = *(_DWORD *)(a1 + 8);
  if (a3 == 112)
    v15 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  else
    v15 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
  v16 = v15;
  if (a5 == 112)
    v17 = kaldi::MatrixBase<float>::NumCols((uint64_t)a4);
  else
    v17 = kaldi::MatrixBase<float>::NumRows((uint64_t)a4);
  if (v16 != v17)
    kaldi::KaldiAssertFailure_((kaldi *)"AddDiagMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x656, "M_col_dim == N_row_dim", v18);
  v19 = kaldi::MatrixBase<float>::Stride((uint64_t)a2);
  v20 = v19;
  if (a3 == 112)
    v21 = v19;
  else
    v21 = 1;
  v22 = kaldi::MatrixBase<float>::Stride((uint64_t)a4);
  if (a5 == 112)
    v23 = 1;
  else
    v23 = v22;
  if (v14 >= 1)
  {
    v24 = *a4;
    v25 = *a2;
    v26 = *(float **)a1;
    if (a5 == 112)
      v27 = v22;
    else
      v27 = 1;
    if (a3 == 112)
      v28 = 1;
    else
      v28 = v20;
    v29 = 4 * v27;
    v30 = 4 * v28;
    do
    {
      v31 = *v26;
      *v26++ = (float)(cblas_sdot(v16, v25, v21, v24, v23) * a6) + (float)(a7 * v31);
      v24 = (const float *)((char *)v24 + v29);
      v25 = (const float *)((char *)v25 + v30);
      --v14;
    }
    while (v14);
  }
}

void kaldi::VectorBase<float>::Write(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  _QWORD *v8;
  void *__p[2];
  char v10;

  if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "Write", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1518);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Failed to write vector to stream: stream not good");
    goto LABEL_13;
  }
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FV");
    kaldi::WriteToken(a2, 1, (char *)__p, v5, v6);
    kaldi::WriteBasicType<int>(a2, 1);
    std::ostream::write();
    if (v10 < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" [ ", 3);
    if (*(int *)(a1 + 8) >= 1)
    {
      v7 = 0;
      do
      {
        v8 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
        ++v7;
      }
      while (v7 < *(int *)(a1 + 8));
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]\n", 2);
  }
  if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "Write", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1535);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Failed to write vector to stream");
LABEL_13:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
}

BOOL kaldi::VectorBase<double>::IsZero(uint64_t a1, double a2)
{
  uint64_t v2;
  double *v3;
  double v4;
  double v5;
  double v6;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 < 1)
  {
    v4 = 0.0;
  }
  else
  {
    v3 = *(double **)a1;
    v4 = 0.0;
    do
    {
      v5 = *v3++;
      v6 = fabs(v5);
      if (v6 >= v4)
        v4 = v6;
      --v2;
    }
    while (v2);
  }
  return v4 <= a2;
}

void kaldi::VectorBase<float>::AddMatVec<signed char>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5, float a6, float a7)
{
  uint64_t v12;

  if (a3 != 111
    || kaldi::MatrixBase<float>::NumCols(a2) != *(_DWORD *)(a4 + 8)
    || kaldi::MatrixBase<float>::NumRows(a2) != *(_DWORD *)(a1 + 8))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x96, "trans == kNoTrans && M.NumCols() == v.Dim() && M.NumRows() == dim_", a5);
  }
  if (a6 != 1.0)
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x98, "alpha == 1.0", a5);
  kaldi::QuantizedVectorBase<signed char>::AddMatVec(a4, a2, a1, a7, v12, a5);
}

void kaldi::VectorBase<float>::AddMatVec<short>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5, float a6, float a7)
{
  uint64_t v12;

  if (a3 != 111
    || kaldi::MatrixBase<float>::NumCols(a2) != *(_DWORD *)(a4 + 8)
    || kaldi::MatrixBase<float>::NumRows(a2) != *(_DWORD *)(a1 + 8))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x96, "trans == kNoTrans && M.NumCols() == v.Dim() && M.NumRows() == dim_", a5);
  }
  if (a6 != 1.0)
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x98, "alpha == 1.0", a5);
  kaldi::QuantizedVectorBase<short>::AddMatVec(a4, a2, a1, a7, v12, a5);
}

void kaldi::VectorBase<float>::ApplyPow(uint64_t a1, float a2)
{
  int v2;
  float v3;

  v3 = a2;
  v2 = *(_DWORD *)(a1 + 8);
  vvpowsf(*(float **)a1, &v3, *(const float **)a1, &v2);
}

void kaldi::VectorBase<float>::ApplyLog(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8);
  vvlogf(*(float **)a1, *(const float **)a1, &v1);
}

void kaldi::VectorBase<float>::Tanh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;

  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"Tanh", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)0x455, "dim_ == src.dim_", a5);
  v5 = *(_DWORD *)(a1 + 8);
  vvtanhf(*(float **)a1, *(const float **)a2, &v5);
}

void std::vector<kaldi::Matrix<float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<kaldi::Matrix<float>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 40 * a2;
    while (v3 != v7)
      v3 = kaldi::Matrix<float>::~Matrix(v3 - 40);
    a1[1] = v7;
  }
}

void std::vector<kaldi::Matrix<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 40 * a2;
      v14 = 40 * a2;
      do
      {
        kaldi::Matrix<float>::Matrix(v7);
        v7 += 40;
        v14 -= 40;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    v22 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::Matrix<float>>>(v4, v11);
    else
      v12 = 0;
    v15 = (uint64_t)&v12[40 * v8];
    v19[0] = v12;
    v19[1] = v15;
    v20 = v15;
    v21 = &v12[40 * v11];
    v16 = 5 * a2;
    v17 = v15 + 40 * a2;
    v18 = 8 * v16;
    do
    {
      kaldi::Matrix<float>::Matrix(v15);
      v15 += 40;
      v18 -= 40;
    }
    while (v18);
    v20 = v17;
    std::vector<kaldi::Matrix<float>>::__swap_out_circular_buffer(a1, v19);
    std::__split_buffer<kaldi::Matrix<float>>::~__split_buffer((uint64_t)v19);
  }
}

void sub_1DE414CB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::Matrix<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::Matrix<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::Matrix<float>>,std::reverse_iterator<kaldi::Matrix<float>*>,std::reverse_iterator<kaldi::Matrix<float>*>,std::reverse_iterator<kaldi::Matrix<float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::Matrix<float>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::Matrix<float>>,std::reverse_iterator<kaldi::Matrix<float>*>,std::reverse_iterator<kaldi::Matrix<float>*>,std::reverse_iterator<kaldi::Matrix<float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = a7 - 40;
  while (a3 + v10 != a5)
  {
    v12 = v11 + v10;
    v10 -= 40;
    kaldi::Matrix<float>::Matrix(v12, v10 + a3);
  }
  return a6;
}

uint64_t std::__split_buffer<kaldi::Matrix<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    kaldi::Matrix<float>::~Matrix(i - 40);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = kaldi::Matrix<float>::~Matrix(v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t kaldi::nnet1::AffineTransform::CopyQuantized8Bit(kaldi::nnet1::AffineTransform *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;

  v2 = operator new();
  kaldi::nnet1::QuantizedAffineTransform<signed char>::QuantizedAffineTransform(v2, this, v3, v4, v5);
  return v2;
}

void sub_1DE414F24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10D1C40B6DC7CF1);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::AffineTransform::CopyQuantized8Bit(kaldi::nnet1::AffineTransform *this)
{
  return kaldi::nnet1::AffineTransform::CopyQuantized8Bit((kaldi::nnet1::AffineTransform *)((char *)this - 88));
}

uint64_t kaldi::nnet1::AffineTransform::CopyQuantized16Bit(kaldi::nnet1::AffineTransform *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;

  v2 = operator new();
  kaldi::nnet1::QuantizedAffineTransform<short>::QuantizedAffineTransform(v2, this, v3, v4, v5);
  return v2;
}

void sub_1DE414F94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10D1C40B6DC7CF1);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::AffineTransform::CopyQuantized16Bit(kaldi::nnet1::AffineTransform *this)
{
  return kaldi::nnet1::AffineTransform::CopyQuantized16Bit((kaldi::nnet1::AffineTransform *)((char *)this - 96));
}

uint64_t kaldi::nnet1::AffineTransform::CopyVectorwiseQuantized8Bit(kaldi::nnet1::AffineTransform *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;

  v2 = operator new();
  kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::VectorwiseQuantizedAffineTransform(v2, this, v3, v4, v5);
  return v2;
}

void sub_1DE415004(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10D1C40EF2100C4);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::AffineTransform::CopyVectorwiseQuantized8Bit(kaldi::nnet1::AffineTransform *this)
{
  return kaldi::nnet1::AffineTransform::CopyVectorwiseQuantized8Bit((kaldi::nnet1::AffineTransform *)((char *)this - 104));
}

void kaldi::nnet1::AffineTransform::PropagateFnc(uint64_t a1, uint64_t a2, unsigned int *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;

  v8 = kaldi::nnet1::AffineTransform::Bias((kaldi::nnet1::AffineTransform *)a1);
  kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)a3, v8, v9, v10, v11, 1.0, 0.0);
  v12 = *(_QWORD *)(a1 + 352);
  if (v12 == *(_QWORD *)(a1 + 360) || !*(_DWORD *)(v12 + 48 * a4 + 20))
  {
    v17 = kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1);
    kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)a3, a2, CblasNoTrans, v17, (const char *)0x70, 1.0, 1.0);
  }
  else
  {
    v13 = kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1);
    kaldi::CuMatrixBase<float>::AddMatMatMasked((uint64_t)a3, a2, CblasNoTrans, v13, (const char *)0x70, *(_QWORD *)(a1 + 352) + 48 * a4, 1.0);
  }
  if (*(_BYTE *)(a1 + 128))
    kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow(a3, (uint64_t)a3, v14, v15, v16);
}

uint64_t kaldi::nnet1::AffineTransform::Bias(kaldi::nnet1::AffineTransform *this)
{
  uint64_t result;
  _QWORD v2[34];

  result = *((_QWORD *)this + 15);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 712);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::AffineTransform::Linearity(kaldi::nnet1::AffineTransform *this)
{
  uint64_t result;
  _QWORD v2[34];

  result = *((_QWORD *)this + 14);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 708);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "linearity_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

float kaldi::nnet1::AffineTransform::PropagateFnc(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  float result;
  uint64_t v12;
  const char *v13;

  v6 = kaldi::nnet1::AffineTransform::Bias((kaldi::nnet1::AffineTransform *)a1);
  kaldi::CuVectorBase<float>::CopyFromVec(a3, v6, v7, v8, v9);
  v10 = *(_QWORD *)(a1 + 352);
  if (v10 == *(_QWORD *)(a1 + 360) || !*(_DWORD *)(v10 + 20))
  {
    v12 = kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1);
    kaldi::CuVectorBase<float>::AddMatVec((uint64_t)a3, v12, CblasNoTrans, a2, v13, 1.0, 1.0);
  }
  else
  {
    kaldi::nnet1::Component::PropagateFnc(a1, a2, (uint64_t)a3);
  }
  if (*(_BYTE *)(a1 + 128))
    return kaldi::CuVectorBase<float>::ApplySoftMax((uint64_t)a3);
  return result;
}

uint64_t kaldi::nnet1::Component::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  void *v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  __int128 v12;
  __int128 v13;

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  v11 = &unk_1EA926508;
  *(_QWORD *)&v12 = v4;
  *((_QWORD *)&v12 + 1) = v3 | 0x100000000;
  LODWORD(v13) = v3;
  DWORD1(v13) = v3;
  *((_QWORD *)&v13 + 1) = *(_QWORD *)(a2 + 24);
  v5 = *(_DWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 8);
  v8 = &unk_1EA926508;
  *(_QWORD *)&v9 = v6;
  *((_QWORD *)&v9 + 1) = v5 | 0x100000000;
  LODWORD(v10) = v5;
  DWORD1(v10) = v5;
  *((_QWORD *)&v10 + 1) = *(_QWORD *)(a3 + 24);
  (*(void (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)a1 + 112))(a1, &v11, &v8, 0);
  v8 = &unk_1EA926508;
  v9 = 0u;
  v10 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v8);
  v11 = &unk_1EA926508;
  v12 = 0u;
  v13 = 0u;
  return kaldi::CuMatrixBase<float>::~CuMatrixBase(&v11);
}

void sub_1DE415350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;

  v17 = v14;
  *v16 = 0u;
  v16[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a9);
  a14 = v15;
  *v17 = 0u;
  v17[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AffineTransform::~AffineTransform(kaldi::nnet1::AffineTransform *this)
{
  kaldi::nnet1::AffineTransform::~AffineTransform(this);
  JUMPOUT(0x1DF0ED014);
}

{
  char *v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *((_QWORD *)this + 11) = &unk_1EA927C10;
  v2 = (char *)this + 88;
  *((_QWORD *)this + 12) = &unk_1EA927C38;
  v3 = (char *)this + 96;
  *(_QWORD *)this = &off_1EA927AD0;
  *((_QWORD *)this + 13) = &unk_1EA927C60;
  v4 = (char *)this + 104;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)this + 47);
  v9 = (void **)((char *)this + 352);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 304);
  v5 = (void *)*((_QWORD *)this + 35);
  if (v5)
  {
    *((_QWORD *)this + 36) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 32);
  if (v6)
  {
    *((_QWORD *)this + 33) = v6;
    operator delete(v6);
  }
  v9 = (void **)((char *)this + 208);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)((char *)this + 184);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)((char *)this + 160);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)((char *)this + 136);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v7 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  v8 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v4);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

kaldi::nnet1::AffineTransform *kaldi::nnet1::AffineTransform::Copy(kaldi::nnet1::AffineTransform *this)
{
  kaldi::nnet1::AffineTransform *v2;

  v2 = (kaldi::nnet1::AffineTransform *)operator new();
  kaldi::nnet1::AffineTransform::AffineTransform(v2, this);
  return v2;
}

void sub_1DE4153F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C409CA61EC0);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AffineTransform::GetType(kaldi::nnet1::AffineTransform *this)
{
  return 257;
}

uint64_t kaldi::nnet1::UpdatableComponent::IsUpdatable(kaldi::nnet1::UpdatableComponent *this)
{
  return 1;
}

uint64_t kaldi::nnet1::AffineTransform::CountZeroCorr(kaldi::nnet1::AffineTransform *this, int *a2, int *a3)
{
  int v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD v25[34];

  kaldi::nnet1::AffineTransform::EnsureCorrs(this);
  v6 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Bias(this) + 16);
  v7 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity(this) + 20);
  result = kaldi::nnet1::AffineTransform::Linearity(this);
  *a3 = v6 + *(_DWORD *)(result + 16) * v7;
  v9 = *((_QWORD *)this + 18) - *((_QWORD *)this + 17);
  if (v9)
  {
    v10 = *((_QWORD *)this + 21) - *((_QWORD *)this + 20);
    if (v10)
    {
      v11 = v9 >> 3;
      v12 = v10 >> 3;
      if (*((_DWORD *)this + 20) == 1)
        v13 = 0;
      else
        v13 = *((_DWORD *)this + 20);
      v14 = v12 - 1;
      if (v11 - 1 != v13 || v14 != v13)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "CountZeroCorr", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 646);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Unexpected mismatch in indexes: ", 32);
        v23 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"  ", 2);
        v24 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"  ", 2);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
      }
      v16 = kaldi::nnet1::AffineTransform::LinearityCorr(this, v13);
      v21 = kaldi::CuMatrixBase<float>::CountZeros(v16, v17, v18, v19, v20);
      v22 = kaldi::nnet1::AffineTransform::BiasCorr(this, v13);
      result = kaldi::CuVectorBase<float>::CountZeros(v22);
      LODWORD(v9) = result + v21;
    }
    else
    {
      LODWORD(v9) = 0;
    }
  }
  *a2 = v9;
  return result;
}

void kaldi::nnet1::AffineTransform::VectorizeWeightsCorrs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v8;
  int v9;
  int v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  void *v16;
  uint64_t v17;
  void *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v39, "VectorizeWeightsCorrs", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 541);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v39, "Weights are already vectorized");
LABEL_34:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v39);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v39, "VectorizeWeightsCorrs", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 544);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Performing vectorization of affine transform component", 54);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v39);
  }
  v8 = (uint64_t *)(a1 + 112);
  v9 = *(_DWORD *)(*(_QWORD *)(a1 + 112) + 16) * *(_DWORD *)(*(_QWORD *)(a1 + 112) + 20);
  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 120) + 16) + v9;
  if (v10 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v39, "VectorizeWeightsCorrs", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 547);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v39, "(nlinparams + bias_->Dim()) == NumParams()");
    goto LABEL_34;
  }
  kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 112), a2, (uint64_t *)&v39);
  v12 = (uint64_t)v39;
  v39 = 0;
  v13 = *v8;
  *v8 = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
    v14 = v39;
    v39 = 0;
    if (v14)
      (*(void (**)(void *))(*(_QWORD *)v14 + 24))(v14);
  }
  v41 = 0;
  v42 = 0;
  v39 = &unk_1EA926538;
  v40 = 0;
  if (v9 > *(_DWORD *)(a3 + 16))
    goto LABEL_37;
  v40 = *(_QWORD *)(a3 + 8);
  LODWORD(v41) = v9;
  v42 = *(_QWORD *)(a3 + 24);
  kaldi::CuVectorBase<float>::Set((uint64_t)&v39, *(float *)(a1 + 236));
  v15 = *(_DWORD *)(a3 + 16) - v9;
  *(_QWORD *)(a3 + 8) += 4 * v9;
  *(_DWORD *)(a3 + 16) = v15;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 120), a2, (uint64_t *)&v39);
  v16 = v39;
  v39 = 0;
  v17 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v16;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
    v18 = v39;
    v39 = 0;
    if (v18)
      (*(void (**)(void *))(*(_QWORD *)v18 + 16))(v18);
  }
  v19 = *(_DWORD *)(*(_QWORD *)(a1 + 120) + 16);
  v41 = 0;
  v39 = &unk_1EA926538;
  if (v19 > *(_DWORD *)(a3 + 16))
LABEL_37:
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v11);
  v40 = *(_QWORD *)(a3 + 8);
  LODWORD(v41) = v19;
  v42 = *(_QWORD *)(a3 + 24);
  kaldi::CuVectorBase<float>::Set((uint64_t)&v39, *(float *)(a1 + 240));
  v20 = *(int *)(*(_QWORD *)(a1 + 120) + 16);
  v21 = *(_DWORD *)(a3 + 16) - v20;
  *(_QWORD *)(a3 + 8) += 4 * v20;
  *(_DWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::nnet1::AffineTransform::EnsureCorrs((kaldi::nnet1::AffineTransform *)a1);
  v22 = a4[1];
  v23 = (v22 - *a4) >> 5;
  if (v23 != (uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 3
    || v23 != (uint64_t)(*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v39, "VectorizeWeightsCorrs", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 569);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v39, "veccorrs->size() == linearity_corr_.size() && veccorrs->size() == bias_corr_.size()");
    goto LABEL_34;
  }
  if (v22 == *a4)
    goto LABEL_30;
  v24 = 0;
  do
  {
    v25 = *(_DWORD *)(kaldi::nnet1::AffineTransform::LinearityCorr((kaldi::nnet1::AffineTransform *)a1, v24) + 20);
    v26 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v24) + 16)
        + *(_DWORD *)(kaldi::nnet1::AffineTransform::LinearityCorr((kaldi::nnet1::AffineTransform *)a1, v24) + 16) * v25;
    if (v26 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v39, "VectorizeWeightsCorrs", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 571);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v39, "(LinearityCorr(ic).NumRows() * LinearityCorr(ic).NumCols() + bias_corr_[ic]->Dim()) == NumParams()");
      goto LABEL_34;
    }
    ++v24;
    v27 = *a4;
    v28 = a4[1];
  }
  while (v24 < (v28 - *a4) >> 5);
  if (v28 != v27)
  {
    v29 = 0;
    do
    {
      v30 = v27 + 32 * v29;
      kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 136) + 8 * v29), v30, (uint64_t *)&v39);
      v31 = *(_QWORD *)(a1 + 136);
      v32 = v39;
      v39 = 0;
      v33 = *(_QWORD *)(v31 + 8 * v29);
      *(_QWORD *)(v31 + 8 * v29) = v32;
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
      v34 = v39;
      v39 = 0;
      if (v34)
        (*(void (**)(void *))(*(_QWORD *)v34 + 24))(v34);
      kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 160) + 8 * v29), v30, (uint64_t *)&v39);
      v35 = *(_QWORD *)(a1 + 160);
      v36 = v39;
      v39 = 0;
      v37 = *(_QWORD *)(v35 + 8 * v29);
      *(_QWORD *)(v35 + 8 * v29) = v36;
      if (v37)
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
      v38 = v39;
      v39 = 0;
      if (v38)
        (*(void (**)(void *))(*(_QWORD *)v38 + 16))(v38);
      ++v29;
      v27 = *a4;
    }
    while (v29 < (a4[1] - *a4) >> 5);
  }
LABEL_30:
  *(_BYTE *)(a1 + 16) = 1;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v39, "VectorizeWeightsCorrs", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 587);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Done  vectorization of affine transform component", 49);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v39);
  }
}

void sub_1DE415A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t kaldi::nnet1::Component::OutputRowCount(kaldi::nnet1::Component *this, uint64_t a2)
{
  return a2;
}

uint64_t kaldi::nnet1::AffineTransform::Info(kaldi::nnet1::AffineTransform *this)
{
  const char *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _QWORD *v12;
  _DWORD *v13;
  void **v14;
  uint64_t v15;
  void *__p[2];
  unsigned __int8 v18;
  void *v19[2];
  unsigned __int8 v20;
  _QWORD v21[11];
  char v22;
  uint64_t v23;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  (*(void (**)(kaldi::nnet1::AffineTransform *, _QWORD *, _QWORD))(*(_QWORD *)this + 168))(this, v21, 0);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n linearity", 11);
  v4 = *((_QWORD *)this + 14);
  if (!v4)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x251, "linearity_", v2);
  kaldi::nnet1::MomentStatistics<float>(v4);
  if ((v20 & 0x80u) == 0)
    v5 = v19;
  else
    v5 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v6 = v20;
  else
    v6 = (uint64_t)v19[1];
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, v6);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n bias", 6);
  v13 = (_DWORD *)*((_QWORD *)this + 15);
  if (!v13)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x255, "bias_", v11);
  kaldi::nnet1::MomentStatistics<float>(v13, v8, v9, v10, v11);
  if ((v18 & 0x80u) == 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v15 = v18;
  else
    v15 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
  if ((char)v18 < 0)
    operator delete(__p[0]);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  std::stringbuf::str();
  v21[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v21[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v22 < 0)
    operator delete((void *)v21[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v23);
}

void sub_1DE415C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AffineTransform::InfoGradient(kaldi::nnet1::AffineTransform *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  void **v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  void **v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  void *__p[2];
  unsigned __int8 v41;
  void *v42[2];
  unsigned __int8 v43;
  void *v44[2];
  unsigned __int8 v45;
  void *v46[2];
  unsigned __int8 v47;
  void *v48[2];
  unsigned __int8 v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;

  if (*((_BYTE *)this + 232))
  {
    std::string::basic_string[abi:ne180100]<0>(&v50, "\n  linearity_grad");
    kaldi::nnet1::MomentStatistics<float>((_QWORD *)this + 17, v4, v5, v6, v7);
    if ((v49 & 0x80u) == 0)
      v8 = v48;
    else
      v8 = (void **)v48[0];
    if ((v49 & 0x80u) == 0)
      v9 = v49;
    else
      v9 = (std::string::size_type)v48[1];
    v10 = std::string::append(&v50, (const std::string::value_type *)v8, v9);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v51, ", lr-coef ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::ToString<float>();
    if ((v47 & 0x80u) == 0)
      v14 = v46;
    else
      v14 = (void **)v46[0];
    if ((v47 & 0x80u) == 0)
      v15 = v47;
    else
      v15 = (std::string::size_type)v46[1];
    v16 = std::string::append(&v52, (const std::string::value_type *)v14, v15);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append(&v53, ", max-norm ");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::ToString<float>();
    if ((v45 & 0x80u) == 0)
      v20 = v44;
    else
      v20 = (void **)v44[0];
    if ((v45 & 0x80u) == 0)
      v21 = v45;
    else
      v21 = (std::string::size_type)v44[1];
    v22 = std::string::append(&v54, (const std::string::value_type *)v20, v21);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v55, "\n  bias_grad");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::MomentStatistics<float>((_QWORD *)this + 20, v26, v27, v28, v29);
    if ((v43 & 0x80u) == 0)
      v30 = v42;
    else
      v30 = (void **)v42[0];
    if ((v43 & 0x80u) == 0)
      v31 = v43;
    else
      v31 = (std::string::size_type)v42[1];
    v32 = std::string::append(&v56, (const std::string::value_type *)v30, v31);
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    v34 = std::string::append(&v57, ", lr-coef ");
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::ToString<float>();
    if ((v41 & 0x80u) == 0)
      v36 = __p;
    else
      v36 = (void **)__p[0];
    if ((v41 & 0x80u) == 0)
      v37 = v41;
    else
      v37 = (std::string::size_type)__p[1];
    v38 = std::string::append(&v58, (const std::string::value_type *)v36, v37);
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    a2[2] = *((_QWORD *)&v38->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    if ((char)v41 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    if ((char)v43 < 0)
      operator delete(v42[0]);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if ((char)v45 < 0)
      operator delete(v44[0]);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if ((char)v47 < 0)
      operator delete(v46[0]);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    if ((char)v49 < 0)
      operator delete(v48[0]);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  linearity_grad is uninitialized\n  bias_grad is uninitialized");
  }
}

void sub_1DE415FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  uint64_t v64;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v64 - 41) < 0)
    operator delete(*(void **)(v64 - 64));
  if (*(char *)(v64 - 73) < 0)
    operator delete(*(void **)(v64 - 96));
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v64 - 105) < 0)
    operator delete(*(void **)(v64 - 128));
  if (*(char *)(v64 - 137) < 0)
    operator delete(*(void **)(v64 - 160));
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v64 - 169) < 0)
    operator delete(*(void **)(v64 - 192));
  if (a64 < 0)
    operator delete(a59);
  if (a32 < 0)
    operator delete(a27);
  if (a57 < 0)
    operator delete(a52);
  if (a50 < 0)
    operator delete(a45);
  if (a38 < 0)
    operator delete(a33);
  if (a44 < 0)
    operator delete(a39);
  _Unwind_Resume(a1);
}

void sub_1DE416120()
{
  JUMPOUT(0x1DE4160C8);
}

void sub_1DE416128()
{
  JUMPOUT(0x1DE4160D8);
}

void sub_1DE416130()
{
  JUMPOUT(0x1DE4160E8);
}

void sub_1DE416138()
{
  JUMPOUT(0x1DE4160F8);
}

void sub_1DE416140()
{
  JUMPOUT(0x1DE416108);
}

_QWORD *kaldi::nnet1::Component::InfoPropagate@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, &byte_1DEBD87CE);
}

void kaldi::nnet1::AffineTransform::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  void *v11;
  BOOL v15;
  float *v16;
  BOOL v18;
  BOOL v19;
  BOOL v25;
  void **v26;
  BOOL v27;
  BOOL v31;
  BOOL v33;
  BOOL v34;
  BOOL v38;
  void *v39;
  int v40;
  std::string *v42;
  int inited;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  int v47;
  unint64_t v48;
  int64_t v49;
  unint64_t v50;
  float v51;
  float v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  unint64_t v70;
  float v71;
  float v72;
  float v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  _QWORD *v79;
  void **v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  float *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  _BYTE v91[16];
  uint64_t v92;
  void *__p;
  void *v94;
  void **v95[34];
  void *v96[3];
  int v97;
  std::string v98;
  std::string v99;
  int v100;
  float v101;
  int v102;

  v101 = 2.0;
  v102 = -1073741824;
  v100 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v99);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 244), &v98);
  v97 = -1;
  memset(v96, 0, sizeof(v96));
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_158;
    kaldi::ReadToken(a2, 0, (uint64_t)v96, v6, v7);
    if ((SHIBYTE(v96[2]) & 0x80000000) == 0)
      break;
    v11 = v96[1];
    if (v96[1] == (void *)10)
    {
      if (*(_QWORD *)v96[0] == 0x61654D736169423CLL && *((_WORD *)v96[0] + 4) == 15982)
      {
LABEL_81:
        v16 = (float *)&v102;
LABEL_152:
        kaldi::ReadBasicType<float>(a2, 0, v16, v8, v9);
        goto LABEL_153;
      }
      v11 = v96[1];
    }
    else if (v96[1] == (void *)13
           && *(_QWORD *)v96[0] == 0x74536D617261503CLL
           && *(_QWORD *)((char *)v96[0] + 5) == 0x3E7665646474536DLL)
    {
LABEL_100:
      v16 = (float *)&v100;
      goto LABEL_152;
    }
    if (v11 == (void *)11)
    {
      if (*(_QWORD *)v96[0] == 0x6E6152736169423CLL && *(_QWORD *)((char *)v96[0] + 3) == 0x3E65676E61527361)
      {
LABEL_94:
        v16 = &v101;
        goto LABEL_152;
      }
      v11 = v96[1];
    }
    if (v11 == (void *)15)
    {
      v15 = *(_QWORD *)v96[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v96[0] + 7) == 0x3E66656F43657461;
      v16 = (float *)(a1 + 236);
      if (v15)
        goto LABEL_152;
      v11 = v96[1];
    }
    if (v11 == (void *)19)
    {
      v18 = *(_QWORD *)v96[0] == 0x61654C736169423CLL
         && *((_QWORD *)v96[0] + 1) == 0x6F43657461526E72
         && *(_QWORD *)((char *)v96[0] + 11) == 0x3E66656F43657461;
      v16 = (float *)(a1 + 240);
      if (v18)
        goto LABEL_152;
      v11 = v96[1];
    }
    if (v11 == (void *)9)
    {
      v19 = *(_QWORD *)v96[0] == 0x6D726F4E78614D3CLL && *((_BYTE *)v96[0] + 8) == 62;
      v16 = (float *)(a1 + 252);
      if (v19)
        goto LABEL_152;
      v11 = v96[1];
    }
    if (v11 == (void *)12)
    {
      if (*(_QWORD *)v96[0] == 0x536D6F646E61523CLL && *((_DWORD *)v96[0] + 2) == 1046766949)
        goto LABEL_116;
      v11 = v96[1];
    }
    if (v11 == (void *)19)
    {
      if (*(_QWORD *)v96[0] == 0x61725474696E493CLL
        && *((_QWORD *)v96[0] + 1) == 0x79546D726F66736ELL
        && *(_QWORD *)((char *)v96[0] + 11) == 0x3E657079546D726FLL)
      {
        goto LABEL_155;
      }
      v11 = v96[1];
    }
    if (v11 == (void *)18)
    {
      if (*(_QWORD *)v96[0] == 0x6E6569646172473CLL
        && *((_QWORD *)v96[0] + 1) == 0x7079546D726F4E74
        && *((_WORD *)v96[0] + 8) == 15973)
      {
LABEL_154:
        v42 = &v98;
LABEL_156:
        kaldi::ReadToken(a2, 0, (uint64_t)v42, v8, v9);
        goto LABEL_153;
      }
      v11 = v96[1];
    }
    if (v11 != (void *)9)
      goto LABEL_157;
    v25 = *(_QWORD *)v96[0] == 0x6461724778614D3CLL && *((_BYTE *)v96[0] + 8) == 62;
    v16 = (float *)(a1 + 248);
    if (v25)
      goto LABEL_152;
    if (v96[1] != (void *)9)
      goto LABEL_157;
    v26 = (void **)v96[0];
LABEL_146:
    v39 = *v26;
    v40 = *((unsigned __int8 *)v26 + 8);
    if (v39 != (void *)0x78616D74666F533CLL || v40 != 62)
      goto LABEL_157;
    *(_BYTE *)(a1 + 128) = 1;
LABEL_153:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  switch(HIBYTE(v96[2]))
  {
    case 9:
      goto LABEL_117;
    case 0xA:
      if (v96[0] == (void *)0x61654D736169423CLL && LOWORD(v96[1]) == 15982)
        goto LABEL_81;
      goto LABEL_92;
    case 0xB:
      if (v96[0] == (void *)0x6E6152736169423CLL && *(void **)((char *)v96 + 3) == (void *)0x3E65676E61527361)
        goto LABEL_94;
LABEL_92:
      if (HIBYTE(v96[2]) != 9)
        goto LABEL_157;
      goto LABEL_117;
    case 0xC:
      goto LABEL_111;
    case 0xD:
      if (v96[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v96 + 5) != (void *)0x3E7665646474536DLL)
        goto LABEL_157;
      goto LABEL_100;
    case 0xF:
      v27 = v96[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v96 + 7) == (void *)0x3E66656F43657461;
      v16 = (float *)(a1 + 236);
      if (v27)
        goto LABEL_152;
      goto LABEL_109;
    case 0x12:
      goto LABEL_133;
    case 0x13:
      v31 = v96[0] == (void *)0x61654C736169423CLL
         && v96[1] == (void *)0x6F43657461526E72
         && *(void **)((char *)&v96[1] + 3) == (void *)0x3E66656F43657461;
      v16 = (float *)(a1 + 240);
      if (v31)
        goto LABEL_152;
      if (HIBYTE(v96[2]) <= 0x11u)
      {
LABEL_109:
        if (HIBYTE(v96[2]) == 9)
        {
LABEL_117:
          v33 = v96[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v96[1]) == 62;
          v16 = (float *)(a1 + 252);
          if (v33)
            goto LABEL_152;
        }
        else
        {
          if (HIBYTE(v96[2]) != 12)
            goto LABEL_157;
LABEL_111:
          if (v96[0] == (void *)0x536D6F646E61523CLL && LODWORD(v96[1]) == 1046766949)
          {
LABEL_116:
            kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v97, v8, v9);
            goto LABEL_153;
          }
        }
LABEL_140:
        if (HIBYTE(v96[2]) != 9)
          goto LABEL_157;
        v38 = v96[0] == (void *)0x6461724778614D3CLL && LOBYTE(v96[1]) == 62;
        v16 = (float *)(a1 + 248);
        if (v38)
          goto LABEL_152;
        v26 = v96;
        goto LABEL_146;
      }
      if (HIBYTE(v96[2]) == 18)
      {
LABEL_133:
        if (v96[0] == (void *)0x6E6569646172473CLL && v96[1] == (void *)0x7079546D726F4E74 && LOWORD(v96[2]) == 15973)
          goto LABEL_154;
        goto LABEL_140;
      }
      if (HIBYTE(v96[2]) == 19)
      {
        v34 = v96[0] == (void *)0x61725474696E493CLL && v96[1] == (void *)0x79546D726F66736ELL;
        if (v34 && *(void **)((char *)&v96[1] + 3) == (void *)0x3E657079546D726FLL)
        {
LABEL_155:
          v42 = &v99;
          goto LABEL_156;
        }
      }
LABEL_157:
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v96, "</Component>"))
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v95, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 171);
        v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"Unknown token ", 14);
        if (SHIBYTE(v96[2]) >= 0)
          v80 = v96;
        else
          v80 = (void **)v96[0];
        if (SHIBYTE(v96[2]) >= 0)
          v81 = HIBYTE(v96[2]);
        else
          v81 = (uint64_t)v96[1];
        v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v80, v81);
        v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)", a typo in config?", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" (ParamStddev|BiasMean|BiasRange|LearnRateCoef|BiasLearnRateCoef|MaxNorm|InitTransformType|GradientNormType|MaxGrad|RandomSeed)", 127);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v95);
      }
LABEL_158:
      inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v99);
      *(_DWORD *)(a1 + 244) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v98);
      if (v97 >= 1)
        kaldi::UniformRandomNumber::SetRandomSeeds(a3, v97);
      kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v91, a3);
      kaldi::Matrix<float>::Matrix((uint64_t)&v87, *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 8), 0, 0);
      v47 = *(_DWORD *)(a1 + 12);
      if (v47 < 1)
        goto LABEL_186;
      v48 = 0;
      LODWORD(v49) = *(_DWORD *)(a1 + 8);
      while (2)
      {
        if ((int)v49 < 1)
          goto LABEL_185;
        v50 = 0;
        while (2)
        {
          switch(inited)
          {
            case 0:
              if (v48 >= v89 || v50 >= v88)
LABEL_204:
                kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v46);
              v53 = v87 + 4 * (int)v48 * v90;
              if (v48 == v50)
                v54 = 1.0;
              else
                v54 = 0.0;
              goto LABEL_182;
            case 2:
              v55 = *(float *)&v100;
              kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v91, 0, v44, v45, v46);
              if (v48 >= v89 || v50 >= v88)
                goto LABEL_204;
              v53 = v87 + 4 * (int)v48 * v90;
              v54 = v55 * v56;
LABEL_182:
              *(float *)(v53 + 4 * v50) = v54;
              break;
            case 1:
              v51 = *(float *)&v100;
              v52 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v44, v45, v46);
              if (v48 >= v89 || v50 >= v88)
                goto LABEL_204;
              v53 = v87 + 4 * (int)v48 * v90;
              v54 = (v52 + -0.5) * (float)(v51 + v51);
              goto LABEL_182;
          }
          ++v50;
          v49 = *(int *)(a1 + 8);
          if ((uint64_t)v50 < v49)
            continue;
          break;
        }
        v47 = *(_DWORD *)(a1 + 12);
LABEL_185:
        if ((uint64_t)++v48 < v47)
          continue;
        break;
      }
LABEL_186:
      v59 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1) + 20);
      if (v59 != kaldi::MatrixBase<float>::NumRows((uint64_t)&v87)
        || (v60 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1) + 16),
            v60 != kaldi::MatrixBase<float>::NumCols((uint64_t)&v87)))
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v95, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 197);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"Linearity().NumRows() == mat.NumRows() && Linearity().NumCols() == mat.NumCols()", 80);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v95);
      }
      v61 = kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1);
      kaldi::CuMatrixBase<float>::CopyFromMat(v61, (uint64_t)&v87, 111, v62, v63);
      v64 = *(unsigned int *)(a1 + 12);
      v85 = 0;
      v86 = 0;
      v84 = 0;
      kaldi::Vector<float>::Resize((void **)&v84, v64, 0, v65, v66);
      if (*(int *)(a1 + 12) >= 1)
      {
        v70 = 0;
        do
        {
          v71 = *(float *)&v102;
          v72 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v67, v68, v69);
          if (v70 >= v85)
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v69);
          v73 = v71 + (v72 + -0.5) * v101;
          v84[v70++] = v73;
        }
        while ((uint64_t)v70 < *(int *)(a1 + 12));
      }
      v74 = kaldi::nnet1::AffineTransform::Bias((kaldi::nnet1::AffineTransform *)a1);
      if (*(_DWORD *)(v74 + 16) != (_DWORD)v85)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v95, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 207);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"Bias().Dim() == vec.Dim()", 25);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v95);
      }
      v75 = (_DWORD *)kaldi::nnet1::AffineTransform::Bias((kaldi::nnet1::AffineTransform *)a1);
      kaldi::CuVectorBase<float>::CopyFromVec<float>(v75, (uint64_t)&v84, v76, v77, v78);
      kaldi::Vector<float>::Destroy((uint64_t)&v84);
      kaldi::Matrix<float>::~Matrix((uint64_t)&v87);
      if (__p)
      {
        v94 = __p;
        operator delete(__p);
      }
      v95[0] = (void **)&v92;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v95);
      if (SHIBYTE(v96[2]) < 0)
        operator delete(v96[0]);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v99.__r_.__value_.__l.__data_);
      return;
    default:
      goto LABEL_157;
  }
}

void sub_1DE416CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)va1);
  if (*(char *)(v4 - 193) < 0)
    operator delete(*(void **)(v4 - 216));
  if (*(char *)(v4 - 161) < 0)
    operator delete(*(void **)(v4 - 184));
  if (*(char *)(v4 - 137) < 0)
    operator delete(*(void **)(v4 - 160));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AffineTransform::WriteData(_QWORD *a1, _QWORD *a2, int a3, int a4)
{
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _DWORD *v12;

  (*(void (**)(_QWORD *))(*a1 + 168))(a1);
  v9 = a1[14];
  if (!v9)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x251, "linearity_", v8);
  kaldi::CuMatrixBase<float>::Write(v9, a2, a3, a4);
  v12 = (_DWORD *)a1[15];
  if (!v12)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x255, "bias_", v11);
  kaldi::CuVectorBase<float>::Write(v12, a2, a3, v10, v11);
}

void kaldi::nnet1::AffineTransform::BackpropagateFnc(kaldi::nnet1::AffineTransform *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v9 = *((_QWORD *)this + 44);
  if (v9 == *((_QWORD *)this + 45) || !*(_DWORD *)(v9 + 48 * a6 + 20))
  {
    v12 = kaldi::nnet1::AffineTransform::Linearity(this);
    kaldi::CuMatrixBase<float>::AddMatMat(a5, a4, CblasNoTrans, v12, (const char *)0x6F, 1.0, 0.0);
  }
  else
  {
    v11 = kaldi::nnet1::AffineTransform::Linearity(this);
    kaldi::CuMatrixBase<float>::AddMatMatMasked(a5, a4, CblasNoTrans, v11, (const char *)0x6F, *((_QWORD *)this + 44) + 48 * a6, 1.0);
  }
}

char *kaldi::nnet1::Component::SetWorkspace(uint64_t a1, uint64_t a2)
{
  char *result;

  result = (char *)(a1 + 24);
  if (result != (char *)a2)
    return std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return result;
}

void kaldi::nnet1::AffineTransform::GetUnitOutputFnc(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD v15[4];

  v5 = *(_QWORD *)(a1 + 120);
  if (!v5)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x255, "bias_", a5);
  if (*(_DWORD *)(v5 + 16) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x10E, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
  kaldi::CuVectorBase<float>::Set(a4, *(float *)(*(_QWORD *)(v5 + 8) + 4 * (int)a3));
  v11 = *(_QWORD *)(a1 + 112);
  if (!v11)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x251, "linearity_", v10);
  if (*(_DWORD *)(v11 + 20) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v10);
  v12 = *(_QWORD *)(v11 + 8) + 4 * (int)(*(_DWORD *)(v11 + 24) * a3);
  v13 = *(_DWORD *)(v11 + 16);
  v14 = *(_QWORD *)(v11 + 32);
  v15[0] = &unk_1EA926538;
  v15[1] = v12;
  v15[3] = v14;
  v15[2] = v13;
  kaldi::CuVectorBase<float>::AddMatVec(a4, a2, CblasNoTrans, (uint64_t)v15, v10, 1.0, 1.0);
}

float kaldi::nnet1::AffineTransform::GetUnitOutputFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD v12[4];

  v5 = *(_QWORD *)(a1 + 120);
  if (!v5)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x255, "bias_", a5);
  if (*(_DWORD *)(v5 + 16) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x10E, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
  v6 = *(_QWORD *)(a1 + 112);
  if (!v6)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x251, "linearity_", a5);
  if (*(_DWORD *)(v6 + 20) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a5);
  v7 = *(float *)(*(_QWORD *)(v5 + 8) + 4 * (int)a3);
  v8 = *(_QWORD *)(v6 + 8) + 4 * *(_DWORD *)(v6 + 24) * (int)a3;
  v9 = *(_DWORD *)(v6 + 16);
  v10 = *(_QWORD *)(v6 + 32);
  v12[0] = &unk_1EA926538;
  v12[1] = v8;
  v12[3] = v10;
  v12[2] = v9;
  return v7 + kaldi::VecVec<float>(a2, (uint64_t)v12, a3, a4, a5);
}

uint64_t kaldi::nnet1::AffineTransform::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  BOOL v11;
  float *v12;
  void *v13;
  BOOL v14;
  BOOL v16;
  BOOL v17;
  BOOL v20;
  void **v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v27;
  void *v28;
  int v29;
  const char *v31;
  const char *v32;
  uint64_t result;
  const char *v34;
  _QWORD *v35;
  void **v36;
  uint64_t v37;
  void *__p[2];
  uint64_t v40;
  void *v41[4];

  while (kaldi::Peek(a2, a3) == 60)
  {
    memset(v41, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v41, v7, v8);
    if (SHIBYTE(v41[2]) < 0)
    {
      v13 = v41[1];
      if (v41[1] == (void *)15)
      {
        v14 = *(_QWORD *)v41[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v41[0] + 7) == 0x3E66656F43657461;
        v12 = (float *)(a1 + 236);
        if (v14)
          goto LABEL_82;
      }
      if (v41[1] == (void *)19)
      {
        v16 = *(_QWORD *)v41[0] == 0x61654C736169423CLL
           && *((_QWORD *)v41[0] + 1) == 0x6F43657461526E72
           && *(_QWORD *)((char *)v41[0] + 11) == 0x3E66656F43657461;
        v12 = (float *)(a1 + 240);
        if (v16)
          goto LABEL_82;
        v13 = v41[1];
      }
      if (v13 == (void *)9)
      {
        v17 = *(_QWORD *)v41[0] == 0x6D726F4E78614D3CLL && *((_BYTE *)v41[0] + 8) == 62;
        v12 = (float *)(a1 + 252);
        if (v17)
          goto LABEL_82;
        v13 = v41[1];
      }
      if (v13 == (void *)18)
      {
        if (*(_QWORD *)v41[0] == 0x6E6569646172473CLL
          && *((_QWORD *)v41[0] + 1) == 0x7079546D726F4E74
          && *((_WORD *)v41[0] + 8) == 15973)
        {
LABEL_87:
          __p[0] = 0;
          __p[1] = 0;
          v40 = 0;
          kaldi::ReadToken(a2, a3, (uint64_t)__p, v9, v10);
          *(_DWORD *)(a1 + 244) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
          if (SHIBYTE(v40) < 0)
            operator delete(__p[0]);
          goto LABEL_83;
        }
        v13 = v41[1];
      }
      if (v13 != (void *)9)
        goto LABEL_93;
      v20 = *(_QWORD *)v41[0] == 0x6461724778614D3CLL && *((_BYTE *)v41[0] + 8) == 62;
      v12 = (float *)(a1 + 248);
      if (!v20)
      {
        if (v41[1] != (void *)9)
          goto LABEL_93;
        v21 = (void **)v41[0];
        goto LABEL_76;
      }
    }
    else if (HIBYTE(v41[2]) > 0x11u)
    {
      if (HIBYTE(v41[2]) == 18)
      {
        if (v41[0] == (void *)0x6E6569646172473CLL && v41[1] == (void *)0x7079546D726F4E74 && LOWORD(v41[2]) == 15973)
          goto LABEL_87;
LABEL_70:
        if (HIBYTE(v41[2]) != 9)
          goto LABEL_93;
        v27 = v41[0] == (void *)0x6461724778614D3CLL && LOBYTE(v41[1]) == 62;
        v12 = (float *)(a1 + 248);
        if (!v27)
        {
          v21 = v41;
LABEL_76:
          v28 = *v21;
          v29 = *((unsigned __int8 *)v21 + 8);
          if (v28 != (void *)0x78616D74666F533CLL || v29 != 62)
            goto LABEL_93;
          *(_BYTE *)(a1 + 128) = 1;
          goto LABEL_83;
        }
        goto LABEL_82;
      }
      if (HIBYTE(v41[2]) != 19
        || (v41[0] == (void *)0x61654C736169423CLL ? (v22 = v41[1] == (void *)0x6F43657461526E72) : (v22 = 0),
            v22 ? (v23 = *(void **)((char *)&v41[1] + 3) == (void *)0x3E66656F43657461) : (v23 = 0),
            v12 = (float *)(a1 + 240),
            !v23))
      {
LABEL_93:
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 231);
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
        if (SHIBYTE(v41[2]) >= 0)
          v36 = v41;
        else
          v36 = (void **)v41[0];
        if (SHIBYTE(v41[2]) >= 0)
          v37 = HIBYTE(v41[2]);
        else
          v37 = (uint64_t)v41[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
    }
    else if (HIBYTE(v41[2]) == 9)
    {
      v24 = v41[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v41[1]) == 62;
      v12 = (float *)(a1 + 252);
      if (!v24)
        goto LABEL_70;
    }
    else
    {
      if (HIBYTE(v41[2]) != 15)
        goto LABEL_93;
      v11 = v41[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v41 + 7) == (void *)0x3E66656F43657461;
      v12 = (float *)(a1 + 236);
      if (!v11)
        goto LABEL_93;
    }
LABEL_82:
    kaldi::ReadBasicType<float>(a2, a3, v12, v9, v10);
LABEL_83:
    if (SHIBYTE(v41[2]) < 0)
      operator delete(v41[0]);
  }
  (***(void (****)(_QWORD, uint64_t *, uint64_t, uint64_t))(a1 + 112))(*(_QWORD *)(a1 + 112), a2, a3, a4);
  (***(void (****)(_QWORD, uint64_t *, uint64_t))(a1 + 120))(*(_QWORD *)(a1 + 120), a2, a3);
  *(_BYTE *)(a1 + 16) = 0;
  if (*(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1) + 20) != *(_DWORD *)(a1 + 12))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0xF2, "Linearity().NumRows() == output_dim_", v31);
  if (*(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1) + 16) != *(_DWORD *)(a1 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0xF3, "Linearity().NumCols() == input_dim_", v32);
  result = kaldi::nnet1::AffineTransform::Bias((kaldi::nnet1::AffineTransform *)a1);
  if (*(_DWORD *)(result + 16) != *(_DWORD *)(a1 + 12))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0xF4, "Bias().Dim() == output_dim_", v34);
  return result;
}

void sub_1DE417604()
{
  JUMPOUT(0x1DE41760CLL);
}

_QWORD *kaldi::nnet1::AffineTransform::WriteConfig(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  _QWORD *result;
  uint64_t v19;
  const char *v20;
  std::string __p;

  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<BiasLearnRateCoef>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxNorm>", v10, v11);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v12, v13);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 244), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v16, v17);
  result = kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  if (*(_BYTE *)(a1 + 128))
    return kaldi::WriteToken(a2, a3, (kaldi *)"<Softmax>", v19, v20);
  return result;
}

void sub_1DE417744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::AffineTransform::NumParams(kaldi::nnet1::AffineTransform *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *((_QWORD *)this + 14);
  if (!v5)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x251, "linearity_", a5);
  v6 = *((_QWORD *)this + 15);
  if (!v6)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x255, "bias_", a5);
  return (*(_DWORD *)(v6 + 16) + *(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20));
}

_DWORD *kaldi::nnet1::AffineTransform::GetParams(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  v10 = a1[14];
  if (!v10)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x251, "linearity_", v9);
  v11 = *(_DWORD *)(v10 + 16) * *(_DWORD *)(v10 + 20);
  v18 = 0;
  v19 = 0;
  if (v11 > *(_DWORD *)(a2 + 8))
    goto LABEL_6;
  v17 = *(void **)a2;
  LODWORD(v18) = v11;
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v17, v10, v7, v8, v9);
  v14 = (_DWORD *)a1[15];
  if (!v14)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x255, "bias_", v9);
  v15 = v14[4];
  v18 = 0;
  v19 = 0;
  if ((v15 + v11) > *(_DWORD *)(a2 + 8))
LABEL_6:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
  v17 = (void *)(*(_QWORD *)a2 + 4 * v11);
  LODWORD(v18) = v15;
  return kaldi::CuVectorBase<float>::CopyToVec<float>(v14, (uint64_t)&v17, v12, v13, v9);
}

_DWORD *kaldi::nnet1::AffineTransform::SetParams(kaldi::nnet1::AffineTransform *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  int v6;
  int v7;
  uint64_t v8;
  const char *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(kaldi::nnet1::AffineTransform *))(*(_QWORD *)a1 + 176))(a1))
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x129, "wei_src.Dim() == NumParams()", v5);
  v6 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity(a1) + 20);
  v7 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity(a1) + 16) * v6;
  v8 = kaldi::nnet1::AffineTransform::Linearity(a1);
  v16 = 0;
  v17 = 0;
  if (v7 > *(_DWORD *)(a2 + 8)
    || (v15 = *(char **)a2,
        LODWORD(v16) = v7,
        kaldi::CuMatrixBase<float>::CopyRowsFromVec(v8, &v15),
        v10 = (_DWORD *)kaldi::nnet1::AffineTransform::Bias(a1),
        v13 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Bias(a1) + 16),
        v16 = 0,
        v17 = 0,
        (v13 + v7) > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
  }
  v15 = (char *)(*(_QWORD *)a2 + 4 * v7);
  LODWORD(v16) = v13;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v10, (uint64_t)&v15, v11, v12, v9);
}

float kaldi::nnet1::AffineTransform::GetNormalizedLearningRate(kaldi::nnet1::AffineTransform *this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;

  if (!*((_BYTE *)this + 84))
    return *((float *)this + 14);
  v2 = *((_QWORD *)this + 35);
  v3 = *((_QWORD *)this + 36) - v2;
  if (!v3)
    return NAN;
  v4 = v3 >> 2;
  if ((int)v4 <= a2)
    return NAN;
  v5 = v4 - 1;
  if (a2 >= 0)
    v5 = a2;
  return *(float *)(v2 + 4 * v5);
}

float kaldi::nnet1::AffineTransform::SumParams(kaldi::nnet1::AffineTransform *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  const char *v7;
  float v8;
  uint64_t v9;

  v6 = *((_QWORD *)this + 14);
  if (!v6)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x251, "linearity_", a5);
  v8 = kaldi::CuMatrixBase<float>::Sum(v6, a2, a3, a4, a5);
  v9 = *((_QWORD *)this + 15);
  if (!v9)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x255, "bias_", v7);
  return v8 + kaldi::CuVectorBase<float>::Sum(v9);
}

uint64_t kaldi::nnet1::AffineTransform::PerturbParams(kaldi::nnet1::AffineTransform *this, float a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  _QWORD v17[4];
  _BYTE v18[48];

  v4 = *(unsigned int *)(kaldi::nnet1::AffineTransform::Linearity(this) + 20);
  v5 = kaldi::nnet1::AffineTransform::Linearity(this);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v18, v4, *(unsigned int *)(v5 + 16), 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v18);
  v6 = kaldi::nnet1::AffineTransform::Linearity(this);
  kaldi::CuMatrixBase<float>::AddMat(v6, (uint64_t)v18, 111, v7, v8, a2, 1.0);
  v9 = *(unsigned int *)(kaldi::nnet1::AffineTransform::Bias(this) + 16);
  v17[0] = &unk_1EA92DFD8;
  memset(&v17[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v17, v9, 1u, v10, v11);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v17);
  v12 = kaldi::nnet1::AffineTransform::Bias(this);
  kaldi::CuVectorBase<float>::AddVec(v12, (uint64_t)v17, v13, v14, v15, a2, 1.0);
  v17[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v17);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v18);
}

void sub_1DE417BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AffineTransform::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::AffineTransform *v8;
  const char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  void *v27;
  uint64_t v28;
  uint64_t v29;

  v8 = (kaldi::nnet1::AffineTransform *)(*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  (*(void (**)(kaldi::nnet1::AffineTransform *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 232))(v8, a2, a3, 0, 0);
  v10 = a1[14];
  if (!v10)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x251, "linearity_", v9);
  v11 = *(_DWORD *)(v10 + 16) * *(_DWORD *)(v10 + 20);
  v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v12, 0, v13, v14);
  v28 = 0;
  v29 = 0;
  if (v11 > *(_DWORD *)(a4 + 8))
    goto LABEL_6;
  v27 = *(void **)a4;
  LODWORD(v28) = v11;
  v16 = kaldi::nnet1::AffineTransform::LinearityCorr(v8, 0);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v27, v16, v17, v18, v19);
  v20 = a1[15];
  if (!v20)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x255, "bias_", v15);
  v21 = *(_DWORD *)(v20 + 16);
  v28 = 0;
  v29 = 0;
  if ((v21 + v11) > *(_DWORD *)(a4 + 8))
LABEL_6:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v15);
  v27 = (void *)(*(_QWORD *)a4 + 4 * v11);
  LODWORD(v28) = v21;
  v22 = (_DWORD *)kaldi::nnet1::AffineTransform::BiasCorr(v8, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v22, (uint64_t)&v27, v23, v24, v25);
  return (*(uint64_t (**)(kaldi::nnet1::AffineTransform *))(*(_QWORD *)v8 + 8))(v8);
}

void kaldi::nnet1::AffineTransform::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;

  kaldi::nnet1::AffineTransform::EnsureCorrs((kaldi::nnet1::AffineTransform *)a1);
  *(_QWORD *)(kaldi::nnet1::AffineTransform::LinearityCorr((kaldi::nnet1::AffineTransform *)a1, a5) + 32) = a4;
  *(_QWORD *)(kaldi::nnet1::AffineTransform::BiasCorr((kaldi::nnet1::AffineTransform *)a1, a5) + 24) = a4;
  v10 = *(float *)(a1 + 60);
  *(_DWORD *)(*(_QWORD *)(a1 + 256) + 4 * a5) = *(_DWORD *)(a2 + 20);
  v11 = *(_QWORD *)(a1 + 352);
  if (v11 == *(_QWORD *)(a1 + 360) || !*(_DWORD *)(v11 + 48 * a5 + 20))
  {
    v13 = kaldi::nnet1::AffineTransform::LinearityCorr((kaldi::nnet1::AffineTransform *)a1, a5);
    kaldi::CuMatrixBase<float>::AddMatMat(v13, a3, CblasTrans, a2, (const char *)0x6F, 1.0, v10);
  }
  else
  {
    v12 = kaldi::nnet1::AffineTransform::LinearityCorr((kaldi::nnet1::AffineTransform *)a1, a5);
    if (v10 == 0.0)
      kaldi::CuMatrixBase<float>::SetZero(v12);
    else
      kaldi::CuMatrixBase<float>::Scale(v12, v10);
    v14 = kaldi::nnet1::AffineTransform::LinearityCorr((kaldi::nnet1::AffineTransform *)a1, a5);
    kaldi::CuMatrixBase<float>::AddMatMatMasked(v14, a3, CblasTrans, a2, (const char *)0x6F, *(_QWORD *)(a1 + 352) + 48 * a5, 1.0);
  }
  v15 = kaldi::nnet1::AffineTransform::BiasCorr((kaldi::nnet1::AffineTransform *)a1, a5);
  kaldi::CuVectorBase<float>::AddRowSumMat(v15, a3, 1.0, v10, v16, v17, v18);
}

uint64_t kaldi::nnet1::AffineTransform::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 248) = a3;
  *(_DWORD *)(result + 244) = a2;
  *(_BYTE *)(result + 232) = 0;
  return result;
}

void kaldi::nnet1::AffineTransform::NormalizeGradients(kaldi::nnet1::AffineTransform *this, float a2, int a3)
{
  float v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;

  v4 = a2;
  v6 = *((_DWORD *)this + 61);
  if (v6 == 3)
  {
    if (a2 >= 0.0 && a2 <= 1.0)
    {
      v10 = kaldi::nnet1::AffineTransform::LinearityCorr(this, a3);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v10, *((_QWORD *)this + 23) + 48 * a3, v4);
      v11 = kaldi::nnet1::AffineTransform::BiasCorr(this, a3);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v11, *((_QWORD *)this + 26) + 32 * a3, v4, v12, v13, v14);
    }
  }
  else if (v6 == 2)
  {
    if (a2 > 0.0)
    {
      v15 = a3;
      if (*((_BYTE *)this + 84))
        v4 = (float)*(int *)(*((_QWORD *)this + 32) + 4 * a3) * a2;
      v16 = kaldi::nnet1::AffineTransform::LinearityCorr(this, a3);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v16, (unsigned int *)(*((_QWORD *)this + 23) + 48 * (int)v15), v4, v17, v18, v19);
      v20 = kaldi::nnet1::AffineTransform::BiasCorr(this, a3);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v20, (_DWORD *)(*((_QWORD *)this + 26) + 32 * v15), v21, v22, v23, v4);
    }
  }
  else if (v6 == 1 && a2 > 0.0)
  {
    if (*((_BYTE *)this + 84))
      v4 = (float)*(int *)(*((_QWORD *)this + 32) + 4 * a3) * a2;
    v7 = kaldi::nnet1::AffineTransform::LinearityCorr(this, a3);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v7, v4);
    v8 = kaldi::nnet1::AffineTransform::BiasCorr(this, a3);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v8, v4);
  }
}

void kaldi::nnet1::AffineTransform::UpdateWeights(kaldi::nnet1::AffineTransform *this, void *a2, int a3)
{
  float v6;
  float v7;
  float v8;
  int v9;
  const char *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  int *v36;
  int v37;
  uint64_t v38;
  int *v39;
  int v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  _BYTE *v80;
  _BYTE *v81;
  _QWORD v82[4];
  _QWORD v83[2];
  uint64_t v84;
  void *v85;

  kaldi::nnet1::AffineTransform::EnsureCorrs(this);
  v6 = *((float *)this + 16);
  v7 = *((float *)this + 17);
  v8 = *((float *)this + 18);
  v9 = *((_DWORD *)this + 19);
  *(_QWORD *)(kaldi::nnet1::AffineTransform::Linearity(this) + 32) = a2;
  *(_QWORD *)(kaldi::nnet1::AffineTransform::Bias(this) + 24) = a2;
  v11 = *((_DWORD *)this + 20);
  if (a3 >= 0)
    v12 = a3;
  else
    v12 = *((_DWORD *)this + 20);
  if (v11 == 1)
    v13 = 0;
  else
    v13 = v12;
  if ((int)v13 > v11)
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x1B9, "batch_idx <= opts_.num_subbatches", v10);
  *(_QWORD *)(kaldi::nnet1::AffineTransform::LinearityCorr(this, v13) + 32) = a2;
  *(_QWORD *)(kaldi::nnet1::AffineTransform::BiasCorr(this, v13) + 24) = a2;
  *(_QWORD *)(*((_QWORD *)this + 23) + 48 * (int)v13 + 32) = a2;
  *(_QWORD *)(*((_QWORD *)this + 26) + 32 * (int)v13 + 24) = a2;
  if ((_DWORD)v13 == *((_DWORD *)this + 20))
  {
    v17 = kaldi::nnet1::AffineTransform::LinearityCorr(this, v13);
    v18 = kaldi::nnet1::AffineTransform::LinearityCorr(this, 0);
    kaldi::CuMatrixBase<float>::AddMat(v17, v18, 111, v19, v20, 1.0, 0.0);
    v21 = kaldi::nnet1::AffineTransform::BiasCorr(this, v13);
    v22 = kaldi::nnet1::AffineTransform::BiasCorr(this, 0);
    kaldi::CuVectorBase<float>::AddVec(v21, v22, v23, v24, v25, 1.0, 0.0);
    if (*((int *)this + 20) > 1)
    {
      v26 = 1;
      do
      {
        v27 = kaldi::nnet1::AffineTransform::LinearityCorr(this, v13);
        v28 = kaldi::nnet1::AffineTransform::LinearityCorr(this, v26);
        kaldi::CuMatrixBase<float>::AddMat(v27, v28, 111, v29, v30, 1.0, 1.0);
        v31 = kaldi::nnet1::AffineTransform::BiasCorr(this, v13);
        v32 = kaldi::nnet1::AffineTransform::BiasCorr(this, v26);
        kaldi::CuVectorBase<float>::AddVec(v31, v32, v33, v34, v35, 1.0, 1.0);
        ++v26;
      }
      while (v26 < *((_DWORD *)this + 20));
    }
    v36 = (int *)*((_QWORD *)this + 32);
    v36[(int)v13] = 0;
    if ((int)v13 >= 1)
    {
      v37 = 0;
      v38 = v13;
      v39 = v36;
      do
      {
        v40 = *v39++;
        v37 += v40;
        v36[(int)v13] = v37;
        --v38;
      }
      while (v38);
    }
  }
  v41 = *((float *)this + 14);
  if (*((_BYTE *)this + 84))
    v41 = v41 / (float)*(int *)(*((_QWORD *)this + 32) + 4 * (int)v13);
  v42 = *((_QWORD *)this + 35);
  if ((int)v13 >= (unint64_t)((*((_QWORD *)this + 36) - v42) >> 2))
  {
    LODWORD(v83[0]) = 2143289344;
    std::vector<float>::resize((uint64_t)this + 280, (int)v13 + 1, v83);
    v42 = *((_QWORD *)this + 35);
  }
  *(float *)(v42 + 4 * (int)v13) = v41;
  if (*((float *)this + 62) >= 0.0)
    (*(void (**)(kaldi::nnet1::AffineTransform *, uint64_t))(*(_QWORD *)this + 248))(this, v13);
  if (v6 != 0.0)
  {
    v43 = kaldi::nnet1::AffineTransform::Linearity(this);
    v44 = (float)-(float)(v41 * v6) * (float)*(int *)(*((_QWORD *)this + 32) + 4 * (int)v13);
    v45 = kaldi::nnet1::AffineTransform::Linearity(this);
    kaldi::CuMatrixBase<float>::AddMat(v43, v45, 111, v46, v47, v44, 1.0);
  }
  if (v7 != 0.0)
  {
    v48 = kaldi::nnet1::AffineTransform::Linearity(this);
    v49 = kaldi::nnet1::AffineTransform::LinearityCorr(this, v13);
    kaldi::cu::RegularizeL1<float>(v48, v49, (float)(v7 * v41) * (float)*(int *)(*((_QWORD *)this + 32) + 4 * (int)v13), v41, v50, v51, v52);
  }
  if (v8 > 0.0)
  {
    if (*((int *)this + 20) >= 2)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v83, "UpdateWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 480);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v83, "the multi batch gradient quantization does not work yet");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v83);
    }
    if (*((_QWORD *)this + 48) == *((_QWORD *)this + 47))
      kaldi::nnet1::AffineTransform::InitResidualAggregator(this, (kaldi::nnet1::AffineTransform *)((char *)this + 376));
    kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::AffineTransform *)((char *)this + 376), v9, v8, v14, v15, v16);
  }
  kaldi::nnet1::AffineTransform::ApplyCorr(this, v41, v13);
  if (*((float *)this + 63) > 0.0)
  {
    *((_QWORD *)this + 42) = a2;
    v53 = kaldi::nnet1::AffineTransform::Linearity(this);
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)this + 76, v53, 111, v54, v55);
    v56 = kaldi::nnet1::AffineTransform::Linearity(this);
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)this + 304, v56, v57, v58, v59);
    v60 = *((unsigned int *)this + 3);
    v84 = 0;
    v85 = 0;
    v83[0] = &unk_1EA92DFD8;
    v83[1] = 0;
    kaldi::CuVector<float>::Resize((uint64_t)v83, v60, 0, v61, v62);
    v85 = a2;
    kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v83, (uint64_t)this + 304, 1.0, 0.0, v63, v64, v65);
    kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v83, 0.5);
    v82[0] = &unk_1EA92DFD8;
    v82[1] = 0;
    v82[2] = 0;
    v82[3] = v85;
    kaldi::CuVector<float>::Resize((uint64_t)v82, v84, 1u, v66, v67);
    kaldi::CuVectorBase<float>::CopyFromVec(v82, (uint64_t)v83, v68, v69, v70);
    kaldi::CuVectorBase<float>::Scale((uint64_t)v82, 1.0 / *((float *)this + 63));
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v82, 1.0);
    kaldi::CuVectorBase<float>::InvertElements((uint64_t)v82);
    v71 = kaldi::nnet1::AffineTransform::Linearity(this);
    kaldi::CuMatrixBase<float>::MulRowsVec(v71, (uint64_t)v82, v72, v73, v74);
    v75 = kaldi::nnet1::AffineTransform::Bias(this);
    kaldi::CuVectorBase<float>::ApplyMaxNorm(v75, *((float *)this + 63), v76, v77, v78, v79);
    v82[0] = &unk_1EA92DFD8;
    kaldi::CuVector<float>::Destroy((uint64_t)v82);
    v83[0] = &unk_1EA92DFD8;
    kaldi::CuVector<float>::Destroy((uint64_t)v83);
  }
  v80 = (_BYTE *)*((_QWORD *)this + 32);
  if ((_DWORD)v13 == *((_DWORD *)this + 20))
  {
    v81 = (_BYTE *)*((_QWORD *)this + 33);
    if (v80 != v81)
      bzero(v80, ((v81 - v80 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  else
  {
    *(_DWORD *)&v80[4 * (int)v13] = 0;
  }
}

void sub_1DE41852C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 kaldi::nnet1::UpdatableComponent::SetTrainOptions(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 8);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 23);
  *(__n128 *)(a1 + 56) = result;
  return result;
}

uint64_t kaldi::nnet1::UpdatableComponent::GetTrainOptions(kaldi::nnet1::UpdatableComponent *this)
{
  return (uint64_t)this + 48;
}

void `non-virtual thunk to'kaldi::nnet1::AffineTransform::~AffineTransform(kaldi::nnet1::AffineTransform *this)
{
  kaldi::nnet1::AffineTransform::~AffineTransform((kaldi::nnet1::AffineTransform *)((char *)this - 88));
}

{
  kaldi::nnet1::AffineTransform::~AffineTransform((kaldi::nnet1::AffineTransform *)((char *)this - 88));
  JUMPOUT(0x1DF0ED014);
}

{
  kaldi::nnet1::AffineTransform::~AffineTransform((kaldi::nnet1::AffineTransform *)((char *)this - 96));
}

{
  kaldi::nnet1::AffineTransform::~AffineTransform((kaldi::nnet1::AffineTransform *)((char *)this - 96));
  JUMPOUT(0x1DF0ED014);
}

{
  kaldi::nnet1::AffineTransform::~AffineTransform((kaldi::nnet1::AffineTransform *)((char *)this - 104));
}

{
  kaldi::nnet1::AffineTransform::~AffineTransform((kaldi::nnet1::AffineTransform *)((char *)this - 104));
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(void **this)
{
  void **v2;

  v2 = this + 6;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 3;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 40;
      v7 = v4 - 40;
      do
      {
        v8 = *(_QWORD *)v7;
        v7 -= 40;
        (*(void (**)(char *))(v8 + 16))(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 32;
      v7 = v4 - 32;
      do
      {
        v8 = *(_QWORD *)v7;
        v7 -= 32;
        (*(void (**)(char *))(v8 + 8))(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

kaldi::nnet1::AffineTransform *kaldi::nnet1::AffineTransform::AffineTransform(kaldi::nnet1::AffineTransform *this, const kaldi::nnet1::AffineTransform *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32[35];

  *(_QWORD *)this = off_1EA92D6D8;
  v4 = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  *(_QWORD *)this = off_1EA929750;
  *((_QWORD *)this + 6) = &off_1EA9284D0;
  v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *((_QWORD *)this + 11) = &unk_1EA927C10;
  *((_QWORD *)this + 12) = &unk_1EA927C38;
  *((_QWORD *)this + 13) = &unk_1EA927C60;
  *(_QWORD *)this = &off_1EA927AD0;
  *((_QWORD *)this + 14) = 0;
  v6 = (uint64_t *)((char *)this + 112);
  *((_QWORD *)this + 15) = 0;
  *((_BYTE *)this + 128) = *((_BYTE *)a2 + 128);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)this + 17, (uint64_t)(*((_QWORD *)a2 + 18) - *((_QWORD *)a2 + 17)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)this + 20, (uint64_t)(*((_QWORD *)a2 + 21) - *((_QWORD *)a2 + 20)) >> 3);
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 23, *((_QWORD *)a2 + 23), *((_QWORD *)a2 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 24) - *((_QWORD *)a2 + 23)) >> 4));
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 26, *((_QWORD *)a2 + 26), *((_QWORD *)a2 + 27), (uint64_t)(*((_QWORD *)a2 + 27) - *((_QWORD *)a2 + 26)) >> 5);
  *((_BYTE *)this + 232) = *((_BYTE *)a2 + 232);
  *(_QWORD *)((char *)this + 236) = *(_QWORD *)((char *)a2 + 236);
  *((_DWORD *)this + 61) = *((_DWORD *)a2 + 61);
  *((_QWORD *)this + 31) = *((_QWORD *)a2 + 31);
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 32) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 32, *((const void **)a2 + 32), *((_QWORD *)a2 + 33), (uint64_t)(*((_QWORD *)a2 + 33) - *((_QWORD *)a2 + 32)) >> 2);
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 35, *((const void **)a2 + 35), *((_QWORD *)a2 + 36), (uint64_t)(*((_QWORD *)a2 + 36) - *((_QWORD *)a2 + 35)) >> 2);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 304, (char *)a2 + 304, 111);
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 44, *((_QWORD *)a2 + 44), *((_QWORD *)a2 + 45), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 45) - *((_QWORD *)a2 + 44)) >> 4));
  *((_QWORD *)this + 55) = 0;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  if (*((_BYTE *)this + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "AffineTransform", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 106);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
  }
  v7 = *((_QWORD *)a2 + 14);
  if (v7)
  {
    kaldi::NewCuSubOrMat<float>(v7, 0, v32);
    v8 = v32[0];
    v32[0] = 0;
    v9 = *v6;
    *v6 = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      v10 = v32[0];
      v32[0] = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    }
  }
  v11 = (_QWORD *)*((_QWORD *)a2 + 15);
  if (v11)
  {
    kaldi::NewCuSubOrVec<float>(v11, *((unsigned __int8 *)this + 16), v32);
    v12 = v32[0];
    v32[0] = 0;
    v13 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v12;
    if (v13)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
      v14 = v32[0];
      v32[0] = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    }
  }
  v16 = *((_QWORD *)this + 17);
  v15 = *((_QWORD *)this + 18);
  if (v15 != v16)
  {
    v17 = 0;
    do
    {
      if (*(_QWORD *)(*((_QWORD *)a2 + 17) + 8 * v17))
      {
        v18 = kaldi::nnet1::AffineTransform::LinearityCorr(a2, v17);
        kaldi::NewCuSubOrMat<float>(v18, *((unsigned __int8 *)this + 16), v32);
        v19 = *((_QWORD *)this + 17);
        v20 = v32[0];
        v32[0] = 0;
        v21 = *(_QWORD *)(v19 + 8 * v17);
        *(_QWORD *)(v19 + 8 * v17) = v20;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
        v22 = v32[0];
        v32[0] = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
        v16 = *((_QWORD *)this + 17);
        v15 = *((_QWORD *)this + 18);
      }
      ++v17;
    }
    while (v17 < (v15 - v16) >> 3);
  }
  v24 = *((_QWORD *)this + 20);
  v23 = *((_QWORD *)this + 21);
  if (v23 != v24)
  {
    v25 = 0;
    do
    {
      if (*(_QWORD *)(*((_QWORD *)a2 + 20) + 8 * v25))
      {
        v26 = (_QWORD *)kaldi::nnet1::AffineTransform::BiasCorr(a2, v25);
        kaldi::NewCuSubOrVec<float>(v26, *((unsigned __int8 *)this + 16), v32);
        v27 = *((_QWORD *)this + 20);
        v28 = v32[0];
        v32[0] = 0;
        v29 = *(_QWORD *)(v27 + 8 * v25);
        *(_QWORD *)(v27 + 8 * v25) = v28;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
        v30 = v32[0];
        v32[0] = 0;
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
        v24 = *((_QWORD *)this + 20);
        v23 = *((_QWORD *)this + 21);
      }
      ++v25;
    }
    while (v25 < (v23 - v24) >> 3);
  }
  if (*((_QWORD *)a2 + 48) != *((_QWORD *)a2 + 47))
    kaldi::nnet1::AffineTransform::InitResidualAggregator(this, (kaldi::nnet1::AffineTransform *)((char *)this + 376));
  return this;
}

void sub_1DE418DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  kaldi::nnet1::UpdatableComponent *v16;
  uint64_t *v17;
  void **v18;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v18);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  kaldi::CuMatrix<float>::~CuMatrix(a10);
  v20 = *a11;
  if (*a11)
  {
    *((_QWORD *)v16 + 36) = v20;
    operator delete(v20);
  }
  v21 = *a12;
  if (*a12)
  {
    *((_QWORD *)v16 + 33) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v22 = *((_QWORD *)v16 + 15);
  *((_QWORD *)v16 + 15) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  v23 = *v17;
  *v17 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a13);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a14);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::NewCuSubOrMat<float>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2)
  {
    result = operator new();
    v6 = result;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 32);
    *(_OWORD *)(result + 16) = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(result + 32) = v8;
    *(_QWORD *)result = &unk_1EA926508;
    *(_QWORD *)(result + 8) = v7;
  }
  else
  {
    v6 = operator new();
    result = kaldi::CuMatrix<float>::CuMatrix(v6, a1, 111);
  }
  *a3 = v6;
  return result;
}

void sub_1DE418F90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::NewCuSubOrVec<float>@<X0>(_QWORD *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  result = (_QWORD *)operator new();
  v10 = result;
  if (a2)
  {
    v11 = a1[1];
    v12 = a1[3];
    result[2] = a1[2];
    result[3] = v12;
    *result = &unk_1EA926538;
    result[1] = v11;
  }
  else
  {
    result = (_QWORD *)kaldi::CuVector<float>::CuVector((uint64_t)result, (uint64_t)a1, v7, v8, v9);
  }
  *a3 = v10;
  return result;
}

void sub_1DE419038(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AffineTransform::LinearityCorr(kaldi::nnet1::AffineTransform *this, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *((_QWORD *)this + 17);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 18) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "LinearityCorr", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 717);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "linearity_corr_.size() > batch_idx");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "LinearityCorr", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 718);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "linearity_corr_[batch_idx]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *((_QWORD *)this + 17);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 18) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "LinearityCorr", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 722);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "linearity_corr_.size() > batch_idx");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "LinearityCorr", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 723);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "linearity_corr_[batch_idx]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::AffineTransform::BiasCorr(kaldi::nnet1::AffineTransform *this, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *((_QWORD *)this + 20);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 21) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasCorr", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 727);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_corr_.size() > batch_idx");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasCorr", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 728);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_corr_[batch_idx]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *((_QWORD *)this + 20);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 21) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasCorr", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 732);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_corr_.size() > batch_idx");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasCorr", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 733);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_corr_[batch_idx]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::AffineTransform::InitResidualAggregator(kaldi::nnet1::AffineTransform *this, kaldi::nnet1::QuantizerResidualAggregator *a2)
{
  uint64_t v4;
  uint64_t v5;

  kaldi::nnet1::AffineTransform::EnsureCorrs(this);
  v4 = kaldi::nnet1::AffineTransform::LinearityCorr(this, ((*((_QWORD *)this + 18) - *((_QWORD *)this + 17)) >> 3) - 1);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)a2, v4);
  v5 = kaldi::nnet1::AffineTransform::BiasCorr(this, ((*((_QWORD *)this + 21) - *((_QWORD *)this + 20)) >> 3) - 1);
  return kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)a2, v5);
}

_QWORD *std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DE419288(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1DE41930C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1DE419388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<kaldi::CuMatrix<float>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DE419400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<kaldi::CuMatrix<float>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      kaldi::CuMatrix<float>::CuMatrix(a4 + v7, a2 + v7, 111);
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1DE4194D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 48;
    do
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + v2) + 16))(v4 + v2);
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  const char *v7;

  if (a4)
  {
    v6 = result;
    std::vector<kaldi::CuVector<float>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuVector<float>>,kaldi::CuVector<float>*,kaldi::CuVector<float>*,kaldi::CuVector<float>*>((uint64_t)(v6 + 2), a2, a3, v6[1], v7);
    v6[1] = result;
  }
  return result;
}

void sub_1DE419560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<kaldi::CuVector<float>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuVector<float>>,kaldi::CuVector<float>*,kaldi::CuVector<float>*,kaldi::CuVector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;

  v5 = a4;
  if (a2 != a3)
  {
    v8 = 0;
    do
    {
      v9 = (_QWORD *)(v5 + v8);
      v9[2] = 0;
      v9[3] = 0;
      *v9 = &unk_1EA92DFD8;
      v9[1] = 0;
      v9[3] = *(_QWORD *)(a2 + v8 + 24);
      kaldi::CuVector<float>::Resize(v5 + v8, *(unsigned int *)(a2 + v8 + 16), 1u, a4, a5);
      kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)(v5 + v8), a2 + v8, v10, v11, v12);
      v8 += 32;
    }
    while (a2 + v8 != a3);
    v5 += v8;
  }
  return v5;
}

void sub_1DE419694(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 32;
    do
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + v2) + 8))(v4 + v2);
      v2 -= 32;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::AffineTransform::EnsureCorrs(kaldi::nnet1::AffineTransform *this)
{
  int v2;
  int v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;

  if (!*((_BYTE *)this + 232))
  {
    v2 = *((_DWORD *)this + 61);
    v3 = *((_DWORD *)this + 20);
    if (v3 > 1)
      v4 = v3 + 1;
    else
      v4 = 1;
    v5 = (_QWORD *)((char *)this + 136);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t)this + 136, v4);
    v6 = (_QWORD *)((char *)this + 160);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize((uint64_t)this + 160, v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 23, v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 26, v4);
    if (v4 >= 1)
    {
      for (i = 0; i != v4; ++i)
      {
        v8 = operator new();
        v9 = *(unsigned int *)(kaldi::nnet1::AffineTransform::Linearity(this) + 20);
        v10 = kaldi::nnet1::AffineTransform::Linearity(this);
        kaldi::CuMatrix<float>::CuMatrix(v8, v9, *(unsigned int *)(v10 + 16), 0, 0, 0);
        v11 = *(_QWORD *)(*v5 + 8 * i);
        *(_QWORD *)(*v5 + 8 * i) = v8;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
        v12 = (_QWORD *)operator new();
        v13 = *(unsigned int *)(kaldi::nnet1::AffineTransform::Bias(this) + 16);
        *v12 = &unk_1EA92DFD8;
        v12[1] = 0;
        v12[2] = 0;
        v12[3] = 0;
        kaldi::CuVector<float>::Resize((uint64_t)v12, v13, 0, v14, v15);
        v16 = *(_QWORD *)(*v6 + 8 * i);
        *(_QWORD *)(*v6 + 8 * i) = v12;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        if ((v2 & 0xFFFFFFFE) == 2)
        {
          v17 = *((_QWORD *)this + 23) + 48 * i;
          v18 = *(unsigned int *)(kaldi::nnet1::AffineTransform::Linearity(this) + 20);
          v19 = kaldi::nnet1::AffineTransform::Linearity(this);
          kaldi::CuMatrix<float>::Resize(v17, v18, *(unsigned int *)(v19 + 16), 1u, 0);
          v20 = *((_QWORD *)this + 26) + 32 * i;
          v21 = kaldi::nnet1::AffineTransform::Bias(this);
          kaldi::CuVector<float>::Resize(v20, *(unsigned int *)(v21 + 16), 1u, v22, v23);
          if (*((_DWORD *)this + 61) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*((_QWORD *)this + 23) + 48 * i, v24, v25, v26, v27, 1.0);
            kaldi::CuVectorBase<float>::Set(*((_QWORD *)this + 26) + 32 * i, 1.0);
          }
        }
      }
    }
    std::vector<int>::resize((std::vector<int> *)((char *)this + 256), v4);
    if (*((float *)this + 63) > 0.0)
    {
      v28 = *(unsigned int *)(kaldi::nnet1::AffineTransform::Linearity(this) + 20);
      v29 = kaldi::nnet1::AffineTransform::Linearity(this);
      kaldi::CuMatrix<float>::Resize((uint64_t)this + 304, v28, *(unsigned int *)(v29 + 16), 1u, 0);
    }
    *((_BYTE *)this + 232) = 1;
  }
}

void sub_1DE419938(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::QuantizerResidualAggregator::PushSetup(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void *v32;
  _OWORD v33[2];
  void *v34;
  __int128 v35;
  __int128 v36;
  char v37;

  v5 = *a1;
  v4 = a1[1];
  v36 = 0u;
  v35 = 0u;
  v34 = &unk_1EA92DFA8;
  v37 = 0;
  if (v4 >= a1[2])
  {
    v6 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float>>(a1, (uint64_t)&v34);
  }
  else
  {
    kaldi::CuMatrix<float>::CuMatrix(v4, &v34, 111);
    v6 = v4 + 48;
    a1[1] = v4 + 48;
  }
  a1[1] = v6;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v34);
  kaldi::CuMatrix<float>::Resize(*a1 + 16 * ((uint64_t)(v4 - v5) >> 4), *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v32, a2, 0, *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 16));
  v7 = a1[5];
  v8 = a1[4];
  if (v8 >= v7)
  {
    v11 = a1[3];
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - v11) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v11) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x333333333333333)
      v15 = 0x666666666666666;
    else
      v15 = v13;
    *((_QWORD *)&v36 + 1) = a1 + 5;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::Matrix<float>>>((uint64_t)(a1 + 5), v15);
    else
      v16 = 0;
    v17 = &v16[40 * v12];
    v34 = v16;
    *(_QWORD *)&v35 = v17;
    *(_QWORD *)&v36 = &v16[40 * v15];
    v18 = *((_QWORD *)&v33[1] + 1);
    *((_QWORD *)v17 + 1) = *(_QWORD *)&v33[0];
    *((_OWORD *)v17 + 1) = *(_OWORD *)((char *)v33 + 8);
    *((_QWORD *)v17 + 4) = v18;
    *(_QWORD *)v17 = &unk_1EA926508;
    *((_QWORD *)&v35 + 1) = v17 + 40;
    std::vector<kaldi::CuSubMatrix<float>>::__swap_out_circular_buffer(a1 + 3, &v34);
    v10 = a1[4];
    std::__split_buffer<kaldi::CuSubMatrix<float>>::~__split_buffer((uint64_t)&v34);
  }
  else
  {
    v9 = *((_QWORD *)&v33[1] + 1);
    *(_QWORD *)(v8 + 8) = *(_QWORD *)&v33[0];
    *(_OWORD *)(v8 + 16) = *(_OWORD *)((char *)v33 + 8);
    *(_QWORD *)(v8 + 32) = v9;
    *(_QWORD *)v8 = &unk_1EA926508;
    v10 = v8 + 40;
  }
  a1[4] = v10;
  v32 = &unk_1EA926508;
  memset(v33, 0, sizeof(v33));
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v32);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v32, a2, 0, *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 16));
  v19 = a1[8];
  v20 = a1[7];
  if (v20 >= v19)
  {
    v23 = a1[6];
    v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v23) >> 3);
    v25 = v24 + 1;
    if (v24 + 1 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v26 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v23) >> 3);
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x333333333333333)
      v27 = 0x666666666666666;
    else
      v27 = v25;
    *((_QWORD *)&v36 + 1) = a1 + 8;
    if (v27)
      v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::Matrix<float>>>((uint64_t)(a1 + 8), v27);
    else
      v28 = 0;
    v29 = &v28[40 * v24];
    v34 = v28;
    *(_QWORD *)&v35 = v29;
    *(_QWORD *)&v36 = &v28[40 * v27];
    v30 = *((_QWORD *)&v33[1] + 1);
    *((_QWORD *)v29 + 1) = *(_QWORD *)&v33[0];
    *((_OWORD *)v29 + 1) = *(_OWORD *)((char *)v33 + 8);
    *((_QWORD *)v29 + 4) = v30;
    *(_QWORD *)v29 = &unk_1EA926508;
    *((_QWORD *)&v35 + 1) = v29 + 40;
    std::vector<kaldi::CuSubMatrix<float>>::__swap_out_circular_buffer(a1 + 6, &v34);
    v22 = a1[7];
    std::__split_buffer<kaldi::CuSubMatrix<float>>::~__split_buffer((uint64_t)&v34);
  }
  else
  {
    v21 = *((_QWORD *)&v33[1] + 1);
    *(_QWORD *)(v20 + 8) = *(_QWORD *)&v33[0];
    *(_OWORD *)(v20 + 16) = *(_OWORD *)((char *)v33 + 8);
    *(_QWORD *)(v20 + 32) = v21;
    *(_QWORD *)v20 = &unk_1EA926508;
    v22 = v20 + 40;
  }
  a1[7] = v22;
  v32 = &unk_1EA926508;
  memset(v33, 0, sizeof(v33));
  return kaldi::CuMatrixBase<float>::~CuMatrixBase(&v32);
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  int32x4_t v19;
  int32x4_t *v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  int32x4_t v33;
  int32x4_t *v34;
  void *v36;
  _QWORD v37[4];
  void *v38;
  __int128 v39;
  __int128 v40;
  char v41;

  v5 = *a1;
  v4 = a1[1];
  v40 = 0u;
  v39 = 0u;
  v38 = &unk_1EA92DFA8;
  v41 = 0;
  if (v4 >= a1[2])
  {
    v6 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float>>(a1, (uint64_t)&v38);
  }
  else
  {
    kaldi::CuMatrix<float>::CuMatrix(v4, &v38, 111);
    v6 = v4 + 48;
    a1[1] = v4 + 48;
  }
  a1[1] = v6;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v38);
  kaldi::CuMatrix<float>::Resize(*a1 + 16 * ((uint64_t)(v4 - v5) >> 4), 1, *(unsigned int *)(a2 + 16), 0, 0);
  v7 = a1[5];
  v8 = *(_DWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 8);
  v36 = &unk_1EA926508;
  v37[0] = v9;
  v37[1] = v8 | 0x100000000;
  LODWORD(v37[2]) = v8;
  HIDWORD(v37[2]) = v8;
  v10 = *(_QWORD *)(a2 + 24);
  v37[3] = v10;
  v11 = a1[4];
  if (v11 >= v7)
  {
    v13 = a1[3];
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v13) >> 3);
    v15 = v14 + 1;
    if (v14 + 1 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v13) >> 3);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0x333333333333333)
      v17 = 0x666666666666666;
    else
      v17 = v15;
    *((_QWORD *)&v40 + 1) = a1 + 5;
    if (v17)
    {
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::Matrix<float>>>((uint64_t)(a1 + 5), v17);
      v9 = v37[0];
      v19 = *(int32x4_t *)&v37[1];
      v10 = v37[3];
    }
    else
    {
      v18 = 0;
      v19 = vdupq_lane_s32((int32x2_t)(v8 | 0x100000000), 0);
      v19.i32[1] = 1;
    }
    v20 = (int32x4_t *)&v18[40 * v14];
    v38 = v18;
    *(_QWORD *)&v39 = v20;
    *(_QWORD *)&v40 = &v18[40 * v17];
    v20[1] = v19;
    v20[2].i64[0] = v10;
    v20->i64[0] = (uint64_t)&unk_1EA926508;
    v20->i64[1] = v9;
    *((_QWORD *)&v39 + 1) = (char *)v20 + 40;
    std::vector<kaldi::CuSubMatrix<float>>::__swap_out_circular_buffer(a1 + 3, &v38);
    v12 = a1[4];
    std::__split_buffer<kaldi::CuSubMatrix<float>>::~__split_buffer((uint64_t)&v38);
  }
  else
  {
    *(_DWORD *)(v11 + 16) = v8;
    *(_DWORD *)(v11 + 20) = 1;
    *(_DWORD *)(v11 + 24) = v8;
    *(_DWORD *)(v11 + 28) = v8;
    *(_QWORD *)(v11 + 32) = v10;
    v12 = v11 + 40;
    *(_QWORD *)v11 = &unk_1EA926508;
    *(_QWORD *)(v11 + 8) = v9;
  }
  a1[4] = v12;
  v36 = &unk_1EA926508;
  memset(v37, 0, sizeof(v37));
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v36);
  v21 = a1[8];
  v22 = *(_DWORD *)(a2 + 16);
  v23 = *(_QWORD *)(a2 + 8);
  v36 = &unk_1EA926508;
  v37[0] = v23;
  v37[1] = v22 | 0x100000000;
  LODWORD(v37[2]) = v22;
  HIDWORD(v37[2]) = v22;
  v24 = *(_QWORD *)(a2 + 24);
  v37[3] = v24;
  v25 = a1[7];
  if (v25 >= v21)
  {
    v27 = a1[6];
    v28 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v25 - v27) >> 3);
    v29 = v28 + 1;
    if (v28 + 1 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v30 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v21 - v27) >> 3);
    if (2 * v30 > v29)
      v29 = 2 * v30;
    if (v30 >= 0x333333333333333)
      v31 = 0x666666666666666;
    else
      v31 = v29;
    *((_QWORD *)&v40 + 1) = a1 + 8;
    if (v31)
    {
      v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::Matrix<float>>>((uint64_t)(a1 + 8), v31);
      v23 = v37[0];
      v33 = *(int32x4_t *)&v37[1];
      v24 = v37[3];
    }
    else
    {
      v32 = 0;
      v33 = vdupq_lane_s32((int32x2_t)(v22 | 0x100000000), 0);
      v33.i32[1] = 1;
    }
    v34 = (int32x4_t *)&v32[40 * v28];
    v38 = v32;
    *(_QWORD *)&v39 = v34;
    *(_QWORD *)&v40 = &v32[40 * v31];
    v34[1] = v33;
    v34[2].i64[0] = v24;
    v34->i64[0] = (uint64_t)&unk_1EA926508;
    v34->i64[1] = v23;
    *((_QWORD *)&v39 + 1) = (char *)v34 + 40;
    std::vector<kaldi::CuSubMatrix<float>>::__swap_out_circular_buffer(a1 + 6, &v38);
    v26 = a1[7];
    std::__split_buffer<kaldi::CuSubMatrix<float>>::~__split_buffer((uint64_t)&v38);
  }
  else
  {
    *(_DWORD *)(v25 + 16) = v22;
    *(_DWORD *)(v25 + 20) = 1;
    *(_DWORD *)(v25 + 24) = v22;
    *(_DWORD *)(v25 + 28) = v22;
    *(_QWORD *)(v25 + 32) = v24;
    v26 = v25 + 40;
    *(_QWORD *)v25 = &unk_1EA926508;
    *(_QWORD *)(v25 + 8) = v23;
  }
  a1[7] = v26;
  v36 = &unk_1EA926508;
  memset(v37, 0, sizeof(v37));
  return kaldi::CuMatrixBase<float>::~CuMatrixBase(&v36);
}

void sub_1DE419CB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  __int128 v6;
  __int128 v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _OWORD);
  v7 = va_arg(va1, _OWORD);
  std::__split_buffer<kaldi::CuSubMatrix<float>>::~__split_buffer((uint64_t)va1);
  v4 = v2 + 16;
  v6 = 0u;
  v7 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1DE41A138(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::__split_buffer<kaldi::CuSubMatrix<float>>::~__split_buffer((uint64_t)va1);
  v5 = v3 + 16;
  *v2 = 0u;
  v2[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = ((uint64_t)v3 - *(_QWORD *)a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *(_QWORD *)a1 + 8 * a2;
      while (v3 != (_QWORD *)v5)
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      }
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  else
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__append((char **)a1, a2 - v4);
  }
}

void std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = ((uint64_t)v3 - *(_QWORD *)a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *(_QWORD *)a1 + 8 * a2;
      while (v3 != (_QWORD *)v5)
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      }
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  else
  {
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__append((char **)a1, a2 - v4);
  }
}

uint64_t *std::vector<kaldi::CuVector<float>>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;

  v2 = result;
  v3 = result[1];
  v4 = (v3 - *result) >> 5;
  if (a2 > v4)
    return (uint64_t *)std::vector<kaldi::CuVector<float>>::__append(result, a2 - v4);
  if (a2 < v4)
  {
    v5 = *result + 32 * a2;
    if (v3 != v5)
    {
      v6 = (_QWORD *)(v3 - 32);
      v7 = (_QWORD *)(v3 - 32);
      do
      {
        v8 = *v7;
        v7 -= 4;
        result = (uint64_t *)(*(uint64_t (**)(_QWORD *))(v8 + 8))(v6);
        v9 = v6 == (_QWORD *)v5;
        v6 = v7;
      }
      while (!v9);
    }
    v2[1] = v5;
  }
  return result;
}

void std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  uint64_t v24;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    v24 = v4;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    v23 = v16;
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    *((_QWORD *)&v22 + 1) = v17;
    if (v7 != v8)
    {
      do
      {
        v18 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v15 - 1) = v18;
        v15 -= 8;
      }
      while (v7 != v8);
      v17 = (char *)*((_QWORD *)&v22 + 1);
      v16 = v23;
    }
    v19 = *(_OWORD *)a1;
    *a1 = v15;
    a1[1] = v17;
    v22 = v19;
    v20 = a1[2];
    a1[2] = v16;
    v23 = v20;
    v21 = v19;
    std::__split_buffer<std::unique_ptr<kaldi::CuMatrixBase<float>>>::~__split_buffer((uint64_t)&v21);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<kaldi::CuMatrixBase<float>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  uint64_t v24;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    v24 = v4;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    v23 = v16;
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    *((_QWORD *)&v22 + 1) = v17;
    if (v7 != v8)
    {
      do
      {
        v18 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v15 - 1) = v18;
        v15 -= 8;
      }
      while (v7 != v8);
      v17 = (char *)*((_QWORD *)&v22 + 1);
      v16 = v23;
    }
    v19 = *(_OWORD *)a1;
    *a1 = v15;
    a1[1] = v17;
    v22 = v19;
    v20 = a1[2];
    a1[2] = v16;
    v23 = v20;
    v21 = v19;
    std::__split_buffer<std::unique_ptr<kaldi::CuVectorBase<float>>>::~__split_buffer((uint64_t)&v21);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<kaldi::CuVectorBase<float>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<kaldi::CuVector<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      v14 = v7 + 32 * a2;
      v15 = 32 * a2;
      v16 = (_QWORD *)(v7 + 8);
      do
      {
        *v16 = 0;
        v16[1] = 0;
        v16[2] = 0;
        *(v16 - 1) = &unk_1EA92DFD8;
        v16 += 4;
        v15 -= 32;
      }
      while (v15);
    }
    else
    {
      v14 = *(_QWORD *)(result - 8);
    }
    a1[1] = v14;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - *a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v24 = result;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>(result, v12);
    else
      v13 = 0;
    v20 = v13;
    v21 = &v13[32 * v10];
    v23 = &v13[32 * v12];
    v17 = &v21[32 * a2];
    v18 = 32 * a2;
    v19 = v21 + 8;
    do
    {
      *v19 = 0;
      v19[1] = 0;
      v19[2] = 0;
      *(v19 - 1) = &unk_1EA92DFD8;
      v19 += 4;
      v18 -= 32;
    }
    while (v18);
    v22 = v17;
    std::vector<kaldi::CuVector<float>>::__swap_out_circular_buffer(a1, &v20);
    return std::__split_buffer<kaldi::CuVector<float>>::~__split_buffer((uint64_t)&v20);
  }
  return result;
}

void sub_1DE41A834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::CuVector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::CuVector<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::CuVector<float>>,std::reverse_iterator<kaldi::CuVector<float>*>,std::reverse_iterator<kaldi::CuVector<float>*>,std::reverse_iterator<kaldi::CuVector<float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, (const char *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::CuVector<float>>,std::reverse_iterator<kaldi::CuVector<float>*>,std::reverse_iterator<kaldi::CuVector<float>*>,std::reverse_iterator<kaldi::CuVector<float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;

  v10 = 0;
  for (i = a7 - 32; ; kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)(i + v12), v13 - 32, v15, v16, v17))
  {
    v12 = v10;
    v13 = a3 + v10;
    if ((const char *)(a3 + v10) == a5)
      break;
    v14 = (_QWORD *)(i + v10);
    v14[2] = 0;
    v14[3] = 0;
    *v14 = &unk_1EA92DFD8;
    v14[1] = 0;
    v14[3] = *(_QWORD *)(v13 - 8);
    kaldi::CuVector<float>::Resize(i + v10, *(unsigned int *)(v13 - 16), 1u, a4, a5);
    v10 -= 32;
  }
  return a6;
}

void sub_1DE41A968(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 32)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + v2) + 8))(v1 + v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<kaldi::CuVector<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(_QWORD *)(i - 32);
    *(_QWORD *)(a1 + 16) = i - 32;
    (*(void (**)(void))(v4 + 8))();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[48 * v4];
  v16 = &v10[48 * v9];
  kaldi::CuMatrix<float>::CuMatrix(v14, a2, 111);
  v15 = v14 + 48;
  std::vector<kaldi::CuMatrix<float>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<kaldi::CuMatrix<float>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1DE41AAD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::CuMatrix<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<kaldi::CuSubMatrix<float>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 != *result)
  {
    do
    {
      *(_QWORD *)(v4 - 40) = &unk_1EA926508;
      v4 -= 40;
      v5 = *(_QWORD *)(v3 - 8);
      v6 = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 - 32);
      *(_OWORD *)(v4 + 16) = v6;
      *(_QWORD *)(v4 + 32) = v5;
      v3 -= 40;
    }
    while (v3 != v2);
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<kaldi::CuSubMatrix<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(_QWORD *)(i - 40);
    *(_QWORD *)(a1 + 16) = i - 40;
    (*(void (**)(void))(v4 + 16))();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t result;

  v6 = *a1;
  v7 = operator new();
  kaldi::CuSubMatrix<float>::CuSubMatrix(v7, v6, a2, v8, v9);
  *a3 = v7;
  result = *a1;
  *a1 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void sub_1DE41AC48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C404B8BC54CLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t result;

  v6 = operator new();
  kaldi::CuSubVector<float>::CuSubVector(v6, *a1, a2, v7, v8);
  *a3 = v6;
  result = *a1;
  *a1 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void sub_1DE41ACE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CuSubMatrix<float>::CuSubMatrix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v7;
  int v8;
  int v9;
  uint64_t v11;
  const char *v12;
  int v13;
  _QWORD *v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[17];

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_1EA926508;
  v7 = *(_DWORD *)(a2 + 20);
  v8 = *(_DWORD *)(a2 + 16) * v7;
  v9 = *(_DWORD *)(a3 + 16);
  if (v9 < v8)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "CuSubMatrix", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", 1006);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Insufficient storage area: ", 27);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" needed: ", 9);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  v17 = 0;
  v16[0] = &unk_1EA926538;
  if (v8 > v9)
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", a5);
  v16[1] = *(_QWORD *)(a3 + 8);
  LODWORD(v17) = v8;
  v18 = *(_QWORD *)(a3 + 24);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)v19, (uint64_t)v16, v7);
  if (v19 != (_OWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = *((_QWORD *)&v19[0] + 1);
    *(_OWORD *)(a1 + 16) = v19[1];
    *(_QWORD *)(a1 + 32) = *(_QWORD *)&v19[2];
  }
  *(_QWORD *)&v19[0] = &unk_1EA926508;
  memset((char *)v19 + 8, 0, 32);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v19);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a1, a2, 111, v11, v12);
  v13 = *(_DWORD *)(a3 + 16) - v8;
  *(_QWORD *)(a3 + 8) += 4 * v8;
  *(_DWORD *)(a3 + 16) = v13;
  *(_QWORD *)(a3 + 24) = 0;
  return a1;
}

void sub_1DE41AEBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CuSubVector<float>::CuSubVector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v14;
  _QWORD v15[34];

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1EA926538;
  *(_QWORD *)(a1 + 8) = 0;
  v7 = *(_DWORD *)(a3 + 16);
  v8 = *(_DWORD *)(a2 + 16);
  if ((int)v7 < (int)v8)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15, "CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", 524);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Insufficient storage area: ", 27);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" needed: ", 9);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  if (v8 > v7)
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", a5);
  v10 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a3 + 8);
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v10;
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)a1, a2, a3, a4, a5);
  v11 = *(int *)(a2 + 16);
  v12 = *(_DWORD *)(a3 + 16) - v11;
  *(_QWORD *)(a3 + 8) += 4 * v11;
  *(_DWORD *)(a3 + 16) = v12;
  *(_QWORD *)(a3 + 24) = 0;
  return a1;
}

void sub_1DE41AFF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t kaldi::nnet1::MomentStatistics<float>(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  unsigned int v5[10];

  kaldi::Matrix<float>::Matrix((uint64_t)v5, *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 16), 0, 0);
  kaldi::CuMatrixBase<float>::CopyToMat<float>(a1, v5, 111, v2, v3);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v5);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v5);
}

void sub_1DE41B064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MomentStatistics<float>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  void *v14[3];

  v6 = a1[4];
  memset(v14, 0, sizeof(v14));
  kaldi::Vector<float>::Resize(v14, v6, 0, a4, a5);
  kaldi::CuVectorBase<float>::CopyToVec<float>(a1, (uint64_t)v14, v7, v8, v9);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v14, v10, v11, v12, v13);
  kaldi::Vector<float>::Destroy((uint64_t)v14);
}

void sub_1DE41B0DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MomentStatistics<float>(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  char *v10[3];

  v2 = kaldi::MatrixBase<float>::NumRows(a1);
  v3 = kaldi::MatrixBase<float>::NumCols(a1);
  memset(v10, 0, sizeof(v10));
  kaldi::Vector<float>::Resize((void **)v10, (v3 * v2), 0, v4, v5);
  kaldi::VectorBase<float>::CopyRowsFromMat(v10, a1);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v10, v6, v7, v8, v9);
  kaldi::Vector<float>::Destroy((uint64_t)v10);
}

void sub_1DE41B170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MomentStatistics<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  float v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  float v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD v37[11];
  char v38;
  uint64_t v39;
  void *v40[3];
  void *v41;
  uint64_t v42;
  uint64_t v43;

  v41 = 0;
  v42 = 0;
  v43 = 0;
  kaldi::Vector<float>::Resize(&v41, *(unsigned int *)(a1 + 8), 1, a4, a5);
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v41, a1, v6, v7, v8);
  memset(v40, 0, sizeof(v40));
  kaldi::Vector<float>::Resize(v40, *(unsigned int *)(a1 + 8), 1, v9, v10);
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)v40, a1, v11, v12, v13);
  v14 = kaldi::VectorBase<float>::Sum(a1);
  kaldi::VectorBase<float>::Add((uint64_t)&v41, -(float)(v14 / (float)*(int *)(a1 + 8)));
  kaldi::Vector<float>::Resize(v40, v42, 1, v15, v16);
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)v40, (uint64_t)&v41, v17, v18, v19);
  kaldi::VectorBase<float>::MulElements((uint64_t)&v41, (uint64_t)v40, v20, v21, v22);
  v23 = kaldi::VectorBase<float>::Sum((uint64_t)&v41);
  v24 = *(_DWORD *)(a1 + 8);
  kaldi::VectorBase<float>::MulElements((uint64_t)&v41, (uint64_t)v40, v25, v26, v27);
  kaldi::VectorBase<float>::Sum((uint64_t)&v41);
  pow((float)(v23 / (float)v24), 1.5);
  kaldi::VectorBase<float>::MulElements((uint64_t)&v41, (uint64_t)v40, v28, v29, v30);
  kaldi::VectorBase<float>::Sum((uint64_t)&v41);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"(min ", 7);
  kaldi::VectorBase<float>::Min((uint64_t *)a1);
  v31 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", max ", 6);
  kaldi::VectorBase<float>::Max((uint64_t *)a1);
  v32 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", mean ", 7);
  v33 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", variance ", 11);
  v34 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", skewness ", 11);
  v35 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", kurtosis ", 11);
  v36 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)") ", 3);
  std::stringbuf::str();
  v37[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v37 + *(_QWORD *)(v37[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v37[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v38 < 0)
    operator delete((void *)v37[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1DF0ECF6C](&v39);
  kaldi::Vector<float>::Destroy((uint64_t)v40);
  kaldi::Vector<float>::Destroy((uint64_t)&v41);
}

void sub_1DE41B438(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::Vector<float>::Destroy(v1 - 144);
  kaldi::Vector<float>::Destroy(v1 - 120);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MomentStatistics<float>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE v12[40];
  _BYTE v13[16];
  int v14;
  int v15;

  if (a1[1] == *a1)
    kaldi::KaldiAssertFailure_((kaldi *)"MomentStatistics", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)0xC4, "mats.size() > 0", a5);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v13, *(unsigned int *)(*(_QWORD *)*a1 + 20), *(unsigned int *)(*(_QWORD *)*a1 + 16), 0, 0, 0);
  v8 = *a1;
  if (a1[1] != *a1)
  {
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(v8 + 8 * v9);
      if (*(_DWORD *)(v10 + 20) != v15 || *(_DWORD *)(v10 + 16) != v14)
        kaldi::KaldiAssertFailure_((kaldi *)"MomentStatistics", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)0xC7, "mats[i]->NumRows() == mat.NumRows() && mats[i]->NumCols() == mat.NumCols()", v7);
      kaldi::CuMatrixBase<float>::AddMat((uint64_t)v13, v10, 111, v6, v7, 1.0, 1.0);
      ++v9;
      v8 = *a1;
    }
    while (v9 < (uint64_t)(a1[1] - *a1) >> 3);
  }
  kaldi::Matrix<float>::Matrix<float>((uint64_t)v12, (uint64_t)v13, 111, v6, v7);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v12);
  kaldi::Matrix<float>::~Matrix((uint64_t)v12);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v13);
}

{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE v13[40];
  _BYTE v14[16];
  int v15;
  int v16;

  if (a1[1] == *a1)
    kaldi::KaldiAssertFailure_((kaldi *)"MomentStatistics", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)0xB3, "mats.size() > 0", a5);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v14, *(unsigned int *)(*a1 + 20), *(unsigned int *)(*a1 + 16), 0, 0, 0);
  v8 = *a1;
  if (a1[1] != *a1)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = v8 + v9;
      if (*(_DWORD *)(v8 + v9 + 20) != v16 || *(_DWORD *)(v11 + 16) != v15)
        kaldi::KaldiAssertFailure_((kaldi *)"MomentStatistics", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)0xB7, "mats[i].NumRows() == mat.NumRows() && mats[i].NumCols() == mat.NumCols()", v7);
      kaldi::CuMatrixBase<float>::AddMat((uint64_t)v14, v11, 111, v6, v7, 1.0, 1.0);
      ++v10;
      v8 = *a1;
      v9 += 48;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 4) > v10);
  }
  kaldi::Matrix<float>::Matrix<float>((uint64_t)v13, (uint64_t)v14, 111, v6, v7);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v13);
  kaldi::Matrix<float>::~Matrix((uint64_t)v13);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v14);
}

void sub_1DE41B5A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ToString<float>()
{
  _QWORD v1[11];
  char v2;
  uint64_t v3;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v1[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v2 < 0)
    operator delete((void *)v1[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v3);
}

void sub_1DE41B688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MomentStatistics<float>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  void *v20[3];
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;

  if (a1[1] == *a1)
    kaldi::KaldiAssertFailure_((kaldi *)"MomentStatistics", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)0xA3, "vecs.size() > 0", a5);
  v6 = *(unsigned int *)(*(_QWORD *)*a1 + 16);
  v21[0] = &unk_1EA92DFD8;
  v21[1] = 0;
  v22 = 0;
  v23 = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v21, v6, 0, a4, a5);
  v10 = *a1;
  if (a1[1] != *a1)
  {
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(v10 + 8 * v11);
      if (*(_DWORD *)(v12 + 16) != (_DWORD)v22)
        kaldi::KaldiAssertFailure_((kaldi *)"MomentStatistics", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)0xA6, "vecs[i]->Dim() == vec.Dim()", v9);
      kaldi::CuVectorBase<float>::AddVec((uint64_t)v21, v12, v7, v8, v9, 1.0, 1.0);
      ++v11;
      v10 = *a1;
    }
    while (v11 < (uint64_t)(a1[1] - *a1) >> 3);
  }
  memset(v20, 0, sizeof(v20));
  kaldi::Vector<float>::Init(v20, v22, v7, v8, v9);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v21, (uint64_t)v20, v13, v14, v15);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v20, v16, v17, v18, v19);
  kaldi::Vector<float>::Destroy((uint64_t)v20);
  v21[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v21);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  void *v20[3];
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;

  if (a1[1] == *a1)
    kaldi::KaldiAssertFailure_((kaldi *)"MomentStatistics", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)0x92, "vecs.size() > 0", a5);
  v6 = *(unsigned int *)(*a1 + 16);
  v21[0] = &unk_1EA92DFD8;
  v21[1] = 0;
  v22 = 0;
  v23 = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v21, v6, 0, a4, a5);
  v10 = *a1;
  if (a1[1] != *a1)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      if (*(_DWORD *)(v10 + v11 + 16) != (_DWORD)v22)
        kaldi::KaldiAssertFailure_((kaldi *)"MomentStatistics", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)0x95, "vecs[i].Dim() == vec.Dim()", v9);
      kaldi::CuVectorBase<float>::AddVec((uint64_t)v21, v10 + v11, v7, v8, v9, 1.0, 1.0);
      ++v12;
      v10 = *a1;
      v11 += 32;
    }
    while (v12 < (uint64_t)(a1[1] - *a1) >> 5);
  }
  memset(v20, 0, sizeof(v20));
  kaldi::Vector<float>::Init(v20, v22, v7, v8, v9);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v21, (uint64_t)v20, v13, v14, v15);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v20, v16, v17, v18, v19);
  kaldi::Vector<float>::Destroy((uint64_t)v20);
  v21[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v21);
}

void sub_1DE41B7D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va1);
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

void kaldi::GaussRandomNumber::~GaussRandomNumber(kaldi::GaussRandomNumber *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 16);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1EA909370, (void (*)(void *))MEMORY[0x1E0DE42E0]);
}

{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1EA909370, (void (*)(void *))MEMORY[0x1E0DE42E0]);
}

void sub_1DE41B930(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

char *std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<double>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((void **)a1, a2 - v3, a3);
  }
}

float *kaldi::nnet1::QuantizerResidualAggregator::Quantize(kaldi::nnet1::QuantizerResidualAggregator *this, int a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float *result;

  v6 = *(_QWORD *)this;
  v7 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (!v7
    || (v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 4),
        v9 != 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3))
    || v9 != 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"Quantize", "../engine/common/libquasar/libkaldi/src/nnet/nnet-component.h", (const char *)0x44, "residuals_.size() != 0 && residuals_.size() == orig_corrs_.size() && residuals_.size() == dest_corrs_.size()", a6);
  }
  v12 = 0;
  v13 = 0;
  v14 = 0;
  do
  {
    result = kaldi::nnet1::QuantizerResidualAggregator::AddCorrectionToResidualAndQuantize(a2, *((_QWORD *)this + 3) + v13, v6 + v12, *((_QWORD *)this + 6) + v13, a6, a3);
    ++v14;
    v6 = *(_QWORD *)this;
    v13 += 40;
    v12 += 48;
  }
  while (v14 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4));
  return result;
}

void kaldi::nnet1::AffineTransform::ApplyCorr(kaldi::nnet1::AffineTransform *this, float a2, int a3)
{
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;

  kaldi::nnet1::AffineTransform::EnsureCorrs(this);
  v6 = kaldi::nnet1::AffineTransform::Linearity(this);
  v7 = -(float)(a2 * *((float *)this + 59));
  v8 = kaldi::nnet1::AffineTransform::LinearityCorr(this, a3);
  kaldi::CuMatrixBase<float>::AddMat(v6, v8, 111, v9, v10, v7, 1.0);
  v11 = kaldi::nnet1::AffineTransform::Bias(this);
  v12 = -(float)(a2 * *((float *)this + 60));
  v13 = kaldi::nnet1::AffineTransform::BiasCorr(this, a3);
  kaldi::CuVectorBase<float>::AddVec(v11, v13, v14, v15, v16, v12, 1.0);
}

void std::vector<float>::__append(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  int v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 2)
  {
    if (a2)
    {
      v16 = 4 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 2);
    if (v11 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 2;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[4 * v12];
    v19 = &v18[4 * a2];
    v20 = 4 * a2;
    v21 = v18;
    do
    {
      *(_DWORD *)v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    v22 = &v15[4 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 4)
    {
      v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

float *kaldi::nnet1::QuantizerResidualAggregator::AddCorrectionToResidualAndQuantize(int a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD v16[34];

  kaldi::CuMatrixBase<float>::AddMat(a3, a2, 111, a4, a5, 1.0, 1.0);
  if (!a1)
    return (float *)kaldi::ZeroSmallValues<float>(a3, a4, v10, v11, v12, a6);
  if (a1 != 3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16, "AddCorrectionToResidualAndQuantize", "../engine/common/libquasar/libkaldi/src/nnet/nnet-component.h", 117);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Wrong quantizer type (neither ", 30);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" nor ", 5);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"): ", 4);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  return kaldi::Quant3Levels<float>(a3, a4, v10, v11, v12, a6);
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<signed char>::QuantizedAffineTransform(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 8) = a2[1];
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1EA92B568;
  v7 = a2[14];
  if (!v7)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x251, "linearity_", a5);
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a1 + 48, v7);
  v11 = a2[15];
  if (!v11)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x255, "bias_", v10);
  kaldi::CuVector<float>::CuVector(a1 + 96, v11, v8, v9, v10);
  return a1;
}

void sub_1DE41BF24(_Unwind_Exception *a1)
{
  kaldi::nnet1::Component *v1;
  uint64_t v2;

  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::~QuantizedAffineTransform(kaldi::nnet1::Component *a1)
{
  kaldi::nnet1::QuantizedAffineTransform<signed char>::~QuantizedAffineTransform(a1);
  JUMPOUT(0x1DF0ED014);
}

{
  *(_QWORD *)a1 = &unk_1EA92B568;
  *((_QWORD *)a1 + 12) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)a1 + 96);
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase((uint64_t)a1 + 48);
  kaldi::nnet1::Component::~Component(a1);
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<signed char>::Copy(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;

  v2 = operator new();
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = off_1EA92D6D8;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *(_WORD *)(a1 + 16);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  *(_QWORD *)v2 = &unk_1EA92B568;
  kaldi::QuantizedMatrixBase<signed char>::QuantizedMatrixBase((int *)(v2 + 48), (int *)(a1 + 48));
  *(_QWORD *)(v2 + 96) = &unk_1EA92DFD8;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = *(_QWORD *)(a1 + 120);
  kaldi::CuVector<float>::Resize(v2 + 96, *(unsigned int *)(a1 + 112), 1u, v4, v5);
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)(v2 + 96), a1 + 96, v6, v7, v8);
  return v2;
}

void sub_1DE41C044(_Unwind_Exception *a1)
{
  kaldi::nnet1::Component *v1;

  kaldi::nnet1::Component::~Component(v1);
  MEMORY[0x1DF0ED014](v1, 0x10D1C40B6DC7CF1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<signed char>::GetType()
{
  return 1033;
}

uint64_t kaldi::nnet1::Component::IsUpdatable(kaldi::nnet1::Component *this)
{
  return 0;
}

void kaldi::nnet1::Component::CountZeroCorr(kaldi::nnet1::Component *this, int *a2, int *a3)
{
  *a2 = 0;
  *a3 = 0;
}

void kaldi::nnet1::Component::VectorizeWeightsCorrs(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  kaldi::nnet1::Component *v4;
  std::string *v5;
  std::string::size_type size;
  _QWORD *v7;
  std::string v8;
  _QWORD v9[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "VectorizeWeightsCorrs", "../engine/common/libquasar/libkaldi/src/nnet/nnet-component.h", 274);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"VectorizeWeightsCorrs", 21);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" is not implemented for ", 24);
  v4 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  kaldi::nnet1::Component::TypeToMarker(v4, &v8);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v8;
  else
    v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  else
    size = v8.__r_.__value_.__l.__size_;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, size);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " component.");
  std::string::~string(&v8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::Info(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  void *__p[2];
  unsigned __int8 v14;
  std::string v15;
  std::string v16;

  std::string::basic_string[abi:ne180100]<0>(&v15, "\n  linearity is quantized");
  v4 = std::string::append(&v15, "\n  bias");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((_DWORD *)(a1 + 96), v6, v7, v8, v9);
  if ((v14 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v11 = v14;
  else
    v11 = (std::string::size_type)__p[1];
  v12 = std::string::append(&v16, (const std::string::value_type *)v10, v11);
  *a2 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v14 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_1DE41C258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::WriteData(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  uint64_t v7;
  const char *v8;

  kaldi::QuantizedMatrix<signed char>::Write((int *)(a1 + 48), a2, a3, a4);
  kaldi::CuVectorBase<float>::Write((_DWORD *)(a1 + 96), a2, a3, v7, v8);
}

uint64_t *kaldi::nnet1::QuantizedAffineTransform<signed char>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;

  kaldi::CuMatrixBase<float>::AddMatMat<signed char>(a3, a2, 111, (unsigned int *)(a1 + 48), (const char *)0x70, 1.0, 0.0);
  return kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 96, v5, v6, v7, 1.0, 1.0);
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::BackpropagateFnc()
{
  _QWORD *v0;
  _QWORD v1[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "BackpropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-quantized-affine-transform.h", 71);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"BackpropagateFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  const char *v9;
  _BYTE v10[16];

  if (*(_DWORD *)(a1 + 112) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x10E, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
  kaldi::CuVectorBase<float>::Set(a4, *(float *)(*(_QWORD *)(a1 + 104) + 4 * a3));
  kaldi::QuantizedMatrixBase<signed char>::Row(a1 + 48, a3, (uint64_t)v10);
  kaldi::CuVectorBase<float>::AddMatVec<signed char>(a4, a2, 111, (uint64_t)v10, v9, 1.0, 1.0);
}

float kaldi::nnet1::QuantizedAffineTransform<signed char>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  float v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  _BYTE v11[16];

  if (*(_DWORD *)(a1 + 112) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x10E, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
  v6 = *(float *)(*(_QWORD *)(a1 + 104) + 4 * a3);
  kaldi::QuantizedMatrixBase<signed char>::Row(a1 + 48, a3, (uint64_t)v11);
  return v6 + kaldi::VecVec<float,signed char>(a2, (uint64_t)v11, v7, v8, v9);
}

double kaldi::nnet1::QuantizedAffineTransform<signed char>::ReadData(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  const char *v10;
  double result;

  kaldi::QuantizedMatrix<signed char>::Read(a1 + 12, a2, a3, a4, a5);
  result = kaldi::CuVector<float>::Read((uint64_t)(a1 + 24), a2, a3, v8, v9);
  if (a1[28] != a1[3])
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-quantized-affine-transform.h", (const char *)0x2C, "bias_.Dim() == output_dim_", v10);
  return result;
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<short>::QuantizedAffineTransform(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 8) = a2[1];
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1EA92B628;
  v7 = a2[14];
  if (!v7)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x251, "linearity_", a5);
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(a1 + 48, v7);
  v11 = a2[15];
  if (!v11)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x255, "bias_", v10);
  kaldi::CuVector<float>::CuVector(a1 + 96, v11, v8, v9, v10);
  return a1;
}

void sub_1DE41C634(_Unwind_Exception *a1)
{
  kaldi::nnet1::Component *v1;
  uint64_t v2;

  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::QuantizedAffineTransform<short>::~QuantizedAffineTransform(kaldi::nnet1::Component *a1)
{
  kaldi::nnet1::QuantizedAffineTransform<short>::~QuantizedAffineTransform(a1);
  JUMPOUT(0x1DF0ED014);
}

{
  *(_QWORD *)a1 = &unk_1EA92B628;
  *((_QWORD *)a1 + 12) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)a1 + 96);
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase((uint64_t)a1 + 48);
  kaldi::nnet1::Component::~Component(a1);
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<short>::Copy(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;

  v2 = operator new();
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = off_1EA92D6D8;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *(_WORD *)(a1 + 16);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  *(_QWORD *)v2 = &unk_1EA92B628;
  kaldi::QuantizedMatrixBase<short>::QuantizedMatrixBase(v2 + 48, (int *)(a1 + 48));
  *(_QWORD *)(v2 + 96) = &unk_1EA92DFD8;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = *(_QWORD *)(a1 + 120);
  kaldi::CuVector<float>::Resize(v2 + 96, *(unsigned int *)(a1 + 112), 1u, v4, v5);
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)(v2 + 96), a1 + 96, v6, v7, v8);
  return v2;
}

void sub_1DE41C754(_Unwind_Exception *a1)
{
  kaldi::nnet1::Component *v1;

  kaldi::nnet1::Component::~Component(v1);
  MEMORY[0x1DF0ED014](v1, 0x10D1C40B6DC7CF1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<short>::GetType()
{
  return 1035;
}

void kaldi::nnet1::QuantizedAffineTransform<short>::WriteData(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  uint64_t v7;
  const char *v8;

  kaldi::QuantizedMatrix<short>::Write((int *)(a1 + 48), a2, a3, a4);
  kaldi::CuVectorBase<float>::Write((_DWORD *)(a1 + 96), a2, a3, v7, v8);
}

uint64_t *kaldi::nnet1::QuantizedAffineTransform<short>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;

  kaldi::CuMatrixBase<float>::AddMatMat<short>(a3, a2, 111, (unsigned int *)(a1 + 48), (const char *)0x70, 1.0, 0.0);
  return kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 96, v5, v6, v7, 1.0, 1.0);
}

void kaldi::nnet1::QuantizedAffineTransform<short>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  const char *v9;
  _BYTE v10[16];

  if (*(_DWORD *)(a1 + 112) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x10E, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
  kaldi::CuVectorBase<float>::Set(a4, *(float *)(*(_QWORD *)(a1 + 104) + 4 * a3));
  kaldi::QuantizedMatrixBase<short>::Row(a1 + 48, a3, (uint64_t)v10);
  kaldi::CuVectorBase<float>::AddMatVec<short>(a4, a2, 111, (uint64_t)v10, v9, 1.0, 1.0);
}

float kaldi::nnet1::QuantizedAffineTransform<short>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  float v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  _BYTE v11[16];

  if (*(_DWORD *)(a1 + 112) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x10E, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
  v6 = *(float *)(*(_QWORD *)(a1 + 104) + 4 * a3);
  kaldi::QuantizedMatrixBase<short>::Row(a1 + 48, a3, (uint64_t)v11);
  return v6 + kaldi::VecVec<float,short>(a2, (uint64_t)v11, v7, v8, v9);
}

double kaldi::nnet1::QuantizedAffineTransform<short>::ReadData(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  const char *v10;
  double result;

  kaldi::QuantizedMatrix<short>::Read(a1 + 12, a2, a3, a4, a5);
  result = kaldi::CuVector<float>::Read((uint64_t)(a1 + 24), a2, a3, v8, v9);
  if (a1[28] != a1[3])
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-quantized-affine-transform.h", (const char *)0x2C, "bias_.Dim() == output_dim_", v10);
  return result;
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::VectorwiseQuantizedAffineTransform(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 8) = a2[1];
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1EA92CBF8;
  v7 = a2[14];
  if (!v7)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x251, "linearity_", a5);
  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(a1 + 48, v7);
  v11 = a2[15];
  if (!v11)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x255, "bias_", v10);
  kaldi::CuVector<float>::CuVector(a1 + 88, v11, v8, v9, v10);
  return a1;
}

void sub_1DE41CACC(_Unwind_Exception *a1)
{
  kaldi::nnet1::Component *v1;
  uint64_t v2;

  kaldi::VectorwiseQuantizedMatrix<signed char>::~VectorwiseQuantizedMatrix(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::~VectorwiseQuantizedAffineTransform(kaldi::nnet1::Component *a1)
{
  kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::~VectorwiseQuantizedAffineTransform(a1);
  JUMPOUT(0x1DF0ED014);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1EA92CBF8;
  *((_QWORD *)a1 + 11) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)a1 + 88);
  v2 = *((_QWORD *)a1 + 9);
  *((_QWORD *)a1 + 9) = 0;
  if (v2)
    MEMORY[0x1DF0ED014](v2, 0x1000C4077774924);
  v3 = *((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 7) = 0;
  if (v3)
    MEMORY[0x1DF0ED014](v3, 0x1000C4052888210);
  kaldi::nnet1::Component::~Component(a1);
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::VectorwiseQuantizedAffineTransform(v2, a1);
  return v2;
}

void sub_1DE41CB5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10D1C40EF2100C4);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::GetType()
{
  return 1041;
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::Info(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  void *__p[2];
  unsigned __int8 v14;
  std::string v15;
  std::string v16;

  std::string::basic_string[abi:ne180100]<0>(&v15, "\n  linearity is vectorwise quantized");
  v4 = std::string::append(&v15, "\n  bias");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((_DWORD *)(a1 + 88), v6, v7, v8, v9);
  if ((v14 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v11 = v14;
  else
    v11 = (std::string::size_type)__p[1];
  v12 = std::string::append(&v16, (const std::string::value_type *)v10, v11);
  *a2 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v14 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_1DE41CC60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::WriteData(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  const char *v7;

  kaldi::VectorwiseQuantizedMatrix<signed char>::Write((unsigned int *)(a1 + 48), a2, a3);
  kaldi::CuVectorBase<float>::Write((_DWORD *)(a1 + 88), a2, a3, v6, v7);
}

uint64_t *kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;

  kaldi::CuMatrixBase<float>::AddMatMat<signed char>(a3, a2, 111, (_DWORD *)(a1 + 48), (const char *)0x70, 1.0, 0.0);
  return kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 88, v5, v6, v7, 1.0, 1.0);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::BackpropagateFnc()
{
  _QWORD *v0;
  _QWORD v1[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "BackpropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-vectorwise-quantized-affine-transform.h", 74);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"BackpropagateFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v9;
  const char *v10;
  _BYTE v11[16];

  if (*(_DWORD *)(a1 + 104) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x10E, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
  kaldi::CuVectorBase<float>::Set(a4, *(float *)(*(_QWORD *)(a1 + 96) + 4 * a3));
  kaldi::VectorwiseQuantizedMatrix<signed char>::Row(a1 + 48, a3, (uint64_t)v11);
  kaldi::QuantizedVectorBase<signed char>::AddMatVec((uint64_t)v11, a2 + 8, a4 + 8, 1.0, v9, v10);
}

float kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  float v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  _BYTE v11[16];

  if (*(_DWORD *)(a1 + 104) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x10E, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
  v6 = *(float *)(*(_QWORD *)(a1 + 96) + 4 * a3);
  kaldi::VectorwiseQuantizedMatrix<signed char>::Row(a1 + 48, a3, (uint64_t)v11);
  return v6 + kaldi::VecVec<float,signed char>(a2, (uint64_t)v11, v7, v8, v9);
}

double kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::ReadData(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;
  const char *v9;
  double result;

  kaldi::VectorwiseQuantizedMatrix<signed char>::Read(a1 + 12, a2, a3, a4);
  result = kaldi::CuVector<float>::Read((uint64_t)(a1 + 22), a2, a3, v7, v8);
  if (a1[26] != a1[3])
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-vectorwise-quantized-affine-transform.h", (const char *)0x2F, "bias_.Dim() == output_dim_", v9);
  return result;
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::VectorwiseQuantizedAffineTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  *(_QWORD *)a1 = off_1EA92D6D8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = &unk_1EA92CBF8;
  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(a1 + 48, a2 + 48);
  *(_QWORD *)(a1 + 88) = &unk_1EA92DFD8;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  kaldi::CuVector<float>::Resize(a1 + 88, *(unsigned int *)(a2 + 104), 1u, v5, v6);
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)(a1 + 88), a2 + 88, v7, v8, v9);
  return a1;
}

void sub_1DE41D078(_Unwind_Exception *a1)
{
  kaldi::nnet1::Component *v1;

  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::BidirectionalRecurrentComponent::BidirectionalRecurrentComponent(kaldi::nnet1::BidirectionalRecurrentComponent *this, int a2, int a3)
{
  double result;

  *((_DWORD *)this + 94) = a2;
  *((_DWORD *)this + 95) = a3;
  *((_WORD *)this + 192) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = &off_1EA9284D0;
  *(_OWORD *)((char *)this + 424) = xmmword_1DEC3D450;
  *((_QWORD *)this + 55) = 0x3BF800000;
  *((_DWORD *)this + 112) = 1;
  *((_WORD *)this + 226) = 0;
  *((_BYTE *)this + 454) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = &unk_1EA927930;
  *((_DWORD *)this + 10) = 1;
  *(_OWORD *)((char *)this + 56) = xmmword_1DEC3D450;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((_BYTE *)this + 86) = 0;
  *((_QWORD *)this + 6) = &off_1EA92B868;
  *((_QWORD *)this + 11) = &unk_1EA92B888;
  *((_QWORD *)this + 12) = 0x100000001;
  result = 0.0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_QWORD *)this = &off_1EA92C2B8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 46) = &off_1EA92C578;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = &off_1EA92C418;
  *((_QWORD *)this + 21) = &unk_1EA92C440;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *(_OWORD *)((char *)this + 345) = 0u;
  return result;
}

kaldi::nnet1::BidirectionalRecurrentComponent *kaldi::nnet1::BidirectionalRecurrentComponent::BidirectionalRecurrentComponent(kaldi::nnet1::BidirectionalRecurrentComponent *this, const std::string *a2)
{
  const char *v4;
  char *size;
  void *v6;
  std::string::size_type v7;
  void *v8;
  const char *v10;
  uint64_t v11;

  *((_QWORD *)this + 47) = *(std::string::size_type *)((char *)&a2->__r_.__value_.__l.__size_
                                                     + *(_QWORD *)(a2->__r_.__value_.__r.__words[0] - 24));
  *((_WORD *)this + 192) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = &off_1EA9284D0;
  *(_OWORD *)((char *)this + 424) = xmmword_1DEC3D450;
  *((_DWORD *)this + 110) = -1082130432;
  *(_QWORD *)((char *)this + 444) = 0x100000003;
  *((_WORD *)this + 226) = 0;
  *((_BYTE *)this + 454) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = &unk_1EA927930;
  *((_DWORD *)this + 10) = 1;
  *(_OWORD *)((char *)this + 56) = xmmword_1DEC3D450;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((_BYTE *)this + 86) = 0;
  *((_QWORD *)this + 6) = &off_1EA92B868;
  *((_QWORD *)this + 11) = &unk_1EA92B888;
  *((_QWORD *)this + 12) = 0x100000001;
  *((_QWORD *)this + 19) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_QWORD *)this = &off_1EA92C2B8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 20) = &off_1EA92C418;
  *((_QWORD *)this + 21) = &unk_1EA92C440;
  *((_OWORD *)this + 15) = 0u;
  *((_QWORD *)this + 46) = &off_1EA92C578;
  *((_OWORD *)this + 12) = 0u;
  *((_QWORD *)this + 44) = 0;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  std::string::operator=((std::string *)this + 8, a2 + 8);
  size = (char *)a2[7].__r_.__value_.__l.__size_;
  if (!size)
  {
    v10 = "src.forward_rnn_";
    v11 = 34;
    goto LABEL_10;
  }
  if (!a2[7].__r_.__value_.__r.__words[2])
  {
    v10 = "src.backward_rnn_";
    v11 = 35;
LABEL_10:
    kaldi::KaldiAssertFailure_((kaldi *)"BidirectionalRecurrentComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)v11, v10, v4);
  }
  v6 = (void *)(*(uint64_t (**)(char *))(*(_QWORD *)&size[*(_QWORD *)(*(_QWORD *)size - 24)] + 16))(&size[*(_QWORD *)(*(_QWORD *)size - 24)]);
  if (v6)
  *((_QWORD *)this + 22) = v6;
  v7 = a2[7].__r_.__value_.__r.__words[2] + *(_QWORD *)(*(_QWORD *)a2[7].__r_.__value_.__r.__words[2] - 24);
  v8 = (void *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v7 + 16))(v7);
  if (v8)
  *((_QWORD *)this + 23) = v8;
  *((_BYTE *)this + 360) = 0;
  return this;
}

void sub_1DE41D3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, kaldi::nnet1::UpdatableComponent *a11, uint64_t a12)
{
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;

  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a12 = a10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (v12[215] < 0)
    operator delete(*v15);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v14);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v13);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v12, (uint64_t *)&off_1EA91C270);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a11);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable8BitComponentItf>(const std::string *a1)
{
  const void *size;
  kaldi::nnet1::Quantizable8BitComponentItf *v3;
  const void *v4;
  kaldi::nnet1::Quantizable8BitComponentItf *v5;
  kaldi::nnet1::Quantizable8BitComponentItf *v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const char *v10;
  void *v11;
  uint64_t v12;
  const void *v13;
  const char *v14;
  void *v15;
  uint64_t v16;
  kaldi::nnet1::Component *v17;
  void **v18;
  const void *v20;
  std::string v21[11];

  size = (const void *)a1[7].__r_.__value_.__l.__size_;
  if (!size)
  {
    v20 = (const void *)a1[7].__r_.__value_.__r.__words[2];
    if (v20)
    goto LABEL_19;
  }
  v4 = (const void *)a1[7].__r_.__value_.__r.__words[2];
  if (!v4)
  {
    if (v3)
      goto LABEL_20;
LABEL_19:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21, "CopyQuantized", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 60);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v21, "Forward RNN is not quantizable");
    goto LABEL_21;
  }
  if (!v3)
    goto LABEL_19;
  v6 = v5;
  if (!v5)
  {
LABEL_20:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21, "CopyQuantized", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 63);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v21, "Backward RNN is not quantizable");
LABEL_21:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
  }
  v7 = operator new();
  kaldi::nnet1::BidirectionalRecurrentComponent::BidirectionalRecurrentComponent((kaldi::nnet1::BidirectionalRecurrentComponent *)v7, a1);
  v8 = *(_QWORD *)(v7 + 176);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (const void *)kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(v3);
  if (!v9)
  {
    *(_QWORD *)(v7 + 176) = 0;
LABEL_23:
    kaldi::KaldiAssertFailure_((kaldi *)"CopyQuantized", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)0x45, "quantized->forward_rnn_", v10);
  }
  *(_QWORD *)(v7 + 176) = v11;
  if (!v11)
    goto LABEL_23;
  v12 = *(_QWORD *)(v7 + 184);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = (const void *)kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(v6);
  if (!v13)
  {
    *(_QWORD *)(v7 + 184) = 0;
LABEL_25:
    kaldi::KaldiAssertFailure_((kaldi *)"CopyQuantized", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)0x48, "quantized->backward_rnn_", v14);
  }
  *(_QWORD *)(v7 + 184) = v15;
  if (!v15)
    goto LABEL_25;
  v16 = *(_QWORD *)(v7 + 176) + *(_QWORD *)(**(_QWORD **)(v7 + 176) - 24);
  v17 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  kaldi::nnet1::Component::TypeToMarker(v17, v21);
  v18 = (void **)(v7 + 192);
  if (*(char *)(v7 + 215) < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = *(_OWORD *)&v21[0].__r_.__value_.__l.__data_;
  *(_QWORD *)(v7 + 208) = *((_QWORD *)&v21[0].__r_.__value_.__l + 2);
  return v7 + *(_QWORD *)(*(_QWORD *)v7 - 24);
}

void sub_1DE41D6C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized8Bit(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable8BitComponentItf>((const std::string *)((char *)this - 160));
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>(const std::string *a1)
{
  const void *size;
  kaldi::nnet1::Quantizable8BitComponentItf *v3;
  const void *v4;
  kaldi::nnet1::Quantizable8BitComponentItf *v5;
  kaldi::nnet1::Quantizable8BitComponentItf *v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const char *v10;
  void *v11;
  uint64_t v12;
  const void *v13;
  const char *v14;
  void *v15;
  uint64_t v16;
  kaldi::nnet1::Component *v17;
  void **v18;
  const void *v20;
  std::string v21[11];

  size = (const void *)a1[7].__r_.__value_.__l.__size_;
  if (!size)
  {
    v20 = (const void *)a1[7].__r_.__value_.__r.__words[2];
    if (v20)
    goto LABEL_19;
  }
  v4 = (const void *)a1[7].__r_.__value_.__r.__words[2];
  if (!v4)
  {
    if (v3)
      goto LABEL_20;
LABEL_19:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21, "CopyQuantized", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 60);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v21, "Forward RNN is not quantizable");
    goto LABEL_21;
  }
  if (!v3)
    goto LABEL_19;
  v6 = v5;
  if (!v5)
  {
LABEL_20:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21, "CopyQuantized", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 63);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v21, "Backward RNN is not quantizable");
LABEL_21:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
  }
  v7 = operator new();
  kaldi::nnet1::BidirectionalRecurrentComponent::BidirectionalRecurrentComponent((kaldi::nnet1::BidirectionalRecurrentComponent *)v7, a1);
  v8 = *(_QWORD *)(v7 + 176);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (const void *)kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(v3);
  if (!v9)
  {
    *(_QWORD *)(v7 + 176) = 0;
LABEL_23:
    kaldi::KaldiAssertFailure_((kaldi *)"CopyQuantized", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)0x45, "quantized->forward_rnn_", v10);
  }
  *(_QWORD *)(v7 + 176) = v11;
  if (!v11)
    goto LABEL_23;
  v12 = *(_QWORD *)(v7 + 184);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = (const void *)kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(v6);
  if (!v13)
  {
    *(_QWORD *)(v7 + 184) = 0;
LABEL_25:
    kaldi::KaldiAssertFailure_((kaldi *)"CopyQuantized", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)0x48, "quantized->backward_rnn_", v14);
  }
  *(_QWORD *)(v7 + 184) = v15;
  if (!v15)
    goto LABEL_25;
  v16 = *(_QWORD *)(v7 + 176) + *(_QWORD *)(**(_QWORD **)(v7 + 176) - 24);
  v17 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  kaldi::nnet1::Component::TypeToMarker(v17, v21);
  v18 = (void **)(v7 + 192);
  if (*(char *)(v7 + 215) < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = *(_OWORD *)&v21[0].__r_.__value_.__l.__data_;
  *(_QWORD *)(v7 + 208) = *((_QWORD *)&v21[0].__r_.__value_.__l + 2);
  return v7 + *(_QWORD *)(*(_QWORD *)v7 - 24);
}

void sub_1DE41D958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized16Bit(const std::string *this)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>(this - 7);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::InitData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t *v8;
  std::string::size_type *v9;
  uint64_t v10;
  const char *v11;
  BOOL v14;
  BOOL v15;
  _QWORD **v16;
  uint64_t v17;
  int v18;
  kaldi::nnet1::Component *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  void **v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  const void *v33;
  char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  int v40;
  unsigned __int8 *v41;
  void **v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  const void *v47;
  char *v48;
  _QWORD *v49;
  _QWORD **v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  void *p_s1;
  size_t v61;
  _QWORD *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  size_t v69;
  _QWORD *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *__s1;
  size_t __n;
  uint64_t v81;
  _QWORD v82[34];
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;

  v83 = 0;
  v84 = 0;
  v85 = 0;
  v8 = a2 + 4;
  v9 = (std::string::size_type *)(a1 + 192);
  while (1)
  {
    if ((*((_BYTE *)v8 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      goto LABEL_32;
    kaldi::ReadToken(a2, 0, (uint64_t)&v83, a4, a5);
    if ((SHIBYTE(v85) & 0x80000000) == 0)
      break;
    if (v84 != 24
      || (*v83 == 0x657272756365523CLL ? (v14 = v83[1] == 0x6E6F706D6F43746ELL) : (v14 = 0),
          v14 ? (v15 = v83[2] == 0x3E65707954746E65) : (v15 = 0),
          !v15))
    {
      if (v84 == 12)
      {
        v16 = (_QWORD **)v83;
        goto LABEL_27;
      }
LABEL_73:
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v82, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 94);
      v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"Unknown token ", 14);
      if (v85 >= 0)
        v50 = &v83;
      else
        v50 = (_QWORD **)v83;
      if (v85 >= 0)
        v51 = HIBYTE(v85);
      else
        v51 = v84;
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
      v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)", a typo in config?", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" (RecurrentComponentType)", 25);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v82);
    }
LABEL_22:
    kaldi::ReadToken(a2, 0, (uint64_t)v9, v10, v11);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if (HIBYTE(v85) == 24)
  {
    if (v83 != (_QWORD *)0x657272756365523CLL || v84 != 0x6E6F706D6F43746ELL || v85 != 0x3E65707954746E65)
      goto LABEL_73;
    goto LABEL_22;
  }
  if (HIBYTE(v85) != 12)
    goto LABEL_73;
  v16 = &v83;
LABEL_27:
  v17 = (uint64_t)*v16;
  v18 = *((_DWORD *)v16 + 2);
  if (v17 != 0x6E6F706D6F432F3CLL || v18 != 1047817829)
    goto LABEL_73;
LABEL_32:
  v20 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType(v9);
  __s1 = 0;
  __n = 0;
  v81 = 0;
  kaldi::ReadToken(a2, 0, (uint64_t)&__s1, v21, v22);
  v78 = 0;
  v23 = HIBYTE(v81);
  if (v81 >= 0)
    v24 = HIBYTE(v81);
  else
    v24 = __n;
  v25 = *(unsigned __int8 *)(a1 + 215);
  v26 = (char)v25;
  if ((v25 & 0x80u) != 0)
    v25 = *(_QWORD *)(a1 + 200);
  if (v24 != v25)
  {
LABEL_80:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v82, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 106);
    v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"you defined two different recurrent component types ", 52);
    v55 = *(char *)(a1 + 215);
    if (v55 >= 0)
      v56 = (uint64_t)v9;
    else
      v56 = *(_QWORD *)(a1 + 192);
    if (v55 >= 0)
      v57 = *(unsigned __int8 *)(a1 + 215);
    else
      v57 = *(_QWORD *)(a1 + 200);
    v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, v56, v57);
    v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" vs ", 4);
    if (v81 >= 0)
      p_s1 = &__s1;
    else
      p_s1 = __s1;
    if (v81 >= 0)
      v61 = HIBYTE(v81);
    else
      v61 = __n;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)p_s1, v61);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v82);
  }
  if (v26 >= 0)
    v27 = (unsigned __int8 *)v9;
  else
    v27 = (unsigned __int8 *)*v9;
  if (v81 < 0)
  {
    if (memcmp(__s1, v27, __n))
      goto LABEL_80;
  }
  else if (HIBYTE(v81))
  {
    v28 = &__s1;
    while (*(unsigned __int8 *)v28 == *v27)
    {
      v28 = (void **)((char *)v28 + 1);
      ++v27;
      if (!--v23)
        goto LABEL_48;
    }
    goto LABEL_80;
  }
LABEL_48:
  kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v78 + 4, v29, v30);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v78, v31, v32);
  v33 = (const void *)kaldi::nnet1::Component::NewComponentOfType(v20, HIDWORD(v78), v78);
  if (!v33)
  {
    *(_QWORD *)(a1 + 176) = 0;
LABEL_107:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v82, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 117);
    v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"this is not a recurrent component, initialization failed, you used ", 67);
    v71 = *(char *)(a1 + 215);
    if (v71 >= 0)
      v72 = (uint64_t)v9;
    else
      v72 = *(_QWORD *)(a1 + 192);
    if (v71 >= 0)
      v73 = *(unsigned __int8 *)(a1 + 215);
    else
      v73 = *(_QWORD *)(a1 + 200);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, v72, v73);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v82);
  }
  *(_QWORD *)(a1 + 176) = v34;
  if (!v34)
    goto LABEL_107;
  (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)&v34[*(_QWORD *)(*(_QWORD *)v34 - 24)] + 96))(&v34[*(_QWORD *)(*(_QWORD *)v34 - 24)], a2, a3);
  kaldi::ReadToken(a2, 0, (uint64_t)&__s1, v35, v36);
  v37 = HIBYTE(v81);
  if (v81 >= 0)
    v38 = HIBYTE(v81);
  else
    v38 = __n;
  v39 = *(unsigned __int8 *)(a1 + 215);
  v40 = (char)v39;
  if ((v39 & 0x80u) != 0)
    v39 = *(_QWORD *)(a1 + 200);
  if (v38 != v39)
    goto LABEL_93;
  if (v40 >= 0)
    v41 = (unsigned __int8 *)v9;
  else
    v41 = (unsigned __int8 *)*v9;
  if (v81 < 0)
  {
    if (memcmp(__s1, v41, __n))
      goto LABEL_93;
  }
  else if (HIBYTE(v81))
  {
    v42 = &__s1;
    while (*(unsigned __int8 *)v42 == *v41)
    {
      v42 = (void **)((char *)v42 + 1);
      ++v41;
      if (!--v37)
        goto LABEL_66;
    }
LABEL_93:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v82, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 124);
    v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"you defined two different recurrent component types ", 52);
    v63 = *(char *)(a1 + 215);
    if (v63 >= 0)
      v64 = (uint64_t)v9;
    else
      v64 = *(_QWORD *)(a1 + 192);
    if (v63 >= 0)
      v65 = *(unsigned __int8 *)(a1 + 215);
    else
      v65 = *(_QWORD *)(a1 + 200);
    v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, v64, v65);
    v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" vs ", 4);
    if (v81 >= 0)
      v68 = &__s1;
    else
      v68 = __s1;
    if (v81 >= 0)
      v69 = HIBYTE(v81);
    else
      v69 = __n;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v68, v69);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v82);
  }
LABEL_66:
  kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v78 + 4, v43, v44);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v78, v45, v46);
  v47 = (const void *)kaldi::nnet1::Component::NewComponentOfType(v20, HIDWORD(v78), v78);
  if (!v47)
  {
    *(_QWORD *)(a1 + 184) = 0;
LABEL_115:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v82, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 135);
    v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"this is not a recurrent component, initialization failed, you used ", 67);
    v75 = *(char *)(a1 + 215);
    if (v75 >= 0)
      v76 = (uint64_t)v9;
    else
      v76 = *(_QWORD *)(a1 + 192);
    if (v75 >= 0)
      v77 = *(unsigned __int8 *)(a1 + 215);
    else
      v77 = *(_QWORD *)(a1 + 200);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, v76, v77);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v82);
  }
  *(_QWORD *)(a1 + 184) = v48;
  if (!v48)
    goto LABEL_115;
  (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)&v48[*(_QWORD *)(*(_QWORD *)v48 - 24)] + 96))(&v48[*(_QWORD *)(*(_QWORD *)v48 - 24)], a2, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  if (SHIBYTE(v81) < 0)
    operator delete(__s1);
  if (SHIBYTE(v85) < 0)
    operator delete(v83);
}

void sub_1DE41E020(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 81) < 0)
    operator delete(*(void **)(v1 - 104));
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::InitData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::BidirectionalRecurrentComponent::InitData((uint64_t)a1 + *(_QWORD *)(*a1 - 112), a2, a3, a4, a5);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  BOOL v15;
  BOOL v16;
  _QWORD **v17;
  uint64_t v18;
  int v19;
  const void *v21;
  void *v22;
  const void *v23;
  void *v24;
  _QWORD *v25;
  _QWORD **v26;
  uint64_t v27;
  _QWORD v28[34];
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v29 = 0;
  v30 = 0;
  v31 = 0;
  for (i = (uint64_t)(a1 + 24); ; kaldi::ReadToken(a2, a3, i, v11, v12))
  {
    if (kaldi::Peek(a2, a3) != 60)
      goto LABEL_32;
    kaldi::ReadToken(a2, a3, (uint64_t)&v29, v9, v10);
    if ((SHIBYTE(v31) & 0x80000000) == 0)
      break;
    if (v30 != 24
      || (*v29 == 0x657272756365523CLL ? (v15 = v29[1] == 0x6E6F706D6F43746ELL) : (v15 = 0),
          v15 ? (v16 = v29[2] == 0x3E65707954746E65) : (v16 = 0),
          !v16))
    {
      if (v30 == 12)
      {
        v17 = (_QWORD **)v29;
        goto LABEL_27;
      }
LABEL_39:
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 150);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Unrecognized token ", 19);
      if (v31 >= 0)
        v26 = &v29;
      else
        v26 = (_QWORD **)v29;
      if (v31 >= 0)
        v27 = HIBYTE(v31);
      else
        v27 = v30;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
    }
LABEL_22:
    ;
  }
  if (HIBYTE(v31) == 24)
  {
    if (v29 != (_QWORD *)0x657272756365523CLL || v30 != 0x6E6F706D6F43746ELL || v31 != 0x3E65707954746E65)
      goto LABEL_39;
    goto LABEL_22;
  }
  if (HIBYTE(v31) != 12)
    goto LABEL_39;
  v17 = &v29;
LABEL_27:
  v18 = (uint64_t)*v17;
  v19 = *((_DWORD *)v17 + 2);
  if (v18 != 0x6E6F706D6F432F3CLL || v19 != 1047817829)
    goto LABEL_39;
LABEL_32:
  v21 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v21)
  {
    a1[22] = 0;
LABEL_47:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 153);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"forward component is not an RNN", 31);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
  }
  a1[22] = v22;
  if (!v22)
    goto LABEL_47;
  kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
  v23 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v23)
  {
    a1[23] = 0;
LABEL_49:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 156);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"backward component is not an RNN", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
  }
  a1[23] = v24;
  if (!v24)
    goto LABEL_49;
  (*(void (**)(_QWORD *))(*a1 + 128))(a1);
  if (SHIBYTE(v31) < 0)
    operator delete(v29);
}

void sub_1DE41E34C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 81) < 0)
    operator delete(*(void **)(v1 - 104));
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::BidirectionalRecurrentComponent::ReadData((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 176)), a2, a3, a4);
}

_QWORD *kaldi::nnet1::BidirectionalRecurrentComponent::WriteConfig(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;

  kaldi::WriteToken(a2, a3, (kaldi *)"<RecurrentComponentType>", a4, a5);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)(a1 + 192), v8, v9);
  return kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v10, v11);
}

_QWORD *`virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::WriteConfig(_QWORD *a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::WriteConfig((uint64_t)a1 + *(_QWORD *)(*a1 - 184), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::WriteData(_QWORD *a1, _QWORD *a2, const char *a3, uint64_t a4)
{
  uint64_t v8;
  const char *v9;

  (*(void (**)(_QWORD *))(*a1 + 184))(a1);
  kaldi::nnet1::Component::Write(a1[22] + *(_QWORD *)(*(_QWORD *)a1[22] - 24), a2, (uint64_t)a3, a4);
  kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v8, v9);
  return kaldi::nnet1::Component::Write(a1[23] + *(_QWORD *)(*(_QWORD *)a1[23] - 24), a2, (uint64_t)a3, a4);
}

uint64_t `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::WriteData(_QWORD *a1, _QWORD *a2, const char *a3, uint64_t a4)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::WriteData((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 120)), a2, a3, a4);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::NumParams(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 22) + *(_QWORD *)(**((_QWORD **)this + 22) - 24);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 176))(v2);
  v4 = *((_QWORD *)this + 23) + *(_QWORD *)(**((_QWORD **)this + 23) - 24);
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4) + v3;
}

uint64_t `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::NumParams(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  char *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 192);
  v2 = *((_QWORD *)v1 + 22) + *(_QWORD *)(**((_QWORD **)v1 + 22) - 24);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 176))(v2);
  v4 = *((_QWORD *)v1 + 23) + *(_QWORD *)(**((_QWORD **)v1 + 23) - 24);
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4) + v3;
}

void kaldi::nnet1::BidirectionalRecurrentComponent::GetParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];

  v4 = *(_QWORD *)(a1 + 176) + *(_QWORD *)(**(_QWORD **)(a1 + 176) - 24);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4);
  v6 = *(_QWORD *)(a1 + 184) + *(_QWORD *)(**(_QWORD **)(a1 + 184) - 24);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
  v8 = v7 + v5;
  kaldi::Vector<float>::Resize((void **)a2, v8, 1, v9, v10);
  memset(v22, 0, sizeof(v22));
  v11 = *(_QWORD *)(a1 + 176) + *(_QWORD *)(**(_QWORD **)(a1 + 176) - 24);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 184))(v11, v22);
  v20 = 0;
  v21 = 0;
  if (v5 > *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v14);
  v19 = *(void **)a2;
  LODWORD(v20) = v5;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v19, (uint64_t)v22, v12, v13, v14);
  v15 = *(_QWORD *)(a1 + 184) + *(_QWORD *)(**(_QWORD **)(a1 + 184) - 24);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v15 + 184))(v15, v22);
  v20 = 0;
  v21 = 0;
  if (v8 > *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v18);
  v19 = (void *)(*(_QWORD *)a2 + 4 * (int)v5);
  LODWORD(v20) = v7;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v19, (uint64_t)v22, v16, v17, v18);
  kaldi::Vector<float>::Destroy((uint64_t)v22);
}

void sub_1DE41E6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::GetParams(_QWORD *a1, uint64_t a2)
{
  kaldi::nnet1::BidirectionalRecurrentComponent::GetParams((uint64_t)a1 + *(_QWORD *)(*a1 - 200), a2);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::SetParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  const char *v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  int v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 176) + *(_QWORD *)(**(_QWORD **)(a1 + 176) - 24);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4);
  v6 = *(_QWORD *)(a1 + 184) + *(_QWORD *)(**(_QWORD **)(a1 + 184) - 24);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
  v9 = *(_DWORD *)(a2 + 8);
  if (v9 != v7 + v5)
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)0xBD, "wei_src.Dim() == forward_params + backward_params", v8);
  v10 = *(char **)(a1 + 176);
  v11 = *(_QWORD *)(*(_QWORD *)v10 - 24);
  v17 = 0;
  v18 = 0;
  if (v5 > v9)
    goto LABEL_5;
  v12 = v7;
  v16 = *(_QWORD *)a2;
  LODWORD(v17) = v5;
  (*(void (**)(char *, uint64_t *))(*(_QWORD *)&v10[v11] + 192))(&v10[v11], &v16);
  v13 = *(char **)(a1 + 184);
  v14 = *(_QWORD *)(*(_QWORD *)v13 - 24);
  v17 = 0;
  v18 = 0;
  if (v9 > *(_DWORD *)(a2 + 8))
LABEL_5:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v8);
  v16 = *(_QWORD *)a2 + 4 * (int)v5;
  LODWORD(v17) = v12;
  return (*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v13[v14] + 192))(&v13[v14], &v16);
}

uint64_t `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::SetParams(_QWORD *a1, uint64_t a2)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::SetParams((uint64_t)a1 + *(_QWORD *)(*a1 - 208), a2);
}

float kaldi::nnet1::BidirectionalRecurrentComponent::SumParams(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  uint64_t v2;
  float v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 22) + *(_QWORD *)(**((_QWORD **)this + 22) - 24);
  v3 = (*(float (**)(uint64_t))(*(_QWORD *)v2 + 208))(v2);
  v4 = *((_QWORD *)this + 23) + *(_QWORD *)(**((_QWORD **)this + 23) - 24);
  return v3 + (*(float (**)(uint64_t))(*(_QWORD *)v4 + 208))(v4);
}

float `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::SumParams(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  char *v1;
  uint64_t v2;
  float v3;
  uint64_t v4;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 224);
  v2 = *((_QWORD *)v1 + 22) + *(_QWORD *)(**((_QWORD **)v1 + 22) - 24);
  v3 = (*(float (**)(uint64_t))(*(_QWORD *)v2 + 208))(v2);
  v4 = *((_QWORD *)v1 + 23) + *(_QWORD *)(**((_QWORD **)v1 + 23) - 24);
  return v3 + (*(float (**)(uint64_t))(*(_QWORD *)v4 + 208))(v4);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v8;
  std::vector<int> **v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  std::vector<int>::size_type v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  std::vector<int>::pointer begin;
  uint64x2_t v20;
  int64x2_t v21;
  int v22;
  int64x2_t v23;
  int32x2_t v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[3];

  v8 = (const void *)(*(uint64_t (**)(_QWORD *))(*a1 + 136))(a1);
  if (v8)
  else
    v9 = 0;
  v10 = a1[22] + *(_QWORD *)(*(_QWORD *)a1[22] - 24);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 176))(v10);
  v12 = a1[23] + *(_QWORD *)(*(_QWORD *)a1[23] - 24);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 176))(v12);
  v14 = *(int *)(a2 + 20);
  v15 = v13 + v11;
  kaldi::Vector<float>::Resize((void **)a4, v15, 1, v16, v17);
  memset(v38, 0, sizeof(v38));
  ((void (*)(std::vector<int> **))(*v9)[3].__end_cap_.__value_)(v9);
  std::vector<int>::resize(v9[27], v14);
  if ((int)v14 >= 1)
  {
    v18 = 0;
    begin = v9[27]->__begin_;
    v20 = (uint64x2_t)vdupq_n_s64((unint64_t)v14 - 1);
    v21 = (int64x2_t)xmmword_1DEC3D320;
    v22 = v14 - 1;
    v23 = vdupq_n_s64(2uLL);
    do
    {
      v24 = vmovn_s64((int64x2_t)vcgeq_u64(v20, (uint64x2_t)v21));
      if ((v24.i8[0] & 1) != 0)
        begin[v18] = v22;
      if ((v24.i8[4] & 1) != 0)
        begin[v18 + 1] = v14 + (v18 ^ 0xFFFFFFFE);
      v18 += 2;
      v21 = vaddq_s64(v21, v23);
      v22 -= 2;
    }
    while (((v14 + 1) & 0x1FFFFFFFELL) != v18);
  }
  kaldi::CuMatrix<float>::Resize((uint64_t)v9[30], v14, *(unsigned int *)(a2 + 16), 1u, 0);
  kaldi::CuMatrixBase<float>::CopyRows((uint64_t)v9[30], a2, v9[27], v25, v26);
  v27 = (char *)v9[22] + *((_QWORD *)v9[22]->__begin_ - 3);
  (*(void (**)(char *, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v27 + 224))(v27, a2, a3, v38);
  v36 = 0;
  v37 = 0;
  if (v11 > *(_DWORD *)(a4 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v30);
  v35 = *(void **)a4;
  LODWORD(v36) = v11;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v35, (uint64_t)v38, v28, v29, v30);
  v31 = (char *)v9[23] + *((_QWORD *)v9[23]->__begin_ - 3);
  (*(void (**)(char *, std::vector<int> *, uint64_t, _QWORD *))(*(_QWORD *)v31 + 224))(v31, v9[30], a3, v38);
  v36 = 0;
  v37 = 0;
  if (v15 > *(_DWORD *)(a4 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v34);
  v35 = (void *)(*(_QWORD *)a4 + 4 * (int)v11);
  LODWORD(v36) = v13;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v35, (uint64_t)v38, v32, v33, v34);
  ((void (*)(std::vector<int> **))(*v9)->__end_)(v9);
  kaldi::Vector<float>::Destroy((uint64_t)v38);
}

void sub_1DE41EBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::BidirectionalRecurrentComponent::GetGradient((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 240)), a2, a3, a4);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::PerturbParams(kaldi::nnet1::BidirectionalRecurrentComponent *this, float a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((_QWORD *)this + 22) + *(_QWORD *)(**((_QWORD **)this + 22) - 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 216))(v4);
  v5 = *((_QWORD *)this + 23) + *(_QWORD *)(**((_QWORD **)this + 23) - 24);
  return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v5 + 216))(v5, a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::PerturbParams(kaldi::nnet1::BidirectionalRecurrentComponent *this, float a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 232);
  v4 = *((_QWORD *)v3 + 22) + *(_QWORD *)(**((_QWORD **)v3 + 22) - 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 216))(v4);
  v5 = *((_QWORD *)v3 + 23) + *(_QWORD *)(**((_QWORD **)v3 + 23) - 24);
  return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v5 + 216))(v5, a2);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::Info(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  unsigned __int8 v17;
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  (*(void (**)(kaldi::nnet1::BidirectionalRecurrentComponent *, _QWORD *, _QWORD))(*(_QWORD *)this + 184))(this, v18, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n## Forward RNN: input-dim ", 27);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", output-dim ", 13);
  v3 = (_QWORD *)std::ostream::operator<<();
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)(*((_QWORD *)this + 22)
                                                          + *(_QWORD *)(**((_QWORD **)this + 22) - 24))
                                              + 64))(v16);
  if ((v17 & 0x80u) == 0)
    v5 = v16;
  else
    v5 = (void **)v16[0];
  if ((v17 & 0x80u) == 0)
    v6 = v17;
  else
    v6 = (uint64_t)v16[1];
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n## Backward RNN: input-dim ", 28);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", output-dim ", 13);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)(*((_QWORD *)this + 23)
                                                          + *(_QWORD *)(**((_QWORD **)this + 23) - 24))
                                              + 64))(__p);
  if ((v15 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v12 = v15;
  else
    v12 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  if ((char)v15 < 0)
    operator delete(__p[0]);
  if ((char)v17 < 0)
    operator delete(v16[0]);
  std::stringbuf::str();
  v18[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v20);
}

void sub_1DE41EEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::Info(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::Info((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 80)));
}

void kaldi::nnet1::BidirectionalRecurrentComponent::InfoGradient(kaldi::nnet1::BidirectionalRecurrentComponent *this@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  void *__p[2];
  unsigned __int8 v12;
  std::string v13;
  void *v14[2];
  int64_t v15;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)(*((_QWORD *)this + 22)
                                                                + *(_QWORD *)(**((_QWORD **)this + 22) - 24))
                                                    + 72))(&v13);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)(*((_QWORD *)this + 23)
                                                          + *(_QWORD *)(**((_QWORD **)this + 23) - 24))
                                              + 72))(__p);
  if ((v12 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v5 = v12;
  else
    v5 = (std::string::size_type)__p[1];
  v6 = std::string::append(&v13, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v15 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)v14 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v13, "\n");
  if (v15 >= 0)
    v8 = v14;
  else
    v8 = (void **)v14[0];
  if (v15 >= 0)
    v9 = HIBYTE(v15);
  else
    v9 = (std::string::size_type)v14[1];
  v10 = std::string::insert(&v13, 0, (const std::string::value_type *)v8, v9);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
}

void sub_1DE41F08C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::InfoGradient(kaldi::nnet1::BidirectionalRecurrentComponent *this@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::BidirectionalRecurrentComponent::InfoGradient((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)), a2);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::InfoPropagate(kaldi::nnet1::BidirectionalRecurrentComponent *this@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  void *__p[2];
  unsigned __int8 v12;
  std::string v13;
  void *v14[2];
  int64_t v15;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)(*((_QWORD *)this + 22)
                                                                + *(_QWORD *)(**((_QWORD **)this + 22) - 24))
                                                    + 80))(&v13);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)(*((_QWORD *)this + 23)
                                                          + *(_QWORD *)(**((_QWORD **)this + 23) - 24))
                                              + 80))(__p);
  if ((v12 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v5 = v12;
  else
    v5 = (std::string::size_type)__p[1];
  v6 = std::string::append(&v13, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v15 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)v14 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v13, "\n");
  if (v15 >= 0)
    v8 = v14;
  else
    v8 = (void **)v14[0];
  if (v15 >= 0)
    v9 = HIBYTE(v15);
  else
    v9 = (std::string::size_type)v14[1];
  v10 = std::string::insert(&v13, 0, (const std::string::value_type *)v8, v9);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
}

void sub_1DE41F230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::InfoPropagate(kaldi::nnet1::BidirectionalRecurrentComponent *this@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::BidirectionalRecurrentComponent::InfoPropagate((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 96)), a2);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::InfoBackPropagate(kaldi::nnet1::BidirectionalRecurrentComponent *this@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  void *__p[2];
  unsigned __int8 v12;
  std::string v13;
  void *v14[2];
  int64_t v15;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)(*((_QWORD *)this + 22)
                                                                + *(_QWORD *)(**((_QWORD **)this + 22) - 24))
                                                    + 88))(&v13);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)(*((_QWORD *)this + 23)
                                                          + *(_QWORD *)(**((_QWORD **)this + 23) - 24))
                                              + 88))(__p);
  if ((v12 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v5 = v12;
  else
    v5 = (std::string::size_type)__p[1];
  v6 = std::string::append(&v13, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v15 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)v14 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v13, "\n");
  if (v15 >= 0)
    v8 = v14;
  else
    v8 = (void **)v14[0];
  if (v15 >= 0)
    v9 = HIBYTE(v15);
  else
    v9 = (std::string::size_type)v14[1];
  v10 = std::string::insert(&v13, 0, (const std::string::value_type *)v8, v9);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
}

void sub_1DE41F3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::InfoBackPropagate(kaldi::nnet1::BidirectionalRecurrentComponent *this@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::BidirectionalRecurrentComponent::InfoBackPropagate((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 104)), a2);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::GetInternalMemory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64x2_t v9;
  int64x2_t v10;
  int v11;
  int64x2_t v12;
  int32x2_t v13;
  uint64_t v14;
  const char *v15;
  void *v17;
  __int128 v18;
  __int128 v19;
  void *v20;
  __int128 v21;
  __int128 v22;

  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v20, a2, 0, *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(*(_QWORD *)(a1 + 176) + *(_QWORD *)(**(_QWORD **)(a1 + 176) - 24) + 12));
  (*(void (**)(_QWORD, void **, uint64_t))(**(_QWORD **)(a1 + 176) + 112))(*(_QWORD *)(a1 + 176), &v20, a3);
  v6 = *(_DWORD *)(a2 + 20);
  std::vector<int>::resize((std::vector<int> *)(*(_QWORD *)(a1 + 216) + 24 * (int)a3), v6);
  if (v6 >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 24 * (int)a3);
    v9 = (uint64x2_t)vdupq_n_s64((unint64_t)v6 - 1);
    v10 = (int64x2_t)xmmword_1DEC3D320;
    v11 = v6 - 1;
    v12 = vdupq_n_s64(2uLL);
    do
    {
      v13 = vmovn_s64((int64x2_t)vcgeq_u64(v9, (uint64x2_t)v10));
      if ((v13.i8[0] & 1) != 0)
        *(_DWORD *)(v8 + 4 * v7) = v11;
      if ((v13.i8[4] & 1) != 0)
        *(_DWORD *)(v8 + 4 * v7 + 4) = v6 + (v7 ^ 0xFFFFFFFE);
      v7 += 2;
      v10 = vaddq_s64(v10, v12);
      v11 -= 2;
    }
    while (((v6 + 1) & 0x1FFFFFFFELL) != v7);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 184) + 112))(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 264) + 48 * (int)a3, a3);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, a2, 0, *(_DWORD *)(a2 + 20), (const char *)*(unsigned int *)(*(_QWORD *)(a1 + 176) + *(_QWORD *)(**(_QWORD **)(a1 + 176) - 24) + 12), *(_DWORD *)(*(_QWORD *)(a1 + 184) + *(_QWORD *)(**(_QWORD **)(a1 + 184) - 24) + 12));
  kaldi::CuMatrixBase<float>::CopyRows((uint64_t)&v17, *(_QWORD *)(a1 + 264) + 48 * (int)a3, (_QWORD *)(*(_QWORD *)(a1 + 216) + 24 * (int)a3), v14, v15);
  v17 = &unk_1EA926508;
  v18 = 0u;
  v19 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v17);
  v20 = &unk_1EA926508;
  v21 = 0u;
  v22 = 0u;
  return kaldi::CuMatrixBase<float>::~CuMatrixBase(&v20);
}

void sub_1DE41F608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, __int128 a10, __int128 a11, void *a12, __int128 a13, __int128 a14)
{
  a9 = &unk_1EA926508;
  a10 = 0u;
  a11 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a9);
  a12 = &unk_1EA926508;
  a13 = 0u;
  a14 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v8;
  std::vector<int>::size_type v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64x2_t v15;
  int64x2_t v16;
  int v17;
  int64x2_t v18;
  int32x2_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  void *v27;
  __int128 v28;
  __int128 v29;
  void *v30;
  __int128 v31;
  __int128 v32;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v9 = *(int *)(a2 + 20);
  if ((int)v9 % *(_DWORD *)(a1 + 96))
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)0x110, "batch_size % num_utts == 0", v8);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v30, "PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 274, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"Running forward propagation for batch size = ", 45);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", which contains ", 17);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" frames each from ", 18);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v30);
  }
  std::vector<int>::resize((std::vector<int> *)(*(_QWORD *)(a1 + 216) + 24 * (int)a4), v9);
  if ((int)v9 >= 1)
  {
    v13 = 0;
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 24 * (int)a4);
    v15 = (uint64x2_t)vdupq_n_s64((unint64_t)v9 - 1);
    v16 = (int64x2_t)xmmword_1DEC3D320;
    v17 = v9 - 1;
    v18 = vdupq_n_s64(2uLL);
    do
    {
      v19 = vmovn_s64((int64x2_t)vcgeq_u64(v15, (uint64x2_t)v16));
      if ((v19.i8[0] & 1) != 0)
        *(_DWORD *)(v14 + 4 * v13) = v17;
      if ((v19.i8[4] & 1) != 0)
        *(_DWORD *)(v14 + 4 * v13 + 4) = v9 + (v13 ^ 0xFFFFFFFE);
      v13 += 2;
      v16 = vaddq_s64(v16, v18);
      v17 -= 2;
    }
    while (((v9 + 1) & 0x1FFFFFFFELL) != v13);
  }
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 240) + 48 * (int)a4, v9, *(unsigned int *)(a2 + 16), 1u, 0);
  kaldi::CuMatrixBase<float>::CopyRows(*(_QWORD *)(a1 + 240) + 48 * (int)a4, a2, (_QWORD *)(*(_QWORD *)(a1 + 216) + 24 * (int)a4), v20, v21);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 264) + 48 * (int)a4, v9, *(unsigned int *)(*(_QWORD *)(a1 + 184) + *(_QWORD *)(**(_QWORD **)(a1 + 184) - 24) + 12), 1u, 0);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v30, a3, 0, *(_DWORD *)(a3 + 20), 0, *(_DWORD *)(*(_QWORD *)(a1 + 176) + *(_QWORD *)(**(_QWORD **)(a1 + 176) - 24) + 12));
  v22 = *(_QWORD *)(a1 + 176) + *(_QWORD *)(**(_QWORD **)(a1 + 176) - 24);
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)v22 + 112))(v22, a2, &v30, a4);
  v23 = *(_QWORD *)(a1 + 184) + *(_QWORD *)(**(_QWORD **)(a1 + 184) - 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 112))(v23, *(_QWORD *)(a1 + 240) + 48 * (int)a4, *(_QWORD *)(a1 + 264) + 48 * (int)a4, a4);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v27, a3, 0, *(_DWORD *)(a3 + 20), (const char *)*(unsigned int *)(*(_QWORD *)(a1 + 176) + *(_QWORD *)(**(_QWORD **)(a1 + 176) - 24) + 12), *(_DWORD *)(*(_QWORD *)(a1 + 184) + *(_QWORD *)(**(_QWORD **)(a1 + 184) - 24) + 12));
  kaldi::CuMatrixBase<float>::CopyRows((uint64_t)&v27, *(_QWORD *)(a1 + 264) + 48 * (int)a4, (_QWORD *)(*(_QWORD *)(a1 + 216) + 24 * (int)a4), v24, v25);
  v27 = &unk_1EA926508;
  v28 = 0u;
  v29 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v27);
  v30 = &unk_1EA926508;
  v31 = 0u;
  v32 = 0u;
  return kaldi::CuMatrixBase<float>::~CuMatrixBase(&v30);
}

void sub_1DE41F9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, __int128 a10, __int128 a11, void *a12, __int128 a13, __int128 a14)
{
  a9 = &unk_1EA926508;
  a10 = 0u;
  a11 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a9);
  a12 = &unk_1EA926508;
  a13 = 0u;
  a14 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a12);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::PropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 128), a2, a3, a4);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  void *v35;
  __int128 v36;
  __int128 v37;
  void *v38;
  __int128 v39;
  __int128 v40;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v12 = *(int *)(a2 + 20);
  v13 = *(_DWORD *)(a1 + 96);
  if ((int)v12 % v13)
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)0x12D, "batch_size % num_utts == 0", v11);
  v14 = (const char *)*(unsigned int *)(*(_QWORD *)(a1 + 176) + *(_QWORD *)(**(_QWORD **)(a1 + 176) - 24) + 12);
  v15 = *(unsigned int *)(*(_QWORD *)(a1 + 184) + *(_QWORD *)(**(_QWORD **)(a1 + 184) - 24) + 12);
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v38, "BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 303, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Running backward propagation for batch size = ", 46);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", which contains ", 17);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" frames each from ", 18);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v38);
  }
  if ((int)v12 / v13 < 2)
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)0x132, "frames_in_batch > 1 && \"Bidirectional recurrent component backprop will not work with batches of single frames.\"", v11);
  if (v12 != (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 24 * (int)a6 + 8)
                      - *(_QWORD *)(*(_QWORD *)(a1 + 216) + 24 * (int)a6)) >> 2)
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)0x133, "reversed_indices_[batch_index].size() == batch_size", v11);
  v33 = a5;
  v19 = *(_QWORD *)(a1 + 240) + 48 * (int)a6;
  if (*(_DWORD *)(v19 + 20) != (_DWORD)v12 || *(_DWORD *)(v19 + 16) != *(_DWORD *)(a2 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)0x135, "reversed_input_[batch_index].NumRows() == batch_size && reversed_input_[batch_index].NumCols() == in.NumCols()", v11);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 288) + 48 * (int)a6, v12, *(unsigned int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 312) + 48 * (int)a6, v12, *(unsigned int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8), 0, 0);
  v20 = *(char **)(a1 + 176);
  v21 = *(_QWORD *)(*(_QWORD *)v20 - 24);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v38, a3, 0, *(_DWORD *)(a3 + 20), 0, (int)v14);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v35, a4, 0, *(_DWORD *)(a4 + 20), 0, (int)v14);
  (*(void (**)(char *, uint64_t, void **, void **, uint64_t, uint64_t))(*(_QWORD *)&v20[v21] + 128))(&v20[v21], a2, &v38, &v35, *(_QWORD *)(a1 + 288) + 48 * (int)a6, a6);
  v35 = &unk_1EA926508;
  v36 = 0u;
  v37 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v35);
  v38 = &unk_1EA926508;
  v39 = 0u;
  v40 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v38);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 336) + 48 * (int)a6, v12, v15, 1u, 0);
  v22 = *(_QWORD *)(a1 + 336) + 48 * (int)a6;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v38, a4, 0, *(_DWORD *)(a4 + 20), v14, v15);
  kaldi::CuMatrixBase<float>::CopyRows(v22, (uint64_t)&v38, (_QWORD *)(*(_QWORD *)(a1 + 216) + 24 * (int)a6), v23, v24);
  v38 = &unk_1EA926508;
  v39 = 0u;
  v40 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v38);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 264) + 48 * (int)a6, v12, v15, 1u, 0);
  v25 = *(_QWORD *)(a1 + 264) + 48 * (int)a6;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v38, a3, 0, *(_DWORD *)(a3 + 20), v14, v15);
  kaldi::CuMatrixBase<float>::CopyRows(v25, (uint64_t)&v38, (_QWORD *)(*(_QWORD *)(a1 + 216) + 24 * (int)a6), v26, v27);
  v38 = &unk_1EA926508;
  v39 = 0u;
  v40 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v38);
  v28 = *(_QWORD *)(a1 + 184) + *(_QWORD *)(**(_QWORD **)(a1 + 184) - 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28 + 128))(v28, *(_QWORD *)(a1 + 240) + 48 * (int)a6, *(_QWORD *)(a1 + 264) + 48 * (int)a6, *(_QWORD *)(a1 + 336) + 48 * (int)a6, *(_QWORD *)(a1 + 312) + 48 * (int)a6, a6);
  if (v33)
  {
    kaldi::CuMatrixBase<float>::CopyRows(v33, *(_QWORD *)(a1 + 312) + 48 * (int)a6, (_QWORD *)(*(_QWORD *)(a1 + 216) + 24 * (int)a6), v29, v30);
    kaldi::CuMatrixBase<float>::AddMat(v33, *(_QWORD *)(a1 + 288) + 48 * (int)a6, 111, v31, v32, 1.0, 1.0);
  }
}

void sub_1DE41FEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, __int128 a18, __int128 a19)
{
  a17 = &unk_1EA926508;
  a18 = 0u;
  a19 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a17);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  kaldi::nnet1::BidirectionalRecurrentComponent::BackpropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 144), a2, a3, a4, a5, a6);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::AccumGradients(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = a1[22] + *(_QWORD *)(*(_QWORD *)a1[22] - 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 232))(v9);
  v10 = a1[23] + *(_QWORD *)(*(_QWORD *)a1[23] - 24);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 232))(v10, a1[30] + 48 * (int)a5, a3, a4, a5);
}

uint64_t `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::AccumGradients(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v8 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 248));
  v9 = v8[22] + *(_QWORD *)(*(_QWORD *)v8[22] - 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 232))(v9);
  v10 = v8[23] + *(_QWORD *)(*(_QWORD *)v8[23] - 24);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 232))(v10, v8[30] + 48 * (int)a5, a3, a4, a5);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::UpdateWeights(kaldi::nnet1::BidirectionalRecurrentComponent *this, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *((_QWORD *)this + 22) + *(_QWORD *)(**((_QWORD **)this + 22) - 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 256))(v6);
  v7 = *((_QWORD *)this + 23) + *(_QWORD *)(**((_QWORD **)this + 23) - 24);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v7 + 256))(v7, a2, a3);
}

uint64_t `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::UpdateWeights(kaldi::nnet1::BidirectionalRecurrentComponent *this, void *a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 272);
  v6 = *((_QWORD *)v5 + 22) + *(_QWORD *)(**((_QWORD **)v5 + 22) - 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 256))(v6);
  v7 = *((_QWORD *)v5 + 23) + *(_QWORD *)(**((_QWORD **)v5 + 23) - 24);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v7 + 256))(v7, a2, a3);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::SetGradientNormalization(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(a1 + 176) + *(_QWORD *)(**(_QWORD **)(a1 + 176) - 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 240))(v6);
  v7 = *(_QWORD *)(a1 + 184) + *(_QWORD *)(**(_QWORD **)(a1 + 184) - 24);
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)v7 + 240))(v7, a2, a3);
}

uint64_t `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::SetGradientNormalization(_QWORD *a1, uint64_t a2, float a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = (char *)a1 + *(_QWORD *)(*a1 - 256);
  v6 = *((_QWORD *)v5 + 22) + *(_QWORD *)(**((_QWORD **)v5 + 22) - 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 240))(v6);
  v7 = *((_QWORD *)v5 + 23) + *(_QWORD *)(**((_QWORD **)v5 + 23) - 24);
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)v7 + 240))(v7, a2, a3);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::NormalizeGradients(kaldi::nnet1::BidirectionalRecurrentComponent *this, float a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *((_QWORD *)this + 22) + *(_QWORD *)(**((_QWORD **)this + 22) - 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 248))(v6);
  v7 = *((_QWORD *)this + 23) + *(_QWORD *)(**((_QWORD **)this + 23) - 24);
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)v7 + 248))(v7, a3, a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::NormalizeGradients(kaldi::nnet1::BidirectionalRecurrentComponent *this, float a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 264);
  v6 = *((_QWORD *)v5 + 22) + *(_QWORD *)(**((_QWORD **)v5 + 22) - 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 248))(v6);
  v7 = *((_QWORD *)v5 + 23) + *(_QWORD *)(**((_QWORD **)v5 + 23) - 24);
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)v7 + 248))(v7, a3, a2);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::Check(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD v14[34];

  v2 = *((_QWORD *)this + 22) + *(_QWORD *)(**((_QWORD **)this + 22) - 24);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2) == 280
    || (v3 = *((_QWORD *)this + 23) + *(_QWORD *)(**((_QWORD **)this + 23) - 24),
        (*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3) == 280))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 368);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "no recursive recurrent definition");
    goto LABEL_8;
  }
  v4 = *((_QWORD *)this + 22);
  v5 = v4 + *(_QWORD *)(*(_QWORD *)v4 - 24);
  v6 = *(_DWORD *)(v5 + 8);
  v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  if (v6 != *((_DWORD *)v7 + 2))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 371);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"the forward RNN's input dimension does not match the component's input dimension ", 81);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" vs ", 4);
    std::ostream::operator<<();
    goto LABEL_8;
  }
  v8 = *((_QWORD *)this + 23) + *(_QWORD *)(**((_QWORD **)this + 23) - 24);
  if (*(_DWORD *)(v8 + 8) != v6)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 375);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"the backward RNN's input dimension does not match the component's input dimension ", 82);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" vs ", 4);
    std::ostream::operator<<();
    goto LABEL_8;
  }
  if (*(_DWORD *)(v8 + 12) + *(_DWORD *)(v5 + 12) != *((_DWORD *)v7 + 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 379);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"the component has output dimension ", 35);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" , doesn't equal the sum of individual RNN ", 43);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" and ", 5);
    std::ostream::operator<<();
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 128))();
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 23) + 128))(*((_QWORD *)this + 23));
}

void sub_1DE420544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::GetHistoryState(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v11;
  int v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  void *v18;
  __int128 v19;
  __int128 v20;

  if (a3 < 0 || *(_DWORD *)(a1 + 80) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)0x187, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8) + 48 * a3;
  v8 = *(unsigned int *)(v7 + 20);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8) + 48 * a3;
  if (*(_DWORD *)(v9 + 20) != (_DWORD)v8)
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)0x188, "backward_rnn_->history_state_[batch_index].NumRows() == history_num_seqs", a5);
  v11 = (const char *)*(unsigned int *)(v7 + 16);
  v12 = *(_DWORD *)(v9 + 16);
  kaldi::CuMatrix<float>::Resize(a2, v8, (v12 + (_DWORD)v11), 1u, 0);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v18, a2, 0, *(_DWORD *)(a2 + 20), 0, (int)v11);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v18, *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8) + 48 * a3, 111, v13, v14);
  v18 = &unk_1EA926508;
  v19 = 0u;
  v20 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v18);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v18, a2, 0, *(_DWORD *)(a2 + 20), v11, v12);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v18, *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8) + 48 * a3, 111, v15, v16);
  v18 = &unk_1EA926508;
  v19 = 0u;
  v20 = 0u;
  return kaldi::CuMatrixBase<float>::~CuMatrixBase(&v18);
}

void sub_1DE4206D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, __int128 a12)
{
  a11 = 0u;
  a12 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a10);
  _Unwind_Resume(a1);
}

_DWORD *kaldi::nnet1::BidirectionalRecurrentComponent::GetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, const char *a5)
{
  int v5;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if ((a4 & 0x80000000) != 0 || (v5 = a4, *(_DWORD *)(a1 + 80) <= (int)a4))
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)0x195, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  if ((a3 & 0x80000000) != 0
    || (v8 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8) + 48 * (int)a4, v9 = *(_DWORD *)(v8 + 20), v9 <= (int)a3))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)0x196, "sequence_idx >= 0 && sequence_idx < history_num_seqs", a5);
  }
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8) + 48 * (int)a4;
  if (*(_DWORD *)(v10 + 20) != v9)
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)0x197, "backward_rnn_->history_state_[batch_index].NumRows() == history_num_seqs", a5);
  v12 = *(_DWORD *)(v8 + 16);
  v13 = *(_DWORD *)(v10 + 16);
  kaldi::CuVector<float>::Resize(a2, v13 + v12, 1u, a4, a5);
  v34 = 0;
  v32 = &unk_1EA926538;
  if (v12 > *(_DWORD *)(a2 + 16))
    goto LABEL_12;
  v33 = *(_QWORD *)(a2 + 8);
  LODWORD(v34) = v12;
  v35 = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8) + 48 * v5;
  if (*(_DWORD *)(v17 + 20) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v16);
  v18 = *(_QWORD *)(v17 + 8) + 4 * (int)(*(_DWORD *)(v17 + 24) * a3);
  v19 = *(_DWORD *)(v17 + 16);
  v20 = *(_QWORD *)(v17 + 32);
  v28 = &unk_1EA926538;
  v29 = v18;
  v31 = v20;
  v30 = v19;
  kaldi::CuVectorBase<float>::CopyFromVec(&v32, (uint64_t)&v28, v14, v15, v16);
  v34 = 0;
  v32 = &unk_1EA926538;
  if (v13 + v12 > *(_DWORD *)(a2 + 16))
LABEL_12:
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v16);
  v33 = *(_QWORD *)(a2 + 8) + 4 * (int)v12;
  LODWORD(v34) = v13;
  v35 = *(_QWORD *)(a2 + 24);
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8) + 48 * v5;
  if (*(_DWORD *)(v23 + 20) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v16);
  v24 = *(_QWORD *)(v23 + 8) + 4 * (int)(*(_DWORD *)(v23 + 24) * a3);
  v25 = *(_DWORD *)(v23 + 16);
  v26 = *(_QWORD *)(v23 + 32);
  v28 = &unk_1EA926538;
  v29 = v24;
  v31 = v26;
  v30 = v25;
  return kaldi::CuVectorBase<float>::CopyFromVec(&v32, (uint64_t)&v28, v21, v22, v16);
}

float kaldi::nnet1::BidirectionalRecurrentComponent::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  float result;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  _QWORD v34[4];
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v8 = *(_QWORD *)(a1 + 176);
  v10 = *(_QWORD *)(v8 + 104);
  v11 = *(_QWORD *)(v8 + 112);
  v9 = (uint64_t *)(v8 + 104);
  if (v10 == v11)
  {
    std::vector<kaldi::CuVector<float>>::resize(v9, *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(*(_QWORD *)(a1 + 176) + 128), *(int *)(a1 + 80));
  }
  v12 = *(_QWORD *)(a1 + 184);
  v14 = *(_QWORD *)(v12 + 104);
  v15 = *(_QWORD *)(v12 + 112);
  v13 = (uint64_t *)(v12 + 104);
  if (v14 == v15)
  {
    std::vector<kaldi::CuVector<float>>::resize(v13, *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(*(_QWORD *)(a1 + 184) + 128), *(int *)(a1 + 80));
  }
  v16 = *(_DWORD *)(a2 + 16);
  if (v16)
  {
    if (v16 >= 0)
      v17 = *(_DWORD *)(a2 + 16);
    else
      v17 = v16 + 1;
    if ((v17 & 0xFFFFFFFE) != v16)
      kaldi::KaldiAssertFailure_((kaldi *)"SetInternalBoundary", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)0x1B0, "actual_boundary_dim * 2 == boundary.Dim()", a5);
    v18 = (v17 >> 1);
    v37 = 0;
    v35 = &unk_1EA926538;
    if (v18 > v16)
      kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", a5);
    v36 = *(_QWORD *)(a2 + 8);
    LODWORD(v37) = v17 >> 1;
    v38 = *(_QWORD *)(a2 + 24);
    v34[0] = &unk_1EA926538;
    v34[1] = v36 + 4 * (int)v18;
    v34[3] = v38;
    v34[2] = v18;
    v21 = kaldi::CuVectorBase<float>::Sum((uint64_t)&v35);
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 104) + 32 * a3;
    if (v21 <= 0.0)
    {
      kaldi::CuVector<float>::Resize(v22, 0, 1u, v19, v20);
    }
    else
    {
      kaldi::CuVector<float>::Resize(v22, v18, 1u, v19, v20);
      kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 104) + 32 * a3), (uint64_t)&v35, v23, v24, v25);
    }
    kaldi::CuVector<float>::Resize(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 104) + 32 * a3, v18, 1u, v26, v27);
    return kaldi::CuVectorBase<float>::ReverseCopyFromVec(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 104) + 32 * a3, (uint64_t)v34, v31, v32, v33);
  }
  else
  {
    kaldi::CuVector<float>::Resize(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 104) + 32 * a3, 0, 1u, a4, a5);
    kaldi::CuVector<float>::Resize(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 104) + 32 * a3, 0, 1u, v28, v29);
  }
  return result;
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::SetTrainOptions(kaldi::nnet1::BidirectionalRecurrentComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(this, a2);
  (*(void (**)(_QWORD, const kaldi::nnet1::NnetTrainOptions *))(**((_QWORD **)this + 22) + 104))(*((_QWORD *)this + 22), a2);
  return (*(uint64_t (**)(_QWORD, const kaldi::nnet1::NnetTrainOptions *))(**((_QWORD **)this + 23) + 104))(*((_QWORD *)this + 23), a2);
}

void kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *this, const kaldi::nnet1::NnetTrainOptions *lpsrc)
{
  char *v4;
  __int128 v5;
  char *v6;
  __int128 v7;
  _QWORD v8[34];

  if (v4)
  {
    v5 = *(_OWORD *)(v4 + 8);
    *(_OWORD *)((char *)this + 71) = *(_OWORD *)(v4 + 23);
    *(_OWORD *)((char *)this + 56) = v5;
    *((_QWORD *)this + 12) = *((_QWORD *)v4 + 6);
    v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v7 = *(_OWORD *)((char *)lpsrc + 8);
    *(_OWORD *)(v6 + 71) = *(_OWORD *)((char *)lpsrc + 23);
    *(_OWORD *)(v6 + 56) = v7;
  }
  else if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v8, "SetTrainOptions", "../engine/common/libquasar/libkaldi/src/nnet/nnet-component.h", 572);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"need RecurrentNnetTrainOptions in recurrent style component, ignoring SetTrainOptions", 85);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v8);
  }
}

void sub_1DE420CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::SetTrainOptions(kaldi::nnet1::BidirectionalRecurrentComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::RecurrentBaseComponent *v3;

  v3 = (kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 280));
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(v3, a2);
  (*(void (**)(_QWORD *, const kaldi::nnet1::NnetTrainOptions *))(**((_QWORD **)v3 + 22) + 104))(*((_QWORD **)v3 + 22), a2);
  return (*(uint64_t (**)(_QWORD *, const kaldi::nnet1::NnetTrainOptions *))(**((_QWORD **)v3 + 23) + 104))(*((_QWORD **)v3 + 23), a2);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::SetHistoryState()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 457);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "This function is probably not meaningful for bidirectional RNNs.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 463);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "This function is probably not meaningful for bidirectional RNNs.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::ResetHistoryState()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 469);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "This function is probably not meaningful for bidirectional RNNs.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::HistoryStateSize(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  int v2;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 22) + 16))(*((_QWORD *)this + 22));
  return (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 23) + 16))(*((_QWORD *)this + 23)) + v2;
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::ResetHistoryState(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 22) + 32))(*((_QWORD *)this + 22));
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 23) + 32))(*((_QWORD *)this + 23));
}

uint64_t *kaldi::nnet1::BidirectionalRecurrentComponent::EnsureBuffers(uint64_t *this)
{
  uint64_t *v1;
  unint64_t v2;

  if (!*((_BYTE *)this + 360))
  {
    v1 = this;
    (*(void (**)(uint64_t *))(*this + 128))(this);
    v2 = *((int *)v1 + 20);
    std::vector<std::vector<int>>::resize(v1 + 27, v2);
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 30, v2);
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 33, v2);
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 36, v2);
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 39, v2);
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 42, v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v1[22] + 88))(v1[22]);
    this = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1[23] + 88))(v1[23]);
    *((_BYTE *)v1 + 360) = 1;
  }
  return this;
}

void std::vector<std::vector<int>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<int>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t kaldi::nnet1::RecurrentBaseComponent::GetHistoryOptions(kaldi::nnet1::RecurrentBaseComponent *this)
{
  return (uint64_t)this + 88;
}

void kaldi::nnet1::RecurrentBaseComponent::SetHistoryOptions(kaldi::nnet1::RecurrentBaseComponent *this, const kaldi::nnet1::HistoryOptions *a2)
{
  const void *v4;
  char *v5;
  __int128 v6;
  int v7;
  void (**v8)(kaldi::nnet1::RecurrentNnetTrainOptions *__hidden);
  _BYTE v9[31];
  void *v10;
  int v11;
  int v12;

  v4 = (const void *)(*(uint64_t (**)(kaldi::nnet1::RecurrentBaseComponent *))(*(_QWORD *)this + 120))(this);
  if (v5)
  {
    v6 = *(_OWORD *)(v5 + 8);
    *(_OWORD *)&v9[15] = *(_OWORD *)(v5 + 23);
    *(_OWORD *)v9 = v6;
    v8 = &off_1EA92B868;
    v10 = &unk_1EA92B888;
    v7 = *((_DWORD *)v5 + 13);
    v11 = *((_DWORD *)a2 + 2);
    v12 = v7;
    (*(void (**)(kaldi::nnet1::RecurrentBaseComponent *, void (***)(kaldi::nnet1::RecurrentNnetTrainOptions *__hidden)))(*(_QWORD *)this + 104))(this, &v8);
    kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions((kaldi::nnet1::RecurrentNnetTrainOptions *)&v8);
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8, "SetHistoryOptions", "../engine/common/libquasar/libkaldi/src/nnet/nnet-component.h", 591);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Inconsistent return type: RecurrentBaseComponent::GetTrainOptions() can not be cast to RecurrentNnetTrainOptions", 112);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
  }
}

void sub_1DE4210C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Component::GetUnitOutputFnc(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  kaldi::nnet1::Component *v4;
  std::string *v5;
  std::string::size_type size;
  _QWORD *v7;
  std::string v8;
  _QWORD v9[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "GetUnitOutputFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-component.h", 359);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GetUnitOutputFnc", 16);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" is not implemented for ", 24);
  v4 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  kaldi::nnet1::Component::TypeToMarker(v4, &v8);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v8;
  else
    v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  else
    size = v8.__r_.__value_.__l.__size_;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, size);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " component.");
  std::string::~string(&v8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
}

{
  _QWORD *v2;
  _QWORD *v3;
  kaldi::nnet1::Component *v4;
  std::string *v5;
  std::string::size_type size;
  _QWORD *v7;
  std::string v8;
  _QWORD v9[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "GetUnitOutputFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-component.h", 363);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GetUnitOutputFnc", 16);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" is not implemented for ", 24);
  v4 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  kaldi::nnet1::Component::TypeToMarker(v4, &v8);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v8;
  else
    v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  else
    size = v8.__r_.__value_.__l.__size_;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, size);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " component.");
  std::string::~string(&v8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
}

void kaldi::nnet1::UpdatableComponent::GetNormalizedLearningRate(kaldi::nnet1::UpdatableComponent *this)
{
  _QWORD *v2;
  _QWORD *v3;
  kaldi::nnet1::Component *v4;
  std::string *v5;
  std::string::size_type size;
  _QWORD *v7;
  std::string v8;
  _QWORD v9[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "GetNormalizedLearningRate", "../engine/common/libquasar/libkaldi/src/nnet/nnet-component.h", 417);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GetNormalizedLearningRate", 25);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" is not implemented for ", 24);
  v4 = (kaldi::nnet1::Component *)(*(uint64_t (**)(kaldi::nnet1::UpdatableComponent *))(*(_QWORD *)this + 24))(this);
  kaldi::nnet1::Component::TypeToMarker(v4, &v8);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v8;
  else
    v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  else
    size = v8.__r_.__value_.__l.__size_;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, size);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " component.");
  std::string::~string(&v8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
}

void kaldi::nnet1::UpdatableComponent::PerturbParams(kaldi::nnet1::UpdatableComponent *this, float a2)
{
  _QWORD *v3;
  _QWORD *v4;
  kaldi::nnet1::Component *v5;
  std::string *v6;
  std::string::size_type size;
  _QWORD *v8;
  std::string v9;
  _QWORD v10[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "PerturbParams", "../engine/common/libquasar/libkaldi/src/nnet/nnet-component.h", 437);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"PerturbParams", 13);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" is not implemented for ", 24);
  v5 = (kaldi::nnet1::Component *)(*(uint64_t (**)(kaldi::nnet1::UpdatableComponent *))(*(_QWORD *)this + 24))(this);
  kaldi::nnet1::Component::TypeToMarker(v5, &v9);
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v9;
  else
    v6 = (std::string *)v9.__r_.__value_.__r.__words[0];
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  else
    size = v9.__r_.__value_.__l.__size_;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, size);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, " component.");
  std::string::~string(&v9);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
}

void kaldi::nnet1::UpdatableComponent::GetGradient(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  kaldi::nnet1::Component *v4;
  std::string *v5;
  std::string::size_type size;
  _QWORD *v7;
  std::string v8;
  _QWORD v9[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "GetGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-component.h", 448);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GetGradient", 11);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" is not implemented for ", 24);
  v4 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  kaldi::nnet1::Component::TypeToMarker(v4, &v8);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v8;
  else
    v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  else
    size = v8.__r_.__value_.__l.__size_;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, size);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " component.");
  std::string::~string(&v8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
}

void `virtual thunk to'kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions((kaldi::nnet1::RecurrentBaseComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 280)), a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::RecurrentBaseComponent::GetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 288) + 48;
}

void kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 368));
}

{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 368));
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::Copy(const std::string *this)
{
  kaldi::nnet1::BidirectionalRecurrentComponent *v2;

  v2 = (kaldi::nnet1::BidirectionalRecurrentComponent *)operator new();
  kaldi::nnet1::BidirectionalRecurrentComponent::BidirectionalRecurrentComponent(v2, this);
  return (uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_1DE421624(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B3C40DD337325);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::GetType(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  return 280;
}

void kaldi::nnet1::BidirectionalRecurrentComponent::PropagateFnc()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "PropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-birnn.h", 78);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Running on single input doesn't make sense for bidirectional RNNs, since history state is not saved.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void `non-virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + 208));
}

{
  kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this - 160));
}

{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + 200));
}

{
  kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this - 168));
}

void `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 368));
}

{
  kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::Copy(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::Copy((const std::string *)((char *)this
                                                                                 + *(_QWORD *)(*(_QWORD *)this - 32)));
}

void `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::PropagateFnc()
{
  kaldi::nnet1::BidirectionalRecurrentComponent::PropagateFnc();
}

void kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent(kaldi::nnet1::BidirectionalRecurrentComponent *this, uint64_t *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[3];
  *((_QWORD *)this + 20) = &off_1EA92C418;
  v5 = (char *)this + 160;
  *((_QWORD *)this + 21) = &unk_1EA92C440;
  v6 = (char *)this + 168;
  v7 = *((_QWORD *)this + 22);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 23);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (void **)((char *)this + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)((char *)this + 312);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)((char *)this + 288);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)((char *)this + 264);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)((char *)this + 240);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)((char *)this + 216);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v6);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v5);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(this, a2 + 1);
}

void std::vector<std::vector<int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1DE4219D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25[35];

  *(_QWORD *)a1 = off_1EA92D6D8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1EA929750;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1EA927DC0;
  *(_QWORD *)(a1 + 96) = &unk_1EA927DE8;
  *(_QWORD *)a1 = &unk_1EA927C88;
  *(_QWORD *)(a1 + 104) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 112), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 136), *(_QWORD *)(a2 + 136), *(_QWORD *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 4));
  v6 = *(_DWORD *)(a2 + 160);
  v7 = *(_QWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 160) = v6;
  *(_QWORD *)(a1 + 164) = v7;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 176), *(const void **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 2);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 200), *(const void **)(a2 + 200), *(_QWORD *)(a2 + 208), (uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 2);
  v11 = *(_BYTE *)(a2 + 224);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_BYTE *)(a1 + 224) = v11;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "LinearTransform", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 79);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
  v12 = *(_QWORD *)(a2 + 104);
  if (v12)
  {
    kaldi::NewCuSubOrMat<float>(v12, 0, v25);
    v13 = v25[0];
    v25[0] = 0;
    v14 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v13;
    if (v14)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
      v15 = v25[0];
      v25[0] = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
    }
  }
  v17 = *(_QWORD *)(a1 + 112);
  v16 = *(_QWORD *)(a1 + 120);
  if (v16 != v17)
  {
    v18 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a2 + 112) + 8 * v18))
      {
        v19 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a2, v18, v8, v9, v10);
        kaldi::NewCuSubOrMat<float>(v19, *(unsigned __int8 *)(a1 + 16), v25);
        v20 = *(_QWORD *)(a1 + 112);
        v21 = v25[0];
        v25[0] = 0;
        v22 = *(_QWORD *)(v20 + 8 * v18);
        *(_QWORD *)(v20 + 8 * v18) = v21;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
        v23 = v25[0];
        v25[0] = 0;
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
        v17 = *(_QWORD *)(a1 + 112);
        v16 = *(_QWORD *)(a1 + 120);
      }
      ++v18;
    }
    while (v18 < (v16 - v17) >> 3);
  }
  if (*(_QWORD *)(a2 + 240) != *(_QWORD *)(a2 + 232))
    kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 232));
  return a1;
}

void sub_1DE421CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  kaldi::nnet1::UpdatableComponent *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  void **v15;
  void *v17;
  void *v18;
  uint64_t v19;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v15);
  v17 = *v14;
  if (*v14)
  {
    *((_QWORD *)v10 + 26) = v17;
    operator delete(v17);
  }
  v18 = *v13;
  if (*v13)
  {
    *((_QWORD *)v10 + 23) = v18;
    operator delete(v18);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v19 = *((_QWORD *)v10 + 13);
  *((_QWORD *)v10 + 13) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v12);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 112);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 120) - v5) >> 3))
    kaldi::KaldiAssertFailure_((kaldi *)"LinearityCorr", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x1A1, "linearity_corr_.size() > batch_idx", a5);
  result = *(_QWORD *)(v5 + 8 * a2);
  if (!result)
    kaldi::KaldiAssertFailure_((kaldi *)"LinearityCorr", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x1A2, "linearity_corr_[batch_idx]", a5);
  return result;
}

{
  uint64_t v5;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 112);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 120) - v5) >> 3))
    kaldi::KaldiAssertFailure_((kaldi *)"LinearityCorr", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x1A6, "linearity_corr_.size() > batch_idx", a5);
  result = *(_QWORD *)(v5 + 8 * a2);
  if (!result)
    kaldi::KaldiAssertFailure_((kaldi *)"LinearityCorr", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x1A7, "linearity_corr_[batch_idx]", a5);
  return result;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;

  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  v7 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, ((*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 3) - 1, v4, v5, v6);
  return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void **v7;

  *(_QWORD *)(a1 + 88) = &unk_1EA927DC0;
  v2 = a1 + 88;
  *(_QWORD *)a1 = &unk_1EA927C88;
  *(_QWORD *)(a1 + 96) = &unk_1EA927DE8;
  v3 = a1 + 96;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 232));
  v4 = *(void **)(a1 + 200);
  if (v4)
  {
    *(_QWORD *)(a1 + 208) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 176);
  if (v5)
  {
    *(_QWORD *)(a1 + 184) = v5;
    operator delete(v5);
  }
  v7 = (void **)(a1 + 136);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)(a1 + 112);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v6 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(a1);
  JUMPOUT(0x1DF0ED014);
}

void `non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(uint64_t a1)
{
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(a1 - 88);
}

{
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(a1 - 96);
}

{
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(a1 - 88);
  JUMPOUT(0x1DF0ED014);
}

{
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(a1 - 96);
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform<kaldi::CuMatrixBase<float>>(v2, a1);
  return v2;
}

void sub_1DE421FAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit(uint64_t a1)
{
  return kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit(a1 - 88);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform<kaldi::CuMatrixBase<float>>(v2, a1);
  return v2;
}

void sub_1DE42201C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit(uint64_t a1)
{
  return kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit(a1 - 96);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearTransform(v2, a1);
  return v2;
}

void sub_1DE42208C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  void *v11;
  BOOL v13;
  float *v14;
  BOOL v18;
  BOOL v20;
  std::string *v25;
  BOOL v26;
  BOOL v28;
  _QWORD *v29;
  void **v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int inited;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  int v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  float v43;
  float v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  void **v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  _BYTE v62[16];
  uint64_t v63;
  void *__p;
  void *v65;
  void **v66[34];
  void *v67[3];
  int v68;
  std::string v69;
  std::string v70;
  int v71;

  v71 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v70);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 160), &v69);
  v68 = -1;
  memset(v67, 0, sizeof(v67));
  v57 = v67;
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_106;
    kaldi::ReadToken(a2, 0, (uint64_t)v67, v6, v7);
    if ((SHIBYTE(v67[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v67[2]))
      {
        case 9:
          goto LABEL_81;
        case 0xC:
          goto LABEL_76;
        case 0xD:
          if (v67[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v67 + 5) != (void *)0x3E7665646474536DLL)
            goto LABEL_92;
          goto LABEL_51;
        case 0xF:
          v26 = v67[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v67 + 7) == (void *)0x3E66656F43657461;
          v14 = (float *)(a1 + 168);
          if (v26)
            goto LABEL_86;
          if (HIBYTE(v67[2]) == 9)
            goto LABEL_81;
          if (HIBYTE(v67[2]) != 12)
            goto LABEL_92;
LABEL_76:
          if (v67[0] != (void *)0x536D6F646E61523CLL || LODWORD(v67[1]) != 1046766949)
            goto LABEL_80;
          goto LABEL_88;
        case 0x12:
          goto LABEL_61;
        case 0x13:
          if (v67[0] == (void *)0x61725474696E493CLL
            && v67[1] == (void *)0x79546D726F66736ELL
            && *(void **)((char *)&v67[1] + 3) == (void *)0x3E657079546D726FLL)
          {
            goto LABEL_89;
          }
          if (HIBYTE(v67[2]) == 9)
            goto LABEL_81;
          if (HIBYTE(v67[2]) != 18)
            goto LABEL_91;
LABEL_61:
          if (v67[0] == (void *)0x6E6569646172473CLL
            && v67[1] == (void *)0x7079546D726F4E74
            && LOWORD(v67[2]) == 15973)
          {
            goto LABEL_69;
          }
LABEL_80:
          if (HIBYTE(v67[2]) != 9)
          {
LABEL_91:
            if (HIBYTE(v67[2]) == 12)
              goto LABEL_101;
            goto LABEL_92;
          }
LABEL_81:
          v28 = v67[0] == (void *)0x6461724778614D3CLL && LOBYTE(v67[1]) == 62;
          v14 = (float *)(a1 + 164);
          if (!v28)
            goto LABEL_92;
          break;
        default:
          goto LABEL_92;
      }
      goto LABEL_86;
    }
    v11 = v67[1];
    if (v67[1] == (void *)13
      && *(_QWORD *)v67[0] == 0x74536D617261503CLL
      && *(_QWORD *)((char *)v67[0] + 5) == 0x3E7665646474536DLL)
    {
LABEL_51:
      v14 = (float *)&v71;
      goto LABEL_86;
    }
    if (v67[1] == (void *)15)
    {
      v13 = *(_QWORD *)v67[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v67[0] + 7) == 0x3E66656F43657461;
      v14 = (float *)(a1 + 168);
      if (v13)
        goto LABEL_86;
      v11 = v67[1];
    }
    if (v11 == (void *)12)
    {
      if (*(_QWORD *)v67[0] == 0x536D6F646E61523CLL && *((_DWORD *)v67[0] + 2) == 1046766949)
      {
LABEL_88:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v68, v8, v9);
        goto LABEL_87;
      }
      v11 = v67[1];
    }
    if (v11 == (void *)19)
    {
      if (*(_QWORD *)v67[0] == 0x61725474696E493CLL
        && *((_QWORD *)v67[0] + 1) == 0x79546D726F66736ELL
        && *(_QWORD *)((char *)v67[0] + 11) == 0x3E657079546D726FLL)
      {
LABEL_89:
        v25 = &v70;
        goto LABEL_90;
      }
      v11 = v67[1];
    }
    if (v11 != (void *)18)
      goto LABEL_45;
    v18 = *(_QWORD *)v67[0] == 0x6E6569646172473CLL && *((_QWORD *)v67[0] + 1) == 0x7079546D726F4E74;
    if (!v18 || *((_WORD *)v67[0] + 8) != 15973)
      break;
LABEL_69:
    v25 = &v69;
LABEL_90:
    kaldi::ReadToken(a2, 0, (uint64_t)v25, v8, v9);
LABEL_87:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v11 = v67[1];
LABEL_45:
  if (v11 != (void *)9)
    goto LABEL_99;
  v20 = *(_QWORD *)v67[0] == 0x6461724778614D3CLL && *((_BYTE *)v67[0] + 8) == 62;
  v14 = (float *)(a1 + 164);
  if (v20)
  {
LABEL_86:
    kaldi::ReadBasicType<float>(a2, 0, v14, v8, v9);
    goto LABEL_87;
  }
  v11 = v67[1];
LABEL_99:
  if (v11 != (void *)12)
    goto LABEL_92;
  v57 = (void **)v67[0];
LABEL_101:
  if (*v57 != (void *)0x6E6F706D6F432F3CLL || *((_DWORD *)v57 + 2) != 1047817829)
  {
LABEL_92:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v66, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 140);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v67[2]) >= 0)
      v30 = v67;
    else
      v30 = (void **)v67[0];
    if (SHIBYTE(v67[2]) >= 0)
      v31 = HIBYTE(v67[2]);
    else
      v31 = (uint64_t)v67[1];
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" (ParamStddev|LearnRateCoef|InitTransformType|RandomSeed|GradientNormType|MaxGrad)", 82);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v66);
  }
LABEL_106:
  inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v70);
  *(_DWORD *)(a1 + 160) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v69);
  if (v68 >= 1)
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v68);
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v62, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)&v58, *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 8), 0, 0);
  v39 = *(_DWORD *)(a1 + 12);
  if (v39 < 1)
    goto LABEL_134;
  v40 = 0;
  LODWORD(v41) = *(_DWORD *)(a1 + 8);
  while (2)
  {
    if ((int)v41 < 1)
      goto LABEL_133;
    v42 = 0;
    while (2)
    {
      switch(inited)
      {
        case 0:
          if (v40 >= v60 || v42 >= v59)
LABEL_149:
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v38);
          v45 = v58 + 4 * (int)v40 * v61;
          if (v40 == v42)
            v46 = 1.0;
          else
            v46 = 0.0;
          goto LABEL_130;
        case 2:
          v47 = *(float *)&v71;
          kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v62, 0, v36, v37, v38);
          if (v40 >= v60 || v42 >= v59)
            goto LABEL_149;
          v45 = v58 + 4 * (int)v40 * v61;
          v46 = v47 * v48;
LABEL_130:
          *(float *)(v45 + 4 * v42) = v46;
          break;
        case 1:
          v43 = *(float *)&v71;
          v44 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v36, v37, v38);
          if (v40 >= v60 || v42 >= v59)
            goto LABEL_149;
          v45 = v58 + 4 * (int)v40 * v61;
          v46 = (v44 + -0.5) * (float)(v43 + v43);
          goto LABEL_130;
      }
      ++v42;
      v41 = *(int *)(a1 + 8);
      if ((uint64_t)v42 < v41)
        continue;
      break;
    }
    v39 = *(_DWORD *)(a1 + 12);
LABEL_133:
    if ((uint64_t)++v40 < v39)
      continue;
    break;
  }
LABEL_134:
  v51 = *(_QWORD *)(a1 + 104);
  if (!v51)
    goto LABEL_150;
  v52 = *(_DWORD *)(v51 + 20);
  if (v52 != kaldi::MatrixBase<float>::NumRows((uint64_t)&v58))
    goto LABEL_148;
  v53 = *(_QWORD *)(a1 + 104);
  if (!v53)
    goto LABEL_150;
  v54 = *(_DWORD *)(v53 + 16);
  if (v54 != kaldi::MatrixBase<float>::NumCols((uint64_t)&v58))
  {
LABEL_148:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v66, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 163);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Linearity().NumRows() == mat.NumRows() && Linearity().NumCols() == mat.NumCols()", 80);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v66);
  }
  v56 = *(_QWORD *)(a1 + 104);
  if (!v56)
LABEL_150:
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v38);
  kaldi::CuMatrixBase<float>::CopyFromMat(v56, (uint64_t)&v58, 111, v55, v38);
  kaldi::Matrix<float>::~Matrix((uint64_t)&v58);
  if (__p)
  {
    v65 = __p;
    operator delete(__p);
  }
  v66[0] = (void **)&v63;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v66);
  if (SHIBYTE(v67[2]) < 0)
    operator delete(v67[0]);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
}

void sub_1DE422898(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  kaldi::Matrix<float>::~Matrix(&v3);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)&v4);
  if (*(char *)(v1 - 185) < 0)
    operator delete(*(void **)(v1 - 208));
  if (*(char *)(v1 - 153) < 0)
    operator delete(*(void **)(v1 - 176));
  if (*(char *)(v1 - 129) < 0)
    operator delete(*(void **)(v1 - 152));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  BOOL v11;
  __int128 *v13;
  uint64_t v14;
  BOOL v15;
  float *v16;
  uint64_t v19;
  int v20;
  BOOL v21;
  BOOL v22;
  uint64_t (***v23)(_QWORD, uint64_t *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v25;
  _QWORD *v26;
  __int128 *v27;
  uint64_t v28;
  void *__p[2];
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  while (kaldi::Peek(a2, a3) == 60)
  {
    v32 = 0uLL;
    v33 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v32, v7, v8);
    if (SHIBYTE(v33) < 0)
    {
      v14 = *((_QWORD *)&v32 + 1);
      if (*((_QWORD *)&v32 + 1) != 15
        || (*(_QWORD *)v32 == 0x61526E7261654C3CLL ? (v15 = *(_QWORD *)(v32 + 7) == 0x3E66656F43657461) : (v15 = 0),
            v16 = (float *)(a1 + 168),
            !v15))
      {
        if (*((_QWORD *)&v32 + 1) == 18)
        {
          if (*(_QWORD *)v32 == 0x6E6569646172473CLL
            && *(_QWORD *)(v32 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v32 + 16) == 15973)
          {
            goto LABEL_46;
          }
          v14 = *((_QWORD *)&v32 + 1);
        }
        if (v14 != 9)
          goto LABEL_53;
        v13 = (__int128 *)v32;
        goto LABEL_31;
      }
    }
    else
    {
      if (HIBYTE(v33) == 9)
      {
        v13 = &v32;
LABEL_31:
        v19 = *(_QWORD *)v13;
        v20 = *((unsigned __int8 *)v13 + 8);
        v21 = v19 == 0x6461724778614D3CLL && v20 == 62;
        v16 = (float *)(a1 + 164);
        if (!v21)
        {
LABEL_53:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 181);
          v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (v33 >= 0)
            v27 = &v32;
          else
            v27 = (__int128 *)v32;
          if (v33 >= 0)
            v28 = HIBYTE(v33);
          else
            v28 = *((_QWORD *)&v32 + 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_41;
      }
      if (HIBYTE(v33) != 15)
      {
        if (HIBYTE(v33) != 18)
          goto LABEL_53;
        v11 = (_QWORD)v32 == 0x6E6569646172473CLL && *((_QWORD *)&v32 + 1) == 0x7079546D726F4E74;
        if (!v11 || (unsigned __int16)v33 != 15973)
          goto LABEL_53;
LABEL_46:
        __p[0] = 0;
        __p[1] = 0;
        v31 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p, v9, v10);
        *(_DWORD *)(a1 + 160) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v31) < 0)
          operator delete(__p[0]);
        goto LABEL_42;
      }
      v22 = (_QWORD)v32 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v32 + 7) == 0x3E66656F43657461;
      v16 = (float *)(a1 + 168);
      if (!v22)
        goto LABEL_53;
    }
LABEL_41:
    kaldi::ReadBasicType<float>(a2, a3, v16, v9, v10);
LABEL_42:
    if (SHIBYTE(v33) < 0)
      operator delete((void *)v32);
  }
  v23 = *(uint64_t (****)(_QWORD, uint64_t *, uint64_t, uint64_t))(a1 + 104);
  if (!v23 || (result = (**v23)(v23, a2, a3, a4), *(_BYTE *)(a1 + 16) = 0, (v25 = *(_QWORD *)(a1 + 104)) == 0))
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v8);
  if (*(_DWORD *)(v25 + 20) != *(_DWORD *)(a1 + 12))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0xBF, "Linearity().NumRows() == output_dim_", v8);
  if (*(_DWORD *)(v25 + 16) != *(_DWORD *)(a1 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0xC0, "Linearity().NumCols() == input_dim_", v8);
  return result;
}

void sub_1DE422C5C()
{
  JUMPOUT(0x1DE422C64);
}

_QWORD *kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::WriteConfig(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  std::string __p;

  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v8, v9);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 160), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v10, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v12, v13);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

void sub_1DE422D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::WriteData(_QWORD *a1, _QWORD *a2, int a3, int a4)
{
  const char *v8;
  uint64_t v9;

  (*(void (**)(_QWORD *))(*a1 + 168))(a1);
  v9 = a1[13];
  if (!v9)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x153, "linearity_", v8);
  return kaldi::CuMatrixBase<float>::Write(v9, a2, a3, a4);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::NumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 104);
  if (!v5)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x153, "linearity_", a5);
  return (*(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20));
}

void *kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::GetParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a1 + 104);
  if (!v5)
    goto LABEL_5;
  v8 = *(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20);
  kaldi::Vector<float>::Resize((void **)a2, v8, 0, a4, a5);
  v14 = 0;
  v15 = 0;
  if (v8 > *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", a5);
  v13 = *(void **)a2;
  LODWORD(v14) = v8;
  v11 = *(_QWORD *)(a1 + 104);
  if (!v11)
LABEL_5:
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x153, "linearity_", a5);
  return kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v13, v11, v9, v10, a5);
}

void **kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SetParams(_QWORD *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  uint64_t v6;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_QWORD *))(*a1 + 176))(a1))
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0xDA, "wei_src.Dim() == NumParams()", v5);
  v6 = a1[13];
  if (!v6)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v5);
  return kaldi::CuMatrixBase<float>::CopyRowsFromVec(v6, (char **)a2);
}

float kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 104);
  if (!v5)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x153, "linearity_", a5);
  return kaldi::CuMatrixBase<float>::Sum(v5, a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::PerturbParams(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v6;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  _BYTE v13[48];

  v6 = *(_QWORD *)(a1 + 104);
  if (!v6)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", a6);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v13, *(unsigned int *)(v6 + 20), *(unsigned int *)(v6 + 16), 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v13);
  v11 = *(_QWORD *)(a1 + 104);
  if (!v11)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v10);
  kaldi::CuMatrixBase<float>::AddMat(v11, (uint64_t)v13, 111, v9, v10, a2, 1.0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v13);
}

void sub_1DE423044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::Info(_QWORD *a1)
{
  const char *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  void *__p[2];
  unsigned __int8 v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  (*(void (**)(_QWORD *, _QWORD *, _QWORD))(*a1 + 168))(a1, v10, 0);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n linearity", 11);
  v4 = a1[13];
  if (!v4)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x153, "linearity_", v2);
  kaldi::nnet1::MomentStatistics<float>(v4);
  if ((v9 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v6 = v9;
  else
    v6 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, v6);
  if ((char)v9 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v12);
}

void sub_1DE423198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string::size_type v15;
  std::string *v16;
  void *__p[2];
  unsigned __int8 v18;
  void *v19[2];
  unsigned __int8 v20;
  std::string v21;
  std::string v22;
  std::string v23;

  std::string::basic_string[abi:ne180100]<0>(&v21, "\n  linearity_grad");
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 112), v4, v5, v6, v7);
  if ((v20 & 0x80u) == 0)
    v8 = v19;
  else
    v8 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v9 = v20;
  else
    v9 = (std::string::size_type)v19[1];
  v10 = std::string::append(&v21, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v22, ", lr-coef ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v18 & 0x80u) == 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v15 = v18;
  else
    v15 = (std::string::size_type)__p[1];
  v16 = std::string::append(&v23, (const std::string::value_type *)v14, v15);
  *a2 = *v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((char)v18 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_1DE423310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  if (a33 < 0)
    operator delete(a28);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 104);
  if (!v5)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", a5);
  kaldi::CuMatrixBase<float>::AddMatMat(a3, a2, CblasNoTrans, v5, (const char *)0x70, 1.0, 0.0);
}

{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 104);
  if (!v6)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", a5);
  kaldi::CuVectorBase<float>::AddMatVec(a3, v6, CblasNoTrans, a2, a5, 1.0, 0.0);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 104);
  if (!v5)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", a5);
  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)a5, a4, CblasNoTrans, v5, (const char *)0x6F, 1.0, 0.0);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD v9[4];

  v5 = *(_QWORD *)(a1 + 104);
  if (!v5)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x153, "linearity_", a5);
  if (*(_DWORD *)(v5 + 20) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a5);
  v6 = *(_QWORD *)(v5 + 8) + 4 * (int)(*(_DWORD *)(v5 + 24) * a3);
  v7 = *(_DWORD *)(v5 + 16);
  v8 = *(_QWORD *)(v5 + 32);
  v9[0] = &unk_1EA926538;
  v9[1] = v6;
  v9[3] = v8;
  v9[2] = v7;
  kaldi::CuVectorBase<float>::AddMatVec(a4, a2, CblasNoTrans, (uint64_t)v9, a5, 1.0, 0.0);
}

float kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD v10[4];

  v5 = *(_QWORD *)(a1 + 104);
  if (!v5)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x153, "linearity_", a5);
  if (*(_DWORD *)(v5 + 20) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a5);
  v6 = *(_QWORD *)(v5 + 8) + 4 * *(_DWORD *)(v5 + 24) * (int)a3;
  v7 = *(_DWORD *)(v5 + 16);
  v8 = *(_QWORD *)(v5 + 32);
  v10[0] = &unk_1EA926538;
  v10[1] = v6;
  v10[3] = v8;
  v10[2] = v7;
  return kaldi::VecVec<float>(a2, (uint64_t)v10, a3, a4, a5);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  float v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;

  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  v10 = *(float *)(a1 + 60);
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * a5) = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a5, v11, v12, v13) + 32) = a4;
  v17 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a5, v14, v15, v16);
  kaldi::CuMatrixBase<float>::AddMatMat(v17, a3, CblasTrans, a2, (const char *)0x6F, 1.0, v10);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  _QWORD *v5;
  std::vector<int>::size_type v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;

  if (!*(_BYTE *)(a1 + 224))
  {
    v2 = *(_DWORD *)(a1 + 160);
    v3 = *(_DWORD *)(a1 + 80);
    if (v3 > 1)
      v4 = v3 + 1;
    else
      v4 = 1;
    v5 = (_QWORD *)(a1 + 112);
    v6 = v4;
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 112, v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 136), v4);
    if (v4 >= 1)
    {
      v7 = 0;
      v8 = v2 & 0xFFFFFFFE;
      do
      {
        v9 = operator new();
        v11 = v9;
        v12 = *(_QWORD *)(a1 + 104);
        if (!v12)
          kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v10);
        kaldi::CuMatrix<float>::CuMatrix(v9, *(unsigned int *)(v12 + 20), *(unsigned int *)(v12 + 16), 0, 0, 0);
        v14 = *(_QWORD *)(*v5 + 8 * v7);
        *(_QWORD *)(*v5 + 8 * v7) = v11;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
        if (v8 == 2)
        {
          v15 = *(_QWORD *)(a1 + 104);
          if (!v15)
            kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v13);
          kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 136) + 48 * v7, *(unsigned int *)(v15 + 20), *(unsigned int *)(v15 + 16), 1u, 0);
          if (*(_DWORD *)(a1 + 160) == 3)
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 136) + 48 * v7, v16, v17, v18, v19, 1.0);
        }
        ++v7;
      }
      while (v7 != v6);
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 176), v6);
    *(_BYTE *)(a1 + 224) = 1;
  }
}

void sub_1DE4237F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 164) = a3;
  *(_DWORD *)(result + 160) = a2;
  *(_BYTE *)(result + 224) = 0;
  return result;
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::NormalizeGradients(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  float v7;
  int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;

  v7 = a6;
  v9 = *(_DWORD *)(a1 + 160);
  if (v9 == 3)
  {
    if (a6 >= 0.0 && a6 <= 1.0)
    {
      v12 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a2, a3, a4, a5);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v12, *(_QWORD *)(a1 + 136) + 48 * a2, v7);
    }
  }
  else if (v9 == 2)
  {
    if (a6 > 0.0)
    {
      if (*(_BYTE *)(a1 + 84))
        v7 = (float)*(int *)(*(_QWORD *)(a1 + 176) + 4 * a2) * a6;
      v14 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a2, a3, a4, a5);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v14, (unsigned int *)(*(_QWORD *)(a1 + 136) + 48 * a2), v7, v15, v16, v17);
    }
  }
  else if (v9 == 1 && a6 > 0.0)
  {
    if (*(_BYTE *)(a1 + 84))
      v7 = (float)*(int *)(*(_QWORD *)(a1 + 176) + 4 * a2) * a6;
    v10 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a2, a3, a4, a5);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v10, v7);
  }
}

float kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;

  if (!*(_BYTE *)(a1 + 84))
    return *(float *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 200);
  v3 = *(_QWORD *)(a1 + 208) - v2;
  if (!v3)
    return NAN;
  v4 = v3 >> 2;
  if ((int)v4 <= a2)
    return NAN;
  v5 = v4 - 1;
  if (a2 >= 0)
    v5 = a2;
  return *(float *)(v2 + 4 * v5);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 232))(v8, a2, a3, 0, 0);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v9, 1, v10, v11);
  v15 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(v8, 0, v12, v13, v14);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)a4, v15, v16, v17, v18);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

unsigned int *kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SetLinearity(uint64_t a1, uint64_t a2)
{
  int v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v4 = kaldi::MatrixBase<float>::NumRows(a2);
  v6 = *(_QWORD *)(a1 + 104);
  if (!v6)
    goto LABEL_6;
  if (v4 != *(_DWORD *)(v6 + 20))
    kaldi::KaldiAssertFailure_((kaldi *)"SetLinearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x162, "linearity.NumRows() == Linearity().NumRows()", v5);
  v8 = kaldi::MatrixBase<float>::NumCols(a2);
  v9 = *(_QWORD *)(a1 + 104);
  if (!v9)
LABEL_6:
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v5);
  if (v8 != *(_DWORD *)(v9 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"SetLinearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x163, "linearity.NumCols() == Linearity().NumCols()", v5);
  return kaldi::CuMatrixBase<float>::CopyFromMat(v9, a2, 111, v7, v5);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t result;
  _QWORD *v19;
  _QWORD v20[34];

  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  v9 = *(_QWORD *)(a1 + 104);
  if (!v9)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v8);
  *a3 = *(_DWORD *)(v9 + 16) * *(_DWORD *)(v9 + 20);
  v10 = *(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112);
  if (v10)
  {
    v11 = v10 >> 3;
    if (*(_DWORD *)(a1 + 80) == 1)
      v12 = 0;
    else
      v12 = *(_DWORD *)(a1 + 80);
    if (v11 - 1 != v12)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "CountZeroCorr", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 372);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
    }
    v13 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, v12, v6, v7, v8);
    result = kaldi::CuMatrixBase<float>::CountZeros(v13, v14, v15, v16, v17);
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::ApplyCorr(uint64_t a1, int a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;

  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  v9 = *(_QWORD *)(a1 + 104);
  if (!v9)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v8);
  v10 = -(float)(a3 * *(float *)(a1 + 168));
  v11 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a2, v6, v7, v8);
  kaldi::CuMatrixBase<float>::AddMat(v9, v11, 111, v12, v13, v10, 1.0);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  *(_OWORD *)(a1 + 56) = xmmword_1DEC3D450;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)(a1 + 88) = &unk_1EA927F48;
  *(_QWORD *)(a1 + 96) = &unk_1EA927F70;
  *(_QWORD *)a1 = &unk_1EA927E10;
  v6 = operator new();
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v6, a3, a2);
  *(_QWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_BYTE *)(a1 + 224) = 0;
  return a1;
}

void sub_1DE423E38(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x1DF0ED014](v4, 0x10D0C4068EB0291);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  char v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25[35];

  *(_QWORD *)a1 = off_1EA92D6D8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1EA929750;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1EA927F48;
  *(_QWORD *)(a1 + 96) = &unk_1EA927F70;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)a1 = &unk_1EA927E10;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 112), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 136), *(_QWORD *)(a2 + 136), *(_QWORD *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 4));
  v6 = *(_DWORD *)(a2 + 160);
  v7 = *(_QWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 160) = v6;
  *(_QWORD *)(a1 + 164) = v7;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 176), *(const void **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 2);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 200), *(const void **)(a2 + 200), *(_QWORD *)(a2 + 208), (uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 2);
  v11 = *(_BYTE *)(a2 + 224);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_BYTE *)(a1 + 224) = v11;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "LinearTransform", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 79);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
  v12 = *(int **)(a2 + 104);
  if (v12)
  {
    kaldi::NewCuSubOrMat<signed char>(v12, v25);
    v13 = v25[0];
    v25[0] = 0;
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 104), v13);
    v14 = v25[0];
    v25[0] = 0;
    if (v14)
    {
      v15 = kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v14);
      MEMORY[0x1DF0ED014](v15, 0x10D0C4068EB0291);
    }
  }
  v17 = *(_QWORD *)(a1 + 112);
  v16 = *(_QWORD *)(a1 + 120);
  if (v16 != v17)
  {
    v18 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a2 + 112) + 8 * v18))
      {
        v19 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a2, v18, v8, v9, v10);
        kaldi::NewCuSubOrMat<float>(v19, *(unsigned __int8 *)(a1 + 16), v25);
        v20 = *(_QWORD *)(a1 + 112);
        v21 = v25[0];
        v25[0] = 0;
        v22 = *(_QWORD *)(v20 + 8 * v18);
        *(_QWORD *)(v20 + 8 * v18) = v21;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
        v23 = v25[0];
        v25[0] = 0;
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
        v17 = *(_QWORD *)(a1 + 112);
        v16 = *(_QWORD *)(a1 + 120);
      }
      ++v18;
    }
    while (v18 < (v16 - v17) >> 3);
  }
  if (*(_QWORD *)(a2 + 240) != *(_QWORD *)(a2 + 232))
    kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 232));
  return a1;
}

void sub_1DE424158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  kaldi::nnet1::UpdatableComponent *v10;
  uint64_t v11;
  uint64_t *v12;
  void **v13;
  void **v14;
  void **v15;
  void *v17;
  void *v18;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v15);
  v17 = *v14;
  if (*v14)
  {
    *((_QWORD *)v10 + 26) = v17;
    operator delete(v17);
  }
  v18 = *v13;
  if (*v13)
  {
    *((_QWORD *)v10 + 23) = v18;
    operator delete(v18);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](v12, 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v11);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a9);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::NewCuSubOrMat<signed char>@<X0>(int *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1DE424244(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10D0C4068EB0291);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;

  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  v7 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, ((*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 3) - 1, v4, v5, v6);
  return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void **v6;

  *(_QWORD *)(a1 + 88) = &unk_1EA927F48;
  v2 = a1 + 88;
  *(_QWORD *)a1 = &unk_1EA927E10;
  *(_QWORD *)(a1 + 96) = &unk_1EA927F70;
  v3 = a1 + 96;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 232));
  v4 = *(void **)(a1 + 200);
  if (v4)
  {
    *(_QWORD *)(a1 + 208) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 176);
  if (v5)
  {
    *(_QWORD *)(a1 + 184) = v5;
    operator delete(v5);
  }
  v6 = (void **)(a1 + 136);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)(a1 + 112);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 104), 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(a1);
  JUMPOUT(0x1DF0ED014);
}

void `non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(uint64_t a1)
{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(a1 - 88);
}

{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(a1 - 96);
}

{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(a1 - 88);
  JUMPOUT(0x1DF0ED014);
}

{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(a1 - 96);
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform(v2, a1);
  return v2;
}

void sub_1DE424438(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit(uint64_t a1)
{
  return kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit(a1 - 88);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform<kaldi::QuantizedMatrix<signed char>>(v2, a1);
  return v2;
}

void sub_1DE4244A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit(uint64_t a1)
{
  return kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit(a1 - 96);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform(v2, a1);
  return v2;
}

void sub_1DE424518(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  void *v11;
  BOOL v13;
  float *v14;
  BOOL v18;
  BOOL v20;
  std::string *v25;
  BOOL v26;
  BOOL v28;
  _QWORD *v29;
  void **v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int inited;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  int v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  float v43;
  float v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  unsigned int *v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  void **v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  _BYTE v61[16];
  uint64_t v62;
  void *__p;
  void *v64;
  void **v65[34];
  void *v66[3];
  int v67;
  std::string v68;
  std::string v69;
  int v70;

  v70 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v69);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 160), &v68);
  v67 = -1;
  memset(v66, 0, sizeof(v66));
  v56 = v66;
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_106;
    kaldi::ReadToken(a2, 0, (uint64_t)v66, v6, v7);
    if ((SHIBYTE(v66[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v66[2]))
      {
        case 9:
          goto LABEL_81;
        case 0xC:
          goto LABEL_76;
        case 0xD:
          if (v66[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v66 + 5) != (void *)0x3E7665646474536DLL)
            goto LABEL_92;
          goto LABEL_51;
        case 0xF:
          v26 = v66[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v66 + 7) == (void *)0x3E66656F43657461;
          v14 = (float *)(a1 + 168);
          if (v26)
            goto LABEL_86;
          if (HIBYTE(v66[2]) == 9)
            goto LABEL_81;
          if (HIBYTE(v66[2]) != 12)
            goto LABEL_92;
LABEL_76:
          if (v66[0] != (void *)0x536D6F646E61523CLL || LODWORD(v66[1]) != 1046766949)
            goto LABEL_80;
          goto LABEL_88;
        case 0x12:
          goto LABEL_61;
        case 0x13:
          if (v66[0] == (void *)0x61725474696E493CLL
            && v66[1] == (void *)0x79546D726F66736ELL
            && *(void **)((char *)&v66[1] + 3) == (void *)0x3E657079546D726FLL)
          {
            goto LABEL_89;
          }
          if (HIBYTE(v66[2]) == 9)
            goto LABEL_81;
          if (HIBYTE(v66[2]) != 18)
            goto LABEL_91;
LABEL_61:
          if (v66[0] == (void *)0x6E6569646172473CLL
            && v66[1] == (void *)0x7079546D726F4E74
            && LOWORD(v66[2]) == 15973)
          {
            goto LABEL_69;
          }
LABEL_80:
          if (HIBYTE(v66[2]) != 9)
          {
LABEL_91:
            if (HIBYTE(v66[2]) == 12)
              goto LABEL_101;
            goto LABEL_92;
          }
LABEL_81:
          v28 = v66[0] == (void *)0x6461724778614D3CLL && LOBYTE(v66[1]) == 62;
          v14 = (float *)(a1 + 164);
          if (!v28)
            goto LABEL_92;
          break;
        default:
          goto LABEL_92;
      }
      goto LABEL_86;
    }
    v11 = v66[1];
    if (v66[1] == (void *)13
      && *(_QWORD *)v66[0] == 0x74536D617261503CLL
      && *(_QWORD *)((char *)v66[0] + 5) == 0x3E7665646474536DLL)
    {
LABEL_51:
      v14 = (float *)&v70;
      goto LABEL_86;
    }
    if (v66[1] == (void *)15)
    {
      v13 = *(_QWORD *)v66[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v66[0] + 7) == 0x3E66656F43657461;
      v14 = (float *)(a1 + 168);
      if (v13)
        goto LABEL_86;
      v11 = v66[1];
    }
    if (v11 == (void *)12)
    {
      if (*(_QWORD *)v66[0] == 0x536D6F646E61523CLL && *((_DWORD *)v66[0] + 2) == 1046766949)
      {
LABEL_88:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v67, v8, v9);
        goto LABEL_87;
      }
      v11 = v66[1];
    }
    if (v11 == (void *)19)
    {
      if (*(_QWORD *)v66[0] == 0x61725474696E493CLL
        && *((_QWORD *)v66[0] + 1) == 0x79546D726F66736ELL
        && *(_QWORD *)((char *)v66[0] + 11) == 0x3E657079546D726FLL)
      {
LABEL_89:
        v25 = &v69;
        goto LABEL_90;
      }
      v11 = v66[1];
    }
    if (v11 != (void *)18)
      goto LABEL_45;
    v18 = *(_QWORD *)v66[0] == 0x6E6569646172473CLL && *((_QWORD *)v66[0] + 1) == 0x7079546D726F4E74;
    if (!v18 || *((_WORD *)v66[0] + 8) != 15973)
      break;
LABEL_69:
    v25 = &v68;
LABEL_90:
    kaldi::ReadToken(a2, 0, (uint64_t)v25, v8, v9);
LABEL_87:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v11 = v66[1];
LABEL_45:
  if (v11 != (void *)9)
    goto LABEL_99;
  v20 = *(_QWORD *)v66[0] == 0x6461724778614D3CLL && *((_BYTE *)v66[0] + 8) == 62;
  v14 = (float *)(a1 + 164);
  if (v20)
  {
LABEL_86:
    kaldi::ReadBasicType<float>(a2, 0, v14, v8, v9);
    goto LABEL_87;
  }
  v11 = v66[1];
LABEL_99:
  if (v11 != (void *)12)
    goto LABEL_92;
  v56 = (void **)v66[0];
LABEL_101:
  if (*v56 != (void *)0x6E6F706D6F432F3CLL || *((_DWORD *)v56 + 2) != 1047817829)
  {
LABEL_92:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v65, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 140);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v66[2]) >= 0)
      v30 = v66;
    else
      v30 = (void **)v66[0];
    if (SHIBYTE(v66[2]) >= 0)
      v31 = HIBYTE(v66[2]);
    else
      v31 = (uint64_t)v66[1];
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" (ParamStddev|LearnRateCoef|InitTransformType|RandomSeed|GradientNormType|MaxGrad)", 82);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v65);
  }
LABEL_106:
  inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v69);
  *(_DWORD *)(a1 + 160) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v68);
  if (v67 >= 1)
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v67);
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v61, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)&v57, *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 8), 0, 0);
  v39 = *(_DWORD *)(a1 + 12);
  if (v39 < 1)
    goto LABEL_134;
  v40 = 0;
  LODWORD(v41) = *(_DWORD *)(a1 + 8);
  while (2)
  {
    if ((int)v41 < 1)
      goto LABEL_133;
    v42 = 0;
    while (2)
    {
      switch(inited)
      {
        case 0:
          if (v40 >= v59 || v42 >= v58)
LABEL_149:
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v38);
          v45 = v57 + 4 * (int)v40 * v60;
          if (v40 == v42)
            v46 = 1.0;
          else
            v46 = 0.0;
          goto LABEL_130;
        case 2:
          v47 = *(float *)&v70;
          kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v61, 0, v36, v37, v38);
          if (v40 >= v59 || v42 >= v58)
            goto LABEL_149;
          v45 = v57 + 4 * (int)v40 * v60;
          v46 = v47 * v48;
LABEL_130:
          *(float *)(v45 + 4 * v42) = v46;
          break;
        case 1:
          v43 = *(float *)&v70;
          v44 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v36, v37, v38);
          if (v40 >= v59 || v42 >= v58)
            goto LABEL_149;
          v45 = v57 + 4 * (int)v40 * v60;
          v46 = (v44 + -0.5) * (float)(v43 + v43);
          goto LABEL_130;
      }
      ++v42;
      v41 = *(int *)(a1 + 8);
      if ((uint64_t)v42 < v41)
        continue;
      break;
    }
    v39 = *(_DWORD *)(a1 + 12);
LABEL_133:
    if ((uint64_t)++v40 < v39)
      continue;
    break;
  }
LABEL_134:
  v51 = *(unsigned int **)(a1 + 104);
  if (!v51)
    goto LABEL_150;
  v52 = kaldi::QuantizedMatrixBase<short>::NumRows(v51);
  if (v52 != kaldi::MatrixBase<float>::NumRows((uint64_t)&v57))
    goto LABEL_148;
  v53 = *(_QWORD *)(a1 + 104);
  if (!v53)
    goto LABEL_150;
  v54 = kaldi::QuantizedMatrixBase<short>::NumCols(v53);
  if (v54 != kaldi::MatrixBase<float>::NumCols((uint64_t)&v57))
  {
LABEL_148:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v65, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 163);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Linearity().NumRows() == mat.NumRows() && Linearity().NumCols() == mat.NumCols()", 80);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v65);
  }
  v55 = *(_QWORD *)(a1 + 104);
  if (!v55)
LABEL_150:
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v38);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(v55, (uint64_t)&v57);
  kaldi::Matrix<float>::~Matrix((uint64_t)&v57);
  if (__p)
  {
    v64 = __p;
    operator delete(__p);
  }
  v65[0] = (void **)&v62;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v65);
  if (SHIBYTE(v66[2]) < 0)
    operator delete(v66[0]);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
}

void sub_1DE424D28(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  kaldi::Matrix<float>::~Matrix(&v3);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)&v4);
  if (*(char *)(v1 - 185) < 0)
    operator delete(*(void **)(v1 - 208));
  if (*(char *)(v1 - 153) < 0)
    operator delete(*(void **)(v1 - 176));
  if (*(char *)(v1 - 129) < 0)
    operator delete(*(void **)(v1 - 152));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::ReadData(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  BOOL v11;
  __int128 *v13;
  uint64_t v14;
  BOOL v15;
  float *v16;
  uint64_t v19;
  int v20;
  BOOL v21;
  BOOL v22;
  int *v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t result;
  const char *v27;
  _QWORD *v28;
  __int128 *v29;
  uint64_t v30;
  void *__p[2];
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  while (kaldi::Peek(a2, a3) == 60)
  {
    v34 = 0uLL;
    v35 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v34, v7, v8);
    if (SHIBYTE(v35) < 0)
    {
      v14 = *((_QWORD *)&v34 + 1);
      if (*((_QWORD *)&v34 + 1) != 15
        || (*(_QWORD *)v34 == 0x61526E7261654C3CLL ? (v15 = *(_QWORD *)(v34 + 7) == 0x3E66656F43657461) : (v15 = 0),
            v16 = (float *)(a1 + 168),
            !v15))
      {
        if (*((_QWORD *)&v34 + 1) == 18)
        {
          if (*(_QWORD *)v34 == 0x6E6569646172473CLL
            && *(_QWORD *)(v34 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v34 + 16) == 15973)
          {
            goto LABEL_46;
          }
          v14 = *((_QWORD *)&v34 + 1);
        }
        if (v14 != 9)
          goto LABEL_54;
        v13 = (__int128 *)v34;
        goto LABEL_31;
      }
    }
    else
    {
      if (HIBYTE(v35) == 9)
      {
        v13 = &v34;
LABEL_31:
        v19 = *(_QWORD *)v13;
        v20 = *((unsigned __int8 *)v13 + 8);
        v21 = v19 == 0x6461724778614D3CLL && v20 == 62;
        v16 = (float *)(a1 + 164);
        if (!v21)
        {
LABEL_54:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 181);
          v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (v35 >= 0)
            v29 = &v34;
          else
            v29 = (__int128 *)v34;
          if (v35 >= 0)
            v30 = HIBYTE(v35);
          else
            v30 = *((_QWORD *)&v34 + 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_41;
      }
      if (HIBYTE(v35) != 15)
      {
        if (HIBYTE(v35) != 18)
          goto LABEL_54;
        v11 = (_QWORD)v34 == 0x6E6569646172473CLL && *((_QWORD *)&v34 + 1) == 0x7079546D726F4E74;
        if (!v11 || (unsigned __int16)v35 != 15973)
          goto LABEL_54;
LABEL_46:
        __p[0] = 0;
        __p[1] = 0;
        v33 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p, v9, v10);
        *(_DWORD *)(a1 + 160) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v33) < 0)
          operator delete(__p[0]);
        goto LABEL_42;
      }
      v22 = (_QWORD)v34 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v34 + 7) == 0x3E66656F43657461;
      v16 = (float *)(a1 + 168);
      if (!v22)
        goto LABEL_54;
    }
LABEL_41:
    kaldi::ReadBasicType<float>(a2, a3, v16, v9, v10);
LABEL_42:
    if (SHIBYTE(v35) < 0)
      operator delete((void *)v34);
  }
  v23 = *(int **)(a1 + 104);
  if (!v23)
    goto LABEL_61;
  kaldi::QuantizedMatrix<signed char>::Read(v23, a2, a3, a4, v8);
  *(_BYTE *)(a1 + 16) = 0;
  v24 = *(unsigned int **)(a1 + 104);
  if (!v24)
    goto LABEL_61;
  if (kaldi::QuantizedMatrixBase<short>::NumRows(v24) != *(_DWORD *)(a1 + 12))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0xBF, "Linearity().NumRows() == output_dim_", v8);
  v25 = *(_QWORD *)(a1 + 104);
  if (!v25)
LABEL_61:
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v8);
  result = kaldi::QuantizedMatrixBase<short>::NumCols(v25);
  if ((_DWORD)result != *(_DWORD *)(a1 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0xC0, "Linearity().NumCols() == input_dim_", v27);
  return result;
}

void sub_1DE4250EC()
{
  JUMPOUT(0x1DE4250F4);
}

_QWORD *kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::WriteConfig(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  std::string __p;

  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v8, v9);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 160), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v10, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v12, v13);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

void sub_1DE4251C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::WriteData(_QWORD *a1, _QWORD *a2, int a3, int a4)
{
  const char *v8;
  int *v9;

  (*(void (**)(_QWORD *))(*a1 + 168))(a1);
  v9 = (int *)a1[13];
  if (!v9)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x153, "linearity_", v8);
  return kaldi::QuantizedMatrix<signed char>::Write(v9, a2, a3, a4);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::NumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unsigned int *v6;
  int v7;
  uint64_t v8;

  v6 = *(unsigned int **)(a1 + 104);
  if (!v6 || (v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6), (v8 = *(_QWORD *)(a1 + 104)) == 0))
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x153, "linearity_", a5);
  return kaldi::QuantizedMatrixBase<short>::NumCols(v8) * v7;
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::GetParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unsigned int *v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  unsigned int *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(unsigned int **)(a1 + 104);
  if (!v6)
    goto LABEL_6;
  v8 = kaldi::QuantizedMatrixBase<short>::NumRows(v6);
  v9 = *(_QWORD *)(a1 + 104);
  if (!v9)
    goto LABEL_6;
  v10 = kaldi::QuantizedMatrixBase<short>::NumCols(v9) * v8;
  kaldi::Vector<float>::Resize((void **)a2, v10, 0, v11, v12);
  v15 = 0;
  v16 = 0;
  if (v10 > *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", a5);
  v14 = *(void **)a2;
  LODWORD(v15) = v10;
  v13 = *(unsigned int **)(a1 + 104);
  if (!v13)
LABEL_6:
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x153, "linearity_", a5);
  kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v14, v13);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::SetParams(_QWORD *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  unsigned int *v6;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_QWORD *))(*a1 + 176))(a1))
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0xDA, "wei_src.Dim() == NumParams()", v5);
  v6 = (unsigned int *)a1[13];
  if (!v6)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v5);
  return kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v6, (char **)a2);
}

float kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::SumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int *v5;

  v5 = *(int **)(a1 + 104);
  if (!v5)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x153, "linearity_", a5);
  return kaldi::QuantizedMatrixBase<signed char>::Sum(v5, a2, a3, a4, a5);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::PerturbParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _BYTE v11[48];

  v6 = *(unsigned int **)(a1 + 104);
  if (v6)
  {
    v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6);
    v8 = *(_QWORD *)(a1 + 104);
    if (v8)
    {
      v9 = kaldi::QuantizedMatrixBase<short>::NumCols(v8);
      kaldi::CuMatrix<float>::CuMatrix((uint64_t)v11, v7, v9, 1u, 0, 0);
      kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v11);
      if (*(_QWORD *)(a1 + 104))
        kaldi::QuantizedMatrixBase<signed char>::AddMat();
      kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v10);
    }
  }
  kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", a5);
}

void sub_1DE425518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::Info(_QWORD *a1)
{
  const char *v2;
  _QWORD *v3;
  unsigned int *v4;
  void **v5;
  uint64_t v6;
  void *__p[2];
  unsigned __int8 v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  (*(void (**)(_QWORD *, _QWORD *, _QWORD))(*a1 + 168))(a1, v10, 0);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n linearity", 11);
  v4 = (unsigned int *)a1[13];
  if (!v4)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x153, "linearity_", v2);
  kaldi::nnet1::MomentStatistics<signed char>(v4);
  if ((v9 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v6 = v9;
  else
    v6 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, v6);
  if ((char)v9 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v12);
}

void sub_1DE42566C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MomentStatistics<signed char>(unsigned int *a1)
{
  int v2;
  int v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  void *v10[3];

  v2 = kaldi::QuantizedMatrixBase<short>::NumRows(a1);
  v3 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a1);
  memset(v10, 0, sizeof(v10));
  kaldi::Vector<float>::Resize(v10, (v3 * v2), 0, v4, v5);
  kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)v10, a1);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v10, v6, v7, v8, v9);
  kaldi::Vector<float>::Destroy((uint64_t)v10);
}

void sub_1DE425718(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string::size_type v15;
  std::string *v16;
  void *__p[2];
  unsigned __int8 v18;
  void *v19[2];
  unsigned __int8 v20;
  std::string v21;
  std::string v22;
  std::string v23;

  std::string::basic_string[abi:ne180100]<0>(&v21, "\n  linearity_grad");
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 112), v4, v5, v6, v7);
  if ((v20 & 0x80u) == 0)
    v8 = v19;
  else
    v8 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v9 = v20;
  else
    v9 = (std::string::size_type)v19[1];
  v10 = std::string::append(&v21, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v22, ", lr-coef ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v18 & 0x80u) == 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v15 = v18;
  else
    v15 = (std::string::size_type)__p[1];
  v16 = std::string::append(&v23, (const std::string::value_type *)v14, v15);
  *a2 = *v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((char)v18 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_1DE425878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  if (a33 < 0)
    operator delete(a28);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unsigned int *v5;

  v5 = *(unsigned int **)(a1 + 104);
  if (!v5)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", a5);
  return kaldi::CuMatrixBase<float>::AddMatMat<signed char>(a3, a2, 111, v5, (const char *)0x70, 1.0, 0.0);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_QWORD *)(a1 + 104))
    kaldi::CuVectorBase<float>::AddMatVec<signed char>();
  kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", a5);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unsigned int *v5;

  v5 = *(unsigned int **)(a1 + 104);
  if (!v5)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", a5);
  return kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)a5, a4, 111, v5, (const char *)0x6F, 1.0, 0.0);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  const char *v8;
  _BYTE v9[16];

  v5 = *(_QWORD *)(a1 + 104);
  if (!v5)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x153, "linearity_", a5);
  kaldi::QuantizedMatrixBase<signed char>::Row(v5, a3, (uint64_t)v9);
  kaldi::CuVectorBase<float>::AddMatVec<signed char>(a4, a2, 111, (uint64_t)v9, v8, 1.0, 0.0);
}

float kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  _BYTE v11[16];

  v5 = *(_QWORD *)(a1 + 104);
  if (!v5)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x153, "linearity_", a5);
  kaldi::QuantizedMatrixBase<signed char>::Row(v5, a3, (uint64_t)v11);
  return kaldi::VecVec<float,signed char>(a2, (uint64_t)v11, v7, v8, v9);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  float v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;

  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  v10 = *(float *)(a1 + 60);
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * a5) = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a5, v11, v12, v13) + 32) = a4;
  v17 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a5, v14, v15, v16);
  kaldi::CuMatrixBase<float>::AddMatMat(v17, a3, CblasTrans, a2, (const char *)0x6F, 1.0, v10);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  _QWORD *v5;
  std::vector<int>::size_type v6;
  uint64_t v7;
  unsigned int v8;
  const char *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;

  if (!*(_BYTE *)(a1 + 224))
  {
    v2 = *(_DWORD *)(a1 + 160);
    v3 = *(_DWORD *)(a1 + 80);
    if (v3 > 1)
      v4 = v3 + 1;
    else
      v4 = 1;
    v5 = (_QWORD *)(a1 + 112);
    v6 = v4;
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 112, v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 136), v4);
    if (v4 >= 1)
    {
      v7 = 0;
      v8 = v2 & 0xFFFFFFFE;
      do
      {
        v10 = operator new();
        v11 = *(unsigned int **)(a1 + 104);
        if (!v11 || (v12 = kaldi::QuantizedMatrixBase<short>::NumRows(v11), (v13 = *(_QWORD *)(a1 + 104)) == 0))
          kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v9);
        v14 = kaldi::QuantizedMatrixBase<short>::NumCols(v13);
        kaldi::CuMatrix<float>::CuMatrix(v10, v12, v14, 0, 0, 0);
        v16 = *(_QWORD *)(*v5 + 8 * v7);
        *(_QWORD *)(*v5 + 8 * v7) = v10;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
        if (v8 == 2)
        {
          v17 = *(unsigned int **)(a1 + 104);
          if (!v17
            || (v18 = *(_QWORD *)(a1 + 136),
                v19 = kaldi::QuantizedMatrixBase<short>::NumRows(v17),
                (v20 = *(_QWORD *)(a1 + 104)) == 0))
          {
            kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v15);
          }
          v21 = kaldi::QuantizedMatrixBase<short>::NumCols(v20);
          kaldi::CuMatrix<float>::Resize(v18 + 48 * v7, v19, v21, 1u, 0);
          if (*(_DWORD *)(a1 + 160) == 3)
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 136) + 48 * v7, v22, v23, v24, v25, 1.0);
        }
        ++v7;
      }
      while (v7 != v6);
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 176), v6);
    *(_BYTE *)(a1 + 224) = 1;
  }
}

void sub_1DE425D10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 164) = a3;
  *(_DWORD *)(result + 160) = a2;
  *(_BYTE *)(result + 224) = 0;
  return result;
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::NormalizeGradients(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  float v7;
  int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;

  v7 = a6;
  v9 = *(_DWORD *)(a1 + 160);
  if (v9 == 3)
  {
    if (a6 >= 0.0 && a6 <= 1.0)
    {
      v12 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a2, a3, a4, a5);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v12, *(_QWORD *)(a1 + 136) + 48 * a2, v7);
    }
  }
  else if (v9 == 2)
  {
    if (a6 > 0.0)
    {
      if (*(_BYTE *)(a1 + 84))
        v7 = (float)*(int *)(*(_QWORD *)(a1 + 176) + 4 * a2) * a6;
      v14 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a2, a3, a4, a5);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v14, (unsigned int *)(*(_QWORD *)(a1 + 136) + 48 * a2), v7, v15, v16, v17);
    }
  }
  else if (v9 == 1 && a6 > 0.0)
  {
    if (*(_BYTE *)(a1 + 84))
      v7 = (float)*(int *)(*(_QWORD *)(a1 + 176) + 4 * a2) * a6;
    v10 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a2, a3, a4, a5);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v10, v7);
  }
}

float kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;

  if (!*(_BYTE *)(a1 + 84))
    return *(float *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 200);
  v3 = *(_QWORD *)(a1 + 208) - v2;
  if (!v3)
    return NAN;
  v4 = v3 >> 2;
  if ((int)v4 <= a2)
    return NAN;
  v5 = v4 - 1;
  if (a2 >= 0)
    v5 = a2;
  return *(float *)(v2 + 4 * v5);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::UpdateWeights()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "UpdateWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 314);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 232))(v8, a2, a3, 0, 0);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v9, 1, v10, v11);
  v15 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(v8, 0, v12, v13, v14);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)a4, v15, v16, v17, v18);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::VectorizeWeightsCorrs()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "VectorizeWeightsCorrs", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 334);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::SetLinearity(uint64_t a1, uint64_t a2)
{
  const char *v4;
  int v5;
  unsigned int *v6;
  const char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v5 = kaldi::MatrixBase<float>::NumRows(a2);
  v6 = *(unsigned int **)(a1 + 104);
  if (!v6)
    goto LABEL_7;
  if (v5 != kaldi::QuantizedMatrixBase<short>::NumRows(v6))
    kaldi::KaldiAssertFailure_((kaldi *)"SetLinearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x162, "linearity.NumRows() == Linearity().NumRows()", v7);
  v8 = kaldi::MatrixBase<float>::NumCols(a2);
  v9 = *(_QWORD *)(a1 + 104);
  if (!v9)
    goto LABEL_7;
  if (v8 != kaldi::QuantizedMatrixBase<short>::NumCols(v9))
    kaldi::KaldiAssertFailure_((kaldi *)"SetLinearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x163, "linearity.NumCols() == Linearity().NumCols()", v4);
  v10 = *(_QWORD *)(a1 + 104);
  if (!v10)
LABEL_7:
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v4);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(v10, a2);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  const char *v6;
  unsigned int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t result;
  _QWORD *v22;
  _QWORD v23[34];

  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  v7 = *(unsigned int **)(a1 + 104);
  if (!v7 || (v8 = kaldi::QuantizedMatrixBase<short>::NumRows(v7), (v9 = *(_QWORD *)(a1 + 104)) == 0))
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v6);
  *a3 = kaldi::QuantizedMatrixBase<short>::NumCols(v9) * v8;
  v13 = *(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112);
  if (v13)
  {
    v14 = v13 >> 3;
    if (*(_DWORD *)(a1 + 80) == 1)
      v15 = 0;
    else
      v15 = *(_DWORD *)(a1 + 80);
    if (v14 - 1 != v15)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "CountZeroCorr", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 372);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      v22 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
    }
    v16 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, v15, v10, v11, v12);
    result = kaldi::CuMatrixBase<float>::CountZeros(v16, v17, v18, v19, v20);
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  *(_OWORD *)(a1 + 56) = xmmword_1DEC3D450;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)(a1 + 88) = &unk_1EA9280D0;
  *(_QWORD *)(a1 + 96) = &unk_1EA9280F8;
  *(_QWORD *)a1 = &unk_1EA927F98;
  v6 = operator new();
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(v6, a3, a2);
  *(_QWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_BYTE *)(a1 + 224) = 0;
  return a1;
}

void sub_1DE42632C(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x1DF0ED014](v4, 0x10D0C4068EB0291);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  char v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25[35];

  *(_QWORD *)a1 = off_1EA92D6D8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1EA929750;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1EA9280D0;
  *(_QWORD *)(a1 + 96) = &unk_1EA9280F8;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)a1 = &unk_1EA927F98;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 112), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 136), *(_QWORD *)(a2 + 136), *(_QWORD *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 4));
  v6 = *(_DWORD *)(a2 + 160);
  v7 = *(_QWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 160) = v6;
  *(_QWORD *)(a1 + 164) = v7;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 176), *(const void **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 2);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 200), *(const void **)(a2 + 200), *(_QWORD *)(a2 + 208), (uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 2);
  v11 = *(_BYTE *)(a2 + 224);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_BYTE *)(a1 + 224) = v11;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "LinearTransform", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 79);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
  v12 = *(int **)(a2 + 104);
  if (v12)
  {
    kaldi::NewCuSubOrMat<short>(v12, v25);
    v13 = v25[0];
    v25[0] = 0;
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 104), v13);
    v14 = v25[0];
    v25[0] = 0;
    if (v14)
    {
      v15 = kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v14);
      MEMORY[0x1DF0ED014](v15, 0x10D0C4068EB0291);
    }
  }
  v17 = *(_QWORD *)(a1 + 112);
  v16 = *(_QWORD *)(a1 + 120);
  if (v16 != v17)
  {
    v18 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a2 + 112) + 8 * v18))
      {
        v19 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a2, v18, v8, v9, v10);
        kaldi::NewCuSubOrMat<float>(v19, *(unsigned __int8 *)(a1 + 16), v25);
        v20 = *(_QWORD *)(a1 + 112);
        v21 = v25[0];
        v25[0] = 0;
        v22 = *(_QWORD *)(v20 + 8 * v18);
        *(_QWORD *)(v20 + 8 * v18) = v21;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
        v23 = v25[0];
        v25[0] = 0;
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
        v17 = *(_QWORD *)(a1 + 112);
        v16 = *(_QWORD *)(a1 + 120);
      }
      ++v18;
    }
    while (v18 < (v16 - v17) >> 3);
  }
  if (*(_QWORD *)(a2 + 240) != *(_QWORD *)(a2 + 232))
    kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 232));
  return a1;
}

void sub_1DE42664C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  kaldi::nnet1::UpdatableComponent *v10;
  uint64_t v11;
  uint64_t *v12;
  void **v13;
  void **v14;
  void **v15;
  void *v17;
  void *v18;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v15);
  v17 = *v14;
  if (*v14)
  {
    *((_QWORD *)v10 + 26) = v17;
    operator delete(v17);
  }
  v18 = *v13;
  if (*v13)
  {
    *((_QWORD *)v10 + 23) = v18;
    operator delete(v18);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](v12, 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v11);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a9);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::NewCuSubOrMat<short>@<X0>(int *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = kaldi::QuantizedMatrix<short>::QuantizedMatrix(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1DE426738(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10D0C4068EB0291);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;

  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  v7 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, ((*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 3) - 1, v4, v5, v6);
  return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void **v6;

  *(_QWORD *)(a1 + 88) = &unk_1EA9280D0;
  v2 = a1 + 88;
  *(_QWORD *)a1 = &unk_1EA927F98;
  *(_QWORD *)(a1 + 96) = &unk_1EA9280F8;
  v3 = a1 + 96;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 232));
  v4 = *(void **)(a1 + 200);
  if (v4)
  {
    *(_QWORD *)(a1 + 208) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 176);
  if (v5)
  {
    *(_QWORD *)(a1 + 184) = v5;
    operator delete(v5);
  }
  v6 = (void **)(a1 + 136);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)(a1 + 112);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 104), 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(a1);
  JUMPOUT(0x1DF0ED014);
}

void `non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(uint64_t a1)
{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(a1 - 88);
}

{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(a1 - 96);
}

{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(a1 - 88);
  JUMPOUT(0x1DF0ED014);
}

{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(a1 - 96);
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform<kaldi::QuantizedMatrix<short>>(v2, a1);
  return v2;
}

void sub_1DE42692C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit(uint64_t a1)
{
  return kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit(a1 - 88);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform(v2, a1);
  return v2;
}

void sub_1DE42699C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit(uint64_t a1)
{
  return kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit(a1 - 96);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform(v2, a1);
  return v2;
}

void sub_1DE426A0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  void *v11;
  BOOL v13;
  float *v14;
  BOOL v18;
  BOOL v20;
  std::string *v25;
  BOOL v26;
  BOOL v28;
  _QWORD *v29;
  void **v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int inited;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  int v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  float v43;
  float v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  unsigned int *v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  void **v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  _BYTE v61[16];
  uint64_t v62;
  void *__p;
  void *v64;
  void **v65[34];
  void *v66[3];
  int v67;
  std::string v68;
  std::string v69;
  int v70;

  v70 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v69);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 160), &v68);
  v67 = -1;
  memset(v66, 0, sizeof(v66));
  v56 = v66;
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_106;
    kaldi::ReadToken(a2, 0, (uint64_t)v66, v6, v7);
    if ((SHIBYTE(v66[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v66[2]))
      {
        case 9:
          goto LABEL_81;
        case 0xC:
          goto LABEL_76;
        case 0xD:
          if (v66[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v66 + 5) != (void *)0x3E7665646474536DLL)
            goto LABEL_92;
          goto LABEL_51;
        case 0xF:
          v26 = v66[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v66 + 7) == (void *)0x3E66656F43657461;
          v14 = (float *)(a1 + 168);
          if (v26)
            goto LABEL_86;
          if (HIBYTE(v66[2]) == 9)
            goto LABEL_81;
          if (HIBYTE(v66[2]) != 12)
            goto LABEL_92;
LABEL_76:
          if (v66[0] != (void *)0x536D6F646E61523CLL || LODWORD(v66[1]) != 1046766949)
            goto LABEL_80;
          goto LABEL_88;
        case 0x12:
          goto LABEL_61;
        case 0x13:
          if (v66[0] == (void *)0x61725474696E493CLL
            && v66[1] == (void *)0x79546D726F66736ELL
            && *(void **)((char *)&v66[1] + 3) == (void *)0x3E657079546D726FLL)
          {
            goto LABEL_89;
          }
          if (HIBYTE(v66[2]) == 9)
            goto LABEL_81;
          if (HIBYTE(v66[2]) != 18)
            goto LABEL_91;
LABEL_61:
          if (v66[0] == (void *)0x6E6569646172473CLL
            && v66[1] == (void *)0x7079546D726F4E74
            && LOWORD(v66[2]) == 15973)
          {
            goto LABEL_69;
          }
LABEL_80:
          if (HIBYTE(v66[2]) != 9)
          {
LABEL_91:
            if (HIBYTE(v66[2]) == 12)
              goto LABEL_101;
            goto LABEL_92;
          }
LABEL_81:
          v28 = v66[0] == (void *)0x6461724778614D3CLL && LOBYTE(v66[1]) == 62;
          v14 = (float *)(a1 + 164);
          if (!v28)
            goto LABEL_92;
          break;
        default:
          goto LABEL_92;
      }
      goto LABEL_86;
    }
    v11 = v66[1];
    if (v66[1] == (void *)13
      && *(_QWORD *)v66[0] == 0x74536D617261503CLL
      && *(_QWORD *)((char *)v66[0] + 5) == 0x3E7665646474536DLL)
    {
LABEL_51:
      v14 = (float *)&v70;
      goto LABEL_86;
    }
    if (v66[1] == (void *)15)
    {
      v13 = *(_QWORD *)v66[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v66[0] + 7) == 0x3E66656F43657461;
      v14 = (float *)(a1 + 168);
      if (v13)
        goto LABEL_86;
      v11 = v66[1];
    }
    if (v11 == (void *)12)
    {
      if (*(_QWORD *)v66[0] == 0x536D6F646E61523CLL && *((_DWORD *)v66[0] + 2) == 1046766949)
      {
LABEL_88:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v67, v8, v9);
        goto LABEL_87;
      }
      v11 = v66[1];
    }
    if (v11 == (void *)19)
    {
      if (*(_QWORD *)v66[0] == 0x61725474696E493CLL
        && *((_QWORD *)v66[0] + 1) == 0x79546D726F66736ELL
        && *(_QWORD *)((char *)v66[0] + 11) == 0x3E657079546D726FLL)
      {
LABEL_89:
        v25 = &v69;
        goto LABEL_90;
      }
      v11 = v66[1];
    }
    if (v11 != (void *)18)
      goto LABEL_45;
    v18 = *(_QWORD *)v66[0] == 0x6E6569646172473CLL && *((_QWORD *)v66[0] + 1) == 0x7079546D726F4E74;
    if (!v18 || *((_WORD *)v66[0] + 8) != 15973)
      break;
LABEL_69:
    v25 = &v68;
LABEL_90:
    kaldi::ReadToken(a2, 0, (uint64_t)v25, v8, v9);
LABEL_87:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v11 = v66[1];
LABEL_45:
  if (v11 != (void *)9)
    goto LABEL_99;
  v20 = *(_QWORD *)v66[0] == 0x6461724778614D3CLL && *((_BYTE *)v66[0] + 8) == 62;
  v14 = (float *)(a1 + 164);
  if (v20)
  {
LABEL_86:
    kaldi::ReadBasicType<float>(a2, 0, v14, v8, v9);
    goto LABEL_87;
  }
  v11 = v66[1];
LABEL_99:
  if (v11 != (void *)12)
    goto LABEL_92;
  v56 = (void **)v66[0];
LABEL_101:
  if (*v56 != (void *)0x6E6F706D6F432F3CLL || *((_DWORD *)v56 + 2) != 1047817829)
  {
LABEL_92:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v65, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 140);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v66[2]) >= 0)
      v30 = v66;
    else
      v30 = (void **)v66[0];
    if (SHIBYTE(v66[2]) >= 0)
      v31 = HIBYTE(v66[2]);
    else
      v31 = (uint64_t)v66[1];
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" (ParamStddev|LearnRateCoef|InitTransformType|RandomSeed|GradientNormType|MaxGrad)", 82);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v65);
  }
LABEL_106:
  inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v69);
  *(_DWORD *)(a1 + 160) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v68);
  if (v67 >= 1)
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v67);
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v61, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)&v57, *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 8), 0, 0);
  v39 = *(_DWORD *)(a1 + 12);
  if (v39 < 1)
    goto LABEL_134;
  v40 = 0;
  LODWORD(v41) = *(_DWORD *)(a1 + 8);
  while (2)
  {
    if ((int)v41 < 1)
      goto LABEL_133;
    v42 = 0;
    while (2)
    {
      switch(inited)
      {
        case 0:
          if (v40 >= v59 || v42 >= v58)
LABEL_149:
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v38);
          v45 = v57 + 4 * (int)v40 * v60;
          if (v40 == v42)
            v46 = 1.0;
          else
            v46 = 0.0;
          goto LABEL_130;
        case 2:
          v47 = *(float *)&v70;
          kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v61, 0, v36, v37, v38);
          if (v40 >= v59 || v42 >= v58)
            goto LABEL_149;
          v45 = v57 + 4 * (int)v40 * v60;
          v46 = v47 * v48;
LABEL_130:
          *(float *)(v45 + 4 * v42) = v46;
          break;
        case 1:
          v43 = *(float *)&v70;
          v44 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v36, v37, v38);
          if (v40 >= v59 || v42 >= v58)
            goto LABEL_149;
          v45 = v57 + 4 * (int)v40 * v60;
          v46 = (v44 + -0.5) * (float)(v43 + v43);
          goto LABEL_130;
      }
      ++v42;
      v41 = *(int *)(a1 + 8);
      if ((uint64_t)v42 < v41)
        continue;
      break;
    }
    v39 = *(_DWORD *)(a1 + 12);
LABEL_133:
    if ((uint64_t)++v40 < v39)
      continue;
    break;
  }
LABEL_134:
  v51 = *(unsigned int **)(a1 + 104);
  if (!v51)
    goto LABEL_150;
  v52 = kaldi::QuantizedMatrixBase<short>::NumRows(v51);
  if (v52 != kaldi::MatrixBase<float>::NumRows((uint64_t)&v57))
    goto LABEL_148;
  v53 = *(_QWORD *)(a1 + 104);
  if (!v53)
    goto LABEL_150;
  v54 = kaldi::QuantizedMatrixBase<short>::NumCols(v53);
  if (v54 != kaldi::MatrixBase<float>::NumCols((uint64_t)&v57))
  {
LABEL_148:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v65, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 163);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Linearity().NumRows() == mat.NumRows() && Linearity().NumCols() == mat.NumCols()", 80);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v65);
  }
  v55 = *(_QWORD *)(a1 + 104);
  if (!v55)
LABEL_150:
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v38);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat(v55, (uint64_t)&v57);
  kaldi::Matrix<float>::~Matrix((uint64_t)&v57);
  if (__p)
  {
    v64 = __p;
    operator delete(__p);
  }
  v65[0] = (void **)&v62;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v65);
  if (SHIBYTE(v66[2]) < 0)
    operator delete(v66[0]);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
}

void sub_1DE42721C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  kaldi::Matrix<float>::~Matrix(&v3);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)&v4);
  if (*(char *)(v1 - 185) < 0)
    operator delete(*(void **)(v1 - 208));
  if (*(char *)(v1 - 153) < 0)
    operator delete(*(void **)(v1 - 176));
  if (*(char *)(v1 - 129) < 0)
    operator delete(*(void **)(v1 - 152));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::ReadData(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  BOOL v11;
  __int128 *v13;
  uint64_t v14;
  BOOL v15;
  float *v16;
  uint64_t v19;
  int v20;
  BOOL v21;
  BOOL v22;
  int *v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t result;
  const char *v27;
  _QWORD *v28;
  __int128 *v29;
  uint64_t v30;
  void *__p[2];
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  while (kaldi::Peek(a2, a3) == 60)
  {
    v34 = 0uLL;
    v35 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v34, v7, v8);
    if (SHIBYTE(v35) < 0)
    {
      v14 = *((_QWORD *)&v34 + 1);
      if (*((_QWORD *)&v34 + 1) != 15
        || (*(_QWORD *)v34 == 0x61526E7261654C3CLL ? (v15 = *(_QWORD *)(v34 + 7) == 0x3E66656F43657461) : (v15 = 0),
            v16 = (float *)(a1 + 168),
            !v15))
      {
        if (*((_QWORD *)&v34 + 1) == 18)
        {
          if (*(_QWORD *)v34 == 0x6E6569646172473CLL
            && *(_QWORD *)(v34 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v34 + 16) == 15973)
          {
            goto LABEL_46;
          }
          v14 = *((_QWORD *)&v34 + 1);
        }
        if (v14 != 9)
          goto LABEL_54;
        v13 = (__int128 *)v34;
        goto LABEL_31;
      }
    }
    else
    {
      if (HIBYTE(v35) == 9)
      {
        v13 = &v34;
LABEL_31:
        v19 = *(_QWORD *)v13;
        v20 = *((unsigned __int8 *)v13 + 8);
        v21 = v19 == 0x6461724778614D3CLL && v20 == 62;
        v16 = (float *)(a1 + 164);
        if (!v21)
        {
LABEL_54:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 181);
          v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (v35 >= 0)
            v29 = &v34;
          else
            v29 = (__int128 *)v34;
          if (v35 >= 0)
            v30 = HIBYTE(v35);
          else
            v30 = *((_QWORD *)&v34 + 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_41;
      }
      if (HIBYTE(v35) != 15)
      {
        if (HIBYTE(v35) != 18)
          goto LABEL_54;
        v11 = (_QWORD)v34 == 0x6E6569646172473CLL && *((_QWORD *)&v34 + 1) == 0x7079546D726F4E74;
        if (!v11 || (unsigned __int16)v35 != 15973)
          goto LABEL_54;
LABEL_46:
        __p[0] = 0;
        __p[1] = 0;
        v33 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p, v9, v10);
        *(_DWORD *)(a1 + 160) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v33) < 0)
          operator delete(__p[0]);
        goto LABEL_42;
      }
      v22 = (_QWORD)v34 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v34 + 7) == 0x3E66656F43657461;
      v16 = (float *)(a1 + 168);
      if (!v22)
        goto LABEL_54;
    }
LABEL_41:
    kaldi::ReadBasicType<float>(a2, a3, v16, v9, v10);
LABEL_42:
    if (SHIBYTE(v35) < 0)
      operator delete((void *)v34);
  }
  v23 = *(int **)(a1 + 104);
  if (!v23)
    goto LABEL_61;
  kaldi::QuantizedMatrix<short>::Read(v23, a2, a3, a4, v8);
  *(_BYTE *)(a1 + 16) = 0;
  v24 = *(unsigned int **)(a1 + 104);
  if (!v24)
    goto LABEL_61;
  if (kaldi::QuantizedMatrixBase<short>::NumRows(v24) != *(_DWORD *)(a1 + 12))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0xBF, "Linearity().NumRows() == output_dim_", v8);
  v25 = *(_QWORD *)(a1 + 104);
  if (!v25)
LABEL_61:
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v8);
  result = kaldi::QuantizedMatrixBase<short>::NumCols(v25);
  if ((_DWORD)result != *(_DWORD *)(a1 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0xC0, "Linearity().NumCols() == input_dim_", v27);
  return result;
}

void sub_1DE4275E0()
{
  JUMPOUT(0x1DE4275E8);
}

_QWORD *kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::WriteConfig(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  std::string __p;

  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v8, v9);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 160), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v10, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v12, v13);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

void sub_1DE4276BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::WriteData(_QWORD *a1, _QWORD *a2, int a3, int a4)
{
  const char *v8;
  int *v9;

  (*(void (**)(_QWORD *))(*a1 + 168))(a1);
  v9 = (int *)a1[13];
  if (!v9)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x153, "linearity_", v8);
  return kaldi::QuantizedMatrix<short>::Write(v9, a2, a3, a4);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::NumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unsigned int *v6;
  int v7;
  uint64_t v8;

  v6 = *(unsigned int **)(a1 + 104);
  if (!v6 || (v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6), (v8 = *(_QWORD *)(a1 + 104)) == 0))
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x153, "linearity_", a5);
  return kaldi::QuantizedMatrixBase<short>::NumCols(v8) * v7;
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::GetParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unsigned int *v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  unsigned int *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(unsigned int **)(a1 + 104);
  if (!v6)
    goto LABEL_6;
  v8 = kaldi::QuantizedMatrixBase<short>::NumRows(v6);
  v9 = *(_QWORD *)(a1 + 104);
  if (!v9)
    goto LABEL_6;
  v10 = kaldi::QuantizedMatrixBase<short>::NumCols(v9) * v8;
  kaldi::Vector<float>::Resize((void **)a2, v10, 0, v11, v12);
  v15 = 0;
  v16 = 0;
  if (v10 > *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", a5);
  v14 = *(void **)a2;
  LODWORD(v15) = v10;
  v13 = *(unsigned int **)(a1 + 104);
  if (!v13)
LABEL_6:
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x153, "linearity_", a5);
  kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v14, v13);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::SetParams(_QWORD *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  unsigned int *v6;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_QWORD *))(*a1 + 176))(a1))
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0xDA, "wei_src.Dim() == NumParams()", v5);
  v6 = (unsigned int *)a1[13];
  if (!v6)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v5);
  return kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v6, (char **)a2);
}

float kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::SumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int *v5;

  v5 = *(int **)(a1 + 104);
  if (!v5)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x153, "linearity_", a5);
  return kaldi::QuantizedMatrixBase<short>::Sum(v5, a2, a3, a4, a5);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::PerturbParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _BYTE v11[48];

  v6 = *(unsigned int **)(a1 + 104);
  if (v6)
  {
    v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6);
    v8 = *(_QWORD *)(a1 + 104);
    if (v8)
    {
      v9 = kaldi::QuantizedMatrixBase<short>::NumCols(v8);
      kaldi::CuMatrix<float>::CuMatrix((uint64_t)v11, v7, v9, 1u, 0, 0);
      kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v11);
      if (*(_QWORD *)(a1 + 104))
        kaldi::QuantizedMatrixBase<short>::AddMat();
      kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v10);
    }
  }
  kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", a5);
}

void sub_1DE427A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::Info(_QWORD *a1)
{
  const char *v2;
  _QWORD *v3;
  unsigned int *v4;
  void **v5;
  uint64_t v6;
  void *__p[2];
  unsigned __int8 v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  (*(void (**)(_QWORD *, _QWORD *, _QWORD))(*a1 + 168))(a1, v10, 0);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n linearity", 11);
  v4 = (unsigned int *)a1[13];
  if (!v4)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x153, "linearity_", v2);
  kaldi::nnet1::MomentStatistics<short>(v4);
  if ((v9 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v6 = v9;
  else
    v6 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, v6);
  if ((char)v9 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v12);
}

void sub_1DE427B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MomentStatistics<short>(unsigned int *a1)
{
  int v2;
  int v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  void *v10[3];

  v2 = kaldi::QuantizedMatrixBase<short>::NumRows(a1);
  v3 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a1);
  memset(v10, 0, sizeof(v10));
  kaldi::Vector<float>::Resize(v10, (v3 * v2), 0, v4, v5);
  kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)v10, a1);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v10, v6, v7, v8, v9);
  kaldi::Vector<float>::Destroy((uint64_t)v10);
}

void sub_1DE427C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string::size_type v15;
  std::string *v16;
  void *__p[2];
  unsigned __int8 v18;
  void *v19[2];
  unsigned __int8 v20;
  std::string v21;
  std::string v22;
  std::string v23;

  std::string::basic_string[abi:ne180100]<0>(&v21, "\n  linearity_grad");
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 112), v4, v5, v6, v7);
  if ((v20 & 0x80u) == 0)
    v8 = v19;
  else
    v8 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v9 = v20;
  else
    v9 = (std::string::size_type)v19[1];
  v10 = std::string::append(&v21, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v22, ", lr-coef ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v18 & 0x80u) == 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v15 = v18;
  else
    v15 = (std::string::size_type)__p[1];
  v16 = std::string::append(&v23, (const std::string::value_type *)v14, v15);
  *a2 = *v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((char)v18 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_1DE427D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  if (a33 < 0)
    operator delete(a28);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unsigned int *v5;

  v5 = *(unsigned int **)(a1 + 104);
  if (!v5)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", a5);
  return kaldi::CuMatrixBase<float>::AddMatMat<short>(a3, a2, 111, v5, (const char *)0x70, 1.0, 0.0);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_QWORD *)(a1 + 104))
    kaldi::CuVectorBase<float>::AddMatVec<short>();
  kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", a5);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unsigned int *v5;

  v5 = *(unsigned int **)(a1 + 104);
  if (!v5)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", a5);
  return kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)a5, a4, 111, v5, (const char *)0x6F, 1.0, 0.0);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  const char *v8;
  _BYTE v9[16];

  v5 = *(_QWORD *)(a1 + 104);
  if (!v5)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x153, "linearity_", a5);
  kaldi::QuantizedMatrixBase<short>::Row(v5, a3, (uint64_t)v9);
  kaldi::CuVectorBase<float>::AddMatVec<short>(a4, a2, 111, (uint64_t)v9, v8, 1.0, 0.0);
}

float kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  _BYTE v11[16];

  v5 = *(_QWORD *)(a1 + 104);
  if (!v5)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x153, "linearity_", a5);
  kaldi::QuantizedMatrixBase<short>::Row(v5, a3, (uint64_t)v11);
  return kaldi::VecVec<float,short>(a2, (uint64_t)v11, v7, v8, v9);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  float v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;

  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  v10 = *(float *)(a1 + 60);
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * a5) = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a5, v11, v12, v13) + 32) = a4;
  v17 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a5, v14, v15, v16);
  kaldi::CuMatrixBase<float>::AddMatMat(v17, a3, CblasTrans, a2, (const char *)0x6F, 1.0, v10);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::EnsureCorrs(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  _QWORD *v5;
  std::vector<int>::size_type v6;
  uint64_t v7;
  unsigned int v8;
  const char *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;

  if (!*(_BYTE *)(a1 + 224))
  {
    v2 = *(_DWORD *)(a1 + 160);
    v3 = *(_DWORD *)(a1 + 80);
    if (v3 > 1)
      v4 = v3 + 1;
    else
      v4 = 1;
    v5 = (_QWORD *)(a1 + 112);
    v6 = v4;
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 112, v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 136), v4);
    if (v4 >= 1)
    {
      v7 = 0;
      v8 = v2 & 0xFFFFFFFE;
      do
      {
        v10 = operator new();
        v11 = *(unsigned int **)(a1 + 104);
        if (!v11 || (v12 = kaldi::QuantizedMatrixBase<short>::NumRows(v11), (v13 = *(_QWORD *)(a1 + 104)) == 0))
          kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v9);
        v14 = kaldi::QuantizedMatrixBase<short>::NumCols(v13);
        kaldi::CuMatrix<float>::CuMatrix(v10, v12, v14, 0, 0, 0);
        v16 = *(_QWORD *)(*v5 + 8 * v7);
        *(_QWORD *)(*v5 + 8 * v7) = v10;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
        if (v8 == 2)
        {
          v17 = *(unsigned int **)(a1 + 104);
          if (!v17
            || (v18 = *(_QWORD *)(a1 + 136),
                v19 = kaldi::QuantizedMatrixBase<short>::NumRows(v17),
                (v20 = *(_QWORD *)(a1 + 104)) == 0))
          {
            kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v15);
          }
          v21 = kaldi::QuantizedMatrixBase<short>::NumCols(v20);
          kaldi::CuMatrix<float>::Resize(v18 + 48 * v7, v19, v21, 1u, 0);
          if (*(_DWORD *)(a1 + 160) == 3)
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 136) + 48 * v7, v22, v23, v24, v25, 1.0);
        }
        ++v7;
      }
      while (v7 != v6);
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 176), v6);
    *(_BYTE *)(a1 + 224) = 1;
  }
}

void sub_1DE428204(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 164) = a3;
  *(_DWORD *)(result + 160) = a2;
  *(_BYTE *)(result + 224) = 0;
  return result;
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::NormalizeGradients(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  float v7;
  int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;

  v7 = a6;
  v9 = *(_DWORD *)(a1 + 160);
  if (v9 == 3)
  {
    if (a6 >= 0.0 && a6 <= 1.0)
    {
      v12 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a2, a3, a4, a5);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v12, *(_QWORD *)(a1 + 136) + 48 * a2, v7);
    }
  }
  else if (v9 == 2)
  {
    if (a6 > 0.0)
    {
      if (*(_BYTE *)(a1 + 84))
        v7 = (float)*(int *)(*(_QWORD *)(a1 + 176) + 4 * a2) * a6;
      v14 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a2, a3, a4, a5);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v14, (unsigned int *)(*(_QWORD *)(a1 + 136) + 48 * a2), v7, v15, v16, v17);
    }
  }
  else if (v9 == 1 && a6 > 0.0)
  {
    if (*(_BYTE *)(a1 + 84))
      v7 = (float)*(int *)(*(_QWORD *)(a1 + 176) + 4 * a2) * a6;
    v10 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a2, a3, a4, a5);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v10, v7);
  }
}

float kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;

  if (!*(_BYTE *)(a1 + 84))
    return *(float *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 200);
  v3 = *(_QWORD *)(a1 + 208) - v2;
  if (!v3)
    return NAN;
  v4 = v3 >> 2;
  if ((int)v4 <= a2)
    return NAN;
  v5 = v4 - 1;
  if (a2 >= 0)
    v5 = a2;
  return *(float *)(v2 + 4 * v5);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::UpdateWeights()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "UpdateWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 314);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 232))(v8, a2, a3, 0, 0);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v9, 1, v10, v11);
  v15 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(v8, 0, v12, v13, v14);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)a4, v15, v16, v17, v18);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::VectorizeWeightsCorrs()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "VectorizeWeightsCorrs", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 334);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::SetLinearity(uint64_t a1, uint64_t a2)
{
  const char *v4;
  int v5;
  unsigned int *v6;
  const char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v5 = kaldi::MatrixBase<float>::NumRows(a2);
  v6 = *(unsigned int **)(a1 + 104);
  if (!v6)
    goto LABEL_7;
  if (v5 != kaldi::QuantizedMatrixBase<short>::NumRows(v6))
    kaldi::KaldiAssertFailure_((kaldi *)"SetLinearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x162, "linearity.NumRows() == Linearity().NumRows()", v7);
  v8 = kaldi::MatrixBase<float>::NumCols(a2);
  v9 = *(_QWORD *)(a1 + 104);
  if (!v9)
    goto LABEL_7;
  if (v8 != kaldi::QuantizedMatrixBase<short>::NumCols(v9))
    kaldi::KaldiAssertFailure_((kaldi *)"SetLinearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x163, "linearity.NumCols() == Linearity().NumCols()", v4);
  v10 = *(_QWORD *)(a1 + 104);
  if (!v10)
LABEL_7:
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v4);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat(v10, a2);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  const char *v6;
  unsigned int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t result;
  _QWORD *v22;
  _QWORD v23[34];

  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  v7 = *(unsigned int **)(a1 + 104);
  if (!v7 || (v8 = kaldi::QuantizedMatrixBase<short>::NumRows(v7), (v9 = *(_QWORD *)(a1 + 104)) == 0))
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v6);
  *a3 = kaldi::QuantizedMatrixBase<short>::NumCols(v9) * v8;
  v13 = *(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112);
  if (v13)
  {
    v14 = v13 >> 3;
    if (*(_DWORD *)(a1 + 80) == 1)
      v15 = 0;
    else
      v15 = *(_DWORD *)(a1 + 80);
    if (v14 - 1 != v15)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "CountZeroCorr", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 372);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      v22 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
    }
    v16 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, v15, v10, v11, v12);
    result = kaldi::CuMatrixBase<float>::CountZeros(v16, v17, v18, v19, v20);
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearTransform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  *(_OWORD *)(a1 + 56) = xmmword_1DEC3D450;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)(a1 + 88) = &unk_1EA927DC0;
  *(_QWORD *)(a1 + 96) = &unk_1EA927DE8;
  *(_QWORD *)a1 = &unk_1EA927C88;
  v6 = operator new();
  kaldi::CuMatrix<float>::CuMatrix(v6, a3, a2, 0, 0, 0);
  *(_QWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_BYTE *)(a1 + 224) = 0;
  return a1;
}

void sub_1DE42882C(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x1DF0ED014](v4, 0x1081C40CC61A6CELL);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[2];
  uint64_t v32;
  uint64_t v33;

  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.cc", 88);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, "Weights are already vectorized");
LABEL_24:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v31, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.cc", 91);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Performing  vectorization of linear component", 45);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v31);
  }
  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 16) * *(_DWORD *)(*(_QWORD *)(a1 + 104) + 20);
  kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 104), a2, v31);
  v10 = v31[0];
  v31[0] = 0;
  v11 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
    v12 = v31[0];
    v31[0] = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  }
  v32 = 0;
  v31[0] = (uint64_t)&unk_1EA926538;
  if (v8 > *(_DWORD *)(a3 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
  v31[1] = *(_QWORD *)(a3 + 8);
  LODWORD(v32) = v8;
  v33 = *(_QWORD *)(a3 + 24);
  kaldi::CuVectorBase<float>::Set((uint64_t)v31, *(float *)(a1 + 168));
  v13 = *(_DWORD *)(a3 + 16) - v8;
  *(_QWORD *)(a3 + 8) += 4 * v8;
  *(_DWORD *)(a3 + 16) = v13;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  v17 = a4[1];
  if ((v17 - *a4) >> 5 != (uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.cc", 109);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, "veccorrs->size() == linearity_corr_.size()");
    goto LABEL_24;
  }
  if (v17 == *a4)
    goto LABEL_20;
  v18 = 0;
  do
  {
    v19 = *(_DWORD *)(kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, v18, v14, v15, v16)
                    + 20);
    v23 = *(_DWORD *)(kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, v18, v20, v21, v22)
                    + 16)
        * v19;
    if (v23 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.cc", 111);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, "LinearityCorr(ic).NumRows() * LinearityCorr(ic).NumCols() == NumParams()");
      goto LABEL_24;
    }
    ++v18;
    v24 = *a4;
    v25 = a4[1];
  }
  while (v18 < (v25 - *a4) >> 5);
  if (v25 != v24)
  {
    v26 = 0;
    do
    {
      kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 112) + 8 * v26), v24 + 32 * v26, v31);
      v27 = *(_QWORD *)(a1 + 112);
      v28 = v31[0];
      v31[0] = 0;
      v29 = *(_QWORD *)(v27 + 8 * v26);
      *(_QWORD *)(v27 + 8 * v26) = v28;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
      v30 = v31[0];
      v31[0] = 0;
      if (v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
      ++v26;
      v24 = *a4;
    }
    while (v26 < (a4[1] - *a4) >> 5);
  }
LABEL_20:
  *(_BYTE *)(a1 + 16) = 1;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v31, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.cc", 125);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Done  vectorization of linear component", 39);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v31);
  }
}

void sub_1DE428BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::UpdateWeights(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  int *v34;
  int v35;
  uint64_t v36;
  int *v37;
  int v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  _BYTE *v47;
  _BYTE *v48;
  _QWORD v49[34];

  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  v9 = *(_QWORD *)(a1 + 104);
  if (!v9)
    goto LABEL_38;
  v11 = *(float *)(a1 + 64);
  v10 = *(float *)(a1 + 68);
  v12 = *(float *)(a1 + 72);
  v13 = *(_DWORD *)(a1 + 76);
  *(_QWORD *)(v9 + 32) = a2;
  v14 = *(_DWORD *)(a1 + 80);
  if (a3 >= 0)
    v15 = a3;
  else
    v15 = *(_DWORD *)(a1 + 80);
  if (v14 == 1)
    v16 = 0;
  else
    v16 = v15;
  if ((int)v16 > v14)
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.cc", (const char *)0x94, "batch_idx <= opts_.num_subbatches", v8);
  *(_QWORD *)(kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, v16, v6, v7, v8) + 32) = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 136) + 48 * (int)v16 + 32) = a2;
  if ((_DWORD)v16 == *(_DWORD *)(a1 + 80))
  {
    v19 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, v16, v17, v18, v8);
    v23 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, 0, v20, v21, v22);
    kaldi::CuMatrixBase<float>::AddMat(v19, v23, 111, v24, v25, 1.0, 0.0);
    if (*(int *)(a1 + 80) > 1)
    {
      v26 = 1;
      do
      {
        v27 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, v16, v17, v18, v8);
        v31 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, v26, v28, v29, v30);
        kaldi::CuMatrixBase<float>::AddMat(v27, v31, 111, v32, v33, 1.0, 1.0);
        ++v26;
      }
      while (v26 < *(_DWORD *)(a1 + 80));
    }
    v34 = *(int **)(a1 + 176);
    v34[(int)v16] = 0;
    if ((int)v16 >= 1)
    {
      v35 = 0;
      v36 = v16;
      v37 = v34;
      do
      {
        v38 = *v37++;
        v35 += v38;
        v34[(int)v16] = v35;
        --v36;
      }
      while (v36);
    }
  }
  v39 = *(float *)(a1 + 56);
  if (*(_BYTE *)(a1 + 84))
    v39 = v39 / (float)*(int *)(*(_QWORD *)(a1 + 176) + 4 * (int)v16);
  v40 = *(_QWORD *)(a1 + 200);
  if ((int)v16 >= (unint64_t)((*(_QWORD *)(a1 + 208) - v40) >> 2))
  {
    LODWORD(v49[0]) = 2143289344;
    std::vector<float>::resize(a1 + 200, (int)v16 + 1, v49);
    v40 = *(_QWORD *)(a1 + 200);
  }
  *(float *)(v40 + 4 * (int)v16) = v39;
  if (*(float *)(a1 + 164) >= 0.0)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 248))(a1, v16);
  if (v11 != 0.0)
  {
    v41 = *(_QWORD *)(a1 + 104);
    if (!v41)
      goto LABEL_38;
    kaldi::CuMatrixBase<float>::AddMat(v41, *(_QWORD *)(a1 + 104), 111, v18, v8, (float)-(float)(v39 * v11) * (float)*(int *)(*(_QWORD *)(a1 + 176) + 4 * (int)v16), 1.0);
  }
  if (v10 == 0.0)
    goto LABEL_28;
  v42 = *(_QWORD *)(a1 + 104);
  if (!v42)
LABEL_38:
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v8);
  v43 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, v16, v17, v18, v8);
  kaldi::cu::RegularizeL1<float>(v42, v43, (float)(v10 * v39) * (float)*(int *)(*(_QWORD *)(a1 + 176) + 4 * (int)v16), v39, v44, v45, v46);
LABEL_28:
  if (v12 > 0.0)
  {
    if (*(int *)(a1 + 80) >= 2)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.cc", 185);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v49, "the multi batch gradient quantization does not work yet");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
    }
    if (*(_QWORD *)(a1 + 240) == *(_QWORD *)(a1 + 232))
      kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 232));
    kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 232), v13, v12, v17, v18, v8);
  }
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::ApplyCorr(a1, v16, v39);
  v47 = *(_BYTE **)(a1 + 176);
  if ((_DWORD)v16 == *(_DWORD *)(a1 + 80))
  {
    v48 = *(_BYTE **)(a1 + 184);
    if (v47 != v48)
      bzero(v47, ((v48 - v47 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  else
  {
    *(_DWORD *)&v47[4 * (int)v16] = 0;
  }
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::GetType()
{
  return 258;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::GetType()
{
  return 259;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::GetType()
{
  return 260;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23[35];

  *(_QWORD *)a1 = off_1EA92D6D8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1EA929750;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1EA927F48;
  *(_QWORD *)(a1 + 96) = &unk_1EA927F70;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)a1 = &unk_1EA927E10;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 112), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 136), *(_QWORD *)(a2 + 136), *(_QWORD *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 4));
  v6 = *(_DWORD *)(a2 + 160);
  v7 = *(_QWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 160) = v6;
  *(_QWORD *)(a1 + 164) = v7;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 176), *(const void **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 2);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 200), *(const void **)(a2 + 200), *(_QWORD *)(a2 + 208), (uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 2);
  v11 = *(_BYTE *)(a2 + 224);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_BYTE *)(a1 + 224) = v11;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "LinearTransform", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.cc", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
  }
  v12 = *(_QWORD *)(a2 + 104);
  if (v12)
  {
    v13 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v13, v12);
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 104), v13);
  }
  v15 = *(_QWORD *)(a1 + 112);
  v14 = *(_QWORD *)(a1 + 120);
  if (v14 != v15)
  {
    v16 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a2 + 112) + 8 * v16))
      {
        v17 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a2, v16, v8, v9, v10);
        kaldi::NewCuSubOrMat<float>(v17, *(unsigned __int8 *)(a1 + 16), v23);
        v18 = *(_QWORD *)(a1 + 112);
        v19 = v23[0];
        v23[0] = 0;
        v20 = *(_QWORD *)(v18 + 8 * v16);
        *(_QWORD *)(v18 + 8 * v16) = v19;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
        v21 = v23[0];
        v23[0] = 0;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
        v15 = *(_QWORD *)(a1 + 112);
        v14 = *(_QWORD *)(a1 + 120);
      }
      ++v16;
    }
    while (v16 < (v14 - v15) >> 3);
  }
  if (*(_QWORD *)(a2 + 240) != *(_QWORD *)(a2 + 232))
    kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 232));
  return a1;
}

void sub_1DE429224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  kaldi::nnet1::UpdatableComponent *v4;
  uint64_t *v5;
  void **v6;
  void **v7;
  void **v8;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a4);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v8);
  v10 = *v7;
  if (*v7)
  {
    *((_QWORD *)v4 + 26) = v10;
    operator delete(v10);
  }
  v11 = *v6;
  if (*v6)
  {
    *((_QWORD *)v4 + 23) = v11;
    operator delete(v11);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](v5, 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a4);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v4);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23[35];

  *(_QWORD *)a1 = off_1EA92D6D8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1EA929750;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1EA9280D0;
  *(_QWORD *)(a1 + 96) = &unk_1EA9280F8;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)a1 = &unk_1EA927F98;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 112), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 136), *(_QWORD *)(a2 + 136), *(_QWORD *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 4));
  v6 = *(_DWORD *)(a2 + 160);
  v7 = *(_QWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 160) = v6;
  *(_QWORD *)(a1 + 164) = v7;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 176), *(const void **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 2);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 200), *(const void **)(a2 + 200), *(_QWORD *)(a2 + 208), (uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 2);
  v11 = *(_BYTE *)(a2 + 224);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_BYTE *)(a1 + 224) = v11;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "LinearTransform", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.cc", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
  }
  v12 = *(_QWORD *)(a2 + 104);
  if (v12)
  {
    v13 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix(v13, v12);
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 104), v13);
  }
  v15 = *(_QWORD *)(a1 + 112);
  v14 = *(_QWORD *)(a1 + 120);
  if (v14 != v15)
  {
    v16 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a2 + 112) + 8 * v16))
      {
        v17 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a2, v16, v8, v9, v10);
        kaldi::NewCuSubOrMat<float>(v17, *(unsigned __int8 *)(a1 + 16), v23);
        v18 = *(_QWORD *)(a1 + 112);
        v19 = v23[0];
        v23[0] = 0;
        v20 = *(_QWORD *)(v18 + 8 * v16);
        *(_QWORD *)(v18 + 8 * v16) = v19;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
        v21 = v23[0];
        v23[0] = 0;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
        v15 = *(_QWORD *)(a1 + 112);
        v14 = *(_QWORD *)(a1 + 120);
      }
      ++v16;
    }
    while (v16 < (v14 - v15) >> 3);
  }
  if (*(_QWORD *)(a2 + 240) != *(_QWORD *)(a2 + 232))
    kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 232));
  return a1;
}

void sub_1DE4295A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  kaldi::nnet1::UpdatableComponent *v4;
  uint64_t *v5;
  void **v6;
  void **v7;
  void **v8;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a4);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v8);
  v10 = *v7;
  if (*v7)
  {
    *((_QWORD *)v4 + 26) = v10;
    operator delete(v10);
  }
  v11 = *v6;
  if (*v6)
  {
    *((_QWORD *)v4 + 23) = v11;
    operator delete(v11);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](v5, 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a4);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v4);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(result);
    JUMPOUT(0x1DF0ED014);
  }
  return result;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform<kaldi::QuantizedMatrix<signed char>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  char v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23[35];

  *(_QWORD *)a1 = off_1EA92D6D8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1EA929750;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1EA9280D0;
  *(_QWORD *)(a1 + 96) = &unk_1EA9280F8;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)a1 = &unk_1EA927F98;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 112), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 136), *(_QWORD *)(a2 + 136), *(_QWORD *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 4));
  v6 = *(_DWORD *)(a2 + 160);
  v7 = *(_QWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 160) = v6;
  *(_QWORD *)(a1 + 164) = v7;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 176), *(const void **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 2);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 200), *(const void **)(a2 + 200), *(_QWORD *)(a2 + 208), (uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 2);
  v11 = *(_BYTE *)(a2 + 224);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_BYTE *)(a1 + 224) = v11;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "LinearTransform", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.cc", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
  }
  v12 = *(int **)(a2 + 104);
  if (v12)
  {
    v13 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix<signed char>(v13, v12);
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 104), v13);
  }
  v15 = *(_QWORD *)(a1 + 112);
  v14 = *(_QWORD *)(a1 + 120);
  if (v14 != v15)
  {
    v16 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a2 + 112) + 8 * v16))
      {
        v17 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a2, v16, v8, v9, v10);
        kaldi::NewCuSubOrMat<float>(v17, *(unsigned __int8 *)(a1 + 16), v23);
        v18 = *(_QWORD *)(a1 + 112);
        v19 = v23[0];
        v23[0] = 0;
        v20 = *(_QWORD *)(v18 + 8 * v16);
        *(_QWORD *)(v18 + 8 * v16) = v19;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
        v21 = v23[0];
        v23[0] = 0;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
        v15 = *(_QWORD *)(a1 + 112);
        v14 = *(_QWORD *)(a1 + 120);
      }
      ++v16;
    }
    while (v16 < (v14 - v15) >> 3);
  }
  if (*(_QWORD *)(a2 + 240) != *(_QWORD *)(a2 + 232))
    kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 232));
  return a1;
}

void sub_1DE429968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  kaldi::nnet1::UpdatableComponent *v4;
  uint64_t *v5;
  void **v6;
  void **v7;
  void **v8;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a4);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v8);
  v10 = *v7;
  if (*v7)
  {
    *((_QWORD *)v4 + 26) = v10;
    operator delete(v10);
  }
  v11 = *v6;
  if (*v6)
  {
    *((_QWORD *)v4 + 23) = v11;
    operator delete(v11);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](v5, 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a4);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v4);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(result);
    JUMPOUT(0x1DF0ED014);
  }
  return result;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform<kaldi::QuantizedMatrix<short>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  char v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23[35];

  *(_QWORD *)a1 = off_1EA92D6D8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1EA929750;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1EA927F48;
  *(_QWORD *)(a1 + 96) = &unk_1EA927F70;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)a1 = &unk_1EA927E10;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 112), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 136), *(_QWORD *)(a2 + 136), *(_QWORD *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 4));
  v6 = *(_DWORD *)(a2 + 160);
  v7 = *(_QWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 160) = v6;
  *(_QWORD *)(a1 + 164) = v7;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 176), *(const void **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 2);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 200), *(const void **)(a2 + 200), *(_QWORD *)(a2 + 208), (uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 2);
  v11 = *(_BYTE *)(a2 + 224);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_BYTE *)(a1 + 224) = v11;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "LinearTransform", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.cc", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
  }
  v12 = *(int **)(a2 + 104);
  if (v12)
  {
    v13 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix<short>(v13, v12);
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 104), v13);
  }
  v15 = *(_QWORD *)(a1 + 112);
  v14 = *(_QWORD *)(a1 + 120);
  if (v14 != v15)
  {
    v16 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a2 + 112) + 8 * v16))
      {
        v17 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a2, v16, v8, v9, v10);
        kaldi::NewCuSubOrMat<float>(v17, *(unsigned __int8 *)(a1 + 16), v23);
        v18 = *(_QWORD *)(a1 + 112);
        v19 = v23[0];
        v23[0] = 0;
        v20 = *(_QWORD *)(v18 + 8 * v16);
        *(_QWORD *)(v18 + 8 * v16) = v19;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
        v21 = v23[0];
        v23[0] = 0;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
        v15 = *(_QWORD *)(a1 + 112);
        v14 = *(_QWORD *)(a1 + 120);
      }
      ++v16;
    }
    while (v16 < (v14 - v15) >> 3);
  }
  if (*(_QWORD *)(a2 + 240) != *(_QWORD *)(a2 + 232))
    kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 232));
  return a1;
}

void sub_1DE429D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  kaldi::nnet1::UpdatableComponent *v4;
  uint64_t *v5;
  void **v6;
  void **v7;
  void **v8;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a4);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v8);
  v10 = *v7;
  if (*v7)
  {
    *((_QWORD *)v4 + 26) = v10;
    operator delete(v10);
  }
  v11 = *v6;
  if (*v6)
  {
    *((_QWORD *)v4 + 23) = v11;
    operator delete(v11);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](v5, 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a4);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v4);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Component::GetComponentTypeMap(kaldi::nnet1::Component *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&kaldi::nnet1::Component::GetComponentTypeMap(void)::flag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&kaldi::nnet1::Component::GetComponentTypeMap(void)::flag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<kaldi::nnet1::Component::GetComponentTypeMap(void)::$_0 &&>>);
  }
  return kaldi::nnet1::Component::GetComponentTypeMap(void)::init_map_heap;
}

uint64_t kaldi::nnet1::Component::GetGradientNormTypeMap(kaldi::nnet1::Component *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&kaldi::nnet1::Component::GetGradientNormTypeMap(void)::flag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&kaldi::nnet1::Component::GetGradientNormTypeMap(void)::flag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<kaldi::nnet1::Component::GetGradientNormTypeMap(void)::$_0 &&>>);
  }
  return kaldi::nnet1::Component::GetGradientNormTypeMap(void)::init_map_heap;
}

uint64_t kaldi::nnet1::Component::GetMatrixInitTypeMap(kaldi::nnet1::Component *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&kaldi::nnet1::Component::GetMatrixInitTypeMap(void)::flag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&kaldi::nnet1::Component::GetMatrixInitTypeMap(void)::flag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<kaldi::nnet1::Component::GetMatrixInitTypeMap(void)::$_0 &&>>);
  }
  return kaldi::nnet1::Component::GetMatrixInitTypeMap(void)::init_map_heap;
}

void kaldi::nnet1::Component::TypeToMarker(kaldi::nnet1::Component *a1@<X0>, std::string *a2@<X8>)
{
  int v2;
  kaldi::nnet1::Component *ComponentTypeMap;
  _QWORD *v5;
  kaldi::nnet1::Component *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  __int128 v10;
  _QWORD v11[34];

  v2 = (int)a1;
  ComponentTypeMap = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetComponentTypeMap(a1);
  v5 = *(_QWORD **)ComponentTypeMap;
  v6 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetComponentTypeMap(ComponentTypeMap);
  if (v5 == (_QWORD *)((char *)v6 + 8))
  {
LABEL_9:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11, "TypeToMarker", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-component.cc", 202);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Unknown component type: ", 24);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  while (*((_DWORD *)v5 + 14) != v2)
  {
    v7 = (_QWORD *)v5[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v5[2];
        v9 = *v8 == (_QWORD)v5;
        v5 = v8;
      }
      while (!v9);
    }
    v6 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetComponentTypeMap(v6);
    v5 = v8;
    if (v8 == (_QWORD *)((char *)v6 + 8))
      goto LABEL_9;
  }
  if (*((char *)v5 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)v5[4], v5[5]);
  }
  else
  {
    v10 = *((_OWORD *)v5 + 2);
    a2->__r_.__value_.__r.__words[2] = v5[6];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v10;
  }
}

{
  int v2;
  kaldi::nnet1::Component *GradientNormTypeMap;
  _QWORD *v5;
  kaldi::nnet1::Component *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  __int128 v10;
  _QWORD v11[34];

  v2 = (int)a1;
  GradientNormTypeMap = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetGradientNormTypeMap(a1);
  v5 = *(_QWORD **)GradientNormTypeMap;
  v6 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetGradientNormTypeMap(GradientNormTypeMap);
  if (v5 == (_QWORD *)((char *)v6 + 8))
  {
LABEL_9:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11, "TypeToMarker", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-component.cc", 210);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Unknown gradient normalizaiton type: ", 37);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  while (*((_DWORD *)v5 + 14) != v2)
  {
    v7 = (_QWORD *)v5[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v5[2];
        v9 = *v8 == (_QWORD)v5;
        v5 = v8;
      }
      while (!v9);
    }
    v6 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetGradientNormTypeMap(v6);
    v5 = v8;
    if (v8 == (_QWORD *)((char *)v6 + 8))
      goto LABEL_9;
  }
  if (*((char *)v5 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)v5[4], v5[5]);
  }
  else
  {
    v10 = *((_OWORD *)v5 + 2);
    a2->__r_.__value_.__r.__words[2] = v5[6];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v10;
  }
}

{
  int v2;
  kaldi::nnet1::Component *MatrixInitTypeMap;
  _QWORD *v5;
  kaldi::nnet1::Component *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  __int128 v10;
  _QWORD v11[34];

  v2 = (int)a1;
  MatrixInitTypeMap = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetMatrixInitTypeMap(a1);
  v5 = *(_QWORD **)MatrixInitTypeMap;
  v6 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetMatrixInitTypeMap(MatrixInitTypeMap);
  if (v5 == (_QWORD *)((char *)v6 + 8))
  {
LABEL_9:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11, "TypeToMarker", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-component.cc", 218);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Unknown matrix initialization type: ", 36);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  while (*((_DWORD *)v5 + 14) != v2)
  {
    v7 = (_QWORD *)v5[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v5[2];
        v9 = *v8 == (_QWORD)v5;
        v5 = v8;
      }
      while (!v9);
    }
    v6 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetMatrixInitTypeMap(v6);
    v5 = v8;
    if (v8 == (_QWORD *)((char *)v6 + 8))
      goto LABEL_9;
  }
  if (*((char *)v5 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)v5[4], v5[5]);
  }
  else
  {
    v10 = *((_OWORD *)v5 + 2);
    a2->__r_.__value_.__r.__words[2] = v5[6];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_1DE42A010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void sub_1DE42A138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void sub_1DE42A260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t kaldi::nnet1::Component::MarkerToComponentType(std::string::size_type *a1)
{
  uint64_t v1;
  uint64_t ComponentTypeMap;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  std::string::size_type v7;
  char *v8;
  std::string *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  std::string::size_type v14;
  std::string *v15;
  uint64_t v16;
  std::string::size_type size;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  char v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[34];
  std::string v39;
  std::string v40;

  ComponentTypeMap = kaldi::nnet1::Component::GetComponentTypeMap((kaldi::nnet1::Component *)a1);
  v4 = (unsigned int *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(ComponentTypeMap, (const void **)a1);
  v5 = kaldi::nnet1::Component::GetComponentTypeMap((kaldi::nnet1::Component *)v4);
  if ((unsigned int *)(v5 + 8) != v4)
    return v4[14];
  v6 = *((char *)a1 + 23);
  if (v6 < 0)
  {
    std::string::__init_copy_ctor_external(&v40, (const std::string::value_type *)*a1, a1[1]);
    v6 = *((char *)a1 + 23);
    if (v6 < 0)
    {
      v8 = (char *)*a1;
      v7 = a1[1];
      if (v7)
        goto LABEL_7;
      goto LABEL_11;
    }
  }
  else
  {
    v40 = *(std::string *)a1;
  }
  v7 = v6;
  v8 = (char *)a1;
  if ((_BYTE)v6)
  {
LABEL_7:
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v40;
    else
      v9 = (std::string *)v40.__r_.__value_.__r.__words[0];
    do
    {
      v5 = __tolower(*v8);
      v9->__r_.__value_.__s.__data_[0] = v5;
      v9 = (std::string *)((char *)v9 + 1);
      ++v8;
      --v7;
    }
    while (v7);
  }
LABEL_11:
  v10 = kaldi::nnet1::Component::GetComponentTypeMap((kaldi::nnet1::Component *)v5);
  v11 = *(_QWORD **)v10;
  while (1)
  {
    v10 = kaldi::nnet1::Component::GetComponentTypeMap((kaldi::nnet1::Component *)v10);
    if (v11 == (_QWORD *)(v10 + 8))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v38, "MarkerToComponentType", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-component.cc", 237);
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Unknown component type marker: ", 31);
      v35 = *((char *)a1 + 23);
      if (v35 >= 0)
        v36 = (uint64_t)a1;
      else
        v36 = *a1;
      if (v35 >= 0)
        v37 = *((unsigned __int8 *)a1 + 23);
      else
        v37 = a1[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v36, v37);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v38);
    }
    if ((*((char *)v11 + 55) & 0x80000000) == 0)
    {
      v12 = *((unsigned __int8 *)v11 + 55);
      v39 = *(std::string *)(v11 + 4);
LABEL_17:
      v13 = (char *)(v11 + 4);
      goto LABEL_18;
    }
    std::string::__init_copy_ctor_external(&v39, (const std::string::value_type *)v11[4], v11[5]);
    if ((*((char *)v11 + 55) & 0x80000000) == 0)
    {
      v12 = *((unsigned __int8 *)v11 + 55);
      goto LABEL_17;
    }
    v13 = (char *)v11[4];
    v12 = v11[5];
LABEL_18:
    v14 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    if (v12)
    {
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &v39;
      else
        v15 = (std::string *)v39.__r_.__value_.__r.__words[0];
      do
      {
        v10 = __tolower(*v13);
        v15->__r_.__value_.__s.__data_[0] = v10;
        v15 = (std::string *)((char *)v15 + 1);
        ++v13;
        --v12;
      }
      while (v12);
      v14 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    }
    v16 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    else
      size = v40.__r_.__value_.__l.__size_;
    v18 = v39.__r_.__value_.__l.__size_;
    if ((v14 & 0x80u) == 0)
      v18 = v14;
    if (size != v18)
      goto LABEL_40;
    v19 = (v14 & 0x80u) == 0 ? &v39 : (std::string *)v39.__r_.__value_.__r.__words[0];
    if ((*((_BYTE *)&v40.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v10 = memcmp(v40.__r_.__value_.__l.__data_, v19, v40.__r_.__value_.__l.__size_);
      if ((_DWORD)v10)
        goto LABEL_40;
    }
    else if (*((_BYTE *)&v40.__r_.__value_.__s + 23))
    {
      v20 = &v40;
      while (v20->__r_.__value_.__s.__data_[0] == v19->__r_.__value_.__s.__data_[0])
      {
        v20 = (std::string *)((char *)v20 + 1);
        v19 = (std::string *)((char *)v19 + 1);
        if (!--v16)
          goto LABEL_48;
      }
LABEL_40:
      v21 = 0;
      if ((v14 & 0x80) == 0)
        goto LABEL_42;
LABEL_41:
      operator delete(v39.__r_.__value_.__l.__data_);
      goto LABEL_42;
    }
LABEL_48:
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v38, "MarkerToComponentType", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-component.cc", 233);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"please update to formatted name ", 32);
      v25 = *((char *)v11 + 55);
      if (v25 >= 0)
        v26 = (uint64_t)(v11 + 4);
      else
        v26 = v11[4];
      if (v25 >= 0)
        v27 = *((unsigned __int8 *)v11 + 55);
      else
        v27 = v11[5];
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" ASAP, you used ", 16);
      v30 = *((char *)a1 + 23);
      if (v30 >= 0)
        v31 = (uint64_t)a1;
      else
        v31 = *a1;
      if (v30 >= 0)
        v32 = *((unsigned __int8 *)a1 + 23);
      else
        v32 = a1[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v38);
      LOBYTE(v14) = *((_BYTE *)&v39.__r_.__value_.__s + 23);
    }
    v1 = *((unsigned int *)v11 + 14);
    v21 = 1;
    if ((v14 & 0x80) != 0)
      goto LABEL_41;
LABEL_42:
    if ((v21 & 1) != 0)
      break;
    v22 = (_QWORD *)v11[1];
    if (v22)
    {
      do
      {
        v11 = v22;
        v22 = (_QWORD *)*v22;
      }
      while (v22);
    }
    else
    {
      do
      {
        v23 = v11;
        v11 = (_QWORD *)v11[2];
      }
      while ((_QWORD *)*v11 != v23);
    }
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  return v1;
}

void sub_1DE42A5D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a9);
  JUMPOUT(0x1DE42A5F4);
}

void sub_1DE42A5E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::Component::MarkerToGradientNormType(kaldi::nnet1::Component *a1)
{
  uint64_t GradientNormTypeMap;
  unsigned int *v3;
  _QWORD *v5;
  _QWORD v6[34];

  GradientNormTypeMap = kaldi::nnet1::Component::GetGradientNormTypeMap(a1);
  v3 = (unsigned int *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(GradientNormTypeMap, (const void **)a1);
  if ((unsigned int *)(kaldi::nnet1::Component::GetGradientNormTypeMap((kaldi::nnet1::Component *)v3) + 8) == v3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6, "MarkerToGradientNormType", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-component.cc", 244);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Unknown gradient normalization marker: ", 39);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (uint64_t)a1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  return v3[14];
}

uint64_t kaldi::nnet1::Component::MarkerToMatrixInitType(kaldi::nnet1::Component *a1)
{
  uint64_t MatrixInitTypeMap;
  unsigned int *v3;
  _QWORD *v5;
  _QWORD v6[34];

  MatrixInitTypeMap = kaldi::nnet1::Component::GetMatrixInitTypeMap(a1);
  v3 = (unsigned int *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(MatrixInitTypeMap, (const void **)a1);
  if ((unsigned int *)(kaldi::nnet1::Component::GetMatrixInitTypeMap((kaldi::nnet1::Component *)v3) + 8) == v3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6, "MarkerToMatrixInitType", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-component.cc", 251);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Unknown matrix initialization marker: ", 38);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (uint64_t)a1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  return v3[14];
}

uint64_t kaldi::nnet1::Component::NewComponentOfType(kaldi::nnet1::Component *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (**v8)(kaldi::nnet1::LogSoftmax *__hidden);
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  void (**v14)(kaldi::nnet1::MaxPooling2DComponent *__hidden);
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  kaldi::nnet1::ParallelComponent *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  _QWORD *v37;
  std::string v38;
  _QWORD v39[34];

  if ((int)a1 > 512)
  {
    switch((int)a1)
    {
      case 1025:
        v7 = operator new();
        kaldi::nnet1::Rbm::Rbm((kaldi::nnet1::Rbm *)v7, a2, a3);
        return v7;
      case 1026:
        v13 = operator new();
        v7 = v13;
        *(_DWORD *)(v13 + 8) = a2;
        *(_DWORD *)(v13 + 12) = a3;
        *(_WORD *)(v13 + 16) = 0;
        *(_QWORD *)(v13 + 24) = 0;
        *(_QWORD *)(v13 + 32) = 0;
        *(_QWORD *)(v13 + 40) = 0;
        *(_QWORD *)(v13 + 48) = 0;
        v14 = &off_1EA92CFE0;
        goto LABEL_77;
      case 1027:
        v7 = operator new();
        *(_DWORD *)(v7 + 8) = a2;
        *(_DWORD *)(v7 + 12) = a3;
        *(_WORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 40) = 0;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)v7 = &off_1EA92D618;
        *(_QWORD *)(v7 + 48) = 0x100000001;
        *(_DWORD *)(v7 + 56) = 1;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        return v7;
      case 1028:
        v13 = operator new();
        v7 = v13;
        *(_DWORD *)(v13 + 8) = a2;
        *(_DWORD *)(v13 + 12) = a3;
        *(_WORD *)(v13 + 16) = 0;
        *(_QWORD *)(v13 + 24) = 0;
        *(_QWORD *)(v13 + 32) = 0;
        *(_QWORD *)(v13 + 40) = 0;
        *(_QWORD *)(v13 + 48) = 0;
        v14 = &off_1EA926920;
LABEL_77:
        *(_QWORD *)v13 = v14;
        *(_QWORD *)(v13 + 56) = 0;
        *(_QWORD *)(v13 + 64) = 0;
        return v7;
      case 1029:
      case 1030:
        goto LABEL_88;
      case 1031:
        v7 = operator new();
        kaldi::nnet1::AddShift::AddShift((kaldi::nnet1::AddShift *)v7, a2, a3, v15, v16);
        return v7;
      case 1032:
        v7 = operator new();
        kaldi::nnet1::Rescale::Rescale((kaldi::nnet1::Rescale *)v7, a2, a3, v17, v18);
        return v7;
      case 1033:
        v7 = operator new();
        kaldi::nnet1::QuantizedAffineTransform<signed char>::QuantizedAffineTransform(v7, a2, a3);
        return v7;
      case 1034:
        v6 = operator new();
        v7 = v6;
        *(_DWORD *)(v6 + 8) = a2;
        *(_DWORD *)(v6 + 12) = a3;
        *(_WORD *)(v6 + 16) = 0;
        *(_QWORD *)(v6 + 32) = 0;
        *(_QWORD *)(v6 + 40) = 0;
        *(_QWORD *)(v6 + 24) = 0;
        v8 = &off_1EA929258;
LABEL_83:
        *(_QWORD *)v6 = v8;
        return v7;
      case 1035:
        v7 = operator new();
        kaldi::nnet1::QuantizedAffineTransform<short>::QuantizedAffineTransform(v7, a2, a3);
        return v7;
      case 1036:
        v7 = operator new();
        kaldi::nnet1::CnnRearrangeComponent::CnnRearrangeComponent((kaldi::nnet1::CnnRearrangeComponent *)v7, a2, a3, v11, v12);
        return v7;
      case 1037:
        v7 = operator new();
        *(_DWORD *)(v7 + 8) = a2;
        *(_DWORD *)(v7 + 12) = a3;
        *(_WORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)v7 = &off_1EA9284F0;
        *(_QWORD *)(v7 + 48) = 0;
        *(_QWORD *)(v7 + 56) = 0;
        *(_QWORD *)(v7 + 40) = 0;
        return v7;
      case 1038:
        v7 = operator new();
        kaldi::nnet1::Padding2DComponent::Padding2DComponent((kaldi::nnet1::Padding2DComponent *)v7, a2, a3);
        return v7;
      case 1039:
        v7 = operator new();
        kaldi::nnet1::InterpolationComponent::InterpolationComponent((kaldi::nnet1::InterpolationComponent *)v7, a2, a3);
        return v7;
      case 1040:
        v7 = operator new();
        kaldi::nnet1::CompressedWordTransComponent::CompressedWordTransComponent((kaldi::nnet1::CompressedWordTransComponent *)v7, a2, a3, v9, v10);
        return v7;
      case 1041:
        v7 = operator new();
        kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::VectorwiseQuantizedAffineTransform(v7, a2, a3);
        return v7;
      case 1042:
        v7 = operator new();
        kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::VectorwiseQuantizedAffineTransform(v7, a2, a3);
        return v7;
      default:
        switch((int)a1)
        {
          case 513:
            v6 = operator new();
            v7 = v6;
            *(_DWORD *)(v6 + 8) = a2;
            *(_DWORD *)(v6 + 12) = a3;
            *(_WORD *)(v6 + 16) = 0;
            *(_QWORD *)(v6 + 32) = 0;
            *(_QWORD *)(v6 + 40) = 0;
            *(_QWORD *)(v6 + 24) = 0;
            v8 = &off_1EA92D430;
            goto LABEL_83;
          case 514:
            v6 = operator new();
            v7 = v6;
            *(_DWORD *)(v6 + 8) = a2;
            *(_DWORD *)(v6 + 12) = a3;
            *(_WORD *)(v6 + 16) = 0;
            *(_QWORD *)(v6 + 32) = 0;
            *(_QWORD *)(v6 + 40) = 0;
            *(_QWORD *)(v6 + 24) = 0;
            v8 = &off_1EA9266E0;
            goto LABEL_83;
          case 515:
            v7 = operator new();
            *(_DWORD *)(v7 + 8) = a2;
            *(_DWORD *)(v7 + 12) = a3;
            *(_WORD *)(v7 + 16) = 0;
            *(_QWORD *)(v7 + 32) = 0;
            *(_QWORD *)(v7 + 40) = 0;
            *(_QWORD *)(v7 + 24) = 0;
            *(_QWORD *)v7 = &off_1EA9267A0;
            *(_OWORD *)(v7 + 48) = 0u;
            *(_OWORD *)(v7 + 64) = 0u;
            *(_OWORD *)(v7 + 80) = 0u;
            return v7;
          case 516:
            v6 = operator new();
            v7 = v6;
            *(_DWORD *)(v6 + 8) = a2;
            *(_DWORD *)(v6 + 12) = a3;
            *(_WORD *)(v6 + 16) = 0;
            *(_QWORD *)(v6 + 32) = 0;
            *(_QWORD *)(v6 + 40) = 0;
            *(_QWORD *)(v6 + 24) = 0;
            v8 = &off_1EA92D370;
            goto LABEL_83;
          case 517:
            v6 = operator new();
            v7 = v6;
            *(_DWORD *)(v6 + 8) = a2;
            *(_DWORD *)(v6 + 12) = a3;
            *(_WORD *)(v6 + 16) = 0;
            *(_QWORD *)(v6 + 32) = 0;
            *(_QWORD *)(v6 + 40) = 0;
            *(_QWORD *)(v6 + 24) = 0;
            v8 = &off_1EA92CE60;
            goto LABEL_83;
          case 518:
            v7 = operator new();
            *(_DWORD *)(v7 + 8) = a2;
            *(_DWORD *)(v7 + 12) = a3;
            *(_WORD *)(v7 + 16) = 0;
            *(_QWORD *)(v7 + 32) = 0;
            *(_QWORD *)(v7 + 40) = 0;
            *(_QWORD *)(v7 + 24) = 0;
            *(_QWORD *)v7 = &off_1EA92D0A0;
            *(_OWORD *)(v7 + 96) = 0u;
            *(_OWORD *)(v7 + 112) = 0u;
            *(_OWORD *)(v7 + 48) = 0u;
            *(_OWORD *)(v7 + 64) = 0u;
            *(_DWORD *)(v7 + 80) = 0;
            *(_QWORD *)(v7 + 88) = &unk_1EA92DFA8;
            *(_BYTE *)(v7 + 128) = 0;
            *(_OWORD *)(v7 + 152) = 0u;
            *(_OWORD *)(v7 + 168) = 0u;
            *(_QWORD *)(v7 + 136) = 0;
            *(_QWORD *)(v7 + 144) = &unk_1EA92DFA8;
            *(_BYTE *)(v7 + 184) = 0;
            *(_DWORD *)(v7 + 192) = 1056964608;
            return v7;
          case 519:
            v6 = operator new();
            v7 = v6;
            *(_DWORD *)(v6 + 8) = a2;
            *(_DWORD *)(v6 + 12) = a3;
            *(_WORD *)(v6 + 16) = 0;
            *(_QWORD *)(v6 + 32) = 0;
            *(_QWORD *)(v6 + 40) = 0;
            *(_QWORD *)(v6 + 24) = 0;
            v8 = &off_1EA928120;
            goto LABEL_83;
          case 520:
            v6 = operator new();
            v7 = v6;
            *(_DWORD *)(v6 + 8) = a2;
            *(_DWORD *)(v6 + 12) = a3;
            *(_WORD *)(v6 + 16) = 0;
            *(_QWORD *)(v6 + 32) = 0;
            *(_QWORD *)(v6 + 40) = 0;
            *(_QWORD *)(v6 + 24) = 0;
            v8 = &off_1EA92B6E8;
            goto LABEL_83;
          case 521:
            v28 = operator new();
            v7 = v28;
            *(_DWORD *)(v28 + 8) = a2;
            *(_DWORD *)(v28 + 12) = a3;
            *(_WORD *)(v28 + 16) = 0;
            *(_QWORD *)(v28 + 32) = 0;
            *(_QWORD *)(v28 + 40) = 0;
            *(_QWORD *)(v28 + 24) = 0;
            *(_QWORD *)v28 = &off_1EA927950;
            v29 = 0x40000000;
            goto LABEL_86;
          case 522:
            v6 = operator new();
            v7 = v6;
            *(_DWORD *)(v6 + 8) = a2;
            *(_DWORD *)(v6 + 12) = a3;
            *(_WORD *)(v6 + 16) = 0;
            *(_OWORD *)(v6 + 24) = 0u;
            *(_OWORD *)(v6 + 40) = 0u;
            *(_OWORD *)(v6 + 56) = 0u;
            *(_OWORD *)(v6 + 72) = 0u;
            *(_QWORD *)(v6 + 88) = 0;
            v8 = &off_1EA926860;
            goto LABEL_83;
          case 523:
            v28 = operator new();
            v7 = v28;
            *(_DWORD *)(v28 + 8) = a2;
            *(_DWORD *)(v28 + 12) = a3;
            *(_WORD *)(v28 + 16) = 0;
            *(_QWORD *)(v28 + 32) = 0;
            *(_QWORD *)(v28 + 40) = 0;
            *(_QWORD *)(v28 + 24) = 0;
            *(_QWORD *)v28 = &off_1EA927A10;
            v29 = 1092616192;
            goto LABEL_86;
          case 524:
            v28 = operator new();
            v7 = v28;
            *(_DWORD *)(v28 + 8) = a2;
            *(_DWORD *)(v28 + 12) = a3;
            *(_WORD *)(v28 + 16) = 0;
            *(_QWORD *)(v28 + 32) = 0;
            *(_QWORD *)(v28 + 40) = 0;
            *(_QWORD *)(v28 + 24) = 0;
            *(_QWORD *)v28 = &off_1EA92B968;
            v29 = 1065353216;
LABEL_86:
            *(_DWORD *)(v28 + 48) = v29;
            break;
          case 525:
            v7 = operator new();
            *(_DWORD *)(v7 + 8) = a2;
            *(_DWORD *)(v7 + 12) = a3;
            *(_WORD *)(v7 + 16) = 0;
            *(_QWORD *)(v7 + 32) = 0;
            *(_QWORD *)(v7 + 40) = 0;
            *(_QWORD *)(v7 + 24) = 0;
            *(_QWORD *)v7 = &off_1EA92CB38;
            *(_QWORD *)(v7 + 48) = 0x3F867D5F3FD62D7DLL;
            break;
          default:
            switch((int)a1)
            {
              case 2048:
                v7 = operator new();
                kaldi::nnet1::KlHmm::KlHmm((kaldi::nnet1::KlHmm *)v7, a2, a3);
                return v7;
              case 2049:
                v7 = operator new();
                kaldi::nnet1::SentenceAveragingComponent::SentenceAveragingComponent((kaldi::nnet1::SentenceAveragingComponent *)v7, a2, a3, 100.0);
                return v7;
              case 2050:
                v7 = operator new();
                *(_DWORD *)(v7 + 8) = a2;
                *(_DWORD *)(v7 + 12) = a3;
                *(_WORD *)(v7 + 16) = 0;
                *(_QWORD *)(v7 + 32) = 0;
                *(_QWORD *)(v7 + 40) = 0;
                *(_QWORD *)(v7 + 24) = 0;
                *(_QWORD *)v7 = &off_1EA92A248;
                *(_QWORD *)(v7 + 48) = 0;
                *(_QWORD *)(v7 + 56) = 0x3F80000000000000;
                return v7;
              case 2051:
                v13 = operator new();
                v7 = v13;
                *(_DWORD *)(v13 + 8) = a2;
                *(_DWORD *)(v13 + 12) = a3;
                *(_WORD *)(v13 + 16) = 0;
                *(_QWORD *)(v13 + 24) = 0;
                *(_QWORD *)(v13 + 32) = 0;
                *(_QWORD *)(v13 + 40) = 0;
                *(_QWORD *)(v13 + 48) = 0;
                v14 = &off_1EA92B7A8;
                goto LABEL_77;
              case 2052:
                v7 = operator new();
                *(_DWORD *)(v7 + 8) = a2;
                *(_DWORD *)(v7 + 12) = a3;
                *(_WORD *)(v7 + 16) = 0;
                *(_QWORD *)(v7 + 32) = 0;
                *(_QWORD *)(v7 + 40) = 0;
                *(_QWORD *)(v7 + 24) = 0;
                *(_QWORD *)v7 = &off_1EA9298E8;
                *(_QWORD *)(v7 + 48) = 0;
                *(_DWORD *)(v7 + 56) = 0;
                return v7;
              case 2053:
                v13 = operator new();
                v7 = v13;
                *(_DWORD *)(v13 + 8) = a2;
                *(_DWORD *)(v13 + 12) = a3;
                *(_WORD *)(v13 + 16) = 0;
                *(_QWORD *)(v13 + 24) = 0;
                *(_QWORD *)(v13 + 32) = 0;
                *(_QWORD *)(v13 + 40) = 0;
                *(_QWORD *)(v13 + 48) = 0;
                v14 = &off_1EA929CE8;
                goto LABEL_77;
              case 2054:
                v7 = operator new();
                kaldi::nnet1::FramePoolingComponent::FramePoolingComponent((kaldi::nnet1::FramePoolingComponent *)v7, a2, a3);
                return v7;
              case 2055:
                v19 = (kaldi::nnet1::ParallelComponent *)operator new();
                kaldi::nnet1::ParallelComponent::ParallelComponent(v19, a2, a3);
                goto LABEL_70;
              case 2056:
                v7 = operator new();
                kaldi::nnet1::DuplicateComponent::DuplicateComponent(v7, a2, a3, v34, v35);
                return v7;
              case 2057:
                v7 = operator new();
                kaldi::nnet1::IdentityComponent::IdentityComponent(v7, a2, a3, v30, v31);
                return v7;
              case 2058:
                v7 = operator new();
                kaldi::nnet1::TemporalMaxPoolingComponent::TemporalMaxPoolingComponent(v7, a2, a3, v32, v33);
                return v7;
              default:
                goto LABEL_88;
            }
        }
        return v7;
    }
  }
  switch((int)a1)
  {
    case 257:
      v7 = operator new();
      kaldi::nnet1::AffineTransform::AffineTransform((kaldi::nnet1::AffineTransform *)v7, a2, a3);
      return v7;
    case 258:
      v7 = operator new();
      kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearTransform(v7, a2, a3);
      return v7;
    case 259:
      v7 = operator new();
      kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform(v7, a2, a3);
      return v7;
    case 260:
      v7 = operator new();
      kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform(v7, a2, a3);
      return v7;
    case 261:
      v7 = operator new();
      kaldi::nnet1::ConvolutionalComponent::ConvolutionalComponent((kaldi::nnet1::ConvolutionalComponent *)v7, a2, a3);
      return v7;
    case 262:
      v7 = operator new();
      kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ConvolutionalMaxPoolingComponent(v7, a2, a3);
      return v7;
    case 263:
      v7 = operator new();
      kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent(v7, a2, a3);
      return v7;
    case 264:
      v7 = operator new();
      kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent(v7, a2, a3);
      return v7;
    case 265:
      v7 = operator new();
      kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::Convolutional2DComponent(v7, a2, a3);
      return v7;
    case 266:
      v7 = operator new();
      kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent(v7, a2, a3);
      return v7;
    case 267:
      v7 = operator new();
      kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent(v7, a2, a3);
      return v7;
    case 268:
      v7 = operator new();
      kaldi::nnet1::WordVecComponent::WordVecComponent((kaldi::nnet1::WordVecComponent *)v7, a2, a3, v22, v23);
      return v7;
    case 269:
      v7 = operator new();
      kaldi::nnet1::FofeWordVecComponent::FofeWordVecComponent((kaldi::nnet1::FofeWordVecComponent *)v7, a2, a3, v24, v25);
      return v7;
    case 270:
      v7 = operator new();
      kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::WordMultiVecComponent(v7, a2, a3);
      return v7;
    case 271:
      v7 = operator new();
      kaldi::nnet1::CompressedWordVecComponent::CompressedWordVecComponent(v7, a2, a3, v20, v21);
      return v7;
    case 272:
      v7 = operator new();
      kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WordMultiVecComponent(v7, a2, a3);
      return v7;
    case 273:
      v19 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::Recurrent::Recurrent(v19, a2, a3);
      goto LABEL_70;
    case 274:
      v19 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::LstmComponent((uint64_t)v19, a2, a3);
      goto LABEL_70;
    case 275:
      v19 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent((uint64_t)v19, a2, a3);
      goto LABEL_70;
    case 276:
      v19 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent((uint64_t)v19, a2, a3);
      goto LABEL_70;
    case 277:
      v19 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::GatedRecurrentUnit::GatedRecurrentUnit(v19, a2, a3);
      goto LABEL_70;
    case 278:
      v26 = operator new();
      *(_DWORD *)(v26 + 56) = a2;
      *(_DWORD *)(v26 + 60) = a3;
      *(_WORD *)(v26 + 64) = 0;
      *(_QWORD *)(v26 + 72) = 0;
      *(_QWORD *)(v26 + 80) = 0;
      *(_QWORD *)(v26 + 120) = 0;
      *(_QWORD *)(v26 + 128) = 0;
      *(_QWORD *)(v26 + 136) = &unk_1EA927930;
      *(_DWORD *)(v26 + 144) = 1;
      *(_QWORD *)(v26 + 48) = &off_1EA92BCD0;
      *(_QWORD *)(v26 + 88) = 0;
      *(_QWORD *)(v26 + 96) = &off_1EA92BDA0;
      *(_QWORD *)(v26 + 104) = &off_1EA92BE20;
      *(_QWORD *)(v26 + 112) = 0;
      *(_QWORD *)v26 = &off_1EA92BB80;
      *(_QWORD *)(v26 + 8) = 0;
      *(_QWORD *)(v26 + 32) = 0;
      *(_QWORD *)(v26 + 40) = 0;
      v7 = v26 + 48;
      *(_QWORD *)(v26 + 16) = &unk_1EA92DFD8;
      *(_QWORD *)(v26 + 24) = 0;
      return v7;
    case 279:
      v19 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::FixedAttentionComponent::FixedAttentionComponent(v19, a2, a3);
      goto LABEL_70;
    case 280:
      v19 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::BidirectionalRecurrentComponent::BidirectionalRecurrentComponent(v19, a2, a3);
      goto LABEL_70;
    case 281:
      v19 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::MovingAttentionComponent::MovingAttentionComponent(v19, a2, a3);
      goto LABEL_70;
    case 282:
      v19 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::GlobalAttentionComponent::GlobalAttentionComponent(v19, a2, a3);
      goto LABEL_70;
    case 283:
      v19 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::GlobalRecurrentAttention::GlobalRecurrentAttention(v19, a2, a3);
LABEL_70:
      v27 = *(_QWORD *)(*(_QWORD *)v19 - 24);
      goto LABEL_71;
    case 284:
      v7 = operator new();
      kaldi::nnet1::SharedNceComponent::SharedNceComponent((kaldi::nnet1::SharedNceComponent *)v7, a2, a3);
      return v7;
    case 285:
      v19 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(v19, a2, a3);
      goto LABEL_58;
    case 286:
      v19 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(v19, a2, a3);
      goto LABEL_58;
    case 287:
      v19 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::SupervisedMultiHeadAttention::SupervisedMultiHeadAttention(v19, a2, a3);
      goto LABEL_58;
    case 288:
      v19 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::SelfAttention::SelfAttention((uint64_t)v19, a2, a3);
      goto LABEL_58;
    case 289:
      v19 = (kaldi::nnet1::ParallelComponent *)operator new();
      kaldi::nnet1::AverageAttention::AverageAttention((uint64_t)v19, a2, a3);
LABEL_58:
      v27 = *(_QWORD *)(*(_QWORD *)v19 - 40);
LABEL_71:
      v7 = (uint64_t)v19 + v27;
      break;
    case 290:
      v7 = operator new();
      *(_DWORD *)(v7 + 8) = a2;
      *(_DWORD *)(v7 + 12) = a3;
      *(_WORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 32) = 0;
      *(_QWORD *)v7 = &off_1EA92D798;
      *(_DWORD *)(v7 + 48) = 730643660;
      *(_BYTE *)(v7 + 52) = 1;
      *(_QWORD *)(v7 + 72) = 0;
      *(_QWORD *)(v7 + 80) = 0;
      *(_QWORD *)(v7 + 56) = &unk_1EA92DFD8;
      *(_QWORD *)(v7 + 64) = 0;
      *(_QWORD *)(v7 + 104) = 0;
      *(_QWORD *)(v7 + 112) = 0;
      *(_QWORD *)(v7 + 88) = &unk_1EA92DFD8;
      *(_QWORD *)(v7 + 96) = 0;
      break;
    default:
LABEL_88:
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v39, "NewComponentOfType", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-component.cc", 483);
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Missing type: ", 14);
      kaldi::nnet1::Component::TypeToMarker(a1, &v38);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v37, (uint64_t)&v38);
      std::string::~string(&v38);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v39);
  }
  return v7;
}

void sub_1DE42B80C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C401AC3E4D5);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::GatedRecurrentUnit::GatedRecurrentUnit(kaldi::nnet1::GatedRecurrentUnit *this, int a2, int a3)
{
  double result;

  *((_DWORD *)this + 224) = a2;
  *((_DWORD *)this + 225) = a3;
  *((_WORD *)this + 452) = 0;
  *((_QWORD *)this + 114) = 0;
  *((_QWORD *)this + 116) = 0;
  *((_QWORD *)this + 115) = 0;
  *((_QWORD *)this + 111) = off_1EA929750;
  *((_QWORD *)this + 117) = &off_1EA9284D0;
  *((_OWORD *)this + 59) = xmmword_1DEC3D450;
  *((_QWORD *)this + 120) = 0x3BF800000;
  *((_DWORD *)this + 242) = 1;
  *((_WORD *)this + 486) = 0;
  *((_BYTE *)this + 974) = 0;
  *(_QWORD *)this = off_1EA929878;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = &unk_1EA927930;
  *((_DWORD *)this + 10) = 1;
  *(_QWORD *)this = &unk_1EA910D78;
  *((_QWORD *)this + 111) = &unk_1EA910F20;
  *(_OWORD *)((char *)this + 56) = xmmword_1DEC3D450;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((_BYTE *)this + 86) = 0;
  *((_QWORD *)this + 6) = &off_1EA92B868;
  *((_QWORD *)this + 11) = &unk_1EA92B888;
  *((_QWORD *)this + 12) = 0x100000001;
  result = 0.0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_QWORD *)this = &off_1EA928C78;
  *((_QWORD *)this + 111) = &off_1EA928EE0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = &unk_1EA92DFA8;
  *((_BYTE *)this + 200) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_QWORD *)this + 26) = &unk_1EA92DFA8;
  *((_BYTE *)this + 248) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_QWORD *)this + 32) = &unk_1EA92DFA8;
  *((_BYTE *)this + 296) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 38) = &unk_1EA92DFD8;
  *((_QWORD *)this + 39) = 0;
  *((_WORD *)this + 168) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_QWORD *)this + 75) = 0;
  *((_DWORD *)this + 152) = 1065353216;
  *(_QWORD *)((char *)this + 620) = 0;
  *(_QWORD *)((char *)this + 628) = 0;
  *(_QWORD *)((char *)this + 612) = 0;
  *(_QWORD *)((char *)this + 633) = 0;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  return result;
}

double kaldi::nnet1::FofeWordVecComponent::FofeWordVecComponent(kaldi::nnet1::FofeWordVecComponent *this, int a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  double result;

  kaldi::nnet1::WordVecComponent::WordVecComponent(this, a2, a3, a4, a5);
  *(_QWORD *)v5 = &off_1EA9299A8;
  *(_QWORD *)(v5 + 88) = &unk_1EA929AD8;
  *(_DWORD *)(v5 + 384) = 1060320051;
  result = 0.0;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_QWORD *)(v5 + 392) = &unk_1EA92DFA8;
  *(_BYTE *)(v5 + 432) = 0;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 464) = 0u;
  *(_QWORD *)(v5 + 440) = &unk_1EA92DFA8;
  *(_BYTE *)(v5 + 480) = 0;
  return result;
}

double kaldi::nnet1::FramePoolingComponent::FramePoolingComponent(kaldi::nnet1::FramePoolingComponent *this, int a2, int a3)
{
  double result;

  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = &off_1EA9284D0;
  *(_OWORD *)((char *)this + 56) = xmmword_1DEC3D450;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((_BYTE *)this + 86) = 0;
  *(_QWORD *)this = &off_1EA929BC0;
  *((_DWORD *)this + 22) = 0;
  result = 0.0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 42) = 1008981770;
  *((_BYTE *)this + 172) = 0;
  return result;
}

double kaldi::nnet1::ParallelComponent::ParallelComponent(kaldi::nnet1::ParallelComponent *this, int a2, int a3)
{
  double result;

  *((_DWORD *)this + 54) = a2;
  *((_DWORD *)this + 55) = a3;
  *((_WORD *)this + 112) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = &off_1EA9284D0;
  *(_OWORD *)((char *)this + 264) = xmmword_1DEC3D450;
  *((_QWORD *)this + 35) = 0x3BF800000;
  *((_DWORD *)this + 72) = 1;
  *((_WORD *)this + 146) = 0;
  *((_BYTE *)this + 294) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = &unk_1EA927930;
  *((_DWORD *)this + 10) = 1;
  *(_OWORD *)((char *)this + 56) = xmmword_1DEC3D450;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((_BYTE *)this + 86) = 0;
  *((_QWORD *)this + 6) = &off_1EA92B868;
  *((_QWORD *)this + 11) = &unk_1EA92B888;
  *((_QWORD *)this + 12) = 0x100000001;
  result = 0.0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_QWORD *)this = &off_1EA9287D0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = &off_1EA928928;
  *((_QWORD *)this + 21) = &unk_1EA928950;
  *((_WORD *)this + 88) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = &off_1EA928A88;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  return result;
}

kaldi::nnet1::Recurrent *kaldi::nnet1::Recurrent::Recurrent(kaldi::nnet1::Recurrent *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  const char *v6;

  *((_DWORD *)this + 134) = a2;
  *((_DWORD *)this + 135) = a3;
  *((_WORD *)this + 272) = 0;
  *((_QWORD *)this + 69) = 0;
  *((_QWORD *)this + 71) = 0;
  *((_QWORD *)this + 70) = 0;
  *((_QWORD *)this + 72) = &off_1EA9284D0;
  *(_OWORD *)((char *)this + 584) = xmmword_1DEC3D450;
  *((_QWORD *)this + 75) = 0x3BF800000;
  *((_DWORD *)this + 152) = 1;
  *((_WORD *)this + 306) = 0;
  *((_BYTE *)this + 614) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = &unk_1EA927930;
  *((_DWORD *)this + 10) = 1;
  *(_OWORD *)((char *)this + 56) = xmmword_1DEC3D450;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((_BYTE *)this + 86) = 0;
  *((_QWORD *)this + 6) = &off_1EA92B868;
  *((_QWORD *)this + 11) = &unk_1EA92B888;
  *((_QWORD *)this + 12) = 0x100000001;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_QWORD *)this + 19) = 0;
  *(_QWORD *)this = &off_1EA92D860;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 66) = &off_1EA92DAB0;
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)this + 160, a3, a2, 1u, 0, 0);
  *((_QWORD *)this + 26) = &unk_1EA92DFD8;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  kaldi::CuVector<float>::Resize((uint64_t)this + 208, a3, 1u, v5, v6);
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 96) = 516;
  *((_WORD *)this + 194) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *((_QWORD *)this + 49) = _D1;
  *((_DWORD *)this + 100) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = &unk_1EA92DFA8;
  *((_BYTE *)this + 472) = 0;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  return this;
}

void sub_1DE42C090(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  kaldi::CuMatrix<float>::~CuMatrix(v2);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v1, (uint64_t *)&off_1EA91C290);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 528));
  _Unwind_Resume(a1);
}

double kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, int a2, int a3)
{
  double result;

  *((_QWORD *)this + 18) = off_1EA92D6D8;
  *((_DWORD *)this + 38) = a2;
  *((_DWORD *)this + 39) = a3;
  *((_WORD *)this + 80) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = off_1EA92C038;
  *(_QWORD *)this = &unk_1EA9114C8;
  *((_QWORD *)this + 18) = &unk_1EA9115B0;
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)) = &unk_1EA9114C8;
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = &unk_1EA911680;
  *((_QWORD *)this + 18) = &off_1EA929530;
  *((_QWORD *)this + 24) = &off_1EA929600;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_QWORD *)this = &off_1EA929400;
  *((_QWORD *)this + 1) = &unk_1EA92DFA8;
  *((_BYTE *)this + 48) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 7) = &unk_1EA92DFA8;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_DWORD *)this + 27) = 1065353216;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  return result;
}

kaldi::nnet1::MultiHeadAttention *kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this, int a2, int a3)
{
  *((_QWORD *)this + 19) = off_1EA92D6D8;
  *((_DWORD *)this + 40) = a2;
  *((_DWORD *)this + 41) = a3;
  *((_WORD *)this + 84) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *(_QWORD *)this = off_1EA92BE90;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = off_1EA92C038;
  kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(this, (uint64_t *)&off_1EA91C078);
  *((_QWORD *)this + 19) = &off_1EA929160;
  *(_QWORD *)this = &off_1EA929030;
  *((_QWORD *)this + 25) = &off_1EA929230;
  *((_DWORD *)this + 36) = -1;
  return this;
}

void sub_1DE42C208(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;

  v3 = v2;
  v1[19] = v3;
  v5 = (void *)v1[22];
  if (v5)
  {
    v1[23] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::SelfAttention::SelfAttention(uint64_t this, int a2, int a3)
{
  *(_QWORD *)(this + 80) = off_1EA92D6D8;
  *(_DWORD *)(this + 88) = a2;
  *(_DWORD *)(this + 92) = a3;
  *(_WORD *)(this + 96) = 0;
  *(_QWORD *)(this + 104) = 0;
  *(_QWORD *)(this + 112) = 0;
  *(_QWORD *)(this + 120) = 0;
  *(_QWORD *)(this + 128) = off_1EA92C038;
  *(_QWORD *)this = &unk_1EA9106B0;
  *(_QWORD *)(this + 80) = &unk_1EA910798;
  *(_QWORD *)(this + *(_QWORD *)(*(_QWORD *)this - 48)) = &unk_1EA9106B0;
  *(_QWORD *)(this + *(_QWORD *)(*(_QWORD *)this - 56)) = &unk_1EA910868;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = &unk_1EA927930;
  *(_DWORD *)(this + 48) = 1;
  *(_QWORD *)(this + 128) = &off_1EA927908;
  *(_QWORD *)this = &off_1EA927668;
  *(_QWORD *)(this + 8) = &off_1EA927720;
  *(_QWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 80) = &off_1EA927838;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = 0;
  return this;
}

kaldi::nnet1::SupervisedMultiHeadAttention *kaldi::nnet1::SupervisedMultiHeadAttention::SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this, int a2, int a3)
{
  *((_QWORD *)this + 25) = off_1EA92D6D8;
  *((_DWORD *)this + 52) = a2;
  *((_DWORD *)this + 53) = a3;
  *((_WORD *)this + 108) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *(_QWORD *)this = off_1EA92BE90;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = off_1EA92C038;
  kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(this, (uint64_t *)&off_1EA91C1F8);
  *(_QWORD *)this = &unk_1EA912718;
  *((_QWORD *)this + 25) = &unk_1EA912848;
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)) = &unk_1EA912718;
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = &unk_1EA912918;
  *((_QWORD *)this + 25) = &off_1EA92C1B8;
  *(_QWORD *)this = &off_1EA92C088;
  *((_QWORD *)this + 31) = &off_1EA92C288;
  *((_QWORD *)this + 18) = -1;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_QWORD *)this + 19) = &unk_1EA92DFA8;
  *((_BYTE *)this + 192) = 0;
  return this;
}

void sub_1DE42C3B0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;

  v3 = v2;
  v1[25] = v3;
  v5 = (void *)v1[28];
  if (v5)
  {
    v1[29] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::AverageAttention::AverageAttention(uint64_t this, int a2, int a3)
{
  *(_QWORD *)(this + 72) = off_1EA92D6D8;
  *(_DWORD *)(this + 80) = a2;
  *(_DWORD *)(this + 84) = a3;
  *(_WORD *)(this + 88) = 0;
  *(_QWORD *)(this + 96) = 0;
  *(_QWORD *)(this + 104) = 0;
  *(_QWORD *)(this + 112) = 0;
  *(_QWORD *)(this + 120) = off_1EA92C038;
  *(_QWORD *)this = &unk_1EA9108B8;
  *(_QWORD *)(this + 72) = &unk_1EA9109A0;
  *(_QWORD *)(this + *(_QWORD *)(*(_QWORD *)this - 48)) = &unk_1EA9108B8;
  *(_QWORD *)(this + *(_QWORD *)(*(_QWORD *)this - 56)) = &unk_1EA910A70;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = &unk_1EA927930;
  *(_DWORD *)(this + 48) = 1;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 72) = &off_1EA9283D8;
  *(_QWORD *)(this + 120) = &off_1EA9284A8;
  *(_QWORD *)this = &off_1EA928208;
  *(_QWORD *)(this + 8) = &off_1EA9282C0;
  *(_QWORD *)(this + 56) = 0;
  return this;
}

void *kaldi::nnet1::Component::Delete(void *this, kaldi::nnet1::Component *a2)
{
  int v2;
  void *v3;
  uint64_t v4;
  kaldi::nnet1::Component *v5;
  const struct __class_type_info *v6;
  _QWORD *v7;
  std::string *p_p;
  std::string::size_type size;
  const void *v10;
  ptrdiff_t v11;
  _QWORD *v12;
  _QWORD *v13;
  std::string __p;
  _QWORD v15[34];

  if (this)
  {
    v2 = (int)a2;
    v3 = this;
    v4 = (*(uint64_t (**)(void *))(*(_QWORD *)this + 24))(this);
    v5 = (kaldi::nnet1::Component *)v4;
    if ((int)v4 > 512)
    {
      switch((int)v4)
      {
        case 1025:
          goto LABEL_95;
        case 1026:
          goto LABEL_95;
        case 1027:
          goto LABEL_95;
        case 1028:
          goto LABEL_95;
        case 1029:
        case 1030:
          goto LABEL_12;
        case 1031:
          goto LABEL_95;
        case 1032:
          goto LABEL_95;
        case 1033:
          goto LABEL_95;
        case 1034:
          goto LABEL_95;
        case 1035:
          goto LABEL_95;
        case 1036:
          goto LABEL_95;
        case 1037:
          goto LABEL_95;
        case 1038:
          goto LABEL_95;
        case 1039:
          goto LABEL_95;
        case 1040:
          goto LABEL_95;
        case 1041:
          goto LABEL_95;
        case 1042:
          goto LABEL_95;
        default:
          switch((int)v4)
          {
            case 513:
              break;
            case 514:
              break;
            case 515:
              break;
            case 516:
              break;
            case 517:
              break;
            case 518:
              break;
            case 519:
              break;
            case 520:
              break;
            case 521:
              break;
            case 522:
              break;
            case 523:
              break;
            case 524:
              break;
            case 525:
              break;
            default:
              switch((int)v4)
              {
                case 2048:
                  goto LABEL_95;
                case 2049:
                  goto LABEL_95;
                case 2050:
                  goto LABEL_95;
                case 2051:
                  goto LABEL_95;
                case 2052:
                  goto LABEL_95;
                case 2053:
                  goto LABEL_95;
                case 2054:
                  goto LABEL_95;
                case 2055:
                  goto LABEL_81;
                case 2056:
                  goto LABEL_95;
                case 2057:
                  goto LABEL_95;
                case 2058:
                  goto LABEL_95;
                default:
                  goto LABEL_12;
              }
          }
          goto LABEL_95;
      }
    }
    switch((int)v4)
    {
      case 257:
        goto LABEL_95;
      case 258:
        goto LABEL_95;
      case 259:
        goto LABEL_95;
      case 260:
        goto LABEL_95;
      case 261:
        goto LABEL_95;
      case 262:
        goto LABEL_95;
      case 263:
        goto LABEL_95;
      case 264:
        goto LABEL_95;
      case 265:
        goto LABEL_95;
      case 266:
        goto LABEL_95;
      case 267:
        goto LABEL_95;
      case 268:
        goto LABEL_95;
      case 269:
        goto LABEL_95;
      case 270:
        goto LABEL_95;
      case 271:
        goto LABEL_95;
      case 272:
        goto LABEL_95;
      case 273:
        goto LABEL_81;
      case 274:
        goto LABEL_81;
      case 275:
        goto LABEL_81;
      case 276:
        goto LABEL_81;
      case 277:
        goto LABEL_81;
      case 278:
        goto LABEL_81;
      case 279:
        goto LABEL_81;
      case 280:
        goto LABEL_81;
      case 281:
        goto LABEL_81;
      case 282:
        goto LABEL_81;
      case 283:
        goto LABEL_81;
      case 284:
        goto LABEL_95;
      case 285:
        goto LABEL_81;
      case 286:
        goto LABEL_81;
      case 287:
        goto LABEL_81;
      case 288:
        goto LABEL_81;
      case 289:
LABEL_81:
        v10 = v3;
        v11 = -1;
        goto LABEL_96;
      case 290:
LABEL_95:
        v10 = v3;
        v11 = 0;
LABEL_96:
        if (this)
          this = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)this + 8))(this);
        break;
      default:
LABEL_12:
        if (!v2)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15, "Delete", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-component.cc", 723);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Missing type: ", 14);
          v12 = (_QWORD *)std::ostream::operator<<();
          v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
          kaldi::nnet1::Component::TypeToMarker(v5, &__p);
          std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v13, (uint64_t)&__p);
          std::string::~string(&__p);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
        }
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15, "Delete", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-component.cc", 720);
          v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Missing type: ", 14);
          kaldi::nnet1::Component::TypeToMarker(v5, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
        }
        this = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v3 + 8))(v3);
        break;
    }
  }
  return this;
}

uint64_t kaldi::nnet1::Component::Init(const std::string *a1, uint64_t a2)
{
  uint64_t v3;
  const char *v4;
  kaldi::nnet1::Component *v5;
  _QWORD *v6;
  void *p_p;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  _QWORD v15[35];
  uint64_t v16;
  void *__p;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[12];
  char v21;
  uint64_t v22;

  std::istringstream::basic_istringstream[abi:ne180100](v20, a1, 8);
  __p = 0;
  v18 = 0;
  v19 = 0;
  v16 = 0;
  kaldi::ReadToken(v20, 0, (uint64_t)&__p, v3, v4);
  v5 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v15, "Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-component.cc", 736, 3);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Initializing component of type ", 31);
    if (v19 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v19 >= 0)
      v8 = HIBYTE(v19);
    else
      v8 = v18;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)p_p, v8);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v15);
  }
  kaldi::ExpectToken(v20, 0, (kaldi *)"<InputDim>");
  kaldi::ReadBasicType<int>(v20, 0, (uint64_t)&v16 + 4, v9, v10);
  kaldi::ExpectToken(v20, 0, (kaldi *)"<OutputDim>");
  kaldi::ReadBasicType<int>(v20, 0, (uint64_t)&v16, v11, v12);
  v13 = kaldi::nnet1::Component::NewComponentOfType(v5, HIDWORD(v16), v16);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v13 + 96))(v13, v20, a2);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  v20[0] = *MEMORY[0x1E0DE4F58];
  *(uint64_t *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  v20[2] = MEMORY[0x1E0DE4FB8] + 16;
  if (v21 < 0)
    operator delete((void *)v20[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1DF0ECF6C](&v22);
  return v13;
}

void sub_1DE42CE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  if (a51 < 0)
    operator delete(__p);
  std::istringstream::~istringstream((uint64_t)&a52);
  _Unwind_Resume(a1);
}

_QWORD *std::istringstream::basic_istringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;

  v6 = MEMORY[0x1E0DE4FD8];
  v7 = MEMORY[0x1E0DE4FD8] + 64;
  a1[15] = MEMORY[0x1E0DE4FD8] + 64;
  v8 = (uint64_t)(a1 + 2);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 16);
  *a1 = v9;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v9 - 24)) = v10;
  a1[1] = 0;
  v11 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 2);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6 + 24;
  a1[15] = v7;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3 | 8);
  return a1;
}

void sub_1DE42CF84(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1DF0ECF6C](v1);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F58];
  v3 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1DF0ECF6C](a1 + 120);
  return a1;
}

uint64_t kaldi::nnet1::Component::Read(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  int v10;
  unsigned __int16 *p_p;
  uint64_t v12;
  int v13;
  int v14;
  int *v16;
  int v17;
  int v18;
  uint64_t v20;
  const char *v21;
  kaldi::nnet1::Component *v22;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = 0;
  v27 = 0;
  __p = 0;
  v25 = 0;
  if (kaldi::Peek(a1, a2) == -1)
    return 0;
  kaldi::ReadToken(a1, a2, (uint64_t)&__p, v6, v7);
  v10 = HIBYTE(v26);
  if (SHIBYTE(v26) < 0)
  {
    if (v25 != 6)
      goto LABEL_16;
    p_p = (unsigned __int16 *)__p;
  }
  else
  {
    if (HIBYTE(v26) != 6)
      goto LABEL_13;
    p_p = (unsigned __int16 *)&__p;
  }
  v13 = *(_DWORD *)p_p;
  v14 = p_p[2];
  if (v13 == 1701727804 && v14 == 15988)
  {
    kaldi::ReadToken(a1, a2, (uint64_t)&__p, v8, v9);
    v10 = HIBYTE(v26);
    if ((v26 & 0x8000000000000000) == 0)
    {
LABEL_13:
      if (v10 == 7)
      {
        v16 = (int *)&__p;
        goto LABEL_18;
      }
      goto LABEL_22;
    }
  }
  else if ((v26 & 0x8000000000000000) == 0)
  {
    goto LABEL_13;
  }
LABEL_16:
  if (v25 == 7)
  {
    v16 = (int *)__p;
LABEL_18:
    v17 = *v16;
    v18 = *(int *)((char *)v16 + 3);
    if (v17 == 1850617660 && v18 == 1047815534)
    {
      v12 = 0;
      if ((v10 & 0x80) == 0)
        return v12;
      goto LABEL_23;
    }
  }
LABEL_22:
  kaldi::ReadBasicType<int>(a1, a2, (uint64_t)&v27 + 4, v8, v9);
  kaldi::ReadBasicType<int>(a1, a2, (uint64_t)&v27, v20, v21);
  v22 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
  v12 = kaldi::nnet1::Component::NewComponentOfType(v22, v27, HIDWORD(v27));
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v12 + 160))(v12, a1, a2, a3);
  if (v26 < 0)
LABEL_23:
    operator delete(__p);
  return v12;
}

void sub_1DE42D1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::Component::Write(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::Component *v8;
  uint64_t v9;
  const char *v10;
  std::string __p;

  v8 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  kaldi::nnet1::Component::TypeToMarker(v8, &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p, v9, v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteBasicType<int>(a2, a3);
  if ((a3 & 1) == 0)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2, a3, a4);
}

void sub_1DE42D288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(uint64_t a1, unsigned int *a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  float v17;
  _QWORD v18[34];

  if (a3 <= 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18, "LimitL2NormGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-component.cc", 794);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"the L2 Norm clipping value must be greater than 0, you set ", 59);
    std::ostream::operator<<();
    goto LABEL_9;
  }
  if (!a1 || !a2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18, "LimitL2NormGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-component.cc", 795);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, "either the gradient or the gradient norm data is not initialized");
LABEL_9:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, a1, 111, a5, a6);
  kaldi::CuMatrixBase<float>::ApplyPow((uint64_t)a2, v9, v10, v11, v12, 2.0);
  v17 = sqrtf(kaldi::CuMatrixBase<float>::Sum((uint64_t)a2, v13, v14, v15, v16));
  if (v17 > a3)
    kaldi::CuMatrixBase<float>::Scale(a1, a3 / v17);
}

void kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  float v9;
  _QWORD v10[34];

  if (a6 <= 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "LimitL2NormGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-component.cc", 809);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"the L2 Norm clipping value must be greater than 0, you set ", 59);
    std::ostream::operator<<();
    goto LABEL_9;
  }
  if (!a1 || !a2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "LimitL2NormGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-component.cc", 810);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "either the gradient or the gradient norm data is not initialized");
LABEL_9:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  kaldi::CuVectorBase<float>::CopyFromVec(a2, a1, a3, a4, a5);
  kaldi::CuVectorBase<float>::ApplyPow((uint64_t)a2, 2.0);
  v9 = sqrtf(kaldi::CuVectorBase<float>::Sum((uint64_t)a2));
  if (v9 > a6)
    kaldi::CuVectorBase<float>::Scale(a1, a6 / v9);
}

uint64_t kaldi::nnet1::UpdatableComponent::ClipGradient(uint64_t a1, float a2)
{
  _QWORD v5[34];

  if (a2 <= 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5, "ClipGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-component.cc", 822);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"the gradient clipping value must be greater than 0, you set ", 60);
    std::ostream::operator<<();
    goto LABEL_6;
  }
  if (!a1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5, "ClipGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-component.cc", 823);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "the gradient data is not initialized");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  kaldi::CuMatrixBase<float>::ApplyCeiling(a1, a2);
  return kaldi::CuMatrixBase<float>::ApplyFloor(a1, -a2);
}

{
  _QWORD v5[34];

  if (a2 <= 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5, "ClipGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-component.cc", 829);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"the gradient clipping value must be greater than 0, you set ", 60);
    std::ostream::operator<<();
    goto LABEL_6;
  }
  if (!a1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5, "ClipGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-component.cc", 830);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "the gradient data is not initialized");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  kaldi::CuVectorBase<float>::ApplyCeiling(a1, a2);
  return kaldi::CuVectorBase<float>::ApplyFloor(a1, -a2);
}

void kaldi::nnet1::UpdatableComponent::RmspropGradient(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  _QWORD v17[34];

  if (a3 < 0.0 || a3 > 1.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "RmspropGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-component.cc", 838);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"the factor in RMSPROP must be [0, 1], you set ", 46);
    std::ostream::operator<<();
    goto LABEL_10;
  }
  if (!a1 || !a2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "RmspropGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-component.cc", 839);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "either the gradient or the gradient norm data is not initialized");
LABEL_10:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  kaldi::CuMatrixBase<float>::AddMatEwpMat(a2, a1, 111, a1, (const char *)0x6F, 1.0 - a3, a3);
  kaldi::CuMatrixBase<float>::ApplyPow(a2, v6, v7, v8, v9, 0.5);
  kaldi::CuMatrixBase<float>::DivElements(a1, a2, v10, v11, v12);
  kaldi::CuMatrixBase<float>::ApplyPow(a2, v13, v14, v15, v16, 2.0);
}

void kaldi::nnet1::UpdatableComponent::RmspropGradient(uint64_t a1, uint64_t a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _QWORD v12[34];

  if (a3 < 0.0 || a3 > 1.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "RmspropGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-component.cc", 849);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"the factor in RMSPROP must be [0, 1], you set ", 46);
    std::ostream::operator<<();
    goto LABEL_10;
  }
  if (!a1 || !a2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "RmspropGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-component.cc", 850);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "either the gradient or the gradient norm data is not initialized");
LABEL_10:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  kaldi::CuVectorBase<float>::AddVecVec(a2, a1, a1, a5, a6, 1.0 - a3, a3);
  kaldi::CuVectorBase<float>::ApplyPow(a2, 0.5);
  kaldi::CuVectorBase<float>::DivElements(a1, a2, v9, v10, v11);
  kaldi::CuVectorBase<float>::ApplyPow(a2, 2.0);
}

uint64_t kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(kaldi::nnet1::Quantizable8BitComponentItf *this)
{
  return (*(uint64_t (**)(kaldi::nnet1::Quantizable8BitComponentItf *))(*(_QWORD *)this + 16))(this);
}

void kaldi::nnet1::Component::~Component(kaldi::nnet1::Component *this)
{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

void kaldi::nnet1::MaxPooling2DComponent::~MaxPooling2DComponent(kaldi::nnet1::MaxPooling2DComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::AddShift::~AddShift(kaldi::nnet1::AddShift *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1EA92D4F0;
  v2 = (void *)*((_QWORD *)this + 23);
  if (v2)
  {
    *((_QWORD *)this + 24) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 144);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 120);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *((_QWORD *)this + 11) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 88);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  kaldi::nnet1::AddShift::~AddShift(this);
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::UpdatableComponent::~UpdatableComponent(kaldi::nnet1::UpdatableComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1EA929750;
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::UpdatableComponent *)((char *)this + 48));
  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

void kaldi::nnet1::AveragePooling2DComponent::~AveragePooling2DComponent(kaldi::nnet1::AveragePooling2DComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::AveragePoolingComponent::~AveragePoolingComponent(kaldi::nnet1::AveragePoolingComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::BlockSoftmax::~BlockSoftmax(kaldi::nnet1::BlockSoftmax *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1EA9267A0;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  *(_QWORD *)this = off_1EA92D6D8;
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
}

{
  kaldi::nnet1::BlockSoftmax::~BlockSoftmax(this);
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::CompressedWordVecComponent::~CompressedWordVecComponent(kaldi::nnet1::CompressedWordVecComponent *this)
{
  void *v2;

  *(_QWORD *)this = &off_1EA92B8A8;
  kaldi::CompressedMatrix::Destroy((kaldi::nnet1::CompressedWordVecComponent *)((char *)this + 48));
  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  kaldi::nnet1::CompressedWordVecComponent::~CompressedWordVecComponent(this);
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::ConvolutionalComponent::~ConvolutionalComponent(kaldi::nnet1::ConvolutionalComponent *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1EA92A058;
  v2 = (void *)*((_QWORD *)this + 44);
  if (v2)
  {
    *((_QWORD *)this + 45) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 328);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 304);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 264);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 240);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 216);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 192);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *((_QWORD *)this + 19) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 152);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 104);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  kaldi::nnet1::ConvolutionalComponent::~ConvolutionalComponent(this);
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::CopyComponent::~CopyComponent(kaldi::nnet1::CopyComponent *this)
{
  _QWORD *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1EA926920;
  v2 = (_QWORD *)((char *)this + 48);
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
    free(v3);
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  *(_QWORD *)this = off_1EA92D6D8;
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
}

{
  kaldi::nnet1::CopyComponent::~CopyComponent(this);
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::Desplice::~Desplice(kaldi::nnet1::Desplice *this)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_1EA92D618;
  v2 = (_QWORD *)((char *)this + 136);
  v3 = (void *)*((_QWORD *)this + 18);
  if (v3)
    free(v3);
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  v4 = (void *)*((_QWORD *)this + 15);
  if (v4)
    free(v4);
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  v5 = (void *)*((_QWORD *)this + 12);
  if (v5)
    free(v5);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  v6 = (void *)*((_QWORD *)this + 9);
  if (v6)
    free(v6);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *(_QWORD *)this = off_1EA92D6D8;
  v7 = (void *)*((_QWORD *)this + 3);
  if (v7)
  {
    *((_QWORD *)this + 4) = v7;
    operator delete(v7);
  }
}

{
  kaldi::nnet1::Desplice::~Desplice(this);
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::Dropout::~Dropout(kaldi::nnet1::Dropout *this)
{
  void *v2;

  *(_QWORD *)this = &off_1EA92D0A0;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 144);
  kaldi::CuRand<float>::~CuRand((uint64_t)this + 48);
  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  kaldi::nnet1::Dropout::~Dropout(this);
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::DuplicateComponent::~DuplicateComponent(kaldi::nnet1::DuplicateComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::FofeWordVecComponent::~FofeWordVecComponent(kaldi::nnet1::FofeWordVecComponent *this)
{
  *(_QWORD *)this = &off_1EA9299A8;
  *((_QWORD *)this + 11) = &unk_1EA929AD8;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 440);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 392);
  kaldi::nnet1::WordVecComponent::~WordVecComponent(this);
}

{
  kaldi::nnet1::FofeWordVecComponent::~FofeWordVecComponent(this);
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::WordVecComponent::~WordVecComponent(kaldi::nnet1::WordVecComponent *this)
{
  *(_QWORD *)this = &off_1EA9285B0;
  *((_QWORD *)this + 11) = &unk_1EA9286E0;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)this + 39);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 264);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 192);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 144);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 96);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  kaldi::nnet1::WordVecComponent::~WordVecComponent(this);
  JUMPOUT(0x1DF0ED014);
}

void `non-virtual thunk to'kaldi::nnet1::FofeWordVecComponent::~FofeWordVecComponent(kaldi::nnet1::FofeWordVecComponent *this)
{
  kaldi::nnet1::FofeWordVecComponent::~FofeWordVecComponent((kaldi::nnet1::FofeWordVecComponent *)((char *)this - 88));
}

{
  kaldi::nnet1::FofeWordVecComponent::~FofeWordVecComponent((kaldi::nnet1::FofeWordVecComponent *)((char *)this - 88));
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::FramePoolingComponent::~FramePoolingComponent(kaldi::nnet1::FramePoolingComponent *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1EA929BC0;
  v3 = (void **)((char *)this + 144);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 120);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  kaldi::nnet1::FramePoolingComponent::~FramePoolingComponent(this);
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::HistoricalComponent::~HistoricalComponent(kaldi::nnet1::HistoricalComponent *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = off_1EA929878;
  v1 = (void **)((char *)this + 8);
  kaldi::nnet1::HistoryOptions::~HistoryOptions((kaldi::nnet1::HistoricalComponent *)((char *)this + 32));
  v2 = v1;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void kaldi::nnet1::IdentityComponent::~IdentityComponent(kaldi::nnet1::IdentityComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::InterpolationComponent::~InterpolationComponent(kaldi::nnet1::InterpolationComponent *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1EA92A180;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1EA92D6D8;
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
}

{
  kaldi::nnet1::InterpolationComponent::~InterpolationComponent(this);
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::KlHmm::~KlHmm(kaldi::nnet1::KlHmm *this)
{
  void *v2;

  *(_QWORD *)this = &off_1EA92CF20;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 88);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 48);
  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  kaldi::nnet1::KlHmm::~KlHmm(this);
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::LogSoftmax::~LogSoftmax(kaldi::nnet1::LogSoftmax *this)
{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::MaxoutComponent::~MaxoutComponent(kaldi::nnet1::MaxoutComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::MaxPoolingComponent::~MaxPoolingComponent(kaldi::nnet1::MaxPoolingComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::MultiSoftmax::~MultiSoftmax(kaldi::nnet1::MultiSoftmax *this)
{
  kaldi::nnet1::BlockSoftmax::~BlockSoftmax(this);
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::ParallelComponent::~ParallelComponent(kaldi::nnet1::ParallelComponent *this, uint64_t *a2)
{
  uint64_t v4;
  void **v5;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[3];
  *((_QWORD *)this + 20) = &off_1EA928928;
  *((_QWORD *)this + 21) = &unk_1EA928950;
  v5 = (void **)((char *)this + 184);
  std::vector<kaldi::nnet1::Nnet>::__destroy_vector::operator()[abi:ne180100](&v5);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(this, a2 + 1);
}

void kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(kaldi::nnet1::RecurrentBaseComponent *this, uint64_t *a2)
{
  uint64_t v3;
  void **v4;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = a2[1];
  v4 = (void **)((char *)this + 128);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 104);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions((kaldi::nnet1::RecurrentBaseComponent *)((char *)this + 48));
  *(_QWORD *)this = off_1EA929878;
  kaldi::nnet1::HistoryOptions::~HistoryOptions((kaldi::nnet1::RecurrentBaseComponent *)((char *)this + 32));
  v4 = (void **)((char *)this + 8);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void kaldi::nnet1::ParallelComponent::~ParallelComponent(kaldi::nnet1::ParallelComponent *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 208));
}

{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 208));
  JUMPOUT(0x1DF0ED014);
}

void `non-virtual thunk to'kaldi::nnet1::ParallelComponent::~ParallelComponent(kaldi::nnet1::ParallelComponent *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::ParallelComponent *)((char *)this + 48));
}

{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::ParallelComponent *)((char *)this + 40));
}

{
  kaldi::nnet1::ParallelComponent::~ParallelComponent((kaldi::nnet1::ParallelComponent *)((char *)this - 160));
}

{
  kaldi::nnet1::ParallelComponent::~ParallelComponent((kaldi::nnet1::ParallelComponent *)((char *)this - 168));
}

void `virtual thunk to'kaldi::nnet1::ParallelComponent::~ParallelComponent(kaldi::nnet1::ParallelComponent *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 208));
}

{
  kaldi::nnet1::ParallelComponent::~ParallelComponent((kaldi::nnet1::ParallelComponent *)((char *)this
                                                                                        + *(_QWORD *)(*(_QWORD *)this - 24)));
}

void kaldi::nnet1::PNormComponent::~PNormComponent(kaldi::nnet1::PNormComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::Rbm::~Rbm(kaldi::nnet1::Rbm *this)
{
  void *v2;

  *(_QWORD *)this = &off_1EA92CD78;
  *((_QWORD *)this + 33) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 264);
  *((_QWORD *)this + 29) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 232);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 184);
  *((_QWORD *)this + 19) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 152);
  *((_QWORD *)this + 15) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 120);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 72);
  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  kaldi::nnet1::Rbm::~Rbm(this);
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::RectifiedLinearComponent::~RectifiedLinearComponent(kaldi::nnet1::RectifiedLinearComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::ExponentialLinearComponent::~ExponentialLinearComponent(kaldi::nnet1::ExponentialLinearComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::ScaledExponentialLinearComponent::~ScaledExponentialLinearComponent(kaldi::nnet1::ScaledExponentialLinearComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::Recurrent::~Recurrent(kaldi::nnet1::Recurrent *this, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  void **v6;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[3];
  v6 = (void **)((char *)this + 504);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 480);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 432);
  v5 = (void *)*((_QWORD *)this + 51);
  if (v5)
  {
    *((_QWORD *)this + 52) = v5;
    operator delete(v5);
  }
  v6 = (void **)((char *)this + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 312);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 288);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 264);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 240);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  *((_QWORD *)this + 26) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 208);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 160);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(this, a2 + 1);
}

void kaldi::nnet1::Recurrent::~Recurrent(kaldi::nnet1::Recurrent *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 528));
}

{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 528));
  JUMPOUT(0x1DF0ED014);
}

void `virtual thunk to'kaldi::nnet1::Recurrent::~Recurrent(kaldi::nnet1::Recurrent *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 528));
}

{
  kaldi::nnet1::Recurrent::~Recurrent((kaldi::nnet1::Recurrent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

void kaldi::nnet1::RecurrentAttentionBaseComponent::~RecurrentAttentionBaseComponent(kaldi::nnet1::RecurrentAttentionBaseComponent *this, uint64_t a2)
{
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentAttentionBaseComponent *)((char *)this + 16), (uint64_t *)(a2 + 24));
}

void kaldi::nnet1::RelaxedSoftmax::~RelaxedSoftmax(kaldi::nnet1::RelaxedSoftmax *this)
{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::Rescale::~Rescale(kaldi::nnet1::Rescale *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1EA92D248;
  v2 = (void *)*((_QWORD *)this + 29);
  if (v2)
  {
    *((_QWORD *)this + 30) = v2;
    operator delete(v2);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 168);
  v3 = (void **)((char *)this + 144);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 120);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *((_QWORD *)this + 11) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 88);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  kaldi::nnet1::Rescale::~Rescale(this);
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::SentenceAveragingComponent::~SentenceAveragingComponent(kaldi::nnet1::SentenceAveragingComponent *this)
{
  *(_QWORD *)this = &off_1EA92BA28;
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  *(_QWORD *)this = &off_1EA92BA28;
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::SharedNceComponent::~SharedNceComponent(kaldi::nnet1::SharedNceComponent *this)
{
  *(_QWORD *)this = &off_1EA929628;
  *((_QWORD *)this + 47) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 376);
  *((_QWORD *)this + 43) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 344);
  *((_QWORD *)this + 39) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 312);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 264);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 216);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 168);
  *((_QWORD *)this + 17) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 136);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 88);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  kaldi::nnet1::SharedNceComponent::~SharedNceComponent(this);
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::Sigmoid::~Sigmoid(kaldi::nnet1::Sigmoid *this)
{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::Softmax::~Softmax(kaldi::nnet1::Softmax *this)
{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::Splice::~Splice(kaldi::nnet1::Splice *this)
{
  _QWORD *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1EA92CFE0;
  v2 = (_QWORD *)((char *)this + 48);
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
    free(v3);
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  *(_QWORD *)this = off_1EA92D6D8;
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
}

{
  kaldi::nnet1::Splice::~Splice(this);
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::Tanh::~Tanh(kaldi::nnet1::Tanh *this)
{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::TemporalMaxPoolingComponent::~TemporalMaxPoolingComponent(kaldi::nnet1::TemporalMaxPoolingComponent *this)
{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1DF0ED014);
}

void `non-virtual thunk to'kaldi::nnet1::WordVecComponent::~WordVecComponent(kaldi::nnet1::WordVecComponent *this)
{
  kaldi::nnet1::WordVecComponent::~WordVecComponent((kaldi::nnet1::WordVecComponent *)((char *)this - 88));
}

{
  kaldi::nnet1::WordVecComponent::~WordVecComponent((kaldi::nnet1::WordVecComponent *)((char *)this - 88));
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::CompressedWordTransComponent::~CompressedWordTransComponent(kaldi::nnet1::CompressedWordTransComponent *this)
{
  void *v2;

  *(_QWORD *)this = &off_1EA92BF78;
  kaldi::CompressedMatrix::Destroy((kaldi::nnet1::CompressedWordTransComponent *)((char *)this + 80));
  *((_QWORD *)this + 6) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 48);
  *(_QWORD *)this = off_1EA92D6D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  kaldi::nnet1::CompressedWordTransComponent::~CompressedWordTransComponent(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::nnet1::HistoricalComponent::GetHistoryOptions(kaldi::nnet1::HistoricalComponent *this)
{
  return (uint64_t)this + 32;
}

uint64_t kaldi::nnet1::HistoricalComponent::SetHistoryOptions(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t kaldi::nnet1::AttentionBaseComponent::SetSourceVectorDimension(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) = a2;
  return this;
}

uint64_t kaldi::nnet1::AttentionBaseComponent::SetMaxAttentions(uint64_t this, int a2)
{
  *(_DWORD *)(this + 12) = a2;
  return this;
}

uint64_t kaldi::nnet1::RelaxedSoftmax::Copy(kaldi::nnet1::RelaxedSoftmax *this)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::RelaxedSoftmax::RelaxedSoftmax(v2, *((_DWORD *)this + 2), *((_DWORD *)this + 3), *((float *)this + 12));
  return v2;
}

void sub_1DE42F2CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C405D9F5A38);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RelaxedSoftmax::GetType(kaldi::nnet1::RelaxedSoftmax *this)
{
  return 523;
}

float kaldi::nnet1::RelaxedSoftmax::InitData(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  const char *v5;
  float result;
  _QWORD v7[34];

  kaldi::ExpectToken(a2, 0, (kaldi *)"<RelaxFactor>");
  kaldi::ReadBasicType<float>(a2, 0, (float *)(a1 + 48), v4, v5);
  result = *(float *)(a1 + 48);
  if (result <= 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-activation.h", 98);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Relaxation factor must be positive; found: ",
      43);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  return result;
}

_QWORD *kaldi::nnet1::RelaxedSoftmax::WriteData(int a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  int v5;

  v5 = (int)a3;
  kaldi::WriteToken(a2, a3, (kaldi *)"<RelaxFactor>", a4, a5);
  return kaldi::WriteBasicType<float>((uint64_t)a2, v5);
}

uint64_t kaldi::nnet1::RelaxedSoftmax::PropagateFnc(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;

  kaldi::CuMatrixBase<float>::AddMat((uint64_t)a3, a2, 111, a4, a5, *(float *)(a1 + 48), 0.0);
  return kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow(a3, (uint64_t)a3, v6, v7, v8);
}

float kaldi::nnet1::RelaxedSoftmax::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::CuVectorBase<float>::AddVec(a3, a2, a3, a4, a5, *(float *)(a1 + 48), 0.0);
  return kaldi::CuVectorBase<float>::ApplySoftMax(a3);
}

void kaldi::nnet1::RelaxedSoftmax::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)a5, a4, 111, a4, a5, *(float *)(a1 + 48), 0.0);
}

float kaldi::nnet1::RelaxedSoftmax::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  const char *v7;
  float result;
  _QWORD v9[34];

  kaldi::ExpectToken(a2, a3, (kaldi *)"<RelaxFactor>");
  kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 48), v6, v7);
  result = *(float *)(a1 + 48);
  if (result <= 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-activation.h", 105);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Relaxation factor must be positive; found: ",
      43);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  return result;
}

uint64_t kaldi::nnet1::LogSoftmax::Copy(kaldi::nnet1::LogSoftmax *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1EA92D6D8;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1EA9266E0;
  return v2;
}

void sub_1DE42F5B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C40DBBC96B9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LogSoftmax::GetType(kaldi::nnet1::LogSoftmax *this)
{
  return 514;
}

void kaldi::nnet1::LogSoftmax::PropagateFnc(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow(a3, a2, (uint64_t)a3, a4, a5);
  kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)a3, 1.0e-20);
  kaldi::CuMatrixBase<float>::ApplyLog((uint64_t)a3, v6, v7, v8, v9);
}

void kaldi::nnet1::LogSoftmax::PropagateFnc(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, const char *a5)
{
  kaldi::CuVectorBase<float>::CopyFromVec(a3, a2, (uint64_t)a3, a4, a5);
  kaldi::CuVectorBase<float>::ApplySoftMax((uint64_t)a3);
  kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)a3, 1.0e-20);
  kaldi::CuVectorBase<float>::ApplyLog((uint64_t)a3);
}

unsigned int *kaldi::nnet1::LogSoftmax::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, a4, 111, a4, (const char *)a5);
}

uint64_t kaldi::nnet1::Softmax::Copy(kaldi::nnet1::Softmax *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1EA92D6D8;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1EA92D430;
  return v2;
}

void sub_1DE42F6DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C40DBBC96B9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Softmax::GetType(kaldi::nnet1::Softmax *this)
{
  return 513;
}

uint64_t kaldi::nnet1::Softmax::PropagateFnc(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  return kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow(a3, a2, (uint64_t)a3, a4, a5);
}

float kaldi::nnet1::Softmax::PropagateFnc(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, const char *a5)
{
  kaldi::CuVectorBase<float>::CopyFromVec(a3, a2, (uint64_t)a3, a4, a5);
  return kaldi::CuVectorBase<float>::ApplySoftMax((uint64_t)a3);
}

kaldi::nnet1::BlockSoftmax *kaldi::nnet1::BlockSoftmax::Copy(kaldi::nnet1::BlockSoftmax *this)
{
  kaldi::nnet1::BlockSoftmax *v2;

  v2 = (kaldi::nnet1::BlockSoftmax *)operator new();
  kaldi::nnet1::BlockSoftmax::BlockSoftmax(v2, this);
  return v2;
}

void sub_1DE42F77C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1091C4033AB46EFLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::BlockSoftmax::GetType(kaldi::nnet1::BlockSoftmax *this)
{
  return 515;
}

void kaldi::nnet1::BlockSoftmax::InitData(std::vector<int> *this, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t *v7;
  std::vector<int> *v8;
  BOOL v10;
  __int128 *v11;
  uint64_t v12;
  int v13;
  _QWORD *v15;
  __int128 *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD v20[34];
  __int128 v21;
  uint64_t v22;

  v21 = 0uLL;
  v22 = 0;
  v7 = a2 + 4;
  v8 = this + 2;
  while (1)
  {
    if ((*((_BYTE *)v7 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      goto LABEL_26;
    kaldi::ReadToken(a2, 0, (uint64_t)&v21, a4, a5);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      break;
    if (*((_QWORD *)&v21 + 1) != 11
      || (*(_QWORD *)v21 == 0x69446B636F6C423CLL ? (v10 = *(_QWORD *)(v21 + 3) == 0x3E736D69446B636FLL) : (v10 = 0), !v10))
    {
      if (*((_QWORD *)&v21 + 1) == 12)
      {
        v11 = (__int128 *)v21;
        goto LABEL_21;
      }
LABEL_29:
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-activation.h", 210);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Unknown token ", 14);
      if (v22 >= 0)
        v16 = &v21;
      else
        v16 = (__int128 *)v21;
      if (v22 >= 0)
        v17 = HIBYTE(v22);
      else
        v17 = *((_QWORD *)&v21 + 1);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", a typo in config?", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" (BlockDims)", 12);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
    }
LABEL_16:
    kaldi::ReadIntegerVector<int>(a2, 0, v8, 0, 0, 0, 0);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if (HIBYTE(v22) == 11)
  {
    if ((_QWORD)v21 != 0x69446B636F6C423CLL || *(_QWORD *)((char *)&v21 + 3) != 0x3E736D69446B636FLL)
      goto LABEL_29;
    goto LABEL_16;
  }
  if (HIBYTE(v22) != 12)
    goto LABEL_29;
  v11 = &v21;
LABEL_21:
  v12 = *(_QWORD *)v11;
  v13 = *((_DWORD *)v11 + 2);
  if (v12 != 0x6E6F706D6F432F3CLL || v13 != 1047817829)
    goto LABEL_29;
LABEL_26:
  kaldi::nnet1::BlockSoftmax::InitOffset(this);
  if (SHIBYTE(v22) < 0)
    operator delete((void *)v21);
}

void sub_1DE42F9A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 65) < 0)
    operator delete(*(void **)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::BlockSoftmax::WriteData(uint64_t a1, _QWORD *a2, int a3)
{
  return kaldi::WriteIntegerByteArray<int>(a2, a3, 0, (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2, *(_QWORD *)(a1 + 48));
}

uint64_t kaldi::nnet1::BlockSoftmax::PropagateFnc(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  void *v14;
  __int128 v15;
  __int128 v16;

  v3 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v3)
  {
    v6 = (_QWORD *)result;
    v7 = 0;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v14, a2, 0, *(_DWORD *)(a2 + 20), (const char *)*(unsigned int *)(v6[9] + 4 * v7), *(_DWORD *)(v3 + 4 * v7));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v11, a3, 0, *(_DWORD *)(a3 + 20), (const char *)*(unsigned int *)(v6[9] + 4 * v7), *(_DWORD *)(v6[6] + 4 * v7));
      kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow((unsigned int *)&v11, (uint64_t)&v14, v8, v9, v10);
      v11 = &unk_1EA926508;
      v12 = 0u;
      v13 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v11);
      v14 = &unk_1EA926508;
      v15 = 0u;
      v16 = 0u;
      result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v14);
      ++v7;
      v3 = v6[6];
    }
    while (v7 < (v6[7] - v3) >> 2);
  }
  return result;
}

void sub_1DE42FADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;

  a9 = v15 + 16;
  *v16 = 0u;
  v16[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a9);
  a14 = v15 + 16;
  *v14 = 0u;
  v14[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a14);
  _Unwind_Resume(a1);
}

unsigned int *kaldi::nnet1::BlockSoftmax::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  _QWORD v23[4];
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  void *v27;
  __int128 v28;
  __int128 v29;

  result = kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a5, a4, 111, a4, (const char *)a5);
  v8 = a1[6];
  if (a1[7] != v8)
  {
    v9 = 0;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v27, a5, 0, *(_DWORD *)(a5 + 20), (const char *)*(unsigned int *)(a1[9] + 4 * v9), *(_DWORD *)(v8 + 4 * v9));
      v24[1] = 0;
      v25 = 0;
      v24[0] = &unk_1EA92DFD8;
      v26 = 0;
      kaldi::CuVector<float>::Resize((uint64_t)v24, HIDWORD(v28), 0, v10, v11);
      kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)v24, (uint64_t)&v27, 1.0, 0.0, v12, v13, v14);
      v23[1] = 0;
      v23[2] = 0;
      v23[0] = &unk_1EA92DFD8;
      v23[3] = v26;
      kaldi::CuVector<float>::Resize((uint64_t)v23, v25, 1u, v15, v16);
      kaldi::CuVectorBase<float>::CopyFromVec(v23, (uint64_t)v24, v17, v18, v19);
      kaldi::CuVectorBase<float>::Scale((uint64_t)v23, -1.0);
      kaldi::CuVectorBase<float>::Add((uint64_t)v23, 1.0);
      kaldi::CuMatrixBase<float>::MulRowsVec((uint64_t)&v27, (uint64_t)v23, v20, v21, v22);
      v23[0] = &unk_1EA92DFD8;
      kaldi::CuVector<float>::Destroy((uint64_t)v23);
      v24[0] = &unk_1EA92DFD8;
      kaldi::CuVector<float>::Destroy((uint64_t)v24);
      v27 = &unk_1EA926508;
      v28 = 0u;
      v29 = 0u;
      result = (unsigned int *)kaldi::CuMatrixBase<float>::~CuMatrixBase(&v27);
      ++v9;
      v8 = a1[6];
    }
    while (v9 < (a1[7] - v8) >> 2);
  }
  return result;
}

void sub_1DE42FCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _OWORD *v18;

  kaldi::CuVector<float>::~CuVector(&a14);
  a18 = &unk_1EA926508;
  *v18 = 0u;
  v18[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a18);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::BlockSoftmax::ReadData(std::vector<int> *a1, _QWORD *a2, int a3)
{
  kaldi::ReadIntegerVector<int>(a2, a3, a1 + 2, 0, 0, 0, 0);
  kaldi::nnet1::BlockSoftmax::InitOffset(a1);
}

uint64_t kaldi::nnet1::Sigmoid::Copy(kaldi::nnet1::Sigmoid *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1EA92D6D8;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1EA92D370;
  return v2;
}

void sub_1DE42FDB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C40DBBC96B9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Sigmoid::GetType(kaldi::nnet1::Sigmoid *this)
{
  return 516;
}

void kaldi::nnet1::Sigmoid::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::CuMatrixBase<float>::Sigmoid(a3, a2, a3, a4, a5);
}

{
  kaldi::CuVectorBase<float>::Sigmoid(a3, a2, a3, a4, a5);
}

uint64_t *kaldi::nnet1::Sigmoid::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)a5, a3, a4, a4, a5);
}

uint64_t kaldi::nnet1::Tanh::Copy(kaldi::nnet1::Tanh *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1EA92D6D8;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1EA92CE60;
  return v2;
}

void sub_1DE42FE78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C40DBBC96B9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Tanh::GetType(kaldi::nnet1::Tanh *this)
{
  return 517;
}

void kaldi::nnet1::Tanh::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::CuMatrixBase<float>::Tanh(a3, a2, a3, a4, a5);
}

{
  kaldi::CuVectorBase<float>::Tanh(a3, a2, a3, a4, a5);
}

uint64_t *kaldi::nnet1::Tanh::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::CuMatrixBase<float>::DiffTanh((uint64_t)a5, a3, a4, a4, a5);
}

uint64_t kaldi::nnet1::Dropout::Copy(kaldi::nnet1::Dropout *this)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1EA92D6D8;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1EA92D0A0;
  v4 = *((_OWORD *)this + 4);
  *(_OWORD *)(v2 + 48) = *((_OWORD *)this + 3);
  *(_OWORD *)(v2 + 64) = v4;
  *(_DWORD *)(v2 + 80) = *((_DWORD *)this + 20);
  kaldi::CuMatrix<float>::CuMatrix(v2 + 88, (char *)this + 88, 111);
  *(_QWORD *)(v2 + 136) = *((_QWORD *)this + 17);
  kaldi::CuMatrix<float>::CuMatrix(v2 + 144, (char *)this + 144, 111);
  *(_DWORD *)(v2 + 192) = *((_DWORD *)this + 48);
  return v2;
}

void sub_1DE42FF88(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;

  kaldi::CuRand<float>::~CuRand(v2);
  *v1 = v3;
  v5 = (void *)v1[3];
  if (v5)
  {
    v1[4] = v5;
    operator delete(v5);
  }
  MEMORY[0x1DF0ED014](v1, 0x1091C4081AB2DD6);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Dropout::GetType(kaldi::nnet1::Dropout *this)
{
  return 518;
}

void kaldi::nnet1::Dropout::InitData(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  const char *v5;
  float *v6;
  uint64_t v7;
  BOOL v10;
  BOOL v11;
  _QWORD **v12;
  uint64_t v13;
  int v14;
  _QWORD *v17;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD v22[34];
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  v23 = 0;
  v24 = 0;
  v6 = (float *)(a1 + 192);
  v25 = 0;
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_32;
    kaldi::ReadToken(a2, 0, (uint64_t)&v23, v4, v5);
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      break;
    if (v24 != 18
      || (*v23 == 0x74756F706F72443CLL ? (v10 = v23[1] == 0x6F69746E65746552) : (v10 = 0),
          v10 ? (v11 = *((unsigned __int16 *)v23 + 8) == 15982) : (v11 = 0),
          !v11))
    {
      if (v24 == 12)
      {
        v12 = (_QWORD **)v23;
        goto LABEL_27;
      }
LABEL_39:
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-activation.h", 358);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Unknown token ", 14);
      if (v25 >= 0)
        v18 = &v23;
      else
        v18 = (_QWORD **)v23;
      if (v25 >= 0)
        v19 = HIBYTE(v25);
      else
        v19 = v24;
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", a typo in config?", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" (DropoutRetention)", 19);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
    }
LABEL_22:
    kaldi::ReadBasicType<float>(a2, 0, v6, v7, v5);
  }
  if (HIBYTE(v25) == 18)
  {
    if (v23 != (_QWORD *)0x74756F706F72443CLL || v24 != 0x6F69746E65746552 || (unsigned __int16)v25 != 15982)
      goto LABEL_39;
    goto LABEL_22;
  }
  if (HIBYTE(v25) != 12)
    goto LABEL_39;
  v12 = &v23;
LABEL_27:
  v13 = (uint64_t)*v12;
  v14 = *((_DWORD *)v12 + 2);
  if (v13 != 0x6E6F706D6F432F3CLL || v14 != 1047817829)
    goto LABEL_39;
LABEL_32:
  if (*v6 <= 0.0 || *v6 > 1.0)
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-activation.h", (const char *)0x169, "dropout_retention_ > 0.0 && dropout_retention_ <= 1.0", v5);
  if (SHIBYTE(v25) < 0)
    operator delete(v23);
}

void sub_1DE430208(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 65) < 0)
    operator delete(*(void **)(v1 - 88));
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::Dropout::WriteData(int a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  int v5;

  v5 = (int)a3;
  kaldi::WriteToken(a2, a3, (kaldi *)"<DropoutRetention>", a4, a5);
  return kaldi::WriteBasicType<float>((uint64_t)a2, v5);
}

void kaldi::nnet1::Dropout::PropagateFnc(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;

  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, a2, 111, a4, a5);
  kaldi::CuMatrix<float>::Resize(a1 + 144, a3[5], a3[4], 0, 0);
  kaldi::CuMatrixBase<float>::Set(a1 + 144, v7, v8, v9, v10, *(float *)(a1 + 192));
  kaldi::CuRand<float>::BinarizeProbs(a1 + 48, a1 + 144, a1 + 144);
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)a3, a1 + 144, v11, v12, v13);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)a3, 1.0 / *(float *)(a1 + 192));
}

void kaldi::nnet1::Dropout::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, a4, 111, a4, (const char *)a5);
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)a5, a1 + 144, v7, v8, v9);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)a5, 1.0 / *(float *)(a1 + 192));
}

void kaldi::nnet1::Dropout::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  const char *v6;
  uint64_t v7;
  const char *v8;
  float v9;

  if (kaldi::Peek(a2, a3) == 60)
  {
    kaldi::ExpectToken(a2, a3, (kaldi *)"<DropoutRetention>");
    kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 192), v7, v8);
  }
  v9 = *(float *)(a1 + 192);
  if (v9 <= 0.0 || v9 > 1.0)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-activation.h", (const char *)0x171, "dropout_retention_ > 0.0 && dropout_retention_ <= 1.0", v6);
}

double kaldi::nnet1::MaxoutComponent::Copy(kaldi::nnet1::MaxoutComponent *this)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = *((double *)this + 1);
  *(double *)(v2 + 8) = result;
  *(_WORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_1EA928120;
  return result;
}

uint64_t kaldi::nnet1::MaxoutComponent::GetType(kaldi::nnet1::MaxoutComponent *this)
{
  return 519;
}

_DWORD *kaldi::nnet1::MaxoutComponent::PropagateFnc(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, const char *a5)
{
  return kaldi::CuMatrixBase<float>::MaxoutForward(a3, a2, (uint64_t)a3, a4, a5);
}

void kaldi::nnet1::MaxoutComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  kaldi::CuMatrixBase<float>::MaxoutDerivative((uint64_t)a5, a2, a3, a4, a5);
  kaldi::CuMatrixBase<float>::MulRowsGroupMat((uint64_t)a5, a4, v7, v8, v9);
}

float kaldi::nnet1::PNormComponent::Copy(kaldi::nnet1::PNormComponent *this)
{
  uint64_t v2;
  float result;

  v2 = operator new();
  result = *((float *)this + 12);
  *(_QWORD *)(v2 + 8) = *((_QWORD *)this + 1);
  *(_WORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_1EA927950;
  *(float *)(v2 + 48) = result;
  return result;
}

uint64_t kaldi::nnet1::PNormComponent::GetType(kaldi::nnet1::PNormComponent *this)
{
  return 521;
}

void kaldi::nnet1::PNormComponent::InitData(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  const char *v5;
  const char *v6;
  int v7;
  int v8;

  kaldi::ExpectToken(a2, 0, (kaldi *)"<P>");
  kaldi::ReadBasicType<float>(a2, 0, (float *)(a1 + 48), v4, v5);
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 12);
  if (v7 < v8 || v8 <= 0)
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-activation.h", (const char *)0x1DF, "(input_dim_ >= output_dim_) && (output_dim_ > 0)", v6);
  if (v7 % v8)
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-activation.h", (const char *)0x1E0, "input_dim_ % output_dim_ == 0", v6);
}

_QWORD *kaldi::nnet1::PNormComponent::WriteData(int a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  int v5;

  v5 = (int)a3;
  kaldi::WriteToken(a2, a3, (kaldi *)"<P>", a4, a5);
  return kaldi::WriteBasicType<float>((uint64_t)a2, v5);
}

float *kaldi::nnet1::PNormComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::CuMatrixBase<float>::GroupPnorm(a3, a2, a3, a4, a5, *(float *)(a1 + 48));
}

void kaldi::nnet1::PNormComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  kaldi::CuMatrixBase<float>::GroupPnormDeriv((uint64_t)a5, a2, a3, a4, a5, *(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::MulRowsGroupMat((uint64_t)a5, a4, v7, v8, v9);
}

void kaldi::nnet1::PNormComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  const char *v7;
  const char *v8;
  int v9;
  int v10;

  kaldi::ExpectToken(a2, a3, (kaldi *)"<P>");
  kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 48), v6, v7);
  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a1 + 12);
  if (v9 < v10 || v10 <= 0)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-activation.h", (const char *)0x1E6, "(input_dim_ >= output_dim_) && (output_dim_ > 0)", v8);
  if (v9 % v10)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-activation.h", (const char *)0x1E7, "input_dim_ % output_dim_ == 0", v8);
}

uint64_t kaldi::nnet1::RectifiedLinearComponent::Copy(kaldi::nnet1::RectifiedLinearComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1EA92D6D8;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1EA92B6E8;
  return v2;
}

void sub_1DE430724(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C40DBBC96B9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RectifiedLinearComponent::GetType(kaldi::nnet1::RectifiedLinearComponent *this)
{
  return 520;
}

uint64_t kaldi::nnet1::RectifiedLinearComponent::PropagateFnc(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, a2, 111, a4, a5);
  return kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)a3, 0.0);
}

uint64_t kaldi::nnet1::RectifiedLinearComponent::PropagateFnc(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, const char *a5)
{
  kaldi::CuVectorBase<float>::CopyFromVec(a3, a2, (uint64_t)a3, a4, a5);
  return kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)a3, 0.0);
}

uint64_t kaldi::nnet1::RectifiedLinearComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::CuMatrixBase<float>::DiffRelu((uint64_t)a5, a3, a4, a4, a5);
}

uint64_t kaldi::nnet1::ExponentialLinearComponent::Copy(kaldi::nnet1::ExponentialLinearComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1EA92D6D8;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1EA92B968;
  *(_DWORD *)(v2 + 48) = *((_DWORD *)this + 12);
  return v2;
}

void sub_1DE43083C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C405D9F5A38);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ExponentialLinearComponent::GetType(kaldi::nnet1::ExponentialLinearComponent *this)
{
  return 524;
}

float kaldi::nnet1::ExponentialLinearComponent::InitData(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  const char *v5;

  kaldi::ExpectToken(a2, 0, (kaldi *)"<Alpha>");
  return kaldi::ReadBasicType<float>(a2, 0, (float *)(a1 + 48), v4, v5);
}

_QWORD *kaldi::nnet1::ExponentialLinearComponent::WriteData(int a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  int v5;

  v5 = (int)a3;
  kaldi::WriteToken(a2, a3, (kaldi *)"<Alpha>", a4, a5);
  return kaldi::WriteBasicType<float>((uint64_t)a2, v5);
}

uint64_t kaldi::nnet1::ExponentialLinearComponent::PropagateFnc(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  unsigned int v17[12];

  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v17, a3[5], a3[4], 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v17, a2, 111, v6, v7);
  kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)v17, 0.0);
  kaldi::CuMatrixBase<float>::ApplyExp((uint64_t)v17, v8, v9, v10, v11);
  kaldi::CuMatrixBase<float>::Add((uint64_t)v17, -1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v17, *(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, a2, 111, v12, v13);
  kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)a3, 0.0);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)a3, (uint64_t)v17, 111, v14, v15, 1.0, 1.0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v17);
}

void sub_1DE4309B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ExponentialLinearComponent::PropagateFnc(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  _QWORD v18[4];

  v8 = a3[4];
  v18[0] = &unk_1EA92DFD8;
  memset(&v18[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v18, v8, 0, a4, a5);
  kaldi::CuVectorBase<float>::CopyFromVec(v18, a2, v9, v10, v11);
  kaldi::CuVectorBase<float>::ApplyCeiling((uint64_t)v18, 0.0);
  kaldi::CuVectorBase<float>::ApplyExp((uint64_t)v18);
  kaldi::CuVectorBase<float>::Add((uint64_t)v18, -1.0);
  kaldi::CuVectorBase<float>::Scale((uint64_t)v18, *(float *)(a1 + 48));
  kaldi::CuVectorBase<float>::CopyFromVec(a3, a2, v12, v13, v14);
  kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)a3, 0.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)a3, (uint64_t)v18, v15, v16, v17, 1.0, 1.0);
  v18[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v18);
}

void sub_1DE430A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuVector<float>::~CuVector(&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ExponentialLinearComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  unsigned int v27[12];
  unsigned int v28[12];

  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v28, a5[5], a5[4], 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v27, a5[5], a5[4], 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v28, a2, 111, v9, v10);
  kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)v28, 0.0);
  kaldi::CuMatrixBase<float>::ApplyExp((uint64_t)v28, v11, v12, v13, v14);
  kaldi::CuMatrixBase<float>::Add((uint64_t)v28, -1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v28, *(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v27, a2, 111, v15, v16);
  kaldi::CuMatrixBase<float>::ApplyHeaviside((uint64_t)v27);
  kaldi::CuMatrixBase<float>::Add((uint64_t)v27, -1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v27, -*(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, a2, 111, v17, v18);
  kaldi::CuMatrixBase<float>::ApplyHeaviside((uint64_t)a5);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)a5, (uint64_t)v28, 111, v19, v20, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)a5, (uint64_t)v27, 111, v21, v22, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)a5, a4, v23, v24, v25);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v27);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v28);
}

void sub_1DE430BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::nnet1::ExponentialLinearComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  const char *v7;

  kaldi::ExpectToken(a2, a3, (kaldi *)"<Alpha>");
  return kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 48), v6, v7);
}

uint64_t kaldi::nnet1::ScaledExponentialLinearComponent::Copy(kaldi::nnet1::ScaledExponentialLinearComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1EA92D6D8;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1EA92CB38;
  *(_QWORD *)(v2 + 48) = *((_QWORD *)this + 6);
  return v2;
}

void sub_1DE430CDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C4071A33DADLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ScaledExponentialLinearComponent::GetType(kaldi::nnet1::ScaledExponentialLinearComponent *this)
{
  return 525;
}

uint64_t kaldi::nnet1::ScaledExponentialLinearComponent::PropagateFnc(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  unsigned int v17[12];

  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v17, a3[5], a3[4], 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v17, a2, 111, v6, v7);
  kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)v17, 0.0);
  kaldi::CuMatrixBase<float>::ApplyExp((uint64_t)v17, v8, v9, v10, v11);
  kaldi::CuMatrixBase<float>::Add((uint64_t)v17, -1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v17, *(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, a2, 111, v12, v13);
  kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)a3, 0.0);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)a3, (uint64_t)v17, 111, v14, v15, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)a3, *(float *)(a1 + 52));
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v17);
}

void sub_1DE430DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ScaledExponentialLinearComponent::PropagateFnc(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  _QWORD v18[4];

  v8 = a3[4];
  v18[0] = &unk_1EA92DFD8;
  memset(&v18[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v18, v8, 0, a4, a5);
  kaldi::CuVectorBase<float>::CopyFromVec(v18, a2, v9, v10, v11);
  kaldi::CuVectorBase<float>::ApplyCeiling((uint64_t)v18, 0.0);
  kaldi::CuVectorBase<float>::ApplyExp((uint64_t)v18);
  kaldi::CuVectorBase<float>::Add((uint64_t)v18, -1.0);
  kaldi::CuVectorBase<float>::Scale((uint64_t)v18, *(float *)(a1 + 48));
  kaldi::CuVectorBase<float>::CopyFromVec(a3, a2, v12, v13, v14);
  kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)a3, 0.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)a3, (uint64_t)v18, v15, v16, v17, 1.0, 1.0);
  kaldi::CuVectorBase<float>::Scale((uint64_t)a3, *(float *)(a1 + 52));
  v18[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v18);
}

void sub_1DE430EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuVector<float>::~CuVector(&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ScaledExponentialLinearComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  unsigned int v27[12];
  unsigned int v28[12];

  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v28, a5[5], a5[4], 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v27, a5[5], a5[4], 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v28, a2, 111, v9, v10);
  kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)v28, 0.0);
  kaldi::CuMatrixBase<float>::ApplyExp((uint64_t)v28, v11, v12, v13, v14);
  kaldi::CuMatrixBase<float>::Add((uint64_t)v28, -1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v28, *(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v27, a2, 111, v15, v16);
  kaldi::CuMatrixBase<float>::ApplyHeaviside((uint64_t)v27);
  kaldi::CuMatrixBase<float>::Add((uint64_t)v27, -1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v27, -*(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, a2, 111, v17, v18);
  kaldi::CuMatrixBase<float>::ApplyHeaviside((uint64_t)a5);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)a5, (uint64_t)v28, 111, v19, v20, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)a5, (uint64_t)v27, 111, v21, v22, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)a5, *(float *)(a1 + 52));
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)a5, a4, v23, v24, v25);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v27);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v28);
}

void sub_1DE431024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::KlHmm::Copy(kaldi::nnet1::KlHmm *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1EA92D6D8;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1EA92CF20;
  kaldi::Matrix<double>::Matrix(v2 + 48, (char *)this + 48);
  kaldi::CuMatrix<float>::CuMatrix(v2 + 88, (char *)this + 88, 111);
  return v2;
}

void sub_1DE4310E8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;

  kaldi::Matrix<float>::~Matrix(v2);
  *v1 = v3;
  v5 = (void *)v1[3];
  if (v5)
  {
    v1[4] = v5;
    operator delete(v5);
  }
  MEMORY[0x1DF0ED014](v1, 0x1081C404EFE5F1CLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::KlHmm::GetType(kaldi::nnet1::KlHmm *this)
{
  return 2048;
}

void kaldi::nnet1::KlHmm::WriteData(uint64_t a1, _QWORD *a2, int a3)
{
  kaldi::MatrixBase<double>::Write((_DWORD *)(a1 + 48), a2, a3, 0);
}

uint64_t kaldi::nnet1::KlHmm::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  const char *v8;
  const char *v9;
  const char *v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  _QWORD v52[4];
  uint64_t v53[6];
  unsigned int v54[12];
  void *v55[5];

  v5 = a1 + 88;
  if (!*(_DWORD *)(a1 + 108))
  {
    kaldi::Matrix<float>::Matrix((uint64_t)v54, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
    kaldi::CuMatrixBase<float>::CopyToMat<float>(a2, v54, 111, v7, v8);
    kaldi::MatrixBase<float>::Row((uint64_t)v54, 0, v9, v53);
    v11 = kaldi::VectorBase<float>::Sum((uint64_t)v53);
    if (v11 != 1.0
      && (COERCE_INT(fabs(v11 + -1.0)) > 2139095039 || fabsf(v11 + -1.0) > (float)((float)(fabsf(v11) + 1.0) * 0.001)))
    {
      kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-kl-hmm.h", (const char *)0x36, "ApproxEqual(post_sum, 1.0)", v10);
    }
    v12 = a1 + 48;
    kaldi::Matrix<float>::Matrix<double>(v53, v12, 111);
    v13 = kaldi::MatrixBase<float>::NumRows(v12);
    memset(v55, 0, 24);
    kaldi::Vector<float>::Resize(v55, v13, 0, v14, v15);
    kaldi::VectorBase<float>::AddColSumMat((uint64_t)v55, (uint64_t)v53, 1.0, 1.0);
    kaldi::VectorBase<float>::ApplyFloor((uint64_t)v55, 1.0e-20);
    kaldi::VectorBase<float>::InvertElements((uint64_t)v55);
    kaldi::MatrixBase<float>::MulRowsVec((uint64_t)v53, (uint64_t)v55, v16, v17, v18);
    kaldi::MatrixBase<float>::ApplyFloor((uint64_t)v53, 1.0e-20);
    kaldi::MatrixBase<float>::InvertElements((uint64_t)v53, v19, v20, v21, v22);
    kaldi::MatrixBase<float>::ApplyLog((uint64_t)v53, v23, v24, v25, v26);
    v27 = kaldi::MatrixBase<float>::NumRows(v12);
    v28 = kaldi::MatrixBase<float>::NumCols(v12);
    kaldi::CuMatrix<float>::Resize(v5, v27, v28, 0, 0);
    kaldi::CuMatrixBase<float>::CopyFromMat(v5, (uint64_t)v53, 111, v29, v30);
    kaldi::Vector<float>::Destroy((uint64_t)v55);
    kaldi::Matrix<float>::~Matrix((uint64_t)v53);
    kaldi::Matrix<float>::~Matrix((uint64_t)v54);
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v55, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  kaldi::CuMatrixBase<float>::CopyToMat<float>(a2, (unsigned int *)v55, 111, v31, v32);
  kaldi::MatrixBase<float>::ApplyFloor((uint64_t)v55, 1.0e-20);
  kaldi::MatrixBase<float>::ApplyLog((uint64_t)v55, v33, v34, v35, v36);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v54, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat((uint64_t)v54, (uint64_t)v55, 111, v37, v38);
  kaldi::CuMatrix<float>::CuMatrix(v53, a2, 111);
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)v53, (uint64_t)v54, v39, v40, v41);
  v42 = *(unsigned int *)(a2 + 20);
  v52[0] = &unk_1EA92DFD8;
  memset(&v52[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v52, v42, 0, v43, v44);
  kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v52, (uint64_t)v53, 1.0, 1.0, v45, v46, v47);
  kaldi::CuMatrixBase<float>::AddMatMat(a3, a2, CblasNoTrans, v5, (const char *)0x70, 1.0, 0.0);
  kaldi::CuMatrixBase<float>::AddVecToCols(a3, (uint64_t)v52, v48, v49, v50, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::Scale(a3, -1.0);
  v52[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v52);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v53);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v54);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v55);
}

void sub_1DE43144C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::KlHmm::BackpropagateFnc()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "BackpropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-kl-hmm.h", 106);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::KlHmm::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t result;
  const char *v7;

  v4 = a1 + 48;
  kaldi::Matrix<double>::Read(a1 + 48, a2, a3, 0, 0);
  if (kaldi::MatrixBase<float>::NumRows(v4) != *(_DWORD *)(a1 + 12))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-kl-hmm.h", (const char *)0x70, "kl_stats_.NumRows() == output_dim_", v5);
  result = kaldi::MatrixBase<float>::NumCols(v4);
  if ((_DWORD)result != *(_DWORD *)(a1 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-kl-hmm.h", (const char *)0x71, "kl_stats_.NumCols() == input_dim_", v7);
  return result;
}

uint64_t kaldi::nnet1::Splice::Copy(kaldi::nnet1::Splice *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1EA92D6D8;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1EA92CFE0;
  kaldi::CuArray<int>::CuArray((int *)(v2 + 48), (uint64_t)this + 48, v4, v5, v6);
  return v2;
}

void sub_1DE43165C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;

  *v1 = v2;
  v4 = (void *)v1[3];
  if (v4)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  MEMORY[0x1DF0ED014](v1, 0x1091C407E7523C3);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Splice::GetType(kaldi::nnet1::Splice *this)
{
  return 1026;
}

uint64_t kaldi::nnet1::Splice::Info@<X0>(const void **this@<X0>, std::string *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  std::string::size_type v7;
  std::string::size_type v8;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n  frame_offsets ", 17);
  kaldi::operator<<<int>(v4, this + 6);
  std::stringbuf::str();
  v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v6 = (char)v5;
  v7 = (std::string::size_type)a2 + v5;
  if (v6 >= 0)
  {
    v8 = (std::string::size_type)a2;
  }
  else
  {
    v7 = a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_;
    v8 = a2->__r_.__value_.__r.__words[0];
  }
  std::string::erase(a2, ~v8 + v7, 1uLL);
  v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v12);
}

void sub_1DE43179C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Splice::InitData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t *p_p;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  __int128 *v19;
  uint64_t v20;
  int v21;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int *v26;
  uint64_t v27;
  std::vector<int>::pointer v28;
  int *v29;
  int v30;
  int v31;
  std::vector<int>::pointer v32;
  int *v33;
  std::vector<int>::pointer v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  unint64_t v38;
  char *v39;
  int *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  BOOL v45;
  std::vector<int>::pointer end;
  int *v47;
  std::vector<int>::pointer begin;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  char *v53;
  int *v54;
  int v55;
  std::vector<int>::pointer v56;
  int64_t v57;
  unint64_t v58;
  int64_t v59;
  unint64_t v60;
  char *v61;
  int *v62;
  int v63;
  const char *v64;
  _QWORD *v65;
  __int128 *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  void *__p;
  uint64_t v72;
  uint64_t v73;
  std::vector<int> v74;
  __int128 v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t v79;
  std::vector<int> v80;

  memset(&v80, 0, sizeof(v80));
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v6 = a2 + 4;
  v75 = 0uLL;
  v76 = 0;
  while (1)
  {
    if ((*((_BYTE *)v6 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      goto LABEL_57;
    kaldi::ReadToken(a2, 0, (uint64_t)&v75, a4, a5);
    if (SHIBYTE(v76) < 0)
      break;
    if (HIBYTE(v76) != 12)
    {
      if (HIBYTE(v76) == 13)
      {
        v7 = (_QWORD)v75 == 0x6556646C6975423CLL && *(_QWORD *)((char *)&v75 + 5) == 0x3E726F7463655664;
        if (v7)
          goto LABEL_22;
      }
      goto LABEL_138;
    }
    if ((_QWORD)v75 != 0x636556646165523CLL || DWORD2(v75) != 1047687028)
    {
      v19 = &v75;
      goto LABEL_52;
    }
LABEL_48:
    kaldi::ReadIntegerVector<int>(a2, 0, &v80, 0, 0, 0, 0);
LABEL_49:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v8 = *((_QWORD *)&v75 + 1);
  if (*((_QWORD *)&v75 + 1) == 12 && *(_QWORD *)v75 == 0x636556646165523CLL && *(_DWORD *)(v75 + 8) == 1047687028)
    goto LABEL_48;
  if (*((_QWORD *)&v75 + 1) != 13)
    goto LABEL_50;
  if (*(_QWORD *)v75 == 0x6556646C6975423CLL && *(_QWORD *)(v75 + 5) == 0x3E726F7463655664)
  {
    while (1)
    {
LABEL_22:
      if ((*((_BYTE *)v6 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
        goto LABEL_49;
      __p = 0;
      v72 = 0;
      v73 = 0;
      kaldi::ReadToken(a2, 0, (uint64_t)&__p, a4, a5);
      if (SHIBYTE(v73) < 0)
      {
        if (v72 != 14)
          goto LABEL_32;
        p_p = (uint64_t *)__p;
      }
      else
      {
        if (SHIBYTE(v73) != 14)
          goto LABEL_32;
        p_p = (uint64_t *)&__p;
      }
      v12 = *p_p;
      v13 = *(uint64_t *)((char *)p_p + 6);
      if (v12 == 0x56646C6975422F3CLL && v13 == 0x3E726F7463655664)
      {
        v17 = 0;
        if (v73 < 0)
          goto LABEL_41;
LABEL_38:
        if ((v17 & 1) == 0)
          goto LABEL_49;
      }
      else
      {
LABEL_32:
        memset(&v74, 0, sizeof(v74));
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ":", 0, &v74, a5);
        v15 = v78;
        if ((unint64_t)v78 >= v79)
        {
          v16 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>((uint64_t *)&v77, (uint64_t)&v74);
        }
        else
        {
          *v78 = 0;
          v15[1] = 0;
          v15[2] = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v15, v74.__begin_, (uint64_t)v74.__end_, v74.__end_ - v74.__begin_);
          v16 = (uint64_t)(v15 + 3);
        }
        v78 = (_QWORD *)v16;
        if (v74.__begin_)
        {
          v74.__end_ = v74.__begin_;
          operator delete(v74.__begin_);
        }
        v17 = 1;
        if ((v73 & 0x8000000000000000) == 0)
          goto LABEL_38;
LABEL_41:
        operator delete(__p);
        if ((v17 & 1) == 0)
          goto LABEL_49;
      }
    }
  }
  v8 = *((_QWORD *)&v75 + 1);
LABEL_50:
  if (v8 != 12)
    goto LABEL_138;
  v19 = (__int128 *)v75;
LABEL_52:
  v20 = *(_QWORD *)v19;
  v21 = *((_DWORD *)v19 + 2);
  if (v20 != 0x6E6F706D6F432F3CLL || v21 != 1047817829)
  {
LABEL_138:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", 293);
    v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
    if (v76 >= 0)
      v66 = &v75;
    else
      v66 = (__int128 *)v75;
    if (v76 >= 0)
      v67 = HIBYTE(v76);
    else
      v67 = *((_QWORD *)&v75 + 1);
    v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)v66, v67);
    v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)" (ReadVector|BuildVector)", 25);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
LABEL_57:
  v23 = (uint64_t)v77;
  if (v78 != v77)
  {
    v24 = 0;
    do
    {
      v25 = v23 + 24 * v24;
      v26 = *(int **)v25;
      v27 = (uint64_t)(*(_QWORD *)(v25 + 8) - *(_QWORD *)v25) >> 2;
      switch(v27)
      {
        case 3:
          v42 = *v26;
          v43 = v26[1];
          v44 = v26[2];
          v45 = v42 > v44 || v43 <= 0;
          if (v45 && (v42 < v44 || (v43 & 0x80000000) == 0))
            kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)0x13B, "(min <= max && step > 0) || (min >= max && step < 0)", a5);
          if (v42 <= v44)
          {
            end = v80.__end_;
            do
            {
              if (end >= v80.__end_cap_.__value_)
              {
                begin = v80.__begin_;
                v49 = end - v80.__begin_;
                v50 = v49 + 1;
                if ((unint64_t)(v49 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v51 = (char *)v80.__end_cap_.__value_ - (char *)v80.__begin_;
                if (((char *)v80.__end_cap_.__value_ - (char *)v80.__begin_) >> 1 > v50)
                  v50 = v51 >> 1;
                if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                  v52 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v52 = v50;
                if (v52)
                {
                  v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v80.__end_cap_, v52);
                  begin = v80.__begin_;
                  end = v80.__end_;
                }
                else
                {
                  v53 = 0;
                }
                v54 = (int *)&v53[4 * v49];
                *v54 = v42;
                v47 = v54 + 1;
                while (end != begin)
                {
                  v55 = *--end;
                  *--v54 = v55;
                }
                v80.__begin_ = v54;
                v80.__end_ = v47;
                v80.__end_cap_.__value_ = (int *)&v53[4 * v52];
                if (begin)
                  operator delete(begin);
              }
              else
              {
                *end = v42;
                v47 = end + 1;
              }
              v80.__end_ = v47;
              v42 += v43;
              end = v47;
            }
            while (v42 <= v44);
          }
          break;
        case 2:
          v30 = *v26;
          v31 = v26[1];
          if (*v26 > v31)
            kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)0x134, "min <= max", a5);
          v32 = v80.__end_;
          do
          {
            if (v32 >= v80.__end_cap_.__value_)
            {
              v34 = v80.__begin_;
              v35 = v32 - v80.__begin_;
              v36 = v35 + 1;
              if ((unint64_t)(v35 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v37 = (char *)v80.__end_cap_.__value_ - (char *)v80.__begin_;
              if (((char *)v80.__end_cap_.__value_ - (char *)v80.__begin_) >> 1 > v36)
                v36 = v37 >> 1;
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
                v38 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v38 = v36;
              if (v38)
              {
                v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v80.__end_cap_, v38);
                v34 = v80.__begin_;
                v32 = v80.__end_;
              }
              else
              {
                v39 = 0;
              }
              v40 = (int *)&v39[4 * v35];
              *v40 = v30;
              v33 = v40 + 1;
              while (v32 != v34)
              {
                v41 = *--v32;
                *--v40 = v41;
              }
              v80.__begin_ = v40;
              v80.__end_ = v33;
              v80.__end_cap_.__value_ = (int *)&v39[4 * v38];
              if (v34)
                operator delete(v34);
            }
            else
            {
              *v32 = v30;
              v33 = v32 + 1;
            }
            v80.__end_ = v33;
            v32 = v33;
            v7 = v30++ == v31;
          }
          while (!v7);
          break;
        case 1:
          v28 = v80.__end_;
          if (v80.__end_ >= v80.__end_cap_.__value_)
          {
            v56 = v80.__begin_;
            v57 = v80.__end_ - v80.__begin_;
            v58 = v57 + 1;
            if ((unint64_t)(v57 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v59 = (char *)v80.__end_cap_.__value_ - (char *)v80.__begin_;
            if (((char *)v80.__end_cap_.__value_ - (char *)v80.__begin_) >> 1 > v58)
              v58 = v59 >> 1;
            if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL)
              v60 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v60 = v58;
            if (v60)
            {
              v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v80.__end_cap_, v60);
              v56 = v80.__begin_;
              v28 = v80.__end_;
            }
            else
            {
              v61 = 0;
            }
            v62 = (int *)&v61[4 * v57];
            *v62 = *v26;
            v29 = v62 + 1;
            while (v28 != v56)
            {
              v63 = *--v28;
              *--v62 = v63;
            }
            v80.__begin_ = v62;
            v80.__end_ = v29;
            v80.__end_cap_.__value_ = (int *)&v61[4 * v60];
            if (v56)
              operator delete(v56);
          }
          else
          {
            *v80.__end_ = *v26;
            v29 = v28 + 1;
          }
          v80.__end_ = v29;
          break;
        default:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", 322);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error parsing <BuildVector>", 27);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      ++v24;
      v23 = (uint64_t)v77;
    }
    while (0xAAAAAAAAAAAAAAABLL * (v78 - v77) > v24);
  }
  kaldi::CuArray<int>::Resize(a1 + 48, (unint64_t)((char *)v80.__end_ - (char *)v80.__begin_) >> 2, 1u, a4, a5);
  memcpy(*(void **)(a1 + 56), v80.__begin_, (char *)v80.__end_ - (char *)v80.__begin_);
  if (*(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 48) != *(_DWORD *)(a1 + 12))
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)0x14B, "frame_offsets_.Dim()*InputDim() == OutputDim()", v64);
  if (SHIBYTE(v76) < 0)
    operator delete((void *)v75);
  __p = &v77;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v80.__begin_)
  {
    v80.__end_ = v80.__begin_;
    operator delete(v80.__begin_);
  }
}

void sub_1DE431F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  void *v18;
  void *v19;

  *(_QWORD *)(v16 - 128) = v15;
  v18 = *(void **)(v16 - 184);
  if (v18)
  {
    *(_QWORD *)(v16 - 176) = v18;
    operator delete(v18);
  }
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v16 - 137) < 0)
    operator delete(*(void **)(v16 - 160));
  __p = (void *)(v16 - 136);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v19 = *(void **)(v16 - 112);
  if (v19)
  {
    *(_QWORD *)(v16 - 104) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

void sub_1DE431F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void *v12;

  if (*(char *)(v10 - 137) < 0)
    operator delete(*(void **)(v10 - 160));
  a10 = (void **)(v10 - 136);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v12 = *(void **)(v10 - 112);
  if (v12)
  {
    *(_QWORD *)(v10 - 104) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void sub_1DE431F5C()
{
  JUMPOUT(0x1DE431F78);
}

void kaldi::nnet1::Splice::WriteData(uint64_t a1, _QWORD *a2, int a3)
{
  const void **v5;
  std::vector<int> v6;

  v5 = (const void **)(a1 + 48);
  std::vector<int>::vector(&v6, *(int *)(a1 + 48));
  kaldi::CuArray<int>::CopyToVec(v5, &v6);
  kaldi::WriteIntegerByteArray<int>(a2, a3, 0, v6.__end_ - v6.__begin_, (uint64_t)v6.__begin_);
  if (v6.__begin_)
  {
    v6.__end_ = v6.__begin_;
    operator delete(v6.__begin_);
  }
}

void sub_1DE432038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::Splice::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::cu::Splice<float>(a2, (unsigned int *)(a1 + 48), a3, a4, a5);
}

void kaldi::nnet1::Splice::BackpropagateFnc()
{
  _QWORD *v0;
  _QWORD v1[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "BackpropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", 365);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"BackpropagateFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::nnet1::Splice::ReadData(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v4;
  const char *v5;
  const char *v6;
  std::vector<int> __p;

  memset(&__p, 0, sizeof(__p));
  kaldi::ReadIntegerVector<int>(a2, a3, &__p, 0, 0, 0, 0);
  kaldi::CuArray<int>::Resize(a1 + 48, (unint64_t)((char *)__p.__end_ - (char *)__p.__begin_) >> 2, 1u, v4, v5);
  memcpy(*(void **)(a1 + 56), __p.__begin_, (char *)__p.__end_ - (char *)__p.__begin_);
  if (*(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 48) != *(_DWORD *)(a1 + 12))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)0x153, "frame_offsets_.Dim() * InputDim() == OutputDim()", v6);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_1DE432188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::CopyComponent::Copy(kaldi::nnet1::CopyComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1EA92D6D8;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1EA926920;
  kaldi::CuArray<int>::CuArray((int *)(v2 + 48), (uint64_t)this + 48, v4, v5, v6);
  return v2;
}

void sub_1DE432230(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;

  *v1 = v2;
  v4 = (void *)v1[3];
  if (v4)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  MEMORY[0x1DF0ED014](v1, 0x1091C407E7523C3);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::CopyComponent::GetType(kaldi::nnet1::CopyComponent *this)
{
  return 1028;
}

void kaldi::nnet1::CopyComponent::InitData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t *p_p;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  __int128 *v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int *v27;
  uint64_t v28;
  std::vector<int>::pointer v29;
  int *v30;
  int v31;
  int v32;
  std::vector<int>::pointer v33;
  int *v34;
  std::vector<int>::pointer v35;
  uint64_t v36;
  unint64_t v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  int *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  BOOL v46;
  std::vector<int>::pointer end;
  int *v48;
  std::vector<int>::pointer begin;
  uint64_t v50;
  unint64_t v51;
  int64_t v52;
  unint64_t v53;
  char *v54;
  int *v55;
  int v56;
  std::vector<int>::pointer v57;
  int64_t v58;
  unint64_t v59;
  int64_t v60;
  unint64_t v61;
  char *v62;
  int *v63;
  int v64;
  std::vector<int>::pointer v65;
  std::vector<int>::pointer v66;
  std::vector<int>::pointer v67;
  const char *v68;
  std::vector<int>::pointer v69;
  int64_t v70;
  const char *v71;
  int v72;
  int v73;
  uint64_t v74;
  _QWORD *v75;
  __int128 *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  void *__p;
  uint64_t v81;
  uint64_t v82;
  std::vector<int> v83;
  __int128 v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  unint64_t v88;
  std::vector<int> v89;

  memset(&v89, 0, sizeof(v89));
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v7 = a2 + 4;
  v84 = 0uLL;
  v85 = 0;
  while (1)
  {
    if ((*((_BYTE *)v7 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      goto LABEL_57;
    kaldi::ReadToken(a2, 0, (uint64_t)&v84, a4, a5);
    if (SHIBYTE(v85) < 0)
      break;
    if (HIBYTE(v85) != 12)
    {
      if (HIBYTE(v85) == 13)
      {
        v8 = (_QWORD)v84 == 0x6556646C6975423CLL && *(_QWORD *)((char *)&v84 + 5) == 0x3E726F7463655664;
        if (v8)
          goto LABEL_22;
      }
      goto LABEL_152;
    }
    if ((_QWORD)v84 != 0x636556646165523CLL || DWORD2(v84) != 1047687028)
    {
      v20 = &v84;
      goto LABEL_52;
    }
LABEL_48:
    kaldi::ReadIntegerVector<int>(a2, 0, &v89, 0, 0, 0, 0);
LABEL_49:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v9 = *((_QWORD *)&v84 + 1);
  if (*((_QWORD *)&v84 + 1) == 12 && *(_QWORD *)v84 == 0x636556646165523CLL && *(_DWORD *)(v84 + 8) == 1047687028)
    goto LABEL_48;
  if (*((_QWORD *)&v84 + 1) != 13)
    goto LABEL_50;
  if (*(_QWORD *)v84 == 0x6556646C6975423CLL && *(_QWORD *)(v84 + 5) == 0x3E726F7463655664)
  {
    while (1)
    {
LABEL_22:
      if ((*((_BYTE *)v7 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
        goto LABEL_49;
      __p = 0;
      v81 = 0;
      v82 = 0;
      kaldi::ReadToken(a2, 0, (uint64_t)&__p, a4, a5);
      if (SHIBYTE(v82) < 0)
      {
        if (v81 != 14)
          goto LABEL_32;
        p_p = (uint64_t *)__p;
      }
      else
      {
        if (SHIBYTE(v82) != 14)
          goto LABEL_32;
        p_p = (uint64_t *)&__p;
      }
      v13 = *p_p;
      v14 = *(uint64_t *)((char *)p_p + 6);
      if (v13 == 0x56646C6975422F3CLL && v14 == 0x3E726F7463655664)
      {
        v18 = 0;
        if (v82 < 0)
          goto LABEL_41;
LABEL_38:
        if ((v18 & 1) == 0)
          goto LABEL_49;
      }
      else
      {
LABEL_32:
        memset(&v83, 0, sizeof(v83));
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ":", 0, &v83, a5);
        v16 = v87;
        if ((unint64_t)v87 >= v88)
        {
          v17 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>((uint64_t *)&v86, (uint64_t)&v83);
        }
        else
        {
          *v87 = 0;
          v16[1] = 0;
          v16[2] = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v16, v83.__begin_, (uint64_t)v83.__end_, v83.__end_ - v83.__begin_);
          v17 = (uint64_t)(v16 + 3);
        }
        v87 = (_QWORD *)v17;
        if (v83.__begin_)
        {
          v83.__end_ = v83.__begin_;
          operator delete(v83.__begin_);
        }
        v18 = 1;
        if ((v82 & 0x8000000000000000) == 0)
          goto LABEL_38;
LABEL_41:
        operator delete(__p);
        if ((v18 & 1) == 0)
          goto LABEL_49;
      }
    }
  }
  v9 = *((_QWORD *)&v84 + 1);
LABEL_50:
  if (v9 != 12)
    goto LABEL_152;
  v20 = (__int128 *)v84;
LABEL_52:
  v21 = *(_QWORD *)v20;
  v22 = *((_DWORD *)v20 + 2);
  if (v21 != 0x6E6F706D6F432F3CLL || v22 != 1047817829)
  {
LABEL_152:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", 411);
    v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
    if (v85 >= 0)
      v76 = &v84;
    else
      v76 = (__int128 *)v84;
    if (v85 >= 0)
      v77 = HIBYTE(v85);
    else
      v77 = *((_QWORD *)&v84 + 1);
    v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)v76, v77);
    v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)" (ReadVector|BuildVector)", 25);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
LABEL_57:
  v24 = (uint64_t)v86;
  if (v87 != v86)
  {
    v25 = 0;
    do
    {
      v26 = v24 + 24 * v25;
      v27 = *(int **)v26;
      v28 = (uint64_t)(*(_QWORD *)(v26 + 8) - *(_QWORD *)v26) >> 2;
      switch(v28)
      {
        case 3:
          v43 = *v27;
          v44 = v27[1];
          v45 = v27[2];
          v46 = v43 > v45 || v44 <= 0;
          if (v46 && (v43 < v45 || (v44 & 0x80000000) == 0))
            kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)0x1B1, "(min <= max && step > 0) || (min >= max && step < 0)", a5);
          if (v43 <= v45)
          {
            end = v89.__end_;
            do
            {
              if (end >= v89.__end_cap_.__value_)
              {
                begin = v89.__begin_;
                v50 = end - v89.__begin_;
                v51 = v50 + 1;
                if ((unint64_t)(v50 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v52 = (char *)v89.__end_cap_.__value_ - (char *)v89.__begin_;
                if (((char *)v89.__end_cap_.__value_ - (char *)v89.__begin_) >> 1 > v51)
                  v51 = v52 >> 1;
                if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
                  v53 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v53 = v51;
                if (v53)
                {
                  v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v89.__end_cap_, v53);
                  begin = v89.__begin_;
                  end = v89.__end_;
                }
                else
                {
                  v54 = 0;
                }
                v55 = (int *)&v54[4 * v50];
                *v55 = v43;
                v48 = v55 + 1;
                while (end != begin)
                {
                  v56 = *--end;
                  *--v55 = v56;
                }
                v89.__begin_ = v55;
                v89.__end_ = v48;
                v89.__end_cap_.__value_ = (int *)&v54[4 * v53];
                if (begin)
                  operator delete(begin);
              }
              else
              {
                *end = v43;
                v48 = end + 1;
              }
              v89.__end_ = v48;
              v43 += v44;
              end = v48;
            }
            while (v43 <= v45);
          }
          break;
        case 2:
          v31 = *v27;
          v32 = v27[1];
          if (*v27 > v32)
            kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)0x1AA, "min <= max", a5);
          v33 = v89.__end_;
          do
          {
            if (v33 >= v89.__end_cap_.__value_)
            {
              v35 = v89.__begin_;
              v36 = v33 - v89.__begin_;
              v37 = v36 + 1;
              if ((unint64_t)(v36 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v38 = (char *)v89.__end_cap_.__value_ - (char *)v89.__begin_;
              if (((char *)v89.__end_cap_.__value_ - (char *)v89.__begin_) >> 1 > v37)
                v37 = v38 >> 1;
              if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
                v39 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v39 = v37;
              if (v39)
              {
                v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v89.__end_cap_, v39);
                v35 = v89.__begin_;
                v33 = v89.__end_;
              }
              else
              {
                v40 = 0;
              }
              v41 = (int *)&v40[4 * v36];
              *v41 = v31;
              v34 = v41 + 1;
              while (v33 != v35)
              {
                v42 = *--v33;
                *--v41 = v42;
              }
              v89.__begin_ = v41;
              v89.__end_ = v34;
              v89.__end_cap_.__value_ = (int *)&v40[4 * v39];
              if (v35)
                operator delete(v35);
            }
            else
            {
              *v33 = v31;
              v34 = v33 + 1;
            }
            v89.__end_ = v34;
            v33 = v34;
            v8 = v31++ == v32;
          }
          while (!v8);
          break;
        case 1:
          v29 = v89.__end_;
          if (v89.__end_ >= v89.__end_cap_.__value_)
          {
            v57 = v89.__begin_;
            v58 = v89.__end_ - v89.__begin_;
            v59 = v58 + 1;
            if ((unint64_t)(v58 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v60 = (char *)v89.__end_cap_.__value_ - (char *)v89.__begin_;
            if (((char *)v89.__end_cap_.__value_ - (char *)v89.__begin_) >> 1 > v59)
              v59 = v60 >> 1;
            if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
              v61 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v61 = v59;
            if (v61)
            {
              v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v89.__end_cap_, v61);
              v57 = v89.__begin_;
              v29 = v89.__end_;
            }
            else
            {
              v62 = 0;
            }
            v63 = (int *)&v62[4 * v58];
            *v63 = *v27;
            v30 = v63 + 1;
            while (v29 != v57)
            {
              v64 = *--v29;
              *--v63 = v64;
            }
            v89.__begin_ = v63;
            v89.__end_ = v30;
            v89.__end_cap_.__value_ = (int *)&v62[4 * v61];
            if (v57)
              operator delete(v57);
          }
          else
          {
            *v89.__end_ = *v27;
            v30 = v29 + 1;
          }
          v89.__end_ = v30;
          break;
        default:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", 440);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error parsing <BuildVector>", 27);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      ++v25;
      v24 = (uint64_t)v86;
    }
    while (0xAAAAAAAAAAAAAAABLL * (v87 - v86) > v25);
  }
  v65 = v89.__begin_;
  v66 = v89.__end_;
  if (v89.__begin_ != v89.__end_)
  {
    v67 = v89.__begin_;
    do
      --*v67++;
    while (v67 != v66);
  }
  kaldi::CuArray<int>::Resize(a1 + 48, (unint64_t)((char *)v66 - (char *)v65) >> 2, 1u, a4, a5);
  memcpy(*(void **)(a1 + 56), v89.__begin_, (char *)v89.__end_ - (char *)v89.__begin_);
  v69 = v89.__begin_;
  if (v89.__end_ != v89.__begin_)
  {
    if ((unint64_t)(v89.__end_ - v89.__begin_) <= 1)
      v70 = 1;
    else
      v70 = v89.__end_ - v89.__begin_;
    v71 = "copy_from_indices[i] >= 0";
    while (1)
    {
      v73 = *v69++;
      v72 = v73;
      if (v73 < 0)
        break;
      if (v72 >= *(_DWORD *)(a1 + 8))
      {
        v74 = 454;
        v71 = "copy_from_indices[i] < InputDim()";
        goto LABEL_149;
      }
      if (!--v70)
        goto LABEL_139;
    }
    v74 = 453;
LABEL_149:
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)v74, v71, v68);
  }
LABEL_139:
  if (*(_DWORD *)(a1 + 48) != *(_DWORD *)(a1 + 12))
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)0x1C9, "copy_from_indices_.Dim() == OutputDim()", v68);
  if (SHIBYTE(v85) < 0)
    operator delete((void *)v84);
  __p = &v86;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v89.__begin_)
  {
    v89.__end_ = v89.__begin_;
    operator delete(v89.__begin_);
  }
}

void sub_1DE432A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  void *v18;
  void *v19;

  *(_QWORD *)(v16 - 128) = v15;
  v18 = *(void **)(v16 - 184);
  if (v18)
  {
    *(_QWORD *)(v16 - 176) = v18;
    operator delete(v18);
  }
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v16 - 137) < 0)
    operator delete(*(void **)(v16 - 160));
  __p = (void *)(v16 - 136);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v19 = *(void **)(v16 - 112);
  if (v19)
  {
    *(_QWORD *)(v16 - 104) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

void sub_1DE432A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void *v12;

  if (*(char *)(v10 - 137) < 0)
    operator delete(*(void **)(v10 - 160));
  a10 = (void **)(v10 - 136);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v12 = *(void **)(v10 - 112);
  if (v12)
  {
    *(_QWORD *)(v10 - 104) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void sub_1DE432A94()
{
  JUMPOUT(0x1DE432AB0);
}

void kaldi::nnet1::CopyComponent::WriteData(uint64_t a1, _QWORD *a2, int a3)
{
  const void **v5;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  std::vector<int>::pointer v8;
  std::vector<int> v9;

  v5 = (const void **)(a1 + 48);
  std::vector<int>::vector(&v9, *(int *)(a1 + 48));
  kaldi::CuArray<int>::CopyToVec(v5, &v9);
  begin = v9.__begin_;
  end = v9.__end_;
  if (v9.__begin_ != v9.__end_)
  {
    v8 = v9.__begin_;
    do
      ++*v8++;
    while (v8 != end);
  }
  kaldi::WriteIntegerByteArray<int>(a2, a3, 0, end - begin, (uint64_t)begin);
  if (v9.__begin_)
  {
    v9.__end_ = v9.__begin_;
    operator delete(v9.__begin_);
  }
}

void sub_1DE432B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::CopyComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::cu::Copy<float>(a2, (unsigned int *)(a1 + 48), a3, a4, a5);
}

void kaldi::nnet1::CopyComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  _QWORD v7[34];

  if (!kaldi::nnet1::CopyComponent::BackpropagateFnc(kaldi::CuMatrixBase<float> const&,kaldi::CuMatrixBase<float> const&,kaldi::CuMatrixBase<float> const&,kaldi::CuMatrixBase<float>*,int)::warning_displayed)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7, "BackpropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", 503);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"BackpropagateFnc", 16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Not implemented!", 16);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    }
    kaldi::nnet1::CopyComponent::BackpropagateFnc(kaldi::CuMatrixBase<float> const&,kaldi::CuMatrixBase<float> const&,kaldi::CuMatrixBase<float> const&,kaldi::CuMatrixBase<float>*,int)::warning_displayed = 1;
  }
  kaldi::CuMatrixBase<float>::SetZero(a5);
}

void sub_1DE432C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::CopyComponent::ReadData(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v4;
  const char *v5;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  std::vector<int>::pointer v8;
  const char *v9;
  std::vector<int> __p;

  memset(&__p, 0, sizeof(__p));
  kaldi::ReadIntegerVector<int>(a2, a3, &__p, 0, 0, 0, 0);
  begin = __p.__begin_;
  end = __p.__end_;
  if (__p.__begin_ != __p.__end_)
  {
    v8 = __p.__begin_;
    do
      --*v8++;
    while (v8 != end);
  }
  kaldi::CuArray<int>::Resize(a1 + 48, (unint64_t)((char *)end - (char *)begin) >> 2, 1u, v4, v5);
  memcpy(*(void **)(a1 + 56), __p.__begin_, (char *)__p.__end_ - (char *)__p.__begin_);
  if (*(_DWORD *)(a1 + 48) != *(_DWORD *)(a1 + 12))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)0x1D4, "copy_from_indices_.Dim() == OutputDim()", v9);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_1DE432D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::IdentityComponent::Copy(kaldi::nnet1::IdentityComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1EA92D6D8;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1EA928708;
  return v2;
}

void sub_1DE432DF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C40DBBC96B9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::IdentityComponent::GetType(kaldi::nnet1::IdentityComponent *this)
{
  return 2057;
}

_QWORD *kaldi::nnet1::IdentityComponent::InitData(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;
  _QWORD v4[34];

  result = std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) == 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", 537);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Unity component doesn't expect any tokens");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

unsigned int *kaldi::nnet1::IdentityComponent::PropagateFnc(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, a2, 111, a4, a5);
}

void kaldi::nnet1::IdentityComponent::GetUnitOutputFnc(uint64_t a1, uint64_t a2, signed int a3, uint64_t a4, const char *a5)
{
  kaldi::CuVectorBase<float>::CopyColFromMat(a4, a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::DuplicateComponent::Copy(kaldi::nnet1::DuplicateComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1EA92D6D8;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1EA928BB0;
  *(_QWORD *)(v2 + 48) = *((_QWORD *)this + 6);
  *(_DWORD *)(v2 + 56) = *((_DWORD *)this + 14);
  return v2;
}

void sub_1DE432F40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C401AC3E4D5);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::DuplicateComponent::GetType(kaldi::nnet1::DuplicateComponent *this)
{
  return 2056;
}

void kaldi::nnet1::DuplicateComponent::InitData(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  __int128 *v7;
  _DWORD *v8;
  uint64_t *v9;
  _DWORD *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v14;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  _QWORD *v21;
  __int128 *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int v27;
  int v28;
  int v29;
  _QWORD v30[34];
  __int128 v31;
  uint64_t v32;

  v7 = &v31;
  a1[14] = 1;
  v8 = a1 + 14;
  v31 = 0uLL;
  v32 = 0;
  v9 = a2 + 4;
  v10 = a1 + 13;
  while (1)
  {
    if ((*((_BYTE *)v9 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      goto LABEL_57;
    kaldi::ReadToken(a2, 0, (uint64_t)&v31, a4, a5);
    if ((SHIBYTE(v32) & 0x80000000) == 0)
    {
      if (HIBYTE(v32) != 15)
      {
        if (HIBYTE(v32) != 16)
        {
          if (HIBYTE(v32) == 12)
            goto LABEL_52;
          goto LABEL_40;
        }
        if ((_QWORD)v31 != 0x6163696C7075443CLL || *((_QWORD *)&v31 + 1) != 0x3E74726174536574)
          goto LABEL_40;
        goto LABEL_11;
      }
      v19 = (_QWORD)v31 == 0x6163696C7075443CLL && *(_QWORD *)((char *)&v31 + 7) == 0x3E657A6953657461;
      v17 = (uint64_t)v10;
      if (!v19)
      {
        v20 = (_QWORD)v31 == 0x6C7075446D754E3CLL && *(_QWORD *)((char *)&v31 + 7) == 0x3E7365746163696CLL;
        v17 = (uint64_t)v8;
        if (!v20)
          goto LABEL_40;
      }
      goto LABEL_37;
    }
    v14 = *((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1) != 15)
    {
      if (*((_QWORD *)&v31 + 1) != 16)
        goto LABEL_50;
      if (*(_QWORD *)v31 != 0x6163696C7075443CLL || *(_QWORD *)(v31 + 8) != 0x3E74726174536574)
        goto LABEL_50;
LABEL_11:
      LODWORD(v30[0]) = 0;
      kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v30, v11, v12);
      a1[12] = v30[0];
      goto LABEL_38;
    }
    v16 = *(_QWORD *)v31 == 0x6163696C7075443CLL && *(_QWORD *)(v31 + 7) == 0x3E657A6953657461;
    v17 = (uint64_t)v10;
    if (!v16)
    {
      v14 = *((_QWORD *)&v31 + 1);
      v18 = *(_QWORD *)v31 == 0x6C7075446D754E3CLL && *(_QWORD *)(v31 + 7) == 0x3E7365746163696CLL;
      v17 = (uint64_t)v8;
      if (!v18)
        break;
    }
LABEL_37:
    kaldi::ReadBasicType<int>(a2, 0, v17, v11, v12);
LABEL_38:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if ((v32 & 0x8000000000000000) == 0)
  {
    if (HIBYTE(v32) == 12)
    {
      v7 = &v31;
      goto LABEL_52;
    }
    goto LABEL_40;
  }
LABEL_50:
  if (v14 != 12)
    goto LABEL_40;
  v7 = (__int128 *)v31;
LABEL_52:
  if (*(_QWORD *)v7 != 0x6E6F706D6F432F3CLL || *((_DWORD *)v7 + 2) != 1047817829)
  {
LABEL_40:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", 609);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Unknown token ", 14);
    if (v32 >= 0)
      v22 = &v31;
    else
      v22 = (__int128 *)v31;
    if (v32 >= 0)
      v23 = HIBYTE(v32);
    else
      v23 = *((_QWORD *)&v31 + 1);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" (DuplicateStart|DuplicateSize|NumDuplicates)", 45);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30);
  }
LABEL_57:
  v27 = a1[13];
  v28 = a1[2];
  if (v28 + a1[14] * v27 != a1[3])
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", 616);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Requested duplication doesn't match the output and input sizes", 62);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30);
  }
  if (v27 < 0 || (v29 = a1[12], v29 < 0) || v29 + v27 > v28)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", 620);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Duplication parameters out of range", 35);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30);
  }
  if (SHIBYTE(v32) < 0)
    operator delete((void *)v31);
}

void sub_1DE433310(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::DuplicateComponent::WriteData(uint64_t a1, _QWORD *a2, int a3)
{
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteBasicType<int>(a2, a3);
  return kaldi::WriteBasicType<int>(a2, a3);
}

uint64_t kaldi::nnet1::DuplicateComponent::PropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  void *v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  void *v20;
  __int128 v21;
  __int128 v22;

  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v20, a3, 0, *(_DWORD *)(a3 + 20), 0, a1[2]);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v20, a2, 111, v6, v7);
  v8 = a1[13];
  if (v8 >= 1)
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, a2, 0, *(_DWORD *)(a2 + 20), (const char *)a1[12], v8);
    if ((int)a1[14] >= 1)
    {
      v9 = 0;
      v10 = a1[2];
      do
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v14, a3, 0, *(_DWORD *)(a3 + 20), (const char *)v10, a1[13]);
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v14, (uint64_t)&v17, 111, v11, v12);
        v10 = (a1[13] + v10);
        v14 = &unk_1EA926508;
        v15 = 0u;
        v16 = 0u;
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v14);
        ++v9;
      }
      while (v9 < a1[14]);
    }
    v17 = &unk_1EA926508;
    v18 = 0u;
    v19 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v17);
  }
  v20 = &unk_1EA926508;
  v21 = 0u;
  v22 = 0u;
  return kaldi::CuMatrixBase<float>::~CuMatrixBase(&v20);
}

void sub_1DE4334E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,__int128 a21,__int128 a22)
{
  a20 = &unk_1EA926508;
  a21 = 0u;
  a22 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a20);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::DuplicateComponent::BackpropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t result;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  const char *v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  void *v19;
  __int128 v20;
  __int128 v21;

  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v19, a4, 0, *(_DWORD *)(a4 + 20), 0, a1[2]);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a5, (uint64_t)&v19, 111, v8, v9);
  v19 = &unk_1EA926508;
  v20 = 0u;
  v21 = 0u;
  result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v19);
  v11 = a1[13];
  if (v11 >= 1)
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v19, a5, 0, *(_DWORD *)(a5 + 20), (const char *)a1[12], v11);
    if ((int)a1[14] >= 1)
    {
      v12 = 0;
      v13 = a1[2];
      do
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v16, a4, 0, *(_DWORD *)(a4 + 20), (const char *)v13, a1[13]);
        kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v19, (uint64_t)&v16, 111, v14, v15, 1.0, 1.0);
        v13 = (a1[13] + v13);
        v16 = &unk_1EA926508;
        v17 = 0u;
        v18 = 0u;
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v16);
        ++v12;
      }
      while (v12 < a1[14]);
    }
    v19 = &unk_1EA926508;
    v20 = 0u;
    v21 = 0u;
    return kaldi::CuMatrixBase<float>::~CuMatrixBase(&v19);
  }
  return result;
}

void sub_1DE4336A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, __int128 a15, __int128 a16)
{
  a14 = &unk_1EA926508;
  a15 = 0u;
  a16 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a14);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::DuplicateComponent::ReadData(_DWORD *a1, _QWORD *a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t result;
  int v13;

  v13 = 0;
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v13, a4, a5);
  a1[12] = v13;
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v13, v8, v9);
  a1[13] = v13;
  result = kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v13, v10, v11);
  a1[14] = v13;
  return result;
}

kaldi::nnet1::AddShift *kaldi::nnet1::AddShift::Copy(kaldi::nnet1::AddShift *this)
{
  kaldi::nnet1::AddShift *v2;

  v2 = (kaldi::nnet1::AddShift *)operator new();
  kaldi::nnet1::AddShift::AddShift(v2, this);
  return v2;
}

void sub_1DE4337BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40582A63A6);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AddShift::GetType(kaldi::nnet1::AddShift *this)
{
  return 1031;
}

uint64_t kaldi::nnet1::AddShift::Info(kaldi::nnet1::AddShift *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  uint64_t v8;
  void *__p[2];
  unsigned __int8 v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  (*(void (**)(kaldi::nnet1::AddShift *, _QWORD *, _QWORD))(*(_QWORD *)this + 168))(this, v12, 0);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\n shift_data", 12);
  kaldi::nnet1::MomentStatistics<float>((_DWORD *)this + 22, v3, v4, v5, v6);
  if ((v11 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v11 & 0x80u) == 0)
    v8 = v11;
  else
    v8 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v7, v8);
  if ((char)v11 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v14);
}

void sub_1DE433900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AddShift::InfoGradient(kaldi::nnet1::AddShift *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string::size_type v15;
  std::string *v16;
  void *__p[2];
  unsigned __int8 v18;
  void *v19[2];
  unsigned __int8 v20;
  std::string v21;
  std::string v22;
  std::string v23;

  std::string::basic_string[abi:ne180100]<0>(&v21, "\n  shift_data_grad");
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)this + 15, v4, v5, v6, v7);
  if ((v20 & 0x80u) == 0)
    v8 = v19;
  else
    v8 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v9 = v20;
  else
    v9 = (std::string::size_type)v19[1];
  v10 = std::string::append(&v21, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v22, ", lr-coef ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v18 & 0x80u) == 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v15 = v18;
  else
    v15 = (std::string::size_type)__p[1];
  v16 = std::string::append(&v23, (const std::string::value_type *)v14, v15);
  *a2 = *v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((char)v18 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_1DE433A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  if (a33 < 0)
    operator delete(a28);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::AddShift::InitData(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  __int128 *v8;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  float *v13;
  BOOL v16;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  const char *v25;
  _QWORD *v26;
  __int128 *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD v31[34];
  __int128 v32;
  uint64_t v33;
  std::string v34;
  float v35;

  v35 = 0.0;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 168), &v34);
  v32 = 0uLL;
  v33 = 0;
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_67;
    kaldi::ReadToken(a2, 0, (uint64_t)&v32, v4, v5);
    if ((SHIBYTE(v33) & 0x80000000) == 0)
      break;
    v10 = *((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1) == 11
      && (*(_QWORD *)v32 == 0x72615074696E493CLL ? (v11 = *(_QWORD *)(v32 + 3) == 0x3E6D617261507469) : (v11 = 0), v11))
    {
LABEL_36:
      v13 = &v35;
    }
    else
    {
      if (*((_QWORD *)&v32 + 1) == 15)
      {
        v12 = *(_QWORD *)v32 == 0x61526E7261654C3CLL && *(_QWORD *)(v32 + 7) == 0x3E66656F43657461;
        v13 = (float *)(a1 + 176);
        if (v12)
          goto LABEL_56;
        v10 = *((_QWORD *)&v32 + 1);
      }
      if (v10 == 18)
      {
        if (*(_QWORD *)v32 == 0x6E6569646172473CLL
          && *(_QWORD *)(v32 + 8) == 0x7079546D726F4E74
          && *(_WORD *)(v32 + 16) == 15973)
        {
LABEL_45:
          kaldi::ReadToken(a2, 0, (uint64_t)&v34, v6, v7);
          goto LABEL_57;
        }
        v10 = *((_QWORD *)&v32 + 1);
      }
      if (v10 != 9)
        goto LABEL_58;
      v16 = *(_QWORD *)v32 == 0x6461724778614D3CLL && *(_BYTE *)(v32 + 8) == 62;
      v13 = (float *)(a1 + 172);
      if (!v16)
      {
        v10 = *((_QWORD *)&v32 + 1);
LABEL_58:
        if (v10 == 12)
        {
          v8 = (__int128 *)v32;
          goto LABEL_62;
        }
LABEL_72:
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", 725);
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Unknown token ", 14);
        if (v33 >= 0)
          v27 = &v32;
        else
          v27 = (__int128 *)v32;
        if (v33 >= 0)
          v28 = HIBYTE(v33);
        else
          v28 = *((_QWORD *)&v32 + 1);
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", a typo in config?", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" (InitParam|LearnRateCoef|GradientNormType|MaxGrad)", 51);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
      }
    }
LABEL_56:
    kaldi::ReadBasicType<float>(a2, 0, v13, v6, v7);
LABEL_57:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v8 = &v32;
  switch(HIBYTE(v33))
  {
    case 9:
      goto LABEL_51;
    case 0xB:
      if ((_QWORD)v32 != 0x72615074696E493CLL || *(_QWORD *)((char *)&v32 + 3) != 0x3E6D617261507469)
        goto LABEL_72;
      goto LABEL_36;
    case 0xC:
      goto LABEL_62;
    case 0xF:
      v19 = (_QWORD)v32 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v32 + 7) == 0x3E66656F43657461;
      v13 = (float *)(a1 + 176);
      if (!v19)
        goto LABEL_50;
      goto LABEL_56;
    case 0x12:
      if ((_QWORD)v32 == 0x6E6569646172473CLL
        && *((_QWORD *)&v32 + 1) == 0x7079546D726F4E74
        && (unsigned __int16)v33 == 15973)
      {
        goto LABEL_45;
      }
LABEL_50:
      if (HIBYTE(v33) == 9)
      {
LABEL_51:
        v20 = (_QWORD)v32 == 0x6461724778614D3CLL && BYTE8(v32) == 62;
        v13 = (float *)(a1 + 172);
        if (!v20)
          goto LABEL_72;
        goto LABEL_56;
      }
      if (HIBYTE(v33) != 12)
        goto LABEL_72;
      v8 = &v32;
LABEL_62:
      v21 = *(_QWORD *)v8;
      v22 = *((_DWORD *)v8 + 2);
      if (v21 != 0x6E6F706D6F432F3CLL || v22 != 1047817829)
        goto LABEL_72;
LABEL_67:
      *(_DWORD *)(a1 + 168) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v34);
      kaldi::CuVector<float>::Resize(a1 + 88, *(unsigned int *)(a1 + 8), 0, v24, v25);
      kaldi::CuVectorBase<float>::Set(a1 + 88, v35);
      if (SHIBYTE(v33) < 0)
        operator delete((void *)v32);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      return;
    default:
      goto LABEL_72;
  }
}

void sub_1DE433EE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AddShift::WriteData(_DWORD *a1, _QWORD *a2, int a3)
{
  _DWORD *v5;
  uint64_t v6;
  const char *v7;

  v5 = a1 + 22;
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 168))(a1);
  kaldi::CuVectorBase<float>::Write(v5, a2, a3, v6, v7);
}

uint64_t *kaldi::nnet1::AddShift::PropagateFnc(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, a2, 111, a4, a5);
  return kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)a3, a1 + 88, v7, v8, v9, 1.0, 1.0);
}

double kaldi::nnet1::AddShift::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  BOOL v10;
  __int128 *v12;
  uint64_t v13;
  BOOL v14;
  float *v15;
  uint64_t v18;
  int v19;
  BOOL v20;
  BOOL v21;
  _QWORD *v23;
  __int128 *v24;
  uint64_t v25;
  void *__p[2];
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  while (kaldi::Peek(a2, a3) == 60)
  {
    v28 = 0uLL;
    v29 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v28, v6, v7);
    if (SHIBYTE(v29) < 0)
    {
      v13 = *((_QWORD *)&v28 + 1);
      if (*((_QWORD *)&v28 + 1) != 15
        || (*(_QWORD *)v28 == 0x61526E7261654C3CLL ? (v14 = *(_QWORD *)(v28 + 7) == 0x3E66656F43657461) : (v14 = 0),
            v15 = (float *)(a1 + 176),
            !v14))
      {
        if (*((_QWORD *)&v28 + 1) == 18)
        {
          if (*(_QWORD *)v28 == 0x6E6569646172473CLL
            && *(_QWORD *)(v28 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v28 + 16) == 15973)
          {
            goto LABEL_46;
          }
          v13 = *((_QWORD *)&v28 + 1);
        }
        if (v13 != 9)
          goto LABEL_49;
        v12 = (__int128 *)v28;
        goto LABEL_31;
      }
    }
    else
    {
      if (HIBYTE(v29) == 9)
      {
        v12 = &v28;
LABEL_31:
        v18 = *(_QWORD *)v12;
        v19 = *((unsigned __int8 *)v12 + 8);
        v20 = v18 == 0x6461724778614D3CLL && v19 == 62;
        v15 = (float *)(a1 + 172);
        if (!v20)
        {
LABEL_49:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", 751);
          v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (v29 >= 0)
            v24 = &v28;
          else
            v24 = (__int128 *)v28;
          if (v29 >= 0)
            v25 = HIBYTE(v29);
          else
            v25 = *((_QWORD *)&v28 + 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_41;
      }
      if (HIBYTE(v29) != 15)
      {
        if (HIBYTE(v29) != 18)
          goto LABEL_49;
        v10 = (_QWORD)v28 == 0x6E6569646172473CLL && *((_QWORD *)&v28 + 1) == 0x7079546D726F4E74;
        if (!v10 || (unsigned __int16)v29 != 15973)
          goto LABEL_49;
LABEL_46:
        __p[0] = 0;
        __p[1] = 0;
        v27 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p, v8, v9);
        *(_DWORD *)(a1 + 168) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v27) < 0)
          operator delete(__p[0]);
        goto LABEL_42;
      }
      v21 = (_QWORD)v28 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v28 + 7) == 0x3E66656F43657461;
      v15 = (float *)(a1 + 176);
      if (!v21)
        goto LABEL_49;
    }
LABEL_41:
    kaldi::ReadBasicType<float>(a2, a3, v15, v8, v9);
LABEL_42:
    if (SHIBYTE(v29) < 0)
      operator delete((void *)v28);
  }
  return kaldi::CuVector<float>::Read(a1 + 88, a2, a3, v6, v7);
}

void sub_1DE434264()
{
  JUMPOUT(0x1DE43426CLL);
}

_QWORD *kaldi::nnet1::AddShift::WriteConfig(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  std::string __p;

  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v8, v9);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 168), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v10, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v12, v13);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

void sub_1DE434340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::AddShift::NumParams(kaldi::nnet1::AddShift *this)
{
  return *((unsigned int *)this + 26);
}

_DWORD *kaldi::nnet1::AddShift::GetParams(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  kaldi::Vector<float>::Resize(a2, *(unsigned int *)(a1 + 8), 0, a4, a5);
  return kaldi::CuVectorBase<float>::CopyToVec<float>((_DWORD *)(a1 + 88), (uint64_t)a2, v7, v8, v9);
}

_DWORD *kaldi::nnet1::AddShift::SetParams(_DWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 176))(a1))
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)0x30D, "wei_src.Dim() == NumParams()", v7);
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 22, a2, v5, v6, v7);
}

float kaldi::nnet1::AddShift::SumParams(kaldi::nnet1::AddShift *this)
{
  return kaldi::CuVectorBase<float>::Sum((uint64_t)this + 88);
}

void kaldi::nnet1::AddShift::PerturbParams(kaldi::nnet1::AddShift *this, float a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _QWORD v12[4];

  v8 = *((unsigned int *)this + 26);
  v12[0] = &unk_1EA92DFD8;
  memset(&v12[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v12, v8, 1u, a5, a6);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v12);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 88, (uint64_t)v12, v9, v10, v11, a2, 1.0);
  v12[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v12);
}

void sub_1DE434490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuVector<float>::~CuVector(&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AddShift::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  _DWORD **v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;

  v8 = (_DWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  (*((void (**)(_DWORD **, uint64_t, uint64_t, _QWORD, _QWORD))*v8 + 29))(v8, a2, a3, 0, 0);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v9, 1, v10, v11);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v8[15], (uint64_t)a4, v12, v13, v14);
  return (*((uint64_t (**)(_DWORD **))*v8 + 1))(v8);
}

void kaldi::nnet1::AddShift::AccumGradients(kaldi::nnet1::AddShift *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;

  kaldi::nnet1::AddShift::EnsureCorrs(a1);
  *(_DWORD *)(*((_QWORD *)a1 + 23) + 4 * a5) = *(_DWORD *)(a2 + 20);
  v10 = *((_QWORD *)a1 + 15) + 32 * a5;
  *(_QWORD *)(v10 + 24) = a4;
  kaldi::CuVectorBase<float>::AddRowSumMat(v10, a3, 1.0, 0.0, v11, v12, v13);
}

uint64_t kaldi::nnet1::AddShift::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 172) = a3;
  *(_DWORD *)(result + 168) = a2;
  *(_BYTE *)(result + 208) = 0;
  return result;
}

void kaldi::nnet1::AddShift::NormalizeGradients(kaldi::nnet1::AddShift *this, float a2, int a3, uint64_t a4, uint64_t a5, const char *a6)
{
  int v6;

  v6 = *((_DWORD *)this + 42);
  if (v6 == 3)
  {
    if (a2 >= 0.0 && a2 <= 1.0)
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((_QWORD *)this + 15) + 32 * a3, *((_QWORD *)this + 18) + 32 * a3, a2, a4, a5, a6);
  }
  else if (v6 == 2)
  {
    if (a2 > 0.0)
    {
      if (*((_BYTE *)this + 84))
        a2 = (float)*(int *)(*((_QWORD *)this + 23) + 4 * a3) * a2;
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((_QWORD *)this + 15) + 32 * a3, (_DWORD *)(*((_QWORD *)this + 18) + 32 * a3), a4, a5, a6, a2);
    }
  }
  else if (v6 == 1 && a2 > 0.0)
  {
    if (*((_BYTE *)this + 84))
      a2 = (float)*(int *)(*((_QWORD *)this + 23) + 4 * a3) * a2;
    kaldi::nnet1::UpdatableComponent::ClipGradient(*((_QWORD *)this + 15) + 32 * a3, a2);
  }
}

void kaldi::nnet1::AddShift::UpdateWeights(kaldi::nnet1::AddShift *this, void *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  int *v19;
  int v20;
  _BYTE *v21;
  _BYTE *v22;

  kaldi::nnet1::AddShift::EnsureCorrs(this);
  v9 = *((unsigned int *)this + 20);
  if (a3 >= 0)
    v10 = a3;
  else
    v10 = *((_DWORD *)this + 20);
  if ((_DWORD)v9 == 1)
    v11 = 0;
  else
    v11 = v10;
  if ((int)v11 > (int)v9)
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)0x363, "batch_idx <= opts_.num_subbatches", v8);
  v12 = *((float *)this + 14);
  v13 = *((_QWORD *)this + 15);
  v14 = v13 + 32 * (int)v11;
  *(_QWORD *)(v14 + 24) = a2;
  *(_QWORD *)(*((_QWORD *)this + 18) + 32 * (int)v11 + 24) = a2;
  if ((_DWORD)v11 == (_DWORD)v9)
  {
    kaldi::CuVectorBase<float>::AddVec(v14, v13, v6, v7, v8, 1.0, 0.0);
    if (*((int *)this + 20) > 1)
    {
      v15 = 1;
      v16 = 32;
      do
      {
        kaldi::CuVectorBase<float>::AddVec(*((_QWORD *)this + 15) + 32 * (int)v11, *((_QWORD *)this + 15) + v16, v6, v7, v8, 1.0, 1.0);
        ++v15;
        v16 += 32;
      }
      while (v15 < *((int *)this + 20));
    }
    v17 = (int *)*((_QWORD *)this + 23);
    v17[(int)v11] = 0;
    if ((int)v9 >= 1)
    {
      v18 = 0;
      v19 = v17;
      do
      {
        v20 = *v19++;
        v18 += v20;
        v17[(int)v11] = v18;
        --v9;
      }
      while (v9);
    }
  }
  if (*((_BYTE *)this + 84))
    v12 = v12 / (float)*(int *)(*((_QWORD *)this + 23) + 4 * (int)v11);
  if (*((float *)this + 43) >= 0.0)
    (*(void (**)(kaldi::nnet1::AddShift *, uint64_t))(*(_QWORD *)this + 248))(this, v11);
  *((_QWORD *)this + 14) = a2;
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 88, *((_QWORD *)this + 15) + 32 * (int)v11, v6, v7, v8, -(float)(v12 * *((float *)this + 44)), 1.0);
  v21 = (_BYTE *)*((_QWORD *)this + 23);
  if ((_DWORD)v11 == *((_DWORD *)this + 20))
  {
    v22 = (_BYTE *)*((_QWORD *)this + 24);
    if (v21 != v22)
      bzero(v21, ((v22 - v21 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  else
  {
    *(_DWORD *)&v21[4 * (int)v11] = 0;
  }
}

kaldi::nnet1::Rescale *kaldi::nnet1::Rescale::Copy(kaldi::nnet1::Rescale *this)
{
  kaldi::nnet1::Rescale *v2;

  v2 = (kaldi::nnet1::Rescale *)operator new();
  kaldi::nnet1::Rescale::Rescale(v2, this);
  return v2;
}

void sub_1DE434894(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C404CB9A218);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Rescale::GetType(kaldi::nnet1::Rescale *this)
{
  return 1032;
}

uint64_t kaldi::nnet1::Rescale::Info(kaldi::nnet1::Rescale *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  uint64_t v8;
  void *__p[2];
  unsigned __int8 v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  (*(void (**)(kaldi::nnet1::Rescale *, _QWORD *, _QWORD))(*(_QWORD *)this + 168))(this, v12, 0);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\n scale_data", 12);
  kaldi::nnet1::MomentStatistics<float>((_DWORD *)this + 22, v3, v4, v5, v6);
  if ((v11 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v11 & 0x80u) == 0)
    v8 = v11;
  else
    v8 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v7, v8);
  if ((char)v11 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v14);
}

void sub_1DE4349D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Rescale::InfoGradient(kaldi::nnet1::Rescale *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string::size_type v15;
  std::string *v16;
  void *__p[2];
  unsigned __int8 v18;
  void *v19[2];
  unsigned __int8 v20;
  std::string v21;
  std::string v22;
  std::string v23;

  std::string::basic_string[abi:ne180100]<0>(&v21, "\n  scale_data_grad");
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)this + 15, v4, v5, v6, v7);
  if ((v20 & 0x80u) == 0)
    v8 = v19;
  else
    v8 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v9 = v20;
  else
    v9 = (std::string::size_type)v19[1];
  v10 = std::string::append(&v21, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v22, ", lr-coef ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v18 & 0x80u) == 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v15 = v18;
  else
    v15 = (std::string::size_type)__p[1];
  v16 = std::string::append(&v23, (const std::string::value_type *)v14, v15);
  *a2 = *v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((char)v18 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_1DE434B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  if (a33 < 0)
    operator delete(a28);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Rescale::InitData(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  __int128 *v8;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  float *v13;
  BOOL v16;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  const char *v25;
  _QWORD *v26;
  __int128 *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD v31[34];
  __int128 v32;
  uint64_t v33;
  std::string v34;
  float v35;

  v35 = 0.0;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 216), &v34);
  v32 = 0uLL;
  v33 = 0;
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_67;
    kaldi::ReadToken(a2, 0, (uint64_t)&v32, v4, v5);
    if ((SHIBYTE(v33) & 0x80000000) == 0)
      break;
    v10 = *((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1) == 11
      && (*(_QWORD *)v32 == 0x72615074696E493CLL ? (v11 = *(_QWORD *)(v32 + 3) == 0x3E6D617261507469) : (v11 = 0), v11))
    {
LABEL_36:
      v13 = &v35;
    }
    else
    {
      if (*((_QWORD *)&v32 + 1) == 15)
      {
        v12 = *(_QWORD *)v32 == 0x61526E7261654C3CLL && *(_QWORD *)(v32 + 7) == 0x3E66656F43657461;
        v13 = (float *)(a1 + 224);
        if (v12)
          goto LABEL_56;
        v10 = *((_QWORD *)&v32 + 1);
      }
      if (v10 == 18)
      {
        if (*(_QWORD *)v32 == 0x6E6569646172473CLL
          && *(_QWORD *)(v32 + 8) == 0x7079546D726F4E74
          && *(_WORD *)(v32 + 16) == 15973)
        {
LABEL_45:
          kaldi::ReadToken(a2, 0, (uint64_t)&v34, v6, v7);
          goto LABEL_57;
        }
        v10 = *((_QWORD *)&v32 + 1);
      }
      if (v10 != 9)
        goto LABEL_58;
      v16 = *(_QWORD *)v32 == 0x6461724778614D3CLL && *(_BYTE *)(v32 + 8) == 62;
      v13 = (float *)(a1 + 220);
      if (!v16)
      {
        v10 = *((_QWORD *)&v32 + 1);
LABEL_58:
        if (v10 == 12)
        {
          v8 = (__int128 *)v32;
          goto LABEL_62;
        }
LABEL_72:
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", 1002);
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Unknown token ", 14);
        if (v33 >= 0)
          v27 = &v32;
        else
          v27 = (__int128 *)v32;
        if (v33 >= 0)
          v28 = HIBYTE(v33);
        else
          v28 = *((_QWORD *)&v32 + 1);
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", a typo in config?", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" (InitParam)", 12);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
      }
    }
LABEL_56:
    kaldi::ReadBasicType<float>(a2, 0, v13, v6, v7);
LABEL_57:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v8 = &v32;
  switch(HIBYTE(v33))
  {
    case 9:
      goto LABEL_51;
    case 0xB:
      if ((_QWORD)v32 != 0x72615074696E493CLL || *(_QWORD *)((char *)&v32 + 3) != 0x3E6D617261507469)
        goto LABEL_72;
      goto LABEL_36;
    case 0xC:
      goto LABEL_62;
    case 0xF:
      v19 = (_QWORD)v32 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v32 + 7) == 0x3E66656F43657461;
      v13 = (float *)(a1 + 224);
      if (!v19)
        goto LABEL_50;
      goto LABEL_56;
    case 0x12:
      if ((_QWORD)v32 == 0x6E6569646172473CLL
        && *((_QWORD *)&v32 + 1) == 0x7079546D726F4E74
        && (unsigned __int16)v33 == 15973)
      {
        goto LABEL_45;
      }
LABEL_50:
      if (HIBYTE(v33) == 9)
      {
LABEL_51:
        v20 = (_QWORD)v32 == 0x6461724778614D3CLL && BYTE8(v32) == 62;
        v13 = (float *)(a1 + 220);
        if (!v20)
          goto LABEL_72;
        goto LABEL_56;
      }
      if (HIBYTE(v33) != 12)
        goto LABEL_72;
      v8 = &v32;
LABEL_62:
      v21 = *(_QWORD *)v8;
      v22 = *((_DWORD *)v8 + 2);
      if (v21 != 0x6E6F706D6F432F3CLL || v22 != 1047817829)
        goto LABEL_72;
LABEL_67:
      *(_DWORD *)(a1 + 216) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v34);
      kaldi::CuVector<float>::Resize(a1 + 88, *(unsigned int *)(a1 + 8), 0, v24, v25);
      kaldi::CuVectorBase<float>::Set(a1 + 88, v35);
      if (SHIBYTE(v33) < 0)
        operator delete((void *)v32);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      return;
    default:
      goto LABEL_72;
  }
}

void sub_1DE434FB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Rescale::PropagateFnc(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, a2, 111, a4, a5);
  return kaldi::CuMatrixBase<float>::MulColsVec((uint64_t)a3, a1 + 88, v7, v8, v9);
}

uint64_t kaldi::nnet1::Rescale::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, a4, 111, a4, (const char *)a5);
  return kaldi::CuMatrixBase<float>::MulColsVec((uint64_t)a5, a1 + 88, v7, v8, v9);
}

double kaldi::nnet1::Rescale::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  BOOL v10;
  __int128 *v12;
  uint64_t v13;
  BOOL v14;
  float *v15;
  uint64_t v18;
  int v19;
  BOOL v20;
  BOOL v21;
  _QWORD *v23;
  __int128 *v24;
  uint64_t v25;
  void *__p[2];
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  while (kaldi::Peek(a2, a3) == 60)
  {
    v28 = 0uLL;
    v29 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v28, v6, v7);
    if (SHIBYTE(v29) < 0)
    {
      v13 = *((_QWORD *)&v28 + 1);
      if (*((_QWORD *)&v28 + 1) != 15
        || (*(_QWORD *)v28 == 0x61526E7261654C3CLL ? (v14 = *(_QWORD *)(v28 + 7) == 0x3E66656F43657461) : (v14 = 0),
            v15 = (float *)(a1 + 224),
            !v14))
      {
        if (*((_QWORD *)&v28 + 1) == 18)
        {
          if (*(_QWORD *)v28 == 0x6E6569646172473CLL
            && *(_QWORD *)(v28 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v28 + 16) == 15973)
          {
            goto LABEL_46;
          }
          v13 = *((_QWORD *)&v28 + 1);
        }
        if (v13 != 9)
          goto LABEL_49;
        v12 = (__int128 *)v28;
        goto LABEL_31;
      }
    }
    else
    {
      if (HIBYTE(v29) == 9)
      {
        v12 = &v28;
LABEL_31:
        v18 = *(_QWORD *)v12;
        v19 = *((unsigned __int8 *)v12 + 8);
        v20 = v18 == 0x6461724778614D3CLL && v19 == 62;
        v15 = (float *)(a1 + 220);
        if (!v20)
        {
LABEL_49:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", 1027);
          v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (v29 >= 0)
            v24 = &v28;
          else
            v24 = (__int128 *)v28;
          if (v29 >= 0)
            v25 = HIBYTE(v29);
          else
            v25 = *((_QWORD *)&v28 + 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_41;
      }
      if (HIBYTE(v29) != 15)
      {
        if (HIBYTE(v29) != 18)
          goto LABEL_49;
        v10 = (_QWORD)v28 == 0x6E6569646172473CLL && *((_QWORD *)&v28 + 1) == 0x7079546D726F4E74;
        if (!v10 || (unsigned __int16)v29 != 15973)
          goto LABEL_49;
LABEL_46:
        __p[0] = 0;
        __p[1] = 0;
        v27 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p, v8, v9);
        *(_DWORD *)(a1 + 216) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v27) < 0)
          operator delete(__p[0]);
        goto LABEL_42;
      }
      v21 = (_QWORD)v28 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v28 + 7) == 0x3E66656F43657461;
      v15 = (float *)(a1 + 224);
      if (!v21)
        goto LABEL_49;
    }
LABEL_41:
    kaldi::ReadBasicType<float>(a2, a3, v15, v8, v9);
LABEL_42:
    if (SHIBYTE(v29) < 0)
      operator delete((void *)v28);
  }
  return kaldi::CuVector<float>::Read(a1 + 88, a2, a3, v6, v7);
}

void sub_1DE435328()
{
  JUMPOUT(0x1DE435330);
}

_QWORD *kaldi::nnet1::Rescale::WriteConfig(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  std::string __p;

  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v8, v9);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 216), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v10, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v12, v13);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

void sub_1DE435404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *kaldi::nnet1::Rescale::SetParams(_DWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 176))(a1))
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)0x420, "wei_src.Dim() == NumParams()", v7);
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 22, a2, v5, v6, v7);
}

void kaldi::nnet1::Rescale::AccumGradients(kaldi::nnet1::Rescale *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;

  kaldi::nnet1::Rescale::EnsureCorrs(a1);
  v10 = *((_QWORD *)a1 + 15) + 32 * a5;
  *(_QWORD *)(v10 + 24) = a4;
  kaldi::CuVectorBase<float>::SetZero(v10);
  *(_DWORD *)(*((_QWORD *)a1 + 29) + 4 * a5) = *(_DWORD *)(a2 + 20);
  *((_QWORD *)a1 + 25) = a4;
  kaldi::CuMatrix<float>::operator=((uint64_t)a1 + 168, a3);
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)a1 + 168, a2, v11, v12, v13);
  kaldi::CuVectorBase<float>::AddRowSumMat(*((_QWORD *)a1 + 15) + 32 * a5, (uint64_t)a1 + 168, 1.0, 1.0, v14, v15, v16);
}

uint64_t kaldi::nnet1::Rescale::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 220) = a3;
  *(_DWORD *)(result + 216) = a2;
  *(_BYTE *)(result + 256) = 0;
  return result;
}

void kaldi::nnet1::Rescale::NormalizeGradients(kaldi::nnet1::Rescale *this, float a2, int a3, uint64_t a4, uint64_t a5, const char *a6)
{
  int v6;

  v6 = *((_DWORD *)this + 54);
  if (v6 == 3)
  {
    if (a2 >= 0.0 && a2 <= 1.0)
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((_QWORD *)this + 15) + 32 * a3, *((_QWORD *)this + 18) + 32 * a3, a2, a4, a5, a6);
  }
  else if (v6 == 2)
  {
    if (a2 > 0.0)
    {
      if (*((_BYTE *)this + 84))
        a2 = (float)*(int *)(*((_QWORD *)this + 29) + 4 * a3) * a2;
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((_QWORD *)this + 15) + 32 * a3, (_DWORD *)(*((_QWORD *)this + 18) + 32 * a3), a4, a5, a6, a2);
    }
  }
  else if (v6 == 1 && a2 > 0.0)
  {
    if (*((_BYTE *)this + 84))
      a2 = (float)*(int *)(*((_QWORD *)this + 29) + 4 * a3) * a2;
    kaldi::nnet1::UpdatableComponent::ClipGradient(*((_QWORD *)this + 15) + 32 * a3, a2);
  }
}

void kaldi::nnet1::Rescale::UpdateWeights(kaldi::nnet1::Rescale *this, void *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  int *v19;
  int v20;
  _BYTE *v21;
  _BYTE *v22;

  kaldi::nnet1::Rescale::EnsureCorrs(this);
  v9 = *((unsigned int *)this + 20);
  if (a3 >= 0)
    v10 = a3;
  else
    v10 = *((_DWORD *)this + 20);
  if ((_DWORD)v9 == 1)
    v11 = 0;
  else
    v11 = v10;
  if ((int)v11 > (int)v9)
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)0x47C, "batch_idx <= opts_.num_subbatches", v8);
  v12 = *((float *)this + 14);
  v13 = *((_QWORD *)this + 15);
  v14 = v13 + 32 * (int)v11;
  *(_QWORD *)(v14 + 24) = a2;
  *(_QWORD *)(*((_QWORD *)this + 18) + 32 * (int)v11 + 24) = a2;
  if ((_DWORD)v11 == (_DWORD)v9)
  {
    kaldi::CuVectorBase<float>::AddVec(v14, v13, v6, v7, v8, 1.0, 0.0);
    if (*((int *)this + 20) > 1)
    {
      v15 = 1;
      v16 = 32;
      do
      {
        kaldi::CuVectorBase<float>::AddVec(*((_QWORD *)this + 15) + 32 * (int)v11, *((_QWORD *)this + 15) + v16, v6, v7, v8, 1.0, 1.0);
        ++v15;
        v16 += 32;
      }
      while (v15 < *((int *)this + 20));
    }
    v17 = (int *)*((_QWORD *)this + 29);
    v17[(int)v11] = 0;
    if ((int)v9 >= 1)
    {
      v18 = 0;
      v19 = v17;
      do
      {
        v20 = *v19++;
        v18 += v20;
        v17[(int)v11] = v18;
        --v9;
      }
      while (v9);
    }
  }
  if (*((_BYTE *)this + 84))
    v12 = v12 / (float)*(int *)(*((_QWORD *)this + 29) + 4 * (int)v11);
  if (*((float *)this + 55) >= 0.0)
    (*(void (**)(kaldi::nnet1::Rescale *, uint64_t))(*(_QWORD *)this + 248))(this, v11);
  *((_QWORD *)this + 14) = a2;
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 88, *((_QWORD *)this + 15) + 32 * (int)v11, v6, v7, v8, -(float)(v12 * *((float *)this + 56)), 1.0);
  v21 = (_BYTE *)*((_QWORD *)this + 29);
  if ((_DWORD)v11 == *((_DWORD *)this + 20))
  {
    v22 = (_BYTE *)*((_QWORD *)this + 30);
    if (v21 != v22)
      bzero(v21, ((v22 - v21 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  else
  {
    *(_DWORD *)&v21[4 * (int)v11] = 0;
  }
}

kaldi::nnet1::Rbm *kaldi::nnet1::Rbm::Copy(kaldi::nnet1::Rbm *this)
{
  kaldi::nnet1::Rbm *v2;

  v2 = (kaldi::nnet1::Rbm *)operator new();
  kaldi::nnet1::Rbm::Rbm(v2, this);
  return v2;
}

void sub_1DE435808(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C40502BA4E3);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Rbm::GetType(kaldi::nnet1::Rbm *this)
{
  return 1025;
}

void kaldi::nnet1::Rbm::InitData(unsigned int *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3, uint64_t a4, const char *a5)
{
  uint64_t *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v12;
  __int128 *v26;
  void **v30;
  float *v39;
  _QWORD *v42;
  uint64_t v43;
  int v48;
  _QWORD *v49;
  uint64_t v50;
  int v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  int v59;
  int v60;
  int64_t v61;
  unint64_t v62;
  float v63;
  float v64;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  unint64_t v72;
  float v73;
  float v74;
  uint64_t v75;
  float v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  _QWORD *v82;
  void **v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  const void *Component;
  _DWORD *v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  _DWORD *v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  float *v102;
  uint64_t v103;
  float *v104;
  uint64_t v105;
  double v106;
  float v107;
  float v108;
  double v109;
  float v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  unint64_t v115;
  float v116;
  float v117;
  uint64_t v118;
  float v119;
  uint64_t v120;
  uint64_t v121;
  const char *v122;
  const char *v123;
  _DWORD *v124;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  _QWORD *v128;
  _BYTE **v129;
  uint64_t v130;
  _QWORD *v131;
  _BYTE **v132;
  uint64_t v133;
  _QWORD *v134;
  __int128 *v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  float *v139;
  uint64_t v140;
  uint64_t v141;
  float *v142;
  uint64_t v143;
  uint64_t v144;
  float *v145;
  uint64_t v146;
  uint64_t v147;
  float *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  unsigned int v153;
  int v154;
  _BYTE v155[16];
  uint64_t v156;
  void *__p;
  void *v158;
  __int128 v159;
  uint64_t v160;
  void **v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  _BYTE *v168;
  uint64_t v169;
  uint64_t v170;
  _BYTE *v171;
  uint64_t v172;
  uint64_t v173;

  v171 = 0;
  v172 = 0;
  v173 = 0;
  v168 = 0;
  v169 = 0;
  v170 = 0;
  v166 = 0;
  v167 = 0;
  v165 = 1036831949;
  v164 = -1;
  v8 = a2 + 4;
  v161 = 0;
  v162 = 0;
  v163 = 0;
  v159 = 0uLL;
  v160 = 0;
  while ((*((_BYTE *)v8 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v159, a4, a5);
    if (SHIBYTE(v160) < 0)
    {
      v12 = *((_QWORD *)&v159 + 1);
      if (*((_QWORD *)&v159 + 1) == 12)
      {
        if (*(_QWORD *)v159 == 0x546E65646469483CLL && *(_DWORD *)(v159 + 8) == 1046835321)
        {
LABEL_128:
          v30 = (void **)&v168;
          goto LABEL_129;
        }
        v12 = *((_QWORD *)&v159 + 1);
      }
      else if (*((_QWORD *)&v159 + 1) == 13
             && *(_QWORD *)v159 == 0x656C62697369563CLL
             && *(_QWORD *)(v159 + 5) == 0x3E65707954656C62)
      {
LABEL_101:
        v30 = (void **)&v171;
        goto LABEL_129;
      }
      if (v12 == 17)
      {
        if (*(_QWORD *)v159 == 0x656C62697369563CLL
          && *(_QWORD *)(v159 + 8) == 0x6E61654D73616942
          && *(_BYTE *)(v159 + 16) == 62)
        {
LABEL_130:
          v39 = (float *)&v167 + 1;
LABEL_143:
          kaldi::ReadBasicType<float>(a2, 0, v39, v9, v10);
          goto LABEL_144;
        }
        v12 = *((_QWORD *)&v159 + 1);
      }
      if (v12 == 18)
      {
        if (*(_QWORD *)v159 == 0x656C62697369563CLL
          && *(_QWORD *)(v159 + 8) == 0x676E615273616942
          && *(_WORD *)(v159 + 16) == 15973)
        {
LABEL_132:
          v39 = (float *)&v167;
          goto LABEL_143;
        }
        v12 = *((_QWORD *)&v159 + 1);
      }
      if (v12 == 16)
      {
        if (*(_QWORD *)v159 == 0x426E65646469483CLL && *(_QWORD *)(v159 + 8) == 0x3E6E61654D736169)
        {
LABEL_131:
          v39 = (float *)&v166 + 1;
          goto LABEL_143;
        }
        v12 = *((_QWORD *)&v159 + 1);
      }
      if (v12 == 17)
      {
        if (*(_QWORD *)v159 == 0x426E65646469483CLL
          && *(_QWORD *)(v159 + 8) == 0x65676E6152736169
          && *(_BYTE *)(v159 + 16) == 62)
        {
LABEL_142:
          v39 = (float *)&v166;
          goto LABEL_143;
        }
        v12 = *((_QWORD *)&v159 + 1);
      }
      if (v12 == 13)
      {
        if (*(_QWORD *)v159 == 0x74536D617261503CLL && *(_QWORD *)(v159 + 5) == 0x3E7665646474536DLL)
        {
LABEL_133:
          v39 = (float *)&v165;
          goto LABEL_143;
        }
        v12 = *((_QWORD *)&v159 + 1);
      }
      if (v12 == 25)
      {
        if (*(_QWORD *)v159 == 0x656C62697369563CLL
          && *(_QWORD *)(v159 + 8) == 0x6E766D4373616942
          && *(_QWORD *)(v159 + 16) == 0x656D616E656C6946
          && *(_BYTE *)(v159 + 24) == 62)
        {
LABEL_87:
          v30 = (void **)&v161;
LABEL_129:
          kaldi::ReadToken(a2, 0, (uint64_t)v30, v9, v10);
          goto LABEL_144;
        }
        v12 = *((_QWORD *)&v159 + 1);
      }
      if (v12 != 12)
        goto LABEL_145;
      v26 = (__int128 *)v159;
    }
    else
    {
      switch(HIBYTE(v160))
      {
        case 0xC:
          if ((_QWORD)v159 == 0x546E65646469483CLL && DWORD2(v159) == 1046835321)
            goto LABEL_128;
          goto LABEL_120;
        case 0xD:
          if ((_QWORD)v159 == 0x656C62697369563CLL && *(_QWORD *)((char *)&v159 + 5) == 0x3E65707954656C62)
            goto LABEL_101;
          goto LABEL_116;
        case 0x10:
LABEL_110:
          if ((_QWORD)v159 == 0x426E65646469483CLL && *((_QWORD *)&v159 + 1) == 0x3E6E61654D736169)
            goto LABEL_131;
LABEL_114:
          if (HIBYTE(v160) == 12)
            goto LABEL_121;
          if (HIBYTE(v160) != 13)
            goto LABEL_145;
LABEL_116:
          if ((_QWORD)v159 == 0x74536D617261503CLL && *(_QWORD *)((char *)&v159 + 5) == 0x3E7665646474536DLL)
            goto LABEL_133;
LABEL_120:
          if (HIBYTE(v160) != 12)
            goto LABEL_145;
LABEL_121:
          v26 = &v159;
          break;
        case 0x11:
          if ((_QWORD)v159 != 0x656C62697369563CLL
            || *((_QWORD *)&v159 + 1) != 0x6E61654D73616942
            || v160 != 62)
          {
            v26 = &v159;
            switch(HIBYTE(v160))
            {
              case 0xC:
                goto LABEL_122;
              case 0xD:
                goto LABEL_116;
              case 0x10:
                goto LABEL_110;
              case 0x11:
                goto LABEL_134;
              default:
                goto LABEL_145;
            }
          }
          goto LABEL_130;
        case 0x12:
          if ((_QWORD)v159 != 0x656C62697369563CLL
            || *((_QWORD *)&v159 + 1) != 0x676E615273616942
            || (unsigned __int16)v160 != 15973)
          {
            v26 = &v159;
            switch(HIBYTE(v160))
            {
              case 0xC:
                goto LABEL_122;
              case 0xD:
                goto LABEL_116;
              case 0x10:
                goto LABEL_110;
              case 0x11:
LABEL_134:
                if ((_QWORD)v159 != 0x426E65646469483CLL
                  || *((_QWORD *)&v159 + 1) != 0x65676E6152736169
                  || v160 != 62)
                {
                  goto LABEL_114;
                }
                goto LABEL_142;
              default:
                goto LABEL_145;
            }
          }
          goto LABEL_132;
        case 0x19:
          if ((_QWORD)v159 == 0x656C62697369563CLL
            && *((_QWORD *)&v159 + 1) == 0x6E766D4373616942
            && v160 == 0x656D616E656C6946
            && v161 == 62)
          {
            goto LABEL_87;
          }
          goto LABEL_120;
        default:
          goto LABEL_145;
      }
    }
LABEL_122:
    if (*(_QWORD *)v26 != 0x536D6F646E61523CLL || *((_DWORD *)v26 + 2) != 1046766949)
    {
LABEL_145:
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v159, "</Component>"))
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v145, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-rbm.h", 131);
        v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v145, (uint64_t)"Unknown token ", 14);
        if (v160 >= 0)
          v135 = &v159;
        else
          v135 = (__int128 *)v159;
        if (v160 >= 0)
          v136 = HIBYTE(v160);
        else
          v136 = *((_QWORD *)&v159 + 1);
        v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)v135, v136);
        v138 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)" Typo in config?", 16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)" (VisibleType|HiddenType|VisibleBiasMean|VisibleBiasRange|HiddenBiasMean|HiddenBiasRange|ParamStddev|VisibleBiasCmvnFilename|RandomSeed)", 136);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v145);
      }
      break;
    }
    kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v164, v9, v10);
LABEL_144:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if ((SHIBYTE(v173) & 0x80000000) == 0)
  {
    v42 = &v171;
    switch(HIBYTE(v173))
    {
      case 4:
        if ((_DWORD)v171 != 1852990818)
          goto LABEL_288;
        goto LABEL_180;
      case 5:
        goto LABEL_174;
      case 8:
        goto LABEL_166;
      case 9:
        if (v171 == (_BYTE *)0x6C6C756F6E726542 && v172 == 105)
          goto LABEL_180;
        if (HIBYTE(v173) == 8)
        {
          v42 = &v171;
          goto LABEL_166;
        }
        if (HIBYTE(v173) != 5)
          goto LABEL_288;
LABEL_174:
        if ((_DWORD)v171 != 1937072487 || BYTE4(v171) != 115)
        {
LABEL_288:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v145, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-rbm.h", 142);
          v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v145, (uint64_t)"Wrong <VisibleType>", 19);
          if (v173 >= 0)
            v129 = &v171;
          else
            v129 = (_BYTE **)v171;
          if (v173 >= 0)
            v130 = HIBYTE(v173);
          else
            v130 = v172;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)v129, v130);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v145);
        }
        return;
      default:
        goto LABEL_288;
    }
    goto LABEL_179;
  }
  v43 = v172;
  if (v172 != 4 || *(_DWORD *)v171 != 1852990818)
  {
    if (v172 != 9)
      goto LABEL_158;
    if (*(_QWORD *)v171 != 0x6C6C756F6E726542 || v171[8] != 105)
    {
      v43 = v172;
LABEL_158:
      if (v43 == 5)
      {
        if (*(_DWORD *)v171 == 1937072487 && v171[4] == 115)
        {
LABEL_179:
          v48 = 1;
          goto LABEL_181;
        }
        v43 = v172;
      }
      if (v43 != 8)
        goto LABEL_288;
      v42 = v171;
LABEL_166:
      if (*v42 != 0x6E61697373756147)
        goto LABEL_288;
      goto LABEL_179;
    }
  }
LABEL_180:
  v48 = 0;
LABEL_181:
  a1[74] = v48;
  if ((v170 & 0x8000000000000000) == 0)
  {
    v49 = &v168;
    switch(HIBYTE(v170))
    {
      case 4:
        if ((_DWORD)v168 != 1852990818)
          goto LABEL_295;
        goto LABEL_215;
      case 5:
        goto LABEL_209;
      case 8:
        goto LABEL_201;
      case 9:
        if (v168 == (_BYTE *)0x6C6C756F6E726542 && v169 == 105)
          goto LABEL_215;
        if (HIBYTE(v170) == 8)
        {
          v49 = &v168;
          goto LABEL_201;
        }
        if (HIBYTE(v170) != 5)
          goto LABEL_295;
LABEL_209:
        if ((_DWORD)v168 != 1937072487 || BYTE4(v168) != 115)
        {
LABEL_295:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v145, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-rbm.h", 146);
          v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v145, (uint64_t)"Wrong <HiddenType>", 18);
          if (v170 >= 0)
            v132 = &v168;
          else
            v132 = (_BYTE **)v168;
          if (v170 >= 0)
            v133 = HIBYTE(v170);
          else
            v133 = v169;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)v132, v133);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v145);
        }
        return;
      default:
        goto LABEL_295;
    }
    goto LABEL_214;
  }
  v50 = v169;
  if (v169 != 4 || *(_DWORD *)v168 != 1852990818)
  {
    if (v169 != 9)
      goto LABEL_193;
    if (*(_QWORD *)v168 != 0x6C6C756F6E726542 || v168[8] != 105)
    {
      v50 = v169;
LABEL_193:
      if (v50 == 5)
      {
        if (*(_DWORD *)v168 == 1937072487 && v168[4] == 115)
        {
LABEL_214:
          v55 = 1;
          goto LABEL_216;
        }
        v50 = v169;
      }
      if (v50 != 8)
        goto LABEL_295;
      v49 = v168;
LABEL_201:
      if (*v49 != 0x6E61697373756147)
        goto LABEL_295;
      goto LABEL_214;
    }
  }
LABEL_215:
  v55 = 0;
LABEL_216:
  a1[75] = v55;
  if (v164 >= 1)
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v164);
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v155, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)&v151, a1[3], a1[2], 0, 0);
  v59 = a1[3];
  if (v59 >= 1)
  {
    v60 = 0;
    LODWORD(v61) = a1[2];
    do
    {
      if ((int)v61 >= 1)
      {
        v62 = 0;
        do
        {
          v63 = *(float *)&v165;
          kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v155, 0, v56, v57, v58);
          if (v153 <= v60 || v62 >= v152)
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v58);
          *(float *)(v151 + 4 * v60 * v154 + 4 * v62++) = v63 * v64;
          v61 = (int)a1[2];
        }
        while ((uint64_t)v62 < v61);
        v59 = a1[3];
      }
      ++v60;
    }
    while (v60 < v59);
  }
  kaldi::CuMatrix<float>::operator=((uint64_t)(a1 + 18), (uint64_t)&v151);
  v66 = a1[3];
  v149 = 0;
  v150 = 0;
  v148 = 0;
  kaldi::Vector<float>::Resize((void **)&v148, v66, 0, v67, v68);
  if ((int)a1[3] < 1)
  {
    v75 = v149;
  }
  else
  {
    v72 = 0;
    do
    {
      v73 = *((float *)&v166 + 1);
      v74 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v69, v70, v71);
      v75 = v149;
      if (v72 >= v149)
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v71);
      v76 = v73 + (v74 + -0.5) * *(float *)&v166;
      v148[v72++] = v76;
    }
    while ((uint64_t)v72 < (int)a1[3]);
  }
  kaldi::CuVector<float>::Resize((uint64_t)(a1 + 38), v75, 1u, v70, v71);
  kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 38, (uint64_t)&v148, v77, v78, v79);
  if (SHIBYTE(v163) < 0)
  {
    if (v162)
      goto LABEL_237;
  }
  else if (HIBYTE(v163))
  {
LABEL_237:
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v145, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-rbm.h", 174);
      v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v145, (uint64_t)"Initializing from <VisibleBiasCmvnFilename> ", 44);
      if (v163 >= 0)
        v83 = (void **)&v161;
      else
        v83 = v161;
      if (v163 >= 0)
        v84 = HIBYTE(v163);
      else
        v84 = v162;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)v83, v84);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v145);
    }
    kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)&v145);
    kaldi::nnet1::Nnet::Read((uint64_t)&v145, (uint64_t)&v161);
    Component = (const void *)kaldi::nnet1::Nnet::GetComponent((kaldi::nnet1::Nnet *)&v145, 0, v85, v86, v87);
    if (!v89)
      __cxa_bad_cast();
    v93 = v89;
    v142 = 0;
    v143 = 0;
    v144 = 0;
    kaldi::Vector<float>::Init((void **)&v142, v89[26], v90, v91, v92);
    kaldi::CuVectorBase<float>::CopyToVec<float>(v93 + 22, (uint64_t)&v142, v94, v95, v96);
    kaldi::VectorBase<float>::Scale((uint64_t)&v142, -1.0);
    v140 = 0;
    v141 = 0;
    v139 = 0;
    kaldi::Vector<float>::Resize((void **)&v139, v143, 0, v97, v98);
    v101 = v143;
    if ((int)v143 <= 0)
    {
      v103 = v140;
    }
    else
    {
      v102 = v142;
      v103 = v140;
      v104 = v139;
      v105 = v140;
      do
      {
        v106 = *v102;
        if (v106 >= 0.0001)
          v107 = *v102;
        else
          v107 = 0.0001;
        if (v107 <= 0.9999)
          v108 = v107;
        else
          v108 = 0.9999;
        if (v106 < 0.0001 || v107 > 0.9999)
          *v102 = v108;
        if (!v105)
          kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v100);
        v109 = logf(v108);
        v110 = v109 - log(1.0 - v108);
        *v104++ = v110;
        --v105;
        ++v102;
        --v101;
      }
      while (v101);
    }
    kaldi::CuVector<float>::Resize((uint64_t)(a1 + 30), v103, 1u, v99, v100);
    kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 30, (uint64_t)&v139, v120, v121, v122);
    if (a1[34] != a1[2])
      kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-rbm.h", (const char *)0xBC, "vis_bias_.Dim() == InputDim()", v123);
    kaldi::Vector<float>::Destroy((uint64_t)&v139);
    kaldi::Vector<float>::Destroy((uint64_t)&v142);
    kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)&v145);
    goto LABEL_271;
  }
  v111 = a1[2];
  v146 = 0;
  v147 = 0;
  v145 = 0;
  kaldi::Vector<float>::Resize((void **)&v145, v111, 0, v80, v81);
  if ((int)a1[2] < 1)
  {
    v118 = v146;
  }
  else
  {
    v115 = 0;
    do
    {
      v116 = *((float *)&v167 + 1);
      v117 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v112, v113, v114);
      v118 = v146;
      if (v115 >= v146)
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v114);
      v119 = v116 + (v117 + -0.5) * *(float *)&v167;
      v145[v115++] = v119;
    }
    while ((uint64_t)v115 < (int)a1[2]);
  }
  v124 = a1 + 30;
  kaldi::CuVector<float>::Resize((uint64_t)v124, v118, 1u, v113, v114);
  kaldi::CuVectorBase<float>::CopyFromVec<float>(v124, (uint64_t)&v145, v125, v126, v127);
  kaldi::Vector<float>::Destroy((uint64_t)&v145);
LABEL_271:
  kaldi::Vector<float>::Destroy((uint64_t)&v148);
  kaldi::Matrix<float>::~Matrix((uint64_t)&v151);
  if (__p)
  {
    v158 = __p;
    operator delete(__p);
  }
  v145 = (float *)&v156;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v145);
  if (SHIBYTE(v160) < 0)
    operator delete((void *)v159);
  if (SHIBYTE(v163) < 0)
    operator delete(v161);
  if (SHIBYTE(v170) < 0)
    operator delete(v168);
  if (SHIBYTE(v173) < 0)
    operator delete(v171);
}

void sub_1DE43675C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)va1);
  kaldi::Vector<float>::Destroy((uint64_t)&v3);
  JUMPOUT(0x1DE436824);
}

void sub_1DE4367FC()
{
  uint64_t v0;

  kaldi::Vector<float>::Destroy(&v0);
  JUMPOUT(0x1DE436824);
}

void sub_1DE43681C()
{
  JUMPOUT(0x1DE436824);
}

void kaldi::nnet1::Rbm::WriteData(_DWORD *a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  int v8;
  char *v9;
  uint64_t v10;
  const char *v11;
  int v12;
  char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  _QWORD v18[34];

  v8 = a1[74];
  if (v8)
  {
    if (v8 != 1)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18, "WriteData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-rbm.h", 224);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Unknown type ", 13);
      std::ostream::operator<<();
      goto LABEL_12;
    }
    v9 = "gauss";
  }
  else
  {
    v9 = "bern";
  }
  kaldi::WriteToken(a2, a3, (kaldi *)v9, a4, a5);
  v12 = a1[75];
  if (!v12)
  {
    v13 = "bern";
    goto LABEL_9;
  }
  if (v12 != 1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18, "WriteData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-rbm.h", 229);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Unknown type ", 13);
    std::ostream::operator<<();
LABEL_12:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
  }
  v13 = "gauss";
LABEL_9:
  kaldi::WriteToken(a2, a3, (kaldi *)v13, v10, v11);
  kaldi::CuMatrixBase<float>::Write((uint64_t)(a1 + 18), a2, (int)a3, 0);
  kaldi::CuVectorBase<float>::Write(a1 + 30, a2, (int)a3, v14, v15);
  kaldi::CuVectorBase<float>::Write(a1 + 38, a2, (int)a3, v16, v17);
}

void kaldi::nnet1::Rbm::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;

  kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 152, a3, a4, a5, 1.0, 0.0);
  kaldi::CuMatrixBase<float>::AddMatMat(a3, a2, CblasNoTrans, a1 + 72, (const char *)0x70, 1.0, 1.0);
  if (!*(_DWORD *)(a1 + 300))
    kaldi::CuMatrixBase<float>::Sigmoid(a3, a3, v8, v9, v10);
}

void kaldi::nnet1::Rbm::ReadData(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v14;
  unsigned __int8 *p_p;
  int v16;
  int v17;
  int v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  int v25;
  int v26;
  const char *v27;
  uint64_t v28;
  void *__p;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;

  v32 = 0;
  v33 = 0;
  v34 = 0;
  __p = 0;
  v30 = 0;
  v31 = 0;
  kaldi::ReadToken(a2, a3, (uint64_t)&v32, a4, a5);
  kaldi::ReadToken(a2, a3, (uint64_t)&__p, v8, v9);
  if ((SHIBYTE(v34) & 0x80000000) == 0)
  {
    if (HIBYTE(v34) != 4)
    {
      if (HIBYTE(v34) != 5)
        goto LABEL_18;
      v10 = (unsigned __int8 *)&v32;
      goto LABEL_9;
    }
    if ((_DWORD)v32 != 1852990818)
      goto LABEL_18;
LABEL_16:
    v14 = 0;
    goto LABEL_17;
  }
  if (v33 == 4 && *(_DWORD *)v32 == 1852990818)
    goto LABEL_16;
  if (v33 != 5)
    goto LABEL_18;
  v10 = (unsigned __int8 *)v32;
LABEL_9:
  v11 = *(_DWORD *)v10;
  v12 = v10[4];
  if (v11 == 1937072487 && v12 == 115)
  {
    v14 = 1;
LABEL_17:
    a1[74] = v14;
  }
LABEL_18:
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
    if (HIBYTE(v31) != 4)
    {
      if (HIBYTE(v31) != 5)
        goto LABEL_35;
      p_p = (unsigned __int8 *)&__p;
      goto LABEL_26;
    }
    if ((_DWORD)__p != 1852990818)
      goto LABEL_35;
LABEL_33:
    v19 = 0;
    goto LABEL_34;
  }
  if (v30 == 4 && *(_DWORD *)__p == 1852990818)
    goto LABEL_33;
  if (v30 != 5)
    goto LABEL_35;
  p_p = (unsigned __int8 *)__p;
LABEL_26:
  v16 = *(_DWORD *)p_p;
  v17 = p_p[4];
  if (v16 == 1937072487 && v17 == 115)
  {
    v19 = 1;
LABEL_34:
    a1[75] = v19;
  }
LABEL_35:
  kaldi::CuMatrix<float>::Read((uint64_t)(a1 + 18), a2, a3, 0);
  kaldi::CuVector<float>::Read((uint64_t)(a1 + 30), a2, a3, v20, v21);
  kaldi::CuVector<float>::Read((uint64_t)(a1 + 38), a2, a3, v22, v23);
  v25 = a1[23];
  if (v25 != a1[3])
  {
    v27 = "vis_hid_.NumRows() == output_dim_";
    v28 = 214;
    goto LABEL_48;
  }
  v26 = a1[22];
  if (v26 != a1[2])
  {
    v27 = "vis_hid_.NumCols() == input_dim_";
    v28 = 215;
    goto LABEL_48;
  }
  if (a1[34] != v26)
  {
    v27 = "vis_bias_.Dim() == input_dim_";
    v28 = 216;
    goto LABEL_48;
  }
  if (a1[42] != v25)
  {
    v27 = "hid_bias_.Dim() == output_dim_";
    v28 = 217;
LABEL_48:
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-rbm.h", (const char *)v28, v27, v24);
  }
  if (SHIBYTE(v31) < 0)
    operator delete(__p);
  if (SHIBYTE(v34) < 0)
    operator delete(v32);
}

void sub_1DE436CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Rbm::Reconstruct(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  _QWORD *v13;
  _QWORD v14[34];

  if (a1[3] != *(_DWORD *)(a2 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14, "Reconstruct", "../engine/common/libquasar/libkaldi/src/nnet/nnet-rbm.h", 253);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Nonmatching dims, component:", 28);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" data:", 6);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  v8 = a1[2];
  v9 = *(unsigned int *)(a2 + 20);
  if (__PAIR64__(v9, v8) != *(_QWORD *)(a3 + 16))
    kaldi::CuMatrix<float>::Resize(a3, v9, v8, 0, 0);
  kaldi::CuMatrixBase<float>::AddVecToRows(a3, (uint64_t)(a1 + 30), v8, a4, a5, 1.0, 0.0);
  kaldi::CuMatrixBase<float>::AddMatMat(a3, a2, CblasNoTrans, (uint64_t)(a1 + 18), (const char *)0x6F, 1.0, 1.0);
  if (!a1[74])
    kaldi::CuMatrixBase<float>::Sigmoid(a3, a3, v10, v11, v12);
}

void kaldi::nnet1::Rbm::RbmUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  BOOL v7;
  int v10;
  int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  float v39;
  float v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  _QWORD v74[34];

  v5 = *(_DWORD *)(a2 + 20);
  v7 = v5 == *(_DWORD *)(a3 + 20) && v5 == *(_DWORD *)(a4 + 20) && v5 == *(_DWORD *)(a5 + 20);
  if (!v7
    || (v10 = *(_DWORD *)(a2 + 16), v10 != *(_DWORD *)(a4 + 16))
    || (v13 = *(_DWORD *)(a3 + 16), v13 != *(_DWORD *)(a5 + 16))
    || v10 != *(_DWORD *)(a1 + 8)
    || v13 != *(_DWORD *)(a1 + 12))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"RbmUpdate", "../engine/common/libquasar/libkaldi/src/nnet/nnet-rbm.h", (const char *)0x118, "pos_vis.NumRows() == pos_hid.NumRows() && pos_vis.NumRows() == neg_vis.NumRows() && pos_vis.NumRows() == neg_hid.NumRows() && pos_vis.NumCols() == neg_vis.NumCols() && pos_hid.NumCols() == neg_hid.NumCols() && pos_vis.NumCols() == input_dim_ && pos_hid.NumCols() == output_dim_", (const char *)a5);
  }
  v15 = *(unsigned int *)(a1 + 92);
  if (*(_DWORD *)(a1 + 204) == (_DWORD)v15)
  {
    v16 = *(unsigned int *)(a1 + 88);
    if (*(_DWORD *)(a1 + 200) == (_DWORD)v16)
    {
      if (*(_DWORD *)(a1 + 248) == *(_DWORD *)(a1 + 136))
      {
        v16 = *(unsigned int *)(a1 + 200);
        if (*(_DWORD *)(a1 + 280) == *(_DWORD *)(a1 + 168))
          goto LABEL_20;
      }
      else
      {
        v16 = *(unsigned int *)(a1 + 200);
      }
    }
  }
  else
  {
    v16 = *(unsigned int *)(a1 + 88);
  }
  kaldi::CuMatrix<float>::Resize(a1 + 184, v15, v16, 0, 0);
  kaldi::CuVector<float>::Resize(a1 + 232, *(unsigned int *)(a1 + 136), 0, v17, v18);
  kaldi::CuVector<float>::Resize(a1 + 264, *(unsigned int *)(a1 + 168), 0, v19, v20);
LABEL_20:
  if (*(_DWORD *)(a1 + 296) == 1
    && (kaldi::nnet1::CheckNanInf<float>(a2, "pos_vis", v16, a4, (const char *)a5),
        kaldi::nnet1::CheckNanInf<float>(a3, "pos_hid", v21, v22, v23),
        kaldi::nnet1::CheckNanInf<float>(a4, "neg_vis", v24, v25, v26),
        kaldi::nnet1::CheckNanInf<float>(a5, "pos_hid", v27, v28, v29),
        v34 = kaldi::nnet1::ComputeStdDev<float>(a2, v30, v31, v32, v33),
        v39 = kaldi::nnet1::ComputeStdDev<float>(a4, v35, v36, v37, v38),
        (float)(v34 + v34) < v39))
  {
    kaldi::CuMatrixBase<float>::Scale(a1 + 72, v34 / v39);
    kaldi::CuVectorBase<float>::Scale(a1 + 120, v34 / v39);
    kaldi::CuVectorBase<float>::Scale(a1 + 152, v34 / v39);
    v40 = *(float *)(a1 + 48) * 0.9;
    *(float *)(a1 + 48) = v40;
    kaldi::CuMatrixBase<float>::SetZero(a1 + 184);
    kaldi::CuVectorBase<float>::SetZero(a1 + 232);
    kaldi::CuVectorBase<float>::SetZero(a1 + 264);
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v74, "RbmUpdate", "../engine/common/libquasar/libkaldi/src/nnet/nnet-rbm.h", 337);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Mismatch between pos_vis and neg_vis variances, ", 48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"danger of weight explosion. a) Reducing weights with scale ", 59);
      v42 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" b) Lowering learning rate to ", 30);
      v43 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" [pos_vis_std:", 14);
      v44 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)",neg_vis_std:", 13);
      v45 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"]", 1);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v74);
    }
  }
  else
  {
    v47 = *(float *)(a1 + 48);
    v46 = *(float *)(a1 + 52);
    v48 = *(float *)(a1 + 68);
    v49 = (float)*(int *)(a2 + 20);
    v50 = (float)-v47 / v49;
    kaldi::CuMatrixBase<float>::AddMatMat(a1 + 184, a5, CblasTrans, a4, (const char *)0x6F, v50, v46);
    v51 = v47 / v49;
    kaldi::CuMatrixBase<float>::AddMatMat(a1 + 184, a3, CblasTrans, a2, (const char *)0x6F, v51, 1.0);
    kaldi::CuMatrixBase<float>::AddMat(a1 + 184, a1 + 72, 111, v52, v53, -(float)(v47 * v48), 1.0);
    kaldi::CuMatrixBase<float>::AddMat(a1 + 72, a1 + 184, 111, v54, v55, 1.0, 1.0);
    kaldi::CuVectorBase<float>::AddRowSumMat(a1 + 232, a4, v50, v46, v56, v57, v58);
    kaldi::CuVectorBase<float>::AddRowSumMat(a1 + 232, a2, v51, 1.0, v59, v60, v61);
    kaldi::CuVectorBase<float>::AddVec(a1 + 120, a1 + 232, v62, v63, v64, 1.0, 1.0);
    kaldi::CuVectorBase<float>::AddRowSumMat(a1 + 264, a5, v50, v46, v65, v66, v67);
    kaldi::CuVectorBase<float>::AddRowSumMat(a1 + 264, a3, v51, 1.0, v68, v69, v70);
    kaldi::CuVectorBase<float>::AddVec(a1 + 152, a1 + 264, v71, v72, v73, 1.0, 1.0);
  }
}

void sub_1DE437250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Rbm::VisType(kaldi::nnet1::Rbm *this)
{
  return *((unsigned int *)this + 74);
}

uint64_t kaldi::nnet1::Rbm::HidType(kaldi::nnet1::Rbm *this)
{
  return *((unsigned int *)this + 75);
}

_QWORD *kaldi::nnet1::Rbm::WriteAsNnet(_DWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  _QWORD *result;
  uint64_t v11;
  const char *v12;
  std::string __p;

  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)0x101, &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p, v6, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteBasicType<int>(a2, a3);
  if ((a3 & 1) == 0)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
  kaldi::CuMatrixBase<float>::Write((uint64_t)(a1 + 18), a2, a3, 0);
  kaldi::CuVectorBase<float>::Write(a1 + 38, a2, a3, v8, v9);
  result = (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 200))(a1);
  if ((_DWORD)result)
  {
    if ((a3 & 1) != 0)
      return result;
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
  }
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)0x204, &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p, v11, v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteBasicType<int>(a2, a3);
  result = (_QWORD *)kaldi::WriteBasicType<int>(a2, a3);
  if ((a3 & 1) == 0)
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
  return result;
}

void sub_1DE4373B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::BlockSoftmax *kaldi::nnet1::MultiSoftmax::Copy(kaldi::nnet1::MultiSoftmax *this)
{
  kaldi::nnet1::BlockSoftmax *v2;

  v2 = (kaldi::nnet1::BlockSoftmax *)operator new();
  kaldi::nnet1::BlockSoftmax::BlockSoftmax(v2, this);
  *(_QWORD *)v2 = &off_1EA926860;
  return v2;
}

void sub_1DE437424(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1091C4033AB46EFLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MultiSoftmax::GetType(kaldi::nnet1::MultiSoftmax *this)
{
  return 522;
}

void kaldi::nnet1::MultiSoftmax::InitData(std::vector<int> *this, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t *v7;
  std::vector<int> *v8;
  void **v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD v15[34];
  void **v16;
  uint64_t v17;
  uint64_t v18;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  v7 = a2 + 4;
  v8 = this + 2;
  while ((*((_BYTE *)v7 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v16, a4, a5);
    if (SHIBYTE(v18) < 0)
    {
      if (v17 != 8)
        goto LABEL_13;
      v9 = v16;
    }
    else
    {
      if (SHIBYTE(v18) != 8)
        goto LABEL_13;
      v9 = (void **)&v16;
    }
    if (*v9 != (void *)0x3E736D6944534D3CLL)
    {
LABEL_13:
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-multisoftmax-component.h", 38);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Unknown token ", 14);
      if (v18 >= 0)
        v11 = (void **)&v16;
      else
        v11 = v16;
      if (v18 >= 0)
        v12 = HIBYTE(v18);
      else
        v12 = v17;
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", a typo in config?", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" (MSDims)", 9);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
    }
    kaldi::ReadIntegerVector<int>(a2, 0, v8, 0, 0, 0, 0);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  kaldi::nnet1::BlockSoftmax::InitOffset(this);
  if (SHIBYTE(v18) < 0)
    operator delete(v16);
}

void sub_1DE4375D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 49) < 0)
    operator delete(*(void **)(v1 - 72));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Recurrent::HistoryStateSize(kaldi::nnet1::Recurrent *this)
{
  return *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12);
}

void kaldi::nnet1::Recurrent::ResetHistoryState(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD v16[4];

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4)
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)0xDB, "batch_idx >= 0 && batch_idx < ropts_.num_subbatches", v8);
  v9 = a2[1];
  v10 = *(_QWORD *)(a1 + 8) + 48 * a4;
  if (v9 != *(_DWORD *)(v10 + 20))
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)0xDC, "sequence_idx.size() == history_state_[batch_idx].NumRows()", v8);
  *(_QWORD *)(v10 + 32) = a3;
  if (v9)
  {
    for (i = 0; i < v9; ++i)
    {
      if (((*(_QWORD *)(*a2 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v12 = *(_QWORD *)(a1 + 8) + 48 * a4;
        if (i >= *(unsigned int *)(v12 + 20))
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v8);
        v13 = *(_QWORD *)(v12 + 8) + 4 * *(_DWORD *)(v12 + 24) * (int)i;
        v14 = *(_DWORD *)(v12 + 16);
        v15 = *(_QWORD *)(v12 + 32);
        v16[0] = &unk_1EA926538;
        v16[1] = v13;
        v16[3] = v15;
        v16[2] = v14;
        kaldi::CuVectorBase<float>::SetZero((uint64_t)v16);
        v9 = a2[1];
      }
    }
  }
}

void kaldi::nnet1::Recurrent::ResetHistoryState(kaldi::nnet1::Recurrent *this)
{
  uint64_t i;

  (*(void (**)(kaldi::nnet1::Recurrent *))(*(_QWORD *)this + 88))(this);
  for (i = *((_QWORD *)this + 1); i != *((_QWORD *)this + 2); i += 48)
    kaldi::CuMatrixBase<float>::SetZero(i);
}

unsigned int *kaldi::nnet1::Recurrent::GetHistoryState(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;

  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3)
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)0xEC, "batch_idx >= 0 && batch_idx < ropts_.num_subbatches", a5);
  v8 = *(_QWORD *)(a1 + 8) + 48 * a3;
  kaldi::CuMatrix<float>::Resize((uint64_t)a2, *(unsigned int *)(v8 + 20), *(unsigned int *)(v8 + 16), 1u, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, *(_QWORD *)(a1 + 8) + 48 * a3, 111, v9, v10);
}

_DWORD *kaldi::nnet1::Recurrent::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD v18[4];

  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (int)a4)
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)0xF2, "batch_idx >= 0 && batch_idx < ropts_.num_subbatches", a5);
  if ((a3 & 0x80000000) != 0
    || (v7 = *(_QWORD *)(a1 + 8) + 48 * a4, *(_DWORD *)(v7 + 20) <= (signed int)a3))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)0xF3, "sequence_idx >= 0 && sequence_idx < history_state_[batch_idx].NumRows()", a5);
  }
  v9 = a4;
  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(v7 + 16), 1u, a4, a5);
  v13 = *(_QWORD *)(a1 + 8) + 48 * v9;
  if (*(_DWORD *)(v13 + 20) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v12);
  v14 = *(_QWORD *)(v13 + 8) + 4 * (int)(*(_DWORD *)(v13 + 24) * a3);
  v15 = *(_DWORD *)(v13 + 16);
  v16 = *(_QWORD *)(v13 + 32);
  v18[0] = &unk_1EA926538;
  v18[1] = v14;
  v18[3] = v16;
  v18[2] = v15;
  return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v18, v10, v11, v12);
}

unsigned int *kaldi::nnet1::Recurrent::SetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  const char *v7;
  unsigned int *v8;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3)
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)0xFA, "batch_idx >= 0 && batch_idx < ropts_.num_subbatches", v7);
  v8 = (unsigned int *)(*(_QWORD *)(a1 + 8) + 48 * a3);
  if (*(_DWORD *)(a2 + 20) != v8[5])
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)0xFB, "history.NumRows() == history_state_[batch_idx].NumRows()", v7);
  if (*(_DWORD *)(a2 + 16) != v8[4])
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)0xFC, "history.NumCols() == history_state_[batch_idx].NumCols()", v7);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v8, a2, 111, v6, v7);
}

_DWORD *kaldi::nnet1::Recurrent::SetHistoryState(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4)
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)0x102, "batch_idx >= 0 && batch_idx < ropts_.num_subbatches", v10);
  if (a3 < 0 || (v11 = *(_QWORD *)(a1 + 8) + 48 * a4, *(_DWORD *)(v11 + 20) <= a3))
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)0x103, "sequence_idx >= 0 && sequence_idx < history_state_[batch_idx].NumRows()", v10);
  v12 = *(_DWORD *)(a2 + 16);
  if (v12 != *(_DWORD *)(v11 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)0x104, "history.Dim() == history_state_[batch_idx].NumCols()", v10);
  v13 = *(_QWORD *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * a3;
  v14 = *(_QWORD *)(v11 + 32);
  v16[0] = &unk_1EA926538;
  v16[1] = v13;
  v16[3] = v14;
  v16[2] = v12;
  return kaldi::CuVectorBase<float>::CopyFromVec(v16, a2, v8, v9, v10);
}

void kaldi::nnet1::Recurrent::EnsureBuffers(kaldi::nnet1::Recurrent *this)
{
  int v2;
  int v3;
  std::vector<int>::size_type v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD v10[34];

  if (!*((_BYTE *)this + 388))
  {
    if (*(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8) != *(_DWORD *)((char *)this
                                                                                          + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                                          + 12))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "EnsureBuffers", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", 602);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"this implementation only models the strict recurrent component, i.e, it requests the input ", 91);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"and output dimensions be the same,  you set input/out dimension to ", 67);
      v9 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" and ", 5);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
    v2 = *((_DWORD *)this + 20);
    if (v2 > 1)
      v3 = v2 + 1;
    else
      v3 = 1;
    v4 = v3;
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 1, v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 42, v3);
    if (v3 >= 1)
    {
      v5 = 0;
      v6 = (*((_DWORD *)this + 24) + *((_DWORD *)this + 24) * *((_DWORD *)this + 25));
      v7 = (char *)this + 12;
      do
      {
        kaldi::CuMatrix<float>::Resize(*((_QWORD *)this + 1) + v5, *((unsigned int *)this + 24), *(unsigned int *)&v7[*(_QWORD *)(*(_QWORD *)this - 24)], 0, 0);
        kaldi::CuMatrix<float>::Resize(*((_QWORD *)this + 42) + v5, v6, *(unsigned int *)&v7[*(_QWORD *)(*(_QWORD *)this - 24)], 0, 0);
        v5 += 48;
      }
      while (48 * v4 != v5);
    }
    std::vector<int>::resize((std::vector<int> *)this + 17, v4);
    *((_BYTE *)this + 388) = 1;
  }
}

_DWORD *kaldi::nnet1::Recurrent::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  const char *v12;

  v7 = (_QWORD *)(a1 + 480);
  v8 = *(_QWORD *)(a1 + 480);
  if (v8 == *(_QWORD *)(a1 + 488))
  {
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 480), *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 504), *(int *)(a1 + 80));
    v8 = *(_QWORD *)(a1 + 480);
  }
  kaldi::CuVector<float>::Resize(v8 + 32 * a3, *(unsigned int *)(a2 + 16), 1u, a4, a5);
  return kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)(*v7 + 32 * a3), a2, v10, v11, v12);
}

void kaldi::nnet1::Recurrent::SetTrainOptions(kaldi::nnet1::Recurrent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(this, a2);
  *((_WORD *)this + 194) = 0;
}

uint64_t kaldi::nnet1::Recurrent::Copy(kaldi::nnet1::Recurrent *this)
{
  kaldi::nnet1::Recurrent *v2;

  v2 = (kaldi::nnet1::Recurrent *)operator new();
  kaldi::nnet1::Recurrent::Recurrent(v2, this);
  return (uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_1DE437DDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C408B51CE60);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Recurrent::GetType(kaldi::nnet1::Recurrent *this)
{
  return 273;
}

void kaldi::nnet1::Recurrent::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  void *v11;
  BOOL v15;
  float *v16;
  BOOL v19;
  BOOL v20;
  BOOL v22;
  void **v25;
  BOOL v27;
  void *v28;
  void *v29;
  uint64_t v30;
  std::string *v33;
  BOOL v35;
  BOOL v36;
  BOOL v40;
  int inited;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  float v52;
  float v53;
  char *v54;
  float v55;
  float v56;
  float v57;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  unint64_t v66;
  float v67;
  float v68;
  uint64_t v69;
  float v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  _QWORD *v75;
  void **v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  float *v80;
  uint64_t v81;
  uint64_t v82;
  void **v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  _QWORD v87[2];
  uint64_t v88;
  void *__p;
  void *v90;
  void *v91[3];
  int v92;
  std::string v93;
  std::string v94;
  std::string v95;
  int v96;
  float v97;
  int v98;

  v97 = 2.0;
  v98 = -1073741824;
  v96 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v95);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &v94);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 384), &v93);
  v92 = -1;
  memset(v91, 0, sizeof(v91));
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_152;
    kaldi::ReadToken(a2, 0, (uint64_t)v91, v6, v7);
    if ((SHIBYTE(v91[2]) & 0x80000000) == 0)
      break;
    v11 = v91[1];
    if (v91[1] == (void *)10)
    {
      if (*(_QWORD *)v91[0] == 0x61654D736169423CLL && *((_WORD *)v91[0] + 4) == 15982)
      {
LABEL_79:
        v16 = (float *)&v98;
LABEL_146:
        kaldi::ReadBasicType<float>(a2, 0, v16, v8, v9);
        goto LABEL_150;
      }
      v11 = v91[1];
    }
    else if (v91[1] == (void *)13
           && *(_QWORD *)v91[0] == 0x74536D617261503CLL
           && *(_QWORD *)((char *)v91[0] + 5) == 0x3E7665646474536DLL)
    {
LABEL_120:
      v16 = (float *)&v96;
      goto LABEL_146;
    }
    if (v11 == (void *)11)
    {
      if (*(_QWORD *)v91[0] == 0x6E6152736169423CLL && *(_QWORD *)((char *)v91[0] + 3) == 0x3E65676E61527361)
      {
LABEL_114:
        v16 = &v97;
        goto LABEL_146;
      }
      v11 = v91[1];
    }
    if (v11 == (void *)9)
    {
      v15 = *(_QWORD *)v91[0] == 0x6D726F4E78614D3CLL && *((_BYTE *)v91[0] + 8) == 62;
      v16 = (float *)(a1 + 400);
      if (v15)
        goto LABEL_146;
      v11 = v91[1];
    }
    if (v11 == (void *)18)
    {
      if (*(_QWORD *)v91[0] == 0x6E6569646172473CLL
        && *((_QWORD *)v91[0] + 1) == 0x7079546D726F4E74
        && *((_WORD *)v91[0] + 8) == 15973)
      {
LABEL_147:
        v33 = &v94;
        goto LABEL_149;
      }
      v11 = v91[1];
    }
    if (v11 == (void *)9)
    {
      v19 = *(_QWORD *)v91[0] == 0x6461724778614D3CLL && *((_BYTE *)v91[0] + 8) == 62;
      v16 = (float *)(a1 + 152);
      if (v19)
        goto LABEL_146;
      v11 = v91[1];
    }
    if (v11 == (void *)15)
    {
      v20 = *(_QWORD *)v91[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v91[0] + 7) == 0x3E66656F43657461;
      v16 = (float *)(a1 + 392);
      if (v20)
        goto LABEL_146;
      v11 = v91[1];
    }
    if (v11 == (void *)19)
    {
      v22 = *(_QWORD *)v91[0] == 0x61654C736169423CLL
         && *((_QWORD *)v91[0] + 1) == 0x6F43657461526E72
         && *(_QWORD *)((char *)v91[0] + 11) == 0x3E66656F43657461;
      v16 = (float *)(a1 + 396);
      if (v22)
        goto LABEL_146;
      v11 = v91[1];
    }
    if (v11 != (void *)14)
      goto LABEL_71;
    if (*(_QWORD *)v91[0] != 0x656E696C6E6F4E3CLL || *(_QWORD *)((char *)v91[0] + 6) != 0x3E7974697261656ELL)
    {
      v11 = v91[1];
LABEL_71:
      if (v11 == (void *)12)
      {
        if (*(_QWORD *)v91[0] == 0x536D6F646E61523CLL && *((_DWORD *)v91[0] + 2) == 1046766949)
          goto LABEL_145;
        v11 = v91[1];
      }
      if (v11 != (void *)19)
        goto LABEL_151;
      v25 = (void **)v91[0];
LABEL_90:
      v28 = *v25;
      v29 = v25[1];
      v30 = *(uint64_t *)((char *)v25 + 11);
      if (v28 != (void *)0x61725474696E493CLL || v29 != (void *)0x79546D726F66736ELL || v30 != 0x3E657079546D726FLL)
        goto LABEL_151;
      v33 = &v95;
      goto LABEL_149;
    }
LABEL_148:
    v33 = &v93;
LABEL_149:
    kaldi::ReadToken(a2, 0, (uint64_t)v33, v8, v9);
LABEL_150:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  switch(HIBYTE(v91[2]))
  {
    case 9:
      goto LABEL_104;
    case 0xA:
      if (v91[0] == (void *)0x61654D736169423CLL && LOWORD(v91[1]) == 15982)
        goto LABEL_79;
      goto LABEL_103;
    case 0xB:
      if (v91[0] == (void *)0x6E6152736169423CLL && *(void **)((char *)v91 + 3) == (void *)0x3E65676E61527361)
        goto LABEL_114;
LABEL_103:
      if (HIBYTE(v91[2]) != 9)
        goto LABEL_151;
LABEL_104:
      v35 = v91[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v91[1]) == 62;
      v16 = (float *)(a1 + 400);
      if (v35)
        goto LABEL_146;
      if (HIBYTE(v91[2]) != 9)
        goto LABEL_151;
LABEL_109:
      v36 = v91[0] == (void *)0x6461724778614D3CLL && LOBYTE(v91[1]) == 62;
      v16 = (float *)(a1 + 152);
      if (!v36)
        goto LABEL_151;
      goto LABEL_146;
    case 0xC:
      goto LABEL_140;
    case 0xD:
      if (v91[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v91 + 5) != (void *)0x3E7665646474536DLL)
        goto LABEL_151;
      goto LABEL_120;
    case 0xE:
      goto LABEL_135;
    case 0xF:
LABEL_129:
      v40 = v91[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v91 + 7) == (void *)0x3E66656F43657461;
      v16 = (float *)(a1 + 392);
      if (v40)
        goto LABEL_146;
      if (HIBYTE(v91[2]) != 12)
        goto LABEL_134;
      goto LABEL_140;
    case 0x12:
      if (v91[0] != (void *)0x6E6569646172473CLL || v91[1] != (void *)0x7079546D726F4E74 || LOWORD(v91[2]) != 15973)
      {
        switch(HIBYTE(v91[2]))
        {
          case 9:
            goto LABEL_109;
          case 0xC:
            goto LABEL_140;
          case 0xE:
            goto LABEL_135;
          case 0xF:
            goto LABEL_129;
          default:
            goto LABEL_151;
        }
      }
      goto LABEL_147;
    case 0x13:
      v27 = v91[0] == (void *)0x61654C736169423CLL
         && v91[1] == (void *)0x6F43657461526E72
         && *(void **)((char *)&v91[1] + 3) == (void *)0x3E66656F43657461;
      v16 = (float *)(a1 + 396);
      if (v27)
        goto LABEL_146;
      if (HIBYTE(v91[2]) == 12)
        goto LABEL_140;
      if (HIBYTE(v91[2]) == 19)
      {
        v25 = v91;
        goto LABEL_90;
      }
LABEL_134:
      if (HIBYTE(v91[2]) != 14)
        goto LABEL_151;
LABEL_135:
      if (v91[0] == (void *)0x656E696C6E6F4E3CLL && *(void **)((char *)v91 + 6) == (void *)0x3E7974697261656ELL)
        goto LABEL_148;
      if (HIBYTE(v91[2]) != 12)
        goto LABEL_151;
LABEL_140:
      if (v91[0] == (void *)0x536D6F646E61523CLL && LODWORD(v91[1]) == 1046766949)
      {
LABEL_145:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v92, v8, v9);
        goto LABEL_150;
      }
LABEL_151:
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v91, "</Component>"))
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v87, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", 79);
        v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"Unknown token ", 14);
        if (SHIBYTE(v91[2]) >= 0)
          v76 = v91;
        else
          v76 = (void **)v91[0];
        if (SHIBYTE(v91[2]) >= 0)
          v77 = HIBYTE(v91[2]);
        else
          v77 = (uint64_t)v91[1];
        v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)v76, v77);
        v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)", a typo in config?", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)" (Nonlinearity|ParamStddev|BiasMean|BiasRange|LearnRateCoef|BiasLearnRateCoef|MaxNorm|RandomSeed|MaxGrad|InitTransformType|GradientNormType)", 140);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v87);
      }
LABEL_152:
      *(_DWORD *)(a1 + 384) = kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v93);
      inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v95);
      *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v94);
      if (v92 >= 1)
        kaldi::UniformRandomNumber::SetRandomSeeds(a3, v92);
      kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v87, a3);
      kaldi::Matrix<float>::Matrix((uint64_t)&v83, *(unsigned int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12), *(unsigned int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8), 0, 0);
      v47 = a1 + 12;
      v48 = *(_QWORD *)(*(_QWORD *)a1 - 24);
      if (*(int *)(a1 + 12 + v48) >= 1)
      {
        v49 = 0;
        v50 = a1 + 8;
        while (*(int *)(v50 + v48) < 1)
        {
LABEL_178:
          if ((uint64_t)++v49 >= *(int *)(v47 + v48))
            goto LABEL_179;
        }
        v51 = 0;
        while (2)
        {
          if (inited)
          {
            if (inited != 2)
            {
              if (inited == 1)
              {
                v52 = *(float *)&v96;
                v53 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v44, v45, v46);
                if (v49 >= v85 || v51 >= v84)
                  goto LABEL_196;
                v54 = (char *)v83 + 4 * (int)v49 * v86;
                v55 = (v53 + -0.5) * (float)(v52 + v52);
                break;
              }
LABEL_177:
              ++v51;
              v48 = *(_QWORD *)(*(_QWORD *)a1 - 24);
              if ((uint64_t)v51 >= *(int *)(v50 + v48))
                goto LABEL_178;
              continue;
            }
            v56 = *(float *)&v96;
            kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v87, 0, v44, v45, v46);
            if (v49 >= v85 || v51 >= v84)
              goto LABEL_196;
            v54 = (char *)v83 + 4 * (int)v49 * v86;
            v55 = v56 * v57;
          }
          else
          {
            if (v49 >= v85 || v51 >= v84)
LABEL_196:
              kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v46);
            v54 = (char *)v83 + 4 * (int)v49 * v86;
            if (v49 == v51)
              v55 = 1.0;
            else
              v55 = 0.0;
          }
          break;
        }
        *(float *)&v54[4 * v51] = v55;
        goto LABEL_177;
      }
LABEL_179:
      kaldi::CuMatrix<float>::operator=(a1 + 160, (uint64_t)&v83);
      v60 = *(unsigned int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
      v81 = 0;
      v82 = 0;
      v80 = 0;
      kaldi::Vector<float>::Resize((void **)&v80, v60, 0, v61, v62);
      if (*(int *)(v47 + *(_QWORD *)(*(_QWORD *)a1 - 24)) < 1)
      {
        v69 = v81;
      }
      else
      {
        v66 = 0;
        do
        {
          v67 = *(float *)&v98;
          v68 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v63, v64, v65);
          v69 = v81;
          if (v66 >= v81)
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v65);
          v70 = v67 + (v68 + -0.5) * v97;
          v80[v66++] = v70;
        }
        while ((uint64_t)v66 < *(int *)(v47 + *(_QWORD *)(*(_QWORD *)a1 - 24)));
      }
      v71 = (_DWORD *)(a1 + 208);
      kaldi::CuVector<float>::Resize((uint64_t)v71, v69, 1u, v64, v65);
      kaldi::CuVectorBase<float>::CopyFromVec<float>(v71, (uint64_t)&v80, v72, v73, v74);
      kaldi::Vector<float>::Destroy((uint64_t)&v80);
      kaldi::Matrix<float>::~Matrix((uint64_t)&v83);
      if (__p)
      {
        v90 = __p;
        operator delete(__p);
      }
      v83 = (void **)&v88;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v83);
      if (SHIBYTE(v91[2]) < 0)
        operator delete(v91[0]);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v94.__r_.__value_.__l.__data_);
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v95.__r_.__value_.__l.__data_);
      return;
    default:
      goto LABEL_151;
  }
}

void sub_1DE4388A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  if (*(char *)(v19 - 217) < 0)
    operator delete(*(void **)(v19 - 240));
  if (*(char *)(v19 - 185) < 0)
    operator delete(*(void **)(v19 - 208));
  if (*(char *)(v19 - 161) < 0)
    operator delete(*(void **)(v19 - 184));
  if (*(char *)(v19 - 137) < 0)
    operator delete(*(void **)(v19 - 160));
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Recurrent::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  void *v12;
  BOOL v13;
  float *v14;
  BOOL v16;
  BOOL v18;
  void **v21;
  BOOL v23;
  BOOL v24;
  void *v27;
  int v28;
  BOOL v29;
  BOOL v30;
  uint64_t v31;
  const char *v32;
  const char *v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  void **v37;
  uint64_t v38;
  void *__p;
  uint64_t v41;
  uint64_t v42;
  void *v43[4];

  while (kaldi::Peek(a2, a3) == 60)
  {
    memset(v43, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v43, v7, v8);
    if ((SHIBYTE(v43[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v43[2]))
      {
        case 9:
          goto LABEL_58;
        case 0xE:
          goto LABEL_4;
        case 0xF:
          v30 = v43[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v43 + 7) == (void *)0x3E66656F43657461;
          v14 = (float *)(a1 + 392);
          if (!v30)
            goto LABEL_96;
          goto LABEL_83;
        case 0x12:
          goto LABEL_64;
        case 0x13:
          v23 = v43[0] == (void *)0x61654C736169423CLL
             && v43[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v43[1] + 3) == (void *)0x3E66656F43657461;
          v14 = (float *)(a1 + 396);
          if (v23)
            goto LABEL_83;
          switch(HIBYTE(v43[2]))
          {
            case 9u:
              goto LABEL_58;
            case 0x12u:
LABEL_64:
              if (v43[0] == (void *)0x6E6569646172473CLL
                && v43[1] == (void *)0x7079546D726F4E74
                && LOWORD(v43[2]) == 15973)
              {
                goto LABEL_89;
              }
              break;
            case 0xEu:
LABEL_4:
              if (v43[0] == (void *)0x656E696C6E6F4E3CLL && *(void **)((char *)v43 + 6) == (void *)0x3E7974697261656ELL)
                goto LABEL_88;
              if (HIBYTE(v43[2]) != 9)
                goto LABEL_96;
LABEL_58:
              v24 = v43[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v43[1]) == 62;
              v14 = (float *)(a1 + 400);
              if (v24)
                goto LABEL_83;
              break;
            default:
              goto LABEL_96;
          }
          if (HIBYTE(v43[2]) != 9)
            goto LABEL_96;
          v21 = v43;
          break;
        default:
          goto LABEL_96;
      }
      goto LABEL_73;
    }
    v12 = v43[1];
    if (v43[1] != (void *)15
      || (*(_QWORD *)v43[0] == 0x61526E7261654C3CLL
        ? (v13 = *(_QWORD *)((char *)v43[0] + 7) == 0x3E66656F43657461)
        : (v13 = 0),
          v14 = (float *)(a1 + 392),
          !v13))
    {
      if (v43[1] == (void *)19)
      {
        v16 = *(_QWORD *)v43[0] == 0x61654C736169423CLL
           && *((_QWORD *)v43[0] + 1) == 0x6F43657461526E72
           && *(_QWORD *)((char *)v43[0] + 11) == 0x3E66656F43657461;
        v14 = (float *)(a1 + 396);
        if (v16)
          goto LABEL_83;
        v12 = v43[1];
      }
      if (v12 == (void *)14)
      {
        if (*(_QWORD *)v43[0] == 0x656E696C6E6F4E3CLL && *(_QWORD *)((char *)v43[0] + 6) == 0x3E7974697261656ELL)
        {
LABEL_88:
          __p = 0;
          v41 = 0;
          v42 = 0;
          kaldi::ReadToken(a2, a3, (uint64_t)&__p, v9, v10);
          *(_DWORD *)(a1 + 384) = kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
          goto LABEL_90;
        }
        v12 = v43[1];
      }
      if (v12 != (void *)9)
        goto LABEL_36;
      v18 = *(_QWORD *)v43[0] == 0x6D726F4E78614D3CLL && *((_BYTE *)v43[0] + 8) == 62;
      v14 = (float *)(a1 + 400);
      if (!v18)
      {
        v12 = v43[1];
LABEL_36:
        if (v12 == (void *)18)
        {
          if (*(_QWORD *)v43[0] == 0x6E6569646172473CLL
            && *((_QWORD *)v43[0] + 1) == 0x7079546D726F4E74
            && *((_WORD *)v43[0] + 8) == 15973)
          {
LABEL_89:
            __p = 0;
            v41 = 0;
            v42 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p, v9, v10);
            *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&__p);
LABEL_90:
            if (SHIBYTE(v42) < 0)
              operator delete(__p);
            goto LABEL_84;
          }
          v12 = v43[1];
        }
        if (v12 != (void *)9)
          goto LABEL_96;
        v21 = (void **)v43[0];
LABEL_73:
        v27 = *v21;
        v28 = *((unsigned __int8 *)v21 + 8);
        v29 = v27 == (void *)0x6461724778614D3CLL && v28 == 62;
        v14 = (float *)(a1 + 152);
        if (!v29)
        {
LABEL_96:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", 134);
          v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"unrecognized config token ", 26);
          if (SHIBYTE(v43[2]) >= 0)
            v37 = v43;
          else
            v37 = (void **)v43[0];
          if (SHIBYTE(v43[2]) >= 0)
            v38 = HIBYTE(v43[2]);
          else
            v38 = (uint64_t)v43[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
      }
    }
LABEL_83:
    kaldi::ReadBasicType<float>(a2, a3, v14, v9, v10);
LABEL_84:
    if (SHIBYTE(v43[2]) < 0)
      operator delete(v43[0]);
  }
  kaldi::CuMatrix<float>::Read(a1 + 160, a2, a3, a4);
  kaldi::CuVector<float>::Read(a1 + 208, a2, a3, v31, v32);
  v34 = *(_DWORD *)(a1 + 180);
  v35 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  if (v34 != *(_DWORD *)(v35 + 12))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)0x8D, "linearity_.NumRows() == output_dim_", v33);
  if (*(_DWORD *)(a1 + 176) != *(_DWORD *)(v35 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)0x8E, "linearity_.NumCols() == input_dim_", v33);
  if (*(_DWORD *)(a1 + 224) != v34)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)0x8F, "bias_.Dim() == output_dim_", v33);
}

void sub_1DE438EC8()
{
  JUMPOUT(0x1DE438ED0);
}

_QWORD *kaldi::nnet1::Recurrent::WriteConfig(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  std::string __p;

  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<BiasLearnRateCoef>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxNorm>", v10, v11);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<Nonlinearity>", v12, v13);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 384), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v16, v17);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v18, v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v20, v21);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

void sub_1DE43902C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Recurrent::WriteData(_DWORD *a1, _QWORD *a2, int a3, int a4)
{
  _DWORD *v8;
  uint64_t v9;
  const char *v10;

  v8 = a1 + 52;
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 168))(a1);
  kaldi::CuMatrixBase<float>::Write((uint64_t)(a1 + 40), a2, a3, a4);
  kaldi::CuVectorBase<float>::Write(v8, a2, a3, v9, v10);
}

uint64_t kaldi::nnet1::Recurrent::NumParams(kaldi::nnet1::Recurrent *this)
{
  return (*((_DWORD *)this + 56) + *((_DWORD *)this + 44) * *((_DWORD *)this + 45));
}

_DWORD *kaldi::nnet1::Recurrent::GetParams(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 184))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  v10 = a1[44] * a1[45];
  v16 = 0;
  v17 = 0;
  if (v10 > *(_DWORD *)(a2 + 8)
    || (v15 = *(void **)a2,
        LODWORD(v16) = v10,
        kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v15, (uint64_t)(a1 + 40), v7, v8, v9),
        v13 = a1[56],
        v16 = 0,
        v17 = 0,
        (v13 + v10) > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
  }
  v15 = (void *)(*(_QWORD *)a2 + 4 * v10);
  LODWORD(v16) = v13;
  return kaldi::CuVectorBase<float>::CopyToVec<float>(a1 + 52, (uint64_t)&v15, v11, v12, v9);
}

_DWORD *kaldi::nnet1::Recurrent::SetParams(_DWORD *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 184))(a1))
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)0xB1, "wei_src.Dim() == NumParams()", v5);
  v6 = a1[44] * a1[45];
  v12 = 0;
  v13 = 0;
  if (v6 > *(_DWORD *)(a2 + 8)
    || (v11 = *(char **)a2,
        LODWORD(v12) = v6,
        kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 40), &v11),
        v9 = a1[56],
        v12 = 0,
        v13 = 0,
        (v9 + v6) > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v5);
  }
  v11 = (char *)(*(_QWORD *)a2 + 4 * v6);
  LODWORD(v12) = v9;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 52, (uint64_t)&v11, v7, v8, v5);
}

float kaldi::nnet1::Recurrent::SumParams(kaldi::nnet1::Recurrent *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v6;

  v6 = kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 160, a2, a3, a4, a5);
  return v6 + kaldi::CuVectorBase<float>::Sum((uint64_t)this + 208);
}

uint64_t kaldi::nnet1::Recurrent::PerturbParams(kaldi::nnet1::Recurrent *this, float a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _QWORD v13[4];
  _BYTE v14[48];

  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v14, *((unsigned int *)this + 45), *((unsigned int *)this + 44), 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v14);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, (uint64_t)v14, 111, v4, v5, a2, 1.0);
  v6 = *((unsigned int *)this + 56);
  v13[0] = &unk_1EA92DFD8;
  memset(&v13[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v13, v6, 1u, v7, v8);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v13);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 208, (uint64_t)v13, v9, v10, v11, a2, 1.0);
  v13[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v13);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v14);
}

void sub_1DE439380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Recurrent::Info(kaldi::nnet1::Recurrent *this)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  void **v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  unsigned __int8 v17;
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  (*(void (**)(kaldi::nnet1::Recurrent *, _QWORD *, _QWORD))(*(_QWORD *)this + 168))(this, v18, 0);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n linearity", 11);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 160);
  if ((v17 & 0x80u) == 0)
    v3 = v16;
  else
    v3 = (void **)v16[0];
  if ((v17 & 0x80u) == 0)
    v4 = v17;
  else
    v4 = (uint64_t)v16[1];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n bias", 6);
  kaldi::nnet1::MomentStatistics<float>((_DWORD *)this + 52, v7, v8, v9, v10);
  if ((v15 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v12 = v15;
  else
    v12 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v11, v12);
  if ((char)v15 < 0)
    operator delete(__p[0]);
  if ((char)v17 < 0)
    operator delete(v16[0]);
  std::stringbuf::str();
  v18[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v20);
}

void sub_1DE43951C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Recurrent::InfoGradient(kaldi::nnet1::Recurrent *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  void **v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  void **v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  void *__p[2];
  unsigned __int8 v41;
  void *v42[2];
  unsigned __int8 v43;
  void *v44[2];
  unsigned __int8 v45;
  void *v46[2];
  unsigned __int8 v47;
  void *v48[2];
  unsigned __int8 v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;

  if (*((_BYTE *)this + 388) && *((_BYTE *)this + 389))
  {
    std::string::basic_string[abi:ne180100]<0>(&v50, "\n  linearity_grad");
    kaldi::nnet1::MomentStatistics<float>((_QWORD *)this + 30, v4, v5, v6, v7);
    if ((v49 & 0x80u) == 0)
      v8 = v48;
    else
      v8 = (void **)v48[0];
    if ((v49 & 0x80u) == 0)
      v9 = v49;
    else
      v9 = (std::string::size_type)v48[1];
    v10 = std::string::append(&v50, (const std::string::value_type *)v8, v9);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v51, ", lr-coef ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::ToString<float>();
    if ((v47 & 0x80u) == 0)
      v14 = v46;
    else
      v14 = (void **)v46[0];
    if ((v47 & 0x80u) == 0)
      v15 = v47;
    else
      v15 = (std::string::size_type)v46[1];
    v16 = std::string::append(&v52, (const std::string::value_type *)v14, v15);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append(&v53, ", max-norm ");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::ToString<float>();
    if ((v45 & 0x80u) == 0)
      v20 = v44;
    else
      v20 = (void **)v44[0];
    if ((v45 & 0x80u) == 0)
      v21 = v45;
    else
      v21 = (std::string::size_type)v44[1];
    v22 = std::string::append(&v54, (const std::string::value_type *)v20, v21);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v55, "\n  bias_grad");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::MomentStatistics<float>((_QWORD *)this + 33, v26, v27, v28, v29);
    if ((v43 & 0x80u) == 0)
      v30 = v42;
    else
      v30 = (void **)v42[0];
    if ((v43 & 0x80u) == 0)
      v31 = v43;
    else
      v31 = (std::string::size_type)v42[1];
    v32 = std::string::append(&v56, (const std::string::value_type *)v30, v31);
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    v34 = std::string::append(&v57, ", lr-coef ");
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::ToString<float>();
    if ((v41 & 0x80u) == 0)
      v36 = __p;
    else
      v36 = (void **)__p[0];
    if ((v41 & 0x80u) == 0)
      v37 = v41;
    else
      v37 = (std::string::size_type)__p[1];
    v38 = std::string::append(&v58, (const std::string::value_type *)v36, v37);
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    a2[2] = *((_QWORD *)&v38->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    if ((char)v41 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    if ((char)v43 < 0)
      operator delete(v42[0]);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if ((char)v45 < 0)
      operator delete(v44[0]);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if ((char)v47 < 0)
      operator delete(v46[0]);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    if ((char)v49 < 0)
      operator delete(v48[0]);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  linearity_grad is uninitialized\n  bias_grad is uninitialized");
  }
}

void sub_1DE4398C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  uint64_t v64;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v64 - 41) < 0)
    operator delete(*(void **)(v64 - 64));
  if (*(char *)(v64 - 73) < 0)
    operator delete(*(void **)(v64 - 96));
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v64 - 105) < 0)
    operator delete(*(void **)(v64 - 128));
  if (*(char *)(v64 - 137) < 0)
    operator delete(*(void **)(v64 - 160));
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v64 - 169) < 0)
    operator delete(*(void **)(v64 - 192));
  if (a64 < 0)
    operator delete(a59);
  if (a32 < 0)
    operator delete(a27);
  if (a57 < 0)
    operator delete(a52);
  if (a50 < 0)
    operator delete(a45);
  if (a38 < 0)
    operator delete(a33);
  if (a44 < 0)
    operator delete(a39);
  _Unwind_Resume(a1);
}

void sub_1DE4399EC()
{
  JUMPOUT(0x1DE439994);
}

void sub_1DE4399F4()
{
  JUMPOUT(0x1DE4399A4);
}

void sub_1DE4399FC()
{
  JUMPOUT(0x1DE4399B4);
}

void sub_1DE439A04()
{
  JUMPOUT(0x1DE4399C4);
}

void sub_1DE439A0C()
{
  JUMPOUT(0x1DE4399D4);
}

uint64_t kaldi::nnet1::Recurrent::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 152) = a3;
  *(_DWORD *)(result + 156) = a2;
  *(_BYTE *)(result + 388) = 0;
  return result;
}

uint64_t kaldi::nnet1::Recurrent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  const char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  unsigned int *v49;
  uint64_t v50;
  const char *v51;
  _QWORD *v53;
  std::string *p_p;
  std::string::size_type size;
  unsigned int *v56;
  uint64_t v57;
  int v58;
  int v59;
  std::string __p;
  void *v61;
  __int128 v62;
  __int128 v63;
  void *v64;
  __int128 v65;
  __int128 v66;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v9 = *(unsigned int *)(a1 + 96);
  v10 = *(unsigned int *)(a1 + 100);
  v11 = *(_DWORD *)(a2 + 20);
  if (v11 != (_DWORD)v9 * (_DWORD)v10)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)0x123, "in.NumRows() == num_sequences * T", v8);
  v12 = *(_QWORD *)(a3 + 32);
  v13 = a4;
  v14 = *(_QWORD *)(a1 + 336);
  v15 = v14 + 48 * a4;
  *(_QWORD *)(v15 + 32) = v12;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48 * a4 + 32) = v12;
  v16 = *(_QWORD *)(a1 + 480);
  if (*(_QWORD *)(a1 + 488) == v16 || (v17 = *(_DWORD *)(v16 + 32 * a4 + 16), v17 < 1))
  {
    v58 = 0;
  }
  else
  {
    if (v17 != v11)
      kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)0x12A, "boundary_[batch_idx].Dim() == in.NumRows()", v8);
    v18 = *(_QWORD *)(a1 + 504) + 48 * a4;
    *(_QWORD *)(v18 + 32) = v12;
    v58 = 1;
    kaldi::CuMatrix<float>::Resize(v18, v9, *(unsigned int *)(v15 + 16), 1u, 0);
    v14 = *(_QWORD *)(a1 + 336);
  }
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v61, v14 + 48 * a4, 0, v9, 0, *(_DWORD *)(v14 + 48 * a4 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v61, *(_QWORD *)(a1 + 8) + 48 * a4, 111, v19, v20);
  v56 = (unsigned int *)a3;
  v61 = &unk_1EA926508;
  v62 = 0u;
  v63 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v61);
  v21 = *(_QWORD *)(a1 + 336) + 48 * a4;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v61, v21, v9, v11, 0, *(_DWORD *)(v21 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v61, a2, 111, v22, v23);
  v61 = &unk_1EA926508;
  v62 = 0u;
  v63 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v61);
  v24 = *(_QWORD *)(a1 + 336) + 48 * a4;
  v59 = v9;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v61, v24, v9, v11, 0, *(_DWORD *)(v24 + 16));
  kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&v61, a1 + 208, v25, v26, v27, 1.0, 1.0);
  v61 = &unk_1EA926508;
  v62 = 0u;
  v63 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v61);
  v28 = v9;
  if ((int)v10 >= 1)
  {
    v29 = 0;
    v30 = 0;
    v57 = v10 + 1;
    v31 = 1;
    v32 = v59;
    do
    {
      v33 = *(_QWORD *)(a1 + 336) + 48 * (int)v13;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v64, v33, v32, v28, 0, *(_DWORD *)(v33 + 16));
      if (v31 > 1)
        v35 = v58;
      else
        v35 = 0;
      v36 = v30;
      if (v35 == 1)
      {
        v37 = *(_QWORD *)(a1 + 504);
        v38 = *(_QWORD *)(a1 + 480) + 32 * v13;
        *(_QWORD *)&v63 = 0;
        v62 = 0uLL;
        v61 = &unk_1EA926538;
        if (v32 > *(_DWORD *)(v38 + 16))
          kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v34);
        *(_QWORD *)&v62 = *(_QWORD *)(v38 + 8) + v29;
        DWORD2(v62) = v59;
        *(_QWORD *)&v63 = *(_QWORD *)(v38 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows(v37 + 48 * (int)v13, (uint64_t)&v64, (uint64_t)&v61, 0, v34);
        v36 = (v31 - 1) * v59;
      }
      v39 = *(_QWORD *)(a1 + 336) + 48 * (int)v13;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v61, v39, v36, v59, 0, *(_DWORD *)(v39 + 16));
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v64, (uint64_t)&v61, CblasNoTrans, a1 + 160, (const char *)0x70, 1.0, 1.0);
      v61 = &unk_1EA926508;
      v62 = 0u;
      v63 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v61);
      if (v35)
      {
        v43 = *(_QWORD *)(a1 + 504);
        v44 = *(_QWORD *)(a1 + 480) + 32 * v13;
        *(_QWORD *)&v63 = 0;
        v62 = 0uLL;
        v61 = &unk_1EA926538;
        if (v32 > *(_DWORD *)(v44 + 16))
          kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v42);
        *(_QWORD *)&v62 = *(_QWORD *)(v44 + 8) + 4 * v36;
        DWORD2(v62) = v59;
        *(_QWORD *)&v63 = *(_QWORD *)(v44 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v64, v43 + 48 * (int)v13, (uint64_t)&v61, 0, v42);
      }
      v45 = *(_DWORD *)(a1 + 384);
      switch(v45)
      {
        case 520:
          kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)&v64, 0.0);
          break;
        case 517:
          kaldi::CuMatrixBase<float>::Tanh((uint64_t)&v64, (uint64_t)&v64, v40, v41, v42);
          break;
        case 516:
          kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v64, (uint64_t)&v64, v40, v41, v42);
          break;
        default:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v61, "PropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", 349);
          v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"Unknown nonlinearity type: ", 27);
          kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 384), &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v61);
      }
      v64 = &unk_1EA926508;
      v65 = 0u;
      v66 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v64);
      ++v31;
      v32 += v59;
      v30 += v59;
      v29 += 4 * v59;
      v28 = v59;
    }
    while (v57 != v31);
  }
  v46 = *(_QWORD *)(a1 + 336) + 48 * (int)v13;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v61, v46, v28, v11, 0, *(_DWORD *)(v46 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v56, (uint64_t)&v61, 111, v47, v48);
  v61 = &unk_1EA926508;
  v62 = 0u;
  v63 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v61);
  v49 = (unsigned int *)(*(_QWORD *)(a1 + 8) + 48 * v13);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v61, *(_QWORD *)(a1 + 336) + 48 * v13, v11, v28, 0, *(_DWORD *)(*(_QWORD *)(a1 + 336) + 48 * v13 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v49, (uint64_t)&v61, 111, v50, v51);
  v61 = &unk_1EA926508;
  v62 = 0u;
  v63 = 0u;
  return kaldi::CuMatrixBase<float>::~CuMatrixBase(&v61);
}

void sub_1DE43A0A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _OWORD *a15)
{
  uint64_t v15;

  *(_QWORD *)(v15 - 128) = &unk_1EA926508;
  *a15 = 0u;
  a15[1] = 0u;
  JUMPOUT(0x1DE43A0DCLL);
}

void sub_1DE43A0E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _OWORD *v23;

  a23 = &unk_1EA926508;
  *v23 = 0u;
  v23[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a23);
  JUMPOUT(0x1DE43A0BCLL);
}

uint64_t kaldi::nnet1::Recurrent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  void *v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  __int128 v12;
  __int128 v13;

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  v11 = &unk_1EA926508;
  *(_QWORD *)&v12 = v4;
  *((_QWORD *)&v12 + 1) = v3 | 0x100000000;
  LODWORD(v13) = v3;
  DWORD1(v13) = v3;
  *((_QWORD *)&v13 + 1) = *(_QWORD *)(a2 + 24);
  v5 = *(_DWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 8);
  v8 = &unk_1EA926508;
  *(_QWORD *)&v9 = v6;
  *((_QWORD *)&v9 + 1) = v5 | 0x100000000;
  LODWORD(v10) = v5;
  DWORD1(v10) = v5;
  *((_QWORD *)&v10 + 1) = *(_QWORD *)(a3 + 24);
  (*(void (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)a1 + 248))(a1, &v11, &v8, 0);
  v8 = &unk_1EA926508;
  v9 = 0u;
  v10 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v8);
  v11 = &unk_1EA926508;
  v12 = 0u;
  v13 = 0u;
  return kaldi::CuMatrixBase<float>::~CuMatrixBase(&v11);
}

void sub_1DE43A1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;

  v17 = v14;
  *v16 = 0u;
  v16[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a9);
  a14 = v15;
  *v17 = 0u;
  v17[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a14);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Recurrent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, int a6)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  const char *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  _QWORD *v45;
  std::string *p_p;
  std::string::size_type size;
  unsigned int *v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  std::string __p;
  void *v54;
  __int128 v55;
  __int128 v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  char *v60;
  __int128 v61;
  __int128 v62;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  kaldi::nnet1::Recurrent::EnsureTrainingBuffers((kaldi::nnet1::Recurrent *)a1);
  if (a5)
    v11 = (uint64_t)a5;
  else
    v11 = a4;
  v12 = *(_QWORD *)(v11 + 32);
  v13 = a6;
  *(_QWORD *)(*(_QWORD *)(a1 + 336) + 48 * a6 + 32) = v12;
  v14 = *(_QWORD *)(a1 + 360);
  v15 = v14 + 48 * a6;
  *(_QWORD *)(v15 + 32) = v12;
  v16 = *(unsigned int *)(a1 + 96);
  v52 = *(unsigned int *)(a1 + 100);
  v17 = *(_QWORD *)(a1 + 480);
  if (*(_QWORD *)(a1 + 488) == v17 || (v18 = *(_DWORD *)(v17 + 32 * v13 + 16), v18 < 1))
  {
    v51 = 0;
  }
  else
  {
    if (v18 != *(_DWORD *)(a4 + 20))
      kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)0x181, "boundary_[batch_idx].Dim() == out_diff.NumRows()", v10);
    v19 = *(_QWORD *)(a1 + 504) + 48 * (int)v13;
    *(_QWORD *)(v19 + 32) = v12;
    v51 = 1;
    kaldi::CuMatrix<float>::Resize(v19, v16, *(unsigned int *)(v15 + 16), 1u, 0);
    v14 = *(_QWORD *)(a1 + 360);
  }
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v54, v14 + 48 * (int)v13, 0, v16 * v52, 0, *(_DWORD *)(v14 + 48 * (int)v13 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v54, a4, 111, v20, v21);
  v48 = a5;
  v54 = &unk_1EA926508;
  v55 = 0u;
  v56 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v54);
  v23 = *(_QWORD *)(a1 + 360) + 48 * (int)v13;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v54, v23, v16 * v52, v16, 0, *(_DWORD *)(v23 + 16));
  kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v54);
  v54 = &unk_1EA926508;
  v55 = 0u;
  v56 = 0u;
  result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v54);
  if ((int)v52 >= 1)
  {
    v25 = 0;
    v26 = v52;
    v27 = 4 * (int)v16 * v52;
    v50 = v16 * v52;
    v49 = v16 + v16 * v52;
    do
    {
      v28 = v22;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v60, *(_QWORD *)(a1 + 336) + 48 * v13, v50 + v25, v16, 0, *(_DWORD *)(*(_QWORD *)(a1 + 336) + 48 * v13 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v57, *(_QWORD *)(a1 + 360) + 48 * v13, v16 * (v52 - 1) + v25, v16, 0, *(_DWORD *)(*(_QWORD *)(a1 + 360) + 48 * v13 + 16));
      if (v26 < v52)
        v30 = v51;
      else
        v30 = 0;
      if (v30 == 1)
      {
        v31 = *(_QWORD *)(a1 + 504);
        v32 = *(_QWORD *)(a1 + 480) + 32 * v13;
        *(_QWORD *)&v56 = 0;
        v55 = 0uLL;
        v54 = &unk_1EA926538;
        if ((v49 + v25) > *(_DWORD *)(v32 + 16))
          kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v29);
        *(_QWORD *)&v55 = *(_QWORD *)(v32 + 8) + v27;
        DWORD2(v55) = v16;
        *(_QWORD *)&v56 = *(_QWORD *)(v32 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows(v31 + 48 * (int)v13, (uint64_t)&v57, (uint64_t)&v54, 0, v29);
      }
      v33 = *(_QWORD *)(a1 + 360) + 48 * (int)v13;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v54, v33, v50 + v25, v16, 0, *(_DWORD *)(v33 + 16));
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v57, (uint64_t)&v54, CblasNoTrans, a1 + 160, (const char *)0x6F, 1.0, 1.0);
      v54 = &unk_1EA926508;
      v55 = 0u;
      v56 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v54);
      if (v30)
      {
        v36 = *(_QWORD *)(a1 + 504);
        v37 = *(_QWORD *)(a1 + 480) + 32 * v13;
        *(_QWORD *)&v56 = 0;
        v55 = 0uLL;
        v54 = &unk_1EA926538;
        if ((v49 + v25) > *(_DWORD *)(v37 + 16))
          kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v35);
        *(_QWORD *)&v55 = *(_QWORD *)(v37 + 8) + v27;
        DWORD2(v55) = v16;
        *(_QWORD *)&v56 = *(_QWORD *)(v37 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v57, v36 + 48 * (int)v13, (uint64_t)&v54, 0, v35);
      }
      v38 = *(_DWORD *)(a1 + 384);
      if (v38 == 520)
      {
        v22 = v28;
        kaldi::CuMatrixBase<float>::ApplyHeaviside((uint64_t)&v60);
        kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v57, (uint64_t)&v60, v39, v40, v41);
      }
      else
      {
        v22 = v28;
        if (v38 == 517)
        {
          kaldi::CuMatrixBase<float>::DiffTanh((uint64_t)&v57, (uint64_t)&v60, (uint64_t)&v57, v34, v35);
        }
        else
        {
          if (v38 != 516)
          {
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v54, "BackpropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", 430);
            v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54, (uint64_t)"Unknown nonlinearity type: ", 27);
            kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 384), &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              size = __p.__r_.__value_.__l.__size_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)p_p, size);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v54);
          }
          kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v57, (uint64_t)&v60, (uint64_t)&v57, v34, v35);
        }
      }
      v57 = v22 + 16;
      --v26;
      v58 = 0u;
      v59 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v57);
      v60 = v22 + 16;
      v61 = 0u;
      v62 = 0u;
      result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v60);
      v27 -= 4 * (int)v16;
      v25 -= v16;
    }
    while ((unint64_t)(v26 + 1) > 1);
  }
  if (v48)
  {
    v42 = *(_QWORD *)(a1 + 360) + 48 * (int)v13;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v54, v42, 0, v16 * v52, 0, *(_DWORD *)(v42 + 16));
    kaldi::CuMatrixBase<float>::CopyFromMat<float>(v48, (uint64_t)&v54, 111, v43, v44);
    v54 = v22 + 16;
    v55 = 0u;
    v56 = 0u;
    return kaldi::CuMatrixBase<float>::~CuMatrixBase(&v54);
  }
  return result;
}

void sub_1DE43A808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _OWORD *a16, _OWORD *a17)
{
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v18 - 168) = v17 + 16;
  *a16 = 0u;
  a16[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v18 - 168);
  *(_QWORD *)(v18 - 128) = v17 + 16;
  *a17 = 0u;
  a17[1] = 0u;
  JUMPOUT(0x1DE43A890);
}

uint64_t kaldi::nnet1::Recurrent::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  float v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  void *v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  __int128 v28;
  __int128 v29;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  kaldi::nnet1::Recurrent::EnsureTrainingBuffers((kaldi::nnet1::Recurrent *)a1);
  v10 = a5;
  v11 = *(_QWORD *)(a1 + 240) + 48 * a5;
  *(_QWORD *)(v11 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 264) + 32 * a5 + 24) = a4;
  v12 = *(_DWORD *)(a1 + 96);
  v13 = *(_DWORD *)(a1 + 100);
  v14 = *(float *)(a1 + 60);
  v15 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(*(_QWORD *)(a1 + 408) + 4 * a5) = v15;
  if (v15 != *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 100))
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)0x1C6, "num_frames_[batch_idx] == ropts_.bptt_steps * ropts_.num_sequences", v9);
  v16 = *(_QWORD *)(a1 + 360) + 48 * a5;
  v17 = v13 * v12;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v27, v16, 0, v13 * v12, 0, *(_DWORD *)(v16 + 16));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v24, *(_QWORD *)(a1 + 336) + 48 * v10, 0, v17, 0, *(_DWORD *)(*(_QWORD *)(a1 + 336) + 48 * v10 + 16));
  kaldi::CuMatrixBase<float>::AddMatMat(v11, (uint64_t)&v27, CblasTrans, (uint64_t)&v24, (const char *)0x6F, 1.0, v14);
  v24 = &unk_1EA926508;
  v25 = 0u;
  v26 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v24);
  v27 = &unk_1EA926508;
  v28 = 0u;
  v29 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v27);
  v18 = *(_QWORD *)(a1 + 264) + 32 * v10;
  v19 = *(_QWORD *)(a1 + 360) + 48 * (int)v10;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v27, v19, 0, v17, 0, *(_DWORD *)(v19 + 16));
  kaldi::CuVectorBase<float>::AddRowSumMat(v18, (uint64_t)&v27, 1.0, v14, v20, v21, v22);
  v27 = &unk_1EA926508;
  v28 = 0u;
  v29 = 0u;
  return kaldi::CuMatrixBase<float>::~CuMatrixBase(&v27);
}

void sub_1DE43AA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15, __int128 a16)
{
  a15 = 0u;
  a16 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Recurrent::NormalizeGradients(kaldi::nnet1::Recurrent *this, float a2, unsigned int a3, uint64_t a4, uint64_t a5, const char *a6)
{
  float v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;

  if ((a3 & 0x80000000) != 0 || *((_DWORD *)this + 20) <= (signed int)a3)
    kaldi::KaldiAssertFailure_((kaldi *)"NormalizeGradients", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)0x1D3, "batch_idx >= 0 && batch_idx < ropts_.num_subbatches", a6);
  v7 = a2;
  v8 = *((_DWORD *)this + 39);
  if (v8 == 3)
  {
    if (a2 >= 0.0 && a2 <= 1.0)
    {
      v10 = a3;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((_QWORD *)this + 30) + 48 * a3, *((_QWORD *)this + 36) + 48 * a3, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((_QWORD *)this + 33) + 32 * v10, *((_QWORD *)this + 39) + 32 * v10, v7, v11, v12, v13);
    }
  }
  else if (v8 == 1)
  {
    if (a2 > 0.0)
    {
      v9 = a3;
      if (*((_BYTE *)this + 84))
        v7 = (float)*(int *)(*((_QWORD *)this + 51) + 4 * a3) * a2;
      kaldi::nnet1::UpdatableComponent::ClipGradient(*((_QWORD *)this + 30) + 48 * a3, v7);
      kaldi::nnet1::UpdatableComponent::ClipGradient(*((_QWORD *)this + 33) + 32 * v9, v7);
    }
  }
  else if (a2 > 0.0 && v8 == 2)
  {
    v14 = a3;
    if (*((_BYTE *)this + 84))
      v7 = (float)*(int *)(*((_QWORD *)this + 51) + 4 * a3) * a2;
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((_QWORD *)this + 30) + 48 * a3, (unsigned int *)(*((_QWORD *)this + 36) + 48 * a3), v7, a4, a5, a6);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((_QWORD *)this + 33) + 32 * v14, (_DWORD *)(*((_QWORD *)this + 39) + 32 * v14), v15, v16, v17, v7);
  }
}

void kaldi::nnet1::Recurrent::UpdateWeights(kaldi::nnet1::Recurrent *this, void *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  int *v26;
  int v27;
  int *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  _QWORD v53[4];
  _QWORD v54[2];
  uint64_t v55;
  void *v56;

  (*(void (**)(kaldi::nnet1::Recurrent *))(*(_QWORD *)this + 88))(this);
  kaldi::nnet1::Recurrent::EnsureTrainingBuffers(this);
  v9 = *(float *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 56);
  v11 = *((float *)this + 16);
  v10 = *((float *)this + 17);
  *((_QWORD *)this + 24) = a2;
  *((_QWORD *)this + 29) = a2;
  v12 = *((unsigned int *)this + 20);
  if (a3 >= 0)
    v13 = a3;
  else
    v13 = *((_DWORD *)this + 20);
  if ((_DWORD)v12 == 1)
    v14 = 0;
  else
    v14 = v13;
  if ((int)v14 > (int)v12)
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)0x1F7, "batch_idx <= ropts_.num_subbatches", v8);
  v15 = *((_QWORD *)this + 30);
  v16 = v15 + 48 * (int)v14;
  *(_QWORD *)(v16 + 32) = a2;
  *(_QWORD *)(*((_QWORD *)this + 33) + 32 * (int)v14 + 24) = a2;
  *(_QWORD *)(*((_QWORD *)this + 36) + 48 * (int)v14 + 32) = a2;
  *(_QWORD *)(*((_QWORD *)this + 39) + 32 * (int)v14 + 24) = a2;
  if ((_DWORD)v14 == (_DWORD)v12)
  {
    kaldi::CuMatrixBase<float>::AddMat(v16, v15, 111, v7, v8, 1.0, 0.0);
    kaldi::CuVectorBase<float>::AddVec(*((_QWORD *)this + 33) + 32 * (int)v14, *((_QWORD *)this + 33), v17, v18, v19, 1.0, 0.0);
    if (*((int *)this + 20) > 1)
    {
      v20 = 1;
      v21 = 32;
      v22 = 48;
      do
      {
        kaldi::CuMatrixBase<float>::AddMat(*((_QWORD *)this + 30) + 48 * (int)v14, *((_QWORD *)this + 30) + v22, 111, v7, v8, 1.0, 1.0);
        kaldi::CuVectorBase<float>::AddVec(*((_QWORD *)this + 33) + 32 * (int)v14, *((_QWORD *)this + 33) + v21, v23, v24, v25, 1.0, 1.0);
        ++v20;
        v22 += 48;
        v21 += 32;
      }
      while (v20 < *((int *)this + 20));
    }
    v26 = (int *)*((_QWORD *)this + 51);
    v26[(int)v14] = 0;
    if ((int)v12 >= 1)
    {
      v27 = 0;
      v28 = v26;
      do
      {
        v29 = *v28++;
        v27 += v29;
        v26[(int)v14] = v27;
        --v12;
      }
      while (v12);
    }
  }
  if (*((_BYTE *)this + 84))
    v9 = v9 / (float)*(int *)(*((_QWORD *)this + 51) + 4 * (int)v14);
  if (*((float *)this + 38) >= 0.0)
    (*(void (**)(kaldi::nnet1::Recurrent *, uint64_t))(*(_QWORD *)this + 280))(this, v14);
  if (v11 != 0.0)
    kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, (uint64_t)this + 160, 111, v7, v8, (float)-(float)(v9 * v11) * (float)*(int *)(*((_QWORD *)this + 51) + 4 * (int)v14), 1.0);
  v30 = *((_QWORD *)this + 30);
  if (v10 != 0.0)
  {
    kaldi::cu::RegularizeL1<float>((uint64_t)this + 160, v30 + 48 * (int)v14, (float)(v10 * v9) * (float)*(int *)(*((_QWORD *)this + 51) + 4 * (int)v14), v9, v6, v7, v8);
    v30 = *((_QWORD *)this + 30);
  }
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, v30 + 48 * (int)v14, 111, v7, v8, -(float)(v9 * *((float *)this + 98)), 1.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 208, *((_QWORD *)this + 33) + 32 * (int)v14, v31, v32, v33, -(float)(v9 * *((float *)this + 99)), 1.0);
  if (*((float *)this + 100) > 0.0)
  {
    *((_QWORD *)this + 58) = a2;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)this + 108, (uint64_t)this + 160, 111, v34, v35);
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)this + 432, (uint64_t)this + 160, v36, v37, v38);
    v39 = *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12);
    v55 = 0;
    v56 = 0;
    v54[0] = &unk_1EA92DFD8;
    v54[1] = 0;
    kaldi::CuVector<float>::Resize((uint64_t)v54, v39, 0, v40, v41);
    v56 = a2;
    kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v54, (uint64_t)this + 432, 1.0, 0.0, v42, v43, v44);
    kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v54, 0.5);
    v53[0] = &unk_1EA92DFD8;
    v53[1] = 0;
    v53[2] = 0;
    v53[3] = v56;
    kaldi::CuVector<float>::Resize((uint64_t)v53, v55, 1u, v45, v46);
    kaldi::CuVectorBase<float>::CopyFromVec(v53, (uint64_t)v54, v47, v48, v49);
    kaldi::CuVectorBase<float>::Scale((uint64_t)v53, 1.0 / *((float *)this + 100));
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v53, 1.0);
    kaldi::CuVectorBase<float>::InvertElements((uint64_t)v53);
    kaldi::CuMatrixBase<float>::MulRowsVec((uint64_t)this + 160, (uint64_t)v53, v50, v51, v52);
    v53[0] = &unk_1EA92DFD8;
    kaldi::CuVector<float>::Destroy((uint64_t)v53);
    v54[0] = &unk_1EA92DFD8;
    kaldi::CuVector<float>::Destroy((uint64_t)v54);
  }
}

void sub_1DE43AFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Recurrent::GetGradient(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v8 = (const void *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
  if (v8)
  else
    v9 = 0;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, _QWORD, _QWORD))(*v9 + 272))(v9, a2, a3, 0, 0);
  v10 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 184))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v10, 1, v11, v12);
  v16 = a1[44] * a1[45];
  v22 = 0;
  v23 = 0;
  if (v16 > *(_DWORD *)(a4 + 8)
    || (v21 = *(void **)a4,
        LODWORD(v22) = v16,
        kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v21, v9[30], v13, v14, v15),
        v19 = a1[56],
        v22 = 0,
        v23 = 0,
        (v19 + v16) > *(_DWORD *)(a4 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v15);
  }
  v21 = (void *)(*(_QWORD *)a4 + 4 * v16);
  LODWORD(v22) = v19;
  kaldi::CuVectorBase<float>::CopyToVec<float>((_DWORD *)v9[33], (uint64_t)&v21, v17, v18, v15);
  return (*(uint64_t (**)(uint64_t *))(*v9 + 8))(v9);
}

uint64_t `virtual thunk to'kaldi::nnet1::Recurrent::Copy(kaldi::nnet1::Recurrent *this)
{
  return kaldi::nnet1::Recurrent::Copy((kaldi::nnet1::Recurrent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)));
}

uint64_t `virtual thunk to'kaldi::nnet1::Recurrent::Info(kaldi::nnet1::Recurrent *this)
{
  return kaldi::nnet1::Recurrent::Info((kaldi::nnet1::Recurrent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 80)));
}

void `virtual thunk to'kaldi::nnet1::Recurrent::InfoGradient(kaldi::nnet1::Recurrent *this@<X0>, _QWORD *a2@<X8>)
{
  kaldi::nnet1::Recurrent::InfoGradient((kaldi::nnet1::Recurrent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)), a2);
}

void `virtual thunk to'kaldi::nnet1::Recurrent::InitData(_QWORD *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  kaldi::nnet1::Recurrent::InitData((uint64_t)a1 + *(_QWORD *)(*a1 - 112), a2, a3);
}

void `virtual thunk to'kaldi::nnet1::Recurrent::WriteData(_QWORD *a1, _QWORD *a2, int a3, int a4)
{
  kaldi::nnet1::Recurrent::WriteData((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 120)), a2, a3, a4);
}

uint64_t `virtual thunk to'kaldi::nnet1::Recurrent::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  return kaldi::nnet1::Recurrent::PropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 128), a2, a3, a4);
}

uint64_t `virtual thunk to'kaldi::nnet1::Recurrent::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return kaldi::nnet1::Recurrent::PropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 136), a2, a3);
}

uint64_t `virtual thunk to'kaldi::nnet1::Recurrent::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, int a6)
{
  return kaldi::nnet1::Recurrent::BackpropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 144), a2, a3, a4, a5, a6);
}

void `virtual thunk to'kaldi::nnet1::Recurrent::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::Recurrent::ReadData((uint64_t)a1 + *(_QWORD *)(*a1 - 176), a2, a3, a4);
}

_QWORD *`virtual thunk to'kaldi::nnet1::Recurrent::WriteConfig(_QWORD *a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::Recurrent::WriteConfig((uint64_t)a1 + *(_QWORD *)(*a1 - 184), a2, a3, a4, a5);
}

uint64_t `virtual thunk to'kaldi::nnet1::Recurrent::NumParams(kaldi::nnet1::Recurrent *this)
{
  return (*(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192) + 224)
                      + *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192) + 176)
                      * *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192) + 180));
}

_DWORD *`virtual thunk to'kaldi::nnet1::Recurrent::GetParams(_QWORD *a1, uint64_t a2)
{
  return kaldi::nnet1::Recurrent::GetParams((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 200)), a2);
}

_DWORD *`virtual thunk to'kaldi::nnet1::Recurrent::SetParams(_QWORD *a1, uint64_t a2)
{
  return kaldi::nnet1::Recurrent::SetParams((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 208)), a2);
}

float `virtual thunk to'kaldi::nnet1::Recurrent::SumParams(kaldi::nnet1::Recurrent *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  char *v5;
  float v6;

  v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 224);
  v6 = kaldi::CuMatrixBase<float>::Sum((uint64_t)(v5 + 160), a2, a3, a4, a5);
  return v6 + kaldi::CuVectorBase<float>::Sum((uint64_t)(v5 + 208));
}

uint64_t `virtual thunk to'kaldi::nnet1::Recurrent::PerturbParams(kaldi::nnet1::Recurrent *this, float a2)
{
  return kaldi::nnet1::Recurrent::PerturbParams((kaldi::nnet1::Recurrent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 232)), a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::Recurrent::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::Recurrent::GetGradient((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 240)), a2, a3, a4);
}

uint64_t `virtual thunk to'kaldi::nnet1::Recurrent::AccumGradients(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return kaldi::nnet1::Recurrent::AccumGradients((uint64_t)a1 + *(_QWORD *)(*a1 - 248), a2, a3, a4, a5);
}

_QWORD *`virtual thunk to'kaldi::nnet1::Recurrent::SetGradientNormalization(_QWORD *result, int a2, float a3)
{
  float *v3;

  v3 = (float *)((char *)result + *(_QWORD *)(*result - 256));
  v3[38] = a3;
  *((_DWORD *)v3 + 39) = a2;
  *((_BYTE *)v3 + 388) = 0;
  return result;
}

void `virtual thunk to'kaldi::nnet1::Recurrent::NormalizeGradients(kaldi::nnet1::Recurrent *this, float a2, unsigned int a3, uint64_t a4, uint64_t a5, const char *a6)
{
  kaldi::nnet1::Recurrent::NormalizeGradients((kaldi::nnet1::Recurrent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 264)), a2, a3, a4, a5, a6);
}

void `virtual thunk to'kaldi::nnet1::Recurrent::UpdateWeights(kaldi::nnet1::Recurrent *this, void *a2, int a3)
{
  kaldi::nnet1::Recurrent::UpdateWeights((kaldi::nnet1::Recurrent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 272)), a2, a3);
}

void `virtual thunk to'kaldi::nnet1::Recurrent::SetTrainOptions(kaldi::nnet1::Recurrent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::RecurrentBaseComponent *v2;

  v2 = (kaldi::nnet1::Recurrent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 280));
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(v2, a2);
  *((_WORD *)v2 + 194) = 0;
}

kaldi::nnet1::ConvolutionalComponent *kaldi::nnet1::ConvolutionalComponent::Copy(kaldi::nnet1::ConvolutionalComponent *this)
{
  kaldi::nnet1::ConvolutionalComponent *v2;

  v2 = (kaldi::nnet1::ConvolutionalComponent *)operator new();
  kaldi::nnet1::ConvolutionalComponent::ConvolutionalComponent(v2, this);
  return v2;
}

void sub_1DE43B378(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40F3A04191);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalComponent::GetType(kaldi::nnet1::ConvolutionalComponent *this)
{
  return 261;
}

uint64_t kaldi::nnet1::ConvolutionalComponent::Info(kaldi::nnet1::ConvolutionalComponent *this)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  void **v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  unsigned __int8 v17;
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  (*(void (**)(kaldi::nnet1::ConvolutionalComponent *, _QWORD *, _QWORD))(*(_QWORD *)this + 168))(this, v18, 0);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n filters: ", 11);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 104);
  if ((v17 & 0x80u) == 0)
    v3 = v16;
  else
    v3 = (void **)v16[0];
  if ((v17 & 0x80u) == 0)
    v4 = v17;
  else
    v4 = (uint64_t)v16[1];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n bias: ", 8);
  kaldi::nnet1::MomentStatistics<float>((_DWORD *)this + 38, v7, v8, v9, v10);
  if ((v15 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v12 = v15;
  else
    v12 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v11, v12);
  if ((char)v15 < 0)
    operator delete(__p[0]);
  if ((char)v17 < 0)
    operator delete(v16[0]);
  std::stringbuf::str();
  v18[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v20);
}

void sub_1DE43B518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalComponent::InfoGradient(kaldi::nnet1::ConvolutionalComponent *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  void **v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  void **v36;
  std::string::size_type v37;
  std::string *v38;
  void *__p[2];
  unsigned __int8 v40;
  void *v41[2];
  unsigned __int8 v42;
  void *v43[2];
  unsigned __int8 v44;
  void *v45[2];
  unsigned __int8 v46;
  void *v47[2];
  unsigned __int8 v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;

  std::string::basic_string[abi:ne180100]<0>(&v49, "\n  filters_grad");
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)this + 24, v4, v5, v6, v7);
  if ((v48 & 0x80u) == 0)
    v8 = v47;
  else
    v8 = (void **)v47[0];
  if ((v48 & 0x80u) == 0)
    v9 = v48;
  else
    v9 = (std::string::size_type)v47[1];
  v10 = std::string::append(&v49, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v50, ", lr-coef ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v46 & 0x80u) == 0)
    v14 = v45;
  else
    v14 = (void **)v45[0];
  if ((v46 & 0x80u) == 0)
    v15 = v46;
  else
    v15 = (std::string::size_type)v45[1];
  v16 = std::string::append(&v51, (const std::string::value_type *)v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v52, ", max-norm ");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v44 & 0x80u) == 0)
    v20 = v43;
  else
    v20 = (void **)v43[0];
  if ((v44 & 0x80u) == 0)
    v21 = v44;
  else
    v21 = (std::string::size_type)v43[1];
  v22 = std::string::append(&v53, (const std::string::value_type *)v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = std::string::append(&v54, "\n  bias_grad");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)this + 27, v26, v27, v28, v29);
  if ((v42 & 0x80u) == 0)
    v30 = v41;
  else
    v30 = (void **)v41[0];
  if ((v42 & 0x80u) == 0)
    v31 = v42;
  else
    v31 = (std::string::size_type)v41[1];
  v32 = std::string::append(&v55, (const std::string::value_type *)v30, v31);
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v34 = std::string::append(&v56, ", lr-coef ");
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v40 & 0x80u) == 0)
    v36 = __p;
  else
    v36 = (void **)__p[0];
  if ((v40 & 0x80u) == 0)
    v37 = v40;
  else
    v37 = (std::string::size_type)__p[1];
  v38 = std::string::append(&v57, (const std::string::value_type *)v36, v37);
  *a2 = *v38;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if ((char)v40 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if ((char)v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if ((char)v44 < 0)
    operator delete(v43[0]);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if ((char)v46 < 0)
    operator delete(v45[0]);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if ((char)v48 < 0)
    operator delete(v47[0]);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
}

void sub_1DE43B88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  uint64_t v64;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v64 - 41) < 0)
    operator delete(*(void **)(v64 - 64));
  if (*(char *)(v64 - 73) < 0)
    operator delete(*(void **)(v64 - 96));
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v64 - 105) < 0)
    operator delete(*(void **)(v64 - 128));
  if (*(char *)(v64 - 137) < 0)
    operator delete(*(void **)(v64 - 160));
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v64 - 169) < 0)
    operator delete(*(void **)(v64 - 192));
  if (a64 < 0)
    operator delete(a59);
  if (a32 < 0)
    operator delete(a27);
  if (a57 < 0)
    operator delete(a52);
  if (a50 < 0)
    operator delete(a45);
  if (a38 < 0)
    operator delete(a33);
  if (a44 < 0)
    operator delete(a39);
  _Unwind_Resume(a1);
}

void sub_1DE43B9B8()
{
  JUMPOUT(0x1DE43B960);
}

void sub_1DE43B9C0()
{
  JUMPOUT(0x1DE43B970);
}

void sub_1DE43B9C8()
{
  JUMPOUT(0x1DE43B980);
}

void sub_1DE43B9D0()
{
  JUMPOUT(0x1DE43B990);
}

void sub_1DE43B9D8()
{
  JUMPOUT(0x1DE43B9A0);
}

void kaldi::nnet1::ConvolutionalComponent::InitData(_DWORD *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  uint64_t v6;
  const char *v7;
  _DWORD *v8;
  uint64_t v9;
  const char *v10;
  void **v11;
  void *v13;
  BOOL v17;
  int *v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  float *v22;
  BOOL v24;
  BOOL v25;
  BOOL v28;
  BOOL v29;
  BOOL v31;
  BOOL v34;
  void *v35;
  void *v36;
  int v37;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  const char *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  unsigned int v55;
  unint64_t v56;
  float v57;
  float v58;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  unint64_t i;
  float v66;
  float v67;
  uint64_t v68;
  float v69;
  _DWORD *v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  _QWORD *v74;
  void **v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  _DWORD *v79;
  float *v80;
  uint64_t v81;
  uint64_t v82;
  void **v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  _QWORD v87[2];
  uint64_t v88;
  void *__p;
  void *v90;
  void *v91[3];
  std::string v92;
  int v93;
  int v94;
  float v95;
  int v96;

  v95 = 2.0;
  v96 = -1073741824;
  v94 = 1036831949;
  v93 = -1;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[46], &v92);
  memset(v91, 0, sizeof(v91));
  v79 = a1 + 23;
  v8 = a1 + 22;
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_148;
    kaldi::ReadToken(a2, 0, (uint64_t)v91, v6, v7);
    if ((SHIBYTE(v91[2]) & 0x80000000) == 0)
    {
      v11 = v91;
      switch(HIBYTE(v91[2]))
      {
        case 9:
          goto LABEL_140;
        case 0xA:
          if (v91[0] == (void *)0x61654D736169423CLL && LOWORD(v91[1]) == 15982)
            goto LABEL_76;
          if (HIBYTE(v91[2]) == 9)
            goto LABEL_140;
          goto LABEL_116;
        case 0xB:
          if (v91[0] == (void *)0x6E6152736169423CLL && *(void **)((char *)v91 + 3) == (void *)0x3E65676E61527361)
            goto LABEL_123;
          if (HIBYTE(v91[2]) == 9)
            goto LABEL_140;
          if (HIBYTE(v91[2]) == 11)
          {
            v40 = v91[0] == (void *)0x745368637461503CLL && *(void **)((char *)v91 + 3) == (void *)0x3E70657453686374;
            v18 = a1 + 23;
            if (v40)
              goto LABEL_109;
          }
          else
          {
LABEL_116:
            if (HIBYTE(v91[2]) != 10)
              goto LABEL_144;
            v34 = v91[0] == (void *)0x694468637461503CLL && LOWORD(v91[1]) == 15981;
            v18 = a1 + 22;
            if (v34)
              goto LABEL_109;
          }
          goto LABEL_139;
        case 0xC:
          goto LABEL_103;
        case 0xD:
          if (v91[0] == (void *)0x74536D617261503CLL && *(void **)((char *)v91 + 5) == (void *)0x3E7665646474536DLL)
            goto LABEL_124;
          v28 = v91[0] == (void *)0x745368637461503CLL && *(void **)((char *)v91 + 5) == (void *)0x3E65646972745368;
          v18 = a1 + 24;
          if (!v28)
            goto LABEL_91;
          goto LABEL_109;
        case 0xF:
          v29 = v91[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v91 + 7) == (void *)0x3E66656F43657461;
          v22 = (float *)(a1 + 72);
          if (v29)
            goto LABEL_145;
LABEL_91:
          if (HIBYTE(v91[2]) == 9)
            goto LABEL_140;
          if (HIBYTE(v91[2]) != 12)
            goto LABEL_144;
          goto LABEL_103;
        case 0x12:
          goto LABEL_126;
        case 0x13:
          v31 = v91[0] == (void *)0x61654C736169423CLL
             && v91[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v91[1] + 3) == (void *)0x3E66656F43657461;
          v22 = (float *)(a1 + 73);
          if (v31)
            goto LABEL_145;
          if (HIBYTE(v91[2]) == 18)
          {
            v11 = v91;
            goto LABEL_126;
          }
          if (HIBYTE(v91[2]) == 12)
          {
LABEL_103:
            if (v91[0] == (void *)0x536D6F646E61523CLL && LODWORD(v91[1]) == 1046766949)
              goto LABEL_108;
          }
          else
          {
LABEL_139:
            if (HIBYTE(v91[2]) == 9)
            {
LABEL_140:
              v41 = v91[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v91[1]) == 62;
              v22 = (float *)(a1 + 74);
              if (v41)
                goto LABEL_145;
            }
          }
          break;
        default:
          goto LABEL_144;
      }
      goto LABEL_144;
    }
    v13 = v91[1];
    if (v91[1] != (void *)10)
      break;
    if (*(_QWORD *)v91[0] != 0x61654D736169423CLL || *((_WORD *)v91[0] + 4) != 15982)
    {
      v13 = v91[1];
      goto LABEL_23;
    }
LABEL_76:
    v22 = (float *)&v96;
LABEL_145:
    kaldi::ReadBasicType<float>(a2, 0, v22, v9, v10);
LABEL_146:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if (v91[1] == (void *)13
    && *(_QWORD *)v91[0] == 0x74536D617261503CLL
    && *(_QWORD *)((char *)v91[0] + 5) == 0x3E7665646474536DLL)
  {
LABEL_124:
    v22 = (float *)&v94;
    goto LABEL_145;
  }
LABEL_23:
  if (v13 != (void *)11)
    goto LABEL_29;
  if (*(_QWORD *)v91[0] == 0x6E6152736169423CLL && *(_QWORD *)((char *)v91[0] + 3) == 0x3E65676E61527361)
  {
LABEL_123:
    v22 = &v95;
    goto LABEL_145;
  }
  v13 = v91[1];
LABEL_29:
  if (v13 == (void *)10)
  {
    v17 = *(_QWORD *)v91[0] == 0x694468637461503CLL && *((_WORD *)v91[0] + 4) == 15981;
    v18 = a1 + 22;
    if (v17)
      goto LABEL_109;
    v13 = v91[1];
  }
  if (v13 == (void *)11)
  {
    v19 = *(_QWORD *)v91[0] == 0x745368637461503CLL && *(_QWORD *)((char *)v91[0] + 3) == 0x3E70657453686374;
    v18 = a1 + 23;
    if (v19)
      goto LABEL_109;
    v13 = v91[1];
  }
  if (v13 == (void *)13)
  {
    v20 = *(_QWORD *)v91[0] == 0x745368637461503CLL && *(_QWORD *)((char *)v91[0] + 5) == 0x3E65646972745368;
    v18 = a1 + 24;
    if (v20)
      goto LABEL_109;
    v13 = v91[1];
  }
  if (v13 == (void *)15)
  {
    v21 = *(_QWORD *)v91[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v91[0] + 7) == 0x3E66656F43657461;
    v22 = (float *)(a1 + 72);
    if (v21)
      goto LABEL_145;
    v13 = v91[1];
  }
  if (v13 == (void *)19)
  {
    v24 = *(_QWORD *)v91[0] == 0x61654C736169423CLL
       && *((_QWORD *)v91[0] + 1) == 0x6F43657461526E72
       && *(_QWORD *)((char *)v91[0] + 11) == 0x3E66656F43657461;
    v22 = (float *)(a1 + 73);
    if (v24)
      goto LABEL_145;
    v13 = v91[1];
  }
  if (v13 == (void *)9)
  {
    v25 = *(_QWORD *)v91[0] == 0x6D726F4E78614D3CLL && *((_BYTE *)v91[0] + 8) == 62;
    v22 = (float *)(a1 + 74);
    if (v25)
      goto LABEL_145;
    v13 = v91[1];
  }
  if (v13 == (void *)12)
  {
    if (*(_QWORD *)v91[0] == 0x536D6F646E61523CLL && *((_DWORD *)v91[0] + 2) == 1046766949)
    {
LABEL_108:
      v18 = &v93;
LABEL_109:
      kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v18, v9, v10);
      goto LABEL_146;
    }
    v13 = v91[1];
  }
  if (v13 == (void *)18)
  {
    v11 = (void **)v91[0];
LABEL_126:
    v35 = *v11;
    v36 = v11[1];
    v37 = *((unsigned __int16 *)v11 + 8);
    if (v35 == (void *)0x6E6569646172473CLL && v36 == (void *)0x7079546D726F4E74 && v37 == 15973)
    {
      kaldi::ReadToken(a2, 0, (uint64_t)&v92, v9, v10);
      goto LABEL_146;
    }
  }
LABEL_144:
  v42 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v91, "<MaxGrad>");
  v22 = (float *)(a1 + 47);
  if (v42)
    goto LABEL_145;
  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v91, "</Component>"))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v87, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", 114);
    v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v91[2]) >= 0)
      v75 = v91;
    else
      v75 = (void **)v91[0];
    if (SHIBYTE(v91[2]) >= 0)
      v76 = HIBYTE(v91[2]);
    else
      v76 = (uint64_t)v91[1];
    v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)v75, v76);
    v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)" (ParamStddev|BiasMean|BiasRange|PatchDim|PatchStep|PatchStride|MaxNorm|GradientNormType|MaxGrad|RandomSeed)", 108);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v87);
  }
LABEL_148:
  a1[46] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v92);
  v44 = a1[2];
  v45 = a1[24];
  v46 = v44 / v45;
  if (v44 % v45)
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", (const char *)0x7E, "input_dim_ % patch_stride_ == 0", v43);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v87, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", 128);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"num_splice ", 11);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v87);
    v45 = a1[24];
  }
  v47 = v45 - *v8;
  if (v47 % *v79)
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", (const char *)0x82, "(patch_stride_ - patch_dim_) % patch_step_ == 0", v43);
  v48 = v47 / *v79 + 1;
  if (kaldi::g_kaldi_verbose_level < 0)
  {
    v49 = (*v8 * v46);
  }
  else
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v87, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", 132);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"num_patches ", 12);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v87);
    v49 = (*v8 * v46);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v87, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", 135);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"filter_dim ", 11);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v87);
    }
  }
  v50 = a1[3];
  v51 = (v50 / v48);
  if (v50 % v48)
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", (const char *)0x89, "output_dim_ % num_patches == 0", v43);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v87, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", 139);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"num_filters ", 12);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v87);
  }
  if (v93 >= 1)
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v93);
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v87, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)&v83, v51, v49, 0, 0);
  if ((int)v51 >= 1)
  {
    v55 = 0;
    do
    {
      if ((int)v49 >= 1)
      {
        v56 = 0;
        do
        {
          v57 = *(float *)&v94;
          kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v87, 0, v52, v53, v54);
          if (v85 <= v55 || v56 >= v84)
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v54);
          *((float *)v83 + (int)(v55 * v86) + v56++) = v57 * v58;
        }
        while (v49 != v56);
      }
      ++v55;
    }
    while (v55 != (_DWORD)v51);
  }
  kaldi::CuMatrix<float>::operator=((uint64_t)(a1 + 26), (uint64_t)&v83);
  v80 = 0;
  v81 = 0;
  v82 = 0;
  kaldi::Vector<float>::Resize((void **)&v80, v51, 0, v60, v61);
  if ((int)v51 <= 0)
  {
    v68 = v81;
  }
  else
  {
    for (i = 0; i != v51; ++i)
    {
      v66 = *(float *)&v96;
      v67 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v62, v63, v64);
      v68 = v81;
      if (i >= v81)
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v64);
      v69 = v66 + (v67 + -0.5) * v95;
      v80[i] = v69;
    }
  }
  v70 = a1 + 38;
  kaldi::CuVector<float>::Resize((uint64_t)v70, v68, 1u, v63, v64);
  kaldi::CuVectorBase<float>::CopyFromVec<float>(v70, (uint64_t)&v80, v71, v72, v73);
  kaldi::Vector<float>::Destroy((uint64_t)&v80);
  kaldi::Matrix<float>::~Matrix((uint64_t)&v83);
  if (__p)
  {
    v90 = __p;
    operator delete(__p);
  }
  v83 = (void **)&v88;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v83);
  if (SHIBYTE(v91[2]) < 0)
    operator delete(v91[0]);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
}

void sub_1DE43C548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 145) < 0)
    operator delete(*(void **)(v22 - 168));
  if (*(char *)(v22 - 121) < 0)
    operator delete(*(void **)(v22 - 144));
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ConvolutionalComponent::WriteData(_DWORD *a1, _QWORD *a2, int a3)
{
  _DWORD *v6;
  uint64_t v7;
  const char *v8;

  v6 = a1 + 38;
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 168))(a1);
  kaldi::CuMatrixBase<float>::Write((uint64_t)(a1 + 26), a2, a3, 0);
  kaldi::CuVectorBase<float>::Write(v6, a2, a3, v7, v8);
}

uint64_t *kaldi::nnet1::ConvolutionalComponent::PropagateFnc(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  _DWORD *v14;
  int v15;
  int v16;
  int i;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v39;
  uint64_t v40;
  uint64_t *v41;
  _BYTE __p[40];

  v4 = result;
  v5 = *((_DWORD *)result + 2);
  v6 = *((_DWORD *)result + 24);
  v39 = *(_DWORD *)(a2 + 20);
  v7 = *((_DWORD *)result + 31);
  v37 = *((int *)result + 30);
  v41 = result + 38;
  v8 = (v6 - *((_DWORD *)result + 22)) / *((_DWORD *)result + 23);
  if (result[39] == result[38])
  {
    std::vector<kaldi::CuMatrix<float>>::resize(v41, v8 + 1);
    result = std::vector<kaldi::CuMatrix<float>>::resize(v4 + 41, v8 + 1);
    if (v8 < 0)
      return result;
  }
  else if (v8 < 0)
  {
    return result;
  }
  v36 = a3;
  v9 = 0;
  v35 = (uint64_t)(v4 + 13);
  v40 = (v8 + 1);
  v10 = v5 / v6;
  v11 = v37;
  do
  {
    kaldi::CuMatrix<float>::Resize(*v41 + 48 * v9, v39, v11, 0, 0);
    memset(__p, 0, 24);
    if (v10 < 1)
    {
      v28 = 0;
      v14 = 0;
    }
    else
    {
      v14 = 0;
      v15 = 0;
      v16 = *((_DWORD *)v4 + 22);
      do
      {
        if (v16 >= 1)
        {
          for (i = 0; i < v16; ++i)
          {
            v18 = i + *((_DWORD *)v4 + 23) * v9 + *((_DWORD *)v4 + 24) * v15;
            if ((unint64_t)v14 >= *(_QWORD *)&__p[16])
            {
              v19 = *(_DWORD **)__p;
              v20 = ((uint64_t)v14 - *(_QWORD *)__p) >> 2;
              v21 = v20 + 1;
              if ((unint64_t)(v20 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v22 = *(_QWORD *)&__p[16] - *(_QWORD *)__p;
              if ((uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)__p) >> 1 > v21)
                v21 = v22 >> 1;
              if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
                v23 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v23 = v21;
              if (v23)
              {
                v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p[16], v23);
                v19 = *(_DWORD **)__p;
                v14 = *(_DWORD **)&__p[8];
              }
              else
              {
                v24 = 0;
              }
              v25 = &v24[4 * v20];
              *(_DWORD *)v25 = v18;
              v26 = v25 + 4;
              while (v14 != v19)
              {
                v27 = *--v14;
                *((_DWORD *)v25 - 1) = v27;
                v25 -= 4;
              }
              *(_QWORD *)__p = v25;
              *(_QWORD *)&__p[8] = v26;
              *(_QWORD *)&__p[16] = &v24[4 * v23];
              if (v19)
                operator delete(v19);
              v14 = v26;
            }
            else
            {
              *v14++ = v18;
            }
            *(_QWORD *)&__p[8] = v14;
            v16 = *((_DWORD *)v4 + 22);
          }
        }
        ++v15;
      }
      while (v15 != v10);
      v28 = *(_QWORD *)__p;
      v11 = v37;
    }
    if (v11 != ((uint64_t)v14 - v28) >> 2)
      kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", (const char *)0x14C, "column_mask.size() == filter_dim", v13);
    kaldi::CuMatrixBase<float>::CopyCols(*v41 + 48 * v9, a2, (unsigned int **)__p, v12, v13);
    if (*(_QWORD *)__p)
    {
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      operator delete(*(void **)__p);
    }
    ++v9;
  }
  while (v9 != v40);
  v29 = 0;
  v30 = 0;
  v31 = (uint64_t)(v4 + 19);
  do
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)__p, v36, 0, *(_DWORD *)(v36 + 20), v30, v7);
    kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)__p, v31, v32, v33, v34, 1.0, 0.0);
    kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)__p, *v41 + v29, CblasNoTrans, v35, (const char *)0x70, 1.0, 1.0);
    *(_QWORD *)__p = &unk_1EA926508;
    memset(&__p[8], 0, 32);
    result = (uint64_t *)kaldi::CuMatrixBase<float>::~CuMatrixBase(__p);
    v30 = (const char *)((_DWORD)v30 + v7);
    v29 += 48;
  }
  while (48 * v40 != v29);
  return result;
}

void sub_1DE43C994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *kaldi::nnet1::ConvolutionalComponent::BackpropagateFnc(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  int v6;
  _DWORD *v9;
  uint64_t v10;
  const char *v11;
  int v12;
  int v13;
  uint64_t v14;
  int i;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  void *v25;
  __int128 v26;
  __int128 v27;

  v5 = result[24];
  v6 = (v5 - result[22]) / result[23];
  if ((v6 & 0x80000000) == 0)
  {
    v9 = result;
    v10 = 0;
    v11 = 0;
    v21 = (uint64_t)(result + 26);
    v20 = *(_DWORD *)(a2 + 20);
    v12 = result[31];
    v19 = result[30];
    v18 = (v6 + 1);
    v13 = result[2] / v5;
    do
    {
      kaldi::CuMatrix<float>::Resize(*((_QWORD *)v9 + 41) + v10, v20, v19, 0, 0);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v25, a4, 0, *(_DWORD *)(a4 + 20), v11, v12);
      kaldi::CuMatrixBase<float>::AddMatMat(*((_QWORD *)v9 + 41) + v10, (uint64_t)&v25, CblasNoTrans, v21, (const char *)0x6F, 1.0, 0.0);
      v25 = &unk_1EA926508;
      v26 = 0u;
      v27 = 0u;
      result = (_DWORD *)kaldi::CuMatrixBase<float>::~CuMatrixBase(&v25);
      v11 = (const char *)((_DWORD)v11 + v12);
      v10 += 48;
    }
    while (48 * v18 != v10);
    v14 = 0;
    do
    {
      if (v13 >= 1)
      {
        for (i = 0; i != v13; ++i)
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v25, *((_QWORD *)v9 + 41) + 48 * v14, 0, *(_DWORD *)(*((_QWORD *)v9 + 41) + 48 * v14 + 20), (const char *)(v9[22] * i), v9[22]);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v22, a5, 0, *(_DWORD *)(a5 + 20), (const char *)(v9[23] * v14 + v9[24] * i), v9[22]);
          kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v22, (uint64_t)&v25, 111, v16, v17, 1.0, 1.0);
          v22 = &unk_1EA926508;
          v23 = 0u;
          v24 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v22);
          v25 = &unk_1EA926508;
          v26 = 0u;
          v27 = 0u;
          result = (_DWORD *)kaldi::CuMatrixBase<float>::~CuMatrixBase(&v25);
        }
      }
      ++v14;
    }
    while (v14 != v18);
  }
  return result;
}

void sub_1DE43CBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _OWORD *v18;

  a18 = &unk_1EA926508;
  *v18 = 0u;
  v18[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a18);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalComponent::ReadData(float *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  BOOL v10;
  uint64_t v11;
  void *v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  float *v17;
  BOOL v19;
  BOOL v20;
  void **v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v28;
  BOOL v29;
  void *v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  const char *v36;
  const char *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  _QWORD *v48;
  void **v49;
  uint64_t v50;
  void *__p[2];
  uint64_t v52;
  void *v53[4];

  while (kaldi::Peek(a2, a3) == 60)
  {
    memset(v53, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v53, v6, v7);
    if ((SHIBYTE(v53[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v53[2]))
      {
        case 9:
          goto LABEL_85;
        case 0xA:
          v10 = v53[0] == (void *)0x694468637461503CLL && LOWORD(v53[1]) == 15981;
          v11 = (uint64_t)(a1 + 22);
          if (!v10)
            goto LABEL_119;
          goto LABEL_75;
        case 0xB:
          v25 = v53[0] == (void *)0x745368637461503CLL && *(void **)((char *)v53 + 3) == (void *)0x3E70657453686374;
          v11 = (uint64_t)(a1 + 23);
          if (!v25)
            goto LABEL_84;
          goto LABEL_75;
        case 0xD:
          v26 = v53[0] == (void *)0x745368637461503CLL && *(void **)((char *)v53 + 5) == (void *)0x3E65646972745368;
          v11 = (uint64_t)(a1 + 24);
          if (!v26)
            goto LABEL_84;
          goto LABEL_75;
        case 0xF:
          v24 = v53[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v53 + 7) == (void *)0x3E66656F43657461;
          v17 = a1 + 72;
          if (!v24)
            goto LABEL_84;
          goto LABEL_105;
        case 0x12:
          goto LABEL_91;
        case 0x13:
          v28 = v53[0] == (void *)0x61654C736169423CLL
             && v53[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v53[1] + 3) == (void *)0x3E66656F43657461;
          v17 = a1 + 73;
          if (v28)
            goto LABEL_105;
          if (HIBYTE(v53[2]) == 18)
          {
LABEL_91:
            if (v53[0] == (void *)0x6E6569646172473CLL
              && v53[1] == (void *)0x7079546D726F4E74
              && LOWORD(v53[2]) == 15973)
            {
              goto LABEL_110;
            }
          }
          else
          {
LABEL_84:
            if (HIBYTE(v53[2]) != 9)
              goto LABEL_119;
LABEL_85:
            v29 = v53[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v53[1]) == 62;
            v17 = a1 + 74;
            if (v29)
              goto LABEL_105;
          }
          if (HIBYTE(v53[2]) != 9)
            goto LABEL_119;
          v23 = v53;
          break;
        default:
          goto LABEL_119;
      }
      goto LABEL_100;
    }
    v12 = v53[1];
    if (v53[1] != (void *)10
      || (*(_QWORD *)v53[0] == 0x694468637461503CLL ? (v13 = *((unsigned __int16 *)v53[0] + 4) == 15981) : (v13 = 0),
          v11 = (uint64_t)(a1 + 22),
          !v13))
    {
      if (v53[1] == (void *)11)
      {
        v14 = *(_QWORD *)v53[0] == 0x745368637461503CLL && *(_QWORD *)((char *)v53[0] + 3) == 0x3E70657453686374;
        v11 = (uint64_t)(a1 + 23);
        if (v14)
          goto LABEL_75;
        v12 = v53[1];
      }
      if (v12 != (void *)13)
        goto LABEL_26;
      v15 = *(_QWORD *)v53[0] == 0x745368637461503CLL && *(_QWORD *)((char *)v53[0] + 5) == 0x3E65646972745368;
      v11 = (uint64_t)(a1 + 24);
      if (!v15)
      {
        v12 = v53[1];
LABEL_26:
        if (v12 == (void *)15)
        {
          v16 = *(_QWORD *)v53[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v53[0] + 7) == 0x3E66656F43657461;
          v17 = a1 + 72;
          if (!v16)
          {
            v12 = v53[1];
            goto LABEL_32;
          }
LABEL_105:
          kaldi::ReadBasicType<float>(a2, a3, v17, v8, v9);
          goto LABEL_106;
        }
LABEL_32:
        if (v12 == (void *)19)
        {
          v19 = *(_QWORD *)v53[0] == 0x61654C736169423CLL
             && *((_QWORD *)v53[0] + 1) == 0x6F43657461526E72
             && *(_QWORD *)((char *)v53[0] + 11) == 0x3E66656F43657461;
          v17 = a1 + 73;
          if (v19)
            goto LABEL_105;
          v12 = v53[1];
        }
        if (v12 == (void *)9)
        {
          v20 = *(_QWORD *)v53[0] == 0x6D726F4E78614D3CLL && *((_BYTE *)v53[0] + 8) == 62;
          v17 = a1 + 74;
          if (v20)
            goto LABEL_105;
          v12 = v53[1];
        }
        if (v12 == (void *)18)
        {
          if (*(_QWORD *)v53[0] == 0x6E6569646172473CLL
            && *((_QWORD *)v53[0] + 1) == 0x7079546D726F4E74
            && *((_WORD *)v53[0] + 8) == 15973)
          {
LABEL_110:
            __p[0] = 0;
            __p[1] = 0;
            v52 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)__p, v8, v9);
            *((_DWORD *)a1 + 46) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
            if (SHIBYTE(v52) < 0)
              operator delete(__p[0]);
            goto LABEL_106;
          }
          v12 = v53[1];
        }
        if (v12 != (void *)9)
          goto LABEL_119;
        v23 = (void **)v53[0];
LABEL_100:
        v32 = *v23;
        v33 = *((unsigned __int8 *)v23 + 8);
        v34 = v32 == (void *)0x6461724778614D3CLL && v33 == 62;
        v17 = a1 + 47;
        if (!v34)
        {
LABEL_119:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", 188);
          v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (SHIBYTE(v53[2]) >= 0)
            v49 = v53;
          else
            v49 = (void **)v53[0];
          if (SHIBYTE(v53[2]) >= 0)
            v50 = HIBYTE(v53[2]);
          else
            v50 = (uint64_t)v53[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v49, v50);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_105;
      }
    }
LABEL_75:
    kaldi::ReadBasicType<int>(a2, a3, v11, v8, v9);
LABEL_106:
    if (SHIBYTE(v53[2]) < 0)
      operator delete(v53[0]);
  }
  kaldi::CuMatrix<float>::Read((uint64_t)(a1 + 26), a2, a3, 0);
  kaldi::CuVector<float>::Read((uint64_t)(a1 + 38), a2, a3, v35, v36);
  v38 = *((_DWORD *)a1 + 2);
  v39 = *((_DWORD *)a1 + 24);
  v40 = v38 / v39;
  if (v38 % v39)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", (const char *)0xC8, "input_dim_ % patch_stride_ == 0", v37);
  v41 = *((_DWORD *)a1 + 22);
  v42 = *((_DWORD *)a1 + 23);
  v43 = v39 - v41;
  v44 = (v39 - v41) / v42;
  if (v43 % v42)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", (const char *)0xCB, "(patch_stride_ - patch_dim_) % patch_step_ == 0", v37);
  v45 = v44 + 1;
  v46 = *((_DWORD *)a1 + 3);
  v47 = v46 / (v44 + 1);
  if (v46 != v47 * v45)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", (const char *)0xD0, "output_dim_ % num_patches == 0", v37);
  if (v47 != *((_DWORD *)a1 + 31))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", (const char *)0xD3, "num_filters == filters_.NumRows()", v37);
  if (v47 != *((_DWORD *)a1 + 42))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", (const char *)0xD4, "num_filters == bias_.Dim()", v37);
  if (v40 * v41 != *((_DWORD *)a1 + 30))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", (const char *)0xD5, "filter_dim == filters_.NumCols()", v37);
}

void sub_1DE43D338()
{
  JUMPOUT(0x1DE43D340);
}

_QWORD *kaldi::nnet1::ConvolutionalComponent::WriteConfig(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  std::string __p;

  kaldi::WriteToken(a2, a3, (kaldi *)"<PatchDim>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PatchStep>", v8, v9);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PatchStride>", v10, v11);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v12, v13);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<BiasLearnRateCoef>", v14, v15);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxNorm>", v16, v17);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v18, v19);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 184), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v20, v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v22, v23);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

void sub_1DE43D4C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::ConvolutionalComponent::NumParams(kaldi::nnet1::ConvolutionalComponent *this)
{
  return (*((_DWORD *)this + 42) + *((_DWORD *)this + 30) * *((_DWORD *)this + 31));
}

_DWORD *kaldi::nnet1::ConvolutionalComponent::GetParams(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  v10 = a1[30] * a1[31];
  v16 = 0;
  v17 = 0;
  if (v10 > *(_DWORD *)(a2 + 8)
    || (v15 = *(void **)a2,
        LODWORD(v16) = v10,
        kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v15, (uint64_t)(a1 + 26), v7, v8, v9),
        v13 = a1[42],
        v16 = 0,
        v17 = 0,
        (v13 + v10) > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
  }
  v15 = (void *)(*(_QWORD *)a2 + 4 * v10);
  LODWORD(v16) = v13;
  return kaldi::CuVectorBase<float>::CopyToVec<float>(a1 + 38, (uint64_t)&v15, v11, v12, v9);
}

_DWORD *kaldi::nnet1::ConvolutionalComponent::SetParams(_DWORD *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 176))(a1))
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", (const char *)0x106, "wei_src.Dim() == NumParams()", v5);
  v6 = a1[30] * a1[31];
  v12 = 0;
  v13 = 0;
  if (v6 > *(_DWORD *)(a2 + 8)
    || (v11 = *(char **)a2,
        LODWORD(v12) = v6,
        kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 26), &v11),
        v9 = a1[42],
        v12 = 0,
        v13 = 0,
        (v9 + v6) > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v5);
  }
  v11 = (char *)(*(_QWORD *)a2 + 4 * v6);
  LODWORD(v12) = v9;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 38, (uint64_t)&v11, v7, v8, v5);
}

float kaldi::nnet1::ConvolutionalComponent::SumParams(kaldi::nnet1::ConvolutionalComponent *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v6;

  v6 = kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 104, a2, a3, a4, a5);
  return v6 + kaldi::CuVectorBase<float>::Sum((uint64_t)this + 152);
}

uint64_t kaldi::nnet1::ConvolutionalComponent::PerturbParams(kaldi::nnet1::ConvolutionalComponent *this, float a2)
{
  kaldi::nnet1::ConvolutionalComponent *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  _QWORD v16[4];
  _BYTE v17[48];

  v3 = this;
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v17, *((unsigned int *)this + 31), *((unsigned int *)this + 30), 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v17);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)v3 + 104, (uint64_t)v17, 111, v4, v5, a2, 1.0);
  v16[0] = &unk_1EA92DFD8;
  v16[1] = 0;
  v6 = *((_QWORD *)v3 + 22);
  v16[2] = 0;
  v16[3] = v6;
  kaldi::CuVector<float>::Resize((uint64_t)v16, *((unsigned int *)v3 + 42), 1u, v7, v8);
  v3 = (kaldi::nnet1::ConvolutionalComponent *)((char *)v3 + 152);
  kaldi::CuVectorBase<float>::CopyFromVec(v16, (uint64_t)v3, v9, v10, v11);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v16);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)v3, (uint64_t)v16, v12, v13, v14, a2, 1.0);
  v16[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v16);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v17);
}

void sub_1DE43D7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  kaldi::CuVector<float>::~CuVector(&a9);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalComponent::GetGradient(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 232))(v8, a2, a3, 0, 0);
  v12 = a1[30] * a1[31];
  v18 = 0;
  v19 = 0;
  if (v12 > *(_DWORD *)(a4 + 8)
    || (v17 = *(_QWORD *)a4,
        LODWORD(v18) = v12,
        kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v17, *(_QWORD *)(v8 + 192), v9, v10, v11),
        v15 = a1[42],
        v18 = 0,
        v19 = 0,
        (v15 + v12) > *(_DWORD *)(a4 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v11);
  }
  v17 = *(_QWORD *)a4 + 4 * v12;
  LODWORD(v18) = v15;
  kaldi::CuVectorBase<float>::CopyToVec<float>(*(_DWORD **)(v8 + 216), (uint64_t)&v17, v13, v14, v11);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void kaldi::nnet1::ConvolutionalComponent::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  __int128 v22;
  __int128 v23;

  kaldi::nnet1::ConvolutionalComponent::EnsureCorrs((kaldi::nnet1::ConvolutionalComponent *)a1);
  v10 = (*(_DWORD *)(a1 + 96) - *(_DWORD *)(a1 + 88)) / *(_DWORD *)(a1 + 92);
  v11 = *(_DWORD *)(a1 + 124);
  v12 = *(_DWORD *)(a2 + 20);
  v13 = a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 352) + 4 * a5) = v12;
  v14 = *(_QWORD *)(a1 + 192) + 48 * a5;
  *(_QWORD *)(v14 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 216) + 32 * a5 + 24) = a4;
  kaldi::CuMatrixBase<float>::SetZero(v14);
  kaldi::CuVectorBase<float>::SetZero(*(_QWORD *)(a1 + 216) + 32 * a5);
  if ((v10 & 0x80000000) == 0)
  {
    v15 = 0;
    v16 = 0;
    v17 = 48 * (v10 + 1);
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v21, a3, 0, *(_DWORD *)(a3 + 20), v16, v11);
      kaldi::CuMatrixBase<float>::AddMatMat(*(_QWORD *)(a1 + 192) + 48 * (int)v13, (uint64_t)&v21, CblasTrans, *(_QWORD *)(a1 + 304) + v15, (const char *)0x6F, 1.0, 1.0);
      kaldi::CuVectorBase<float>::AddRowSumMat(*(_QWORD *)(a1 + 216) + 32 * v13, (uint64_t)&v21, 1.0, 1.0, v18, v19, v20);
      v21 = &unk_1EA926508;
      v22 = 0u;
      v23 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v21);
      v16 = (const char *)((_DWORD)v16 + v11);
      v15 += 48;
    }
    while (v17 != v15);
  }
}

void sub_1DE43DA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _OWORD *v10;

  a10 = &unk_1EA926508;
  *v10 = 0u;
  v10[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalComponent::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 188) = a3;
  *(_DWORD *)(result + 184) = a2;
  *(_BYTE *)(result + 376) = 0;
  return result;
}

void kaldi::nnet1::ConvolutionalComponent::NormalizeGradients(kaldi::nnet1::ConvolutionalComponent *this, float a2, int a3, uint64_t a4, uint64_t a5, const char *a6)
{
  float v6;
  int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;

  v6 = a2;
  v8 = *((_DWORD *)this + 46);
  if (v8 == 3)
  {
    if (a2 >= 0.0 && a2 <= 1.0)
    {
      v11 = a3;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((_QWORD *)this + 24) + 48 * a3, *((_QWORD *)this + 30) + 48 * a3, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((_QWORD *)this + 27) + 32 * v11, *((_QWORD *)this + 33) + 32 * v11, v6, v12, v13, v14);
    }
  }
  else if (v8 == 2)
  {
    if (a2 > 0.0)
    {
      v15 = a3;
      if (*((_BYTE *)this + 84))
        v6 = (float)*(int *)(*((_QWORD *)this + 44) + 4 * a3) * a2;
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((_QWORD *)this + 24) + 48 * a3, (unsigned int *)(*((_QWORD *)this + 30) + 48 * a3), v6, a4, a5, a6);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((_QWORD *)this + 27) + 32 * v15, (_DWORD *)(*((_QWORD *)this + 33) + 32 * v15), v16, v17, v18, v6);
    }
  }
  else if (v8 == 1 && a2 > 0.0)
  {
    v9 = a3;
    if (*((_BYTE *)this + 84))
      v6 = (float)*(int *)(*((_QWORD *)this + 44) + 4 * a3) * a2;
    kaldi::nnet1::UpdatableComponent::ClipGradient(*((_QWORD *)this + 24) + 48 * a3, v6);
    kaldi::nnet1::UpdatableComponent::ClipGradient(*((_QWORD *)this + 27) + 32 * v9, v6);
  }
}

void kaldi::nnet1::ConvolutionalComponent::UpdateWeights(kaldi::nnet1::ConvolutionalComponent *this, void *a2, int a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  int *v26;
  int v27;
  int *v28;
  int v29;
  float v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  _BYTE *v53;
  _BYTE *v54;
  _QWORD v55[4];
  _QWORD v56[2];
  uint64_t v57;
  void *v58;
  _BYTE v59[48];

  kaldi::nnet1::ConvolutionalComponent::EnsureCorrs(this);
  v8 = *((unsigned int *)this + 20);
  if (a3 >= 0)
    v9 = a3;
  else
    v9 = *((_DWORD *)this + 20);
  if ((_DWORD)v8 == 1)
    v10 = 0;
  else
    v10 = v9;
  if ((int)v10 > (int)v8)
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", (const char *)0x1B9, "batch_idx <= opts_.num_subbatches", v7);
  v11 = (*((_DWORD *)this + 24) - *((_DWORD *)this + 22)) / *((_DWORD *)this + 23);
  v12 = *((float *)this + 14);
  v13 = *((_QWORD *)this + 24);
  v14 = v13 + 48 * (int)v10;
  *(_QWORD *)(v14 + 32) = a2;
  *(_QWORD *)(*((_QWORD *)this + 27) + 32 * (int)v10 + 24) = a2;
  *(_QWORD *)(*((_QWORD *)this + 30) + 48 * (int)v10 + 32) = a2;
  *(_QWORD *)(*((_QWORD *)this + 33) + 32 * (int)v10 + 24) = a2;
  if ((_DWORD)v10 == (_DWORD)v8)
  {
    kaldi::CuMatrixBase<float>::AddMat(v14, v13, 111, v6, v7, 1.0, 0.0);
    kaldi::CuVectorBase<float>::AddVec(*((_QWORD *)this + 27) + 32 * (int)v10, *((_QWORD *)this + 27), v15, v16, v17, 1.0, 0.0);
    if (*((int *)this + 20) > 1)
    {
      v20 = 1;
      v21 = 32;
      v22 = 48;
      do
      {
        kaldi::CuMatrixBase<float>::AddMat(*((_QWORD *)this + 24) + 48 * (int)v10, *((_QWORD *)this + 24) + v22, 111, v18, v19, 1.0, 1.0);
        kaldi::CuVectorBase<float>::AddVec(*((_QWORD *)this + 27) + 32 * (int)v10, *((_QWORD *)this + 27) + v21, v23, v24, v25, 1.0, 1.0);
        ++v20;
        v22 += 48;
        v21 += 32;
      }
      while (v20 < *((int *)this + 20));
    }
    v26 = (int *)*((_QWORD *)this + 44);
    v26[(int)v10] = 0;
    if ((int)v8 >= 1)
    {
      v27 = 0;
      v28 = v26;
      do
      {
        v29 = *v28++;
        v27 += v29;
        v26[(int)v10] = v27;
        --v8;
      }
      while (v8);
    }
  }
  if (*((_BYTE *)this + 84))
    v12 = v12 / (float)*(int *)(*((_QWORD *)this + 44) + 4 * (int)v10);
  v30 = 1.0 / (double)(v11 + 1);
  kaldi::CuMatrixBase<float>::Scale(*((_QWORD *)this + 24) + 48 * (int)v10, v30);
  kaldi::CuVectorBase<float>::Scale(*((_QWORD *)this + 27) + 32 * (int)v10, v30);
  if (*((float *)this + 47) >= 0.0)
    (*(void (**)(kaldi::nnet1::ConvolutionalComponent *, uint64_t))(*(_QWORD *)this + 248))(this, v10);
  *((_QWORD *)this + 17) = a2;
  *((_QWORD *)this + 22) = a2;
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 104, *((_QWORD *)this + 24) + 48 * (int)v10, 111, v31, v32, -(float)(v12 * *((float *)this + 72)), 1.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 152, *((_QWORD *)this + 27) + 32 * (int)v10, v33, v34, v35, -(float)(v12 * *((float *)this + 73)), 1.0);
  if (*((float *)this + 74) > 0.0)
  {
    kaldi::CuMatrix<float>::CuMatrix(v59, (char *)this + 104, 111);
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)v59, (uint64_t)this + 104, v36, v37, v38);
    v39 = *((unsigned int *)this + 31);
    v57 = 0;
    v58 = 0;
    v56[0] = &unk_1EA92DFD8;
    v56[1] = 0;
    kaldi::CuVector<float>::Resize((uint64_t)v56, v39, 0, v40, v41);
    v58 = a2;
    kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v56, (uint64_t)v59, 1.0, 0.0, v42, v43, v44);
    kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v56, 0.5);
    v55[0] = &unk_1EA92DFD8;
    v55[1] = 0;
    v55[2] = 0;
    v55[3] = v58;
    kaldi::CuVector<float>::Resize((uint64_t)v55, v57, 1u, v45, v46);
    kaldi::CuVectorBase<float>::CopyFromVec(v55, (uint64_t)v56, v47, v48, v49);
    kaldi::CuVectorBase<float>::Scale((uint64_t)v55, 1.0 / *((float *)this + 74));
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v55, 1.0);
    kaldi::CuVectorBase<float>::InvertElements((uint64_t)v55);
    kaldi::CuMatrixBase<float>::MulRowsVec((uint64_t)this + 104, (uint64_t)v55, v50, v51, v52);
    v55[0] = &unk_1EA92DFD8;
    kaldi::CuVector<float>::Destroy((uint64_t)v55);
    v56[0] = &unk_1EA92DFD8;
    kaldi::CuVector<float>::Destroy((uint64_t)v56);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v59);
  }
  v53 = (_BYTE *)*((_QWORD *)this + 44);
  if ((_DWORD)v10 == *((_DWORD *)this + 20))
  {
    v54 = (_BYTE *)*((_QWORD *)this + 45);
    if (v53 != v54)
      bzero(v53, ((v54 - v53 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  else
  {
    *(_DWORD *)&v53[4 * (int)v10] = 0;
  }
}

void sub_1DE43DF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AveragePoolingComponent::Copy(kaldi::nnet1::AveragePoolingComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1EA92D6D8;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1EA92A248;
  *(_OWORD *)(v2 + 48) = *((_OWORD *)this + 3);
  return v2;
}

void sub_1DE43E03C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C40E1B45FB4);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AveragePoolingComponent::GetType(kaldi::nnet1::AveragePoolingComponent *this)
{
  return 2050;
}

void kaldi::nnet1::AveragePoolingComponent::InitData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t *v6;
  float *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v19;
  BOOL v20;
  char **v22;
  uint64_t v23;
  int v24;
  _QWORD *v26;
  char **v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD v31[34];
  char *v32;
  uint64_t v33;
  uint64_t v34;

  v32 = 0;
  v33 = 0;
  v34 = 0;
  v6 = a2 + 4;
  v7 = (float *)(a1 + 60);
  v8 = (_DWORD *)(a1 + 56);
  v9 = (_DWORD *)(a1 + 52);
  v10 = (_DWORD *)(a1 + 48);
  while (1)
  {
    if ((*((_BYTE *)v6 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      goto LABEL_58;
    kaldi::ReadToken(a2, 0, (uint64_t)&v32, a4, a5);
    if ((SHIBYTE(v34) & 0x80000000) == 0)
    {
      if (HIBYTE(v34) != 7)
      {
        if (HIBYTE(v34) == 10)
        {
          v19 = v32 == (char *)0x7A69536C6F6F503CLL && (unsigned __int16)v33 == 15973;
          v13 = (uint64_t)v10;
          if (!v19)
          {
            v20 = v32 == (char *)0x6574536C6F6F503CLL && (unsigned __int16)v33 == 15984;
            v13 = (uint64_t)v9;
            if (!v20)
              goto LABEL_64;
          }
        }
        else
        {
          if (HIBYTE(v34) != 12)
            goto LABEL_64;
          v12 = v32 == (char *)0x7274536C6F6F503CLL && v33 == 1046832233;
          v13 = (uint64_t)v8;
          if (!v12)
          {
            v22 = &v32;
            goto LABEL_53;
          }
        }
        goto LABEL_49;
      }
      if ((_DWORD)v32 != 1633899324 || *(_DWORD *)((char *)&v32 + 3) != 1046834273)
        goto LABEL_64;
LABEL_48:
      kaldi::ReadBasicType<float>(a2, 0, v7, v11, a5);
      goto LABEL_50;
    }
    v14 = v33;
    if (v33 == 10)
    {
      v15 = *(_QWORD *)v32 == 0x7A69536C6F6F503CLL && *((_WORD *)v32 + 4) == 15973;
      v13 = (uint64_t)v10;
      if (v15)
        goto LABEL_49;
      v16 = *(_QWORD *)v32 == 0x6574536C6F6F503CLL && *((_WORD *)v32 + 4) == 15984;
      v13 = (uint64_t)v9;
      if (v16)
        goto LABEL_49;
      v14 = v33;
    }
    if (v14 != 12)
      goto LABEL_28;
    v17 = *(_QWORD *)v32 == 0x7274536C6F6F503CLL && *((_DWORD *)v32 + 2) == 1046832233;
    v13 = (uint64_t)v8;
    if (!v17)
      break;
LABEL_49:
    kaldi::ReadBasicType<int>(a2, 0, v13, v11, a5);
LABEL_50:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v14 = v33;
LABEL_28:
  if (v14 != 7)
    goto LABEL_51;
  if (*(_DWORD *)v32 == 1633899324 && *(_DWORD *)(v32 + 3) == 1046834273)
    goto LABEL_48;
  v14 = v33;
LABEL_51:
  if (v14 != 12)
    goto LABEL_64;
  v22 = (char **)v32;
LABEL_53:
  v23 = (uint64_t)*v22;
  v24 = *((_DWORD *)v22 + 2);
  if (v23 != 0x6E6F706D6F432F3CLL || v24 != 1047817829)
  {
LABEL_64:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-average-pooling-component.h", 61);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Unknown token ", 14);
    if (v34 >= 0)
      v27 = &v32;
    else
      v27 = (char **)v32;
    if (v34 >= 0)
      v28 = HIBYTE(v34);
    else
      v28 = v33;
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" (PoolSize|PoolStep|PoolStride|Scale)", 37);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
  }
LABEL_58:
  if (!*v10 || !*v9 || !*v8)
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-average-pooling-component.h", (const char *)0x42, "pool_size_ != 0 && pool_step_ != 0 && pool_stride_ != 0", a5);
  if (SHIBYTE(v34) < 0)
    operator delete(v32);
}

void sub_1DE43E3DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::AveragePoolingComponent::WriteData(int a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;

  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolSize>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolStep>", v7, v8);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolStride>", v9, v10);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<Scale>", v11, v12);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

float *kaldi::nnet1::AveragePoolingComponent::PropagateFnc(float *result, uint64_t a2, uint64_t a3)
{
  int v3;
  float *v6;
  int v7;
  int v8;
  int i;
  uint64_t v10;
  const char *v11;
  void *v13;
  __int128 v14;
  __int128 v15;
  void *v16;
  __int128 v17;
  __int128 v18;

  v3 = (*((_DWORD *)result + 2) / *((_DWORD *)result + 14) - *((_DWORD *)result + 12)) / *((_DWORD *)result + 13);
  if ((v3 & 0x80000000) == 0)
  {
    v6 = result;
    v7 = 0;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v16, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(*((_DWORD *)v6 + 14) * v7), *((_DWORD *)v6 + 14));
      kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v16);
      v8 = *((_DWORD *)v6 + 12);
      if (v8 >= 1)
      {
        for (i = 0; i < v8; ++i)
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v13, a2, 0, *(_DWORD *)(a2 + 20), (const char *)((i + v7 * *((_DWORD *)v6 + 13)) * *((_DWORD *)v6 + 14)), *((_DWORD *)v6 + 14));
          kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v16, (uint64_t)&v13, 111, v10, v11, 1.0, 1.0);
          v13 = &unk_1EA926508;
          v14 = 0u;
          v15 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v13);
          v8 = *((_DWORD *)v6 + 12);
        }
      }
      kaldi::CuMatrixBase<float>::Scale((uint64_t)&v16, v6[15] / (float)v8);
      v16 = &unk_1EA926508;
      v17 = 0u;
      v18 = 0u;
      result = (float *)kaldi::CuMatrixBase<float>::~CuMatrixBase(&v16);
    }
    while (v7++ != v3);
  }
  return result;
}

void sub_1DE43E608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _OWORD *v14;
  uint64_t v15;

  a14 = v15 + 16;
  *v14 = 0u;
  v14[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AveragePoolingComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  const char *v17;
  uint64_t i;
  const char *v20;
  int v21;
  float v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  std::vector<int>::value_type __x[2];
  __int128 v27;
  __int128 v28;
  std::vector<int> v29;

  v8 = *(_DWORD *)(a1 + 52);
  v9 = (*(_DWORD *)(a1 + 8) / *(_DWORD *)(a1 + 56));
  v10 = *(_DWORD *)(a1 + 48);
  __x[0] = 0;
  std::vector<int>::vector(&v29, (int)v9, __x);
  kaldi::CuMatrixBase<float>::SetZero(a5);
  v11 = *(_DWORD *)(a1 + 48);
  v12 = ((int)v9 - v10) / v8;
  if ((v12 & 0x80000000) == 0)
  {
    v13 = 0;
    do
    {
      if (v11 >= 1)
      {
        v14 = 0;
        do
        {
          v15 = *(_DWORD *)(a1 + 52);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)__x, a5, 0, *(_DWORD *)(a5 + 20), (const char *)((v14 + v13 * v15) * *(_DWORD *)(a1 + 56)), *(_DWORD *)(a1 + 56));
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v23, a4, 0, *(_DWORD *)(a4 + 20), (const char *)(*(_DWORD *)(a1 + 56) * v13), *(_DWORD *)(a1 + 56));
          kaldi::CuMatrixBase<float>::AddMat((uint64_t)__x, (uint64_t)&v23, 111, v16, v17, 1.0, 1.0);
          ++v29.__begin_[v14 + v13 * v15];
          v23 = &unk_1EA926508;
          v24 = 0u;
          v25 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v23);
          *(_QWORD *)__x = &unk_1EA926508;
          v27 = 0u;
          v28 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(__x);
          v11 = *(_DWORD *)(a1 + 48);
          ++v14;
        }
        while ((int)v14 < v11);
      }
    }
    while (v13++ != v12);
  }
  kaldi::CuMatrixBase<float>::Scale(a5, *(float *)(a1 + 60) / (float)v11);
  if ((int)v9 >= 1)
  {
    for (i = 0; i != v9; ++i)
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)__x, a5, 0, *(_DWORD *)(a5 + 20), (const char *)(*(_DWORD *)(a1 + 56) * i), *(_DWORD *)(a1 + 56));
      v21 = v29.__begin_[i];
      if (v21 <= 0)
        kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-average-pooling-component.h", (const char *)0x9E, "patch_summands[p] > 0", v20);
      v22 = 1.0 / (double)v21;
      kaldi::CuMatrixBase<float>::Scale((uint64_t)__x, v22);
      *(_QWORD *)__x = &unk_1EA926508;
      v27 = 0u;
      v28 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(__x);
    }
  }
  if (v29.__begin_)
  {
    v29.__end_ = v29.__begin_;
    operator delete(v29.__begin_);
  }
}

void sub_1DE43E894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::AveragePoolingComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  int v15;
  int v16;
  int v17;
  int v18;

  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolSize>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 48, v6, v7);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolStep>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 52, v8, v9);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolStride>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 56, v10, v11);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<Scale>");
  kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 60), v12, v13);
  v15 = *(_DWORD *)(a1 + 8);
  v16 = *(_DWORD *)(a1 + 56);
  if (v15 % v16)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-average-pooling-component.h", (const char *)0x54, "input_dim_ % pool_stride_ == 0", v14);
  v17 = v15 / v16 - *(_DWORD *)(a1 + 48);
  v18 = *(_DWORD *)(a1 + 52);
  if (v17 % v18)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-average-pooling-component.h", (const char *)0x57, "(num_patches - pool_size_) % pool_step_ == 0", v14);
  if (*(_DWORD *)(a1 + 12) != v16 + v16 * (v17 / v18))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-average-pooling-component.h", (const char *)0x5A, "output_dim_ == num_pools * pool_stride_", v14);
}

uint64_t kaldi::nnet1::MaxPoolingComponent::Copy(kaldi::nnet1::MaxPoolingComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1EA92D6D8;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1EA9298E8;
  *(_QWORD *)(v2 + 48) = *((_QWORD *)this + 6);
  *(_DWORD *)(v2 + 56) = *((_DWORD *)this + 14);
  return v2;
}

void sub_1DE43EB1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C401AC3E4D5);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MaxPoolingComponent::GetType(kaldi::nnet1::MaxPoolingComponent *this)
{
  return 2052;
}

void kaldi::nnet1::MaxPoolingComponent::InitData(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  _WORD **v19;
  uint64_t v20;
  int v21;
  _QWORD *v23;
  _WORD **v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[34];
  _WORD *v29;
  uint64_t v30;
  uint64_t v31;

  v29 = 0;
  v30 = 0;
  v31 = 0;
  v6 = a2 + 4;
  v7 = a1 + 14;
  v8 = a1 + 13;
  v9 = a1 + 12;
  while (1)
  {
    if ((*((_BYTE *)v6 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      goto LABEL_44;
    kaldi::ReadToken(a2, 0, (uint64_t)&v29, a4, a5);
    if ((SHIBYTE(v31) & 0x80000000) == 0)
    {
      if (HIBYTE(v31) == 10)
      {
        v17 = v29 == (_WORD *)0x7A69536C6F6F503CLL && (unsigned __int16)v30 == 15973;
        v12 = (uint64_t)v9;
        if (!v17)
        {
          v18 = v29 == (_WORD *)0x6574536C6F6F503CLL && (unsigned __int16)v30 == 15984;
          v12 = (uint64_t)v8;
          if (!v18)
            goto LABEL_50;
        }
      }
      else
      {
        if (HIBYTE(v31) != 12)
          goto LABEL_50;
        v11 = v29 == (_WORD *)0x7274536C6F6F503CLL && v30 == 1046832233;
        v12 = (uint64_t)v7;
        if (!v11)
        {
          v19 = &v29;
          goto LABEL_39;
        }
      }
      goto LABEL_36;
    }
    v13 = v30;
    if (v30 == 10)
    {
      v14 = *(_QWORD *)v29 == 0x7A69536C6F6F503CLL && v29[4] == 15973;
      v12 = (uint64_t)v9;
      if (v14)
        goto LABEL_36;
      v15 = *(_QWORD *)v29 == 0x6574536C6F6F503CLL && v29[4] == 15984;
      v12 = (uint64_t)v8;
      if (v15)
        goto LABEL_36;
      v13 = v30;
    }
    if (v13 != 12)
      goto LABEL_50;
    v16 = *(_QWORD *)v29 == 0x7274536C6F6F503CLL && *((_DWORD *)v29 + 2) == 1046832233;
    v12 = (uint64_t)v7;
    if (!v16)
      break;
LABEL_36:
    kaldi::ReadBasicType<int>(a2, 0, v12, v10, a5);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if (v30 != 12)
    goto LABEL_50;
  v19 = (_WORD **)v29;
LABEL_39:
  v20 = (uint64_t)*v19;
  v21 = *((_DWORD *)v19 + 2);
  if (v20 != 0x6E6F706D6F432F3CLL || v21 != 1047817829)
  {
LABEL_50:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-max-pooling-component.h", 60);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Unknown token ", 14);
    if (v31 >= 0)
      v24 = &v29;
    else
      v24 = (_WORD **)v29;
    if (v31 >= 0)
      v25 = HIBYTE(v31);
    else
      v25 = v30;
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" (PoolSize|PoolStep|PoolStride)", 31);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
  }
LABEL_44:
  if (!*v9 || !*v8 || !*v7)
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-max-pooling-component.h", (const char *)0x41, "pool_size_ != 0 && pool_step_ != 0 && pool_stride_ != 0", a5);
  if (SHIBYTE(v31) < 0)
    operator delete(v29);
}

void sub_1DE43EE28(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MaxPoolingComponent::WriteData(int a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;

  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolSize>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolStep>", v7, v8);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolStride>", v9, v10);
  return kaldi::WriteBasicType<int>(a2, (int)a3);
}

_DWORD *kaldi::nnet1::MaxPoolingComponent::PropagateFnc(_DWORD *result, uint64_t a2, uint64_t a3)
{
  int v3;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  void *v17;
  __int128 v18;
  __int128 v19;
  void *v20;
  __int128 v21;
  __int128 v22;

  v3 = (result[2] / result[14] - result[12]) / result[13];
  if ((v3 & 0x80000000) == 0)
  {
    v6 = result;
    v7 = 0;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v20, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(v6[14] * v7), v6[14]);
      kaldi::CuMatrixBase<float>::Set((uint64_t)&v20, v8, v9, v10, v11, -1.0e20);
      if ((int)v6[12] >= 1)
      {
        v12 = 0;
        do
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, a2, 0, *(_DWORD *)(a2 + 20), (const char *)((v12 + v7 * v6[13]) * v6[14]), v6[14]);
          kaldi::CuMatrixBase<float>::Max((uint64_t)&v20, (uint64_t)&v17, v13, v14, v15);
          v17 = &unk_1EA926508;
          v18 = 0u;
          v19 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v17);
          ++v12;
        }
        while (v12 < v6[12]);
      }
      v20 = &unk_1EA926508;
      v21 = 0u;
      v22 = 0u;
      result = (_DWORD *)kaldi::CuMatrixBase<float>::~CuMatrixBase(&v20);
    }
    while (v7++ != v3);
  }
  return result;
}

void sub_1DE43F024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _OWORD *v14;
  uint64_t v15;

  a14 = v15 + 16;
  *v14 = 0u;
  v14[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MaxPoolingComponent::BackpropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t i;
  const char *v26;
  int v27;
  float v28;
  uint64_t v29;
  int v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  char v34;
  std::vector<int>::value_type __x[2];
  __int128 v36;
  __int128 v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  void *v44;
  __int128 v45;
  __int128 v46;
  std::vector<int> v47;

  v10 = a1[13];
  v11 = (a1[2] / a1[14]);
  v12 = a1[12];
  __x[0] = 0;
  std::vector<int>::vector(&v47, (int)v11, __x);
  kaldi::CuMatrixBase<float>::SetZero(a5);
  v29 = v11;
  v30 = ((int)v11 - v12) / v10;
  if ((v30 & 0x80000000) == 0)
  {
    v13 = 0;
    v14 = a1[12];
    do
    {
      if (v14 >= 1)
      {
        v15 = 0;
        do
        {
          v16 = v13 * a1[13];
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v44, a2, 0, *(_DWORD *)(a2 + 20), (const char *)((v15 + v16) * a1[14]), a1[14]);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v41, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(a1[14] * v13), a1[14]);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v38, a5, 0, *(_DWORD *)(a5 + 20), (const char *)(a1[14] * (v15 + v16)), a1[14]);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v31, a4, 0, *(_DWORD *)(a4 + 20), (const char *)(a1[14] * v13), a1[14]);
          kaldi::CuMatrix<float>::CuMatrix(__x, &v31, 111);
          v31 = &unk_1EA926508;
          v32 = 0u;
          v33 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v31);
          v32 = 0u;
          v33 = 0u;
          v31 = &unk_1EA92DFA8;
          v34 = 0;
          kaldi::CuMatrixBase<float>::EqualElementMask((uint64_t)&v44, (uint64_t)&v41, (uint64_t)&v31, v17, v18);
          kaldi::CuMatrixBase<float>::MulElements((uint64_t)__x, (uint64_t)&v31, v19, v20, v21);
          kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v38, (uint64_t)__x, 111, v22, v23, 1.0, 1.0);
          ++v47.__begin_[v15 + v16];
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v31);
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)__x);
          v38 = &unk_1EA926508;
          v39 = 0u;
          v40 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v38);
          v41 = &unk_1EA926508;
          v42 = 0u;
          v43 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v41);
          v44 = &unk_1EA926508;
          v45 = 0u;
          v46 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v44);
          v14 = a1[12];
          ++v15;
        }
        while ((int)v15 < v14);
      }
    }
    while (v13++ != v30);
  }
  if ((int)v29 >= 1)
  {
    for (i = 0; i != v29; ++i)
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)__x, a5, 0, *(_DWORD *)(a5 + 20), (const char *)(a1[14] * i), a1[14]);
      v27 = v47.__begin_[i];
      if (v27 <= 0)
        kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-max-pooling-component.h", (const char *)0xA0, "patch_summands[p] > 0", v26);
      v28 = 1.0 / (double)v27;
      kaldi::CuMatrixBase<float>::Scale((uint64_t)__x, v28);
      *(_QWORD *)__x = &unk_1EA926508;
      v36 = 0u;
      v37 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(__x);
    }
  }
  if (v47.__begin_)
  {
    v47.__end_ = v47.__begin_;
    operator delete(v47.__begin_);
  }
}

void sub_1DE43F398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  void *v37;

  v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(_QWORD *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::MaxPoolingComponent::ReadData(_DWORD *a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t result;
  const char *v13;
  int v14;
  int v15;
  int v16;
  int v17;

  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolSize>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 12), v6, v7);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolStep>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 13), v8, v9);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolStride>");
  result = kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 14), v10, v11);
  v14 = a1[2];
  v15 = a1[14];
  if (v14 % v15)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-max-pooling-component.h", (const char *)0x51, "input_dim_ % pool_stride_ == 0", v13);
  v16 = v14 / v15 - a1[12];
  v17 = a1[13];
  if (v16 % v17)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-max-pooling-component.h", (const char *)0x54, "(num_patches - pool_size_) % pool_step_ == 0", v13);
  if (a1[3] != v15 + v15 * (v16 / v17))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-max-pooling-component.h", (const char *)0x57, "output_dim_ == num_pools * pool_stride_", v13);
  return result;
}

uint64_t kaldi::nnet1::TemporalMaxPoolingComponent::Copy(kaldi::nnet1::TemporalMaxPoolingComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1EA92D6D8;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1EA92BEB8;
  return v2;
}

void sub_1DE43F63C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C40DBBC96B9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::TemporalMaxPoolingComponent::GetType(kaldi::nnet1::TemporalMaxPoolingComponent *this)
{
  return 2058;
}

uint64_t kaldi::nnet1::TemporalMaxPoolingComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  void *v12;
  __int128 v13;
  __int128 v14;

  if (*(_DWORD *)(a3 + 20) != 1)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-temporal-max-pooling-component.h", (const char *)0x36, "out->NumRows() == 1", a5);
  result = kaldi::CuMatrixBase<float>::Set(a3, a2, a3, a4, a5, -1.0e20);
  if (*(int *)(a2 + 20) >= 1)
  {
    v8 = 0;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v12, a2, v8, 1, 0, *(_DWORD *)(a2 + 16));
      kaldi::CuMatrixBase<float>::Max(a3, (uint64_t)&v12, v9, v10, v11);
      v12 = &unk_1EA926508;
      v13 = 0u;
      v14 = 0u;
      result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v12);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a2 + 20));
  }
  return result;
}

void sub_1DE43F74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _OWORD *v10;
  uint64_t v11;

  a10 = v11 + 16;
  *v10 = 0u;
  v10[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::TemporalMaxPoolingComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  char v26;

  if (*(_DWORD *)(a3 + 20) != 1)
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-temporal-max-pooling-component.h", (const char *)0x43, "out.NumRows() == 1", a5);
  if (*(_DWORD *)(a4 + 20) != 1)
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-temporal-max-pooling-component.h", (const char *)0x44, "out_diff.NumRows() == 1", a5);
  v25 = 0u;
  v24 = 0u;
  v23 = &unk_1EA92DFA8;
  v26 = 0;
  v7 = *(_QWORD *)(a3 + 8);
  v8 = *(_DWORD *)(a3 + 16);
  v9 = *(_QWORD *)(a3 + 32);
  v19 = &unk_1EA926538;
  v20 = v7;
  v22 = v9;
  v21 = v8;
  kaldi::CuMatrixBase<float>::EqualElementColMask(a2, (uint64_t)&v19, (uint64_t)&v23, a4, a5);
  if (!*(_DWORD *)(a4 + 20))
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v12);
  v13 = *(_QWORD *)(a4 + 8);
  v14 = *(_DWORD *)(a4 + 16);
  v15 = *(_QWORD *)(a4 + 32);
  v19 = &unk_1EA926538;
  v20 = v13;
  v22 = v15;
  v21 = v14;
  kaldi::CuMatrixBase<float>::MulColsVec((uint64_t)&v23, (uint64_t)&v19, v10, v11, v12);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)a5, (uint64_t)&v23, 111, v16, v17, 1.0, 1.0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v23);
}

void sub_1DE43F8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AveragePooling2DComponent::Copy(kaldi::nnet1::AveragePooling2DComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1EA92D6D8;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1EA92B7A8;
  *(_OWORD *)(v2 + 48) = *((_OWORD *)this + 3);
  *(_QWORD *)(v2 + 64) = *((_QWORD *)this + 8);
  return v2;
}

void sub_1DE43F974(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C406EF1CAE1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AveragePooling2DComponent::GetType(kaldi::nnet1::AveragePooling2DComponent *this)
{
  return 2051;
}

void kaldi::nnet1::AveragePooling2DComponent::InitData(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  __int128 *v26;
  uint64_t v27;
  int v28;
  _QWORD *v30;
  __int128 *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  _QWORD v37[34];
  __int128 v38;
  uint64_t v39;

  v38 = 0uLL;
  v39 = 0;
  v6 = a2 + 4;
  v7 = a1 + 17;
  v8 = a1 + 16;
  v35 = a1 + 15;
  v36 = a1 + 14;
  v9 = a1 + 13;
  v10 = a1 + 12;
  while (1)
  {
    if ((*((_BYTE *)v6 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      goto LABEL_76;
    kaldi::ReadToken(a2, 0, (uint64_t)&v38, a4, a5);
    if (SHIBYTE(v39) < 0)
      break;
    if (HIBYTE(v39) == 10)
    {
      v19 = (_QWORD)v38 == 0x654C5870616D463CLL && WORD4(v38) == 15982;
      v13 = (uint64_t)v10;
      if (v19)
        goto LABEL_59;
      v20 = (_QWORD)v38 == 0x654C5970616D463CLL && WORD4(v38) == 15982;
      v13 = (uint64_t)v9;
      if (v20)
        goto LABEL_59;
      v21 = (_QWORD)v38 == 0x654C586C6F6F503CLL && WORD4(v38) == 15982;
      v13 = (uint64_t)v36;
      if (v21)
        goto LABEL_59;
      goto LABEL_43;
    }
    if (HIBYTE(v39) != 11)
    {
      if (HIBYTE(v39) == 12)
      {
        v26 = &v38;
        goto LABEL_71;
      }
      goto LABEL_80;
    }
    v12 = (_QWORD)v38 == 0x7453586C6F6F503CLL && *(_QWORD *)((char *)&v38 + 3) == 0x3E70657453586C6FLL;
    v13 = (uint64_t)v8;
    if (!v12)
    {
      v14 = (_QWORD)v38 == 0x7453596C6F6F503CLL && *(_QWORD *)((char *)&v38 + 3) == 0x3E70657453596C6FLL;
      v13 = (uint64_t)v7;
      if (!v14)
        goto LABEL_80;
    }
LABEL_59:
    kaldi::ReadBasicType<int>(a2, 0, v13, v11, a5);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v15 = *((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1) != 10)
    goto LABEL_48;
  v16 = *(_QWORD *)v38 == 0x654C5870616D463CLL && *(_WORD *)(v38 + 8) == 15982;
  v13 = (uint64_t)v10;
  if (v16)
    goto LABEL_59;
  v17 = *(_QWORD *)v38 == 0x654C5970616D463CLL && *(_WORD *)(v38 + 8) == 15982;
  v13 = (uint64_t)v9;
  if (v17)
    goto LABEL_59;
  v18 = *(_QWORD *)v38 == 0x654C586C6F6F503CLL && *(_WORD *)(v38 + 8) == 15982;
  v13 = (uint64_t)v36;
  if (v18)
    goto LABEL_59;
  if ((v39 & 0x8000000000000000) == 0)
  {
    if (HIBYTE(v39) != 10)
      goto LABEL_80;
LABEL_43:
    v22 = (_QWORD)v38 == 0x654C596C6F6F503CLL && WORD4(v38) == 15982;
    v13 = (uint64_t)v35;
    if (!v22)
      goto LABEL_80;
    goto LABEL_59;
  }
  v25 = *(_QWORD *)v38 == 0x654C596C6F6F503CLL && *(_WORD *)(v38 + 8) == 15982;
  v13 = (uint64_t)v35;
  if (v25)
    goto LABEL_59;
  v15 = *((_QWORD *)&v38 + 1);
LABEL_48:
  if (v15 != 11)
    goto LABEL_69;
  v23 = *(_QWORD *)v38 == 0x7453586C6F6F503CLL && *(_QWORD *)(v38 + 3) == 0x3E70657453586C6FLL;
  v13 = (uint64_t)v8;
  if (v23)
    goto LABEL_59;
  v15 = *((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1) != 11)
    goto LABEL_69;
  v24 = *(_QWORD *)v38 == 0x7453596C6F6F503CLL && *(_QWORD *)(v38 + 3) == 0x3E70657453596C6FLL;
  v13 = (uint64_t)v7;
  if (v24)
    goto LABEL_59;
  if ((v39 & 0x8000000000000000) == 0)
    goto LABEL_80;
LABEL_69:
  if (v15 != 12)
    goto LABEL_80;
  v26 = (__int128 *)v38;
LABEL_71:
  v27 = *(_QWORD *)v26;
  v28 = *((_DWORD *)v26 + 2);
  if (v27 != 0x6E6F706D6F432F3CLL || v28 != 1047817829)
  {
LABEL_80:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-average-pooling-2d-component.h", 65);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Unknown token ", 14);
    if (v39 >= 0)
      v31 = &v38;
    else
      v31 = (__int128 *)v38;
    if (v39 >= 0)
      v32 = HIBYTE(v39);
    else
      v32 = *((_QWORD *)&v38 + 1);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" (FmapXLen|FmapYLen|PoolXLen|PoolYLen|PoolXStep|PoolYStep)", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
  }
LABEL_76:
  if (!(*v9 * *v10 * *v36 * *v35 * *v8 * *v7))
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-average-pooling-2d-component.h", (const char *)0x46, "fmap_x_len_ * fmap_y_len_ * pool_x_len_ * pool_y_len_ * pool_x_step_ * pool_y_step_ != 0", a5);
  if (SHIBYTE(v39) < 0)
    operator delete((void *)v38);
}

void sub_1DE43FDF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AveragePooling2DComponent::WriteData(int a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;

  kaldi::WriteToken(a2, a3, (kaldi *)"<FmapXLen>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FmapYLen>", v7, v8);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolXLen>", v9, v10);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolYLen>", v11, v12);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolXStep>", v13, v14);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolYStep>", v15, v16);
  return kaldi::WriteBasicType<int>(a2, (int)a3);
}

float kaldi::nnet1::AveragePooling2DComponent::PropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int i;
  uint64_t v17;
  const char *v18;
  BOOL v19;
  float v20;
  float result;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  void *v32;
  __int128 v33;
  __int128 v34;

  v7 = a1[12];
  v6 = a1[13];
  v8 = a1[2] / (v6 * v7);
  v9 = a1[16];
  v22 = a1[15];
  v23 = a1[14];
  v10 = a1[17];
  kaldi::CuMatrixBase<float>::SetZero(a3);
  v24 = v8;
  if (v8 >= 1)
  {
    v28 = (v7 - v23) / v9;
    v25 = (v6 - v22) / v10;
    v26 = 0;
    do
    {
      if ((v25 & 0x80000000) == 0)
      {
        v27 = 0;
        do
        {
          if ((v28 & 0x80000000) == 0)
          {
            v11 = 0;
            do
            {
              kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v32, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(v11 + (v27 + v26 * (v25 + 1)) * (v28 + 1)), 1);
              v12 = a1[15];
              if (v12 >= 1)
              {
                v13 = 0;
                v14 = a1[14];
                v15 = a1[12] * (v27 * a1[17] + v26 * a1[13]) + a1[16] * v11;
                do
                {
                  if (v14 >= 1)
                  {
                    for (i = 0; i < v14; ++i)
                    {
                      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v29, a2, 0, *(_DWORD *)(a2 + 20), (const char *)(v15 + i + v13 * a1[12]), 1);
                      kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v32, (uint64_t)&v29, 111, v17, v18, 1.0, 1.0);
                      v29 = &unk_1EA926508;
                      v30 = 0u;
                      v31 = 0u;
                      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v29);
                      v14 = a1[14];
                    }
                    v12 = a1[15];
                  }
                  ++v13;
                }
                while (v13 < v12);
              }
              v32 = &unk_1EA926508;
              v33 = 0u;
              v34 = 0u;
              kaldi::CuMatrixBase<float>::~CuMatrixBase(&v32);
              v19 = v11++ == v28;
            }
            while (!v19);
          }
          v19 = v27++ == v25;
        }
        while (!v19);
      }
      ++v26;
    }
    while (v26 != v24);
  }
  v20 = 1.0 / (double)(v22 * v23);
  kaldi::CuMatrixBase<float>::Scale(a3, v20);
  return result;
}

void sub_1DE440178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _OWORD *v20;
  _OWORD *v21;

  a15 = &unk_1EA926508;
  *v21 = 0u;
  v21[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a15);
  a20 = &unk_1EA926508;
  *v20 = 0u;
  v20[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a20);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AveragePooling2DComponent::BackpropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  float v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int i;
  uint64_t v22;
  const char *v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  __int128 v34;
  __int128 v35;

  v9 = a1[12];
  v8 = a1[13];
  v10 = a1[2] / (v8 * v9);
  v11 = a1[14];
  v12 = a1[15];
  v14 = a1[16];
  v13 = a1[17];
  kaldi::CuMatrixBase<float>::SetZero(a5);
  v25 = v10;
  if (v10 >= 1)
  {
    v29 = (v9 - v11) / v14;
    v26 = (v8 - v12) / v13;
    v27 = 0;
    v15 = 1.0 / (double)(v12 * v11);
    do
    {
      if ((v26 & 0x80000000) == 0)
      {
        v28 = 0;
        do
        {
          if ((v29 & 0x80000000) == 0)
          {
            v16 = 0;
            do
            {
              kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v33, a4, 0, *(_DWORD *)(a4 + 20), (const char *)(v16 + (v28 + v27 * (v26 + 1)) * (v29 + 1)), 1);
              v17 = a1[15];
              if (v17 >= 1)
              {
                v18 = 0;
                v19 = a1[14];
                v20 = a1[12] * (v28 * a1[17] + v27 * a1[13]) + a1[16] * v16;
                do
                {
                  if (v19 >= 1)
                  {
                    for (i = 0; i < v19; ++i)
                    {
                      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v30, a5, 0, *(_DWORD *)(a5 + 20), (const char *)(v20 + i + v18 * a1[12]), 1);
                      kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v30, (uint64_t)&v33, 111, v22, v23, v15, 1.0);
                      v30 = &unk_1EA926508;
                      v31 = 0u;
                      v32 = 0u;
                      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v30);
                      v19 = a1[14];
                    }
                    v17 = a1[15];
                  }
                  ++v18;
                }
                while (v18 < v17);
              }
              v33 = &unk_1EA926508;
              v34 = 0u;
              v35 = 0u;
              kaldi::CuMatrixBase<float>::~CuMatrixBase(&v33);
              v24 = v16++ == v29;
            }
            while (!v24);
          }
          v24 = v28++ == v26;
        }
        while (!v24);
      }
      ++v27;
    }
    while (v27 != v25);
  }
}

void sub_1DE440418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _OWORD *v20;
  _OWORD *v21;

  a15 = &unk_1EA926508;
  *v20 = 0u;
  v20[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a15);
  a20 = &unk_1EA926508;
  *v21 = 0u;
  v21[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a20);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AveragePooling2DComponent::ReadData(_DWORD *a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  _QWORD v31[34];

  kaldi::ExpectToken(a2, a3, (kaldi *)"<FmapXLen>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 12), v6, v7);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<FmapYLen>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 13), v8, v9);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolXLen>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 14), v10, v11);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolYLen>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 15), v12, v13);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolXStep>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 16), v14, v15);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolYStep>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 17), v16, v17);
  v19 = a1[2];
  v20 = a1[12];
  v21 = a1[13] * v20;
  v22 = v19 / v21;
  if (v19 % v21)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-average-pooling-2d-component.h", (const char *)0x5D, "input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0", v18);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v31, "ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-average-pooling-2d-component.h", 95);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"num_fmaps ", 10);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v31);
    v20 = a1[12];
  }
  v23 = v20 - a1[14];
  v24 = a1[16];
  v25 = v23 / v24;
  if (v23 % v24)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-average-pooling-2d-component.h", (const char *)0x61, "(fmap_x_len_ - pool_x_len_) % (pool_x_step_) == 0", v18);
  v26 = a1[13] - a1[15];
  v27 = a1[17];
  v28 = v26 / v27;
  if (v26 % v27)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-average-pooling-2d-component.h", (const char *)0x62, "(fmap_y_len_ - pool_y_len_) % (pool_y_step_) == 0", v18);
  v29 = a1[3];
  v30 = v25 + 1 + (v25 + 1) * v28;
  if (v29 % v30)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-average-pooling-2d-component.h", (const char *)0x67, "output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0", v18);
  if (v22 != v29 / v30)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-average-pooling-2d-component.h", (const char *)0x69, "num_input_fmaps == num_output_fmaps", v18);
}

void sub_1DE440708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a9);
  _Unwind_Resume(a1);
}

kaldi::nnet1::MaxPooling2DComponent *kaldi::nnet1::MaxPooling2DComponent::Copy(kaldi::nnet1::MaxPooling2DComponent *this)
{
  kaldi::nnet1::MaxPooling2DComponent *v2;

  v2 = (kaldi::nnet1::MaxPooling2DComponent *)operator new();
  kaldi::nnet1::MaxPooling2DComponent::MaxPooling2DComponent(v2, this);
  return v2;
}

void sub_1DE440760(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C406EF1CAE1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MaxPooling2DComponent::GetType(kaldi::nnet1::MaxPooling2DComponent *this)
{
  return 2053;
}

void kaldi::nnet1::MaxPooling2DComponent::InitData(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  __int128 *v27;
  uint64_t v28;
  int v29;
  int v31;
  _QWORD *v32;
  __int128 *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  _QWORD v39[34];
  __int128 v40;
  uint64_t v41;

  v40 = 0uLL;
  v41 = 0;
  v7 = a2 + 4;
  v8 = a1 + 17;
  v9 = a1 + 16;
  v37 = a1 + 15;
  v38 = a1 + 14;
  v10 = a1 + 13;
  v11 = a1 + 12;
  while (1)
  {
    if ((*((_BYTE *)v7 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      goto LABEL_76;
    kaldi::ReadToken(a2, 0, (uint64_t)&v40, a4, a5);
    if (SHIBYTE(v41) < 0)
      break;
    if (HIBYTE(v41) == 10)
    {
      v20 = (_QWORD)v40 == 0x654C5870616D463CLL && WORD4(v40) == 15982;
      v14 = (uint64_t)v11;
      if (v20)
        goto LABEL_59;
      v21 = (_QWORD)v40 == 0x654C5970616D463CLL && WORD4(v40) == 15982;
      v14 = (uint64_t)v10;
      if (v21)
        goto LABEL_59;
      v22 = (_QWORD)v40 == 0x654C586C6F6F503CLL && WORD4(v40) == 15982;
      v14 = (uint64_t)v38;
      if (v22)
        goto LABEL_59;
      goto LABEL_43;
    }
    if (HIBYTE(v41) != 11)
    {
      if (HIBYTE(v41) == 12)
      {
        v27 = &v40;
        goto LABEL_71;
      }
      goto LABEL_81;
    }
    v13 = (_QWORD)v40 == 0x7453586C6F6F503CLL && *(_QWORD *)((char *)&v40 + 3) == 0x3E70657453586C6FLL;
    v14 = (uint64_t)v9;
    if (!v13)
    {
      v15 = (_QWORD)v40 == 0x7453596C6F6F503CLL && *(_QWORD *)((char *)&v40 + 3) == 0x3E70657453596C6FLL;
      v14 = (uint64_t)v8;
      if (!v15)
        goto LABEL_81;
    }
LABEL_59:
    kaldi::ReadBasicType<int>(a2, 0, v14, v12, a5);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v16 = *((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1) != 10)
    goto LABEL_48;
  v17 = *(_QWORD *)v40 == 0x654C5870616D463CLL && *(_WORD *)(v40 + 8) == 15982;
  v14 = (uint64_t)v11;
  if (v17)
    goto LABEL_59;
  v18 = *(_QWORD *)v40 == 0x654C5970616D463CLL && *(_WORD *)(v40 + 8) == 15982;
  v14 = (uint64_t)v10;
  if (v18)
    goto LABEL_59;
  v19 = *(_QWORD *)v40 == 0x654C586C6F6F503CLL && *(_WORD *)(v40 + 8) == 15982;
  v14 = (uint64_t)v38;
  if (v19)
    goto LABEL_59;
  if ((v41 & 0x8000000000000000) == 0)
  {
    if (HIBYTE(v41) != 10)
      goto LABEL_81;
LABEL_43:
    v23 = (_QWORD)v40 == 0x654C596C6F6F503CLL && WORD4(v40) == 15982;
    v14 = (uint64_t)v37;
    if (!v23)
      goto LABEL_81;
    goto LABEL_59;
  }
  v26 = *(_QWORD *)v40 == 0x654C596C6F6F503CLL && *(_WORD *)(v40 + 8) == 15982;
  v14 = (uint64_t)v37;
  if (v26)
    goto LABEL_59;
  v16 = *((_QWORD *)&v40 + 1);
LABEL_48:
  if (v16 != 11)
    goto LABEL_69;
  v24 = *(_QWORD *)v40 == 0x7453586C6F6F503CLL && *(_QWORD *)(v40 + 3) == 0x3E70657453586C6FLL;
  v14 = (uint64_t)v9;
  if (v24)
    goto LABEL_59;
  v16 = *((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1) != 11)
    goto LABEL_69;
  v25 = *(_QWORD *)v40 == 0x7453596C6F6F503CLL && *(_QWORD *)(v40 + 3) == 0x3E70657453596C6FLL;
  v14 = (uint64_t)v8;
  if (v25)
    goto LABEL_59;
  if ((v41 & 0x8000000000000000) == 0)
    goto LABEL_81;
LABEL_69:
  if (v16 != 12)
    goto LABEL_81;
  v27 = (__int128 *)v40;
LABEL_71:
  v28 = *(_QWORD *)v27;
  v29 = *((_DWORD *)v27 + 2);
  if (v28 != 0x6E6F706D6F432F3CLL || v29 != 1047817829)
  {
LABEL_81:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v39, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-max-pooling-2d-component.h", 116);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Unknown token ", 14);
    if (v41 >= 0)
      v33 = &v40;
    else
      v33 = (__int128 *)v40;
    if (v41 >= 0)
      v34 = HIBYTE(v41);
    else
      v34 = *((_QWORD *)&v40 + 1);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" (FmapXLen|FmapYLen|PoolXLen|PoolYLen|PoolXStep|PoolYStep)", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v39);
  }
LABEL_76:
  v31 = a1[13] * a1[12];
  if (a1[2] % v31)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v39, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-max-pooling-2d-component.h", 121);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Invalid component parameters", 28);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v39);
  }
  if (!(*v38 * v31 * *v37 * *v9 * *v8))
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-max-pooling-2d-component.h", (const char *)0x7A, "fmap_x_len_ * fmap_y_len_ * pool_x_len_ * pool_y_len_ * pool_x_step_ * pool_y_step_ != 0", a5);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)v40);
}

void sub_1DE440C48(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MaxPooling2DComponent::PropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t result;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int j;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  BOOL v25;
  int v26;
  int i;
  int v28;
  int v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  __int128 v34;
  __int128 v35;

  v9 = a1[12];
  v8 = a1[13];
  v10 = a1[2] / (v8 * v9);
  v12 = a1[14];
  v11 = a1[15];
  v14 = a1[16];
  v13 = a1[17];
  result = kaldi::CuMatrixBase<float>::Set(a3, a2, a3, a4, a5, -1.0e20);
  if (v10 >= 1)
  {
    v29 = (v9 - v12) / v14;
    v26 = (v8 - v11) / v13;
    for (i = 0; i != v10; ++i)
    {
      if ((v26 & 0x80000000) == 0)
      {
        v28 = 0;
        do
        {
          if ((v29 & 0x80000000) == 0)
          {
            v16 = 0;
            do
            {
              kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v33, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(v16 + (v28 + i * (v26 + 1)) * (v29 + 1)), 1);
              v17 = a1[15];
              if (v17 >= 1)
              {
                v18 = 0;
                v19 = a1[14];
                v20 = a1[12] * (v28 * a1[17] + i * a1[13]) + a1[16] * v16;
                do
                {
                  if (v19 >= 1)
                  {
                    for (j = 0; j < v19; ++j)
                    {
                      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v30, a2, 0, *(_DWORD *)(a2 + 20), (const char *)(v20 + j + v18 * a1[12]), 1);
                      kaldi::CuMatrixBase<float>::Max((uint64_t)&v33, (uint64_t)&v30, v22, v23, v24);
                      v30 = &unk_1EA926508;
                      v31 = 0u;
                      v32 = 0u;
                      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v30);
                      v19 = a1[14];
                    }
                    v17 = a1[15];
                  }
                  ++v18;
                }
                while (v18 < v17);
              }
              v33 = &unk_1EA926508;
              v34 = 0u;
              v35 = 0u;
              result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v33);
              v25 = v16++ == v29;
            }
            while (!v25);
          }
          v25 = v28++ == v26;
        }
        while (!v25);
      }
    }
  }
  return result;
}

void sub_1DE440E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _OWORD *v20;
  _OWORD *v21;

  a15 = &unk_1EA926508;
  *v21 = 0u;
  v21[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a15);
  a20 = &unk_1EA926508;
  *v20 = 0u;
  v20[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a20);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MaxPooling2DComponent::BackpropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int i;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  int v30;
  int v31;
  int v32;
  int v33;
  int v36;
  int v37;
  int v38;
  int v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  char v43;
  void *v44;
  __int128 v45;
  __int128 v46;
  void *v47;
  __int128 v48;
  __int128 v49;
  void *v50;
  __int128 v51;
  __int128 v52;
  void *v53;
  __int128 v54;
  __int128 v55;

  v9 = a1[12];
  v8 = a1[13];
  v10 = a1[2] / (v8 * v9);
  v12 = a1[14];
  v11 = a1[15];
  v14 = a1[16];
  v13 = a1[17];
  kaldi::CuMatrixBase<float>::SetZero(a5);
  if (v10 >= 1)
  {
    v32 = 0;
    v37 = (v9 - v12) / v14;
    v15 = (v8 - v11) / v13;
    v30 = v15 + 1;
    v31 = v15;
    do
    {
      if ((v15 & 0x80000000) == 0)
      {
        v33 = 0;
        do
        {
          if ((v37 & 0x80000000) == 0)
          {
            v16 = 0;
            v36 = (v33 + v32 * v30) * (v37 + 1);
            do
            {
              kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v53, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(v16 + v36), 1);
              kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v50, a4, 0, *(_DWORD *)(a4 + 20), (const char *)(v16 + v36), 1);
              v38 = v16;
              v17 = a1[15];
              if (v17 >= 1)
              {
                v18 = 0;
                v19 = a1[14];
                v39 = a1[12] * (v33 * a1[17] + v32 * a1[13]) + a1[16] * v38;
                do
                {
                  if (v19 >= 1)
                  {
                    for (i = 0; i < v19; ++i)
                    {
                      v21 = (const char *)(v39 + i + v18 * a1[12]);
                      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v47, a2, 0, *(_DWORD *)(a2 + 20), v21, 1);
                      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v44, a5, 0, *(_DWORD *)(a5 + 20), v21, 1);
                      v41 = 0u;
                      v42 = 0u;
                      v40 = &unk_1EA92DFA8;
                      v43 = 0;
                      kaldi::CuMatrixBase<float>::EqualElementMask((uint64_t)&v47, (uint64_t)&v53, (uint64_t)&v40, v22, v23);
                      kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v40, (uint64_t)&v50, v24, v25, v26);
                      kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v44, (uint64_t)&v40, 111, v27, v28, 1.0, 1.0);
                      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v40);
                      v44 = &unk_1EA926508;
                      v45 = 0u;
                      v46 = 0u;
                      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v44);
                      v47 = &unk_1EA926508;
                      v48 = 0u;
                      v49 = 0u;
                      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v47);
                      v19 = a1[14];
                    }
                    v17 = a1[15];
                  }
                  ++v18;
                }
                while (v18 < v17);
              }
              v50 = &unk_1EA926508;
              v51 = 0u;
              v52 = 0u;
              kaldi::CuMatrixBase<float>::~CuMatrixBase(&v50);
              v53 = &unk_1EA926508;
              v54 = 0u;
              v55 = 0u;
              kaldi::CuMatrixBase<float>::~CuMatrixBase(&v53);
              v16 = v38 + 1;
            }
            while (v38 != v37);
          }
          v15 = v31;
        }
        while (v33++ != v31);
      }
      ++v32;
    }
    while (v32 != v10);
  }
}

void sub_1DE4411FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _OWORD *a15)
{
  uint64_t v15;

  *(_QWORD *)(v15 - 128) = &unk_1EA926508;
  *a15 = 0u;
  a15[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v15 - 128);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MaxPooling2DComponent::ReadData(_DWORD *a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t result;
  const char *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;

  kaldi::ExpectToken(a2, a3, (kaldi *)"<FmapXLen>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 12), v6, v7);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<FmapYLen>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 13), v8, v9);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolXLen>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 14), v10, v11);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolYLen>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 15), v12, v13);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolXStep>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 16), v14, v15);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolYStep>");
  result = kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 17), v16, v17);
  v20 = a1[2];
  v22 = a1[12];
  v21 = a1[13];
  v23 = v20 / (v21 * v22);
  if (v20 % (v21 * v22))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-max-pooling-2d-component.h", (const char *)0x9D, "input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0", v19);
  v24 = (v22 - a1[14]) / a1[16] + 1;
  v25 = a1[3];
  v26 = v24 + v24 * ((v21 - a1[15]) / a1[17]);
  if (v25 % v26)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-max-pooling-2d-component.h", (const char *)0xA2, "output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0", v19);
  if (v23 != v25 / v26)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-max-pooling-2d-component.h", (const char *)0xA4, "num_input_fmaps == num_output_fmaps", v19);
  return result;
}

kaldi::nnet1::Desplice *kaldi::nnet1::Desplice::Copy(kaldi::nnet1::Desplice *this)
{
  kaldi::nnet1::Desplice *v2;

  v2 = (kaldi::nnet1::Desplice *)operator new();
  kaldi::nnet1::Desplice::Desplice(v2, this);
  return v2;
}

void sub_1DE4414A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1091C40A77886BBLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Desplice::GetType(kaldi::nnet1::Desplice *this)
{
  return 1027;
}

uint64_t kaldi::nnet1::Desplice::OutputRowCount(kaldi::nnet1::Desplice *this, int a2)
{
  return (*((_DWORD *)this + 2) / *((_DWORD *)this + 3) * a2);
}

void kaldi::nnet1::Desplice::InitData(kaldi::nnet1::Desplice *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t *v6;
  char *v7;
  char *v8;
  char *v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  __int128 *v17;
  uint64_t v18;
  int v19;
  _QWORD *v21;
  __int128 *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD v27[34];
  __int128 v28;
  uint64_t v29;

  v28 = 0uLL;
  v29 = 0;
  v6 = a2 + 4;
  v7 = (char *)a1 + 56;
  v8 = (char *)a1 + 52;
  v9 = (char *)a1 + 48;
  while (1)
  {
    if ((*((_BYTE *)v6 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      goto LABEL_48;
    kaldi::ReadToken(a2, 0, (uint64_t)&v28, a4, a5);
    if ((SHIBYTE(v29) & 0x80000000) == 0)
    {
      switch(HIBYTE(v29))
      {
        case 0xBu:
          v16 = (_QWORD)v28 == 0x69727453776F523CLL && *(_QWORD *)((char *)&v28 + 3) == 0x3E65646972745377;
          a3 = (uint64_t)v8;
          if (!v16)
            goto LABEL_51;
          break;
        case 0xCu:
          v15 = (_QWORD)v28 == 0x6E654C656D69543CLL && DWORD2(v28) == 1047032935;
          a3 = (uint64_t)v7;
          if (!v15)
          {
            v17 = &v28;
            goto LABEL_43;
          }
          break;
        case 0xEu:
          v10 = (_QWORD)v28 == 0x4C6563696C70533CLL && *(_QWORD *)((char *)&v28 + 6) == 0x3E6874676E654C65;
          a3 = (uint64_t)v9;
          if (!v10)
            goto LABEL_51;
          break;
        default:
          goto LABEL_51;
      }
      goto LABEL_40;
    }
    v11 = *((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1) == 11)
    {
      v13 = *(_QWORD *)v28 == 0x69727453776F523CLL && *(_QWORD *)(v28 + 3) == 0x3E65646972745377;
      a3 = (uint64_t)v8;
      if (v13)
        goto LABEL_40;
      v11 = *((_QWORD *)&v28 + 1);
    }
    else if (*((_QWORD *)&v28 + 1) == 14)
    {
      v12 = *(_QWORD *)v28 == 0x4C6563696C70533CLL && *(_QWORD *)(v28 + 6) == 0x3E6874676E654C65;
      a3 = (uint64_t)v9;
      if (v12)
        goto LABEL_40;
    }
    if (v11 != 12)
      goto LABEL_51;
    v14 = *(_QWORD *)v28 == 0x6E654C656D69543CLL && *(_DWORD *)(v28 + 8) == 1047032935;
    a3 = (uint64_t)v7;
    if (!v14)
      break;
LABEL_40:
    kaldi::ReadBasicType<int>(a2, 0, a3, a4, a5);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if (*((_QWORD *)&v28 + 1) != 12)
    goto LABEL_51;
  v17 = (__int128 *)v28;
LABEL_43:
  v18 = *(_QWORD *)v17;
  v19 = *((_DWORD *)v17 + 2);
  if (v18 != 0x6E6F706D6F432F3CLL || v19 != 1047817829)
  {
LABEL_51:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolution-splicer.h", 62);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Unknown token ", 14);
    if (v29 >= 0)
      v22 = &v28;
    else
      v22 = (__int128 *)v28;
    if (v29 >= 0)
      v23 = HIBYTE(v29);
    else
      v23 = *((_QWORD *)&v28 + 1);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" (FmapXLen|FmapYLen|PoolXLen|PoolYLen|PoolXStep|PoolYStep)", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
LABEL_48:
  kaldi::nnet1::Desplice::Init(a1, (uint64_t)a2, a3, a4, a5);
  if (SHIBYTE(v29) < 0)
    operator delete((void *)v28);
}

void sub_1DE4417E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Desplice::WriteData(int a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;

  kaldi::WriteToken(a2, a3, (kaldi *)"<SpliceLength>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<RowStride>", v7, v8);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<TimeLength>", v9, v10);
  return kaldi::WriteBasicType<int>(a2, (int)a3);
}

uint64_t kaldi::nnet1::Desplice::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;

  v5 = *(_DWORD *)(a1 + 52);
  if (*(_DWORD *)(a2 + 20) % v5)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolution-splicer.h", (const char *)0x5D, "(in.NumRows() % row_stride_) == 0", a5);
  return kaldi::CuMatrixBase<float>::CopyIndexedItems(a3, a2, (int *)(a1 + 64), a1 + 88, *(_DWORD *)(a2 + 24) * v5);
}

uint64_t kaldi::nnet1::Desplice::BackpropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;

  v5 = a1[12];
  if (*(_DWORD *)(a4 + 20) != v5 * *(_DWORD *)(a2 + 20))
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolution-splicer.h", (const char *)0x66, "out_diff.NumRows() == in.NumRows() * splice_length_", a5);
  return kaldi::CuMatrixBase<float>::CopyIndexedItems((uint64_t)a5, a4, a1 + 28, (uint64_t)(a1 + 34), a1[13] * v5 * *(_DWORD *)(a4 + 24));
}

void kaldi::nnet1::Desplice::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;

  v6 = a1 + 52;
  *(_QWORD *)(a1 + 48) = 0x100000001;
  v7 = a1 + 48;
  *(_DWORD *)(a1 + 56) = 1;
  v8 = a1 + 56;
  kaldi::ExpectToken(a2, a3, (kaldi *)"<SpliceLength>");
  kaldi::ReadBasicType<int>(a2, a3, v7, v9, v10);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<RowStride>");
  kaldi::ReadBasicType<int>(a2, a3, v6, v11, v12);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<TimeLength>");
  kaldi::ReadBasicType<int>(a2, a3, v8, v13, v14);
  kaldi::nnet1::Desplice::Init((kaldi::nnet1::Desplice *)a1, v15, v16, v17, v18);
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::Copy(kaldi::nnet1::SentenceAveragingComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1EA92D6D8;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)(v2 + 48) = &off_1EA9284D0;
  *(_OWORD *)(v2 + 56) = *(_OWORD *)((char *)this + 56);
  *(_OWORD *)(v2 + 71) = *(_OWORD *)((char *)this + 71);
  *(_QWORD *)v2 = &off_1EA92BA28;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(v2 + 88), (kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));
  *(_DWORD *)(v2 + 464) = *((_DWORD *)this + 116);
  return v2;
}

void sub_1DE441ACC(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent *v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  MEMORY[0x1DF0ED014](v1, 0x10B1C4008F8D91BLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::GetType(kaldi::nnet1::SentenceAveragingComponent *this)
{
  return 2049;
}

void kaldi::nnet1::SentenceAveragingComponent::Info(kaldi::nnet1::SentenceAveragingComponent *this@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  void *__p[2];
  unsigned __int8 v10;
  std::string v11;
  std::string v12;

  std::string::basic_string[abi:ne180100]<0>(&v11, "nested_network {\n");
  kaldi::nnet1::Nnet::Info((uint64_t *)__p, (kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));
  if ((v10 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v5 = v10;
  else
    v5 = (std::string::size_type)__p[1];
  v6 = std::string::append(&v11, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v12, "}\n");
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if ((char)v10 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1DE441BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::SentenceAveragingComponent::InfoGradient(kaldi::nnet1::SentenceAveragingComponent *this@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  void *__p[2];
  unsigned __int8 v10;
  std::string v11;
  std::string v12;

  std::string::basic_string[abi:ne180100]<0>(&v11, "nested_gradient {\n");
  kaldi::nnet1::Nnet::InfoGradient((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88), __p);
  if ((v10 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v5 = v10;
  else
    v5 = (std::string::size_type)__p[1];
  v6 = std::string::append(&v11, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v12, "}\n");
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if ((char)v10 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1DE441D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::SentenceAveragingComponent::InitData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t *v6;
  float *v7;
  uint64_t v8;
  const char *v9;
  BOOL v10;
  void **v12;
  BOOL v13;
  BOOL v14;
  uint64_t *v17;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  int v25;
  char v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  int v30;
  kaldi::nnet1::Nnet *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  _QWORD **v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD v42[34];
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;

  v49 = 0;
  v50 = 0;
  v51 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v6 = a2 + 4;
  v7 = (float *)(a1 + 464);
  v43 = 0;
  v44 = 0;
  v45 = 0;
  while ((*((_BYTE *)v6 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v43, a4, a5);
    if (SHIBYTE(v45) < 0)
    {
      if (v44 != 17)
      {
        if (v44 != 20
          || (*v43 == 0x4E64657473654E3CLL ? (v13 = v43[1] == 0x6E656C694674656ELL) : (v13 = 0),
              v13 ? (v14 = *((unsigned int *)v43 + 4) == 1046834529) : (v14 = 0),
              !v14))
        {
LABEL_82:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v42, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-sentence-averaging-component.h", 54);
          v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Unknown token ", 14);
          if (v45 >= 0)
            v37 = &v43;
          else
            v37 = (_QWORD **)v43;
          if (v45 >= 0)
            v38 = HIBYTE(v45);
          else
            v38 = v44;
          v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" Typo in config?", 16);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v42);
        }
        goto LABEL_14;
      }
      if (*v43 == 0x4E64657473654E3CLL && v43[1] == 0x6F746F725074656ELL && *((_BYTE *)v43 + 16) == 62)
      {
LABEL_50:
        v12 = &v46;
        goto LABEL_51;
      }
      v17 = v43;
    }
    else
    {
      if (HIBYTE(v45) != 17)
      {
        if (HIBYTE(v45) != 20)
          goto LABEL_82;
        v10 = v43 == (_QWORD *)0x4E64657473654E3CLL && v44 == 0x6E656C694674656ELL;
        if (!v10 || v45 != 1046834529)
          goto LABEL_82;
LABEL_14:
        v12 = &v49;
LABEL_51:
        kaldi::ReadToken(a2, 0, (uint64_t)v12, v8, v9);
        goto LABEL_52;
      }
      if (v43 == (_QWORD *)0x4E64657473654E3CLL && v44 == 0x6F746F725074656ELL && v45 == 62)
        goto LABEL_50;
      v17 = (uint64_t *)&v43;
    }
    v20 = *v17;
    v21 = (_QWORD *)v17[1];
    v22 = *((unsigned __int8 *)v17 + 16);
    if (v20 != 0x61526E7261654C3CLL || v21 != (_QWORD *)0x726F746361466574 || v22 != 62)
      goto LABEL_82;
    kaldi::ReadBasicType<float>(a2, 0, v7, v8, v9);
LABEL_52:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v25 = HIBYTE(v48);
  if (SHIBYTE(v48) < 0)
  {
    if (!v47)
      goto LABEL_57;
LABEL_55:
    v26 = 1;
  }
  else
  {
    if (HIBYTE(v48))
      goto LABEL_55;
LABEL_57:
    v26 = 0;
  }
  if (SHIBYTE(v51) < 0)
  {
    if (!v50)
      goto LABEL_67;
LABEL_60:
    if ((v26 & 1) == 0)
      goto LABEL_61;
LABEL_68:
    v28 = "(nested_nnet_proto != \"\") ^ (nested_nnet_filename != \"\")";
    v29 = 58;
LABEL_91:
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-sentence-averaging-component.h", (const char *)v29, v28, a5);
  }
  if (HIBYTE(v51))
    goto LABEL_60;
LABEL_67:
  if ((v26 & 1) == 0)
    goto LABEL_68;
LABEL_61:
  if ((v51 & 0x8000000000000000) == 0)
  {
    if (!HIBYTE(v51))
      goto LABEL_63;
LABEL_70:
    kaldi::nnet1::Nnet::Read(a1 + 88, (uint64_t)&v49);
    v25 = HIBYTE(v48);
    if (v48 < 0)
      goto LABEL_71;
LABEL_64:
    v27 = a1;
    if (!v25)
      goto LABEL_73;
LABEL_72:
    kaldi::nnet1::Nnet::Init((kaldi::nnet1::Nnet *)(v27 + 88), (uint64_t)&v46, a3);
    goto LABEL_73;
  }
  if (v50)
    goto LABEL_70;
LABEL_63:
  if ((v48 & 0x8000000000000000) == 0)
    goto LABEL_64;
LABEL_71:
  v27 = a1;
  if (v47)
    goto LABEL_72;
LABEL_73:
  v30 = *(_DWORD *)(v27 + 8);
  v31 = (kaldi::nnet1::Nnet *)(v27 + 88);
  if (v30 != kaldi::nnet1::Nnet::InputDim(v31, (uint64_t)a2, a3, a4, a5))
  {
    v28 = "InputDim() == nnet_.InputDim()";
    v29 = 62;
    goto LABEL_91;
  }
  v35 = *(_DWORD *)(a1 + 12);
  if (v35 != *(_DWORD *)(a1 + 8) + kaldi::nnet1::Nnet::OutputDim(v31, v32, v33, v34, a5))
  {
    v28 = "OutputDim() == nnet_.OutputDim() + InputDim()";
    v29 = 63;
    goto LABEL_91;
  }
  if (SHIBYTE(v45) < 0)
    operator delete(v43);
  if (SHIBYTE(v48) < 0)
    operator delete(v46);
  if (SHIBYTE(v51) < 0)
    operator delete(v49);
}

void sub_1DE44210C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::SentenceAveragingComponent::WriteData(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::Nnet::Write((uint64_t *)(a1 + 88), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::Nnet *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  int v14;
  uint64_t v15;
  const char *v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  void *v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[3];
  uint64_t v31;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;

  v33 = 0;
  v34 = 0;
  v32[0] = &unk_1EA92DFA8;
  v32[1] = 0;
  v36 = 0;
  v35 = *(_QWORD *)(a3 + 32);
  v7 = (kaldi::nnet1::Nnet *)(a1 + 88);
  kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>((uint64_t *)(a1 + 88), a2, (uint64_t)v32, a4, a5);
  v8 = *(_DWORD *)(a2 + 16);
  v13 = (const char *)kaldi::nnet1::Nnet::OutputDim(v7, v9, v10, v11, v12);
  v14 = HIDWORD(v33);
  v30[0] = &unk_1EA92DFD8;
  v30[1] = 0;
  v30[2] = 0;
  v31 = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v30, (uint64_t)v13, 0, v15, v16);
  v31 = *(_QWORD *)(a3 + 32);
  v17 = 1.0 / (double)v14;
  kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)v30, (uint64_t)v32, v17, 0.0, v18, v19, v20);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v27, a3, 0, *(_DWORD *)(a3 + 20), 0, (int)v13);
  kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&v27, (uint64_t)v30, v21, v22, v23, 1.0, 0.0);
  v27 = &unk_1EA926508;
  v28 = 0u;
  v29 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v27);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v27, a3, 0, *(_DWORD *)(a3 + 20), v13, v8);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v27, a2, 111, v24, v25);
  v27 = &unk_1EA926508;
  v28 = 0u;
  v29 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v27);
  v30[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v30);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v32);
}

void sub_1DE4422CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v4 = v2 + 16;
  v6 = 0u;
  v7 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase((uint64_t *)va);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va1);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::BackpropagateFnc(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  int v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  void *v11;
  __int128 v12;
  __int128 v13;

  if (a5)
  {
    v7 = *(_DWORD *)(a2 + 16);
    v8 = (const char *)kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(result + 88), a2, a3, a4, a5);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v11, a4, 0, *(_DWORD *)(a4 + 20), v8, v7);
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a5, (uint64_t)&v11, 111, v9, v10);
    v11 = &unk_1EA926508;
    v12 = 0u;
    v13 = 0u;
    return kaldi::CuMatrixBase<float>::~CuMatrixBase(&v11);
  }
  return result;
}

void sub_1DE4423C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, __int128 a11, __int128 a12)
{
  a10 = &unk_1EA926508;
  a11 = 0u;
  a12 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::ReadData(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::Nnet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t result;
  const char *v15;

  v5 = (kaldi::nnet1::Nnet *)(a1 + 11);
  kaldi::nnet1::Nnet::Read(a1 + 11, a2, a3, a4);
  if (kaldi::nnet1::Nnet::InputDim(v5, v6, v7, v8, v9) != *((_DWORD *)a1 + 2))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-sentence-averaging-component.h", (const char *)0x44, "nnet_.InputDim() == InputDim()", v13);
  result = kaldi::nnet1::Nnet::OutputDim(v5, v10, v11, v12, v13);
  if (*((_DWORD *)a1 + 2) + (_DWORD)result != *((_DWORD *)a1 + 3))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-sentence-averaging-component.h", (const char *)0x45, "nnet_.OutputDim() + InputDim() == OutputDim()", v15);
  return result;
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::NumParams(kaldi::nnet1::SentenceAveragingComponent *this)
{
  return kaldi::nnet1::Nnet::NumParams((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::GetParams(uint64_t a1, void **a2)
{
  kaldi::nnet1::Nnet *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;

  v3 = (kaldi::nnet1::Nnet *)(a1 + 88);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0, v5, v6);
  return kaldi::nnet1::Nnet::GetParams(v3, (uint64_t)a2);
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::SetParams(uint64_t a1, uint64_t a2)
{
  int v4;
  const char *v5;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../engine/common/libquasar/libkaldi/src/nnet/nnet-sentence-averaging-component.h", (const char *)0x50, "wei_src.Dim() == NumParams()", v5);
  return kaldi::nnet1::Nnet::SetParams((kaldi::nnet1::Nnet *)(a1 + 88), a2);
}

float kaldi::nnet1::SentenceAveragingComponent::SumParams(kaldi::nnet1::SentenceAveragingComponent *this)
{
  return kaldi::nnet1::Nnet::SumParams((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));
}

void kaldi::nnet1::SentenceAveragingComponent::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  const void ***v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  _QWORD v24[4];

  v8 = (const void ***)(a1 + 88);
  v9 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 88), a2, a3, a4, a5);
  v10 = *(unsigned int *)(a3 + 20);
  v24[0] = &unk_1EA92DFD8;
  v24[1] = 0;
  v24[2] = 0;
  v24[3] = a4;
  kaldi::CuVector<float>::Resize((uint64_t)v24, v9, 1u, v11, v12);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v21, a3, 0, *(_DWORD *)(a3 + 20), 0, v9);
  v13 = 1.0 / (double)(int)v10;
  kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)v24, (uint64_t)&v21, v13, 0.0, v14, v15, v16);
  v21 = &unk_1EA926508;
  v22 = 0u;
  v23 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v21);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)&v21, v10, v9, 1u, a4, 0);
  kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&v21, (uint64_t)v24, v17, v18, v19, 1.0, 0.0);
  kaldi::nnet1::Nnet::Backpropagate(v8, (uint64_t)&v21, 0, (uint64_t)a5, v20);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v21);
  v24[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v24);
}

void sub_1DE442678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::SentenceAveragingComponent::UpdateWeights(const void ***this, void *a2, uint64_t a3)
{
  kaldi::nnet1::Nnet::Update(this + 11, a2, a3);
}

void kaldi::nnet1::SentenceAveragingComponent::SetTrainOptions(kaldi::nnet1::SentenceAveragingComponent *this, const kaldi::nnet1::NnetTrainOptions *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  void (**v5)(kaldi::nnet1::NnetTrainOptions *__hidden);
  float v6[8];

  v5 = &off_1EA9284D0;
  *(_OWORD *)v6 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)&v6[3] + 3) = *(_OWORD *)((char *)a2 + 23);
  v6[0] = *((float *)this + 116) * v6[0];
  kaldi::nnet1::Nnet::SetTrainOptions((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88), (kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 48), 1, a4, a5);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)&v5);
}

void sub_1DE442740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)va);
  _Unwind_Resume(a1);
}

kaldi::nnet1::FramePoolingComponent *kaldi::nnet1::FramePoolingComponent::Copy(kaldi::nnet1::FramePoolingComponent *this)
{
  kaldi::nnet1::FramePoolingComponent *v2;

  v2 = (kaldi::nnet1::FramePoolingComponent *)operator new();
  kaldi::nnet1::FramePoolingComponent::FramePoolingComponent(v2, this);
  return v2;
}

void sub_1DE442798(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40B638E8C8);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::FramePoolingComponent::GetType(kaldi::nnet1::FramePoolingComponent *this)
{
  return 2054;
}

uint64_t kaldi::nnet1::FramePoolingComponent::Info(kaldi::nnet1::FramePoolingComponent *this)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n  (offset,weights) : ", 22);
  if (*((_QWORD *)this + 16) != *((_QWORD *)this + 15))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
      v4 = (_QWORD *)std::ostream::operator<<();
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)",", 1);
      kaldi::VectorBase<float>::Write(*((_QWORD *)this + 15) + v2, v5, 0);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"), ", 3);
      ++v3;
      v2 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 16) - *((_QWORD *)this + 15)) >> 3) > v3);
  }
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v9);
}

void sub_1DE44293C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::FramePoolingComponent::InfoGradient(kaldi::nnet1::FramePoolingComponent *this)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  char *v8;
  _QWORD v10[11];
  char v11;
  uint64_t v12;
  _BYTE v13[16];
  void *v14[2];
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n  lr-coef ", 11);
  kaldi::nnet1::ToString<float>();
  if ((v15 & 0x80u) == 0)
    v3 = v14;
  else
    v3 = (void **)v14[0];
  if ((v15 & 0x80u) == 0)
    v4 = v15;
  else
    v4 = (uint64_t)v14[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  if ((char)v15 < 0)
    operator delete(v14[0]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n  (offset,weights_grad) : ", 27);
  if (*((_QWORD *)this + 19) != *((_QWORD *)this + 18))
  {
    v5 = 0;
    v6 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      v7 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)",", 1);
      kaldi::VectorBase<float>::Write(*((_QWORD *)this + 18) + v5, v10, 0);
      MEMORY[0x1DF0ECC6C](v13, v10);
      v8 = (char *)v10 + *(_QWORD *)(v10[0] - 24);
      if ((v8[32] & 5) == 0)
      {
        (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)v8 + 5) + 32))(v14, *((_QWORD *)v8 + 5), -1, 1, 16);
        if (v16 == -1)
          std::ios_base::clear((std::ios_base *)((char *)v10 + *(_QWORD *)(v10[0] - 24)), *(_DWORD *)((char *)&v10[4] + *(_QWORD *)(v10[0] - 24)) | 4);
      }
      MEMORY[0x1DF0ECC78](v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"), ", 3);
      ++v6;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3) > v6);
  }
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v12);
}

void sub_1DE442BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (*(char *)(v9 - 209) < 0)
    operator delete(*(void **)(v9 - 232));
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FramePoolingComponent::InitData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  __int128 *v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  std::vector<int> *v19;
  uint64_t v26;
  int v27;
  int v28;
  int **v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _DWORD *v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  float v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int *v50;
  const char *v51;
  int v52;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  __int128 *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  const char *v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  _BYTE *v73;
  uint64_t v74;
  _DWORD *v75;
  _DWORD *v76;
  uint64_t v77;

  v7 = &v66;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v8 = a2 + 4;
  v68 = 1008981770;
  v9 = (char *)(a1 + 172);
  v62 = (int *)(a1 + 88);
  v66 = 0uLL;
  v67 = 0;
  while (1)
  {
    if ((*((_BYTE *)v8 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      goto LABEL_86;
    kaldi::ReadToken(a2, 0, (uint64_t)&v66, a4, a5);
    if ((SHIBYTE(v67) & 0x80000000) == 0)
      break;
    v12 = *((_QWORD *)&v66 + 1);
    if (*((_QWORD *)&v66 + 1) == 12 && *(_QWORD *)v66 == 0x657275746165463CLL && *(_DWORD *)(v66 + 8) == 1047357764)
    {
LABEL_69:
      kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v62, v10, a5);
      goto LABEL_77;
    }
    if (*((_QWORD *)&v66 + 1) == 15)
    {
      if (*(_QWORD *)v66 == 0x6C6172746E65433CLL && *(_QWORD *)(v66 + 7) == 0x3E74657366664F6CLL)
      {
LABEL_67:
        v19 = (std::vector<int> *)&v72;
        goto LABEL_68;
      }
      v12 = *((_QWORD *)&v66 + 1);
    }
    if (v12 == 10)
    {
      if (*(_QWORD *)v66 == 0x7A69536C6F6F503CLL && *(_WORD *)(v66 + 8) == 15973)
      {
LABEL_45:
        v19 = (std::vector<int> *)&v75;
LABEL_68:
        kaldi::ReadIntegerVector<int>(a2, 0, v19, 0, 0, 0, 0);
        goto LABEL_77;
      }
      v12 = *((_QWORD *)&v66 + 1);
    }
    if (v12 == 12)
    {
      if (*(_QWORD *)v66 == 0x6965576C6F6F503CLL && *(_DWORD *)(v66 + 8) == 1047816295)
      {
LABEL_70:
        kaldi::Vector<float>::Read((uint64_t)&v69, a2, 0, 0, a5);
        goto LABEL_77;
      }
      v12 = *((_QWORD *)&v66 + 1);
    }
    if (v12 != 15)
      goto LABEL_39;
    if (*(_QWORD *)v66 != 0x61526E7261654C3CLL || *(_QWORD *)(v66 + 7) != 0x3E66656F43657461)
    {
      v12 = *((_QWORD *)&v66 + 1);
LABEL_39:
      if (v12 != 11)
        goto LABEL_78;
      if (*(_QWORD *)v66 != 0x696C616D726F4E3CLL || *(_QWORD *)(v66 + 3) != 0x3E657A696C616D72)
      {
        v12 = *((_QWORD *)&v66 + 1);
LABEL_78:
        if (v12 == 12)
        {
          v7 = (__int128 *)v66;
          goto LABEL_81;
        }
        goto LABEL_127;
      }
LABEL_66:
      kaldi::ReadBasicType<BOOL>(a2, 0, v9, v10, a5);
      goto LABEL_77;
    }
LABEL_76:
    kaldi::ReadBasicType<float>(a2, 0, (float *)&v68, v10, a5);
LABEL_77:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  switch(HIBYTE(v67))
  {
    case 0xA:
LABEL_5:
      if ((_QWORD)v66 != 0x7A69536C6F6F503CLL || WORD4(v66) != 15973)
        goto LABEL_127;
      goto LABEL_45;
    case 0xB:
      goto LABEL_61;
    case 0xC:
      if ((_QWORD)v66 == 0x657275746165463CLL && DWORD2(v66) == 1047357764)
        goto LABEL_69;
LABEL_50:
      if ((_QWORD)v66 == 0x6965576C6F6F503CLL && DWORD2(v66) == 1047816295)
        goto LABEL_70;
LABEL_54:
      if (HIBYTE(v67) == 11)
      {
LABEL_61:
        if ((_QWORD)v66 != 0x696C616D726F4E3CLL || *(_QWORD *)((char *)&v66 + 3) != 0x3E657A696C616D72)
          goto LABEL_127;
        goto LABEL_66;
      }
      if (HIBYTE(v67) != 12)
        goto LABEL_127;
LABEL_81:
      if (*(_QWORD *)v7 != 0x6E6F706D6F432F3CLL || *((_DWORD *)v7 + 2) != 1047817829)
      {
LABEL_127:
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v63, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", 75);
        v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"Unknown token ", 14);
        if (v67 >= 0)
          v56 = &v66;
        else
          v56 = (__int128 *)v66;
        if (v67 >= 0)
          v57 = HIBYTE(v67);
        else
          v57 = *((_QWORD *)&v66 + 1);
        v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
        v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)", a typo in config?", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" (FeatureDim|CentralOffset <vec>|PoolSize <vec>|LearnRateCoef|Normalize)", 72);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v63);
      }
LABEL_86:
      if (*v62 <= 0)
      {
        v60 = "feature_dim_ > 0";
        v61 = 80;
        goto LABEL_138;
      }
      v26 = v73 - (_BYTE *)v72;
      if (v73 == (_BYTE *)v72)
      {
        v60 = "central_offset.size() > 0";
        v61 = 81;
        goto LABEL_138;
      }
      if (v26 >> 2 != v76 - v75)
      {
        v60 = "central_offset.size() == pool_size.size()";
        v61 = 82;
LABEL_138:
        kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", (const char *)v61, v60, a5);
      }
      v27 = *(_DWORD *)(a1 + 8) / *v62;
      if (v27 >= 1)
        v28 = v27 - 1;
      else
        v28 = *(_DWORD *)(a1 + 8) / *v62;
      v29 = (int **)(a1 + 96);
      std::vector<int>::resize((std::vector<int> *)(a1 + 96), (int)(v26 >> 2));
      v30 = (uint64_t *)(a1 + 120);
      std::vector<kaldi::Vector<float>>::resize((uint64_t *)(a1 + 120), (int)(v26 >> 2));
      v34 = (unint64_t)v26 >> 2;
      v35 = ((unint64_t)v26 >> 2);
      if ((int)v34 >= 1)
      {
        v36 = 0;
        v37 = (v28 >> 1) + 1;
        do
        {
          v38 = v75;
          v39 = v75[v36];
          if (v39 >= -1)
            v39 = -1;
          (*v29)[v36] = v37 + v72[v36] + v39;
          v40 = v38[v36];
          if (v40 >= 0)
            v41 = v40;
          else
            v41 = -v40;
          kaldi::Vector<float>::Resize((void **)(*v30 + 24 * v36), v41, 0, v32, v33);
          v42 = v75[v36];
          if (v42 < 0)
            v42 = -v42;
          v43 = 1.0 / (double)v42;
          kaldi::VectorBase<float>::Set(*v30 + 24 * v36++, v43);
        }
        while (v36 != v35);
      }
      *(_DWORD *)(a1 + 168) = v68;
      if ((_DWORD)v70)
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v63, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", 96);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"Initializing from pool-weight vector", 36);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v63);
        }
        if ((int)v34 < 1)
        {
          v45 = 0;
        }
        else
        {
          v44 = 0;
          v45 = 0;
          v46 = *v30;
          do
          {
            v47 = v46 + v44;
            v48 = *(_DWORD *)(v46 + v44 + 8);
            v63 = 0;
            v64 = 0;
            v65 = 0;
            if (v48 + v45 > v70)
              kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v33);
            v63 = v69 + 4 * v45;
            LODWORD(v64) = v48;
            kaldi::VectorBase<float>::CopyFromVec(v47, (uint64_t)&v63, v31, v32, v33);
            v46 = *v30;
            v45 += *(_DWORD *)(*v30 + v44 + 8);
            v44 += 24;
          }
          while (8 * (2 * v35 + v34) != v44);
        }
        if (v45 != (_DWORD)v70)
          kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", (const char *)0x66, "num_weights == pool_weight.Dim()", v33);
      }
      if ((int)v34 >= 1)
      {
        v49 = 0;
        v50 = *v29;
        v51 = "offset_[p] >= 0";
        while (1)
        {
          v53 = *v50++;
          v52 = v53;
          if (v53 < 0)
            break;
          if (*(_DWORD *)(*v30 + v49 + 8) + v52 > v27)
          {
            v54 = 107;
            v51 = "offset_[p] + weight_[p].Dim() <= num_frames";
            goto LABEL_126;
          }
          v49 += 24;
          if (8 * (2 * v35 + v34) == v49)
            goto LABEL_117;
        }
        v54 = 106;
LABEL_126:
        kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", (const char *)v54, v51, v33);
      }
LABEL_117:
      if (SHIBYTE(v67) < 0)
        operator delete((void *)v66);
      kaldi::Vector<float>::Destroy((uint64_t)&v69);
      if (v72)
      {
        v73 = v72;
        operator delete(v72);
      }
      if (v75)
      {
        v76 = v75;
        operator delete(v75);
      }
      return;
    case 0xF:
      if ((_QWORD)v66 != 0x6C6172746E65433CLL || *(_QWORD *)((char *)&v66 + 7) != 0x3E74657366664F6CLL)
      {
        switch(HIBYTE(v67))
        {
          case 0xA:
            goto LABEL_5;
          case 0xB:
            goto LABEL_61;
          case 0xC:
            goto LABEL_50;
          case 0xF:
            if ((_QWORD)v66 != 0x61526E7261654C3CLL || *(_QWORD *)((char *)&v66 + 7) != 0x3E66656F43657461)
              goto LABEL_54;
            goto LABEL_76;
          default:
            goto LABEL_127;
        }
      }
      goto LABEL_67;
    default:
      goto LABEL_127;
  }
}

void sub_1DE443448(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 185) < 0)
    operator delete(*(void **)(v1 - 208));
  kaldi::Vector<float>::Destroy(v1 - 176);
  kaldi::nnet1::FramePoolingComponent::InitData(v1 - 176, v1 - 152, v1 - 128);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FramePoolingComponent::WriteData(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  kaldi::WriteToken(a2, a3, (kaldi *)"<FeatureDim>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<Normalize>", v10, v11);
  kaldi::WriteBasicType<BOOL>(a2, (char)a3, *(unsigned __int8 *)(a1 + 172));
  kaldi::WriteToken(a2, a3, (kaldi *)"<FrameOffset>", v12, v13);
  kaldi::WriteIntegerByteArray<int>(a2, (int)a3, 0, (uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 2, *(_QWORD *)(a1 + 96));
  kaldi::WriteToken(a2, a3, (kaldi *)"<FrameWeight>", v14, v15);
  v16 = *(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96);
  if ((int)(v16 >> 2) >= 1)
  {
    v17 = 0;
    v18 = 24 * (v16 >> 2);
    do
    {
      kaldi::VectorBase<float>::Write(*(_QWORD *)(a1 + 120) + v17, a2, (int)a3);
      v17 += 24;
    }
    while (v18 != v17);
  }
}

uint64_t kaldi::nnet1::FramePoolingComponent::PropagateFnc(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  const char *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  void *v20;
  __int128 v21;
  __int128 v22;

  v5 = *(_DWORD *)(result + 88);
  if (*(_DWORD *)(a2 + 16) % v5)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", (const char *)0xE1, "in.NumCols() % feature_dim_ == 0", a5);
  if (*(_DWORD *)(a3 + 16) % v5)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", (const char *)0xE2, "out->NumCols() % feature_dim_ == 0", a5);
  v7 = result;
  v8 = *(_QWORD *)(result + 104) - *(_QWORD *)(result + 96);
  if ((int)(v8 >> 2) >= 1)
  {
    v10 = 0;
    v11 = (v8 >> 2);
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v20, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(*(_DWORD *)(v7 + 88) * v10), *(_DWORD *)(v7 + 88));
      kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v20);
      v12 = *(_QWORD *)(v7 + 120) + 24 * v10;
      if (*(int *)(v12 + 8) >= 1)
      {
        v13 = 0;
        do
        {
          v14 = *(float *)(*(_QWORD *)v12 + 4 * v13);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, a2, 0, *(_DWORD *)(a2 + 20), (const char *)((v13 + *(_DWORD *)(*(_QWORD *)(v7 + 96) + 4 * v10)) * *(_DWORD *)(v7 + 88)), *(_DWORD *)(v7 + 88));
          kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v20, (uint64_t)&v17, 111, v15, v16, v14, 1.0);
          v17 = &unk_1EA926508;
          v18 = 0u;
          v19 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v17);
          ++v13;
          v12 = *(_QWORD *)(v7 + 120) + 24 * v10;
        }
        while (v13 < *(int *)(v12 + 8));
      }
      v20 = &unk_1EA926508;
      v21 = 0u;
      v22 = 0u;
      result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v20);
      ++v10;
    }
    while (v10 != v11);
  }
  return result;
}

void sub_1DE44377C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _OWORD *v14;

  a14 = &unk_1EA926508;
  *v14 = 0u;
  v14[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FramePoolingComponent::BackpropagateFnc()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "BackpropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", 244);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::FramePoolingComponent::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int *v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  int v25;

  kaldi::ExpectToken(a2, a3, (kaldi *)"<FeatureDim>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 88, v6, v7);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<LearnRateCoef>");
  kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 168), v8, v9);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<Normalize>");
  kaldi::ReadBasicType<BOOL>(a2, a3, (char *)(a1 + 172), v10, v11);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<FrameOffset>");
  kaldi::ReadIntegerVector<int>(a2, a3, (std::vector<int> *)(a1 + 96), 0, 0, 0, 0);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<FrameWeight>");
  v12 = *(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96);
  v13 = (unint64_t)v12 >> 2;
  std::vector<kaldi::Vector<float>>::resize((uint64_t *)(a1 + 120), (int)(v12 >> 2));
  v15 = ((unint64_t)v12 >> 2);
  if ((int)v13 >= 1)
  {
    v16 = 0;
    do
    {
      kaldi::Vector<float>::Read(*(_QWORD *)(a1 + 120) + v16, a2, a3, 0, v14);
      v16 += 24;
    }
    while (8 * (2 * v15 + v13) != v16);
  }
  v17 = *(_DWORD *)(a1 + 8);
  v18 = *(_DWORD *)(a1 + 88);
  v19 = v17 / v18;
  if (v17 % v18)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", (const char *)0x88, "input_dim_ % feature_dim_ == 0", v14);
  v20 = *(_DWORD *)(a1 + 12);
  if (v20 % v18)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", (const char *)0x89, "output_dim_ % feature_dim_ == 0", v14);
  if (v20 / v18 != (_DWORD)v13)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", (const char *)0x8A, "output_dim_ / feature_dim_ == num_pools", v14);
  v21 = *(int **)(a1 + 96);
  v22 = *(_QWORD *)(a1 + 120);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 128) - v22) >> 3) != (uint64_t)(*(_QWORD *)(a1 + 104) - (_QWORD)v21) >> 2)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", (const char *)0x8B, "offset_.size() == weight_.size()", v14);
  if ((int)v13 >= 1)
  {
    v23 = (_DWORD *)(v22 + 8);
    do
    {
      v25 = *v21++;
      v24 = v25;
      if (v25 < 0)
        kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", (const char *)0x8F, "offset_[p] >= 0", v14);
      if (v24 + *v23 - 1 >= v19)
        kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", (const char *)0x90, "offset_[p] + (weight_[p].Dim()-1) < total_frame", v14);
      v23 += 6;
      --v15;
    }
    while (v15);
  }
}

uint64_t kaldi::nnet1::FramePoolingComponent::NumParams(kaldi::nnet1::FramePoolingComponent *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  int v7;

  v2 = *((_QWORD *)this + 15);
  v1 = *((_QWORD *)this + 16);
  result = 0;
  v4 = v1 - v2;
  if (v4)
  {
    v5 = v4 / 24;
    if (v5 <= 1)
      v5 = 1;
    v6 = (int *)(v2 + 8);
    do
    {
      v7 = *v6;
      v6 += 6;
      result = (v7 + result);
      --v5;
    }
    while (v5);
  }
  return result;
}

void kaldi::nnet1::FramePoolingComponent::GetParams(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  v10 = a1[15];
  if (a1[16] == v10)
  {
    v12 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 8;
    do
    {
      v14 = v10 + v13 - 8;
      v15 = *(_DWORD *)(v10 + v13);
      v17 = 0;
      v18 = 0;
      if ((v15 + v12) > *(_DWORD *)(a2 + 8))
        kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
      v16 = *(_QWORD *)a2 + 4 * v12;
      LODWORD(v17) = v15;
      kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v16, v14, v7, v8, v9);
      v10 = a1[15];
      v12 += *(_DWORD *)(v10 + v13);
      ++v11;
      v13 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[16] - v10) >> 3) > v11);
  }
  if (v12 != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"GetParams", "../engine/common/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", (const char *)0xB3, "offset == wei_copy->Dim()", v9);
}

uint64_t kaldi::nnet1::FramePoolingComponent::SetParams(_QWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_QWORD *))(*a1 + 176))(a1))
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../engine/common/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", (const char *)0xB7, "wei_src.Dim() == NumParams()", v7);
  v8 = a1[15];
  if (a1[16] == v8)
  {
    v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 8;
    do
    {
      v12 = v8 + v11 - 8;
      v13 = *(_DWORD *)(v8 + v11);
      v17 = 0;
      v18 = 0;
      if ((v13 + v10) > *(_DWORD *)(a2 + 8))
        kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v7);
      v16 = *(_QWORD *)a2 + 4 * v10;
      LODWORD(v17) = v13;
      kaldi::VectorBase<float>::CopyFromVec(v12, (uint64_t)&v16, v5, v6, v7);
      v8 = a1[15];
      v10 += *(_DWORD *)(v8 + v11);
      ++v9;
      v11 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[16] - v8) >> 3) > v9);
  }
  result = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  if (v10 != (_DWORD)result)
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../engine/common/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", (const char *)0xBD, "offset == NumParams()", v15);
  return result;
}

float kaldi::nnet1::FramePoolingComponent::SumParams(kaldi::nnet1::FramePoolingComponent *this)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  float v5;

  v1 = *((_QWORD *)this + 15);
  if (*((_QWORD *)this + 16) == v1)
    return 0.0;
  v3 = 0;
  v4 = 0;
  v5 = 0.0;
  do
  {
    v5 = v5 + kaldi::VectorBase<float>::Sum(v1 + v3);
    ++v4;
    v1 = *((_QWORD *)this + 15);
    v3 += 24;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 16) - v1) >> 3) > v4);
  return v5;
}

void kaldi::nnet1::FramePoolingComponent::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t *v29;
  _BYTE v30[48];
  void *v31;
  __int128 v32;
  __int128 v33;
  void *v34;
  __int128 v35;
  __int128 v36;

  v9 = *(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96);
  v29 = (uint64_t *)(a1 + 144);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3) != (int)(v9 >> 2))
    std::vector<kaldi::Vector<float>>::resize(v29, (int)((uint64_t)v9 >> 2));
  if ((int)(v9 >> 2) >= 1)
  {
    v10 = 0;
    v28 = (v9 >> 2);
    v11 = *(_QWORD *)(a1 + 120);
    do
    {
      kaldi::Vector<float>::Resize((void **)(*(_QWORD *)(a1 + 144) + 24 * v10), *(unsigned int *)(v11 + 24 * v10 + 8), 0, a4, a5);
      v11 = *(_QWORD *)(a1 + 120);
      if (*(int *)(v11 + 24 * v10 + 8) >= 1)
      {
        v13 = 0;
        do
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v34, a2, 0, *(_DWORD *)(a2 + 20), (const char *)((v13 + *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * v10)) * *(_DWORD *)(a1 + 88)), *(_DWORD *)(a1 + 88));
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v31, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(*(_DWORD *)(a1 + 88) * v10), *(_DWORD *)(a1 + 88));
          *((_QWORD *)&v36 + 1) = a4;
          *((_QWORD *)&v33 + 1) = a4;
          kaldi::CuMatrix<float>::CuMatrix(v30, &v34, 111);
          kaldi::CuMatrixBase<float>::MulElements((uint64_t)v30, (uint64_t)&v31, v14, v15, v16);
          v22 = kaldi::CuMatrixBase<float>::Sum((uint64_t)v30, v17, v18, v19, v20);
          v23 = *v29 + 24 * v10;
          if (v13 >= *(unsigned int *)(v23 + 8))
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v21);
          *(float *)(*(_QWORD *)v23 + 4 * v13) = v22;
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v30);
          v31 = &unk_1EA926508;
          v32 = 0u;
          v33 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v31);
          v34 = &unk_1EA926508;
          v35 = 0u;
          v36 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v34);
          ++v13;
          v11 = *(_QWORD *)(a1 + 120);
        }
        while ((uint64_t)v13 < *(int *)(v11 + 24 * v10 + 8));
      }
      ++v10;
    }
    while (v10 != v28);
    v24 = 0;
    do
    {
      kaldi::VectorBase<float>::AddVec<float>(*(_QWORD *)(a1 + 120) + v24, *(_QWORD *)(a1 + 144) + v24, -(float)(*(float *)(a1 + 168) * *(float *)(a1 + 56)), v12, a4, a5);
      v24 += 24;
    }
    while (24 * v28 != v24);
    if (*(_BYTE *)(a1 + 172))
    {
      v25 = 0;
      do
      {
        kaldi::VectorBase<float>::ApplyFloor(*(_QWORD *)(a1 + 120) + v25, 0.0);
        v26 = *(_QWORD *)(a1 + 120) + v25;
        v27 = kaldi::VectorBase<float>::Sum(v26);
        kaldi::VectorBase<float>::Scale(v26, 1.0 / v27);
        v25 += 24;
      }
      while (24 * v28 != v25);
    }
  }
}

void sub_1DE4440BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _OWORD *v23;
  _OWORD *v24;

  a18 = &unk_1EA926508;
  *v24 = 0u;
  v24[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a18);
  a23 = &unk_1EA926508;
  *v23 = 0u;
  v23[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a23);
  _Unwind_Resume(a1);
}

__n128 kaldi::nnet1::FramePoolingComponent::SetTrainOptions(kaldi::nnet1::FramePoolingComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  __n128 result;
  _QWORD v3[34];

  if (*((_DWORD *)a2 + 8) != 1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3, "SetTrainOptions", "../engine/common/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", 294);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "the multi subbatch version for this class is not implemented yet");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  result = *(__n128 *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 23);
  *(__n128 *)((char *)this + 56) = result;
  return result;
}

uint64_t kaldi::nnet1::ParallelComponent::HistoryStateSize(kaldi::nnet1::ParallelComponent *this)
{
  kaldi::nnet1::Nnet *v1;
  kaldi::nnet1::Nnet *v2;
  uint64_t v3;

  v1 = (kaldi::nnet1::Nnet *)*((_QWORD *)this + 23);
  v2 = (kaldi::nnet1::Nnet *)*((_QWORD *)this + 24);
  if (v1 == v2)
    return 0;
  LODWORD(v3) = 0;
  do
  {
    v3 = kaldi::nnet1::Nnet::HistoryStateSize(v1) + v3;
    v1 = (kaldi::nnet1::Nnet *)((char *)v1 + 376);
  }
  while (v1 != v2);
  return v3;
}

_QWORD *kaldi::nnet1::ParallelComponent::ResetHistoryState(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  _QWORD *v5;
  _QWORD *i;

  v5 = (_QWORD *)result[23];
  for (i = (_QWORD *)result[24]; v5 != i; v5 += 47)
    result = kaldi::nnet1::Nnet::ResetHistoryStateIfExists(v5, a2, a3, a4, a5);
  return result;
}

uint64_t kaldi::nnet1::ParallelComponent::ResetHistoryState(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 184);
  v2 = *(_QWORD *)(this + 192);
  while (v1 != v2)
  {
    this = kaldi::nnet1::Nnet::ResetHistoryStateIfExists(v1);
    v1 += 376;
  }
  return this;
}

void kaldi::nnet1::ParallelComponent::GetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  kaldi::nnet1::Nnet *v8;
  kaldi::nnet1::Nnet *v9;
  const char *v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  int v16;
  void *v18;
  __int128 v19;
  __int128 v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  char v24;

  v5 = *(unsigned int *)(a1 + 96);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v16 = v6;
  kaldi::CuMatrix<float>::Resize(a2, v5, v6, 1u, 0);
  v8 = *(kaldi::nnet1::Nnet **)(a1 + 184);
  v9 = *(kaldi::nnet1::Nnet **)(a1 + 192);
  if (v8 == v9)
  {
    LODWORD(v10) = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      kaldi::nnet1::Nnet::GetHistoricalComponents(v8, &v21);
      v12 = v21;
      v11 = (void *)v22;
      if (v21)
      {
        *(_QWORD *)&v22 = v21;
        operator delete(v21);
      }
      if (v12 != v11)
      {
        v22 = 0u;
        v23 = 0u;
        v21 = &unk_1EA92DFA8;
        v24 = 0;
        kaldi::nnet1::Nnet::GetHistoryState((uint64_t)v8, (uint64_t)&v21, a3);
        if (HIDWORD(v22) != (_DWORD)v5)
          kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "../engine/common/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", (const char *)0xCC, "comp_history.NumRows() == num_seq", v13);
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v18, a2, 0, *(_DWORD *)(a2 + 20), v10, SDWORD2(v22));
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v18, (uint64_t)&v21, 111, v14, v15);
        v18 = &unk_1EA926508;
        v19 = 0u;
        v20 = 0u;
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v18);
        v10 = (const char *)(DWORD2(v22) + (_DWORD)v10);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v21);
      }
      v8 = (kaldi::nnet1::Nnet *)((char *)v8 + 376);
    }
    while (v8 != v9);
  }
  if ((_DWORD)v10 != v16)
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "../engine/common/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", (const char *)0xD1, "count == history_size", v7);
}

void sub_1DE444448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  _OWORD *v4;
  void *v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v6 = &unk_1EA926508;
  *v4 = 0u;
  v4[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase((void **)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ParallelComponent::GetHistoryState(_QWORD *a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  kaldi::nnet1::Nnet *v10;
  kaldi::nnet1::Nnet *v11;
  int v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  int v18;
  int v19;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  v19 = v6;
  kaldi::CuVector<float>::Resize(a2, v6, 1u, v7, v8);
  v10 = (kaldi::nnet1::Nnet *)a1[23];
  v11 = (kaldi::nnet1::Nnet *)a1[24];
  if (v10 == v11)
  {
    v12 = 0;
  }
  else
  {
    v12 = 0;
    do
    {
      kaldi::nnet1::Nnet::GetHistoricalComponents(v10, &v26);
      v14 = v26;
      v13 = v27;
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      if (v14 != v13)
      {
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v26 = &unk_1EA92DFD8;
        kaldi::nnet1::Nnet::GetHistoryState((uint64_t)v10, (uint64_t)&v26, a3, a4, v9);
        v24 = 0;
        v25 = 0;
        v23 = 0;
        v22 = &unk_1EA926538;
        if ((v28 + v12) > *(_DWORD *)(a2 + 16))
          kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v17);
        v23 = *(_QWORD *)(a2 + 8) + 4 * v12;
        LODWORD(v24) = v28;
        v25 = *(_QWORD *)(a2 + 24);
        kaldi::CuVectorBase<float>::CopyFromVec(&v22, (uint64_t)&v26, v15, v16, v17);
        v18 = v28;
        v26 = &unk_1EA92DFD8;
        kaldi::CuVector<float>::Destroy((uint64_t)&v26);
        v12 += v18;
      }
      v10 = (kaldi::nnet1::Nnet *)((char *)v10 + 376);
    }
    while (v10 != v11);
  }
  if (v12 != v19)
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "../engine/common/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", (const char *)0xE1, "count == history_size", v9);
}

void sub_1DE44463C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ParallelComponent::SetHistoryState(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  const char *v6;
  int v7;
  kaldi::nnet1::Nnet *v8;
  kaldi::nnet1::Nnet *v9;
  const char *v10;
  void *v11;
  void *v12;
  int v13;
  uint64_t v14;
  const char *v15;
  _QWORD *v16;
  void *v17;
  __int128 v18;
  __int128 v19;

  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  if (*(_DWORD *)(a2 + 16) != v7)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v17, "SetHistoryState", "../engine/common/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", 232);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"the ParallelComponent has history size ", 39);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" , but the input history data has dimension ", 44);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v17);
  }
  v8 = (kaldi::nnet1::Nnet *)a1[23];
  v9 = (kaldi::nnet1::Nnet *)a1[24];
  if (v8 == v9)
  {
    LODWORD(v10) = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      kaldi::nnet1::Nnet::GetHistoricalComponents(v8, &v17);
      v11 = v17;
      v12 = (void *)v18;
      if (v17)
      {
        *(_QWORD *)&v18 = v17;
        operator delete(v17);
      }
      if (v11 != v12)
      {
        v13 = kaldi::nnet1::Nnet::HistoryStateSize(v8);
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, a2, 0, *(_DWORD *)(a2 + 20), v10, v13);
        kaldi::nnet1::Nnet::SetHistoryState((uint64_t)v8, (uint64_t)&v17, a3, v14, v15);
        v17 = &unk_1EA926508;
        v18 = 0u;
        v19 = 0u;
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v17);
        v10 = (const char *)(v13 + (_DWORD)v10);
      }
      v8 = (kaldi::nnet1::Nnet *)((char *)v8 + 376);
    }
    while (v8 != v9);
  }
  if ((_DWORD)v10 != v7)
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "../engine/common/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", (const char *)0xF4, "count == history_size", v6);
}

void sub_1DE4447F4(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void sub_1DE444804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _OWORD *v10;

  a10 = &unk_1EA926508;
  *v10 = 0u;
  v10[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ParallelComponent::SetHistoryState(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  const char *v9;
  kaldi::nnet1::Nnet *v10;
  kaldi::nnet1::Nnet *v11;
  int v12;
  void *v13;
  void *v14;
  int v15;
  const char *v16;
  int v17;
  _QWORD *v18;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  if (*(_DWORD *)(a2 + 16) != v8)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v20, "SetHistoryState", "../engine/common/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", 251);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"the network has history size ", 29);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" , but the input history data has dimension ", 44);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v20);
  }
  v19 = v8;
  v10 = (kaldi::nnet1::Nnet *)a1[23];
  v11 = (kaldi::nnet1::Nnet *)a1[24];
  if (v10 == v11)
  {
    v12 = 0;
  }
  else
  {
    v12 = 0;
    do
    {
      kaldi::nnet1::Nnet::GetHistoricalComponents(v10, &v20);
      v14 = v20;
      v13 = (void *)v21;
      if (v20)
      {
        v21 = (uint64_t)v20;
        operator delete(v20);
      }
      if (v14 != v13)
      {
        v15 = kaldi::nnet1::Nnet::HistoryStateSize(v10);
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v20 = &unk_1EA926538;
        v17 = v15 + v12;
        if ((v15 + v12) > *(_DWORD *)(a2 + 16))
          kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v16);
        v21 = *(_QWORD *)(a2 + 8) + 4 * v12;
        LODWORD(v22) = v15;
        v23 = *(_QWORD *)(a2 + 24);
        kaldi::nnet1::Nnet::SetHistoryState((uint64_t)v10, (uint64_t)&v20, a3, a4, v16);
        v12 = v17;
      }
      v10 = (kaldi::nnet1::Nnet *)((char *)v10 + 376);
    }
    while (v10 != v11);
  }
  if (v12 != v19)
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "../engine/common/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", (const char *)0x107, "count == history_size", v9);
}

void sub_1DE4449F8(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::nnet1::ParallelComponent::SetHistoryOptions(kaldi::nnet1::ParallelComponent *this, const kaldi::nnet1::HistoryOptions *a2)
{
  const void *v4;
  char *v5;
  __int128 v6;
  int v7;
  kaldi::nnet1::Nnet *v8;
  kaldi::nnet1::Nnet *v9;
  void (**v10)(kaldi::nnet1::RecurrentNnetTrainOptions *__hidden);
  _BYTE v11[31];
  void *v12;
  int v13;
  int v14;

  v4 = (const void *)(*(uint64_t (**)(kaldi::nnet1::ParallelComponent *))(*(_QWORD *)this + 120))(this);
  if (v5)
  {
    v6 = *(_OWORD *)(v5 + 8);
    *(_OWORD *)&v11[15] = *(_OWORD *)(v5 + 23);
    *(_OWORD *)v11 = v6;
    v10 = &off_1EA92B868;
    v12 = &unk_1EA92B888;
    v7 = *((_DWORD *)v5 + 13);
    v13 = *((_DWORD *)a2 + 2);
    v14 = v7;
    (*(void (**)(kaldi::nnet1::ParallelComponent *, void (***)(kaldi::nnet1::RecurrentNnetTrainOptions *__hidden)))(*(_QWORD *)this + 104))(this, &v10);
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 2);
    v9 = (kaldi::nnet1::Nnet *)*((_QWORD *)this + 23);
    v8 = (kaldi::nnet1::Nnet *)*((_QWORD *)this + 24);
    while (v9 != v8)
    {
      kaldi::nnet1::Nnet::SetHistoryOptions(v9, a2, 1);
      v9 = (kaldi::nnet1::Nnet *)((char *)v9 + 376);
    }
    kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions((kaldi::nnet1::RecurrentNnetTrainOptions *)&v10);
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10, "SetHistoryOptions", "../engine/common/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", 492);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Inconsistent return type: RecurrentBaseComponent::GetTrainOptions() can not be cast to RecurrentNnetTrainOptions", 112);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
  }
}

void sub_1DE444B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::SetInternalBoundary(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t i;

  v3 = *(_QWORD *)(result + 184);
  for (i = *(_QWORD *)(result + 192); v3 != i; v3 += 376)
    result = kaldi::nnet1::Nnet::SetInternalBoundary(v3, a2, a3);
  return result;
}

uint64_t kaldi::nnet1::ParallelComponent::SetTrainOptions(kaldi::nnet1::ParallelComponent *this, const kaldi::nnet1::NnetTrainOptions *lpsrc)
{
  char *v4;
  char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  __int128 v9;
  void (**v10)(kaldi::nnet1::NnetTrainOptions *__hidden);
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  kaldi::nnet1::Nnet *v15;
  kaldi::nnet1::Nnet *v16;
  _QWORD v18[34];

  if (*((_DWORD *)lpsrc + 8) != 1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18, "SetTrainOptions", "../engine/common/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", 510);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, "the multi subbatch version for this class is not implemented yet");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
  }
  *((_BYTE *)this + 178) = *((_BYTE *)lpsrc + 38);
  if (v4)
  {
    v5 = v4;
    v8 = operator new();
    v9 = *(_OWORD *)(v5 + 8);
    *(_OWORD *)(v8 + 23) = *(_OWORD *)(v5 + 23);
    *(_OWORD *)(v8 + 8) = v9;
    v10 = &off_1EA92B868;
    *(_QWORD *)v8 = &off_1EA92B868;
    *(_QWORD *)(v8 + 40) = &unk_1EA92B888;
    *(_QWORD *)(v8 + 48) = *((_QWORD *)v5 + 6);
    v11 = *(_OWORD *)(v5 + 23);
    *(_OWORD *)((char *)this + 56) = *(_OWORD *)(v5 + 8);
    *(_OWORD *)((char *)this + 71) = v11;
    *((_QWORD *)this + 12) = *((_QWORD *)v5 + 6);
  }
  else
  {
    v8 = operator new();
    v10 = &off_1EA9284D0;
    *(_QWORD *)v8 = &off_1EA9284D0;
    v12 = *(_OWORD *)((char *)lpsrc + 8);
    *(_OWORD *)(v8 + 8) = v12;
    v13 = *(_OWORD *)((char *)lpsrc + 23);
    *(_OWORD *)(v8 + 23) = v13;
    v14 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *(_OWORD *)(v14 + 71) = v13;
    *(_OWORD *)(v14 + 56) = v12;
  }
  *(_BYTE *)(v8 + 37) = 0;
  v16 = (kaldi::nnet1::Nnet *)*((_QWORD *)this + 23);
  v15 = (kaldi::nnet1::Nnet *)*((_QWORD *)this + 24);
  if (v16 != v15)
  {
    do
    {
      kaldi::nnet1::Nnet::SetTrainOptions(v16, (const kaldi::nnet1::NnetTrainOptions *)v8, 1, v6, v7);
      v16 = (kaldi::nnet1::Nnet *)((char *)v16 + 376);
    }
    while (v16 != v15);
    v10 = *(void (***)(kaldi::nnet1::NnetTrainOptions *__hidden))v8;
  }
  return ((uint64_t (*)(uint64_t))v10[1])(v8);
}

void sub_1DE444D4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::Copy(kaldi::nnet1::ParallelComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;

  v2 = operator new();
  v3 = *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)(v2 + 208) = off_1EA92D6D8;
  v4 = (char *)this + v3;
  *(_WORD *)(v2 + 224) = *(_WORD *)((char *)this + v3 + 16);
  *(_QWORD *)(v2 + 216) = *(_QWORD *)((char *)this + v3 + 8);
  *(_QWORD *)(v2 + 240) = 0;
  *(_QWORD *)(v2 + 248) = 0;
  *(_QWORD *)(v2 + 232) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 232), *(const void **)((char *)this + v3 + 24), *(_QWORD *)((char *)this + v3 + 32), (uint64_t)(*(_QWORD *)((char *)this + v3 + 32) - *(_QWORD *)((char *)this + v3 + 24)) >> 3);
  *(_QWORD *)(v2 + 208) = off_1EA929750;
  *(_QWORD *)(v2 + 256) = &off_1EA9284D0;
  *(_OWORD *)(v2 + 264) = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(v2 + 279) = *(_OWORD *)(v4 + 71);
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v2, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1EA91C038, (uint64_t)this);
  *(_QWORD *)v2 = &off_1EA9287D0;
  *(_QWORD *)(v2 + 200) = 0;
  *(_QWORD *)(v2 + 208) = &off_1EA928A88;
  *(_QWORD *)(v2 + 160) = &off_1EA928928;
  *(_QWORD *)(v2 + 168) = &unk_1EA928950;
  *(_WORD *)(v2 + 176) = *((_WORD *)this + 88);
  *(_BYTE *)(v2 + 178) = *((_BYTE *)this + 178);
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 184) = 0;
  std::vector<kaldi::nnet1::Nnet>::__init_with_size[abi:ne180100]<kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*>((_QWORD *)(v2 + 184), *((_QWORD *)this + 23), *((_QWORD *)this + 24), 0x51B3BEA3677D46CFLL * ((uint64_t)(*((_QWORD *)this + 24) - *((_QWORD *)this + 23)) >> 3));
  return v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_1DE444E9C(_Unwind_Exception *a1)
{
  kaldi::nnet1::RecurrentBaseComponent *v1;
  kaldi::nnet1::UpdatableComponent *v2;

  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v1, (uint64_t *)&off_1EA91C038);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  MEMORY[0x1DF0ED014](v1, 0x10A1C40422ECF24);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::GetType(kaldi::nnet1::ParallelComponent *this)
{
  return 2055;
}

void kaldi::nnet1::ParallelComponent::InitData(kaldi::nnet1::ParallelComponent *this, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t *v7;
  uint64_t v8;
  const char *v9;
  BOOL v10;
  std::string::value_type **v12;
  std::string::value_type *v13;
  std::string::value_type *v14;
  std::string::value_type *v15;
  uint64_t v16;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  BOOL v23;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  std::string::value_type **v31;
  std::string::value_type *v32;
  std::string::value_type *v33;
  std::string::value_type *v34;
  int v35;
  std::string *v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  std::string *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD **v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  std::string::value_type *__s[2];
  std::string::size_type v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  std::string *v63;
  std::string *v64;
  unint64_t v65;
  std::string *v66;
  std::string *v67;
  unint64_t v68;

  v66 = 0;
  v67 = 0;
  v68 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v7 = a2 + 4;
  v60 = 0;
  v61 = 0;
  v62 = 0;
LABEL_2:
  if ((*((_BYTE *)v7 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v60, a4, a5);
    if ((SHIBYTE(v62) & 0x80000000) == 0)
    {
      if (HIBYTE(v62) != 17)
      {
        if (HIBYTE(v62) == 20)
        {
          v10 = v60 == (_QWORD *)0x4E64657473654E3CLL && v61 == 0x6E656C694674656ELL;
          if (v10 && v62 == 1046834529)
            goto LABEL_14;
        }
LABEL_107:
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__s, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", 73);
        v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s, (uint64_t)"Unknown token ", 14);
        if (v62 >= 0)
          v53 = &v60;
        else
          v53 = (_QWORD **)v60;
        if (v62 >= 0)
          v54 = HIBYTE(v62);
        else
          v54 = v61;
        v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
        v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)", typo in config?", 17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" (NestedNnetFilename|NestedNnetProto)", 37);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__s);
      }
      v25 = (uint64_t *)&v60;
      goto LABEL_54;
    }
    if (v61 == 17)
    {
      v25 = v60;
LABEL_54:
      v26 = *v25;
      v27 = (_QWORD *)v25[1];
      v28 = *((unsigned __int8 *)v25 + 16);
      if (v26 != 0x4E64657473654E3CLL || v27 != (_QWORD *)0x6F746F725074656ELL || v28 != 62)
        goto LABEL_107;
      while (1)
      {
        if ((*((_BYTE *)v7 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
          goto LABEL_89;
        __s[0] = 0;
        __s[1] = 0;
        v59 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)__s, v8, v9);
        if (SHIBYTE(v59) < 0)
        {
          v32 = __s[1];
          if (__s[1] != (std::string::value_type *)18)
          {
            v38 = v67;
            if ((unint64_t)v67 < v68)
              goto LABEL_81;
            goto LABEL_83;
          }
          v31 = (std::string::value_type **)__s[0];
        }
        else
        {
          if (SHIBYTE(v59) != 18)
          {
            v38 = v67;
            if ((unint64_t)v67 < v68)
              goto LABEL_79;
            goto LABEL_83;
          }
          v31 = __s;
        }
        v33 = *v31;
        v34 = v31[1];
        v35 = *((unsigned __int16 *)v31 + 8);
        if (v33 == (std::string::value_type *)0x64657473654E2F3CLL
          && v34 == (std::string::value_type *)0x746F725074656E4ELL
          && v35 == 15983)
        {
          v41 = 0;
          if ((v59 & 0x8000000000000000) == 0)
            goto LABEL_85;
LABEL_88:
          operator delete(__s[0]);
          if ((v41 & 1) == 0)
            goto LABEL_89;
        }
        else
        {
          v38 = v67;
          if ((unint64_t)v67 < v68)
          {
            if (SHIBYTE(v59) < 0)
            {
              v32 = __s[1];
LABEL_81:
              std::string::__init_copy_ctor_external(v38, __s[0], (std::string::size_type)v32);
            }
            else
            {
LABEL_79:
              v39 = *(_OWORD *)__s;
              v38->__r_.__value_.__r.__words[2] = v59;
              *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
            }
            v40 = (uint64_t)&v38[1];
            goto LABEL_84;
          }
LABEL_83:
          v40 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v66, (__int128 *)__s);
LABEL_84:
          v67 = (std::string *)v40;
          v41 = 1;
          if ((v59 & 0x8000000000000000) != 0)
            goto LABEL_88;
LABEL_85:
          if ((v41 & 1) == 0)
            goto LABEL_89;
        }
      }
    }
    if (v61 != 20)
      goto LABEL_107;
    v23 = *v60 == 0x4E64657473654E3CLL && v60[1] == 0x6E656C694674656ELL;
    if (!v23 || *((_DWORD *)v60 + 4) != 1046834529)
      goto LABEL_107;
    while (1)
    {
LABEL_14:
      if ((*((_BYTE *)v7 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      {
LABEL_89:
        std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
        goto LABEL_2;
      }
      __s[0] = 0;
      __s[1] = 0;
      v59 = 0;
      kaldi::ReadToken(a2, 0, (uint64_t)__s, v8, v9);
      if (SHIBYTE(v59) < 0)
      {
        v13 = __s[1];
        if (__s[1] != (std::string::value_type *)21)
        {
          v19 = v64;
          if ((unint64_t)v64 < v65)
            goto LABEL_33;
          goto LABEL_35;
        }
        v12 = (std::string::value_type **)__s[0];
      }
      else
      {
        if (SHIBYTE(v59) != 21)
        {
          v19 = v64;
          if ((unint64_t)v64 < v65)
            goto LABEL_31;
          goto LABEL_35;
        }
        v12 = __s;
      }
      v14 = *v12;
      v15 = v12[1];
      v16 = *(uint64_t *)((char *)v12 + 13);
      if (v14 == (std::string::value_type *)0x64657473654E2F3CLL
        && v15 == (std::string::value_type *)0x656C694674656E4ELL
        && v16 == 0x3E656D616E656C69)
      {
        v22 = 0;
        if ((v59 & 0x8000000000000000) == 0)
          goto LABEL_38;
LABEL_37:
        operator delete(__s[0]);
        goto LABEL_38;
      }
      v19 = v64;
      if ((unint64_t)v64 < v65)
      {
        if (SHIBYTE(v59) < 0)
        {
          v13 = __s[1];
LABEL_33:
          std::string::__init_copy_ctor_external(v19, __s[0], (std::string::size_type)v13);
        }
        else
        {
LABEL_31:
          v20 = *(_OWORD *)__s;
          v19->__r_.__value_.__r.__words[2] = v59;
          *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
        }
        v21 = (uint64_t)&v19[1];
        goto LABEL_36;
      }
LABEL_35:
      v21 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v63, (__int128 *)__s);
LABEL_36:
      v64 = (std::string *)v21;
      v22 = 1;
      if ((v59 & 0x8000000000000000) != 0)
        goto LABEL_37;
LABEL_38:
      if ((v22 & 1) == 0)
        goto LABEL_89;
    }
  }
  v43 = (uint64_t)v66;
  v42 = v67;
  if ((v67 != v66) == (v64 != v63))
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", (const char *)0x4E, "(nested_nnet_proto.size() > 0) ^ (nested_nnet_filename.size() > 0)", a5);
  if (v64 != v63)
  {
    v44 = 0;
    v45 = 0;
    do
    {
      kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)__s);
      kaldi::nnet1::Nnet::Read((uint64_t)__s, (uint64_t)&v63[v44]);
      v46 = *((_QWORD *)this + 24);
      if (v46 >= *((_QWORD *)this + 25))
      {
        v47 = std::vector<kaldi::nnet1::Nnet>::__push_back_slow_path<kaldi::nnet1::Nnet const&>((uint64_t *)this + 23, (const kaldi::nnet1::Nnet *)__s);
      }
      else
      {
        kaldi::nnet1::Nnet::Nnet(*((kaldi::nnet1::Nnet **)this + 24), (const kaldi::nnet1::Nnet *)__s);
        v47 = v46 + 376;
        *((_QWORD *)this + 24) = v46 + 376;
      }
      *((_QWORD *)this + 24) = v47;
      kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)__s);
      ++v45;
      ++v44;
    }
    while (0xAAAAAAAAAAAAAAABLL * (((char *)v64 - (char *)v63) >> 3) > v45);
    v43 = (uint64_t)v66;
    v42 = v67;
  }
  if (v42 != (std::string *)v43)
  {
    v48 = 0;
    v49 = 0;
    do
    {
      kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)__s);
      kaldi::nnet1::Nnet::Init((kaldi::nnet1::Nnet *)__s, (uint64_t)&v66[v48], a3);
      v50 = *((_QWORD *)this + 24);
      if (v50 >= *((_QWORD *)this + 25))
      {
        v51 = std::vector<kaldi::nnet1::Nnet>::__push_back_slow_path<kaldi::nnet1::Nnet const&>((uint64_t *)this + 23, (const kaldi::nnet1::Nnet *)__s);
      }
      else
      {
        kaldi::nnet1::Nnet::Nnet(*((kaldi::nnet1::Nnet **)this + 24), (const kaldi::nnet1::Nnet *)__s);
        v51 = v50 + 376;
        *((_QWORD *)this + 24) = v50 + 376;
      }
      *((_QWORD *)this + 24) = v51;
      kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)__s);
      ++v49;
      ++v48;
    }
    while (0xAAAAAAAAAAAAAAABLL * (((char *)v67 - (char *)v66) >> 3) > v49);
  }
  kaldi::nnet1::ParallelComponent::CheckNetworkDimensions((uint64_t *)this, (uint64_t)a2, a3, a4, a5);
  if (SHIBYTE(v62) < 0)
    operator delete(v60);
  __s[0] = (std::string::value_type *)&v63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
  __s[0] = (std::string::value_type *)&v66;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
}

void sub_1DE4454E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v16 - 128) = v15;
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v16 - 137) < 0)
    operator delete(*(void **)(v16 - 160));
  __p = (void *)(v16 - 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (void *)(v16 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1DE4454F4()
{
  JUMPOUT(0x1DE4454FCLL);
}

void sub_1DE445508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v16 - 104) = v15;
  if (a15 < 0)
    operator delete(a10);
  JUMPOUT(0x1DE445534);
}

void sub_1DE445514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  if (*(char *)(v10 - 137) < 0)
    operator delete(*(void **)(v10 - 160));
  a10 = (void **)(v10 - 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void sub_1DE44551C()
{
  JUMPOUT(0x1DE445524);
}

uint64_t *kaldi::nnet1::ParallelComponent::ReadData(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  int v19;
  int v20;

  kaldi::ExpectToken(a2, a3, (kaldi *)"<NestedNnetCount>");
  v20 = 0;
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v20, v8, v9);
  std::vector<kaldi::nnet1::Nnet>::resize(a1 + 23, v20);
  if (v20 >= 1)
  {
    v10 = 0;
    for (i = 0; i < v20; ++i)
    {
      kaldi::ExpectToken(a2, a3, (kaldi *)"<NestedNnet>");
      v19 = 0;
      kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v19, v12, v13);
      kaldi::nnet1::Nnet::Read((uint64_t **)(a1[23] + v10), a2, a3, a4);
      v10 += 376;
    }
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"</ParallelComponent>");
  return kaldi::nnet1::ParallelComponent::CheckNetworkDimensions(a1, v14, v15, v16, v17);
}

_QWORD *kaldi::nnet1::ParallelComponent::WriteData(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;

  v9 = 0x51B3BEA3677D46CFLL * ((uint64_t)(*(_QWORD *)(a1 + 192) - *(_QWORD *)(a1 + 184)) >> 3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<NestedNnetCount>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  if ((int)v9 >= 1)
  {
    v12 = 0;
    v13 = 376 * v9;
    v14 = 1;
    do
    {
      kaldi::WriteToken(a2, a3, (kaldi *)"<NestedNnet>", v10, v11);
      kaldi::WriteBasicType<int>(a2, (int)a3);
      kaldi::nnet1::Nnet::Write((uint64_t *)(*(_QWORD *)(a1 + 184) + v12), a2, (uint64_t)a3, a4, v15);
      v12 += 376;
      ++v14;
    }
    while (v13 != v12);
  }
  return kaldi::WriteToken(a2, a3, (kaldi *)"</ParallelComponent>", v10, v11);
}

uint64_t kaldi::nnet1::ParallelComponent::NumParams(kaldi::nnet1::ParallelComponent *this)
{
  kaldi::nnet1::Nnet *v1;
  kaldi::nnet1::Nnet *v2;
  uint64_t v3;

  v1 = (kaldi::nnet1::Nnet *)*((_QWORD *)this + 23);
  v2 = (kaldi::nnet1::Nnet *)*((_QWORD *)this + 24);
  if (v1 == v2)
    return 0;
  LODWORD(v3) = 0;
  do
  {
    v3 = kaldi::nnet1::Nnet::NumParams(v1) + v3;
    v1 = (kaldi::nnet1::Nnet *)((char *)v1 + 376);
  }
  while (v1 != v2);
  return v3;
}

uint64_t kaldi::nnet1::ParallelComponent::CountZeroCorr(uint64_t this, int *a2, int *a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::Nnet *v5;
  kaldi::nnet1::Nnet *i;
  int v9;
  const void *Component;
  void *v11;
  uint64_t v12;

  *a2 = 0;
  *a3 = 0;
  v5 = *(kaldi::nnet1::Nnet **)(this + 184);
  for (i = *(kaldi::nnet1::Nnet **)(this + 192); v5 != i; v5 = (kaldi::nnet1::Nnet *)((char *)v5 + 376))
  {
    if ((int)((*((_QWORD *)v5 + 1) - *(_QWORD *)v5) >> 3) >= 1)
    {
      v9 = 0;
      do
      {
        this = kaldi::nnet1::Nnet::IsComponentFrozen(v5, v9, (uint64_t)a3, a4, a5);
        if ((this & 1) == 0)
        {
          Component = (const void *)kaldi::nnet1::Nnet::GetComponent(v5, v9, (uint64_t)a3, a4, a5);
          this = (*(uint64_t (**)(const void *))(*(_QWORD *)Component + 32))(Component);
          if ((_DWORD)this)
          {
            v12 = 0;
            this = (*(uint64_t (**)(void *, char *, uint64_t *))(*(_QWORD *)v11 + 40))(v11, (char *)&v12 + 4, &v12);
            *a2 += HIDWORD(v12);
            *a3 += v12;
          }
        }
        ++v9;
      }
      while (v9 < (int)((*((_QWORD *)v5 + 1) - *(_QWORD *)v5) >> 3));
    }
  }
  return this;
}

uint64_t kaldi::nnet1::ParallelComponent::VectorizeWeightsCorrs(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::Nnet *v5;
  kaldi::nnet1::Nnet *i;
  int v10;
  const void *Component;
  void *v12;

  v5 = *(kaldi::nnet1::Nnet **)(result + 184);
  for (i = *(kaldi::nnet1::Nnet **)(result + 192); v5 != i; v5 = (kaldi::nnet1::Nnet *)((char *)v5 + 376))
  {
    if ((int)((*((_QWORD *)v5 + 1) - *(_QWORD *)v5) >> 3) >= 1)
    {
      v10 = 0;
      do
      {
        Component = (const void *)kaldi::nnet1::Nnet::GetComponent(v5, v10, a3, a4, a5);
        result = (*(uint64_t (**)(const void *))(*(_QWORD *)Component + 32))(Component);
        if ((_DWORD)result)
        {
          result = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v12, a2, a3, a4);
        }
        ++v10;
      }
      while (v10 < (int)((*((_QWORD *)v5 + 1) - *(_QWORD *)v5) >> 3));
    }
  }
  return result;
}

uint64_t kaldi::nnet1::ParallelComponent::GetNormalizedLearningRate(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::Nnet *v5;
  kaldi::nnet1::Nnet *v6;
  char v8;
  float v9;
  int v10;
  uint64_t Component;
  float v12;
  _QWORD *v13;
  _QWORD v14[34];

  v5 = *(kaldi::nnet1::Nnet **)(this + 184);
  v6 = *(kaldi::nnet1::Nnet **)(this + 192);
  if (v5 != v6)
  {
    v8 = 0;
    v9 = NAN;
    while ((int)((*((_QWORD *)v5 + 1) - *(_QWORD *)v5) >> 3) < 1)
    {
      v12 = v9;
LABEL_15:
      v5 = (kaldi::nnet1::Nnet *)((char *)v5 + 376);
      v9 = v12;
      if (v5 == v6)
        return this;
    }
    v10 = 0;
    while (1)
    {
      Component = kaldi::nnet1::Nnet::GetComponent(v5, v10, a3, a4, a5);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Component + 32))(Component);
      if ((_DWORD)this)
      {
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)Component + 200))(Component, a2);
        if ((v8 & 1) == 0)
        {
          v8 = 1;
          goto LABEL_12;
        }
        if (v9 != v12)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14, "GetNormalizedLearningRate", "../engine/common/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", 321);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Two different learning rates: ", 30);
          v13 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" ", 1);
          std::ostream::operator<<();
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
        }
        v8 = 1;
      }
      v12 = v9;
LABEL_12:
      ++v10;
      v9 = v12;
      if (v10 >= (int)((*((_QWORD *)v5 + 1) - *(_QWORD *)v5) >> 3))
        goto LABEL_15;
    }
  }
  return this;
}

uint64_t kaldi::nnet1::ParallelComponent::GetParams(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  kaldi::nnet1::Nnet *v7;
  kaldi::nnet1::Nnet *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  int v13;
  uint64_t result;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  v7 = (kaldi::nnet1::Nnet *)a1[23];
  v8 = (kaldi::nnet1::Nnet *)a1[24];
  if (v7 == v8)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
      kaldi::nnet1::Nnet::GetParams(v7, (uint64_t)&v19);
      v17 = 0;
      v18 = 0;
      v16 = 0;
      if ((v20 + v9) > *(_DWORD *)(a2 + 8))
        kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v12);
      v16 = *(_QWORD *)a2 + 4 * v9;
      LODWORD(v17) = v20;
      kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v16, (uint64_t)&v19, v10, v11, v12);
      v13 = v20;
      kaldi::Vector<float>::Destroy((uint64_t)&v19);
      v9 += v13;
      v7 = (kaldi::nnet1::Nnet *)((char *)v7 + 376);
    }
    while (v7 != v8);
  }
  result = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  if (v9 != (_DWORD)result)
    kaldi::KaldiAssertFailure_((kaldi *)"GetParams", "../engine/common/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", (const char *)0x152, "offset == NumParams()", v15);
  return result;
}

void sub_1DE445C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::SetParams(_QWORD *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  kaldi::nnet1::Nnet *v6;
  kaldi::nnet1::Nnet *v7;
  int v8;
  int v9;
  const char *v10;
  int v11;
  uint64_t result;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_QWORD *))(*a1 + 176))(a1))
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../engine/common/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", (const char *)0x156, "wei_src.Dim() == NumParams()", v5);
  v6 = (kaldi::nnet1::Nnet *)a1[23];
  v7 = (kaldi::nnet1::Nnet *)a1[24];
  if (v6 == v7)
  {
    v11 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = kaldi::nnet1::Nnet::NumParams(v6);
      v15 = 0;
      v16 = 0;
      v11 = v9 + v8;
      if ((v9 + v8) > *(_DWORD *)(a2 + 8))
        kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v10);
      v14 = *(_QWORD *)a2 + 4 * v8;
      LODWORD(v15) = v9;
      kaldi::nnet1::Nnet::SetParams(v6, (uint64_t)&v14);
      v6 = (kaldi::nnet1::Nnet *)((char *)v6 + 376);
      v8 = v11;
    }
    while (v6 != v7);
  }
  result = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  if (v11 != (_DWORD)result)
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../engine/common/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", (const char *)0x15D, "offset == NumParams()", v13);
  return result;
}

float kaldi::nnet1::ParallelComponent::SumParams(kaldi::nnet1::ParallelComponent *this)
{
  kaldi::nnet1::Nnet *v1;
  kaldi::nnet1::Nnet *v2;
  float v3;

  v1 = (kaldi::nnet1::Nnet *)*((_QWORD *)this + 23);
  v2 = (kaldi::nnet1::Nnet *)*((_QWORD *)this + 24);
  v3 = 0.0;
  while (v1 != v2)
  {
    v3 = v3 + kaldi::nnet1::Nnet::SumParams(v1);
    v1 = (kaldi::nnet1::Nnet *)((char *)v1 + 376);
  }
  return v3;
}

uint64_t kaldi::nnet1::ParallelComponent::Info@<X0>(kaldi::nnet1::ParallelComponent *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  std::string::size_type v13;
  std::string::size_type v14;
  void *__p[2];
  unsigned __int8 v17;
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  if (*((_QWORD *)this + 24) != *((_QWORD *)this + 23))
  {
    v4 = 0;
    v5 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"nested_network #", 16);
      ++v5;
      v6 = (_QWORD *)std::ostream::operator<<();
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"{\n", 2);
      kaldi::nnet1::Nnet::Info((uint64_t *)__p, (kaldi::nnet1::Nnet *)(*((_QWORD *)this + 23) + v4));
      if ((v17 & 0x80u) == 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      if ((v17 & 0x80u) == 0)
        v9 = v17;
      else
        v9 = (uint64_t)__p[1];
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"}\n", 2);
      if ((char)v17 < 0)
        operator delete(__p[0]);
      v4 += 376;
    }
    while (0x51B3BEA3677D46CFLL * ((uint64_t)(*((_QWORD *)this + 24) - *((_QWORD *)this + 23)) >> 3) > v5);
  }
  std::stringbuf::str();
  v11 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v12 = (char)v11;
  v13 = (std::string::size_type)a2 + v11;
  if (v12 >= 0)
  {
    v14 = (std::string::size_type)a2;
  }
  else
  {
    v13 = a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_;
    v14 = a2->__r_.__value_.__r.__words[0];
  }
  std::string::erase(a2, ~v14 + v13, 1uLL);
  v18[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v20);
}

void sub_1DE445FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::InfoGradient@<X0>(kaldi::nnet1::ParallelComponent *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  std::string::size_type v13;
  std::string::size_type v14;
  void *__p[2];
  unsigned __int8 v17;
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  if (*((_QWORD *)this + 24) != *((_QWORD *)this + 23))
  {
    v4 = 0;
    v5 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"nested_gradient #", 17);
      ++v5;
      v6 = (_QWORD *)std::ostream::operator<<();
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"{\n", 2);
      kaldi::nnet1::Nnet::InfoGradient((kaldi::nnet1::Nnet *)(*((_QWORD *)this + 23) + v4), __p);
      if ((v17 & 0x80u) == 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      if ((v17 & 0x80u) == 0)
        v9 = v17;
      else
        v9 = (uint64_t)__p[1];
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"}\n", 2);
      if ((char)v17 < 0)
        operator delete(__p[0]);
      v4 += 376;
    }
    while (0x51B3BEA3677D46CFLL * ((uint64_t)(*((_QWORD *)this + 24) - *((_QWORD *)this + 23)) >> 3) > v5);
  }
  std::stringbuf::str();
  v11 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v12 = (char)v11;
  v13 = (std::string::size_type)a2 + v11;
  if (v12 >= 0)
  {
    v14 = (std::string::size_type)a2;
  }
  else
  {
    v13 = a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_;
    v14 = a2->__r_.__value_.__r.__words[0];
  }
  std::string::erase(a2, ~v14 + v13, 1uLL);
  v18[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v20);
}

void sub_1DE4461F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::InfoPropagate(kaldi::nnet1::ParallelComponent *this)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  void *__p[2];
  unsigned __int8 v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  if (*((_QWORD *)this + 24) != *((_QWORD *)this + 23))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"nested_propagate #", 18);
      ++v3;
      v4 = (_QWORD *)std::ostream::operator<<();
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"{\n", 2);
      kaldi::nnet1::Nnet::InfoPropagate((kaldi::nnet1::Nnet *)(*((_QWORD *)this + 23) + v2), __p);
      if ((v11 & 0x80u) == 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      if ((v11 & 0x80u) == 0)
        v7 = v11;
      else
        v7 = (uint64_t)__p[1];
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"}\n", 2);
      if ((char)v11 < 0)
        operator delete(__p[0]);
      v2 += 376;
    }
    while (0x51B3BEA3677D46CFLL * ((uint64_t)(*((_QWORD *)this + 24) - *((_QWORD *)this + 23)) >> 3) > v3);
  }
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v14);
}

void sub_1DE4463D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::InfoBackPropagate(kaldi::nnet1::ParallelComponent *this)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  void *__p[2];
  unsigned __int8 v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  if (*((_QWORD *)this + 24) != *((_QWORD *)this + 23))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"nested_backpropagate #", 22);
      ++v3;
      v4 = (_QWORD *)std::ostream::operator<<();
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"{\n", 2);
      kaldi::nnet1::Nnet::InfoBackPropagate((kaldi::nnet1::Nnet *)(*((_QWORD *)this + 23) + v2), __p);
      if ((v11 & 0x80u) == 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      if ((v11 & 0x80u) == 0)
        v7 = v11;
      else
        v7 = (uint64_t)__p[1];
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"}\n", 2);
      if ((char)v11 < 0)
        operator delete(__p[0]);
      v2 += 376;
    }
    while (0x51B3BEA3677D46CFLL * ((uint64_t)(*((_QWORD *)this + 24) - *((_QWORD *)this + 23)) >> 3) > v3);
  }
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v14);
}

void sub_1DE446598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::PropagateFnc(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::Nnet *v5;
  _BYTE *v8;
  const char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  int v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  unsigned int v26;
  kaldi::nnet1::Nnet *v27;
  unsigned int v28;
  _QWORD v29[5];
  char v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  void *v34;
  __int128 v35;
  __int128 v36;

  v26 = a4;
  v5 = *(kaldi::nnet1::Nnet **)(result + 184);
  v27 = *(kaldi::nnet1::Nnet **)(result + 192);
  if (v5 != v27)
  {
    v8 = (_BYTE *)result;
    v9 = 0;
    v28 = 0;
    v10 = *(_QWORD *)(a3 + 32);
    do
    {
      v11 = kaldi::nnet1::Nnet::InputDim(v5, a2, a3, a4, a5);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v34, a2, 0, *(_DWORD *)(a2 + 20), v9, v11);
      v16 = kaldi::nnet1::Nnet::OutputDim(v5, v12, v13, v14, v15);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v31, a3, 0, *(_DWORD *)(a3 + 20), (const char *)v28, v16);
      *((_QWORD *)&v36 + 1) = v10;
      *((_QWORD *)&v33 + 1) = v10;
      memset(&v29[1], 0, 24);
      v30 = 0;
      v29[0] = &unk_1EA92DFA8;
      v29[4] = v10;
      if (v8[178])
        kaldi::nnet1::Nnet::Feedforward((uint64_t *)v5, (uint64_t)&v34, (uint64_t)v29, -1, 0);
      else
        kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>((uint64_t *)v5, (uint64_t)&v34, (uint64_t)v29, v26, v17);
      if (v8[176])
        v9 = (const char *)(kaldi::nnet1::Nnet::InputDim(v5, v18, v19, v20, v21) + v9);
      if (v8[177])
      {
        kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v31, (uint64_t)v29, 111, v20, v21, 1.0, 1.0);
      }
      else
      {
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v31, (uint64_t)v29, 111, v20, v21);
        v28 += kaldi::nnet1::Nnet::OutputDim(v5, v22, v23, v24, v25);
      }
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v29);
      v31 = &unk_1EA926508;
      v32 = 0u;
      v33 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v31);
      v34 = &unk_1EA926508;
      v35 = 0u;
      v36 = 0u;
      result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v34);
      v5 = (kaldi::nnet1::Nnet *)((char *)v5 + 376);
    }
    while (v5 != v27);
  }
  return result;
}

void sub_1DE4467A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _OWORD *v25;

  a25 = &unk_1EA926508;
  *v25 = 0u;
  v25[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a25);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::BackpropagateFnc(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v6;
  kaldi::nnet1::Nnet *v7;
  uint64_t v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  int v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  kaldi::nnet1::Nnet *v27;
  char v29[8];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  void *v38;
  __int128 v39;
  __int128 v40;

  if (a5)
    v6 = a5;
  else
    v6 = a4;
  v7 = *(kaldi::nnet1::Nnet **)(result + 184);
  v27 = *(kaldi::nnet1::Nnet **)(result + 192);
  if (v7 != v27)
  {
    v10 = result;
    v11 = 0;
    v12 = 0;
    v13 = *(_QWORD *)(v6 + 32);
    do
    {
      v14 = kaldi::nnet1::Nnet::OutputDim(v7, a2, a3, a4, (const char *)a5);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v38, a4, 0, *(_DWORD *)(a4 + 20), v12, v14);
      *((_QWORD *)&v40 + 1) = v13;
      if (a5)
      {
        v19 = kaldi::nnet1::Nnet::InputDim(v7, v15, v16, v17, v18);
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v35, a5, 0, *(_DWORD *)(a5 + 20), v11, v19);
        *((_QWORD *)&v37 + 1) = v13;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v34 = 0;
        *(_QWORD *)v29 = &unk_1EA92DFA8;
        v33 = v13;
        kaldi::nnet1::Nnet::Backpropagate((const void ***)v7, (uint64_t)&v38, v29, a6, v20);
        if (*(_BYTE *)(v10 + 176))
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v35, (uint64_t)v29, 111, v21, v22);
        else
          kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v35, (uint64_t)v29, 111, v21, v22, 1.0, 1.0);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v29);
        v35 = &unk_1EA926508;
        v36 = 0u;
        v37 = 0u;
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v35);
      }
      else
      {
        kaldi::nnet1::Nnet::Backpropagate((const void ***)v7, (uint64_t)&v38, 0, a6, v18);
      }
      if (*(_BYTE *)(v10 + 176))
        v11 = (const char *)(kaldi::nnet1::Nnet::InputDim(v7, v23, v24, v25, v26) + v11);
      if (!*(_BYTE *)(v10 + 177))
        v12 = (const char *)(kaldi::nnet1::Nnet::OutputDim(v7, v23, v24, v25, v26) + v12);
      v38 = &unk_1EA926508;
      v39 = 0u;
      v40 = 0u;
      result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v38);
      v7 = (kaldi::nnet1::Nnet *)((char *)v7 + 376);
    }
    while (v7 != v27);
  }
  return result;
}

void sub_1DE4469F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _OWORD *v25;

  a25 = &unk_1EA926508;
  *v25 = 0u;
  v25[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a25);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::ParallelComponent::SetGradientNormalization(_QWORD *result, uint64_t a2, float a3)
{
  _QWORD *v3;
  _QWORD *v6;

  v3 = (_QWORD *)result[23];
  if (v3 != (_QWORD *)result[24])
  {
    v6 = result;
    do
    {
      result = kaldi::nnet1::Nnet::SetGradientNormalization(v3, a2, 0, 0, a3);
      v3 += 47;
    }
    while (v3 != (_QWORD *)v6[24]);
  }
  return result;
}

void kaldi::nnet1::ParallelComponent::UpdateWeights(kaldi::nnet1::ParallelComponent *this, void *a2, uint64_t a3)
{
  const void ***i;

  for (i = (const void ***)*((_QWORD *)this + 23); i != *((const void ****)this + 24); i += 47)
    kaldi::nnet1::Nnet::Update(i, a2, a3);
}

uint64_t kaldi::nnet1::ParallelComponent::CopyQuantized8Bit(kaldi::nnet1::ParallelComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const void ***v9;
  const void ***v10;

  v2 = operator new();
  v3 = *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)(v2 + 208) = off_1EA92D6D8;
  v4 = (char *)this + v3;
  *(_WORD *)(v2 + 224) = *(_WORD *)((char *)this + v3 + 16);
  *(_QWORD *)(v2 + 216) = *(_QWORD *)((char *)this + v3 + 8);
  *(_QWORD *)(v2 + 240) = 0;
  *(_QWORD *)(v2 + 248) = 0;
  *(_QWORD *)(v2 + 232) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 232), *(const void **)((char *)this + v3 + 24), *(_QWORD *)((char *)this + v3 + 32), (uint64_t)(*(_QWORD *)((char *)this + v3 + 32) - *(_QWORD *)((char *)this + v3 + 24)) >> 3);
  *(_QWORD *)(v2 + 208) = off_1EA929750;
  *(_QWORD *)(v2 + 256) = &off_1EA9284D0;
  *(_OWORD *)(v2 + 264) = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(v2 + 279) = *(_OWORD *)(v4 + 71);
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v2, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1EA91C038, (uint64_t)this);
  *(_QWORD *)v2 = &off_1EA9287D0;
  *(_QWORD *)(v2 + 200) = 0;
  *(_QWORD *)(v2 + 208) = &off_1EA928A88;
  *(_QWORD *)(v2 + 160) = &off_1EA928928;
  *(_QWORD *)(v2 + 168) = &unk_1EA928950;
  *(_WORD *)(v2 + 176) = *((_WORD *)this + 88);
  *(_BYTE *)(v2 + 178) = *((_BYTE *)this + 178);
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 184) = 0;
  std::vector<kaldi::nnet1::Nnet>::__init_with_size[abi:ne180100]<kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*>((_QWORD *)(v2 + 184), *((_QWORD *)this + 23), *((_QWORD *)this + 24), 0x51B3BEA3677D46CFLL * ((uint64_t)(*((_QWORD *)this + 24) - *((_QWORD *)this + 23)) >> 3));
  v9 = *(const void ****)(v2 + 184);
  v10 = *(const void ****)(v2 + 192);
  while (v9 != v10)
  {
    kaldi::nnet1::Nnet::QuantizeComponents<kaldi::nnet1::Quantizable8BitComponentItf>(v9, v5, v6, v7, v8);
    v9 += 47;
  }
  return v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_1DE446C64(_Unwind_Exception *a1)
{
  kaldi::nnet1::RecurrentBaseComponent *v1;
  kaldi::nnet1::UpdatableComponent *v2;

  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v1, (uint64_t *)&off_1EA91C038);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  MEMORY[0x1DF0ED014](v1, 0x10A1C40422ECF24);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::CopyQuantized16Bit(kaldi::nnet1::ParallelComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const void ***v9;
  const void ***v10;

  v2 = operator new();
  v3 = *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)(v2 + 208) = off_1EA92D6D8;
  v4 = (char *)this + v3;
  *(_WORD *)(v2 + 224) = *(_WORD *)((char *)this + v3 + 16);
  *(_QWORD *)(v2 + 216) = *(_QWORD *)((char *)this + v3 + 8);
  *(_QWORD *)(v2 + 240) = 0;
  *(_QWORD *)(v2 + 248) = 0;
  *(_QWORD *)(v2 + 232) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 232), *(const void **)((char *)this + v3 + 24), *(_QWORD *)((char *)this + v3 + 32), (uint64_t)(*(_QWORD *)((char *)this + v3 + 32) - *(_QWORD *)((char *)this + v3 + 24)) >> 3);
  *(_QWORD *)(v2 + 208) = off_1EA929750;
  *(_QWORD *)(v2 + 256) = &off_1EA9284D0;
  *(_OWORD *)(v2 + 264) = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(v2 + 279) = *(_OWORD *)(v4 + 71);
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v2, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1EA91C038, (uint64_t)this);
  *(_QWORD *)v2 = &off_1EA9287D0;
  *(_QWORD *)(v2 + 200) = 0;
  *(_QWORD *)(v2 + 208) = &off_1EA928A88;
  *(_QWORD *)(v2 + 160) = &off_1EA928928;
  *(_QWORD *)(v2 + 168) = &unk_1EA928950;
  *(_WORD *)(v2 + 176) = *((_WORD *)this + 88);
  *(_BYTE *)(v2 + 178) = *((_BYTE *)this + 178);
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 184) = 0;
  std::vector<kaldi::nnet1::Nnet>::__init_with_size[abi:ne180100]<kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*>((_QWORD *)(v2 + 184), *((_QWORD *)this + 23), *((_QWORD *)this + 24), 0x51B3BEA3677D46CFLL * ((uint64_t)(*((_QWORD *)this + 24) - *((_QWORD *)this + 23)) >> 3));
  v9 = *(const void ****)(v2 + 184);
  v10 = *(const void ****)(v2 + 192);
  while (v9 != v10)
  {
    kaldi::nnet1::Nnet::QuantizeComponents<kaldi::nnet1::Quantizable16BitComponentItf>(v9, v5, v6, v7, v8);
    v9 += 47;
  }
  return v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_1DE446E00(_Unwind_Exception *a1)
{
  kaldi::nnet1::RecurrentBaseComponent *v1;
  kaldi::nnet1::UpdatableComponent *v2;

  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v1, (uint64_t *)&off_1EA91C038);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  MEMORY[0x1DF0ED014](v1, 0x10A1C40422ECF24);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::ParallelComponent::CopyQuantized8Bit(kaldi::nnet1::ParallelComponent *this)
{
  return kaldi::nnet1::ParallelComponent::CopyQuantized8Bit((kaldi::nnet1::ParallelComponent *)((char *)this - 160));
}

uint64_t `non-virtual thunk to'kaldi::nnet1::ParallelComponent::CopyQuantized16Bit(kaldi::nnet1::ParallelComponent *this)
{
  return kaldi::nnet1::ParallelComponent::CopyQuantized16Bit((kaldi::nnet1::ParallelComponent *)((char *)this - 168));
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::Copy(kaldi::nnet1::ParallelComponent *this)
{
  return kaldi::nnet1::ParallelComponent::Copy((kaldi::nnet1::ParallelComponent *)((char *)this
                                                                                 + *(_QWORD *)(*(_QWORD *)this - 32)));
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::CountZeroCorr(kaldi::nnet1::ParallelComponent *this, int *a2, int *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::ParallelComponent::CountZeroCorr((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 56), a2, a3, a4, a5);
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::VectorizeWeightsCorrs(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::ParallelComponent::VectorizeWeightsCorrs((uint64_t)a1 + *(_QWORD *)(*a1 - 64), a2, a3, a4, a5);
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::Info@<X0>(kaldi::nnet1::ParallelComponent *this@<X0>, std::string *a2@<X8>)
{
  return kaldi::nnet1::ParallelComponent::Info((kaldi::nnet1::ParallelComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 80)), a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::InfoGradient@<X0>(kaldi::nnet1::ParallelComponent *this@<X0>, std::string *a2@<X8>)
{
  return kaldi::nnet1::ParallelComponent::InfoGradient((kaldi::nnet1::ParallelComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)), a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::InfoPropagate(kaldi::nnet1::ParallelComponent *this)
{
  return kaldi::nnet1::ParallelComponent::InfoPropagate((kaldi::nnet1::ParallelComponent *)((char *)this
                                                                                          + *(_QWORD *)(*(_QWORD *)this - 96)));
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::InfoBackPropagate(kaldi::nnet1::ParallelComponent *this)
{
  return kaldi::nnet1::ParallelComponent::InfoBackPropagate((kaldi::nnet1::ParallelComponent *)((char *)this
                                                                                              + *(_QWORD *)(*(_QWORD *)this - 104)));
}

void `virtual thunk to'kaldi::nnet1::ParallelComponent::InitData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::ParallelComponent::InitData((kaldi::nnet1::ParallelComponent *)((char *)a1 + *(_QWORD *)(*a1 - 112)), a2, a3, a4, a5);
}

_QWORD *`virtual thunk to'kaldi::nnet1::ParallelComponent::WriteData(_QWORD *a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::ParallelComponent::WriteData((uint64_t)a1 + *(_QWORD *)(*a1 - 120), a2, a3, a4, a5);
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::ParallelComponent::PropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 128), a2, a3, a4, a5);
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  return kaldi::nnet1::ParallelComponent::BackpropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 144), a2, a3, a4, a5, a6);
}

uint64_t *`virtual thunk to'kaldi::nnet1::ParallelComponent::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::ParallelComponent::ReadData((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 176)), a2, a3, a4);
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::NumParams(kaldi::nnet1::ParallelComponent *this)
{
  char *v1;
  kaldi::nnet1::Nnet *v2;
  kaldi::nnet1::Nnet *v3;
  uint64_t v4;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 192);
  v2 = (kaldi::nnet1::Nnet *)*((_QWORD *)v1 + 23);
  v3 = (kaldi::nnet1::Nnet *)*((_QWORD *)v1 + 24);
  if (v2 == v3)
    return 0;
  LODWORD(v4) = 0;
  do
  {
    v4 = kaldi::nnet1::Nnet::NumParams(v2) + v4;
    v2 = (kaldi::nnet1::Nnet *)((char *)v2 + 376);
  }
  while (v2 != v3);
  return v4;
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::GetParams(_QWORD *a1, uint64_t a2)
{
  return kaldi::nnet1::ParallelComponent::GetParams((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 200)), a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::SetParams(_QWORD *a1, uint64_t a2)
{
  return kaldi::nnet1::ParallelComponent::SetParams((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 208)), a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::GetNormalizedLearningRate(kaldi::nnet1::ParallelComponent *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::ParallelComponent::GetNormalizedLearningRate((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 216), a2, a3, a4, a5);
}

float `virtual thunk to'kaldi::nnet1::ParallelComponent::SumParams(kaldi::nnet1::ParallelComponent *this)
{
  char *v1;
  kaldi::nnet1::Nnet *v2;
  kaldi::nnet1::Nnet *v3;
  float v4;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 224);
  v2 = (kaldi::nnet1::Nnet *)*((_QWORD *)v1 + 23);
  v3 = (kaldi::nnet1::Nnet *)*((_QWORD *)v1 + 24);
  v4 = 0.0;
  while (v2 != v3)
  {
    v4 = v4 + kaldi::nnet1::Nnet::SumParams(v2);
    v2 = (kaldi::nnet1::Nnet *)((char *)v2 + 376);
  }
  return v4;
}

_QWORD *`virtual thunk to'kaldi::nnet1::ParallelComponent::SetGradientNormalization(_QWORD *result, uint64_t a2, float a3)
{
  char *v3;
  _QWORD *i;

  v3 = (char *)result + *(_QWORD *)(*result - 256);
  for (i = (_QWORD *)*((_QWORD *)v3 + 23); i != *((_QWORD **)v3 + 24); i += 47)
    result = kaldi::nnet1::Nnet::SetGradientNormalization(i, a2, 0, 0, a3);
  return result;
}

void `virtual thunk to'kaldi::nnet1::ParallelComponent::UpdateWeights(kaldi::nnet1::ParallelComponent *this, void *a2, uint64_t a3)
{
  char *v3;
  const void ***i;

  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 272);
  for (i = (const void ***)*((_QWORD *)v3 + 23); i != *((const void ****)v3 + 24); i += 47)
    kaldi::nnet1::Nnet::Update(i, a2, a3);
}

uint64_t `virtual thunk to'kaldi::nnet1::ParallelComponent::SetTrainOptions(kaldi::nnet1::ParallelComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  return kaldi::nnet1::ParallelComponent::SetTrainOptions((kaldi::nnet1::ParallelComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 280)), a2);
}

kaldi::nnet1::InterpolationComponent *kaldi::nnet1::InterpolationComponent::Copy(kaldi::nnet1::InterpolationComponent *this)
{
  kaldi::nnet1::InterpolationComponent *v2;

  v2 = (kaldi::nnet1::InterpolationComponent *)operator new();
  kaldi::nnet1::InterpolationComponent::InterpolationComponent(v2, *((_DWORD *)this + 2), *((_DWORD *)this + 3));
  (*(void (**)(kaldi::nnet1::InterpolationComponent *, char *))(*(_QWORD *)v2 + 176))(v2, (char *)this + 48);
  return v2;
}

void sub_1DE447140(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C40B9971A7CLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::InterpolationComponent::GetType(kaldi::nnet1::InterpolationComponent *this)
{
  return 1039;
}

void kaldi::nnet1::InterpolationComponent::InitData(uint64_t a1, uint64_t *a2)
{
  void **v4;
  uint64_t v5;
  const char *v6;
  int v7;
  int v8;
  uint64_t v9;
  const char *v10;
  unint64_t v11;
  char *v12;
  _DWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  _QWORD v22[34];
  uint64_t v23;

  v23 = 0;
  v4 = (void **)(a1 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<NumComponents>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v23, v5, v6);
  if ((int)v23 < 1 || (v7 = *(_DWORD *)(a1 + 8), v7 % (int)v23))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-interpolation-component.h", 106);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, "The input dimension is not divisible by the number of components");
    goto LABEL_26;
  }
  if (v7 / (int)v23 != *(_DWORD *)(a1 + 12))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-interpolation-component.h", 109);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, "The output dimension does not match the dimension of individual component");
LABEL_26:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  v8 = 0;
  do
  {
    kaldi::ExpectToken(a2, 0, (kaldi *)"<ComponentWeight>");
    kaldi::ReadBasicType<float>(a2, 0, (float *)&v23 + 1, v9, v10);
    v12 = *(char **)(a1 + 56);
    v11 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v12 >= v11)
    {
      v14 = (char *)*v4;
      v15 = (v12 - (_BYTE *)*v4) >> 2;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v17 = v11 - (_QWORD)v14;
      if (v17 >> 1 > v16)
        v16 = v17 >> 1;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
        v18 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 64, v18);
        v14 = *(char **)(a1 + 48);
        v12 = *(char **)(a1 + 56);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[4 * v15];
      *(_DWORD *)v20 = HIDWORD(v23);
      v13 = v20 + 4;
      while (v12 != v14)
      {
        v21 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v20 - 1) = v21;
        v20 -= 4;
      }
      *(_QWORD *)(a1 + 48) = v20;
      *(_QWORD *)(a1 + 56) = v13;
      *(_QWORD *)(a1 + 64) = &v19[4 * v18];
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_DWORD *)v12 = HIDWORD(v23);
      v13 = v12 + 4;
    }
    *(_QWORD *)(a1 + 56) = v13;
    ++v8;
  }
  while (v8 < (int)v23);
  kaldi::ExpectToken(a2, 0, (kaldi *)"</InterpolationComponent>");
}

_QWORD *kaldi::nnet1::InterpolationComponent::WriteData(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  const std::locale::facet *v10;
  unint64_t v11;
  std::locale::id *v12;
  const std::locale::facet *v13;
  _QWORD *result;
  const std::locale::facet *v15;
  std::locale v16;

  kaldi::WriteToken(a2, a3, (kaldi *)"<NumComponents>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  if ((a3 & 1) == 0)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
    v10 = std::locale::use_facet(&v16, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v16);
    std::ostream::put();
    std::ostream::flush();
  }
  if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(a1 + 48))
  {
    v11 = 0;
    v12 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      kaldi::WriteToken(a2, a3, (kaldi *)"<ComponentWeight>", v8, v9);
      kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
      if ((a3 & 1) == 0)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
        v13 = std::locale::use_facet(&v16, v12);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(&v16);
        std::ostream::put();
        std::ostream::flush();
      }
      ++v11;
    }
    while (v11 < (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2);
  }
  result = kaldi::WriteToken(a2, a3, (kaldi *)"</InterpolationComponent>", v8, v9);
  if ((a3 & 1) == 0)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
    v15 = std::locale::use_facet(&v16, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale(&v16);
    std::ostream::put();
    return (_QWORD *)std::ostream::flush();
  }
  return result;
}

void sub_1DE447570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::InterpolationComponent::PropagateFnc(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const char *v10;
  float v11;
  void *v12;
  __int128 v13;
  __int128 v14;

  v3 = *(_QWORD *)(result + 56) - *(_QWORD *)(result + 48);
  if (v3)
  {
    v6 = result;
    v7 = 0;
    v8 = *(int *)(result + 8) / (unint64_t)(v3 >> 2);
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v12, a2, 0, *(_DWORD *)(a2 + 20), (const char *)(v7 * v8), v8);
      if (v7)
        v11 = 1.0;
      else
        v11 = 0.0;
      kaldi::CuMatrixBase<float>::AddMat(a3, (uint64_t)&v12, 111, v9, v10, *(float *)(*(_QWORD *)(v6 + 48) + 4 * v7), v11);
      v12 = &unk_1EA926508;
      v13 = 0u;
      v14 = 0u;
      result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v12);
      ++v7;
    }
    while (v7 < (uint64_t)(*(_QWORD *)(v6 + 56) - *(_QWORD *)(v6 + 48)) >> 2);
  }
  return result;
}

void sub_1DE447674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _OWORD *v10;
  uint64_t v11;

  a10 = v11 + 16;
  *v10 = 0u;
  v10[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::InterpolationComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = v6 - v5;
  if (v6 != v5)
  {
    v11 = 0;
    v12 = *(int *)(a1 + 8) / (unint64_t)(v7 >> 2);
    do
    {
      v13 = v11 + 1;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v15 = &unk_1EA926538;
      if (((v11 + 1) * v12 - 1 + v11 * v12) > *(_DWORD *)(a2 + 16))
        kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", a5);
      v16 = *(_QWORD *)(a2 + 8) + 4 * v11 * (int)v12;
      LODWORD(v17) = (v11 + 1) * v12 - 1;
      v18 = *(_QWORD *)(a2 + 24);
      if (v11)
        v14 = 1.0;
      else
        v14 = 0.0;
      kaldi::CuVectorBase<float>::AddVec(a3, (uint64_t)&v15, a3, a4, a5, *(float *)(v5 + 4 * v11), v14);
      v5 = *(_QWORD *)(a1 + 48);
      v11 = v13;
    }
    while (v13 < (*(_QWORD *)(a1 + 56) - v5) >> 2);
  }
}

uint64_t kaldi::nnet1::InterpolationComponent::BackpropagateFnc(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  void *v14;
  __int128 v15;
  __int128 v16;

  v5 = *(_QWORD *)(result + 56) - *(_QWORD *)(result + 48);
  if (v5)
  {
    v8 = result;
    v9 = 0;
    v10 = *(_QWORD *)(a4 + 32);
    v11 = *(int *)(result + 8) / (unint64_t)(v5 >> 2);
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v14, a5, 0, *(_DWORD *)(a5 + 20), (const char *)(v9 * v11), v11);
      *((_QWORD *)&v16 + 1) = v10;
      kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v14, a4, 111, v12, v13, *(float *)(*(_QWORD *)(v8 + 48) + 4 * v9), 0.0);
      v14 = &unk_1EA926508;
      v15 = 0u;
      v16 = 0u;
      result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v14);
      ++v9;
    }
    while (v9 < (uint64_t)(*(_QWORD *)(v8 + 56) - *(_QWORD *)(v8 + 48)) >> 2);
  }
  return result;
}

void sub_1DE44789C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _OWORD *v10;
  uint64_t v11;

  a10 = v11 + 16;
  *v10 = 0u;
  v10[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::InterpolationComponent::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  float v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  _QWORD v26[3];
  uint64_t v27;

  v9 = *(int *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a4 + 24);
  v13 = *(unsigned int *)(a4 + 16);
  v26[2] = 0;
  v27 = 0;
  v26[0] = &unk_1EA92DFD8;
  v26[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v26, v13, 0, a4, a5);
  v27 = v12;
  if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(a1 + 48))
  {
    v14 = 0;
    v15 = v9 / ((v10 - v11) >> 2);
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v23, a2, 0, *(_DWORD *)(a2 + 20), (const char *)(a3 + v14 * v15), 1);
      *((_QWORD *)&v25 + 1) = v12;
      kaldi::CuVectorBase<float>::CopyRowsFromMat((uint64_t)v26, (uint64_t)&v23, v16, v17, v18);
      if (v14)
        v22 = 1.0;
      else
        v22 = 0.0;
      kaldi::CuVectorBase<float>::AddVec(a4, (uint64_t)v26, v19, v20, v21, *(float *)(*(_QWORD *)(a1 + 48) + 4 * v14), v22);
      v23 = &unk_1EA926508;
      v24 = 0u;
      v25 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v23);
      ++v14;
    }
    while (v14 < (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2);
  }
  v26[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v26);
}

void sub_1DE447A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::InterpolationComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  void **v6;
  uint64_t v7;
  const char *v8;
  int v9;
  int v10;
  uint64_t v11;
  const char *v12;
  unint64_t v13;
  char *v14;
  _DWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  _QWORD v24[34];
  int v25[4];

  *(_QWORD *)v25 = 0;
  v6 = (void **)(a1 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<NumComponents>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)v25, v7, v8);
  if (v25[0] < 1 || (v9 = *(_DWORD *)(a1 + 8), v9 % v25[0]))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24, "ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-interpolation-component.h", 128);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, "The input dimension is not divisible by the number of components");
    goto LABEL_26;
  }
  if (v9 / v25[0] != *(_DWORD *)(a1 + 12))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24, "ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-interpolation-component.h", 131);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, "The output dimension does not match the dimension of individual component");
LABEL_26:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
  }
  v10 = 0;
  do
  {
    kaldi::ExpectToken(a2, a3, (kaldi *)"<ComponentWeight>");
    kaldi::ReadBasicType<float>(a2, a3, (float *)&v25[1], v11, v12);
    v14 = *(char **)(a1 + 56);
    v13 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v14 >= v13)
    {
      v16 = (char *)*v6;
      v17 = (v14 - (_BYTE *)*v6) >> 2;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v19 = v13 - (_QWORD)v16;
      if (v19 >> 1 > v18)
        v18 = v19 >> 1;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
        v20 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 64, v20);
        v16 = *(char **)(a1 + 48);
        v14 = *(char **)(a1 + 56);
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[4 * v17];
      *(_DWORD *)v22 = v25[1];
      v15 = v22 + 4;
      while (v14 != v16)
      {
        v23 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *((_DWORD *)v22 - 1) = v23;
        v22 -= 4;
      }
      *(_QWORD *)(a1 + 48) = v22;
      *(_QWORD *)(a1 + 56) = v15;
      *(_QWORD *)(a1 + 64) = &v21[4 * v20];
      if (v16)
        operator delete(v16);
    }
    else
    {
      *(_DWORD *)v14 = v25[1];
      v15 = v14 + 4;
    }
    *(_QWORD *)(a1 + 56) = v15;
    ++v10;
  }
  while (v10 < v25[0]);
  kaldi::ExpectToken(a2, a3, (kaldi *)"</InterpolationComponent>");
}

char *kaldi::nnet1::InterpolationComponent::SetComponentWeights(uint64_t a1, uint64_t a2)
{
  char *result;

  result = (char *)(a1 + 48);
  if (result != (char *)a2)
    return std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  return result;
}

uint64_t kaldi::nnet1::CompressedWordVecComponent::Copy(kaldi::nnet1::CompressedWordVecComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1EA92D6D8;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1EA92B8A8;
  kaldi::CompressedMatrix::CompressedMatrix(v2 + 48, (const void **)this + 6, v4, v5, v6);
  return v2;
}

void sub_1DE447D18(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;

  *v1 = v2;
  v4 = (void *)v1[3];
  if (v4)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  MEMORY[0x1DF0ED014](v1, 0x10C1C400D8AAF98);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::CompressedWordVecComponent::GetType(kaldi::nnet1::CompressedWordVecComponent *this)
{
  return 271;
}

uint64_t kaldi::nnet1::CompressedWordVecComponent::Info(kaldi::nnet1::CompressedWordVecComponent *this)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  (*(void (**)(kaldi::nnet1::CompressedWordVecComponent *, _QWORD *, _QWORD))(*(_QWORD *)this + 168))(this, v3, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\n CompressedWordVec table", 25);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v3[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v5);
}

void sub_1DE447E34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::CompressedWordVecComponent::WriteData(uint64_t a1, _QWORD *a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::CompressedMatrix::Write((uint64_t *)(a1 + 48), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::CompressedWordVecComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-compressed-word-vec-component.h", (const char *)0x32, "in.NumCols() == this->input_dim_", a5);
  return kaldi::CuMatrixBase<float>::ConcatenateVec(a3, (uint64_t *)(a1 + 48), a2, a4, a5);
}

void kaldi::nnet1::CompressedWordVecComponent::ReadData(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  kaldi::CompressedMatrix::Read(a1 + 48, a2, a3, a4);
}

kaldi::nnet1::WordVecComponent *kaldi::nnet1::WordVecComponent::Copy(kaldi::nnet1::WordVecComponent *this)
{
  kaldi::nnet1::WordVecComponent *v2;

  v2 = (kaldi::nnet1::WordVecComponent *)operator new();
  kaldi::nnet1::WordVecComponent::WordVecComponent(v2, this);
  return v2;
}

void sub_1DE447EEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10A1C40DE627FD4);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordVecComponent::GetType(kaldi::nnet1::WordVecComponent *this)
{
  return 268;
}

uint64_t kaldi::nnet1::WordVecComponent::CountZeroCorr(kaldi::nnet1::WordVecComponent *this, int *a2, int *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;

  result = (*(uint64_t (**)(kaldi::nnet1::WordVecComponent *))(*(_QWORD *)this + 176))(this);
  *a3 = result;
  *a2 = 0;
  if (*((_DWORD *)this + 71))
  {
    result = kaldi::CuMatrixBase<float>::CountZeros((uint64_t)this + 264, v7, v8, v9, v10);
    *a2 = result;
  }
  return result;
}

uint64_t kaldi::nnet1::WordVecComponent::Info(kaldi::nnet1::WordVecComponent *this)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  void *__p[2];
  unsigned __int8 v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  (*(void (**)(kaldi::nnet1::WordVecComponent *, _QWORD *, _QWORD))(*(_QWORD *)this + 168))(this, v8, 0);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n WordVec table", 15);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 96);
  if ((v7 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v4 = v7;
  else
    v4 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v8[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v9 < 0)
    operator delete((void *)v8[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v10);
}

void sub_1DE448084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::WordVecComponent::InfoGradient@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "\n we don't save intermediate gradient");
}

void kaldi::nnet1::WordVecComponent::InitData(unsigned int *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  uint64_t v6;
  const char *v7;
  int *v8;
  uint64_t v9;
  const char *v10;
  void **v11;
  BOOL v12;
  int *v13;
  void *v14;
  BOOL v16;
  float *v17;
  BOOL v18;
  BOOL v24;
  BOOL v25;
  BOOL v32;
  std::string *v33;
  void *v34;
  void *v35;
  BOOL v36;
  int inited;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  int v41;
  unsigned int v42;
  int64_t v43;
  unint64_t v44;
  float v45;
  float v46;
  char *v48;
  float v49;
  float v50;
  float v51;
  signed int v53;
  _QWORD *v54;
  void **v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59[3];
  void **v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  _QWORD v64[2];
  uint64_t v65;
  void *__p;
  void *v67;
  void *v68[3];
  int v69;
  std::string v70;
  std::string v71;
  int v72;

  v72 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v71);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[60], &v70);
  v69 = -1;
  memset(v68, 0, sizeof(v68));
  v8 = (int *)(a1 + 62);
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_117;
    kaldi::ReadToken(a2, 0, (uint64_t)v68, v6, v7);
    if ((SHIBYTE(v68[2]) & 0x80000000) == 0)
      break;
    v14 = v68[1];
    if (v68[1] == (void *)13
      && *(_QWORD *)v68[0] == 0x74536D617261503CLL
      && *(_QWORD *)((char *)v68[0] + 5) == 0x3E7665646474536DLL)
    {
LABEL_79:
      v17 = (float *)&v72;
LABEL_104:
      kaldi::ReadBasicType<float>(a2, 0, v17, v9, v10);
      goto LABEL_115;
    }
    if (v68[1] == (void *)15)
    {
      v16 = *(_QWORD *)v68[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v68[0] + 7) == 0x3E66656F43657461;
      v17 = (float *)(a1 + 65);
      if (v16)
        goto LABEL_104;
      v14 = v68[1];
    }
    if (v14 == (void *)11)
    {
      v18 = *(_QWORD *)v68[0] == 0x69536261636F563CLL && *(_QWORD *)((char *)v68[0] + 3) == 0x3E657A6953626163;
      v13 = (int *)(a1 + 62);
      if (v18)
        goto LABEL_114;
      v14 = v68[1];
    }
    if (v14 != (void *)12)
      goto LABEL_34;
    if (*(_QWORD *)v68[0] != 0x536D6F646E61523CLL || *((_DWORD *)v68[0] + 2) != 1046766949)
    {
      v14 = v68[1];
LABEL_34:
      if (v14 == (void *)19)
      {
        if (*(_QWORD *)v68[0] != 0x61725474696E493CLL
          || *((_QWORD *)v68[0] + 1) != 0x79546D726F66736ELL
          || *(_QWORD *)((char *)v68[0] + 11) != 0x3E657079546D726FLL)
        {
          v14 = v68[1];
          goto LABEL_43;
        }
LABEL_105:
        v33 = &v71;
LABEL_107:
        kaldi::ReadToken(a2, 0, (uint64_t)v33, v9, v10);
        goto LABEL_115;
      }
LABEL_43:
      if (v14 == (void *)18)
      {
        if (*(_QWORD *)v68[0] == 0x6E6569646172473CLL
          && *((_QWORD *)v68[0] + 1) == 0x7079546D726F4E74
          && *((_WORD *)v68[0] + 8) == 15973)
        {
LABEL_106:
          v33 = &v70;
          goto LABEL_107;
        }
        v14 = v68[1];
      }
      if (v14 == (void *)9)
      {
        v24 = *(_QWORD *)v68[0] == 0x6461724778614D3CLL && *((_BYTE *)v68[0] + 8) == 62;
        v17 = (float *)(a1 + 61);
        if (v24)
          goto LABEL_104;
        v14 = v68[1];
      }
      if (v14 != (void *)16)
        goto LABEL_116;
      v11 = (void **)v68[0];
LABEL_109:
      v34 = *v11;
      v35 = v11[1];
      v36 = v34 == (void *)0x5372656C6C69463CLL && v35 == (void *)0x3E64496C6F626D79;
      v13 = (int *)(a1 + 63);
      if (!v36)
        goto LABEL_116;
      goto LABEL_114;
    }
LABEL_73:
    v13 = &v69;
LABEL_114:
    kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v13, v9, v10);
LABEL_115:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v11 = v68;
  switch(HIBYTE(v68[2]))
  {
    case 9:
      goto LABEL_99;
    case 0xB:
      goto LABEL_5;
    case 0xC:
      goto LABEL_68;
    case 0xD:
      if (v68[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v68 + 5) != (void *)0x3E7665646474536DLL)
        goto LABEL_116;
      goto LABEL_79;
    case 0xF:
      v25 = v68[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v68 + 7) == (void *)0x3E66656F43657461;
      v17 = (float *)(a1 + 65);
      if (v25)
        goto LABEL_104;
      if (HIBYTE(v68[2]) == 9)
        goto LABEL_99;
      if (HIBYTE(v68[2]) == 12)
      {
LABEL_68:
        if (v68[0] != (void *)0x536D6F646E61523CLL || LODWORD(v68[1]) != 1046766949)
          goto LABEL_98;
        goto LABEL_73;
      }
      if (HIBYTE(v68[2]) != 11)
        goto LABEL_116;
LABEL_5:
      v12 = v68[0] == (void *)0x69536261636F563CLL && *(void **)((char *)v68 + 3) == (void *)0x3E657A6953626163;
      v13 = (int *)(a1 + 62);
      if (v12)
        goto LABEL_114;
LABEL_98:
      if (HIBYTE(v68[2]) != 9)
        goto LABEL_116;
LABEL_99:
      v32 = v68[0] == (void *)0x6461724778614D3CLL && LOBYTE(v68[1]) == 62;
      v17 = (float *)(a1 + 61);
      if (v32)
        goto LABEL_104;
LABEL_116:
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v68, "</Component>"))
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v64, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", 90);
        v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"Unknown token ", 14);
        if (SHIBYTE(v68[2]) >= 0)
          v55 = v68;
        else
          v55 = (void **)v68[0];
        if (SHIBYTE(v68[2]) >= 0)
          v56 = HIBYTE(v68[2]);
        else
          v56 = (uint64_t)v68[1];
        v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v55, v56);
        v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)", a typo in config?", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" (ParamStddev|LearnRateCoef|VocabSize|RandomSeed|InitTransformType|GradientNormType|MaxGrad)", 92);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v64);
      }
LABEL_117:
      if (*v8 <= 0)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v64, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", 96);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"invalid vocabulary size ", 24);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v64);
      }
      inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v71);
      a1[60] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v70);
      if (!inited)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v64, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", 104);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"it doesn't make sense to initialize the word vec as an identify matrix", 70);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v64);
      }
      if (v69 >= 1)
        kaldi::UniformRandomNumber::SetRandomSeeds(a3, v69);
      kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v64, a3);
      kaldi::CuMatrix<float>::Resize((uint64_t)(a1 + 24), a1[62], a1[64], 1u, 0);
      kaldi::Matrix<float>::Matrix((uint64_t)&v60, a1[62], a1[64], 0, 0);
      v41 = *v8;
      if (*v8 < 1)
        goto LABEL_141;
      v42 = 0;
      LODWORD(v43) = a1[64];
      while (2)
      {
        if ((int)v43 < 1)
          goto LABEL_140;
        v44 = 0;
        while (2)
        {
          if (inited == 2)
          {
            v50 = *(float *)&v72;
            kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v64, 0, v38, v39, v40);
            if (v62 <= v42 || v44 >= v61)
LABEL_153:
              kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v40);
            v48 = (char *)v60 + 4 * (int)(v42 * v63);
            v49 = v50 * v51;
LABEL_137:
            *(float *)&v48[4 * v44] = v49;
          }
          else if (inited == 1)
          {
            v45 = *(float *)&v72;
            v46 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v38, v39, v40);
            if (v62 <= v42 || v44 >= v61)
              goto LABEL_153;
            v48 = (char *)v60 + 4 * (int)(v42 * v63);
            v49 = (v46 + -0.5) * (float)(v45 + v45);
            goto LABEL_137;
          }
          ++v44;
          v43 = (int)a1[64];
          if ((uint64_t)v44 < v43)
            continue;
          break;
        }
        v41 = *v8;
LABEL_140:
        if ((int)++v42 < v41)
          continue;
        break;
      }
LABEL_141:
      v53 = a1[63];
      if ((v53 & 0x80000000) == 0)
      {
        if (v53 >= v41)
          kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", (const char *)0x78, "filler_id_ < voc_size_", v40);
        kaldi::MatrixBase<float>::Row((uint64_t)&v60, v53, v40, v59);
        kaldi::VectorBase<float>::SetZero((uint64_t)v59);
      }
      kaldi::CuMatrix<float>::operator=((uint64_t)(a1 + 24), (uint64_t)&v60);
      kaldi::Matrix<float>::~Matrix((uint64_t)&v60);
      if (__p)
      {
        v67 = __p;
        operator delete(__p);
      }
      v60 = (void **)&v65;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v60);
      if (SHIBYTE(v68[2]) < 0)
        operator delete(v68[0]);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      return;
    case 0x10:
      goto LABEL_109;
    case 0x12:
      goto LABEL_90;
    case 0x13:
      if (v68[0] == (void *)0x61725474696E493CLL
        && v68[1] == (void *)0x79546D726F66736ELL
        && *(void **)((char *)&v68[1] + 3) == (void *)0x3E657079546D726FLL)
      {
        goto LABEL_105;
      }
      if (HIBYTE(v68[2]) == 9)
        goto LABEL_99;
      if (HIBYTE(v68[2]) == 16)
        goto LABEL_108;
      if (HIBYTE(v68[2]) != 18)
        goto LABEL_116;
LABEL_90:
      if (v68[0] == (void *)0x6E6569646172473CLL && v68[1] == (void *)0x7079546D726F4E74 && LOWORD(v68[2]) == 15973)
        goto LABEL_106;
      if (HIBYTE(v68[2]) != 16)
        goto LABEL_98;
LABEL_108:
      v11 = v68;
      goto LABEL_109;
    default:
      goto LABEL_116;
  }
}

void sub_1DE448974()
{
  JUMPOUT(0x1DE4489ACLL);
}

void sub_1DE448984()
{
  JUMPOUT(0x1DE4489D4);
}

void sub_1DE448994(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 169) < 0)
    operator delete(*(void **)(v1 - 192));
  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  _Unwind_Resume(exception_object);
}

void sub_1DE4489A0(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)va1);
  JUMPOUT(0x1DE4489B4);
}

uint64_t kaldi::nnet1::WordVecComponent::WriteData(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  uint64_t v7;

  v7 = a1 + 96;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  return kaldi::CuMatrixBase<float>::Write(v7, a2, a3, a4);
}

float *kaldi::nnet1::WordVecComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", (const char *)0xD1, "in.NumCols() == this->input_dim_", a5);
  return kaldi::CuMatrixBase<float>::ConcatenateVec(a3, a1 + 96, a2, a4, a5);
}

uint64_t kaldi::nnet1::WordVecComponent::ReadData(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  float *v17;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  BOOL v26;
  BOOL v27;
  uint64_t result;
  const char *v29;
  _QWORD *v30;
  __int128 *v31;
  uint64_t v32;
  void *__p[2];
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  if (kaldi::Peek(a2, a3) == 60)
  {
    while (1)
    {
      v36 = 0uLL;
      v37 = 0;
      kaldi::ReadToken(a2, a3, (uint64_t)&v36, v7, v8);
      if ((SHIBYTE(v37) & 0x80000000) == 0)
        break;
      v14 = *((_QWORD *)&v36 + 1);
      if (*((_QWORD *)&v36 + 1) != 11
        || (*(_QWORD *)v36 == 0x69536261636F563CLL ? (v15 = *(_QWORD *)(v36 + 3) == 0x3E657A6953626163) : (v15 = 0),
            v13 = (uint64_t)(a1 + 62),
            !v15))
      {
        if (*((_QWORD *)&v36 + 1) == 15)
        {
          v16 = *(_QWORD *)v36 == 0x61526E7261654C3CLL && *(_QWORD *)(v36 + 7) == 0x3E66656F43657461;
          v17 = (float *)(a1 + 65);
          if (v16)
            goto LABEL_62;
          v14 = *((_QWORD *)&v36 + 1);
        }
        if (v14 == 18)
        {
          if (*(_QWORD *)v36 == 0x6E6569646172473CLL
            && *(_QWORD *)(v36 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v36 + 16) == 15973)
          {
LABEL_67:
            __p[0] = 0;
            __p[1] = 0;
            v35 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)__p, v9, v10);
            a1[60] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
            if (SHIBYTE(v35) < 0)
              operator delete(__p[0]);
            goto LABEL_63;
          }
          v14 = *((_QWORD *)&v36 + 1);
        }
        if (v14 == 9)
        {
          v20 = *(_QWORD *)v36 == 0x6461724778614D3CLL && *(_BYTE *)(v36 + 8) == 62;
          v17 = (float *)(a1 + 61);
          if (v20)
            goto LABEL_62;
          v14 = *((_QWORD *)&v36 + 1);
        }
        if (v14 != 16)
          goto LABEL_73;
        v11 = (uint64_t *)v36;
LABEL_37:
        v21 = *v11;
        v22 = v11[1];
        v23 = v21 == 0x5372656C6C69463CLL && v22 == 0x3E64496C6F626D79;
        v13 = (uint64_t)(a1 + 63);
        if (!v23)
          goto LABEL_73;
      }
LABEL_42:
      kaldi::ReadBasicType<int>(a2, a3, v13, v9, v10);
LABEL_63:
      if (SHIBYTE(v37) < 0)
        operator delete((void *)v36);
      if (kaldi::Peek(a2, a3) != 60)
        goto LABEL_69;
    }
    v11 = (uint64_t *)&v36;
    switch(HIBYTE(v37))
    {
      case 9:
        goto LABEL_57;
      case 0xB:
        v12 = (_QWORD)v36 == 0x69536261636F563CLL && *(_QWORD *)((char *)&v36 + 3) == 0x3E657A6953626163;
        v13 = (uint64_t)(a1 + 62);
        if (!v12)
          goto LABEL_73;
        goto LABEL_42;
      case 0xF:
        v26 = (_QWORD)v36 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v36 + 7) == 0x3E66656F43657461;
        v17 = (float *)(a1 + 65);
        if (!v26)
          goto LABEL_56;
        break;
      case 0x10:
        goto LABEL_37;
      case 0x12:
        if ((_QWORD)v36 == 0x6E6569646172473CLL
          && *((_QWORD *)&v36 + 1) == 0x7079546D726F4E74
          && (unsigned __int16)v37 == 15973)
        {
          goto LABEL_67;
        }
        if (HIBYTE(v37) == 16)
        {
          v11 = (uint64_t *)&v36;
          goto LABEL_37;
        }
LABEL_56:
        if (HIBYTE(v37) != 9)
          goto LABEL_73;
LABEL_57:
        v27 = (_QWORD)v36 == 0x6461724778614D3CLL && BYTE8(v36) == 62;
        v17 = (float *)(a1 + 61);
        if (!v27)
        {
LABEL_73:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", 146);
          v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (v37 >= 0)
            v31 = &v36;
          else
            v31 = (__int128 *)v36;
          if (v37 >= 0)
            v32 = HIBYTE(v37);
          else
            v32 = *((_QWORD *)&v36 + 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        return result;
      default:
        goto LABEL_73;
    }
LABEL_62:
    kaldi::ReadBasicType<float>(a2, a3, v17, v9, v10);
    goto LABEL_63;
  }
LABEL_69:
  if ((int)a1[62] <= 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", 151);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"invalid vocabulary size ", 24);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  result = kaldi::CuMatrix<float>::Read((uint64_t)(a1 + 24), a2, a3, a4);
  if (a1[29] != a1[62])
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", (const char *)0x9B, "vec_table_.NumRows() == voc_size_", v29);
  if (a1[28] != a1[64])
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", (const char *)0x9C, "vec_table_.NumCols() == embed_dim_", v29);
  return result;
}

void sub_1DE448F58()
{
  JUMPOUT(0x1DE448F60);
}

uint64_t kaldi::nnet1::WordVecComponent::WriteConfig(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  std::string __p;

  kaldi::WriteToken(a2, a3, (kaldi *)"<VocabSize>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v10, v11);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 240), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v12, v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v14, v15);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FillerSymbolId>", v16, v17);
  return kaldi::WriteBasicType<int>(a2, (int)a3);
}

void sub_1DE44907C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::WordVecComponent::NumParams(kaldi::nnet1::WordVecComponent *this)
{
  return (*((_DWORD *)this + 28) * *((_DWORD *)this + 29));
}

void *kaldi::nnet1::WordVecComponent::GetParams(uint64_t a1, void **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  v3 = a1 + 96;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 1, v5, v6);
  return kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)a2, v3, v7, v8, v9);
}

void **kaldi::nnet1::WordVecComponent::SetParams(uint64_t a1, uint64_t a2)
{
  int v4;
  const char *v5;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../engine/common/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", (const char *)0xBB, "wei_src.Dim() == NumParams()", v5);
  return kaldi::CuMatrixBase<float>::CopyRowsFromVec(a1 + 96, (char **)a2);
}

float kaldi::nnet1::WordVecComponent::SumParams(kaldi::nnet1::WordVecComponent *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 96, a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::WordVecComponent::PerturbParams(kaldi::nnet1::WordVecComponent *this, float a2)
{
  uint64_t v4;
  const char *v5;
  _BYTE v7[48];

  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v7, *((unsigned int *)this + 29), *((unsigned int *)this + 28), 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v7);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 96, (uint64_t)v7, 111, v4, v5, a2, 1.0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v7);
}

void sub_1DE4491C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::WordVecComponent::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, const char *a5)
{
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  kaldi::Vector<float>::Resize(a4, (*(_DWORD *)(a3 + 16) * *(_DWORD *)(a3 + 20)), 1, (uint64_t)a4, a5);
  return kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)a4, a3, v7, v8, v9);
}

void kaldi::nnet1::WordVecComponent::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6;
  float v9;
  float v10;
  uint64_t v11;
  int v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  float v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD v32[4];

  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "../engine/common/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", (const char *)0xF1, "input.NumCols() == this->input_dim_", a5);
  v6 = *(_DWORD *)(a2 + 20);
  if (*(_DWORD *)(a3 + 20) != v6)
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "../engine/common/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", (const char *)0xF2, "diff.NumRows() == batch_size", a5);
  if (*(_DWORD *)(a3 + 16) != *(_DWORD *)(a1 + 12))
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "../engine/common/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", (const char *)0xF3, "diff.NumCols() == this->output_dim_", a5);
  v9 = *(float *)(a1 + 56);
  if (*(_BYTE *)(a1 + 84))
    v9 = v9 / (float)v6;
  v10 = *(float *)(a1 + 244);
  if (v10 <= 0.0)
  {
    v11 = a3;
  }
  else
  {
    v11 = a1 + 144;
    *(_QWORD *)(a1 + 176) = a4;
    kaldi::CuMatrix<float>::operator=(a1 + 144, a3);
    v12 = *(_DWORD *)(a1 + 240);
    if (v12 == 2)
    {
      v14 = (float)v6;
      if (!*(_BYTE *)(a1 + 84))
        v14 = 1.0;
      v15 = v10 * v14;
      *(_QWORD *)(a1 + 224) = a4;
      kaldi::CuMatrix<float>::Resize(a1 + 192, *(unsigned int *)(a1 + 164), *(unsigned int *)(a1 + 160), 1u, 0);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(a1 + 144, (unsigned int *)(a1 + 192), v15, v16, v17, v18);
    }
    else if (v12 == 1)
    {
      v13 = (float)v6;
      if (!*(_BYTE *)(a1 + 84))
        v13 = 1.0;
      kaldi::nnet1::UpdatableComponent::ClipGradient(a1 + 144, v10 * v13);
    }
  }
  v19 = *(float *)(a1 + 72);
  if (v19 <= 0.0)
  {
    *(_QWORD *)(a1 + 128) = a4;
    kaldi::CuMatrixBase<float>::AddIndexedRows(a1 + 96, a2, v11, a4, a5, -(float)(v9 * *(float *)(a1 + 260)));
  }
  else
  {
    if (*(_QWORD *)(a1 + 320) == *(_QWORD *)(a1 + 312))
    {
      kaldi::CuMatrix<float>::Resize(a1 + 264, *(unsigned int *)(a1 + 116), *(unsigned int *)(a1 + 112), 0, 0);
      kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)(a1 + 312), a1 + 264);
    }
    *(_QWORD *)(a1 + 296) = a4;
    kaldi::CuMatrixBase<float>::SetZero(a1 + 264);
    kaldi::CuMatrixBase<float>::AddIndexedRows(a1 + 264, a2, v11, v20, v21, 1.0);
    kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 312), *(_DWORD *)(a1 + 76), v19, v22, v23, v24);
    *(_QWORD *)(a1 + 128) = a4;
    kaldi::CuMatrixBase<float>::AddMat(a1 + 96, a1 + 264, 111, v25, v26, -(float)(v9 * *(float *)(a1 + 260)), 1.0);
  }
  v28 = *(_DWORD *)(a1 + 252);
  if ((v28 & 0x80000000) == 0)
  {
    if ((signed int)v28 >= *(_DWORD *)(a1 + 248))
      kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "../engine/common/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", (const char *)0x125, "filler_id_ < voc_size_", v27);
    if (*(_DWORD *)(a1 + 116) <= v28)
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v27);
    v29 = *(_QWORD *)(a1 + 104) + 4 * (int)(*(_DWORD *)(a1 + 120) * v28);
    v30 = *(_DWORD *)(a1 + 112);
    v31 = *(_QWORD *)(a1 + 128);
    v32[0] = &unk_1EA926538;
    v32[1] = v29;
    v32[3] = v31;
    v32[2] = v30;
    kaldi::CuVectorBase<float>::SetZero((uint64_t)v32);
  }
}

void kaldi::nnet1::WordVecComponent::SetGradientNormalization(uint64_t a1, int a2, float a3)
{
  _QWORD v3[34];

  if (a2 == 3)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3, "SetGradientNormalization", "../engine/common/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", 223);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"RMSPROP is not implemented in word embedding yet", 48);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    }
  }
  else
  {
    *(float *)(a1 + 244) = a3;
    *(_DWORD *)(a1 + 240) = a2;
  }
}

void sub_1DE449570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordVecComponent::CopyCompressed(kaldi::nnet1::WordVecComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  float *v8[5];

  v2 = operator new();
  kaldi::nnet1::CompressedWordVecComponent::CompressedWordVecComponent(v2, *((_DWORD *)this + 2), *((_DWORD *)this + 3), v3, v4);
  kaldi::Matrix<float>::Matrix<float>((uint64_t)v8, (uint64_t)this + 96, 111, v5, v6);
  kaldi::CompressedMatrix::CopyFromMat<float>(v2 + 48, v8);
  kaldi::Matrix<float>::~Matrix((uint64_t)v8);
  return v2;
}

void sub_1DE4495F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::WordVecComponent::CopyCompressed(kaldi::nnet1::WordVecComponent *this)
{
  return kaldi::nnet1::WordVecComponent::CopyCompressed((kaldi::nnet1::WordVecComponent *)((char *)this - 88));
}

uint64_t kaldi::nnet1::FofeWordVecComponent::Copy(kaldi::nnet1::FofeWordVecComponent *this)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::WordVecComponent::WordVecComponent((kaldi::nnet1::WordVecComponent *)v2, this);
  *(_QWORD *)v2 = &off_1EA9299A8;
  *(_QWORD *)(v2 + 88) = &unk_1EA929AD8;
  *(_DWORD *)(v2 + 384) = *((_DWORD *)this + 96);
  kaldi::CuMatrix<float>::CuMatrix(v2 + 392, (char *)this + 392, 111);
  kaldi::CuMatrix<float>::CuMatrix(v2 + 440, (char *)this + 440, 111);
  return v2;
}

void sub_1DE4496C0(_Unwind_Exception *a1)
{
  kaldi::nnet1::WordVecComponent *v1;
  uint64_t v2;

  kaldi::CuMatrix<float>::~CuMatrix(v2);
  kaldi::nnet1::WordVecComponent::~WordVecComponent(v1);
  MEMORY[0x1DF0ED014](v1, 0x10A1C40E06CE33FLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::FofeWordVecComponent::GetType(kaldi::nnet1::FofeWordVecComponent *this)
{
  return 269;
}

uint64_t kaldi::nnet1::FofeWordVecComponent::PropagateFnc(kaldi::nnet1::FofeWordVecComponent *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  const char *v9;
  void *v11;
  __int128 v12;
  __int128 v13;

  v8 = *(_DWORD *)(a2 + 20);
  kaldi::nnet1::FofeWordVecComponent::Prepare(a1, v8);
  kaldi::nnet1::WordVecComponent::PropagateFnc((uint64_t)a1, a2, (uint64_t)a1 + 440, a4, v9);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v11, (uint64_t)a1 + 392, 0, 1, (const char *)(*((_DWORD *)a1 + 102) - v8), v8);
  kaldi::CuMatrixBase<float>::AddMatMat(a3, (uint64_t)&v11, CblasNoTrans, (uint64_t)a1 + 440, (const char *)0x6F, 1.0, 0.0);
  v11 = &unk_1EA926508;
  v12 = 0u;
  v13 = 0u;
  return kaldi::CuMatrixBase<float>::~CuMatrixBase(&v11);
}

void sub_1DE4497D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, __int128 a11, __int128 a12)
{
  a10 = &unk_1EA926508;
  a11 = 0u;
  a12 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FofeWordVecComponent::AccumGradients()
{
  _QWORD v0[34];

  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0, "AccumGradients", "../engine/common/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", 434);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"not implemented", 15);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  }
}

void sub_1DE449868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

kaldi::nnet1::SharedNceComponent *kaldi::nnet1::SharedNceComponent::Copy(kaldi::nnet1::SharedNceComponent *this)
{
  kaldi::nnet1::SharedNceComponent *v2;

  v2 = (kaldi::nnet1::SharedNceComponent *)operator new();
  kaldi::nnet1::SharedNceComponent::SharedNceComponent(v2, this);
  return v2;
}

void sub_1DE4498C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10E1C40AEE11304);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SharedNceComponent::GetType(kaldi::nnet1::SharedNceComponent *this)
{
  return 284;
}

uint64_t kaldi::nnet1::SharedNceComponent::Info(kaldi::nnet1::SharedNceComponent *this)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  void **v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  unsigned __int8 v17;
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  (*(void (**)(kaldi::nnet1::SharedNceComponent *, _QWORD *, _QWORD))(*(_QWORD *)this + 168))(this, v18, 0);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n linearity", 11);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 88);
  if ((v17 & 0x80u) == 0)
    v3 = v16;
  else
    v3 = (void **)v16[0];
  if ((v17 & 0x80u) == 0)
    v4 = v17;
  else
    v4 = (uint64_t)v16[1];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n bias", 6);
  kaldi::nnet1::MomentStatistics<float>((_DWORD *)this + 34, v7, v8, v9, v10);
  if ((v15 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v12 = v15;
  else
    v12 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v11, v12);
  if ((char)v15 < 0)
    operator delete(__p[0]);
  if ((char)v17 < 0)
    operator delete(v16[0]);
  std::stringbuf::str();
  v18[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v20);
}

void sub_1DE449A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SharedNceComponent::InfoGradient(kaldi::nnet1::SharedNceComponent *this)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  void **v12;
  uint64_t v13;
  _QWORD *v14;
  void *__p[2];
  unsigned __int8 v17;
  void *v18[2];
  unsigned __int8 v19;
  _QWORD v20[11];
  char v21;
  uint64_t v22;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n  linearity_grad", 17);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 216);
  if ((v19 & 0x80u) == 0)
    v3 = v18;
  else
    v3 = (void **)v18[0];
  if ((v19 & 0x80u) == 0)
    v4 = v19;
  else
    v4 = (uint64_t)v18[1];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", lr-coef ", 10);
  v6 = (_QWORD *)std::ostream::operator<<();
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n bias", 6);
  kaldi::nnet1::MomentStatistics<float>((_DWORD *)this + 78, v8, v9, v10, v11);
  if ((v17 & 0x80u) == 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v13 = v17;
  else
    v13 = (uint64_t)__p[1];
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", bias-lr-coef ", 15);
  std::ostream::operator<<();
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if ((char)v19 < 0)
    operator delete(v18[0]);
  std::stringbuf::str();
  v20[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v20[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v21 < 0)
    operator delete((void *)v20[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v22);
}

void sub_1DE449C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::SharedNceComponent::InitData(unsigned int *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  void **v10;
  void *v12;
  BOOL v16;
  float *v17;
  BOOL v19;
  BOOL v25;
  BOOL v29;
  BOOL v31;
  void *v35;
  int v36;
  BOOL v37;
  std::string *v38;
  int inited;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  int v43;
  unint64_t v44;
  int64_t v45;
  unint64_t v46;
  float v47;
  float v48;
  char *v49;
  float v50;
  float v51;
  float v52;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  unint64_t v61;
  float v62;
  float v63;
  uint64_t v64;
  float v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  _QWORD *v70;
  void **v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  float *v75;
  uint64_t v76;
  uint64_t v77;
  void **v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  _QWORD v82[2];
  uint64_t v83;
  void *__p;
  void *v85;
  void *v86[3];
  int v87;
  std::string v88;
  std::string v89;
  int v90;
  float v91;
  int v92;

  v91 = 2.0;
  v92 = -1073741824;
  v90 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v89);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[104], &v88);
  v87 = -1;
  memset(v86, 0, sizeof(v86));
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_135;
    kaldi::ReadToken(a2, 0, (uint64_t)v86, v6, v7);
    if ((SHIBYTE(v86[2]) & 0x80000000) == 0)
      break;
    v12 = v86[1];
    if (v86[1] == (void *)10)
    {
      if (*(_QWORD *)v86[0] == 0x61654D736169423CLL && *((_WORD *)v86[0] + 4) == 15982)
      {
LABEL_70:
        v17 = (float *)&v92;
        goto LABEL_129;
      }
      v12 = v86[1];
    }
    else if (v86[1] == (void *)13
           && *(_QWORD *)v86[0] == 0x74536D617261503CLL
           && *(_QWORD *)((char *)v86[0] + 5) == 0x3E7665646474536DLL)
    {
LABEL_88:
      v17 = (float *)&v90;
      goto LABEL_129;
    }
    if (v12 == (void *)11)
    {
      if (*(_QWORD *)v86[0] == 0x6E6152736169423CLL && *(_QWORD *)((char *)v86[0] + 3) == 0x3E65676E61527361)
      {
LABEL_82:
        v17 = &v91;
        goto LABEL_129;
      }
      v12 = v86[1];
    }
    if (v12 == (void *)15)
    {
      v16 = *(_QWORD *)v86[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v86[0] + 7) == 0x3E66656F43657461;
      v17 = (float *)(a1 + 102);
      if (v16)
        goto LABEL_129;
      v12 = v86[1];
    }
    if (v12 == (void *)19)
    {
      v19 = *(_QWORD *)v86[0] == 0x61654C736169423CLL
         && *((_QWORD *)v86[0] + 1) == 0x6F43657461526E72
         && *(_QWORD *)((char *)v86[0] + 11) == 0x3E66656F43657461;
      v17 = (float *)(a1 + 103);
      if (v19)
        goto LABEL_129;
      v12 = v86[1];
    }
    if (v12 == (void *)12)
    {
      if (*(_QWORD *)v86[0] == 0x536D6F646E61523CLL && *((_DWORD *)v86[0] + 2) == 1046766949)
        goto LABEL_104;
      v12 = v86[1];
    }
    if (v12 == (void *)19)
    {
      if (*(_QWORD *)v86[0] == 0x61725474696E493CLL
        && *((_QWORD *)v86[0] + 1) == 0x79546D726F66736ELL
        && *(_QWORD *)((char *)v86[0] + 11) == 0x3E657079546D726FLL)
      {
        goto LABEL_132;
      }
      v12 = v86[1];
    }
    if (v12 != (void *)18)
      goto LABEL_68;
    if (*(_QWORD *)v86[0] != 0x6E6569646172473CLL
      || *((_QWORD *)v86[0] + 1) != 0x7079546D726F4E74
      || *((_WORD *)v86[0] + 8) != 15973)
    {
      v12 = v86[1];
LABEL_68:
      if (v12 != (void *)9)
        goto LABEL_134;
      v10 = (void **)v86[0];
      goto LABEL_124;
    }
LABEL_131:
    v38 = &v88;
LABEL_133:
    kaldi::ReadToken(a2, 0, (uint64_t)v38, v8, v9);
LABEL_130:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v10 = v86;
  switch(HIBYTE(v86[2]))
  {
    case 9:
      goto LABEL_124;
    case 0xA:
      if (v86[0] == (void *)0x61654D736169423CLL && LOWORD(v86[1]) == 15982)
        goto LABEL_70;
      goto LABEL_122;
    case 0xB:
      if (v86[0] == (void *)0x6E6152736169423CLL && *(void **)((char *)v86 + 3) == (void *)0x3E65676E61527361)
        goto LABEL_82;
      goto LABEL_122;
    case 0xC:
      goto LABEL_99;
    case 0xD:
      if (v86[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v86 + 5) != (void *)0x3E7665646474536DLL)
        goto LABEL_134;
      goto LABEL_88;
    case 0xF:
      v25 = v86[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v86 + 7) == (void *)0x3E66656F43657461;
      v17 = (float *)(a1 + 102);
      if (v25)
        goto LABEL_129;
      goto LABEL_97;
    case 0x12:
      goto LABEL_115;
    case 0x13:
      v29 = v86[0] == (void *)0x61654C736169423CLL
         && v86[1] == (void *)0x6F43657461526E72
         && *(void **)((char *)&v86[1] + 3) == (void *)0x3E66656F43657461;
      v17 = (float *)(a1 + 103);
      if (v29)
        goto LABEL_129;
      if (HIBYTE(v86[2]) <= 0x11u)
      {
LABEL_97:
        if (HIBYTE(v86[2]) != 9)
        {
          if (HIBYTE(v86[2]) != 12)
            goto LABEL_134;
LABEL_99:
          if (v86[0] == (void *)0x536D6F646E61523CLL && LODWORD(v86[1]) == 1046766949)
          {
LABEL_104:
            kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v87, v8, v9);
            goto LABEL_130;
          }
LABEL_122:
          if (HIBYTE(v86[2]) != 9)
            goto LABEL_134;
        }
        v10 = v86;
LABEL_124:
        v35 = *v10;
        v36 = *((unsigned __int8 *)v10 + 8);
        v37 = v35 == (void *)0x6461724778614D3CLL && v36 == 62;
        v17 = (float *)(a1 + 105);
        if (!v37)
          goto LABEL_134;
LABEL_129:
        kaldi::ReadBasicType<float>(a2, 0, v17, v8, v9);
        goto LABEL_130;
      }
      if (HIBYTE(v86[2]) == 18)
      {
LABEL_115:
        if (v86[0] != (void *)0x6E6569646172473CLL || v86[1] != (void *)0x7079546D726F4E74 || LOWORD(v86[2]) != 15973)
          goto LABEL_122;
        goto LABEL_131;
      }
      if (HIBYTE(v86[2]) == 19)
      {
        v31 = v86[0] == (void *)0x61725474696E493CLL && v86[1] == (void *)0x79546D726F66736ELL;
        if (v31 && *(void **)((char *)&v86[1] + 3) == (void *)0x3E657079546D726FLL)
        {
LABEL_132:
          v38 = &v89;
          goto LABEL_133;
        }
      }
LABEL_134:
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v86, "</Component>"))
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v82, "InitData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-shared-nce-component.h", 78);
        v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"Unknown token ", 14);
        if (SHIBYTE(v86[2]) >= 0)
          v71 = v86;
        else
          v71 = (void **)v86[0];
        if (SHIBYTE(v86[2]) >= 0)
          v72 = HIBYTE(v86[2]);
        else
          v72 = (uint64_t)v86[1];
        v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v71, v72);
        v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)", a typo in config?", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)" (ParamStddev|BiasMean|BiasRange|LearnRateCoef|BiasLearnRateCoef|InitTransformType|RandomSeed|GradientNormType|MaxGrad)", 119);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v82);
      }
LABEL_135:
      inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v89);
      a1[104] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v88);
      if (v87 >= 1)
        kaldi::UniformRandomNumber::SetRandomSeeds(a3, v87);
      kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v82, a3);
      kaldi::Matrix<float>::Matrix((uint64_t)&v78, a1[3], a1[2], 0, 0);
      v43 = a1[3];
      if (v43 < 1)
        goto LABEL_163;
      v44 = 0;
      LODWORD(v45) = a1[2];
      while (2)
      {
        if ((int)v45 < 1)
          goto LABEL_162;
        v46 = 0;
        while (2)
        {
          switch(inited)
          {
            case 0:
              if (v44 >= v80 || v46 >= v79)
LABEL_178:
                kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v42);
              v49 = (char *)v78 + 4 * (int)v44 * v81;
              if (v44 == v46)
                v50 = 1.0;
              else
                v50 = 0.0;
              goto LABEL_159;
            case 2:
              v51 = *(float *)&v90;
              kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v82, 0, v40, v41, v42);
              if (v44 >= v80 || v46 >= v79)
                goto LABEL_178;
              v49 = (char *)v78 + 4 * (int)v44 * v81;
              v50 = v51 * v52;
LABEL_159:
              *(float *)&v49[4 * v46] = v50;
              break;
            case 1:
              v47 = *(float *)&v90;
              v48 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v40, v41, v42);
              if (v44 >= v80 || v46 >= v79)
                goto LABEL_178;
              v49 = (char *)v78 + 4 * (int)v44 * v81;
              v50 = (v48 + -0.5) * (float)(v47 + v47);
              goto LABEL_159;
          }
          ++v46;
          v45 = (int)a1[2];
          if ((uint64_t)v46 < v45)
            continue;
          break;
        }
        v43 = a1[3];
LABEL_162:
        if ((uint64_t)++v44 < v43)
          continue;
        break;
      }
LABEL_163:
      kaldi::CuMatrix<float>::operator=((uint64_t)(a1 + 22), (uint64_t)&v78);
      v55 = a1[3];
      v76 = 0;
      v77 = 0;
      v75 = 0;
      kaldi::Vector<float>::Resize((void **)&v75, v55, 0, v56, v57);
      if ((int)a1[3] < 1)
      {
        v64 = v76;
      }
      else
      {
        v61 = 0;
        do
        {
          v62 = *(float *)&v92;
          v63 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v58, v59, v60);
          v64 = v76;
          if (v61 >= v76)
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v60);
          v65 = v62 + (v63 + -0.5) * v91;
          v75[v61++] = v65;
        }
        while ((uint64_t)v61 < (int)a1[3]);
      }
      v66 = a1 + 34;
      kaldi::CuVector<float>::Resize((uint64_t)v66, v64, 1u, v59, v60);
      kaldi::CuVectorBase<float>::CopyFromVec<float>(v66, (uint64_t)&v75, v67, v68, v69);
      kaldi::Vector<float>::Destroy((uint64_t)&v75);
      kaldi::Matrix<float>::~Matrix((uint64_t)&v78);
      if (__p)
      {
        v85 = __p;
        operator delete(__p);
      }
      v78 = (void **)&v83;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v78);
      if (SHIBYTE(v86[2]) < 0)
        operator delete(v86[0]);
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
      return;
    default:
      goto LABEL_134;
  }
}

void sub_1DE44A5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 - 193) < 0)
    operator delete(*(void **)(v18 - 216));
  if (*(char *)(v18 - 161) < 0)
    operator delete(*(void **)(v18 - 184));
  if (*(char *)(v18 - 137) < 0)
    operator delete(*(void **)(v18 - 160));
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::SharedNceComponent::WriteData(_DWORD *a1, _QWORD *a2, int a3, int a4)
{
  _DWORD *v8;
  uint64_t v9;
  const char *v10;

  v8 = a1 + 34;
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 168))(a1);
  kaldi::CuMatrixBase<float>::Write((uint64_t)(a1 + 22), a2, a3, a4);
  kaldi::CuVectorBase<float>::Write(v8, a2, a3, v9, v10);
}

void kaldi::nnet1::SharedNceComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  void *v13;
  __int128 v14;
  __int128 v15;

  v8 = *(_QWORD *)(a1 + 424);
  if (v8 && (v9 = *(_DWORD *)(v8 + 16), v9 >= 1))
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v13, a3, 0, *(_DWORD *)(a3 + 20), 0, v9);
    kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&v13, a1 + 312, v10, v11, v12, 1.0, 0.0);
    kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v13, a2, CblasNoTrans, a1 + 168, (const char *)0x70, 1.0, 1.0);
    v13 = &unk_1EA926508;
    v14 = 0u;
    v15 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v13);
  }
  else
  {
    kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 136, a3, a4, a5, 1.0, 0.0);
    kaldi::CuMatrixBase<float>::AddMatMat(a3, a2, CblasNoTrans, a1 + 88, (const char *)0x70, 1.0, 1.0);
  }
}

void sub_1DE44A7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, __int128 a11, __int128 a12)
{
  a10 = &unk_1EA926508;
  a11 = 0u;
  a12 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::SharedNceComponent::PropagateFnc(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, const char *a5)
{
  const char *v8;

  kaldi::CuVectorBase<float>::CopyFromVec(a3, a1 + 136, (uint64_t)a3, a4, a5);
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)a3, a1 + 88, CblasNoTrans, a2, v8, 1.0, 1.0);
}

void kaldi::nnet1::SharedNceComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  int v8;
  void *v9;
  __int128 v10;
  __int128 v11;

  v7 = *(_QWORD *)(a1 + 424);
  if (v7 && (v8 = *(_DWORD *)(v7 + 16), v8 >= 1))
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v9, a4, 0, *(_DWORD *)(a4 + 20), 0, v8);
    kaldi::CuMatrixBase<float>::AddMatMat(a5, (uint64_t)&v9, CblasNoTrans, a1 + 168, (const char *)0x6F, 1.0, 0.0);
    v9 = &unk_1EA926508;
    v10 = 0u;
    v11 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v9);
  }
  else
  {
    kaldi::CuMatrixBase<float>::AddMatMat(a5, a4, CblasNoTrans, a1 + 88, (const char *)0x6F, 1.0, 0.0);
  }
}

void sub_1DE44A920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, __int128 a11, __int128 a12)
{
  a10 = &unk_1EA926508;
  a11 = 0u;
  a12 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::SharedNceComponent::GetUnitOutputFnc(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, const char *a5)
{
  const char *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD v13[4];

  if (*(_DWORD *)(a1 + 152) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x10E, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
  kaldi::CuVectorBase<float>::Set(a4, *(float *)(*(_QWORD *)(a1 + 144) + 4 * (int)a3));
  if (*(_DWORD *)(a1 + 108) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v9);
  v10 = *(_QWORD *)(a1 + 96) + 4 * (int)(*(_DWORD *)(a1 + 112) * a3);
  v11 = *(_DWORD *)(a1 + 104);
  v12 = *(_QWORD *)(a1 + 120);
  v13[0] = &unk_1EA926538;
  v13[1] = v10;
  v13[3] = v12;
  v13[2] = v11;
  kaldi::CuVectorBase<float>::AddMatVec(a4, a2, CblasNoTrans, (uint64_t)v13, v9, 1.0, 1.0);
}

float kaldi::nnet1::SharedNceComponent::GetUnitOutputFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD v10[4];

  if (*(_DWORD *)(a1 + 152) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x10E, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
  if (*(_DWORD *)(a1 + 108) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a5);
  v5 = *(float *)(*(_QWORD *)(a1 + 144) + 4 * (int)a3);
  v6 = *(_QWORD *)(a1 + 96) + 4 * *(_DWORD *)(a1 + 112) * (int)a3;
  v7 = *(_DWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 120);
  v10[0] = &unk_1EA926538;
  v10[1] = v6;
  v10[3] = v8;
  v10[2] = v7;
  return v5 + kaldi::VecVec<float>(a2, (uint64_t)v10, a3, a4, a5);
}

void kaldi::nnet1::SharedNceComponent::ReadData(float *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  BOOL v11;
  float *v12;
  void *v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  void **v19;
  BOOL v20;
  BOOL v21;
  void *v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  const char *v28;
  const char *v29;
  int v30;
  _QWORD *v31;
  void **v32;
  uint64_t v33;
  void *__p[2];
  uint64_t v36;
  void *v37[4];

  while (kaldi::Peek(a2, a3) == 60)
  {
    memset(v37, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v37, v7, v8);
    if (SHIBYTE(v37[2]) < 0)
    {
      v13 = v37[1];
      if (v37[1] != (void *)15
        || (*(_QWORD *)v37[0] == 0x61526E7261654C3CLL
          ? (v14 = *(_QWORD *)((char *)v37[0] + 7) == 0x3E66656F43657461)
          : (v14 = 0),
            v12 = a1 + 102,
            !v14))
      {
        if (v37[1] != (void *)19)
          goto LABEL_25;
        v15 = *(_QWORD *)v37[0] == 0x61654C736169423CLL && *((_QWORD *)v37[0] + 1) == 0x6F43657461526E72;
        v16 = v15 && *(_QWORD *)((char *)v37[0] + 11) == 0x3E66656F43657461;
        v12 = a1 + 103;
        if (!v16)
        {
          v13 = v37[1];
LABEL_25:
          if (v13 == (void *)18)
          {
            if (*(_QWORD *)v37[0] == 0x6E6569646172473CLL
              && *((_QWORD *)v37[0] + 1) == 0x7079546D726F4E74
              && *((_WORD *)v37[0] + 8) == 15973)
            {
              goto LABEL_65;
            }
            v13 = v37[1];
          }
          if (v13 != (void *)9)
            goto LABEL_71;
          v19 = (void **)v37[0];
LABEL_55:
          v24 = *v19;
          v25 = *((unsigned __int8 *)v19 + 8);
          v26 = v24 == (void *)0x6461724778614D3CLL && v25 == 62;
          v12 = a1 + 105;
          if (!v26)
            goto LABEL_71;
        }
      }
    }
    else if (HIBYTE(v37[2]) > 0x11u)
    {
      if (HIBYTE(v37[2]) == 18)
      {
        if (v37[0] != (void *)0x6E6569646172473CLL || v37[1] != (void *)0x7079546D726F4E74 || LOWORD(v37[2]) != 15973)
        {
LABEL_71:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-shared-nce-component.h", 131);
          v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (SHIBYTE(v37[2]) >= 0)
            v32 = v37;
          else
            v32 = (void **)v37[0];
          if (SHIBYTE(v37[2]) >= 0)
            v33 = HIBYTE(v37[2]);
          else
            v33 = (uint64_t)v37[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
LABEL_65:
        __p[0] = 0;
        __p[1] = 0;
        v36 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p, v9, v10);
        *((_DWORD *)a1 + 104) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v36) < 0)
          operator delete(__p[0]);
        goto LABEL_61;
      }
      if (HIBYTE(v37[2]) != 19)
        goto LABEL_71;
      v20 = v37[0] == (void *)0x61654C736169423CLL && v37[1] == (void *)0x6F43657461526E72;
      v21 = v20 && *(void **)((char *)&v37[1] + 3) == (void *)0x3E66656F43657461;
      v12 = a1 + 103;
      if (!v21)
        goto LABEL_71;
    }
    else
    {
      if (HIBYTE(v37[2]) == 9)
      {
        v19 = v37;
        goto LABEL_55;
      }
      if (HIBYTE(v37[2]) != 15)
        goto LABEL_71;
      v11 = v37[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v37 + 7) == (void *)0x3E66656F43657461;
      v12 = a1 + 102;
      if (!v11)
        goto LABEL_71;
    }
    kaldi::ReadBasicType<float>(a2, a3, v12, v9, v10);
LABEL_61:
    if (SHIBYTE(v37[2]) < 0)
      operator delete(v37[0]);
  }
  kaldi::CuMatrix<float>::Read((uint64_t)(a1 + 22), a2, a3, a4);
  kaldi::CuVector<float>::Read((uint64_t)(a1 + 34), a2, a3, v27, v28);
  v30 = *((_DWORD *)a1 + 27);
  if (v30 != *((_DWORD *)a1 + 3))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-shared-nce-component.h", (const char *)0x8B, "linearity_.NumRows() == output_dim_", v29);
  if (*((_DWORD *)a1 + 26) != *((_DWORD *)a1 + 2))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-shared-nce-component.h", (const char *)0x8C, "linearity_.NumCols() == input_dim_", v29);
  if (*((_DWORD *)a1 + 38) != v30)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-shared-nce-component.h", (const char *)0x8D, "bias_.Dim() == output_dim_", v29);
}

void sub_1DE44AF38()
{
  JUMPOUT(0x1DE44AF40);
}

_QWORD *kaldi::nnet1::SharedNceComponent::WriteConfig(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  std::string __p;

  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<BiasLearnRateCoef>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v10, v11);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 416), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v12, v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v14, v15);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

void sub_1DE44B038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::SharedNceComponent::NumParams(kaldi::nnet1::SharedNceComponent *this)
{
  return (*((_DWORD *)this + 38) + *((_DWORD *)this + 26) * *((_DWORD *)this + 27));
}

_DWORD *kaldi::nnet1::SharedNceComponent::GetParams(_DWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1[26] * a1[27];
  v5 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v5, 0, v6, v7);
  v16 = 0;
  v17 = 0;
  if (v4 > *(_DWORD *)(a2 + 8)
    || (v15 = *(void **)a2,
        LODWORD(v16) = v4,
        kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v15, (uint64_t)(a1 + 22), v8, v9, v10),
        v13 = a1[38],
        v16 = 0,
        v17 = 0,
        (v13 + v4) > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v10);
  }
  v15 = (void *)(*(_QWORD *)a2 + 4 * v4);
  LODWORD(v16) = v13;
  return kaldi::CuVectorBase<float>::CopyToVec<float>(a1 + 34, (uint64_t)&v15, v11, v12, v10);
}

_DWORD *kaldi::nnet1::SharedNceComponent::SetParams(_DWORD *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 176))(a1))
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../engine/common/libquasar/libkaldi/src/nnet/nnet-shared-nce-component.h", (const char *)0xBE, "wei_src.Dim() == NumParams()", v5);
  v6 = a1[26] * a1[27];
  v12 = 0;
  v13 = 0;
  if (v6 > *(_DWORD *)(a2 + 8)
    || (v11 = *(char **)a2,
        LODWORD(v12) = v6,
        kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 22), &v11),
        v9 = a1[38],
        v12 = 0,
        v13 = 0,
        (v9 + v6) > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v5);
  }
  v11 = (char *)(*(_QWORD *)a2 + 4 * v6);
  LODWORD(v12) = v9;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 34, (uint64_t)&v11, v7, v8, v5);
}

float kaldi::nnet1::SharedNceComponent::SumParams(kaldi::nnet1::SharedNceComponent *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v6;

  v6 = kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 88, a2, a3, a4, a5);
  return v6 + kaldi::CuVectorBase<float>::Sum((uint64_t)this + 136);
}

uint64_t kaldi::nnet1::SharedNceComponent::PerturbParams(kaldi::nnet1::SharedNceComponent *this, float a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _QWORD v13[4];
  _BYTE v14[48];

  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v14, *((unsigned int *)this + 27), *((unsigned int *)this + 26), 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v14);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 88, (uint64_t)v14, 111, v4, v5, a2, 1.0);
  v6 = *((unsigned int *)this + 38);
  v13[0] = &unk_1EA92DFD8;
  memset(&v13[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v13, v6, 1u, v7, v8);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v13);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 136, (uint64_t)v13, v9, v10, v11, a2, 1.0);
  v13[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v13);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v14);
}

void sub_1DE44B320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::SharedNceComponent::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, const char *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  v6 = a1 + 216;
  kaldi::Vector<float>::Resize(a4, (*(_DWORD *)(a1 + 232) * *(_DWORD *)(a1 + 236)), 0, (uint64_t)a4, a5);
  return kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)a4, v6, v7, v8, v9);
}

uint64_t kaldi::nnet1::SharedNceComponent::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  int v6;
  int v10;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  float v32;
  uint64_t v33;
  const char *v34;
  void *v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  __int128 v40;
  __int128 v41;
  void *v42;
  __int128 v43;
  __int128 v44;
  void *v45;
  __int128 v46;
  __int128 v47;

  v5 = *(_QWORD *)(a1 + 424);
  if (!v5)
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "../engine/common/libquasar/libkaldi/src/nnet/nnet-shared-nce-component.h", (const char *)0x116, "active_output_", a5);
  v6 = *(_DWORD *)(v5 + 16);
  if (v6 <= 0)
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "../engine/common/libquasar/libkaldi/src/nnet/nnet-shared-nce-component.h", (const char *)0x118, "num_samples > 0", a5);
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "../engine/common/libquasar/libkaldi/src/nnet/nnet-shared-nce-component.h", (const char *)0x11B, "input.NumCols() == input_dim_", a5);
  v10 = *(_DWORD *)(a2 + 20);
  if (*(_DWORD *)(a3 + 20) != v10)
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "../engine/common/libquasar/libkaldi/src/nnet/nnet-shared-nce-component.h", (const char *)0x11C, "diff.NumRows() == batch_size", a5);
  *(_QWORD *)(a1 + 248) = a4;
  kaldi::CuMatrix<float>::Resize(a1 + 216, *(unsigned int *)(a1 + 188), *(unsigned int *)(a1 + 184), 3u, 0);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v45, a3, 0, *(_DWORD *)(a3 + 20), 0, v6);
  kaldi::CuMatrixBase<float>::AddMatMat(a1 + 216, (uint64_t)&v45, CblasTrans, a2, (const char *)0x6F, 1.0, 0.0);
  *(_QWORD *)(a1 + 368) = a4;
  kaldi::CuVector<float>::Resize(a1 + 344, *(unsigned int *)(a1 + 328), 3u, v12, v13);
  kaldi::CuVectorBase<float>::AddRowSumMat(a1 + 344, (uint64_t)&v45, 1.0, 0.0, v14, v15, v16);
  *(_QWORD *)(a1 + 120) = a4;
  *(_QWORD *)(a1 + 160) = a4;
  v17 = *(float *)(a1 + 56);
  if (*(_BYTE *)(a1 + 84))
    v17 = v17 / (float)v10;
  v18 = *(float *)(a1 + 420);
  if (v18 > 0.0)
  {
    v19 = (float)v10;
    if (!*(_BYTE *)(a1 + 84))
      v19 = 1.0;
    v20 = v19 * v18;
    v21 = *(_DWORD *)(a1 + 416);
    if (v21 == 1)
    {
      kaldi::nnet1::UpdatableComponent::ClipGradient(a1 + 216, v19 * v18);
      kaldi::nnet1::UpdatableComponent::ClipGradient(a1 + 344, v20);
    }
    else if (v21 == 2)
    {
      *(_QWORD *)(a1 + 296) = a4;
      kaldi::CuMatrix<float>::Resize(a1 + 264, *(unsigned int *)(a1 + 236), *(unsigned int *)(a1 + 232), 1u, 0);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(a1 + 216, (unsigned int *)(a1 + 264), v20, v22, v23, v24);
      *(_QWORD *)(a1 + 400) = a4;
      kaldi::CuVector<float>::Resize(a1 + 376, *(unsigned int *)(a1 + 360), 1u, v25, v26);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(a1 + 344, (_DWORD *)(a1 + 376), v27, v28, v29, v20);
    }
  }
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v42, *(_QWORD *)(a1 + 424), v6);
  kaldi::CuMatrixBase<float>::AddIndexedRows(a1 + 88, (uint64_t)&v42, a1 + 216, v30, v31, -(float)(v17 * *(float *)(a1 + 408)));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v39, a1 + 136, *(_DWORD *)(a1 + 12));
  v32 = *(float *)(a1 + 412);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v36, a1 + 344, v6);
  kaldi::CuMatrixBase<float>::AddIndexedRows((uint64_t)&v39, (uint64_t)&v42, (uint64_t)&v36, v33, v34, v32 * (float)-v17);
  v36 = &unk_1EA926508;
  v37 = 0u;
  v38 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v36);
  *(_QWORD *)(a1 + 424) = 0;
  v39 = &unk_1EA926508;
  v40 = 0u;
  v41 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v39);
  v42 = &unk_1EA926508;
  v43 = 0u;
  v44 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v42);
  v45 = &unk_1EA926508;
  v46 = 0u;
  v47 = 0u;
  return kaldi::CuMatrixBase<float>::~CuMatrixBase(&v45);
}

void sub_1DE44B6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, __int128 a10, __int128 a11, void *a12, __int128 a13, __int128 a14, void *a15, __int128 a16, __int128 a17, void *a18)
{
  uint64_t v18;

  a9 = &unk_1EA926508;
  a10 = 0u;
  a11 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a9);
  a12 = &unk_1EA926508;
  a13 = 0u;
  a14 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a12);
  a15 = &unk_1EA926508;
  a16 = 0u;
  a17 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a15);
  a18 = &unk_1EA926508;
  *(_OWORD *)(v18 + 8) = 0u;
  *(_OWORD *)(v18 + 24) = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a18);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SharedNceComponent::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  _QWORD v3[34];

  if (a2 == 3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3, "SetGradientNormalization", "../engine/common/libquasar/libkaldi/src/nnet/nnet-shared-nce-component.h", 261);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "it does not make sense to do RMSPROP in this component");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  *(float *)(result + 420) = a3;
  *(_DWORD *)(result + 416) = a2;
  return result;
}

kaldi::nnet1::CompressedWordTransComponent *kaldi::nnet1::CompressedWordTransComponent::Copy(kaldi::nnet1::CompressedWordTransComponent *this)
{
  kaldi::nnet1::CompressedWordTransComponent *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;

  v2 = (kaldi::nnet1::CompressedWordTransComponent *)operator new();
  kaldi::nnet1::CompressedWordTransComponent::CompressedWordTransComponent(v2, *((unsigned int *)this + 2), *((_DWORD *)this + 3), v3, v4);
  kaldi::nnet1::CompressedWordTransComponent::SetVecTable(v2, (const void **)this + 10, v5, v6, v7);
  return v2;
}

void sub_1DE44B828(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10C1C4058E986FFLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::CompressedWordTransComponent::GetType(kaldi::nnet1::CompressedWordTransComponent *this)
{
  return 1040;
}

uint64_t kaldi::nnet1::CompressedWordTransComponent::Info(kaldi::nnet1::CompressedWordTransComponent *this)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  (*(void (**)(kaldi::nnet1::CompressedWordTransComponent *, _QWORD *, _QWORD))(*(_QWORD *)this + 168))(this, v3, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\n CompressedWordTrans table", 27);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v3[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v5);
}

void sub_1DE44B928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::CompressedWordTransComponent::WriteData(uint64_t a1, _QWORD *a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::CompressedMatrix::Write((uint64_t *)(a1 + 80), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::CompressedWordTransComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  _BYTE v16[48];

  v5 = *(_DWORD *)(a2 + 16);
  if (v5 != *(_DWORD *)(a1 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-compressed-word-trans-component.h", (const char *)0x3D, "in.NumCols() == input_dim_", a5);
  v9 = (uint64_t *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 80);
  if (v8)
    LODWORD(v8) = *(_DWORD *)(v8 + 8);
  if (*(_DWORD *)(a1 + 96) != (int)v8 / v5)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-compressed-word-trans-component.h", (const char *)0x3E, "voc_size_ == vec_table_.NumRows() / input_dim_", a5);
  kaldi::CuMatrix<float>::CuMatrix(v16, a2, 111);
  kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)v16, a1 + 48, v10, v11, v12, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::SetZero(a3);
  kaldi::CuMatrixBase<float>::SummarizeVec(a3, v9, (uint64_t)v16, v13, v14);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v16);
}

void sub_1DE44BA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

float kaldi::nnet1::CompressedWordTransComponent::ReadData(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  int v10;
  int v11;

  kaldi::CompressedMatrix::Read(a1 + 80, a2, a3, a4);
  v9 = *(_QWORD *)(a1 + 80);
  if (!v9)
  {
    v10 = *(_DWORD *)(a1 + 12);
    if (!v10)
    {
      v11 = *(_DWORD *)(a1 + 8);
      goto LABEL_7;
    }
LABEL_8:
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-compressed-word-trans-component.h", (const char *)0x28, "vec_table_.NumCols() == output_dim_", v8);
  }
  if (*(_DWORD *)(v9 + 12) != *(_DWORD *)(a1 + 12))
    goto LABEL_8;
  v10 = *(_DWORD *)(v9 + 8);
  v11 = *(_DWORD *)(a1 + 8);
  if (v10 % v11)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-compressed-word-trans-component.h", (const char *)0x29, "vec_table_.NumRows() % input_dim_ == 0", v8);
LABEL_7:
  *(_DWORD *)(a1 + 96) = v10 / v11;
  return kaldi::nnet1::CompressedWordTransComponent::InitIndexOffsets((kaldi::nnet1::CompressedWordTransComponent *)a1, v5, v6, v7, v8);
}

kaldi::nnet1::AffineTransform *kaldi::nnet1::AffineTransform::AffineTransform(kaldi::nnet1::AffineTransform *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  const char *v9;

  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = &off_1EA9284D0;
  *(_OWORD *)((char *)this + 56) = xmmword_1DEC3D450;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((_BYTE *)this + 86) = 0;
  *(_QWORD *)this = &off_1EA927AD0;
  *((_QWORD *)this + 11) = &unk_1EA927C10;
  *((_QWORD *)this + 12) = &unk_1EA927C38;
  *((_QWORD *)this + 13) = &unk_1EA927C60;
  v6 = operator new();
  kaldi::CuMatrix<float>::CuMatrix(v6, a3, a2, 0, 0, 0);
  *((_QWORD *)this + 14) = v6;
  v7 = (_QWORD *)operator new();
  *v7 = &unk_1EA92DFD8;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v7, a3, 0, v8, v9);
  *((_QWORD *)this + 15) = v7;
  *((_BYTE *)this + 128) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_BYTE *)this + 232) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)((char *)this + 236) = _D1;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *(_OWORD *)((char *)this + 244) = 0u;
  *(_OWORD *)((char *)this + 260) = 0u;
  *(_OWORD *)((char *)this + 276) = 0u;
  *((_QWORD *)this + 38) = &unk_1EA92DFA8;
  *((_BYTE *)this + 344) = 0;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  return this;
}

void sub_1DE44BC58(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent *v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x1DF0ED014](v2, 0x1081C4072235B19);
  v4 = *((_QWORD *)v1 + 14);
  *((_QWORD *)v1 + 14) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::ConvolutionalComponent::ConvolutionalComponent(kaldi::nnet1::ConvolutionalComponent *this, int a2, int a3)
{
  double result;

  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = &off_1EA9284D0;
  *(_OWORD *)((char *)this + 56) = xmmword_1DEC3D450;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((_BYTE *)this + 86) = 0;
  *(_QWORD *)this = &off_1EA92A058;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  result = 0.0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_QWORD *)this + 13) = &unk_1EA92DFA8;
  *((_BYTE *)this + 144) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 19) = &unk_1EA92DFD8;
  *((_QWORD *)this + 20) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 35) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *((_QWORD *)this + 36) = _D1;
  *((_DWORD *)this + 74) = 0;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 361) = 0u;
  return result;
}

double kaldi::nnet1::WordVecComponent::WordVecComponent(kaldi::nnet1::WordVecComponent *this, int a2, int a3, uint64_t a4, const char *a5)
{
  double result;

  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = &off_1EA9284D0;
  *(_OWORD *)((char *)this + 56) = xmmword_1DEC3D450;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((_BYTE *)this + 86) = 0;
  *(_QWORD *)this = &off_1EA9285B0;
  *((_QWORD *)this + 12) = &unk_1EA92DFA8;
  *((_QWORD *)this + 11) = &unk_1EA9286E0;
  result = 0.0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 24) = &unk_1EA92DFA8;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_BYTE *)this + 136) = 0;
  *((_QWORD *)this + 18) = &unk_1EA92DFA8;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_BYTE *)this + 184) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_BYTE *)this + 232) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0xFFFFFFFF00000000;
  *((_DWORD *)this + 64) = a3 / a2;
  *((_DWORD *)this + 65) = 1065353216;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_QWORD *)this + 33) = &unk_1EA92DFA8;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((_BYTE *)this + 304) = 0;
  *((_QWORD *)this + 47) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  if (a3 % a2)
    kaldi::KaldiAssertFailure_((kaldi *)"WordVecComponent", "../engine/common/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", (const char *)0x2C, "dim_out % dim_in == 0", a5);
  return result;
}

void sub_1DE44BEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  kaldi::nnet1::UpdatableComponent *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v13);
  kaldi::CuMatrix<float>::~CuMatrix(v14);
  kaldi::CuMatrix<float>::~CuMatrix(a10);
  kaldi::CuMatrix<float>::~CuMatrix(v12);
  kaldi::CuMatrix<float>::~CuMatrix(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::CompressedWordVecComponent::CompressedWordVecComponent(uint64_t this, int a2, int a3, uint64_t a4, const char *a5)
{
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 12) = a3;
  *(_WORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)this = &off_1EA92B8A8;
  *(_BYTE *)(this + 56) = 0;
  if (a3 % a2)
    kaldi::KaldiAssertFailure_((kaldi *)"CompressedWordVecComponent", "../engine/common/libquasar/libkaldi/src/nnet/nnet-compressed-word-vec-component.h", (const char *)0x17, "dim_out % dim_in == 0", a5);
  return this;
}

void sub_1DE44BF98(_Unwind_Exception *a1)
{
  _QWORD *v1;
  kaldi::CompressedMatrix *v2;
  void *v4;

  kaldi::CompressedMatrix::Destroy(v2);
  *v1 = off_1EA92D6D8;
  v4 = (void *)v1[3];
  if (v4)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

double kaldi::nnet1::Rbm::Rbm(kaldi::nnet1::Rbm *this, int a2, int a3)
{
  double result;

  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 6) = 0x3F0000003ECCCCCDLL;
  *((_DWORD *)this + 14) = 1063675494;
  *(_QWORD *)((char *)this + 60) = 0x7A12000000028;
  *((_DWORD *)this + 17) = 961656599;
  *(_QWORD *)this = &off_1EA92CD78;
  result = 0.0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 9) = &unk_1EA92DFA8;
  *((_BYTE *)this + 112) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 15) = &unk_1EA92DFD8;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 19) = &unk_1EA92DFD8;
  *((_QWORD *)this + 20) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_QWORD *)this + 23) = &unk_1EA92DFA8;
  *((_BYTE *)this + 224) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 29) = &unk_1EA92DFD8;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 33) = &unk_1EA92DFD8;
  *((_QWORD *)this + 34) = 0;
  return result;
}

double kaldi::nnet1::CnnRearrangeComponent::CnnRearrangeComponent(kaldi::nnet1::CnnRearrangeComponent *this, int a2, int a3, uint64_t a4, const char *a5)
{
  double result;

  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)this = &off_1EA929B00;
  result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  if (a2 != a3)
    kaldi::KaldiAssertFailure_((kaldi *)"CnnRearrangeComponent", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0x131, "dim_in == dim_out", a5);
  return result;
}

void sub_1DE44C100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  void **v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v14;

  v14 = (void *)a10[10];
  if (v14)
    free(v14);
  kaldi::nnet1::CnnRearrangeComponent::CnnRearrangeComponent(v12, a10, v11, v10);
  _Unwind_Resume(a1);
}

kaldi::nnet1::Padding2DComponent *kaldi::nnet1::Padding2DComponent::Padding2DComponent(kaldi::nnet1::Padding2DComponent *this, int a2, int a3)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_1EA929318;
  kaldi::nnet1::Padding2DComponent::Init(this);
  return this;
}

void sub_1DE44C174(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;

  *v1 = off_1EA92D6D8;
  v3 = (void *)v1[3];
  if (v3)
  {
    v1[4] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::AddShift *kaldi::nnet1::AddShift::AddShift(kaldi::nnet1::AddShift *this, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = &off_1EA9284D0;
  *(_OWORD *)((char *)this + 56) = xmmword_1DEC3D450;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((_BYTE *)this + 86) = 0;
  *(_QWORD *)this = &off_1EA92D4F0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 11) = &unk_1EA92DFD8;
  *((_QWORD *)this + 14) = 0;
  kaldi::CuVector<float>::Resize((uint64_t)this + 88, a2, 1u, a4, a5);
  *((_QWORD *)this + 21) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 44) = 1065353216;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_BYTE *)this + 208) = 0;
  return this;
}

void sub_1DE44C254(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent *v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

kaldi::nnet1::Rescale *kaldi::nnet1::Rescale::Rescale(kaldi::nnet1::Rescale *this, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = &off_1EA9284D0;
  *(_OWORD *)((char *)this + 56) = xmmword_1DEC3D450;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((_BYTE *)this + 86) = 0;
  *(_QWORD *)this = &off_1EA92D248;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 11) = &unk_1EA92DFD8;
  *((_QWORD *)this + 14) = 0;
  kaldi::CuVector<float>::Resize((uint64_t)this + 88, a2, 1u, a4, a5);
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 21) = &unk_1EA92DFA8;
  *((_BYTE *)this + 208) = 0;
  *((_DWORD *)this + 54) = 0;
  *(_QWORD *)((char *)this + 220) = 0x3F80000000000000;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_BYTE *)this + 256) = 0;
  return this;
}

void sub_1DE44C33C(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent *v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

kaldi::nnet1::KlHmm *kaldi::nnet1::KlHmm::KlHmm(kaldi::nnet1::KlHmm *this, uint64_t a2, uint64_t a3)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_1EA92CF20;
  kaldi::Matrix<double>::Matrix((uint64_t)this + 48, a3, a2, 0, 0);
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 11) = &unk_1EA92DFA8;
  *((_BYTE *)this + 128) = 0;
  return this;
}

void sub_1DE44C3C4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;

  *v1 = off_1EA92D6D8;
  v3 = (void *)v1[3];
  if (v3)
  {
    v1[4] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::SentenceAveragingComponent *kaldi::nnet1::SentenceAveragingComponent::SentenceAveragingComponent(kaldi::nnet1::SentenceAveragingComponent *this, int a2, int a3, float a4)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = &off_1EA9284D0;
  *(_OWORD *)((char *)this + 56) = xmmword_1DEC3D450;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((_BYTE *)this + 86) = 0;
  *(_QWORD *)this = &off_1EA92BA28;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));
  *((float *)this + 116) = a4;
  return this;
}

void sub_1DE44C474(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent *v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

kaldi::nnet1::Nnet *kaldi::nnet1::Nnet::Nnet(kaldi::nnet1::Nnet *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;

  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v2 = operator new();
  *(_QWORD *)v2 = &off_1EA9284D0;
  *(_OWORD *)(v2 + 8) = xmmword_1DEC3D450;
  *(_DWORD *)(v2 + 24) = -1082130432;
  *(_QWORD *)(v2 + 28) = 0x100000003;
  *(_WORD *)(v2 + 36) = 0;
  *(_BYTE *)(v2 + 38) = 0;
  *((_QWORD *)this + 18) = v2;
  *((_QWORD *)this + 24) = &unk_1EA92DFD8;
  *((_WORD *)this + 76) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 28) = &unk_1EA92DFD8;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  kaldi::nnet1::NnetCorrPacker::NnetCorrPacker((kaldi::nnet1::Nnet *)((char *)this + 304));
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  kaldi::nnet1::Nnet::ResetBuffersAndStates(this, v3, v4, v5, v6);
  return this;
}

void sub_1DE44C590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  _QWORD *v12;
  _QWORD *v13;
  void **v14;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  v14 = v11;
  v16 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v10 + 360) = v16;
    operator delete(v16);
  }
  kaldi::nnet1::Nnet::Nnet((_QWORD *)v10);
  v17 = *(void **)(v10 + 280);
  if (v17)
  {
    *(_QWORD *)(v10 + 288) = v17;
    operator delete(v17);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  kaldi::CuVector<float>::~CuVector(v13);
  kaldi::CuVector<float>::~CuVector(v12);
  v18 = *(void **)(v10 + 168);
  if (v18)
    operator delete(v18);
  a10 = (void **)(v10 + 120);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 72);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v19 = *(void **)(v10 + 48);
  if (v19)
  {
    *(_QWORD *)(v10 + 56) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(v10 + 24);
  if (v20)
  {
    *(_QWORD *)(v10 + 32) = v20;
    operator delete(v20);
  }
  v21 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t kaldi::nnet1::DuplicateComponent::DuplicateComponent(uint64_t this, int a2, int a3, uint64_t a4, const char *a5)
{
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 12) = a3;
  *(_WORD *)(this + 16) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)this = &off_1EA928BB0;
  if (a2 > a3)
    kaldi::KaldiAssertFailure_((kaldi *)"DuplicateComponent", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)0x245, "dim_in <= dim_out", a5);
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

void sub_1DE44C73C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;

  *v1 = off_1EA92D6D8;
  v3 = (void *)v1[3];
  if (v3)
  {
    v1[4] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::IdentityComponent::IdentityComponent(uint64_t this, int a2, int a3, uint64_t a4, const char *a5)
{
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 12) = a3;
  *(_WORD *)(this + 16) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)this = &off_1EA928708;
  if (a2 != a3)
    kaldi::KaldiAssertFailure_((kaldi *)"IdentityComponent", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)0x20E, "dim_in == dim_out", a5);
  return this;
}

void sub_1DE44C7CC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;

  *v1 = off_1EA92D6D8;
  v3 = (void *)v1[3];
  if (v3)
  {
    v1[4] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::SharedNceComponent *kaldi::nnet1::SharedNceComponent::SharedNceComponent(kaldi::nnet1::SharedNceComponent *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  const char *v6;

  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = &off_1EA9284D0;
  *(_OWORD *)((char *)this + 56) = xmmword_1DEC3D450;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *(_QWORD *)this = &off_1EA929628;
  *((_BYTE *)this + 86) = 0;
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)this + 88, a3, a2, 0, 0, 0);
  *((_QWORD *)this + 17) = &unk_1EA92DFD8;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  kaldi::CuVector<float>::Resize((uint64_t)this + 136, a3, 0, v5, v6);
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_QWORD *)this + 21) = &unk_1EA92DFA8;
  *((_BYTE *)this + 208) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_QWORD *)this + 27) = &unk_1EA92DFA8;
  *((_BYTE *)this + 256) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_QWORD *)this + 33) = &unk_1EA92DFA8;
  *((_BYTE *)this + 304) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 39) = &unk_1EA92DFD8;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 43) = &unk_1EA92DFD8;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 47) = &unk_1EA92DFD8;
  *((_QWORD *)this + 48) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)this + 51) = _D0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  return this;
}

void sub_1DE44C910(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent *v1;
  uint64_t v2;

  kaldi::CuMatrix<float>::~CuMatrix(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::TemporalMaxPoolingComponent::TemporalMaxPoolingComponent(uint64_t this, int a2, int a3, uint64_t a4, const char *a5)
{
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 12) = a3;
  *(_WORD *)(this + 16) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)this = &off_1EA92BEB8;
  if (a2 != a3)
    kaldi::KaldiAssertFailure_((kaldi *)"TemporalMaxPoolingComponent", "../engine/common/libquasar/libkaldi/src/nnet/nnet-temporal-max-pooling-component.h", (const char *)0x2C, "dim_in == dim_out", a5);
  return this;
}

void sub_1DE44C99C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;

  *v1 = off_1EA92D6D8;
  v3 = (void *)v1[3];
  if (v3)
  {
    v1[4] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::InterpolationComponent *kaldi::nnet1::InterpolationComponent::InterpolationComponent(kaldi::nnet1::InterpolationComponent *this, int a2, int a3)
{
  void **v4;
  int v5;
  float *v6;
  int v7;
  float v8;
  _QWORD *v9;
  float *v10;
  float *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  float *v17;
  int v18;
  _QWORD v20[34];

  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 6) = 0;
  v4 = (void **)((char *)this + 48);
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)this = &off_1EA92A180;
  v5 = a2 / a3;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  if (a2 % a3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "InterpolationComponent", "../engine/common/libquasar/libkaldi/src/nnet/nnet-interpolation-component.h", 29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"The input dimension is not divisible by the output dimension", 60);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
  }
  if (v5 >= 1)
  {
    v6 = 0;
    v7 = 0;
    v8 = 1.0 / (double)v5;
    v9 = (_QWORD *)((char *)this + 64);
    do
    {
      if ((unint64_t)v6 >= *v9)
      {
        v11 = (float *)*v4;
        v12 = ((char *)v6 - (_BYTE *)*v4) >> 2;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v14 = *v9 - (_QWORD)v11;
        if (v14 >> 1 > v13)
          v13 = v14 >> 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 64, v15);
          v11 = (float *)*((_QWORD *)this + 6);
          v6 = (float *)*((_QWORD *)this + 7);
        }
        else
        {
          v16 = 0;
        }
        v17 = (float *)&v16[4 * v12];
        *v17 = v8;
        v10 = v17 + 1;
        while (v6 != v11)
        {
          v18 = *((_DWORD *)v6-- - 1);
          *((_DWORD *)v17-- - 1) = v18;
        }
        *((_QWORD *)this + 6) = v17;
        *((_QWORD *)this + 7) = v10;
        *((_QWORD *)this + 8) = &v16[4 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v6 = v8;
        v10 = v6 + 1;
      }
      *((_QWORD *)this + 7) = v10;
      ++v7;
      v6 = v10;
    }
    while (v7 != v5);
  }
  return this;
}

void sub_1DE44CB78(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    v1[7] = v4;
    operator delete(v4);
  }
  *v1 = off_1EA92D6D8;
  v5 = (void *)v1[3];
  if (v5)
  {
    v1[4] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::CompressedWordTransComponent *kaldi::nnet1::CompressedWordTransComponent::CompressedWordTransComponent(kaldi::nnet1::CompressedWordTransComponent *this, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_1EA92BF78;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 6) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Resize((uint64_t)this + 48, a2, 0, a4, a5);
  *((_QWORD *)this + 10) = 0;
  *((_BYTE *)this + 88) = 0;
  *((_DWORD *)this + 24) = -1;
  return this;
}

void sub_1DE44CC24(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;

  *v1 = off_1EA92D6D8;
  v3 = (void *)v1[3];
  if (v3)
  {
    v1[4] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = a2[1];
  *(_QWORD *)this = v2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v2 - 40)) = a2[2];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)) = a2[3];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[4];
  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 40)) = a2[5];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)) = a2[6];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[7];
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 1) = &unk_1EA92DFA8;
  *((_BYTE *)this + 48) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 7) = &unk_1EA92DFA8;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_DWORD *)this + 27) = 1065353216;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  return result;
}

uint64_t kaldi::nnet1::Component::Propagate(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v10;
  kaldi::nnet1::Component *v11;
  std::string *v12;
  std::string::size_type size;
  _QWORD *v14;
  _QWORD *v15;
  std::string v16;
  _QWORD v17[34];

  if (a1[2] != *(_DWORD *)(a2 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Propagate", "../engine/common/libquasar/libkaldi/src/nnet/nnet-component.h", 683);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Non-matching dims! ", 19);
    v11 = (kaldi::nnet1::Component *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1);
    kaldi::nnet1::Component::TypeToMarker(v11, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v16;
    else
      v12 = (std::string *)v16.__r_.__value_.__r.__words[0];
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    else
      size = v16.__r_.__value_.__l.__size_;
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" input-dim : ", 13);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" data : ", 8);
    std::ostream::operator<<();
    std::string::~string(&v16);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  v8 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 56))(a1, *(unsigned int *)(a2 + 20));
  kaldi::CuMatrix<float>::Resize(a3, v8, a1[3], 0, 0);
  return (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 112))(a1, a2, a3, a4);
}

uint64_t kaldi::nnet1::RelaxedSoftmax::RelaxedSoftmax(uint64_t this, int a2, int a3, float a4)
{
  _QWORD v4[34];

  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 12) = a3;
  *(_WORD *)(this + 16) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)this = &off_1EA927A10;
  *(float *)(this + 48) = a4;
  if (a4 <= 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RelaxedSoftmax", "../engine/common/libquasar/libkaldi/src/nnet/nnet-activation.h", 59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Relaxation factor must be positive; found: ",
      43);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return this;
}

void sub_1DE44CF08(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;

  *v1 = off_1EA92D6D8;
  v3 = (void *)v1[3];
  if (v3)
  {
    v1[4] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::BlockSoftmax *kaldi::nnet1::BlockSoftmax::BlockSoftmax(kaldi::nnet1::BlockSoftmax *this, const kaldi::nnet1::BlockSoftmax *a2)
{
  uint64_t v4;

  *(_QWORD *)this = off_1EA92D6D8;
  v4 = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  *(_QWORD *)this = &off_1EA9267A0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 6, *((const void **)a2 + 6), *((_QWORD *)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 2);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 9, *((const void **)a2 + 9), *((_QWORD *)a2 + 10), (uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 2);
  return this;
}

void sub_1DE44CFDC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;
  void *v5;
  void *v6;

  v5 = *v2;
  if (*v2)
  {
    v1[7] = v5;
    operator delete(v5);
  }
  *v1 = v3;
  v6 = (void *)v1[3];
  if (v6)
  {
    v1[4] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::ReadIntegerVector<int>(_QWORD *a1, int a2, std::vector<int> *a3, uint64_t a4, char *a5, _QWORD *a6, _QWORD *a7)
{
  int v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  int v17;
  _QWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *__p;
  _DWORD *v33;
  unint64_t v34;
  std::vector<int>::size_type __sz;
  _QWORD v36[16];
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!a3)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadIntegerVector", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", (const char *)0x11A, "v != NULL", a5);
  if (a5)
    *(_QWORD *)a5 = 0;
  if (a2)
  {
    if (std::istream::peek() != 4)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36, "ReadIntegerVector", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", 291);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"ReadIntegerVector: expected to see type of size ", 48);
      v29 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", saw instead ", 14);
      v30 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", at file position ", 19);
      std::istream::tellg();
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
    }
    std::istream::get();
    LODWORD(__sz) = 0;
    std::istream::read();
    if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
    {
      v13 = __sz;
      v14 = __sz;
      if (a7)
        *a7 = (int)__sz;
      if (a4 && (a5 ? (v15 = v13 < 0) : (v15 = 0), !v15 ? (v16 = 0) : (v16 = 1), a6 || v16))
      {
        if (v16)
        {
          std::istream::tellg();
          *(_QWORD *)a5 = a4 + v37;
        }
        else if (a6)
        {
          std::istream::tellg();
          *a6 = a4 + v37;
        }
        std::istream::seekg();
        a3->__end_ = a3->__begin_;
        std::vector<int>::shrink_to_fit(a3);
      }
      else
      {
        std::vector<int>::resize(a3, v14);
        if ((int)__sz >= 1)
          std::istream::read();
      }
      goto LABEL_54;
    }
LABEL_57:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36, "ReadIntegerVector", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", 358);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"ReadIntegerVector: read failure at file position ", 49);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
  }
  __p = 0;
  v33 = 0;
  v34 = 0;
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  if (std::istream::peek() != 91)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36, "ReadIntegerVector", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", 329);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"ReadIntegerVector: expected to see [, saw ", 42);
    std::istream::peek();
    v31 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", at file position ", 19);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
  }
  std::istream::get();
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  while (1)
  {
    v17 = std::istream::peek();
    if (v17 == 93)
      break;
    LODWORD(v36[0]) = 0;
    v18 = (_QWORD *)MEMORY[0x1DF0ECC30](a1, v36);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(v18);
    if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
      goto LABEL_45;
    v19 = v33;
    if ((unint64_t)v33 >= v34)
    {
      v21 = __p;
      v22 = ((char *)v33 - (_BYTE *)__p) >> 2;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v24 = v34 - (_QWORD)__p;
      if ((uint64_t)(v34 - (_QWORD)__p) >> 1 > v23)
        v23 = v24 >> 1;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v34, v25);
        v21 = __p;
        v19 = v33;
      }
      else
      {
        v26 = 0;
      }
      v27 = &v26[4 * v22];
      *(_DWORD *)v27 = v36[0];
      v20 = v27 + 4;
      while (v19 != v21)
      {
        v28 = *--v19;
        *((_DWORD *)v27 - 1) = v28;
        v27 -= 4;
      }
      __p = v27;
      v33 = v20;
      v34 = (unint64_t)&v26[4 * v25];
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v33 = v36[0];
      v20 = v19 + 1;
    }
    v33 = v20;
  }
  std::istream::get();
  if (&__p != (void **)a3)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a3, (char *)__p, (uint64_t)v33, ((char *)v33 - (_BYTE *)__p) >> 2);
  if (a7)
    *a7 = a3->__end_ - a3->__begin_;
LABEL_45:
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  if (v17 != 93)
    goto LABEL_57;
LABEL_54:
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
    goto LABEL_57;
}

void sub_1DE44D518(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1DE44D550);
}

void sub_1DE44D52C()
{
  JUMPOUT(0x1DE44D550);
}

void sub_1DE44D53C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::BlockSoftmax::InitOffset(std::vector<int> *this)
{
  std::vector<int>::size_type v2;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  uint64_t v5;
  std::vector<int>::pointer v6;
  unint64_t v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  _QWORD v12[34];

  v2 = this[2].__end_ - this[2].__begin_ + 1;
  LODWORD(v12[0]) = 0;
  std::vector<int>::resize(this + 3, v2, (std::vector<int>::const_reference)v12);
  begin = this[2].__begin_;
  end = this[2].__end_;
  v5 = (char *)end - (char *)begin;
  if (end != begin)
  {
    v6 = this[3].__begin_;
    v7 = v5 >> 2;
    if (v7 <= 1)
      v7 = 1;
    v10 = *v6;
    v8 = v6 + 1;
    v9 = v10;
    do
    {
      v11 = *begin++;
      v9 += v11;
      *v8++ = v9;
      --v7;
    }
    while (v7);
  }
  if (HIDWORD(this->__end_) != *(this[3].__end_ - 1))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "InitOffset", "../engine/common/libquasar/libkaldi/src/nnet/nnet-activation.h", 273);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "Total block dimensions and output dimension mismatch");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
}

void std::vector<int>::shrink_to_fit(std::vector<int> *this)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *value;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  unint64_t v6;
  char *v7;
  int *v8;
  int *v9;
  uint64_t v10;
  int *v11;
  int *v12;
  int v13;

  p_end_cap = &this->__end_cap_;
  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  end = this->__end_;
  v6 = end - begin;
  if (v6 < value - begin)
  {
    if (end == begin)
    {
      v11 = 0;
      v9 = (int *)(4 * v6);
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v6);
      begin = this->__begin_;
      v8 = this->__end_;
      v9 = (int *)&v7[4 * v6];
      v11 = (int *)&v7[4 * v10];
      if (v8 != this->__begin_)
      {
        v12 = v9;
        do
        {
          v13 = *--v8;
          *--v12 = v13;
        }
        while (v8 != begin);
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    this->__begin_ = v12;
    this->__end_ = v9;
    this->__end_cap_.__value_ = v11;
    if (begin)
      operator delete(begin);
  }
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::size_type v3;

  v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v3, __x);
  }
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v7;
  int *value;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  std::vector<int>::size_type v16;
  int *v17;
  int *v18;
  int *v19;
  std::vector<int>::size_type v20;
  int *v21;
  int *v22;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer i;
  int v25;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v7 = value;
  v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      v16 = 4 * __n;
      v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    v10 = (char *)v9 - (char *)this->__begin_;
    v11 = __n + (v10 >> 2);
    if (v11 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 2;
    v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v18 = (int *)&v15[4 * v12];
    v19 = &v18[__n];
    v20 = 4 * __n;
    v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    v22 = (int *)&v15[4 * v14];
    begin = this->__begin_;
    for (i = this->__end_; i != begin; --i)
    {
      v25 = *(i - 1);
      *--v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
      operator delete(begin);
  }
}

uint64_t kaldi::WriteIntegerByteArray<int>(_QWORD *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  const char *v9;
  int v10;
  uint64_t result;
  _QWORD *v12;
  std::runtime_error *exception;
  _QWORD v14[34];
  int v15;
  char v16;

  if (a2)
  {
    v16 = 4;
    std::ostream::write();
    if (a4 != (int)a4)
      kaldi::KaldiAssertFailure_((kaldi *)"WriteIntegerByteArray", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", (const char *)0xDD, "static_cast<size_t>(vecsz) == count", v9);
    if (a3)
      v10 = -(int)a4;
    else
      v10 = a4;
    v15 = v10;
    result = std::ostream::write();
    if ((_DWORD)a4)
    {
      if (a3 && (fst::AlignOutput(a1) & 1) == 0)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14, "WriteIntegerByteArray", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", 227);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "Could not align output");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
      }
      result = std::ostream::write();
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[ ", 2);
    for (; a4; --a4)
    {
      a5 += 4;
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
    }
    result = (uint64_t)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]\n", 2);
  }
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteIntegerType.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1DE44DAD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *kaldi::CuArray<int>::CuArray(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v7;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = *(_QWORD *)(a2 + 16);
  kaldi::CuArray<int>::Resize((uint64_t)a1, *(_DWORD *)a2, 1u, a4, a5);
  v7 = *a1;
  if ((_DWORD)v7)
    memcpy(*((void **)a1 + 1), *(const void **)(a2 + 8), 4 * v7);
  return a1;
}

_QWORD *kaldi::operator<<<int>(_QWORD *a1, const void **a2)
{
  unint64_t v3;
  std::vector<int> __p;

  memset(&__p, 0, sizeof(__p));
  kaldi::CuArray<int>::CopyToVec(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
  if (__p.__end_ != __p.__begin_)
  {
    v3 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
      std::ostream::operator<<();
      ++v3;
    }
    while (v3 < __p.__end_ - __p.__begin_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ]\n", 3);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  return a1;
}

void sub_1DE44DC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::SplitStringToIntegers<int>(uint64_t a1, const char *a2, int a3, std::vector<int> *a4, const char *a5)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  int *begin;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *__endptr;

  if (!a4)
    kaldi::KaldiAssertFailure_((kaldi *)"SplitStringToIntegers", "../engine/common/libquasar/libkaldi/src/util/text-utils.h", (const char *)0x64, "out != NULL", a5);
  if (*(char *)(a1 + 23) >= 0)
    v6 = (_BYTE *)a1;
  else
    v6 = *(_BYTE **)a1;
  if (*v6)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    kaldi::SplitStringToVector((const std::string *)a1, a2, a3, (uint64_t)&v15);
    std::vector<int>::resize(a4, 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 3));
    v7 = v15;
    if (v16 == v15)
    {
LABEL_14:
      v13 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 0;
      while (1)
      {
        v10 = (const char *)(v7 + v8);
        if (*(char *)(v7 + v8 + 23) < 0)
          v10 = *(const char **)v10;
        __endptr = 0;
        v11 = strtoll(v10, &__endptr, 10);
        if (__endptr == v10 || *__endptr)
          break;
        begin = a4->__begin_;
        if (v11 != (int)v11)
          goto LABEL_17;
        begin[v9++] = v11;
        v7 = v15;
        v8 += 24;
        if (v9 >= 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 3))
          goto LABEL_14;
      }
      begin = a4->__begin_;
LABEL_17:
      a4->__end_ = begin;
      v13 = 0;
    }
    __endptr = (char *)&v15;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__endptr);
  }
  else
  {
    a4->__end_ = a4->__begin_;
    return 1;
  }
  return v13;
}

void sub_1DE44DD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1DE44DE80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::AddShift *kaldi::nnet1::AddShift::AddShift(kaldi::nnet1::AddShift *this, const kaldi::nnet1::AddShift *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  int v12;

  *(_QWORD *)this = off_1EA92D6D8;
  v4 = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  *(_QWORD *)this = off_1EA929750;
  *((_QWORD *)this + 6) = &off_1EA9284D0;
  v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(_QWORD *)this = &off_1EA92D4F0;
  *((_QWORD *)this + 11) = &unk_1EA92DFD8;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  kaldi::CuVector<float>::Resize((uint64_t)this + 88, *((unsigned int *)a2 + 26), 1u, v6, v7);
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)this + 22, (uint64_t)a2 + 88, v8, v9, v10);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 15, *((_QWORD *)a2 + 15), *((_QWORD *)a2 + 16), (uint64_t)(*((_QWORD *)a2 + 16) - *((_QWORD *)a2 + 15)) >> 5);
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 18, *((_QWORD *)a2 + 18), *((_QWORD *)a2 + 19), (uint64_t)(*((_QWORD *)a2 + 19) - *((_QWORD *)a2 + 18)) >> 5);
  v11 = *((_QWORD *)a2 + 21);
  v12 = *((_DWORD *)a2 + 44);
  *((_QWORD *)this + 23) = 0;
  *((_DWORD *)this + 44) = v12;
  *((_QWORD *)this + 21) = v11;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 23, *((const void **)a2 + 23), *((_QWORD *)a2 + 24), (uint64_t)(*((_QWORD *)a2 + 24) - *((_QWORD *)a2 + 23)) >> 2);
  *((_BYTE *)this + 208) = *((_BYTE *)a2 + 208);
  return this;
}

void sub_1DE44DFFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  kaldi::nnet1::UpdatableComponent *v2;
  _QWORD *v3;
  va_list va;

  va_start(va, a2);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  kaldi::CuVector<float>::~CuVector(v3);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

void sub_1DE44E190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AddShift::EnsureCorrs(kaldi::nnet1::AddShift *this)
{
  int v2;
  int v3;
  int v4;
  std::vector<int>::size_type v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;

  if (!*((_BYTE *)this + 208))
  {
    v2 = *((_DWORD *)this + 42);
    v3 = *((_DWORD *)this + 20);
    if (v3 > 1)
      v4 = v3 + 1;
    else
      v4 = 1;
    v5 = v4;
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 15, v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 18, v4);
    if (v4 >= 1)
    {
      v8 = 0;
      v9 = v2 & 0xFFFFFFFE;
      do
      {
        kaldi::CuVector<float>::Resize(*((_QWORD *)this + 15) + v8, *((unsigned int *)this + 26), 0, v6, v7);
        if (v9 == 2)
        {
          kaldi::CuVector<float>::Resize(*((_QWORD *)this + 18) + v8, *((unsigned int *)this + 26), 1u, v6, v7);
          if (*((_DWORD *)this + 42) == 3)
            kaldi::CuVectorBase<float>::Set(*((_QWORD *)this + 18) + v8, 1.0);
        }
        v8 += 32;
      }
      while (32 * v5 != v8);
    }
    std::vector<int>::resize((std::vector<int> *)((char *)this + 184), v5);
    *((_BYTE *)this + 208) = 1;
  }
}

kaldi::nnet1::Rescale *kaldi::nnet1::Rescale::Rescale(kaldi::nnet1::Rescale *this, const kaldi::nnet1::Rescale *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  int v12;

  *(_QWORD *)this = off_1EA92D6D8;
  v4 = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  *(_QWORD *)this = off_1EA929750;
  *((_QWORD *)this + 6) = &off_1EA9284D0;
  v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(_QWORD *)this = &off_1EA92D248;
  *((_QWORD *)this + 11) = &unk_1EA92DFD8;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  kaldi::CuVector<float>::Resize((uint64_t)this + 88, *((unsigned int *)a2 + 26), 1u, v6, v7);
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)this + 22, (uint64_t)a2 + 88, v8, v9, v10);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 15, *((_QWORD *)a2 + 15), *((_QWORD *)a2 + 16), (uint64_t)(*((_QWORD *)a2 + 16) - *((_QWORD *)a2 + 15)) >> 5);
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 18, *((_QWORD *)a2 + 18), *((_QWORD *)a2 + 19), (uint64_t)(*((_QWORD *)a2 + 19) - *((_QWORD *)a2 + 18)) >> 5);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 168, (char *)a2 + 168, 111);
  v11 = *((_QWORD *)a2 + 27);
  v12 = *((_DWORD *)a2 + 56);
  *((_QWORD *)this + 29) = 0;
  *((_DWORD *)this + 56) = v12;
  *((_QWORD *)this + 27) = v11;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 29, *((const void **)a2 + 29), *((_QWORD *)a2 + 30), (uint64_t)(*((_QWORD *)a2 + 30) - *((_QWORD *)a2 + 29)) >> 2);
  *((_BYTE *)this + 256) = *((_BYTE *)a2 + 256);
  return this;
}

void sub_1DE44E424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  kaldi::nnet1::UpdatableComponent *v2;
  _QWORD *v3;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  kaldi::CuMatrix<float>::~CuMatrix(v4);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  kaldi::CuVector<float>::~CuVector(v3);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Rescale::EnsureCorrs(kaldi::nnet1::Rescale *this)
{
  int v2;
  int v3;
  int v4;
  std::vector<int>::size_type v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;

  if (!*((_BYTE *)this + 256))
  {
    v2 = *((_DWORD *)this + 54);
    v3 = *((_DWORD *)this + 20);
    if (v3 > 1)
      v4 = v3 + 1;
    else
      v4 = 1;
    v5 = v4;
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 15, v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 18, v4);
    if (v4 >= 1)
    {
      v8 = 0;
      v9 = v2 & 0xFFFFFFFE;
      do
      {
        kaldi::CuVector<float>::Resize(*((_QWORD *)this + 15) + v8, *((unsigned int *)this + 26), 0, v6, v7);
        if (v9 == 2)
        {
          kaldi::CuVector<float>::Resize(*((_QWORD *)this + 18) + v8, *((unsigned int *)this + 26), 1u, v6, v7);
          if (*((_DWORD *)this + 54) == 3)
            kaldi::CuVectorBase<float>::Set(*((_QWORD *)this + 18) + v8, 1.0);
        }
        v8 += 32;
      }
      while (32 * v5 != v8);
    }
    std::vector<int>::resize((std::vector<int> *)((char *)this + 232), v5);
    *((_BYTE *)this + 256) = 1;
  }
}

kaldi::nnet1::Rbm *kaldi::nnet1::Rbm::Rbm(kaldi::nnet1::Rbm *this, const kaldi::nnet1::Rbm *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;

  *(_QWORD *)this = off_1EA92D6D8;
  v4 = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  *(_QWORD *)this = off_1EA92D160;
  v5 = *((_OWORD *)a2 + 3);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_OWORD *)this + 3) = v5;
  *(_QWORD *)this = &off_1EA92CD78;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 72, (char *)a2 + 72, 111);
  *((_QWORD *)this + 15) = &unk_1EA92DFD8;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  kaldi::CuVector<float>::Resize((uint64_t)this + 120, *((unsigned int *)a2 + 34), 1u, v6, v7);
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)this + 30, (uint64_t)a2 + 120, v8, v9, v10);
  *((_QWORD *)this + 19) = &unk_1EA92DFD8;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  kaldi::CuVector<float>::Resize((uint64_t)this + 152, *((unsigned int *)a2 + 42), 1u, v11, v12);
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)this + 38, (uint64_t)a2 + 152, v13, v14, v15);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 184, (char *)a2 + 184, 111);
  *((_QWORD *)this + 29) = &unk_1EA92DFD8;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 32) = *((_QWORD *)a2 + 32);
  kaldi::CuVector<float>::Resize((uint64_t)this + 232, *((unsigned int *)a2 + 62), 1u, v16, v17);
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)this + 58, (uint64_t)a2 + 232, v18, v19, v20);
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 33) = &unk_1EA92DFD8;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 36) = *((_QWORD *)a2 + 36);
  kaldi::CuVector<float>::Resize((uint64_t)this + 264, *((unsigned int *)a2 + 70), 1u, v21, v22);
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)this + 66, (uint64_t)a2 + 264, v23, v24, v25);
  *((_QWORD *)this + 37) = *((_QWORD *)a2 + 37);
  return this;
}

void sub_1DE44E728(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v7;

  kaldi::CuVector<float>::~CuVector(v4);
  kaldi::CuVector<float>::~CuVector(v3);
  kaldi::CuMatrix<float>::~CuMatrix(v2);
  *v1 = v5;
  v7 = (void *)v1[3];
  if (v7)
  {
    v1[4] = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

float kaldi::nnet1::CheckNanInf<float>(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float result;
  _QWORD *v7;
  _QWORD v8[34];

  result = kaldi::CuMatrixBase<float>::Sum(a1, (uint64_t)a2, a3, a4, a5);
  if (fabsf(result) == INFINITY)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8, "CheckNanInf", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", 232);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"'inf' in ", 9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, a2);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  return result;
}

float kaldi::nnet1::ComputeStdDev<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6;
  int v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  _QWORD *v22;
  _QWORD v24[34];
  _BYTE v25[48];

  v7 = *(_DWORD *)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 20);
  v8 = kaldi::CuMatrixBase<float>::Sum(a1, a2, a3, a4, a5);
  v9 = kaldi::CuMatrix<float>::CuMatrix(v25, a1, 111);
  kaldi::CuMatrixBase<float>::MulElements(v9, a1, v10, v11, v12);
  v17 = kaldi::CuMatrixBase<float>::Sum((uint64_t)v25, v13, v14, v15, v16);
  v18 = (float)(v7 * v6);
  v19 = v8 / v18;
  v20 = v17 / v18;
  if ((float)(v20 - (float)(v19 * v19)) >= 0.0)
  {
    v21 = v20 - (float)(v19 * v19);
  }
  else
  {
    v21 = 0.0;
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24, "ComputeStdDev", "../engine/common/libquasar/libkaldi/src/nnet/nnet-various.h", 247);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Forcing the variance to be non-negative! ", 41);
      v22 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"->0.0", 5);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    }
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v25);
  return sqrtf(v21);
}

void sub_1DE44E968(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::CuMatrix<float>::~CuMatrix(v1 - 96);
  _Unwind_Resume(a1);
}

kaldi::nnet1::Recurrent *kaldi::nnet1::Recurrent::Recurrent(kaldi::nnet1::Recurrent *this, const kaldi::nnet1::Recurrent *a2)
{
  char *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  __int128 v12;

  v4 = (char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24);
  *((_QWORD *)this + 66) = off_1EA92D6D8;
  v5 = *((_QWORD *)v4 + 1);
  *((_WORD *)this + 272) = *((_WORD *)v4 + 8);
  *((_QWORD *)this + 67) = v5;
  *((_QWORD *)this + 69) = 0;
  *((_QWORD *)this + 71) = 0;
  *((_QWORD *)this + 70) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 69, *((const void **)v4 + 3), *((_QWORD *)v4 + 4), (uint64_t)(*((_QWORD *)v4 + 4) - *((_QWORD *)v4 + 3)) >> 3);
  *((_QWORD *)this + 66) = off_1EA929750;
  *((_QWORD *)this + 72) = &off_1EA9284D0;
  v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)((char *)this + 599) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)((char *)this + 584) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(this, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1EA91C290, (uint64_t)a2);
  *(_QWORD *)this = &off_1EA92D860;
  *((_QWORD *)this + 66) = &off_1EA92DAB0;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 160, (char *)a2 + 160, 111);
  *((_QWORD *)this + 26) = &unk_1EA92DFD8;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 29) = *((_QWORD *)a2 + 29);
  kaldi::CuVector<float>::Resize((uint64_t)this + 208, *((unsigned int *)a2 + 56), 1u, v7, v8);
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)this + 52, (uint64_t)a2 + 208, v9, v10, v11);
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 30, *((_QWORD *)a2 + 30), *((_QWORD *)a2 + 31), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 31) - *((_QWORD *)a2 + 30)) >> 4));
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 33, *((_QWORD *)a2 + 33), *((_QWORD *)a2 + 34), (uint64_t)(*((_QWORD *)a2 + 34) - *((_QWORD *)a2 + 33)) >> 5);
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 36, *((_QWORD *)a2 + 36), *((_QWORD *)a2 + 37), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 37) - *((_QWORD *)a2 + 36)) >> 4));
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 39, *((_QWORD *)a2 + 39), *((_QWORD *)a2 + 40), (uint64_t)(*((_QWORD *)a2 + 40) - *((_QWORD *)a2 + 39)) >> 5);
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 42, *((_QWORD *)a2 + 42), *((_QWORD *)a2 + 43), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 43) - *((_QWORD *)a2 + 42)) >> 4));
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 45, *((_QWORD *)a2 + 45), *((_QWORD *)a2 + 46), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 46) - *((_QWORD *)a2 + 45)) >> 4));
  v12 = *((_OWORD *)a2 + 24);
  *((_DWORD *)this + 100) = *((_DWORD *)a2 + 100);
  *((_OWORD *)this + 24) = v12;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 51) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 51, *((const void **)a2 + 51), *((_QWORD *)a2 + 52), (uint64_t)(*((_QWORD *)a2 + 52) - *((_QWORD *)a2 + 51)) >> 2);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 432, (char *)a2 + 432, 111);
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 62) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 60, *((_QWORD *)a2 + 60), *((_QWORD *)a2 + 61), (uint64_t)(*((_QWORD *)a2 + 61) - *((_QWORD *)a2 + 60)) >> 5);
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_QWORD *)this + 65) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 63, *((_QWORD *)a2 + 63), *((_QWORD *)a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 64) - *((_QWORD *)a2 + 63)) >> 4));
  return this;
}

void sub_1DE44EC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, uint64_t a11, void **a12)
{
  _QWORD *v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  void *v17;

  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  kaldi::CuMatrix<float>::~CuMatrix(v15);
  v17 = *v13;
  if (*v13)
  {
    v12[52] = v17;
    operator delete(v17);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = a9;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = a10;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  kaldi::CuVector<float>::~CuVector(v14);
  kaldi::CuMatrix<float>::~CuMatrix(a11);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v12, (uint64_t *)&off_1EA91C290);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v12 + 66));
  _Unwind_Resume(a1);
}

void sub_1DE44ED20()
{
  JUMPOUT(0x1DE44ECB8);
}

void sub_1DE44ED28()
{
  JUMPOUT(0x1DE44ECC4);
}

void sub_1DE44ED30()
{
  JUMPOUT(0x1DE44ECD4);
}

void sub_1DE44ED38()
{
  JUMPOUT(0x1DE44ECE4);
}

void sub_1DE44ED40()
{
  JUMPOUT(0x1DE44ECF0);
}

void sub_1DE44ED48()
{
  JUMPOUT(0x1DE44ED00);
}

void sub_1DE44ED50()
{
  JUMPOUT(0x1DE44ED10);
}

void sub_1DE44ED58()
{
  JUMPOUT(0x1DE44ECF8);
}

kaldi::nnet1::RecurrentBaseComponent *kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(kaldi::nnet1::RecurrentBaseComponent *this, const kaldi::nnet1::RecurrentBaseComponent *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)this = off_1EA929878;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 4));
  *((_QWORD *)this + 4) = &unk_1EA927930;
  *((_DWORD *)this + 10) = *(_DWORD *)(a3 + 40);
  v6 = *(_QWORD *)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v6 - 24)) = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 6) = &off_1EA9284D0;
  v7 = *(_OWORD *)(a3 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)(a3 + 71);
  *(_OWORD *)((char *)this + 56) = v7;
  *((_QWORD *)this + 6) = &off_1EA92B868;
  *(_QWORD *)&v7 = *(_QWORD *)(a3 + 96);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 11) = &unk_1EA92B888;
  *((_QWORD *)this + 12) = v7;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 13, *(_QWORD *)(a3 + 104), *(_QWORD *)(a3 + 112), (uint64_t)(*(_QWORD *)(a3 + 112) - *(_QWORD *)(a3 + 104)) >> 5);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 16, *(_QWORD *)(a3 + 128), *(_QWORD *)(a3 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 136) - *(_QWORD *)(a3 + 128)) >> 4));
  *((_QWORD *)this + 19) = *(_QWORD *)(a3 + 152);
  return this;
}

void sub_1DE44EE88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  kaldi::nnet1::HistoricalComponent *v2;
  kaldi::nnet1::RecurrentNnetTrainOptions *v3;
  va_list va;

  va_start(va, a2);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions(v3);
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent(v2);
  _Unwind_Resume(a1);
}

void sub_1DE44EFF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Recurrent::EnsureTrainingBuffers(kaldi::nnet1::Recurrent *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;

  if (!*((_BYTE *)this + 389))
  {
    v2 = *((_DWORD *)this + 39);
    v3 = *((_DWORD *)this + 20);
    if (v3 > 1)
      v4 = (v3 + 1);
    else
      v4 = 1;
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 30, (int)v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 33, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 45, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 36, (int)v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 39, (int)v4);
    if ((int)v4 >= 1)
    {
      v5 = 0;
      v6 = (*((_DWORD *)this + 24) + *((_DWORD *)this + 24) * *((_DWORD *)this + 25));
      v7 = v2 & 0xFFFFFFFE;
      do
      {
        kaldi::CuMatrix<float>::Resize(*((_QWORD *)this + 30) + 48 * v5, *((unsigned int *)this + 45), *((unsigned int *)this + 44), 0, 0);
        kaldi::CuVector<float>::Resize(*((_QWORD *)this + 33) + 32 * v5, *((unsigned int *)this + 56), 0, v8, v9);
        kaldi::CuMatrix<float>::Resize(*((_QWORD *)this + 45) + 48 * v5, v6, *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12), 0, 0);
        if (v7 == 2)
        {
          kaldi::CuMatrix<float>::Resize(*((_QWORD *)this + 36) + 48 * v5, *((unsigned int *)this + 45), *((unsigned int *)this + 44), 1u, 0);
          kaldi::CuVector<float>::Resize(*((_QWORD *)this + 39) + 32 * v5, *((unsigned int *)this + 56), 1u, v10, v11);
          if (*((_DWORD *)this + 39) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*((_QWORD *)this + 36) + 48 * v5, v12, v13, v14, v15, 1.0);
            kaldi::CuVectorBase<float>::Set(*((_QWORD *)this + 39) + 32 * v5, 1.0);
          }
        }
        ++v5;
      }
      while (v5 != v4);
    }
    if (*((float *)this + 100) > 0.0)
      kaldi::CuMatrix<float>::Resize((uint64_t)this + 432, *((unsigned int *)this + 45), *((unsigned int *)this + 44), 1u, 0);
    *((_BYTE *)this + 389) = 1;
  }
}

kaldi::nnet1::ConvolutionalComponent *kaldi::nnet1::ConvolutionalComponent::ConvolutionalComponent(kaldi::nnet1::ConvolutionalComponent *this, const kaldi::nnet1::ConvolutionalComponent *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = off_1EA92D6D8;
  v4 = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  *(_QWORD *)this = off_1EA929750;
  *((_QWORD *)this + 6) = &off_1EA9284D0;
  v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(_QWORD *)this = &off_1EA92A058;
  v6 = *((_QWORD *)a2 + 11);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_QWORD *)this + 11) = v6;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 104, (char *)a2 + 104, 111);
  *((_QWORD *)this + 19) = &unk_1EA92DFD8;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  kaldi::CuVector<float>::Resize((uint64_t)this + 152, *((unsigned int *)a2 + 42), 1u, v7, v8);
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)this + 38, (uint64_t)a2 + 152, v9, v10, v11);
  v12 = *((_QWORD *)a2 + 23);
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 23) = v12;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 24, *((_QWORD *)a2 + 24), *((_QWORD *)a2 + 25), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 25) - *((_QWORD *)a2 + 24)) >> 4));
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 27, *((_QWORD *)a2 + 27), *((_QWORD *)a2 + 28), (uint64_t)(*((_QWORD *)a2 + 28) - *((_QWORD *)a2 + 27)) >> 5);
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 30, *((_QWORD *)a2 + 30), *((_QWORD *)a2 + 31), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 31) - *((_QWORD *)a2 + 30)) >> 4));
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 33, *((_QWORD *)a2 + 33), *((_QWORD *)a2 + 34), (uint64_t)(*((_QWORD *)a2 + 34) - *((_QWORD *)a2 + 33)) >> 5);
  v13 = *((_QWORD *)a2 + 36);
  *((_DWORD *)this + 74) = *((_DWORD *)a2 + 74);
  *((_QWORD *)this + 36) = v13;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 38) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 38, *((_QWORD *)a2 + 38), *((_QWORD *)a2 + 39), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 39) - *((_QWORD *)a2 + 38)) >> 4));
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 41, *((_QWORD *)a2 + 41), *((_QWORD *)a2 + 42), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 42) - *((_QWORD *)a2 + 41)) >> 4));
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 44, *((const void **)a2 + 44), *((_QWORD *)a2 + 45), (uint64_t)(*((_QWORD *)a2 + 45) - *((_QWORD *)a2 + 44)) >> 2);
  *((_BYTE *)this + 376) = *((_BYTE *)a2 + 376);
  return this;
}

void sub_1DE44F414(_Unwind_Exception *a1, uint64_t a2, ...)
{
  kaldi::nnet1::UpdatableComponent *v2;
  _QWORD *v3;
  va_list va;

  va_start(va, a2);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  kaldi::CuVector<float>::~CuVector(v3);
  kaldi::CuMatrix<float>::~CuMatrix(a2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalComponent::EnsureCorrs(kaldi::nnet1::ConvolutionalComponent *this)
{
  int v2;
  int v3;
  int v4;
  std::vector<int>::size_type v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;

  if (!*((_BYTE *)this + 376))
  {
    v2 = *((_DWORD *)this + 46);
    v3 = *((_DWORD *)this + 20);
    if (v3 > 1)
      v4 = v3 + 1;
    else
      v4 = 1;
    v5 = v4;
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 24, v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 27, v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 30, v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 33, v4);
    if (v4 >= 1)
    {
      v6 = 0;
      v7 = v2 & 0xFFFFFFFE;
      do
      {
        kaldi::CuMatrix<float>::Resize(*((_QWORD *)this + 24) + 48 * v6, *((unsigned int *)this + 31), *((unsigned int *)this + 30), 0, 0);
        kaldi::CuVector<float>::Resize(*((_QWORD *)this + 27) + 32 * v6, *((unsigned int *)this + 31), 0, v8, v9);
        if (v7 == 2)
        {
          kaldi::CuMatrix<float>::Resize(*((_QWORD *)this + 30) + 48 * v6, *((unsigned int *)this + 31), *((unsigned int *)this + 30), 1u, 0);
          kaldi::CuVector<float>::Resize(*((_QWORD *)this + 33) + 32 * v6, *((unsigned int *)this + 31), 1u, v10, v11);
          if (*((_DWORD *)this + 46) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*((_QWORD *)this + 30) + 48 * v6, v12, v13, v14, v15, 1.0);
            kaldi::CuVectorBase<float>::Set(*((_QWORD *)this + 33) + 32 * v6, 1.0);
          }
        }
        ++v6;
      }
      while (v6 != v5);
    }
    std::vector<int>::resize((std::vector<int> *)((char *)this + 352), v5);
    *((_BYTE *)this + 376) = 1;
  }
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  std::vector<int>::pointer end;
  int *v7;
  std::vector<int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

{
  std::vector<int>::pointer end;
  int *v7;
  std::vector<int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_1DE44F678(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::MaxPooling2DComponent *kaldi::nnet1::MaxPooling2DComponent::MaxPooling2DComponent(kaldi::nnet1::MaxPooling2DComponent *this, const kaldi::nnet1::MaxPooling2DComponent *a2)
{
  uint64_t v4;

  *(_QWORD *)this = off_1EA92D6D8;
  v4 = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  *(_QWORD *)this = &off_1EA929CE8;
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  return this;
}

kaldi::nnet1::Desplice *kaldi::nnet1::Desplice::Desplice(kaldi::nnet1::Desplice *this, const kaldi::nnet1::Desplice *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;

  *(_QWORD *)this = off_1EA92D6D8;
  v4 = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  *(_QWORD *)this = &off_1EA92D618;
  v5 = *((_QWORD *)a2 + 6);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_QWORD *)this + 6) = v5;
  kaldi::CuArray<int>::CuArray((int *)this + 16, (uint64_t)a2 + 64, v6, v7, v8);
  kaldi::CuArray<int>::CuArray((int *)this + 22, (uint64_t)a2 + 88, v9, v10, v11);
  kaldi::CuArray<int>::CuArray((int *)this + 28, (uint64_t)a2 + 112, v12, v13, v14);
  kaldi::CuArray<int>::CuArray((int *)this + 34, (uint64_t)a2 + 136, v15, v16, v17);
  return this;
}

void sub_1DE44F7D0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v7 = (void *)v1[15];
  if (v7)
    free(v7);
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  v8 = (void *)v1[12];
  if (v8)
    free(v8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  v9 = (void *)v1[9];
  if (v9)
    free(v9);
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  *v1 = v5;
  v10 = (void *)v1[3];
  if (v10)
  {
    v1[4] = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Desplice::Init(kaldi::nnet1::Desplice *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  int v6;
  int v7;
  int v9;
  int v10;
  int v11;
  int v12;
  std::vector<int>::size_type v13;
  std::vector<int>::size_type v14;
  const char *v15;
  const char *v16;
  int v17;
  int v18;
  int i;
  int v20;
  std::vector<int>::pointer begin;
  unint64_t v22;
  std::vector<int>::pointer v23;
  unint64_t v24;
  std::vector<int>::pointer v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  std::vector<int>::value_type v42;
  std::vector<int> __x;
  std::vector<int> v44;
  std::vector<int> v45;
  std::vector<int> v46;

  v5 = *((_DWORD *)this + 2);
  v6 = *((_DWORD *)this + 14);
  v7 = v5 / v6;
  if (v5 % v6)
    kaldi::KaldiAssertFailure_((kaldi *)"Init", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolution-splicer.h", (const char *)0x77, "input_dim_ % time_length_ == 0", a5);
  v9 = *((_DWORD *)this + 12);
  v10 = v6 / v9;
  v11 = *((_DWORD *)this + 3);
  if (v11 != v10 * v7)
    kaldi::KaldiAssertFailure_((kaldi *)"Init", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolution-splicer.h", (const char *)0x7A, "output_dim_ == out_time_length * other_dim", a5);
  v12 = *((_DWORD *)this + 13) * v9;
  std::vector<int>::vector(&v46, v11 * v12);
  std::vector<int>::vector(&v45, *((int *)this + 3) * (uint64_t)v12);
  v13 = *((int *)this + 13) * (uint64_t)*((int *)this + 2);
  LODWORD(__x.__begin_) = -1;
  std::vector<int>::vector(&v44, v13, (const std::vector<int>::value_type *)&__x);
  v14 = *((int *)this + 13) * (uint64_t)*((int *)this + 2);
  v42 = -1;
  std::vector<int>::vector(&__x, v14, &v42);
  if (v12 >= 1)
  {
    v17 = 0;
    v15 = "n >= 0 && n < output_dim_";
    do
    {
      if (v7 >= 1)
      {
        v18 = 0;
        for (i = 0; i != v7; ++i)
        {
          if (v10 >= 1)
          {
            v20 = 0;
            begin = v46.__begin_;
            v22 = v46.__end_ - v46.__begin_;
            v23 = v44.__begin_;
            v24 = v44.__end_ - v44.__begin_;
            v16 = (const char *)v45.__begin_;
            v25 = __x.__begin_;
            v26 = v18;
            while (1)
            {
              if (v18 < 0 || (v27 = *((_DWORD *)this + 3), (int)v26 >= v27))
              {
                v41 = 137;
                goto LABEL_35;
              }
              v28 = v18 + v20 + v17 * v27;
              if (v22 <= v28)
                break;
              v29 = *((_DWORD *)this + 13);
              if (v29 < 0)
              {
                v41 = 139;
                v15 = "r >= 0 && r < row_stride_";
                goto LABEL_35;
              }
              v30 = v17 / v29 + *((_DWORD *)this + 12) * v20;
              v31 = *((_DWORD *)this + 14);
              v32 = v30 + v31 * i;
              if (v32 < 0 || (v33 = *((_DWORD *)this + 2), v32 >= v33))
              {
                v41 = 140;
                v15 = "c >= 0 && c < input_dim_";
                goto LABEL_35;
              }
              if (v30 >= v31)
              {
                v41 = 141;
                v15 = "src_frame < time_length_";
                goto LABEL_35;
              }
              v34 = v17 % v29;
              if (v24 <= v32 + v33 * v34)
              {
                v41 = 142;
                v15 = "r * input_dim_ + c < backward_r_h.size()";
                goto LABEL_35;
              }
              begin[v28] = v34;
              *(_DWORD *)&v16[4 * v26 + 4 * *((int *)this + 3) * (uint64_t)v17] = v32;
              v23[v32 + *((_DWORD *)this + 2) * v34] = v17;
              v25[v32 + *((_DWORD *)this + 2) * v34] = v26;
              ++v20;
              ++v26;
              if (v10 == v20)
                goto LABEL_18;
            }
            v41 = 138;
            v15 = "m * output_dim_ + n < forward_r_h.size()";
LABEL_35:
            kaldi::KaldiAssertFailure_((kaldi *)"Init", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolution-splicer.h", (const char *)v41, v15, v16);
          }
LABEL_18:
          v18 += v10;
        }
      }
      ++v17;
    }
    while (v17 != v12);
  }
  kaldi::CuArray<int>::Resize((uint64_t)this + 64, (unint64_t)((char *)v46.__end_ - (char *)v46.__begin_) >> 2, 1u, (uint64_t)v15, v16);
  memcpy(*((void **)this + 9), v46.__begin_, (char *)v46.__end_ - (char *)v46.__begin_);
  kaldi::CuArray<int>::Resize((uint64_t)this + 88, (unint64_t)((char *)v45.__end_ - (char *)v45.__begin_) >> 2, 1u, v35, v36);
  memcpy(*((void **)this + 12), v45.__begin_, (char *)v45.__end_ - (char *)v45.__begin_);
  kaldi::CuArray<int>::Resize((uint64_t)this + 112, (unint64_t)((char *)v44.__end_ - (char *)v44.__begin_) >> 2, 1u, v37, v38);
  memcpy(*((void **)this + 15), v44.__begin_, (char *)v44.__end_ - (char *)v44.__begin_);
  kaldi::CuArray<int>::Resize((uint64_t)this + 136, (unint64_t)((char *)__x.__end_ - (char *)__x.__begin_) >> 2, 1u, v39, v40);
  memcpy(*((void **)this + 18), __x.__begin_, (char *)__x.__end_ - (char *)__x.__begin_);
  if (__x.__begin_)
  {
    __x.__end_ = __x.__begin_;
    operator delete(__x.__begin_);
  }
  if (v44.__begin_)
  {
    v44.__end_ = v44.__begin_;
    operator delete(v44.__begin_);
  }
  if (v45.__begin_)
  {
    v45.__end_ = v45.__begin_;
    operator delete(v45.__begin_);
  }
  if (v46.__begin_)
  {
    v46.__end_ = v46.__begin_;
    operator delete(v46.__begin_);
  }
}

void sub_1DE44FBCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

unsigned int *kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;

  if (!a3)
    kaldi::KaldiAssertFailure_((kaldi *)"Propagate", "../engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.h", (const char *)0x97, "NULL != out", a5);
  if (((a1[1] - *a1) & 0x7FFFFFFF8) == 0)
    return (unsigned int *)kaldi::CuMatrix<float>::operator=(a3, a2);
  v6 = (uint64_t *)(a1[9] + 24 * (int)a4);
  v7 = *v6;
  v8 = v6[1];
  while (v7 != v8)
  {
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(a3 + 32);
    v7 += 48;
  }
  v9 = kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(a1, a2, a4, a4, a5);
  kaldi::CuMatrix<float>::Resize(a3, *(unsigned int *)(v9 + 20), *(unsigned int *)(v9 + 16), 1u, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a3, v9, 111, v10, v11);
}

uint64_t kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  uint64_t *v8;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v5 = (unint64_t)(a1[1] - *a1) >> 3;
  if ((int)v5 <= 0)
    kaldi::KaldiAssertFailure_((kaldi *)"Propagate", "../engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.h", (const char *)0xAF, "NumComponents() > 0", a5);
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1[18] + 32) <= (int)a3)
    kaldi::KaldiAssertFailure_((kaldi *)"Propagate", "../engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.h", (const char *)0xB0, "batch_idx >= 0 && batch_idx < opts_->num_subbatches", a5);
  v8 = (uint64_t *)(a1[9] + 24 * a3);
  if ((int)v5 >= (int)(-1431655765 * ((unint64_t)(v8[1] - *v8) >> 4)))
    kaldi::KaldiAssertFailure_((kaldi *)"Propagate", "../engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.h", (const char *)0xB3, "(int32)propagate_buf_[batch_idx].size() >= NumComponents() + 1", a5);
  v10 = a3;
  kaldi::CuMatrix<float>::Resize(*v8, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 1u, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(*(unsigned int **)(a1[9] + 24 * v10), a2, 111, v11, v12);
  v13 = *a1;
  v14 = (a1[1] - *a1) >> 3;
  if ((int)v14 >= 1)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_DWORD **)(v13 + 8 * v16++);
      v18 = *(_QWORD *)(a1[9] + 24 * v10) + v15;
      kaldi::nnet1::Component::Propagate(v17, v18, v18 + 48, a3);
      v13 = *a1;
      v19 = a1[1] - *a1;
      v15 += 48;
    }
    while (v16 < (int)((unint64_t)v19 >> 3));
    v14 = v19 >> 3;
  }
  return *(_QWORD *)(a1[9] + 24 * v10) + 48 * v14;
}

kaldi::nnet1::FramePoolingComponent *kaldi::nnet1::FramePoolingComponent::FramePoolingComponent(kaldi::nnet1::FramePoolingComponent *this, const kaldi::nnet1::FramePoolingComponent *a2)
{
  uint64_t v4;
  __int128 v5;
  int v6;

  *(_QWORD *)this = off_1EA92D6D8;
  v4 = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  *(_QWORD *)this = off_1EA929750;
  *((_QWORD *)this + 6) = &off_1EA9284D0;
  v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(_QWORD *)this = &off_1EA929BC0;
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 12, *((const void **)a2 + 12), *((_QWORD *)a2 + 13), (uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 2);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  std::vector<kaldi::Vector<float>>::__init_with_size[abi:ne180100]<kaldi::Vector<float>*,kaldi::Vector<float>*>((_QWORD *)this + 15, *((_QWORD *)a2 + 15), *((_QWORD *)a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 16) - *((_QWORD *)a2 + 15)) >> 3));
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  std::vector<kaldi::Vector<float>>::__init_with_size[abi:ne180100]<kaldi::Vector<float>*,kaldi::Vector<float>*>((_QWORD *)this + 18, *((_QWORD *)a2 + 18), *((_QWORD *)a2 + 19), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 19) - *((_QWORD *)a2 + 18)) >> 3));
  v6 = *((_DWORD *)a2 + 42);
  *((_BYTE *)this + 172) = *((_BYTE *)a2 + 172);
  *((_DWORD *)this + 42) = v6;
  return this;
}

void sub_1DE44FFAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  kaldi::nnet1::UpdatableComponent *v2;
  void **v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v5 = *v3;
  if (*v3)
  {
    *((_QWORD *)v2 + 13) = v5;
    operator delete(v5);
  }
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<kaldi::Vector<float>>::__init_with_size[abi:ne180100]<kaldi::Vector<float>*,kaldi::Vector<float>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  const char *v7;

  if (a4)
  {
    v6 = result;
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*,kaldi::Vector<float>*,kaldi::Vector<float>*>((uint64_t)(v6 + 2), a2, a3, v6[1], v7);
    v6[1] = result;
  }
  return result;
}

void sub_1DE450050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*,kaldi::Vector<float>*,kaldi::Vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _QWORD v12[3];
  char v13;
  uint64_t v14;
  uint64_t v15;

  v5 = a4;
  v14 = a4;
  v15 = a4;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a2 != a3)
  {
    v7 = a2;
    do
    {
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      kaldi::Vector<float>::Resize((void **)v5, *(unsigned int *)(v7 + 8), 1, a4, a5);
      kaldi::VectorBase<float>::CopyFromVec(v5, v7, v8, v9, v10);
      v7 += 24;
      v5 = v15 + 24;
      v15 += 24;
    }
    while (v7 != a3);
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v5;
}

void sub_1DE450114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 24;
    kaldi::Vector<float>::Destroy(v1);
  }
}

void std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<kaldi::Vector<float>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void std::vector<kaldi::Vector<float>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i != a2; kaldi::Vector<float>::Destroy(i))
    i -= 24;
  *(_QWORD *)(a1 + 8) = a2;
}

void std::vector<kaldi::Vector<float>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<kaldi::Vector<float>>::__append(a1, v4);
  }
  else if (!v3)
  {
    std::vector<kaldi::Vector<float>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1 + 24 * a2);
  }
}

void std::vector<kaldi::Vector<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<kaldi::Vector<float>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<kaldi::Vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1DE4503B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::Vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::Vector<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<kaldi::Vector<float>*>,std::reverse_iterator<kaldi::Vector<float>*>,std::reverse_iterator<kaldi::Vector<float>*>>((uint64_t)(a1 + 2), a1[1], (const char *)a1[1], *a1, (const char *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<kaldi::Vector<float>*>,std::reverse_iterator<kaldi::Vector<float>*>,std::reverse_iterator<kaldi::Vector<float>*>>(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  v17 = 0;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v9 = (uint64_t)a3;
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v10 = v7 - 24;
      *(_QWORD *)(v10 + 16) = 0;
      kaldi::Vector<float>::Resize((void **)v10, *(unsigned int *)(v9 - 16), 1, a4, a5);
      v9 -= 24;
      kaldi::VectorBase<float>::CopyFromVec(v10, v9, v11, v12, v13);
      v7 = *((_QWORD *)&v19 + 1) - 24;
      *((_QWORD *)&v19 + 1) -= 24;
    }
    while ((const char *)v9 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<kaldi::Vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

void sub_1DE4504F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<kaldi::Vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<kaldi::Vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<kaldi::Vector<float>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<kaldi::Vector<float>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v15 = v3;
  v16 = v2;
  v17 = v3;
  v18 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v10 = v7;
  v11 = v6;
  v12 = v7;
  v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<std::reverse_iterator<kaldi::Vector<float>*>>,std::reverse_iterator<std::reverse_iterator<kaldi::Vector<float>*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t std::__allocator_destroy[abi:ne180100]<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<std::reverse_iterator<kaldi::Vector<float>*>>,std::reverse_iterator<std::reverse_iterator<kaldi::Vector<float>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  for (result = *(_QWORD *)(a2 + 32); result != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = result)
  {
    kaldi::Vector<float>::Destroy(result);
    result = *(_QWORD *)(a2 + 32) + 24;
  }
  return result;
}

uint64_t std::__split_buffer<kaldi::Vector<float>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<kaldi::Vector<float>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<kaldi::Vector<float>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  while (1)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 == a2)
      break;
    *(_QWORD *)(a1 + 16) = v4 - 24;
    kaldi::Vector<float>::Destroy(v4 - 24);
  }
}

_QWORD *std::vector<kaldi::nnet1::Nnet>::__init_with_size[abi:ne180100]<kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<kaldi::nnet1::Nnet>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>,kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DE4506DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<kaldi::nnet1::Nnet>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<kaldi::nnet1::Nnet>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAE4C415C9882BALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[376 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAE4C415C9882BALL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(376 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>,kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a4 + v7), (const kaldi::nnet1::Nnet *)(a2 + v7));
      v7 += 376;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1DE4507F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 376;
    do
    {
      kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(v4 + v2));
      v2 -= 376;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<kaldi::nnet1::Nnet>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(v4 - 376));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *kaldi::nnet1::ParallelComponent::CheckNetworkDimensions(uint64_t *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  kaldi::nnet1::Nnet *v6;
  kaldi::nnet1::Nnet *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[34];

  v5 = (uint64_t)this;
  *((_BYTE *)this + 177) = 1;
  v6 = (kaldi::nnet1::Nnet *)this[23];
  v7 = (kaldi::nnet1::Nnet *)this[24];
  if (v6 == v7)
  {
    v9 = 0;
    v8 = 0;
    v20 = *this;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = kaldi::nnet1::Nnet::InputDim(v6, a2, a3, a4, a5);
      v15 = kaldi::nnet1::Nnet::OutputDim(v6, v11, v12, v13, v14);
      this = (uint64_t *)kaldi::nnet1::Nnet::OutputDim(v6, v16, v17, v18, v19);
      v20 = *(_QWORD *)v5;
      if ((_DWORD)this != *(_DWORD *)(v5 + 12 + *(_QWORD *)(*(_QWORD *)v5 - 24)))
        *(_BYTE *)(v5 + 177) = 0;
      v8 += v10;
      v9 += v15;
      v6 = (kaldi::nnet1::Nnet *)((char *)v6 + 376);
    }
    while (v6 != v7);
  }
  *(_BYTE *)(v5 + 176) = 1;
  v21 = *(int *)(v5 + *(_QWORD *)(v20 - 24) + 8);
  if ((_DWORD)v21 != v8)
  {
    if (v8 / (unint64_t)(0x51B3BEA3677D46CFLL * ((uint64_t)(*(_QWORD *)(v5 + 192) - *(_QWORD *)(v5 + 184)) >> 3)) != v21)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "CheckNetworkDimensions", "../engine/common/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", 587);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, "Input dimension of parallel component and input dimensions of nested networks do not match.");
      goto LABEL_16;
    }
    *(_BYTE *)(v5 + 176) = 0;
  }
  if (!*(_BYTE *)(v5 + 177) && *(_DWORD *)(v5 + *(_QWORD *)(v20 - 24) + 12) != v9)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "CheckNetworkDimensions", "../engine/common/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", 592);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, "Output dimension of parallel component and output dimensions of nested networks do not match.");
LABEL_16:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  return this;
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1DE450B38(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::vector<kaldi::nnet1::Nnet>::__push_back_slow_path<kaldi::nnet1::Nnet const&>(uint64_t *a1, const kaldi::nnet1::Nnet *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  kaldi::nnet1::Nnet *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x51B3BEA3677D46CFLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0xAE4C415C9882B9)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x51B3BEA3677D46CFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x572620AE4C415CLL)
    v9 = 0xAE4C415C9882B9;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (kaldi::nnet1::Nnet *)&v10[376 * v4];
  v16 = &v10[376 * v9];
  kaldi::nnet1::Nnet::Nnet(v14, a2);
  v15 = (char *)v14 + 376;
  std::vector<kaldi::nnet1::Nnet>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<kaldi::nnet1::Nnet>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1DE450E64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::nnet1::Nnet>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::nnet1::Nnet>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>,std::reverse_iterator<kaldi::nnet1::Nnet*>,std::reverse_iterator<kaldi::nnet1::Nnet*>,std::reverse_iterator<kaldi::nnet1::Nnet*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>,std::reverse_iterator<kaldi::nnet1::Nnet*>,std::reverse_iterator<kaldi::nnet1::Nnet*>,std::reverse_iterator<kaldi::nnet1::Nnet*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  kaldi::nnet1::Nnet *v12;

  v10 = 0;
  v11 = a7 - 376;
  while (a3 + v10 != a5)
  {
    v12 = (kaldi::nnet1::Nnet *)(v11 + v10);
    v10 -= 376;
    kaldi::nnet1::Nnet::Nnet(v12, (const kaldi::nnet1::Nnet *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<kaldi::nnet1::Nnet>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 376;
    kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(i - 376));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<kaldi::nnet1::Nnet>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0x51B3BEA3677D46CFLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<kaldi::nnet1::Nnet>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 376 * a2;
    while (v3 != v7)
      kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(v3 - 376));
    a1[1] = v7;
  }
}

kaldi::nnet1::Nnet *std::vector<kaldi::nnet1::Nnet>::__append(uint64_t *a1, unint64_t a2)
{
  kaldi::nnet1::Nnet *result;
  uint64_t v5;
  uint64_t v6;
  kaldi::nnet1::Nnet *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  kaldi::nnet1::Nnet *v13;
  uint64_t v14;
  kaldi::nnet1::Nnet *v15;
  uint64_t v16;
  kaldi::nnet1::Nnet *v17;
  _QWORD v18[2];
  kaldi::nnet1::Nnet *v19;
  char *v20;
  kaldi::nnet1::Nnet *v21;

  v6 = a1[2];
  result = (kaldi::nnet1::Nnet *)(a1 + 2);
  v5 = v6;
  v7 = (kaldi::nnet1::Nnet *)*((_QWORD *)result - 1);
  if (0x51B3BEA3677D46CFLL * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = (kaldi::nnet1::Nnet *)((char *)v7 + 376 * a2);
      v14 = 376 * a2;
      do
      {
        result = kaldi::nnet1::Nnet::Nnet(v7);
        v7 = (kaldi::nnet1::Nnet *)((char *)v7 + 376);
        v14 -= 376;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = 0x51B3BEA3677D46CFLL * (((uint64_t)v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAE4C415C9882B9)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x51B3BEA3677D46CFLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x572620AE4C415CLL)
      v11 = 0xAE4C415C9882B9;
    else
      v11 = v9;
    v21 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>>((uint64_t)result, v11);
    else
      v12 = 0;
    v15 = (kaldi::nnet1::Nnet *)&v12[376 * v8];
    v18[0] = v12;
    v18[1] = v15;
    v19 = v15;
    v20 = &v12[376 * v11];
    v16 = 376 * a2;
    v17 = (kaldi::nnet1::Nnet *)((char *)v15 + 376 * a2);
    do
    {
      kaldi::nnet1::Nnet::Nnet(v15);
      v15 = (kaldi::nnet1::Nnet *)((char *)v15 + 376);
      v16 -= 376;
    }
    while (v16);
    v19 = v17;
    std::vector<kaldi::nnet1::Nnet>::__swap_out_circular_buffer(a1, v18);
    return (kaldi::nnet1::Nnet *)std::__split_buffer<kaldi::nnet1::Nnet>::~__split_buffer((uint64_t)v18);
  }
  return result;
}

void sub_1DE4511A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::nnet1::Nnet>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

kaldi::nnet1::WordVecComponent *kaldi::nnet1::WordVecComponent::WordVecComponent(kaldi::nnet1::WordVecComponent *this, const kaldi::nnet1::WordVecComponent *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)this = off_1EA92D6D8;
  v4 = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  *(_QWORD *)this = off_1EA929750;
  *((_QWORD *)this + 6) = &off_1EA9284D0;
  v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(_QWORD *)this = &off_1EA9285B0;
  *((_QWORD *)this + 11) = &unk_1EA9286E0;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 96, (char *)a2 + 96, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 144, (char *)a2 + 144, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 192, (char *)a2 + 192, 111);
  v6 = *((_OWORD *)a2 + 15);
  *((_QWORD *)this + 32) = *((_QWORD *)a2 + 32);
  *((_OWORD *)this + 15) = v6;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 264, (char *)a2 + 264, 111);
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 39, *((_QWORD *)a2 + 39), *((_QWORD *)a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 40) - *((_QWORD *)a2 + 39)) >> 4));
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  std::vector<kaldi::CuSubMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*>((_QWORD *)this + 42, *((_QWORD *)a2 + 42), *((_QWORD *)a2 + 43), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 43) - *((_QWORD *)a2 + 42)) >> 3));
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = 0;
  std::vector<kaldi::CuSubMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*>((_QWORD *)this + 45, *((_QWORD *)a2 + 45), *((_QWORD *)a2 + 46), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 46) - *((_QWORD *)a2 + 45)) >> 3));
  return this;
}

void sub_1DE451370(_Unwind_Exception *a1, uint64_t a2, ...)
{
  kaldi::nnet1::UpdatableComponent *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a2);
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  kaldi::CuMatrix<float>::~CuMatrix(v6);
  kaldi::CuMatrix<float>::~CuMatrix(v5);
  kaldi::CuMatrix<float>::~CuMatrix(v4);
  kaldi::CuMatrix<float>::~CuMatrix(v3);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

void sub_1DE4513DC()
{
  JUMPOUT(0x1DE4513C4);
}

void sub_1DE4513E4()
{
  JUMPOUT(0x1DE4513CCLL);
}

_QWORD *std::vector<kaldi::CuSubMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<kaldi::CuSubMatrix<float>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<kaldi::CuSubMatrix<float>>,kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DE451450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<kaldi::CuSubMatrix<float>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::Matrix<float>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<kaldi::CuSubMatrix<float>>,kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  for (result = a4; a2 != a3; a2 += 40)
  {
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(result + 16) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(result + 32) = v6;
    *(_QWORD *)result = &unk_1EA926508;
    *(_QWORD *)(result + 8) = v5;
    result += 40;
  }
  return result;
}

void kaldi::nnet1::FofeWordVecComponent::Prepare(kaldi::nnet1::FofeWordVecComponent *this, uint64_t a2)
{
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*((_DWORD *)this + 102) < (int)a2)
  {
    kaldi::CuMatrix<float>::Resize((uint64_t)this + 392, 1, a2, 1u, 0);
    if (!*((_DWORD *)this + 103))
      goto LABEL_9;
    v5 = *((unsigned int *)this + 102);
    if (v5 <= (int)a2 - 1)
      goto LABEL_9;
    v6 = *((_QWORD *)this + 50);
    *(_DWORD *)(v6 + 4 * ((int)a2 - 1)) = 1065353216;
    v7 = (a2 - 2);
    if ((int)a2 >= 2)
    {
      while (v7 + 1 < v5)
      {
        *(float *)(v6 + 4 * v7) = *(float *)(v6 + 4 * v7 + 4) * *((float *)this + 96);
        if (v7-- <= 0)
          goto LABEL_8;
      }
LABEL_9:
      kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v4);
    }
  }
LABEL_8:
  kaldi::CuMatrix<float>::Resize((uint64_t)this + 440, a2, *((unsigned int *)this + 3), 1u, 0);
}

kaldi::nnet1::SharedNceComponent *kaldi::nnet1::SharedNceComponent::SharedNceComponent(kaldi::nnet1::SharedNceComponent *this, const kaldi::nnet1::SharedNceComponent *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  __int128 v26;

  *(_QWORD *)this = off_1EA92D6D8;
  v4 = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  *(_QWORD *)this = off_1EA929750;
  *((_QWORD *)this + 6) = &off_1EA9284D0;
  v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(_QWORD *)this = &off_1EA929628;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 88, (char *)a2 + 88, 111);
  *((_QWORD *)this + 17) = &unk_1EA92DFD8;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  kaldi::CuVector<float>::Resize((uint64_t)this + 136, *((unsigned int *)a2 + 38), 1u, v6, v7);
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)this + 34, (uint64_t)a2 + 136, v8, v9, v10);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 168, (char *)a2 + 168, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 216, (char *)a2 + 216, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 264, (char *)a2 + 264, 111);
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 39) = &unk_1EA92DFD8;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 42) = *((_QWORD *)a2 + 42);
  kaldi::CuVector<float>::Resize((uint64_t)this + 312, *((unsigned int *)a2 + 82), 1u, v11, v12);
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)this + 78, (uint64_t)a2 + 312, v13, v14, v15);
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 43) = &unk_1EA92DFD8;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 46) = *((_QWORD *)a2 + 46);
  kaldi::CuVector<float>::Resize((uint64_t)this + 344, *((unsigned int *)a2 + 90), 1u, v16, v17);
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)this + 86, (uint64_t)a2 + 344, v18, v19, v20);
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 47) = &unk_1EA92DFD8;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 50) = *((_QWORD *)a2 + 50);
  kaldi::CuVector<float>::Resize((uint64_t)this + 376, *((unsigned int *)a2 + 98), 1u, v21, v22);
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)this + 94, (uint64_t)a2 + 376, v23, v24, v25);
  v26 = *(_OWORD *)((char *)a2 + 408);
  *((_QWORD *)this + 53) = *((_QWORD *)a2 + 53);
  *(_OWORD *)((char *)this + 408) = v26;
  return this;
}

void sub_1DE4517D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  kaldi::nnet1::UpdatableComponent *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  kaldi::CuMatrix<float>::~CuMatrix(v13);
  kaldi::CuMatrix<float>::~CuMatrix(v12);
  kaldi::CuVector<float>::~CuVector(v11);
  kaldi::CuMatrix<float>::~CuMatrix(a10);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v10);
  _Unwind_Resume(a1);
}

void sub_1DE451854()
{
  JUMPOUT(0x1DE45183CLL);
}

uint64_t kaldi::nnet1::CompressedWordTransComponent::SetVecTable(kaldi::nnet1::CompressedWordTransComponent *this, const void **a2, uint64_t a3, uint64_t a4, const char *a5)
{
  _DWORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;

  v7 = *a2;
  if (!*a2)
  {
    v8 = *((_DWORD *)this + 3);
    if (!v8)
    {
      v9 = *((_DWORD *)this + 2);
      goto LABEL_7;
    }
LABEL_8:
    kaldi::KaldiAssertFailure_((kaldi *)"SetVecTable", "../engine/common/libquasar/libkaldi/src/nnet/nnet-compressed-word-trans-component.h", (const char *)0x5D, "src.NumCols() == output_dim_", a5);
  }
  if (v7[3] != *((_DWORD *)this + 3))
    goto LABEL_8;
  v8 = v7[2];
  v9 = *((_DWORD *)this + 2);
  if (v8 % v9)
    kaldi::KaldiAssertFailure_((kaldi *)"SetVecTable", "../engine/common/libquasar/libkaldi/src/nnet/nnet-compressed-word-trans-component.h", (const char *)0x5E, "src.NumRows() % input_dim_ == 0", a5);
LABEL_7:
  *((_DWORD *)this + 24) = v8 / v9;
  kaldi::nnet1::CompressedWordTransComponent::InitIndexOffsets(this, (uint64_t)a2, a3, a4, a5);
  return kaldi::CompressedMatrix::operator=((uint64_t)this + 80, a2, v10, v11, v12);
}

float kaldi::nnet1::CompressedWordTransComponent::InitIndexOffsets(kaldi::nnet1::CompressedWordTransComponent *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float result;

  v5 = *((unsigned int *)this + 2);
  if ((int)v5 >= 1)
  {
    v6 = 0;
    v7 = *((unsigned int *)this + 16);
    do
    {
      if (v7 == v6)
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x106, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
      result = (float)(*((_DWORD *)this + 24) * v6);
      *(float *)(*((_QWORD *)this + 7) + 4 * v6++) = result;
    }
    while (v5 != v6);
  }
  return result;
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_1DE4519E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

void kaldi::nnet1::Component::GetComponentTypeMap(void)::$_0::operator()()
{
  uint64_t v0;
  void *__p[2];
  char v2;
  void **v3;

  v0 = operator new();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)v0 = v0 + 8;
  kaldi::nnet1::Component::GetComponentTypeMap(void)::init_map_heap = v0;
  std::string::basic_string[abi:ne180100]<0>(__p, "<AffineTransform>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 257;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<LinearTransform>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 258;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Quantized8BitLinearTransform>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 259;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Quantized16BitLinearTransform>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 260;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<SharedNceComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 284;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<ConvolutionalComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 261;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<ConvolutionalMaxPoolingComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 262;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Quantized8BitConvolutionalMaxPoolingComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 263;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Quantized16BitConvolutionalMaxPoolingComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 264;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Convolutional2DComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 265;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Quantized8BitConvolutional2DComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 266;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Quantized16BitConvolutional2DComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 267;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<LstmComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 274;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Quantized8BitLstmComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 275;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Quantized16BitLstmComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 276;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<GatedRecurrentUnit>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 277;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<SimplerSimpleRecurrentUnit>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 278;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Recurrent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 273;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<BidirectionalRecurrentComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 280;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<WordVecComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 268;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<FofeWordVecComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 269;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<WordMultiVecComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 270;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<CompressedWordMultiVecComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 272;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<CompressedWordVecComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 271;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<FixedAttentionComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 279;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<MovingAttentionComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 281;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<GlobalAttentionComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 282;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<GlobalRecurrentAttention>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 283;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<ScaledDotAttention>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 285;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<MultiHeadAttention>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 286;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<SupervisedMultiHeadAttention>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 287;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<SelfAttention>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 288;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<AverageAttention>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 289;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<LayerNorm>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 290;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Softmax>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 513;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<LogSoftmax>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 514;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<BlockSoftmax>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 515;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<MultiSoftmax>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 522;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<RelaxedSoftmax>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 523;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Sigmoid>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 516;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Tanh>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 517;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Dropout>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 518;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Maxout>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 519;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Rectified>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 520;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<ExponentialLinear>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 524;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<ScaledExponentialLinear>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 525;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<PNorm>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 521;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Rbm>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1025;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Splice>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1026;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Desplice>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1027;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Copy>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1028;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<CnnRearrangeComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1036;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<PaddingComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1037;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Padding2DComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1038;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<AddShift>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1031;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Rescale>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1032;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<QuantizedAffineTransform>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1033;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Quantized16BitAffineTransform>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1035;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<NormalizeComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1034;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<KlHmm>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2048;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<AveragePoolingComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2050;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<AveragePooling2DComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2051;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<MaxPoolingComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2052;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<MaxPooling2DComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2053;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<SentenceAveragingComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2049;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<FramePoolingComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2054;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<ParallelComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2055;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Duplicate>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2056;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<Identity>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2057;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<TemporalMaxPooling>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2058;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<InterpolationComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1039;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<CompressedWordTransComponent>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1040;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<VectorwiseQuantized8BitAffineTransform>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1041;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "<VectorwiseQuantized16BitAffineTransform>");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1042;
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_1DE453168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_DWORD *)v7 + 14) = 0;
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t *std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<kaldi::nnet1::Component::GetGradientNormTypeMap(void)::$_0 &&>>()
{
  uint64_t v0;
  void *__p[2];
  char v2;
  void **v3;

  v0 = operator new();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)v0 = v0 + 8;
  kaldi::nnet1::Component::GetGradientNormTypeMap(void)::init_map_heap = v0;
  std::string::basic_string[abi:ne180100]<0>(__p, "NoGradNorm");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 0;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ClipValue");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ClipL2Norm");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Rmsprop");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 3;
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_1DE4537B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<kaldi::nnet1::Component::GetMatrixInitTypeMap(void)::$_0 &&>>()
{
  uint64_t v0;
  void *__p[2];
  char v2;
  void **v3;

  v0 = operator new();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)v0 = v0 + 8;
  kaldi::nnet1::Component::GetMatrixInitTypeMap(void)::init_map_heap = v0;
  std::string::basic_string[abi:ne180100]<0>(__p, "Identity");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 0;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Uniform");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 1;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Gauss");
  v3 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3)+ 14) = 2;
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_1DE45390C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<signed char>::QuantizedAffineTransform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  const char *v6;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1EA92B568;
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a1 + 48, a3, a2);
  *(_QWORD *)(a1 + 96) = &unk_1EA92DFD8;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  kaldi::CuVector<float>::Resize(a1 + 96, a3, 0, v5, v6);
  return a1;
}

void sub_1DE453A44(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;

  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v2);
  *v1 = off_1EA92D6D8;
  v4 = (void *)v1[3];
  if (v4)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<short>::QuantizedAffineTransform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  const char *v6;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1EA92B628;
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(a1 + 48, a3, a2);
  *(_QWORD *)(a1 + 96) = &unk_1EA92DFD8;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  kaldi::CuVector<float>::Resize(a1 + 96, a3, 0, v5, v6);
  return a1;
}

void sub_1DE453B04(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;

  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v2);
  *v1 = off_1EA92D6D8;
  v4 = (void *)v1[3];
  if (v4)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::VectorwiseQuantizedAffineTransform(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  const char *v6;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1EA92CBF8;
  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(a1 + 48, a3, a2);
  *(_QWORD *)(a1 + 88) = &unk_1EA92DFD8;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  kaldi::CuVector<float>::Resize(a1 + 88, a3, 0, v5, v6);
  return a1;
}

void sub_1DE453BC4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;

  kaldi::VectorwiseQuantizedMatrix<signed char>::~VectorwiseQuantizedMatrix(v2);
  *v1 = off_1EA92D6D8;
  v4 = (void *)v1[3];
  if (v4)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::VectorwiseQuantizedAffineTransform(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  const char *v6;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1EA92CCB8;
  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(a1 + 48, a3, a2);
  *(_QWORD *)(a1 + 88) = &unk_1EA92DFD8;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  kaldi::CuVector<float>::Resize(a1 + 88, a3, 0, v5, v6);
  return a1;
}

void sub_1DE453C84(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;

  kaldi::VectorwiseQuantizedMatrix<short>::~VectorwiseQuantizedMatrix(v2);
  *v1 = off_1EA92D6D8;
  v4 = (void *)v1[3];
  if (v4)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::~VectorwiseQuantizedAffineTransform(_QWORD *a1)
{
  kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::~VectorwiseQuantizedAffineTransform(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::VectorwiseQuantizedAffineTransform(v2, a1);
  return v2;
}

void sub_1DE453D28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10D1C40EF2100C4);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::GetType()
{
  return 1042;
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::WriteData(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  const char *v7;

  kaldi::VectorwiseQuantizedMatrix<short>::Write((unsigned int *)(a1 + 48), a2, a3);
  kaldi::CuVectorBase<float>::Write((_DWORD *)(a1 + 88), a2, a3, v6, v7);
}

uint64_t *kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;

  kaldi::CuMatrixBase<float>::AddMatMat<short>(a3, a2, 111, (_DWORD *)(a1 + 48), (const char *)0x70, 1.0, 0.0);
  return kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 88, v5, v6, v7, 1.0, 1.0);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v9;
  const char *v10;
  _BYTE v11[16];

  if (*(_DWORD *)(a1 + 104) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x10E, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
  kaldi::CuVectorBase<float>::Set(a4, *(float *)(*(_QWORD *)(a1 + 96) + 4 * a3));
  kaldi::VectorwiseQuantizedMatrix<short>::Row(a1 + 48, a3, (uint64_t)v11);
  kaldi::QuantizedVectorBase<short>::AddMatVec((uint64_t)v11, a2 + 8, a4 + 8, 1.0, v9, v10);
}

float kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  float v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  _BYTE v11[16];

  if (*(_DWORD *)(a1 + 104) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x10E, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
  v6 = *(float *)(*(_QWORD *)(a1 + 96) + 4 * a3);
  kaldi::VectorwiseQuantizedMatrix<short>::Row(a1 + 48, a3, (uint64_t)v11);
  return v6 + kaldi::VecVec<float,short>(a2, (uint64_t)v11, v7, v8, v9);
}

double kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::ReadData(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;
  const char *v9;
  double result;

  kaldi::VectorwiseQuantizedMatrix<short>::Read(a1 + 12, a2, a3, a4);
  result = kaldi::CuVector<float>::Read((uint64_t)(a1 + 22), a2, a3, v7, v8);
  if (a1[26] != a1[3])
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../engine/common/libquasar/libkaldi/src/nnet/nnet-vectorwise-quantized-affine-transform.h", (const char *)0x2F, "bias_.Dim() == output_dim_", v9);
  return result;
}

_QWORD *kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::~VectorwiseQuantizedAffineTransform(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = &unk_1EA92CCB8;
  a1[11] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)(a1 + 11));
  v2 = a1[9];
  a1[9] = 0;
  if (v2)
    MEMORY[0x1DF0ED014](v2, 0x1000C40BDFB0063);
  v3 = a1[7];
  a1[7] = 0;
  if (v3)
    MEMORY[0x1DF0ED014](v3, 0x1000C4052888210);
  *a1 = off_1EA92D6D8;
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::VectorwiseQuantizedAffineTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  *(_QWORD *)a1 = off_1EA92D6D8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = &unk_1EA92CCB8;
  kaldi::VectorwiseQuantizedMatrix<short>::VectorwiseQuantizedMatrix(a1 + 48, a2 + 48);
  *(_QWORD *)(a1 + 88) = &unk_1EA92DFD8;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  kaldi::CuVector<float>::Resize(a1 + 88, *(unsigned int *)(a2 + 104), 1u, v5, v6);
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)(a1 + 88), a2 + 88, v7, v8, v9);
  return a1;
}

void sub_1DE4540DC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;

  *v1 = v2;
  v4 = (void *)v1[3];
  if (v4)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::FramePoolingComponent::InitData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  void *v5;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v4;
    operator delete(v4);
  }
  v5 = *(void **)a3;
  if (*(_QWORD *)a3)
  {
    *(_QWORD *)(a3 + 8) = v5;
    operator delete(v5);
  }
}

void kaldi::nnet1::CnnRearrangeComponent::CnnRearrangeComponent(_QWORD *a1, _QWORD *a2, _QWORD *a3, void **a4)
{
  void *v7;
  void *v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v7 = (void *)a2[7];
  if (v7)
    free(v7);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a2 = off_1EA92D6D8;
  v8 = *a4;
  if (*a4)
  {
    a2[4] = v8;
    operator delete(v8);
  }
}

void kaldi::nnet1::Nnet::Nnet(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[40];
  if (v2)
    free(v2);
  a1[39] = 0;
  a1[40] = 0;
  a1[41] = 0;
}

double kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::Convolutional2DComponent(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  *(_OWORD *)(a1 + 56) = xmmword_1DEC3D450;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)a1 = &unk_1EA92A640;
  *(_QWORD *)(a1 + 88) = &unk_1EA92A778;
  *(_QWORD *)(a1 + 96) = &unk_1EA92A7A0;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a1 + 136) = _D1;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 329) = 0u;
  return result;
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::Convolutional2DComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;

  *(_QWORD *)a1 = off_1EA92D6D8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1EA929750;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1EA92A778;
  *(_QWORD *)(a1 + 96) = &unk_1EA92A7A0;
  *(_QWORD *)a1 = &unk_1EA92A640;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::AssignMembers<kaldi::CuMatrixBase<float>>(a1, a2, v6, v7, v8);
  return a1;
}

void sub_1DE4543D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(_QWORD *)(v10 + 360) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(_QWORD *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v16 = *(_QWORD *)(v10 + 192);
  *(_QWORD *)(v10 + 192) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  v17 = *(_QWORD *)(v10 + 184);
  *(_QWORD *)(v10 + 184) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v12);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::AssignMembers<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[34];

  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v7 = *(__n128 *)(a2 + 120);
  *(__n128 *)(a1 + 120) = v7;
  v7.n128_u64[0] = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 136) = v7.n128_u64[0];
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  v7.n128_u32[0] = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 148) = v7.n128_u32[0];
  if (a1 == a2)
  {
    *(_BYTE *)(a1 + 344) = 0;
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(_QWORD *)(a2 + 328), (uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 2);
    *(_BYTE *)(a1 + 344) = 0;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(_QWORD *)(a2 + 360), (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2);
  }
  v8 = *(_QWORD *)(a2 + 184);
  if (v8)
  {
    v9 = operator new();
    v7 = kaldi::CuMatrix<float>::CuMatrix(v9, v8, 111);
    v10 = *(_QWORD *)(a1 + 184);
    *(_QWORD *)(a1 + 184) = v9;
    if (!v10)
      goto LABEL_7;
    goto LABEL_6;
  }
  v10 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v10)
LABEL_6:
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v10 + 24))(v10, v7);
LABEL_7:
  if (*(_QWORD *)(a2 + 192))
  {
    v11 = operator new();
    v12 = *(unsigned int *)(*(_QWORD *)(a2 + 192) + 16);
    *(_QWORD *)v11 = &unk_1EA92DFD8;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 24) = 0;
    kaldi::CuVector<float>::Resize(v11, v12, 1u, v13, v14);
    v18 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v11;
    if (v18)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
      v11 = *(_QWORD *)(a1 + 192);
    }
    kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)v11, *(_QWORD *)(a2 + 192), v15, v16, v17);
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = 0;
    if (v19)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v19 + 16))(v19, v7);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::UpdateBNNSFilter(a1, a2, a3, a4, a5);
  if (*(_QWORD *)(a2 + 384) != *(_QWORD *)(a2 + 376))
    kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v20, "AssignMembers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1451);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v20);
  }
}

void sub_1DE454698(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)(a1 + 88) = &unk_1EA92A778;
  v2 = a1 + 88;
  *(_QWORD *)a1 = &unk_1EA92A640;
  *(_QWORD *)(a1 + 96) = &unk_1EA92A7A0;
  v3 = a1 + 96;
  v4 = *(void **)(a1 + 152);
  if (v4)
  {
    BNNSFilterDestroy(v4);
    *(_QWORD *)(a1 + 152) = 0;
  }
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 376));
  v5 = *(void **)(a1 + 352);
  if (v5)
  {
    *(_QWORD *)(a1 + 360) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 320);
  if (v6)
  {
    *(_QWORD *)(a1 + 328) = v6;
    operator delete(v6);
  }
  v9 = (void **)(a1 + 296);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)(a1 + 272);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)(a1 + 224);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)(a1 + 200);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v7 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  v8 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  v9 = (void **)(a1 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(a1);
  JUMPOUT(0x1DF0ED014);
}

void `non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(uint64_t a1)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(a1 - 88);
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(a1 - 96);
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(a1 - 88);
  JUMPOUT(0x1DF0ED014);
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(a1 - 96);
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::Convolutional2DComponent(v2, a1);
  return v2;
}

void sub_1DE4548E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  uint64_t v6;
  const char *v7;
  int *v8;
  int *v9;
  uint64_t v10;
  const char *v11;
  BOOL v12;
  int *v13;
  __int128 *v14;
  uint64_t v15;
  BOOL v19;
  BOOL v20;
  BOOL v22;
  BOOL v23;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  float *v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  int v36;
  int v37;
  BOOL v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  const char *v42;
  BOOL v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  unsigned int v55;
  int v56;
  int v57;
  unint64_t v58;
  float v59;
  float v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  float *v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  unint64_t i;
  float v74;
  float v75;
  float v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  _QWORD *v89;
  __int128 *v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  float *v94;
  uint64_t v95;
  uint64_t v96;
  void **v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  _QWORD v101[2];
  uint64_t v102;
  void *__p;
  void *v104;
  __int128 v105;
  uint64_t v106;
  int v107;
  std::string v108;
  int v109;
  float v110;
  int v111;

  v110 = 2.0;
  v111 = -1073741824;
  v109 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 144), &v108);
  v107 = -1;
  v105 = 0uLL;
  v106 = 0;
  v8 = (int *)(a1 + 116);
  v9 = (int *)(a1 + 112);
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_137;
    kaldi::ReadToken(a2, 0, (uint64_t)&v105, v6, v7);
    if (SHIBYTE(v106) < 0)
    {
      v15 = *((_QWORD *)&v105 + 1);
      if (*((_QWORD *)&v105 + 1) == 10)
      {
        if (*(_QWORD *)v105 == 0x61654D736169423CLL && *(_WORD *)(v105 + 8) == 15982)
        {
LABEL_90:
          v30 = (float *)&v111;
          goto LABEL_128;
        }
        v15 = *((_QWORD *)&v105 + 1);
      }
      else if (*((_QWORD *)&v105 + 1) == 13
             && *(_QWORD *)v105 == 0x74536D617261503CLL
             && *(_QWORD *)(v105 + 5) == 0x3E7665646474536DLL)
      {
LABEL_89:
        v30 = (float *)&v109;
LABEL_128:
        kaldi::ReadBasicType<float>(a2, 0, v30, v10, v11);
        goto LABEL_132;
      }
      if (v15 == 11)
      {
        if (*(_QWORD *)v105 == 0x6E6152736169423CLL && *(_QWORD *)(v105 + 3) == 0x3E65676E61527361)
        {
LABEL_91:
          v30 = &v110;
          goto LABEL_128;
        }
        v15 = *((_QWORD *)&v105 + 1);
      }
      if (v15 != 10)
        goto LABEL_102;
      v19 = *(_QWORD *)v105 == 0x654C5870616D463CLL && *(_WORD *)(v105 + 8) == 15982;
      v13 = (int *)(a1 + 104);
      if (v19)
        goto LABEL_131;
      v15 = *((_QWORD *)&v105 + 1);
      if (*((_QWORD *)&v105 + 1) != 10)
        goto LABEL_102;
      v20 = *(_QWORD *)v105 == 0x654C5970616D463CLL && *(_WORD *)(v105 + 8) == 15982;
      v13 = (int *)(a1 + 108);
      if (v20)
        goto LABEL_131;
      if (v106 < 0)
      {
        v31 = *(_QWORD *)v105 == 0x654C58746C69463CLL && *(_WORD *)(v105 + 8) == 15982;
        v13 = (int *)(a1 + 112);
        if (v31)
          goto LABEL_131;
        v15 = *((_QWORD *)&v105 + 1);
        v32 = *(_QWORD *)v105 == 0x654C59746C69463CLL && *(_WORD *)(v105 + 8) == 15982;
        v13 = (int *)(a1 + 116);
        if (v32)
          goto LABEL_131;
        if (v106 < 0)
        {
LABEL_102:
          if (v15 == 11)
          {
            v33 = *(_QWORD *)v105 == 0x745358746C69463CLL && *(_QWORD *)(v105 + 3) == 0x3E7065745358746CLL;
            v13 = (int *)(a1 + 120);
            if (v33)
              goto LABEL_131;
            v15 = *((_QWORD *)&v105 + 1);
            if (*((_QWORD *)&v105 + 1) == 11)
            {
              v34 = *(_QWORD *)v105 == 0x745359746C69463CLL && *(_QWORD *)(v105 + 3) == 0x3E7065745359746CLL;
              v13 = (int *)(a1 + 124);
              if (v34)
                goto LABEL_131;
              if ((v106 & 0x8000000000000000) == 0)
                goto LABEL_113;
            }
          }
          if (v15 != 6)
            goto LABEL_126;
          v35 = *(_DWORD *)v105 == 1684099132 && *(_WORD *)(v105 + 4) == 15960;
          v13 = (int *)(a1 + 128);
          if (v35)
            goto LABEL_131;
LABEL_120:
          if (*((_QWORD *)&v105 + 1) != 6)
            goto LABEL_126;
          v14 = (__int128 *)v105;
        }
        else
        {
LABEL_113:
          if (HIBYTE(v106) != 6)
            goto LABEL_126;
LABEL_5:
          v12 = (_DWORD)v105 == 1684099132 && WORD2(v105) == 15960;
          v13 = (int *)(a1 + 128);
          if (v12)
            goto LABEL_131;
          if (v106 < 0)
            goto LABEL_120;
          if (HIBYTE(v106) != 6)
            goto LABEL_126;
          v14 = &v105;
        }
        v36 = *(_DWORD *)v14;
        v37 = *((unsigned __int16 *)v14 + 2);
        v38 = v36 == 1684099132 && v37 == 15961;
        v13 = (int *)(a1 + 132);
        if (v38)
          goto LABEL_131;
        goto LABEL_126;
      }
      if (HIBYTE(v106) == 6)
        goto LABEL_5;
      if (HIBYTE(v106) != 10)
        goto LABEL_126;
    }
    else
    {
      switch(HIBYTE(v106))
      {
        case 6:
          goto LABEL_5;
        case 0xA:
          if ((_QWORD)v105 == 0x61654D736169423CLL && WORD4(v105) == 15982)
            goto LABEL_90;
          if (HIBYTE(v106) != 6)
            goto LABEL_65;
          goto LABEL_5;
        case 0xB:
          if ((_QWORD)v105 == 0x6E6152736169423CLL && *(_QWORD *)((char *)&v105 + 3) == 0x3E65676E61527361)
            goto LABEL_91;
          if (HIBYTE(v106) == 6)
            goto LABEL_5;
          if (HIBYTE(v106) == 11)
          {
            v22 = (_QWORD)v105 == 0x745358746C69463CLL && *(_QWORD *)((char *)&v105 + 3) == 0x3E7065745358746CLL;
            v13 = (int *)(a1 + 120);
            if (v22)
              goto LABEL_131;
            v23 = (_QWORD)v105 == 0x745359746C69463CLL && *(_QWORD *)((char *)&v105 + 3) == 0x3E7065745359746CLL;
            v13 = (int *)(a1 + 124);
            if (v23)
              goto LABEL_131;
            goto LABEL_126;
          }
LABEL_65:
          if (HIBYTE(v106) != 10)
            goto LABEL_126;
          v25 = (_QWORD)v105 == 0x654C5870616D463CLL && WORD4(v105) == 15982;
          v13 = (int *)(a1 + 104);
          if (v25)
            goto LABEL_131;
          v26 = (_QWORD)v105 == 0x654C5970616D463CLL && WORD4(v105) == 15982;
          v13 = (int *)(a1 + 108);
          if (v26)
            goto LABEL_131;
          break;
        case 0xD:
          if ((_QWORD)v105 != 0x74536D617261503CLL || *(_QWORD *)((char *)&v105 + 5) != 0x3E7665646474536DLL)
            goto LABEL_126;
          goto LABEL_89;
        default:
          goto LABEL_126;
      }
    }
    v27 = (_QWORD)v105 == 0x654C58746C69463CLL && WORD4(v105) == 15982;
    v13 = (int *)(a1 + 112);
    if (v27)
      goto LABEL_131;
    v28 = (_QWORD)v105 == 0x654C59746C69463CLL && WORD4(v105) == 15982;
    v13 = (int *)(a1 + 116);
    if (v28)
      goto LABEL_131;
LABEL_126:
    v39 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v105, "<LearnRateCoef>");
    v30 = (float *)(a1 + 136);
    if (v39)
      goto LABEL_128;
    v40 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v105, "<BiasLearnRateCoef>");
    v30 = (float *)(a1 + 140);
    if (v40)
      goto LABEL_128;
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v105, "<RandomSeed>"))
    {
      v13 = &v107;
LABEL_131:
      kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v13, v10, v11);
      goto LABEL_132;
    }
    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v105, "<GradientNormType>"))
      break;
    kaldi::ReadToken(a2, 0, (uint64_t)&v108, v41, v42);
LABEL_132:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v43 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v105, "<MaxGrad>");
  v30 = (float *)(a1 + 148);
  if (v43)
    goto LABEL_128;
  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v105, "</Component>"))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v101, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 318);
    v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"Unknown token ", 14);
    if (v106 >= 0)
      v90 = &v105;
    else
      v90 = (__int128 *)v105;
    if (v106 >= 0)
      v91 = HIBYTE(v106);
    else
      v91 = *((_QWORD *)&v105 + 1);
    v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)v90, v91);
    v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)" (ParamStddev|BiasMean|BiasRange|FmapXLen|FmapYLen|FiltXLen|FiltYLen|FiltXStep|FiltYStep|ConnectFmap|LearnRateCoef|BiasLearnRateCoef|RandomSeed|GradientNormType|MaxGrad)", 169);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v101);
  }
LABEL_137:
  *(_DWORD *)(a1 + 144) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v108);
  v44 = *(_DWORD *)(a1 + 8);
  v46 = *(_DWORD *)(a1 + 104);
  v45 = *(_DWORD *)(a1 + 108);
  v47 = v44 / (v45 * v46);
  if (v44 % (v45 * v46))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v101, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 330);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0", 45);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v101);
  }
  v48 = (v46 + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120) + 1;
  v49 = *(_DWORD *)(a1 + 12);
  v50 = v48 + v48 * ((v45 + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124));
  v51 = (v49 / v50);
  if (v49 % v50)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v101, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 336);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0", 52);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v101);
  }
  if (v107 >= 1)
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v107);
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v101, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)&v97, v51, (*v9 * v47 * *v8), 0, 0);
  if ((int)v51 >= 1)
  {
    v55 = 0;
    v56 = *v9;
    v57 = *v8;
    do
    {
      if (v56 * v47 * v57 >= 1)
      {
        v58 = 0;
        do
        {
          v59 = *(float *)&v109;
          kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v101, 0, v52, v53, v54);
          if (v99 <= v55 || v58 >= v98)
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v54);
          *((float *)v97 + (int)(v55 * v100) + v58++) = v59 * v60;
          v56 = *v9;
          v57 = *v8;
        }
        while ((uint64_t)v58 < *v9 * v47 * *v8);
      }
      ++v55;
    }
    while (v55 != (_DWORD)v51);
  }
  v62 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v97);
  v63 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v97);
  kaldi::nnet1::NewMatrix<kaldi::CuMatrixBase<float>>(v62, v63, (uint64_t *)&v94);
  v66 = v94;
  v67 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v94;
  if (v67)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 24))(v67);
    v66 = *(float **)(a1 + 184);
  }
  kaldi::CuMatrixBase<float>::CopyFromMat((uint64_t)v66, (uint64_t)&v97, 111, v64, v65);
  v94 = 0;
  v95 = 0;
  v96 = 0;
  kaldi::Vector<float>::Resize((void **)&v94, v51, 0, v68, v69);
  if ((int)v51 >= 1)
  {
    for (i = 0; i != v51; ++i)
    {
      v74 = *(float *)&v111;
      v75 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v70, v71, v72);
      if (i >= v95)
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v72);
      v76 = v74 + (v75 + -0.5) * v110;
      v94[i] = v76;
    }
  }
  v77 = operator new();
  v78 = v95;
  *(_QWORD *)(v77 + 16) = 0;
  *(_QWORD *)(v77 + 24) = 0;
  *(_QWORD *)v77 = &unk_1EA92DFD8;
  *(_QWORD *)(v77 + 8) = 0;
  kaldi::CuVector<float>::Resize(v77, v78, 1u, v79, v80);
  v84 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v77;
  if (v84)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v84 + 16))(v84);
    v77 = *(_QWORD *)(a1 + 192);
  }
  kaldi::CuVectorBase<float>::CopyFromVec<float>((_DWORD *)v77, (uint64_t)&v94, v81, v82, v83);
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::UpdateBNNSFilter(a1, v85, v86, v87, v88);
  kaldi::Vector<float>::Destroy((uint64_t)&v94);
  kaldi::Matrix<float>::~Matrix((uint64_t)&v97);
  if (__p)
  {
    v104 = __p;
    operator delete(__p);
  }
  v97 = (void **)&v102;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v97);
  if (SHIBYTE(v106) < 0)
    operator delete((void *)v105);
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v108.__r_.__value_.__l.__data_);
}

void sub_1DE455468()
{
  JUMPOUT(0x1DE45548CLL);
}

void sub_1DE455474(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  kaldi::Matrix<float>::~Matrix(&v3);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)&v4);
  if (*(char *)(v1 - 153) < 0)
    operator delete(*(void **)(v1 - 176));
  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::NewMatrix<kaldi::CuMatrixBase<float>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = kaldi::CuMatrix<float>::CuMatrix(v6, a1, a2, 1u, 0, (const char *)1);
  *a3 = v6;
  return result;
}

void sub_1DE455518(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::UpdateBNNSFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  void *v6;
  size_t v7;
  size_t v8;
  int v9;
  size_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *result;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  int v28;
  unsigned int v29[10];
  BNNSFilterParameters v30;
  BNNSFilterParameters filter_params;
  BNNSConvolutionLayerParameters layer_params;
  BNNSImageStackDescriptor out_desc;
  BNNSImageStackDescriptor in_desc;

  v6 = *(void **)(a1 + 152);
  if (v6)
  {
    BNNSFilterDestroy(v6);
    *(_QWORD *)(a1 + 152) = 0;
  }
  v7 = *(int *)(a1 + 104);
  v8 = *(int *)(a1 + 108);
  v9 = *(_DWORD *)(a1 + 8) / ((int)v8 * (int)v7);
  v10 = *(int *)(a1 + 128);
  v11 = *(int *)(a1 + 132);
  v13 = *(int *)(a1 + 112);
  v12 = *(int *)(a1 + 116);
  v14 = *(int *)(a1 + 120);
  v15 = *(int *)(a1 + 124);
  v16 = ((int)v7 + 2 * (int)v10 - (int)v13) / (int)v14 + 1;
  v17 = ((int)v8 + 2 * (int)v11 - (int)v12) / (int)v15 + 1;
  v18 = *(_DWORD *)(a1 + 12) / (v17 * v16);
  in_desc.width = v7;
  in_desc.height = v8;
  in_desc.channels = v9;
  in_desc.row_stride = v7;
  in_desc.image_stride = (int)v8 * (int)v7;
  in_desc.data_type = BNNSDataTypeFloat32;
  *(_QWORD *)&in_desc.data_scale = 1065353216;
  out_desc.width = v16;
  out_desc.height = v17;
  out_desc.channels = v18;
  out_desc.row_stride = v16;
  out_desc.image_stride = v17 * v16;
  out_desc.data_type = BNNSDataTypeFloat32;
  *(_QWORD *)&out_desc.data_scale = 1065353216;
  memset(&layer_params.weights.data_bias, 0, 96);
  layer_params.x_stride = v14;
  layer_params.y_stride = v15;
  layer_params.x_padding = v10;
  layer_params.y_padding = v11;
  layer_params.k_width = v13;
  layer_params.k_height = v12;
  layer_params.in_channels = v9;
  layer_params.out_channels = v18;
  *(_QWORD *)&layer_params.weights.data_type = 0x3F80000000010020;
  v19 = *(_QWORD *)(a1 + 184);
  v20 = *(_QWORD *)(a1 + 192);
  layer_params.weights.data = *(const void **)(v19 + 8);
  layer_params.weights.data_table = 0;
  layer_params.bias.data_type = BNNSDataTypeFloat32;
  layer_params.bias.data = *(const void **)(v20 + 8);
  layer_params.bias.data_scale = 1.0;
  layer_params.bias.data_table = 0;
  v22 = *(unsigned int *)(v19 + 16);
  v21 = *(unsigned int *)(v19 + 20);
  if ((int)v13 * (uint64_t)v9 * v12 * v18 != (_DWORD)v21 * (_DWORD)v22)
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateBNNSFilter", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)0x43F, "filters_->NumCols() * filters_->NumRows() == (bp.k_width * bp.k_height * bp.in_channels * bp.out_channels)", a5);
  if ((_DWORD)v22 == *(_DWORD *)(v19 + 24))
  {
    filter_params = *(BNNSFilterParameters *)ymmword_1DEC3DFA8;
    result = BNNSFilterCreateConvolutionLayer(&in_desc, &out_desc, &layer_params, &filter_params);
    *(_QWORD *)(a1 + 152) = result;
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params, "UpdateBNNSFilter", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1090);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&filter_params, (uint64_t)"Unsupported BNNS filter weight arrangement", 42);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params);
      v25 = *(_QWORD *)(a1 + 184);
      v22 = *(unsigned int *)(v25 + 16);
      v21 = *(unsigned int *)(v25 + 20);
    }
    memset(&v30, 0, sizeof(v30));
    kaldi::Matrix<float>::Matrix((uint64_t)v29, v21, v22, 1, (const char *)1);
    kaldi::CuMatrixBase<float>::CopyToMat<float>(*(_QWORD *)(a1 + 184), v29, 111, v26, v27);
    v28 = kaldi::MatrixBase<float>::NumCols((uint64_t)v29);
    if (v28 != kaldi::MatrixBase<float>::Stride((uint64_t)v29)
      && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params, "UpdateBNNSFilter", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1096);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&filter_params, (uint64_t)"It did not work", 15);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params);
    }
    layer_params.weights.data = *(const void **)v29;
    *(_QWORD *)(a1 + 152) = BNNSFilterCreateConvolutionLayer(&in_desc, &out_desc, &layer_params, &v30);
    kaldi::Matrix<float>::~Matrix((uint64_t)v29);
    result = *(void **)(a1 + 152);
  }
  if (!result)
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateBNNSFilter", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)0x458, "bnns_filter_", v24);
  return result;
}

void sub_1DE455800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va1);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  void **v11;
  BOOL v12;
  float *v13;
  void *v14;
  BOOL v15;
  BOOL v17;
  BOOL v20;
  BOOL v21;
  uint64_t v22;
  BOOL v23;
  BOOL v25;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  int v39;
  int v40;
  BOOL v41;
  _BOOL4 v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  void (***v54)(void *, uint64_t *, uint64_t, uint64_t);
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  _QWORD *v66;
  void **v67;
  uint64_t v68;
  void *__p[2];
  uint64_t v71;
  void *v72[4];

  while (kaldi::Peek(a2, a3) == 60)
  {
    memset(v72, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v72, v7, v8);
    if ((SHIBYTE(v72[2]) & 0x80000000) == 0)
    {
      v11 = v72;
      switch(HIBYTE(v72[2]))
      {
        case 6:
          goto LABEL_133;
        case 9:
LABEL_4:
          v12 = v72[0] == (void *)0x6461724778614D3CLL && LOBYTE(v72[1]) == 62;
          v13 = (float *)(a1 + 148);
          if (!v12)
            goto LABEL_8;
          goto LABEL_109;
        case 0xA:
LABEL_69:
          v28 = v72[0] == (void *)0x654C5870616D463CLL && LOWORD(v72[1]) == 15982;
          v22 = a1 + 104;
          if (v28)
            goto LABEL_138;
          if (HIBYTE(v72[2]) == 6)
            goto LABEL_101;
          if (HIBYTE(v72[2]) != 10)
            goto LABEL_137;
          v29 = v72[0] == (void *)0x654C5970616D463CLL && LOWORD(v72[1]) == 15982;
          v22 = a1 + 108;
          if (!v29)
            goto LABEL_79;
          goto LABEL_138;
        case 0xB:
LABEL_89:
          v32 = v72[0] == (void *)0x745358746C69463CLL && *(void **)((char *)v72 + 3) == (void *)0x3E7065745358746CLL;
          v22 = a1 + 120;
          if (v32)
            goto LABEL_138;
          if (HIBYTE(v72[2]) == 6)
            goto LABEL_101;
          if (HIBYTE(v72[2]) != 11)
            goto LABEL_137;
          v33 = v72[0] == (void *)0x745359746C69463CLL && *(void **)((char *)v72 + 3) == (void *)0x3E7065745359746CLL;
          v22 = a1 + 124;
          if (!v33)
            goto LABEL_137;
          goto LABEL_138;
        case 0xF:
          v34 = v72[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v72 + 7) == (void *)0x3E66656F43657461;
          v13 = (float *)(a1 + 136);
          if (!v34)
            goto LABEL_137;
          goto LABEL_109;
        case 0x12:
LABEL_61:
          if (v72[0] != (void *)0x6E6569646172473CLL
            || v72[1] != (void *)0x7079546D726F4E74
            || LOWORD(v72[2]) != 15973)
          {
            v11 = v72;
            switch(HIBYTE(v72[2]))
            {
              case 6:
                goto LABEL_133;
              case 9:
                goto LABEL_4;
              case 0xA:
                goto LABEL_69;
              case 0xB:
                goto LABEL_89;
              default:
                goto LABEL_137;
            }
          }
          goto LABEL_102;
        case 0x13:
          v25 = v72[0] == (void *)0x61654C736169423CLL
             && v72[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v72[1] + 3) == (void *)0x3E66656F43657461;
          v13 = (float *)(a1 + 140);
          if (!v25)
          {
            switch(HIBYTE(v72[2]))
            {
              case 9:
                goto LABEL_4;
              case 0xA:
                goto LABEL_69;
              case 0xB:
                goto LABEL_89;
              case 0xC:
              case 0xD:
              case 0xE:
              case 0xF:
              case 0x10:
              case 0x11:
                goto LABEL_137;
              case 0x12:
                goto LABEL_61;
              default:
                goto LABEL_8;
            }
          }
          goto LABEL_109;
        default:
          goto LABEL_137;
      }
    }
    v14 = v72[1];
    if (v72[1] == (void *)15)
    {
      v15 = *(_QWORD *)v72[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v72[0] + 7) == 0x3E66656F43657461;
      v13 = (float *)(a1 + 136);
      if (v15)
        goto LABEL_109;
    }
    if (v72[1] == (void *)19)
    {
      v17 = *(_QWORD *)v72[0] == 0x61654C736169423CLL
         && *((_QWORD *)v72[0] + 1) == 0x6F43657461526E72
         && *(_QWORD *)((char *)v72[0] + 11) == 0x3E66656F43657461;
      v13 = (float *)(a1 + 140);
      if (v17)
        goto LABEL_109;
      v14 = v72[1];
    }
    if (v14 == (void *)18)
    {
      if (*(_QWORD *)v72[0] == 0x6E6569646172473CLL
        && *((_QWORD *)v72[0] + 1) == 0x7079546D726F4E74
        && *((_WORD *)v72[0] + 8) == 15973)
      {
LABEL_102:
        __p[0] = 0;
        __p[1] = 0;
        v71 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p, v9, v10);
        *(_DWORD *)(a1 + 144) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v71) < 0)
          operator delete(__p[0]);
        goto LABEL_139;
      }
      v14 = v72[1];
    }
    if (v14 != (void *)9)
      goto LABEL_39;
    v20 = *(_QWORD *)v72[0] == 0x6461724778614D3CLL && *((_BYTE *)v72[0] + 8) == 62;
    v13 = (float *)(a1 + 148);
    if (!v20)
    {
      v14 = v72[1];
LABEL_39:
      if (v14 == (void *)10)
      {
        v21 = *(_QWORD *)v72[0] == 0x654C5870616D463CLL && *((_WORD *)v72[0] + 4) == 15982;
        v22 = a1 + 104;
        if (v21)
          goto LABEL_138;
        v14 = v72[1];
        if (v72[1] == (void *)10)
        {
          v23 = *(_QWORD *)v72[0] == 0x654C5970616D463CLL && *((_WORD *)v72[0] + 4) == 15982;
          v22 = a1 + 108;
          if (v23)
            goto LABEL_138;
          if ((HIBYTE(v72[2]) & 0x80) == 0)
          {
            if (HIBYTE(v72[2]) != 6)
            {
              if (HIBYTE(v72[2]) != 10)
                goto LABEL_137;
LABEL_79:
              v30 = v72[0] == (void *)0x654C58746C69463CLL && LOWORD(v72[1]) == 15982;
              v22 = a1 + 112;
              if (!v30)
              {
                v31 = v72[0] == (void *)0x654C59746C69463CLL && LOWORD(v72[1]) == 15982;
                v22 = a1 + 116;
                if (!v31)
                  goto LABEL_137;
              }
LABEL_138:
              kaldi::ReadBasicType<int>(a2, a3, v22, v9, v10);
              goto LABEL_139;
            }
LABEL_101:
            v11 = v72;
LABEL_133:
            v39 = *(_DWORD *)v11;
            v40 = *((unsigned __int16 *)v11 + 2);
            v41 = v39 == 1684099132 && v40 == 15960;
            v22 = a1 + 128;
            if (!v41)
              goto LABEL_137;
            goto LABEL_138;
          }
          v35 = *(_QWORD *)v72[0] == 0x654C58746C69463CLL && *((_WORD *)v72[0] + 4) == 15982;
          v22 = a1 + 112;
          if (v35)
            goto LABEL_138;
          v14 = v72[1];
          v36 = *(_QWORD *)v72[0] == 0x654C59746C69463CLL && *((_WORD *)v72[0] + 4) == 15982;
          v22 = a1 + 116;
          if (v36)
            goto LABEL_138;
          if ((HIBYTE(v72[2]) & 0x80) == 0)
            goto LABEL_8;
        }
      }
      if (v14 != (void *)11)
        goto LABEL_131;
      v37 = *(_QWORD *)v72[0] == 0x745358746C69463CLL && *(_QWORD *)((char *)v72[0] + 3) == 0x3E7065745358746CLL;
      v22 = a1 + 120;
      if (v37)
        goto LABEL_138;
      v14 = v72[1];
      if (v72[1] != (void *)11)
        goto LABEL_131;
      v38 = *(_QWORD *)v72[0] == 0x745359746C69463CLL && *(_QWORD *)((char *)v72[0] + 3) == 0x3E7065745359746CLL;
      v22 = a1 + 124;
      if (v38)
        goto LABEL_138;
      if ((HIBYTE(v72[2]) & 0x80) == 0)
      {
LABEL_8:
        if (HIBYTE(v72[2]) == 6)
          goto LABEL_101;
      }
      else
      {
LABEL_131:
        if (v14 == (void *)6)
        {
          v11 = (void **)v72[0];
          goto LABEL_133;
        }
      }
LABEL_137:
      v42 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v72, "<PadY>");
      v22 = a1 + 132;
      if (!v42)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 401);
        v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
        if (SHIBYTE(v72[2]) >= 0)
          v67 = v72;
        else
          v67 = (void **)v72[0];
        if (SHIBYTE(v72[2]) >= 0)
          v68 = HIBYTE(v72[2]);
        else
          v68 = (uint64_t)v72[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, v68);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      goto LABEL_138;
    }
LABEL_109:
    kaldi::ReadBasicType<float>(a2, a3, v13, v9, v10);
LABEL_139:
    if (SHIBYTE(v72[2]) < 0)
      operator delete(v72[0]);
  }
  v43 = *(_DWORD *)(a1 + 8);
  v45 = *(_DWORD *)(a1 + 104);
  v44 = *(_DWORD *)(a1 + 108);
  v46 = v43 / (v44 * v45);
  if (v43 % (v44 * v45))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 415);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0");
    goto LABEL_154;
  }
  v47 = v45 + 2 * *(_DWORD *)(a1 + 128);
  v48 = *(_DWORD *)(a1 + 112);
  v49 = *(_DWORD *)(a1 + 116);
  v50 = (v47 - v48) / *(_DWORD *)(a1 + 120) + 1;
  v51 = *(_DWORD *)(a1 + 12);
  v52 = v50 + v50 * ((v44 + 2 * *(_DWORD *)(a1 + 132) - v49) / *(_DWORD *)(a1 + 124));
  v53 = (v51 / v52);
  if (v51 % v52)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 417);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0");
LABEL_154:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  kaldi::nnet1::NewMatrix<kaldi::CuMatrixBase<float>>(v53, (v48 * v46 * v49), (uint64_t *)__p);
  v54 = (void (***)(void *, uint64_t *, uint64_t, uint64_t))__p[0];
  v55 = *(_QWORD *)(a1 + 184);
  *(void **)(a1 + 184) = __p[0];
  if (v55)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 24))(v55);
    v54 = *(void (****)(void *, uint64_t *, uint64_t, uint64_t))(a1 + 184);
  }
  (**v54)(v54, a2, a3, a4);
  v56 = (_QWORD *)operator new();
  v56[2] = 0;
  v56[3] = 0;
  *v56 = &unk_1EA92DFD8;
  v56[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v56, v53, 1u, v57, v58);
  v59 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v56;
  if (v59)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 16))(v59);
    v56 = *(_QWORD **)(a1 + 192);
  }
  (*(void (**)(_QWORD *, uint64_t *, uint64_t))*v56)(v56, a2, a3);
  v64 = *(_QWORD *)(a1 + 184);
  if (*(_DWORD *)(v64 + 20) != (_DWORD)v53
    || *(_DWORD *)(v64 + 16) != *(_DWORD *)(a1 + 112) * v46 * *(_DWORD *)(a1 + 116))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 425);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "filters_->NumRows() == num_output_fmaps && filters_->NumCols() == num_input_fmaps * filt_x_len_ * filt_y_len_");
    goto LABEL_154;
  }
  *(_BYTE *)(a1 + 16) = 0;
  return kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::UpdateBNNSFilter(a1, v60, v61, v62, v63);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::WriteConfig(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  std::string __p;

  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<BiasLearnRateCoef>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v10, v11);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 144), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v12, v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v14, v15);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FmapXLen>", v16, v17);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FmapYLen>", v18, v19);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FiltXLen>", v20, v21);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FiltYLen>", v22, v23);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FiltXStep>", v24, v25);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FiltYStep>", v26, v27);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PadX>", v28, v29);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PadY>", v30, v31);
  return kaldi::WriteBasicType<int>(a2, (int)a3);
}

void sub_1DE456400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::WriteData(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  uint64_t v8;
  const char *v9;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  kaldi::CuMatrixBase<float>::Write(*(_QWORD *)(a1 + 184), a2, a3, a4);
  kaldi::CuVectorBase<float>::Write(*(_DWORD **)(a1 + 192), a2, a3, v8, v9);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::NumParams(uint64_t a1)
{
  return (*(_DWORD *)(*(_QWORD *)(a1 + 192) + 16)
                      + *(_DWORD *)(*(_QWORD *)(a1 + 184) + 16) * *(_DWORD *)(*(_QWORD *)(a1 + 184) + 20));
}

_DWORD *kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::GetParams(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  v10 = a1[23];
  v11 = *(_DWORD *)(v10 + 16) * *(_DWORD *)(v10 + 20);
  v18 = 0;
  v19 = 0;
  if (v11 > *(_DWORD *)(a2 + 8)
    || (v17 = *(void **)a2,
        LODWORD(v18) = v11,
        kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v17, v10, v7, v8, v9),
        v14 = (_DWORD *)a1[24],
        v15 = v14[4],
        v18 = 0,
        v19 = 0,
        (v15 + v11) > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
  }
  v17 = (void *)(*(_QWORD *)a2 + 4 * v11);
  LODWORD(v18) = v15;
  return kaldi::CuVectorBase<float>::CopyToVec<float>(v14, (uint64_t)&v17, v12, v13, v9);
}

_DWORD *kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::SetParams(_QWORD *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_QWORD *))(*a1 + 176))(a1))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v13, "SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 502);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v13, "wei_src.Dim() == NumParams()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v13);
  }
  v6 = a1[23];
  v7 = *(_DWORD *)(v6 + 16) * *(_DWORD *)(v6 + 20);
  v14 = 0;
  v15 = 0;
  if (v7 > *(_DWORD *)(a2 + 8)
    || (v13 = *(char **)a2,
        LODWORD(v14) = v7,
        kaldi::CuMatrixBase<float>::CopyRowsFromVec(v6, &v13),
        v10 = (_DWORD *)a1[24],
        v11 = v10[4],
        v14 = 0,
        v15 = 0,
        (v11 + v7) > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v5);
  }
  v13 = (char *)(*(_QWORD *)a2 + 4 * v7);
  LODWORD(v14) = v11;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v10, (uint64_t)&v13, v8, v9, v5);
}

void sub_1DE45665C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

float kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::SumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v6;

  v6 = kaldi::CuMatrixBase<float>::Sum(*(_QWORD *)(a1 + 184), a2, a3, a4, a5);
  return v6 + kaldi::CuVectorBase<float>::Sum(*(_QWORD *)(a1 + 192));
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::PerturbParams(uint64_t a1, float a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _QWORD v13[4];
  _BYTE v14[48];

  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v14, *(unsigned int *)(*(_QWORD *)(a1 + 184) + 20), *(unsigned int *)(*(_QWORD *)(a1 + 184) + 16), 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v14);
  kaldi::CuMatrixBase<float>::AddMat(*(_QWORD *)(a1 + 184), (uint64_t)v14, 111, v4, v5, a2, 1.0);
  v6 = *(unsigned int *)(*(_QWORD *)(a1 + 192) + 16);
  v13[0] = &unk_1EA92DFD8;
  memset(&v13[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v13, v6, 1u, v7, v8);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v13);
  kaldi::CuVectorBase<float>::AddVec(*(_QWORD *)(a1 + 192), (uint64_t)v13, v9, v10, v11, a2, 1.0);
  v13[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v13);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v14);
}

void sub_1DE456774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::Info(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  void **v14;
  uint64_t v15;
  void *__p[2];
  unsigned __int8 v18;
  void *v19[2];
  unsigned __int8 v20;
  _QWORD v21[11];
  char v22;
  uint64_t v23;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 168))(a1, v21, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" OutSizeX:", 10);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" OutSizeY:", 10);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" InFmaps:", 9);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" OutFmaps:", 10);
  std::ostream::operator<<();
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n filters: ", 11);
  kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 184));
  if ((v20 & 0x80u) == 0)
    v6 = v19;
  else
    v6 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v7 = v20;
  else
    v7 = (uint64_t)v19[1];
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n bias: ", 8);
  kaldi::nnet1::MomentStatistics<float>(*(_DWORD **)(a1 + 192), v10, v11, v12, v13);
  if ((v18 & 0x80u) == 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v15 = v18;
  else
    v15 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v14, v15);
  if ((char)v18 < 0)
    operator delete(__p[0]);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  std::stringbuf::str();
  v21[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v21[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v22 < 0)
    operator delete((void *)v21[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v23);
}

void sub_1DE4569C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  std::ostringstream::~ostringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  void **v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  void **v30;
  std::string::size_type v31;
  std::string *v32;
  void *__p[2];
  unsigned __int8 v34;
  void *v35[2];
  unsigned __int8 v36;
  void *v37[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;

  std::string::basic_string[abi:ne180100]<0>(&v41, "\n  ");
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 200), v4, v5, v6, v7);
  if ((v40 & 0x80u) == 0)
    v8 = v39;
  else
    v8 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v9 = v40;
  else
    v9 = (std::string::size_type)v39[1];
  v10 = std::string::append(&v41, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v42, ", lr-coef ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v38 & 0x80u) == 0)
    v14 = v37;
  else
    v14 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v15 = v38;
  else
    v15 = (std::string::size_type)v37[1];
  v16 = std::string::append(&v43, (const std::string::value_type *)v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v44, "\n  bias_grad");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 224), v20, v21, v22, v23);
  if ((v36 & 0x80u) == 0)
    v24 = v35;
  else
    v24 = (void **)v35[0];
  if ((v36 & 0x80u) == 0)
    v25 = v36;
  else
    v25 = (std::string::size_type)v35[1];
  v26 = std::string::append(&v45, (const std::string::value_type *)v24, v25);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  v28 = std::string::append(&v46, ", lr-coef ");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v34 & 0x80u) == 0)
    v30 = __p;
  else
    v30 = (void **)__p[0];
  if ((v34 & 0x80u) == 0)
    v31 = v34;
  else
    v31 = (std::string::size_type)__p[1];
  v32 = std::string::append(&v47, (const std::string::value_type *)v30, v31);
  *a2 = *v32;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  if ((char)v34 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if ((char)v36 < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if ((char)v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
}

void sub_1DE456CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v52 - 57) < 0)
    operator delete(*(void **)(v52 - 80));
  if (*(char *)(v52 - 89) < 0)
    operator delete(*(void **)(v52 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v52 - 121) < 0)
    operator delete(*(void **)(v52 - 144));
  if (*(char *)(v52 - 153) < 0)
    operator delete(*(void **)(v52 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(exception_object);
}

void sub_1DE456DA8()
{
  JUMPOUT(0x1DE456D80);
}

void sub_1DE456DB0()
{
  JUMPOUT(0x1DE456D90);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if ((_DWORD)a4 || !*(_BYTE *)(a1 + 17))
    kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::PropagateCpu(a1, a2, a3, a4, a5);
  else
    kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::PropagateBNNS(a1, a2, a3, 0, a5);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::PropagateBNNS(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  void *v5;
  uint64_t result;
  const char *v7;
  _QWORD v8[34];

  v5 = *(void **)(a1 + 152);
  if (!v5)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateBNNS", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)0x45D, "bnns_filter_", a5);
  if (a4)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8, "PropagateBNNS", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1120);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "BNNS only supports one batch");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  result = BNNSFilterApplyBatch(v5, *(int *)(a2 + 20), *(const void **)(a2 + 8), *(int *)(a2 + 24), *(void **)(a3 + 8), *(int *)(a3 + 24));
  if ((_DWORD)result)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateBNNS", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)0x464, "ret == 0", v7);
  return result;
}

void sub_1DE456E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::PropagateCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  int v6;
  const char *v7;
  int v8;
  int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  std::vector<int>::pointer end;
  int v29;
  int v30;
  int v31;
  int i;
  int v33;
  int v34;
  int v35;
  int *value;
  int v37;
  int v38;
  std::vector<int>::pointer v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  int *v45;
  int *v46;
  int v47;
  std::vector<int>::pointer begin;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  char *v53;
  int *v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64x2_t v66;
  int64x2_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  int v71;
  int *v72;
  uint64_t v73;
  int v74;
  int64x2_t v75;
  int32x2_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t *v81;
  int v82;
  uint64_t v83;
  uint64_t *v85;
  int v86;
  uint64_t v87;
  int v88;
  int v89;
  std::vector<int> __p;
  __int128 v91;

  v5 = *(_DWORD *)(a1 + 104);
  v6 = *(_DWORD *)(a1 + 108);
  v7 = (const char *)((v5 + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120));
  v79 = (v6 + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124);
  v78 = (v79 + 1);
  v8 = v78 * ((_DWORD)v7 + 1);
  v83 = (*(_DWORD *)(a1 + 12) / v8);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 184) + 20) != (_DWORD)v83)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateCpu", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)0x478, "num_filters == num_output_fmaps", a5);
  v9 = a4;
  v77 = ((_DWORD)v7 + 1);
  v12 = *(_DWORD *)(a1 + 8);
  v13 = *(unsigned int *)(a2 + 20);
  v85 = (uint64_t *)(a1 + 296);
  v14 = *(_QWORD *)(a1 + 296);
  v15 = *(int *)(a1 + 80);
  v82 = v78 * ((_DWORD)v7 + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 304) - v14) >> 3) < v15)
  {
    std::vector<std::vector<kaldi::CuMatrix<float>>>::resize(v85, v15);
    v8 = v78 * ((_DWORD)v7 + 1);
    v14 = *v85;
  }
  v16 = (uint64_t *)(v14 + 24 * v9);
  if (0xAAAAAAAAAAAAAAABLL * ((v16[1] - *v16) >> 4) < v8)
  {
    std::vector<kaldi::CuMatrix<float>>::resize(v16, v8);
    v8 = v78 * ((_DWORD)v7 + 1);
  }
  if (v8 >= 1)
  {
    v17 = 0;
    do
    {
      kaldi::CuMatrix<float>::Resize(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 24 * v9) + v17, v13, *(unsigned int *)(*(_QWORD *)(a1 + 184) + 16), 0, 0);
      v17 += 48;
    }
    while (48 * v82 != v17);
  }
  v86 = v9;
  v80 = a3;
  v81 = (uint64_t *)(a1 + 160);
  v18 = *(int *)(a1 + 80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 4) < v18)
    std::vector<kaldi::CuMatrix<float>>::resize(v81, v18);
  v19 = *(_DWORD *)(a1 + 132);
  v20 = *(_DWORD *)(a1 + 108);
  v21 = *(_DWORD *)(a1 + 116);
  v89 = -v19;
  if (v19 + v20 - v21 < -v19)
    goto LABEL_69;
  v22 = 0;
  v23 = *(_DWORD *)(a1 + 128);
  v24 = *(_DWORD *)(a1 + 104);
  v25 = *(_DWORD *)(a1 + 112);
  v88 = v12 / (v6 * v5);
  do
  {
    v26 = -v23;
    if (v23 + v24 - v25 < -v23)
      goto LABEL_68;
    v27 = v22;
    do
    {
      v87 = v27;
      memset(&__p, 0, sizeof(__p));
      if (v88 < 1)
        goto LABEL_64;
      end = 0;
      v29 = 0;
      v30 = v26 + v24 * v89;
      v31 = *(_DWORD *)(a1 + 116);
      do
      {
        if (v31 < 1)
          goto LABEL_63;
        for (i = 0; i < v31; ++i)
        {
          if (v25 < 1)
            continue;
          v33 = 0;
          v34 = i + v89;
          do
          {
            if (v34 < 0 || (v35 = *(_DWORD *)(a1 + 108), v34 >= v35))
            {
              value = __p.__end_cap_.__value_;
            }
            else
            {
              value = __p.__end_cap_.__value_;
              if (v33 + v26 >= 0)
              {
                v37 = *(_DWORD *)(a1 + 104);
                if (v33 + v26 < v37)
                {
                  v38 = v30 + v33 + (i + v35 * v29) * v37;
                  if (end >= __p.__end_cap_.__value_)
                  {
                    begin = __p.__begin_;
                    v49 = end - __p.__begin_;
                    v50 = v49 + 1;
                    if ((unint64_t)(v49 + 1) >> 62)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v51 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
                    if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v50)
                      v50 = v51 >> 1;
                    if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                      v52 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v52 = v50;
                    if (v52)
                    {
                      v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__end_cap_, v52);
                      begin = __p.__begin_;
                      end = __p.__end_;
                    }
                    else
                    {
                      v53 = 0;
                    }
                    v54 = (int *)&v53[4 * v49];
                    *v54 = v38;
                    v55 = v54 + 1;
                    while (end != begin)
                    {
                      v56 = *--end;
                      *--v54 = v56;
                    }
                    __p.__begin_ = v54;
                    __p.__end_ = v55;
                    __p.__end_cap_.__value_ = (int *)&v53[4 * v52];
                    if (begin)
                      operator delete(begin);
                    end = v55;
                  }
                  else
                  {
                    *end++ = v38;
                  }
                  goto LABEL_60;
                }
              }
            }
            if (end >= value)
            {
              v39 = __p.__begin_;
              v40 = end - __p.__begin_;
              v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v42 = (char *)value - (char *)__p.__begin_;
              if (v42 >> 1 > v41)
                v41 = v42 >> 1;
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
                v43 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v43 = v41;
              if (v43)
              {
                v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__end_cap_, v43);
                v39 = __p.__begin_;
                end = __p.__end_;
              }
              else
              {
                v44 = 0;
              }
              v45 = (int *)&v44[4 * v40];
              *v45 = -1;
              v46 = v45 + 1;
              while (end != v39)
              {
                v47 = *--end;
                *--v45 = v47;
              }
              __p.__begin_ = v45;
              __p.__end_ = v46;
              __p.__end_cap_.__value_ = (int *)&v44[4 * v43];
              if (v39)
                operator delete(v39);
              end = v46;
            }
            else
            {
              *end++ = -1;
            }
LABEL_60:
            __p.__end_ = end;
            ++v33;
            v25 = *(_DWORD *)(a1 + 112);
          }
          while (v33 < v25);
          v31 = *(_DWORD *)(a1 + 116);
        }
LABEL_63:
        ++v29;
      }
      while (v29 != v88);
LABEL_64:
      kaldi::CuMatrixBase<float>::CopyCols(*(_QWORD *)(*v85 + 24 * v86) + 48 * v87, a2, (unsigned int **)&__p, a4, a5);
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      v27 = v87 + 1;
      v26 += *(_DWORD *)(a1 + 120);
      v24 = *(_DWORD *)(a1 + 104);
      v23 = *(_DWORD *)(a1 + 128);
      v25 = *(_DWORD *)(a1 + 112);
    }
    while (v26 <= v23 + v24 - v25);
    v20 = *(_DWORD *)(a1 + 108);
    v19 = *(_DWORD *)(a1 + 132);
    v22 = v87 + 1;
    v21 = *(_DWORD *)(a1 + 116);
LABEL_68:
    v89 += *(_DWORD *)(a1 + 124);
  }
  while (v89 <= v19 + v20 - v21);
LABEL_69:
  kaldi::CuMatrix<float>::Resize(*v81 + 48 * v86, *(unsigned int *)(v80 + 20), *(unsigned int *)(v80 + 16), 3u, 0);
  v57 = v83;
  if (v82 >= 1)
  {
    v58 = 0;
    v59 = 0;
    do
    {
      v60 = *(_QWORD *)(a1 + 160) + 48 * v86;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, v60, 0, *(_DWORD *)(v60 + 20), v59, v57);
      kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&__p, *(_QWORD *)(a1 + 192), v61, v62, v63, 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&__p, *(_QWORD *)(*(_QWORD *)(a1 + 296) + 24 * v86) + v58, CblasNoTrans, *(_QWORD *)(a1 + 184), (const char *)0x70, 1.0, 1.0);
      __p.__begin_ = (std::vector<int>::pointer)&unk_1EA926508;
      *(_OWORD *)&__p.__end_ = 0u;
      v91 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&__p);
      v57 = v83;
      v59 = (const char *)((_DWORD)v59 + v83);
      v58 += 48;
    }
    while (48 * v82 != v58);
  }
  std::vector<int>::vector(&__p, *(int *)(a1 + 12));
  if ((int)v83 >= 1)
  {
    v65 = 0;
    v66 = (uint64x2_t)vdupq_n_s64(v77 - 1);
    v67 = vdupq_n_s64(2uLL);
    v68 = 1;
    do
    {
      if ((v79 & 0x80000000) == 0)
      {
        v69 = 0;
        v70 = &__p.__begin_[v68];
        v71 = v65;
        do
        {
          if ((v7 & 0x80000000) == 0)
          {
            v72 = v70;
            v73 = (v77 + 1) & 0x1FFFFFFFELL;
            v74 = v71;
            v75 = (int64x2_t)xmmword_1DEC3D320;
            do
            {
              v76 = vmovn_s64((int64x2_t)vcgeq_u64(v66, (uint64x2_t)v75));
              if ((v76.i8[0] & 1) != 0)
                *(v72 - 1) = v74;
              v64 = v76.u32[1];
              if ((v76.i8[4] & 1) != 0)
              {
                v64 = (v83 + v74);
                *v72 = v64;
              }
              v75 = vaddq_s64(v75, v67);
              v74 += 2 * v83;
              v72 += 2;
              v73 -= 2;
            }
            while (v73);
          }
          ++v69;
          v71 += v83 * v77;
          v70 += (int)v7 + 1;
        }
        while (v69 != v78);
      }
      ++v65;
      v68 += (int)v78 * (uint64_t)(int)v77;
    }
    while (v65 != v83);
  }
  kaldi::CuMatrixBase<float>::CopyCols(v80, *v81 + 48 * v86, (unsigned int **)&__p, v64, v7);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_1DE457570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::BackpropagateCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v14;
  unint64_t v15;
  uint64_t v16;
  const char *v17;
  int v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  int v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  kaldi::CuWorkspace *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int j;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  const char *v50;
  kaldi::CuWorkspace *ChildWorkspace;
  int v52;
  int v53;
  int v54;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  void *v60;
  __int128 v61;
  __int128 v62;
  void **v63;
  _QWORD v64[4];
  _QWORD v65[3];
  std::vector<int> v66;

  v56 = *(_DWORD *)(a1 + 104);
  v6 = (v56 + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120);
  v7 = v6 + 1;
  v54 = *(_DWORD *)(a1 + 108);
  v8 = (v54 + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124);
  v9 = (v8 + 1);
  v10 = v9 * (v6 + 1);
  v11 = (*(_DWORD *)(a1 + 12) / v10);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 184) + 20) != (_DWORD)v11)
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateCpu", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)0x51D, "num_filters == num_output_fmaps", (const char *)a5);
  v14 = *(_DWORD *)(a1 + 8);
  v58 = *(_DWORD *)(a2 + 20);
  v15 = a6;
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 160) + 48 * a6, *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 16), 3u, 0);
  std::vector<int>::vector(&v66, *(int *)(a1 + 12));
  if ((int)v11 >= 1)
  {
    v18 = 0;
    v19 = 0;
    for (i = 0; i != v11; ++i)
    {
      if ((v8 & 0x80000000) == 0)
      {
        v21 = 0;
        v22 = &v66.__begin_[v19];
        v23 = v18;
        do
        {
          v24 = (v6 + 1);
          v25 = v23;
          v26 = v22;
          if ((v6 & 0x80000000) == 0)
          {
            do
            {
              *v26 = v25;
              v26 += v11;
              ++v25;
              --v24;
            }
            while (v24);
          }
          ++v21;
          v22 += v7 * v11;
          v23 += v7;
        }
        while (v21 != v9);
      }
      ++v19;
      v18 += v10;
    }
  }
  kaldi::CuMatrixBase<float>::CopyCols(*(_QWORD *)(a1 + 160) + 48 * (int)v15, a4, (unsigned int **)&v66, v16, v17);
  std::vector<kaldi::CuSubMatrix<float>>::vector(v65, v10);
  v27 = *(_QWORD *)(a1 + 24);
  if (v15 >= (*(_QWORD *)(a1 + 32) - v27) >> 3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v63, "BackpropagateCpu", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1327);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"Convolutional2DComponent needs workspace set to perform back-propagation", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v63);
  }
  ChildWorkspace = (kaldi::CuWorkspace *)kaldi::CuWorkspace::GetChildWorkspace(*(kaldi::CuWorkspace **)(v27 + 8 * v15), -1);
  if (v10 >= 1)
  {
    v28 = 0;
    v29 = 0;
    v30 = 40 * v10;
    do
    {
      kaldi::CuWorkspace::GetMatrix<float>(ChildWorkspace, v58, *(_DWORD *)(*(_QWORD *)(a1 + 184) + 16), 0, (uint64_t)&v63);
      v31 = v65[0] + v28;
      if ((void ***)(v65[0] + v28) != &v63)
      {
        *(_QWORD *)(v31 + 8) = v64[0];
        *(_OWORD *)(v31 + 16) = *(_OWORD *)&v64[1];
        *(_QWORD *)(v31 + 32) = v64[3];
      }
      v63 = (void **)&unk_1EA926508;
      memset(v64, 0, sizeof(v64));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v63);
      v32 = *(_QWORD *)(a1 + 160) + 48 * (int)v15;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v63, v32, 0, *(_DWORD *)(v32 + 20), v29, v11);
      kaldi::CuMatrixBase<float>::AddMatMat(v65[0] + v28, (uint64_t)&v63, CblasNoTrans, *(_QWORD *)(a1 + 184), (const char *)0x6F, 1.0, 0.0);
      v63 = (void **)&unk_1EA926508;
      memset(v64, 0, sizeof(v64));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v63);
      v29 = (const char *)((_DWORD)v29 + v11);
      v28 += 40;
    }
    while (v30 != v28);
  }
  v33 = *(_DWORD *)(a1 + 132);
  v34 = *(_DWORD *)(a1 + 108);
  v35 = *(_DWORD *)(a1 + 116);
  v53 = -v33;
  v36 = ChildWorkspace;
  if (v33 + v34 - v35 >= -v33)
  {
    v37 = 0;
    v38 = *(_DWORD *)(a1 + 128);
    v39 = *(_DWORD *)(a1 + 104);
    v40 = *(_DWORD *)(a1 + 112);
    v52 = v14 / (v54 * v56);
    do
    {
      v41 = -v38;
      if (v38 + v39 - v40 >= -v38)
      {
        v59 = v37;
        do
        {
          if (v52 >= 1)
          {
            v42 = 0;
            v43 = 0;
            v57 = v41 + v39 * v53;
            do
            {
              if (v35 >= 1)
              {
                for (j = 0; j < v35; ++j)
                {
                  if (v40 >= 1)
                  {
                    v45 = 0;
                    v46 = j + v53;
                    do
                    {
                      if ((v46 & 0x80000000) == 0)
                      {
                        v47 = *(_DWORD *)(a1 + 108);
                        if (v46 < v47 && v41 + v45 >= 0)
                        {
                          v48 = *(_DWORD *)(a1 + 104);
                          if (v41 + v45 < v48)
                          {
                            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v63, v65[0] + 40 * v59, 0, *(_DWORD *)(v65[0] + 40 * v59 + 20), (const char *)(v43 + v45), 1);
                            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v60, a5, 0, *(_DWORD *)(a5 + 20), (const char *)(v57 + v45 + v48 * (j + v42 * v47)), 1);
                            kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v60, (uint64_t)&v63, 111, v49, v50, 1.0, 1.0);
                            v60 = &unk_1EA926508;
                            v61 = 0u;
                            v62 = 0u;
                            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v60);
                            v63 = (void **)&unk_1EA926508;
                            memset(v64, 0, sizeof(v64));
                            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v63);
                            v40 = *(_DWORD *)(a1 + 112);
                          }
                        }
                      }
                      ++v45;
                    }
                    while (v45 < v40);
                    v35 = *(_DWORD *)(a1 + 116);
                    v43 += v45;
                  }
                }
              }
              ++v42;
            }
            while (v42 != v52);
            v39 = *(_DWORD *)(a1 + 104);
            v38 = *(_DWORD *)(a1 + 128);
            v36 = ChildWorkspace;
          }
          ++v59;
          v41 += *(_DWORD *)(a1 + 120);
        }
        while (v41 <= v38 + v39 - v40);
        v34 = *(_DWORD *)(a1 + 108);
        v33 = *(_DWORD *)(a1 + 132);
        v37 = v59;
      }
      v53 += *(_DWORD *)(a1 + 124);
    }
    while (v53 <= v33 + v34 - v35);
  }
  if (v36)
  {
    kaldi::CuWorkspace::~CuWorkspace(v36);
    MEMORY[0x1DF0ED014]();
  }
  v63 = (void **)v65;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v63);
  if (v66.__begin_)
  {
    v66.__end_ = v66.__begin_;
    operator delete(v66.__begin_);
  }
}

void sub_1DE457B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, kaldi::CuWorkspace *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  void *v24;

  a22 = v22 - 136;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  v24 = *(void **)(v22 - 112);
  if (v24)
  {
    *(_QWORD *)(v22 - 104) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 148) = a3;
  *(_DWORD *)(result + 144) = a2;
  *(_BYTE *)(result + 344) = 0;
  return result;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::NormalizeGradients(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  float v7;
  int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;

  v7 = a6;
  v9 = *(_DWORD *)(a1 + 144);
  if (v9 == 3)
  {
    if (a6 >= 0.0 && a6 <= 1.0)
    {
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * a2), *(_QWORD *)(a1 + 248) + 48 * a2, a6);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * a2), *(_QWORD *)(a1 + 272) + 32 * a2, v7, v12, v13, v14);
    }
  }
  else if (v9 == 2)
  {
    if (a6 > 0.0)
    {
      v15 = a2;
      if (*(_BYTE *)(a1 + 84))
        v7 = (float)*(int *)(*(_QWORD *)(a1 + 320) + 4 * a2) * a6;
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * a2), (unsigned int *)(*(_QWORD *)(a1 + 248) + 48 * a2), v7, a3, a4, a5);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v15), (_DWORD *)(*(_QWORD *)(a1 + 272) + 32 * v15), v16, v17, v18, v7);
    }
  }
  else if (v9 == 1 && a6 > 0.0)
  {
    v10 = a2;
    if (*(_BYTE *)(a1 + 84))
      v7 = (float)*(int *)(*(_QWORD *)(a1 + 320) + 4 * a2) * a6;
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * a2), v7);
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v10), v7);
  }
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::AccumGradientsCpu(a1, a2, a3, a4, a5);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;

  if (!*(_BYTE *)(a1 + 344))
  {
    v2 = *(_DWORD *)(a1 + 144);
    v3 = *(_DWORD *)(a1 + 80);
    if (v3 > 1)
      v4 = v3 + 1;
    else
      v4 = 1;
    v5 = (_QWORD *)(a1 + 200);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 200, v4);
    v6 = (_QWORD *)(a1 + 224);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize(a1 + 224, v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 272), v4);
    if (v4 >= 1)
    {
      v7 = 0;
      v8 = v2 & 0xFFFFFFFE;
      do
      {
        v9 = *(_QWORD *)(a1 + 184);
        v11 = *(unsigned int *)(v9 + 16);
        v10 = *(unsigned int *)(v9 + 20);
        v12 = operator new();
        kaldi::CuMatrix<float>::CuMatrix(v12, v10, v11, 0, 0, (const char *)1);
        v13 = *(_QWORD *)(*v5 + 8 * v7);
        *(_QWORD *)(*v5 + 8 * v7) = v12;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
        v14 = *(unsigned int *)(*(_QWORD *)(a1 + 184) + 20);
        v15 = (_QWORD *)operator new();
        v15[2] = 0;
        v15[3] = 0;
        *v15 = &unk_1EA92DFD8;
        v15[1] = 0;
        kaldi::CuVector<float>::Resize((uint64_t)v15, v14, 0, v16, v17);
        v18 = *(_QWORD *)(*v6 + 8 * v7);
        *(_QWORD *)(*v6 + 8 * v7) = v15;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
        if (v8 == 2)
        {
          kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 248) + 48 * v7, *(unsigned int *)(*(_QWORD *)(a1 + 184) + 20), *(unsigned int *)(*(_QWORD *)(a1 + 184) + 16), 1u, 0);
          kaldi::CuVector<float>::Resize(*(_QWORD *)(a1 + 272) + 32 * v7, *(unsigned int *)(*(_QWORD *)(a1 + 184) + 20), 1u, v19, v20);
          if (*(_DWORD *)(a1 + 144) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 248) + 48 * v7, v21, v22, v23, v24, 1.0);
            kaldi::CuVectorBase<float>::Set(*(_QWORD *)(a1 + 272) + 32 * v7, 1.0);
          }
        }
        ++v7;
      }
      while (v7 != v4);
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 320), v4);
    *(_BYTE *)(a1 + 344) = 1;
  }
}

void sub_1DE458008(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::AccumGradientsCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  __int128 v19;
  __int128 v20;

  v5 = (*(_DWORD *)(a1 + 104) + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120) + 1;
  v6 = v5 + v5 * ((*(_DWORD *)(a1 + 108) + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124));
  v7 = *(_DWORD *)(a1 + 12) / v6;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 184) + 20) != v7)
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradientsCpu", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)0x2C6, "num_filters == num_output_fmaps", a5);
  v8 = (int)a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 320) + 4 * (int)a5) = *(_DWORD *)(a2 + 20);
  v10 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(*(_QWORD *)(v10 + 8 * (int)a5) + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * (int)a5) + 24) = a4;
  kaldi::CuMatrixBase<float>::SetZero(*(_QWORD *)(v10 + 8 * (int)a5));
  kaldi::CuVectorBase<float>::SetZero(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v8));
  if (v6 >= 1)
  {
    v11 = 0;
    v12 = 0;
    v13 = 48 * v6;
    do
    {
      v14 = *(_QWORD *)(a1 + 160) + 48 * v8;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v18, v14, 0, *(_DWORD *)(v14 + 20), v12, v7);
      kaldi::CuMatrixBase<float>::AddMatMat(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v8), (uint64_t)&v18, CblasTrans, *(_QWORD *)(*(_QWORD *)(a1 + 296) + 24 * v8) + v11, (const char *)0x6F, 1.0, 1.0);
      kaldi::CuVectorBase<float>::AddRowSumMat(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v8), (uint64_t)&v18, 1.0, 1.0, v15, v16, v17);
      v18 = &unk_1EA926508;
      v19 = 0u;
      v20 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v18);
      v12 = (const char *)((_DWORD)v12 + v7);
      v11 += 48;
    }
    while (v13 != v11);
  }
}

void sub_1DE4581E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _OWORD *v10;

  a10 = &unk_1EA926508;
  *v10 = 0u;
  v10[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  int v18;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[48];
  _BYTE v24[48];

  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v24, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v23, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  (*(void (**)(uint64_t, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v8 + 112))(v8, a2, v24, 0);
  (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v8 + 128))(v8, a2, v24, a3, v23, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 232))(v8, a2, a3, 0, 0);
  v9 = *(_DWORD *)(a1[23] + 16) * *(_DWORD *)(a1[23] + 20);
  kaldi::Vector<float>::Resize((void **)a4, (*(_DWORD *)(a1[24] + 16) + v9), 0, v10, v11);
  v21 = 0;
  v22 = 0;
  if (v9 > *(_DWORD *)(a4 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v14);
  v20 = *(void **)a4;
  LODWORD(v21) = v9;
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v20, **(_QWORD **)(v8 + 200), v12, v13, v14);
  v18 = *(_DWORD *)(a1[24] + 16);
  v21 = 0;
  v22 = 0;
  if ((v18 + v9) > *(_DWORD *)(a4 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v17);
  v20 = (void *)(*(_QWORD *)a4 + 4 * v9);
  LODWORD(v21) = v18;
  kaldi::CuVectorBase<float>::CopyToVec<float>(**(_DWORD ***)(v8 + 224), (uint64_t)&v20, v15, v16, v17);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v23);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v24);
}

void sub_1DE4583E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

float kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;

  if (!*(_BYTE *)(a1 + 84))
    return *(float *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 352);
  v3 = *(_QWORD *)(a1 + 360) - v2;
  if (!v3)
    return NAN;
  v4 = v3 >> 2;
  if ((int)v4 <= a2)
    return NAN;
  v5 = v4 - 1;
  if (a2 >= 0)
    v5 = a2;
  return *(float *)(v2 + 4 * v5);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD v23[34];

  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  *a3 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16)
      + *(_DWORD *)(*(_QWORD *)(a1 + 184) + 16) * *(_DWORD *)(*(_QWORD *)(a1 + 184) + 20);
  v10 = *(_QWORD *)(a1 + 200);
  v11 = *(_QWORD *)(a1 + 208) - v10;
  if (v11 && (v12 = *(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)) != 0)
  {
    v13 = v11 >> 3;
    v14 = v12 >> 3;
    v15 = *(_DWORD *)(a1 + 80);
    if (v15 == 1)
      v15 = 0;
    v16 = v15;
    v17 = v14 - 1;
    if (v13 - 1 != v15 || v17 != v15)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "CountZeroCorr", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 212);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"  ", 2);
      v22 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
    }
    v19 = kaldi::CuMatrixBase<float>::CountZeros(*(_QWORD *)(v10 + 8 * v15), v6, v7, v8, v9);
    v20 = kaldi::CuVectorBase<float>::CountZeros(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v16)) + v19;
  }
  else
  {
    v20 = 0;
  }
  *a2 = v20;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v8;
  int v9;
  const char *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  int v14;
  void *v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v41, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 232);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v41, "Weights are already vectorized");
LABEL_34:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v41);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v41, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 235);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Performing vectorization of convolutional 2d component", 54);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v41);
  }
  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 184) + 16) * *(_DWORD *)(*(_QWORD *)(a1 + 184) + 20);
  v9 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16) + v8;
  if (v9 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v41, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 238);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v41, "(nlinparams + bias_->Dim()) == NumParams()");
    goto LABEL_34;
  }
  kaldi::NewCuSubOrMat<float>(*(_QWORD *)(a1 + 184), a2 != 0, (uint64_t *)&v41);
  v11 = v41;
  v41 = 0;
  v12 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
    v13 = v41;
    v41 = 0;
    if (v13)
      (*(void (**)(void *))(*(_QWORD *)v13 + 24))(v13);
  }
  v43 = 0;
  v44 = 0;
  v41 = &unk_1EA926538;
  v42 = 0;
  if (v8 > *(_DWORD *)(a3 + 16))
    goto LABEL_37;
  v42 = *(_QWORD *)(a3 + 8);
  LODWORD(v43) = v8;
  v44 = *(_QWORD *)(a3 + 24);
  kaldi::CuVectorBase<float>::Set((uint64_t)&v41, *(float *)(a1 + 136));
  v14 = *(_DWORD *)(a3 + 16) - v8;
  *(_QWORD *)(a3 + 8) += 4 * v8;
  *(_DWORD *)(a3 + 16) = v14;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 192), a2, (uint64_t *)&v41);
  v15 = v41;
  v41 = 0;
  v16 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    v17 = v41;
    v41 = 0;
    if (v17)
      (*(void (**)(void *))(*(_QWORD *)v17 + 16))(v17);
  }
  v18 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16);
  v43 = 0;
  v41 = &unk_1EA926538;
  if (v18 > *(_DWORD *)(a3 + 16))
LABEL_37:
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v10);
  v42 = *(_QWORD *)(a3 + 8);
  LODWORD(v43) = v18;
  v44 = *(_QWORD *)(a3 + 24);
  kaldi::CuVectorBase<float>::Set((uint64_t)&v41, *(float *)(a1 + 140));
  v19 = *(int *)(*(_QWORD *)(a1 + 192) + 16);
  v20 = *(_DWORD *)(a3 + 16) - v19;
  *(_QWORD *)(a3 + 8) += 4 * v19;
  *(_DWORD *)(a3 + 16) = v20;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::UpdateBNNSFilter(a1, v21, v22, v23, v24);
  v25 = a4[1];
  v26 = (v25 - *a4) >> 5;
  if (v26 != (uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 3
    || v26 != (uint64_t)(*(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)) >> 3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v41, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 262);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v41, "veccorrs->size() == filters_grad_.size() && veccorrs->size() == bias_grad_.size()");
    goto LABEL_34;
  }
  if (v25 == *a4)
    goto LABEL_30;
  v27 = 0;
  do
  {
    v28 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v27) + 16)
        + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v27) + 16)
        * *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v27) + 20);
    if (v28 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v41, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 264);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v41, "(filters_grad_[ic]->NumRows() * filters_grad_[ic]->NumCols() + bias_grad_[ic]->Dim()) == NumParams()");
      goto LABEL_34;
    }
    ++v27;
    v29 = *a4;
    v30 = a4[1];
  }
  while (v27 < (v30 - *a4) >> 5);
  if (v30 != v29)
  {
    v31 = 0;
    do
    {
      v32 = v29 + 32 * v31;
      kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 200) + 8 * v31), v32, (uint64_t *)&v41);
      v33 = *(_QWORD *)(a1 + 200);
      v34 = v41;
      v41 = 0;
      v35 = *(_QWORD *)(v33 + 8 * v31);
      *(_QWORD *)(v33 + 8 * v31) = v34;
      if (v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
      v36 = v41;
      v41 = 0;
      if (v36)
        (*(void (**)(void *))(*(_QWORD *)v36 + 24))(v36);
      kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 224) + 8 * v31), v32, (uint64_t *)&v41);
      v37 = *(_QWORD *)(a1 + 224);
      v38 = v41;
      v41 = 0;
      v39 = *(_QWORD *)(v37 + 8 * v31);
      *(_QWORD *)(v37 + 8 * v31) = v38;
      if (v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
      v40 = v41;
      v41 = 0;
      if (v40)
        (*(void (**)(void *))(*(_QWORD *)v40 + 16))(v40);
      ++v31;
      v29 = *a4;
    }
    while (v31 < (a4[1] - *a4) >> 5);
  }
LABEL_30:
  *(_BYTE *)(a1 + 16) = 1;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v41, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 280);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Done  vectorization of convolutional 2D component", 49);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v41);
  }
}

void sub_1DE458A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent<kaldi::CuMatrixBase<float>>(v2, a1);
  return v2;
}

void sub_1DE458ADC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit(uint64_t a1)
{
  return kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit(a1 - 88);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent<kaldi::CuMatrixBase<float>>(v2, a1);
  return v2;
}

void sub_1DE458B4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit(uint64_t a1)
{
  return kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit(a1 - 96);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(_QWORD *)(*(_QWORD *)(a1 + 208) - 8));
  return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(_QWORD *)(*(_QWORD *)(a1 + 232) - 8));
}

void std::vector<std::vector<kaldi::CuMatrix<float>>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<kaldi::CuMatrix<float>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

double kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  *(_OWORD *)(a1 + 56) = xmmword_1DEC3D450;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)a1 = &unk_1EA92A7C8;
  *(_QWORD *)(a1 + 88) = &unk_1EA92A900;
  *(_QWORD *)(a1 + 96) = &unk_1EA92A928;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a1 + 136) = _D1;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 329) = 0u;
  return result;
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = off_1EA92D6D8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1EA929750;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1EA92A900;
  *(_QWORD *)(a1 + 96) = &unk_1EA92A928;
  *(_QWORD *)a1 = &unk_1EA92A7C8;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AssignMembers<kaldi::QuantizedMatrix<signed char>>(a1, a2);
  return a1;
}

void sub_1DE458E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  void *v15;
  uint64_t v16;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(_QWORD *)(v10 + 360) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(_QWORD *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v16 = *(_QWORD *)(v10 + 192);
  *(_QWORD *)(v10 + 192) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(v10 + 184), 0);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v12);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AssignMembers<kaldi::QuantizedMatrix<signed char>>(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[34];

  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (a1 == a2)
  {
    *(_BYTE *)(a1 + 344) = 0;
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(_QWORD *)(a2 + 328), (uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 2);
    *(_BYTE *)(a1 + 344) = 0;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(_QWORD *)(a2 + 360), (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2);
  }
  v4 = *(int **)(a2 + 184);
  if (v4)
  {
    v5 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v5, v4);
    v6 = (uint64_t *)(a1 + 184);
    v7 = v5;
  }
  else
  {
    v6 = (uint64_t *)(a1 + 184);
    v7 = 0;
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](v6, v7);
  if (*(_QWORD *)(a2 + 192))
  {
    v8 = operator new();
    v9 = *(unsigned int *)(*(_QWORD *)(a2 + 192) + 16);
    *(_QWORD *)v8 = &unk_1EA92DFD8;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    kaldi::CuVector<float>::Resize(v8, v9, 1u, v10, v11);
    v15 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v8;
    if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
      v8 = *(_QWORD *)(a1 + 192);
    }
    kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)v8, *(_QWORD *)(a2 + 192), v12, v13, v14);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateBNNSFilter(a1);
  if (*(_QWORD *)(a2 + 384) != *(_QWORD *)(a2 + 376))
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v17, "AssignMembers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1451);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v17);
  }
}

void sub_1DE4590EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void **v8;

  *(_QWORD *)(a1 + 88) = &unk_1EA92A900;
  v2 = a1 + 88;
  *(_QWORD *)a1 = &unk_1EA92A7C8;
  *(_QWORD *)(a1 + 96) = &unk_1EA92A928;
  v3 = a1 + 96;
  v4 = *(void **)(a1 + 152);
  if (v4)
  {
    BNNSFilterDestroy(v4);
    *(_QWORD *)(a1 + 152) = 0;
  }
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 376));
  v5 = *(void **)(a1 + 352);
  if (v5)
  {
    *(_QWORD *)(a1 + 360) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 320);
  if (v6)
  {
    *(_QWORD *)(a1 + 328) = v6;
    operator delete(v6);
  }
  v8 = (void **)(a1 + 296);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 272);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 224);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 200);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v7 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  v8 = (void **)(a1 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(a1);
  JUMPOUT(0x1DF0ED014);
}

void `non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(uint64_t a1)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(a1 - 88);
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(a1 - 96);
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(a1 - 88);
  JUMPOUT(0x1DF0ED014);
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(a1 - 96);
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent(v2, a1);
  return v2;
}

void sub_1DE459334(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  uint64_t v6;
  const char *v7;
  int *v8;
  int *v9;
  uint64_t v10;
  const char *v11;
  BOOL v12;
  int *v13;
  __int128 *v14;
  uint64_t v15;
  BOOL v19;
  BOOL v20;
  BOOL v22;
  BOOL v23;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  float *v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  int v36;
  int v37;
  BOOL v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  const char *v42;
  BOOL v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  unsigned int v55;
  int v56;
  int v57;
  unint64_t v58;
  float v59;
  float v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  unint64_t i;
  float v70;
  float v71;
  float v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  _QWORD *v81;
  __int128 *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  float *v86;
  uint64_t v87;
  uint64_t v88;
  void **v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  _QWORD v93[2];
  uint64_t v94;
  void *__p;
  void *v96;
  __int128 v97;
  uint64_t v98;
  int v99;
  std::string v100;
  int v101;
  float v102;
  int v103;

  v102 = 2.0;
  v103 = -1073741824;
  v101 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 144), &v100);
  v99 = -1;
  v97 = 0uLL;
  v98 = 0;
  v8 = (int *)(a1 + 116);
  v9 = (int *)(a1 + 112);
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_137;
    kaldi::ReadToken(a2, 0, (uint64_t)&v97, v6, v7);
    if (SHIBYTE(v98) < 0)
    {
      v15 = *((_QWORD *)&v97 + 1);
      if (*((_QWORD *)&v97 + 1) == 10)
      {
        if (*(_QWORD *)v97 == 0x61654D736169423CLL && *(_WORD *)(v97 + 8) == 15982)
        {
LABEL_90:
          v30 = (float *)&v103;
          goto LABEL_128;
        }
        v15 = *((_QWORD *)&v97 + 1);
      }
      else if (*((_QWORD *)&v97 + 1) == 13
             && *(_QWORD *)v97 == 0x74536D617261503CLL
             && *(_QWORD *)(v97 + 5) == 0x3E7665646474536DLL)
      {
LABEL_89:
        v30 = (float *)&v101;
LABEL_128:
        kaldi::ReadBasicType<float>(a2, 0, v30, v10, v11);
        goto LABEL_132;
      }
      if (v15 == 11)
      {
        if (*(_QWORD *)v97 == 0x6E6152736169423CLL && *(_QWORD *)(v97 + 3) == 0x3E65676E61527361)
        {
LABEL_91:
          v30 = &v102;
          goto LABEL_128;
        }
        v15 = *((_QWORD *)&v97 + 1);
      }
      if (v15 != 10)
        goto LABEL_102;
      v19 = *(_QWORD *)v97 == 0x654C5870616D463CLL && *(_WORD *)(v97 + 8) == 15982;
      v13 = (int *)(a1 + 104);
      if (v19)
        goto LABEL_131;
      v15 = *((_QWORD *)&v97 + 1);
      if (*((_QWORD *)&v97 + 1) != 10)
        goto LABEL_102;
      v20 = *(_QWORD *)v97 == 0x654C5970616D463CLL && *(_WORD *)(v97 + 8) == 15982;
      v13 = (int *)(a1 + 108);
      if (v20)
        goto LABEL_131;
      if (v98 < 0)
      {
        v31 = *(_QWORD *)v97 == 0x654C58746C69463CLL && *(_WORD *)(v97 + 8) == 15982;
        v13 = (int *)(a1 + 112);
        if (v31)
          goto LABEL_131;
        v15 = *((_QWORD *)&v97 + 1);
        v32 = *(_QWORD *)v97 == 0x654C59746C69463CLL && *(_WORD *)(v97 + 8) == 15982;
        v13 = (int *)(a1 + 116);
        if (v32)
          goto LABEL_131;
        if (v98 < 0)
        {
LABEL_102:
          if (v15 == 11)
          {
            v33 = *(_QWORD *)v97 == 0x745358746C69463CLL && *(_QWORD *)(v97 + 3) == 0x3E7065745358746CLL;
            v13 = (int *)(a1 + 120);
            if (v33)
              goto LABEL_131;
            v15 = *((_QWORD *)&v97 + 1);
            if (*((_QWORD *)&v97 + 1) == 11)
            {
              v34 = *(_QWORD *)v97 == 0x745359746C69463CLL && *(_QWORD *)(v97 + 3) == 0x3E7065745359746CLL;
              v13 = (int *)(a1 + 124);
              if (v34)
                goto LABEL_131;
              if ((v98 & 0x8000000000000000) == 0)
                goto LABEL_113;
            }
          }
          if (v15 != 6)
            goto LABEL_126;
          v35 = *(_DWORD *)v97 == 1684099132 && *(_WORD *)(v97 + 4) == 15960;
          v13 = (int *)(a1 + 128);
          if (v35)
            goto LABEL_131;
LABEL_120:
          if (*((_QWORD *)&v97 + 1) != 6)
            goto LABEL_126;
          v14 = (__int128 *)v97;
        }
        else
        {
LABEL_113:
          if (HIBYTE(v98) != 6)
            goto LABEL_126;
LABEL_5:
          v12 = (_DWORD)v97 == 1684099132 && WORD2(v97) == 15960;
          v13 = (int *)(a1 + 128);
          if (v12)
            goto LABEL_131;
          if (v98 < 0)
            goto LABEL_120;
          if (HIBYTE(v98) != 6)
            goto LABEL_126;
          v14 = &v97;
        }
        v36 = *(_DWORD *)v14;
        v37 = *((unsigned __int16 *)v14 + 2);
        v38 = v36 == 1684099132 && v37 == 15961;
        v13 = (int *)(a1 + 132);
        if (v38)
          goto LABEL_131;
        goto LABEL_126;
      }
      if (HIBYTE(v98) == 6)
        goto LABEL_5;
      if (HIBYTE(v98) != 10)
        goto LABEL_126;
    }
    else
    {
      switch(HIBYTE(v98))
      {
        case 6:
          goto LABEL_5;
        case 0xA:
          if ((_QWORD)v97 == 0x61654D736169423CLL && WORD4(v97) == 15982)
            goto LABEL_90;
          if (HIBYTE(v98) != 6)
            goto LABEL_65;
          goto LABEL_5;
        case 0xB:
          if ((_QWORD)v97 == 0x6E6152736169423CLL && *(_QWORD *)((char *)&v97 + 3) == 0x3E65676E61527361)
            goto LABEL_91;
          if (HIBYTE(v98) == 6)
            goto LABEL_5;
          if (HIBYTE(v98) == 11)
          {
            v22 = (_QWORD)v97 == 0x745358746C69463CLL && *(_QWORD *)((char *)&v97 + 3) == 0x3E7065745358746CLL;
            v13 = (int *)(a1 + 120);
            if (v22)
              goto LABEL_131;
            v23 = (_QWORD)v97 == 0x745359746C69463CLL && *(_QWORD *)((char *)&v97 + 3) == 0x3E7065745359746CLL;
            v13 = (int *)(a1 + 124);
            if (v23)
              goto LABEL_131;
            goto LABEL_126;
          }
LABEL_65:
          if (HIBYTE(v98) != 10)
            goto LABEL_126;
          v25 = (_QWORD)v97 == 0x654C5870616D463CLL && WORD4(v97) == 15982;
          v13 = (int *)(a1 + 104);
          if (v25)
            goto LABEL_131;
          v26 = (_QWORD)v97 == 0x654C5970616D463CLL && WORD4(v97) == 15982;
          v13 = (int *)(a1 + 108);
          if (v26)
            goto LABEL_131;
          break;
        case 0xD:
          if ((_QWORD)v97 != 0x74536D617261503CLL || *(_QWORD *)((char *)&v97 + 5) != 0x3E7665646474536DLL)
            goto LABEL_126;
          goto LABEL_89;
        default:
          goto LABEL_126;
      }
    }
    v27 = (_QWORD)v97 == 0x654C58746C69463CLL && WORD4(v97) == 15982;
    v13 = (int *)(a1 + 112);
    if (v27)
      goto LABEL_131;
    v28 = (_QWORD)v97 == 0x654C59746C69463CLL && WORD4(v97) == 15982;
    v13 = (int *)(a1 + 116);
    if (v28)
      goto LABEL_131;
LABEL_126:
    v39 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v97, "<LearnRateCoef>");
    v30 = (float *)(a1 + 136);
    if (v39)
      goto LABEL_128;
    v40 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v97, "<BiasLearnRateCoef>");
    v30 = (float *)(a1 + 140);
    if (v40)
      goto LABEL_128;
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v97, "<RandomSeed>"))
    {
      v13 = &v99;
LABEL_131:
      kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v13, v10, v11);
      goto LABEL_132;
    }
    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v97, "<GradientNormType>"))
      break;
    kaldi::ReadToken(a2, 0, (uint64_t)&v100, v41, v42);
LABEL_132:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v43 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v97, "<MaxGrad>");
  v30 = (float *)(a1 + 148);
  if (v43)
    goto LABEL_128;
  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v97, "</Component>"))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v93, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 318);
    v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"Unknown token ", 14);
    if (v98 >= 0)
      v82 = &v97;
    else
      v82 = (__int128 *)v97;
    if (v98 >= 0)
      v83 = HIBYTE(v98);
    else
      v83 = *((_QWORD *)&v97 + 1);
    v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)v82, v83);
    v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)" (ParamStddev|BiasMean|BiasRange|FmapXLen|FmapYLen|FiltXLen|FiltYLen|FiltXStep|FiltYStep|ConnectFmap|LearnRateCoef|BiasLearnRateCoef|RandomSeed|GradientNormType|MaxGrad)", 169);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v93);
  }
LABEL_137:
  *(_DWORD *)(a1 + 144) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v100);
  v44 = *(_DWORD *)(a1 + 8);
  v46 = *(_DWORD *)(a1 + 104);
  v45 = *(_DWORD *)(a1 + 108);
  v47 = v44 / (v45 * v46);
  if (v44 % (v45 * v46))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v93, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 330);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0", 45);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v93);
  }
  v48 = (v46 + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120) + 1;
  v49 = *(_DWORD *)(a1 + 12);
  v50 = v48 + v48 * ((v45 + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124));
  v51 = (v49 / v50);
  if (v49 % v50)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v93, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 336);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0", 52);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v93);
  }
  if (v99 >= 1)
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v99);
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v93, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)&v89, v51, (*v9 * v47 * *v8), 0, 0);
  if ((int)v51 >= 1)
  {
    v55 = 0;
    v56 = *v9;
    v57 = *v8;
    do
    {
      if (v56 * v47 * v57 >= 1)
      {
        v58 = 0;
        do
        {
          v59 = *(float *)&v101;
          kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v93, 0, v52, v53, v54);
          if (v91 <= v55 || v58 >= v90)
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v54);
          *((float *)v89 + (int)(v55 * v92) + v58++) = v59 * v60;
          v56 = *v9;
          v57 = *v8;
        }
        while ((uint64_t)v58 < *v9 * v47 * *v8);
      }
      ++v55;
    }
    while (v55 != (_DWORD)v51);
  }
  v62 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v89);
  v63 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v89);
  kaldi::nnet1::NewMatrix<kaldi::QuantizedMatrix<signed char>>(v62, v63, (uint64_t *)&v86);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), (uint64_t)v86);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(*(_QWORD *)(a1 + 184), (uint64_t)&v89);
  v86 = 0;
  v87 = 0;
  v88 = 0;
  kaldi::Vector<float>::Resize((void **)&v86, v51, 0, v64, v65);
  if ((int)v51 >= 1)
  {
    for (i = 0; i != v51; ++i)
    {
      v70 = *(float *)&v103;
      v71 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v66, v67, v68);
      if (i >= v87)
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v68);
      v72 = v70 + (v71 + -0.5) * v102;
      v86[i] = v72;
    }
  }
  v73 = operator new();
  v74 = v87;
  *(_QWORD *)(v73 + 16) = 0;
  *(_QWORD *)(v73 + 24) = 0;
  *(_QWORD *)v73 = &unk_1EA92DFD8;
  *(_QWORD *)(v73 + 8) = 0;
  kaldi::CuVector<float>::Resize(v73, v74, 1u, v75, v76);
  v80 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v73;
  if (v80)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 16))(v80);
    v73 = *(_QWORD *)(a1 + 192);
  }
  kaldi::CuVectorBase<float>::CopyFromVec<float>((_DWORD *)v73, (uint64_t)&v86, v77, v78, v79);
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateBNNSFilter(a1);
  kaldi::Vector<float>::Destroy((uint64_t)&v86);
  kaldi::Matrix<float>::~Matrix((uint64_t)&v89);
  if (__p)
  {
    v96 = __p;
    operator delete(__p);
  }
  v89 = (void **)&v94;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v89);
  if (SHIBYTE(v98) < 0)
    operator delete((void *)v97);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
}

void sub_1DE459EA0()
{
  JUMPOUT(0x1DE459EC4);
}

void sub_1DE459EAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  kaldi::Matrix<float>::~Matrix(&v3);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)&v4);
  if (*(char *)(v1 - 153) < 0)
    operator delete(*(void **)(v1 - 176));
  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::NewMatrix<kaldi::QuantizedMatrix<signed char>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_1DE459F44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10D0C4068EB0291);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateBNNSFilter(uint64_t a1)
{
  void *v2;
  size_t v3;
  size_t v4;
  int v5;
  int v6;
  size_t v7;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  const void *v21;
  int v22;
  const char *v23;
  int v24;
  void *result;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];
  BNNSFilterParameters v30;
  BNNSFilterParameters filter_params;
  BNNSConvolutionLayerParameters layer_params;
  BNNSImageStackDescriptor out_desc;
  BNNSImageStackDescriptor in_desc;

  v2 = *(void **)(a1 + 152);
  if (v2)
  {
    BNNSFilterDestroy(v2);
    *(_QWORD *)(a1 + 152) = 0;
  }
  v3 = *(int *)(a1 + 104);
  v4 = *(int *)(a1 + 108);
  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(_DWORD *)(a1 + 8) / ((int)v4 * (int)v3);
  v7 = *(int *)(a1 + 128);
  v8 = *(int *)(a1 + 132);
  v9 = *(int *)(a1 + 112);
  v10 = *(int *)(a1 + 116);
  v11 = *(int *)(a1 + 120);
  v12 = *(int *)(a1 + 124);
  v13 = ((int)v3 + 2 * (int)v7 - (int)v9) / (int)v11 + 1;
  v14 = ((int)v4 + 2 * (int)v8 - (int)v10) / (int)v12 + 1;
  in_desc.width = v3;
  in_desc.height = v4;
  v15 = v6;
  in_desc.channels = v6;
  in_desc.row_stride = v3;
  in_desc.image_stride = (int)v4 * (int)v3;
  in_desc.data_type = BNNSDataTypeFloat32;
  *(_QWORD *)&in_desc.data_scale = 1065353216;
  out_desc.width = v13;
  out_desc.height = v14;
  v16 = v5 / (v14 * v13);
  v17 = v16;
  out_desc.channels = v16;
  out_desc.row_stride = v13;
  out_desc.image_stride = v14 * v13;
  out_desc.data_type = BNNSDataTypeFloat32;
  *(_QWORD *)&out_desc.data_scale = 1065353216;
  memset(&layer_params.weights.data_bias, 0, 96);
  layer_params.x_stride = v11;
  layer_params.y_stride = v12;
  layer_params.x_padding = v7;
  layer_params.y_padding = v8;
  layer_params.k_width = v9;
  layer_params.k_height = v10;
  layer_params.in_channels = v6;
  layer_params.out_channels = v16;
  layer_params.weights.data_type = BNNSDataTypeInt8;
  layer_params.weights.data = (const void *)kaldi::QuantizedMatrixBase<signed char>::Data(*(_QWORD *)(a1 + 184));
  v18 = *(_QWORD *)(a1 + 184);
  v19 = *(_QWORD *)(a1 + 192);
  v20 = *(float *)(v18 + 12);
  layer_params.bias.data_type = BNNSDataTypeFloat32;
  layer_params.weights.data_scale = 1.0 / v20;
  layer_params.weights.data_bias = 0.0;
  layer_params.weights.data_table = 0;
  v21 = *(const void **)(v19 + 8);
  *(_QWORD *)&layer_params.bias.data_scale = 1065353216;
  layer_params.bias.data = v21;
  layer_params.bias.data_table = 0;
  layer_params.activation.function = BNNSActivationFunctionIdentity;
  v22 = kaldi::QuantizedMatrixBase<short>::NumCols(v18);
  if ((int)v10 * (uint64_t)(int)v9 * v15 * v17 != kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184))
                                                * v22)
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateBNNSFilter", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)0x43F, "filters_->NumCols() * filters_->NumRows() == (bp.k_width * bp.k_height * bp.in_channels * bp.out_channels)", v23);
  v24 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
  if (v24 == kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)))
  {
    filter_params = *(BNNSFilterParameters *)ymmword_1DEC3DFA8;
    result = BNNSFilterCreateConvolutionLayer(&in_desc, &out_desc, &layer_params, &filter_params);
    *(_QWORD *)(a1 + 152) = result;
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params, "UpdateBNNSFilter", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1090);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&filter_params, (uint64_t)"Unsupported BNNS filter weight arrangement", 42);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params);
    }
    memset(&v30, 0, sizeof(v30));
    v27 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
    v28 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    kaldi::Matrix<float>::Matrix((uint64_t)v29, v27, v28, 1, (const char *)1);
    kaldi::MatrixBase<float>::CopyFromMat<signed char>((uint64_t)v29, *(unsigned int **)(a1 + 184), 111);
    LODWORD(v27) = kaldi::MatrixBase<float>::NumCols((uint64_t)v29);
    if ((_DWORD)v27 != kaldi::MatrixBase<float>::Stride((uint64_t)v29)
      && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params, "UpdateBNNSFilter", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1096);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&filter_params, (uint64_t)"It did not work", 15);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params);
    }
    layer_params.weights.data = (const void *)v29[0];
    *(_QWORD *)(a1 + 152) = BNNSFilterCreateConvolutionLayer(&in_desc, &out_desc, &layer_params, &v30);
    kaldi::Matrix<float>::~Matrix((uint64_t)v29);
    result = *(void **)(a1 + 152);
  }
  if (!result)
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateBNNSFilter", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)0x458, "bnns_filter_", v26);
  return result;
}

void sub_1DE45A288(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va1);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  void **v11;
  BOOL v12;
  float *v13;
  void *v14;
  BOOL v15;
  BOOL v17;
  BOOL v20;
  BOOL v21;
  uint64_t v22;
  BOOL v23;
  BOOL v25;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  int v39;
  int v40;
  BOOL v41;
  _BOOL4 v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  const char *v54;
  _QWORD *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  _QWORD *v60;
  void **v61;
  uint64_t v62;
  void *__p[2];
  uint64_t v65;
  void *v66[4];

  while (kaldi::Peek(a2, a3) == 60)
  {
    memset(v66, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v66, v7, v8);
    if ((SHIBYTE(v66[2]) & 0x80000000) == 0)
    {
      v11 = v66;
      switch(HIBYTE(v66[2]))
      {
        case 6:
          goto LABEL_133;
        case 9:
LABEL_4:
          v12 = v66[0] == (void *)0x6461724778614D3CLL && LOBYTE(v66[1]) == 62;
          v13 = (float *)(a1 + 148);
          if (!v12)
            goto LABEL_8;
          goto LABEL_109;
        case 0xA:
LABEL_69:
          v28 = v66[0] == (void *)0x654C5870616D463CLL && LOWORD(v66[1]) == 15982;
          v22 = a1 + 104;
          if (v28)
            goto LABEL_138;
          if (HIBYTE(v66[2]) == 6)
            goto LABEL_101;
          if (HIBYTE(v66[2]) != 10)
            goto LABEL_137;
          v29 = v66[0] == (void *)0x654C5970616D463CLL && LOWORD(v66[1]) == 15982;
          v22 = a1 + 108;
          if (!v29)
            goto LABEL_79;
          goto LABEL_138;
        case 0xB:
LABEL_89:
          v32 = v66[0] == (void *)0x745358746C69463CLL && *(void **)((char *)v66 + 3) == (void *)0x3E7065745358746CLL;
          v22 = a1 + 120;
          if (v32)
            goto LABEL_138;
          if (HIBYTE(v66[2]) == 6)
            goto LABEL_101;
          if (HIBYTE(v66[2]) != 11)
            goto LABEL_137;
          v33 = v66[0] == (void *)0x745359746C69463CLL && *(void **)((char *)v66 + 3) == (void *)0x3E7065745359746CLL;
          v22 = a1 + 124;
          if (!v33)
            goto LABEL_137;
          goto LABEL_138;
        case 0xF:
          v34 = v66[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v66 + 7) == (void *)0x3E66656F43657461;
          v13 = (float *)(a1 + 136);
          if (!v34)
            goto LABEL_137;
          goto LABEL_109;
        case 0x12:
LABEL_61:
          if (v66[0] != (void *)0x6E6569646172473CLL
            || v66[1] != (void *)0x7079546D726F4E74
            || LOWORD(v66[2]) != 15973)
          {
            v11 = v66;
            switch(HIBYTE(v66[2]))
            {
              case 6:
                goto LABEL_133;
              case 9:
                goto LABEL_4;
              case 0xA:
                goto LABEL_69;
              case 0xB:
                goto LABEL_89;
              default:
                goto LABEL_137;
            }
          }
          goto LABEL_102;
        case 0x13:
          v25 = v66[0] == (void *)0x61654C736169423CLL
             && v66[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v66[1] + 3) == (void *)0x3E66656F43657461;
          v13 = (float *)(a1 + 140);
          if (!v25)
          {
            switch(HIBYTE(v66[2]))
            {
              case 9:
                goto LABEL_4;
              case 0xA:
                goto LABEL_69;
              case 0xB:
                goto LABEL_89;
              case 0xC:
              case 0xD:
              case 0xE:
              case 0xF:
              case 0x10:
              case 0x11:
                goto LABEL_137;
              case 0x12:
                goto LABEL_61;
              default:
                goto LABEL_8;
            }
          }
          goto LABEL_109;
        default:
          goto LABEL_137;
      }
    }
    v14 = v66[1];
    if (v66[1] == (void *)15)
    {
      v15 = *(_QWORD *)v66[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v66[0] + 7) == 0x3E66656F43657461;
      v13 = (float *)(a1 + 136);
      if (v15)
        goto LABEL_109;
    }
    if (v66[1] == (void *)19)
    {
      v17 = *(_QWORD *)v66[0] == 0x61654C736169423CLL
         && *((_QWORD *)v66[0] + 1) == 0x6F43657461526E72
         && *(_QWORD *)((char *)v66[0] + 11) == 0x3E66656F43657461;
      v13 = (float *)(a1 + 140);
      if (v17)
        goto LABEL_109;
      v14 = v66[1];
    }
    if (v14 == (void *)18)
    {
      if (*(_QWORD *)v66[0] == 0x6E6569646172473CLL
        && *((_QWORD *)v66[0] + 1) == 0x7079546D726F4E74
        && *((_WORD *)v66[0] + 8) == 15973)
      {
LABEL_102:
        __p[0] = 0;
        __p[1] = 0;
        v65 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p, v9, v10);
        *(_DWORD *)(a1 + 144) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v65) < 0)
          operator delete(__p[0]);
        goto LABEL_139;
      }
      v14 = v66[1];
    }
    if (v14 != (void *)9)
      goto LABEL_39;
    v20 = *(_QWORD *)v66[0] == 0x6461724778614D3CLL && *((_BYTE *)v66[0] + 8) == 62;
    v13 = (float *)(a1 + 148);
    if (!v20)
    {
      v14 = v66[1];
LABEL_39:
      if (v14 == (void *)10)
      {
        v21 = *(_QWORD *)v66[0] == 0x654C5870616D463CLL && *((_WORD *)v66[0] + 4) == 15982;
        v22 = a1 + 104;
        if (v21)
          goto LABEL_138;
        v14 = v66[1];
        if (v66[1] == (void *)10)
        {
          v23 = *(_QWORD *)v66[0] == 0x654C5970616D463CLL && *((_WORD *)v66[0] + 4) == 15982;
          v22 = a1 + 108;
          if (v23)
            goto LABEL_138;
          if ((HIBYTE(v66[2]) & 0x80) == 0)
          {
            if (HIBYTE(v66[2]) != 6)
            {
              if (HIBYTE(v66[2]) != 10)
                goto LABEL_137;
LABEL_79:
              v30 = v66[0] == (void *)0x654C58746C69463CLL && LOWORD(v66[1]) == 15982;
              v22 = a1 + 112;
              if (!v30)
              {
                v31 = v66[0] == (void *)0x654C59746C69463CLL && LOWORD(v66[1]) == 15982;
                v22 = a1 + 116;
                if (!v31)
                  goto LABEL_137;
              }
LABEL_138:
              kaldi::ReadBasicType<int>(a2, a3, v22, v9, v10);
              goto LABEL_139;
            }
LABEL_101:
            v11 = v66;
LABEL_133:
            v39 = *(_DWORD *)v11;
            v40 = *((unsigned __int16 *)v11 + 2);
            v41 = v39 == 1684099132 && v40 == 15960;
            v22 = a1 + 128;
            if (!v41)
              goto LABEL_137;
            goto LABEL_138;
          }
          v35 = *(_QWORD *)v66[0] == 0x654C58746C69463CLL && *((_WORD *)v66[0] + 4) == 15982;
          v22 = a1 + 112;
          if (v35)
            goto LABEL_138;
          v14 = v66[1];
          v36 = *(_QWORD *)v66[0] == 0x654C59746C69463CLL && *((_WORD *)v66[0] + 4) == 15982;
          v22 = a1 + 116;
          if (v36)
            goto LABEL_138;
          if ((HIBYTE(v66[2]) & 0x80) == 0)
            goto LABEL_8;
        }
      }
      if (v14 != (void *)11)
        goto LABEL_131;
      v37 = *(_QWORD *)v66[0] == 0x745358746C69463CLL && *(_QWORD *)((char *)v66[0] + 3) == 0x3E7065745358746CLL;
      v22 = a1 + 120;
      if (v37)
        goto LABEL_138;
      v14 = v66[1];
      if (v66[1] != (void *)11)
        goto LABEL_131;
      v38 = *(_QWORD *)v66[0] == 0x745359746C69463CLL && *(_QWORD *)((char *)v66[0] + 3) == 0x3E7065745359746CLL;
      v22 = a1 + 124;
      if (v38)
        goto LABEL_138;
      if ((HIBYTE(v66[2]) & 0x80) == 0)
      {
LABEL_8:
        if (HIBYTE(v66[2]) == 6)
          goto LABEL_101;
      }
      else
      {
LABEL_131:
        if (v14 == (void *)6)
        {
          v11 = (void **)v66[0];
          goto LABEL_133;
        }
      }
LABEL_137:
      v42 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v66, "<PadY>");
      v22 = a1 + 132;
      if (!v42)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 401);
        v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
        if (SHIBYTE(v66[2]) >= 0)
          v61 = v66;
        else
          v61 = (void **)v66[0];
        if (SHIBYTE(v66[2]) >= 0)
          v62 = HIBYTE(v66[2]);
        else
          v62 = (uint64_t)v66[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v61, v62);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      goto LABEL_138;
    }
LABEL_109:
    kaldi::ReadBasicType<float>(a2, a3, v13, v9, v10);
LABEL_139:
    if (SHIBYTE(v66[2]) < 0)
      operator delete(v66[0]);
  }
  v43 = *(_DWORD *)(a1 + 8);
  v45 = *(_DWORD *)(a1 + 104);
  v44 = *(_DWORD *)(a1 + 108);
  v46 = v43 / (v44 * v45);
  if (v43 % (v44 * v45))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 415);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0");
    goto LABEL_152;
  }
  v47 = v45 + 2 * *(_DWORD *)(a1 + 128);
  v48 = *(_DWORD *)(a1 + 112);
  v49 = *(_DWORD *)(a1 + 116);
  v50 = (v47 - v48) / *(_DWORD *)(a1 + 120) + 1;
  v51 = *(_DWORD *)(a1 + 12);
  v52 = v50 + v50 * ((v44 + 2 * *(_DWORD *)(a1 + 132) - v49) / *(_DWORD *)(a1 + 124));
  v53 = (v51 / v52);
  if (v51 % v52)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 417);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0");
LABEL_152:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  kaldi::nnet1::NewMatrix<kaldi::QuantizedMatrix<signed char>>(v53, (v48 * v46 * v49), (uint64_t *)__p);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), (uint64_t)__p[0]);
  kaldi::QuantizedMatrix<signed char>::Read(*(int **)(a1 + 184), a2, a3, a4, v54);
  v55 = (_QWORD *)operator new();
  v55[2] = 0;
  v55[3] = 0;
  *v55 = &unk_1EA92DFD8;
  v55[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v55, v53, 1u, v56, v57);
  v58 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v55;
  if (v58)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 16))(v58);
    v55 = *(_QWORD **)(a1 + 192);
  }
  (*(void (**)(_QWORD *, uint64_t *, uint64_t))*v55)(v55, a2, a3);
  if (kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184)) != (_DWORD)v53
    || kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)) != *(_DWORD *)(a1 + 112)
                                                                                        * v46
                                                                                        * *(_DWORD *)(a1 + 116))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 425);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "filters_->NumRows() == num_output_fmaps && filters_->NumCols() == num_input_fmaps * filt_x_len_ * filt_y_len_");
    goto LABEL_152;
  }
  *(_BYTE *)(a1 + 16) = 0;
  return kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateBNNSFilter(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::WriteConfig(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  std::string __p;

  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<BiasLearnRateCoef>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v10, v11);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 144), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v12, v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v14, v15);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FmapXLen>", v16, v17);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FmapYLen>", v18, v19);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FiltXLen>", v20, v21);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FiltYLen>", v22, v23);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FiltXStep>", v24, v25);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FiltYStep>", v26, v27);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PadX>", v28, v29);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PadY>", v30, v31);
  return kaldi::WriteBasicType<int>(a2, (int)a3);
}

void sub_1DE45AE74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::WriteData(int **a1, _QWORD *a2, int a3, int a4)
{
  uint64_t v8;
  const char *v9;

  (*((void (**)(int **))*a1 + 21))(a1);
  kaldi::QuantizedMatrix<signed char>::Write(a1[23], a2, a3, a4);
  kaldi::CuVectorBase<float>::Write(a1[24], a2, a3, v8, v9);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::NumParams(uint64_t a1)
{
  int v2;

  v2 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  return *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16)
       + kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)) * v2;
}

_DWORD *kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::GetParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  int v7;
  const char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  v7 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  v9 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)) * v7;
  v16 = 0;
  v17 = 0;
  if (v9 > *(_DWORD *)(a2 + 8)
    || (v15 = *(void **)a2,
        LODWORD(v16) = v9,
        kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v15, *(unsigned int **)(a1 + 184)),
        v12 = *(_DWORD **)(a1 + 192),
        v13 = v12[4],
        v16 = 0,
        v17 = 0,
        v13 + v9 > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v8);
  }
  v15 = (void *)(*(_QWORD *)a2 + 4 * (int)v9);
  LODWORD(v16) = v13;
  return kaldi::CuVectorBase<float>::CopyToVec<float>(v12, (uint64_t)&v15, v10, v11, v8);
}

_DWORD *kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::SetParams(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  const char *v6;
  unsigned int v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v14, "SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 502);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v14, "wei_src.Dim() == NumParams()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v14);
  }
  v5 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  v7 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)) * v5;
  v8 = *(unsigned int **)(a1 + 184);
  v15 = 0;
  v16 = 0;
  if (v7 > *(_DWORD *)(a2 + 8)
    || (v14 = *(char **)a2,
        LODWORD(v15) = v7,
        kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v8, &v14),
        v11 = *(_DWORD **)(a1 + 192),
        v12 = v11[4],
        v15 = 0,
        v16 = 0,
        v12 + v7 > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v6);
  }
  v14 = (char *)(*(_QWORD *)a2 + 4 * (int)v7);
  LODWORD(v15) = v12;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v11, (uint64_t)&v14, v9, v10, v6);
}

void sub_1DE45B118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

float kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::SumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v6;

  v6 = kaldi::QuantizedMatrixBase<signed char>::Sum(*(int **)(a1 + 184), a2, a3, a4, a5);
  return v6 + kaldi::CuVectorBase<float>::Sum(*(_QWORD *)(a1 + 192));
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::PerturbParams(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[48];

  v2 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  v3 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v4, v2, v3, 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v4);
  kaldi::QuantizedMatrixBase<signed char>::AddMat();
}

uint64_t sub_1DE45B1D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _QWORD v12[4];
  uint64_t v13;

  v7 = *(unsigned int *)(*(_QWORD *)(v5 + 192) + 16);
  v12[0] = &unk_1EA92DFD8;
  memset(&v12[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v12, v7, 1u, a4, a5);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v12);
  kaldi::CuVectorBase<float>::AddVec(*(_QWORD *)(v5 + 192), (uint64_t)v12, v8, v9, v10, v6, 1.0);
  v12[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v12);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v13);
}

void sub_1DE45B244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Info(unsigned int **a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  void **v14;
  uint64_t v15;
  void *__p[2];
  unsigned __int8 v18;
  void *v19[2];
  unsigned __int8 v20;
  _QWORD v21[11];
  char v22;
  uint64_t v23;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  (*((void (**)(unsigned int **, _QWORD *, _QWORD))*a1 + 21))(a1, v21, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" OutSizeX:", 10);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" OutSizeY:", 10);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" InFmaps:", 9);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" OutFmaps:", 10);
  std::ostream::operator<<();
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n filters: ", 11);
  kaldi::nnet1::MomentStatistics<signed char>(a1[23]);
  if ((v20 & 0x80u) == 0)
    v6 = v19;
  else
    v6 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v7 = v20;
  else
    v7 = (uint64_t)v19[1];
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n bias: ", 8);
  kaldi::nnet1::MomentStatistics<float>(a1[24], v10, v11, v12, v13);
  if ((v18 & 0x80u) == 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v15 = v18;
  else
    v15 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v14, v15);
  if ((char)v18 < 0)
    operator delete(__p[0]);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  std::stringbuf::str();
  v21[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v21[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v22 < 0)
    operator delete((void *)v21[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v23);
}

void sub_1DE45B498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  std::ostringstream::~ostringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  void **v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  void **v30;
  std::string::size_type v31;
  std::string *v32;
  void *__p[2];
  unsigned __int8 v34;
  void *v35[2];
  unsigned __int8 v36;
  void *v37[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;

  std::string::basic_string[abi:ne180100]<0>(&v41, "\n  ");
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 200), v4, v5, v6, v7);
  if ((v40 & 0x80u) == 0)
    v8 = v39;
  else
    v8 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v9 = v40;
  else
    v9 = (std::string::size_type)v39[1];
  v10 = std::string::append(&v41, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v42, ", lr-coef ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v38 & 0x80u) == 0)
    v14 = v37;
  else
    v14 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v15 = v38;
  else
    v15 = (std::string::size_type)v37[1];
  v16 = std::string::append(&v43, (const std::string::value_type *)v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v44, "\n  bias_grad");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 224), v20, v21, v22, v23);
  if ((v36 & 0x80u) == 0)
    v24 = v35;
  else
    v24 = (void **)v35[0];
  if ((v36 & 0x80u) == 0)
    v25 = v36;
  else
    v25 = (std::string::size_type)v35[1];
  v26 = std::string::append(&v45, (const std::string::value_type *)v24, v25);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  v28 = std::string::append(&v46, ", lr-coef ");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v34 & 0x80u) == 0)
    v30 = __p;
  else
    v30 = (void **)__p[0];
  if ((v34 & 0x80u) == 0)
    v31 = v34;
  else
    v31 = (std::string::size_type)__p[1];
  v32 = std::string::append(&v47, (const std::string::value_type *)v30, v31);
  *a2 = *v32;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  if ((char)v34 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if ((char)v36 < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if ((char)v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
}

void sub_1DE45B77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v52 - 57) < 0)
    operator delete(*(void **)(v52 - 80));
  if (*(char *)(v52 - 89) < 0)
    operator delete(*(void **)(v52 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v52 - 121) < 0)
    operator delete(*(void **)(v52 - 144));
  if (*(char *)(v52 - 153) < 0)
    operator delete(*(void **)(v52 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(exception_object);
}

void sub_1DE45B878()
{
  JUMPOUT(0x1DE45B850);
}

void sub_1DE45B880()
{
  JUMPOUT(0x1DE45B860);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  if (a4 || !*(_BYTE *)(a1 + 17))
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::PropagateCpu(a1, a2, a3, a4);
  else
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::PropagateBNNS(a1, a2, a3, 0, a5);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::PropagateBNNS(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  void *v5;
  uint64_t result;
  const char *v7;
  _QWORD v8[34];

  v5 = *(void **)(a1 + 152);
  if (!v5)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateBNNS", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)0x45D, "bnns_filter_", a5);
  if (a4)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8, "PropagateBNNS", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1120);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "BNNS only supports one batch");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  result = BNNSFilterApplyBatch(v5, *(int *)(a2 + 20), *(const void **)(a2 + 8), *(int *)(a2 + 24), *(void **)(a3 + 8), *(int *)(a3 + 24));
  if ((_DWORD)result)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateBNNS", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)0x464, "ret == 0", v7);
  return result;
}

void sub_1DE45B960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::PropagateCpu(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v7;
  int v8;
  const char *v9;
  int v10;
  int v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  std::vector<int>::pointer end;
  int v32;
  int v33;
  int v34;
  int i;
  int v36;
  int v37;
  int v38;
  int *value;
  int v40;
  int v41;
  std::vector<int>::pointer v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  int *v48;
  int *v49;
  int v50;
  std::vector<int>::pointer begin;
  uint64_t v52;
  unint64_t v53;
  int64_t v54;
  unint64_t v55;
  char *v56;
  int *v57;
  int *v58;
  int v59;
  int v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64x2_t v69;
  int64x2_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  int v74;
  int *v75;
  uint64_t v76;
  int v77;
  int64x2_t v78;
  int32x2_t v79;
  uint64_t v80;
  int v81;
  const char *v82;
  uint64_t v83;
  uint64_t *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  int v90;
  uint64_t v91;
  int v92;
  int v93;
  std::vector<int> __p;
  __int128 v95;

  v7 = *(_DWORD *)(a1 + 104);
  v8 = *(_DWORD *)(a1 + 108);
  v9 = (const char *)((v7 + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120));
  v10 = (v8 + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124);
  v83 = (v10 + 1);
  v11 = *(_DWORD *)(a1 + 8);
  v86 = v83 * ((_DWORD)v9 + 1);
  v87 = (*(_DWORD *)(a1 + 12) / v86);
  if (kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184)) != (_DWORD)v87)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateCpu", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)0x478, "num_filters == num_output_fmaps", v13);
  v14 = *(unsigned int *)(a2 + 20);
  v88 = a2;
  v89 = (uint64_t *)(a1 + 296);
  v15 = *(_QWORD *)(a1 + 296);
  v16 = *(int *)(a1 + 80);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 304) - v15) >> 3) < v16)
  {
    std::vector<std::vector<kaldi::CuMatrix<float>>>::resize(v89, v16);
    v15 = *v89;
  }
  v80 = ((_DWORD)v9 + 1);
  v81 = v10;
  v82 = v9;
  v90 = a4;
  v17 = (uint64_t *)(v15 + 24 * a4);
  if (0xAAAAAAAAAAAAAAABLL * ((v17[1] - *v17) >> 4) < v86)
    std::vector<kaldi::CuMatrix<float>>::resize(v17, v86);
  if (v86 >= 1)
  {
    v18 = 0;
    do
    {
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 24 * v90) + v18;
      v20 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
      kaldi::CuMatrix<float>::Resize(v19, v14, v20, 0, 0);
      v18 += 48;
    }
    while (48 * v86 != v18);
  }
  v85 = (uint64_t *)(a1 + 160);
  v21 = *(int *)(a1 + 80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 4) < v21)
    std::vector<kaldi::CuMatrix<float>>::resize(v85, v21);
  v22 = *(_DWORD *)(a1 + 132);
  v23 = *(_DWORD *)(a1 + 108);
  v24 = *(_DWORD *)(a1 + 116);
  v93 = -v22;
  if (v22 + v23 - v24 < -v22)
    goto LABEL_69;
  v25 = 0;
  v26 = *(_DWORD *)(a1 + 128);
  v27 = *(_DWORD *)(a1 + 104);
  v28 = *(_DWORD *)(a1 + 112);
  v92 = v11 / (v8 * v7);
  do
  {
    v29 = -v26;
    if (v26 + v27 - v28 < -v26)
      goto LABEL_68;
    v30 = v25;
    do
    {
      v91 = v30;
      memset(&__p, 0, sizeof(__p));
      if (v92 < 1)
        goto LABEL_64;
      end = 0;
      v32 = 0;
      v33 = v29 + v27 * v93;
      v34 = *(_DWORD *)(a1 + 116);
      do
      {
        if (v34 < 1)
          goto LABEL_63;
        for (i = 0; i < v34; ++i)
        {
          if (v28 < 1)
            continue;
          v36 = 0;
          v37 = i + v93;
          do
          {
            if (v37 < 0 || (v38 = *(_DWORD *)(a1 + 108), v37 >= v38))
            {
              value = __p.__end_cap_.__value_;
            }
            else
            {
              value = __p.__end_cap_.__value_;
              if (v36 + v29 >= 0)
              {
                v40 = *(_DWORD *)(a1 + 104);
                if (v36 + v29 < v40)
                {
                  v41 = v33 + v36 + (i + v38 * v32) * v40;
                  if (end >= __p.__end_cap_.__value_)
                  {
                    begin = __p.__begin_;
                    v52 = end - __p.__begin_;
                    v53 = v52 + 1;
                    if ((unint64_t)(v52 + 1) >> 62)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v54 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
                    if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v53)
                      v53 = v54 >> 1;
                    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
                      v55 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v55 = v53;
                    if (v55)
                    {
                      v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__end_cap_, v55);
                      begin = __p.__begin_;
                      end = __p.__end_;
                    }
                    else
                    {
                      v56 = 0;
                    }
                    v57 = (int *)&v56[4 * v52];
                    *v57 = v41;
                    v58 = v57 + 1;
                    while (end != begin)
                    {
                      v59 = *--end;
                      *--v57 = v59;
                    }
                    __p.__begin_ = v57;
                    __p.__end_ = v58;
                    __p.__end_cap_.__value_ = (int *)&v56[4 * v55];
                    if (begin)
                      operator delete(begin);
                    end = v58;
                  }
                  else
                  {
                    *end++ = v41;
                  }
                  goto LABEL_60;
                }
              }
            }
            if (end >= value)
            {
              v42 = __p.__begin_;
              v43 = end - __p.__begin_;
              v44 = v43 + 1;
              if ((unint64_t)(v43 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v45 = (char *)value - (char *)__p.__begin_;
              if (v45 >> 1 > v44)
                v44 = v45 >> 1;
              if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
                v46 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v46 = v44;
              if (v46)
              {
                v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__end_cap_, v46);
                v42 = __p.__begin_;
                end = __p.__end_;
              }
              else
              {
                v47 = 0;
              }
              v48 = (int *)&v47[4 * v43];
              *v48 = -1;
              v49 = v48 + 1;
              while (end != v42)
              {
                v50 = *--end;
                *--v48 = v50;
              }
              __p.__begin_ = v48;
              __p.__end_ = v49;
              __p.__end_cap_.__value_ = (int *)&v47[4 * v46];
              if (v42)
                operator delete(v42);
              end = v49;
            }
            else
            {
              *end++ = -1;
            }
LABEL_60:
            __p.__end_ = end;
            ++v36;
            v28 = *(_DWORD *)(a1 + 112);
          }
          while (v36 < v28);
          v34 = *(_DWORD *)(a1 + 116);
        }
LABEL_63:
        ++v32;
      }
      while (v32 != v92);
LABEL_64:
      kaldi::CuMatrixBase<float>::CopyCols(*(_QWORD *)(*v89 + 24 * v90) + 48 * v91, v88, (unsigned int **)&__p, v12, v13);
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      v30 = v91 + 1;
      v29 += *(_DWORD *)(a1 + 120);
      v27 = *(_DWORD *)(a1 + 104);
      v26 = *(_DWORD *)(a1 + 128);
      v28 = *(_DWORD *)(a1 + 112);
    }
    while (v29 <= v26 + v27 - v28);
    v23 = *(_DWORD *)(a1 + 108);
    v22 = *(_DWORD *)(a1 + 132);
    v25 = v91 + 1;
    v24 = *(_DWORD *)(a1 + 116);
LABEL_68:
    v93 += *(_DWORD *)(a1 + 124);
  }
  while (v93 <= v22 + v23 - v24);
LABEL_69:
  kaldi::CuMatrix<float>::Resize(*v85 + 48 * v90, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 3u, 0);
  v60 = v87;
  if (v86 >= 1)
  {
    v61 = 0;
    v62 = 0;
    do
    {
      v63 = *(_QWORD *)(a1 + 160) + 48 * v90;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, v63, 0, *(_DWORD *)(v63 + 20), v62, v60);
      kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&__p, *(_QWORD *)(a1 + 192), v64, v65, v66, 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&__p, *(_QWORD *)(*(_QWORD *)(a1 + 296) + 24 * v90) + v61, 111, *(unsigned int **)(a1 + 184), (const char *)0x70, 1.0, 1.0);
      __p.__begin_ = (std::vector<int>::pointer)&unk_1EA926508;
      *(_OWORD *)&__p.__end_ = 0u;
      v95 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&__p);
      v60 = v87;
      v62 = (const char *)((_DWORD)v62 + v87);
      v61 += 48;
    }
    while (48 * v86 != v61);
  }
  std::vector<int>::vector(&__p, *(int *)(a1 + 12));
  if ((int)v87 >= 1)
  {
    v68 = 0;
    v69 = (uint64x2_t)vdupq_n_s64(v80 - 1);
    v70 = vdupq_n_s64(2uLL);
    v71 = 1;
    do
    {
      if ((v81 & 0x80000000) == 0)
      {
        v72 = 0;
        v73 = &__p.__begin_[v71];
        v74 = v68;
        do
        {
          if ((v82 & 0x80000000) == 0)
          {
            v75 = v73;
            v76 = (v80 + 1) & 0x1FFFFFFFELL;
            v77 = v74;
            v78 = (int64x2_t)xmmword_1DEC3D320;
            do
            {
              v79 = vmovn_s64((int64x2_t)vcgeq_u64(v69, (uint64x2_t)v78));
              if ((v79.i8[0] & 1) != 0)
                *(v75 - 1) = v77;
              v67 = v79.u32[1];
              if ((v79.i8[4] & 1) != 0)
              {
                v67 = (v87 + v77);
                *v75 = v67;
              }
              v78 = vaddq_s64(v78, v70);
              v77 += 2 * v87;
              v75 += 2;
              v76 -= 2;
            }
            while (v76);
          }
          ++v72;
          v74 += v87 * v80;
          v73 += (int)v82 + 1;
        }
        while (v72 != v83);
      }
      ++v68;
      v71 += (int)v83 * (uint64_t)(int)v80;
    }
    while (v68 != v87);
  }
  kaldi::CuMatrixBase<float>::CopyCols(a3, *v85 + 48 * v90, (unsigned int **)&__p, v67, v82);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_1DE45C064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::BackpropagateCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  const char *v16;
  int v17;
  uint64_t v18;
  const char *v19;
  int v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  int *v24;
  int v25;
  uint64_t v26;
  int v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  kaldi::CuWorkspace *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int j;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  const char *v52;
  kaldi::CuWorkspace *ChildWorkspace;
  int v54;
  int v55;
  int v56;
  int v57;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  void *v63;
  __int128 v64;
  __int128 v65;
  void **v66;
  _QWORD v67[4];
  _QWORD v68[3];
  std::vector<int> v69;

  v57 = *(_DWORD *)(a1 + 104);
  v10 = (v57 + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120);
  v11 = v10 + 1;
  v56 = *(_DWORD *)(a1 + 108);
  v12 = (v56 + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124);
  v13 = (v12 + 1);
  v14 = v13 * (v10 + 1);
  v59 = *(_DWORD *)(a1 + 8);
  v15 = (*(_DWORD *)(a1 + 12) / v14);
  if (kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184)) != (_DWORD)v15)
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateCpu", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)0x51D, "num_filters == num_output_fmaps", v16);
  v61 = *(_DWORD *)(a2 + 20);
  v17 = a6;
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 160) + 48 * a6, *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 16), 3u, 0);
  std::vector<int>::vector(&v69, *(int *)(a1 + 12));
  if ((int)v15 >= 1)
  {
    v20 = 0;
    v21 = 0;
    for (i = 0; i != v15; ++i)
    {
      if ((v12 & 0x80000000) == 0)
      {
        v23 = 0;
        v24 = &v69.__begin_[v21];
        v25 = v20;
        do
        {
          v26 = (v10 + 1);
          v27 = v25;
          v28 = v24;
          if ((v10 & 0x80000000) == 0)
          {
            do
            {
              *v28 = v27;
              v28 += v15;
              ++v27;
              --v26;
            }
            while (v26);
          }
          ++v23;
          v24 += v11 * v15;
          v25 += v11;
        }
        while (v23 != v13);
      }
      ++v21;
      v20 += v14;
    }
  }
  kaldi::CuMatrixBase<float>::CopyCols(*(_QWORD *)(a1 + 160) + 48 * a6, a4, (unsigned int **)&v69, v18, v19);
  std::vector<kaldi::CuSubMatrix<float>>::vector(v68, v14);
  v29 = *(_QWORD *)(a1 + 24);
  if (a6 >= (unint64_t)((*(_QWORD *)(a1 + 32) - v29) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v66, "BackpropagateCpu", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1327);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"Convolutional2DComponent needs workspace set to perform back-propagation", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v66);
  }
  ChildWorkspace = (kaldi::CuWorkspace *)kaldi::CuWorkspace::GetChildWorkspace(*(kaldi::CuWorkspace **)(v29 + 8 * a6), -1);
  if (v14 >= 1)
  {
    v30 = 0;
    v31 = 0;
    do
    {
      v32 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
      kaldi::CuWorkspace::GetMatrix<float>(ChildWorkspace, v61, v32, 0, (uint64_t)&v66);
      v33 = v68[0] + v30;
      if ((void ***)(v68[0] + v30) != &v66)
      {
        *(_QWORD *)(v33 + 8) = v67[0];
        *(_OWORD *)(v33 + 16) = *(_OWORD *)&v67[1];
        *(_QWORD *)(v33 + 32) = v67[3];
      }
      v66 = (void **)&unk_1EA926508;
      memset(v67, 0, sizeof(v67));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v66);
      v34 = *(_QWORD *)(a1 + 160) + 48 * v17;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v66, v34, 0, *(_DWORD *)(v34 + 20), v31, v15);
      kaldi::CuMatrixBase<float>::AddMatMat<signed char>(v68[0] + v30, (uint64_t)&v66, 111, *(unsigned int **)(a1 + 184), (const char *)0x6F, 1.0, 0.0);
      v66 = (void **)&unk_1EA926508;
      memset(v67, 0, sizeof(v67));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v66);
      v31 = (const char *)((_DWORD)v31 + v15);
      v30 += 40;
    }
    while (40 * v14 != v30);
  }
  v35 = *(_DWORD *)(a1 + 132);
  v36 = *(_DWORD *)(a1 + 108);
  v37 = *(_DWORD *)(a1 + 116);
  v55 = -v35;
  v38 = ChildWorkspace;
  if (v35 + v36 - v37 >= -v35)
  {
    v39 = 0;
    v40 = *(_DWORD *)(a1 + 128);
    v41 = *(_DWORD *)(a1 + 104);
    v42 = *(_DWORD *)(a1 + 112);
    v54 = v59 / (v56 * v57);
    do
    {
      v43 = -v40;
      if (v40 + v41 - v42 >= -v40)
      {
        v62 = v39;
        do
        {
          if (v54 >= 1)
          {
            v44 = 0;
            v45 = 0;
            v60 = v43 + v41 * v55;
            do
            {
              if (v37 >= 1)
              {
                for (j = 0; j < v37; ++j)
                {
                  if (v42 >= 1)
                  {
                    v47 = 0;
                    v48 = j + v55;
                    do
                    {
                      if ((v48 & 0x80000000) == 0)
                      {
                        v49 = *(_DWORD *)(a1 + 108);
                        if (v48 < v49 && v43 + v47 >= 0)
                        {
                          v50 = *(_DWORD *)(a1 + 104);
                          if (v43 + v47 < v50)
                          {
                            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v66, v68[0] + 40 * v62, 0, *(_DWORD *)(v68[0] + 40 * v62 + 20), (const char *)(v45 + v47), 1);
                            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v63, a5, 0, *(_DWORD *)(a5 + 20), (const char *)(v60 + v47 + v50 * (j + v44 * v49)), 1);
                            kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v63, (uint64_t)&v66, 111, v51, v52, 1.0, 1.0);
                            v63 = &unk_1EA926508;
                            v64 = 0u;
                            v65 = 0u;
                            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v63);
                            v66 = (void **)&unk_1EA926508;
                            memset(v67, 0, sizeof(v67));
                            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v66);
                            v42 = *(_DWORD *)(a1 + 112);
                          }
                        }
                      }
                      ++v47;
                    }
                    while (v47 < v42);
                    v37 = *(_DWORD *)(a1 + 116);
                    v45 += v47;
                  }
                }
              }
              ++v44;
            }
            while (v44 != v54);
            v41 = *(_DWORD *)(a1 + 104);
            v40 = *(_DWORD *)(a1 + 128);
            v38 = ChildWorkspace;
          }
          ++v62;
          v43 += *(_DWORD *)(a1 + 120);
        }
        while (v43 <= v40 + v41 - v42);
        v36 = *(_DWORD *)(a1 + 108);
        v35 = *(_DWORD *)(a1 + 132);
        v39 = v62;
      }
      v55 += *(_DWORD *)(a1 + 124);
    }
    while (v55 <= v35 + v36 - v37);
  }
  if (v38)
  {
    kaldi::CuWorkspace::~CuWorkspace(v38);
    MEMORY[0x1DF0ED014]();
  }
  v66 = (void **)v68;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v66);
  if (v69.__begin_)
  {
    v69.__end_ = v69.__begin_;
    operator delete(v69.__begin_);
  }
}

void sub_1DE45C634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, kaldi::CuWorkspace *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  void *v24;

  a22 = v22 - 136;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  v24 = *(void **)(v22 - 112);
  if (v24)
  {
    *(_QWORD *)(v22 - 104) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 148) = a3;
  *(_DWORD *)(result + 144) = a2;
  *(_BYTE *)(result + 344) = 0;
  return result;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::NormalizeGradients(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  float v7;
  int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;

  v7 = a6;
  v9 = *(_DWORD *)(a1 + 144);
  if (v9 == 3)
  {
    if (a6 >= 0.0 && a6 <= 1.0)
    {
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * a2), *(_QWORD *)(a1 + 248) + 48 * a2, a6);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * a2), *(_QWORD *)(a1 + 272) + 32 * a2, v7, v12, v13, v14);
    }
  }
  else if (v9 == 2)
  {
    if (a6 > 0.0)
    {
      v15 = a2;
      if (*(_BYTE *)(a1 + 84))
        v7 = (float)*(int *)(*(_QWORD *)(a1 + 320) + 4 * a2) * a6;
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * a2), (unsigned int *)(*(_QWORD *)(a1 + 248) + 48 * a2), v7, a3, a4, a5);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v15), (_DWORD *)(*(_QWORD *)(a1 + 272) + 32 * v15), v16, v17, v18, v7);
    }
  }
  else if (v9 == 1 && a6 > 0.0)
  {
    v10 = a2;
    if (*(_BYTE *)(a1 + 84))
      v7 = (float)*(int *)(*(_QWORD *)(a1 + 320) + 4 * a2) * a6;
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * a2), v7);
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v10), v7);
  }
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradientsCpu(a1, a2, a3, a4, a5);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;

  if (!*(_BYTE *)(a1 + 344))
  {
    v2 = *(_DWORD *)(a1 + 144);
    v3 = *(_DWORD *)(a1 + 80);
    if (v3 > 1)
      v4 = v3 + 1;
    else
      v4 = 1;
    v5 = (_QWORD *)(a1 + 200);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 200, v4);
    v6 = (_QWORD *)(a1 + 224);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize(a1 + 224, v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 272), v4);
    if (v4 >= 1)
    {
      v7 = 0;
      v8 = v2 & 0xFFFFFFFE;
      do
      {
        v9 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
        v10 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
        v11 = operator new();
        kaldi::CuMatrix<float>::CuMatrix(v11, v9, v10, 0, 0, (const char *)1);
        v12 = *(_QWORD *)(*v5 + 8 * v7);
        *(_QWORD *)(*v5 + 8 * v7) = v11;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
        v13 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
        v14 = (_QWORD *)operator new();
        v14[2] = 0;
        v14[3] = 0;
        *v14 = &unk_1EA92DFD8;
        v14[1] = 0;
        kaldi::CuVector<float>::Resize((uint64_t)v14, v13, 0, v15, v16);
        v17 = *(_QWORD *)(*v6 + 8 * v7);
        *(_QWORD *)(*v6 + 8 * v7) = v14;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
        if (v8 == 2)
        {
          v18 = *(_QWORD *)(a1 + 248) + 48 * v7;
          v19 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
          v20 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
          kaldi::CuMatrix<float>::Resize(v18, v19, v20, 1u, 0);
          v21 = *(_QWORD *)(a1 + 272) + 32 * v7;
          v22 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
          kaldi::CuVector<float>::Resize(v21, v22, 1u, v23, v24);
          if (*(_DWORD *)(a1 + 144) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 248) + 48 * v7, v25, v26, v27, v28, 1.0);
            kaldi::CuVectorBase<float>::Set(*(_QWORD *)(a1 + 272) + 32 * v7, 1.0);
          }
        }
        ++v7;
      }
      while (v7 != v4);
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 320), v4);
    *(_BYTE *)(a1 + 344) = 1;
  }
}

void sub_1DE45CB3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradientsCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  __int128 v22;
  __int128 v23;

  v9 = (*(_DWORD *)(a1 + 104) + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120) + 1;
  v10 = v9 + v9 * ((*(_DWORD *)(a1 + 108) + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124));
  v11 = *(_DWORD *)(a1 + 12) / v10;
  if (kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184)) != v11)
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradientsCpu", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)0x2C6, "num_filters == num_output_fmaps", v12);
  *(_DWORD *)(*(_QWORD *)(a1 + 320) + 4 * a5) = *(_DWORD *)(a2 + 20);
  v13 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(*(_QWORD *)(v13 + 8 * a5) + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * a5) + 24) = a4;
  kaldi::CuMatrixBase<float>::SetZero(*(_QWORD *)(v13 + 8 * a5));
  kaldi::CuVectorBase<float>::SetZero(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * a5));
  if (v10 >= 1)
  {
    v14 = 0;
    v15 = 0;
    v16 = 48 * v10;
    do
    {
      v17 = *(_QWORD *)(a1 + 160) + 48 * a5;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v21, v17, 0, *(_DWORD *)(v17 + 20), v15, v11);
      kaldi::CuMatrixBase<float>::AddMatMat(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * a5), (uint64_t)&v21, CblasTrans, *(_QWORD *)(*(_QWORD *)(a1 + 296) + 24 * a5) + v14, (const char *)0x6F, 1.0, 1.0);
      kaldi::CuVectorBase<float>::AddRowSumMat(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * a5), (uint64_t)&v21, 1.0, 1.0, v18, v19, v20);
      v21 = &unk_1EA926508;
      v22 = 0u;
      v23 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v21);
      v15 = (const char *)((_DWORD)v15 + v11);
      v14 += 48;
    }
    while (v16 != v14);
  }
}

void sub_1DE45CD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _OWORD *v10;

  a10 = &unk_1EA926508;
  *v10 = 0u;
  v10[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateWeights()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 752);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unsupported");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  int v18;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[48];
  _BYTE v24[48];

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v24, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v23, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  (*(void (**)(uint64_t, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v8 + 112))(v8, a2, v24, 0);
  (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v8 + 128))(v8, a2, v24, a3, v23, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 232))(v8, a2, a3, 0, 0);
  LODWORD(a3) = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  v9 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)) * a3;
  kaldi::Vector<float>::Resize((void **)a4, *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16) + v9, 0, v10, v11);
  v21 = 0;
  v22 = 0;
  if (v9 > *(_DWORD *)(a4 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v14);
  v20 = *(void **)a4;
  LODWORD(v21) = v9;
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v20, **(_QWORD **)(v8 + 200), v12, v13, v14);
  v18 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16);
  v21 = 0;
  v22 = 0;
  if (v18 + v9 > *(_DWORD *)(a4 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v17);
  v20 = (void *)(*(_QWORD *)a4 + 4 * (int)v9);
  LODWORD(v21) = v18;
  kaldi::CuVectorBase<float>::CopyToVec<float>(**(_DWORD ***)(v8 + 224), (uint64_t)&v20, v15, v16, v17);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v23);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v24);
}

void sub_1DE45CF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

float kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;

  if (!*(_BYTE *)(a1 + 84))
    return *(float *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 352);
  v3 = *(_QWORD *)(a1 + 360) - v2;
  if (!v3)
    return NAN;
  v4 = v3 >> 2;
  if ((int)v4 <= a2)
    return NAN;
  v5 = v4 - 1;
  if (a2 >= 0)
    v5 = a2;
  return *(float *)(v2 + 4 * v5);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  int v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD v26[34];

  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16);
  v7 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  result = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
  *a3 = v6 + result * v7;
  v13 = *(_QWORD *)(a1 + 200);
  v14 = *(_QWORD *)(a1 + 208) - v13;
  if (v14 && (v15 = *(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)) != 0)
  {
    v16 = v14 >> 3;
    v17 = v15 >> 3;
    v18 = *(_DWORD *)(a1 + 80);
    if (v18 == 1)
      v18 = 0;
    v19 = v18;
    v20 = v17 - 1;
    if (v16 - 1 != v18 || v20 != v18)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26, "CountZeroCorr", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 212);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      v24 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"  ", 2);
      v25 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26);
    }
    v22 = kaldi::CuMatrixBase<float>::CountZeros(*(_QWORD *)(v13 + 8 * v18), v9, v10, v11, v12);
    result = kaldi::CuVectorBase<float>::CountZeros(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v19));
    v23 = result + v22;
  }
  else
  {
    v23 = 0;
  }
  *a2 = v23;
  return result;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::VectorizeWeightsCorrs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  int *v11;
  uint64_t v12;
  const char *v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v37, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 232);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v37, "Weights are already vectorized");
LABEL_31:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v37);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v37, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 235);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"Performing vectorization of convolutional 2d component", 54);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v37);
  }
  v8 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  v9 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)) * v8;
  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16) + v9;
  if (v10 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v37, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 238);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v37, "(nlinparams + bias_->Dim()) == NumParams()");
    goto LABEL_31;
  }
  v11 = *(int **)(a1 + 184);
  v12 = operator new();
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v12, v11);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), v12);
  v39 = 0;
  v40 = 0;
  v37 = &unk_1EA926538;
  v38 = 0;
  if (v9 > *(_DWORD *)(a3 + 16))
    goto LABEL_34;
  v38 = *(_QWORD *)(a3 + 8);
  LODWORD(v39) = v9;
  v40 = *(_QWORD *)(a3 + 24);
  kaldi::CuVectorBase<float>::Set((uint64_t)&v37, *(float *)(a1 + 136));
  v14 = *(_DWORD *)(a3 + 16) - v9;
  *(_QWORD *)(a3 + 8) += 4 * (int)v9;
  *(_DWORD *)(a3 + 16) = v14;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 192), a2, (uint64_t *)&v37);
  v15 = v37;
  v37 = 0;
  v16 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    v17 = v37;
    v37 = 0;
    if (v17)
      (*(void (**)(void *))(*(_QWORD *)v17 + 16))(v17);
  }
  v18 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16);
  v39 = 0;
  v37 = &unk_1EA926538;
  if (v18 > *(_DWORD *)(a3 + 16))
LABEL_34:
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v13);
  v38 = *(_QWORD *)(a3 + 8);
  LODWORD(v39) = v18;
  v40 = *(_QWORD *)(a3 + 24);
  kaldi::CuVectorBase<float>::Set((uint64_t)&v37, *(float *)(a1 + 140));
  v19 = *(int *)(*(_QWORD *)(a1 + 192) + 16);
  v20 = *(_DWORD *)(a3 + 16) - v19;
  *(_QWORD *)(a3 + 8) += 4 * v19;
  *(_DWORD *)(a3 + 16) = v20;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateBNNSFilter(a1);
  v21 = a4[1];
  v22 = (v21 - *a4) >> 5;
  if (v22 != (uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 3
    || v22 != (uint64_t)(*(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)) >> 3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v37, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 262);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v37, "veccorrs->size() == filters_grad_.size() && veccorrs->size() == bias_grad_.size()");
    goto LABEL_31;
  }
  if (v21 == *a4)
    goto LABEL_27;
  v23 = 0;
  do
  {
    v24 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v23) + 16)
        + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v23) + 16)
        * *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v23) + 20);
    if (v24 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v37, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 264);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v37, "(filters_grad_[ic]->NumRows() * filters_grad_[ic]->NumCols() + bias_grad_[ic]->Dim()) == NumParams()");
      goto LABEL_31;
    }
    ++v23;
    v25 = *a4;
    v26 = a4[1];
  }
  while (v23 < (v26 - *a4) >> 5);
  if (v26 != v25)
  {
    v27 = 0;
    do
    {
      v28 = v25 + 32 * v27;
      kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 200) + 8 * v27), v28, (uint64_t *)&v37);
      v29 = *(_QWORD *)(a1 + 200);
      v30 = v37;
      v37 = 0;
      v31 = *(_QWORD *)(v29 + 8 * v27);
      *(_QWORD *)(v29 + 8 * v27) = v30;
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
      v32 = v37;
      v37 = 0;
      if (v32)
        (*(void (**)(void *))(*(_QWORD *)v32 + 24))(v32);
      kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 224) + 8 * v27), v28, (uint64_t *)&v37);
      v33 = *(_QWORD *)(a1 + 224);
      v34 = v37;
      v37 = 0;
      v35 = *(_QWORD *)(v33 + 8 * v27);
      *(_QWORD *)(v33 + 8 * v27) = v34;
      if (v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
      v36 = v37;
      v37 = 0;
      if (v36)
        (*(void (**)(void *))(*(_QWORD *)v36 + 16))(v36);
      ++v27;
      v25 = *a4;
    }
    while (v27 < (a4[1] - *a4) >> 5);
  }
LABEL_27:
  *(_BYTE *)(a1 + 16) = 1;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v37, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 280);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"Done  vectorization of convolutional 2D component", 49);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v37);
  }
}

void sub_1DE45D608(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent(v2, a1);
  return v2;
}

void sub_1DE45D6A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit(uint64_t a1)
{
  return kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit(a1 - 88);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>(v2, a1);
  return v2;
}

void sub_1DE45D710(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit(uint64_t a1)
{
  return kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit(a1 - 96);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(_QWORD *)(*(_QWORD *)(a1 + 208) - 8));
  return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(_QWORD *)(*(_QWORD *)(a1 + 232) - 8));
}

double kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  *(_OWORD *)(a1 + 56) = xmmword_1DEC3D450;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)a1 = &unk_1EA92A950;
  *(_QWORD *)(a1 + 88) = &unk_1EA92AA88;
  *(_QWORD *)(a1 + 96) = &unk_1EA92AAB0;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a1 + 136) = _D1;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 329) = 0u;
  return result;
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = off_1EA92D6D8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1EA929750;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1EA92AA88;
  *(_QWORD *)(a1 + 96) = &unk_1EA92AAB0;
  *(_QWORD *)a1 = &unk_1EA92A950;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AssignMembers<kaldi::QuantizedMatrix<short>>(a1, a2);
  return a1;
}

void sub_1DE45D964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  void *v15;
  uint64_t v16;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(_QWORD *)(v10 + 360) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(_QWORD *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v16 = *(_QWORD *)(v10 + 192);
  *(_QWORD *)(v10 + 192) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(v10 + 184), 0);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v12);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AssignMembers<kaldi::QuantizedMatrix<short>>(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[34];

  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (a1 == a2)
  {
    *(_BYTE *)(a1 + 344) = 0;
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(_QWORD *)(a2 + 328), (uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 2);
    *(_BYTE *)(a1 + 344) = 0;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(_QWORD *)(a2 + 360), (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2);
  }
  v4 = *(int **)(a2 + 184);
  if (v4)
  {
    v5 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix(v5, v4);
    v6 = (uint64_t *)(a1 + 184);
    v7 = v5;
  }
  else
  {
    v6 = (uint64_t *)(a1 + 184);
    v7 = 0;
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](v6, v7);
  if (*(_QWORD *)(a2 + 192))
  {
    v8 = operator new();
    v9 = *(unsigned int *)(*(_QWORD *)(a2 + 192) + 16);
    *(_QWORD *)v8 = &unk_1EA92DFD8;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    kaldi::CuVector<float>::Resize(v8, v9, 1u, v10, v11);
    v15 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v8;
    if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
      v8 = *(_QWORD *)(a1 + 192);
    }
    kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)v8, *(_QWORD *)(a2 + 192), v12, v13, v14);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateBNNSFilter(a1);
  if (*(_QWORD *)(a2 + 384) != *(_QWORD *)(a2 + 376))
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v17, "AssignMembers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1451);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v17);
  }
}

void sub_1DE45DC1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void **v8;

  *(_QWORD *)(a1 + 88) = &unk_1EA92AA88;
  v2 = a1 + 88;
  *(_QWORD *)a1 = &unk_1EA92A950;
  *(_QWORD *)(a1 + 96) = &unk_1EA92AAB0;
  v3 = a1 + 96;
  v4 = *(void **)(a1 + 152);
  if (v4)
  {
    BNNSFilterDestroy(v4);
    *(_QWORD *)(a1 + 152) = 0;
  }
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 376));
  v5 = *(void **)(a1 + 352);
  if (v5)
  {
    *(_QWORD *)(a1 + 360) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 320);
  if (v6)
  {
    *(_QWORD *)(a1 + 328) = v6;
    operator delete(v6);
  }
  v8 = (void **)(a1 + 296);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 272);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 224);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 200);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v7 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  v8 = (void **)(a1 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(a1);
  JUMPOUT(0x1DF0ED014);
}

void `non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(uint64_t a1)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(a1 - 88);
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(a1 - 96);
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(a1 - 88);
  JUMPOUT(0x1DF0ED014);
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(a1 - 96);
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent(v2, a1);
  return v2;
}

void sub_1DE45DE64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  uint64_t v6;
  const char *v7;
  int *v8;
  int *v9;
  uint64_t v10;
  const char *v11;
  BOOL v12;
  int *v13;
  __int128 *v14;
  uint64_t v15;
  BOOL v19;
  BOOL v20;
  BOOL v22;
  BOOL v23;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  float *v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  int v36;
  int v37;
  BOOL v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  const char *v42;
  BOOL v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  unsigned int v55;
  int v56;
  int v57;
  unint64_t v58;
  float v59;
  float v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  unint64_t i;
  float v70;
  float v71;
  float v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  _QWORD *v81;
  __int128 *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  float *v86;
  uint64_t v87;
  uint64_t v88;
  void **v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  _QWORD v93[2];
  uint64_t v94;
  void *__p;
  void *v96;
  __int128 v97;
  uint64_t v98;
  int v99;
  std::string v100;
  int v101;
  float v102;
  int v103;

  v102 = 2.0;
  v103 = -1073741824;
  v101 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 144), &v100);
  v99 = -1;
  v97 = 0uLL;
  v98 = 0;
  v8 = (int *)(a1 + 116);
  v9 = (int *)(a1 + 112);
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_137;
    kaldi::ReadToken(a2, 0, (uint64_t)&v97, v6, v7);
    if (SHIBYTE(v98) < 0)
    {
      v15 = *((_QWORD *)&v97 + 1);
      if (*((_QWORD *)&v97 + 1) == 10)
      {
        if (*(_QWORD *)v97 == 0x61654D736169423CLL && *(_WORD *)(v97 + 8) == 15982)
        {
LABEL_90:
          v30 = (float *)&v103;
          goto LABEL_128;
        }
        v15 = *((_QWORD *)&v97 + 1);
      }
      else if (*((_QWORD *)&v97 + 1) == 13
             && *(_QWORD *)v97 == 0x74536D617261503CLL
             && *(_QWORD *)(v97 + 5) == 0x3E7665646474536DLL)
      {
LABEL_89:
        v30 = (float *)&v101;
LABEL_128:
        kaldi::ReadBasicType<float>(a2, 0, v30, v10, v11);
        goto LABEL_132;
      }
      if (v15 == 11)
      {
        if (*(_QWORD *)v97 == 0x6E6152736169423CLL && *(_QWORD *)(v97 + 3) == 0x3E65676E61527361)
        {
LABEL_91:
          v30 = &v102;
          goto LABEL_128;
        }
        v15 = *((_QWORD *)&v97 + 1);
      }
      if (v15 != 10)
        goto LABEL_102;
      v19 = *(_QWORD *)v97 == 0x654C5870616D463CLL && *(_WORD *)(v97 + 8) == 15982;
      v13 = (int *)(a1 + 104);
      if (v19)
        goto LABEL_131;
      v15 = *((_QWORD *)&v97 + 1);
      if (*((_QWORD *)&v97 + 1) != 10)
        goto LABEL_102;
      v20 = *(_QWORD *)v97 == 0x654C5970616D463CLL && *(_WORD *)(v97 + 8) == 15982;
      v13 = (int *)(a1 + 108);
      if (v20)
        goto LABEL_131;
      if (v98 < 0)
      {
        v31 = *(_QWORD *)v97 == 0x654C58746C69463CLL && *(_WORD *)(v97 + 8) == 15982;
        v13 = (int *)(a1 + 112);
        if (v31)
          goto LABEL_131;
        v15 = *((_QWORD *)&v97 + 1);
        v32 = *(_QWORD *)v97 == 0x654C59746C69463CLL && *(_WORD *)(v97 + 8) == 15982;
        v13 = (int *)(a1 + 116);
        if (v32)
          goto LABEL_131;
        if (v98 < 0)
        {
LABEL_102:
          if (v15 == 11)
          {
            v33 = *(_QWORD *)v97 == 0x745358746C69463CLL && *(_QWORD *)(v97 + 3) == 0x3E7065745358746CLL;
            v13 = (int *)(a1 + 120);
            if (v33)
              goto LABEL_131;
            v15 = *((_QWORD *)&v97 + 1);
            if (*((_QWORD *)&v97 + 1) == 11)
            {
              v34 = *(_QWORD *)v97 == 0x745359746C69463CLL && *(_QWORD *)(v97 + 3) == 0x3E7065745359746CLL;
              v13 = (int *)(a1 + 124);
              if (v34)
                goto LABEL_131;
              if ((v98 & 0x8000000000000000) == 0)
                goto LABEL_113;
            }
          }
          if (v15 != 6)
            goto LABEL_126;
          v35 = *(_DWORD *)v97 == 1684099132 && *(_WORD *)(v97 + 4) == 15960;
          v13 = (int *)(a1 + 128);
          if (v35)
            goto LABEL_131;
LABEL_120:
          if (*((_QWORD *)&v97 + 1) != 6)
            goto LABEL_126;
          v14 = (__int128 *)v97;
        }
        else
        {
LABEL_113:
          if (HIBYTE(v98) != 6)
            goto LABEL_126;
LABEL_5:
          v12 = (_DWORD)v97 == 1684099132 && WORD2(v97) == 15960;
          v13 = (int *)(a1 + 128);
          if (v12)
            goto LABEL_131;
          if (v98 < 0)
            goto LABEL_120;
          if (HIBYTE(v98) != 6)
            goto LABEL_126;
          v14 = &v97;
        }
        v36 = *(_DWORD *)v14;
        v37 = *((unsigned __int16 *)v14 + 2);
        v38 = v36 == 1684099132 && v37 == 15961;
        v13 = (int *)(a1 + 132);
        if (v38)
          goto LABEL_131;
        goto LABEL_126;
      }
      if (HIBYTE(v98) == 6)
        goto LABEL_5;
      if (HIBYTE(v98) != 10)
        goto LABEL_126;
    }
    else
    {
      switch(HIBYTE(v98))
      {
        case 6:
          goto LABEL_5;
        case 0xA:
          if ((_QWORD)v97 == 0x61654D736169423CLL && WORD4(v97) == 15982)
            goto LABEL_90;
          if (HIBYTE(v98) != 6)
            goto LABEL_65;
          goto LABEL_5;
        case 0xB:
          if ((_QWORD)v97 == 0x6E6152736169423CLL && *(_QWORD *)((char *)&v97 + 3) == 0x3E65676E61527361)
            goto LABEL_91;
          if (HIBYTE(v98) == 6)
            goto LABEL_5;
          if (HIBYTE(v98) == 11)
          {
            v22 = (_QWORD)v97 == 0x745358746C69463CLL && *(_QWORD *)((char *)&v97 + 3) == 0x3E7065745358746CLL;
            v13 = (int *)(a1 + 120);
            if (v22)
              goto LABEL_131;
            v23 = (_QWORD)v97 == 0x745359746C69463CLL && *(_QWORD *)((char *)&v97 + 3) == 0x3E7065745359746CLL;
            v13 = (int *)(a1 + 124);
            if (v23)
              goto LABEL_131;
            goto LABEL_126;
          }
LABEL_65:
          if (HIBYTE(v98) != 10)
            goto LABEL_126;
          v25 = (_QWORD)v97 == 0x654C5870616D463CLL && WORD4(v97) == 15982;
          v13 = (int *)(a1 + 104);
          if (v25)
            goto LABEL_131;
          v26 = (_QWORD)v97 == 0x654C5970616D463CLL && WORD4(v97) == 15982;
          v13 = (int *)(a1 + 108);
          if (v26)
            goto LABEL_131;
          break;
        case 0xD:
          if ((_QWORD)v97 != 0x74536D617261503CLL || *(_QWORD *)((char *)&v97 + 5) != 0x3E7665646474536DLL)
            goto LABEL_126;
          goto LABEL_89;
        default:
          goto LABEL_126;
      }
    }
    v27 = (_QWORD)v97 == 0x654C58746C69463CLL && WORD4(v97) == 15982;
    v13 = (int *)(a1 + 112);
    if (v27)
      goto LABEL_131;
    v28 = (_QWORD)v97 == 0x654C59746C69463CLL && WORD4(v97) == 15982;
    v13 = (int *)(a1 + 116);
    if (v28)
      goto LABEL_131;
LABEL_126:
    v39 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v97, "<LearnRateCoef>");
    v30 = (float *)(a1 + 136);
    if (v39)
      goto LABEL_128;
    v40 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v97, "<BiasLearnRateCoef>");
    v30 = (float *)(a1 + 140);
    if (v40)
      goto LABEL_128;
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v97, "<RandomSeed>"))
    {
      v13 = &v99;
LABEL_131:
      kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v13, v10, v11);
      goto LABEL_132;
    }
    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v97, "<GradientNormType>"))
      break;
    kaldi::ReadToken(a2, 0, (uint64_t)&v100, v41, v42);
LABEL_132:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v43 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v97, "<MaxGrad>");
  v30 = (float *)(a1 + 148);
  if (v43)
    goto LABEL_128;
  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v97, "</Component>"))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v93, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 318);
    v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"Unknown token ", 14);
    if (v98 >= 0)
      v82 = &v97;
    else
      v82 = (__int128 *)v97;
    if (v98 >= 0)
      v83 = HIBYTE(v98);
    else
      v83 = *((_QWORD *)&v97 + 1);
    v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)v82, v83);
    v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)" (ParamStddev|BiasMean|BiasRange|FmapXLen|FmapYLen|FiltXLen|FiltYLen|FiltXStep|FiltYStep|ConnectFmap|LearnRateCoef|BiasLearnRateCoef|RandomSeed|GradientNormType|MaxGrad)", 169);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v93);
  }
LABEL_137:
  *(_DWORD *)(a1 + 144) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v100);
  v44 = *(_DWORD *)(a1 + 8);
  v46 = *(_DWORD *)(a1 + 104);
  v45 = *(_DWORD *)(a1 + 108);
  v47 = v44 / (v45 * v46);
  if (v44 % (v45 * v46))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v93, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 330);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0", 45);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v93);
  }
  v48 = (v46 + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120) + 1;
  v49 = *(_DWORD *)(a1 + 12);
  v50 = v48 + v48 * ((v45 + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124));
  v51 = (v49 / v50);
  if (v49 % v50)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v93, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 336);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0", 52);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v93);
  }
  if (v99 >= 1)
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v99);
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v93, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)&v89, v51, (*v9 * v47 * *v8), 0, 0);
  if ((int)v51 >= 1)
  {
    v55 = 0;
    v56 = *v9;
    v57 = *v8;
    do
    {
      if (v56 * v47 * v57 >= 1)
      {
        v58 = 0;
        do
        {
          v59 = *(float *)&v101;
          kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v93, 0, v52, v53, v54);
          if (v91 <= v55 || v58 >= v90)
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v54);
          *((float *)v89 + (int)(v55 * v92) + v58++) = v59 * v60;
          v56 = *v9;
          v57 = *v8;
        }
        while ((uint64_t)v58 < *v9 * v47 * *v8);
      }
      ++v55;
    }
    while (v55 != (_DWORD)v51);
  }
  v62 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v89);
  v63 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v89);
  kaldi::nnet1::NewMatrix<kaldi::QuantizedMatrix<short>>(v62, v63, (uint64_t *)&v86);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), (uint64_t)v86);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat(*(_QWORD *)(a1 + 184), (uint64_t)&v89);
  v86 = 0;
  v87 = 0;
  v88 = 0;
  kaldi::Vector<float>::Resize((void **)&v86, v51, 0, v64, v65);
  if ((int)v51 >= 1)
  {
    for (i = 0; i != v51; ++i)
    {
      v70 = *(float *)&v103;
      v71 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v66, v67, v68);
      if (i >= v87)
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v68);
      v72 = v70 + (v71 + -0.5) * v102;
      v86[i] = v72;
    }
  }
  v73 = operator new();
  v74 = v87;
  *(_QWORD *)(v73 + 16) = 0;
  *(_QWORD *)(v73 + 24) = 0;
  *(_QWORD *)v73 = &unk_1EA92DFD8;
  *(_QWORD *)(v73 + 8) = 0;
  kaldi::CuVector<float>::Resize(v73, v74, 1u, v75, v76);
  v80 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v73;
  if (v80)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 16))(v80);
    v73 = *(_QWORD *)(a1 + 192);
  }
  kaldi::CuVectorBase<float>::CopyFromVec<float>((_DWORD *)v73, (uint64_t)&v86, v77, v78, v79);
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateBNNSFilter(a1);
  kaldi::Vector<float>::Destroy((uint64_t)&v86);
  kaldi::Matrix<float>::~Matrix((uint64_t)&v89);
  if (__p)
  {
    v96 = __p;
    operator delete(__p);
  }
  v89 = (void **)&v94;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v89);
  if (SHIBYTE(v98) < 0)
    operator delete((void *)v97);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
}

void sub_1DE45E9D0()
{
  JUMPOUT(0x1DE45E9F4);
}

void sub_1DE45E9DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  kaldi::Matrix<float>::~Matrix(&v3);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)&v4);
  if (*(char *)(v1 - 153) < 0)
    operator delete(*(void **)(v1 - 176));
  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::NewMatrix<kaldi::QuantizedMatrix<short>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = kaldi::QuantizedMatrix<short>::QuantizedMatrix(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_1DE45EA74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10D0C4068EB0291);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateBNNSFilter(uint64_t a1)
{
  void *v2;
  size_t v3;
  size_t v4;
  int v5;
  int v6;
  size_t v7;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  const void *v21;
  int v22;
  const char *v23;
  int v24;
  void *result;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];
  BNNSFilterParameters v30;
  BNNSFilterParameters filter_params;
  BNNSConvolutionLayerParameters layer_params;
  BNNSImageStackDescriptor out_desc;
  BNNSImageStackDescriptor in_desc;

  v2 = *(void **)(a1 + 152);
  if (v2)
  {
    BNNSFilterDestroy(v2);
    *(_QWORD *)(a1 + 152) = 0;
  }
  v3 = *(int *)(a1 + 104);
  v4 = *(int *)(a1 + 108);
  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(_DWORD *)(a1 + 8) / ((int)v4 * (int)v3);
  v7 = *(int *)(a1 + 128);
  v8 = *(int *)(a1 + 132);
  v9 = *(int *)(a1 + 112);
  v10 = *(int *)(a1 + 116);
  v11 = *(int *)(a1 + 120);
  v12 = *(int *)(a1 + 124);
  v13 = ((int)v3 + 2 * (int)v7 - (int)v9) / (int)v11 + 1;
  v14 = ((int)v4 + 2 * (int)v8 - (int)v10) / (int)v12 + 1;
  in_desc.width = v3;
  in_desc.height = v4;
  v15 = v6;
  in_desc.channels = v6;
  in_desc.row_stride = v3;
  in_desc.image_stride = (int)v4 * (int)v3;
  in_desc.data_type = BNNSDataTypeFloat32;
  *(_QWORD *)&in_desc.data_scale = 1065353216;
  out_desc.width = v13;
  out_desc.height = v14;
  v16 = v5 / (v14 * v13);
  v17 = v16;
  out_desc.channels = v16;
  out_desc.row_stride = v13;
  out_desc.image_stride = v14 * v13;
  out_desc.data_type = BNNSDataTypeFloat32;
  *(_QWORD *)&out_desc.data_scale = 1065353216;
  memset(&layer_params.weights.data_bias, 0, 96);
  layer_params.x_stride = v11;
  layer_params.y_stride = v12;
  layer_params.x_padding = v7;
  layer_params.y_padding = v8;
  layer_params.k_width = v9;
  layer_params.k_height = v10;
  layer_params.in_channels = v6;
  layer_params.out_channels = v16;
  layer_params.weights.data_type = BNNSDataTypeInt16;
  layer_params.weights.data = (const void *)kaldi::QuantizedMatrixBase<signed char>::Data(*(_QWORD *)(a1 + 184));
  v18 = *(_QWORD *)(a1 + 184);
  v19 = *(_QWORD *)(a1 + 192);
  v20 = *(float *)(v18 + 12);
  layer_params.bias.data_type = BNNSDataTypeFloat32;
  layer_params.weights.data_scale = 1.0 / v20;
  layer_params.weights.data_bias = 0.0;
  layer_params.weights.data_table = 0;
  v21 = *(const void **)(v19 + 8);
  *(_QWORD *)&layer_params.bias.data_scale = 1065353216;
  layer_params.bias.data = v21;
  layer_params.bias.data_table = 0;
  layer_params.activation.function = BNNSActivationFunctionIdentity;
  v22 = kaldi::QuantizedMatrixBase<short>::NumCols(v18);
  if ((int)v10 * (uint64_t)(int)v9 * v15 * v17 != kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184))
                                                * v22)
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateBNNSFilter", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)0x43F, "filters_->NumCols() * filters_->NumRows() == (bp.k_width * bp.k_height * bp.in_channels * bp.out_channels)", v23);
  v24 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
  if (v24 == kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)))
  {
    filter_params = *(BNNSFilterParameters *)ymmword_1DEC3DFA8;
    result = BNNSFilterCreateConvolutionLayer(&in_desc, &out_desc, &layer_params, &filter_params);
    *(_QWORD *)(a1 + 152) = result;
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params, "UpdateBNNSFilter", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1090);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&filter_params, (uint64_t)"Unsupported BNNS filter weight arrangement", 42);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params);
    }
    memset(&v30, 0, sizeof(v30));
    v27 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
    v28 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    kaldi::Matrix<float>::Matrix((uint64_t)v29, v27, v28, 1, (const char *)1);
    kaldi::MatrixBase<float>::CopyFromMat<short>((uint64_t)v29, *(unsigned int **)(a1 + 184), 111);
    LODWORD(v27) = kaldi::MatrixBase<float>::NumCols((uint64_t)v29);
    if ((_DWORD)v27 != kaldi::MatrixBase<float>::Stride((uint64_t)v29)
      && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params, "UpdateBNNSFilter", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1096);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&filter_params, (uint64_t)"It did not work", 15);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params);
    }
    layer_params.weights.data = (const void *)v29[0];
    *(_QWORD *)(a1 + 152) = BNNSFilterCreateConvolutionLayer(&in_desc, &out_desc, &layer_params, &v30);
    kaldi::Matrix<float>::~Matrix((uint64_t)v29);
    result = *(void **)(a1 + 152);
  }
  if (!result)
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateBNNSFilter", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)0x458, "bnns_filter_", v26);
  return result;
}

void sub_1DE45EDB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va1);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  void **v11;
  BOOL v12;
  float *v13;
  void *v14;
  BOOL v15;
  BOOL v17;
  BOOL v20;
  BOOL v21;
  uint64_t v22;
  BOOL v23;
  BOOL v25;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  int v39;
  int v40;
  BOOL v41;
  _BOOL4 v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  const char *v54;
  _QWORD *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  _QWORD *v60;
  void **v61;
  uint64_t v62;
  void *__p[2];
  uint64_t v65;
  void *v66[4];

  while (kaldi::Peek(a2, a3) == 60)
  {
    memset(v66, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v66, v7, v8);
    if ((SHIBYTE(v66[2]) & 0x80000000) == 0)
    {
      v11 = v66;
      switch(HIBYTE(v66[2]))
      {
        case 6:
          goto LABEL_133;
        case 9:
LABEL_4:
          v12 = v66[0] == (void *)0x6461724778614D3CLL && LOBYTE(v66[1]) == 62;
          v13 = (float *)(a1 + 148);
          if (!v12)
            goto LABEL_8;
          goto LABEL_109;
        case 0xA:
LABEL_69:
          v28 = v66[0] == (void *)0x654C5870616D463CLL && LOWORD(v66[1]) == 15982;
          v22 = a1 + 104;
          if (v28)
            goto LABEL_138;
          if (HIBYTE(v66[2]) == 6)
            goto LABEL_101;
          if (HIBYTE(v66[2]) != 10)
            goto LABEL_137;
          v29 = v66[0] == (void *)0x654C5970616D463CLL && LOWORD(v66[1]) == 15982;
          v22 = a1 + 108;
          if (!v29)
            goto LABEL_79;
          goto LABEL_138;
        case 0xB:
LABEL_89:
          v32 = v66[0] == (void *)0x745358746C69463CLL && *(void **)((char *)v66 + 3) == (void *)0x3E7065745358746CLL;
          v22 = a1 + 120;
          if (v32)
            goto LABEL_138;
          if (HIBYTE(v66[2]) == 6)
            goto LABEL_101;
          if (HIBYTE(v66[2]) != 11)
            goto LABEL_137;
          v33 = v66[0] == (void *)0x745359746C69463CLL && *(void **)((char *)v66 + 3) == (void *)0x3E7065745359746CLL;
          v22 = a1 + 124;
          if (!v33)
            goto LABEL_137;
          goto LABEL_138;
        case 0xF:
          v34 = v66[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v66 + 7) == (void *)0x3E66656F43657461;
          v13 = (float *)(a1 + 136);
          if (!v34)
            goto LABEL_137;
          goto LABEL_109;
        case 0x12:
LABEL_61:
          if (v66[0] != (void *)0x6E6569646172473CLL
            || v66[1] != (void *)0x7079546D726F4E74
            || LOWORD(v66[2]) != 15973)
          {
            v11 = v66;
            switch(HIBYTE(v66[2]))
            {
              case 6:
                goto LABEL_133;
              case 9:
                goto LABEL_4;
              case 0xA:
                goto LABEL_69;
              case 0xB:
                goto LABEL_89;
              default:
                goto LABEL_137;
            }
          }
          goto LABEL_102;
        case 0x13:
          v25 = v66[0] == (void *)0x61654C736169423CLL
             && v66[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v66[1] + 3) == (void *)0x3E66656F43657461;
          v13 = (float *)(a1 + 140);
          if (!v25)
          {
            switch(HIBYTE(v66[2]))
            {
              case 9:
                goto LABEL_4;
              case 0xA:
                goto LABEL_69;
              case 0xB:
                goto LABEL_89;
              case 0xC:
              case 0xD:
              case 0xE:
              case 0xF:
              case 0x10:
              case 0x11:
                goto LABEL_137;
              case 0x12:
                goto LABEL_61;
              default:
                goto LABEL_8;
            }
          }
          goto LABEL_109;
        default:
          goto LABEL_137;
      }
    }
    v14 = v66[1];
    if (v66[1] == (void *)15)
    {
      v15 = *(_QWORD *)v66[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v66[0] + 7) == 0x3E66656F43657461;
      v13 = (float *)(a1 + 136);
      if (v15)
        goto LABEL_109;
    }
    if (v66[1] == (void *)19)
    {
      v17 = *(_QWORD *)v66[0] == 0x61654C736169423CLL
         && *((_QWORD *)v66[0] + 1) == 0x6F43657461526E72
         && *(_QWORD *)((char *)v66[0] + 11) == 0x3E66656F43657461;
      v13 = (float *)(a1 + 140);
      if (v17)
        goto LABEL_109;
      v14 = v66[1];
    }
    if (v14 == (void *)18)
    {
      if (*(_QWORD *)v66[0] == 0x6E6569646172473CLL
        && *((_QWORD *)v66[0] + 1) == 0x7079546D726F4E74
        && *((_WORD *)v66[0] + 8) == 15973)
      {
LABEL_102:
        __p[0] = 0;
        __p[1] = 0;
        v65 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p, v9, v10);
        *(_DWORD *)(a1 + 144) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v65) < 0)
          operator delete(__p[0]);
        goto LABEL_139;
      }
      v14 = v66[1];
    }
    if (v14 != (void *)9)
      goto LABEL_39;
    v20 = *(_QWORD *)v66[0] == 0x6461724778614D3CLL && *((_BYTE *)v66[0] + 8) == 62;
    v13 = (float *)(a1 + 148);
    if (!v20)
    {
      v14 = v66[1];
LABEL_39:
      if (v14 == (void *)10)
      {
        v21 = *(_QWORD *)v66[0] == 0x654C5870616D463CLL && *((_WORD *)v66[0] + 4) == 15982;
        v22 = a1 + 104;
        if (v21)
          goto LABEL_138;
        v14 = v66[1];
        if (v66[1] == (void *)10)
        {
          v23 = *(_QWORD *)v66[0] == 0x654C5970616D463CLL && *((_WORD *)v66[0] + 4) == 15982;
          v22 = a1 + 108;
          if (v23)
            goto LABEL_138;
          if ((HIBYTE(v66[2]) & 0x80) == 0)
          {
            if (HIBYTE(v66[2]) != 6)
            {
              if (HIBYTE(v66[2]) != 10)
                goto LABEL_137;
LABEL_79:
              v30 = v66[0] == (void *)0x654C58746C69463CLL && LOWORD(v66[1]) == 15982;
              v22 = a1 + 112;
              if (!v30)
              {
                v31 = v66[0] == (void *)0x654C59746C69463CLL && LOWORD(v66[1]) == 15982;
                v22 = a1 + 116;
                if (!v31)
                  goto LABEL_137;
              }
LABEL_138:
              kaldi::ReadBasicType<int>(a2, a3, v22, v9, v10);
              goto LABEL_139;
            }
LABEL_101:
            v11 = v66;
LABEL_133:
            v39 = *(_DWORD *)v11;
            v40 = *((unsigned __int16 *)v11 + 2);
            v41 = v39 == 1684099132 && v40 == 15960;
            v22 = a1 + 128;
            if (!v41)
              goto LABEL_137;
            goto LABEL_138;
          }
          v35 = *(_QWORD *)v66[0] == 0x654C58746C69463CLL && *((_WORD *)v66[0] + 4) == 15982;
          v22 = a1 + 112;
          if (v35)
            goto LABEL_138;
          v14 = v66[1];
          v36 = *(_QWORD *)v66[0] == 0x654C59746C69463CLL && *((_WORD *)v66[0] + 4) == 15982;
          v22 = a1 + 116;
          if (v36)
            goto LABEL_138;
          if ((HIBYTE(v66[2]) & 0x80) == 0)
            goto LABEL_8;
        }
      }
      if (v14 != (void *)11)
        goto LABEL_131;
      v37 = *(_QWORD *)v66[0] == 0x745358746C69463CLL && *(_QWORD *)((char *)v66[0] + 3) == 0x3E7065745358746CLL;
      v22 = a1 + 120;
      if (v37)
        goto LABEL_138;
      v14 = v66[1];
      if (v66[1] != (void *)11)
        goto LABEL_131;
      v38 = *(_QWORD *)v66[0] == 0x745359746C69463CLL && *(_QWORD *)((char *)v66[0] + 3) == 0x3E7065745359746CLL;
      v22 = a1 + 124;
      if (v38)
        goto LABEL_138;
      if ((HIBYTE(v66[2]) & 0x80) == 0)
      {
LABEL_8:
        if (HIBYTE(v66[2]) == 6)
          goto LABEL_101;
      }
      else
      {
LABEL_131:
        if (v14 == (void *)6)
        {
          v11 = (void **)v66[0];
          goto LABEL_133;
        }
      }
LABEL_137:
      v42 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v66, "<PadY>");
      v22 = a1 + 132;
      if (!v42)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 401);
        v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
        if (SHIBYTE(v66[2]) >= 0)
          v61 = v66;
        else
          v61 = (void **)v66[0];
        if (SHIBYTE(v66[2]) >= 0)
          v62 = HIBYTE(v66[2]);
        else
          v62 = (uint64_t)v66[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v61, v62);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      goto LABEL_138;
    }
LABEL_109:
    kaldi::ReadBasicType<float>(a2, a3, v13, v9, v10);
LABEL_139:
    if (SHIBYTE(v66[2]) < 0)
      operator delete(v66[0]);
  }
  v43 = *(_DWORD *)(a1 + 8);
  v45 = *(_DWORD *)(a1 + 104);
  v44 = *(_DWORD *)(a1 + 108);
  v46 = v43 / (v44 * v45);
  if (v43 % (v44 * v45))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 415);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0");
    goto LABEL_152;
  }
  v47 = v45 + 2 * *(_DWORD *)(a1 + 128);
  v48 = *(_DWORD *)(a1 + 112);
  v49 = *(_DWORD *)(a1 + 116);
  v50 = (v47 - v48) / *(_DWORD *)(a1 + 120) + 1;
  v51 = *(_DWORD *)(a1 + 12);
  v52 = v50 + v50 * ((v44 + 2 * *(_DWORD *)(a1 + 132) - v49) / *(_DWORD *)(a1 + 124));
  v53 = (v51 / v52);
  if (v51 % v52)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 417);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0");
LABEL_152:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  kaldi::nnet1::NewMatrix<kaldi::QuantizedMatrix<short>>(v53, (v48 * v46 * v49), (uint64_t *)__p);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), (uint64_t)__p[0]);
  kaldi::QuantizedMatrix<short>::Read(*(int **)(a1 + 184), a2, a3, a4, v54);
  v55 = (_QWORD *)operator new();
  v55[2] = 0;
  v55[3] = 0;
  *v55 = &unk_1EA92DFD8;
  v55[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v55, v53, 1u, v56, v57);
  v58 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v55;
  if (v58)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 16))(v58);
    v55 = *(_QWORD **)(a1 + 192);
  }
  (*(void (**)(_QWORD *, uint64_t *, uint64_t))*v55)(v55, a2, a3);
  if (kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184)) != (_DWORD)v53
    || kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)) != *(_DWORD *)(a1 + 112)
                                                                                        * v46
                                                                                        * *(_DWORD *)(a1 + 116))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 425);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "filters_->NumRows() == num_output_fmaps && filters_->NumCols() == num_input_fmaps * filt_x_len_ * filt_y_len_");
    goto LABEL_152;
  }
  *(_BYTE *)(a1 + 16) = 0;
  return kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateBNNSFilter(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::WriteConfig(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  std::string __p;

  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<BiasLearnRateCoef>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v10, v11);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 144), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v12, v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v14, v15);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FmapXLen>", v16, v17);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FmapYLen>", v18, v19);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FiltXLen>", v20, v21);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FiltYLen>", v22, v23);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FiltXStep>", v24, v25);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FiltYStep>", v26, v27);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PadX>", v28, v29);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PadY>", v30, v31);
  return kaldi::WriteBasicType<int>(a2, (int)a3);
}

void sub_1DE45F9A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::WriteData(int **a1, _QWORD *a2, int a3, int a4)
{
  uint64_t v8;
  const char *v9;

  (*((void (**)(int **))*a1 + 21))(a1);
  kaldi::QuantizedMatrix<short>::Write(a1[23], a2, a3, a4);
  kaldi::CuVectorBase<float>::Write(a1[24], a2, a3, v8, v9);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::NumParams(uint64_t a1)
{
  int v2;

  v2 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  return *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16)
       + kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)) * v2;
}

_DWORD *kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::GetParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  int v7;
  const char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  v7 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  v9 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)) * v7;
  v16 = 0;
  v17 = 0;
  if (v9 > *(_DWORD *)(a2 + 8)
    || (v15 = *(void **)a2,
        LODWORD(v16) = v9,
        kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v15, *(unsigned int **)(a1 + 184)),
        v12 = *(_DWORD **)(a1 + 192),
        v13 = v12[4],
        v16 = 0,
        v17 = 0,
        v13 + v9 > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v8);
  }
  v15 = (void *)(*(_QWORD *)a2 + 4 * (int)v9);
  LODWORD(v16) = v13;
  return kaldi::CuVectorBase<float>::CopyToVec<float>(v12, (uint64_t)&v15, v10, v11, v8);
}

_DWORD *kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::SetParams(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  const char *v6;
  unsigned int v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v14, "SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 502);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v14, "wei_src.Dim() == NumParams()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v14);
  }
  v5 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  v7 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)) * v5;
  v8 = *(unsigned int **)(a1 + 184);
  v15 = 0;
  v16 = 0;
  if (v7 > *(_DWORD *)(a2 + 8)
    || (v14 = *(char **)a2,
        LODWORD(v15) = v7,
        kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v8, &v14),
        v11 = *(_DWORD **)(a1 + 192),
        v12 = v11[4],
        v15 = 0,
        v16 = 0,
        v12 + v7 > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v6);
  }
  v14 = (char *)(*(_QWORD *)a2 + 4 * (int)v7);
  LODWORD(v15) = v12;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v11, (uint64_t)&v14, v9, v10, v6);
}

void sub_1DE45FC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

float kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::SumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v6;

  v6 = kaldi::QuantizedMatrixBase<short>::Sum(*(int **)(a1 + 184), a2, a3, a4, a5);
  return v6 + kaldi::CuVectorBase<float>::Sum(*(_QWORD *)(a1 + 192));
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::PerturbParams(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[48];

  v2 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  v3 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v4, v2, v3, 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v4);
  kaldi::QuantizedMatrixBase<short>::AddMat();
}

uint64_t sub_1DE45FD00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _QWORD v12[4];
  uint64_t v13;

  v7 = *(unsigned int *)(*(_QWORD *)(v5 + 192) + 16);
  v12[0] = &unk_1EA92DFD8;
  memset(&v12[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v12, v7, 1u, a4, a5);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v12);
  kaldi::CuVectorBase<float>::AddVec(*(_QWORD *)(v5 + 192), (uint64_t)v12, v8, v9, v10, v6, 1.0);
  v12[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v12);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v13);
}

void sub_1DE45FD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Info(unsigned int **a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  void **v14;
  uint64_t v15;
  void *__p[2];
  unsigned __int8 v18;
  void *v19[2];
  unsigned __int8 v20;
  _QWORD v21[11];
  char v22;
  uint64_t v23;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  (*((void (**)(unsigned int **, _QWORD *, _QWORD))*a1 + 21))(a1, v21, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" OutSizeX:", 10);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" OutSizeY:", 10);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" InFmaps:", 9);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" OutFmaps:", 10);
  std::ostream::operator<<();
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n filters: ", 11);
  kaldi::nnet1::MomentStatistics<short>(a1[23]);
  if ((v20 & 0x80u) == 0)
    v6 = v19;
  else
    v6 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v7 = v20;
  else
    v7 = (uint64_t)v19[1];
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n bias: ", 8);
  kaldi::nnet1::MomentStatistics<float>(a1[24], v10, v11, v12, v13);
  if ((v18 & 0x80u) == 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v15 = v18;
  else
    v15 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v14, v15);
  if ((char)v18 < 0)
    operator delete(__p[0]);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  std::stringbuf::str();
  v21[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v21[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v22 < 0)
    operator delete((void *)v21[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v23);
}

void sub_1DE45FFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  std::ostringstream::~ostringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  void **v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  void **v30;
  std::string::size_type v31;
  std::string *v32;
  void *__p[2];
  unsigned __int8 v34;
  void *v35[2];
  unsigned __int8 v36;
  void *v37[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;

  std::string::basic_string[abi:ne180100]<0>(&v41, "\n  ");
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 200), v4, v5, v6, v7);
  if ((v40 & 0x80u) == 0)
    v8 = v39;
  else
    v8 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v9 = v40;
  else
    v9 = (std::string::size_type)v39[1];
  v10 = std::string::append(&v41, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v42, ", lr-coef ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v38 & 0x80u) == 0)
    v14 = v37;
  else
    v14 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v15 = v38;
  else
    v15 = (std::string::size_type)v37[1];
  v16 = std::string::append(&v43, (const std::string::value_type *)v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v44, "\n  bias_grad");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 224), v20, v21, v22, v23);
  if ((v36 & 0x80u) == 0)
    v24 = v35;
  else
    v24 = (void **)v35[0];
  if ((v36 & 0x80u) == 0)
    v25 = v36;
  else
    v25 = (std::string::size_type)v35[1];
  v26 = std::string::append(&v45, (const std::string::value_type *)v24, v25);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  v28 = std::string::append(&v46, ", lr-coef ");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v34 & 0x80u) == 0)
    v30 = __p;
  else
    v30 = (void **)__p[0];
  if ((v34 & 0x80u) == 0)
    v31 = v34;
  else
    v31 = (std::string::size_type)__p[1];
  v32 = std::string::append(&v47, (const std::string::value_type *)v30, v31);
  *a2 = *v32;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  if ((char)v34 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if ((char)v36 < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if ((char)v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
}

void sub_1DE4602AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v52 - 57) < 0)
    operator delete(*(void **)(v52 - 80));
  if (*(char *)(v52 - 89) < 0)
    operator delete(*(void **)(v52 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v52 - 121) < 0)
    operator delete(*(void **)(v52 - 144));
  if (*(char *)(v52 - 153) < 0)
    operator delete(*(void **)(v52 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(exception_object);
}

void sub_1DE4603A8()
{
  JUMPOUT(0x1DE460380);
}

void sub_1DE4603B0()
{
  JUMPOUT(0x1DE460390);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  if (a4 || !*(_BYTE *)(a1 + 17))
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::PropagateCpu(a1, a2, a3, a4);
  else
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::PropagateBNNS(a1, a2, a3, 0, a5);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::PropagateBNNS(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  void *v5;
  uint64_t result;
  const char *v7;
  _QWORD v8[34];

  v5 = *(void **)(a1 + 152);
  if (!v5)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateBNNS", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)0x45D, "bnns_filter_", a5);
  if (a4)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8, "PropagateBNNS", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1120);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "BNNS only supports one batch");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  result = BNNSFilterApplyBatch(v5, *(int *)(a2 + 20), *(const void **)(a2 + 8), *(int *)(a2 + 24), *(void **)(a3 + 8), *(int *)(a3 + 24));
  if ((_DWORD)result)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateBNNS", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)0x464, "ret == 0", v7);
  return result;
}

void sub_1DE460490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::PropagateCpu(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v7;
  int v8;
  const char *v9;
  int v10;
  int v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  std::vector<int>::pointer end;
  int v32;
  int v33;
  int v34;
  int i;
  int v36;
  int v37;
  int v38;
  int *value;
  int v40;
  int v41;
  std::vector<int>::pointer v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  int *v48;
  int *v49;
  int v50;
  std::vector<int>::pointer begin;
  uint64_t v52;
  unint64_t v53;
  int64_t v54;
  unint64_t v55;
  char *v56;
  int *v57;
  int *v58;
  int v59;
  int v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64x2_t v69;
  int64x2_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  int v74;
  int *v75;
  uint64_t v76;
  int v77;
  int64x2_t v78;
  int32x2_t v79;
  uint64_t v80;
  int v81;
  const char *v82;
  uint64_t v83;
  uint64_t *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  int v90;
  uint64_t v91;
  int v92;
  int v93;
  std::vector<int> __p;
  __int128 v95;

  v7 = *(_DWORD *)(a1 + 104);
  v8 = *(_DWORD *)(a1 + 108);
  v9 = (const char *)((v7 + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120));
  v10 = (v8 + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124);
  v83 = (v10 + 1);
  v11 = *(_DWORD *)(a1 + 8);
  v86 = v83 * ((_DWORD)v9 + 1);
  v87 = (*(_DWORD *)(a1 + 12) / v86);
  if (kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184)) != (_DWORD)v87)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateCpu", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)0x478, "num_filters == num_output_fmaps", v13);
  v14 = *(unsigned int *)(a2 + 20);
  v88 = a2;
  v89 = (uint64_t *)(a1 + 296);
  v15 = *(_QWORD *)(a1 + 296);
  v16 = *(int *)(a1 + 80);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 304) - v15) >> 3) < v16)
  {
    std::vector<std::vector<kaldi::CuMatrix<float>>>::resize(v89, v16);
    v15 = *v89;
  }
  v80 = ((_DWORD)v9 + 1);
  v81 = v10;
  v82 = v9;
  v90 = a4;
  v17 = (uint64_t *)(v15 + 24 * a4);
  if (0xAAAAAAAAAAAAAAABLL * ((v17[1] - *v17) >> 4) < v86)
    std::vector<kaldi::CuMatrix<float>>::resize(v17, v86);
  if (v86 >= 1)
  {
    v18 = 0;
    do
    {
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 24 * v90) + v18;
      v20 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
      kaldi::CuMatrix<float>::Resize(v19, v14, v20, 0, 0);
      v18 += 48;
    }
    while (48 * v86 != v18);
  }
  v85 = (uint64_t *)(a1 + 160);
  v21 = *(int *)(a1 + 80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 4) < v21)
    std::vector<kaldi::CuMatrix<float>>::resize(v85, v21);
  v22 = *(_DWORD *)(a1 + 132);
  v23 = *(_DWORD *)(a1 + 108);
  v24 = *(_DWORD *)(a1 + 116);
  v93 = -v22;
  if (v22 + v23 - v24 < -v22)
    goto LABEL_69;
  v25 = 0;
  v26 = *(_DWORD *)(a1 + 128);
  v27 = *(_DWORD *)(a1 + 104);
  v28 = *(_DWORD *)(a1 + 112);
  v92 = v11 / (v8 * v7);
  do
  {
    v29 = -v26;
    if (v26 + v27 - v28 < -v26)
      goto LABEL_68;
    v30 = v25;
    do
    {
      v91 = v30;
      memset(&__p, 0, sizeof(__p));
      if (v92 < 1)
        goto LABEL_64;
      end = 0;
      v32 = 0;
      v33 = v29 + v27 * v93;
      v34 = *(_DWORD *)(a1 + 116);
      do
      {
        if (v34 < 1)
          goto LABEL_63;
        for (i = 0; i < v34; ++i)
        {
          if (v28 < 1)
            continue;
          v36 = 0;
          v37 = i + v93;
          do
          {
            if (v37 < 0 || (v38 = *(_DWORD *)(a1 + 108), v37 >= v38))
            {
              value = __p.__end_cap_.__value_;
            }
            else
            {
              value = __p.__end_cap_.__value_;
              if (v36 + v29 >= 0)
              {
                v40 = *(_DWORD *)(a1 + 104);
                if (v36 + v29 < v40)
                {
                  v41 = v33 + v36 + (i + v38 * v32) * v40;
                  if (end >= __p.__end_cap_.__value_)
                  {
                    begin = __p.__begin_;
                    v52 = end - __p.__begin_;
                    v53 = v52 + 1;
                    if ((unint64_t)(v52 + 1) >> 62)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v54 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
                    if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v53)
                      v53 = v54 >> 1;
                    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
                      v55 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v55 = v53;
                    if (v55)
                    {
                      v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__end_cap_, v55);
                      begin = __p.__begin_;
                      end = __p.__end_;
                    }
                    else
                    {
                      v56 = 0;
                    }
                    v57 = (int *)&v56[4 * v52];
                    *v57 = v41;
                    v58 = v57 + 1;
                    while (end != begin)
                    {
                      v59 = *--end;
                      *--v57 = v59;
                    }
                    __p.__begin_ = v57;
                    __p.__end_ = v58;
                    __p.__end_cap_.__value_ = (int *)&v56[4 * v55];
                    if (begin)
                      operator delete(begin);
                    end = v58;
                  }
                  else
                  {
                    *end++ = v41;
                  }
                  goto LABEL_60;
                }
              }
            }
            if (end >= value)
            {
              v42 = __p.__begin_;
              v43 = end - __p.__begin_;
              v44 = v43 + 1;
              if ((unint64_t)(v43 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v45 = (char *)value - (char *)__p.__begin_;
              if (v45 >> 1 > v44)
                v44 = v45 >> 1;
              if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
                v46 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v46 = v44;
              if (v46)
              {
                v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__end_cap_, v46);
                v42 = __p.__begin_;
                end = __p.__end_;
              }
              else
              {
                v47 = 0;
              }
              v48 = (int *)&v47[4 * v43];
              *v48 = -1;
              v49 = v48 + 1;
              while (end != v42)
              {
                v50 = *--end;
                *--v48 = v50;
              }
              __p.__begin_ = v48;
              __p.__end_ = v49;
              __p.__end_cap_.__value_ = (int *)&v47[4 * v46];
              if (v42)
                operator delete(v42);
              end = v49;
            }
            else
            {
              *end++ = -1;
            }
LABEL_60:
            __p.__end_ = end;
            ++v36;
            v28 = *(_DWORD *)(a1 + 112);
          }
          while (v36 < v28);
          v34 = *(_DWORD *)(a1 + 116);
        }
LABEL_63:
        ++v32;
      }
      while (v32 != v92);
LABEL_64:
      kaldi::CuMatrixBase<float>::CopyCols(*(_QWORD *)(*v89 + 24 * v90) + 48 * v91, v88, (unsigned int **)&__p, v12, v13);
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      v30 = v91 + 1;
      v29 += *(_DWORD *)(a1 + 120);
      v27 = *(_DWORD *)(a1 + 104);
      v26 = *(_DWORD *)(a1 + 128);
      v28 = *(_DWORD *)(a1 + 112);
    }
    while (v29 <= v26 + v27 - v28);
    v23 = *(_DWORD *)(a1 + 108);
    v22 = *(_DWORD *)(a1 + 132);
    v25 = v91 + 1;
    v24 = *(_DWORD *)(a1 + 116);
LABEL_68:
    v93 += *(_DWORD *)(a1 + 124);
  }
  while (v93 <= v22 + v23 - v24);
LABEL_69:
  kaldi::CuMatrix<float>::Resize(*v85 + 48 * v90, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 3u, 0);
  v60 = v87;
  if (v86 >= 1)
  {
    v61 = 0;
    v62 = 0;
    do
    {
      v63 = *(_QWORD *)(a1 + 160) + 48 * v90;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, v63, 0, *(_DWORD *)(v63 + 20), v62, v60);
      kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&__p, *(_QWORD *)(a1 + 192), v64, v65, v66, 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&__p, *(_QWORD *)(*(_QWORD *)(a1 + 296) + 24 * v90) + v61, 111, *(unsigned int **)(a1 + 184), (const char *)0x70, 1.0, 1.0);
      __p.__begin_ = (std::vector<int>::pointer)&unk_1EA926508;
      *(_OWORD *)&__p.__end_ = 0u;
      v95 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&__p);
      v60 = v87;
      v62 = (const char *)((_DWORD)v62 + v87);
      v61 += 48;
    }
    while (48 * v86 != v61);
  }
  std::vector<int>::vector(&__p, *(int *)(a1 + 12));
  if ((int)v87 >= 1)
  {
    v68 = 0;
    v69 = (uint64x2_t)vdupq_n_s64(v80 - 1);
    v70 = vdupq_n_s64(2uLL);
    v71 = 1;
    do
    {
      if ((v81 & 0x80000000) == 0)
      {
        v72 = 0;
        v73 = &__p.__begin_[v71];
        v74 = v68;
        do
        {
          if ((v82 & 0x80000000) == 0)
          {
            v75 = v73;
            v76 = (v80 + 1) & 0x1FFFFFFFELL;
            v77 = v74;
            v78 = (int64x2_t)xmmword_1DEC3D320;
            do
            {
              v79 = vmovn_s64((int64x2_t)vcgeq_u64(v69, (uint64x2_t)v78));
              if ((v79.i8[0] & 1) != 0)
                *(v75 - 1) = v77;
              v67 = v79.u32[1];
              if ((v79.i8[4] & 1) != 0)
              {
                v67 = (v87 + v77);
                *v75 = v67;
              }
              v78 = vaddq_s64(v78, v70);
              v77 += 2 * v87;
              v75 += 2;
              v76 -= 2;
            }
            while (v76);
          }
          ++v72;
          v74 += v87 * v80;
          v73 += (int)v82 + 1;
        }
        while (v72 != v83);
      }
      ++v68;
      v71 += (int)v83 * (uint64_t)(int)v80;
    }
    while (v68 != v87);
  }
  kaldi::CuMatrixBase<float>::CopyCols(a3, *v85 + 48 * v90, (unsigned int **)&__p, v67, v82);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_1DE460B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::BackpropagateCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  const char *v16;
  int v17;
  uint64_t v18;
  const char *v19;
  int v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  int *v24;
  int v25;
  uint64_t v26;
  int v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  kaldi::CuWorkspace *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int j;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  const char *v52;
  kaldi::CuWorkspace *ChildWorkspace;
  int v54;
  int v55;
  int v56;
  int v57;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  void *v63;
  __int128 v64;
  __int128 v65;
  void **v66;
  _QWORD v67[4];
  _QWORD v68[3];
  std::vector<int> v69;

  v57 = *(_DWORD *)(a1 + 104);
  v10 = (v57 + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120);
  v11 = v10 + 1;
  v56 = *(_DWORD *)(a1 + 108);
  v12 = (v56 + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124);
  v13 = (v12 + 1);
  v14 = v13 * (v10 + 1);
  v59 = *(_DWORD *)(a1 + 8);
  v15 = (*(_DWORD *)(a1 + 12) / v14);
  if (kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184)) != (_DWORD)v15)
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateCpu", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)0x51D, "num_filters == num_output_fmaps", v16);
  v61 = *(_DWORD *)(a2 + 20);
  v17 = a6;
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 160) + 48 * a6, *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 16), 3u, 0);
  std::vector<int>::vector(&v69, *(int *)(a1 + 12));
  if ((int)v15 >= 1)
  {
    v20 = 0;
    v21 = 0;
    for (i = 0; i != v15; ++i)
    {
      if ((v12 & 0x80000000) == 0)
      {
        v23 = 0;
        v24 = &v69.__begin_[v21];
        v25 = v20;
        do
        {
          v26 = (v10 + 1);
          v27 = v25;
          v28 = v24;
          if ((v10 & 0x80000000) == 0)
          {
            do
            {
              *v28 = v27;
              v28 += v15;
              ++v27;
              --v26;
            }
            while (v26);
          }
          ++v23;
          v24 += v11 * v15;
          v25 += v11;
        }
        while (v23 != v13);
      }
      ++v21;
      v20 += v14;
    }
  }
  kaldi::CuMatrixBase<float>::CopyCols(*(_QWORD *)(a1 + 160) + 48 * a6, a4, (unsigned int **)&v69, v18, v19);
  std::vector<kaldi::CuSubMatrix<float>>::vector(v68, v14);
  v29 = *(_QWORD *)(a1 + 24);
  if (a6 >= (unint64_t)((*(_QWORD *)(a1 + 32) - v29) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v66, "BackpropagateCpu", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1327);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"Convolutional2DComponent needs workspace set to perform back-propagation", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v66);
  }
  ChildWorkspace = (kaldi::CuWorkspace *)kaldi::CuWorkspace::GetChildWorkspace(*(kaldi::CuWorkspace **)(v29 + 8 * a6), -1);
  if (v14 >= 1)
  {
    v30 = 0;
    v31 = 0;
    do
    {
      v32 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
      kaldi::CuWorkspace::GetMatrix<float>(ChildWorkspace, v61, v32, 0, (uint64_t)&v66);
      v33 = v68[0] + v30;
      if ((void ***)(v68[0] + v30) != &v66)
      {
        *(_QWORD *)(v33 + 8) = v67[0];
        *(_OWORD *)(v33 + 16) = *(_OWORD *)&v67[1];
        *(_QWORD *)(v33 + 32) = v67[3];
      }
      v66 = (void **)&unk_1EA926508;
      memset(v67, 0, sizeof(v67));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v66);
      v34 = *(_QWORD *)(a1 + 160) + 48 * v17;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v66, v34, 0, *(_DWORD *)(v34 + 20), v31, v15);
      kaldi::CuMatrixBase<float>::AddMatMat<short>(v68[0] + v30, (uint64_t)&v66, 111, *(unsigned int **)(a1 + 184), (const char *)0x6F, 1.0, 0.0);
      v66 = (void **)&unk_1EA926508;
      memset(v67, 0, sizeof(v67));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v66);
      v31 = (const char *)((_DWORD)v31 + v15);
      v30 += 40;
    }
    while (40 * v14 != v30);
  }
  v35 = *(_DWORD *)(a1 + 132);
  v36 = *(_DWORD *)(a1 + 108);
  v37 = *(_DWORD *)(a1 + 116);
  v55 = -v35;
  v38 = ChildWorkspace;
  if (v35 + v36 - v37 >= -v35)
  {
    v39 = 0;
    v40 = *(_DWORD *)(a1 + 128);
    v41 = *(_DWORD *)(a1 + 104);
    v42 = *(_DWORD *)(a1 + 112);
    v54 = v59 / (v56 * v57);
    do
    {
      v43 = -v40;
      if (v40 + v41 - v42 >= -v40)
      {
        v62 = v39;
        do
        {
          if (v54 >= 1)
          {
            v44 = 0;
            v45 = 0;
            v60 = v43 + v41 * v55;
            do
            {
              if (v37 >= 1)
              {
                for (j = 0; j < v37; ++j)
                {
                  if (v42 >= 1)
                  {
                    v47 = 0;
                    v48 = j + v55;
                    do
                    {
                      if ((v48 & 0x80000000) == 0)
                      {
                        v49 = *(_DWORD *)(a1 + 108);
                        if (v48 < v49 && v43 + v47 >= 0)
                        {
                          v50 = *(_DWORD *)(a1 + 104);
                          if (v43 + v47 < v50)
                          {
                            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v66, v68[0] + 40 * v62, 0, *(_DWORD *)(v68[0] + 40 * v62 + 20), (const char *)(v45 + v47), 1);
                            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v63, a5, 0, *(_DWORD *)(a5 + 20), (const char *)(v60 + v47 + v50 * (j + v44 * v49)), 1);
                            kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v63, (uint64_t)&v66, 111, v51, v52, 1.0, 1.0);
                            v63 = &unk_1EA926508;
                            v64 = 0u;
                            v65 = 0u;
                            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v63);
                            v66 = (void **)&unk_1EA926508;
                            memset(v67, 0, sizeof(v67));
                            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v66);
                            v42 = *(_DWORD *)(a1 + 112);
                          }
                        }
                      }
                      ++v47;
                    }
                    while (v47 < v42);
                    v37 = *(_DWORD *)(a1 + 116);
                    v45 += v47;
                  }
                }
              }
              ++v44;
            }
            while (v44 != v54);
            v41 = *(_DWORD *)(a1 + 104);
            v40 = *(_DWORD *)(a1 + 128);
            v38 = ChildWorkspace;
          }
          ++v62;
          v43 += *(_DWORD *)(a1 + 120);
        }
        while (v43 <= v40 + v41 - v42);
        v36 = *(_DWORD *)(a1 + 108);
        v35 = *(_DWORD *)(a1 + 132);
        v39 = v62;
      }
      v55 += *(_DWORD *)(a1 + 124);
    }
    while (v55 <= v35 + v36 - v37);
  }
  if (v38)
  {
    kaldi::CuWorkspace::~CuWorkspace(v38);
    MEMORY[0x1DF0ED014]();
  }
  v66 = (void **)v68;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v66);
  if (v69.__begin_)
  {
    v69.__end_ = v69.__begin_;
    operator delete(v69.__begin_);
  }
}

void sub_1DE461164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, kaldi::CuWorkspace *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  void *v24;

  a22 = v22 - 136;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  v24 = *(void **)(v22 - 112);
  if (v24)
  {
    *(_QWORD *)(v22 - 104) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 148) = a3;
  *(_DWORD *)(result + 144) = a2;
  *(_BYTE *)(result + 344) = 0;
  return result;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::NormalizeGradients(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  float v7;
  int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;

  v7 = a6;
  v9 = *(_DWORD *)(a1 + 144);
  if (v9 == 3)
  {
    if (a6 >= 0.0 && a6 <= 1.0)
    {
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * a2), *(_QWORD *)(a1 + 248) + 48 * a2, a6);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * a2), *(_QWORD *)(a1 + 272) + 32 * a2, v7, v12, v13, v14);
    }
  }
  else if (v9 == 2)
  {
    if (a6 > 0.0)
    {
      v15 = a2;
      if (*(_BYTE *)(a1 + 84))
        v7 = (float)*(int *)(*(_QWORD *)(a1 + 320) + 4 * a2) * a6;
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * a2), (unsigned int *)(*(_QWORD *)(a1 + 248) + 48 * a2), v7, a3, a4, a5);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v15), (_DWORD *)(*(_QWORD *)(a1 + 272) + 32 * v15), v16, v17, v18, v7);
    }
  }
  else if (v9 == 1 && a6 > 0.0)
  {
    v10 = a2;
    if (*(_BYTE *)(a1 + 84))
      v7 = (float)*(int *)(*(_QWORD *)(a1 + 320) + 4 * a2) * a6;
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * a2), v7);
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v10), v7);
  }
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AccumGradientsCpu(a1, a2, a3, a4, a5);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;

  if (!*(_BYTE *)(a1 + 344))
  {
    v2 = *(_DWORD *)(a1 + 144);
    v3 = *(_DWORD *)(a1 + 80);
    if (v3 > 1)
      v4 = v3 + 1;
    else
      v4 = 1;
    v5 = (_QWORD *)(a1 + 200);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 200, v4);
    v6 = (_QWORD *)(a1 + 224);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize(a1 + 224, v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 272), v4);
    if (v4 >= 1)
    {
      v7 = 0;
      v8 = v2 & 0xFFFFFFFE;
      do
      {
        v9 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
        v10 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
        v11 = operator new();
        kaldi::CuMatrix<float>::CuMatrix(v11, v9, v10, 0, 0, (const char *)1);
        v12 = *(_QWORD *)(*v5 + 8 * v7);
        *(_QWORD *)(*v5 + 8 * v7) = v11;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
        v13 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
        v14 = (_QWORD *)operator new();
        v14[2] = 0;
        v14[3] = 0;
        *v14 = &unk_1EA92DFD8;
        v14[1] = 0;
        kaldi::CuVector<float>::Resize((uint64_t)v14, v13, 0, v15, v16);
        v17 = *(_QWORD *)(*v6 + 8 * v7);
        *(_QWORD *)(*v6 + 8 * v7) = v14;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
        if (v8 == 2)
        {
          v18 = *(_QWORD *)(a1 + 248) + 48 * v7;
          v19 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
          v20 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
          kaldi::CuMatrix<float>::Resize(v18, v19, v20, 1u, 0);
          v21 = *(_QWORD *)(a1 + 272) + 32 * v7;
          v22 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
          kaldi::CuVector<float>::Resize(v21, v22, 1u, v23, v24);
          if (*(_DWORD *)(a1 + 144) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 248) + 48 * v7, v25, v26, v27, v28, 1.0);
            kaldi::CuVectorBase<float>::Set(*(_QWORD *)(a1 + 272) + 32 * v7, 1.0);
          }
        }
        ++v7;
      }
      while (v7 != v4);
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 320), v4);
    *(_BYTE *)(a1 + 344) = 1;
  }
}

void sub_1DE46166C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AccumGradientsCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  __int128 v22;
  __int128 v23;

  v9 = (*(_DWORD *)(a1 + 104) + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120) + 1;
  v10 = v9 + v9 * ((*(_DWORD *)(a1 + 108) + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124));
  v11 = *(_DWORD *)(a1 + 12) / v10;
  if (kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184)) != v11)
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradientsCpu", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)0x2C6, "num_filters == num_output_fmaps", v12);
  *(_DWORD *)(*(_QWORD *)(a1 + 320) + 4 * a5) = *(_DWORD *)(a2 + 20);
  v13 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(*(_QWORD *)(v13 + 8 * a5) + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * a5) + 24) = a4;
  kaldi::CuMatrixBase<float>::SetZero(*(_QWORD *)(v13 + 8 * a5));
  kaldi::CuVectorBase<float>::SetZero(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * a5));
  if (v10 >= 1)
  {
    v14 = 0;
    v15 = 0;
    v16 = 48 * v10;
    do
    {
      v17 = *(_QWORD *)(a1 + 160) + 48 * a5;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v21, v17, 0, *(_DWORD *)(v17 + 20), v15, v11);
      kaldi::CuMatrixBase<float>::AddMatMat(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * a5), (uint64_t)&v21, CblasTrans, *(_QWORD *)(*(_QWORD *)(a1 + 296) + 24 * a5) + v14, (const char *)0x6F, 1.0, 1.0);
      kaldi::CuVectorBase<float>::AddRowSumMat(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * a5), (uint64_t)&v21, 1.0, 1.0, v18, v19, v20);
      v21 = &unk_1EA926508;
      v22 = 0u;
      v23 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v21);
      v15 = (const char *)((_DWORD)v15 + v11);
      v14 += 48;
    }
    while (v16 != v14);
  }
}

void sub_1DE461854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _OWORD *v10;

  a10 = &unk_1EA926508;
  *v10 = 0u;
  v10[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateWeights()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 752);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unsupported");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  int v18;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[48];
  _BYTE v24[48];

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v24, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v23, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  (*(void (**)(uint64_t, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v8 + 112))(v8, a2, v24, 0);
  (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v8 + 128))(v8, a2, v24, a3, v23, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 232))(v8, a2, a3, 0, 0);
  LODWORD(a3) = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  v9 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)) * a3;
  kaldi::Vector<float>::Resize((void **)a4, *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16) + v9, 0, v10, v11);
  v21 = 0;
  v22 = 0;
  if (v9 > *(_DWORD *)(a4 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v14);
  v20 = *(void **)a4;
  LODWORD(v21) = v9;
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v20, **(_QWORD **)(v8 + 200), v12, v13, v14);
  v18 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16);
  v21 = 0;
  v22 = 0;
  if (v18 + v9 > *(_DWORD *)(a4 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v17);
  v20 = (void *)(*(_QWORD *)a4 + 4 * (int)v9);
  LODWORD(v21) = v18;
  kaldi::CuVectorBase<float>::CopyToVec<float>(**(_DWORD ***)(v8 + 224), (uint64_t)&v20, v15, v16, v17);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v23);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v24);
}

void sub_1DE461AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

float kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;

  if (!*(_BYTE *)(a1 + 84))
    return *(float *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 352);
  v3 = *(_QWORD *)(a1 + 360) - v2;
  if (!v3)
    return NAN;
  v4 = v3 >> 2;
  if ((int)v4 <= a2)
    return NAN;
  v5 = v4 - 1;
  if (a2 >= 0)
    v5 = a2;
  return *(float *)(v2 + 4 * v5);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  int v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD v26[34];

  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16);
  v7 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  result = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
  *a3 = v6 + result * v7;
  v13 = *(_QWORD *)(a1 + 200);
  v14 = *(_QWORD *)(a1 + 208) - v13;
  if (v14 && (v15 = *(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)) != 0)
  {
    v16 = v14 >> 3;
    v17 = v15 >> 3;
    v18 = *(_DWORD *)(a1 + 80);
    if (v18 == 1)
      v18 = 0;
    v19 = v18;
    v20 = v17 - 1;
    if (v16 - 1 != v18 || v20 != v18)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26, "CountZeroCorr", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 212);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      v24 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"  ", 2);
      v25 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26);
    }
    v22 = kaldi::CuMatrixBase<float>::CountZeros(*(_QWORD *)(v13 + 8 * v18), v9, v10, v11, v12);
    result = kaldi::CuVectorBase<float>::CountZeros(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v19));
    v23 = result + v22;
  }
  else
  {
    v23 = 0;
  }
  *a2 = v23;
  return result;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::VectorizeWeightsCorrs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  int *v11;
  uint64_t v12;
  const char *v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v37, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 232);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v37, "Weights are already vectorized");
LABEL_31:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v37);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v37, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 235);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"Performing vectorization of convolutional 2d component", 54);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v37);
  }
  v8 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  v9 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)) * v8;
  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16) + v9;
  if (v10 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v37, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 238);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v37, "(nlinparams + bias_->Dim()) == NumParams()");
    goto LABEL_31;
  }
  v11 = *(int **)(a1 + 184);
  v12 = operator new();
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(v12, v11);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), v12);
  v39 = 0;
  v40 = 0;
  v37 = &unk_1EA926538;
  v38 = 0;
  if (v9 > *(_DWORD *)(a3 + 16))
    goto LABEL_34;
  v38 = *(_QWORD *)(a3 + 8);
  LODWORD(v39) = v9;
  v40 = *(_QWORD *)(a3 + 24);
  kaldi::CuVectorBase<float>::Set((uint64_t)&v37, *(float *)(a1 + 136));
  v14 = *(_DWORD *)(a3 + 16) - v9;
  *(_QWORD *)(a3 + 8) += 4 * (int)v9;
  *(_DWORD *)(a3 + 16) = v14;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 192), a2, (uint64_t *)&v37);
  v15 = v37;
  v37 = 0;
  v16 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    v17 = v37;
    v37 = 0;
    if (v17)
      (*(void (**)(void *))(*(_QWORD *)v17 + 16))(v17);
  }
  v18 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16);
  v39 = 0;
  v37 = &unk_1EA926538;
  if (v18 > *(_DWORD *)(a3 + 16))
LABEL_34:
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v13);
  v38 = *(_QWORD *)(a3 + 8);
  LODWORD(v39) = v18;
  v40 = *(_QWORD *)(a3 + 24);
  kaldi::CuVectorBase<float>::Set((uint64_t)&v37, *(float *)(a1 + 140));
  v19 = *(int *)(*(_QWORD *)(a1 + 192) + 16);
  v20 = *(_DWORD *)(a3 + 16) - v19;
  *(_QWORD *)(a3 + 8) += 4 * v19;
  *(_DWORD *)(a3 + 16) = v20;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateBNNSFilter(a1);
  v21 = a4[1];
  v22 = (v21 - *a4) >> 5;
  if (v22 != (uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 3
    || v22 != (uint64_t)(*(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)) >> 3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v37, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 262);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v37, "veccorrs->size() == filters_grad_.size() && veccorrs->size() == bias_grad_.size()");
    goto LABEL_31;
  }
  if (v21 == *a4)
    goto LABEL_27;
  v23 = 0;
  do
  {
    v24 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v23) + 16)
        + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v23) + 16)
        * *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v23) + 20);
    if (v24 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v37, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 264);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v37, "(filters_grad_[ic]->NumRows() * filters_grad_[ic]->NumCols() + bias_grad_[ic]->Dim()) == NumParams()");
      goto LABEL_31;
    }
    ++v23;
    v25 = *a4;
    v26 = a4[1];
  }
  while (v23 < (v26 - *a4) >> 5);
  if (v26 != v25)
  {
    v27 = 0;
    do
    {
      v28 = v25 + 32 * v27;
      kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 200) + 8 * v27), v28, (uint64_t *)&v37);
      v29 = *(_QWORD *)(a1 + 200);
      v30 = v37;
      v37 = 0;
      v31 = *(_QWORD *)(v29 + 8 * v27);
      *(_QWORD *)(v29 + 8 * v27) = v30;
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
      v32 = v37;
      v37 = 0;
      if (v32)
        (*(void (**)(void *))(*(_QWORD *)v32 + 24))(v32);
      kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 224) + 8 * v27), v28, (uint64_t *)&v37);
      v33 = *(_QWORD *)(a1 + 224);
      v34 = v37;
      v37 = 0;
      v35 = *(_QWORD *)(v33 + 8 * v27);
      *(_QWORD *)(v33 + 8 * v27) = v34;
      if (v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
      v36 = v37;
      v37 = 0;
      if (v36)
        (*(void (**)(void *))(*(_QWORD *)v36 + 16))(v36);
      ++v27;
      v25 = *a4;
    }
    while (v27 < (a4[1] - *a4) >> 5);
  }
LABEL_27:
  *(_BYTE *)(a1 + 16) = 1;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v37, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 280);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"Done  vectorization of convolutional 2D component", 49);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v37);
  }
}

void sub_1DE462138(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>(v2, a1);
  return v2;
}

void sub_1DE4621D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit(uint64_t a1)
{
  return kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit(a1 - 88);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent(v2, a1);
  return v2;
}

void sub_1DE462240(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit(uint64_t a1)
{
  return kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit(a1 - 96);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(_QWORD *)(*(_QWORD *)(a1 + 208) - 8));
  return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(_QWORD *)(*(_QWORD *)(a1 + 232) - 8));
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::GetType()
{
  return 265;
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::GetType()
{
  return 266;
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::GetType()
{
  return 267;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::UpdateWeights(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  float v9;
  float v10;
  float v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  int *v24;
  int v25;
  int *v26;
  int v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  _BYTE *v33;
  _BYTE *v34;
  _QWORD v35[34];

  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  v10 = *(float *)(a1 + 64);
  v9 = *(float *)(a1 + 68);
  v11 = *(float *)(a1 + 72);
  v12 = *(_DWORD *)(a1 + 76);
  *(_QWORD *)(*(_QWORD *)(a1 + 184) + 32) = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 192) + 24) = a2;
  v13 = *(unsigned int *)(a1 + 80);
  if (a3 >= 0)
    v14 = a3;
  else
    v14 = *(_DWORD *)(a1 + 80);
  if ((_DWORD)v13 == 1)
    v15 = 0;
  else
    v15 = v14;
  if ((int)v15 > (int)v13)
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)0x309, "batch_idx <= opts_.num_subbatches", v8);
  v16 = *(uint64_t **)(a1 + 200);
  *(_QWORD *)(v16[(int)v15] + 32) = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * (int)v15) + 24) = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 248) + 48 * (int)v15 + 32) = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 272) + 32 * (int)v15 + 24) = a2;
  if ((_DWORD)v15 == (_DWORD)v13)
  {
    kaldi::CuMatrixBase<float>::AddMat(v16[(int)v15], *v16, 111, v7, v8, 1.0, 0.0);
    kaldi::CuVectorBase<float>::AddVec(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * (int)v15), **(_QWORD **)(a1 + 224), v17, v18, v19, 1.0, 0.0);
    if (*(int *)(a1 + 80) > 1)
    {
      v20 = 1;
      do
      {
        kaldi::CuMatrixBase<float>::AddMat(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * (int)v15), *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v20), 111, v7, v8, 1.0, 1.0);
        kaldi::CuVectorBase<float>::AddVec(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * (int)v15), *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v20++), v21, v22, v23, 1.0, 1.0);
      }
      while (v20 < *(int *)(a1 + 80));
    }
    v24 = *(int **)(a1 + 320);
    v24[(int)v15] = 0;
    if ((int)v13 >= 1)
    {
      v25 = 0;
      v26 = v24;
      do
      {
        v27 = *v26++;
        v25 += v27;
        v24[(int)v15] = v25;
        --v13;
      }
      while (v13);
    }
  }
  v28 = *(float *)(a1 + 56);
  if (*(_BYTE *)(a1 + 84))
    v28 = v28 / (float)*(int *)(*(_QWORD *)(a1 + 320) + 4 * (int)v15);
  v29 = *(_QWORD *)(a1 + 352);
  if ((int)v15 >= (unint64_t)((*(_QWORD *)(a1 + 360) - v29) >> 2))
  {
    LODWORD(v35[0]) = 2143289344;
    std::vector<float>::resize(a1 + 352, (int)v15 + 1, v35);
    v29 = *(_QWORD *)(a1 + 352);
  }
  *(float *)(v29 + 4 * (int)v15) = v28;
  if (*(float *)(a1 + 148) >= 0.0)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 248))(a1, v15);
  if (v10 != 0.0)
    kaldi::CuMatrixBase<float>::AddMat(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 184), 111, v7, v8, (float)-(float)(v28 * v10) * (float)*(int *)(*(_QWORD *)(a1 + 320) + 4 * (int)v15), 1.0);
  if (v9 != 0.0)
    kaldi::cu::RegularizeL1<float>(*(_QWORD *)(a1 + 184), *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * (int)v15), (float)(v9 * v28) * (float)*(int *)(*(_QWORD *)(a1 + 320) + 4 * (int)v15), v28, v6, v7, v8);
  if (v11 > 0.0)
  {
    if (*(int *)(a1 + 80) >= 2)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v35, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 816);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v35, "the multi batch gradient quantization does not work yet");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v35);
    }
    if (*(_QWORD *)(a1 + 384) == *(_QWORD *)(a1 + 376))
      kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
    kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 376), v12, v11, v6, v7, v8);
  }
  kaldi::CuMatrixBase<float>::AddMat(*(_QWORD *)(a1 + 184), *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * (int)v15), 111, v7, v8, -(float)(v28 * *(float *)(a1 + 136)), 1.0);
  kaldi::CuVectorBase<float>::AddVec(*(_QWORD *)(a1 + 192), *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * (int)v15), v30, v31, v32, -(float)(v28 * *(float *)(a1 + 140)), 1.0);
  v33 = *(_BYTE **)(a1 + 320);
  if ((_DWORD)v15 == *(_DWORD *)(a1 + 80))
  {
    v34 = *(_BYTE **)(a1 + 328);
    if (v33 != v34)
      bzero(v33, ((v34 - v33 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  else
  {
    *(_DWORD *)&v33[4 * (int)v15] = 0;
  }
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = off_1EA92D6D8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1EA929750;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1EA92A900;
  *(_QWORD *)(a1 + 96) = &unk_1EA92A928;
  *(_QWORD *)a1 = &unk_1EA92A7C8;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AssignMembers<kaldi::CuMatrixBase<float>>(a1, a2);
  return a1;
}

void sub_1DE46276C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  void *v15;
  uint64_t v16;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(_QWORD *)(v10 + 360) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(_QWORD *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v16 = *(_QWORD *)(v10 + 192);
  *(_QWORD *)(v10 + 192) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(v10 + 184), 0);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v12);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AssignMembers<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[34];

  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (a1 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(_QWORD *)(a2 + 328), (uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 2);
  *(_BYTE *)(a1 + 344) = 0;
  if (a1 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(_QWORD *)(a2 + 360), (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2);
  v4 = *(_QWORD *)(a2 + 184);
  if (v4)
  {
    v5 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v5, v4);
    v6 = (uint64_t *)(a1 + 184);
    v7 = v5;
  }
  else
  {
    v6 = (uint64_t *)(a1 + 184);
    v7 = 0;
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](v6, v7);
  if (*(_QWORD *)(a2 + 192))
  {
    v8 = operator new();
    v9 = *(unsigned int *)(*(_QWORD *)(a2 + 192) + 16);
    *(_QWORD *)v8 = &unk_1EA92DFD8;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    kaldi::CuVector<float>::Resize(v8, v9, 1u, v10, v11);
    v15 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v8;
    if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
      v8 = *(_QWORD *)(a1 + 192);
    }
    kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)v8, *(_QWORD *)(a2 + 192), v12, v13, v14);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateBNNSFilter(a1);
  if (*(_QWORD *)(a2 + 384) != *(_QWORD *)(a2 + 376))
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v17, "AssignMembers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1451);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v17);
  }
}

void sub_1DE462A24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = off_1EA92D6D8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1EA929750;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1EA92AA88;
  *(_QWORD *)(a1 + 96) = &unk_1EA92AAB0;
  *(_QWORD *)a1 = &unk_1EA92A950;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AssignMembers<kaldi::CuMatrixBase<float>>(a1, a2);
  return a1;
}

void sub_1DE462BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  void *v15;
  uint64_t v16;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(_QWORD *)(v10 + 360) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(_QWORD *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v16 = *(_QWORD *)(v10 + 192);
  *(_QWORD *)(v10 + 192) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(v10 + 184), 0);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v12);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AssignMembers<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[34];

  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (a1 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(_QWORD *)(a2 + 328), (uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 2);
  *(_BYTE *)(a1 + 344) = 0;
  if (a1 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(_QWORD *)(a2 + 360), (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2);
  v4 = *(_QWORD *)(a2 + 184);
  if (v4)
  {
    v5 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix(v5, v4);
    v6 = (uint64_t *)(a1 + 184);
    v7 = v5;
  }
  else
  {
    v6 = (uint64_t *)(a1 + 184);
    v7 = 0;
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](v6, v7);
  if (*(_QWORD *)(a2 + 192))
  {
    v8 = operator new();
    v9 = *(unsigned int *)(*(_QWORD *)(a2 + 192) + 16);
    *(_QWORD *)v8 = &unk_1EA92DFD8;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    kaldi::CuVector<float>::Resize(v8, v9, 1u, v10, v11);
    v15 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v8;
    if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
      v8 = *(_QWORD *)(a1 + 192);
    }
    kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)v8, *(_QWORD *)(a2 + 192), v12, v13, v14);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateBNNSFilter(a1);
  if (*(_QWORD *)(a2 + 384) != *(_QWORD *)(a2 + 376))
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v17, "AssignMembers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1451);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v17);
  }
}

void sub_1DE462E68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<kaldi::CuMatrix<float>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<kaldi::CuMatrix<float>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<kaldi::CuMatrix<float>>>::~__split_buffer(&v15);
  }
}

void sub_1DE463008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<kaldi::CuMatrix<float>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<kaldi::CuMatrix<float>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::CuMatrix<float>>>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::CuMatrix<float>>>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::CuMatrix<float>>>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::CuMatrix<float>>>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::CuMatrix<float>>>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::CuMatrix<float>>>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<kaldi::CuMatrix<float>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<kaldi::CuMatrix<float>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<kaldi::CuMatrix<float>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

_QWORD *std::vector<kaldi::CuSubMatrix<float>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuSubMatrix<float>>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 40 * a2;
    v6 = 40 * a2;
    v7 = (_OWORD *)(v4 + 8);
    do
    {
      *v7 = 0uLL;
      v7[1] = 0uLL;
      *((_QWORD *)v7 - 1) = &unk_1EA926508;
      v7 = (_OWORD *)((char *)v7 + 40);
      v6 -= 40;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_1DE4632B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = off_1EA92D6D8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1EA929750;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1EA92AA88;
  *(_QWORD *)(a1 + 96) = &unk_1EA92AAB0;
  *(_QWORD *)a1 = &unk_1EA92A950;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AssignMembers<kaldi::QuantizedMatrix<signed char>>(a1, a2);
  return a1;
}

void sub_1DE463400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  void *v15;
  uint64_t v16;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(_QWORD *)(v10 + 360) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(_QWORD *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v16 = *(_QWORD *)(v10 + 192);
  *(_QWORD *)(v10 + 192) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(v10 + 184), 0);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v12);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AssignMembers<kaldi::QuantizedMatrix<signed char>>(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[34];

  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (a1 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(_QWORD *)(a2 + 328), (uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 2);
  *(_BYTE *)(a1 + 344) = 0;
  if (a1 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(_QWORD *)(a2 + 360), (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2);
  v4 = *(int **)(a2 + 184);
  if (v4)
  {
    v5 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix<signed char>(v5, v4);
    v6 = (uint64_t *)(a1 + 184);
    v7 = v5;
  }
  else
  {
    v6 = (uint64_t *)(a1 + 184);
    v7 = 0;
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](v6, v7);
  if (*(_QWORD *)(a2 + 192))
  {
    v8 = operator new();
    v9 = *(unsigned int *)(*(_QWORD *)(a2 + 192) + 16);
    *(_QWORD *)v8 = &unk_1EA92DFD8;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    kaldi::CuVector<float>::Resize(v8, v9, 1u, v10, v11);
    v15 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v8;
    if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
      v8 = *(_QWORD *)(a1 + 192);
    }
    kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)v8, *(_QWORD *)(a2 + 192), v12, v13, v14);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateBNNSFilter(a1);
  if (*(_QWORD *)(a2 + 384) != *(_QWORD *)(a2 + 376))
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v17, "AssignMembers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1451);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v17);
  }
}

void sub_1DE4636B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = off_1EA92D6D8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1EA929750;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1EA92A900;
  *(_QWORD *)(a1 + 96) = &unk_1EA92A928;
  *(_QWORD *)a1 = &unk_1EA92A7C8;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AssignMembers<kaldi::QuantizedMatrix<short>>(a1, a2);
  return a1;
}

void sub_1DE463844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  void *v15;
  uint64_t v16;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(_QWORD *)(v10 + 360) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(_QWORD *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v16 = *(_QWORD *)(v10 + 192);
  *(_QWORD *)(v10 + 192) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(v10 + 184), 0);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v12);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AssignMembers<kaldi::QuantizedMatrix<short>>(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[34];

  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (a1 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(_QWORD *)(a2 + 328), (uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 2);
  *(_BYTE *)(a1 + 344) = 0;
  if (a1 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(_QWORD *)(a2 + 360), (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2);
  v4 = *(int **)(a2 + 184);
  if (v4)
  {
    v5 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix<short>(v5, v4);
    v6 = (uint64_t *)(a1 + 184);
    v7 = v5;
  }
  else
  {
    v6 = (uint64_t *)(a1 + 184);
    v7 = 0;
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](v6, v7);
  if (*(_QWORD *)(a2 + 192))
  {
    v8 = operator new();
    v9 = *(unsigned int *)(*(_QWORD *)(a2 + 192) + 16);
    *(_QWORD *)v8 = &unk_1EA92DFD8;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    kaldi::CuVector<float>::Resize(v8, v9, 1u, v10, v11);
    v15 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v8;
    if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
      v8 = *(_QWORD *)(a1 + 192);
    }
    kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)v8, *(_QWORD *)(a2 + 192), v12, v13, v14);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateBNNSFilter(a1);
  if (*(_QWORD *)(a2 + 384) != *(_QWORD *)(a2 + 376))
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v17, "AssignMembers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1451);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v17);
  }
}

void sub_1DE463AFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ConvolutionalMaxPoolingComponent(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  *(_OWORD *)(a1 + 56) = xmmword_1DEC3D450;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)a1 = &unk_1EA92C6A0;
  *(_QWORD *)(a1 + 88) = &unk_1EA92C7D8;
  *(_QWORD *)(a1 + 96) = &unk_1EA92C800;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a1 + 264) = _D1;
  *(_DWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 276) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_BYTE *)(a1 + 480) = 0;
  return result;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ConvolutionalMaxPoolingComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32[35];

  *(_QWORD *)a1 = off_1EA92D6D8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1EA929750;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_QWORD *)(a1 + 88) = &unk_1EA92C7D8;
  *(_QWORD *)(a1 + 96) = &unk_1EA92C800;
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)a1 = &unk_1EA92C6A0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = 0;
  v6 = (uint64_t *)(a1 + 152);
  *(_QWORD *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 168), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 192), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 3);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 216), *(_QWORD *)(a2 + 216), *(_QWORD *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 224) - *(_QWORD *)(a2 + 216)) >> 4));
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 240), *(_QWORD *)(a2 + 240), *(_QWORD *)(a2 + 248), (uint64_t)(*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 5);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 288), *(const void **)(a2 + 288), *(_QWORD *)(a2 + 296), (uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 312), *(const void **)(a2 + 312), *(_QWORD *)(a2 + 320), (uint64_t)(*(_QWORD *)(a2 + 320) - *(_QWORD *)(a2 + 312)) >> 2);
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_BYTE *)(a1 + 480) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "ConvolutionalMaxPoolingComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 76);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
  }
  v7 = *(_QWORD *)(a2 + 152);
  if (v7)
  {
    kaldi::NewCuSubOrMat<float>(v7, 0, v32);
    v8 = v32[0];
    v32[0] = 0;
    v9 = *v6;
    *v6 = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      v10 = v32[0];
      v32[0] = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    }
  }
  v11 = *(_QWORD **)(a2 + 160);
  if (v11)
  {
    kaldi::NewCuSubOrVec<float>(v11, *(unsigned __int8 *)(a1 + 16), v32);
    v12 = v32[0];
    v32[0] = 0;
    v13 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v12;
    if (v13)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
      v14 = v32[0];
      v32[0] = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    }
  }
  v16 = *(_QWORD *)(a1 + 168);
  v15 = *(_QWORD *)(a1 + 176);
  if (v15 != v16)
  {
    v17 = 0;
    do
    {
      v18 = *(_QWORD *)(*(_QWORD *)(a2 + 168) + 8 * v17);
      if (v18)
      {
        kaldi::NewCuSubOrMat<float>(v18, *(unsigned __int8 *)(a1 + 16), v32);
        v19 = *(_QWORD *)(a1 + 168);
        v20 = v32[0];
        v32[0] = 0;
        v21 = *(_QWORD *)(v19 + 8 * v17);
        *(_QWORD *)(v19 + 8 * v17) = v20;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
        v22 = v32[0];
        v32[0] = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
        v16 = *(_QWORD *)(a1 + 168);
        v15 = *(_QWORD *)(a1 + 176);
      }
      ++v17;
    }
    while (v17 < (v15 - v16) >> 3);
  }
  v24 = *(_QWORD *)(a1 + 192);
  v23 = *(_QWORD *)(a1 + 200);
  if (v23 != v24)
  {
    v25 = 0;
    do
    {
      v26 = *(_QWORD **)(*(_QWORD *)(a2 + 192) + 8 * v25);
      if (v26)
      {
        kaldi::NewCuSubOrVec<float>(v26, *(unsigned __int8 *)(a1 + 16), v32);
        v27 = *(_QWORD *)(a1 + 192);
        v28 = v32[0];
        v32[0] = 0;
        v29 = *(_QWORD *)(v27 + 8 * v25);
        *(_QWORD *)(v27 + 8 * v25) = v28;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
        v30 = v32[0];
        v32[0] = 0;
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
        v24 = *(_QWORD *)(a1 + 192);
        v23 = *(_QWORD *)(a1 + 200);
      }
      ++v25;
    }
    while (v25 < (v23 - v24) >> 3);
  }
  if (*(_QWORD *)(a2 + 496) != *(_QWORD *)(a2 + 488))
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator((_QWORD *)a1, (uint64_t *)(a1 + 488));
  return a1;
}

void sub_1DE464020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, void **a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  kaldi::nnet1::UpdatableComponent *v16;
  uint64_t *v17;
  void **v18;
  void **v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v18);
  v20 = (void *)*((_QWORD *)v16 + 57);
  if (v20)
    operator delete(v20);
  a16 = (_QWORD *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v21 = *v19;
  if (*v19)
  {
    *((_QWORD *)v16 + 40) = v21;
    operator delete(v21);
  }
  v22 = *a13;
  if (*a13)
  {
    *((_QWORD *)v16 + 37) = v22;
    operator delete(v22);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v23 = *((_QWORD *)v16 + 20);
  *((_QWORD *)v16 + 20) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  v24 = *v17;
  *v17 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a14);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((uint64_t)a1);
  v7 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad((uint64_t)a1, ((a1[22] - a1[21]) >> 3) - 1, v4, v5, v6);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
  v11 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad((uint64_t)a1, ((a1[25] - a1[24]) >> 3) - 1, v8, v9, v10);
  return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v11);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)(a1 + 88) = &unk_1EA92C7D8;
  v2 = a1 + 88;
  *(_QWORD *)a1 = &unk_1EA92C6A0;
  *(_QWORD *)(a1 + 96) = &unk_1EA92C800;
  v3 = a1 + 96;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 488));
  v4 = *(void **)(a1 + 456);
  if (v4)
    operator delete(v4);
  v9 = (void **)(a1 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)(a1 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)(a1 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)(a1 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)(a1 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v5 = *(void **)(a1 + 312);
  if (v5)
  {
    *(_QWORD *)(a1 + 320) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 288);
  if (v6)
  {
    *(_QWORD *)(a1 + 296) = v6;
    operator delete(v6);
  }
  v9 = (void **)(a1 + 240);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)(a1 + 216);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)(a1 + 192);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)(a1 + 168);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v7 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  v8 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(a1);
  JUMPOUT(0x1DF0ED014);
}

void `non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(uint64_t a1)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(a1 - 88);
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(a1 - 96);
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(a1 - 88);
  JUMPOUT(0x1DF0ED014);
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(a1 - 96);
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ConvolutionalMaxPoolingComponent(v2, a1);
  return v2;
}

void sub_1DE464414(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3, uint64_t a4, const char *a5)
{
  int *v8;
  int *v9;
  int *v10;
  uint64_t *v11;
  int *v12;
  int *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v17;
  BOOL v21;
  int *v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  float *v27;
  BOOL v29;
  __int128 *v30;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  _BOOL4 v45;
  BOOL v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int i;
  unint64_t j;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  float v63;
  const char *v64;
  float v65;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  unint64_t v75;
  float v76;
  float v77;
  int v78;
  float v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  _QWORD *v88;
  __int128 *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  int *v93;
  float *v94;
  int *v95;
  float *v96;
  int *v97;
  float *v98;
  int *v99;
  float *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  _BYTE v107[16];
  uint64_t v108;
  void *__p;
  void *v110;
  void **v111[34];
  __int128 v112;
  uint64_t v113;
  int v114;
  int v115;
  float v116;
  int v117;

  v116 = 2.0;
  v117 = -1073741824;
  v115 = 1036831949;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 8);
  v8 = (int *)(a1 + 116);
  *(_QWORD *)(a1 + 132) = 0x100000001;
  v9 = (int *)(a1 + 132);
  v10 = (int *)(a1 + 136);
  v114 = -1;
  v112 = 0uLL;
  v113 = 0;
  v11 = a2 + 4;
  v94 = (float *)(a1 + 280);
  v95 = (int *)(a1 + 128);
  v98 = (float *)(a1 + 264);
  v99 = (int *)(a1 + 124);
  v93 = (int *)(a1 + 120);
  v96 = (float *)(a1 + 268);
  v97 = (int *)(a1 + 112);
  v12 = (int *)(a1 + 108);
  v13 = (int *)(a1 + 104);
  while ((*((_BYTE *)v11 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v112, a4, a5);
    if ((SHIBYTE(v113) & 0x80000000) == 0)
    {
      switch(HIBYTE(v113))
      {
        case 0xA:
          if ((_QWORD)v112 != 0x61654D736169423CLL || WORD4(v112) != 15982)
            goto LABEL_107;
          goto LABEL_61;
        case 0xB:
          if ((_QWORD)v112 == 0x6E6152736169423CLL && *(_QWORD *)((char *)&v112 + 3) == 0x3E65676E61527361)
            goto LABEL_109;
          if (HIBYTE(v113) == 10)
            goto LABEL_108;
          if (HIBYTE(v113) != 11)
            goto LABEL_128;
LABEL_96:
          v35 = (_QWORD)v112 == 0x745368637461503CLL && *(_QWORD *)((char *)&v112 + 3) == 0x3E70657453686374;
          v22 = v97;
          if (!v35)
            goto LABEL_107;
          goto LABEL_129;
        case 0xC:
          goto LABEL_102;
        case 0xD:
          if ((_QWORD)v112 == 0x74536D617261503CLL && *(_QWORD *)((char *)&v112 + 5) == 0x3E7665646474536DLL)
            goto LABEL_135;
LABEL_78:
          v32 = (_QWORD)v112 == 0x6E6F69746365533CLL && *(_QWORD *)((char *)&v112 + 5) == 0x3E706574536E6F69;
          v22 = v8;
          if (v32)
            goto LABEL_129;
          if (HIBYTE(v113) == 10)
            goto LABEL_108;
          if (HIBYTE(v113) == 12)
            goto LABEL_102;
          if (HIBYTE(v113) != 13)
            goto LABEL_128;
          v33 = (_QWORD)v112 == 0x6E6F69746365533CLL && *(_QWORD *)((char *)&v112 + 5) == 0x3E657A69536E6F69;
          v22 = v93;
          if (!v33)
            goto LABEL_128;
          goto LABEL_129;
        case 0xF:
          v34 = (_QWORD)v112 == 0x75746165466E493CLL && *(_QWORD *)((char *)&v112 + 7) == 0x3E7370614D657275;
          v22 = v13;
          if (!v34)
          {
            v30 = &v112;
            switch(HIBYTE(v113))
            {
              case 0xA:
                goto LABEL_124;
              case 0xB:
                goto LABEL_96;
              case 0xC:
                goto LABEL_102;
              case 0xD:
                goto LABEL_78;
              case 0xF:
                goto LABEL_138;
              default:
                goto LABEL_128;
            }
          }
          goto LABEL_129;
        case 0x10:
          v29 = (_QWORD)v112 == 0x7461654674754F3CLL && *((_QWORD *)&v112 + 1) == 0x3E7370614D657275;
          v22 = v12;
          if (!v29)
          {
            v30 = &v112;
            switch(HIBYTE(v113))
            {
              case 0xA:
                goto LABEL_124;
              case 0xB:
                goto LABEL_96;
              case 0xC:
                goto LABEL_102;
              case 0xD:
                goto LABEL_78;
              case 0xF:
LABEL_138:
                v46 = (_QWORD)v112 == 0x65726168536E493CLL && *(_QWORD *)((char *)&v112 + 7) == 0x3E73646E61426465;
                v22 = v95;
                if (!v46)
                  goto LABEL_107;
                goto LABEL_129;
              default:
                goto LABEL_128;
            }
          }
          goto LABEL_129;
        default:
          goto LABEL_128;
      }
    }
    v17 = *((_QWORD *)&v112 + 1);
    if (*((_QWORD *)&v112 + 1) == 10)
    {
      if (*(_QWORD *)v112 == 0x61654D736169423CLL && *(_WORD *)(v112 + 8) == 15982)
      {
LABEL_61:
        v27 = (float *)&v117;
        goto LABEL_136;
      }
      v17 = *((_QWORD *)&v112 + 1);
    }
    else if (*((_QWORD *)&v112 + 1) == 13
           && *(_QWORD *)v112 == 0x74536D617261503CLL
           && *(_QWORD *)(v112 + 5) == 0x3E7665646474536DLL)
    {
LABEL_135:
      v27 = (float *)&v115;
      goto LABEL_136;
    }
    if (v17 == 11)
    {
      if (*(_QWORD *)v112 == 0x6E6152736169423CLL && *(_QWORD *)(v112 + 3) == 0x3E65676E61527361)
      {
LABEL_109:
        v27 = &v116;
        goto LABEL_136;
      }
      v17 = *((_QWORD *)&v112 + 1);
    }
    if (v17 == 15)
    {
      v21 = *(_QWORD *)v112 == 0x75746165466E493CLL && *(_QWORD *)(v112 + 7) == 0x3E7370614D657275;
      v22 = v13;
      if (v21)
        goto LABEL_129;
      v17 = *((_QWORD *)&v112 + 1);
    }
    if (v17 == 16)
    {
      v23 = *(_QWORD *)v112 == 0x7461654674754F3CLL && *(_QWORD *)(v112 + 8) == 0x3E7370614D657275;
      v22 = v12;
      if (v23)
        goto LABEL_129;
      v17 = *((_QWORD *)&v112 + 1);
    }
    if (v17 == 11)
    {
      v24 = *(_QWORD *)v112 == 0x745368637461503CLL && *(_QWORD *)(v112 + 3) == 0x3E70657453686374;
      v22 = v97;
      if (v24)
        goto LABEL_129;
      v17 = *((_QWORD *)&v112 + 1);
    }
    if (v17 != 13)
      goto LABEL_110;
    v25 = *(_QWORD *)v112 == 0x6E6F69746365533CLL && *(_QWORD *)(v112 + 5) == 0x3E706574536E6F69;
    v22 = v8;
    if (v25)
      goto LABEL_129;
    v17 = *((_QWORD *)&v112 + 1);
    if (*((_QWORD *)&v112 + 1) != 13)
      goto LABEL_110;
    v26 = *(_QWORD *)v112 == 0x6E6F69746365533CLL && *(_QWORD *)(v112 + 5) == 0x3E657A69536E6F69;
    v22 = v93;
    if (v26)
      goto LABEL_129;
    if ((v113 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v113) == 10)
        goto LABEL_108;
      if (HIBYTE(v113) != 12)
        goto LABEL_128;
LABEL_102:
      v36 = (_QWORD)v112 == 0x537265746C69463CLL && DWORD2(v112) == 1046837865;
      v22 = v99;
      if (v36)
        goto LABEL_129;
      if ((v113 & 0x8000000000000000) == 0)
      {
LABEL_107:
        if (HIBYTE(v113) != 10)
          goto LABEL_128;
LABEL_108:
        v30 = &v112;
LABEL_124:
        v39 = *(_QWORD *)v30;
        v40 = *((unsigned __int16 *)v30 + 4);
        v41 = v39 == 0x7A69536C6F6F503CLL && v40 == 15973;
        v22 = v9;
        if (v41)
          goto LABEL_129;
        goto LABEL_128;
      }
    }
    else
    {
LABEL_110:
      if (v17 != 12)
        goto LABEL_116;
      v37 = *(_QWORD *)v112 == 0x537265746C69463CLL && *(_DWORD *)(v112 + 8) == 1046837865;
      v22 = v99;
      if (v37)
        goto LABEL_129;
    }
    v17 = *((_QWORD *)&v112 + 1);
LABEL_116:
    if (v17 == 15)
    {
      v38 = *(_QWORD *)v112 == 0x65726168536E493CLL && *(_QWORD *)(v112 + 7) == 0x3E73646E61426465;
      v22 = v95;
      if (v38)
        goto LABEL_129;
      v17 = *((_QWORD *)&v112 + 1);
    }
    if (v17 == 10)
    {
      v30 = (__int128 *)v112;
      goto LABEL_124;
    }
LABEL_128:
    v42 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v112, "<PoolStep>");
    v22 = v10;
    if (v42)
      goto LABEL_129;
    v43 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v112, "<LearnRateCoef>");
    v27 = v98;
    if (!v43)
    {
      v44 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v112, "<BiasLearnRateCoef>");
      v27 = v96;
      if (!v44)
      {
        v45 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v112, "<MaxNorm>");
        v27 = v94;
        if (!v45)
        {
          if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v112, "<RandomSeed>"))
          {
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v111, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 237);
            v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"Unknown token ", 14);
            if (v113 >= 0)
              v89 = &v112;
            else
              v89 = (__int128 *)v112;
            if (v113 >= 0)
              v90 = HIBYTE(v113);
            else
              v90 = *((_QWORD *)&v112 + 1);
            v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)v89, v90);
            v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)", a typo in config?", 19);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)" (ParamStddev|BiasMean|BiasRange|InFeatureMaps|OutFeatureMaps|PatchStep|SectionStep|SectionSize|FilterSize|LearnRateCoef|BiasLearnRateCoef|MaxNorm|RandomSeed)", 158);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v111);
          }
          v22 = &v114;
LABEL_129:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v22, v14, v15);
          goto LABEL_137;
        }
      }
    }
LABEL_136:
    kaldi::ReadBasicType<float>(a2, 0, v27, v14, v15);
LABEL_137:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v47 = *(_DWORD *)(a1 + 8);
  v48 = *(_DWORD *)(a1 + 12);
  v50 = *(_DWORD *)(a1 + 104);
  v49 = *(_DWORD *)(a1 + 108);
  v51 = *(_DWORD *)(a1 + 132);
  v52 = v47 / v50 - *(_DWORD *)(a1 + 128);
  v53 = *(_DWORD *)(a1 + 120);
  v54 = *(_DWORD *)(a1 + 136);
  v55 = (v53 - v51) / v54 + 1;
  *(_DWORD *)(a1 + 148) = v55;
  v56 = v49 * v55;
  v57 = v48 / v56;
  *(_DWORD *)(a1 + 140) = v52;
  *(_DWORD *)(a1 + 144) = v48 / v56;
  if (v51 < 1 || v53 < v51)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v111, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 249);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"ConvolutionalMaxPoolingComponent: Invalid max pooling size", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v111);
  }
  if (v54 <= 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v111, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 251);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"ConvolutionalMaxPoolingComponent: Max pooling step must be >= 1", 63);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v111);
  }
  if (v48 != v56 * v57)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v111, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 254);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"ConvolutionalMaxPoolingComponent: output dim mismatch", 53);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v111);
  }
  if (v47 != v47 / v50 * v50)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v111, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 257);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"ConvolutionalMaxPoolingComponent: input dim mismatch", 52);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v111);
  }
  if (*v99 + *v97 * (v53 - 1) + *v8 * (v57 - 1) > v52)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v111, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 261);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"ConvolutionalMaxPoolingComponent: too few input bands to compute the output", 75);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v111);
  }
  if (v114 >= 1)
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v114);
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v107, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)&v103, ((*(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 124)) * *(_DWORD *)(a1 + 104)), (*(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108)), 0, 0);
  for (i = 0; i < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)&v103); ++i)
  {
    for (j = 0; (uint64_t)j < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)&v103); ++j)
    {
      v63 = *(float *)&v115;
      kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v107, 0, v60, v61, v62);
      if (v105 <= i || j >= v104)
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v64);
      *(float *)(v103 + 4 * i * v106 + 4 * j) = v63 * v65;
    }
  }
  if (*(_QWORD *)(a1 + 152))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v111, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 275);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"pointer is thought to be un-initialized here", 44);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v111);
  }
  v67 = operator new();
  kaldi::CuMatrix<float>::CuMatrix<float>(v67, &v103, 111, 0);
  v70 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v67;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 24))(v70);
  v71 = (*(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108));
  v101 = 0;
  v102 = 0;
  v100 = 0;
  kaldi::Vector<float>::Resize((void **)&v100, v71, 0, v68, v69);
  if ((int)v101 >= 1)
  {
    v75 = 0;
    do
    {
      v76 = *(float *)&v117;
      v77 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v72, v73, v74);
      v78 = v101;
      if (v75 >= v101)
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v74);
      v79 = v76 + (v77 + -0.5) * v116;
      v100[v75++] = v79;
    }
    while ((uint64_t)v75 < v78);
  }
  if (*(_QWORD *)(a1 + 160))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v111, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 285);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"pointer is thought to be un-initialized here", 44);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v111);
  }
  v80 = operator new();
  v81 = v101;
  *(_QWORD *)(v80 + 16) = 0;
  *(_QWORD *)(v80 + 24) = 0;
  *(_QWORD *)v80 = &unk_1EA92DFD8;
  *(_QWORD *)(v80 + 8) = 0;
  kaldi::CuVector<float>::Resize(v80, v81, 0, v82, v83);
  v87 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v80;
  if (v87)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 16))(v87);
    v80 = *(_QWORD *)(a1 + 160);
    if (!v80)
      kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEF, "bias_", v86);
  }
  kaldi::CuVectorBase<float>::CopyFromVec<float>((_DWORD *)v80, (uint64_t)&v100, v84, v85, v86);
  kaldi::Vector<float>::Destroy((uint64_t)&v100);
  kaldi::Matrix<float>::~Matrix((uint64_t)&v103);
  if (__p)
  {
    v110 = __p;
    operator delete(__p);
  }
  v111[0] = (void **)&v108;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v111);
  if (SHIBYTE(v113) < 0)
    operator delete((void *)v112);
}

void sub_1DE465154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  if (*(char *)(v24 - 121) < 0)
    operator delete(*(void **)(v24 - 144));
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  float *v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  uint64_t v43;
  const char *v44;
  _BOOL4 v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  void (***v52)(_QWORD, uint64_t *, uint64_t, uint64_t);
  uint64_t v53;
  const char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t result;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  __int128 *v71;
  uint64_t v72;
  int *v74;
  void *__p[2];
  uint64_t v76;
  __int128 v77;
  uint64_t v78;

  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 8);
  v7 = a1 + 116;
  *(_QWORD *)(a1 + 132) = 0x100000001;
  v8 = (int *)(a1 + 132);
  v74 = (int *)(a1 + 136);
  while (kaldi::Peek(a2, a3) == 60)
  {
    v77 = 0uLL;
    v78 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v77, v9, v10);
    if ((SHIBYTE(v78) & 0x80000000) == 0)
    {
      v13 = (uint64_t *)&v77;
      switch(HIBYTE(v78))
      {
        case 0xA:
          goto LABEL_87;
        case 0xB:
LABEL_4:
          v14 = (_QWORD)v77 == 0x745368637461503CLL && *(_QWORD *)((char *)&v77 + 3) == 0x3E70657453686374;
          v15 = a1 + 112;
          if (!v14)
            goto LABEL_86;
          goto LABEL_136;
        case 0xC:
          goto LABEL_81;
        case 0xD:
LABEL_68:
          v28 = (_QWORD)v77 == 0x6E6F69746365533CLL && *(_QWORD *)((char *)&v77 + 5) == 0x3E706574536E6F69;
          v15 = v7;
          if (v28)
            goto LABEL_136;
          if (HIBYTE(v78) == 10)
            goto LABEL_87;
          if (HIBYTE(v78) == 12)
            goto LABEL_81;
          if (HIBYTE(v78) != 13)
            goto LABEL_132;
          v29 = (_QWORD)v77 == 0x6E6F69746365533CLL && *(_QWORD *)((char *)&v77 + 5) == 0x3E657A69536E6F69;
          v15 = a1 + 120;
          if (!v29)
            goto LABEL_132;
          goto LABEL_136;
        case 0xF:
          v23 = (_QWORD)v77 == 0x75746165466E493CLL && *(_QWORD *)((char *)&v77 + 7) == 0x3E7370614D657275;
          v15 = a1 + 104;
          if (v23)
            goto LABEL_136;
LABEL_52:
          v24 = (_QWORD)v77 == 0x65726168536E493CLL && *(_QWORD *)((char *)&v77 + 7) == 0x3E73646E61426465;
          v15 = a1 + 128;
          if (v24)
            goto LABEL_136;
          if (HIBYTE(v78) != 15)
            goto LABEL_86;
          v25 = (_QWORD)v77 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v77 + 7) == 0x3E66656F43657461;
          v26 = (float *)(a1 + 264);
          if (!v25)
            goto LABEL_132;
          goto LABEL_138;
        case 0x10:
          v27 = (_QWORD)v77 == 0x7461654674754F3CLL && *((_QWORD *)&v77 + 1) == 0x3E7370614D657275;
          v15 = a1 + 108;
          if (!v27)
          {
            switch(HIBYTE(v78))
            {
              case 0xA:
                goto LABEL_87;
              case 0xB:
                goto LABEL_4;
              case 0xC:
                goto LABEL_81;
              case 0xD:
                goto LABEL_68;
              case 0xF:
                goto LABEL_52;
              default:
                goto LABEL_132;
            }
          }
          goto LABEL_136;
        case 0x13:
          goto LABEL_125;
        default:
          goto LABEL_132;
      }
    }
    v16 = *((_QWORD *)&v77 + 1);
    if (*((_QWORD *)&v77 + 1) == 15)
    {
      v17 = *(_QWORD *)v77 == 0x75746165466E493CLL && *(_QWORD *)(v77 + 7) == 0x3E7370614D657275;
      v15 = a1 + 104;
      if (v17)
        goto LABEL_136;
    }
    if (*((_QWORD *)&v77 + 1) == 16)
    {
      v18 = *(_QWORD *)v77 == 0x7461654674754F3CLL && *(_QWORD *)(v77 + 8) == 0x3E7370614D657275;
      v15 = a1 + 108;
      if (v18)
        goto LABEL_136;
      v16 = *((_QWORD *)&v77 + 1);
    }
    if (v16 == 11)
    {
      v19 = *(_QWORD *)v77 == 0x745368637461503CLL && *(_QWORD *)(v77 + 3) == 0x3E70657453686374;
      v15 = a1 + 112;
      if (v19)
        goto LABEL_136;
      v16 = *((_QWORD *)&v77 + 1);
    }
    if (v16 != 13)
      goto LABEL_41;
    v20 = *(_QWORD *)v77 == 0x6E6F69746365533CLL && *(_QWORD *)(v77 + 5) == 0x3E706574536E6F69;
    v15 = v7;
    if (v20)
      goto LABEL_136;
    v16 = *((_QWORD *)&v77 + 1);
    if (*((_QWORD *)&v77 + 1) != 13)
      goto LABEL_41;
    v21 = *(_QWORD *)v77 == 0x6E6F69746365533CLL && *(_QWORD *)(v77 + 5) == 0x3E657A69536E6F69;
    v15 = a1 + 120;
    if (v21)
      goto LABEL_136;
    if ((v78 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v78) == 10)
        goto LABEL_87;
      if (HIBYTE(v78) != 12)
        goto LABEL_132;
LABEL_81:
      v30 = (_QWORD)v77 == 0x537265746C69463CLL && DWORD2(v77) == 1046837865;
      v15 = a1 + 124;
      if (v30)
        goto LABEL_136;
      if ((v78 & 0x8000000000000000) == 0)
      {
LABEL_86:
        if (HIBYTE(v78) != 10)
          goto LABEL_132;
LABEL_87:
        v31 = (_QWORD)v77 == 0x7A69536C6F6F503CLL && WORD4(v77) == 15973;
        v15 = (uint64_t)v8;
        if (v31)
          goto LABEL_136;
        if ((v78 & 0x8000000000000000) == 0)
        {
          if (HIBYTE(v78) != 10)
            goto LABEL_132;
          v32 = (_QWORD)v77 == 0x6574536C6F6F503CLL && WORD4(v77) == 15984;
          v15 = (uint64_t)v74;
          if (!v32)
            goto LABEL_132;
          goto LABEL_136;
        }
LABEL_111:
        v16 = *((_QWORD *)&v77 + 1);
        if (*((_QWORD *)&v77 + 1) != 10)
          goto LABEL_117;
        v35 = *(_QWORD *)v77 == 0x6574536C6F6F503CLL && *(_WORD *)(v77 + 8) == 15984;
        v15 = (uint64_t)v74;
        if (!v35)
        {
          if (v78 < 0)
          {
LABEL_117:
            if (v16 == 15)
            {
              v36 = *(_QWORD *)v77 == 0x61526E7261654C3CLL && *(_QWORD *)(v77 + 7) == 0x3E66656F43657461;
              v26 = (float *)(a1 + 264);
              if (!v36)
              {
                v16 = *((_QWORD *)&v77 + 1);
                goto LABEL_123;
              }
LABEL_138:
              kaldi::ReadBasicType<float>(a2, a3, v26, v11, v12);
              goto LABEL_139;
            }
LABEL_123:
            if (v16 == 19)
            {
              v13 = (uint64_t *)v77;
LABEL_125:
              v37 = *v13;
              v38 = v13[1];
              v39 = *(uint64_t *)((char *)v13 + 11);
              v40 = v37 == 0x61654C736169423CLL && v38 == 0x6F43657461526E72;
              v41 = v40 && v39 == 0x3E66656F43657461;
              v26 = (float *)(a1 + 268);
              if (v41)
                goto LABEL_138;
            }
          }
LABEL_132:
          v42 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v77, "<MaxNorm>");
          v26 = (float *)(a1 + 280);
          if (!v42)
          {
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v77, "<GradientNormType>"))
            {
              __p[0] = 0;
              __p[1] = 0;
              v76 = 0;
              kaldi::ReadToken(a2, a3, (uint64_t)__p, v43, v44);
              *(_DWORD *)(a1 + 272) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
              if (SHIBYTE(v76) < 0)
                operator delete(__p[0]);
              goto LABEL_139;
            }
            v45 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v77, "<MaxGrad>");
            v26 = (float *)(a1 + 276);
            if (!v45)
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 332);
              v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
              if (v78 >= 0)
                v71 = &v77;
              else
                v71 = (__int128 *)v77;
              if (v78 >= 0)
                v72 = HIBYTE(v78);
              else
                v72 = *((_QWORD *)&v77 + 1);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v71, v72);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
            }
          }
          goto LABEL_138;
        }
        goto LABEL_136;
      }
    }
    else
    {
LABEL_41:
      if (v16 != 12)
        goto LABEL_100;
      v22 = *(_QWORD *)v77 == 0x537265746C69463CLL && *(_DWORD *)(v77 + 8) == 1046837865;
      v15 = a1 + 124;
      if (v22)
        goto LABEL_136;
    }
    v16 = *((_QWORD *)&v77 + 1);
LABEL_100:
    if (v16 == 15)
    {
      v33 = *(_QWORD *)v77 == 0x65726168536E493CLL && *(_QWORD *)(v77 + 7) == 0x3E73646E61426465;
      v15 = a1 + 128;
      if (v33)
        goto LABEL_136;
      v16 = *((_QWORD *)&v77 + 1);
    }
    if (v16 != 10)
      goto LABEL_117;
    v34 = *(_QWORD *)v77 == 0x7A69536C6F6F503CLL && *(_WORD *)(v77 + 8) == 15973;
    v15 = (uint64_t)v8;
    if (!v34)
      goto LABEL_111;
LABEL_136:
    kaldi::ReadBasicType<int>(a2, a3, v15, v11, v12);
LABEL_139:
    if (SHIBYTE(v78) < 0)
      operator delete((void *)v77);
  }
  v46 = *(_DWORD *)(a1 + 12);
  v47 = *(_DWORD *)(a1 + 108);
  v48 = *(_DWORD *)(a1 + 8) / *(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 128);
  v49 = (*(_DWORD *)(a1 + 120) - *(_DWORD *)(a1 + 132)) / *(_DWORD *)(a1 + 136) + 1;
  *(_DWORD *)(a1 + 148) = v49;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 140) = v48;
  *(_DWORD *)(a1 + 144) = v46 / (v47 * v49);
  LOBYTE(v77) = 0;
  kaldi::ReadBasicType<char>(a2, a3, &v77, v9, v10);
  if (*(_QWORD *)(a1 + 152))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 348);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "pointer is thought to be un-initialized here");
    goto LABEL_171;
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"<Filters>");
  v50 = ((*(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 124)) * *(_DWORD *)(a1 + 104));
  v51 = (*(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108));
  v52 = (void (***)(_QWORD, uint64_t *, uint64_t, uint64_t))operator new();
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v52, v50, v51, 0, 0, 0);
  v53 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v52;
  if (v53)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53);
    v52 = *(void (****)(_QWORD, uint64_t *, uint64_t, uint64_t))(a1 + 152);
    if (!v52)
      goto LABEL_160;
  }
  (**v52)(v52, a2, a3, a4);
  if (*(_QWORD *)(a1 + 160))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 356);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "pointer is thought to be un-initialized here");
LABEL_171:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"<Bias>");
  v55 = (_QWORD *)operator new();
  v56 = *(unsigned int *)(a1 + 12);
  v55[2] = 0;
  v55[3] = 0;
  *v55 = &unk_1EA92DFD8;
  v55[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v55, v56, 0, v57, v58);
  v59 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v55;
  if (v59)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 16))(v59);
    v55 = *(_QWORD **)(a1 + 160);
    if (!v55)
      goto LABEL_161;
  }
  result = (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t))*v55)(v55, a2, a3);
  v61 = *(_DWORD *)(a1 + 144);
  v62 = v61 * *(_DWORD *)(a1 + 108);
  if (*(_DWORD *)(a1 + 12) != v62 * *(_DWORD *)(a1 + 148))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x16C, "output_dim_ == out_feature_maps_ * num_pools_per_section_ * num_sections_", v54);
  v63 = *(_DWORD *)(a1 + 104);
  v64 = *(_DWORD *)(a1 + 140);
  v65 = *(_DWORD *)(a1 + 128);
  if (*(_DWORD *)(a1 + 8) != (v65 + v64) * v63)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x16D, "input_dim_ == in_feature_maps_ * (num_in_bands_ + in_shared_bands_)", v54);
  v66 = *(_DWORD *)(a1 + 120);
  v67 = *(_DWORD *)(a1 + 124);
  if (v67 + (v66 - 1) * *(_DWORD *)(a1 + 112) + *(_DWORD *)(a1 + 116) * (v61 - 1) > v64)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x170, "(num_sections_ - 1) * section_step_ + section_coverage <= num_in_bands_", v54);
  v68 = *(_QWORD *)(a1 + 152);
  if (!v68)
LABEL_160:
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v54);
  if (*(_DWORD *)(v68 + 20) != (v67 + v65) * v63)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x172, "Filters().NumRows() == in_feature_maps_ * (filter_size_ + in_shared_bands_)", v54);
  if (*(_DWORD *)(v68 + 16) != v62)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x173, "Filters().NumCols() == out_feature_maps_ * num_sections_", v54);
  v69 = *(_QWORD *)(a1 + 160);
  if (!v69)
LABEL_161:
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEF, "bias_", v54);
  if (*(_DWORD *)(v69 + 16) != v62)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x174, "Bias().Dim() == out_feature_maps_ * num_sections_", v54);
  if (*v8 < 1 || *v8 > v66 || *v74 <= 0)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x177, "pooling_size_ >= 1 && pooling_size_ <= section_size_ && pooling_step_ > 0", v54);
  return result;
}

void sub_1DE465DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 89) < 0)
    operator delete(*(void **)(v22 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::ReadBasicType<char>(_QWORD *a1, int a2, _BYTE *a3, uint64_t a4, const char *a5)
{
  int v7;
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD v13[52];

  v13[51] = *MEMORY[0x1E0C80C00];
  if (!a3)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadBasicType", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", (const char *)0x43, "t != NULL", a5);
  if (a2)
  {
    v7 = std::istream::get();
    if (v7 == -1)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "ReadBasicType", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", 73);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "ReadBasicType: encountered end of stream.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
    }
    if (v7 << 24 != 0x1000000)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "ReadBasicType", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", 79);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"ReadBasicType: did not get expected integer type, ", 50);
      v10 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" vs. ", 5);
      v11 = (_QWORD *)std::ostream::operator<<();
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)".  You can change this code to successfully", 43);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, " read it later, if needed.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
    }
    result = std::istream::read();
  }
  else
  {
    LOWORD(v13[0]) = 0;
    result = MEMORY[0x1DF0ECC3C](a1, v13);
    *a3 = v13[0];
  }
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "ReadBasicType", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", 97);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Read failure in ReadBasicType, file position is ", 48);
    std::istream::tellg();
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", next char is ", 15);
    std::istream::peek();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  return result;
}

void sub_1DE466070(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::WriteConfig(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  std::string __p;

  kaldi::WriteToken(a2, a3, (kaldi *)"<InFeatureMaps>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<OutFeatureMaps>", v8, v9);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PatchStep>", v10, v11);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<SectionStep>", v12, v13);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<SectionSize>", v14, v15);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FilterSize>", v16, v17);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<InSharedBands>", v18, v19);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolSize>", v20, v21);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolStep>", v22, v23);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v24, v25);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<BiasLearnRateCoef>", v26, v27);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxNorm>", v28, v29);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v30, v31);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 272), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v32, v33);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v34, v35);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

void sub_1DE4662C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::WriteData(_QWORD *a1, _QWORD *a2, const char *a3, int a4)
{
  uint64_t v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  _DWORD *v16;

  (*(void (**)(_QWORD *))(*a1 + 168))(a1);
  kaldi::WriteBasicType<char>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<Filters>", v8, v9);
  v11 = a1[19];
  if (!v11)
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE3, "filters_", v10);
  kaldi::CuMatrixBase<float>::Write(v11, a2, (int)a3, a4);
  kaldi::WriteToken(a2, a3, (kaldi *)"<Bias>", v12, v13);
  v16 = (_DWORD *)a1[20];
  if (!v16)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEB, "bias_", v15);
  kaldi::CuVectorBase<float>::Write(v16, a2, (int)a3, v14, v15);
}

uint64_t kaldi::WriteBasicType<char>(_QWORD *a1, int a2)
{
  uint64_t result;
  _QWORD *v4;
  std::runtime_error *exception;

  if (a2)
  {
    std::ostream::put();
    result = std::ostream::write();
  }
  else
  {
    v4 = (_QWORD *)std::ostream::operator<<();
    result = (uint64_t)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
  }
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteBasicType.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1DE466468(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::NumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a1 + 152);
  if (!v5)
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE3, "filters_", a5);
  v6 = *(_QWORD *)(a1 + 160);
  if (!v6)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEB, "bias_", a5);
  return (*(_DWORD *)(v6 + 16) + *(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20));
}

_DWORD *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::GetParams(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  v10 = a1[19];
  if (!v10)
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE3, "filters_", v9);
  v11 = *(_DWORD *)(v10 + 16) * *(_DWORD *)(v10 + 20);
  v18 = 0;
  v19 = 0;
  if (v11 > *(_DWORD *)(a2 + 8))
    goto LABEL_6;
  v17 = *(void **)a2;
  LODWORD(v18) = v11;
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v17, v10, v7, v8, v9);
  v14 = (_DWORD *)a1[20];
  if (!v14)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEB, "bias_", v9);
  v15 = v14[4];
  v18 = 0;
  v19 = 0;
  if ((v15 + v11) > *(_DWORD *)(a2 + 8))
LABEL_6:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
  v17 = (void *)(*(_QWORD *)a2 + 4 * v11);
  LODWORD(v18) = v15;
  return kaldi::CuVectorBase<float>::CopyToVec<float>(v14, (uint64_t)&v17, v12, v13, v9);
}

_DWORD *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::SetParams(_QWORD *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_QWORD *))(*a1 + 176))(a1))
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x324, "wei_src.Dim() == NumParams()", v5);
  v6 = a1[19];
  if (!v6)
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v5);
  v7 = *(_DWORD *)(v6 + 16) * *(_DWORD *)(v6 + 20);
  v14 = 0;
  v15 = 0;
  if (v7 > *(_DWORD *)(a2 + 8))
    goto LABEL_7;
  v13 = *(char **)a2;
  LODWORD(v14) = v7;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec(v6, &v13);
  v10 = (_DWORD *)a1[20];
  if (!v10)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEF, "bias_", v5);
  v11 = v10[4];
  v14 = 0;
  v15 = 0;
  if ((v11 + v7) > *(_DWORD *)(a2 + 8))
LABEL_7:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v5);
  v13 = (char *)(*(_QWORD *)a2 + 4 * v7);
  LODWORD(v14) = v11;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v10, (uint64_t)&v13, v8, v9, v5);
}

float kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;

  if (!*(_BYTE *)(a1 + 84))
    return *(float *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 312);
  v3 = *(_QWORD *)(a1 + 320) - v2;
  if (!v3)
    return NAN;
  v4 = v3 >> 2;
  if ((int)v4 <= a2)
    return NAN;
  v5 = v4 - 1;
  if (a2 >= 0)
    v5 = a2;
  return *(float *)(v2 + 4 * v5);
}

float kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::SumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  const char *v7;
  float v8;
  uint64_t v9;

  v6 = *(_QWORD *)(a1 + 152);
  if (!v6)
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE3, "filters_", a5);
  v8 = kaldi::CuMatrixBase<float>::Sum(v6, a2, a3, a4, a5);
  v9 = *(_QWORD *)(a1 + 160);
  if (!v9)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEB, "bias_", v7);
  return v8 + kaldi::CuVectorBase<float>::Sum(v9);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::PerturbParams(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v6;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  _QWORD v21[4];
  _BYTE v22[48];

  v6 = *(_QWORD *)(a1 + 152);
  if (!v6)
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", a6);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v22, *(unsigned int *)(v6 + 20), *(unsigned int *)(v6 + 16), 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v22);
  v11 = *(_QWORD *)(a1 + 152);
  if (!v11)
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v10);
  kaldi::CuMatrixBase<float>::AddMat(v11, (uint64_t)v22, 111, v9, v10, a2, 1.0);
  v15 = *(_QWORD *)(a1 + 160);
  if (!v15)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEF, "bias_", v14);
  kaldi::CuVector<float>::CuVector((uint64_t)v21, v15, v12, v13, v14);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v21);
  v19 = *(_QWORD *)(a1 + 160);
  if (!v19)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEF, "bias_", v18);
  kaldi::CuVectorBase<float>::AddVec(v19, (uint64_t)v21, v16, v17, v18, a2, 1.0);
  v21[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v21);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v22);
}

void sub_1DE466954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::Info(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  const char *v9;
  __int128 v10;
  uint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  __int128 v21;
  _DWORD *v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  void *__p[2];
  unsigned __int8 v27;
  void *v28[2];
  unsigned __int8 v29;
  void *v30[2];
  unsigned __int8 v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;

  std::string::basic_string[abi:ne180100]<0>(&v32, " ");
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ParamsString(a1);
  if ((v31 & 0x80u) == 0)
    v4 = v30;
  else
    v4 = (void **)v30[0];
  if ((v31 & 0x80u) == 0)
    v5 = v31;
  else
    v5 = (std::string::size_type)v30[1];
  v6 = std::string::append(&v32, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v33, "\n  filters");
  v10 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v10;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v11 = *(_QWORD *)(a1 + 152);
  if (!v11)
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE3, "filters_", v9);
  kaldi::nnet1::MomentStatistics<float>(v11);
  if ((v29 & 0x80u) == 0)
    v12 = v28;
  else
    v12 = (void **)v28[0];
  if ((v29 & 0x80u) == 0)
    v13 = v29;
  else
    v13 = (std::string::size_type)v28[1];
  v14 = std::string::append(&v34, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v35, "\n  bias");
  v21 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v21;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v22 = *(_DWORD **)(a1 + 160);
  if (!v22)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEB, "bias_", v20);
  kaldi::nnet1::MomentStatistics<float>(v22, v17, v18, v19, v20);
  if ((v27 & 0x80u) == 0)
    v23 = __p;
  else
    v23 = (void **)__p[0];
  if ((v27 & 0x80u) == 0)
    v24 = v27;
  else
    v24 = (std::string::size_type)__p[1];
  v25 = std::string::append(&v36, (const std::string::value_type *)v23, v24);
  *a2 = *v25;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if ((char)v27 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if ((char)v29 < 0)
    operator delete(v28[0]);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if ((char)v31 < 0)
    operator delete(v30[0]);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_1DE466BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v45 - 41) < 0)
    operator delete(*(void **)(v45 - 64));
  if (*(char *)(v45 - 73) < 0)
    operator delete(*(void **)(v45 - 96));
  if (a20 < 0)
    operator delete(a15);
  if (a45 < 0)
    operator delete(a40);
  if (a38 < 0)
    operator delete(a33);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ParamsString(uint64_t a1)
{
  _QWORD *v2;
  _QWORD v4[11];
  char v5;
  uint64_t v6;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 168))(a1, v4, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" , # of sections: ", 18);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", section size after pooling: ", 30);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v4[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v5 < 0)
    operator delete((void *)v4[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v6);
}

void sub_1DE466D6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  void **v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  void **v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  void **v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  void **v42;
  std::string::size_type v43;
  std::string *v44;
  void *__p[2];
  unsigned __int8 v46;
  void *v47[2];
  unsigned __int8 v48;
  void *v49[2];
  unsigned __int8 v50;
  void *v51[2];
  unsigned __int8 v52;
  void *v53[2];
  unsigned __int8 v54;
  void *v55[2];
  unsigned __int8 v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;

  std::string::basic_string[abi:ne180100]<0>(&v57, " ");
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ParamsString(a1);
  if ((v56 & 0x80u) == 0)
    v4 = v55;
  else
    v4 = (void **)v55[0];
  if ((v56 & 0x80u) == 0)
    v5 = v56;
  else
    v5 = (std::string::size_type)v55[1];
  v6 = std::string::append(&v57, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v58, "\n  filters_grad");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 168), v10, v11, v12, v13);
  if ((v54 & 0x80u) == 0)
    v14 = v53;
  else
    v14 = (void **)v53[0];
  if ((v54 & 0x80u) == 0)
    v15 = v54;
  else
    v15 = (std::string::size_type)v53[1];
  v16 = std::string::append(&v59, (const std::string::value_type *)v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v60, ", lr-coef ");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v52 & 0x80u) == 0)
    v20 = v51;
  else
    v20 = (void **)v51[0];
  if ((v52 & 0x80u) == 0)
    v21 = v52;
  else
    v21 = (std::string::size_type)v51[1];
  v22 = std::string::append(&v61, (const std::string::value_type *)v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = std::string::append(&v62, ", max-norm ");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v63.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v50 & 0x80u) == 0)
    v26 = v49;
  else
    v26 = (void **)v49[0];
  if ((v50 & 0x80u) == 0)
    v27 = v50;
  else
    v27 = (std::string::size_type)v49[1];
  v28 = std::string::append(&v63, (const std::string::value_type *)v26, v27);
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v64, "\n  bias_grad");
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 192), v32, v33, v34, v35);
  if ((v48 & 0x80u) == 0)
    v36 = v47;
  else
    v36 = (void **)v47[0];
  if ((v48 & 0x80u) == 0)
    v37 = v48;
  else
    v37 = (std::string::size_type)v47[1];
  v38 = std::string::append(&v65, (const std::string::value_type *)v36, v37);
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  v40 = std::string::append(&v66, ", lr-coef ");
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v67.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v46 & 0x80u) == 0)
    v42 = __p;
  else
    v42 = (void **)__p[0];
  if ((v46 & 0x80u) == 0)
    v43 = v46;
  else
    v43 = (std::string::size_type)__p[1];
  v44 = std::string::append(&v67, (const std::string::value_type *)v42, v43);
  *a2 = *v44;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  if ((char)v46 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if ((char)v48 < 0)
    operator delete(v47[0]);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if ((char)v50 < 0)
    operator delete(v49[0]);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if ((char)v52 < 0)
    operator delete(v51[0]);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if ((char)v54 < 0)
    operator delete(v53[0]);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if ((char)v56 < 0)
    operator delete(v55[0]);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
}

void sub_1DE467154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a66;
  char a71;
  void *a72;
  char a73;
  uint64_t v73;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v73 - 57) < 0)
    operator delete(*(void **)(v73 - 80));
  if (*(char *)(v73 - 89) < 0)
    operator delete(*(void **)(v73 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v73 - 121) < 0)
    operator delete(*(void **)(v73 - 144));
  if (*(char *)(v73 - 153) < 0)
    operator delete(*(void **)(v73 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v73 - 185) < 0)
    operator delete(*(void **)(v73 - 208));
  if (*(char *)(v73 - 217) < 0)
    operator delete(*(void **)(v73 - 240));
  if (a33 < 0)
    operator delete(a28);
  if (a73 < 0)
    operator delete(a72);
  if (a71 < 0)
    operator delete(a66);
  if (a39 < 0)
    operator delete(a34);
  if (a64 < 0)
    operator delete(a59);
  if (a57 < 0)
    operator delete(a52);
  if (a45 < 0)
    operator delete(a40);
  if (a51 < 0)
    operator delete(a46);
  _Unwind_Resume(a1);
}

void sub_1DE4672B0()
{
  JUMPOUT(0x1DE467228);
}

void sub_1DE4672B8()
{
  JUMPOUT(0x1DE467238);
}

void sub_1DE4672C0()
{
  JUMPOUT(0x1DE467248);
}

void sub_1DE4672C8()
{
  JUMPOUT(0x1DE467258);
}

void sub_1DE4672D0()
{
  JUMPOUT(0x1DE467268);
}

void sub_1DE4672D8()
{
  JUMPOUT(0x1DE467278);
}

void sub_1DE4672E0()
{
  JUMPOUT(0x1DE467288);
}

void sub_1DE4672E8()
{
  JUMPOUT(0x1DE467298);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::PropagateFncDirect(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v7;
  int v8;
  uint64_t *v9;
  int v10;
  const char *v11;
  uint64_t v12;
  int v13;
  int i;
  uint64_t v15;
  const char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  int v24;
  const char *v25;
  uint64_t v26;
  int v27;
  int j;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  const char *v41;
  uint64_t v42;
  void *v44;
  __int128 v45;
  __int128 v46;
  void *v47;
  __int128 v48;
  __int128 v49;
  void *v50;
  __int128 v51;
  __int128 v52;
  void *v53;
  uint64_t v54;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(a1);
  if (*(int *)(a1 + 128) <= 0)
    v7 = 0.0;
  else
    v7 = 1.0;
  v42 = a2;
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 384) + 48 * a4, *(unsigned int *)(a2 + 20), (*(_DWORD *)(a1 + 108) * *(_DWORD *)(a1 + 120)), 3u, 0);
  if (*(int *)(a1 + 144) >= 1)
  {
    v8 = 0;
    v9 = &v54;
    do
    {
      v10 = *(_DWORD *)(a1 + 120);
      if (*(int *)(a1 + 128) >= 1)
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v53, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(v10 * v8 * *(_DWORD *)(a1 + 108)), *(_DWORD *)(a1 + 108));
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v50, v42, 0, *(_DWORD *)(v42 + 20), (const char *)(*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 140)), *(_DWORD *)(a1 + 128) * *(_DWORD *)(a1 + 104));
        v12 = *(_QWORD *)(a1 + 152);
        if (!v12)
          kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v11);
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v47, v12, *(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 124), *(_DWORD *)(a1 + 128) * *(_DWORD *)(a1 + 104), (const char *)(*(_DWORD *)(a1 + 108) * v8), *(_DWORD *)(a1 + 108));
        kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v53, (uint64_t)&v50, CblasNoTrans, (uint64_t)&v47, (const char *)0x6F, 1.0, 0.0);
        v13 = *(_DWORD *)(a1 + 120);
        if (v13 >= 2)
        {
          for (i = 1; i < v13; ++i)
          {
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v44, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(*(_DWORD *)(a1 + 108) * (i + v8 * v13)), *(_DWORD *)(a1 + 108));
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v44, (uint64_t)&v53, 111, v15, v16);
            v44 = &unk_1EA926508;
            v45 = 0u;
            v46 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v44);
            v13 = *(_DWORD *)(a1 + 120);
          }
        }
        v47 = &unk_1EA926508;
        v48 = 0u;
        v49 = 0u;
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v47);
        v50 = &unk_1EA926508;
        v51 = 0u;
        v52 = 0u;
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v50);
        v53 = &unk_1EA926508;
        *(_OWORD *)v9 = 0u;
        *((_OWORD *)v9 + 1) = 0u;
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v53);
        v10 = *(_DWORD *)(a1 + 120);
      }
      if (v10 >= 1)
      {
        v17 = 0;
        while (1)
        {
          v18 = *(_QWORD *)(a1 + 384) + 48 * a4;
          v19 = kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v53, v18, 0, *(_DWORD *)(v18 + 20), (const char *)(*(_DWORD *)(a1 + 108) * v17), *(_DWORD *)(a1 + 108));
          v23 = *(_QWORD *)(a1 + 160);
          if (!v23)
            break;
          v24 = *(_DWORD *)(a1 + 108);
          *(_QWORD *)&v52 = 0;
          v51 = 0uLL;
          v50 = &unk_1EA926538;
          if ((v24 * v8 + v24) > *(_DWORD *)(v23 + 16))
          {
            v38 = 468;
            v39 = "CuSubVector";
            v40 = "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h";
            v41 = "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<Un"
                  "signedMatrixIndexT>(t.Dim())";
            goto LABEL_29;
          }
          *(_QWORD *)&v51 = *(_QWORD *)(v23 + 8) + 4 * v24 * v8;
          DWORD2(v51) = v24;
          *(_QWORD *)&v52 = *(_QWORD *)(v23 + 24);
          kaldi::CuMatrixBase<float>::AddVecToRows(v19, (uint64_t)&v50, v20, v21, v22, 1.0, v7);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v50, v42, 0, *(_DWORD *)(v42 + 20), (const char *)((*(_DWORD *)(a1 + 116) * v8 + *(_DWORD *)(a1 + 112) * v17)* *(_DWORD *)(a1 + 104)), *(_DWORD *)(a1 + 124) * *(_DWORD *)(a1 + 104));
          v26 = *(_QWORD *)(a1 + 152);
          if (!v26)
            kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v25);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v47, v26, 0, *(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 124), (const char *)(*(_DWORD *)(a1 + 108) * v8), *(_DWORD *)(a1 + 108));
          kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v53, (uint64_t)&v50, CblasNoTrans, (uint64_t)&v47, (const char *)0x6F, 1.0, 1.0);
          v47 = &unk_1EA926508;
          v48 = 0u;
          v49 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v47);
          v50 = &unk_1EA926508;
          v51 = 0u;
          v52 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v50);
          v53 = &unk_1EA926508;
          *(_OWORD *)v9 = 0u;
          *((_OWORD *)v9 + 1) = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v53);
          if (++v17 >= *(_DWORD *)(a1 + 120))
            goto LABEL_18;
        }
        v38 = 239;
        v41 = "bias_";
        v40 = "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h";
        v39 = "Bias";
LABEL_29:
        kaldi::KaldiAssertFailure_((kaldi *)v39, v40, (const char *)v38, v41, v22);
      }
LABEL_18:
      v27 = *(_DWORD *)(a1 + 148);
      if (v27 >= 1)
      {
        for (j = 0; j < v27; ++j)
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v53, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(*(_DWORD *)(a1 + 108) * (j + v27 * v8)), *(_DWORD *)(a1 + 108));
          v29 = *(_QWORD *)(a1 + 384) + 48 * a4;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v50, v29, 0, *(_DWORD *)(v29 + 20), (const char *)(*(_DWORD *)(a1 + 136) * j * *(_DWORD *)(a1 + 108)), *(_DWORD *)(a1 + 108));
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v53, (uint64_t)&v50, 111, v30, v31);
          v32 = v9;
          v50 = &unk_1EA926508;
          v51 = 0u;
          v52 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v50);
          if (*(int *)(a1 + 132) >= 2)
          {
            v33 = 1;
            do
            {
              v34 = *(_QWORD *)(a1 + 384) + 48 * a4;
              kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v50, v34, 0, *(_DWORD *)(v34 + 20), (const char *)((v33 + j * *(_DWORD *)(a1 + 136)) * *(_DWORD *)(a1 + 108)), *(_DWORD *)(a1 + 108));
              kaldi::CuMatrixBase<float>::Max((uint64_t)&v53, (uint64_t)&v50, v35, v36, v37);
              v50 = &unk_1EA926508;
              v51 = 0u;
              v52 = 0u;
              kaldi::CuMatrixBase<float>::~CuMatrixBase(&v50);
              ++v33;
            }
            while (v33 < *(_DWORD *)(a1 + 132));
          }
          v53 = &unk_1EA926508;
          v9 = v32;
          *(_OWORD *)v32 = 0u;
          *((_OWORD *)v32 + 1) = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v53);
          v27 = *(_DWORD *)(a1 + 148);
        }
      }
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 144));
  }
}

void sub_1DE467838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  _OWORD *v26;
  uint64_t v27;
  _OWORD *v28;
  uint64_t v29;

  a26 = v27 + 16;
  *v28 = 0u;
  v28[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a26);
  *(_QWORD *)(v29 - 144) = v27 + 16;
  *v26 = 0u;
  v26[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v29 - 144);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  int v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  const char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[48];
  _BYTE v42[48];

  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v42, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v41, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  (*(void (**)(uint64_t, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v8 + 112))(v8, a2, v42, 0);
  (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v8 + 128))(v8, a2, v42, a3, v41, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 232))(v8, a2, a3, 0, 0);
  v10 = a1[19];
  if (!v10)
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE3, "filters_", v9);
  v12 = *(_DWORD *)(v10 + 16);
  v11 = *(_DWORD *)(v10 + 20);
  v13 = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v13, 1, v14, v15);
  v19 = v12 * v11;
  v39 = 0;
  v40 = 0;
  if (v19 > *(_DWORD *)(a4 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v18);
  v38 = *(void **)a4;
  LODWORD(v39) = v19;
  v20 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(v8, 0, v16, v17, v18);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v38, v20, v21, v22, v23);
  v27 = a1[20];
  if (!v27)
  {
    v34 = "bias_";
    v35 = 235;
    v36 = "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h";
    v37 = "Bias";
    goto LABEL_10;
  }
  v28 = *(_DWORD *)(v27 + 16);
  v39 = 0;
  v40 = 0;
  if ((v28 + v19) > *(_DWORD *)(a4 + 8))
  {
    v34 = "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMa"
          "trixIndexT>(t.Dim())";
    v35 = 550;
    v36 = "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h";
    v37 = "SubVector";
LABEL_10:
    kaldi::KaldiAssertFailure_((kaldi *)v37, v36, (const char *)v35, v34, v26);
  }
  v38 = (void *)(*(_QWORD *)a4 + 4 * v19);
  LODWORD(v39) = v28;
  v29 = (_DWORD *)kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(v8, 0, v24, v25, v26);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v29, (uint64_t)&v38, v30, v31, v32);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v41);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v42);
}

void sub_1DE467B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 168);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 176) - v5) >> 3))
    kaldi::KaldiAssertFailure_((kaldi *)"FiltersGrad", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xFB, "filters_grad_.size() > i", a5);
  result = *(_QWORD *)(v5 + 8 * a2);
  if (!result)
    kaldi::KaldiAssertFailure_((kaldi *)"FiltersGrad", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xFC, "filters_grad_[i]", a5);
  return result;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 192);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 200) - v5) >> 3))
    kaldi::KaldiAssertFailure_((kaldi *)"BiasGrad", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0x105, "bias_grad_.size() > i", a5);
  result = *(_QWORD *)(v5 + 8 * a2);
  if (!result)
    kaldi::KaldiAssertFailure_((kaldi *)"BiasGrad", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0x106, "bias_grad_[i]", a5);
  return result;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 276) = a3;
  *(_DWORD *)(result + 272) = a2;
  *(_BYTE *)(result + 480) = 0;
  return result;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::NormalizeGradients(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  float v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;

  v7 = a6;
  v9 = *(_DWORD *)(a1 + 272);
  if (v9 == 3)
  {
    if (a6 >= 0.0 && a6 <= 1.0)
    {
      v16 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a2, a3, a4, a5);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v16, *(_QWORD *)(a1 + 216) + 48 * a2, v7);
      v20 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a2, v17, v18, v19);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v20, *(_QWORD *)(a1 + 240) + 32 * a2, v7, v21, v22, v23);
    }
  }
  else if (v9 == 2)
  {
    if (a6 > 0.0)
    {
      v24 = a2;
      if (*(_BYTE *)(a1 + 84))
        v7 = (float)*(int *)(*(_QWORD *)(a1 + 288) + 4 * a2) * a6;
      v25 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a2, a3, a4, a5);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v25, (unsigned int *)(*(_QWORD *)(a1 + 216) + 48 * (int)v24), v7, v26, v27, v28);
      v32 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a2, v29, v30, v31);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v32, (_DWORD *)(*(_QWORD *)(a1 + 240) + 32 * v24), v33, v34, v35, v7);
    }
  }
  else if (v9 == 1 && a6 > 0.0)
  {
    if (*(_BYTE *)(a1 + 84))
      v7 = (float)*(int *)(*(_QWORD *)(a1 + 288) + 4 * a2) * a6;
    v10 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a2, a3, a4, a5);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v10, v7);
    v14 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a2, v11, v12, v13);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v14, v7);
  }
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD v30[34];

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  v9 = *(_QWORD *)(a1 + 160);
  if (!v9)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEF, "bias_", v8);
  v10 = *(_QWORD *)(a1 + 152);
  if (!v10)
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v8);
  *a3 = *(_DWORD *)(v9 + 16) + *(_DWORD *)(v10 + 16) * *(_DWORD *)(v10 + 20);
  v11 = *(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192);
    if (v12)
    {
      v13 = v11 >> 3;
      v14 = v12 >> 3;
      if (*(_DWORD *)(a1 + 80) == 1)
        v15 = 0;
      else
        v15 = *(_DWORD *)(a1 + 80);
      v16 = v14 - 1;
      if (v13 - 1 != v15 || v16 != v15)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30, "CountZeroCorr", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 883);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Unexpected mismatch in indexes: ", 32);
        v28 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"  ", 2);
        v29 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"  ", 2);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30);
      }
      v18 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, v15, v6, v7, v8);
      v23 = kaldi::CuMatrixBase<float>::CountZeros(v18, v19, v20, v21, v22);
      v27 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, v15, v24, v25, v26);
      LODWORD(v11) = kaldi::CuVectorBase<float>::CountZeros(v27) + v23;
    }
    else
    {
      LODWORD(v11) = 0;
    }
  }
  *a2 = v11;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t i;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  const char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(a1);
  v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1)
    v3 = (v2 + 1);
  else
    v3 = 1;
  if (!*(_BYTE *)(a1 + 480))
  {
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 408), (int)v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 360), (int)v3);
    std::vector<BOOL>::resize(a1 + 456, (int)v3, 0);
    v4 = *(_DWORD *)(a1 + 272);
    v5 = (_QWORD *)(a1 + 168);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 168, (int)v3);
    v6 = (_QWORD *)(a1 + 192);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize(a1 + 192, (int)v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 216), (int)v3);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 240), (int)v3);
    if ((int)v3 >= 1)
    {
      for (i = 0; i != v3; ++i)
      {
        v8 = operator new();
        v10 = v8;
        v11 = *(_QWORD *)(a1 + 152);
        if (!v11)
          kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v9);
        kaldi::CuMatrix<float>::CuMatrix(v8, *(unsigned int *)(v11 + 20), *(unsigned int *)(v11 + 16), 0, 0, 0);
        v12 = *(_QWORD *)(*v5 + 8 * i);
        *(_QWORD *)(*v5 + 8 * i) = v10;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
        v13 = (_QWORD *)operator new();
        v16 = v13;
        v17 = *(_QWORD *)(a1 + 160);
        if (!v17)
          kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEF, "bias_", v15);
        v18 = *(unsigned int *)(v17 + 16);
        *v13 = &unk_1EA92DFD8;
        v13[1] = 0;
        v13[2] = 0;
        v13[3] = 0;
        kaldi::CuVector<float>::Resize((uint64_t)v13, v18, 0, v14, v15);
        v20 = *(_QWORD *)(*v6 + 8 * i);
        *(_QWORD *)(*v6 + 8 * i) = v16;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
        if ((v4 & 0xFFFFFFFE) == 2)
        {
          v21 = *(_QWORD *)(a1 + 152);
          if (!v21
            || (kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 216) + 48 * i, *(unsigned int *)(v21 + 20), *(unsigned int *)(v21 + 16), 1u, 0), (v23 = *(_QWORD *)(a1 + 152)) == 0))
          {
            kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v19);
          }
          kaldi::CuVector<float>::Resize(*(_QWORD *)(a1 + 240) + 32 * i, *(unsigned int *)(v23 + 20), 1u, v22, v19);
          if (*(_DWORD *)(a1 + 272) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 216) + 48 * i, v24, v25, v26, v27, 1.0);
            kaldi::CuVectorBase<float>::Set(*(_QWORD *)(a1 + 240) + 32 * i, 1.0);
          }
        }
      }
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 288), (int)v3);
    *(_BYTE *)(a1 + 480) = 1;
  }
}

void sub_1DE468240(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>(v2, a1);
  return v2;
}

void sub_1DE4682C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit(uint64_t a1)
{
  return kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit(a1 - 88);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>(v2, a1);
  return v2;
}

void sub_1DE468334(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit(uint64_t a1)
{
  return kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit(a1 - 96);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ApplyCorr(uint64_t a1, int a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  v9 = *(_QWORD *)(a1 + 152);
  if (!v9)
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v8);
  v10 = -(float)(a3 * *(float *)(a1 + 264));
  v11 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a2, v6, v7, v8);
  kaldi::CuMatrixBase<float>::AddMat(v9, v11, 111, v12, v13, v10, 1.0);
  v17 = *(_QWORD *)(a1 + 160);
  if (!v17)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEF, "bias_", v16);
  v18 = *(float *)(a1 + 268) * (float)-a3;
  v19 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a2, v14, v15, v16);
  kaldi::CuVectorBase<float>::AddVec(v17, v19, v20, v21, v22, v18, 1.0);
}

uint64_t *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(uint64_t a1)
{
  int v2;
  int v3;
  unint64_t v4;

  v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1)
    v3 = v2 + 1;
  else
    v3 = 1;
  v4 = v3;
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 336), v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 384), v4);
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 432), v4);
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  __int128 v22;
  char *v23;
  int v24;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      v21 = 0;
      v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v9 <= 0x3FFFFFFFFFFFFFFELL)
        v12 = v11;
      else
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      std::vector<BOOL>::reserve(&v21, v12);
      v13 = *(unint64_t **)a1;
      v14 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v22 = v14 + v6;
      v23 = v21;
      v24 = 0;
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      v17 = v19;
      LODWORD(v18) = v20;
      v15 = *(char **)a1;
      *(_QWORD *)a1 = v21;
      v21 = v15;
      v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      v22 = v16;
      if (v15)
        operator delete(v15);
    }
    else
    {
      v17 = (char *)(*(_QWORD *)a1 + 8 * (v5 >> 6));
      v18 = *(_QWORD *)(a1 + 8) & 0x3FLL;
      *(_QWORD *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_1DE4685F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  *(_OWORD *)(a1 + 56) = xmmword_1DEC3D450;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)a1 = &unk_1EA92C828;
  *(_QWORD *)(a1 + 88) = &unk_1EA92C960;
  *(_QWORD *)(a1 + 96) = &unk_1EA92C988;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a1 + 264) = _D1;
  *(_DWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 276) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_BYTE *)(a1 + 480) = 0;
  return result;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29[35];

  *(_QWORD *)a1 = off_1EA92D6D8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1EA929750;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_QWORD *)(a1 + 88) = &unk_1EA92C960;
  *(_QWORD *)(a1 + 96) = &unk_1EA92C988;
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)a1 = &unk_1EA92C828;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 168), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 192), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 3);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 216), *(_QWORD *)(a2 + 216), *(_QWORD *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 224) - *(_QWORD *)(a2 + 216)) >> 4));
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 240), *(_QWORD *)(a2 + 240), *(_QWORD *)(a2 + 248), (uint64_t)(*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 5);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 288), *(const void **)(a2 + 288), *(_QWORD *)(a2 + 296), (uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 312), *(const void **)(a2 + 312), *(_QWORD *)(a2 + 320), (uint64_t)(*(_QWORD *)(a2 + 320) - *(_QWORD *)(a2 + 312)) >> 2);
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_BYTE *)(a1 + 480) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29, "ConvolutionalMaxPoolingComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 76);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
  v6 = *(int **)(a2 + 152);
  if (v6)
  {
    v7 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v7, v6);
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), v7);
  }
  v8 = *(_QWORD **)(a2 + 160);
  if (v8)
  {
    kaldi::NewCuSubOrVec<float>(v8, *(unsigned __int8 *)(a1 + 16), v29);
    v9 = v29[0];
    v29[0] = 0;
    v10 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v11 = v29[0];
      v29[0] = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    }
  }
  v13 = *(_QWORD *)(a1 + 168);
  v12 = *(_QWORD *)(a1 + 176);
  if (v12 != v13)
  {
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 168) + 8 * v14);
      if (v15)
      {
        kaldi::NewCuSubOrMat<float>(v15, *(unsigned __int8 *)(a1 + 16), v29);
        v16 = *(_QWORD *)(a1 + 168);
        v17 = v29[0];
        v29[0] = 0;
        v18 = *(_QWORD *)(v16 + 8 * v14);
        *(_QWORD *)(v16 + 8 * v14) = v17;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        v19 = v29[0];
        v29[0] = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
        v13 = *(_QWORD *)(a1 + 168);
        v12 = *(_QWORD *)(a1 + 176);
      }
      ++v14;
    }
    while (v14 < (v12 - v13) >> 3);
  }
  v21 = *(_QWORD *)(a1 + 192);
  v20 = *(_QWORD *)(a1 + 200);
  if (v20 != v21)
  {
    v22 = 0;
    do
    {
      v23 = *(_QWORD **)(*(_QWORD *)(a2 + 192) + 8 * v22);
      if (v23)
      {
        kaldi::NewCuSubOrVec<float>(v23, *(unsigned __int8 *)(a1 + 16), v29);
        v24 = *(_QWORD *)(a1 + 192);
        v25 = v29[0];
        v29[0] = 0;
        v26 = *(_QWORD *)(v24 + 8 * v22);
        *(_QWORD *)(v24 + 8 * v22) = v25;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        v27 = v29[0];
        v29[0] = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        v21 = *(_QWORD *)(a1 + 192);
        v20 = *(_QWORD *)(a1 + 200);
      }
      ++v22;
    }
    while (v22 < (v20 - v21) >> 3);
  }
  if (*(_QWORD *)(a2 + 496) != *(_QWORD *)(a2 + 488))
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator((_QWORD *)a1, (uint64_t *)(a1 + 488));
  return a1;
}

void sub_1DE468ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, void **a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  kaldi::nnet1::UpdatableComponent *v16;
  void **v17;
  uint64_t *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  v19 = (void *)*((_QWORD *)v16 + 57);
  if (v19)
    operator delete(v19);
  a16 = (_QWORD *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v20 = *a12;
  if (*a12)
  {
    *((_QWORD *)v16 + 40) = v20;
    operator delete(v20);
  }
  v21 = *a13;
  if (*a13)
  {
    *((_QWORD *)v16 + 37) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v22 = *((_QWORD *)v16 + 20);
  *((_QWORD *)v16 + 20) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](v18, 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a14);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs((uint64_t)a1);
  v7 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad((uint64_t)a1, ((a1[22] - a1[21]) >> 3) - 1, v4, v5, v6);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
  v11 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad((uint64_t)a1, ((a1[25] - a1[24]) >> 3) - 1, v8, v9, v10);
  return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v11);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void **v8;

  *(_QWORD *)(a1 + 88) = &unk_1EA92C960;
  v2 = a1 + 88;
  *(_QWORD *)a1 = &unk_1EA92C828;
  *(_QWORD *)(a1 + 96) = &unk_1EA92C988;
  v3 = a1 + 96;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 488));
  v4 = *(void **)(a1 + 456);
  if (v4)
    operator delete(v4);
  v8 = (void **)(a1 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v5 = *(void **)(a1 + 312);
  if (v5)
  {
    *(_QWORD *)(a1 + 320) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 288);
  if (v6)
  {
    *(_QWORD *)(a1 + 296) = v6;
    operator delete(v6);
  }
  v8 = (void **)(a1 + 240);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 216);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 192);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 168);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v7 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(a1);
  JUMPOUT(0x1DF0ED014);
}

void `non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(uint64_t a1)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(a1 - 88);
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(a1 - 96);
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(a1 - 88);
  JUMPOUT(0x1DF0ED014);
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(a1 - 96);
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent(v2, a1);
  return v2;
}

void sub_1DE468EC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3, uint64_t a4, const char *a5)
{
  int *v8;
  int *v9;
  int *v10;
  uint64_t *v11;
  int *v12;
  int *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v17;
  BOOL v21;
  int *v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  float *v27;
  BOOL v29;
  __int128 *v30;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  _BOOL4 v45;
  BOOL v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int i;
  unint64_t j;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  float v63;
  const char *v64;
  float v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  unint64_t v74;
  float v75;
  float v76;
  int v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  _QWORD *v87;
  __int128 *v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  int *v92;
  float *v93;
  int *v94;
  float *v95;
  int *v96;
  float *v97;
  int *v98;
  float *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  _BYTE v106[16];
  uint64_t v107;
  void *__p;
  void *v109;
  void **v110[34];
  __int128 v111;
  uint64_t v112;
  int v113;
  int v114;
  float v115;
  int v116;

  v115 = 2.0;
  v116 = -1073741824;
  v114 = 1036831949;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 8);
  v8 = (int *)(a1 + 116);
  *(_QWORD *)(a1 + 132) = 0x100000001;
  v9 = (int *)(a1 + 132);
  v10 = (int *)(a1 + 136);
  v113 = -1;
  v111 = 0uLL;
  v112 = 0;
  v11 = a2 + 4;
  v93 = (float *)(a1 + 280);
  v94 = (int *)(a1 + 128);
  v97 = (float *)(a1 + 264);
  v98 = (int *)(a1 + 124);
  v92 = (int *)(a1 + 120);
  v95 = (float *)(a1 + 268);
  v96 = (int *)(a1 + 112);
  v12 = (int *)(a1 + 108);
  v13 = (int *)(a1 + 104);
  while ((*((_BYTE *)v11 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v111, a4, a5);
    if ((SHIBYTE(v112) & 0x80000000) == 0)
    {
      switch(HIBYTE(v112))
      {
        case 0xA:
          if ((_QWORD)v111 != 0x61654D736169423CLL || WORD4(v111) != 15982)
            goto LABEL_107;
          goto LABEL_61;
        case 0xB:
          if ((_QWORD)v111 == 0x6E6152736169423CLL && *(_QWORD *)((char *)&v111 + 3) == 0x3E65676E61527361)
            goto LABEL_109;
          if (HIBYTE(v112) == 10)
            goto LABEL_108;
          if (HIBYTE(v112) != 11)
            goto LABEL_128;
LABEL_96:
          v35 = (_QWORD)v111 == 0x745368637461503CLL && *(_QWORD *)((char *)&v111 + 3) == 0x3E70657453686374;
          v22 = v96;
          if (!v35)
            goto LABEL_107;
          goto LABEL_129;
        case 0xC:
          goto LABEL_102;
        case 0xD:
          if ((_QWORD)v111 == 0x74536D617261503CLL && *(_QWORD *)((char *)&v111 + 5) == 0x3E7665646474536DLL)
            goto LABEL_135;
LABEL_78:
          v32 = (_QWORD)v111 == 0x6E6F69746365533CLL && *(_QWORD *)((char *)&v111 + 5) == 0x3E706574536E6F69;
          v22 = v8;
          if (v32)
            goto LABEL_129;
          if (HIBYTE(v112) == 10)
            goto LABEL_108;
          if (HIBYTE(v112) == 12)
            goto LABEL_102;
          if (HIBYTE(v112) != 13)
            goto LABEL_128;
          v33 = (_QWORD)v111 == 0x6E6F69746365533CLL && *(_QWORD *)((char *)&v111 + 5) == 0x3E657A69536E6F69;
          v22 = v92;
          if (!v33)
            goto LABEL_128;
          goto LABEL_129;
        case 0xF:
          v34 = (_QWORD)v111 == 0x75746165466E493CLL && *(_QWORD *)((char *)&v111 + 7) == 0x3E7370614D657275;
          v22 = v13;
          if (!v34)
          {
            v30 = &v111;
            switch(HIBYTE(v112))
            {
              case 0xA:
                goto LABEL_124;
              case 0xB:
                goto LABEL_96;
              case 0xC:
                goto LABEL_102;
              case 0xD:
                goto LABEL_78;
              case 0xF:
                goto LABEL_138;
              default:
                goto LABEL_128;
            }
          }
          goto LABEL_129;
        case 0x10:
          v29 = (_QWORD)v111 == 0x7461654674754F3CLL && *((_QWORD *)&v111 + 1) == 0x3E7370614D657275;
          v22 = v12;
          if (!v29)
          {
            v30 = &v111;
            switch(HIBYTE(v112))
            {
              case 0xA:
                goto LABEL_124;
              case 0xB:
                goto LABEL_96;
              case 0xC:
                goto LABEL_102;
              case 0xD:
                goto LABEL_78;
              case 0xF:
LABEL_138:
                v46 = (_QWORD)v111 == 0x65726168536E493CLL && *(_QWORD *)((char *)&v111 + 7) == 0x3E73646E61426465;
                v22 = v94;
                if (!v46)
                  goto LABEL_107;
                goto LABEL_129;
              default:
                goto LABEL_128;
            }
          }
          goto LABEL_129;
        default:
          goto LABEL_128;
      }
    }
    v17 = *((_QWORD *)&v111 + 1);
    if (*((_QWORD *)&v111 + 1) == 10)
    {
      if (*(_QWORD *)v111 == 0x61654D736169423CLL && *(_WORD *)(v111 + 8) == 15982)
      {
LABEL_61:
        v27 = (float *)&v116;
        goto LABEL_136;
      }
      v17 = *((_QWORD *)&v111 + 1);
    }
    else if (*((_QWORD *)&v111 + 1) == 13
           && *(_QWORD *)v111 == 0x74536D617261503CLL
           && *(_QWORD *)(v111 + 5) == 0x3E7665646474536DLL)
    {
LABEL_135:
      v27 = (float *)&v114;
      goto LABEL_136;
    }
    if (v17 == 11)
    {
      if (*(_QWORD *)v111 == 0x6E6152736169423CLL && *(_QWORD *)(v111 + 3) == 0x3E65676E61527361)
      {
LABEL_109:
        v27 = &v115;
        goto LABEL_136;
      }
      v17 = *((_QWORD *)&v111 + 1);
    }
    if (v17 == 15)
    {
      v21 = *(_QWORD *)v111 == 0x75746165466E493CLL && *(_QWORD *)(v111 + 7) == 0x3E7370614D657275;
      v22 = v13;
      if (v21)
        goto LABEL_129;
      v17 = *((_QWORD *)&v111 + 1);
    }
    if (v17 == 16)
    {
      v23 = *(_QWORD *)v111 == 0x7461654674754F3CLL && *(_QWORD *)(v111 + 8) == 0x3E7370614D657275;
      v22 = v12;
      if (v23)
        goto LABEL_129;
      v17 = *((_QWORD *)&v111 + 1);
    }
    if (v17 == 11)
    {
      v24 = *(_QWORD *)v111 == 0x745368637461503CLL && *(_QWORD *)(v111 + 3) == 0x3E70657453686374;
      v22 = v96;
      if (v24)
        goto LABEL_129;
      v17 = *((_QWORD *)&v111 + 1);
    }
    if (v17 != 13)
      goto LABEL_110;
    v25 = *(_QWORD *)v111 == 0x6E6F69746365533CLL && *(_QWORD *)(v111 + 5) == 0x3E706574536E6F69;
    v22 = v8;
    if (v25)
      goto LABEL_129;
    v17 = *((_QWORD *)&v111 + 1);
    if (*((_QWORD *)&v111 + 1) != 13)
      goto LABEL_110;
    v26 = *(_QWORD *)v111 == 0x6E6F69746365533CLL && *(_QWORD *)(v111 + 5) == 0x3E657A69536E6F69;
    v22 = v92;
    if (v26)
      goto LABEL_129;
    if ((v112 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v112) == 10)
        goto LABEL_108;
      if (HIBYTE(v112) != 12)
        goto LABEL_128;
LABEL_102:
      v36 = (_QWORD)v111 == 0x537265746C69463CLL && DWORD2(v111) == 1046837865;
      v22 = v98;
      if (v36)
        goto LABEL_129;
      if ((v112 & 0x8000000000000000) == 0)
      {
LABEL_107:
        if (HIBYTE(v112) != 10)
          goto LABEL_128;
LABEL_108:
        v30 = &v111;
LABEL_124:
        v39 = *(_QWORD *)v30;
        v40 = *((unsigned __int16 *)v30 + 4);
        v41 = v39 == 0x7A69536C6F6F503CLL && v40 == 15973;
        v22 = v9;
        if (v41)
          goto LABEL_129;
        goto LABEL_128;
      }
    }
    else
    {
LABEL_110:
      if (v17 != 12)
        goto LABEL_116;
      v37 = *(_QWORD *)v111 == 0x537265746C69463CLL && *(_DWORD *)(v111 + 8) == 1046837865;
      v22 = v98;
      if (v37)
        goto LABEL_129;
    }
    v17 = *((_QWORD *)&v111 + 1);
LABEL_116:
    if (v17 == 15)
    {
      v38 = *(_QWORD *)v111 == 0x65726168536E493CLL && *(_QWORD *)(v111 + 7) == 0x3E73646E61426465;
      v22 = v94;
      if (v38)
        goto LABEL_129;
      v17 = *((_QWORD *)&v111 + 1);
    }
    if (v17 == 10)
    {
      v30 = (__int128 *)v111;
      goto LABEL_124;
    }
LABEL_128:
    v42 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v111, "<PoolStep>");
    v22 = v10;
    if (v42)
      goto LABEL_129;
    v43 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v111, "<LearnRateCoef>");
    v27 = v97;
    if (!v43)
    {
      v44 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v111, "<BiasLearnRateCoef>");
      v27 = v95;
      if (!v44)
      {
        v45 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v111, "<MaxNorm>");
        v27 = v93;
        if (!v45)
        {
          if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v111, "<RandomSeed>"))
          {
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 237);
            v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"Unknown token ", 14);
            if (v112 >= 0)
              v88 = &v111;
            else
              v88 = (__int128 *)v111;
            if (v112 >= 0)
              v89 = HIBYTE(v112);
            else
              v89 = *((_QWORD *)&v111 + 1);
            v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)v88, v89);
            v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)", a typo in config?", 19);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)" (ParamStddev|BiasMean|BiasRange|InFeatureMaps|OutFeatureMaps|PatchStep|SectionStep|SectionSize|FilterSize|LearnRateCoef|BiasLearnRateCoef|MaxNorm|RandomSeed)", 158);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110);
          }
          v22 = &v113;
LABEL_129:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v22, v14, v15);
          goto LABEL_137;
        }
      }
    }
LABEL_136:
    kaldi::ReadBasicType<float>(a2, 0, v27, v14, v15);
LABEL_137:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v47 = *(_DWORD *)(a1 + 8);
  v48 = *(_DWORD *)(a1 + 12);
  v50 = *(_DWORD *)(a1 + 104);
  v49 = *(_DWORD *)(a1 + 108);
  v51 = *(_DWORD *)(a1 + 132);
  v52 = v47 / v50 - *(_DWORD *)(a1 + 128);
  v53 = *(_DWORD *)(a1 + 120);
  v54 = *(_DWORD *)(a1 + 136);
  v55 = (v53 - v51) / v54 + 1;
  *(_DWORD *)(a1 + 148) = v55;
  v56 = v49 * v55;
  v57 = v48 / v56;
  *(_DWORD *)(a1 + 140) = v52;
  *(_DWORD *)(a1 + 144) = v48 / v56;
  if (v51 < 1 || v53 < v51)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 249);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"ConvolutionalMaxPoolingComponent: Invalid max pooling size", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110);
  }
  if (v54 <= 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 251);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"ConvolutionalMaxPoolingComponent: Max pooling step must be >= 1", 63);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110);
  }
  if (v48 != v56 * v57)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 254);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"ConvolutionalMaxPoolingComponent: output dim mismatch", 53);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110);
  }
  if (v47 != v47 / v50 * v50)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 257);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"ConvolutionalMaxPoolingComponent: input dim mismatch", 52);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110);
  }
  if (*v98 + *v96 * (v53 - 1) + *v8 * (v57 - 1) > v52)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 261);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"ConvolutionalMaxPoolingComponent: too few input bands to compute the output", 75);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110);
  }
  if (v113 >= 1)
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v113);
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v106, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)&v102, ((*(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 124)) * *(_DWORD *)(a1 + 104)), (*(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108)), 0, 0);
  for (i = 0; i < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)&v102); ++i)
  {
    for (j = 0; (uint64_t)j < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)&v102); ++j)
    {
      v63 = *(float *)&v114;
      kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v106, 0, v60, v61, v62);
      if (v104 <= i || j >= v103)
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v64);
      *(float *)(v102 + 4 * i * v105 + 4 * j) = v63 * v65;
    }
  }
  if (*(_QWORD *)(a1 + 152))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 275);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"pointer is thought to be un-initialized here", 44);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110);
  }
  v67 = operator new();
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v67, (uint64_t)&v102);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), v67);
  v68 = (*(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108));
  v100 = 0;
  v101 = 0;
  v99 = 0;
  kaldi::Vector<float>::Resize((void **)&v99, v68, 0, v69, v70);
  if ((int)v100 >= 1)
  {
    v74 = 0;
    do
    {
      v75 = *(float *)&v116;
      v76 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v71, v72, v73);
      v77 = v100;
      if (v74 >= v100)
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v73);
      v78 = v75 + (v76 + -0.5) * v115;
      v99[v74++] = v78;
    }
    while ((uint64_t)v74 < v77);
  }
  if (*(_QWORD *)(a1 + 160))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 285);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"pointer is thought to be un-initialized here", 44);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110);
  }
  v79 = operator new();
  v80 = v100;
  *(_QWORD *)(v79 + 16) = 0;
  *(_QWORD *)(v79 + 24) = 0;
  *(_QWORD *)v79 = &unk_1EA92DFD8;
  *(_QWORD *)(v79 + 8) = 0;
  kaldi::CuVector<float>::Resize(v79, v80, 0, v81, v82);
  v86 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v79;
  if (v86)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v86 + 16))(v86);
    v79 = *(_QWORD *)(a1 + 160);
    if (!v79)
      kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEF, "bias_", v85);
  }
  kaldi::CuVectorBase<float>::CopyFromVec<float>((_DWORD *)v79, (uint64_t)&v99, v83, v84, v85);
  kaldi::Vector<float>::Destroy((uint64_t)&v99);
  kaldi::Matrix<float>::~Matrix((uint64_t)&v102);
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  v110[0] = (void **)&v107;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v110);
  if (SHIBYTE(v112) < 0)
    operator delete((void *)v111);
}

void sub_1DE469BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  if (*(char *)(v24 - 121) < 0)
    operator delete(*(void **)(v24 - 144));
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  float *v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  uint64_t v43;
  const char *v44;
  _BOOL4 v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  const char *v60;
  int v61;
  int v62;
  uint64_t result;
  uint64_t v64;
  _QWORD *v65;
  __int128 *v66;
  uint64_t v67;
  int *v69;
  void *__p[2];
  uint64_t v71;
  __int128 v72;
  uint64_t v73;

  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 8);
  v7 = a1 + 116;
  *(_QWORD *)(a1 + 132) = 0x100000001;
  v8 = (int *)(a1 + 132);
  v69 = (int *)(a1 + 136);
  while (kaldi::Peek(a2, a3) == 60)
  {
    v72 = 0uLL;
    v73 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v72, v9, v10);
    if ((SHIBYTE(v73) & 0x80000000) == 0)
    {
      v13 = (uint64_t *)&v72;
      switch(HIBYTE(v73))
      {
        case 0xA:
          goto LABEL_87;
        case 0xB:
LABEL_4:
          v14 = (_QWORD)v72 == 0x745368637461503CLL && *(_QWORD *)((char *)&v72 + 3) == 0x3E70657453686374;
          v15 = a1 + 112;
          if (!v14)
            goto LABEL_86;
          goto LABEL_136;
        case 0xC:
          goto LABEL_81;
        case 0xD:
LABEL_68:
          v28 = (_QWORD)v72 == 0x6E6F69746365533CLL && *(_QWORD *)((char *)&v72 + 5) == 0x3E706574536E6F69;
          v15 = v7;
          if (v28)
            goto LABEL_136;
          if (HIBYTE(v73) == 10)
            goto LABEL_87;
          if (HIBYTE(v73) == 12)
            goto LABEL_81;
          if (HIBYTE(v73) != 13)
            goto LABEL_132;
          v29 = (_QWORD)v72 == 0x6E6F69746365533CLL && *(_QWORD *)((char *)&v72 + 5) == 0x3E657A69536E6F69;
          v15 = a1 + 120;
          if (!v29)
            goto LABEL_132;
          goto LABEL_136;
        case 0xF:
          v23 = (_QWORD)v72 == 0x75746165466E493CLL && *(_QWORD *)((char *)&v72 + 7) == 0x3E7370614D657275;
          v15 = a1 + 104;
          if (v23)
            goto LABEL_136;
LABEL_52:
          v24 = (_QWORD)v72 == 0x65726168536E493CLL && *(_QWORD *)((char *)&v72 + 7) == 0x3E73646E61426465;
          v15 = a1 + 128;
          if (v24)
            goto LABEL_136;
          if (HIBYTE(v73) != 15)
            goto LABEL_86;
          v25 = (_QWORD)v72 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v72 + 7) == 0x3E66656F43657461;
          v26 = (float *)(a1 + 264);
          if (!v25)
            goto LABEL_132;
          goto LABEL_138;
        case 0x10:
          v27 = (_QWORD)v72 == 0x7461654674754F3CLL && *((_QWORD *)&v72 + 1) == 0x3E7370614D657275;
          v15 = a1 + 108;
          if (!v27)
          {
            switch(HIBYTE(v73))
            {
              case 0xA:
                goto LABEL_87;
              case 0xB:
                goto LABEL_4;
              case 0xC:
                goto LABEL_81;
              case 0xD:
                goto LABEL_68;
              case 0xF:
                goto LABEL_52;
              default:
                goto LABEL_132;
            }
          }
          goto LABEL_136;
        case 0x13:
          goto LABEL_125;
        default:
          goto LABEL_132;
      }
    }
    v16 = *((_QWORD *)&v72 + 1);
    if (*((_QWORD *)&v72 + 1) == 15)
    {
      v17 = *(_QWORD *)v72 == 0x75746165466E493CLL && *(_QWORD *)(v72 + 7) == 0x3E7370614D657275;
      v15 = a1 + 104;
      if (v17)
        goto LABEL_136;
    }
    if (*((_QWORD *)&v72 + 1) == 16)
    {
      v18 = *(_QWORD *)v72 == 0x7461654674754F3CLL && *(_QWORD *)(v72 + 8) == 0x3E7370614D657275;
      v15 = a1 + 108;
      if (v18)
        goto LABEL_136;
      v16 = *((_QWORD *)&v72 + 1);
    }
    if (v16 == 11)
    {
      v19 = *(_QWORD *)v72 == 0x745368637461503CLL && *(_QWORD *)(v72 + 3) == 0x3E70657453686374;
      v15 = a1 + 112;
      if (v19)
        goto LABEL_136;
      v16 = *((_QWORD *)&v72 + 1);
    }
    if (v16 != 13)
      goto LABEL_41;
    v20 = *(_QWORD *)v72 == 0x6E6F69746365533CLL && *(_QWORD *)(v72 + 5) == 0x3E706574536E6F69;
    v15 = v7;
    if (v20)
      goto LABEL_136;
    v16 = *((_QWORD *)&v72 + 1);
    if (*((_QWORD *)&v72 + 1) != 13)
      goto LABEL_41;
    v21 = *(_QWORD *)v72 == 0x6E6F69746365533CLL && *(_QWORD *)(v72 + 5) == 0x3E657A69536E6F69;
    v15 = a1 + 120;
    if (v21)
      goto LABEL_136;
    if ((v73 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v73) == 10)
        goto LABEL_87;
      if (HIBYTE(v73) != 12)
        goto LABEL_132;
LABEL_81:
      v30 = (_QWORD)v72 == 0x537265746C69463CLL && DWORD2(v72) == 1046837865;
      v15 = a1 + 124;
      if (v30)
        goto LABEL_136;
      if ((v73 & 0x8000000000000000) == 0)
      {
LABEL_86:
        if (HIBYTE(v73) != 10)
          goto LABEL_132;
LABEL_87:
        v31 = (_QWORD)v72 == 0x7A69536C6F6F503CLL && WORD4(v72) == 15973;
        v15 = (uint64_t)v8;
        if (v31)
          goto LABEL_136;
        if ((v73 & 0x8000000000000000) == 0)
        {
          if (HIBYTE(v73) != 10)
            goto LABEL_132;
          v32 = (_QWORD)v72 == 0x6574536C6F6F503CLL && WORD4(v72) == 15984;
          v15 = (uint64_t)v69;
          if (!v32)
            goto LABEL_132;
          goto LABEL_136;
        }
LABEL_111:
        v16 = *((_QWORD *)&v72 + 1);
        if (*((_QWORD *)&v72 + 1) != 10)
          goto LABEL_117;
        v35 = *(_QWORD *)v72 == 0x6574536C6F6F503CLL && *(_WORD *)(v72 + 8) == 15984;
        v15 = (uint64_t)v69;
        if (!v35)
        {
          if (v73 < 0)
          {
LABEL_117:
            if (v16 == 15)
            {
              v36 = *(_QWORD *)v72 == 0x61526E7261654C3CLL && *(_QWORD *)(v72 + 7) == 0x3E66656F43657461;
              v26 = (float *)(a1 + 264);
              if (!v36)
              {
                v16 = *((_QWORD *)&v72 + 1);
                goto LABEL_123;
              }
LABEL_138:
              kaldi::ReadBasicType<float>(a2, a3, v26, v11, v12);
              goto LABEL_139;
            }
LABEL_123:
            if (v16 == 19)
            {
              v13 = (uint64_t *)v72;
LABEL_125:
              v37 = *v13;
              v38 = v13[1];
              v39 = *(uint64_t *)((char *)v13 + 11);
              v40 = v37 == 0x61654C736169423CLL && v38 == 0x6F43657461526E72;
              v41 = v40 && v39 == 0x3E66656F43657461;
              v26 = (float *)(a1 + 268);
              if (v41)
                goto LABEL_138;
            }
          }
LABEL_132:
          v42 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v72, "<MaxNorm>");
          v26 = (float *)(a1 + 280);
          if (!v42)
          {
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v72, "<GradientNormType>"))
            {
              __p[0] = 0;
              __p[1] = 0;
              v71 = 0;
              kaldi::ReadToken(a2, a3, (uint64_t)__p, v43, v44);
              *(_DWORD *)(a1 + 272) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
              if (SHIBYTE(v71) < 0)
                operator delete(__p[0]);
              goto LABEL_139;
            }
            v45 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v72, "<MaxGrad>");
            v26 = (float *)(a1 + 276);
            if (!v45)
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 332);
              v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
              if (v73 >= 0)
                v66 = &v72;
              else
                v66 = (__int128 *)v72;
              if (v73 >= 0)
                v67 = HIBYTE(v73);
              else
                v67 = *((_QWORD *)&v72 + 1);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)v66, v67);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
            }
          }
          goto LABEL_138;
        }
        goto LABEL_136;
      }
    }
    else
    {
LABEL_41:
      if (v16 != 12)
        goto LABEL_100;
      v22 = *(_QWORD *)v72 == 0x537265746C69463CLL && *(_DWORD *)(v72 + 8) == 1046837865;
      v15 = a1 + 124;
      if (v22)
        goto LABEL_136;
    }
    v16 = *((_QWORD *)&v72 + 1);
LABEL_100:
    if (v16 == 15)
    {
      v33 = *(_QWORD *)v72 == 0x65726168536E493CLL && *(_QWORD *)(v72 + 7) == 0x3E73646E61426465;
      v15 = a1 + 128;
      if (v33)
        goto LABEL_136;
      v16 = *((_QWORD *)&v72 + 1);
    }
    if (v16 != 10)
      goto LABEL_117;
    v34 = *(_QWORD *)v72 == 0x7A69536C6F6F503CLL && *(_WORD *)(v72 + 8) == 15973;
    v15 = (uint64_t)v8;
    if (!v34)
      goto LABEL_111;
LABEL_136:
    kaldi::ReadBasicType<int>(a2, a3, v15, v11, v12);
LABEL_139:
    if (SHIBYTE(v73) < 0)
      operator delete((void *)v72);
  }
  v46 = *(_DWORD *)(a1 + 12);
  v47 = *(_DWORD *)(a1 + 108);
  v48 = *(_DWORD *)(a1 + 8) / *(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 128);
  v49 = (*(_DWORD *)(a1 + 120) - *(_DWORD *)(a1 + 132)) / *(_DWORD *)(a1 + 136) + 1;
  *(_DWORD *)(a1 + 148) = v49;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 140) = v48;
  *(_DWORD *)(a1 + 144) = v46 / (v47 * v49);
  LOBYTE(v72) = 0;
  kaldi::ReadBasicType<char>(a2, a3, &v72, v9, v10);
  v50 = (int **)(a1 + 152);
  if (*(_QWORD *)(a1 + 152))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 348);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "pointer is thought to be un-initialized here");
    goto LABEL_172;
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"<Filters>");
  v51 = ((*(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 124)) * *(_DWORD *)(a1 + 104));
  v52 = (*(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108));
  v53 = operator new();
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v53, v51, v52);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), v53);
  if (!*v50)
    goto LABEL_160;
  kaldi::QuantizedMatrix<signed char>::Read(*v50, a2, a3, a4, v54);
  if (*(_QWORD *)(a1 + 160))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 356);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "pointer is thought to be un-initialized here");
LABEL_172:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"<Bias>");
  v55 = (_QWORD *)operator new();
  v56 = *(unsigned int *)(a1 + 12);
  v55[2] = 0;
  v55[3] = 0;
  *v55 = &unk_1EA92DFD8;
  v55[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v55, v56, 0, v57, v58);
  v59 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v55;
  if (v59)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 16))(v59);
    v55 = *(_QWORD **)(a1 + 160);
    if (!v55)
      goto LABEL_162;
  }
  (*(void (**)(_QWORD *, uint64_t *, uint64_t))*v55)(v55, a2, a3);
  v61 = *(_DWORD *)(a1 + 144);
  if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(a1 + 148) * *(_DWORD *)(a1 + 108) * v61)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x16C, "output_dim_ == out_feature_maps_ * num_pools_per_section_ * num_sections_", v54);
  v62 = *(_DWORD *)(a1 + 140);
  if (*(_DWORD *)(a1 + 8) != (*(_DWORD *)(a1 + 128) + v62) * *(_DWORD *)(a1 + 104))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x16D, "input_dim_ == in_feature_maps_ * (num_in_bands_ + in_shared_bands_)", v54);
  if (*(_DWORD *)(a1 + 124) + (*(_DWORD *)(a1 + 120) - 1) * *(_DWORD *)(a1 + 112) + *(_DWORD *)(a1 + 116) * (v61 - 1) > v62)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x170, "(num_sections_ - 1) * section_step_ + section_coverage <= num_in_bands_", v54);
  if (!*v50)
    goto LABEL_160;
  if (kaldi::QuantizedMatrixBase<short>::NumRows((unsigned int *)*v50) != (*(_DWORD *)(a1 + 128)
                                                                                        + *(_DWORD *)(a1 + 124))
                                                                                       * *(_DWORD *)(a1 + 104))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x172, "Filters().NumRows() == in_feature_maps_ * (filter_size_ + in_shared_bands_)", v54);
  if (!*v50)
LABEL_160:
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v54);
  result = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)*v50);
  if ((_DWORD)result != *(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x173, "Filters().NumCols() == out_feature_maps_ * num_sections_", v60);
  v64 = *(_QWORD *)(a1 + 160);
  if (!v64)
LABEL_162:
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEF, "bias_", v60);
  if (*(_DWORD *)(v64 + 16) != (_DWORD)result)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x174, "Bias().Dim() == out_feature_maps_ * num_sections_", v60);
  if (*v8 < 1 || *v8 > *(_DWORD *)(a1 + 120) || *v69 <= 0)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x177, "pooling_size_ >= 1 && pooling_size_ <= section_size_ && pooling_step_ > 0", v60);
  return result;
}

void sub_1DE46A870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 89) < 0)
    operator delete(*(void **)(v22 - 112));
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::WriteConfig(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  std::string __p;

  kaldi::WriteToken(a2, a3, (kaldi *)"<InFeatureMaps>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<OutFeatureMaps>", v8, v9);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PatchStep>", v10, v11);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<SectionStep>", v12, v13);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<SectionSize>", v14, v15);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FilterSize>", v16, v17);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<InSharedBands>", v18, v19);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolSize>", v20, v21);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolStep>", v22, v23);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v24, v25);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<BiasLearnRateCoef>", v26, v27);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxNorm>", v28, v29);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v30, v31);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 272), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v32, v33);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v34, v35);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

void sub_1DE46AB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::WriteData(_QWORD *a1, _QWORD *a2, const char *a3, int a4)
{
  uint64_t v8;
  const char *v9;
  const char *v10;
  int *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  _DWORD *v16;

  (*(void (**)(_QWORD *))(*a1 + 168))(a1);
  kaldi::WriteBasicType<char>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<Filters>", v8, v9);
  v11 = (int *)a1[19];
  if (!v11)
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE3, "filters_", v10);
  kaldi::QuantizedMatrix<signed char>::Write(v11, a2, (int)a3, a4);
  kaldi::WriteToken(a2, a3, (kaldi *)"<Bias>", v12, v13);
  v16 = (_DWORD *)a1[20];
  if (!v16)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEB, "bias_", v15);
  kaldi::CuVectorBase<float>::Write(v16, a2, (int)a3, v14, v15);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::NumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unsigned int *v6;
  int v7;
  uint64_t v8;
  int v9;
  const char *v10;
  uint64_t v11;

  v6 = *(unsigned int **)(a1 + 152);
  if (!v6 || (v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6), (v8 = *(_QWORD *)(a1 + 152)) == 0))
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE3, "filters_", a5);
  v9 = kaldi::QuantizedMatrixBase<short>::NumCols(v8);
  v11 = *(_QWORD *)(a1 + 160);
  if (!v11)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEB, "bias_", v10);
  return (*(_DWORD *)(v11 + 16) + v9 * v7);
}

_DWORD *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::GetParams(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  unsigned int *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  void *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  v8 = (unsigned int *)a1[19];
  if (!v8)
    goto LABEL_8;
  v9 = kaldi::QuantizedMatrixBase<short>::NumRows(v8);
  v10 = a1[19];
  if (!v10)
    goto LABEL_8;
  v11 = kaldi::QuantizedMatrixBase<short>::NumCols(v10) * v9;
  v19 = 0;
  v20 = 0;
  if (v11 > *(_DWORD *)(a2 + 8))
    goto LABEL_9;
  v18 = *(void **)a2;
  LODWORD(v19) = v11;
  v12 = (unsigned int *)a1[19];
  if (!v12)
LABEL_8:
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE3, "filters_", v7);
  kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v18, v12);
  v15 = (_DWORD *)a1[20];
  if (!v15)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEB, "bias_", v7);
  v16 = v15[4];
  v19 = 0;
  v20 = 0;
  if (v16 + v11 > *(_DWORD *)(a2 + 8))
LABEL_9:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v7);
  v18 = (void *)(*(_QWORD *)a2 + 4 * (int)v11);
  LODWORD(v19) = v16;
  return kaldi::CuVectorBase<float>::CopyToVec<float>(v15, (uint64_t)&v18, v13, v14, v7);
}

_DWORD *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::SetParams(_QWORD *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  unsigned int *v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_QWORD *))(*a1 + 176))(a1))
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x324, "wei_src.Dim() == NumParams()", v5);
  v6 = (unsigned int *)a1[19];
  if (!v6
    || (v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6), (v8 = a1[19]) == 0)
    || (v9 = kaldi::QuantizedMatrixBase<short>::NumCols(v8), (v10 = (unsigned int *)a1[19]) == 0))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v5);
  }
  v11 = v9 * v7;
  v18 = 0;
  v19 = 0;
  if (v11 > *(_DWORD *)(a2 + 8))
    goto LABEL_10;
  v17 = *(char **)a2;
  LODWORD(v18) = v11;
  kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v10, &v17);
  v14 = (_DWORD *)a1[20];
  if (!v14)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEF, "bias_", v5);
  v15 = v14[4];
  v18 = 0;
  v19 = 0;
  if ((v15 + v11) > *(_DWORD *)(a2 + 8))
LABEL_10:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v5);
  v17 = (char *)(*(_QWORD *)a2 + 4 * v11);
  LODWORD(v18) = v15;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v14, (uint64_t)&v17, v12, v13, v5);
}

float kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;

  if (!*(_BYTE *)(a1 + 84))
    return *(float *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 312);
  v3 = *(_QWORD *)(a1 + 320) - v2;
  if (!v3)
    return NAN;
  v4 = v3 >> 2;
  if ((int)v4 <= a2)
    return NAN;
  v5 = v4 - 1;
  if (a2 >= 0)
    v5 = a2;
  return *(float *)(v2 + 4 * v5);
}

float kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::SumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int *v6;
  const char *v7;
  float v8;
  uint64_t v9;

  v6 = *(int **)(a1 + 152);
  if (!v6)
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE3, "filters_", a5);
  v8 = kaldi::QuantizedMatrixBase<signed char>::Sum(v6, a2, a3, a4, a5);
  v9 = *(_QWORD *)(a1 + 160);
  if (!v9)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEB, "bias_", v7);
  return v8 + kaldi::CuVectorBase<float>::Sum(v9);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::PerturbParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _BYTE v11[48];

  v6 = *(unsigned int **)(a1 + 152);
  if (v6)
  {
    v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6);
    v8 = *(_QWORD *)(a1 + 152);
    if (v8)
    {
      v9 = kaldi::QuantizedMatrixBase<short>::NumCols(v8);
      kaldi::CuMatrix<float>::CuMatrix((uint64_t)v11, v7, v9, 1u, 0, 0);
      kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v11);
      if (*(_QWORD *)(a1 + 152))
        kaldi::QuantizedMatrixBase<signed char>::AddMat();
      kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v10);
    }
  }
  kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", a5);
}

void sub_1DE46B168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::Info(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  const char *v9;
  __int128 v10;
  unsigned int *v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  __int128 v21;
  _DWORD *v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  void *__p[2];
  unsigned __int8 v27;
  void *v28[2];
  unsigned __int8 v29;
  void *v30[2];
  unsigned __int8 v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;

  std::string::basic_string[abi:ne180100]<0>(&v32, " ");
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ParamsString(a1);
  if ((v31 & 0x80u) == 0)
    v4 = v30;
  else
    v4 = (void **)v30[0];
  if ((v31 & 0x80u) == 0)
    v5 = v31;
  else
    v5 = (std::string::size_type)v30[1];
  v6 = std::string::append(&v32, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v33, "\n  filters");
  v10 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v10;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v11 = *(unsigned int **)(a1 + 152);
  if (!v11)
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE3, "filters_", v9);
  kaldi::nnet1::MomentStatistics<signed char>(v11);
  if ((v29 & 0x80u) == 0)
    v12 = v28;
  else
    v12 = (void **)v28[0];
  if ((v29 & 0x80u) == 0)
    v13 = v29;
  else
    v13 = (std::string::size_type)v28[1];
  v14 = std::string::append(&v34, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v35, "\n  bias");
  v21 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v21;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v22 = *(_DWORD **)(a1 + 160);
  if (!v22)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEB, "bias_", v20);
  kaldi::nnet1::MomentStatistics<float>(v22, v17, v18, v19, v20);
  if ((v27 & 0x80u) == 0)
    v23 = __p;
  else
    v23 = (void **)__p[0];
  if ((v27 & 0x80u) == 0)
    v24 = v27;
  else
    v24 = (std::string::size_type)__p[1];
  v25 = std::string::append(&v36, (const std::string::value_type *)v23, v24);
  *a2 = *v25;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if ((char)v27 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if ((char)v29 < 0)
    operator delete(v28[0]);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if ((char)v31 < 0)
    operator delete(v30[0]);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_1DE46B3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v45 - 41) < 0)
    operator delete(*(void **)(v45 - 64));
  if (*(char *)(v45 - 73) < 0)
    operator delete(*(void **)(v45 - 96));
  if (a20 < 0)
    operator delete(a15);
  if (a45 < 0)
    operator delete(a40);
  if (a38 < 0)
    operator delete(a33);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ParamsString(uint64_t a1)
{
  _QWORD *v2;
  _QWORD v4[11];
  char v5;
  uint64_t v6;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 168))(a1, v4, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" , # of sections: ", 18);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", section size after pooling: ", 30);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v4[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v5 < 0)
    operator delete((void *)v4[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v6);
}

void sub_1DE46B580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  void **v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  void **v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  void **v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  void **v42;
  std::string::size_type v43;
  std::string *v44;
  void *__p[2];
  unsigned __int8 v46;
  void *v47[2];
  unsigned __int8 v48;
  void *v49[2];
  unsigned __int8 v50;
  void *v51[2];
  unsigned __int8 v52;
  void *v53[2];
  unsigned __int8 v54;
  void *v55[2];
  unsigned __int8 v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;

  std::string::basic_string[abi:ne180100]<0>(&v57, " ");
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ParamsString(a1);
  if ((v56 & 0x80u) == 0)
    v4 = v55;
  else
    v4 = (void **)v55[0];
  if ((v56 & 0x80u) == 0)
    v5 = v56;
  else
    v5 = (std::string::size_type)v55[1];
  v6 = std::string::append(&v57, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v58, "\n  filters_grad");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 168), v10, v11, v12, v13);
  if ((v54 & 0x80u) == 0)
    v14 = v53;
  else
    v14 = (void **)v53[0];
  if ((v54 & 0x80u) == 0)
    v15 = v54;
  else
    v15 = (std::string::size_type)v53[1];
  v16 = std::string::append(&v59, (const std::string::value_type *)v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v60, ", lr-coef ");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v52 & 0x80u) == 0)
    v20 = v51;
  else
    v20 = (void **)v51[0];
  if ((v52 & 0x80u) == 0)
    v21 = v52;
  else
    v21 = (std::string::size_type)v51[1];
  v22 = std::string::append(&v61, (const std::string::value_type *)v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = std::string::append(&v62, ", max-norm ");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v63.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v50 & 0x80u) == 0)
    v26 = v49;
  else
    v26 = (void **)v49[0];
  if ((v50 & 0x80u) == 0)
    v27 = v50;
  else
    v27 = (std::string::size_type)v49[1];
  v28 = std::string::append(&v63, (const std::string::value_type *)v26, v27);
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v64, "\n  bias_grad");
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 192), v32, v33, v34, v35);
  if ((v48 & 0x80u) == 0)
    v36 = v47;
  else
    v36 = (void **)v47[0];
  if ((v48 & 0x80u) == 0)
    v37 = v48;
  else
    v37 = (std::string::size_type)v47[1];
  v38 = std::string::append(&v65, (const std::string::value_type *)v36, v37);
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  v40 = std::string::append(&v66, ", lr-coef ");
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v67.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v46 & 0x80u) == 0)
    v42 = __p;
  else
    v42 = (void **)__p[0];
  if ((v46 & 0x80u) == 0)
    v43 = v46;
  else
    v43 = (std::string::size_type)__p[1];
  v44 = std::string::append(&v67, (const std::string::value_type *)v42, v43);
  *a2 = *v44;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  if ((char)v46 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if ((char)v48 < 0)
    operator delete(v47[0]);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if ((char)v50 < 0)
    operator delete(v49[0]);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if ((char)v52 < 0)
    operator delete(v51[0]);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if ((char)v54 < 0)
    operator delete(v53[0]);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if ((char)v56 < 0)
    operator delete(v55[0]);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
}

void sub_1DE46B968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a66;
  char a71;
  void *a72;
  char a73;
  uint64_t v73;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v73 - 57) < 0)
    operator delete(*(void **)(v73 - 80));
  if (*(char *)(v73 - 89) < 0)
    operator delete(*(void **)(v73 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v73 - 121) < 0)
    operator delete(*(void **)(v73 - 144));
  if (*(char *)(v73 - 153) < 0)
    operator delete(*(void **)(v73 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v73 - 185) < 0)
    operator delete(*(void **)(v73 - 208));
  if (*(char *)(v73 - 217) < 0)
    operator delete(*(void **)(v73 - 240));
  if (a33 < 0)
    operator delete(a28);
  if (a73 < 0)
    operator delete(a72);
  if (a71 < 0)
    operator delete(a66);
  if (a39 < 0)
    operator delete(a34);
  if (a64 < 0)
    operator delete(a59);
  if (a57 < 0)
    operator delete(a52);
  if (a45 < 0)
    operator delete(a40);
  if (a51 < 0)
    operator delete(a46);
  _Unwind_Resume(a1);
}

void sub_1DE46BAC4()
{
  JUMPOUT(0x1DE46BA3CLL);
}

void sub_1DE46BACC()
{
  JUMPOUT(0x1DE46BA4CLL);
}

void sub_1DE46BAD4()
{
  JUMPOUT(0x1DE46BA5CLL);
}

void sub_1DE46BADC()
{
  JUMPOUT(0x1DE46BA6CLL);
}

void sub_1DE46BAE4()
{
  JUMPOUT(0x1DE46BA7CLL);
}

void sub_1DE46BAEC()
{
  JUMPOUT(0x1DE46BA8CLL);
}

void sub_1DE46BAF4()
{
  JUMPOUT(0x1DE46BA9CLL);
}

void sub_1DE46BAFC()
{
  JUMPOUT(0x1DE46BAACLL);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFncDirect(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v7;
  int v8;
  int v9;
  const char *v10;
  uint64_t v11;
  int v12;
  int i;
  uint64_t v14;
  const char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  int v23;
  const char *v24;
  uint64_t v25;
  int v26;
  int j;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  const char *v39;
  uint64_t v40;
  void *v42;
  __int128 v43;
  __int128 v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  void *v51;
  __int128 v52;
  __int128 v53;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(a1);
  if (*(int *)(a1 + 128) <= 0)
    v7 = 0.0;
  else
    v7 = 1.0;
  v40 = a2;
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 384) + 48 * a4, *(unsigned int *)(a2 + 20), (*(_DWORD *)(a1 + 108) * *(_DWORD *)(a1 + 120)), 3u, 0);
  if (*(int *)(a1 + 144) >= 1)
  {
    v8 = 0;
    do
    {
      v9 = *(_DWORD *)(a1 + 120);
      if (*(int *)(a1 + 128) >= 1)
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v51, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(v9 * v8 * *(_DWORD *)(a1 + 108)), *(_DWORD *)(a1 + 108));
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v48, v40, 0, *(_DWORD *)(v40 + 20), (const char *)(*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 140)), *(_DWORD *)(a1 + 128) * *(_DWORD *)(a1 + 104));
        v11 = *(_QWORD *)(a1 + 152);
        if (!v11)
          kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v10);
        kaldi::QuantizedMatrixBase<signed char>::Range(v11, *(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 124), *(_DWORD *)(a1 + 128) * *(_DWORD *)(a1 + 104), *(_DWORD *)(a1 + 108) * v8, *(_DWORD *)(a1 + 108), (uint64_t)&v45);
        kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v51, (uint64_t)&v48, 111, (unsigned int *)&v45, (const char *)0x6F, 1.0, 0.0);
        v12 = *(_DWORD *)(a1 + 120);
        if (v12 >= 2)
        {
          for (i = 1; i < v12; ++i)
          {
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v42, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(*(_DWORD *)(a1 + 108) * (i + v8 * v12)), *(_DWORD *)(a1 + 108));
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v42, (uint64_t)&v51, 111, v14, v15);
            v42 = &unk_1EA926508;
            v43 = 0u;
            v44 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v42);
            v12 = *(_DWORD *)(a1 + 120);
          }
        }
        kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase((uint64_t)&v45);
        v48 = &unk_1EA926508;
        v49 = 0u;
        v50 = 0u;
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v48);
        v51 = &unk_1EA926508;
        v52 = 0u;
        v53 = 0u;
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v51);
        v9 = *(_DWORD *)(a1 + 120);
      }
      if (v9 >= 1)
      {
        v16 = 0;
        while (1)
        {
          v17 = *(_QWORD *)(a1 + 384) + 48 * a4;
          v18 = kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v51, v17, 0, *(_DWORD *)(v17 + 20), (const char *)(*(_DWORD *)(a1 + 108) * v16), *(_DWORD *)(a1 + 108));
          v22 = *(_QWORD *)(a1 + 160);
          if (!v22)
            break;
          v23 = *(_DWORD *)(a1 + 108);
          *(_QWORD *)&v47 = 0;
          v46 = 0uLL;
          v45 = &unk_1EA926538;
          if ((v23 * v8 + v23) > *(_DWORD *)(v22 + 16))
          {
            v36 = 468;
            v37 = "CuSubVector";
            v38 = "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h";
            v39 = "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<Un"
                  "signedMatrixIndexT>(t.Dim())";
            goto LABEL_29;
          }
          *(_QWORD *)&v46 = *(_QWORD *)(v22 + 8) + 4 * v23 * v8;
          DWORD2(v46) = v23;
          *(_QWORD *)&v47 = *(_QWORD *)(v22 + 24);
          kaldi::CuMatrixBase<float>::AddVecToRows(v18, (uint64_t)&v45, v19, v20, v21, 1.0, v7);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v48, v40, 0, *(_DWORD *)(v40 + 20), (const char *)((*(_DWORD *)(a1 + 116) * v8 + *(_DWORD *)(a1 + 112) * v16)* *(_DWORD *)(a1 + 104)), *(_DWORD *)(a1 + 124) * *(_DWORD *)(a1 + 104));
          v25 = *(_QWORD *)(a1 + 152);
          if (!v25)
            kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v24);
          kaldi::QuantizedMatrixBase<signed char>::Range(v25, 0, *(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 124), *(_DWORD *)(a1 + 108) * v8, *(_DWORD *)(a1 + 108), (uint64_t)&v45);
          kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v51, (uint64_t)&v48, 111, (unsigned int *)&v45, (const char *)0x6F, 1.0, 1.0);
          kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase((uint64_t)&v45);
          v48 = &unk_1EA926508;
          v49 = 0u;
          v50 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v48);
          v51 = &unk_1EA926508;
          v52 = 0u;
          v53 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v51);
          if (++v16 >= *(_DWORD *)(a1 + 120))
            goto LABEL_18;
        }
        v36 = 239;
        v39 = "bias_";
        v38 = "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h";
        v37 = "Bias";
LABEL_29:
        kaldi::KaldiAssertFailure_((kaldi *)v37, v38, (const char *)v36, v39, v21);
      }
LABEL_18:
      v26 = *(_DWORD *)(a1 + 148);
      if (v26 >= 1)
      {
        for (j = 0; j < v26; ++j)
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v45, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(*(_DWORD *)(a1 + 108) * (j + v26 * v8)), *(_DWORD *)(a1 + 108));
          v28 = *(_QWORD *)(a1 + 384) + 48 * a4;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v51, v28, 0, *(_DWORD *)(v28 + 20), (const char *)(*(_DWORD *)(a1 + 136) * j * *(_DWORD *)(a1 + 108)), *(_DWORD *)(a1 + 108));
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v45, (uint64_t)&v51, 111, v29, v30);
          v51 = &unk_1EA926508;
          v52 = 0u;
          v53 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v51);
          if (*(int *)(a1 + 132) >= 2)
          {
            v31 = 1;
            do
            {
              v32 = *(_QWORD *)(a1 + 384) + 48 * a4;
              kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v51, v32, 0, *(_DWORD *)(v32 + 20), (const char *)((v31 + j * *(_DWORD *)(a1 + 136)) * *(_DWORD *)(a1 + 108)), *(_DWORD *)(a1 + 108));
              kaldi::CuMatrixBase<float>::Max((uint64_t)&v45, (uint64_t)&v51, v33, v34, v35);
              v51 = &unk_1EA926508;
              v52 = 0u;
              v53 = 0u;
              kaldi::CuMatrixBase<float>::~CuMatrixBase(&v51);
              ++v31;
            }
            while (v31 < *(_DWORD *)(a1 + 132));
          }
          v45 = &unk_1EA926508;
          v46 = 0u;
          v47 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v45);
          v26 = *(_DWORD *)(a1 + 148);
        }
      }
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 144));
  }
}

void sub_1DE46C02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _OWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;

  a26 = v26 + 16;
  *a12 = 0u;
  a12[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a26);
  *(_QWORD *)(v28 - 144) = v26 + 16;
  *v27 = 0u;
  v27[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v28 - 144);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::BackpropagateFnc()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 596);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Backpropagation of CNN ConvolutionalMaxPoolingComponent is not supported for quantized weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradients()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 640);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not supported for quantized weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::UpdateWeights()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 687);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  const char *v9;
  unsigned int *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  const char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[48];
  _BYTE v43[48];

  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v43, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v42, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  (*(void (**)(uint64_t, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v8 + 112))(v8, a2, v43, 0);
  (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v8 + 128))(v8, a2, v43, a3, v42, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 232))(v8, a2, a3, 0, 0);
  v10 = (unsigned int *)a1[19];
  if (!v10 || (v11 = kaldi::QuantizedMatrixBase<short>::NumRows(v10), (v12 = a1[19]) == 0))
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE3, "filters_", v9);
  v13 = kaldi::QuantizedMatrixBase<short>::NumCols(v12);
  v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v14, 1, v15, v16);
  v20 = v13 * v11;
  v40 = 0;
  v41 = 0;
  if (v20 > *(_DWORD *)(a4 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v19);
  v39 = *(void **)a4;
  LODWORD(v40) = v20;
  v21 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(v8, 0, v17, v18, v19);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v39, v21, v22, v23, v24);
  v28 = a1[20];
  if (!v28)
  {
    v35 = "bias_";
    v36 = 235;
    v37 = "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h";
    v38 = "Bias";
    goto LABEL_11;
  }
  v29 = *(_DWORD *)(v28 + 16);
  v40 = 0;
  v41 = 0;
  if ((v29 + v20) > *(_DWORD *)(a4 + 8))
  {
    v35 = "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMa"
          "trixIndexT>(t.Dim())";
    v36 = 550;
    v37 = "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h";
    v38 = "SubVector";
LABEL_11:
    kaldi::KaldiAssertFailure_((kaldi *)v38, v37, (const char *)v36, v35, v27);
  }
  v39 = (void *)(*(_QWORD *)a4 + 4 * v20);
  LODWORD(v40) = v29;
  v30 = (_DWORD *)kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(v8, 0, v25, v26, v27);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v30, (uint64_t)&v39, v31, v32, v33);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v42);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v43);
}

void sub_1DE46C44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 276) = a3;
  *(_DWORD *)(result + 272) = a2;
  *(_BYTE *)(result + 480) = 0;
  return result;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::NormalizeGradients(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  float v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;

  v7 = a6;
  v9 = *(_DWORD *)(a1 + 272);
  if (v9 == 3)
  {
    if (a6 >= 0.0 && a6 <= 1.0)
    {
      v16 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a2, a3, a4, a5);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v16, *(_QWORD *)(a1 + 216) + 48 * a2, v7);
      v20 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a2, v17, v18, v19);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v20, *(_QWORD *)(a1 + 240) + 32 * a2, v7, v21, v22, v23);
    }
  }
  else if (v9 == 2)
  {
    if (a6 > 0.0)
    {
      v24 = a2;
      if (*(_BYTE *)(a1 + 84))
        v7 = (float)*(int *)(*(_QWORD *)(a1 + 288) + 4 * a2) * a6;
      v25 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a2, a3, a4, a5);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v25, (unsigned int *)(*(_QWORD *)(a1 + 216) + 48 * (int)v24), v7, v26, v27, v28);
      v32 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a2, v29, v30, v31);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v32, (_DWORD *)(*(_QWORD *)(a1 + 240) + 32 * v24), v33, v34, v35, v7);
    }
  }
  else if (v9 == 1 && a6 > 0.0)
  {
    if (*(_BYTE *)(a1 + 84))
      v7 = (float)*(int *)(*(_QWORD *)(a1 + 288) + 4 * a2) * a6;
    v10 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a2, a3, a4, a5);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v10, v7);
    v14 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a2, v11, v12, v13);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v14, v7);
  }
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  const char *v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD v32[34];

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  v7 = *(_QWORD *)(a1 + 160);
  if (!v7)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEF, "bias_", v6);
  v8 = *(unsigned int **)(a1 + 152);
  if (!v8
    || (v9 = *(_DWORD *)(v7 + 16),
        v10 = kaldi::QuantizedMatrixBase<short>::NumRows(v8),
        (v11 = *(_QWORD *)(a1 + 152)) == 0))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v6);
  }
  result = kaldi::QuantizedMatrixBase<short>::NumCols(v11);
  *a3 = v9 + result * v10;
  v16 = *(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168);
  if (v16)
  {
    v17 = *(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192);
    if (v17)
    {
      v18 = v16 >> 3;
      if (*(_DWORD *)(a1 + 80) == 1)
        v19 = 0;
      else
        v19 = *(_DWORD *)(a1 + 80);
      if (v18 - 1 != v19 || (v17 >> 3) - 1 != v19)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "CountZeroCorr", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 883);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Unexpected mismatch in indexes: ", 32);
        v30 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"  ", 2);
        v31 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"  ", 2);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
      }
      v20 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, v19, v13, v14, v15);
      v25 = kaldi::CuMatrixBase<float>::CountZeros(v20, v21, v22, v23, v24);
      v29 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, v19, v26, v27, v28);
      result = kaldi::CuVectorBase<float>::CountZeros(v29);
      LODWORD(v17) = result + v25;
    }
  }
  else
  {
    LODWORD(v17) = 0;
  }
  *a2 = v17;
  return result;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t i;
  const char *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  const char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(a1);
  v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1)
    v3 = (v2 + 1);
  else
    v3 = 1;
  if (!*(_BYTE *)(a1 + 480))
  {
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 408), (int)v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 360), (int)v3);
    std::vector<BOOL>::resize(a1 + 456, (int)v3, 0);
    v4 = *(_DWORD *)(a1 + 272);
    v5 = (_QWORD *)(a1 + 168);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 168, (int)v3);
    v6 = (_QWORD *)(a1 + 192);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize(a1 + 192, (int)v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 216), (int)v3);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 240), (int)v3);
    if ((int)v3 >= 1)
    {
      for (i = 0; i != v3; ++i)
      {
        v9 = operator new();
        v10 = *(unsigned int **)(a1 + 152);
        if (!v10 || (v11 = kaldi::QuantizedMatrixBase<short>::NumRows(v10), (v12 = *(_QWORD *)(a1 + 152)) == 0))
          kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v8);
        v13 = kaldi::QuantizedMatrixBase<short>::NumCols(v12);
        kaldi::CuMatrix<float>::CuMatrix(v9, v11, v13, 0, 0, 0);
        v14 = *(_QWORD *)(*v5 + 8 * i);
        *(_QWORD *)(*v5 + 8 * i) = v9;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
        v15 = (_QWORD *)operator new();
        v18 = v15;
        v19 = *(_QWORD *)(a1 + 160);
        if (!v19)
          kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEF, "bias_", v17);
        v20 = *(unsigned int *)(v19 + 16);
        *v15 = &unk_1EA92DFD8;
        v15[1] = 0;
        v15[2] = 0;
        v15[3] = 0;
        kaldi::CuVector<float>::Resize((uint64_t)v15, v20, 0, v16, v17);
        v22 = *(_QWORD *)(*v6 + 8 * i);
        *(_QWORD *)(*v6 + 8 * i) = v18;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
        if ((v4 & 0xFFFFFFFE) == 2)
        {
          v23 = *(unsigned int **)(a1 + 152);
          if (!v23
            || (v24 = *(_QWORD *)(a1 + 216),
                v25 = kaldi::QuantizedMatrixBase<short>::NumRows(v23),
                (v26 = *(_QWORD *)(a1 + 152)) == 0)
            || (v27 = kaldi::QuantizedMatrixBase<short>::NumCols(v26),
                kaldi::CuMatrix<float>::Resize(v24 + 48 * i, v25, v27, 1u, 0),
                (v28 = *(unsigned int **)(a1 + 152)) == 0))
          {
            kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v21);
          }
          v29 = *(_QWORD *)(a1 + 240) + 32 * i;
          v30 = kaldi::QuantizedMatrixBase<short>::NumRows(v28);
          kaldi::CuVector<float>::Resize(v29, v30, 1u, v31, v32);
          if (*(_DWORD *)(a1 + 272) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 216) + 48 * i, v33, v34, v35, v36, 1.0);
            kaldi::CuVectorBase<float>::Set(*(_QWORD *)(a1 + 240) + 32 * i, 1.0);
          }
        }
      }
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 288), (int)v3);
    *(_BYTE *)(a1 + 480) = 1;
  }
}

void sub_1DE46CABC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::VectorizeWeightsCorrs()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 908);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent(v2, a1);
  return v2;
}

void sub_1DE46CB94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit(uint64_t a1)
{
  return kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit(a1 - 88);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>(v2, a1);
  return v2;
}

void sub_1DE46CC04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit(uint64_t a1)
{
  return kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit(a1 - 96);
}

double kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  *(_OWORD *)(a1 + 56) = xmmword_1DEC3D450;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)a1 = &unk_1EA92C9B0;
  *(_QWORD *)(a1 + 88) = &unk_1EA92CAE8;
  *(_QWORD *)(a1 + 96) = &unk_1EA92CB10;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a1 + 264) = _D1;
  *(_DWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 276) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_BYTE *)(a1 + 480) = 0;
  return result;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29[35];

  *(_QWORD *)a1 = off_1EA92D6D8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1EA929750;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_QWORD *)(a1 + 88) = &unk_1EA92CAE8;
  *(_QWORD *)(a1 + 96) = &unk_1EA92CB10;
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)a1 = &unk_1EA92C9B0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 168), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 192), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 3);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 216), *(_QWORD *)(a2 + 216), *(_QWORD *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 224) - *(_QWORD *)(a2 + 216)) >> 4));
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 240), *(_QWORD *)(a2 + 240), *(_QWORD *)(a2 + 248), (uint64_t)(*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 5);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 288), *(const void **)(a2 + 288), *(_QWORD *)(a2 + 296), (uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 312), *(const void **)(a2 + 312), *(_QWORD *)(a2 + 320), (uint64_t)(*(_QWORD *)(a2 + 320) - *(_QWORD *)(a2 + 312)) >> 2);
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_BYTE *)(a1 + 480) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29, "ConvolutionalMaxPoolingComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 76);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
  v6 = *(int **)(a2 + 152);
  if (v6)
  {
    v7 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix(v7, v6);
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), v7);
  }
  v8 = *(_QWORD **)(a2 + 160);
  if (v8)
  {
    kaldi::NewCuSubOrVec<float>(v8, *(unsigned __int8 *)(a1 + 16), v29);
    v9 = v29[0];
    v29[0] = 0;
    v10 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v11 = v29[0];
      v29[0] = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    }
  }
  v13 = *(_QWORD *)(a1 + 168);
  v12 = *(_QWORD *)(a1 + 176);
  if (v12 != v13)
  {
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 168) + 8 * v14);
      if (v15)
      {
        kaldi::NewCuSubOrMat<float>(v15, *(unsigned __int8 *)(a1 + 16), v29);
        v16 = *(_QWORD *)(a1 + 168);
        v17 = v29[0];
        v29[0] = 0;
        v18 = *(_QWORD *)(v16 + 8 * v14);
        *(_QWORD *)(v16 + 8 * v14) = v17;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        v19 = v29[0];
        v29[0] = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
        v13 = *(_QWORD *)(a1 + 168);
        v12 = *(_QWORD *)(a1 + 176);
      }
      ++v14;
    }
    while (v14 < (v12 - v13) >> 3);
  }
  v21 = *(_QWORD *)(a1 + 192);
  v20 = *(_QWORD *)(a1 + 200);
  if (v20 != v21)
  {
    v22 = 0;
    do
    {
      v23 = *(_QWORD **)(*(_QWORD *)(a2 + 192) + 8 * v22);
      if (v23)
      {
        kaldi::NewCuSubOrVec<float>(v23, *(unsigned __int8 *)(a1 + 16), v29);
        v24 = *(_QWORD *)(a1 + 192);
        v25 = v29[0];
        v29[0] = 0;
        v26 = *(_QWORD *)(v24 + 8 * v22);
        *(_QWORD *)(v24 + 8 * v22) = v25;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        v27 = v29[0];
        v29[0] = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        v21 = *(_QWORD *)(a1 + 192);
        v20 = *(_QWORD *)(a1 + 200);
      }
      ++v22;
    }
    while (v22 < (v20 - v21) >> 3);
  }
  if (*(_QWORD *)(a2 + 496) != *(_QWORD *)(a2 + 488))
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator((_QWORD *)a1, (uint64_t *)(a1 + 488));
  return a1;
}

void sub_1DE46D0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, void **a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  kaldi::nnet1::UpdatableComponent *v16;
  void **v17;
  uint64_t *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  v19 = (void *)*((_QWORD *)v16 + 57);
  if (v19)
    operator delete(v19);
  a16 = (_QWORD *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v20 = *a12;
  if (*a12)
  {
    *((_QWORD *)v16 + 40) = v20;
    operator delete(v20);
  }
  v21 = *a13;
  if (*a13)
  {
    *((_QWORD *)v16 + 37) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v22 = *((_QWORD *)v16 + 20);
  *((_QWORD *)v16 + 20) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](v18, 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a14);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs((uint64_t)a1);
  v7 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad((uint64_t)a1, ((a1[22] - a1[21]) >> 3) - 1, v4, v5, v6);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
  v11 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad((uint64_t)a1, ((a1[25] - a1[24]) >> 3) - 1, v8, v9, v10);
  return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v11);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void **v8;

  *(_QWORD *)(a1 + 88) = &unk_1EA92CAE8;
  v2 = a1 + 88;
  *(_QWORD *)a1 = &unk_1EA92C9B0;
  *(_QWORD *)(a1 + 96) = &unk_1EA92CB10;
  v3 = a1 + 96;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 488));
  v4 = *(void **)(a1 + 456);
  if (v4)
    operator delete(v4);
  v8 = (void **)(a1 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v5 = *(void **)(a1 + 312);
  if (v5)
  {
    *(_QWORD *)(a1 + 320) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 288);
  if (v6)
  {
    *(_QWORD *)(a1 + 296) = v6;
    operator delete(v6);
  }
  v8 = (void **)(a1 + 240);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 216);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 192);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 168);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v7 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(a1);
  JUMPOUT(0x1DF0ED014);
}

void `non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(uint64_t a1)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(a1 - 88);
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(a1 - 96);
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(a1 - 88);
  JUMPOUT(0x1DF0ED014);
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(a1 - 96);
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent(v2, a1);
  return v2;
}

void sub_1DE46D4EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3, uint64_t a4, const char *a5)
{
  int *v8;
  int *v9;
  int *v10;
  uint64_t *v11;
  int *v12;
  int *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v17;
  BOOL v21;
  int *v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  float *v27;
  BOOL v29;
  __int128 *v30;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  _BOOL4 v45;
  BOOL v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int i;
  unint64_t j;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  float v63;
  const char *v64;
  float v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  unint64_t v74;
  float v75;
  float v76;
  int v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  _QWORD *v87;
  __int128 *v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  int *v92;
  float *v93;
  int *v94;
  float *v95;
  int *v96;
  float *v97;
  int *v98;
  float *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  _BYTE v106[16];
  uint64_t v107;
  void *__p;
  void *v109;
  void **v110[34];
  __int128 v111;
  uint64_t v112;
  int v113;
  int v114;
  float v115;
  int v116;

  v115 = 2.0;
  v116 = -1073741824;
  v114 = 1036831949;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 8);
  v8 = (int *)(a1 + 116);
  *(_QWORD *)(a1 + 132) = 0x100000001;
  v9 = (int *)(a1 + 132);
  v10 = (int *)(a1 + 136);
  v113 = -1;
  v111 = 0uLL;
  v112 = 0;
  v11 = a2 + 4;
  v93 = (float *)(a1 + 280);
  v94 = (int *)(a1 + 128);
  v97 = (float *)(a1 + 264);
  v98 = (int *)(a1 + 124);
  v92 = (int *)(a1 + 120);
  v95 = (float *)(a1 + 268);
  v96 = (int *)(a1 + 112);
  v12 = (int *)(a1 + 108);
  v13 = (int *)(a1 + 104);
  while ((*((_BYTE *)v11 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v111, a4, a5);
    if ((SHIBYTE(v112) & 0x80000000) == 0)
    {
      switch(HIBYTE(v112))
      {
        case 0xA:
          if ((_QWORD)v111 != 0x61654D736169423CLL || WORD4(v111) != 15982)
            goto LABEL_107;
          goto LABEL_61;
        case 0xB:
          if ((_QWORD)v111 == 0x6E6152736169423CLL && *(_QWORD *)((char *)&v111 + 3) == 0x3E65676E61527361)
            goto LABEL_109;
          if (HIBYTE(v112) == 10)
            goto LABEL_108;
          if (HIBYTE(v112) != 11)
            goto LABEL_128;
LABEL_96:
          v35 = (_QWORD)v111 == 0x745368637461503CLL && *(_QWORD *)((char *)&v111 + 3) == 0x3E70657453686374;
          v22 = v96;
          if (!v35)
            goto LABEL_107;
          goto LABEL_129;
        case 0xC:
          goto LABEL_102;
        case 0xD:
          if ((_QWORD)v111 == 0x74536D617261503CLL && *(_QWORD *)((char *)&v111 + 5) == 0x3E7665646474536DLL)
            goto LABEL_135;
LABEL_78:
          v32 = (_QWORD)v111 == 0x6E6F69746365533CLL && *(_QWORD *)((char *)&v111 + 5) == 0x3E706574536E6F69;
          v22 = v8;
          if (v32)
            goto LABEL_129;
          if (HIBYTE(v112) == 10)
            goto LABEL_108;
          if (HIBYTE(v112) == 12)
            goto LABEL_102;
          if (HIBYTE(v112) != 13)
            goto LABEL_128;
          v33 = (_QWORD)v111 == 0x6E6F69746365533CLL && *(_QWORD *)((char *)&v111 + 5) == 0x3E657A69536E6F69;
          v22 = v92;
          if (!v33)
            goto LABEL_128;
          goto LABEL_129;
        case 0xF:
          v34 = (_QWORD)v111 == 0x75746165466E493CLL && *(_QWORD *)((char *)&v111 + 7) == 0x3E7370614D657275;
          v22 = v13;
          if (!v34)
          {
            v30 = &v111;
            switch(HIBYTE(v112))
            {
              case 0xA:
                goto LABEL_124;
              case 0xB:
                goto LABEL_96;
              case 0xC:
                goto LABEL_102;
              case 0xD:
                goto LABEL_78;
              case 0xF:
                goto LABEL_138;
              default:
                goto LABEL_128;
            }
          }
          goto LABEL_129;
        case 0x10:
          v29 = (_QWORD)v111 == 0x7461654674754F3CLL && *((_QWORD *)&v111 + 1) == 0x3E7370614D657275;
          v22 = v12;
          if (!v29)
          {
            v30 = &v111;
            switch(HIBYTE(v112))
            {
              case 0xA:
                goto LABEL_124;
              case 0xB:
                goto LABEL_96;
              case 0xC:
                goto LABEL_102;
              case 0xD:
                goto LABEL_78;
              case 0xF:
LABEL_138:
                v46 = (_QWORD)v111 == 0x65726168536E493CLL && *(_QWORD *)((char *)&v111 + 7) == 0x3E73646E61426465;
                v22 = v94;
                if (!v46)
                  goto LABEL_107;
                goto LABEL_129;
              default:
                goto LABEL_128;
            }
          }
          goto LABEL_129;
        default:
          goto LABEL_128;
      }
    }
    v17 = *((_QWORD *)&v111 + 1);
    if (*((_QWORD *)&v111 + 1) == 10)
    {
      if (*(_QWORD *)v111 == 0x61654D736169423CLL && *(_WORD *)(v111 + 8) == 15982)
      {
LABEL_61:
        v27 = (float *)&v116;
        goto LABEL_136;
      }
      v17 = *((_QWORD *)&v111 + 1);
    }
    else if (*((_QWORD *)&v111 + 1) == 13
           && *(_QWORD *)v111 == 0x74536D617261503CLL
           && *(_QWORD *)(v111 + 5) == 0x3E7665646474536DLL)
    {
LABEL_135:
      v27 = (float *)&v114;
      goto LABEL_136;
    }
    if (v17 == 11)
    {
      if (*(_QWORD *)v111 == 0x6E6152736169423CLL && *(_QWORD *)(v111 + 3) == 0x3E65676E61527361)
      {
LABEL_109:
        v27 = &v115;
        goto LABEL_136;
      }
      v17 = *((_QWORD *)&v111 + 1);
    }
    if (v17 == 15)
    {
      v21 = *(_QWORD *)v111 == 0x75746165466E493CLL && *(_QWORD *)(v111 + 7) == 0x3E7370614D657275;
      v22 = v13;
      if (v21)
        goto LABEL_129;
      v17 = *((_QWORD *)&v111 + 1);
    }
    if (v17 == 16)
    {
      v23 = *(_QWORD *)v111 == 0x7461654674754F3CLL && *(_QWORD *)(v111 + 8) == 0x3E7370614D657275;
      v22 = v12;
      if (v23)
        goto LABEL_129;
      v17 = *((_QWORD *)&v111 + 1);
    }
    if (v17 == 11)
    {
      v24 = *(_QWORD *)v111 == 0x745368637461503CLL && *(_QWORD *)(v111 + 3) == 0x3E70657453686374;
      v22 = v96;
      if (v24)
        goto LABEL_129;
      v17 = *((_QWORD *)&v111 + 1);
    }
    if (v17 != 13)
      goto LABEL_110;
    v25 = *(_QWORD *)v111 == 0x6E6F69746365533CLL && *(_QWORD *)(v111 + 5) == 0x3E706574536E6F69;
    v22 = v8;
    if (v25)
      goto LABEL_129;
    v17 = *((_QWORD *)&v111 + 1);
    if (*((_QWORD *)&v111 + 1) != 13)
      goto LABEL_110;
    v26 = *(_QWORD *)v111 == 0x6E6F69746365533CLL && *(_QWORD *)(v111 + 5) == 0x3E657A69536E6F69;
    v22 = v92;
    if (v26)
      goto LABEL_129;
    if ((v112 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v112) == 10)
        goto LABEL_108;
      if (HIBYTE(v112) != 12)
        goto LABEL_128;
LABEL_102:
      v36 = (_QWORD)v111 == 0x537265746C69463CLL && DWORD2(v111) == 1046837865;
      v22 = v98;
      if (v36)
        goto LABEL_129;
      if ((v112 & 0x8000000000000000) == 0)
      {
LABEL_107:
        if (HIBYTE(v112) != 10)
          goto LABEL_128;
LABEL_108:
        v30 = &v111;
LABEL_124:
        v39 = *(_QWORD *)v30;
        v40 = *((unsigned __int16 *)v30 + 4);
        v41 = v39 == 0x7A69536C6F6F503CLL && v40 == 15973;
        v22 = v9;
        if (v41)
          goto LABEL_129;
        goto LABEL_128;
      }
    }
    else
    {
LABEL_110:
      if (v17 != 12)
        goto LABEL_116;
      v37 = *(_QWORD *)v111 == 0x537265746C69463CLL && *(_DWORD *)(v111 + 8) == 1046837865;
      v22 = v98;
      if (v37)
        goto LABEL_129;
    }
    v17 = *((_QWORD *)&v111 + 1);
LABEL_116:
    if (v17 == 15)
    {
      v38 = *(_QWORD *)v111 == 0x65726168536E493CLL && *(_QWORD *)(v111 + 7) == 0x3E73646E61426465;
      v22 = v94;
      if (v38)
        goto LABEL_129;
      v17 = *((_QWORD *)&v111 + 1);
    }
    if (v17 == 10)
    {
      v30 = (__int128 *)v111;
      goto LABEL_124;
    }
LABEL_128:
    v42 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v111, "<PoolStep>");
    v22 = v10;
    if (v42)
      goto LABEL_129;
    v43 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v111, "<LearnRateCoef>");
    v27 = v97;
    if (!v43)
    {
      v44 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v111, "<BiasLearnRateCoef>");
      v27 = v95;
      if (!v44)
      {
        v45 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v111, "<MaxNorm>");
        v27 = v93;
        if (!v45)
        {
          if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v111, "<RandomSeed>"))
          {
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 237);
            v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"Unknown token ", 14);
            if (v112 >= 0)
              v88 = &v111;
            else
              v88 = (__int128 *)v111;
            if (v112 >= 0)
              v89 = HIBYTE(v112);
            else
              v89 = *((_QWORD *)&v111 + 1);
            v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)v88, v89);
            v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)", a typo in config?", 19);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)" (ParamStddev|BiasMean|BiasRange|InFeatureMaps|OutFeatureMaps|PatchStep|SectionStep|SectionSize|FilterSize|LearnRateCoef|BiasLearnRateCoef|MaxNorm|RandomSeed)", 158);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110);
          }
          v22 = &v113;
LABEL_129:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v22, v14, v15);
          goto LABEL_137;
        }
      }
    }
LABEL_136:
    kaldi::ReadBasicType<float>(a2, 0, v27, v14, v15);
LABEL_137:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v47 = *(_DWORD *)(a1 + 8);
  v48 = *(_DWORD *)(a1 + 12);
  v50 = *(_DWORD *)(a1 + 104);
  v49 = *(_DWORD *)(a1 + 108);
  v51 = *(_DWORD *)(a1 + 132);
  v52 = v47 / v50 - *(_DWORD *)(a1 + 128);
  v53 = *(_DWORD *)(a1 + 120);
  v54 = *(_DWORD *)(a1 + 136);
  v55 = (v53 - v51) / v54 + 1;
  *(_DWORD *)(a1 + 148) = v55;
  v56 = v49 * v55;
  v57 = v48 / v56;
  *(_DWORD *)(a1 + 140) = v52;
  *(_DWORD *)(a1 + 144) = v48 / v56;
  if (v51 < 1 || v53 < v51)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 249);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"ConvolutionalMaxPoolingComponent: Invalid max pooling size", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110);
  }
  if (v54 <= 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 251);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"ConvolutionalMaxPoolingComponent: Max pooling step must be >= 1", 63);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110);
  }
  if (v48 != v56 * v57)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 254);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"ConvolutionalMaxPoolingComponent: output dim mismatch", 53);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110);
  }
  if (v47 != v47 / v50 * v50)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 257);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"ConvolutionalMaxPoolingComponent: input dim mismatch", 52);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110);
  }
  if (*v98 + *v96 * (v53 - 1) + *v8 * (v57 - 1) > v52)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 261);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"ConvolutionalMaxPoolingComponent: too few input bands to compute the output", 75);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110);
  }
  if (v113 >= 1)
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v113);
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v106, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)&v102, ((*(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 124)) * *(_DWORD *)(a1 + 104)), (*(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108)), 0, 0);
  for (i = 0; i < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)&v102); ++i)
  {
    for (j = 0; (uint64_t)j < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)&v102); ++j)
    {
      v63 = *(float *)&v114;
      kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v106, 0, v60, v61, v62);
      if (v104 <= i || j >= v103)
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v64);
      *(float *)(v102 + 4 * i * v105 + 4 * j) = v63 * v65;
    }
  }
  if (*(_QWORD *)(a1 + 152))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 275);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"pointer is thought to be un-initialized here", 44);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110);
  }
  v67 = operator new();
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(v67, (uint64_t)&v102);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), v67);
  v68 = (*(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108));
  v100 = 0;
  v101 = 0;
  v99 = 0;
  kaldi::Vector<float>::Resize((void **)&v99, v68, 0, v69, v70);
  if ((int)v100 >= 1)
  {
    v74 = 0;
    do
    {
      v75 = *(float *)&v116;
      v76 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v71, v72, v73);
      v77 = v100;
      if (v74 >= v100)
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v73);
      v78 = v75 + (v76 + -0.5) * v115;
      v99[v74++] = v78;
    }
    while ((uint64_t)v74 < v77);
  }
  if (*(_QWORD *)(a1 + 160))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 285);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"pointer is thought to be un-initialized here", 44);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v110);
  }
  v79 = operator new();
  v80 = v100;
  *(_QWORD *)(v79 + 16) = 0;
  *(_QWORD *)(v79 + 24) = 0;
  *(_QWORD *)v79 = &unk_1EA92DFD8;
  *(_QWORD *)(v79 + 8) = 0;
  kaldi::CuVector<float>::Resize(v79, v80, 0, v81, v82);
  v86 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v79;
  if (v86)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v86 + 16))(v86);
    v79 = *(_QWORD *)(a1 + 160);
    if (!v79)
      kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEF, "bias_", v85);
  }
  kaldi::CuVectorBase<float>::CopyFromVec<float>((_DWORD *)v79, (uint64_t)&v99, v83, v84, v85);
  kaldi::Vector<float>::Destroy((uint64_t)&v99);
  kaldi::Matrix<float>::~Matrix((uint64_t)&v102);
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  v110[0] = (void **)&v107;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v110);
  if (SHIBYTE(v112) < 0)
    operator delete((void *)v111);
}

void sub_1DE46E21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  if (*(char *)(v24 - 121) < 0)
    operator delete(*(void **)(v24 - 144));
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  float *v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  uint64_t v43;
  const char *v44;
  _BOOL4 v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  const char *v60;
  int v61;
  int v62;
  uint64_t result;
  uint64_t v64;
  _QWORD *v65;
  __int128 *v66;
  uint64_t v67;
  int *v69;
  void *__p[2];
  uint64_t v71;
  __int128 v72;
  uint64_t v73;

  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 8);
  v7 = a1 + 116;
  *(_QWORD *)(a1 + 132) = 0x100000001;
  v8 = (int *)(a1 + 132);
  v69 = (int *)(a1 + 136);
  while (kaldi::Peek(a2, a3) == 60)
  {
    v72 = 0uLL;
    v73 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v72, v9, v10);
    if ((SHIBYTE(v73) & 0x80000000) == 0)
    {
      v13 = (uint64_t *)&v72;
      switch(HIBYTE(v73))
      {
        case 0xA:
          goto LABEL_87;
        case 0xB:
LABEL_4:
          v14 = (_QWORD)v72 == 0x745368637461503CLL && *(_QWORD *)((char *)&v72 + 3) == 0x3E70657453686374;
          v15 = a1 + 112;
          if (!v14)
            goto LABEL_86;
          goto LABEL_136;
        case 0xC:
          goto LABEL_81;
        case 0xD:
LABEL_68:
          v28 = (_QWORD)v72 == 0x6E6F69746365533CLL && *(_QWORD *)((char *)&v72 + 5) == 0x3E706574536E6F69;
          v15 = v7;
          if (v28)
            goto LABEL_136;
          if (HIBYTE(v73) == 10)
            goto LABEL_87;
          if (HIBYTE(v73) == 12)
            goto LABEL_81;
          if (HIBYTE(v73) != 13)
            goto LABEL_132;
          v29 = (_QWORD)v72 == 0x6E6F69746365533CLL && *(_QWORD *)((char *)&v72 + 5) == 0x3E657A69536E6F69;
          v15 = a1 + 120;
          if (!v29)
            goto LABEL_132;
          goto LABEL_136;
        case 0xF:
          v23 = (_QWORD)v72 == 0x75746165466E493CLL && *(_QWORD *)((char *)&v72 + 7) == 0x3E7370614D657275;
          v15 = a1 + 104;
          if (v23)
            goto LABEL_136;
LABEL_52:
          v24 = (_QWORD)v72 == 0x65726168536E493CLL && *(_QWORD *)((char *)&v72 + 7) == 0x3E73646E61426465;
          v15 = a1 + 128;
          if (v24)
            goto LABEL_136;
          if (HIBYTE(v73) != 15)
            goto LABEL_86;
          v25 = (_QWORD)v72 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v72 + 7) == 0x3E66656F43657461;
          v26 = (float *)(a1 + 264);
          if (!v25)
            goto LABEL_132;
          goto LABEL_138;
        case 0x10:
          v27 = (_QWORD)v72 == 0x7461654674754F3CLL && *((_QWORD *)&v72 + 1) == 0x3E7370614D657275;
          v15 = a1 + 108;
          if (!v27)
          {
            switch(HIBYTE(v73))
            {
              case 0xA:
                goto LABEL_87;
              case 0xB:
                goto LABEL_4;
              case 0xC:
                goto LABEL_81;
              case 0xD:
                goto LABEL_68;
              case 0xF:
                goto LABEL_52;
              default:
                goto LABEL_132;
            }
          }
          goto LABEL_136;
        case 0x13:
          goto LABEL_125;
        default:
          goto LABEL_132;
      }
    }
    v16 = *((_QWORD *)&v72 + 1);
    if (*((_QWORD *)&v72 + 1) == 15)
    {
      v17 = *(_QWORD *)v72 == 0x75746165466E493CLL && *(_QWORD *)(v72 + 7) == 0x3E7370614D657275;
      v15 = a1 + 104;
      if (v17)
        goto LABEL_136;
    }
    if (*((_QWORD *)&v72 + 1) == 16)
    {
      v18 = *(_QWORD *)v72 == 0x7461654674754F3CLL && *(_QWORD *)(v72 + 8) == 0x3E7370614D657275;
      v15 = a1 + 108;
      if (v18)
        goto LABEL_136;
      v16 = *((_QWORD *)&v72 + 1);
    }
    if (v16 == 11)
    {
      v19 = *(_QWORD *)v72 == 0x745368637461503CLL && *(_QWORD *)(v72 + 3) == 0x3E70657453686374;
      v15 = a1 + 112;
      if (v19)
        goto LABEL_136;
      v16 = *((_QWORD *)&v72 + 1);
    }
    if (v16 != 13)
      goto LABEL_41;
    v20 = *(_QWORD *)v72 == 0x6E6F69746365533CLL && *(_QWORD *)(v72 + 5) == 0x3E706574536E6F69;
    v15 = v7;
    if (v20)
      goto LABEL_136;
    v16 = *((_QWORD *)&v72 + 1);
    if (*((_QWORD *)&v72 + 1) != 13)
      goto LABEL_41;
    v21 = *(_QWORD *)v72 == 0x6E6F69746365533CLL && *(_QWORD *)(v72 + 5) == 0x3E657A69536E6F69;
    v15 = a1 + 120;
    if (v21)
      goto LABEL_136;
    if ((v73 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v73) == 10)
        goto LABEL_87;
      if (HIBYTE(v73) != 12)
        goto LABEL_132;
LABEL_81:
      v30 = (_QWORD)v72 == 0x537265746C69463CLL && DWORD2(v72) == 1046837865;
      v15 = a1 + 124;
      if (v30)
        goto LABEL_136;
      if ((v73 & 0x8000000000000000) == 0)
      {
LABEL_86:
        if (HIBYTE(v73) != 10)
          goto LABEL_132;
LABEL_87:
        v31 = (_QWORD)v72 == 0x7A69536C6F6F503CLL && WORD4(v72) == 15973;
        v15 = (uint64_t)v8;
        if (v31)
          goto LABEL_136;
        if ((v73 & 0x8000000000000000) == 0)
        {
          if (HIBYTE(v73) != 10)
            goto LABEL_132;
          v32 = (_QWORD)v72 == 0x6574536C6F6F503CLL && WORD4(v72) == 15984;
          v15 = (uint64_t)v69;
          if (!v32)
            goto LABEL_132;
          goto LABEL_136;
        }
LABEL_111:
        v16 = *((_QWORD *)&v72 + 1);
        if (*((_QWORD *)&v72 + 1) != 10)
          goto LABEL_117;
        v35 = *(_QWORD *)v72 == 0x6574536C6F6F503CLL && *(_WORD *)(v72 + 8) == 15984;
        v15 = (uint64_t)v69;
        if (!v35)
        {
          if (v73 < 0)
          {
LABEL_117:
            if (v16 == 15)
            {
              v36 = *(_QWORD *)v72 == 0x61526E7261654C3CLL && *(_QWORD *)(v72 + 7) == 0x3E66656F43657461;
              v26 = (float *)(a1 + 264);
              if (!v36)
              {
                v16 = *((_QWORD *)&v72 + 1);
                goto LABEL_123;
              }
LABEL_138:
              kaldi::ReadBasicType<float>(a2, a3, v26, v11, v12);
              goto LABEL_139;
            }
LABEL_123:
            if (v16 == 19)
            {
              v13 = (uint64_t *)v72;
LABEL_125:
              v37 = *v13;
              v38 = v13[1];
              v39 = *(uint64_t *)((char *)v13 + 11);
              v40 = v37 == 0x61654C736169423CLL && v38 == 0x6F43657461526E72;
              v41 = v40 && v39 == 0x3E66656F43657461;
              v26 = (float *)(a1 + 268);
              if (v41)
                goto LABEL_138;
            }
          }
LABEL_132:
          v42 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v72, "<MaxNorm>");
          v26 = (float *)(a1 + 280);
          if (!v42)
          {
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v72, "<GradientNormType>"))
            {
              __p[0] = 0;
              __p[1] = 0;
              v71 = 0;
              kaldi::ReadToken(a2, a3, (uint64_t)__p, v43, v44);
              *(_DWORD *)(a1 + 272) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
              if (SHIBYTE(v71) < 0)
                operator delete(__p[0]);
              goto LABEL_139;
            }
            v45 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v72, "<MaxGrad>");
            v26 = (float *)(a1 + 276);
            if (!v45)
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 332);
              v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
              if (v73 >= 0)
                v66 = &v72;
              else
                v66 = (__int128 *)v72;
              if (v73 >= 0)
                v67 = HIBYTE(v73);
              else
                v67 = *((_QWORD *)&v72 + 1);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)v66, v67);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
            }
          }
          goto LABEL_138;
        }
        goto LABEL_136;
      }
    }
    else
    {
LABEL_41:
      if (v16 != 12)
        goto LABEL_100;
      v22 = *(_QWORD *)v72 == 0x537265746C69463CLL && *(_DWORD *)(v72 + 8) == 1046837865;
      v15 = a1 + 124;
      if (v22)
        goto LABEL_136;
    }
    v16 = *((_QWORD *)&v72 + 1);
LABEL_100:
    if (v16 == 15)
    {
      v33 = *(_QWORD *)v72 == 0x65726168536E493CLL && *(_QWORD *)(v72 + 7) == 0x3E73646E61426465;
      v15 = a1 + 128;
      if (v33)
        goto LABEL_136;
      v16 = *((_QWORD *)&v72 + 1);
    }
    if (v16 != 10)
      goto LABEL_117;
    v34 = *(_QWORD *)v72 == 0x7A69536C6F6F503CLL && *(_WORD *)(v72 + 8) == 15973;
    v15 = (uint64_t)v8;
    if (!v34)
      goto LABEL_111;
LABEL_136:
    kaldi::ReadBasicType<int>(a2, a3, v15, v11, v12);
LABEL_139:
    if (SHIBYTE(v73) < 0)
      operator delete((void *)v72);
  }
  v46 = *(_DWORD *)(a1 + 12);
  v47 = *(_DWORD *)(a1 + 108);
  v48 = *(_DWORD *)(a1 + 8) / *(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 128);
  v49 = (*(_DWORD *)(a1 + 120) - *(_DWORD *)(a1 + 132)) / *(_DWORD *)(a1 + 136) + 1;
  *(_DWORD *)(a1 + 148) = v49;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 140) = v48;
  *(_DWORD *)(a1 + 144) = v46 / (v47 * v49);
  LOBYTE(v72) = 0;
  kaldi::ReadBasicType<char>(a2, a3, &v72, v9, v10);
  v50 = (int **)(a1 + 152);
  if (*(_QWORD *)(a1 + 152))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 348);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "pointer is thought to be un-initialized here");
    goto LABEL_172;
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"<Filters>");
  v51 = ((*(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 124)) * *(_DWORD *)(a1 + 104));
  v52 = (*(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108));
  v53 = operator new();
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(v53, v51, v52);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), v53);
  if (!*v50)
    goto LABEL_160;
  kaldi::QuantizedMatrix<short>::Read(*v50, a2, a3, a4, v54);
  if (*(_QWORD *)(a1 + 160))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 356);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "pointer is thought to be un-initialized here");
LABEL_172:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"<Bias>");
  v55 = (_QWORD *)operator new();
  v56 = *(unsigned int *)(a1 + 12);
  v55[2] = 0;
  v55[3] = 0;
  *v55 = &unk_1EA92DFD8;
  v55[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v55, v56, 0, v57, v58);
  v59 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v55;
  if (v59)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 16))(v59);
    v55 = *(_QWORD **)(a1 + 160);
    if (!v55)
      goto LABEL_162;
  }
  (*(void (**)(_QWORD *, uint64_t *, uint64_t))*v55)(v55, a2, a3);
  v61 = *(_DWORD *)(a1 + 144);
  if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(a1 + 148) * *(_DWORD *)(a1 + 108) * v61)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x16C, "output_dim_ == out_feature_maps_ * num_pools_per_section_ * num_sections_", v54);
  v62 = *(_DWORD *)(a1 + 140);
  if (*(_DWORD *)(a1 + 8) != (*(_DWORD *)(a1 + 128) + v62) * *(_DWORD *)(a1 + 104))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x16D, "input_dim_ == in_feature_maps_ * (num_in_bands_ + in_shared_bands_)", v54);
  if (*(_DWORD *)(a1 + 124) + (*(_DWORD *)(a1 + 120) - 1) * *(_DWORD *)(a1 + 112) + *(_DWORD *)(a1 + 116) * (v61 - 1) > v62)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x170, "(num_sections_ - 1) * section_step_ + section_coverage <= num_in_bands_", v54);
  if (!*v50)
    goto LABEL_160;
  if (kaldi::QuantizedMatrixBase<short>::NumRows((unsigned int *)*v50) != (*(_DWORD *)(a1 + 128)
                                                                                        + *(_DWORD *)(a1 + 124))
                                                                                       * *(_DWORD *)(a1 + 104))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x172, "Filters().NumRows() == in_feature_maps_ * (filter_size_ + in_shared_bands_)", v54);
  if (!*v50)
LABEL_160:
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v54);
  result = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)*v50);
  if ((_DWORD)result != *(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x173, "Filters().NumCols() == out_feature_maps_ * num_sections_", v60);
  v64 = *(_QWORD *)(a1 + 160);
  if (!v64)
LABEL_162:
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEF, "bias_", v60);
  if (*(_DWORD *)(v64 + 16) != (_DWORD)result)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x174, "Bias().Dim() == out_feature_maps_ * num_sections_", v60);
  if (*v8 < 1 || *v8 > *(_DWORD *)(a1 + 120) || *v69 <= 0)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x177, "pooling_size_ >= 1 && pooling_size_ <= section_size_ && pooling_step_ > 0", v60);
  return result;
}

void sub_1DE46EE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 89) < 0)
    operator delete(*(void **)(v22 - 112));
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::WriteConfig(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  std::string __p;

  kaldi::WriteToken(a2, a3, (kaldi *)"<InFeatureMaps>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<OutFeatureMaps>", v8, v9);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PatchStep>", v10, v11);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<SectionStep>", v12, v13);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<SectionSize>", v14, v15);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FilterSize>", v16, v17);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<InSharedBands>", v18, v19);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolSize>", v20, v21);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolStep>", v22, v23);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v24, v25);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<BiasLearnRateCoef>", v26, v27);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxNorm>", v28, v29);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v30, v31);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 272), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v32, v33);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v34, v35);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

void sub_1DE46F154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::WriteData(_QWORD *a1, _QWORD *a2, const char *a3, int a4)
{
  uint64_t v8;
  const char *v9;
  const char *v10;
  int *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  _DWORD *v16;

  (*(void (**)(_QWORD *))(*a1 + 168))(a1);
  kaldi::WriteBasicType<char>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<Filters>", v8, v9);
  v11 = (int *)a1[19];
  if (!v11)
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE3, "filters_", v10);
  kaldi::QuantizedMatrix<short>::Write(v11, a2, (int)a3, a4);
  kaldi::WriteToken(a2, a3, (kaldi *)"<Bias>", v12, v13);
  v16 = (_DWORD *)a1[20];
  if (!v16)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEB, "bias_", v15);
  kaldi::CuVectorBase<float>::Write(v16, a2, (int)a3, v14, v15);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::NumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unsigned int *v6;
  int v7;
  uint64_t v8;
  int v9;
  const char *v10;
  uint64_t v11;

  v6 = *(unsigned int **)(a1 + 152);
  if (!v6 || (v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6), (v8 = *(_QWORD *)(a1 + 152)) == 0))
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE3, "filters_", a5);
  v9 = kaldi::QuantizedMatrixBase<short>::NumCols(v8);
  v11 = *(_QWORD *)(a1 + 160);
  if (!v11)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEB, "bias_", v10);
  return (*(_DWORD *)(v11 + 16) + v9 * v7);
}

_DWORD *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::GetParams(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  unsigned int *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  void *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  v8 = (unsigned int *)a1[19];
  if (!v8)
    goto LABEL_8;
  v9 = kaldi::QuantizedMatrixBase<short>::NumRows(v8);
  v10 = a1[19];
  if (!v10)
    goto LABEL_8;
  v11 = kaldi::QuantizedMatrixBase<short>::NumCols(v10) * v9;
  v19 = 0;
  v20 = 0;
  if (v11 > *(_DWORD *)(a2 + 8))
    goto LABEL_9;
  v18 = *(void **)a2;
  LODWORD(v19) = v11;
  v12 = (unsigned int *)a1[19];
  if (!v12)
LABEL_8:
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE3, "filters_", v7);
  kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v18, v12);
  v15 = (_DWORD *)a1[20];
  if (!v15)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEB, "bias_", v7);
  v16 = v15[4];
  v19 = 0;
  v20 = 0;
  if (v16 + v11 > *(_DWORD *)(a2 + 8))
LABEL_9:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v7);
  v18 = (void *)(*(_QWORD *)a2 + 4 * (int)v11);
  LODWORD(v19) = v16;
  return kaldi::CuVectorBase<float>::CopyToVec<float>(v15, (uint64_t)&v18, v13, v14, v7);
}

_DWORD *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::SetParams(_QWORD *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  unsigned int *v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_QWORD *))(*a1 + 176))(a1))
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x324, "wei_src.Dim() == NumParams()", v5);
  v6 = (unsigned int *)a1[19];
  if (!v6
    || (v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6), (v8 = a1[19]) == 0)
    || (v9 = kaldi::QuantizedMatrixBase<short>::NumCols(v8), (v10 = (unsigned int *)a1[19]) == 0))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v5);
  }
  v11 = v9 * v7;
  v18 = 0;
  v19 = 0;
  if (v11 > *(_DWORD *)(a2 + 8))
    goto LABEL_10;
  v17 = *(char **)a2;
  LODWORD(v18) = v11;
  kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v10, &v17);
  v14 = (_DWORD *)a1[20];
  if (!v14)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEF, "bias_", v5);
  v15 = v14[4];
  v18 = 0;
  v19 = 0;
  if ((v15 + v11) > *(_DWORD *)(a2 + 8))
LABEL_10:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v5);
  v17 = (char *)(*(_QWORD *)a2 + 4 * v11);
  LODWORD(v18) = v15;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v14, (uint64_t)&v17, v12, v13, v5);
}

float kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;

  if (!*(_BYTE *)(a1 + 84))
    return *(float *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 312);
  v3 = *(_QWORD *)(a1 + 320) - v2;
  if (!v3)
    return NAN;
  v4 = v3 >> 2;
  if ((int)v4 <= a2)
    return NAN;
  v5 = v4 - 1;
  if (a2 >= 0)
    v5 = a2;
  return *(float *)(v2 + 4 * v5);
}

float kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::SumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int *v6;
  const char *v7;
  float v8;
  uint64_t v9;

  v6 = *(int **)(a1 + 152);
  if (!v6)
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE3, "filters_", a5);
  v8 = kaldi::QuantizedMatrixBase<short>::Sum(v6, a2, a3, a4, a5);
  v9 = *(_QWORD *)(a1 + 160);
  if (!v9)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEB, "bias_", v7);
  return v8 + kaldi::CuVectorBase<float>::Sum(v9);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::PerturbParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _BYTE v11[48];

  v6 = *(unsigned int **)(a1 + 152);
  if (v6)
  {
    v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6);
    v8 = *(_QWORD *)(a1 + 152);
    if (v8)
    {
      v9 = kaldi::QuantizedMatrixBase<short>::NumCols(v8);
      kaldi::CuMatrix<float>::CuMatrix((uint64_t)v11, v7, v9, 1u, 0, 0);
      kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v11);
      if (*(_QWORD *)(a1 + 152))
        kaldi::QuantizedMatrixBase<short>::AddMat();
      kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v10);
    }
  }
  kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", a5);
}

void sub_1DE46F78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::Info(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  const char *v9;
  __int128 v10;
  unsigned int *v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  __int128 v21;
  _DWORD *v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  void *__p[2];
  unsigned __int8 v27;
  void *v28[2];
  unsigned __int8 v29;
  void *v30[2];
  unsigned __int8 v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;

  std::string::basic_string[abi:ne180100]<0>(&v32, " ");
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ParamsString(a1);
  if ((v31 & 0x80u) == 0)
    v4 = v30;
  else
    v4 = (void **)v30[0];
  if ((v31 & 0x80u) == 0)
    v5 = v31;
  else
    v5 = (std::string::size_type)v30[1];
  v6 = std::string::append(&v32, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v33, "\n  filters");
  v10 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v10;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v11 = *(unsigned int **)(a1 + 152);
  if (!v11)
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE3, "filters_", v9);
  kaldi::nnet1::MomentStatistics<short>(v11);
  if ((v29 & 0x80u) == 0)
    v12 = v28;
  else
    v12 = (void **)v28[0];
  if ((v29 & 0x80u) == 0)
    v13 = v29;
  else
    v13 = (std::string::size_type)v28[1];
  v14 = std::string::append(&v34, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v35, "\n  bias");
  v21 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v21;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v22 = *(_DWORD **)(a1 + 160);
  if (!v22)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEB, "bias_", v20);
  kaldi::nnet1::MomentStatistics<float>(v22, v17, v18, v19, v20);
  if ((v27 & 0x80u) == 0)
    v23 = __p;
  else
    v23 = (void **)__p[0];
  if ((v27 & 0x80u) == 0)
    v24 = v27;
  else
    v24 = (std::string::size_type)__p[1];
  v25 = std::string::append(&v36, (const std::string::value_type *)v23, v24);
  *a2 = *v25;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if ((char)v27 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if ((char)v29 < 0)
    operator delete(v28[0]);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if ((char)v31 < 0)
    operator delete(v30[0]);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_1DE46F9EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v45 - 41) < 0)
    operator delete(*(void **)(v45 - 64));
  if (*(char *)(v45 - 73) < 0)
    operator delete(*(void **)(v45 - 96));
  if (a20 < 0)
    operator delete(a15);
  if (a45 < 0)
    operator delete(a40);
  if (a38 < 0)
    operator delete(a33);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ParamsString(uint64_t a1)
{
  _QWORD *v2;
  _QWORD v4[11];
  char v5;
  uint64_t v6;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 168))(a1, v4, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" , # of sections: ", 18);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", section size after pooling: ", 30);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v4[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v5 < 0)
    operator delete((void *)v4[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v6);
}

void sub_1DE46FBA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  void **v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  void **v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  void **v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  void **v42;
  std::string::size_type v43;
  std::string *v44;
  void *__p[2];
  unsigned __int8 v46;
  void *v47[2];
  unsigned __int8 v48;
  void *v49[2];
  unsigned __int8 v50;
  void *v51[2];
  unsigned __int8 v52;
  void *v53[2];
  unsigned __int8 v54;
  void *v55[2];
  unsigned __int8 v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;

  std::string::basic_string[abi:ne180100]<0>(&v57, " ");
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ParamsString(a1);
  if ((v56 & 0x80u) == 0)
    v4 = v55;
  else
    v4 = (void **)v55[0];
  if ((v56 & 0x80u) == 0)
    v5 = v56;
  else
    v5 = (std::string::size_type)v55[1];
  v6 = std::string::append(&v57, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v58, "\n  filters_grad");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 168), v10, v11, v12, v13);
  if ((v54 & 0x80u) == 0)
    v14 = v53;
  else
    v14 = (void **)v53[0];
  if ((v54 & 0x80u) == 0)
    v15 = v54;
  else
    v15 = (std::string::size_type)v53[1];
  v16 = std::string::append(&v59, (const std::string::value_type *)v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v60, ", lr-coef ");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v52 & 0x80u) == 0)
    v20 = v51;
  else
    v20 = (void **)v51[0];
  if ((v52 & 0x80u) == 0)
    v21 = v52;
  else
    v21 = (std::string::size_type)v51[1];
  v22 = std::string::append(&v61, (const std::string::value_type *)v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = std::string::append(&v62, ", max-norm ");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v63.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v50 & 0x80u) == 0)
    v26 = v49;
  else
    v26 = (void **)v49[0];
  if ((v50 & 0x80u) == 0)
    v27 = v50;
  else
    v27 = (std::string::size_type)v49[1];
  v28 = std::string::append(&v63, (const std::string::value_type *)v26, v27);
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v64, "\n  bias_grad");
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 192), v32, v33, v34, v35);
  if ((v48 & 0x80u) == 0)
    v36 = v47;
  else
    v36 = (void **)v47[0];
  if ((v48 & 0x80u) == 0)
    v37 = v48;
  else
    v37 = (std::string::size_type)v47[1];
  v38 = std::string::append(&v65, (const std::string::value_type *)v36, v37);
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  v40 = std::string::append(&v66, ", lr-coef ");
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v67.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v46 & 0x80u) == 0)
    v42 = __p;
  else
    v42 = (void **)__p[0];
  if ((v46 & 0x80u) == 0)
    v43 = v46;
  else
    v43 = (std::string::size_type)__p[1];
  v44 = std::string::append(&v67, (const std::string::value_type *)v42, v43);
  *a2 = *v44;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  if ((char)v46 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if ((char)v48 < 0)
    operator delete(v47[0]);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if ((char)v50 < 0)
    operator delete(v49[0]);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if ((char)v52 < 0)
    operator delete(v51[0]);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if ((char)v54 < 0)
    operator delete(v53[0]);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if ((char)v56 < 0)
    operator delete(v55[0]);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
}

void sub_1DE46FF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a66;
  char a71;
  void *a72;
  char a73;
  uint64_t v73;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v73 - 57) < 0)
    operator delete(*(void **)(v73 - 80));
  if (*(char *)(v73 - 89) < 0)
    operator delete(*(void **)(v73 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v73 - 121) < 0)
    operator delete(*(void **)(v73 - 144));
  if (*(char *)(v73 - 153) < 0)
    operator delete(*(void **)(v73 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v73 - 185) < 0)
    operator delete(*(void **)(v73 - 208));
  if (*(char *)(v73 - 217) < 0)
    operator delete(*(void **)(v73 - 240));
  if (a33 < 0)
    operator delete(a28);
  if (a73 < 0)
    operator delete(a72);
  if (a71 < 0)
    operator delete(a66);
  if (a39 < 0)
    operator delete(a34);
  if (a64 < 0)
    operator delete(a59);
  if (a57 < 0)
    operator delete(a52);
  if (a45 < 0)
    operator delete(a40);
  if (a51 < 0)
    operator delete(a46);
  _Unwind_Resume(a1);
}

void sub_1DE4700E8()
{
  JUMPOUT(0x1DE470060);
}

void sub_1DE4700F0()
{
  JUMPOUT(0x1DE470070);
}

void sub_1DE4700F8()
{
  JUMPOUT(0x1DE470080);
}

void sub_1DE470100()
{
  JUMPOUT(0x1DE470090);
}

void sub_1DE470108()
{
  JUMPOUT(0x1DE4700A0);
}

void sub_1DE470110()
{
  JUMPOUT(0x1DE4700B0);
}

void sub_1DE470118()
{
  JUMPOUT(0x1DE4700C0);
}

void sub_1DE470120()
{
  JUMPOUT(0x1DE4700D0);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::PropagateFncDirect(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v7;
  int v8;
  int v9;
  const char *v10;
  uint64_t v11;
  int v12;
  int i;
  uint64_t v14;
  const char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  int v23;
  const char *v24;
  uint64_t v25;
  int v26;
  int j;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  const char *v39;
  uint64_t v40;
  void *v42;
  __int128 v43;
  __int128 v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  void *v51;
  __int128 v52;
  __int128 v53;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(a1);
  if (*(int *)(a1 + 128) <= 0)
    v7 = 0.0;
  else
    v7 = 1.0;
  v40 = a2;
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 384) + 48 * a4, *(unsigned int *)(a2 + 20), (*(_DWORD *)(a1 + 108) * *(_DWORD *)(a1 + 120)), 3u, 0);
  if (*(int *)(a1 + 144) >= 1)
  {
    v8 = 0;
    do
    {
      v9 = *(_DWORD *)(a1 + 120);
      if (*(int *)(a1 + 128) >= 1)
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v51, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(v9 * v8 * *(_DWORD *)(a1 + 108)), *(_DWORD *)(a1 + 108));
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v48, v40, 0, *(_DWORD *)(v40 + 20), (const char *)(*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 140)), *(_DWORD *)(a1 + 128) * *(_DWORD *)(a1 + 104));
        v11 = *(_QWORD *)(a1 + 152);
        if (!v11)
          kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v10);
        kaldi::QuantizedMatrixBase<short>::Range(v11, *(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 124), *(_DWORD *)(a1 + 128) * *(_DWORD *)(a1 + 104), *(_DWORD *)(a1 + 108) * v8, *(_DWORD *)(a1 + 108), (uint64_t)&v45);
        kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v51, (uint64_t)&v48, 111, (unsigned int *)&v45, (const char *)0x6F, 1.0, 0.0);
        v12 = *(_DWORD *)(a1 + 120);
        if (v12 >= 2)
        {
          for (i = 1; i < v12; ++i)
          {
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v42, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(*(_DWORD *)(a1 + 108) * (i + v8 * v12)), *(_DWORD *)(a1 + 108));
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v42, (uint64_t)&v51, 111, v14, v15);
            v42 = &unk_1EA926508;
            v43 = 0u;
            v44 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v42);
            v12 = *(_DWORD *)(a1 + 120);
          }
        }
        kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase((uint64_t)&v45);
        v48 = &unk_1EA926508;
        v49 = 0u;
        v50 = 0u;
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v48);
        v51 = &unk_1EA926508;
        v52 = 0u;
        v53 = 0u;
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v51);
        v9 = *(_DWORD *)(a1 + 120);
      }
      if (v9 >= 1)
      {
        v16 = 0;
        while (1)
        {
          v17 = *(_QWORD *)(a1 + 384) + 48 * a4;
          v18 = kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v51, v17, 0, *(_DWORD *)(v17 + 20), (const char *)(*(_DWORD *)(a1 + 108) * v16), *(_DWORD *)(a1 + 108));
          v22 = *(_QWORD *)(a1 + 160);
          if (!v22)
            break;
          v23 = *(_DWORD *)(a1 + 108);
          *(_QWORD *)&v47 = 0;
          v46 = 0uLL;
          v45 = &unk_1EA926538;
          if ((v23 * v8 + v23) > *(_DWORD *)(v22 + 16))
          {
            v36 = 468;
            v37 = "CuSubVector";
            v38 = "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h";
            v39 = "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<Un"
                  "signedMatrixIndexT>(t.Dim())";
            goto LABEL_29;
          }
          *(_QWORD *)&v46 = *(_QWORD *)(v22 + 8) + 4 * v23 * v8;
          DWORD2(v46) = v23;
          *(_QWORD *)&v47 = *(_QWORD *)(v22 + 24);
          kaldi::CuMatrixBase<float>::AddVecToRows(v18, (uint64_t)&v45, v19, v20, v21, 1.0, v7);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v48, v40, 0, *(_DWORD *)(v40 + 20), (const char *)((*(_DWORD *)(a1 + 116) * v8 + *(_DWORD *)(a1 + 112) * v16)* *(_DWORD *)(a1 + 104)), *(_DWORD *)(a1 + 124) * *(_DWORD *)(a1 + 104));
          v25 = *(_QWORD *)(a1 + 152);
          if (!v25)
            kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v24);
          kaldi::QuantizedMatrixBase<short>::Range(v25, 0, *(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 124), *(_DWORD *)(a1 + 108) * v8, *(_DWORD *)(a1 + 108), (uint64_t)&v45);
          kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v51, (uint64_t)&v48, 111, (unsigned int *)&v45, (const char *)0x6F, 1.0, 1.0);
          kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase((uint64_t)&v45);
          v48 = &unk_1EA926508;
          v49 = 0u;
          v50 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v48);
          v51 = &unk_1EA926508;
          v52 = 0u;
          v53 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v51);
          if (++v16 >= *(_DWORD *)(a1 + 120))
            goto LABEL_18;
        }
        v36 = 239;
        v39 = "bias_";
        v38 = "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h";
        v37 = "Bias";
LABEL_29:
        kaldi::KaldiAssertFailure_((kaldi *)v37, v38, (const char *)v36, v39, v21);
      }
LABEL_18:
      v26 = *(_DWORD *)(a1 + 148);
      if (v26 >= 1)
      {
        for (j = 0; j < v26; ++j)
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v45, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(*(_DWORD *)(a1 + 108) * (j + v26 * v8)), *(_DWORD *)(a1 + 108));
          v28 = *(_QWORD *)(a1 + 384) + 48 * a4;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v51, v28, 0, *(_DWORD *)(v28 + 20), (const char *)(*(_DWORD *)(a1 + 136) * j * *(_DWORD *)(a1 + 108)), *(_DWORD *)(a1 + 108));
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v45, (uint64_t)&v51, 111, v29, v30);
          v51 = &unk_1EA926508;
          v52 = 0u;
          v53 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v51);
          if (*(int *)(a1 + 132) >= 2)
          {
            v31 = 1;
            do
            {
              v32 = *(_QWORD *)(a1 + 384) + 48 * a4;
              kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v51, v32, 0, *(_DWORD *)(v32 + 20), (const char *)((v31 + j * *(_DWORD *)(a1 + 136)) * *(_DWORD *)(a1 + 108)), *(_DWORD *)(a1 + 108));
              kaldi::CuMatrixBase<float>::Max((uint64_t)&v45, (uint64_t)&v51, v33, v34, v35);
              v51 = &unk_1EA926508;
              v52 = 0u;
              v53 = 0u;
              kaldi::CuMatrixBase<float>::~CuMatrixBase(&v51);
              ++v31;
            }
            while (v31 < *(_DWORD *)(a1 + 132));
          }
          v45 = &unk_1EA926508;
          v46 = 0u;
          v47 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v45);
          v26 = *(_DWORD *)(a1 + 148);
        }
      }
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 144));
  }
}

void sub_1DE470650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _OWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;

  a26 = v26 + 16;
  *a12 = 0u;
  a12[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a26);
  *(_QWORD *)(v28 - 144) = v26 + 16;
  *v27 = 0u;
  v27[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v28 - 144);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::BackpropagateFnc()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 596);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Backpropagation of CNN ConvolutionalMaxPoolingComponent is not supported for quantized weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::AccumGradients()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 640);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not supported for quantized weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::UpdateWeights()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 687);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  const char *v9;
  unsigned int *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  const char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[48];
  _BYTE v43[48];

  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v43, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v42, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  (*(void (**)(uint64_t, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v8 + 112))(v8, a2, v43, 0);
  (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v8 + 128))(v8, a2, v43, a3, v42, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 232))(v8, a2, a3, 0, 0);
  v10 = (unsigned int *)a1[19];
  if (!v10 || (v11 = kaldi::QuantizedMatrixBase<short>::NumRows(v10), (v12 = a1[19]) == 0))
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE3, "filters_", v9);
  v13 = kaldi::QuantizedMatrixBase<short>::NumCols(v12);
  v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v14, 1, v15, v16);
  v20 = v13 * v11;
  v40 = 0;
  v41 = 0;
  if (v20 > *(_DWORD *)(a4 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v19);
  v39 = *(void **)a4;
  LODWORD(v40) = v20;
  v21 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(v8, 0, v17, v18, v19);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v39, v21, v22, v23, v24);
  v28 = a1[20];
  if (!v28)
  {
    v35 = "bias_";
    v36 = 235;
    v37 = "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h";
    v38 = "Bias";
    goto LABEL_11;
  }
  v29 = *(_DWORD *)(v28 + 16);
  v40 = 0;
  v41 = 0;
  if ((v29 + v20) > *(_DWORD *)(a4 + 8))
  {
    v35 = "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMa"
          "trixIndexT>(t.Dim())";
    v36 = 550;
    v37 = "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h";
    v38 = "SubVector";
LABEL_11:
    kaldi::KaldiAssertFailure_((kaldi *)v38, v37, (const char *)v36, v35, v27);
  }
  v39 = (void *)(*(_QWORD *)a4 + 4 * v20);
  LODWORD(v40) = v29;
  v30 = (_DWORD *)kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(v8, 0, v25, v26, v27);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v30, (uint64_t)&v39, v31, v32, v33);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v42);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v43);
}

void sub_1DE470A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 276) = a3;
  *(_DWORD *)(result + 272) = a2;
  *(_BYTE *)(result + 480) = 0;
  return result;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::NormalizeGradients(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  float v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;

  v7 = a6;
  v9 = *(_DWORD *)(a1 + 272);
  if (v9 == 3)
  {
    if (a6 >= 0.0 && a6 <= 1.0)
    {
      v16 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a2, a3, a4, a5);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v16, *(_QWORD *)(a1 + 216) + 48 * a2, v7);
      v20 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a2, v17, v18, v19);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v20, *(_QWORD *)(a1 + 240) + 32 * a2, v7, v21, v22, v23);
    }
  }
  else if (v9 == 2)
  {
    if (a6 > 0.0)
    {
      v24 = a2;
      if (*(_BYTE *)(a1 + 84))
        v7 = (float)*(int *)(*(_QWORD *)(a1 + 288) + 4 * a2) * a6;
      v25 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a2, a3, a4, a5);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v25, (unsigned int *)(*(_QWORD *)(a1 + 216) + 48 * (int)v24), v7, v26, v27, v28);
      v32 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a2, v29, v30, v31);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v32, (_DWORD *)(*(_QWORD *)(a1 + 240) + 32 * v24), v33, v34, v35, v7);
    }
  }
  else if (v9 == 1 && a6 > 0.0)
  {
    if (*(_BYTE *)(a1 + 84))
      v7 = (float)*(int *)(*(_QWORD *)(a1 + 288) + 4 * a2) * a6;
    v10 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a2, a3, a4, a5);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v10, v7);
    v14 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a2, v11, v12, v13);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v14, v7);
  }
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  const char *v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD v32[34];

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  v7 = *(_QWORD *)(a1 + 160);
  if (!v7)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEF, "bias_", v6);
  v8 = *(unsigned int **)(a1 + 152);
  if (!v8
    || (v9 = *(_DWORD *)(v7 + 16),
        v10 = kaldi::QuantizedMatrixBase<short>::NumRows(v8),
        (v11 = *(_QWORD *)(a1 + 152)) == 0))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v6);
  }
  result = kaldi::QuantizedMatrixBase<short>::NumCols(v11);
  *a3 = v9 + result * v10;
  v16 = *(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168);
  if (v16)
  {
    v17 = *(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192);
    if (v17)
    {
      v18 = v16 >> 3;
      if (*(_DWORD *)(a1 + 80) == 1)
        v19 = 0;
      else
        v19 = *(_DWORD *)(a1 + 80);
      if (v18 - 1 != v19 || (v17 >> 3) - 1 != v19)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "CountZeroCorr", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 883);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Unexpected mismatch in indexes: ", 32);
        v30 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"  ", 2);
        v31 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"  ", 2);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
      }
      v20 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, v19, v13, v14, v15);
      v25 = kaldi::CuMatrixBase<float>::CountZeros(v20, v21, v22, v23, v24);
      v29 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, v19, v26, v27, v28);
      result = kaldi::CuVectorBase<float>::CountZeros(v29);
      LODWORD(v17) = result + v25;
    }
  }
  else
  {
    LODWORD(v17) = 0;
  }
  *a2 = v17;
  return result;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t i;
  const char *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  const char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(a1);
  v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1)
    v3 = (v2 + 1);
  else
    v3 = 1;
  if (!*(_BYTE *)(a1 + 480))
  {
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 408), (int)v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 360), (int)v3);
    std::vector<BOOL>::resize(a1 + 456, (int)v3, 0);
    v4 = *(_DWORD *)(a1 + 272);
    v5 = (_QWORD *)(a1 + 168);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 168, (int)v3);
    v6 = (_QWORD *)(a1 + 192);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize(a1 + 192, (int)v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 216), (int)v3);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 240), (int)v3);
    if ((int)v3 >= 1)
    {
      for (i = 0; i != v3; ++i)
      {
        v9 = operator new();
        v10 = *(unsigned int **)(a1 + 152);
        if (!v10 || (v11 = kaldi::QuantizedMatrixBase<short>::NumRows(v10), (v12 = *(_QWORD *)(a1 + 152)) == 0))
          kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v8);
        v13 = kaldi::QuantizedMatrixBase<short>::NumCols(v12);
        kaldi::CuMatrix<float>::CuMatrix(v9, v11, v13, 0, 0, 0);
        v14 = *(_QWORD *)(*v5 + 8 * i);
        *(_QWORD *)(*v5 + 8 * i) = v9;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
        v15 = (_QWORD *)operator new();
        v18 = v15;
        v19 = *(_QWORD *)(a1 + 160);
        if (!v19)
          kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEF, "bias_", v17);
        v20 = *(unsigned int *)(v19 + 16);
        *v15 = &unk_1EA92DFD8;
        v15[1] = 0;
        v15[2] = 0;
        v15[3] = 0;
        kaldi::CuVector<float>::Resize((uint64_t)v15, v20, 0, v16, v17);
        v22 = *(_QWORD *)(*v6 + 8 * i);
        *(_QWORD *)(*v6 + 8 * i) = v18;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
        if ((v4 & 0xFFFFFFFE) == 2)
        {
          v23 = *(unsigned int **)(a1 + 152);
          if (!v23
            || (v24 = *(_QWORD *)(a1 + 216),
                v25 = kaldi::QuantizedMatrixBase<short>::NumRows(v23),
                (v26 = *(_QWORD *)(a1 + 152)) == 0)
            || (v27 = kaldi::QuantizedMatrixBase<short>::NumCols(v26),
                kaldi::CuMatrix<float>::Resize(v24 + 48 * i, v25, v27, 1u, 0),
                (v28 = *(unsigned int **)(a1 + 152)) == 0))
          {
            kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v21);
          }
          v29 = *(_QWORD *)(a1 + 240) + 32 * i;
          v30 = kaldi::QuantizedMatrixBase<short>::NumRows(v28);
          kaldi::CuVector<float>::Resize(v29, v30, 1u, v31, v32);
          if (*(_DWORD *)(a1 + 272) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 216) + 48 * i, v33, v34, v35, v36, 1.0);
            kaldi::CuVectorBase<float>::Set(*(_QWORD *)(a1 + 240) + 32 * i, 1.0);
          }
        }
      }
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 288), (int)v3);
    *(_BYTE *)(a1 + 480) = 1;
  }
}

void sub_1DE4710E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::VectorizeWeightsCorrs()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 908);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>(v2, a1);
  return v2;
}

void sub_1DE4711B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit(uint64_t a1)
{
  return kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit(a1 - 88);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent(v2, a1);
  return v2;
}

void sub_1DE471228(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit(uint64_t a1)
{
  return kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit(a1 - 96);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::GetType()
{
  return 262;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::GetType()
{
  return 263;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::GetType()
{
  return 264;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BackpropagateFnc(uint64_t a1)
{
  _QWORD v1[34];

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 608);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "Backpropagation of CNN ConvolutionalMaxPoolingComponent is not supported on CPU");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  int v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  __int128 v44;
  __int128 v45;
  void *v46;
  __int128 v47;
  __int128 v48;
  void *v49;
  __int128 v50;
  __int128 v51;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  *(_DWORD *)(*(_QWORD *)(a1 + 288) + 4 * a5) = *(_DWORD *)(a2 + 20);
  if (((*(_QWORD *)(*(_QWORD *)(a1 + 456) + (((unint64_t)a5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a5) & 1) == 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v49, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 653);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v49, "ConvolutionalMaxPoolingComponent::AccumGradients can't be called before ConvolutionalMaxPoolingComponent::Backpropagate");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v49);
  }
  *(_QWORD *)(kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a5, v9, v10, v11)+ 32) = a4;
  *(_QWORD *)(kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a5, v12, v13, v14)+ 24) = a4;
  v18 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a5, v15, v16, v17);
  kaldi::CuMatrixBase<float>::SetZero(v18);
  v22 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a5, v19, v20, v21);
  kaldi::CuVectorBase<float>::SetZero(v22);
  if (*(int *)(a1 + 144) >= 1)
  {
    v26 = 0;
    do
    {
      v27 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a5, v23, v24, v25);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v49, v27, 0, *(_DWORD *)(v27 + 20), (const char *)(*(_DWORD *)(a1 + 108) * v26), *(_DWORD *)(a1 + 108));
      v28 = *(_QWORD *)(a1 + 408) + 48 * a5;
      v29 = *(_DWORD *)(a2 + 20) * *(_DWORD *)(a1 + 120);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, v28, v29 * v26, v29, 0, *(_DWORD *)(v28 + 16));
      v30 = *(_DWORD *)(a2 + 20) * *(_DWORD *)(a1 + 120);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, *(_QWORD *)(a1 + 336) + 48 * a5, v30 * v26, v30, 0, *(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 124));
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v49, (uint64_t)&v43, CblasTrans, (uint64_t)&v46, (const char *)0x6F, 1.0, 0.0);
      v34 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a5, v31, v32, v33);
      v38 = *(_DWORD *)(a1 + 108);
      v41 = 0;
      v42 = 0;
      v40 = 0;
      v39 = &unk_1EA926538;
      if ((v38 * v26 + v38) > *(_DWORD *)(v34 + 16))
        kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v37);
      v40 = *(_QWORD *)(v34 + 8) + 4 * v38 * v26;
      LODWORD(v41) = v38;
      v42 = *(_QWORD *)(v34 + 24);
      kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)&v39, (uint64_t)&v46, 1.0, 1.0, v35, v36, v37);
      v43 = &unk_1EA926508;
      v44 = 0u;
      v45 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v43);
      v46 = &unk_1EA926508;
      v47 = 0u;
      v48 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
      v49 = &unk_1EA926508;
      v50 = 0u;
      v51 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v49);
      ++v26;
    }
    while (v26 < *(_DWORD *)(a1 + 144));
  }
}

void sub_1DE471588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _OWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  a26 = &unk_1EA926508;
  *a11 = 0u;
  a11[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a26);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::UpdateWeights(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  int *v60;
  int v61;
  uint64_t v62;
  int *v63;
  int v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  _BYTE *v99;
  const char *v100;
  uint64_t v101;
  char *v102;
  _QWORD v103[4];
  _QWORD v104[2];
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[34];

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  v9 = *(_QWORD *)(a1 + 152);
  if (!v9)
    goto LABEL_46;
  v11 = *(float *)(a1 + 64);
  v10 = *(float *)(a1 + 68);
  v12 = *(float *)(a1 + 72);
  v13 = *(_DWORD *)(a1 + 76);
  *(_QWORD *)(v9 + 32) = a2;
  v14 = *(_QWORD *)(a1 + 160);
  if (!v14)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEF, "bias_", v8);
  *(_QWORD *)(v14 + 24) = a2;
  v15 = *(_DWORD *)(a1 + 80);
  if (a3 >= 0)
    v16 = a3;
  else
    v16 = *(_DWORD *)(a1 + 80);
  if (v15 == 1)
    v17 = 0;
  else
    v17 = v16;
  if ((int)v17 > v15)
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x2C8, "batch_idx <= opts_.num_subbatches", v8);
  *(_QWORD *)(kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, v17, v6, v7, v8)+ 32) = a2;
  *(_QWORD *)(kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, v17, v18, v19, v20)+ 24) = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 216) + 48 * (int)v17 + 32) = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 240) + 32 * (int)v17 + 24) = a2;
  if ((_DWORD)v17 == *(_DWORD *)(a1 + 80))
  {
    v23 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, v17, v21, v22, v8);
    v27 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, 0, v24, v25, v26);
    kaldi::CuMatrixBase<float>::AddMat(v23, v27, 111, v28, v29, 1.0, 0.0);
    v33 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, v17, v30, v31, v32);
    v37 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, 0, v34, v35, v36);
    kaldi::CuVectorBase<float>::AddVec(v33, v37, v38, v39, v40, 1.0, 0.0);
    if (*(int *)(a1 + 80) > 1)
    {
      v41 = 1;
      do
      {
        v42 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, v17, v21, v22, v8);
        v46 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, v41, v43, v44, v45);
        kaldi::CuMatrixBase<float>::AddMat(v42, v46, 111, v47, v48, 1.0, 1.0);
        v52 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, v17, v49, v50, v51);
        v56 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, v41, v53, v54, v55);
        kaldi::CuVectorBase<float>::AddVec(v52, v56, v57, v58, v59, 1.0, 1.0);
        ++v41;
      }
      while (v41 < *(_DWORD *)(a1 + 80));
    }
    v60 = *(int **)(a1 + 288);
    v60[(int)v17] = 0;
    if ((int)v17 >= 1)
    {
      v61 = 0;
      v62 = v17;
      v63 = v60;
      do
      {
        v64 = *v63++;
        v61 += v64;
        v60[(int)v17] = v61;
        --v62;
      }
      while (v62);
    }
  }
  v65 = *(float *)(a1 + 56);
  if (*(_BYTE *)(a1 + 84))
    v65 = v65 / (float)*(int *)(*(_QWORD *)(a1 + 288) + 4 * (int)v17);
  v66 = *(_QWORD *)(a1 + 312);
  if ((int)v17 >= (unint64_t)((*(_QWORD *)(a1 + 320) - v66) >> 2))
  {
    LODWORD(v107[0]) = 2143289344;
    std::vector<float>::resize(a1 + 312, (int)v17 + 1, v107);
    v66 = *(_QWORD *)(a1 + 312);
  }
  *(float *)(v66 + 4 * (int)v17) = v65;
  if (*(float *)(a1 + 276) >= 0.0)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 248))(a1, v17);
  if (v11 != 0.0)
  {
    v67 = *(_QWORD *)(a1 + 152);
    if (!v67)
      goto LABEL_46;
    kaldi::CuMatrixBase<float>::AddMat(v67, *(_QWORD *)(a1 + 152), 111, v22, v8, (float)-(float)(v65 * v11) * (float)*(int *)(*(_QWORD *)(a1 + 288) + 4 * (int)v17), 1.0);
  }
  if (v10 != 0.0)
  {
    v68 = *(_QWORD *)(a1 + 152);
    if (!v68)
      goto LABEL_46;
    v69 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, v17, v21, v22, v8);
    kaldi::cu::RegularizeL1<float>(v68, v69, (float)(v10 * v65) * (float)*(int *)(*(_QWORD *)(a1 + 288) + 4 * (int)v17), v65, v70, v71, v72);
  }
  if (v12 > 0.0)
  {
    if (*(int *)(a1 + 80) >= 2)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v107, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 751);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v107, "the multi batch gradient quantization does not work yet");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v107);
    }
    if (*(_QWORD *)(a1 + 496) == *(_QWORD *)(a1 + 488))
      kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator((_QWORD *)a1, (uint64_t *)(a1 + 488));
    kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 488), v13, v12, v21, v22, v8);
  }
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ApplyCorr(a1, v17, v65);
  if (*(float *)(a1 + 280) > 0.0)
  {
    v73 = *(_QWORD *)(a1 + 152);
    if (v73)
    {
      kaldi::CuMatrix<float>::CuMatrix(v107, v73, 111);
      v77 = *(_QWORD *)(a1 + 152);
      if (!v77)
        kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v76);
      kaldi::CuMatrixBase<float>::MulElements((uint64_t)v107, v77, v74, v75, v76);
      v80 = *(_QWORD *)(a1 + 152);
      if (!v80)
        kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v79);
      v81 = *(unsigned int *)(v80 + 20);
      v104[0] = &unk_1EA92DFD8;
      v104[1] = 0;
      v105 = 0;
      v106 = 0;
      kaldi::CuVector<float>::Resize((uint64_t)v104, v81, 0, v78, v79);
      v106 = a2;
      kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v104, (uint64_t)v107, 1.0, 0.0, v82, v83, v84);
      kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v104, 0.5);
      v103[0] = &unk_1EA92DFD8;
      v103[1] = 0;
      v103[2] = 0;
      v103[3] = v106;
      kaldi::CuVector<float>::Resize((uint64_t)v103, v105, 1u, v85, v86);
      kaldi::CuVectorBase<float>::CopyFromVec(v103, (uint64_t)v104, v87, v88, v89);
      kaldi::CuVectorBase<float>::Scale((uint64_t)v103, 1.0 / *(float *)(a1 + 280));
      kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v103, 1.0);
      kaldi::CuVectorBase<float>::InvertElements((uint64_t)v103);
      v93 = *(_QWORD *)(a1 + 152);
      if (v93)
      {
        kaldi::CuMatrixBase<float>::MulRowsVec(v93, (uint64_t)v103, v90, v91, v92);
        v97 = *(_QWORD *)(a1 + 160);
        if (v97)
        {
          kaldi::CuVectorBase<float>::ApplyMaxNorm(v97, *(float *)(a1 + 280), v94, v95, v96, v92);
          v103[0] = &unk_1EA92DFD8;
          kaldi::CuVector<float>::Destroy((uint64_t)v103);
          v104[0] = &unk_1EA92DFD8;
          kaldi::CuVector<float>::Destroy((uint64_t)v104);
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v107);
          goto LABEL_41;
        }
        v100 = "bias_";
        v101 = 239;
        v102 = "Bias";
      }
      else
      {
        v100 = "filters_";
        v101 = 231;
        v102 = "Filters";
      }
      kaldi::KaldiAssertFailure_((kaldi *)v102, "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)v101, v100, v92);
    }
LABEL_46:
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", v8);
  }
LABEL_41:
  v98 = *(_BYTE **)(a1 + 288);
  if ((_DWORD)v17 == *(_DWORD *)(a1 + 80))
  {
    v99 = *(_BYTE **)(a1 + 296);
    if (v98 != v99)
      bzero(v98, ((v99 - v98 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  else
  {
    *(_DWORD *)&v98[4 * (int)v17] = 0;
  }
}

void sub_1DE471BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void sub_1DE471BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, const char *a5)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  uint64_t v20;
  void *v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v41, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 918);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v41, "Weights are already vectorized");
LABEL_36:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v41);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v41, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 921);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Performing vectorization of convolutional maxpooling component", 62);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v41);
  }
  v10 = (uint64_t *)(a1 + 152);
  v9 = *(_QWORD *)(a1 + 152);
  if (!v9)
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xE7, "filters_", a5);
  v11 = *(_QWORD *)(a1 + 160);
  if (!v11)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)0xEF, "bias_", a5);
  v12 = *(_DWORD *)(v9 + 16) * *(_DWORD *)(v9 + 20);
  v13 = *(_DWORD *)(v11 + 16) + v12;
  if (v13 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v41, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 924);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v41, "(nlinparams + Bias().Dim()) == NumParams()");
    goto LABEL_36;
  }
  kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 152), a2, (uint64_t *)&v41);
  v15 = (uint64_t)v41;
  v41 = 0;
  v16 = *v10;
  *v10 = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
    v17 = v41;
    v41 = 0;
    if (v17)
      (*(void (**)(void *))(*(_QWORD *)v17 + 24))(v17);
  }
  v43 = 0;
  v44 = 0;
  v41 = &unk_1EA926538;
  v42 = 0;
  if (v12 > *(_DWORD *)(a3 + 16))
    goto LABEL_39;
  v42 = *(_QWORD *)(a3 + 8);
  LODWORD(v43) = v12;
  v44 = *(_QWORD *)(a3 + 24);
  kaldi::CuVectorBase<float>::Set((uint64_t)&v41, *(float *)(a1 + 264));
  v18 = *(_DWORD *)(a3 + 16) - v12;
  *(_QWORD *)(a3 + 8) += 4 * v12;
  *(_DWORD *)(a3 + 16) = v18;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 160), a2, (uint64_t *)&v41);
  v19 = v41;
  v41 = 0;
  v20 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v19;
  if (v20)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    v21 = v41;
    v41 = 0;
    if (v21)
      (*(void (**)(void *))(*(_QWORD *)v21 + 16))(v21);
  }
  v22 = *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16);
  v43 = 0;
  v41 = &unk_1EA926538;
  if (v22 > *(_DWORD *)(a3 + 16))
LABEL_39:
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v14);
  v42 = *(_QWORD *)(a3 + 8);
  LODWORD(v43) = v22;
  v44 = *(_QWORD *)(a3 + 24);
  kaldi::CuVectorBase<float>::Set((uint64_t)&v41, *(float *)(a1 + 268));
  v23 = *(int *)(*(_QWORD *)(a1 + 160) + 16);
  v24 = *(_DWORD *)(a3 + 16) - v23;
  *(_QWORD *)(a3 + 8) += 4 * v23;
  *(_DWORD *)(a3 + 16) = v24;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  v25 = a4[1];
  v26 = (v25 - *a4) >> 5;
  if (v26 != (uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 3
    || v26 != (uint64_t)(*(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192)) >> 3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v41, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 946);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v41, "veccorrs->size() == filters_grad_.size() && veccorrs->size() == bias_grad_.size()");
    goto LABEL_36;
  }
  if (v25 == *a4)
    goto LABEL_32;
  v27 = 0;
  do
  {
    v28 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v27) + 16)
        + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v27) + 16)
        * *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v27) + 20);
    if (v28 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v41, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 948);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v41, "(filters_grad_[ic]->NumRows() * filters_grad_[ic]->NumCols() + bias_grad_[ic]->Dim()) == NumParams()");
      goto LABEL_36;
    }
    ++v27;
    v29 = *a4;
    v30 = a4[1];
  }
  while (v27 < (v30 - *a4) >> 5);
  if (v30 != v29)
  {
    v31 = 0;
    do
    {
      v32 = v29 + 32 * v31;
      kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 168) + 8 * v31), v32, (uint64_t *)&v41);
      v33 = *(_QWORD *)(a1 + 168);
      v34 = v41;
      v41 = 0;
      v35 = *(_QWORD *)(v33 + 8 * v31);
      *(_QWORD *)(v33 + 8 * v31) = v34;
      if (v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
      v36 = v41;
      v41 = 0;
      if (v36)
        (*(void (**)(void *))(*(_QWORD *)v36 + 24))(v36);
      kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 192) + 8 * v31), v32, (uint64_t *)&v41);
      v37 = *(_QWORD *)(a1 + 192);
      v38 = v41;
      v41 = 0;
      v39 = *(_QWORD *)(v37 + 8 * v31);
      *(_QWORD *)(v37 + 8 * v31) = v38;
      if (v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
      v40 = v41;
      v41 = 0;
      if (v40)
        (*(void (**)(void *))(*(_QWORD *)v40 + 16))(v40);
      ++v31;
      v29 = *a4;
    }
    while (v31 < (a4[1] - *a4) >> 5);
  }
LABEL_32:
  *(_BYTE *)(a1 + 16) = 1;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v41, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 964);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Done  vectorization of convolutional maxpooling component", 57);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v41);
  }
}

void sub_1DE4720EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void kaldi::nnet1::CnnRearrangeComponent::InitData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t *v7;
  uint64_t v8;
  const char *v9;
  void **v10;
  void *v11;
  int v12;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char *v19;
  int v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  char *v33;
  std::vector<int>::pointer begin;
  uint64_t v35;
  const char *v36;
  _QWORD *v37;
  void **v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD v42[34];
  void **v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  std::vector<int> v47;
  char *v48;
  char *v49;
  char *v50;

  v48 = 0;
  v49 = 0;
  v50 = 0;
  memset(&v47, 0, sizeof(v47));
  v46 = -1;
  v43 = 0;
  v44 = 0;
  v7 = a2 + 4;
  v45 = 0;
  while ((*((_BYTE *)v7 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v43, a4, a5);
    if (SHIBYTE(v45) < 0)
    {
      if (v44 != 10)
        goto LABEL_49;
      v10 = v43;
    }
    else
    {
      if (SHIBYTE(v45) != 10)
        goto LABEL_49;
      v10 = (void **)&v43;
    }
    v11 = *v10;
    v12 = *((unsigned __int16 *)v10 + 4);
    if (v11 != (void *)0x646E61426D754E3CLL || v12 != 15987)
    {
LABEL_49:
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v42, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1071);
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Unknown token ", 14);
      if (v45 >= 0)
        v38 = (void **)&v43;
      else
        v38 = v43;
      if (v45 >= 0)
        v39 = HIBYTE(v45);
      else
        v39 = v44;
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v38, v39);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)", a typo in config?", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" (NumBands)", 11);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v42);
    }
    kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v46, v8, v9);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v14 = v46;
  if (v46 <= 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v42, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1076);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"NumBands should be > 0", 22);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v42);
  }
  v15 = *(_DWORD *)(a1 + 8);
  v16 = v15 / v46;
  if (v15 % v46)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v42, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1078);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Invalid NumBands value", 22);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v42);
  }
  v17 = 0;
  do
  {
    if (v16 >= 1)
    {
      v18 = 0;
      v19 = v49;
      do
      {
        v20 = v17 + v46 * v18;
        if (v19 >= v50)
        {
          v22 = v48;
          v23 = (v19 - v48) >> 2;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v25 = v50 - v48;
          if ((v50 - v48) >> 1 > v24)
            v24 = v25 >> 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          if (v26)
          {
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v50, v26);
            v22 = v48;
            v19 = v49;
          }
          else
          {
            v27 = 0;
          }
          v28 = &v27[4 * v23];
          *(_DWORD *)v28 = v20;
          v21 = v28 + 4;
          while (v19 != v22)
          {
            v29 = *((_DWORD *)v19 - 1);
            v19 -= 4;
            *((_DWORD *)v28 - 1) = v29;
            v28 -= 4;
          }
          v48 = v28;
          v49 = v21;
          v50 = &v27[4 * v26];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *(_DWORD *)v19 = v20;
          v21 = v19 + 4;
        }
        v49 = v21;
        ++v18;
        v19 = v21;
      }
      while (v18 != v16);
      v14 = v46;
    }
    ++v17;
  }
  while (v17 < v14);
  std::vector<int>::resize(&v47, *(int *)(a1 + 8));
  if (*(int *)(a1 + 8) >= 1)
  {
    v32 = 0;
    v33 = v48;
    begin = v47.__begin_;
    do
    {
      begin[*(int *)&v33[4 * v32]] = v32;
      ++v32;
    }
    while (v32 < *(int *)(a1 + 8));
  }
  kaldi::CuArray<int>::Resize(a1 + 48, (unint64_t)(v49 - v48) >> 2, 1u, v30, v31);
  memcpy(*(void **)(a1 + 56), v48, v49 - v48);
  kaldi::CuArray<int>::Resize(a1 + 72, (unint64_t)((char *)v47.__end_ - (char *)v47.__begin_) >> 2, 1u, v35, v36);
  memcpy(*(void **)(a1 + 80), v47.__begin_, (char *)v47.__end_ - (char *)v47.__begin_);
  if (SHIBYTE(v45) < 0)
    operator delete(v43);
  if (v47.__begin_)
  {
    v47.__end_ = v47.__begin_;
    operator delete(v47.__begin_);
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
}

void sub_1DE472508(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(_QWORD *)(v1 - 120) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 104);
  if (v4)
  {
    *(_QWORD *)(v1 - 96) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::CnnRearrangeComponent::ReadData(uint64_t a1, _QWORD *a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  int v13;
  const char *v14;
  uint64_t v15;
  std::vector<int> __p;
  std::vector<int> v17;
  char v18;

  v18 = 0;
  kaldi::ReadBasicType<char>(a2, a3, &v18, a4, a5);
  memset(&v17, 0, sizeof(v17));
  kaldi::ReadIntegerVector<int>(a2, a3, &v17, 0, 0, 0, 0);
  kaldi::CuArray<int>::Resize(a1 + 48, (unint64_t)((char *)v17.__end_ - (char *)v17.__begin_) >> 2, 1u, v8, v9);
  memcpy(*(void **)(a1 + 56), v17.__begin_, (char *)v17.__end_ - (char *)v17.__begin_);
  memset(&__p, 0, sizeof(__p));
  kaldi::ReadIntegerVector<int>(a2, a3, &__p, 0, 0, 0, 0);
  kaldi::CuArray<int>::Resize(a1 + 72, (unint64_t)((char *)__p.__end_ - (char *)__p.__begin_) >> 2, 1u, v10, v11);
  memcpy(*(void **)(a1 + 80), __p.__begin_, (char *)__p.__end_ - (char *)__p.__begin_);
  v13 = *(_DWORD *)(a1 + 48);
  if (v13 != *(_DWORD *)(a1 + 12))
  {
    v14 = "copy_from_indices_.Dim() == OutputDim()";
    v15 = 1107;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 72) != v13)
  {
    v14 = "back_copy_from_indices_.Dim() == OutputDim()";
    v15 = 1108;
LABEL_10:
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)v15, v14, v12);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v17.__begin_)
  {
    v17.__end_ = v17.__begin_;
    operator delete(v17.__begin_);
  }
}

void sub_1DE4726A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::CnnRearrangeComponent::WriteData(uint64_t a1, _QWORD *a2, int a3)
{
  std::vector<int> __p;
  std::vector<int> v7;

  kaldi::WriteBasicType<char>(a2, a3);
  std::vector<int>::vector(&v7, *(int *)(a1 + 48));
  kaldi::CuArray<int>::CopyToVec((const void **)(a1 + 48), &v7);
  kaldi::WriteIntegerByteArray<int>(a2, a3, 0, v7.__end_ - v7.__begin_, (uint64_t)v7.__begin_);
  std::vector<int>::vector(&__p, *(int *)(a1 + 72));
  kaldi::CuArray<int>::CopyToVec((const void **)(a1 + 72), &__p);
  kaldi::WriteIntegerByteArray<int>(a2, a3, 0, __p.__end_ - __p.__begin_, (uint64_t)__p.__begin_);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v7.__begin_)
  {
    v7.__end_ = v7.__begin_;
    operator delete(v7.__begin_);
  }
}

void sub_1DE4727A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::nnet1::CnnRearrangeComponent::Info@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "\n CnnRearrange ");
}

uint64_t kaldi::nnet1::CnnRearrangeComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::cu::Copy<float>(a2, (unsigned int *)(a1 + 48), a3, a4, a5);
}

uint64_t kaldi::nnet1::CnnRearrangeComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::cu::Copy<float>(a4, (unsigned int *)(a1 + 72), (uint64_t)a5, a4, a5);
}

void kaldi::nnet1::PaddingComponent::InitData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  float *v9;
  uint64_t *v10;
  uint64_t v11;
  const char *v12;
  __int128 *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  int v25;
  _QWORD *v26;
  __int128 *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD v32[34];
  __int128 v33;
  uint64_t v34;

  *(_QWORD *)(a1 + 56) = 0;
  v6 = a1 + 56;
  v7 = a1 + 52;
  v8 = (_DWORD *)(a1 + 60);
  *(_QWORD *)(a1 + 48) = 0;
  v9 = (float *)(a1 + 48);
  v33 = 0uLL;
  v34 = 0;
  v10 = a2 + 4;
  while ((*((_BYTE *)v10 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v33, a4, a5);
    if (SHIBYTE(v34) < 0)
    {
      v16 = *((_QWORD *)&v33 + 1);
      if (*((_QWORD *)&v33 + 1) == 12)
      {
        v17 = *(_QWORD *)v33 == 0x646461506572503CLL && *(_DWORD *)(v33 + 8) == 1046965865;
        v15 = v7;
        if (v17)
        {
LABEL_47:
          kaldi::ReadBasicType<int>(a2, 0, v15, v11, v12);
          goto LABEL_48;
        }
      }
      if (*((_QWORD *)&v33 + 1) == 13)
      {
        v18 = *(_QWORD *)v33 == 0x64615074736F503CLL && *(_QWORD *)(v33 + 5) == 0x3E676E6964646150;
        v15 = v6;
        if (v18)
          goto LABEL_47;
        v16 = *((_QWORD *)&v33 + 1);
      }
      if (v16 == 11)
      {
        v19 = *(_QWORD *)v33 == 0x626D6174736F503CLL && *(_QWORD *)(v33 + 3) == 0x3E656C626D617473;
        v15 = (uint64_t)v8;
        if (v19)
          goto LABEL_47;
        v16 = *((_QWORD *)&v33 + 1);
      }
      if (v16 != 10)
        goto LABEL_55;
      v13 = (__int128 *)v33;
    }
    else
    {
      v13 = &v33;
      switch(HIBYTE(v34))
      {
        case 0xA:
          break;
        case 0xB:
          goto LABEL_35;
        case 0xC:
          v14 = (_QWORD)v33 == 0x646461506572503CLL && DWORD2(v33) == 1046965865;
          v15 = v7;
          if (!v14)
            goto LABEL_55;
          goto LABEL_47;
        case 0xD:
          v20 = (_QWORD)v33 == 0x64615074736F503CLL && *(_QWORD *)((char *)&v33 + 5) == 0x3E676E6964646150;
          v15 = v6;
          if (v20)
            goto LABEL_47;
          if (HIBYTE(v34) == 10)
            goto LABEL_40;
          if (HIBYTE(v34) != 11)
            goto LABEL_55;
LABEL_35:
          v21 = (_QWORD)v33 == 0x626D6174736F503CLL && *(_QWORD *)((char *)&v33 + 3) == 0x3E656C626D617473;
          v15 = (uint64_t)v8;
          if (v21)
            goto LABEL_47;
          if (HIBYTE(v34) != 10)
            goto LABEL_55;
LABEL_40:
          v13 = &v33;
          break;
        default:
          goto LABEL_55;
      }
    }
    v22 = *(_QWORD *)v13;
    v23 = *((unsigned __int16 *)v13 + 4);
    if (v22 != 0x756C61566461503CLL || v23 != 15973)
    {
LABEL_55:
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1158);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Unknown token ", 14);
      if (v34 >= 0)
        v27 = &v33;
      else
        v27 = (__int128 *)v33;
      if (v34 >= 0)
        v28 = HIBYTE(v34);
      else
        v28 = *((_QWORD *)&v33 + 1);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", a typo in config?", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" (NumBands)", 11);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
    }
    kaldi::ReadBasicType<float>(a2, 0, v9, v11, v12);
LABEL_48:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v25 = *(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 52) + v25 + *(_DWORD *)(a1 + 56) != *(_DWORD *)(a1 + 12))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1164);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Invalid pre and post padding sizes", 34);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
  }
  if (v25 < *v8 || (*v8 & 0x80000000) != 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1166);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Invalid postamble size", 22);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
  }
  if (SHIBYTE(v34) < 0)
    operator delete((void *)v33);
}

void sub_1DE472C14(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::PaddingComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  _DWORD *v7;
  float *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  __int128 *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  BOOL v24;
  uint64_t result;
  const char *v26;
  int v27;
  _QWORD *v28;
  __int128 *v29;
  uint64_t v30;
  _QWORD v31[34];
  __int128 v32;
  uint64_t v33;

  *(_QWORD *)(a1 + 56) = 0;
  v6 = a1 + 56;
  v7 = (_DWORD *)(a1 + 60);
  *(_QWORD *)(a1 + 48) = 0;
  v8 = (float *)(a1 + 48);
  while (kaldi::Peek(a2, a3) == 60)
  {
    v32 = 0uLL;
    v33 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v32, v9, v10);
    if ((SHIBYTE(v33) & 0x80000000) == 0)
    {
      v13 = &v32;
      switch(HIBYTE(v33))
      {
        case 0xA:
          goto LABEL_34;
        case 0xB:
          v14 = (_QWORD)v32 == 0x626D6174736F503CLL && *(_QWORD *)((char *)&v32 + 3) == 0x3E656C626D617473;
          v15 = (uint64_t)v7;
          if (!v14)
            goto LABEL_52;
          goto LABEL_45;
        case 0xC:
          v20 = (_QWORD)v32 == 0x646461506572503CLL && DWORD2(v32) == 1046965865;
          v15 = v6 - 4;
          if (!v20)
            goto LABEL_32;
          goto LABEL_45;
        case 0xD:
          v24 = (_QWORD)v32 == 0x64615074736F503CLL && *(_QWORD *)((char *)&v32 + 5) == 0x3E676E6964646150;
          v15 = v6;
          if (v24)
            goto LABEL_45;
LABEL_32:
          if (HIBYTE(v33) != 10)
            goto LABEL_52;
          v13 = &v32;
          break;
        default:
          goto LABEL_52;
      }
      goto LABEL_34;
    }
    v16 = *((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1) != 11
      || (*(_QWORD *)v32 == 0x626D6174736F503CLL ? (v17 = *(_QWORD *)(v32 + 3) == 0x3E656C626D617473) : (v17 = 0),
          v15 = (uint64_t)v7,
          !v17))
    {
      if (*((_QWORD *)&v32 + 1) == 12)
      {
        v18 = *(_QWORD *)v32 == 0x646461506572503CLL && *(_DWORD *)(v32 + 8) == 1046965865;
        v15 = v6 - 4;
        if (v18)
          goto LABEL_45;
        v16 = *((_QWORD *)&v32 + 1);
      }
      if (v16 != 13)
        goto LABEL_26;
      v19 = *(_QWORD *)v32 == 0x64615074736F503CLL && *(_QWORD *)(v32 + 5) == 0x3E676E6964646150;
      v15 = v6;
      if (!v19)
      {
        v16 = *((_QWORD *)&v32 + 1);
LABEL_26:
        if (v16 != 10)
          goto LABEL_52;
        v13 = (__int128 *)v32;
LABEL_34:
        v21 = *(_QWORD *)v13;
        v22 = *((unsigned __int16 *)v13 + 4);
        if (v21 != 0x756C61566461503CLL || v22 != 15973)
        {
LABEL_52:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1187);
          v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"unrecognized config token ", 26);
          if (v33 >= 0)
            v29 = &v32;
          else
            v29 = (__int128 *)v32;
          if (v33 >= 0)
            v30 = HIBYTE(v33);
          else
            v30 = *((_QWORD *)&v32 + 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
        }
        kaldi::ReadBasicType<float>(a2, a3, v8, v11, v12);
        goto LABEL_46;
      }
    }
LABEL_45:
    kaldi::ReadBasicType<int>(a2, a3, v15, v11, v12);
LABEL_46:
    if (SHIBYTE(v33) < 0)
      operator delete((void *)v32);
  }
  LOBYTE(v31[0]) = 0;
  result = kaldi::ReadBasicType<char>(a2, a3, v31, v9, v10);
  v27 = *(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 52) + v27 + *(_DWORD *)(a1 + 56) != *(_DWORD *)(a1 + 12))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x4AA, "InputDim() + pre_pad_size_ + post_pad_size_ == OutputDim()", v26);
  if (v27 < *v7)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)0x4AB, "InputDim() >= postamble_", v26);
  return result;
}

void sub_1DE472FDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::PaddingComponent::WriteData(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;

  if (*(float *)(a1 + 48) != 0.0)
  {
    kaldi::WriteToken(a2, a3, (kaldi *)"<PadValue>", a4, a5);
    kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<Postamble>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PrePadding>", v7, v8);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PostPadding>", v9, v10);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  return kaldi::WriteBasicType<char>(a2, (int)a3);
}

_QWORD *kaldi::nnet1::PaddingComponent::Info@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "\n PaddingComponent ");
}

uint64_t kaldi::nnet1::PaddingComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  const char *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  __int128 v18;
  __int128 v19;

  kaldi::CuMatrixBase<float>::Set(a3, a2, a3, a4, a5, *(float *)(a1 + 48));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, a3, 0, *(_DWORD *)(a3 + 20), (const char *)*(unsigned int *)(a1 + 52), *(_DWORD *)(a2 + 16) - *(_DWORD *)(a1 + 60));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v14, a2, 0, *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 16) - *(_DWORD *)(a1 + 60));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v17, (uint64_t)&v14, 111, v8, v9);
  v14 = &unk_1EA926508;
  v15 = 0u;
  v16 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v14);
  v17 = &unk_1EA926508;
  v18 = 0u;
  v19 = 0u;
  result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v17);
  v11 = *(_DWORD *)(a1 + 60);
  if (v11 >= 1)
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(*(_DWORD *)(a3 + 16) - v11), v11);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v14, a2, 0, *(_DWORD *)(a2 + 20), (const char *)(*(_DWORD *)(a2 + 16) - *(_DWORD *)(a1 + 60)), *(_DWORD *)(a1 + 60));
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v17, (uint64_t)&v14, 111, v12, v13);
    v14 = &unk_1EA926508;
    v15 = 0u;
    v16 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v14);
    v17 = &unk_1EA926508;
    v18 = 0u;
    v19 = 0u;
    return kaldi::CuMatrixBase<float>::~CuMatrixBase(&v17);
  }
  return result;
}

void sub_1DE473234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 a10, __int128 a11, uint64_t a12, __int128 a13, __int128 a14)
{
  uint64_t v14;

  a9 = v14 + 16;
  a10 = 0u;
  a11 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a9);
  a12 = v14 + 16;
  a13 = 0u;
  a14 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::PaddingComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  const char *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  __int128 v18;
  __int128 v19;

  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, a5, 0, *(_DWORD *)(a5 + 20), 0, *(_DWORD *)(a5 + 16) - *(_DWORD *)(a1 + 60));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v14, a4, 0, *(_DWORD *)(a4 + 20), (const char *)*(unsigned int *)(a1 + 52), *(_DWORD *)(a5 + 16) - *(_DWORD *)(a1 + 60));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v17, (uint64_t)&v14, 111, v8, v9);
  v14 = &unk_1EA926508;
  v15 = 0u;
  v16 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v14);
  v17 = &unk_1EA926508;
  v18 = 0u;
  v19 = 0u;
  result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v17);
  v11 = *(_DWORD *)(a1 + 60);
  if (v11 >= 1)
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, a5, 0, *(_DWORD *)(a5 + 20), (const char *)(*(_DWORD *)(a5 + 16) - v11), v11);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v14, a4, 0, *(_DWORD *)(a4 + 20), (const char *)(*(_DWORD *)(a4 + 16) - *(_DWORD *)(a1 + 60)), *(_DWORD *)(a1 + 60));
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v17, (uint64_t)&v14, 111, v12, v13);
    v14 = &unk_1EA926508;
    v15 = 0u;
    v16 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v14);
    v17 = &unk_1EA926508;
    v18 = 0u;
    v19 = 0u;
    return kaldi::CuMatrixBase<float>::~CuMatrixBase(&v17);
  }
  return result;
}

void sub_1DE473404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 a10, __int128 a11, uint64_t a12, __int128 a13, __int128 a14)
{
  uint64_t v14;

  a9 = v14 + 16;
  a10 = 0u;
  a11 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a9);
  a12 = v14 + 16;
  a13 = 0u;
  a14 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a12);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::Padding2DComponent::Init(_QWORD *this)
{
  this[6] = 0;
  this[7] = 0;
  this[8] = 0;
  return this;
}

void kaldi::nnet1::Padding2DComponent::Read(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  __int128 *p_p;
  uint64_t v17;
  uint64_t v20;
  int v21;
  __int128 __p;
  uint64_t v25;

  __p = 0uLL;
  v25 = 0;
  kaldi::ReadToken(a2, a3, (uint64_t)&__p, a4, a5);
  if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
    switch(HIBYTE(v25))
    {
      case 8:
        if ((_QWORD)__p != 0x3E706F546461503CLL)
          goto LABEL_63;
        goto LABEL_59;
      case 9:
        if ((_QWORD)__p != 0x7466654C6461503CLL || BYTE8(__p) != 62)
          goto LABEL_63;
        goto LABEL_37;
      case 0xA:
        if ((_QWORD)__p == 0x654C5870616D463CLL && WORD4(__p) == 15982)
          goto LABEL_60;
        if ((_QWORD)__p == 0x654C5970616D463CLL && WORD4(__p) == 15982)
          goto LABEL_61;
        p_p = &__p;
        break;
      case 0xB:
        if ((_QWORD)__p != 0x74746F426461503CLL || *(_QWORD *)((char *)&__p + 3) != 0x3E6D6F74746F4264)
          goto LABEL_63;
        goto LABEL_58;
      default:
        return;
    }
LABEL_47:
    v20 = *(_QWORD *)p_p;
    v21 = *((unsigned __int16 *)p_p + 4);
    if (v20 != 0x686769526461503CLL || v21 != 15988)
      goto LABEL_63;
    v17 = a1 + 68;
    goto LABEL_62;
  }
  v10 = *((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1) == 8)
  {
    if (*(_QWORD *)__p == 0x3E706F546461503CLL)
    {
LABEL_59:
      v17 = a1 + 56;
      goto LABEL_62;
    }
    v10 = *((_QWORD *)&__p + 1);
  }
  else if (*((_QWORD *)&__p + 1) == 10)
  {
    if (*(_QWORD *)__p == 0x654C5870616D463CLL && *(_WORD *)(__p + 8) == 15982)
    {
LABEL_60:
      v17 = a1 + 48;
      goto LABEL_62;
    }
    if (*(_QWORD *)__p == 0x654C5970616D463CLL && *(_WORD *)(__p + 8) == 15982)
    {
LABEL_61:
      v17 = a1 + 52;
      goto LABEL_62;
    }
  }
  if (v10 == 11)
  {
    if (*(_QWORD *)__p == 0x74746F426461503CLL && *(_QWORD *)(__p + 3) == 0x3E6D6F74746F4264)
    {
LABEL_58:
      v17 = a1 + 60;
      goto LABEL_62;
    }
    v10 = *((_QWORD *)&__p + 1);
  }
  if (v10 != 9)
  {
LABEL_30:
    if (v10 != 10)
      goto LABEL_63;
    p_p = (__int128 *)__p;
    goto LABEL_47;
  }
  if (*(_QWORD *)__p != 0x7466654C6461503CLL || *(_BYTE *)(__p + 8) != 62)
  {
    v10 = *((_QWORD *)&__p + 1);
    goto LABEL_30;
  }
LABEL_37:
  v17 = a1 + 64;
LABEL_62:
  kaldi::ReadBasicType<int>(a2, a3, v17, v8, v9);
LABEL_63:
  if (SHIBYTE(v25) < 0)
    operator delete((void *)__p);
}

void sub_1DE47376C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *kaldi::nnet1::Padding2DComponent::Check(_DWORD *this)
{
  signed int v1;
  unsigned int v2;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _QWORD v13[34];

  v2 = this[12];
  v1 = this[13];
  if (v1 < 1 || (int)v2 <= 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1265);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "h > 0 && w > 0");
    goto LABEL_17;
  }
  v4 = this[14];
  v5 = this[15];
  if ((-v5 & ~(-v5 >> 31)) + (-v4 & ~(-v4 >> 31)) >= v1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1268);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "num_to_trim_h < h");
    goto LABEL_17;
  }
  v6 = this[16];
  v7 = this[17];
  if ((-v7 & ~(-v7 >> 31)) + (-v6 & ~(-v6 >> 31)) >= v2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1271);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "num_to_trim_w < w");
    goto LABEL_17;
  }
  v8 = this[2];
  v9 = v8 / (int)(v2 * v1);
  if (v8 % (int)(v2 * v1))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1275);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "input_dim_ % (h * w) == 0");
    goto LABEL_17;
  }
  v10 = v4 + v1 + v5;
  v11 = this[3];
  v12 = (v6 + v2 + v7) * v10;
  if (v11 % v12)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1276);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "output_dim_ % (out_h * out_w) == 0");
    goto LABEL_17;
  }
  if (v9 != v11 / v12)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1280);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "c == out_c");
LABEL_17:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  return this;
}

_DWORD *kaldi::nnet1::Padding2DComponent::InitData(kaldi::nnet1::Padding2DComponent *this, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t *v6;

  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v6 = a2 + 4;
  while ((*((_BYTE *)v6 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::nnet1::Padding2DComponent::Read((uint64_t)this, a2, 0, a4, a5);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  return kaldi::nnet1::Padding2DComponent::Check(this);
}

_DWORD *kaldi::nnet1::Padding2DComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t *v6;
  char i;
  uint64_t v8;
  const char *v9;
  char v11;

  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = a2;
  for (i = a3; kaldi::Peek(v6, i) == 60; i = a3)
  {
    kaldi::nnet1::Padding2DComponent::Read(a1, a2, a3, v8, v9);
    v6 = a2;
  }
  v11 = 0;
  kaldi::ReadBasicType<char>(a2, a3, &v11, v8, v9);
  return kaldi::nnet1::Padding2DComponent::Check((_DWORD *)a1);
}

