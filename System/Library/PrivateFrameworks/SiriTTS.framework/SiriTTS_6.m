uint64_t updateTokenDomainLanguageTags(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unsigned int LogLevel;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 v15;
  unsigned __int16 v16;
  _BOOL4 v17;
  int v18;
  BOOL v19;
  unsigned __int16 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char **v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  char *v62;
  int v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int16 v69;
  unsigned __int16 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  const char *v76;
  unsigned __int16 v77;
  size_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 *v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int16 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned int v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  unsigned __int16 *v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unsigned __int16 *v110;
  unsigned int v111;
  uint64_t v112;
  unsigned __int16 *v113;
  _DWORD *v114;
  unint64_t v115;
  unsigned __int16 v116;
  int v117;
  BOOL v118;
  unsigned __int16 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned __int16 v136;
  unsigned __int16 v137;
  unsigned __int16 v138;
  char *v139;
  int v140;
  char *v141;
  unsigned __int16 v142;
  char *v143;
  char *v144;
  char *v145;
  unsigned __int16 *v146;
  unint64_t v147;
  unsigned int v148;
  unsigned int v149;
  int v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  char *v160;
  uint64_t v161;
  unsigned int v162;
  char *v163;
  unint64_t v164;
  _WORD *v165;
  unsigned int v166;
  unsigned int v167;
  unint64_t v168;
  unint64_t v170;
  char *i;
  unint64_t v172;
  _BOOL4 v173;
  unint64_t v175;
  unsigned __int8 *v176;
  unint64_t v177;
  uint64_t j;
  char *v179;
  int v180;
  _WORD *v181;
  int v182;
  uint64_t v183;
  unsigned __int16 v184;
  uint64_t v185;
  int v186;
  unsigned __int16 v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int v191;
  unsigned __int16 v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  unsigned __int8 v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unsigned __int16 v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  char *v211;
  unsigned __int16 v212;
  uint64_t v213;
  int v214;
  int v215;
  char *v216;
  int v217;
  unsigned __int16 v218;
  int v219;
  int v220;
  unsigned __int16 v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unsigned __int16 *v229;
  int v230;
  uint64_t v231;
  unsigned __int16 *v232;
  uint64_t v233;
  char v234;
  unsigned __int16 v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned __int16 *v249;
  int v250;
  unsigned __int16 v251;
  uint64_t v252;
  __int16 k;
  __int16 v254;
  uint64_t v255;
  unsigned __int8 *v256;
  int v257;
  const char *v258;
  uint64_t v259;
  const char *v260;
  char *v261;
  __int16 v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unsigned int v271;
  uint64_t v272;
  _WORD *v273;
  _DWORD *v274;
  char *v275;
  unsigned int v276;
  _WORD *v277;
  char *v278;
  unsigned __int16 *v279;
  uint64_t v280;
  unsigned __int16 v281;
  unsigned __int16 *__c;
  int __ca[2];
  unsigned __int16 __cd;
  int __cb;
  int __cc[2];
  unsigned __int8 *v287;
  unsigned __int16 *v288;
  char *v289;
  unint64_t v290;
  unsigned __int16 v291;
  int v292;
  uint64_t v293;
  unsigned int v294;
  unsigned __int16 v295;
  unsigned __int16 v296;
  unsigned __int16 *v297;
  unsigned int v298;
  char *__dst;
  char *__dsta;
  char *__dstb;
  char __dste;
  char *__dstc;
  char *__dstd;
  uint64_t v305;
  unsigned __int16 *v306;
  char *__s;
  unsigned int v308;
  _WORD *v309;
  unsigned int v310;
  uint64_t v311;
  char *v312;
  __int16 v313;
  int v314;
  __int16 v315;
  unsigned __int8 v316;
  __int16 v317;
  char **v318;
  int v319;
  char *v320;
  unsigned __int16 v321;
  char *v322;
  int v323;
  _DWORD v324[3];

  v323 = 0;
  v324[0] = 0;
  v322 = 0;
  v321 = 0;
  v320 = 0;
  LogLevel = log_GetLogLevel(*(_QWORD *)(*a1 + 32));
  v319 = 0;
  v318 = 0;
  v317 = -1;
  v316 = 0;
  v315 = 0;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(a1[3] + 152))(a2, a3, 3, a4, &v315);
  if ((v14 & 0x80000000) != 0)
    goto LABEL_22;
  if (!v315)
  {
    if (LogLevel < 5)
      return v14;
    v33 = *(_QWORD *)(*a1 + 32);
    v34 = "no tokens to process for langmaps";
LABEL_38:
    log_OutText(v33, (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)v34, v11, v12, v13, v269);
    return v14;
  }
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[3] + 104))(a2, a3, 3, a4, (char *)v324 + 2);
  if ((v14 & 0x80000000) != 0)
  {
LABEL_22:
    v26 = 0;
LABEL_23:
    LOWORD(v28) = 0;
    v29 = 0;
    v30 = 0;
    goto LABEL_24;
  }
  v15 = HIWORD(v324[0]);
  if (!HIWORD(v324[0]))
    goto LABEL_37;
  v16 = 0;
  v17 = 0;
  do
  {
    if (v17)
    {
      v17 = 1;
    }
    else
    {
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, _DWORD *))(a1[3] + 168))(a2, a3, v15, 0, 1, &v319, v324);
      if ((v14 & 0x80000000) != 0)
        goto LABEL_40;
      v15 = HIWORD(v324[0]);
      if (v319 == 6)
      {
        v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char *))(a1[3] + 184))(a2, a3, HIWORD(v324[0]), 6, (char *)&v323 + 2);
        if ((v14 & 0x80000000) != 0)
        {
LABEL_40:
          v26 = 0;
          LOWORD(v28) = 0;
          v29 = 0;
          v30 = 0;
          v321 = v16;
          goto LABEL_24;
        }
        v17 = HIWORD(v323) == 1;
        v15 = HIWORD(v324[0]);
      }
      else
      {
        v17 = 0;
      }
    }
    ++v16;
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(a1[3] + 120))(a2, a3, v15, (char *)v324 + 2);
    v15 = HIWORD(v324[0]);
    if (v18)
      v19 = 1;
    else
      v19 = HIWORD(v324[0]) == 0;
  }
  while (!v19);
  v321 = v16;
  if (!v17)
  {
LABEL_37:
    v33 = *(_QWORD *)(*a1 + 32);
    v34 = "No LangMaps to process";
    goto LABEL_38;
  }
  v20 = strlen(a5);
  if (LogLevel < 5)
  {
    v26 = 0;
  }
  else
  {
    v21 = (char *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, v20 + 2);
    v26 = v21;
    if (!v21)
    {
      v14 = 2311069706;
      v38 = *a1;
      goto LABEL_56;
    }
    strcpy(v21, a5);
    dumpLingDB(a1, a2, a3, a4, (uint64_t)a5, v26, (uint64_t)"lingdb at start of langmap expansion", v27);
  }
  v308 = v20;
  v36 = v20 + 1;
  v37 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, v36);
  v38 = *a1;
  if (!v37)
  {
    v14 = 2311069706;
LABEL_56:
    log_OutPublic(*(_QWORD *)(v38 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v22, v23, v24, v25, v269);
    goto LABEL_23;
  }
  v312 = (char *)v37;
  v39 = heap_Calloc(*(_QWORD **)(v38 + 8), 1, 2 * v36);
  v44 = *a1;
  if (!v39)
  {
    v14 = 2311069706;
    log_OutPublic(*(_QWORD *)(v44 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v40, v41, v42, v43, v269);
    LOWORD(v28) = 0;
    v29 = 0;
    v30 = 0;
    goto LABEL_126;
  }
  v306 = (unsigned __int16 *)v39;
  v45 = heap_Calloc(*(_QWORD **)(v44 + 8), 1, 4 * v36);
  v50 = *a1;
  v305 = v45;
  if (!v45 || (v322 = (char *)heap_Calloc(*(_QWORD **)(v50 + 8), 1, 28 * v16 + 28), v50 = *a1, !v322))
  {
    v14 = 2311069706;
    log_OutPublic(*(_QWORD *)(v50 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v46, v47, v48, v49, v269);
    LOWORD(v28) = 0;
    v29 = 0;
    v30 = 0;
    goto LABEL_124;
  }
  v298 = LogLevel;
  v30 = (const char **)heap_Calloc(*(_QWORD **)(v50 + 8), 1, 48);
  v55 = *a1;
  if (!v30)
  {
    v14 = 2311069706;
    log_OutPublic(*(_QWORD *)(v55 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v51, v52, v53, v54, v269);
    LOWORD(v28) = 0;
    v29 = 0;
    goto LABEL_124;
  }
  __s = (char *)a5;
  v29 = heap_Calloc(*(_QWORD **)(v55 + 8), 1, 1024);
  if (!v29)
    goto LABEL_122;
  v317 = -1;
  v60 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(a1[9] + 96))(a1[7], a1[8], "fecfg", "normal", &v318, &v317, &v316);
  if ((v60 & 0x80000000) != 0)
  {
    v14 = v60;
LABEL_123:
    LOWORD(v28) = 0;
    goto LABEL_124;
  }
  if (v317)
  {
    v61 = *v318;
    v62 = strchr(*v318, v316);
    if (v62)
    {
      *v62 = 0;
      v61 = *v318;
    }
  }
  else
  {
    v61 = "normal";
  }
  v63 = strlen(v61);
  v64 = (char *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, (v63 + 1));
  if (!v64)
  {
LABEL_122:
    v14 = 2311069706;
    log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v56, v57, v58, v59, v269);
    goto LABEL_123;
  }
  *v30 = strcpy(v64, v61);
  v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[3] + 104))(a2, a3, 3, a4, (char *)v324 + 2);
  if ((v65 & 0x80000000) != 0)
  {
    v14 = v65;
    LOWORD(v28) = 1;
    goto LABEL_124;
  }
  v321 = 0;
  v69 = HIWORD(v324[0]);
  v70 = 0;
  if (!HIWORD(v324[0]))
  {
    LOWORD(v28) = 1;
LABEL_129:
    LOWORD(v293) = v28;
    v296 = v70;
    if (v298 < 5)
    {
      __dstb = v322;
      v136 = v70;
      v14 = modifyTokenLangMaps(a1, a2, a3, (uint64_t)v322, v70, (uint64_t)__s);
      if ((v14 & 0x80000000) != 0)
        goto LABEL_124;
    }
    else
    {
      v119 = v70;
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"DUMP before processing", v66, v67, v68, v269);
      v120 = (uint64_t)v322;
      dumpTokDB((uint64_t)a1, a2, a3, (uint64_t)v322, v119);
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Sent=%s", v121, v122, v123, (uint64_t)__s);
      v14 = modifyTokenLangMaps(a1, a2, a3, v120, v119, (uint64_t)__s);
      if ((v14 & 0x80000000) != 0)
        goto LABEL_343;
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"DUMP after langmap realign", v124, v125, v126, v270);
      __dstb = (char *)v120;
      dumpTokDB((uint64_t)a1, a2, a3, v120, v119);
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Sent=%s", v127, v128, v129, (uint64_t)__s);
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Map =%s", v130, v131, v132, (uint64_t)v312);
      v136 = v296;
    }
    v137 = v136;
    if (v136)
    {
      v138 = 0;
      v139 = __dstb;
      while (1)
      {
        v140 = v138;
        v141 = &v139[28 * v138];
        if (*((_DWORD *)v141 + 3) != 3 && *(_DWORD *)&v139[28 * v138 + 8] == 6)
        {
          v289 = &v139[28 * v138];
          v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char *))(a1[3] + 184))(a2, a3, *(unsigned __int16 *)v141, 6, (char *)&v323 + 2);
          if ((v14 & 0x80000000) != 0)
            goto LABEL_343;
          v137 = v296;
          v139 = __dstb;
          if (HIWORD(v323) == 1)
          {
            v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, _DWORD *))(a1[3] + 176))(a2, a3, *(unsigned __int16 *)v289, 6, &v320, v324);
            if ((v14 & 0x80000000) != 0)
              goto LABEL_343;
            v142 = strlen(v320);
            v143 = (char *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, v142 + 1);
            if (!v143)
            {
LABEL_339:
              v14 = 2311069706;
              goto LABEL_342;
            }
            v144 = v143;
            strcpy(v143, v320);
            v145 = &__dstb[28 * v140];
            v148 = *((unsigned __int16 *)v145 + 1);
            v146 = (unsigned __int16 *)(v145 + 2);
            v147 = v148;
            v149 = v146[1];
            if (v148 < v149)
            {
              v150 = *v144;
              do
              {
                if (v144[v147 - *v146] != 32)
                  v150 = v144[v147 - *v146];
                if (v150 != 32)
                {
                  v312[v147] = v150;
                  LOWORD(v149) = v146[1];
                }
                ++v147;
              }
              while (v147 < (unsigned __int16)v149);
            }
            v151 = *(unsigned __int16 *)v289;
            heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v144);
            v139 = __dstb;
            v138 = 0;
            v137 = v296;
            while (*(unsigned __int16 *)&__dstb[28 * v138] != v151)
            {
              if (++v138 >= v296)
              {
                v138 = v296;
                break;
              }
            }
          }
        }
        if (++v138 >= v137)
          goto LABEL_156;
      }
    }
    v139 = __dstb;
LABEL_156:
    if (v298 >= 5)
    {
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"DUMP after inserting langMaps", v133, v134, v135, v269);
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Sent=%s", v152, v153, v154, (uint64_t)__s);
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Map =%s", v155, v156, v157, (uint64_t)v312);
      v139 = __dstb;
      v137 = v296;
    }
    if (v137)
    {
      v158 = 0;
      v159 = v137;
      v160 = v139 + 36;
      v161 = 2;
      v162 = v308;
      v290 = v137;
      do
      {
        if (*(_DWORD *)&v139[28 * v158 + 8] == 6 && !*(_DWORD *)&v139[28 * v158 + 20])
        {
          v163 = &v139[28 * v158];
          v166 = *((unsigned __int16 *)v163 + 2);
          v165 = v163 + 4;
          v164 = v166;
          v167 = v166;
          v168 = v166;
          if (v162 > v166)
          {
            v168 = v164;
            do
            {
              if (__s[v168] == 32)
                break;
              ++v168;
            }
            while (v162 > (unsigned __int16)v168);
            v167 = (unsigned __int16)v168;
          }
          if (__s[v168] == 32 && v162 > v167)
          {
            do
            {
              if (__s[v168] != 32)
                break;
              ++v168;
            }
            while (v162 > (unsigned __int16)v168);
            v167 = (unsigned __int16)v168;
          }
          if (v162 >= v167)
          {
            v280 = v161;
            *(_QWORD *)__ca = v160;
            if (v164 != v168)
            {
              v277 = v165;
              log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"consider adjusting pTokDB[%d].to %d -> %d, as not end of word (u16SentLen=%d)", v133, v134, v135, v158);
              v165 = v277;
              v159 = v290;
              v139 = __dstb;
            }
            if (v158 + 1 >= v159)
              goto LABEL_197;
            v170 = v280;
            for (i = *(char **)__ca; ; i += 28)
            {
              v172 = *((unsigned __int16 *)i - 3);
              v173 = v168 > v172 && *(_DWORD *)i == 6 && *((_DWORD *)i + 1) != 3 && v306[v168] != v306[v172];
              if (v170 >= v159)
                break;
              if (v168 <= *((unsigned __int16 *)i + 11))
              {
                if (*((_DWORD *)i + 7) == 6 || v173)
                  break;
              }
              else if (v173)
              {
                goto LABEL_196;
              }
              ++v170;
            }
            if (v173)
            {
LABEL_196:
              log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"block adjusting: bisects token rec %d -> %d,%d", v133, v134, v135, *(unsigned __int16 *)&v139[28 * (unsigned __int16)v170]);
              v159 = v290;
              v139 = __dstb;
              v162 = v308;
            }
            else
            {
LABEL_197:
              v175 = (unsigned __int16)*v165;
              if (v175 < v168)
              {
                v176 = (unsigned __int8 *)&v312[v175];
                v177 = v168 - v175;
                do
                {
                  *v176++ = v312[*(unsigned __int16 *)&v139[28 * v158 + 2]];
                  --v177;
                }
                while (v177);
              }
              *v165 = v168;
              log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"adjusted rec %d -> %d,%d", v133, v134, v135, *(unsigned __int16 *)&v139[28 * v158]);
              v139 = __dstb;
              v162 = v308;
              v159 = v290;
            }
            v161 = v280;
            v160 = *(char **)__ca;
          }
        }
        ++v158;
        v160 += 28;
        ++v161;
      }
      while (v158 != v159);
      for (j = 0; j != v159; ++j)
      {
        if (*(_DWORD *)&v139[28 * j + 8] != 6)
          continue;
        v179 = &v139[28 * j];
        v182 = *((__int16 *)v179 + 1);
        v181 = v179 + 2;
        v180 = v182;
        v183 = (unsigned __int16)v182;
        if (v182 < 1)
        {
          if (v180 < 0)
            continue;
LABEL_211:
          v184 = 0;
          v185 = 0;
          v187 = 0;
          if (*__s != 32)
            goto LABEL_214;
        }
        else
        {
          v184 = v180;
          while (1)
          {
            v185 = v184;
            if (__s[v184] == 32)
              break;
            v186 = (__int16)v184--;
            if (v186 <= 1)
              goto LABEL_211;
          }
        }
        if (v184 + 1 != (_DWORD)v183)
        {
          v309 = v181;
          __cd = v184 + 1;
          log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"consider adjusting start pos %d -> %d", v133, v134, v135, v183);
          v191 = __cd;
LABEL_218:
          v192 = 0;
          v193 = (unsigned __int16)*v309;
          do
          {
            v194 = *(unsigned __int16 *)&__dstb[28 * v192 + 2];
            if (*(unsigned __int16 *)&__dstb[28 * v192 + 2] > v193)
              break;
            if (j != v192)
            {
              v195 = *(_DWORD *)&__dstb[28 * v192 + 8];
              if (v191 >= v194 && v195 == 6)
              {
                if (v191 < *(unsigned __int16 *)&__dstb[28 * v192 + 4])
                  goto LABEL_238;
              }
              else if (v195 == 5 && *(_DWORD *)&__dstb[28 * v192 + 12] != 3 && v306[v185] != v306[v194])
              {
LABEL_238:
                log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"block adjusting: bisects token rec %d -> %d,%d", v188, v189, v190, *(unsigned __int16 *)&__dstb[28 * v192]);
                goto LABEL_235;
              }
            }
            ++v192;
          }
          while (v192 < v296);
          if (v191 < v193)
          {
            v197 = v312[v193];
            v198 = v191;
            do
              v312[v198++] = v197;
            while (v198 < (unsigned __int16)*v309);
          }
          *v309 = v191;
          log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"adjusted rec %d -> %d,%d", v188, v189, v190, *(unsigned __int16 *)&__dstb[28 * j]);
LABEL_235:
          v139 = __dstb;
          v159 = v290;
          continue;
        }
        v187 = v184;
LABEL_214:
        if (!v187 && v180)
        {
          v309 = v181;
          log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"consider adjusting start pos %d -> %d", v133, v134, v135, v183);
          v191 = 0;
          goto LABEL_218;
        }
      }
    }
    if (v298 >= 5)
    {
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"After Adjusting End Check", v133, v134, v135, v269);
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Sent=%s", v199, v200, v201, (uint64_t)__s);
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Map =%s", v202, v203, v204, (uint64_t)v312);
    }
    v205 = strlen(__s);
    v210 = v205;
    v211 = v312;
    v212 = v296;
    v291 = v205;
    v310 = v205;
    if (v205)
    {
      v213 = 0;
      v214 = 0;
      v215 = *v312;
      do
      {
        v216 = &v211[(unsigned __int16)v214];
        v217 = *v216;
        if (v217 == v215 || __s[(unsigned __int16)v214] != 32)
        {
          ++v214;
          v215 = *v216;
        }
        else
        {
          if ((unsigned __int16)(v214 + 1) <= v210)
            v218 = v210;
          else
            v218 = v214 + 1;
          v219 = v214;
          while (1)
          {
            v220 = v219++;
            if ((unsigned __int16)v219 >= v205)
            {
              v221 = v218;
              goto LABEL_256;
            }
            if (v211[(unsigned __int16)v219] != v217)
              break;
            v221 = v219;
            if (__s[(unsigned __int16)v219] != 32)
              goto LABEL_256;
          }
          v221 = v219;
LABEL_256:
          if (v215 != 80)
          {
            __cb = v215;
            v278 = &v211[(unsigned __int16)v214];
            v281 = v214;
            log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Append region %d..%d to previous %c region", v207, v208, v209, v213);
            v215 = __cb;
            v210 = v310;
            v205 = v291;
            v212 = v296;
            v211 = v312;
            if (v281 < v221)
            {
              memset(v278, __cb, (unsigned __int16)(v221 + ~v281) + 1);
              v215 = __cb;
              v210 = v310;
              v205 = v291;
              v212 = v296;
              v211 = v312;
            }
          }
          v214 = v220 + 2;
        }
        v213 = (unsigned __int16)v214;
      }
      while (v210 > (unsigned __int16)v214);
    }
    if (v298 >= 5)
    {
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"After Region Check", v207, v208, v209, v269);
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Sent=%s", v222, v223, v224, (uint64_t)__s);
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Map =%s", v225, v226, v227, (uint64_t)v312);
      v210 = v310;
      v212 = v296;
      v211 = v312;
    }
    if (v212)
    {
      v228 = v212;
      v229 = (unsigned __int16 *)(__dstb + 16);
      do
      {
        if (*((_DWORD *)v229 - 2) == 5)
        {
          v230 = strcmp(v30[*v229], "phon");
          v210 = v310;
          v211 = v312;
          if (v230)
            *((_DWORD *)v229 - 1) = 3;
        }
        v229 += 14;
        --v228;
      }
      while (v228);
    }
    if (v210)
    {
      v231 = 0;
      v232 = v306;
      v233 = *v306;
      v234 = *v211;
      v235 = v291;
      do
      {
        if (v210 <= (unsigned __int16)v231)
        {
          v236 = v231;
        }
        else
        {
          v236 = v231;
          while (v211[(unsigned __int16)v236] == v234 && v232[(unsigned __int16)v236] == (unsigned __int16)v233)
          {
            v236 = (v236 + 1);
            if (v210 <= (unsigned __int16)v236)
            {
              v237 = 0;
              goto LABEL_279;
            }
          }
          v237 = 1;
LABEL_279:
          if ((unsigned __int16)v236 != (unsigned __int16)v231)
          {
            v314 = 0;
            v313 = 0;
            v206 = v211[(unsigned __int16)v231];
            if ((_DWORD)v206 != 80)
            {
              __dste = v237;
              v238 = v233;
              insertDomainAndLang((uint64_t)a1, (uint64_t *)&v322, &v321, v232[(unsigned __int16)v231], v206, *(_DWORD *)(v305 + 4 * (unsigned __int16)v231), (unsigned __int16)v231, v236, (uint64_t)v30, (__int16 *)&v314 + 1, (__int16 *)&v314, &v313);
              LOBYTE(v237) = __dste;
              v233 = v238;
              v210 = v310;
              v211 = v312;
              v14 = v239;
              v235 = v291;
              v232 = v306;
            }
            if ((v237 & 1) == 0)
              goto LABEL_288;
LABEL_285:
            if (v211[(unsigned __int16)v236] == v234 && v232[(unsigned __int16)v236] == (unsigned __int16)v233)
            {
              v233 = v233;
            }
            else
            {
              v234 = v211[(unsigned __int16)v236];
              v233 = v232[(unsigned __int16)v236];
            }
            goto LABEL_288;
          }
          if (v237)
            goto LABEL_285;
        }
LABEL_288:
        v231 = v236;
      }
      while ((unsigned __int16)v236 < v235);
    }
    if (v298 <= 4)
    {
      LODWORD(v240) = v321;
    }
    else
    {
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"DUMP before update lingdb", v207, v208, v209, v269);
      LODWORD(v240) = v321;
      dumpTokDB((uint64_t)a1, a2, a3, (uint64_t)v322, v321);
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Sent=%s", v241, v242, v243, (uint64_t)__s);
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Map =%s", v244, v245, v246, (uint64_t)v312);
    }
    if (!(_DWORD)v240)
    {
LABEL_335:
      if (v298 >= 5)
      {
        dumpLingDB(a1, a2, a3, a4, (uint64_t)__s, v26, (uint64_t)"lingdb at end of langmap expansion", v209);
        log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Map =%s", v263, v264, v265, (uint64_t)v312);
        log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Sent=%s", v266, v267, v268, (uint64_t)__s);
      }
      goto LABEL_343;
    }
    v247 = 0;
    v248 = (uint64_t)v322;
    v292 = v240;
    v240 = v240;
    v311 = (uint64_t)v322;
    *(_QWORD *)__cc = v240;
    while (1)
    {
      v249 = (unsigned __int16 *)(v248 + 28 * v247);
      v250 = *((_DWORD *)v249 + 3);
      if (v250 == 1)
        break;
      if (v250 == 3)
      {
        if (*v249)
        {
          v252 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[3] + 192))(a2, a3);
LABEL_307:
          v248 = v311;
          v14 = v252;
          if ((v252 & 0x80000000) != 0)
            goto LABEL_343;
        }
      }
      else if (v250 == 2)
      {
        v251 = v247;
        __dstc = (char *)(v248 + 28 * v247);
        do
        {
          if ((--v251 & 0x8000) != 0)
          {
            for (k = v247 + 1; v292 > k; ++k)
            {
              if (*(_DWORD *)(v248 + 28 * k + 12) != 3 && *(_WORD *)(v248 + 28 * k))
              {
                v74 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[3] + 88))(a2, a3);
                goto LABEL_302;
              }
            }
            v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[3] + 72))(a2, a3, 3, a4, (char *)v324 + 2);
            if ((v74 & 0x80000000) != 0)
              goto LABEL_337;
            goto LABEL_315;
          }
        }
        while (*(_DWORD *)(v248 + 28 * v251 + 12) == 3);
        if (!*(_WORD *)(v248 + 28 * v251))
        {
          log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 33004, 0, v206, v207, v208, v209, v269);
          v14 = 2311069696;
          goto LABEL_343;
        }
        v74 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[3] + 80))(a2, a3);
LABEL_302:
        if ((v74 & 0x80000000) != 0)
        {
LABEL_337:
          v14 = v74;
          goto LABEL_343;
        }
LABEL_315:
        v74 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, int *))(a1[3] + 160))(a2, a3, HIWORD(v324[0]), 0, 1, v311 + 28 * v247 + 8, &v323);
        if ((v74 & 0x80000000) != 0)
          goto LABEL_337;
        v297 = (unsigned __int16 *)(v311 + 28 * v247 + 2);
        v74 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(a1[3] + 160))(a2, a3, HIWORD(v324[0]), 1, 1);
        if ((v74 & 0x80000000) != 0)
          goto LABEL_337;
        v74 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, int *))(a1[3] + 160))(a2, a3, HIWORD(v324[0]), 2, 1, v311 + 28 * v247 + 4, &v323);
        if ((v74 & 0x80000000) != 0)
          goto LABEL_337;
        *(_WORD *)__dstc = HIWORD(v324[0]);
        if (*(_DWORD *)(v311 + 28 * v247 + 24))
        {
          v74 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, int *))(a1[3] + 160))(a2, a3, HIWORD(v324[0]), 6, 4, "lid", &v323);
          if ((v74 & 0x80000000) != 0)
            goto LABEL_337;
        }
        v254 = strlen(v30[v306[*v297]]);
        __dstd = (char *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, (unsigned __int16)(v254 + 7) + 1);
        if (!__dstd)
          goto LABEL_339;
        if (v306[*v297])
        {
          strcpy(__dstd, v30[v306[*v297]]);
          v255 = v311 + 28 * v247;
          v257 = *(unsigned __int8 *)(v255 + 18);
          v256 = (unsigned __int8 *)(v255 + 18);
          if (v257 != 78)
          {
            *(_WORD *)&__dstd[strlen(__dstd)] = 95;
            v258 = *(const char **)(v29 + 8 * *v256);
            if (v258)
              strcat(__dstd, v258);
            else
              strcat(__dstd, "latin");
          }
LABEL_333:
          v262 = strlen(__dstd);
          v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, int *))(a1[3] + 160))(a2, a3, HIWORD(v324[0]), 4, (unsigned __int16)(v262 + 1), __dstd, &v323);
          heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)__dstd);
          v248 = v311;
          v240 = *(_QWORD *)__cc;
          if ((v14 & 0x80000000) != 0)
            goto LABEL_343;
          goto LABEL_334;
        }
        v259 = *(unsigned __int8 *)(v311 + 28 * v247 + 18);
        if (v259 == 78)
        {
          v260 = *v30;
          v261 = __dstd;
        }
        else
        {
          v260 = *(const char **)(v29 + 8 * v259);
          if (!v260)
          {
            strcpy(__dstd, "latin");
            goto LABEL_333;
          }
          v261 = __dstd;
        }
        strcpy(v261, v260);
        goto LABEL_333;
      }
LABEL_334:
      if (++v247 == v240)
        goto LABEL_335;
    }
    v252 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, int *))(a1[3] + 160))(a2, a3, *v249, 2, 1, v248 + 28 * v247 + 4, &v323);
    goto LABEL_307;
  }
  v14 = 2311069706;
  v271 = v20;
  v272 = 5;
  v71 = (uint64_t)v322;
  v28 = 1;
  while (1)
  {
    v294 = v70;
    v72 = v71 + 28 * v70;
    *(_WORD *)v72 = v69;
    *(_DWORD *)(v72 + 12) = 0;
    *(_DWORD *)(v72 + 20) = 0;
    *(_WORD *)(v72 + 16) = 0;
    v273 = (_WORD *)(v72 + 16);
    *(_BYTE *)(v72 + 18) = 32;
    *(_DWORD *)(v72 + 24) = 0;
    v274 = (_DWORD *)(v72 + 24);
    __c = (unsigned __int16 *)(v72 + 2);
    v287 = (unsigned __int8 *)(v72 + 18);
    v73 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(a1[3] + 168))(a2, a3, HIWORD(v324[0]), 1, 1);
    if ((v73 & 0x80000000) != 0
      || (v279 = (unsigned __int16 *)(v71 + 28 * v294 + 4),
          v73 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(a1[3] + 168))(a2, a3, HIWORD(v324[0]), 2, 1), (v73 & 0x80000000) != 0))
    {
      v14 = v73;
      goto LABEL_124;
    }
    v293 = v28;
    __dst = (char *)v71;
    v74 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _DWORD *))(a1[3] + 168))(a2, a3, HIWORD(v324[0]), 0, 1, v71 + 28 * v294 + 8, v324);
    if ((v74 & 0x80000000) != 0)
      goto LABEL_337;
    if (*(_DWORD *)(v71 + 28 * v294 + 8) == 5)
      break;
    v93 = v321;
LABEL_116:
    v116 = v93 + 1;
    v321 = v93 + 1;
    v117 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(a1[3] + 120))(a2, a3, HIWORD(v324[0]), (char *)v324 + 2);
    v70 = v116;
    v69 = HIWORD(v324[0]);
    if (v117)
      v118 = 1;
    else
      v118 = HIWORD(v324[0]) == 0;
    v71 = (uint64_t)__dst;
    if (v118)
      goto LABEL_129;
  }
  HIWORD(v314) = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char *))(a1[3] + 184))(a2, a3, HIWORD(v324[0]), 6, (char *)&v314 + 2) & 0x80000000) == 0&& HIWORD(v314) == 1)
  {
    *v274 = 1;
  }
  v74 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, _DWORD *))(a1[3] + 176))(a2, a3, HIWORD(v324[0]), 4, &v320, v324);
  if ((v74 & 0x80000000) != 0)
    goto LABEL_337;
  v75 = (char *)a1[16];
  if (!v75)
    goto LABEL_343;
  v76 = v320;
  v275 = strstr(v75, v320);
  v77 = strlen(v76);
  v78 = strlen(*v30);
  if (v78 <= v77)
    v79 = v77 + 1;
  else
    v79 = (v78 + 1);
  __dsta = (char *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, v79);
  if (!__dsta)
    goto LABEL_342;
  v84 = v320;
  if (!strcmp(v320, "phon")
    || !strcmp(v84, "internal-nuance-system-norm")
    || !strcmp(v84, "prompt")
    || strcmp(v84, "latin") && (v275 && v275[strlen(v84)] == 124 || strchr(v84, 95)))
  {
    strcpy(__dsta, v84);
    v88 = v287;
    *v287 = 78;
    v89 = v77;
    if (v77)
    {
      v90 = 0;
      while (1)
      {
        v91 = v90;
        v92 = v90 + 1;
        if (v320[v90] == 95)
          break;
        v90 = (unsigned __int16)(v90 + 1);
        if (v89 <= (unsigned __int16)v92)
          goto LABEL_92;
      }
      v276 = v89;
      v94 = __toupper(v320[v92]);
      *v287 = v94;
      *(_QWORD *)(v29 + 8 * v94) = &v320[v92];
      bzero(&__dsta[v91], (int)(v276 - v91));
      v88 = v287;
    }
  }
  else
  {
    strcpy(__dsta, *v30);
    v95 = __toupper(*v320);
    v88 = v287;
    *v287 = v95;
    *(_QWORD *)(v29 + 8 * v95) = v320;
  }
LABEL_92:
  v96 = *v279;
  if (v96 > v271)
  {
    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 0, 0, (uint64_t)"Conflicting depes rules in fe_puncsptn - possible FE data error", v85, v86, v87, v269);
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)__dsta);
    v14 = 2311069962;
    goto LABEL_343;
  }
  v97 = *__c;
  v98 = v293;
  if (v97 < v96)
  {
    do
      v312[v97++] = *v88;
    while (v97 < *v279);
  }
  if ((_WORD)v293)
  {
    v99 = 0;
    while (LH_stricmp((char *)v30[v99], __dsta))
    {
      if ((unsigned __int16)v293 == ++v99)
      {
        v101 = v305;
        v100 = v306;
        v98 = v293;
        v102 = v294;
        goto LABEL_103;
      }
    }
    *v273 = v99;
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)__dsta);
    __dsta = 0;
    v98 = v293;
  }
  else
  {
    LOWORD(v99) = 0;
  }
  v101 = v305;
  v100 = v306;
  v102 = v294;
  if ((unsigned __int16)v99 != (unsigned __int16)v98)
  {
    v104 = (uint64_t)v322;
    v105 = v321;
LABEL_109:
    v107 = v104 + 28 * v105;
    v108 = *(unsigned __int16 *)(v107 + 2);
    v288 = (unsigned __int16 *)(v107 + 2);
    v111 = *(unsigned __int16 *)(v107 + 4);
    v110 = (unsigned __int16 *)(v107 + 4);
    LODWORD(v109) = v111;
    if (v108 < v111)
    {
      v112 = v104 + 28 * v105;
      v113 = (unsigned __int16 *)(v112 + 16);
      v114 = (_DWORD *)(v112 + 24);
      do
      {
        v100[v108] = *v113;
        *(_DWORD *)(v101 + 4 * v108++) = *v114;
        v109 = *v110;
      }
      while (v108 < v109);
    }
    __dst = (char *)v104;
    v295 = v105;
    if (!strcmp(v30[*(unsigned __int16 *)(v104 + 28 * v105 + 16)], "phon"))
    {
      v115 = *v288;
      if (v115 < v109)
      {
        do
          v312[v115++] = 80;
        while (v115 < *v110);
      }
    }
    v28 = v293;
    v93 = v295;
    goto LABEL_116;
  }
LABEL_103:
  v103 = v272;
  if ((unsigned __int16)v98 < (unsigned __int16)v272)
  {
    v30[(unsigned __int16)v98] = __dsta;
    v104 = (uint64_t)v322;
    *(_WORD *)&v322[28 * v102 + 16] = v98;
LABEL_108:
    v272 = v103;
    v105 = v321;
    *(_WORD *)(v104 + 28 * v321 + 16) = v98;
    v293 = (v98 + 1);
    goto LABEL_109;
  }
  v106 = heap_Realloc(*(uint64_t **)(*a1 + 8), (uint64_t)v30, 8 * (unsigned __int16)v272 + 48);
  if (v106)
  {
    v103 = (v272 + 5);
    v101 = v305;
    *(_QWORD *)(v106 + 8 * (unsigned __int16)v98) = __dsta;
    v104 = (uint64_t)v322;
    v30 = (const char **)v106;
    v100 = v306;
    goto LABEL_108;
  }
  if (__dsta)
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)__dsta);
LABEL_342:
  log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v80, v81, v82, v83, v269);
LABEL_343:
  LOWORD(v28) = v293;
LABEL_124:
  heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v306);
  if (v305)
    heap_Free(*(_QWORD **)(*a1 + 8), v305);
LABEL_126:
  heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v312);
LABEL_24:
  if (v322)
  {
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v322);
    v322 = 0;
    v321 = 0;
  }
  if (v30)
  {
    if ((_WORD)v28)
    {
      v31 = (unsigned __int16)v28;
      v32 = (uint64_t *)v30;
      do
      {
        heap_Free(*(_QWORD **)(*a1 + 8), *v32);
        *v32++ = 0;
        --v31;
      }
      while (v31);
    }
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v30);
  }
  if (v29)
    heap_Free(*(_QWORD **)(*a1 + 8), v29);
  if (v26)
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v26);
  return v14;
}

size_t hlp_AdjustMarkersToWordBoundaries(size_t result, uint64_t a2, unsigned int a3)
{
  const char *v3;
  int v4;
  _DWORD *v5;
  uint64_t v6;

  if (a3 >= 2)
  {
    v3 = (const char *)result;
    v4 = *(_DWORD *)(a2 + 12);
    v5 = (_DWORD *)(a2 + 44);
    v6 = a3 - 1;
    do
    {
      result = hlp_PositionToWordBoundary(v3, (*v5 - v4));
      *v5 = result + v4;
      v5 += 8;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t hlp_AdjustUserTnToWordBoundaries(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  __int16 v9;
  int v10;
  unsigned __int16 v11;
  int v12;
  int v13;

  v12 = 0;
  v13 = 0;
  v11 = 0;
  v10 = 0;
  v9 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a4 + 104))(a2, a3, 1, 0, (char *)&v13 + 2);
  if ((result & 0x80000000) == 0)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, __int16 *))(a4 + 152))(a2, a3, 3, HIWORD(v13), &v9);
    if ((result & 0x80000000) == 0)
    {
      if (v9)
      {
        for (result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(a4 + 104))(a2, a3, 3, HIWORD(v13), &v13);
              (result & 0x80000000) == 0;
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(a4 + 120))(a2, a3, (unsigned __int16)v13, &v13))
        {
          if (!(_WORD)v13)
            break;
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(a4 + 168))(a2, a3, (unsigned __int16)v13, 0, 1, &v10, (char *)&v12 + 2);
          if ((result & 0x80000000) != 0)
            break;
          if (v10 == 5)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(a4 + 168))(a2, a3, (unsigned __int16)v13, 1, 1, &v12, (char *)&v12 + 2);
            if ((result & 0x80000000) != 0)
              break;
            LOWORD(v12) = hlp_PositionToWordBoundary(a1, (unsigned __int16)v12);
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(a4 + 160))(a2, a3, (unsigned __int16)v13, 1, 1, &v12, (char *)&v12 + 2);
            if ((result & 0x80000000) != 0)
              break;
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(a4 + 168))(a2, a3, (unsigned __int16)v13, 2, 1, &v11, (char *)&v12 + 2);
            if ((result & 0x80000000) != 0)
              break;
            v11 = hlp_PositionToWordBoundary(a1, v11);
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(a4 + 160))(a2, a3, (unsigned __int16)v13, 2, 1, &v11, (char *)&v12 + 2);
            if ((result & 0x80000000) != 0)
              break;
          }
        }
      }
    }
  }
  return result;
}

uint64_t hlp_UpdateLingDBTokensForDeletion(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t result;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;

  v13 = 0;
  v14 = 0;
  v12 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a3 + 104))(a1, a2, 1, 0, (char *)&v14 + 2);
  if ((result & 0x80000000) == 0)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(a3 + 152))(a1, a2, 3, HIWORD(v14), &v12);
    if ((result & 0x80000000) == 0)
    {
      if ((_WORD)v12)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(a3 + 104))(a1, a2, 3, HIWORD(v14), &v14);
        if ((result & 0x80000000) == 0)
        {
          while ((_WORD)v14)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(a3 + 168))(a1, a2, (unsigned __int16)v14, 1, 1, &v13, (char *)&v13 + 2);
            if ((result & 0x80000000) != 0)
              break;
            if ((unsigned __int16)v13 > a4)
            {
              LOWORD(v13) = v13 - 1;
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(a3 + 160))(a1, a2, (unsigned __int16)v14, 1, 1, &v13, (char *)&v13 + 2);
              if ((result & 0x80000000) != 0)
                break;
            }
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(a3 + 168))(a1, a2, (unsigned __int16)v14, 2, 1, (char *)&v12 + 2, (char *)&v13 + 2);
            if ((result & 0x80000000) != 0)
              break;
            v9 = HIWORD(v12);
            if (HIWORD(v12) > a4)
            {
              --HIWORD(v12);
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(a3 + 160))(a1, a2, (unsigned __int16)v14, 2, 1, (char *)&v12 + 2, (char *)&v13 + 2);
              if ((result & 0x80000000) != 0)
                return result;
              v9 = HIWORD(v12);
            }
            if ((unsigned __int16)v13 == v9)
            {
              v11 = 0;
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(a3 + 168))(a1, a2, (unsigned __int16)v14, 0, 1, &v11, (char *)&v13 + 2);
              if (v11 == 5)
                v10 = (unsigned __int16)v14;
              else
                v10 = 0;
              if ((result & 0x80000000) != 0)
                return result;
            }
            else
            {
              v10 = 0;
            }
            result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a1, a2);
            if ((result & 0x80000000) == 0)
            {
              if (!(_DWORD)v10)
                continue;
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 192))(a1, a2, v10);
              if ((result & 0x80000000) == 0)
                continue;
            }
            return result;
          }
        }
      }
    }
  }
  return result;
}

uint64_t hlp_UpdateMarkersForDeletion(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  int *v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;

  if (a2)
  {
    v3 = a2;
    v4 = (int *)(result + 16);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      v7 = *(_DWORD *)(result + 12);
      if (*v4)
      {
        v8 = v5 - v7;
        if (v5 >= v7 && v8 <= a3 && v5 + v6 > v7 && v5 + v6 - v7 > a3)
          *v4 = v6 - 1;
      }
      else
      {
        v8 = v5 - v7;
      }
      if (v5 > v7 && v8 > a3)
        *(v4 - 1) = v5 - 1;
      v4 += 8;
      --v3;
    }
    while (v3);
  }
  return result;
}

size_t hlp_AdjustPuncMarkers(const char *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v6;
  size_t result;
  unsigned int v8;
  _DWORD *v9;
  unsigned int v10;

  LODWORD(v3) = a3;
  v6 = *(_DWORD *)(a2 + 12);
  result = strlen(a1);
  if ((_DWORD)v3)
  {
    v8 = result;
    v3 = v3;
    v9 = (_DWORD *)(a2 + 12);
    do
    {
      v10 = *v9 - v6;
      if (*v9 != v6 && v10 < v8 && a1[v10 - 1] != 32)
      {
        result = a1[v10];
        if ((_DWORD)result != 32)
        {
          result = utf8_determineUTF8CharLength(result);
          if (a1[result + v10] == 32 && *(v9 - 3) != 99)
            *v9 += (unsigned __int16)result;
        }
      }
      v9 += 8;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t fe_puncsptn_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 62339, 168);
  if ((int)result >= 0)
    return result;
  else
    return 2311069704;
}

uint64_t fe_puncsptn_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2311069697;
  result = 0;
  *a2 = &IFePuncsptn;
  return result;
}

uint64_t dumpLingDB(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  unsigned __int16 i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  __int16 v29;
  unsigned __int16 v30;
  int v31;

  v31 = 0;
  v30 = 0;
  v29 = 0;
  v27 = 0;
  v28 = 0;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"%s", (uint64_t)a6, a7, a8, a7);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[3] + 104))(a2, a3, 3, a4, (char *)&v31 + 2);
  if ((result & 0x80000000) == 0)
  {
    for (i = HIWORD(v31); HIWORD(v31); i = HIWORD(v31))
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(a1[3] + 168))(a2, a3, i, 1, 1, &v31, &v29);
      if ((result & 0x80000000) != 0)
        break;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(a1[3] + 168))(a2, a3, HIWORD(v31), 2, 1, &v30, &v29);
      if ((result & 0x80000000) != 0)
        break;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, __int16 *))(a1[3] + 168))(a2, a3, HIWORD(v31), 0, 1, &v28, &v29);
      if ((result & 0x80000000) != 0)
        break;
      if (v28 - 5 <= 1)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, __int16 *))(a1[3] + 176))(a2, a3, HIWORD(v31), 4, &v25, &v29);
        if ((result & 0x80000000) != 0)
          break;
        if (v28 == 6)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, __int16 *))(a1[3] + 176))(a2, a3, HIWORD(v31), 3, &v24, &v29);
          if ((result & 0x80000000) != 0)
            break;
          if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char *))(a1[3] + 184))(a2, a3, HIWORD(v31), 6, (char *)&v27 + 2) & 0x80000000) == 0&& HIWORD(v27) == 1)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, int *))(a1[3] + 176))(a2, a3, HIWORD(v31), 6, &v26, &v27);
            if ((result & 0x80000000) != 0)
              break;
          }
        }
      }
      v16 = v30;
      strncpy(a6, (const char *)(a5 + (unsigned __int16)v31), v30 - (unint64_t)(unsigned __int16)v31);
      a6[v16 - (unsigned __int16)v31] = 0;
      if (v28 > 4)
      {
        if (v28 == 5)
        {
          log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"[dbId=%d] %3d,%3d ESC(%-9s) \"%s\"", v17, v18, v19, HIWORD(v31));
        }
        else if (v28 == 6)
        {
          log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"[dbId=%d] %3d,%3d %-15s \"%s\" \"%s\"", v17, v18, v19, HIWORD(v31));
        }
      }
      else
      {
        v23 = 0;
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1[3] + 264))(a2, a3, (unsigned __int16)v28, &v23);
        log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"[dbId=%d] %3d,%3d %-15s \"%s\"", v20, v21, v22, HIWORD(v31));
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(a1[3] + 120))(a2, a3, HIWORD(v31), (char *)&v31 + 2);
      if ((_DWORD)result)
        break;
    }
  }
  return result;
}

uint64_t dumpTokDB(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a5)
  {
    v7 = (_QWORD *)result;
    v8 = 0;
    v9 = a5;
    v10 = a4 + 12;
    do
    {
      v15 = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(v7[3] + 264))(a2, a3, *(unsigned __int16 *)(v10 - 4), &v15);
      v14 = *(_QWORD *)(*v7 + 32);
      if (*(_DWORD *)(v10 - 4) == 5)
        result = log_OutText(v14, (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"%d : [%d] %d,%d %s %s %c %s", v11, v12, v13, v8);
      else
        result = log_OutText(v14, (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"%d : [%d] %d,%d %s", v11, v12, v13, v8);
      v10 += 28;
      ++v8;
    }
    while (v9 != v8);
  }
  return result;
}

uint64_t modifyTokenLangMaps(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _WORD *v26;
  unsigned int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v44;
  uint64_t v45;
  char *__dst;
  uint64_t v47;
  unsigned __int16 v49;
  char *__src;
  char *__s;
  __int16 v52;

  v52 = 0;
  __src = 0;
  __s = 0;
  v49 = 0;
  if (a5)
  {
    v8 = a3;
    v11 = 0;
    v12 = 0;
    v13 = a5;
    v47 = a5;
    while (1)
    {
      v14 = (unsigned __int16 *)(a4 + 28 * v11);
      if (*((_DWORD *)v14 + 2) == 6)
      {
        v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(a1[3] + 184))(a2, v8, *v14, 6, &v52);
        if ((v12 & 0x80000000) != 0)
          return v12;
        if (v52 == 1)
        {
          v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, unsigned __int16 *))(a1[3] + 176))(a2, v8, *v14, 6, &__s, &v49);
          if ((v15 & 0x80000000) != 0)
            return v15;
          v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, unsigned __int16 *))(a1[3] + 176))(a2, v8, *v14, 3, &__src, &v49);
          if ((v12 & 0x80000000) != 0)
            return v12;
          if (v11)
          {
            v19 = 0;
            v20 = a4 + 28 * v11;
            v21 = (unsigned __int16 *)(v20 + 2);
            v22 = (_WORD *)(v20 + 4);
            while (1)
            {
              if (*(_DWORD *)(a4 + 28 * v19 + 8) == 5 && *v21 >= *(unsigned __int16 *)(a4 + 28 * v19 + 2))
              {
                v23 = (unsigned __int16)*v22;
                v24 = a4 + 28 * v19;
                v27 = *(unsigned __int16 *)(v24 + 4);
                v26 = (_WORD *)(v24 + 4);
                v25 = v27;
                if (v23 < v27)
                {
                  v28 = (unsigned __int16)*v22;
                  while (*(_BYTE *)(a6 + v28) == 32)
                  {
                    if (v25 == ++v28)
                    {
                      LODWORD(v28) = v25;
                      goto LABEL_18;
                    }
                  }
                  LODWORD(v28) = (unsigned __int16)v28;
LABEL_18:
                  if ((_DWORD)v28 != (_DWORD)v23 && (_DWORD)v28 == (_DWORD)v25)
                    break;
                }
              }
              if (++v19 == v11)
              {
                v13 = v47;
                v8 = a3;
                goto LABEL_22;
              }
            }
            *(_DWORD *)(a4 + 28 * v11 + 20) = 1;
            log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"spaced region found...adjust token end from %d to %d", v16, v17, v18, v23);
            v45 = (unsigned __int16)(*v26 + strlen(__s) - *v22) + 1;
            v29 = (char *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, v45);
            if (!v29)
            {
              log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v30, v31, v32, v33, v44);
              return 2311069706;
            }
            v34 = v29;
            v35 = strcpy(v29, __s);
            strncat(v35, (const char *)(a6 + (unsigned __int16)*v22), (unsigned __int16)*v26 - (unint64_t)(unsigned __int16)*v22);
            log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"modify LD_T_LANGMAP field from \"%s\" to \"%s\"", v36, v37, v38, (uint64_t)__s);
            __dst = v34;
            v39 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, unsigned __int16 *))(a1[3] + 160))(a2, a3, *v14, 6, (unsigned __int16)v45, v34, &v49);
            if ((v39 & 0x80000000) != 0)
              goto LABEL_34;
            v12 = 2311069696;
            if (v49 != (unsigned __int16)v45)
              goto LABEL_35;
            strcpy(__dst, __src);
            strncat(__dst, (const char *)(a6 + (unsigned __int16)*v22), (unsigned __int16)*v26 - (unint64_t)(unsigned __int16)*v22);
            log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"modify LD_T_NORM field from \"%s\" to \"%s\"", v40, v41, v42, (uint64_t)__src);
            v39 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, unsigned __int16 *))(a1[3] + 160))(a2, a3, *v14, 3, (unsigned __int16)v45, __dst, &v49);
            if ((v39 & 0x80000000) != 0)
            {
LABEL_34:
              v12 = v39;
LABEL_35:
              heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)__dst);
              return v12;
            }
            if (v49 != (unsigned __int16)v45)
              goto LABEL_35;
            heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)__dst);
            *v22 = *v26;
            v8 = a3;
            v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _WORD *, unsigned __int16 *))(a1[3] + 160))(a2, a3, *v14, 2, 1, v26, &v49);
            v13 = v47;
            if ((v12 & 0x80000000) != 0)
              return v12;
          }
        }
      }
LABEL_22:
      if (++v11 == v13)
        return v12;
    }
  }
  return 0;
}

double insertDomainAndLang(uint64_t a1, uint64_t *a2, unsigned __int16 *a3, __int16 a4, char a5, int a6, uint64_t a7, __int16 a8, uint64_t a9, __int16 *a10, __int16 *a11, _WORD *a12)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int v23;
  unsigned __int16 v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _WORD *v33;
  unsigned int v34;
  double result;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  __int128 *v39;
  __int128 v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;

  v19 = *a2;
  v20 = *a3;
  if (*a3)
  {
    v21 = 0;
    v22 = (_DWORD *)(v19 + 40);
    while (1)
    {
      if (*(v22 - 7) != 3)
      {
        v23 = *((unsigned __int16 *)v22 - 19);
        if (v23 > a7)
          goto LABEL_14;
        if (v23 == (_DWORD)a7)
          break;
      }
      ++v21;
      v22 += 7;
      if (v20 == v21)
      {
        v24 = 0;
        LOWORD(v21) = *a3;
        goto LABEL_16;
      }
    }
    if ((int)v21 + 1 < v20)
    {
      while (*((unsigned __int16 *)v22 - 5) == (_DWORD)a7 && *v22 != 3)
      {
        v24 = v21 + 1;
        v25 = (unsigned __int16)v21 + 2;
        v22 += 7;
        LOWORD(v21) = v21 + 1;
        if (v25 >= v20)
        {
          LOWORD(v21) = v24;
          goto LABEL_16;
        }
      }
LABEL_14:
      v24 = v21;
      goto LABEL_16;
    }
    v24 = *a3;
  }
  else
  {
    LOWORD(v21) = 0;
    v24 = 0;
  }
LABEL_16:
  v26 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), v19, 28 * *a3 + 56);
  if (v26)
  {
    v31 = v26;
    *a2 = v26;
    v32 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if (*a3 == (unsigned __int16)v21)
    {
      log_OutText(v32, (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"insert %d,%d, [%s_%c] at end", v28, v29, v30, a7);
      v33 = a12;
      v34 = (unsigned __int16)v21;
    }
    else
    {
      v34 = v24;
      v36 = v31 + 28 * v24;
      log_OutText(v32, (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"insert %d,%d, [%s_%c] before rec %d", v28, v29, v30, a7);
      if ((unsigned __int16)(*a3 + 1) > v24)
      {
        v37 = (unsigned __int16)(*a3 + 1);
        v38 = (_OWORD *)(v31 + 28 * v37);
        do
        {
          v39 = (__int128 *)(v31 + 28 * (v37 - 1));
          v40 = *v39;
          *(_OWORD *)((char *)v38 + 12) = *(__int128 *)((char *)v39 + 12);
          *v38 = v40;
          v38 = (_OWORD *)((char *)v38 - 28);
          --v37;
        }
        while (v24 < (unsigned __int16)v37);
      }
      *(_QWORD *)v36 = 0;
      *(_QWORD *)(v36 + 8) = 0;
      *(_DWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 16) = 0;
      v41 = *a10;
      if (v41 >= v24)
        *a10 = v41 + 1;
      v33 = a12;
      v42 = *a11;
      if (v42 >= v24)
        *a11 = v42 + 1;
      LOWORD(v21) = v24;
    }
    v43 = v31 + 28 * v34;
    *(_WORD *)v43 = 0;
    *(_WORD *)(v43 + 2) = a7;
    *(_WORD *)(v43 + 4) = a8;
    *(_WORD *)(v43 + 16) = a4;
    *(_BYTE *)(v43 + 18) = a5;
    *(_QWORD *)&result = 0x200000005;
    *(_QWORD *)(v43 + 8) = 0x200000005;
    *(_DWORD *)(v43 + 24) = a6;
    *v33 = v21;
    ++*a3;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v27, v28, v29, v30, v44);
  }
  return result;
}

uint64_t ToNorm(unsigned __int8 *a1)
{
  unsigned __int8 v1;
  unsigned int v2;
  uint64_t result;
  unsigned int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  unsigned __int8 v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned __int8 v14;

  v1 = *a1;
  v2 = *a1;
  if (v2 != 32 && v2 < 0x41 || (*a1 - 91) < 6u)
    return 1;
  if (v2 < 0x7B
    || ((result = 1, v7 = v1 - 130, v8 = v7 > 8, v9 = (1 << v7) & 0x149, !v8) ? (v10 = v9 == 0) : (v10 = 1), !v10))
  {
    v11 = a1[1];
    if (v11)
    {
      v12 = a1 + 2;
      result = 1;
      while (v11 > 0x40u || v11 == 32)
      {
        if ((v11 - 65) > 0x19u)
        {
          if ((v11 - 91) < 6u)
            return 1;
          if (v11 > 0x7Au)
          {
            v13 = v11 - 130;
            if (v13 > 8 || ((1 << v13) & 0x149) == 0)
              return result;
          }
        }
        else if (*(v12 - 2) != 32)
        {
          return 1;
        }
        v14 = *v12++;
        v11 = v14;
        if (!v14)
          return 0;
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t hlp_updateBytePositions(unsigned int a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, _WORD *a5, _WORD *a6)
{
  unsigned __int16 v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  uint64_t result;

  *a5 = Utf8_LengthInBytes(a2, a1);
  if (a1)
  {
    v10 = 0;
    v11 = a1;
    do
    {
      v12 = *a3++;
      v10 += v12;
      --v11;
    }
    while (v11);
    v13 = v10;
  }
  else
  {
    v13 = 0;
  }
  result = Utf8_LengthInBytes(a4, v13);
  *a6 = result;
  return result;
}

uint64_t hlp_updateMarkerPosition(unint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4, int a5, int a6, _DWORD *a7)
{
  unsigned __int16 v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t result;

  v13 = Utf8_LengthInUtf8chars(a1, *a7 - a4);
  if (a5)
  {
    v14 = 0;
    v15 = 0;
    while (1)
    {
      v15 += *(unsigned __int8 *)(a2 + v14);
      if (v13 < v15)
        break;
      if (a5 == ++v14)
        goto LABEL_7;
    }
    LOWORD(a5) = v14;
  }
LABEL_7:
  result = Utf8_LengthInBytes(a3, (unsigned __int16)a5);
  *a7 = a6 + a4 + (unsigned __int16)result;
  return result;
}

size_t hlp_PositionToWordBoundary(const char *a1, size_t a2)
{
  size_t v4;
  size_t v5;
  uint64_t v6;
  int v7;

  v4 = strlen(a1);
  v5 = v4;
  if (v4 > a2)
  {
    a2 = a2;
    v6 = v4;
    while (memchr(" _", a1[a2], 3uLL))
    {
      if (v6 == ++a2)
      {
        a2 = v5;
        break;
      }
    }
  }
  if ((_DWORD)a2)
  {
    a2 = a2;
    do
    {
      v7 = a1[a2];
      if (memchr(",.", v7, 3uLL))
        break;
      if (!memchr(" _", v7, 3uLL))
        break;
      --a2;
    }
    while ((_DWORD)a2);
  }
  return a2;
}

uint64_t fe_puncsptn_v2_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t Object;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;

  v38 = 0;
  v39 = 0;
  v5 = 2702188551;
  v37 = 0;
  if (a5)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v39);
    if ((inited & 0x80000000) != 0)
      return inited;
    inited = objc_GetObject(v39[6], (uint64_t)"LINGDB", &v38);
    if ((inited & 0x80000000) != 0)
      return inited;
    Object = objc_GetObject(v39[6], (uint64_t)"FE_DCTLKP", &v37);
    if ((Object & 0x80000000) != 0)
    {
      v36 = Object;
      objc_ReleaseObject(v39[6], (uint64_t)"LINGDB");
      return v36;
    }
    v11 = heap_Alloc(v39[1], 176);
    if (!v11)
    {
      log_OutPublic(v39[4], (uint64_t)"FE_PUNCSPTN_V2", 76000, 0, v12, v13, v14, v15, v37);
      objc_ReleaseObject(v39[6], (uint64_t)"LINGDB");
      objc_ReleaseObject(v39[6], (uint64_t)"FE_DCTLKP");
      return 2702188554;
    }
    v16 = v11;
    *(_QWORD *)v11 = v39;
    *(_QWORD *)(v11 + 8) = a3;
    *(_QWORD *)(v11 + 16) = a4;
    *(_QWORD *)(v11 + 24) = *(_QWORD *)(v38 + 8);
    v17 = v37;
    v18 = *(_QWORD *)(v37 + 8);
    *(_QWORD *)(v11 + 48) = v18;
    v19 = *(_OWORD *)(v17 + 16);
    *(_QWORD *)(v11 + 160) = 0;
    v20 = (uint64_t *)(v11 + 160);
    *(_OWORD *)(v11 + 32) = v19;
    *(_QWORD *)(v11 + 56) = 0;
    *(_WORD *)(v11 + 64) = 0;
    *(_QWORD *)(v11 + 144) = 0;
    *(_QWORD *)(v11 + 168) = "FE_PUNCSPTN_V2";
    v40 = 0;
    v21 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t *))(v18 + 88))(*(_QWORD *)(v11 + 32), *(_QWORD *)(v11 + 40), (char *)&v40 + 4, &v40);
    if ((v21 & 0x80000000) != 0
      || (v21 = loc_reload_statpunc_data(v16, v22, v23, v24, v25, v26, v27, v28), (v21 & 0x80000000) != 0))
    {
      v5 = v21;
    }
    else
    {
      *(_QWORD *)(v16 + 72) = heap_Alloc;
      *(_QWORD *)(v16 + 80) = heap_Calloc;
      *(_QWORD *)(v16 + 88) = heap_Realloc;
      *(_QWORD *)(v16 + 96) = heap_Free;
      v29 = OOCAllocator_Con(v16 + 104, (_OWORD *)(v16 + 72), *(_QWORD *)(*(_QWORD *)v16 + 8));
      v30 = LH_ERROR_to_VERROR(v29);
      if ((v30 & 0x80000000) != 0)
      {
        v5 = v30;
        log_OutPublic(v39[4], (uint64_t)"FE_PUNCSPTN_V2", 76002, 0, v31, v32, v33, v34, v37);
      }
      else
      {
        v5 = puncsptn_v2_reload_lua_code(*(_WORD **)(v16 + 8), *(_QWORD *)(v16 + 16), *(_QWORD *)(v16 + 168), v16 + 104, v20, (_DWORD *)(v16 + 152));
        if ((v5 & 0x80000000) == 0)
        {
          *(_QWORD *)a5 = v16;
          *(_DWORD *)(a5 + 8) = 73449;
          return v5;
        }
      }
    }
    loc_cleanup_on_close(*(uint64_t **)a5, *(_QWORD *)(a5 + 8));
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
  }
  return v5;
}

uint64_t loc_reload_statpunc_data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t IGTree;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t i;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v22;
  unsigned __int16 v23;
  char v24;

  v24 = 0;
  v22 = 0;
  loc_deallocate_statpunc_v2_data((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
  v23 = 0;
  IGTree = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, uint64_t *, unsigned __int16 *, char *))(*(_QWORD *)(a1 + 48) + 96))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), "fecfg", "statpunc", &v22, &v23, &v24);
  if ((IGTree & 0x80000000) == 0 && v23)
  {
    v10 = heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), 48 * v23);
    *(_QWORD *)(a1 + 56) = v10;
    if (v10)
    {
      if (v23)
      {
        for (i = 0; i < v23; ++i)
        {
          v16 = strchr(*(char **)(v22 + 8 * i), 124);
          if (v16)
          {
            *v16 = 0;
            v17 = v16 + 1;
            __strcpy_chk();
            v18 = strchr(v17, 124);
            if (v18)
            {
              *v18 = 0;
              v19 = v18 + 1;
              __strcpy_chk();
              v20 = strchr(v19, 124);
              if (v20)
              {
                *v20 = 0;
                IGTree = statpunc_v2_readIGTree(*(_WORD **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)a1, (uint64_t)v19, *(_QWORD *)(a1 + 56) + 48 * *(unsigned __int16 *)(a1 + 64));
                if ((IGTree & 0x80000000) != 0)
                  return IGTree;
                ++*(_WORD *)(a1 + 64);
              }
            }
          }
        }
      }
    }
    else
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PUNCSPTN_V2", 76000, 0, v11, v12, v13, v14, v22);
      return 2702188554;
    }
  }
  return IGTree;
}

uint64_t loc_cleanup_on_close(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = safeh_HandleCheck((uint64_t)a1, a2, 73449, 176);
  if ((v3 & 0x80000000) != 0)
    return 2702188552;
  v11 = v3;
  if (a1)
  {
    loc_deallocate_statpunc_v2_data(a1, v4, v5, v6, v7, v8, v9, v10);
    luavmldoutil_destroy_lua_vm((uint64_t)(a1 + 13), a1 + 20);
    kaldi::nnet1::Component::IsUpdatable((kaldi::nnet1::Component *)(a1 + 13));
    objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"LINGDB");
    objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"FE_DCTLKP");
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)a1);
  }
  return v11;
}

uint64_t fe_puncsptn_v2_ObjReopen(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = safeh_HandleCheck(a1, a2, 73449, 176);
  if ((result & 0x80000000) != 0)
    return 2702188552;
  if (a1)
  {
    v11 = 0;
    result = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)(a1 + 48) + 88))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), (char *)&v11 + 4, &v11);
    if ((result & 0x80000000) == 0)
    {
      result = loc_reload_statpunc_data(a1, v4, v5, v6, v7, v8, v9, v10);
      if ((result & 0x80000000) == 0)
        return puncsptn_v2_reload_lua_code(*(_WORD **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 168), a1 + 104, (uint64_t *)(a1 + 160), (_DWORD *)(a1 + 152));
    }
  }
  return result;
}

uint64_t fe_puncsptn_v2_ProcessStart(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 73449, 176);
  if ((int)result >= 0)
    return result;
  else
    return 2702188552;
}

uint64_t fe_puncsptn_v2_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  int v24;

  v24 = 0;
  if ((safeh_HandleCheck(a1, a2, 73449, 176) & 0x80000000) != 0)
    return 2702188552;
  *a5 = 1;
  v12 = LingDBHasSentence(*(_QWORD *)(a1 + 24), a3, a4, &v24);
  if ((v12 & 0x80000000) == 0)
  {
    if (v24 == 1)
    {
      inited = initLDO(a1 + 104, (_QWORD *)(a1 + 144));
      if ((inited & 0x80000000) != 0)
      {
LABEL_14:
        v12 = inited;
        goto LABEL_18;
      }
      v12 = importFromLingDB(*(_QWORD *)a1, *(_QWORD *)(a1 + 24), a3, a4, (uint64_t *)(a1 + 144));
      if ((v12 & 0x80000000) != 0)
        goto LABEL_18;
      if (*(_QWORD *)(a1 + 144))
      {
        if (*(_WORD *)(a1 + 64))
        {
          v14 = 0;
          v15 = 0;
          while (1)
          {
            inited = statpunc_v2_Process(*(_QWORD *)a1, *(_QWORD *)(a1 + 144), a1 + 104, *(_QWORD *)(a1 + 56) + v14);
            if ((inited & 0x80000000) != 0)
              break;
            ++v15;
            v14 += 48;
            if (v15 >= *(unsigned __int16 *)(a1 + 64))
              goto LABEL_11;
          }
        }
        else
        {
LABEL_11:
          if (*(_DWORD *)(a1 + 152) != 1
            || (log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 168), 5, 0, (uint64_t)"Lua code available: process LDO with Lua code", v9, v10, v11, 0), inited = puncsptn_v2_process_ldo_with_lua(*(_QWORD *)a1, *(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 144), a1 + 104, *(_QWORD *)(a1 + 160), v16, v17, v18), (inited & 0x80000000) == 0))
          {
            inited = exportToLingDB(*(_QWORD *)a1, *(_QWORD *)(a1 + 24), a3, a4, a1 + 104, *(_QWORD *)(a1 + 144), 0, 0);
          }
        }
        goto LABEL_14;
      }
      v19 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      v20 = *(_QWORD *)(a1 + 168);
      v21 = "Imported LDO is NULL, returning";
    }
    else
    {
      v19 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      v20 = *(_QWORD *)(a1 + 168);
      v21 = "LingDB has no sentence, returning";
    }
    log_OutText(v19, v20, 5, 0, (uint64_t)v21, v9, v10, v11, 0);
  }
LABEL_18:
  v22 = *(_QWORD *)(a1 + 144);
  if (v22)
  {
    deinitLDO(a1 + 104, v22);
    *(_QWORD *)(a1 + 144) = 0;
  }
  return v12;
}

uint64_t fe_puncsptn_v2_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 73449, 176);
  if ((int)result >= 0)
    return result;
  else
    return 2702188552;
}

uint64_t fe_puncsptn_v2_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2702188545;
  result = 0;
  *a2 = &IFePuncsptnV2;
  return result;
}

uint64_t *loc_deallocate_statpunc_v2_data(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v8 = result;
  v9 = result[7];
  if (*((_WORD *)result + 32))
  {
    v10 = 0;
    v11 = 8;
    do
    {
      statpunc_freeIGTree(*v8, *(_QWORD *)(v9 + v11), a3, a4, a5, a6, a7, a8);
      v9 = v8[7];
      *(_QWORD *)(v9 + v11) = 0;
      ++v10;
      v11 += 48;
    }
    while (v10 < *((unsigned __int16 *)v8 + 32));
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    result = heap_Free(*(_QWORD **)(*v8 + 8), v9);
    v8[7] = 0;
  }
  *((_WORD *)v8 + 32) = 0;
  return result;
}

uint64_t loc_extractFeatures(uint64_t a1, uint64_t a2, char *a3, char *a4, const char *a5, uint64_t *a6)
{
  const char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  const char *v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;
  const char *v20;
  uint64_t v21;
  char *i;
  int v23;
  int v24;
  char *v25;
  const char *v26;
  int v27;
  const char *v28;
  int v29;
  const char *v30;
  char *v31;
  char *v32;
  int v33;
  char *v34;
  char *v35;
  const char *v36;
  int v37;
  int v38;
  char *v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  int v49;
  unsigned __int16 v51;
  int v52;
  char *v54;
  const char *v55;
  uint64_t v56;
  char *v57;
  int v58;
  int v59;

  v10 = *(const char **)(a1 + 16);
  if (v10)
  {
    v11 = strchr(*(char **)(a1 + 16), 124);
    if (v11)
    {
      v12 = v11;
      v13 = 0;
      do
      {
        *v12 = 0;
        v14 = strstr(a3, v10);
        if (v14)
        {
          if (v14 < a4)
          {
            v13 = loc_setFeature(*(_QWORD *)(a1 + 8), a2, "collocation", a6, "left");
            if ((v13 & 0x80000000) != 0)
              return v13;
          }
        }
        *v12 = 124;
        v10 = v12 + 1;
        v12 = strchr(v12 + 1, 124);
      }
      while (v12);
      if ((v13 & 0x80000000) != 0)
        return v13;
    }
  }
  v15 = *(const char **)(a1 + 24);
  if (v15)
  {
    v16 = strchr(*(char **)(a1 + 24), 124);
    if (v16)
    {
      v17 = v16;
      v13 = 0;
      do
      {
        *v17 = 0;
        if (strstr(a3, v15) > a4)
        {
          v13 = loc_setFeature(*(_QWORD *)(a1 + 8), a2, "collocation", a6, "right");
          if ((v13 & 0x80000000) != 0)
            return v13;
        }
        *v17 = 124;
        v15 = v17 + 1;
        v17 = strchr(v17 + 1, 124);
      }
      while (v17);
      if ((v13 & 0x80000000) != 0)
        return v13;
    }
  }
  v18 = a4;
  if (a4 > a3)
  {
    v18 = a4;
    while (*v18 != 32)
    {
      if (--v18 <= a3)
      {
        v18 = a3;
        break;
      }
    }
  }
  if (v18 > a3)
  {
    while (*v18 == 32)
    {
      if (--v18 <= a3)
      {
        v18 = a3;
        break;
      }
    }
  }
  v19 = *v18;
  if (strchr(*(char **)(a1 + 40), v19))
  {
    v20 = "punc";
  }
  else
  {
    if (!memchr("0123456789", v19, 0xBuLL))
      goto LABEL_30;
    v20 = "digit";
  }
  v21 = loc_setFeature(*(_QWORD *)(a1 + 8), a2, "lwordendchar", a6, v20);
  if ((v21 & 0x80000000) != 0)
    return v21;
LABEL_30:
  for (i = a4; (*i | 0x20) != 0x20; ++i)
    ;
  do
  {
    v24 = *i++;
    v23 = v24;
  }
  while (v24 == 32);
  v25 = *(char **)(a1 + 40);
  if (strchr(v25, v23))
  {
    v26 = "punc";
  }
  else
  {
    if (!memchr("0123456789", v23, 0xBuLL))
      goto LABEL_40;
    v26 = "digit";
  }
  v21 = loc_setFeature(*(_QWORD *)(a1 + 8), a2, "rwordbegchar", a6, v26);
  if ((v21 & 0x80000000) != 0)
    return v21;
  v25 = *(char **)(a1 + 40);
LABEL_40:
  if (a4 <= a3)
    goto LABEL_47;
  v27 = *(a4 - 1);
  if (strchr(v25, v27))
  {
    v28 = "punc";
  }
  else
  {
    if (!memchr("0123456789", v27, 0xBuLL))
      goto LABEL_47;
    v28 = "digit";
  }
  v21 = loc_setFeature(*(_QWORD *)(a1 + 8), a2, "lchar", a6, v28);
  if ((v21 & 0x80000000) != 0)
    return v21;
  v25 = *(char **)(a1 + 40);
LABEL_47:
  v29 = a4[1];
  if (strchr(v25, v29))
  {
    v30 = "punc";
  }
  else
  {
    if (!memchr("0123456789", v29, 0xBuLL))
      goto LABEL_53;
    v30 = "digit";
  }
  v21 = loc_setFeature(*(_QWORD *)(a1 + 8), a2, "rchar", a6, v30);
  if ((v21 & 0x80000000) != 0)
    return v21;
  v25 = *(char **)(a1 + 40);
LABEL_53:
  if (a4 == a3)
    goto LABEL_59;
  v31 = a4 - 1;
  v32 = a4 - 1;
  do
  {
    v33 = *v32--;
    v34 = strchr(v25, v33);
    if (v31 <= a3)
      break;
    v31 = v32;
  }
  while (v34);
  if (v32 + 1 == a3 && v34)
  {
LABEL_59:
    v35 = a4 + 1;
    v36 = "isolated";
    do
    {
      v38 = *v35++;
      v37 = v38;
      if (!v38)
        goto LABEL_70;
    }
    while (strchr(v25, v37));
    if (!strcmp(a5, (const char *)a1))
    {
      v36 = "start";
      goto LABEL_70;
    }
  }
  else
  {
    v39 = a4 + 1;
    while (1)
    {
      v41 = *v39++;
      v40 = v41;
      if (!v41)
        break;
      if (!strchr(v25, v40))
        goto LABEL_72;
    }
    if (!strcmp(a5, (const char *)(a1 + 4)))
    {
      v36 = "end";
LABEL_70:
      v21 = loc_setFeature(*(_QWORD *)(a1 + 8), a2, "sentpos", a6, v36);
      if ((v21 & 0x80000000) == 0)
      {
        v25 = *(char **)(a1 + 40);
        goto LABEL_72;
      }
      return v21;
    }
  }
LABEL_72:
  if (!bstartword(v25, a3, a4))
  {
    v57 = a4 + 1;
    do
    {
      v59 = *v57++;
      v58 = v59;
      if (!v59)
        goto LABEL_101;
    }
    while (strchr(v25, v58));
    if ((v58 & 0xFFFFFFDF) == 0)
    {
LABEL_101:
      if (!strcmp(a5, (const char *)(a1 + 4)))
      {
        v54 = "pos";
        v55 = "end";
        goto LABEL_95;
      }
    }
    return 0;
  }
  v42 = 1;
  do
  {
    v43 = a4[v42];
    if (!a4[v42])
      goto LABEL_94;
  }
  while (strchr(v25, a4[v42++]));
  if ((v43 & 0xFFFFFFDF) == 0)
  {
LABEL_94:
    v54 = "pos";
    v55 = "isolated";
    goto LABEL_95;
  }
  if (strcmp(a5, (const char *)a1))
    return 0;
  v13 = loc_setFeature(*(_QWORD *)(a1 + 8), a2, "pos", a6, "start");
  if ((v13 & 0x80000000) != 0)
    return v13;
  v45 = strstr(a4 + 1, (const char *)(a1 + 4));
  if (!v45)
    return v13;
  v46 = v45;
  v47 = *(char **)(a1 + 40);
  if (bstartword(v47, a3, v45))
    return v13;
  v48 = 1;
  while (1)
  {
    v49 = v46[v48];
    if (!v46[v48])
      break;
    if (!strchr(v47, v46[v48++]))
    {
      if ((v49 & 0xFFFFFFDF) != 0)
        return v13;
      break;
    }
  }
  if (v46 <= a4)
  {
    v51 = 0;
  }
  else
  {
    v51 = 0;
    do
    {
      if (*a4 == 32)
      {
        ++v51;
        do
          v52 = *++a4;
        while (v52 == 32);
      }
      ++a4;
    }
    while (a4 < v46);
  }
  if (*(unsigned __int16 *)(a1 + 32) <= v51)
  {
    v56 = *(_QWORD *)(a1 + 8);
    v54 = "dist2end";
    if (*(unsigned __int16 *)(a1 + 34) <= v51)
      v55 = "long";
    else
      v55 = "medium";
    return loc_setFeature(v56, a2, v54, a6, v55);
  }
  v54 = "dist2end";
  v55 = "short";
LABEL_95:
  v56 = *(_QWORD *)(a1 + 8);
  return loc_setFeature(v56, a2, v54, a6, v55);
}

uint64_t loc_insertMarker(uint64_t a1, uint64_t a2, unsigned int a3, char *a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int AbsoluteFrom;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  int U32Attribute;
  int v23;
  int StringAttribute;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v50;
  char *__s;
  int v52;
  uint64_t v53;

  v53 = 0;
  v52 = 0;
  v50 = 0;
  __s = 0;
  v5 = *(_QWORD *)(a1 + 32);
  v7 = *(uint64_t ***)(v5 + 24);
  v6 = *(_QWORD *)(v5 + 32);
  if ((unint64_t)v7 >= v6)
  {
    v13 = 0;
    v10 = 0;
    v9 = 0;
LABEL_16:
    if ((unint64_t)v7 >= v6)
    {
LABEL_28:
      if (v9)
      {
        HIDWORD(v53) = LDOLabel_GetAbsoluteFrom(v9);
        v41 = *(_DWORD *)(v9 + 96);
        v40 = *(_DWORD *)(v9 + 100);
        v42 = LDO_AddLabelOnSubstring(a1, "MARKER", "MARKER_NLU", (unsigned int *)&v53 + 1, (unsigned int *)&v53 + 1, &v50);
        v25 = LH_ERROR_to_VERROR(v42);
        if ((v25 & 0x80000000) == 0)
        {
          v43 = LDOLabel_SetReferenceFrom(v50, v41);
          v25 = LH_ERROR_to_VERROR(v43);
          if ((v25 & 0x80000000) == 0)
          {
            v44 = LDOLabel_SetReferenceTo(v50, v40);
            v25 = LH_ERROR_to_VERROR(v44);
            if ((v25 & 0x80000000) == 0)
            {
              v45 = LDOObject_SetStringAttribute(v50, "STRARGS", a4);
              v25 = LH_ERROR_to_VERROR(v45);
              if ((v25 & 0x80000000) == 0)
              {
                LDOObject_SetU32Attribute(v50, "_MTYPE", 51);
                return LH_ERROR_to_VERROR(v46);
              }
            }
          }
        }
        return v25;
      }
    }
    else
    {
      v19 = 0;
      v20 = 0;
      while (1)
      {
        v21 = *v7;
        U32Attribute = LDOObject_GetU32Attribute(*v7, "_MTYPE", &v52, &v53);
        v13 = LH_ERROR_to_VERROR(U32Attribute);
        if ((v13 & 0x80000000) != 0)
          break;
        if (v52 == 1)
        {
          v23 = v53;
          HIDWORD(v53) = LDOLabel_GetAbsoluteFrom((uint64_t)v21);
          if (v23 == 51 && HIDWORD(v53) == v10)
          {
            v20 = 1;
            v19 = v21;
          }
        }
        if ((unint64_t)++v7 >= *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32))
        {
          if (!v20)
            goto LABEL_28;
          StringAttribute = LDOObject_GetStringAttribute(v19, "STRARGS", &v52, (uint64_t *)&__s);
          v25 = LH_ERROR_to_VERROR(StringAttribute);
          if ((v25 & 0x80000000) == 0)
          {
            if (v52)
            {
              v30 = strlen(a4);
              v31 = strlen(__s);
              v32 = (char *)heap_Alloc(*(_QWORD *)(a2 + 8), (v30 + v31 + 2));
              if (v32)
              {
                v37 = v32;
                v38 = strcpy(v32, __s);
                *(_WORD *)&v37[strlen(v38)] = 59;
                strcat(v37, a4);
                v39 = LDOObject_SetStringAttribute((uint64_t)v19, "STRARGS", v37);
                v13 = LH_ERROR_to_VERROR(v39);
                heap_Free(*(_QWORD **)(a2 + 8), (uint64_t)v37);
              }
              else
              {
                log_OutPublic(*(_QWORD *)(a2 + 32), (uint64_t)"FE_PUNCSPTN_V2", 76000, 0, v33, v34, v35, v36, a2);
                return 2702188554;
              }
            }
            else
            {
              v13 = 2702188544;
              log_OutPublic(*(_QWORD *)(a2 + 32), (uint64_t)"FE_PUNCSPTN_V2", 76003, 0, v26, v27, v28, v29, a2);
            }
            return v13;
          }
          return v25;
        }
      }
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v7;
      v12 = LDOObject_GetU32Attribute(*v7, "_MTYPE", &v52, &v53);
      v13 = LH_ERROR_to_VERROR(v12);
      if ((v13 & 0x80000000) != 0)
        break;
      if (v52 == 1)
      {
        v14 = v53;
        AbsoluteFrom = LDOLabel_GetAbsoluteFrom((uint64_t)v11);
        HIDWORD(v53) = AbsoluteFrom;
        if (v14 == 1 && AbsoluteFrom <= a3)
        {
          v10 = AbsoluteFrom;
          v9 = (uint64_t)v11;
        }
      }
      ++v7;
      v18 = *(_QWORD *)(a1 + 32);
      v6 = *(_QWORD *)(v18 + 32);
      if ((unint64_t)v7 >= v6)
      {
        v7 = *(uint64_t ***)(v18 + 24);
        goto LABEL_16;
      }
    }
  }
  return v13;
}

uint64_t statpunc_v2_readIGTree(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t Str;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned __int16 v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  unsigned int v31;
  int v32[2];
  int v33[2];
  char v34[256];
  char v35[256];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v32 = 0;
  *(_QWORD *)v33 = 0;
  Str = paramc_ParamGetStr(*(_QWORD *)(a3 + 40), (uint64_t)"langcode", v33);
  if ((Str & 0x80000000) != 0)
    return Str;
  strcpy(v35, "statpunc_");
  __strcat_chk();
  v10 = brokeraux_ComposeBrokerString(a3, v35, 0, 1, *(char **)v33, 0, 0, v34, 0x100uLL);
  if (v10 < 0)
    return v10 | 0xA1102000;
  Str = ssftriff_reader_ObjOpen(a1, a2, 2, v34, "IGTR", 1031, (uint64_t *)v32);
  if ((Str & 0x80000000) != 0)
    return Str;
  v11 = (char *)heap_Calloc(*(_QWORD **)(a3 + 8), 1, 1600);
  *(_QWORD *)(a5 + 8) = v11;
  if (!v11)
  {
    log_OutPublic(*(_QWORD *)(a3 + 32), (uint64_t)"FE_PUNCSPTN_V2", 76000, 0, v12, v13, v14, v15, v31);
    return 2702188554;
  }
  Str = igtree_Init(a1, a2, *(uint64_t *)v32, v11);
  if ((Str & 0x80000000) != 0)
    return Str;
  v23 = ssftriff_reader_ObjClose(*(_QWORD **)v32, v16, v17, v18, v19, v20, v21, v22);
  if ((v23 & 0x80000000) == 0)
  {
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)(a5 + 24) = 0;
    *(_DWORD *)(a5 + 32) = 393219;
    *(_QWORD *)(a5 + 40) = ":;.!?()[]{}#\"',-<>";
    v24 = *(_QWORD *)(a5 + 8);
    v25 = *(_DWORD *)(v24 + 1336);
    if (v25)
    {
      v26 = 0;
      v27 = *(_QWORD *)(v24 + 1328);
      do
      {
        v28 = v26;
        v29 = *(const char **)(v27 + 16 * v26);
        if (!strcmp(v29, "leftcollocation"))
        {
          *(_QWORD *)(a5 + 16) = *(_QWORD *)(v27 + 16 * v28 + 8);
        }
        else if (!strcmp(v29, "rightcollocation"))
        {
          *(_QWORD *)(a5 + 24) = *(_QWORD *)(v27 + 16 * v28 + 8);
        }
        else if (!strcmp(v29, "dist2endmaxshort"))
        {
          *(_WORD *)(a5 + 32) = atoi(*(const char **)(v27 + 16 * v28 + 8));
        }
        else if (!strcmp(v29, "dist2endminlong"))
        {
          *(_WORD *)(a5 + 34) = atoi(*(const char **)(v27 + 16 * v28 + 8));
        }
        else if (!strcmp(v29, "punctuation"))
        {
          *(_QWORD *)(a5 + 40) = *(_QWORD *)(v27 + 16 * v28 + 8);
        }
        v26 = v28 + 1;
      }
      while (v25 > (unsigned __int16)(v28 + 1));
    }
  }
  return v23;
}

uint64_t statpunc_v2_Process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v8;
  uint64_t inserted;
  char *v10;
  __int16 v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t Features;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  uint64_t *v41;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  char *v47;
  uint64_t v48;
  const char *v49;
  char *__src;
  char __dst[256];
  uint64_t v52;

  v6 = a2;
  v52 = *MEMORY[0x1E0C80C00];
  v49 = 0;
  __src = 0;
  v48 = 0;
  v8 = LDO_ComputeText(a2, &v48);
  inserted = LH_ERROR_to_VERROR(v8);
  if ((inserted & 0x80000000) == 0)
  {
    v47 = (char *)fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(v48);
    v10 = statpunc_Strpunc(v47, (const char *)a4, (const char *)(a4 + 4), &v49);
    if (v10)
    {
      v11 = 0;
      do
      {
        ++v11;
        v10 = statpunc_Strpunc(v10 + 1, (const char *)a4, (const char *)(a4 + 4), &v49);
      }
      while (v10);
      if (v11)
      {
        v12 = statpunc_Strpunc(v47, (const char *)a4, (const char *)(a4 + 4), &v49);
        if (v12)
        {
          v16 = v12;
          v44 = a3;
          v45 = v6;
          v46 = 0;
          v17 = 0;
          while (1)
          {
            if (!v17)
            {
              log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PUNCSPTN_V2", 5, 0, (uint64_t)"traceFeatureVector %s", v13, v14, v15, (uint64_t)v47);
              v17 = (uint64_t *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 8 * *(unsigned __int8 *)(*(_QWORD *)(a4 + 8) + 1296) - 8);
              if (!v17)
              {
                inserted = 2702188554;
                log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PUNCSPTN_V2", 76000, 0, v18, v19, v20, v21, v43);
                goto LABEL_39;
              }
            }
            v22 = *(_QWORD *)(a4 + 8);
            if (*(_BYTE *)(v22 + 1296) != 1)
            {
              v23 = 0;
              v24 = 8 * (unsigned __int16)(*(unsigned __int8 *)(v22 + 1296) - 1) - 8;
              do
              {
                if (!v17[v23 / 8])
                {
                  v25 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 65);
                  v17[v23 / 8] = v25;
                  if (!v25)
                  {
                    inserted = 2702188554;
                    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PUNCSPTN_V2", 76000, 0, v26, v27, v28, v29, v43);
                    goto LABEL_33;
                  }
                }
                v30 = loc_setFeature(v22, a1, *(char **)(*(_QWORD *)(v22 + 1312) + v23), v17, "_");
                inserted = v30;
                if ((v30 & 0x80000000) != 0)
                  break;
                v31 = v24 == v23;
                v23 += 8;
              }
              while (!v31);
              v6 = v45;
              if ((v30 & 0x80000000) != 0)
                goto LABEL_33;
            }
            Features = loc_extractFeatures(a4, a1, v47, v16, v49, v17);
            if ((Features & 0x80000000) != 0)
              break;
            v33 = (char *)v46;
            if (v46)
            {
              Features = loc_setFeature(*(_QWORD *)(a4 + 8), a1, "startpred", v17, v46);
              if ((Features & 0x80000000) != 0)
                break;
            }
            Features = igtree_Process(*(_QWORD *)(a4 + 8), (uint64_t)v17, &__src);
            if ((Features & 0x80000000) != 0)
              break;
            if (!strcmp((const char *)*v17, "start"))
              v33 = __src;
            v46 = v33;
            v34 = *(_QWORD *)(a4 + 8);
            strncpy(__dst, __src, 0x100uLL);
            __dst[255] = 0;
            if (*(unsigned __int8 *)(v34 + 1296) >= 2u)
            {
              v38 = 0;
              do
              {
                v39 = strlen((const char *)v17[v38]);
                if (v39 + strlen(__dst) + 2 > 0xFF)
                  break;
                __strcat_chk();
                __strcat_chk();
                ++v38;
              }
              while (*(unsigned __int8 *)(v34 + 1296) - 1 > (int)v38);
            }
            log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PUNCSPTN_V2", 5, 0, (uint64_t)"traceFeatureVector %s", v35, v36, v37, (uint64_t)__dst);
            inserted = loc_insertMarker(v6, a1, (unsigned __int16)((_WORD)v16 - (_WORD)v47), __src);
            if ((inserted & 0x80000000) == 0)
            {
              v16 = statpunc_Strpunc(v16 + 1, (const char *)a4, (const char *)(a4 + 4), &v49);
              if (v16)
                continue;
            }
            goto LABEL_33;
          }
          inserted = Features;
LABEL_33:
          if (*(_BYTE *)(*(_QWORD *)(a4 + 8) + 1296) != 1)
          {
            v40 = (unsigned __int16)(*(unsigned __int8 *)(*(_QWORD *)(a4 + 8) + 1296) - 1);
            v41 = v17;
            do
            {
              if (*v41)
                heap_Free(*(_QWORD **)(a1 + 8), *v41);
              ++v41;
              --v40;
            }
            while (v40);
          }
          heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v17);
LABEL_39:
          a3 = v44;
        }
      }
    }
  }
  if (v48)
    OOC_PlacementDeleteObject(a3, v48);
  return inserted;
}

uint64_t loc_setFeature(uint64_t a1, uint64_t a2, char *__s1, uint64_t *a4, const char *a5)
{
  unint64_t v5;
  uint64_t v10;
  const char **i;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unsigned int v19;

  v5 = *(unsigned __int8 *)(a1 + 1296);
  if (v5 < 2)
    return 0;
  v10 = (v5 - 1);
  for (i = *(const char ***)(a1 + 1312); strcmp(__s1, *i); ++i)
  {
    ++a4;
    if (!--v10)
      return 0;
  }
  if (!*a5)
  {
    result = 0;
    *(_WORD *)*a4 = 95;
    return result;
  }
  v12 = strlen(a5);
  if (v12 <= 0x40)
  {
    v13 = (char *)*a4;
    goto LABEL_12;
  }
  v13 = (char *)heap_Realloc(*(uint64_t **)(a2 + 8), *a4, (unsigned __int16)v12 + 1);
  if (v13)
  {
    *a4 = (uint64_t)v13;
LABEL_12:
    strcpy(v13, a5);
    return 0;
  }
  log_OutPublic(*(_QWORD *)(a2 + 32), (uint64_t)"FE_PUNCSPTN_V2", 76000, 0, v14, v15, v16, v17, v19);
  return 2702188554;
}

uint64_t puncsptn_v2_dump_ldo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v18;

  v18 = 0;
  v7 = LDO_ToString(a3, &v18);
  v11 = LH_ERROR_to_VERROR(v7);
  if ((v11 & 0x80000000) != 0)
  {
    v16 = "Call to MSG_LDO_ToString failed, returning";
  }
  else
  {
    log_OutText(a1, a2, 5, 0, (uint64_t)"LDO contents: begin", v8, v9, v10, 0);
    v12 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(v18);
    log_OutText(a1, a2, 5, 0, (uint64_t)"%s", v13, v14, v15, v12);
    v16 = "LDO contents: end";
  }
  log_OutText(a1, a2, 5, 0, (uint64_t)v16, v8, v9, v10, 0);
  if (v18)
    OOC_PlacementDeleteObject(a4, v18);
  return v11;
}

uint64_t puncsptn_v2_process_ldo_with_lua(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v22;

  log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"LDO before calling %s in LuaVM", a6, a7, a8, (uint64_t)"runPuncsptnV2");
  v13 = puncsptn_v2_dump_ldo(*(_QWORD *)(a1 + 32), a2, a3, a4);
  if ((v13 & 0x80000000) != 0)
    return v13;
  v14 = LuaVMLDO_RunFunction(a5, (uint64_t)"runPuncsptnV2", a3);
  v19 = LH_ERROR_to_VERROR(v14);
  v20 = *(_QWORD *)(a1 + 32);
  if ((v19 & 0x80000000) == 0)
  {
    log_OutText(v20, a2, 5, 0, (uint64_t)"LDO after calling %s in LuaVM", v16, v17, v18, (uint64_t)"runPuncsptnV2");
    return puncsptn_v2_dump_ldo(*(_QWORD *)(a1 + 32), a2, a3, a4);
  }
  log_OutPublic(v20, a2, 76002, 0, v15, v16, v17, v18, v22);
  return v19;
}

uint64_t puncsptn_v2_reload_lua_code(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  uint64_t inited;
  int IsLuaCodeAvailable;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int ScriptFromRIFF;
  uint64_t v21;
  int IsLuaFunctionAvailable;
  uint64_t v23;
  const char *v24;
  const char *v25;
  uint64_t v27;

  v27 = 0;
  *a6 = 0;
  inited = InitRsrcFunction(a1, a2, &v27);
  if ((inited & 0x80000000) != 0)
  {
    v17 = inited;
  }
  else
  {
    if (*a5)
    {
      OOC_PlacementDeleteObject(a4, *a5);
      *a5 = 0;
    }
    IsLuaCodeAvailable = LuaVMLDO_IsLuaCodeAvailable(a1, a2, 0, a6);
    v17 = LH_ERROR_to_VERROR(IsLuaCodeAvailable);
    if ((v17 & 0x80000000) == 0)
    {
      if (*a6 != 1)
      {
        v23 = *(_QWORD *)(v27 + 32);
        goto LABEL_13;
      }
      *a6 = 0;
      v18 = PNEW_LuaVMLDO_Con(a4, a4, (uint64_t)a1, a2, (uint64_t)puncsptn_v2_hlp_lua_log_callback, (uint64_t **)a5);
      v19 = LH_ERROR_to_VERROR(v18);
      if ((v19 & 0x80000000) != 0)
      {
        v17 = v19;
        v25 = "Unable to create LuaVM";
      }
      else
      {
        ScriptFromRIFF = LuaVMLDO_LoadScriptFromRIFF(*a5, 0);
        v21 = LH_ERROR_to_VERROR(ScriptFromRIFF);
        if ((v21 & 0x80000000) != 0)
        {
          v17 = v21;
          v25 = "Unable to load Lua code from RIFF";
        }
        else
        {
          IsLuaFunctionAvailable = LuaVMLDO_IsLuaFunctionAvailable(*a5, (uint64_t)"runPuncsptnV2", a6);
          v17 = LH_ERROR_to_VERROR(IsLuaFunctionAvailable);
          if ((v17 & 0x80000000) == 0)
          {
            v23 = *(_QWORD *)(v27 + 32);
            if (*a6 == 1)
            {
              v24 = "Lua code found and loaded";
              goto LABEL_14;
            }
LABEL_13:
            v24 = "No Lua code found";
LABEL_14:
            log_OutText(v23, a3, 5, 0, (uint64_t)v24, v14, v15, v16, 0);
            if (*a6)
              return v17;
            goto LABEL_20;
          }
          v25 = "Unable to determine if Lua entry point function is present";
        }
      }
      log_OutText(*(_QWORD *)(v27 + 32), a3, 5, 0, (uint64_t)v25, v14, v15, v16, 0);
    }
  }
LABEL_20:
  if (*a5)
  {
    OOC_PlacementDeleteObject(a4, *a5);
    *a5 = 0;
  }
  return v17;
}

uint64_t puncsptn_v2_hlp_lua_log_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return log_OutText(a1, (uint64_t)"FE_PUNCSPTN_V2", 4, 0, a2, a6, a7, a8, 0);
}

uint64_t initSolutionList(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;

  v2 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 48);
  *(_QWORD *)(a1 + 360) = v2;
  if (v2)
  {
    *(_DWORD *)(a1 + 368) = 3;
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24048, 0, v3, v4, v5, v6, v8);
    return TOKENTNERROR(10);
  }
}

_QWORD *freeSolutionList(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = result;
  v2 = result[45];
  if (v2)
  {
    result = heap_Free(*(_QWORD **)(*result + 8), v2);
    v1[45] = 0;
  }
  *((_DWORD *)v1 + 92) = 0;
  return result;
}

uint64_t resetSolutionList(uint64_t a1, unsigned int a2)
{
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;

  if (!a2)
    goto LABEL_7;
  v3 = a2;
  if (a2 <= 3 && (a2 != 3 || *(unsigned __int16 *)(a1 + 368) < 4u))
    goto LABEL_7;
  v4 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 360), 12 * a2 + 12);
  if (v4)
  {
    *(_QWORD *)(a1 + 360) = v4;
    *(_WORD *)(a1 + 368) = v3;
LABEL_7:
    *(_WORD *)(a1 + 370) = 0;
    return 0;
  }
  log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24048, 0, v5, v6, v7, v8, v10);
  return TOKENTNERROR(10);
}

uint64_t initMatchList(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;

  v2 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 32);
  *(_QWORD *)(a1 + 376) = v2;
  if (v2)
  {
    *(_DWORD *)(a1 + 384) = 3;
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24048, 0, v3, v4, v5, v6, v8);
    return TOKENTNERROR(10);
  }
}

_QWORD *freeMatchList(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = result;
  v2 = result[47];
  if (v2)
  {
    result = heap_Free(*(_QWORD **)(*result + 8), v2);
    v1[47] = 0;
  }
  *((_DWORD *)v1 + 96) = 0;
  return result;
}

uint64_t resetMatchList(uint64_t a1, unsigned int a2)
{
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;

  if (!a2)
    goto LABEL_7;
  v3 = a2;
  if (a2 <= 3 && (a2 != 3 || *(unsigned __int16 *)(a1 + 384) < 4u))
    goto LABEL_7;
  v4 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 376), 8 * a2 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 376) = v4;
    *(_WORD *)(a1 + 384) = v3;
LABEL_7:
    *(_WORD *)(a1 + 386) = 0;
    return 0;
  }
  log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24048, 0, v5, v6, v7, v8, v10);
  return TOKENTNERROR(10);
}

uint64_t initAlignmentData(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v2 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 2 * *(unsigned __int16 *)(a1 + 314) + 2);
  *(_QWORD *)(a1 + 536) = v2;
  if (v2
    && (*(_WORD *)(a1 + 544) = 0,
        v7 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 2 * *(unsigned __int16 *)(a1 + 314) + 2),
        (*(_QWORD *)(a1 + 520) = v7) != 0))
  {
    *(_WORD *)(a1 + 528) = 0;
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24048, 0, v3, v4, v5, v6, v9);
    return TOKENTNERROR(10);
  }
}

_QWORD *freeAlignmentData(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  v2 = result[67];
  if (v2)
  {
    result = heap_Free(*(_QWORD **)(*result + 8), v2);
    v1[67] = 0;
  }
  *((_WORD *)v1 + 272) = 0;
  v3 = v1[65];
  if (v3)
  {
    result = heap_Free(*(_QWORD **)(*v1 + 8), v3);
    v1[65] = 0;
  }
  *((_WORD *)v1 + 264) = 0;
  return result;
}

uint64_t resetAlignmentData(uint64_t result)
{
  *(_WORD *)(result + 528) = 0;
  *(_WORD *)(result + 544) = 0;
  return result;
}

uint64_t initStrRes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;

  v4 = *(unsigned __int16 *)(a1 + 280);
  *(_WORD *)(a2 + 12) = v4;
  v5 = (_BYTE *)heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, v4);
  *(_QWORD *)a2 = v5;
  if (v5)
  {
    *v5 = 0;
    *(_DWORD *)(a2 + 8) = *(unsigned __int16 *)(a2 + 12);
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24048, 0, v6, v7, v8, v9, v11);
    return TOKENTNERROR(10);
  }
}

uint64_t resetStrRes(uint64_t *a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(unsigned __int16 *)(a2 + 12);
  if (*(unsigned __int16 *)(a2 + 8) <= v3)
    result = 0;
  else
    result = reallocStrRes(a1, a2, v3);
  if (*(_QWORD *)a2)
  {
    **(_BYTE **)a2 = 0;
    *(_WORD *)(a2 + 10) = 0;
  }
  return result;
}

uint64_t reallocStrRes(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  __int16 v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;

  v3 = a3;
  v6 = heap_Realloc(*(uint64_t **)(*a1 + 8), *(_QWORD *)a2, a3 + 1);
  if (v6)
  {
    *(_QWORD *)a2 = v6;
    *(_WORD *)(a2 + 8) = v3;
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24048, 0, v7, v8, v9, v10, v12);
    return TOKENTNERROR(10);
  }
}

uint64_t growStrRes(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  if (*(unsigned __int16 *)(a2 + 8) <= a3)
    return reallocStrRes(a1, a2, a3);
  else
    return 0;
}

_QWORD *clearStrRes(_QWORD *result, uint64_t a2)
{
  uint64_t v3;

  if (*(_WORD *)(a2 + 8))
  {
    v3 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      result = heap_Free((_QWORD *)result[1], v3);
      *(_QWORD *)a2 = 0;
    }
  }
  *(_DWORD *)(a2 + 8) = 0;
  return result;
}

uint64_t add2StringV2(uint64_t *a1, uint64_t a2, char *__s)
{
  unsigned __int16 v6;
  unsigned __int16 v7;
  unsigned int v8;
  uint64_t result;

  if (!__s)
    return 0;
  if (!*__s)
    return 0;
  v6 = strlen(__s);
  v7 = v6;
  v8 = *(unsigned __int16 *)(a2 + 8);
  if (*(unsigned __int16 *)(a2 + 10) + v6 >= v8)
  {
    result = reallocStrRes(a1, a2, (unsigned __int16)(v8 + v6));
    if ((result & 0x80000000) != 0)
      return result;
    if (!*(_WORD *)(a2 + 10))
      **(_BYTE **)a2 = 0;
  }
  strcat(*(char **)a2, __s);
  result = 0;
  *(_WORD *)(a2 + 10) += v7;
  return result;
}

uint64_t add2StringV3(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int v6;
  uint64_t result;

  v3 = *(unsigned __int16 *)(a3 + 10);
  if (!*(_WORD *)(a3 + 10))
    return 0;
  v6 = *(unsigned __int16 *)(a2 + 8);
  if (*(unsigned __int16 *)(a2 + 10) + v3 >= v6)
  {
    result = reallocStrRes(a1, a2, (unsigned __int16)(v6 + v3));
    if ((result & 0x80000000) != 0)
      return result;
    if (!*(_WORD *)(a2 + 10))
      **(_BYTE **)a2 = 0;
  }
  strcat(*(char **)a2, *(const char **)a3);
  result = 0;
  *(_WORD *)(a2 + 10) += *(_WORD *)(a3 + 10);
  return result;
}

uint64_t add2StringV4(uint64_t *a1, uint64_t a2, unsigned int a3, __int16 a4)
{
  unsigned __int16 v7;
  uint64_t result;

  v7 = a4 - a3;
  if (*(unsigned __int16 *)(a2 + 10) + (unsigned __int16)(a4 - a3) >= *(unsigned __int16 *)(a2 + 8))
  {
    result = reallocStrRes(a1, a2, (unsigned __int16)(*(_WORD *)(a2 + 10) + a4 - a3));
    if ((result & 0x80000000) != 0)
      return result;
    if (!*(_WORD *)(a2 + 10))
      **(_BYTE **)a2 = 0;
  }
  strncat(*(char **)a2, (const char *)(a1[38] + a3), v7);
  result = 0;
  *(_WORD *)(a2 + 10) += v7;
  return result;
}

uint64_t add2StringV5(uint64_t *a1, uint64_t a2, char *__s)
{
  unsigned __int16 v6;
  unsigned int v7;
  uint64_t result;

  if (!__s)
    return 0;
  if (!*__s)
    return 0;
  v6 = strlen(__s);
  v7 = *(unsigned __int16 *)(a2 + 10);
  if (v7 + v6 + 1 >= *(unsigned __int16 *)(a2 + 8))
  {
    result = reallocStrRes(a1, a2, (unsigned __int16)(v7 + v6 + 1));
    if ((result & 0x80000000) != 0)
      return result;
    v7 = *(unsigned __int16 *)(a2 + 10);
    if (!*(_WORD *)(a2 + 10))
    {
      **(_BYTE **)a2 = 0;
      v7 = *(unsigned __int16 *)(a2 + 10);
    }
  }
  memcpy((void *)(*(_QWORD *)a2 + v7), __s, v6);
  result = 0;
  *(_BYTE *)(*(_QWORD *)a2 + *(unsigned __int16 *)(a2 + 10) + (unint64_t)v6) = 0;
  *(_WORD *)(a2 + 10) += v6 + 1;
  return result;
}

uint64_t TOK_IS_PUNCT(unsigned __int8 *a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t result;
  char v4[8];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = (unsigned __int16)utf8_determineUTF8CharLength(*a1);
  __strncpy_chk();
  v4[v1] = 0;
  v2 = strlen(v4);
  result = utf8_BelongsToSet(0xAu, v4, 0, v2);
  if ((_DWORD)result != 1)
  {
    result = utf8_BelongsToSet(0xBu, v4, 0, v2);
    if ((_DWORD)result != 1)
    {
      result = utf8_BelongsToSet(0xCu, v4, 0, v2);
      if ((_DWORD)result != 1)
        return utf8_BelongsToSet(0xDu, v4, 0, v2) == 1;
    }
  }
  return result;
}

uint64_t TOK_IS_ALPHANUM(unsigned __int8 *a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t result;
  unsigned __int8 v4[8];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = (unsigned __int16)utf8_determineUTF8CharLength(*a1);
  __strncpy_chk();
  v4[v1] = 0;
  v2 = strlen((const char *)v4);
  if (utf8_strchr(g_szSpace_0, v4))
    return 0;
  result = utf8_BelongsToSet(9u, v4, 0, v2);
  if ((_DWORD)result != 1)
    return 0;
  return result;
}

uint64_t TOK_COUNT_SP_WORDS(const char *a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned __int16 v4;

  if (a1 && (v2 = strlen(a1)) != 0)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      if (utf8_strchr(g_szSpace_0, (unsigned __int8 *)&a1[v3]))
      {
        while (v3 < v2 && utf8_strchr(g_szSpace_0, (unsigned __int8 *)&a1[v3]))
          v3 += utf8_determineUTF8CharLength(a1[v3]);
      }
      else
      {
        ++v4;
        while (v3 < v2 && !utf8_strchr(g_szSpace_0, (unsigned __int8 *)&a1[v3]))
          v3 += utf8_determineUTF8CharLength(a1[v3]);
      }
    }
    while (v3 < v2);
  }
  else
  {
    return 0;
  }
  return v4;
}

uint64_t tokenRecordReadFieldLD_T_FROMPOS(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;
  int v14;

  v14 = 0;
  v6 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, char *))(a1[8] + 184))(a1[9], a1[10], a2, 1, (char *)&v14 + 2);
  v11 = 24031;
  if ((v6 & 0x80000000) == 0 && HIWORD(v14) == 1)
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, int *))(a1[8] + 168))(a1[9], a1[10], a2, 1, 1, a3, &v14);
    if ((unsigned __int16)v14 == 1)
      return 0;
    v11 = 24030;
  }
  log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], v11, 0, v7, v8, v9, v10, v13);
  return TOKENTNERROR(0);
}

uint64_t tokenRecordReadFieldLD_T_TOPOS(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;
  int v14;

  v14 = 0;
  v6 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, char *))(a1[8] + 184))(a1[9], a1[10], a2, 2, (char *)&v14 + 2);
  v11 = 24030;
  if ((v6 & 0x80000000) == 0 && HIWORD(v14) == 1)
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, int *))(a1[8] + 168))(a1[9], a1[10], a2, 2, 1, a3, &v14);
    if ((unsigned __int16)v14 == 1)
      return 0;
    v11 = 24031;
  }
  log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], v11, 0, v7, v8, v9, v10, v13);
  return TOKENTNERROR(0);
}

uint64_t tokenRecordReadFieldLD_T_TYPE(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;

  v13 = 0;
  v6 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, char *))(a1[8] + 184))(a1[9], a1[10], a2, 0, (char *)&v13 + 2);
  result = 0;
  if ((v6 & 0x80000000) == 0 && HIWORD(v13) == 1)
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, int *))(a1[8] + 168))(a1[9], a1[10], a2, 0, 1, a3, &v13);
    result = 0;
    if ((unsigned __int16)v13 != 1)
    {
      log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24032, 0, v8, v9, v10, v11, v12);
      return TOKENTNERROR(0);
    }
  }
  return result;
}

uint64_t tokenRecordReadFieldLD_T_TNTAG(_QWORD *a1, uint64_t a2, _BYTE *a3)
{
  int v7;

  v7 = 0;
  *a3 = 0;
  if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, char *))(a1[8] + 184))(a1[9], a1[10], a2, 4, (char *)&v7 + 2) & 0x80000000) == 0&& HIWORD(v7) == 1)
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _BYTE *, int *))(a1[8] + 168))(a1[9], a1[10], a2, 4, 32, a3, &v7);
  }
  return 0;
}

uint64_t tokenRecordReadFieldLD_T_LANGMAP(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v7;

  v7 = 0;
  if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, char *))(a1[8] + 184))(a1[9], a1[10], a2, 6, (char *)&v7 + 2) & 0x80000000) == 0&& HIWORD(v7) == 1)
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, int *))(a1[8] + 176))(a1[9], a1[10], a2, 6, a3, &v7);
  }
  return 0;
}

uint64_t tokenRecordDirectReadFieldLD_T_NORM(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  int v7;

  v7 = 0;
  *a3 = 0;
  if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, char *))(a1[8] + 184))(a1[9], a1[10], a2, 3, (char *)&v7 + 2) & 0x80000000) == 0&& HIWORD(v7) == 1)
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD *, int *))(a1[8] + 176))(a1[9], a1[10], a2, 3, a3, &v7);
  }
  return 0;
}

uint64_t dumpTokenRecordsInLingDB(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t FieldLD_T_FROMPOS;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t FieldLD_T_TYPE;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30[16];
  _BYTE v31[32];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v27 = 0;
  v28 = 0;
  v25 = 0;
  v26 = 0;
  if (!a1)
    return TOKENTNERROR(7);
  if (!a1[38])
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24049, 0, a5, a6, a7, a8, v23);
    return TOKENTNERROR(7);
  }
  if (a3 == 1)
    strcpy(v30, "<LOGFE> ");
  else
    v30[0] = 0;
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"%stokentn : dumpTokenRecordsInLingDB : Begin : %s", a6, a7, a8, (uint64_t)v30);
  FieldLD_T_FROMPOS = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, char *))(a1[8] + 104))(a1[9], a1[10], 1, 0, (char *)&v29 + 2);
  if ((FieldLD_T_FROMPOS & 0x80000000) != 0)
  {
LABEL_29:
    FieldLD_T_TYPE = FieldLD_T_FROMPOS;
  }
  else
  {
    FieldLD_T_TYPE = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, int *))(a1[8] + 104))(a1[9], a1[10], 3, HIWORD(v29), &v29);
    if (!(_DWORD)FieldLD_T_TYPE)
    {
      v15 = v29;
      if ((_WORD)v29)
      {
        while (1)
        {
          FieldLD_T_FROMPOS = tokenRecordReadFieldLD_T_FROMPOS(a1, v15, (uint64_t)&v25 + 2);
          if ((FieldLD_T_FROMPOS & 0x80000000) != 0)
            goto LABEL_29;
          FieldLD_T_FROMPOS = tokenRecordReadFieldLD_T_TOPOS(a1, (unsigned __int16)v29, (uint64_t)&v25);
          if ((FieldLD_T_FROMPOS & 0x80000000) != 0)
            goto LABEL_29;
          FieldLD_T_TYPE = tokenRecordReadFieldLD_T_TYPE(a1, (unsigned __int16)v29, (uint64_t)&v26);
          if ((FieldLD_T_TYPE & 0x80000000) != 0)
            goto LABEL_30;
          if (v26 - 5 <= 1)
          {
            tokenRecordReadFieldLD_T_TNTAG(a1, (unsigned __int16)v29, v31);
            if (v26 == 6)
            {
              tokenRecordDirectReadFieldLD_T_NORM(a1, (unsigned __int16)v29, &v27);
              tokenRecordReadFieldLD_T_LANGMAP(a1, (unsigned __int16)v29, (uint64_t)&v28);
            }
            FieldLD_T_TYPE = 0;
          }
          if ((unsigned __int16)v25 < HIWORD(v25))
            break;
          if ((unsigned __int16)v25 > *((unsigned __int16 *)a1 + 156))
          {
            log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24055, "%s%d%s%d", v16, v11, v12, v13, "toPos=");
            return TOKENTNERROR(0);
          }
          strncpy((char *)a1[69], (const char *)(a1[38] + HIWORD(v25)), (unsigned __int16)v25 - (unint64_t)HIWORD(v25));
          *(_BYTE *)(a1[69] - HIWORD(v25) + (unsigned __int16)v25) = 0;
          if (v26 > 4)
          {
            if (v26 == 5)
            {
              log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"%s[dbId=%d] %3d,%3d ESC(%-9s) \"%s\" ", v17, v18, v19, (uint64_t)v30);
            }
            else if (v26 == 6)
            {
              log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"%s[dbId=%d] %3d,%3d %-15s \"%s\" \"%s\" langMap=\"%s\"", v17, v18, v19, (uint64_t)v30);
            }
          }
          else
          {
            v24 = 0;
            (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t *))(a1[8] + 264))(a1[9], a1[10], (unsigned __int16)v26, &v24);
            log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"%s[dbId=%d] %3d,%3d %-15s \"%s\"", v20, v21, v22, (uint64_t)v30);
          }
          if (!(*(unsigned int (**)(_QWORD, _QWORD, _QWORD, int *))(a1[8] + 120))(a1[9], a1[10], (unsigned __int16)v29, &v29))
          {
            v15 = v29;
            if ((_WORD)v29)
              continue;
          }
          goto LABEL_30;
        }
        log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24055, "%s%d%s%d", v16, v11, v12, v13, "fromPos=");
        return TOKENTNERROR(0);
      }
    }
  }
LABEL_30:
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"%stokentn : dumpTokenRecordsInLingDB End (%x)", v11, v12, v13, (uint64_t)v30);
  return FieldLD_T_TYPE;
}

uint64_t dumpTokenLDO(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  int v14;
  int v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  unint64_t v26;
  int U32Attribute;
  int StringAttribute;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48[16];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v47 = 0;
  if (!a1)
    return TOKENTNERROR(7);
  if (!*(_QWORD *)(a1 + 304))
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24049, 0, a5, a6, a7, a8, v40);
    return TOKENTNERROR(7);
  }
  if (a3 == 1)
    strcpy(v48, "<LOGFE> ");
  else
    v48[0] = 0;
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 4, 0, (uint64_t)"%stokentn : dumpTokenLDO : Begin : %s", a6, a7, a8, (uint64_t)v48);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 16);
  LDOObject_GetCategory(v10, &v47);
  v11 = 0;
  v12 = *(uint64_t **)(v10 + 80);
  v13 = *(_QWORD *)(v10 + 88);
  if ((unint64_t)v12 >= v13)
  {
LABEL_12:
    LDO_GetLabels(*(_QWORD *)(a1 + 264), &v44);
    v25 = (uint64_t **)v44.n128_u64[1];
    v26 = v45;
    if (v44.n128_u64[1] >= v45)
    {
LABEL_27:
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 4, 0, (uint64_t)"%stokentn : dumpTokenLDO End (%x)", v22, v23, v24, (uint64_t)v48);
    }
    else
    {
      while (1)
      {
        v43 = 0;
        v44.n128_u64[0] = 0;
        v46 = 0;
        v41 = 0;
        v42 = 0;
        U32Attribute = LDOObject_GetU32Attribute(*v25, "_TTYPE", &v41, (_DWORD *)&v41 + 1);
        v11 = LH_ERROR_to_VERROR(U32Attribute);
        if ((v11 & 0x80000000) != 0)
          break;
        if ((_DWORD)v41 == 1 && HIDWORD(v41) == 6)
        {
          LDOLabel_GetAbsoluteFrom((uint64_t)*v25);
          LDOLabel_GetAbsoluteTo((uint64_t)*v25);
          StringAttribute = LDOObject_GetStringAttribute(*v25, "TNTAG", &v41, (uint64_t *)&v44);
          v30 = LH_ERROR_to_VERROR(StringAttribute);
          if ((v30 & 0x80000000) != 0)
            return v30;
          v31 = LDOObject_GetStringAttribute(*v25, "NORM", &v41, &v46);
          v30 = LH_ERROR_to_VERROR(v31);
          if ((v30 & 0x80000000) != 0)
            return v30;
          v32 = LDOObject_GetStringAttribute(*v25, "REGEXSUBMATCHES", &v41, &v43);
          v11 = LH_ERROR_to_VERROR(v32);
          if ((v11 & 0x80000000) != 0)
            return v11;
          if (*(_DWORD *)(a1 + 960) == 1)
          {
            log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 4, 0, (uint64_t)"%s%3d,%3d : type=TOKEN_INT_TN TNTAG=%-15s NORM=%s REGEXSUBMATCHES=%s", v33, v34, v35, (uint64_t)v48);
          }
          else
          {
            v36 = LDOObject_GetStringAttribute(*v25, "DCTMATCHES", &v41, &v42);
            v11 = LH_ERROR_to_VERROR(v36);
            if ((v11 & 0x80000000) != 0)
              return v11;
            log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 4, 0, (uint64_t)"%s%3d,%3d : type=TOKEN_INT_TN TNTAG=%-15s NORM=%s REGEXSUBMATCHES=%s DCTMATCHES=%s", v37, v38, v39, (uint64_t)v48);
          }
        }
        if ((unint64_t)++v25 >= v26)
          goto LABEL_27;
      }
    }
  }
  else
  {
    v14 = 0;
    while (1)
    {
      v44.n128_u64[0] = 0;
      v46 = 0;
      LODWORD(v43) = 0;
      LODWORD(v42) = 0;
      LDOObject_GetType(*v12, (uint64_t *)&v44);
      v15 = LDOTreeNode_ComputeText(*v12, &v46);
      v11 = LH_ERROR_to_VERROR(v15);
      if ((v11 & 0x80000000) != 0)
        break;
      ++v14;
      LDOTreeNode_ComputeAbsoluteFrom(*v12, &v43);
      v16 = *v12++;
      LDOTreeNode_ComputeAbsoluteTo(v16, &v42);
      v17 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      v18 = *(_QWORD *)(a1 + 184);
      fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(v46);
      log_OutText(v17, v18, 4, 0, (uint64_t)"%sToken[%d] %d,%d : %s %s", v19, v20, v21, (uint64_t)v48);
      OOC_PlacementDeleteObject(a1 + 224, v46);
      if ((unint64_t)v12 >= v13)
        goto LABEL_12;
    }
  }
  return v11;
}

uint64_t saveExpansionInLDO(uint64_t a1, char *a2, uint64_t a3, char *a4, char *a5, char *a6, uint64_t a7, unsigned __int16 *a8)
{
  unsigned int v8;
  unsigned int v9;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned __int16 *v33;
  uint64_t v34;
  _DWORD *v35;
  int v36;
  int v37;
  int v38;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;

  v42 = 0;
  v8 = *a8;
  v40 = a8[1];
  v41 = v8;
  if (a1)
  {
    v9 = a7;
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 4, 0, (uint64_t)"tokentn : saveExpansionInLingDB Begin (%s)", (uint64_t)a6, a7, (uint64_t)a8, a3);
    v16 = LDO_AddLabelOnSubstring(*(_QWORD *)(a1 + 264), "TOKEN", "TOKEN", &v41, &v40, &v42);
    v17 = LH_ERROR_to_VERROR(v16);
    if ((v17 & 0x80000000) != 0)
      goto LABEL_21;
    LDOObject_SetU32Attribute(v42, "_TTYPE", 6);
    v17 = LH_ERROR_to_VERROR(v21);
    if ((v17 & 0x80000000) != 0)
      goto LABEL_21;
    v22 = LDOObject_SetStringAttribute(v42, "TNTAG", a2);
    v17 = LH_ERROR_to_VERROR(v22);
    if ((v17 & 0x80000000) != 0)
      goto LABEL_21;
    v23 = LDOObject_SetStringAttribute(v42, "NORM", (char *)(a3 + v9));
    v24 = LH_ERROR_to_VERROR(v23);
    if ((v24 & 0x80000000) != 0)
      goto LABEL_22;
    if (a6)
    {
      v25 = LDOObject_SetStringAttribute(v42, "PATTERN", a6);
      v24 = LH_ERROR_to_VERROR(v25);
      if ((v24 & 0x80000000) != 0)
        goto LABEL_22;
    }
    if (a4)
    {
      v26 = LDOObject_SetStringAttribute(v42, "REGEXSUBMATCHES", a4);
      v24 = LH_ERROR_to_VERROR(v26);
      if ((v24 & 0x80000000) != 0)
        goto LABEL_22;
    }
    if (a5)
    {
      v27 = LDOObject_SetStringAttribute(v42, "DCTMATCHES", a5);
      v24 = LH_ERROR_to_VERROR(v27);
      if ((v24 & 0x80000000) != 0)
        goto LABEL_22;
    }
    v28 = *(unsigned __int16 *)(a1 + 544);
    if (v28 >= 2)
    {
      LDOObject_SetU32Attribute(v42, "_MRKRD", v28);
      v17 = LH_ERROR_to_VERROR(v29);
      if ((v17 & 0x80000000) != 0)
        goto LABEL_21;
      v30 = (_DWORD *)heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), *(unsigned __int16 *)(a1 + 544), 4);
      if (!v30)
      {
        v24 = 10;
        goto LABEL_22;
      }
      v31 = (uint64_t)v30;
      v32 = *(unsigned __int16 *)(a1 + 544);
      if (*(_WORD *)(a1 + 544))
      {
        v33 = *(unsigned __int16 **)(a1 + 520);
        v34 = *(unsigned __int16 *)(a1 + 544);
        v35 = v30;
        do
        {
          v36 = *v33++;
          *v35++ = v36;
          --v34;
        }
        while (v34);
      }
      v37 = LDOObject_SetListU32Attribute(v42, "_MRK", v30, v32);
      v24 = LH_ERROR_to_VERROR(v37);
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v31);
      if ((v24 & 0x80000000) != 0)
        goto LABEL_22;
    }
    if (!*(_WORD *)(a1 + 418))
    {
LABEL_22:
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 4, 0, (uint64_t)"tokentn : saveExpansionInLingDB End (%x) ", v18, v19, v20, v24);
      return v24;
    }
    v38 = LDOObject_SetStringAttribute(v42, "LANGMAP", (char *)(*(_QWORD *)(a1 + 408) + v9));
    v17 = LH_ERROR_to_VERROR(v38);
LABEL_21:
    v24 = v17;
    goto LABEL_22;
  }
  return TOKENTNERROR(7);
}

uint64_t setDomainsOnSentence(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t DomainDefBlockInfo;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t **v29;
  int StringAttribute;
  __int16 AbsoluteFrom;
  __int16 AbsoluteTo;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int IsRemappable;
  char *v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int16 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t **v75;
  __int16 v76;
  int v77;
  uint64_t v78;
  int v79;
  char *__s2;
  uint64_t *v81;
  uint64_t v82;
  unsigned __int16 v83;
  uint64_t v84;
  _WORD v85[500];
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v84 = 0;
  v83 = 0;
  v81 = 0;
  v82 = 0;
  if (!a1)
    return TOKENTNERROR(7);
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokentn : setDomainsOnSentence Begin", a6, a7, a8, v73);
  DomainDefBlockInfo = dumpTokenRecordsInLingDB(a1, (uint64_t)"TRACE", 1, v9, v10, v11, v12, v13);
  if ((DomainDefBlockInfo & 0x80000000) == 0)
  {
    FEData_blockData_getDomains2SearchIn(a1, *((unsigned __int16 *)a1 + 168), a1[43], (uint64_t)v85, &v83, 0, v14, v15);
    log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokentn : %d block(s) to search in", v17, v18, v19, v83);
    if (v83)
    {
      for (i = 0; i < v83; ++i)
      {
        FEData_blockData_newGetDomainDefBlockInfo(a1, (unsigned __int16)v85[i], &v82, v20, v21, v22, v23, v24);
        if (*(_WORD *)(v82 + 24))
        {
          v26 = 0;
          v27 = 0;
          do
          {
            log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokentn : domain[%d,%d,%s,type=%d] marker \"%s\"%s %s", v22, v23, v24, i);
            ++v27;
            v26 += 72;
          }
          while (v27 < *(unsigned __int16 *)(v82 + 24));
        }
      }
      v28 = *(_QWORD *)(a1[33] + 32);
      v29 = *(uint64_t ***)(v28 + 24);
      if ((unint64_t)v29 < *(_QWORD *)(v28 + 32))
      {
        do
        {
          __s2 = 0;
          v79 = 0;
          StringAttribute = LDOObject_GetStringAttribute(*v29, "TNTAG", &v79, (uint64_t *)&__s2);
          DomainDefBlockInfo = LH_ERROR_to_VERROR(StringAttribute);
          if ((DomainDefBlockInfo & 0x80000000) != 0)
            return DomainDefBlockInfo;
          if (v79)
          {
            v78 = 0;
            v77 = 0;
            AbsoluteFrom = LDOLabel_GetAbsoluteFrom((uint64_t)*v29);
            v75 = v29;
            AbsoluteTo = LDOLabel_GetAbsoluteTo((uint64_t)*v29);
            log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"doing DB token %s %d,%d", v33, v34, v35, (uint64_t)__s2);
            if (v83)
            {
              v38 = 0;
              v76 = AbsoluteFrom;
              do
              {
                FEData_blockData_newGetDomainDefBlockInfo(a1, (unsigned __int16)v85[v38], &v82, v36, v37, v22, v23, v24);
                IsRemappable = FEData_blockData_IsRemappable(a1, __s2, &v78, (_WORD *)&v77 + 1, &v77, v39, v40, v41);
                v81 = 0;
                v43 = __s2;
                if (IsRemappable == 1)
                {
                  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"domain %s is remappable to %s", v22, v23, v24, (uint64_t)__s2);
                  v44 = HIWORD(v77);
                  v45 = v77;
                  DomainDefBlockInfo = FEData_blockData_newGetDomainDefBlockInfo(a1, (unsigned __int16)v77, &v81, v46, v47, v48, v49, v50);
                  if ((DomainDefBlockInfo & 0x80000000) != 0)
                    return DomainDefBlockInfo;
                  v55 = v81;
                  if (v81)
                    goto LABEL_24;
                  log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24041, "%s%s", v51, v52, v53, v54, "skipping undefined remapped domain:");
                }
                else
                {
                  v55 = (uint64_t *)v82;
                  v56 = *(unsigned __int16 *)(v82 + 24);
                  if (*(_WORD *)(v82 + 24))
                  {
                    v57 = 0;
                    v58 = *(unsigned __int16 **)(v82 + 16);
                    while (strcmp((const char *)(*((_QWORD *)v58 + 6) + *v58), v43))
                    {
                      ++v57;
                      v58 += 36;
                      if (v56 == v57)
                        goto LABEL_35;
                    }
                    v45 = v85[v38];
                    v81 = v55;
                    v44 = (unsigned __int16)v57;
LABEL_24:
                    v59 = v55[2];
                    DomainDefBlockInfo = FERuntimeData_AddDomainRange((uint64_t)a1, &v84);
                    if ((DomainDefBlockInfo & 0x80000000) != 0)
                      return DomainDefBlockInfo;
                    v63 = v84;
                    *(_WORD *)(v84 + 6) = v45;
                    *(_WORD *)(v63 + 4) = v44;
                    *(_WORD *)v63 = v76;
                    *(_WORD *)(v63 + 2) = AbsoluteTo;
                    *(_DWORD *)(v63 + 8) = 1;
                    log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"Set Active Domain[%s:%s] range %d,%d", v60, v61, v62, *v81);
                    if (!strcmp((const char *)(*(_QWORD *)(v59 + 72 * v44 + 48)+ *(unsigned __int16 *)(v59 + 72 * v44)), (const char *)a1[36])|| *(_DWORD *)(v59 + 72 * v44 + 60) == 1)
                    {
                      log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"normal domain OR was remapped to EscNormal - set additional domains, if any", v22, v23, v24, v74);
                      v64 = v82;
                      if (*(_WORD *)(v82 + 24))
                      {
                        v65 = 0;
                        v66 = 48;
                        do
                        {
                          if (v44 != v65)
                          {
                            v67 = *(_QWORD *)(v64 + 16);
                            if (!strcmp((const char *)(*(_QWORD *)(v67 + v66) + *(unsigned __int16 *)(v67 + v66 - 48)), (const char *)a1[36])|| *(_DWORD *)(v67 + v66 + 12) == 1)
                            {
                              DomainDefBlockInfo = FERuntimeData_AddDomainRange((uint64_t)a1, &v84);
                              if ((DomainDefBlockInfo & 0x80000000) != 0)
                                return DomainDefBlockInfo;
                              v71 = v84;
                              *(_WORD *)(v84 + 6) = v85[v38];
                              *(_WORD *)(v71 + 4) = v65;
                              *(_WORD *)v71 = v76;
                              *(_WORD *)(v71 + 2) = AbsoluteTo;
                              *(_DWORD *)(v71 + 8) = 1;
                              log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"Set (as mapped to normal) Active Domain[%s:%s] range %d,%d", v68, v69, v70, *(_QWORD *)v82);
                              v64 = v82;
                            }
                          }
                          ++v65;
                          v66 += 72;
                        }
                        while (v65 < *(unsigned __int16 *)(v64 + 24));
                      }
                    }
                  }
                }
LABEL_35:
                ++v38;
              }
              while (v38 < v83);
            }
            v29 = v75;
          }
          ++v29;
        }
        while ((unint64_t)v29 < *(_QWORD *)(*(_QWORD *)(a1[33] + 32) + 32));
      }
      log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokentn : setDomainsOnSentence End (%x)", v22, v23, v24, DomainDefBlockInfo);
    }
    else
    {
      return 0;
    }
  }
  return DomainDefBlockInfo;
}

uint64_t mergeDomainsOnSentence(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t DomainBlockIndex;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t DomainDefBlockInfo;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  int v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  unsigned __int16 v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  int v42;
  unsigned __int16 v43;
  unsigned __int16 v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  _WORD v47[500];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v45 = 0;
  v46 = 0;
  v43 = 0;
  v42 = 0;
  v41 = 0;
  v39 = 0;
  v40 = 0;
  if (!a1)
    return TOKENTNERROR(7);
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokentn : mergeDomainsOnSentence Begin", a6, a7, a8, v37);
  v44 = 0;
  FERuntimeData_GetActiveDomains((uint64_t)a1, (uint64_t)v47, &v44, 0, *((unsigned __int16 *)a1 + 156), 1);
  if (v44)
  {
    v9 = 0;
    v10 = 1;
    do
    {
      FERuntimeData_GetDomainRange((uint64_t)a1, (unsigned __int16)v47[v9], &v46);
      DomainBlockIndex = FERuntimeData_GetDomainBlockIndex(a1, (unsigned __int16)v47[v9++], &v43, (_WORD *)&v42 + 1);
      v15 = v44;
      v16 = v10;
      if (v9 < v44)
      {
        while (1)
        {
          FERuntimeData_GetDomainRange((uint64_t)a1, (unsigned __int16)v47[v16], &v45);
          v17 = FERuntimeData_GetDomainBlockIndex(a1, (unsigned __int16)v47[v16], &v42, &v41);
          if (*((_DWORD *)v45 + 2) == 1
            && (unsigned __int16)v42 == v43
            && v41 == HIWORD(v42)
            && *v46 == *v45
            && v46[1] == v45[1])
          {
            *((_DWORD *)v45 + 2) = 0;
            log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokentn : Remove duplicate domain %d,%d RANGE %d,%d ?", v12, v13, v14, 1);
          }
          if ((v17 & 0x80000000) != 0)
            goto LABEL_42;
          ++v16;
          v15 = v44;
          if (v16 >= v44)
            goto LABEL_15;
        }
      }
      v17 = DomainBlockIndex;
LABEL_15:
      ++v10;
    }
    while (v9 < v15);
    if ((_DWORD)v15)
    {
      v18 = 0;
      while (1)
      {
        FERuntimeData_GetDomainRange((uint64_t)a1, (unsigned __int16)v47[v18], &v46);
        DomainDefBlockInfo = FERuntimeData_GetDomainBlockIndex(a1, (unsigned __int16)v47[v18], &v43, (_WORD *)&v42 + 1);
        if ((DomainDefBlockInfo & 0x80000000) != 0)
          goto LABEL_41;
        DomainDefBlockInfo = FEData_blockData_newGetDomainDefBlockInfo(a1, v43, &v40, v20, v21, v12, v13, v14);
        if ((DomainDefBlockInfo & 0x80000000) != 0)
          goto LABEL_41;
        v22 = *(_QWORD *)(v40 + 16);
        v23 = (unsigned __int16 *)(v22 + 72 * HIWORD(v42));
        if (*(_WORD *)(*(_QWORD *)(v40 + 32) + 16 * v23[6] + 8) && *((_DWORD *)v46 + 2) == 1)
        {
          v38 = v46[1];
          v24 = v22 + 72 * HIWORD(v42);
          v26 = *(_QWORD *)(v24 + 48);
          v25 = (_QWORD *)(v24 + 48);
          log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokentn : Modify domain \"%s\" RANGE %d,%d ?", v12, v13, v14, v26 + *v23);
          if (v18 < v44)
          {
            v27 = v18;
            do
            {
              FERuntimeData_GetDomainRange((uint64_t)a1, (unsigned __int16)v47[v27], &v45);
              DomainDefBlockInfo = FERuntimeData_GetDomainBlockIndex(a1, (unsigned __int16)v47[v27], &v42, &v41);
              if ((DomainDefBlockInfo & 0x80000000) != 0)
                goto LABEL_41;
              DomainDefBlockInfo = FEData_blockData_newGetDomainDefBlockInfo(a1, (unsigned __int16)v42, &v39, v28, v29, v12, v13, v14);
              if ((DomainDefBlockInfo & 0x80000000) != 0)
                goto LABEL_41;
              v30 = v45;
              if (v45 != v46 && *((_DWORD *)v45 + 2) == 1)
              {
                v31 = *v45;
                if (v31 == v38 || v31 == *v46 && v45[1] == v46[1])
                {
                  v32 = (const char *)(*v25 + *v23);
                  if (!strcmp(v32, (const char *)(*(_QWORD *)(*(_QWORD *)(v39 + 16) + 72 * v41 + 48)+ *(unsigned __int16 *)(*(_QWORD *)(v39 + 16) + 72 * v41))))
                  {
                    v38 = v30[1];
                    log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokentn : Modify domain \"%s\" RANGE %d,%d -> %d %d (merge with %s)", v33, v34, v35, (uint64_t)v32);
                    *((_DWORD *)v45 + 2) = 0;
                  }
                }
              }
            }
            while (++v27 < v44);
          }
          if ((__int16)v46[1] != v38)
          {
            DomainDefBlockInfo = FERuntimeData_UpdateDomainRange(a1, (unsigned __int16)v18, v38);
            if ((DomainDefBlockInfo & 0x80000000) != 0)
              goto LABEL_41;
          }
        }
        if (++v18 >= v44)
          goto LABEL_40;
      }
    }
    if ((v17 & 0x80000000) != 0)
      goto LABEL_42;
  }
LABEL_40:
  DomainDefBlockInfo = FERuntimeData_PruneAndDumpActiveDomains(a1);
LABEL_41:
  v17 = DomainDefBlockInfo;
LABEL_42:
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokentn : mergeDomainsOnSentence End (%x)", v12, v13, v14, v17);
  return v17;
}

uint64_t TOKENTNERROR(int a1)
{
  return a1 | 0x89602000;
}

uint64_t tokentn_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2304778241;
  result = 0;
  *a2 = &ITokenizer_0;
  return result;
}

uint64_t tokenTN_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  v7 = 0;
  if (!a3)
    return 2304778247;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t tokenTN_ClassClose()
{
  return 0;
}

uint64_t tokenTN_ObjOpen(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t Object;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v59 = 0;
  v60 = 0;
  v57 = 0;
  v58 = 0;
  v5 = 2304778250;
  v55 = 0;
  v56 = 0;
  if (!a5)
    return 2304778247;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v60);
  if ((inited & 0x80000000) == 0)
  {
    inited = InitRsrcFunction(a1, a2, &v59);
    if ((inited & 0x80000000) == 0)
    {
      log_OutText(*(_QWORD *)(v60 + 32), (uint64_t)"TOKENTN", 4, 0, (uint64_t)"tokentn : ObjOpen Begin", v12, v13, v14, v53);
      v15 = heap_Calloc(*(_QWORD **)(v60 + 8), 1, 16);
      if (!v15)
      {
        log_OutPublic(*(_QWORD *)(v60 + 32), (uint64_t)"TOKENTN", 21000, 0, v16, v17, v18, v19, v54);
LABEL_43:
        log_OutText(*(_QWORD *)(v60 + 32), (uint64_t)"TOKENTN", 4, 0, (uint64_t)"tokentn : ObjOpen End (%x)", v25, v26, v27, v5);
        return v5;
      }
      v20 = v15;
      *(_QWORD *)v15 = 0;
      *(_DWORD *)(v15 + 8) = 0;
      v21 = heap_Calloc(*(_QWORD **)(v60 + 8), 1, 968);
      if (v21)
      {
        v28 = v21;
        *(_QWORD *)v20 = v21;
        *(_DWORD *)(v20 + 8) = 58765;
        *(_QWORD *)v21 = v60;
        *(_QWORD *)(v21 + 8) = a3;
        v29 = v59;
        *(_QWORD *)(v21 + 16) = a4;
        *(_QWORD *)(v21 + 24) = v29;
        *(_QWORD *)(v21 + 32) = a1;
        *(_QWORD *)(v21 + 40) = a2;
        *(_QWORD *)(v21 + 96) = 0;
        v30 = (_OWORD *)(v21 + 96);
        *(_DWORD *)(v21 + 104) = 0;
        *(_QWORD *)(v21 + 120) = 0;
        v31 = (_OWORD *)(v21 + 120);
        *(_DWORD *)(v21 + 128) = 0;
        *(_QWORD *)(v21 + 152) = 0;
        *(_QWORD *)(v21 + 160) = 0;
        *(_QWORD *)(v21 + 176) = 0;
        *(_QWORD *)(v21 + 184) = "TOKENTN";
        *(_WORD *)(v21 + 336) = 0;
        *(_QWORD *)(v21 + 344) = 0;
        *(_BYTE *)(v21 + 352) = 0;
        *(_DWORD *)(v21 + 548) = 0;
        *(_QWORD *)(v21 + 552) = 0;
        *(_QWORD *)(v21 + 520) = 0;
        *(_WORD *)(v21 + 528) = 0;
        *(_QWORD *)(v21 + 536) = 0;
        *(_WORD *)(v21 + 544) = 0;
        *(_QWORD *)(v21 + 288) = 0;
        *(_DWORD *)(v21 + 296) = 0;
        *(_WORD *)(v21 + 608) = 257;
        v32 = (_DWORD *)(v21 + 612);
        *(_QWORD *)(v21 + 612) = 0;
        *(_DWORD *)(v21 + 960) = 0;
        *(_WORD *)(v21 + 280) = 32;
        if ((paramc_ParamGetUInt(*(_QWORD *)(v60 + 40), (uint64_t)"tokentninitstrlen", (unsigned int *)&v55 + 1) & 0x80000000) == 0)
          *(_WORD *)(v28 + 280) = WORD2(v55);
        *(_WORD *)(v28 + 282) = 5;
        if ((paramc_ParamGetUInt(*(_QWORD *)(v60 + 40), (uint64_t)"tokentnmaxpcreframeblocks", (unsigned int *)&v55 + 1) & 0x80000000) == 0)
          *(_WORD *)(v28 + 282) = WORD2(v55);
        *(_WORD *)(v28 + 284) = 20;
        if ((paramc_ParamGetUInt(*(_QWORD *)(v60 + 40), (uint64_t)"tokentnnumframesinblock", (unsigned int *)&v55 + 1) & 0x80000000) == 0)
          *(_WORD *)(v28 + 284) = WORD2(v55);
        v33 = nuance_pcre_ObjOpen(a3, a4, v28 + 136);
        if ((v33 & 0x80000000) != 0)
        {
          v51 = v33;
          log_OutPublic(*(_QWORD *)(*(_QWORD *)v28 + 32), *(_QWORD *)(v28 + 184), 24021, 0, v34, v35, v36, v37, v54);
          v5 = v51;
        }
        else
        {
          Object = addIdentifier2List_0(v28, "x");
          if ((Object & 0x80000000) == 0)
          {
            if ((objc_GetObject(*(_QWORD *)(v60 + 48), (uint64_t)"FE_DCTLKP", &v57) & 0x80000000) != 0)
            {
              v5 = 0;
              v50 = 24022;
              goto LABEL_47;
            }
            v39 = v57;
            *(_QWORD *)(v28 + 88) = *(_QWORD *)(v57 + 8);
            *v30 = *(_OWORD *)(v39 + 16);
            if ((objc_GetObject(*(_QWORD *)(v60 + 48), (uint64_t)"FE_DEPES", &v56) & 0x80000000) != 0)
            {
              v5 = 0;
              v50 = 24023;
              goto LABEL_47;
            }
            v40 = v56;
            *(_QWORD *)(v28 + 112) = *(_QWORD *)(v56 + 8);
            *v31 = *(_OWORD *)(v40 + 16);
            Object = objc_GetObject(*(_QWORD *)(v60 + 48), (uint64_t)"LINGDB", &v58);
            if ((Object & 0x80000000) == 0)
            {
              *(_QWORD *)(v28 + 64) = *(_QWORD *)(v58 + 8);
              Object = FEData_ObjOpen((uint64_t)a3, a4, (uint64_t *)v28, v23, v24, v25, v26, v27);
              if ((Object & 0x80000000) == 0)
              {
                Object = FERuntimeData_ObjOpen((uint64_t *)v28, v41, v22, v23, v24, v25, v26, v27);
                if ((Object & 0x80000000) == 0)
                {
                  Object = FEFunctionMap_ObjOpen((uint64_t *)v28, v42, v22, v23, v24, v25, v26, v27);
                  if ((Object & 0x80000000) == 0)
                  {
                    Object = tokenizer_ObjOpen((uint64_t *)v28, v43, v22, v23, v24, v25, v26, v27);
                    if ((Object & 0x80000000) == 0)
                    {
                      Object = textnormalizer_ObjOpen((uint64_t *)v28, v44, v22, v23, v24, v25, v26, v27);
                      if ((Object & 0x80000000) == 0)
                      {
                        Object = createIDStrings_0((_BYTE *)v28);
                        if ((Object & 0x80000000) == 0)
                        {
                          if (!*(_WORD *)(v28 + 336))
                            goto LABEL_49;
                          v45 = 0;
                          do
                          {
                            log_OutText(*(_QWORD *)(*(_QWORD *)v28 + 32), *(_QWORD *)(v28 + 184), 5, 0, (uint64_t)"tokentn : identifier=\"%s\"", v25, v26, v27, *(_QWORD *)(*(_QWORD *)(v28 + 344) + 8 * v45++));
                            v46 = *(unsigned __int16 *)(v28 + 336);
                          }
                          while (v45 < v46);
                          if (!*(_WORD *)(v28 + 336))
                          {
LABEL_49:
                            log_OutPublic(*(_QWORD *)(*(_QWORD *)v28 + 32), (uint64_t)"TOKENTN", 24024, 0, v24, v25, v26, v27, v54);
                            v5 = 2304778240;
                            goto LABEL_42;
                          }
                          Object = FEData_blockData_loadDataFiles(v28, v46, *(_QWORD *)(v28 + 344), (int *)(v28 + 616), v24, v25, v26, v27);
                          if ((Object & 0x80000000) == 0)
                          {
                            Object = getFECFGInfo_0(v28);
                            if ((Object & 0x80000000) == 0)
                            {
                              Object = nn_tn_checkIfActive(a3, a4, v60, *(_QWORD *)(v28 + 184), v32);
                              if ((Object & 0x80000000) == 0)
                              {
                                if (*v32 != 1
                                  || (Object = nn_tn_Load(a3, a4, *(_WORD **)(v28 + 32), *(_QWORD *)(v28 + 40), v60, *(_QWORD *)(v28 + 184), *(_QWORD *)(v28 + 88), v27, *(_QWORD *)(v28 + 96), *(_QWORD *)(v28 + 104), (int *)(v28 + 640)), (Object & 0x80000000) == 0))
                                {
                                  *(_QWORD *)(v28 + 192) = heap_Alloc;
                                  *(_QWORD *)(v28 + 200) = heap_Calloc;
                                  *(_QWORD *)(v28 + 208) = heap_Realloc;
                                  *(_QWORD *)(v28 + 216) = heap_Free;
                                  v47 = OOCAllocator_Con(v28 + 224, (_OWORD *)(v28 + 192), *(_QWORD *)(*(_QWORD *)v28 + 8));
                                  v5 = LH_ERROR_to_VERROR(v47);
                                  if ((v5 & 0x80000000) != 0)
                                  {
                                    log_OutPublic(*(_QWORD *)(*(_QWORD *)v28 + 32), (uint64_t)"TOKENTN", 24024, 0, v48, v25, v26, v27, v54);
                                  }
                                  else
                                  {
                                    *(_QWORD *)(v28 + 264) = 0;
                                    if (*(_DWORD *)(v28 + 616) != 1)
                                    {
LABEL_48:
                                      *(_QWORD *)a5 = v20;
                                      *(_DWORD *)(a5 + 8) = 58764;
                                      goto LABEL_43;
                                    }
                                    v49 = load_lua_code_0(v28, &v55);
                                    v5 = v49;
                                    if ((v49 & 0x80000000) == 0 && !(_DWORD)v55)
                                    {
                                      v50 = 24071;
LABEL_47:
                                      log_OutPublic(*(_QWORD *)(*(_QWORD *)v28 + 32), *(_QWORD *)(v28 + 184), v50, 0, v24, v25, v26, v27, v54);
                                      goto LABEL_48;
                                    }
                                    if ((v49 & 0x80000000) == 0)
                                      goto LABEL_48;
                                  }
                                  goto LABEL_42;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v5 = Object;
        }
      }
LABEL_42:
      tokenTN_loc_ObjClose(v60, (uint64_t *)v20, v22, v23, v24, v25, v26, v27);
      goto LABEL_43;
    }
  }
  return inited;
}

uint64_t tokenTN_ObjClose(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v3 = 2304778248;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 58764, 16) & 0x80000000) == 0
    && (safeh_HandleCheck(*a1, a1[1], 58765, 968) & 0x80000000) == 0)
  {
    v7 = (uint64_t *)*a1;
    v8 = *(_QWORD *)(*a1 + 184);
    log_OutText(*(_QWORD *)(*(_QWORD *)*a1 + 32), v8, 4, 0, (uint64_t)"tokentn : ObjClose Begin", v4, v5, v6, v28);
    v9 = *v7;
    v3 = FEData_blockData_unloadDataFiles(v7, v10, v11, v12, v13, v14, v15, v16);
    v17 = v7[34];
    if (v17)
    {
      OOC_PlacementDeleteObject((uint64_t)(v7 + 28), v17);
      v7[34] = 0;
    }
    kaldi::nnet1::Component::IsUpdatable((kaldi::nnet1::Component *)(v7 + 28));
    tokenTN_loc_ObjClose(v9, a1, v18, v19, v20, v21, v22, v23);
    log_OutText(*(_QWORD *)(v9 + 32), v8, 4, 0, (uint64_t)"tokentn : ObjClose End (%x)", v24, v25, v26, v3);
  }
  return v3;
}

uint64_t tokenTN_ObjReopen(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t IDStrings_0;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v31;
  int v32;

  v3 = 2304778248;
  v32 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 58764, 16) & 0x80000000) == 0
    && (safeh_HandleCheck(*a1, a1[1], 58765, 968) & 0x80000000) == 0)
  {
    v4 = *a1;
    v5 = *(_QWORD *)(v4 + 344);
    if (v5)
    {
      if (*(_WORD *)(v4 + 336))
      {
        v6 = 0;
        do
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)v4 + 8), *(_QWORD *)(*(_QWORD *)(v4 + 344) + 8 * v6));
          *(_QWORD *)(*(_QWORD *)(v4 + 344) + 8 * v6++) = 0;
        }
        while (v6 < *(unsigned __int16 *)(v4 + 336));
        v5 = *(_QWORD *)(v4 + 344);
      }
      heap_Free(*(_QWORD **)(*(_QWORD *)v4 + 8), v5);
      *(_QWORD *)(v4 + 344) = 0;
      *(_WORD *)(v4 + 336) = 0;
      *(_BYTE *)(v4 + 352) = 0;
      *(_WORD *)(v4 + 608) = 257;
    }
    IDStrings_0 = addIdentifier2List_0(v4, "x");
    if ((IDStrings_0 & 0x80000000) != 0)
      goto LABEL_30;
    IDStrings_0 = createIDStrings_0((_BYTE *)v4);
    if ((IDStrings_0 & 0x80000000) != 0)
      goto LABEL_30;
    if (!*(_QWORD *)(v4 + 344))
      return 6;
    if (*(_WORD *)(v4 + 336))
    {
      v11 = 0;
      do
        log_OutText(*(_QWORD *)(*(_QWORD *)v4 + 32), *(_QWORD *)(v4 + 184), 5, 0, (uint64_t)"tokentn : identifier=\"%s\"", v8, v9, v10, *(_QWORD *)(*(_QWORD *)(v4 + 344) + 8 * v11++));
      while (v11 < *(unsigned __int16 *)(v4 + 336));
    }
    IDStrings_0 = getFECFGInfo_0(v4);
    if ((IDStrings_0 & 0x80000000) != 0)
      goto LABEL_30;
    v17 = *(_QWORD *)(v4 + 288);
    if (v17)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)v4 + 8), v17);
      *(_QWORD *)(v4 + 288) = 0;
    }
    IDStrings_0 = FEData_blockData_unloadUnusedDataFiles((_QWORD *)v4, *(unsigned __int16 *)(v4 + 336), *(_QWORD *)(v4 + 344), v12, v13, v14, v15, v16);
    if ((IDStrings_0 & 0x80000000) != 0)
      goto LABEL_30;
    *(_DWORD *)(v4 + 960) = 0;
    v22 = *(unsigned __int16 *)(v4 + 336);
    if (!*(_WORD *)(v4 + 336))
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)v4 + 32), (uint64_t)"TOKENTN", 24024, 0, v18, v19, v20, v21, v31);
      return 2304778240;
    }
    *(_DWORD *)(v4 + 616) = 0;
    IDStrings_0 = FEData_blockData_loadDataFiles(v4, v22, *(_QWORD *)(v4 + 344), (int *)(v4 + 616), v18, v19, v20, v21);
    if ((IDStrings_0 & 0x80000000) != 0
      || *(_DWORD *)(v4 + 612) == 1
      && (IDStrings_0 = nn_tn_UnLoad(*(_QWORD *)v4, *(_QWORD *)(v4 + 24), v4 + 640), (IDStrings_0 & 0x80000000) != 0))
    {
LABEL_30:
      v3 = IDStrings_0;
    }
    else
    {
      *(_DWORD *)(v4 + 612) = 0;
      v3 = nn_tn_checkIfActive(*(_WORD **)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)v4, *(_QWORD *)(v4 + 184), (_DWORD *)(v4 + 612));
      if ((v3 & 0x80000000) == 0)
      {
        if (*(_DWORD *)(v4 + 612) != 1
          || (v3 = nn_tn_Load(*(_WORD **)(v4 + 8), *(_QWORD *)(v4 + 16), *(_WORD **)(v4 + 32), *(_QWORD *)(v4 + 40), *(_QWORD *)v4, *(_QWORD *)(v4 + 184), *(_QWORD *)(v4 + 88), v23, *(_QWORD *)(v4 + 96), *(_QWORD *)(v4 + 104), (int *)(v4 + 640)), (v3 & 0x80000000) == 0))
        {
          if (*(_DWORD *)(v4 + 616) != 1)
            return v3;
          v24 = load_lua_code_0(v4, &v32);
          v3 = v24;
          if ((v24 & 0x80000000) == 0 && !v32)
          {
            log_OutPublic(*(_QWORD *)(*(_QWORD *)v4 + 32), *(_QWORD *)(v4 + 184), 24071, 0, v25, v26, v27, v28, v31);
            return v3;
          }
          if ((v24 & 0x80000000) == 0)
            return v3;
        }
      }
    }
    v29 = *(_QWORD *)(v4 + 272);
    if (v29)
    {
      OOC_PlacementDeleteObject(v4 + 224, v29);
      *(_QWORD *)(v4 + 272) = 0;
    }
    kaldi::nnet1::Component::IsUpdatable((kaldi::nnet1::Component *)(v4 + 224));
  }
  return v3;
}

uint64_t tokenTN_ProcessStart(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unsigned int v18;

  v3 = 2304778248;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 58764, 16) & 0x80000000) == 0
    && (safeh_HandleCheck(*a1, a1[1], 58765, 968) & 0x80000000) == 0)
  {
    v7 = *a1;
    log_OutText(*(_QWORD *)(*(_QWORD *)v7 + 32), *(_QWORD *)(v7 + 184), 4, 0, (uint64_t)"tokentn : ProcessStart Begin", v4, v5, v6, v17);
    if (*(_WORD *)(v7 + 336))
    {
      v3 = nuance_pcre_Init(*(_QWORD **)(v7 + 136), *(_QWORD *)(v7 + 144), *(unsigned __int16 *)(v7 + 282), *(_WORD *)(v7 + 284));
      if ((v3 & 0x80000000) != 0)
        log_OutPublic(*(_QWORD *)(*(_QWORD *)v7 + 32), *(_QWORD *)(v7 + 184), 24051, 0, v12, v13, v14, v15, v18);
      log_OutText(*(_QWORD *)(*(_QWORD *)v7 + 32), *(_QWORD *)(v7 + 184), 4, 0, (uint64_t)"tokentn : ProcessStart End (%x)", v13, v14, v15, v3);
    }
    else
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)v7 + 32), (uint64_t)"TOKENTN", 24024, 0, v8, v9, v10, v11, v18);
      return 2304778240;
    }
  }
  return v3;
}

uint64_t tokenTN_Process(uint64_t *a1, int a2, _QWORD *a3, int a4, _DWORD *a5)
{
  uint64_t matched;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD **v13;
  uint64_t *v14;
  uint64_t inited;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  int v50;

  v50 = 0;
  v49 = 0;
  matched = 2304778248;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 58764, 16) & 0x80000000) != 0)
    return matched;
  if ((safeh_HandleCheck(*a1, a1[1], 58765, 968) & 0x80000000) != 0)
    return matched;
  v13 = (_QWORD **)*a1;
  log_OutText((*v13)[4], (uint64_t)v13[23], 4, 0, (uint64_t)"tokentn : Process Begin", v10, v11, v12, v47);
  v13[9] = a3;
  *((_DWORD *)v13 + 20) = a4;
  *((_DWORD *)v13 + 137) = log_GetLogLevel((*v13)[4]) > 4;
  v13[33] = 0;
  matched = LingDBHasSentence((uint64_t)v13[8], (uint64_t)v13[9], (uint64_t)v13[10], &v50);
  if ((matched & 0x80000000) != 0)
    return matched;
  v14 = (uint64_t *)(v13 + 33);
  if (!v50)
    goto LABEL_32;
  inited = initLDO((uint64_t)(v13 + 28), v13 + 33);
  if ((inited & 0x80000000) != 0)
    goto LABEL_33;
  matched = importFromLingDB((uint64_t)*v13, (uint64_t)v13[8], (uint64_t)v13[9], (uint64_t)v13[10], (uint64_t *)v13 + 33);
  if ((matched & 0x80000000) == 0)
  {
    if (!*v14)
      goto LABEL_32;
    v16 = LDO_ComputeText(*v14, &v49);
    matched = LH_ERROR_to_VERROR(v16);
    if ((matched & 0x80000000) == 0)
    {
      v13[38] = (_QWORD *)fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(v49);
      *((_WORD *)v13 + 156) = LHString_Length(v49);
      if (!v13[38])
        goto LABEL_18;
      log_OutText((*v13)[4], (uint64_t)v13[23], 5, 0, (uint64_t)"<LOGFE> processing sentence : _%s_", v19, v20, v21, (uint64_t)v13[38]);
      inited = tokenTN_init_ProcessData((uint64_t)v13);
      if ((inited & 0x80000000) != 0)
        goto LABEL_33;
      if (*((_DWORD *)v13 + 240) == 1 && *((_DWORD *)v13 + 154) == 1)
      {
        inited = tokentn_AllInOneLoop((uint64_t)v13, 1);
        if ((inited & 0x80000000) != 0)
          goto LABEL_33;
        if (*((_DWORD *)v13 + 137) == 1)
        {
          inited = dumpTokenLDO((uint64_t)v13, (uint64_t)"At End of btok Processing", 1, v22, v23, v24, v25, v26);
          if ((inited & 0x80000000) != 0)
            goto LABEL_33;
        }
      }
      inited = tokentn_AllInOneLoop((uint64_t)v13, 0);
      if ((inited & 0x80000000) != 0)
        goto LABEL_33;
      matched = clearBTokMatchList((uint64_t)v13);
      if ((matched & 0x80000000) == 0)
      {
LABEL_18:
        v27 = *v14;
        if (*v14)
        {
          if (*((_DWORD *)v13 + 154) != 1 || (v28 = (uint64_t)v13[34]) == 0)
          {
LABEL_27:
            if (*v14)
            {
              matched = exportToLingDB((uint64_t)*v13, (uint64_t)v13[8], (uint64_t)v13[9], (uint64_t)v13[10], (uint64_t)(v13 + 28), *v14, 1, 0);
              if ((matched & 0x80000000) != 0)
                goto LABEL_34;
              if (v13[38])
              {
                if (*((_DWORD *)v13 + 137) == 1)
                {
                  matched = dumpTokenRecordsInLingDB(v13, (uint64_t)"LINGDB At End of Processing", 1, v35, v36, v37, v38, v39);
                  if ((matched & 0x80000000) != 0)
                    goto LABEL_34;
                }
              }
            }
            goto LABEL_32;
          }
          if (*((_DWORD *)v13 + 137) != 1)
          {
LABEL_24:
            v29 = LuaVMLDO_RunFunction(v28, (uint64_t)"run", v27);
            matched = LH_ERROR_to_VERROR(v29);
            if ((matched & 0x80000000) != 0)
            {
              log_OutPublic((*v13)[4], (uint64_t)v13[23], 24072, 0, v31, v32, v33, v34, v48);
              goto LABEL_34;
            }
            if (*((_DWORD *)v13 + 137) == 1)
            {
              matched = dumpTokenLDO((uint64_t)v13, (uint64_t)"At End of Processing; after Lua",
                          1,
                          v30,
                          v31,
                          v32,
                          v33,
                          v34);
              if ((matched & 0x80000000) != 0)
                goto LABEL_34;
            }
            goto LABEL_27;
          }
          inited = dumpTokenLDO((uint64_t)v13, (uint64_t)"At End of Processing; before Lua", 1, v17, v18, v19, v20, v21);
          if ((inited & 0x80000000) == 0)
          {
            v27 = (uint64_t)v13[33];
            v28 = (uint64_t)v13[34];
            goto LABEL_24;
          }
LABEL_33:
          matched = inited;
          goto LABEL_34;
        }
LABEL_32:
        *a5 = 1;
      }
    }
  }
LABEL_34:
  if (v49)
  {
    OOC_PlacementDeleteObject((uint64_t)(v13 + 28), v49);
    v49 = 0;
  }
  if (*v14)
  {
    deinitLDO((uint64_t)(v13 + 28), *v14);
    v13[33] = 0;
  }
  v40 = (uint64_t)v13[69];
  if (v40)
  {
    heap_Free((_QWORD *)(*v13)[1], v40);
    v13[69] = 0;
  }
  clearStrRes(*v13, (uint64_t)(v13 + 49));
  clearStrRes(*v13, (uint64_t)(v13 + 51));
  clearStrRes(*v13, (uint64_t)(v13 + 61));
  clearStrRes(*v13, (uint64_t)(v13 + 70));
  clearStrRes(*v13, (uint64_t)(v13 + 72));
  clearStrRes(*v13, (uint64_t)(v13 + 74));
  clearStrRes(*v13, (uint64_t)(v13 + 63));
  clearStrRes(*v13, (uint64_t)(v13 + 53));
  clearStrRes(*v13, (uint64_t)(v13 + 59));
  clearStrRes(*v13, (uint64_t)(v13 + 55));
  clearStrRes(*v13, (uint64_t)(v13 + 57));
  freeAlignmentData(v13);
  freeMatchList(v13);
  freeSolutionList(v13);
  v44 = (uint64_t)v13[40];
  if (v44)
  {
    heap_Free((_QWORD *)(*v13)[1], v44);
    v13[40] = 0;
  }
  v45 = (uint64_t)v13[41];
  if (v45)
  {
    heap_Free((_QWORD *)(*v13)[1], v45);
    v13[41] = 0;
  }
  log_OutText((*v13)[4], (uint64_t)v13[23], 4, 0, (uint64_t)"tokentn : Process End (%x)", v41, v42, v43, matched);
  return matched;
}

uint64_t tokenTN_ProcessEnd(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = 2304778248;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 58764, 16) & 0x80000000) == 0
    && (safeh_HandleCheck(*a1, a1[1], 58765, 968) & 0x80000000) == 0)
  {
    v7 = *a1;
    log_OutText(*(_QWORD *)(*(_QWORD *)*a1 + 32), *(_QWORD *)(*a1 + 184), 4, 0, (uint64_t)"tokentn : ProcessEnd Begin", v4, v5, v6, v13);
    v8 = nuance_pcre_DeInit(*(_QWORD **)(v7 + 136), *(_QWORD *)(v7 + 144));
    log_OutText(*(_QWORD *)(*(_QWORD *)v7 + 32), *(_QWORD *)(v7 + 184), 4, 0, (uint64_t)"tokentn : ProcessEnd End (%x)", v9, v10, v11, v8);
    return 0;
  }
  return v3;
}

uint64_t addIdentifier2List_0(uint64_t a1, char *__s2)
{
  uint64_t v4;
  const char **v5;
  uint64_t v6;
  const char **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unsigned int v19;

  v4 = *(unsigned __int16 *)(a1 + 336);
  if (*(_WORD *)(a1 + 336))
  {
    v5 = *(const char ***)(a1 + 344);
    v6 = *(unsigned __int16 *)(a1 + 336);
    v7 = v5;
    do
    {
      if (v5 && !strcmp(*v7, __s2))
        return 0;
      ++v7;
      --v6;
    }
    while (v6);
    v8 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 344), 8 * v4 + 8);
    if (v8)
      goto LABEL_9;
    goto LABEL_11;
  }
  v8 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 8);
  if (!v8)
  {
LABEL_11:
    v17 = 2304778250;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24048, 0, v9, v10, v11, v12, v19);
    return v17;
  }
LABEL_9:
  *(_QWORD *)(a1 + 344) = v8;
  v13 = strlen(__s2);
  v14 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, (v13 + 1));
  v15 = *(unsigned __int16 *)(a1 + 336);
  *(_QWORD *)(*(_QWORD *)(a1 + 344) + 8 * v15) = v14;
  v16 = *(char **)(*(_QWORD *)(a1 + 344) + 8 * v15);
  if (!v16)
    goto LABEL_11;
  strcpy(v16, __s2);
  v17 = 0;
  ++*(_WORD *)(a1 + 336);
  return v17;
}

uint64_t createIDStrings_0(_BYTE *a1)
{
  uint64_t result;
  char *v3;
  uint64_t v4;
  int v5;
  char v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char *__s;
  char v15[16];
  __int128 v16;
  char v17[16];
  __int128 v18;
  char __s2[16];
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  __s = 0;
  *(_OWORD *)__s2 = 0u;
  v20 = 0u;
  *(_OWORD *)v17 = 0u;
  v18 = 0u;
  *(_OWORD *)v15 = 0u;
  v16 = 0u;
  result = paramc_ParamGet(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"langcode", &__s, 0);
  if ((result & 0x80000000) == 0)
  {
    v3 = __s;
    if (*__s)
    {
      v4 = 0;
      v5 = 0;
      do
      {
        v6 = v3[v4];
        v17[v4] = v6;
        __s2[v4] = v6;
        v4 = (unsigned __int16)++v5;
      }
      while (strlen(v3) > (unsigned __int16)v5);
    }
    strcpy(&__s2[2], "x");
    v17[3] = 0;
    result = paramc_ParamGet(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"voice", &__s, 0);
    if ((result & 0x80000000) == 0)
    {
      v7 = __s;
      v8 = strlen(__s);
      if (v8 <= 0x1A)
      {
        if (v8)
        {
          v9 = 0;
          v10 = 0;
          do
          {
            v15[v9] = v7[v9];
            v9 = (unsigned __int16)++v10;
            v8 = strlen(v7);
          }
          while (v8 > (unsigned __int16)v10);
        }
        v15[v8] = 0;
        if ((int)strlen(__s2) >= 1)
        {
          v11 = 0;
          do
          {
            __s2[(unsigned __int16)v11] = ssft_tolower(__s2[(unsigned __int16)v11]);
            ++v11;
          }
          while ((int)strlen(__s2) > (unsigned __int16)v11);
        }
        if ((int)strlen(v17) >= 1)
        {
          v12 = 0;
          do
          {
            v17[(unsigned __int16)v12] = ssft_tolower(v17[(unsigned __int16)v12]);
            ++v12;
          }
          while ((int)strlen(v17) > (unsigned __int16)v12);
        }
        if ((int)strlen(v15) >= 1)
        {
          v13 = 0;
          do
          {
            v15[(unsigned __int16)v13] = ssft_tolower(v15[(unsigned __int16)v13]);
            ++v13;
          }
          while ((int)strlen(v15) > (unsigned __int16)v13);
        }
        result = addIdentifier2List_0((uint64_t)a1, __s2);
        if ((result & 0x80000000) == 0)
        {
          a1[352] = a1[336];
          result = addIdentifier2List_0((uint64_t)a1, v17);
          if ((result & 0x80000000) == 0)
            return addIdentifier2List_0((uint64_t)a1, v15);
        }
      }
      else
      {
        return 2304778240;
      }
    }
  }
  return result;
}

uint64_t getFECFGInfo_0(uint64_t a1)
{
  uint64_t v2;
  const char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  unsigned __int8 __c;
  char **__c_1;
  __int16 v13;

  v2 = 2304778240;
  v13 = -1;
  __c_1 = 0;
  __c = 0;
  if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 88) + 96))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), "fecfg", "nrpart_g2p", &__c_1, &v13, &__c) & 0x80000000) == 0)
  {
    if (v13 == 1 && __c_1 != 0)
    {
      v4 = *__c_1;
      v5 = strchr(*__c_1, __c);
      if (v5)
      {
        *v5 = 0;
        v4 = *__c_1;
      }
      *(_BYTE *)(a1 + 608) = atoi(v4);
    }
    v13 = -1;
    v6 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 88) + 96))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), "fecfg", "nrpart_tn", &__c_1, &v13, &__c);
    if ((v6 & 0x80000000) == 0)
    {
      v7 = v6;
      if (v13 == 1 && __c_1)
      {
        v8 = *__c_1;
        v9 = strchr(*__c_1, __c);
        if (v9)
        {
          *v9 = 0;
          v8 = *__c_1;
        }
        *(_BYTE *)(a1 + 609) = atoi(v8);
      }
      return v7;
    }
  }
  return v2;
}

uint64_t load_lua_code_0(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  int IsLuaCodeAvailable;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int ScriptFromRIFF;

  *a2 = 0;
  v4 = *(_QWORD *)(a1 + 272);
  if (v4)
  {
    OOC_PlacementDeleteObject(a1 + 224, v4);
    *(_QWORD *)(a1 + 272) = 0;
  }
  v5 = (uint64_t *)(a1 + 272);
  kaldi::nnet1::Component::IsUpdatable((kaldi::nnet1::Component *)(a1 + 224));
  IsLuaCodeAvailable = LuaVMLDO_IsLuaCodeAvailable(*(_WORD **)(a1 + 8), *(_QWORD *)(a1 + 16), 0, a2);
  v7 = LH_ERROR_to_VERROR(IsLuaCodeAvailable);
  if ((v7 & 0x80000000) == 0)
  {
    if (*a2 != 1)
      return v7;
    *a2 = 0;
    v8 = OOCAllocator_Con(a1 + 224, (_OWORD *)(a1 + 192), *(_QWORD *)(*(_QWORD *)a1 + 8));
    v9 = LH_ERROR_to_VERROR(v8);
    if ((v9 & 0x80000000) != 0
      || (v10 = PNEW_LuaVMLDO_Con(a1 + 224, a1 + 224, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)hlp_lua_log_callback_3, (uint64_t **)(a1 + 272)), v9 = LH_ERROR_to_VERROR(v10), (v9 & 0x80000000) != 0))
    {
      v7 = v9;
    }
    else
    {
      ScriptFromRIFF = LuaVMLDO_LoadScriptFromRIFF(*v5, 0);
      v7 = LH_ERROR_to_VERROR(ScriptFromRIFF);
      if ((v7 & 0x80000000) == 0)
      {
        *a2 = 1;
        return v7;
      }
    }
  }
  if (*v5)
  {
    OOC_PlacementDeleteObject(a1 + 224, *v5);
    *v5 = 0;
  }
  kaldi::nnet1::Component::IsUpdatable((kaldi::nnet1::Component *)(a1 + 224));
  return v7;
}

uint64_t tokenTN_loc_ObjClose(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t NullHandle;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  if (a2)
  {
    v9 = result;
    log_OutText(*(_QWORD *)(result + 32), (uint64_t)"TOKENTN", 4, 0, (uint64_t)"tokentn : loc ObjClose Begin", a6, a7, a8, v64);
    NullHandle = safeh_GetNullHandle();
    v12 = 0;
    if (!safeh_HandlesEqual(*a2, a2[1], NullHandle, v11))
    {
      result = safeh_HandleCheck(*a2, a2[1], 58765, 968);
      if ((result & 0x80000000) != 0)
        return result;
      LODWORD(v12) = result;
      v20 = *a2;
      v21 = tokenizer_ObjClose((_QWORD *)*a2, v13, v14, v15, v16, v17, v18, v19);
      if (v21 < 0)
        LODWORD(v12) = v21;
      v29 = textnormalizer_ObjClose((uint64_t *)v20, v22, v23, v24, v25, v26, v27, v28);
      if (v29 < 0)
        LODWORD(v12) = v29;
      v30 = safeh_GetNullHandle();
      if (!safeh_HandlesEqual(*(_QWORD *)(v20 + 136), *(_QWORD *)(v20 + 144), v30, v31))
      {
        v39 = nuance_pcre_ObjClose(*(_QWORD *)(v20 + 136), *(_QWORD *)(v20 + 144));
        if (v39 < 0)
          LODWORD(v12) = v39;
      }
      v40 = FEData_ObjClose((uint64_t *)v20, v32, v33, v34, v35, v36, v37, v38);
      if (v40 < 0)
        LODWORD(v12) = v40;
      *(_QWORD *)(v20 + 152) = 0;
      v48 = FERuntimeData_ObjClose((_QWORD *)v20, v41, v42, v43, v44, v45, v46, v47);
      if (v48 < 0)
        LODWORD(v12) = v48;
      *(_QWORD *)(v20 + 176) = 0;
      v56 = FEFunctionMap_ObjClose((_QWORD *)v20, v49, v50, v51, v52, v53, v54, v55);
      if (v56 >= 0)
        v12 = v12;
      else
        v12 = v56;
      *(_QWORD *)(v20 + 160) = 0;
      if (*(_QWORD *)(v20 + 88))
        objc_ReleaseObject(*(_QWORD *)(v9 + 48), (uint64_t)"FE_DCTLKP");
      if (*(_QWORD *)(v20 + 112))
        objc_ReleaseObject(*(_QWORD *)(v9 + 48), (uint64_t)"FE_DEPES");
      if (*(_QWORD *)(v20 + 64))
        objc_ReleaseObject(*(_QWORD *)(v9 + 48), (uint64_t)"LINGDB");
      v57 = *(_QWORD *)(v20 + 344);
      if (v57)
      {
        if (*(_WORD *)(v20 + 336))
        {
          v58 = 0;
          do
          {
            heap_Free(*(_QWORD **)(v9 + 8), *(_QWORD *)(*(_QWORD *)(v20 + 344) + 8 * v58));
            *(_QWORD *)(*(_QWORD *)(v20 + 344) + 8 * v58++) = 0;
          }
          while (v58 < *(unsigned __int16 *)(v20 + 336));
          v57 = *(_QWORD *)(v20 + 344);
        }
        heap_Free(*(_QWORD **)(v9 + 8), v57);
      }
      v59 = *(_QWORD *)(v20 + 288);
      if (v59)
        heap_Free(*(_QWORD **)(v9 + 8), v59);
      if (*(_DWORD *)(v20 + 612) == 1)
      {
        v60 = nn_tn_UnLoad(*(_QWORD *)v20, *(_QWORD *)(v20 + 24), v20 + 640);
        if (v60 >= 0)
          v12 = v12;
        else
          v12 = v60;
      }
      heap_Free(*(_QWORD **)(v9 + 8), v20);
    }
    heap_Free(*(_QWORD **)(v9 + 8), (uint64_t)a2);
    return log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"TOKENTN", 4, 0, (uint64_t)"tokentn : loc ObjClose End (%x)", v61, v62, v63, v12);
  }
  return result;
}

uint64_t hlp_lua_log_callback_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return log_OutText(a1, (uint64_t)"TOKENTN", 4, 0, a2, a6, a7, a8, 0);
}

uint64_t tokenTN_init_ProcessData(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int i;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v16;

  v2 = 2304778250;
  v3 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, *(unsigned __int16 *)(a1 + 312) + 1);
  *(_QWORD *)(a1 + 552) = v3;
  if (v3)
  {
    *(_WORD *)(a1 + 314) = 1;
    if (*(_WORD *)(a1 + 312))
    {
      v4 = 0;
      while (utf8_strchr(g_szSpace_1, (unsigned __int8 *)(*(_QWORD *)(a1 + 304) + (unsigned __int16)v4)))
      {
        v4 += utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(_QWORD *)(a1 + 304) + (unsigned __int16)v4));
        v5 = *(unsigned __int16 *)(a1 + 312);
        if (v5 <= (unsigned __int16)v4)
          goto LABEL_8;
      }
      v5 = *(unsigned __int16 *)(a1 + 312);
LABEL_8:
      if (v5 > (unsigned __int16)v4)
      {
        do
        {
          v4 = (unsigned __int16)v4;
          if (utf8_strchr(g_szSpace_1, (unsigned __int8 *)(*(_QWORD *)(a1 + 304) + (unsigned __int16)v4)))
          {
            ++*(_WORD *)(a1 + 314);
            for (i = *(unsigned __int8 *)(*(_QWORD *)(a1 + 304) + (unsigned __int16)v4);
                  ;
                  i = *(unsigned __int8 *)(*(_QWORD *)(a1 + 304) + (unsigned __int16)v4))
            {
              v4 += utf8_determineUTF8CharLength(i);
              if (*(unsigned __int16 *)(a1 + 312) <= (unsigned __int16)v4
                || !utf8_strchr(g_szSpace_1, (unsigned __int8 *)(*(_QWORD *)(a1 + 304) + (unsigned __int16)v4)))
              {
                break;
              }
            }
          }
          else
          {
            LOWORD(v4) = v4
                       + utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(_QWORD *)(a1 + 304) + (unsigned __int16)v4));
          }
        }
        while (*(unsigned __int16 *)(a1 + 312) > (unsigned __int16)v4);
      }
    }
    inited = initStrRes(a1, a1 + 392);
    if ((inited & 0x80000000) != 0)
      return inited;
    inited = initStrRes(a1, a1 + 408);
    if ((inited & 0x80000000) != 0)
      return inited;
    inited = initStrRes(a1, a1 + 488);
    if ((inited & 0x80000000) != 0)
      return inited;
    inited = initStrRes(a1, a1 + 560);
    if ((inited & 0x80000000) != 0)
      return inited;
    inited = initStrRes(a1, a1 + 576);
    if ((inited & 0x80000000) != 0)
      return inited;
    inited = initStrRes(a1, a1 + 592);
    if ((inited & 0x80000000) != 0)
      return inited;
    inited = initStrRes(a1, a1 + 504);
    if ((inited & 0x80000000) != 0)
      return inited;
    inited = initStrRes(a1, a1 + 424);
    if ((inited & 0x80000000) != 0)
      return inited;
    inited = initStrRes(a1, a1 + 472);
    if ((inited & 0x80000000) != 0)
      return inited;
    inited = initStrRes(a1, a1 + 440);
    if ((inited & 0x80000000) != 0)
      return inited;
    inited = initStrRes(a1, a1 + 456);
    if ((inited & 0x80000000) != 0)
      return inited;
    inited = initAlignmentData(a1);
    if ((inited & 0x80000000) != 0)
      return inited;
    inited = initMatchList(a1);
    if ((inited & 0x80000000) != 0)
      return inited;
    v2 = initSolutionList(a1);
    if ((v2 & 0x80000000) == 0)
    {
      v8 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 40);
      *(_QWORD *)(a1 + 320) = v8;
      v13 = *(_QWORD *)a1;
      if (!v8)
      {
LABEL_33:
        log_OutPublic(*(_QWORD *)(v13 + 32), *(_QWORD *)(a1 + 184), 24048, 0, v9, v10, v11, v12, v16);
        return 2304778250;
      }
      v14 = heap_Calloc(*(_QWORD **)(v13 + 8), 1, 48);
      *(_QWORD *)(a1 + 328) = v14;
      if (!v14)
      {
        v13 = *(_QWORD *)a1;
        goto LABEL_33;
      }
    }
  }
  return v2;
}

BOOL filteredTriggerType(int a1, unsigned int a2)
{
  if (!a1 || a1 == 1 && a2 == 2 || a1 == 2 && a2 == 1 || a1 == 3 && !a2 || a1 == 4 && a2 < 2)
    return 1;
  if (a1 == 6)
  {
    if (a2 - 1 < 2)
      return 1;
  }
  else if (a1 == 5)
  {
    return (a2 & 0xFFFFFFFD) == 0;
  }
  return 0;
}

uint64_t tokentn_ApplyOneRule(uint64_t *a1, uint64_t *a2, int a3, unsigned int a4, __int16 a5, __int16 a6, __int16 a7, __int16 a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;

  if (!filteredTriggerType(a3, a4))
  {
    v20 = *(_QWORD *)(*a1 + 32);
    v21 = a1[23];
    v22 = *(_QWORD *)(*a2 + 24);
    v23 = "rule %s (token %s, %d,%d) blocked by triggerType %s";
    goto LABEL_8;
  }
  if (*((_DWORD *)a1 + 240) == 1 && blockedByBtok((uint64_t)a1, a5, a6, v15, v16, v17, v18, v19) == 1)
  {
    v20 = *(_QWORD *)(*a1 + 32);
    v21 = a1[23];
    v22 = *(_QWORD *)(*a2 + 24);
    v23 = "rule %s (token %s, %d,%d) blocked by prior btok";
LABEL_8:
    log_OutText(v20, v21, 5, 0, (uint64_t)v23, v17, v18, v19, v22);
    return 0;
  }
  v24 = *a2;
  v25 = *(uint64_t **)(*a2 + 8);
  v26 = *v25;
  *(_BYTE *)(v26 + 82) = 0;
  *(_WORD *)(v26 + 40) = 0;
  v27 = *(_QWORD *)(v24 + 24);
  v25[2] = a1[38];
  v25[3] = v27;
  *(_QWORD *)(v26 + 88) = *(_QWORD *)(v24 + 48);
  *(_WORD *)(v26 + 104) = a7;
  *(_WORD *)(v26 + 106) = a8;
  *((_WORD *)v25 + 20) = *(_WORD *)(v24 + 40);
  *((_WORD *)v25 + 26) = *(_WORD *)(v24 + 44);
  *((_WORD *)v25 + 27) = *(_WORD *)(v24 + 46);
  *((_DWORD *)v25 + 11) = 0;
  *((_DWORD *)v25 + 12) = 0;
  result = tokenizer_apply_regex_LongestMatch(a1, v24, v14, v15, v16, v17, v18, v19);
  if ((result & 0x80000000) == 0)
  {
    v29 = *(_QWORD *)(*a2 + 8);
    **(_DWORD **)(v29 + 8) = 0;
    *(_DWORD *)(v29 + 44) = 0;
  }
  return result;
}

uint64_t tokentn_AllInOneLoop(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int NumberChildren;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  size_t v37;
  int v38;
  uint64_t ActiveDomains;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  char *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t j;
  unsigned int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int16 *v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int16 *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t *v92;
  unsigned int v93;
  unsigned int v94;
  int v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  int v101;
  int Type;
  int v103;
  int v104;
  char *v105;
  int v106;
  uint64_t **i;
  int StringAttribute;
  char *v109;
  int v110;
  uint64_t v112;
  unsigned int v113;
  uint64_t *v114;
  uint64_t *v115;
  int v116;
  int v117;
  char *v118;
  unsigned __int16 v119;
  unsigned __int16 v120;
  int v121;
  int v122;
  char *__s1;
  char *v124;
  uint64_t v125;
  uint64_t **v126;
  unint64_t v127;
  uint64_t v128;
  _WORD v129[500];
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v120 = 0;
  bzero(v129, 0x3E8uLL);
  v119 = 0;
  v118 = 0;
  v117 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v8 = *(_QWORD *)(a1 + 184);
  if (*(_DWORD *)(a1 + 960) == 1)
    log_OutText(v7, v8, 4, 0, (uint64_t)"tokentn : AllInOneLoop Begin (btok=%d)", v4, v5, v6, a2);
  else
    log_OutText(v7, v8, 4, 0, (uint64_t)"tokentn : AllInOneLoop Begin", v4, v5, v6, 0);
  if ((paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"maxTNNNcallspersent", &v117) & 0x80000000) == 0)
  {
    v16 = (unsigned __int16)v117;
    *(_WORD *)(a1 + 728) = v117;
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"set maxNNCallsPerSent to %d", v13, v14, v15, v16);
  }
  *(_WORD *)(a1 + 730) = 0;
  v17 = *(uint64_t **)(a1 + 168);
  *(_QWORD *)(*(_QWORD *)(*v17 + 8) + 32) = a1;
  v18 = setDomainsOnSentence((uint64_t *)a1, v9, v10, v11, v12, v13, v14, v15);
  if ((v18 & 0x80000000) != 0)
    return v18;
  v26 = mergeDomainsOnSentence((_QWORD *)a1, v19, v20, v21, v22, v23, v24, v25);
  if ((v26 & 0x80000000) != 0)
    return v26;
  v116 = a2;
  v27 = *v17;
  *(_QWORD *)(*(_QWORD *)(*v17 + 8) + 16) = *(_QWORD *)(a1 + 304);
  *(_WORD *)(v27 + 64) = 16;
  *(_WORD *)(v27 + 42) = *(_WORD *)(a1 + 312);
  v28 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 16);
  NumberChildren = LDOTreeNode_GetNumberChildren(v28);
  v33 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v34 = *(_QWORD *)(a1 + 184);
  if (!NumberChildren)
  {
    v96 = "no basic token records to process";
    v97 = 5;
    goto LABEL_96;
  }
  log_OutText(v33, v34, 4, 0, (uint64_t)"tokentn : start loop...", v29, v30, v31, v112);
  v36 = *(uint64_t **)(v28 + 80);
  v35 = *(_QWORD *)(v28 + 88);
  if ((unint64_t)v36 >= v35)
  {
LABEL_63:
    if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"spaceInPYT", &v118) & 0x80000000) != 0
      || LH_stricmp(v118, "yes"))
    {
      goto LABEL_95;
    }
    v26 = 0;
    v127 = 0;
    v128 = 0;
    v125 = 0;
    v126 = 0;
    v98 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 16);
    v99 = *(uint64_t **)(v98 + 80);
    if ((unint64_t)v99 >= *(_QWORD *)(v98 + 88))
    {
LABEL_89:
      if (v126)
        LDO_FreeLDOLabelVector(*(_QWORD *)(a1 + 264), (uint64_t)&v125);
      if ((v26 & 0x80000000) == 0)
        goto LABEL_95;
      return v26;
    }
    v100 = 0;
    v101 = 0;
    while (1)
    {
      v124 = 0;
      if (v100)
      {
        Type = LDOObject_GetType(*v100, (uint64_t *)&v124);
        v18 = LH_ERROR_to_VERROR(Type);
        if ((v18 & 0x80000000) != 0)
          return v18;
      }
      v103 = LDOTreeNode_ComputeAbsoluteFrom(*v99, (_DWORD *)&v128 + 1);
      v18 = LH_ERROR_to_VERROR(v103);
      if ((v18 & 0x80000000) != 0)
        return v18;
      v104 = LDOTreeNode_ComputeAbsoluteTo(*v99, &v128);
      v26 = LH_ERROR_to_VERROR(v104);
      if ((v26 & 0x80000000) != 0)
        return v26;
      if (v100 && ((v105 = v124, !strcmp(v124, "TOKEN_PUNCT")) || !strcmp(v105, "TOKEN_WSPACE")))
      {
        v101 = 1;
      }
      else
      {
        v106 = LDO_ComputeOverlappingLabels(*(_QWORD *)(a1 + 264), (unsigned int *)&v128 + 1, (unsigned int *)&v128, 0, (unsigned int *)&v125);
        v26 = LH_ERROR_to_VERROR(v106);
        if ((v26 & 0x80000000) != 0)
          return v26;
        for (i = v126; (unint64_t)i < v127; ++i)
        {
          __s1 = 0;
          v122 = 0;
          StringAttribute = LDOObject_GetStringAttribute(*i, "TNTAG", &v122, (uint64_t *)&__s1);
          v26 = LH_ERROR_to_VERROR(StringAttribute);
          if ((v26 & 0x80000000) != 0)
            goto LABEL_89;
          if (v122 && !strcmp(__s1, "_PI1a_"))
          {
            if (v101 == 1)
              v109 = "left";
            else
              v109 = "none";
            v110 = LDOObject_SetStringAttribute(*v99, "INPUTSPACETAG", v109);
            v26 = LH_ERROR_to_VERROR(v110);
            if ((v26 & 0x80000000) != 0)
              goto LABEL_89;
            v101 = 0;
          }
        }
        LDO_FreeLDOLabelVector(*(_QWORD *)(a1 + 264), (uint64_t)&v125);
        v100 = v99;
      }
      if ((unint64_t)++v99 >= *(_QWORD *)(v98 + 88))
        goto LABEL_89;
    }
  }
  v114 = *(uint64_t **)(v28 + 88);
  while (1)
  {
    __s1 = 0;
    LODWORD(v128) = 0;
    v122 = 0;
    v37 = *v36;
    v38 = LDOTreeNode_ComputeAbsoluteFrom(*v36, &v128);
    ActiveDomains = LH_ERROR_to_VERROR(v38);
    if ((ActiveDomains & 0x80000000) != 0
      || (v46 = LDOTreeNode_ComputeAbsoluteTo(v37, &v122),
          ActiveDomains = LH_ERROR_to_VERROR(v46),
          (ActiveDomains & 0x80000000) != 0))
    {
LABEL_94:
      v26 = ActiveDomains;
      goto LABEL_95;
    }
    v47 = LDOObject_GetType(v37, (uint64_t *)&__s1);
    v26 = LH_ERROR_to_VERROR(v47);
    if ((v26 & 0x80000000) != 0)
      goto LABEL_95;
    v48 = (unsigned __int16)v128;
    v49 = (unsigned __int16)v122;
    v50 = __s1;
    if (!strcmp(__s1, "TOKEN_ALPHA"))
    {
      v51 = 0;
      goto LABEL_20;
    }
    if (!strcmp(v50, "TOKEN_DIGIT"))
      break;
    if (!strcmp(v50, "TOKEN_PUNCT"))
    {
      v51 = 2;
      goto LABEL_20;
    }
LABEL_58:
    ++v36;
LABEL_59:
    if ((unint64_t)v36 >= v35)
      goto LABEL_63;
  }
  v51 = 1;
LABEL_20:
  v119 = 0;
  ActiveDomains = FERuntimeData_GetActiveDomains(a1, (uint64_t)v129, &v119, v48, v49, 0);
  if ((ActiveDomains & 0x80000000) != 0)
    goto LABEL_94;
  v115 = v36;
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"START basic token %d,%d ... %d active domains", v43, v44, v45, v48);
  if (v119)
  {
    for (j = 0; j < v119; ++j)
    {
      v56 = (unsigned __int16)v129[j];
      v121 = 0;
      v124 = 0;
      v125 = 0;
      HIDWORD(v128) = 0;
      v57 = *(uint64_t **)(a1 + 168);
      v58 = *v57;
      *(_WORD *)(v58 + 46) = 0;
      *(_WORD *)(v58 + 44) = v48;
      *(_QWORD *)(v58 + 48) = 0;
      if ((FERuntimeData_GetDomainRange(a1, v56, &v125) & 0x80000000) == 0)
      {
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"Domain %d : range %d,%d", v52, v53, v54, j);
        *(_WORD *)(*v57 + 46) = *(_WORD *)(v125 + 2);
        if ((FERuntimeData_GetDomainBlockIndex((_QWORD *)a1, v56, &v121, (_WORD *)&v121 + 1) & 0x80000000) == 0
          && (FEData_blockData_newGetDomainDefBlockInfo((_QWORD *)a1, (unsigned __int16)v121, &v124, v59, v60, v52, v53, v54) & 0x80000000) == 0)
        {
          if (HIWORD(v121) <= *((unsigned __int16 *)v124 + 12))
          {
            v62 = *((_QWORD *)v124 + 2);
            if (v116 == 1 && *(_DWORD *)(a1 + 960) == 1)
            {
              v63 = v62 + 72 * HIWORD(v121);
              v65 = *(unsigned __int16 *)(v63 + 42);
              v64 = (unsigned __int16 *)(v63 + 42);
              if (v65)
              {
                v66 = 0;
                v67 = 0;
                do
                {
                  v68 = *(_QWORD *)(v64 - 5);
                  v69 = *v57;
                  *(_WORD *)(v69 + 40) = 0;
                  v69 += 40;
                  v70 = v68 + v66;
                  *(_QWORD *)(v69 + 8) = v70;
                  if ((FEData_blockData_getBTokAndRegexData((_QWORD *)a1, *(unsigned __int16 *)(v70 + 2), *(unsigned __int16 *)(v70 + 4), (_QWORD *)(v69 - 8), (_WORD *)v69, (_QWORD *)(v69 - 16), (_DWORD *)&v128 + 1, v54) & 0x80000000) != 0)break;
                  if ((tokentn_ApplyOneRule((uint64_t *)a1, v57, SHIDWORD(v128), v51, v48, v49, v121, SHIWORD(v121)) & 0x80000000) != 0)
                    break;
                  ++v67;
                  v66 += 12;
                }
                while (v67 < *v64);
              }
            }
            else
            {
              v71 = *((_QWORD *)v124 + 4) + 16 * *(unsigned __int16 *)(v62 + 72 * HIWORD(v121) + 12);
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"doing domain %d, Domain[%s:%s] (applying %d rules)", v52, v53, v54, j);
              if (*(_WORD *)(v71 + 8))
              {
                v72 = 0;
                v73 = 0;
                do
                {
                  v74 = *(_QWORD *)v71 + v72;
                  v75 = *v57;
                  *(_WORD *)(v75 + 40) = 0;
                  v75 += 40;
                  *(_QWORD *)(v75 + 8) = v74;
                  if ((FEData_blockData_getTokenAndRegexData((_QWORD *)a1, v74, (_QWORD *)(v75 - 8), (_WORD *)v75, (_QWORD *)(v75 - 16), (_DWORD *)&v128 + 1, v53, v54) & 0x80000000) != 0)break;
                  if ((tokentn_ApplyOneRule((uint64_t *)a1, v57, SHIDWORD(v128), v51, v48, v49, v121, SHIWORD(v121)) & 0x80000000) != 0)
                    break;
                  ++v73;
                  v72 += 12;
                }
                while (v73 < *(unsigned __int16 *)(v71 + 8));
              }
            }
          }
          else
          {
            log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24028, "%s%d%s%d", v61, v52, v53, v54, "domain");
            TOKENTNERROR(0);
          }
        }
      }
    }
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"END of loop for basic token %d,%d", v52, v53, v54, v48);
  v26 = tokenizer_ResolveMatches(a1, v76, v77, v78, v79, v80, v81, v82);
  if ((v26 & 0x80000000) != 0)
    goto LABEL_95;
  if (!FERuntimeData_GetNumMatches((_QWORD *)a1, v83, v40, v41, v42, v43, v44, v45))
  {
    FERuntimeData_FreeMatches((_QWORD *)a1, 0, v84, v85, v86, v87, v88, v89);
    v35 = (unint64_t)v114;
    v36 = v115;
    goto LABEL_58;
  }
  v26 = textnormalizer_DoExpansionActions((uint64_t *)a1, &v120, v84, v85, v86, v87, v88, v89);
  v35 = (unint64_t)v114;
  v36 = v115;
  if ((v26 & 0x80000000) != 0)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24029, 0, v42, v43, v44, v45, v113);
    goto LABEL_95;
  }
  v90 = v128;
  v91 = v120;
  if (v128 >= v120)
  {
    v93 = v128;
    v94 = v120;
LABEL_55:
    if (v93 > v94)
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24063, 0, v42, v43, v44, v45, v113);
    FERuntimeData_FreeMatches((_QWORD *)a1, 0, v40, v41, v42, v43, v44, v45);
    if (v90 < v91)
      goto LABEL_59;
    goto LABEL_58;
  }
  v92 = v115 + 1;
  v93 = v128;
  v94 = v120;
  v36 = v114;
  if (v115 + 1 == v114)
    goto LABEL_55;
  while (1)
  {
    v95 = LDOTreeNode_ComputeAbsoluteFrom(*v92, &v128);
    v26 = LH_ERROR_to_VERROR(v95);
    if ((v26 & 0x80000000) != 0)
      break;
    v93 = v128;
    v94 = v120;
    if (v128 >= v120)
    {
      v36 = v92;
      goto LABEL_55;
    }
    if (++v92 == v114)
    {
      v36 = v114;
      goto LABEL_55;
    }
  }
LABEL_95:
  FERuntimeData_FreeMatches((_QWORD *)a1, 1, v40, v41, v42, v43, v44, v45);
  v33 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v34 = *(_QWORD *)(a1 + 184);
  v96 = "tokentn : AllInOneLoop End (%x)";
  v112 = v26;
  v97 = 4;
LABEL_96:
  log_OutText(v33, v34, v97, 0, (uint64_t)v96, v29, v30, v31, v112);
  return v26;
}

uint64_t FEData_domainDefs_ObjOpen(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;

  v10 = *(_QWORD *)(*a1 + 32);
  v11 = a1[23];
  if (a2)
  {
    log_OutText(v10, v11, 4, 0, (uint64_t)"domainDefs : ObjOpen Begin", a6, a7, a8, v19);
    *a2 = 0;
    v12 = (_WORD *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 2);
    if (v12)
    {
      *v12 = 0;
      *a2 = v12;
      log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"domainDefs : ObjOpen End (%x)", v14, v15, v16, 0);
      return 0;
    }
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24048, 0, v13, v14, v15, v16, v20);
    v18 = 10;
  }
  else
  {
    log_OutPublic(v10, v11, 24049, 0, a5, a6, a7, a8, v19);
    v18 = 7;
  }
  return FEDATA_ERROR(v18);
}

uint64_t FEData_domainDefs_ObjClose(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v9 = *(_QWORD *)(a1[19] + 8);
  v10 = *(_QWORD *)(*a1 + 32);
  v11 = a1[23];
  if (v9)
  {
    log_OutText(v10, v11, 4, 0, (uint64_t)"domainDefs : ObjClose Begin", a6, a7, a8, v16);
    log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"domainDefs : ObjClose End (%x)", v12, v13, v14, 0);
    heap_Free(*(_QWORD **)(*a1 + 8), v9);
    return 0;
  }
  else
  {
    log_OutPublic(v10, v11, 24049, 0, a5, a6, a7, a8, v16);
    return FEDATA_ERROR(7);
  }
}

uint64_t FEData_blockData_ObjOpen(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;

  v10 = *(_QWORD *)(*a1 + 32);
  v11 = a1[23];
  if (a2)
  {
    log_OutText(v10, v11, 4, 0, (uint64_t)"blockData : ObjOpen Begin", a6, a7, a8, v19);
    *a2 = 0;
    v12 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 144);
    if (v12)
    {
      *(_OWORD *)(v12 + 112) = 0u;
      *(_OWORD *)(v12 + 128) = 0u;
      *(_OWORD *)(v12 + 80) = 0u;
      *(_OWORD *)(v12 + 96) = 0u;
      *(_OWORD *)(v12 + 48) = 0u;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
      *(_OWORD *)(v12 + 32) = 0u;
      *(_OWORD *)v12 = 0u;
      *(_WORD *)v12 = 0;
      *(_QWORD *)(v12 + 136) = 0;
      *a2 = v12;
      log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"blockData : ObjOpen End (%x)", v14, v15, v16, 0);
      return 0;
    }
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24048, 0, v13, v14, v15, v16, v20);
    v18 = 10;
  }
  else
  {
    log_OutPublic(v10, v11, 24049, 0, a5, a6, a7, a8, v19);
    v18 = 7;
  }
  return FEDATA_ERROR(v18);
}

uint64_t FEData_blockData_IsRemappable(_QWORD *a1, char *__s2, _QWORD *a3, _WORD *a4, _WORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v20;
  uint64_t v24;

  v8 = *(unsigned __int16 **)(a1[19] + 16);
  if (!v8)
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24049, 0, (uint64_t)a5, a6, a7, a8, v20);
    return 0;
  }
  if (!*v8)
    return 0;
  v10 = 0;
  v11 = *(_QWORD *)(*((_QWORD *)v8 + 17) + 8);
  while (1)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v11 + 8 * v10) + 24);
    if (v12)
    {
      if (!*(_DWORD *)v12)
      {
        v13 = *(unsigned __int16 *)(v12 + 16);
        if (*(_WORD *)(v12 + 16))
          break;
      }
    }
LABEL_6:
    if (++v10 >= (unint64_t)*v8)
      return 0;
  }
  v14 = 0;
  v24 = *(_QWORD *)(v12 + 8);
  while (1)
  {
    v15 = *(_QWORD *)(v24 + 8 * v14);
    v16 = *(unsigned __int16 *)(v15 + 12);
    if (*(_WORD *)(v15 + 12))
      break;
LABEL_14:
    if (++v14 >= v13)
      goto LABEL_6;
  }
  v17 = 0;
  v18 = *(_QWORD *)(v15 + 16);
  while (strcmp(*(const char **)(v18 + 8 * v17), __s2))
  {
    if (++v17 >= v16)
      goto LABEL_14;
  }
  *a3 = *(_QWORD *)v15;
  *a4 = *(_WORD *)(v15 + 8);
  *a5 = *(_WORD *)(v15 + 10);
  return 1;
}

uint64_t FEData_blockData_newGetDomainDefBlockInfo(_QWORD *a1, unsigned int a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 *v8;
  unsigned int v10;

  v8 = *(unsigned __int16 **)(a1[19] + 16);
  if (v8)
  {
    if (*v8 <= a2)
    {
      log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24041, "%s%d%s%d", a5, a6, a7, a8, "domain");
      return FEDATA_ERROR(25);
    }
    else
    {
      *a3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 17) + 8) + 8 * a2) + 16);
      return 0;
    }
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24049, 0, a5, a6, a7, a8, v10);
    return FEDATA_ERROR(7);
  }
}

uint64_t FEData_blockData_newGetDomainEntry(_QWORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int v11;

  v8 = *(unsigned __int16 **)(a1[19] + 16);
  if (v8)
  {
    if (*v8 <= a2)
    {
      log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24041, "%s%d%s%d", a5, a6, a7, a8, "domain");
    }
    else
    {
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 17) + 8) + 8 * a2) + 16);
      if (*(unsigned __int16 *)(v9 + 24) > a3)
      {
        *a4 = *(_QWORD *)(v9 + 16) + 72 * a3;
        return 0;
      }
      log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24042, "%s%d%s%d", a5, a6, a7, a8, "domain");
    }
    return FEDATA_ERROR(25);
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24049, 0, a5, a6, a7, a8, v11);
    return FEDATA_ERROR(7);
  }
}

uint64_t FEData_blockData_newGetPriorityList(_QWORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int v11;

  v8 = *(unsigned __int16 **)(a1[19] + 16);
  if (v8)
  {
    if (*v8 <= a2)
    {
      log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24041, "%s%d%s%d", a5, a6, a7, a8, "domain");
    }
    else
    {
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 17) + 8) + 8 * a2) + 16);
      if (*(unsigned __int16 *)(v9 + 48) > a3)
      {
        *a4 = *(_QWORD *)(v9 + 32) + 16 * a3;
        return 0;
      }
      log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24043, "%s%d%s%d", a5, a6, a7, a8, "priorityListIndex");
    }
    return FEDATA_ERROR(25);
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24049, 0, a5, a6, a7, a8, v11);
    return FEDATA_ERROR(7);
  }
}

uint64_t FEData_blockData_getDomains2SearchIn(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, _WORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 *v8;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  const char **v21;
  BOOL v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  unsigned int v26;

  v8 = *(unsigned __int16 **)(a1[19] + 16);
  if (v8)
  {
    v11 = *v8;
    if ((_DWORD)a6 == 1)
    {
      if (*v8)
      {
        v12 = 0;
        v13 = *(_QWORD *)(*((_QWORD *)v8 + 17) + 8);
        do
        {
          if (*(_QWORD *)(*(_QWORD *)(v13 + 8 * v12) + 16))
          {
            v14 = (unsigned __int16)*a5;
            if (v14 <= 0x1F2)
            {
              *(_WORD *)(a4 + 2 * v14) = v12;
              ++*a5;
              v11 = *v8;
            }
          }
          ++v12;
        }
        while (v12 < v11);
      }
    }
    else if (*v8)
    {
      v18 = 0;
      v19 = *(_QWORD *)(*((_QWORD *)v8 + 17) + 8);
      v20 = a2;
      do
      {
        v21 = *(const char ***)(*(_QWORD *)(v19 + 8 * v18) + 16);
        if (v21)
          v22 = a2 == 0;
        else
          v22 = 1;
        if (!v22)
        {
          v23 = 0;
          v24 = *v21;
          do
          {
            if (!strcmp(*(const char **)(a3 + 8 * v23), v24))
            {
              v25 = (unsigned __int16)*a5;
              if (v25 <= 0x1F2)
              {
                *(_WORD *)(a4 + 2 * v25) = v18;
                ++*a5;
              }
            }
            ++v23;
          }
          while (v23 < v20);
          v11 = *v8;
        }
        ++v18;
      }
      while (v18 < v11);
    }
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24049, 0, (uint64_t)a5, a6, a7, a8, v26);
    return FEDATA_ERROR(7);
  }
}

uint64_t FEData_blockData_getTokenAndCheckData(_QWORD *a1, uint64_t a2, _QWORD *a3, _WORD *a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int vars0;

  v8 = *(_QWORD *)(a1[19] + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 136) + 8) + 8 * *(unsigned __int16 *)(a2 + 2)) + 8);
    v10 = *(_QWORD *)(v9 + 48);
    v11 = *(unsigned __int16 *)(a2 + 4);
    v12 = *(_QWORD *)(v9 + 24);
    v13 = v10 + 32 * v11;
    *a3 = v12 + *(unsigned __int16 *)(v13 + 4);
    if (a4)
      *a4 = *(_WORD *)(v13 + 24);
    if (*(_WORD *)(v13 + 24))
      v14 = *(_QWORD *)(v10 + 32 * v11 + 8);
    else
      v14 = 0;
    *a5 = v14;
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24049, 0, (uint64_t)a5, a6, a7, a8, vars0);
    return FEDATA_ERROR(7);
  }
}

uint64_t FEData_blockData_getTokenData(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int vars0;

  v8 = *(_QWORD *)(a1[19] + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 136) + 8) + 8 * *(unsigned __int16 *)(a2 + 2)) + 8);
    *a3 = *(_QWORD *)(v9 + 24) + *(unsigned __int16 *)(*(_QWORD *)(v9 + 48) + 32 * *(unsigned __int16 *)(a2 + 4) + 4);
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24049, 0, a5, a6, a7, a8, vars0);
    return FEDATA_ERROR(7);
  }
}

uint64_t FEData_blockData_getTokenAndExpansionData(_QWORD *a1, uint64_t a2, _QWORD *a3, _WORD *a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int vars0;

  v8 = *(_QWORD *)(a1[19] + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 136) + 8) + 8 * *(unsigned __int16 *)(a2 + 2)) + 8);
    v10 = *(_QWORD *)(v9 + 24);
    v11 = *(_QWORD *)(v9 + 48) + 32 * *(unsigned __int16 *)(a2 + 4);
    *a3 = v10 + *(unsigned __int16 *)(v11 + 4);
    *a4 = *(_WORD *)(v11 + 26);
    if (*(_WORD *)(v11 + 26))
      v12 = *(_QWORD *)(v11 + 16);
    else
      v12 = 0;
    *a5 = v12;
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24049, 0, (uint64_t)a5, a6, a7, a8, vars0);
    return FEDATA_ERROR(7);
  }
}

uint64_t FEData_blockData_getTokenAndRegexData(_QWORD *a1, uint64_t a2, _QWORD *a3, _WORD *a4, _QWORD *a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int vars0;

  v8 = *(_QWORD *)(a1[19] + 16);
  if (v8)
  {
    v9 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 136) + 8) + 8 * *(unsigned __int16 *)(a2 + 2)) + 8);
    v10 = v9[6] + 32 * *(unsigned __int16 *)(a2 + 4);
    v11 = v9[8] + 16 * *(unsigned __int16 *)(v10 + 6);
    *a4 = *(_WORD *)(v11 + 10);
    *a6 = *(_DWORD *)(v11 + 12);
    *a3 = v9[4] + *(unsigned int *)(v11 + 4);
    *a5 = v9[3] + *(unsigned __int16 *)(v10 + 4);
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24049, 0, (uint64_t)a5, (uint64_t)a6, a7, a8, vars0);
    return FEDATA_ERROR(7);
  }
}

uint64_t FEData_blockData_getBTokAndRegexData(_QWORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4, _WORD *a5, _QWORD *a6, _DWORD *a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int vars0;

  v8 = *(_QWORD *)(a1[19] + 16);
  if (v8)
  {
    v9 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 136) + 8) + 8 * a2) + 8);
    v10 = v9[6] + 32 * a3;
    v11 = v9[8] + 16 * *(unsigned __int16 *)(v10 + 6);
    *a5 = *(_WORD *)(v11 + 10);
    *a7 = *(_DWORD *)(v11 + 12);
    *a4 = v9[4] + *(unsigned int *)(v11 + 4);
    *a6 = v9[3] + *(unsigned __int16 *)(v10 + 4);
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24049, 0, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, vars0);
    return FEDATA_ERROR(7);
  }
}

uint64_t readDataBlockFromFileRefCntBase(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t Chunk;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _WORD *v37;
  unsigned __int16 v38;
  _BYTE *v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  char *v56;
  uint64_t FunctionDataFromBinaryFile;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int16 v76;
  unsigned __int16 v77;
  _BYTE *v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  unsigned int v87;
  __int16 v88;
  unsigned __int16 v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  size_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int16 *v97;
  void *v98;
  _QWORD *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  _WORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD *v119;
  int v120;
  __int16 v121;
  unsigned int v122;
  __int16 v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _WORD *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  __int16 v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  __int16 v151;
  unsigned __int16 v152;
  _BYTE *v153;
  unsigned int v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unsigned int v164;
  __int16 v165;
  unsigned __int16 v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  int v180;
  int v181;
  unsigned __int16 *v182;
  unsigned int v183;
  int v184[2];
  uint64_t v185;

  v12 = *(unsigned __int16 **)(a1[19] + 16);
  v13 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 16);
  *(_QWORD *)a6 = v13;
  v18 = *a1;
  if (!v13)
  {
LABEL_140:
    log_OutPublic(*(_QWORD *)(v18 + 32), a1[23], 24048, 0, v14, v15, v16, v17, v174);
    v28 = FEDATA_ERROR(10);
    if ((v28 & 0x80000000) != 0)
LABEL_141:
      log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24052, 0, v169, v170, v171, v172, v175);
    return v28;
  }
  *(_QWORD *)(*(_QWORD *)a6 + 8) = heap_Calloc(*(_QWORD **)(v18 + 8), 1, (8 * *v12) | 1);
  if (!*(_QWORD *)(*(_QWORD *)a6 + 8))
  {
LABEL_139:
    v18 = *a1;
    goto LABEL_140;
  }
  v19 = *v12;
  **(_WORD **)a6 = v19;
  if (v19)
  {
    v181 = a4;
    v180 = a5;
    v20 = 0;
    v182 = v12;
    while (1)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a6 + 8) + 8 * v20) = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 48);
      v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a6 + 8) + 8 * v20);
      if (!v21)
        goto LABEL_139;
      *(_QWORD *)v184 = 0;
      v185 = 0;
      v183 = 0;
      Chunk = ssftriff_reader_FindChunk(a2, "HEAD", 1, (unsigned int *)&v185 + 1, v184);
      if ((Chunk & 0x80000000) != 0)
      {
LABEL_95:
        v28 = Chunk;
LABEL_96:
        v41 = 0;
LABEL_97:
        log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24052, 0, (uint64_t)v23, v24, v25, v26, v174);
        goto LABEL_98;
      }
      LODWORD(v185) = 0;
      v27 = (unsigned __int16)**(_WORD **)v184;
      LODWORD(v185) = 2;
      *(_DWORD *)v21 = v27;
      v28 = ssftriff_reader_CloseChunk(a2);
      if ((v28 & 0x80000000) != 0)
        goto LABEL_96;
      v29 = *(_DWORD *)v21;
      if ((*(_DWORD *)v21 - 3) <= 2)
      {
        v30 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 24);
        *(_QWORD *)(v21 + 24) = v30;
        if (!v30)
          goto LABEL_103;
        Chunk = ssftriff_reader_FindChunk(a2, "REMP", 1, (unsigned int *)&v185 + 1, v184);
        if ((Chunk & 0x80000000) != 0)
          goto LABEL_95;
        LODWORD(v185) = 0;
        v32 = *(_QWORD *)v184;
        v33 = (unsigned __int16)**(_WORD **)v184;
        LODWORD(v185) = 2;
        v34 = *(_QWORD *)(v21 + 24);
        *(_DWORD *)v34 = v33;
        if (!v33)
        {
          *(_WORD *)(v34 + 16) = *(_WORD *)(v32 + 2);
          LODWORD(v185) = 4;
          if (*(_WORD *)(*(_QWORD *)(v21 + 24) + 16))
          {
            v141 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 8 * *(unsigned __int16 *)(*(_QWORD *)(v21 + 24) + 16));
            v146 = *(_QWORD *)(v21 + 24);
            *(_QWORD *)(v146 + 8) = v141;
            if (!v141)
            {
              log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24048, 0, v142, v143, v144, v145, v174);
              *(_WORD *)(*(_QWORD *)(v21 + 24) + 16) = 0;
              goto LABEL_130;
            }
            if (*(_WORD *)(v146 + 16))
            {
              v147 = 0;
              while (1)
              {
                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 24) + 8) + 8 * v147) = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 24);
                v148 = *(_QWORD *)(v21 + 24);
                if (!*(_QWORD *)(*(_QWORD *)(v148 + 8) + 8 * v147))
                  goto LABEL_128;
                if (++v147 >= (unint64_t)*(unsigned __int16 *)(v148 + 16))
                {
                  v12 = v182;
                  if (!*(_WORD *)(v148 + 16))
                    break;
                  v149 = 0;
                  while (1)
                  {
                    v177 = v149;
                    v150 = *(_QWORD **)(*(_QWORD *)(v148 + 8) + 8 * v149);
                    v151 = *(_WORD *)(*(_QWORD *)v184 + v185);
                    LODWORD(v185) = v185 + 2;
                    v152 = v151 + 1;
                    v153 = (_BYTE *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, (unsigned __int16)(v151 + 1));
                    *v150 = v153;
                    if (!v153)
                      goto LABEL_128;
                    v179 = v150;
                    v183 = v152;
                    v28 = ssftriff_reader_ReadStringZ(a2, *(uint64_t *)v184, HIDWORD(v185), v185, v153, &v183);
                    v41 = 1;
                    if ((v28 & 0x80000000) != 0 || v183 != v152)
                      goto LABEL_105;
                    v154 = v185 + v152;
                    LODWORD(v185) = v154;
                    v155 = *(_QWORD *)v184;
                    v156 = v179;
                    *((_WORD *)v179 + 4) = *(_WORD *)(*(_QWORD *)v184 + v154);
                    LODWORD(v185) = v154 + 2;
                    *((_WORD *)v179 + 5) = *(_WORD *)(v155 + v154 + 2);
                    LODWORD(v185) = v154 + 4;
                    v157 = *(unsigned __int16 *)(v155 + v154 + 4);
                    *((_WORD *)v179 + 6) = v157;
                    LODWORD(v185) = v154 + 6;
                    if (v157)
                    {
                      v158 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 8 * v157);
                      v179[2] = v158;
                      if (!v158)
                      {
                        log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24048, 0, v159, v160, v161, v162, v174);
                        *((_WORD *)v179 + 6) = 0;
                        goto LABEL_130;
                      }
                      if (*((_WORD *)v179 + 6))
                      {
                        v163 = 0;
                        v164 = v185;
                        do
                        {
                          v165 = *(_WORD *)(*(_QWORD *)v184 + v164);
                          LODWORD(v185) = v164 + 2;
                          v166 = v165 + 1;
                          *(_QWORD *)(v156[2] + 8 * v163) = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, (unsigned __int16)(v165 + 1));
                          v23 = *(_BYTE **)(v156[2] + 8 * v163);
                          if (!v23)
                            goto LABEL_128;
                          v183 = v166;
                          v28 = ssftriff_reader_ReadStringZ(a2, *(uint64_t *)v184, HIDWORD(v185), v185, v23, &v183);
                          v41 = 1;
                          if ((v28 & 0x80000000) != 0 || v183 != v166)
                            goto LABEL_105;
                          v164 = v185 + v166;
                          LODWORD(v185) = v164;
                          ++v163;
                          v156 = v179;
                        }
                        while (v163 < *((unsigned __int16 *)v179 + 6));
                      }
                    }
                    v149 = v177 + 1;
                    v148 = *(_QWORD *)(v21 + 24);
                    v12 = v182;
                    if (v177 + 1 >= (unint64_t)*(unsigned __int16 *)(v148 + 16))
                      goto LABEL_12;
                  }
                }
              }
            }
          }
        }
LABEL_12:
        v28 = ssftriff_reader_CloseChunk(a2);
        if ((v28 & 0x80000000) != 0)
          goto LABEL_96;
        v29 = *(_DWORD *)v21;
      }
      if (v29 <= 5 && ((1 << v29) & 0x2D) != 0)
      {
        v35 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 72);
        *(_QWORD *)(v21 + 8) = v35;
        if (!v35)
          goto LABEL_103;
        v29 = *(_DWORD *)v21;
      }
      if (v29 <= 5 && ((1 << v29) & 0x36) != 0)
      {
        v36 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 64);
        *(_QWORD *)(v21 + 16) = v36;
        if (!v36)
        {
LABEL_103:
          log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24048, 0, v31, v24, v25, v26, v174);
          v140 = FEDATA_ERROR(10);
          goto LABEL_104;
        }
        v29 = *(_DWORD *)v21;
      }
      if (v29 <= 5 && ((1 << v29) & 0x2D) != 0)
      {
        Chunk = ssftriff_reader_FindChunk(a2, "TDAT", 1, (unsigned int *)&v185 + 1, v184);
        if ((Chunk & 0x80000000) != 0)
          goto LABEL_95;
        LODWORD(v185) = 0;
        v37 = *(_WORD **)v184;
        *(_QWORD *)(v21 + 40) = *(_QWORD *)v184;
        LOWORD(v37) = *v37;
        LODWORD(v185) = 2;
        v38 = (_WORD)v37 + 1;
        v39 = (_BYTE *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, (unsigned __int16)((_WORD)v37 + 1));
        **(_QWORD **)(v21 + 8) = v39;
        if (!v39)
          goto LABEL_128;
        v183 = v38;
        v28 = ssftriff_reader_ReadStringZ(a2, *(uint64_t *)v184, HIDWORD(v185), v185, v39, &v183);
        v41 = 1;
        if ((v28 & 0x80000000) != 0 || v183 != v38)
          goto LABEL_105;
        v42 = v185 + v38;
        LODWORD(v185) = v42;
        v43 = *(_QWORD *)v184;
        *(_WORD *)(*(_QWORD *)(v21 + 8) + 8) = *(_WORD *)(*(_QWORD *)v184 + v42);
        LODWORD(v185) = v42 + 2;
        *(_WORD *)(*(_QWORD *)(v21 + 8) + 12) = *(_WORD *)(v43 + v42 + 2);
        LODWORD(v185) = v42 + 4;
        v44 = *(_DWORD *)(v43 + v42 + 4);
        LODWORD(v185) = v42 + 8;
        v45 = *(_DWORD *)(v43 + v42 + 8);
        v46 = v42 + 12;
        v47 = *(_QWORD *)(v21 + 8);
        *(_DWORD *)(v47 + 16) = v46;
        *(_QWORD *)(v47 + 24) = v43 + v46;
        LODWORD(v185) = v44 + v46;
        v48 = (v44 + v46 + *(_DWORD *)(v43 + (v44 + v46)) + 4);
        *(_DWORD *)(v47 + 40) = v48;
        *(_QWORD *)(v47 + 32) = v43 + v48;
        LODWORD(v185) = v48 + v45;
        if (*(_WORD *)(v47 + 8))
        {
          v49 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 32 * *(unsigned __int16 *)(v47 + 8));
          v47 = *(_QWORD *)(v21 + 8);
          *(_QWORD *)(v47 + 48) = v49;
          if (!v49)
            goto LABEL_132;
          if (*(_WORD *)(v47 + 8))
          {
            v50 = 0;
            v51 = 0;
            while (1)
            {
              v52 = *(_QWORD *)(v47 + 48) + v50;
              v53 = *(_QWORD *)v184;
              v54 = *(unsigned __int16 *)(*(_QWORD *)v184 + v185);
              LODWORD(v185) = v185 + 2;
              *(_DWORD *)v52 = v54;
              *(_WORD *)(v52 + 4) = *(_WORD *)(v53 + v185);
              LODWORD(v185) = v185 + 2;
              *(_WORD *)(v52 + 6) = *(_WORD *)(*(_QWORD *)v184 + v185);
              LODWORD(v185) = v185 + 2;
              LODWORD(v53) = *(unsigned __int16 *)(*(_QWORD *)v184 + v185);
              *(_WORD *)(v52 + 24) = v53;
              LODWORD(v185) = v185 + 2;
              *(_WORD *)(v52 + 26) = *(_WORD *)(*(_QWORD *)v184 + v185);
              LODWORD(v185) = v185 + 2;
              *(_WORD *)(v52 + 28) = *(_WORD *)(*(_QWORD *)v184 + v185);
              LODWORD(v185) = v185 + 2;
              *(_QWORD *)(v52 + 8) = 0;
              if ((_DWORD)v53)
              {
                v55 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 56);
                v56 = (char *)v55;
                *(_QWORD *)(v52 + 8) = v55;
                if (!v55)
                  goto LABEL_134;
                *(_QWORD *)v55 = &StaticIntPointers_1;
                *(_BYTE *)(v55 + 24) = 0;
                *(_QWORD *)(v55 + 16) = 0;
                *(_QWORD *)(v55 + 40) = 0;
                *(_QWORD *)(v55 + 48) = 0;
                *(_QWORD *)(v55 + 32) = 0;
                FunctionDataFromBinaryFile = FEData_readFunctionDataFromBinaryFile(a1, a2, *a1, v55, *(uint64_t *)v184, (unsigned int *)&v185, HIDWORD(v185));
                if ((FunctionDataFromBinaryFile & 0x80000000) != 0)
                  break;
              }
              *(_QWORD *)(v52 + 16) = 0;
              if (*(_WORD *)(v52 + 26))
              {
                v58 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 56);
                v56 = (char *)v58;
                *(_QWORD *)(v52 + 16) = v58;
                if (!v58)
                {
LABEL_134:
                  v167 = *(_QWORD *)(*a1 + 32);
                  v168 = a1[23];
                  goto LABEL_129;
                }
                *(_QWORD *)v58 = &StaticIntPointers_1;
                *(_BYTE *)(v58 + 24) = 0;
                *(_QWORD *)(v58 + 16) = 0;
                *(_QWORD *)(v58 + 40) = 0;
                *(_QWORD *)(v58 + 48) = 0;
                *(_QWORD *)(v58 + 32) = 0;
                FunctionDataFromBinaryFile = FEData_readFunctionDataFromBinaryFile(a1, a2, *a1, v58, *(uint64_t *)v184, (unsigned int *)&v185, HIDWORD(v185));
                if ((FunctionDataFromBinaryFile & 0x80000000) != 0)
                  break;
              }
              ++v51;
              v47 = *(_QWORD *)(v21 + 8);
              v50 += 32;
              if (v51 >= *(unsigned __int16 *)(v47 + 8))
                goto LABEL_39;
            }
            v28 = FunctionDataFromBinaryFile;
            v41 = 1;
            v12 = v182;
            goto LABEL_97;
          }
        }
LABEL_39:
        v59 = *(unsigned __int16 *)(v47 + 12);
        if (v59)
        {
          v60 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 16 * v59);
          v61 = *(_QWORD *)(v21 + 8);
          *(_QWORD *)(v61 + 64) = v60;
          if (!v60)
            goto LABEL_128;
          if (*(_WORD *)(v61 + 12))
          {
            v62 = 0;
            v63 = 0;
            do
            {
              v64 = *(_QWORD *)(v61 + 64);
              if (a3 == 1)
              {
                *(_DWORD *)(v64 + v62 + 4) = *(_DWORD *)(*(_QWORD *)v184 + v185);
                v65 = v185 + 4;
                LODWORD(v185) = v185 + 4;
                v66 = *(_QWORD *)v184;
              }
              else
              {
                v66 = *(_QWORD *)v184;
                v67 = *(unsigned __int16 *)(*(_QWORD *)v184 + v185);
                LODWORD(v185) = v185 + 2;
                *(_DWORD *)(v64 + v62 + 4) = v67;
                v65 = v185;
              }
              v68 = v64 + v62;
              *(_WORD *)(v68 + 8) = *(_WORD *)(v66 + v65);
              LODWORD(v185) = v185 + 2;
              *(_WORD *)(v68 + 10) = *(_WORD *)(*(_QWORD *)v184 + v185);
              LODWORD(v185) = v185 + 2;
              *(_WORD *)v68 = *(_WORD *)(*(_QWORD *)v184 + v185);
              v69 = v185;
              LODWORD(v185) = v185 + 2;
              v70 = *(unsigned __int16 *)(*(_QWORD *)v184 + v185);
              LODWORD(v185) = v69 + 4;
              *(_DWORD *)(v68 + 12) = v70;
              ++v63;
              v61 = *(_QWORD *)(v21 + 8);
              v62 += 16;
            }
            while (v63 < *(unsigned __int16 *)(v61 + 12));
          }
        }
        v71 = ssftriff_reader_DetachChunkData(a2, (uint64_t *)(v21 + 32), v184, v40, (uint64_t)v23, v24, v25, v26);
        if ((v71 & 0x80000000) != 0)
        {
          v28 = v71;
          v41 = 1;
          v12 = v182;
          goto LABEL_97;
        }
        v72 = *(_QWORD *)v184;
        *(_QWORD *)(v21 + 40) = *(_QWORD *)v184;
        v73 = *(_QWORD *)(v21 + 8);
        v74 = v72 + *(unsigned int *)(v73 + 16);
        v75 = v72 + *(unsigned int *)(v73 + 40);
        *(_QWORD *)(v73 + 24) = v74;
        *(_QWORD *)(v73 + 32) = v75;
        v28 = ssftriff_reader_CloseChunk(a2);
        v12 = v182;
        if ((v28 & 0x80000000) != 0)
          goto LABEL_96;
        v29 = *(_DWORD *)v21;
      }
      if (v29 > 5 || ((1 << v29) & 0x36) == 0)
        goto LABEL_101;
      Chunk = ssftriff_reader_FindChunk(a2, "DDAT", 1, (unsigned int *)&v185 + 1, v184);
      if ((Chunk & 0x80000000) != 0)
        goto LABEL_95;
      LODWORD(v185) = 0;
      v76 = **(_WORD **)v184;
      LODWORD(v185) = 2;
      v77 = v76 + 1;
      v78 = (_BYTE *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, (unsigned __int16)(v76 + 1));
      **(_QWORD **)(v21 + 16) = v78;
      if (!v78)
        goto LABEL_128;
      v183 = v77;
      v28 = ssftriff_reader_ReadStringZ(a2, *(uint64_t *)v184, HIDWORD(v185), v185, v78, &v183);
      v41 = 1;
      if ((v28 & 0x80000000) == 0 && v183 == v77)
      {
        v79 = v185 + v77;
        LODWORD(v185) = v79;
        v80 = *(_QWORD *)v184;
        v81 = *(unsigned __int16 *)(*(_QWORD *)v184 + v79);
        LODWORD(v185) = v79 + 2;
        v82 = *(_QWORD *)(v21 + 16);
        *(_DWORD *)(v82 + 8) = v81;
        *(_WORD *)(v82 + 24) = *(_WORD *)(v80 + v79 + 2);
        LODWORD(v185) = v79 + 4;
        *(_WORD *)(*(_QWORD *)(v21 + 16) + 50) = *(_WORD *)(v80 + v79 + 4);
        LODWORD(v185) = v79 + 6;
        v83 = *(_QWORD *)(v21 + 16);
        *(_QWORD *)(v83 + 56) = 0;
        if (*(_WORD *)(v83 + 50))
        {
          v84 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 8 * *(unsigned __int16 *)(v83 + 50));
          v83 = *(_QWORD *)(v21 + 16);
          *(_QWORD *)(v83 + 56) = v84;
          v85 = v181;
          if (v84)
          {
            if (*(_WORD *)(v83 + 50))
            {
              v86 = 0;
              v87 = v185;
              while (1)
              {
                v88 = *(_WORD *)(*(_QWORD *)v184 + v87);
                LODWORD(v185) = v87 + 2;
                v89 = v88 + 1;
                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 16) + 56) + 8 * v86) = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, (unsigned __int16)(v88 + 1));
                v23 = *(_BYTE **)(*(_QWORD *)(*(_QWORD *)(v21 + 16) + 56) + 8 * v86);
                if (!v23)
                  goto LABEL_128;
                v90 = v89;
                v183 = v89;
                v28 = ssftriff_reader_ReadStringZ(a2, *(uint64_t *)v184, HIDWORD(v185), v185, v23, &v183);
                v41 = 1;
                if ((v28 & 0x80000000) != 0 || v183 != v90)
                  goto LABEL_105;
                v87 = v185 + v90;
                LODWORD(v185) = v185 + v90;
                ++v86;
                v83 = *(_QWORD *)(v21 + 16);
                if (v86 >= *(unsigned __int16 *)(v83 + 50))
                  goto LABEL_64;
              }
            }
            goto LABEL_65;
          }
        }
        else
        {
LABEL_64:
          v85 = v181;
LABEL_65:
          if (!*(_WORD *)(v83 + 24))
            goto LABEL_82;
          v91 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 72 * *(unsigned __int16 *)(v83 + 24));
          v83 = *(_QWORD *)(v21 + 16);
          *(_QWORD *)(v83 + 16) = v91;
          if (v91)
          {
            if (*(_WORD *)(v83 + 24))
            {
              v92 = 0;
              while (1)
              {
                v93 = *(_QWORD *)(v83 + 16);
                v94 = *(unsigned __int16 *)(*(_QWORD *)v184 + v185);
                LODWORD(v185) = v185 + 2;
                v178 = v93;
                v95 = v92;
                v96 = v93 + 72 * v92;
                *(_WORD *)(v96 + 56) = v94;
                v97 = (unsigned __int16 *)(v96 + 56);
                v98 = (void *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, v94 + 1);
                *(_QWORD *)(v96 + 48) = v98;
                v99 = (_QWORD *)(v96 + 48);
                if (!v98)
                  break;
                v176 = v95;
                v100 = v178 + 72 * v95;
                memcpy(v98, (const void *)(*(_QWORD *)v184 + v185), v94);
                *(_BYTE *)(*v99 + v94) = 0;
                LODWORD(v185) = v185 + *v97;
                *(_WORD *)v100 = *(_WORD *)(*(_QWORD *)v184 + v185);
                LODWORD(v185) = v185 + 2;
                *(_WORD *)(v100 + 2) = *(_WORD *)(*(_QWORD *)v184 + v185);
                v101 = v185;
                LODWORD(v185) = v185 + 2;
                v102 = *(_QWORD *)v184;
                v103 = *(unsigned __int16 *)(*(_QWORD *)v184 + v185);
                LODWORD(v185) = v101 + 4;
                *(_DWORD *)(v100 + 60) = v103;
                v104 = *(unsigned __int16 *)(v102 + v185);
                LODWORD(v185) = v185 + 2;
                *(_DWORD *)(v100 + 64) = v104;
                v105 = *(unsigned __int16 *)(v102 + v185);
                LODWORD(v185) = v185 + 2;
                *(_DWORD *)(v100 + 8) = v105;
                if (v105 == 1)
                {
                  v106 = v178 + 72 * v176;
                  *(_WORD *)(v106 + 4) = *(_WORD *)(v102 + v185);
                  LODWORD(v185) = v185 + 2;
                  *(_WORD *)(v106 + 12) = *(_WORD *)(*(_QWORD *)v184 + v185);
                  LODWORD(v185) = v185 + 2;
                }
                v85 = v181;
                if (!v181)
                {
                  v107 = *(unsigned __int16 *)(*(_QWORD *)v184 + v185);
                  *(_WORD *)(v178 + 72 * v176 + 40) = v107;
                  v108 = v185;
                  LODWORD(v185) = v185 + 2;
                  if (v107)
                    LODWORD(v185) = v108 + 4 * (unsigned __int16)(v107 - 1) + 6;
                }
                if (v180 == 1)
                {
                  v109 = *(unsigned __int16 *)(*(_QWORD *)v184 + v185);
                  v110 = v178 + 72 * v176;
                  *(_WORD *)(v110 + 42) = v109;
                  v111 = (_WORD *)(v110 + 42);
                  LODWORD(v185) = v185 + 2;
                  if (v109)
                  {
                    v112 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 12 * v109);
                    *(_QWORD *)(v178 + 72 * v176 + 32) = v112;
                    if (!v112)
                    {
                      log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24048, 0, v113, v114, v115, v116, v174);
                      v28 = FEDATA_ERROR(10);
                      v12 = v182;
                      if ((v28 & 0x80000000) == 0)
                        goto LABEL_101;
                      goto LABEL_138;
                    }
                    v117 = (unsigned __int16)*v111;
                    if (*v111)
                    {
                      v118 = *(_QWORD *)v184;
                      v119 = (_DWORD *)(v112 + 8);
                      do
                      {
                        v120 = v185;
                        v121 = *(_WORD *)(v118 + v185);
                        LODWORD(v185) = v185 + 2;
                        v122 = v185;
                        *((_WORD *)v119 - 4) = v121;
                        v123 = *(_WORD *)(v118 + v122);
                        LODWORD(v185) = v120 + 4;
                        *((_WORD *)v119 - 2) = v123;
                        *v119 = 1;
                        v119 += 3;
                        --v117;
                      }
                      while (v117);
                    }
                  }
                }
                v83 = *(_QWORD *)(v21 + 16);
                v92 = v176 + 1;
                if (v176 + 1 >= (unint64_t)*(unsigned __int16 *)(v83 + 24))
                  goto LABEL_82;
              }
            }
            else
            {
LABEL_82:
              v124 = v185;
              *(_WORD *)(v83 + 48) = *(_WORD *)(*(_QWORD *)v184 + v185);
              LODWORD(v185) = v124 + 2;
              if (!*(_WORD *)(*(_QWORD *)(v21 + 16) + 48))
                goto LABEL_94;
              v125 = heap_Calloc(*(_QWORD **)(a1[3] + 8), 1, 16 * *(unsigned __int16 *)(*(_QWORD *)(v21 + 16) + 48));
              v126 = *(_QWORD *)(v21 + 16);
              *(_QWORD *)(v126 + 32) = v125;
              if (v125)
              {
                if (!*(_WORD *)(v126 + 48))
                {
LABEL_94:
                  v140 = ssftriff_reader_CloseChunk(a2);
LABEL_104:
                  v28 = v140;
                  v41 = 0;
                  goto LABEL_105;
                }
                v127 = 0;
                while (1)
                {
                  v128 = *(_QWORD *)(v126 + 32) + 16 * v127;
                  v129 = *(unsigned __int16 *)(*(_QWORD *)v184 + v185);
                  *(_WORD *)(v128 + 8) = v129;
                  v130 = (_WORD *)(v128 + 8);
                  LODWORD(v185) = v185 + 2;
                  v131 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 12 * v129);
                  *(_QWORD *)v128 = v131;
                  if (!v131)
                    break;
                  if (*v130)
                  {
                    v132 = 0;
                    v133 = 0;
                    do
                    {
                      v134 = *(_QWORD *)v128;
                      v135 = *(_QWORD *)v128 + v132;
                      *(_WORD *)(v135 + 2) = 0;
                      if (v85)
                      {
                        v136 = *(_QWORD *)v184;
                        v137 = v185;
                        v138 = *(unsigned __int8 *)(*(_QWORD *)v184 + v185);
                        LODWORD(v185) = v185 + 1;
                        v139 = v185;
                        *(_WORD *)(v135 + 2) = v138;
                        *(_WORD *)(v135 + 4) = *(unsigned __int8 *)(v136 + v139);
                      }
                      else
                      {
                        *(_WORD *)(v134 + v132) = *(_WORD *)(*(_QWORD *)v184 + v185);
                        LODWORD(v185) = v185 + 2;
                        *(_WORD *)(*(_QWORD *)v128 + v132 + 4) = *(_WORD *)(*(_QWORD *)v184 + v185);
                        v137 = v185;
                      }
                      LODWORD(v185) = v137 + 2;
                      ++v133;
                      v132 += 12;
                    }
                    while (v133 < (unsigned __int16)*v130);
                  }
                  ++v127;
                  v126 = *(_QWORD *)(v21 + 16);
                  if (v127 >= *(unsigned __int16 *)(v126 + 48))
                    goto LABEL_94;
                }
              }
            }
LABEL_128:
            v167 = *(_QWORD *)(*a1 + 32);
            v168 = a1[23];
            v56 = 0;
LABEL_129:
            log_OutPublic(v167, v168, 24048, v56, (uint64_t)v23, v24, v25, v26, v174);
LABEL_130:
            v28 = FEDATA_ERROR(10);
            v41 = 1;
            goto LABEL_105;
          }
        }
LABEL_132:
        log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24048, 0, (uint64_t)v23, v24, v25, v26, v174);
        v28 = FEDATA_ERROR(10);
      }
LABEL_105:
      v12 = v182;
      if ((v28 & 0x80000000) != 0)
        goto LABEL_97;
LABEL_98:
      if (v41)
        ssftriff_reader_CloseChunk(a2);
      if ((v28 & 0x80000000) != 0)
      {
LABEL_138:
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a6 + 8) + 8 * v20) = 0;
        log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24044, 0, (uint64_t)v23, v24, v25, v26, v174);
        goto LABEL_141;
      }
LABEL_101:
      log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"loaded data block %d", v24, v25, v26, v20);
      v20 = (unsigned __int16)v20 + 1;
      if (v20 >= *v12)
        return v28;
    }
  }
  return 0;
}

uint64_t readDataBlockFromFileRefCnt_0(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t result;
  uint64_t ObjcForThisApi;
  uint64_t v14;
  _QWORD v15[2];
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v20 = 0;
  v21 = 0;
  v18 = 0;
  v19 = 0;
  result = InitRsrcFunction(*(_WORD **)(a1 + 8), *(_QWORD *)(a1 + 16), &v21);
  if ((result & 0x80000000) == 0)
  {
    result = InitRsrcFunction(*(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), &v20);
    if ((result & 0x80000000) == 0)
    {
      v15[0] = a1;
      v15[1] = a2;
      v16 = a3;
      v17 = a4;
      LODWORD(v18) = a5;
      ObjcForThisApi = getObjcForThisApi(v21, v20);
      result = objc_GetAddRefCountedObject(ObjcForThisApi, a6, (uint64_t (*)(_QWORD, _QWORD, uint64_t, __int128 *, uint64_t))readDataBlockFromFile_ObjcLoad_0, (void (*)(_QWORD, _QWORD, __int128 *))readDataBlockFromFile_ObjcClose_0, (uint64_t)v15, &v19);
      if ((result & 0x80000000) != 0)
        v14 = 0;
      else
        v14 = *(_QWORD *)(v19 + 32);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 16) + 136) = v14;
    }
  }
  return result;
}

uint64_t readDataBlockFromFile_ObjcLoad_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v51;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t j;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned __int16 *v66;
  _DWORD *v67;
  unsigned __int16 *v68;
  uint64_t v69;
  uint64_t i;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int16 *v79;
  const char *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t *v92;
  _QWORD *v93;
  uint64_t v94;

  v6 = (uint64_t *)(a4 + 32);
  result = readDataBlockFromFileRefCntBase(*(uint64_t **)a5, *(_QWORD *)(a5 + 8), *(_DWORD *)(a5 + 16), *(_DWORD *)(a5 + 20), *(_DWORD *)(a5 + 24), a4 + 32);
  if ((result & 0x80000000) != 0)
    return result;
  v11 = *(uint64_t **)a5;
  v12 = *v6;
  v13 = *(_WORD **)(v11[19] + 16);
  if (*v13)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8 * v14);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 16);
        if (v18)
        {
          if (*(_WORD *)(v18 + 24))
          {
            v19 = 0;
            v20 = *(_QWORD *)(v18 + 16);
            do
            {
              if (*(_DWORD *)(v20 + 72 * v19 + 8) == 1)
              {
                v21 = *(unsigned __int16 *)(v18 + 48);
                if (*(_WORD *)(v18 + 48))
                {
                  v22 = 0;
                  v23 = *(_QWORD *)(v18 + 32);
                  v24 = v20 + 72 * v19;
                  v25 = (unsigned __int16 *)(v24 + 42);
                  v26 = (_QWORD *)(v24 + 32);
                  v8 = (unsigned __int16)(v21 - 1);
                  do
                  {
                    v9 = v23 + 16 * v22;
                    v10 = *(unsigned __int16 *)(v9 + 8);
                    if (*(_WORD *)(v9 + 8))
                    {
                      v27 = 0;
                      do
                      {
                        v28 = 0;
                        do
                        {
                          v29 = v28 + 12;
                          if (12 * *v25 + 12 == v28 + 12)
                            break;
                          v30 = *(_QWORD *)v9;
                          if (*(unsigned __int16 *)(*v26 + v28) == *(unsigned __int16 *)(*(_QWORD *)v9 + 12 * v27)
                            && (v31 = *v26 + v28,
                                *(unsigned __int16 *)(v31 + 2) == *(unsigned __int16 *)(v30 + 12 * v27 + 2)))
                          {
                            v33 = *(unsigned __int16 *)(v31 + 4) == *(unsigned __int16 *)(v30 + 12 * v27 + 4);
                            v32 = v33;
                            if (v33)
                              v15 = 1;
                          }
                          else
                          {
                            v32 = 0;
                          }
                          v28 = v29;
                        }
                        while (!v32);
                        ++v27;
                      }
                      while (v27 != v10);
                    }
                    ++v22;
                  }
                  while (v22 != v21);
                  v16 = (uint64_t *)(v23 + 16 * v8);
                }
              }
              ++v19;
            }
            while (v19 != *(unsigned __int16 *)(v18 + 24));
          }
        }
      }
      ++v14;
    }
    while (v14 != (unsigned __int16)*v13);
  }
  else
  {
    v16 = 0;
    v15 = 0;
  }
  if (*((_DWORD *)v11 + 154))
    v33 = v15 == 0;
  else
    v33 = 0;
  if (v33)
  {
    v34 = 1;
    *((_DWORD *)v11 + 240) = 1;
  }
  else
  {
    v34 = *((unsigned int *)v11 + 240);
  }
  log_OutText(*(_QWORD *)(*v11 + 32), v11[23], 4, 0, (uint64_t)"btok twoloop data=%d", v8, v9, v10, v34);
  v39 = (unsigned __int16)*v13;
  if (!v39)
    return 0;
  v40 = 0;
  v86 = 0;
  v41 = *(_QWORD *)(v12 + 8);
  v91 = v39;
  while (1)
  {
    v42 = *(_QWORD *)(v41 + 8 * v40);
    if (v42)
    {
      v43 = *(_QWORD *)(v42 + 16);
      if (v43)
      {
        if (*(_WORD *)(v43 + 24))
          break;
      }
    }
LABEL_95:
    v90 = v16;
    for (i = 0; i != v91; ++i)
    {
      v71 = *(_QWORD *)(v41 + 8 * i);
      if (v71)
      {
        v72 = *(_QWORD *)(v71 + 24);
        if (v72)
        {
          v73 = *(unsigned __int16 *)(v72 + 16);
          if (*(_WORD *)(v72 + 16))
          {
            v74 = 0;
            v94 = *(_QWORD *)(v72 + 8);
            do
            {
              v75 = v42;
              if (v42)
              {
                v76 = *(_QWORD *)(v42 + 16);
                if (v76)
                {
                  v77 = *(unsigned __int16 *)(v76 + 24);
                  if (*(_WORD *)(v76 + 24))
                  {
                    v78 = *(_QWORD *)(v94 + 8 * v74);
                    v79 = *(unsigned __int16 **)(v76 + 16);
                    v80 = *(const char **)v78;
                    do
                    {
                      if (!strcmp(v80, (const char *)(*((_QWORD *)v79 + 6) + *v79)))
                        *(_WORD *)(v78 + 10) = v40;
                      v79 += 36;
                      --v77;
                    }
                    while (v77);
                  }
                }
              }
              ++v74;
              v42 = v75;
            }
            while (v74 != v73);
          }
        }
      }
      v39 = v91;
    }
    ++v40;
    v16 = v90;
    if (v40 == v91)
      return 0;
  }
  v44 = 0;
  v45 = *(_QWORD *)(v43 + 16);
  v83 = *(unsigned __int16 *)(v43 + 24);
  v84 = v45;
  while (1)
  {
    v46 = *(unsigned __int16 *)(v45 + 72 * v44 + 42);
    v85 = v44;
    if (*(_WORD *)(v45 + 72 * v44 + 42))
    {
      v47 = 0;
      v92 = (uint64_t *)(v45 + 72 * v44 + 32);
      while (1)
      {
        v48 = 0;
        while (1)
        {
          v49 = *(_QWORD *)(v41 + 8 * v48);
          if (*(_DWORD *)v49 == 1 || *(_DWORD *)v49 == 4)
            goto LABEL_49;
          v51 = *(unsigned __int16 *)(v43 + 50);
          if (!*(_WORD *)(v43 + 50))
            goto LABEL_49;
          if (*((_DWORD *)v11 + 240) != 1 || v16 == 0)
          {
            v53 = *v92;
            goto LABEL_60;
          }
          v53 = *v92;
          if (v51 > *(unsigned __int16 *)(*v16 + 12 * v47))
            break;
LABEL_60:
          v54 = *(unsigned __int16 *)(v53 + 12 * v47);
          if (v51 > v54)
            goto LABEL_61;
LABEL_49:
          if (v39 == ++v48)
            goto LABEL_111;
        }
        v54 = *(unsigned __int16 *)(v53 + 12 * v47);
LABEL_61:
        if (strcmp(**(const char ***)(v49 + 8), *(const char **)(*(_QWORD *)(v43 + 56) + 8 * v54)))
          goto LABEL_49;
        *(_WORD *)(v53 + 12 * v47++ + 2) = v48;
        if (v47 == v46)
        {
          v86 = 1;
          v45 = v84;
          v44 = v85;
          break;
        }
      }
    }
    v82 = v42;
    if (*(_DWORD *)(v45 + 72 * v44 + 8) == 1)
    {
      v88 = *(unsigned __int16 *)(v43 + 48);
      if (*(_WORD *)(v43 + 48))
        break;
    }
    v56 = v86;
LABEL_94:
    v86 = v56;
    v45 = v84;
    v44 = v85 + 1;
    v42 = v82;
    if (v85 + 1 == v83)
      goto LABEL_95;
  }
  v55 = 0;
  v87 = *(_QWORD *)(v43 + 32);
  v93 = (_QWORD *)(v45 + 72 * v44 + 32);
  v56 = v86;
  while (1)
  {
    v89 = v55;
    v16 = (uint64_t *)(v87 + 16 * v55);
    v57 = *((unsigned __int16 *)v16 + 4);
    if (*((_WORD *)v16 + 4))
    {
      v58 = 0;
      do
      {
        for (j = 0; j != v39; ++j)
        {
          v60 = *(_QWORD *)(v41 + 8 * j);
          if (*(_DWORD *)v60 != 1 && *(_DWORD *)v60 != 4)
          {
            if (*(_WORD *)(v43 + 50))
            {
              v62 = *v16;
              v63 = *(unsigned __int16 *)(*v16 + 12 * v58);
              if (*(unsigned __int16 *)(v43 + 50) > v63
                && !strcmp(**(const char ***)(v60 + 8), *(const char **)(*(_QWORD *)(v43 + 56) + 8 * v63)))
              {
                *(_WORD *)(v62 + 12 * v58 + 2) = j;
                v56 = 1;
                if (!(_DWORD)v46)
                  goto LABEL_89;
                goto LABEL_83;
              }
            }
          }
        }
        v56 = 0;
        if (!(_DWORD)v46)
          goto LABEL_89;
LABEL_83:
        v64 = *v16 + 12 * v58;
        v65 = *(unsigned __int16 *)(v64 + 2);
        v66 = (unsigned __int16 *)(v64 + 4);
        v67 = (_DWORD *)(v64 + 8);
        v68 = (unsigned __int16 *)(*v93 + 4);
        v69 = v46;
        while (*(v68 - 1) != v65 || *v68 != *v66)
        {
          v68 += 6;
          if (!--v69)
            goto LABEL_89;
        }
        *v67 = 1;
LABEL_89:
        ++v58;
      }
      while (v58 != v57);
    }
    if (!v56)
      break;
    v55 = v89 + 1;
    v56 = 1;
    if (v89 + 1 == v88)
      goto LABEL_94;
  }
LABEL_111:
  log_OutPublic(*(_QWORD *)(*v11 + 32), v11[23], 24045, 0, v35, v36, v37, v38, v81);
  return 0;
}

uint64_t readDataBlockFromFile_ObjcClose_0(_WORD *a1, int a2, uint64_t a3)
{
  unsigned __int16 *v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int16 v39;
  uint64_t v40;
  unint64_t i;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int16 v45;
  unint64_t j;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int16 *v54;
  unsigned int v55;
  uint64_t v56;

  v3 = *(unsigned __int16 **)(a3 + 32);
  v56 = 0;
  inited = InitRsrcFunction(a1, a2, &v56);
  v11 = inited;
  if ((inited & 0x80000000) == 0)
  {
    if (v3)
    {
      v12 = *((_QWORD *)v3 + 1);
      if (v12)
      {
        v13 = *v3;
        if (*v3)
        {
          v55 = inited;
          v14 = 0;
          v54 = v3;
          while (1)
          {
            v15 = *(_QWORD *)(*((_QWORD *)v3 + 1) + 8 * v14);
            if (v15)
            {
              v17 = (_QWORD **)(v15 + 32);
              v16 = *(_QWORD **)(v15 + 32);
              if (v16)
              {
                v55 = ssftriff_reader_ReleaseChunkData(v16, v12, v5, v6, v7, v8, v9, v10);
                if ((v55 & 0x80000000) != 0)
                  return v55;
                *v17 = 0;
                *(_QWORD *)(v15 + 40) = 0;
              }
              v18 = v56;
              v20 = *(_QWORD *)(v15 + 8);
              v19 = *(_QWORD *)(v15 + 16);
              v21 = *(_QWORD *)(v15 + 24);
              if (v20)
              {
                if (*(_DWORD *)v15 <= 5u && ((1 << *(_DWORD *)v15) & 0x2D) != 0)
                {
                  heap_Free(*(_QWORD **)(v56 + 8), *(_QWORD *)v20);
                  *(_QWORD *)v20 = 0;
                  v23 = *(_QWORD *)(v20 + 48);
                  if (v23)
                  {
                    if (*(_WORD *)(v20 + 8))
                    {
                      v24 = 0;
                      v25 = 0;
                      do
                      {
                        v26 = *(_QWORD *)(v20 + 48) + v24;
                        v27 = *(_QWORD *)(v26 + 8);
                        if (v27)
                        {
                          FEData_freeEntry((_QWORD *)v18, v27, 1);
                          heap_Free(*(_QWORD **)(v18 + 8), *(_QWORD *)(v26 + 8));
                          *(_QWORD *)(v26 + 8) = 0;
                        }
                        v28 = *(_QWORD *)(v26 + 16);
                        if (v28)
                        {
                          FEData_freeEntry((_QWORD *)v18, v28, 1);
                          heap_Free(*(_QWORD **)(v18 + 8), *(_QWORD *)(v26 + 16));
                          *(_QWORD *)(v26 + 16) = 0;
                        }
                        ++v25;
                        v24 += 32;
                      }
                      while (v25 < *(unsigned __int16 *)(v20 + 8));
                      v23 = *(_QWORD *)(v20 + 48);
                      v3 = v54;
                    }
                    heap_Free(*(_QWORD **)(v18 + 8), v23);
                    *(_QWORD *)(v20 + 48) = 0;
                  }
                  v29 = *(_QWORD *)(v20 + 64);
                  if (v29)
                  {
                    heap_Free(*(_QWORD **)(v18 + 8), v29);
                    *(_QWORD *)(v20 + 64) = 0;
                  }
                  heap_Free(*(_QWORD **)(v18 + 8), *(_QWORD *)(v15 + 8));
                  *(_QWORD *)(v15 + 8) = 0;
                }
              }
              if (v19)
              {
                if (*(_DWORD *)v15 <= 5u && ((1 << *(_DWORD *)v15) & 0x36) != 0)
                {
                  if (*(_QWORD *)v19)
                  {
                    heap_Free(*(_QWORD **)(v18 + 8), *(_QWORD *)v19);
                    *(_QWORD *)v19 = 0;
                  }
                  v31 = *(_QWORD *)(v19 + 56);
                  if (v31)
                  {
                    if (*(_WORD *)(v19 + 50))
                    {
                      v32 = 0;
                      do
                      {
                        heap_Free(*(_QWORD **)(v18 + 8), *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v32));
                        *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v32++) = 0;
                      }
                      while (v32 < *(unsigned __int16 *)(v19 + 50));
                      v31 = *(_QWORD *)(v19 + 56);
                    }
                    heap_Free(*(_QWORD **)(v18 + 8), v31);
                    *(_QWORD *)(v19 + 56) = 0;
                  }
                  if (*(_QWORD *)(v19 + 16))
                  {
                    if (*(_WORD *)(v19 + 24))
                    {
                      v33 = 0;
                      v34 = 0;
                      do
                      {
                        v35 = (_QWORD *)(*(_QWORD *)(v19 + 16) + v33);
                        heap_Free(*(_QWORD **)(v18 + 8), v35[6]);
                        v35[6] = 0;
                        v36 = v35[2];
                        if (v36)
                        {
                          heap_Free(*(_QWORD **)(v18 + 8), v36);
                          v35[2] = 0;
                        }
                        v37 = v35[4];
                        if (v37)
                        {
                          heap_Free(*(_QWORD **)(v18 + 8), v37);
                          v35[4] = 0;
                        }
                        ++v34;
                        v33 += 72;
                      }
                      while (v34 < *(unsigned __int16 *)(v19 + 24));
                    }
                    v38 = *(_QWORD *)(v19 + 32);
                    v3 = v54;
                    if (v38)
                    {
                      v39 = *(_WORD *)(v19 + 48);
                      if (v39)
                      {
                        v40 = 0;
                        for (i = 0; i < v39; ++i)
                        {
                          v42 = *(_QWORD *)(v19 + 32);
                          v43 = *(_QWORD *)(v42 + v40);
                          if (v43)
                          {
                            heap_Free(*(_QWORD **)(v18 + 8), v43);
                            *(_QWORD *)(v42 + v40) = 0;
                            v39 = *(_WORD *)(v19 + 48);
                          }
                          v40 += 16;
                        }
                        v38 = *(_QWORD *)(v19 + 32);
                        v3 = v54;
                      }
                      heap_Free(*(_QWORD **)(v18 + 8), v38);
                      *(_QWORD *)(v19 + 32) = 0;
                    }
                    heap_Free(*(_QWORD **)(v18 + 8), *(_QWORD *)(v19 + 16));
                    *(_QWORD *)(v19 + 16) = 0;
                  }
                  heap_Free(*(_QWORD **)(v18 + 8), *(_QWORD *)(v15 + 16));
                  *(_QWORD *)(v15 + 16) = 0;
                }
              }
              if (v21)
              {
                v44 = *(_QWORD *)(v21 + 8);
                if (v44)
                {
                  v45 = *(_WORD *)(v21 + 16);
                  if (v45)
                  {
                    for (j = 0; j < v45; ++j)
                    {
                      v47 = *(_QWORD *)(v21 + 8);
                      v48 = *(_QWORD *)(v47 + 8 * j);
                      if (v48)
                      {
                        if (*(_QWORD *)v48)
                        {
                          heap_Free(*(_QWORD **)(v18 + 8), *(_QWORD *)v48);
                          v47 = *(_QWORD *)(v21 + 8);
                          **(_QWORD **)(v47 + 8 * j) = 0;
                          v48 = *(_QWORD *)(v47 + 8 * j);
                        }
                        v49 = *(_QWORD *)(v48 + 16);
                        if (v49)
                        {
                          if (*(_WORD *)(v48 + 12))
                          {
                            v50 = 0;
                            do
                            {
                              v51 = *(_QWORD *)(*(_QWORD *)(v48 + 16) + 8 * v50);
                              if (v51)
                              {
                                heap_Free(*(_QWORD **)(v18 + 8), v51);
                                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) + 8 * j) + 16) + 8 * v50) = 0;
                                v47 = *(_QWORD *)(v21 + 8);
                              }
                              ++v50;
                              v48 = *(_QWORD *)(v47 + 8 * j);
                            }
                            while (v50 < *(unsigned __int16 *)(v48 + 12));
                            v49 = *(_QWORD *)(v48 + 16);
                          }
                          heap_Free(*(_QWORD **)(v18 + 8), v49);
                          v52 = *(_QWORD *)(v21 + 8);
                          *(_QWORD *)(*(_QWORD *)(v52 + 8 * j) + 16) = 0;
                          v48 = *(_QWORD *)(v52 + 8 * j);
                        }
                        *(_WORD *)(v48 + 12) = 0;
                        heap_Free(*(_QWORD **)(v18 + 8), v48);
                        *(_QWORD *)(*(_QWORD *)(v21 + 8) + 8 * j) = 0;
                        v45 = *(_WORD *)(v21 + 16);
                      }
                    }
                    v44 = *(_QWORD *)(v21 + 8);
                  }
                  heap_Free(*(_QWORD **)(v18 + 8), v44);
                  *(_QWORD *)(v21 + 8) = 0;
                }
                *(_WORD *)(v21 + 16) = 0;
                heap_Free(*(_QWORD **)(v18 + 8), v21);
              }
              if (*v17)
              {
                ssftriff_reader_ReleaseChunkData(*v17, v12, v5, v6, v7, v8, v9, v10);
                *v17 = 0;
                *(_QWORD *)(v15 + 40) = 0;
              }
              heap_Free(*(_QWORD **)(v18 + 8), v15);
              v13 = *v3;
            }
            if (++v14 >= (unint64_t)v13)
            {
              v12 = *((_QWORD *)v3 + 1);
              v11 = v55;
              break;
            }
          }
        }
        heap_Free(*(_QWORD **)(v56 + 8), v12);
        heap_Free(*(_QWORD **)(v56 + 8), (uint64_t)v3);
      }
    }
  }
  return v11;
}

uint64_t FEData_blockData_loadDataFiles(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v17;
  _WORD *RsrcHandleForThisApi;
  uint64_t v19;
  _WORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t Chunk;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t DataBlockFromFileRefCnt_0;
  _BOOL4 v33;
  _BOOL4 v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t i;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unsigned int v70;
  const char *v71;
  int v72[2];
  uint64_t v73;
  unsigned __int16 *v74;
  unsigned int v75;
  _QWORD *v76;
  _OWORD v77[8];
  char v78[136];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 152);
  v76 = 0;
  memset(v78, 0, 128);
  memset(v77, 0, sizeof(v77));
  v75 = 0;
  v73 = 0;
  v74 = 0;
  *(_QWORD *)v72 = 0;
  *a4 = 0;
  v10 = *(unsigned __int16 **)(v9 + 16);
  if (!v10)
  {
    v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v12 = *(_QWORD *)(a1 + 184);
    v13 = 24049;
    goto LABEL_5;
  }
  if (*v10)
  {
    v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v12 = *(_QWORD *)(a1 + 184);
    v13 = 24055;
LABEL_5:
    log_OutPublic(v11, v12, v13, 0, a5, a6, a7, a8, v70);
    return FEDATA_ERROR(7);
  }
  v15 = *(_QWORD *)a1;
  if (*(unsigned __int8 *)(a1 + 352) > *(unsigned __int16 *)(a1 + 336))
  {
    log_OutPublic(*(_QWORD *)(v15 + 32), *(_QWORD *)(a1 + 184), 24056, "%s%d%s%d", a5, a6, a7, a8, "invalid language identifier index");
    return FEDATA_ERROR(0);
  }
  if ((paramc_ParamGetStr(*(_QWORD *)(v15 + 40), (uint64_t)"langcode", v72) & 0x80000000) != 0)
    *(_QWORD *)v72 = &byte_1DEBD87CE;
  if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"fecfg", &v73) & 0x80000000) == 0)
  {
    strcpy((char *)v77, "tokentn/");
    __strcat_chk();
    __strcat_chk();
    __strcat_chk();
    v17 = brokeraux_ComposeBrokerString(*(_QWORD *)a1, (const char *)v77, 1, 1, *(char **)v72, 0, 0, v78, 0x80uLL);
    if ((v17 & 0x80000000) != 0)
      return FEDATA_ERROR(v17);
    RsrcHandleForThisApi = (_WORD *)getRsrcHandleForThisApi(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32));
    if ((ssftriff_reader_ObjOpen(RsrcHandleForThisApi, v19, 2, v78, "TOKN", 1031, (uint64_t *)&v76) & 0x80000000) == 0)
    {
LABEL_15:
      Chunk = ssftriff_reader_FindChunk((uint64_t)v76, "CFIG", 0, &v75, &v74);
      v31 = Chunk & 0x1FFF;
      if ((Chunk & 0x80000000) != 0)
      {
        DataBlockFromFileRefCnt_0 = Chunk;
        if (v31 != 20)
          goto LABEL_63;
      }
      if (v31 == 20)
      {
        v33 = 0;
        v34 = 0;
LABEL_29:
        v36 = ssftriff_reader_FindChunk((uint64_t)v76, "FILE", 0, &v75, &v74);
        if ((v36 & 0x80000000) == 0)
        {
          *v10 = *v74;
          v36 = ssftriff_reader_CloseChunk((uint64_t)v76);
          if ((v36 & 0x80000000) == 0)
          {
            __strcpy_chk();
            DataBlockFromFileRefCnt_0 = readDataBlockFromFileRefCnt_0(a1, (uint64_t)v76, v33, v34, *a4, (uint64_t)v78);
            if ((DataBlockFromFileRefCnt_0 & 0x80000000) == 0)
            {
              ssftriff_reader_ObjClose(v76, v37, v38, v39, v27, v28, v29, v30);
              v76 = 0;
              v47 = *v10;
              if (*v10)
              {
                v48 = 0;
                do
                {
                  v49 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 17) + 8) + 8 * v48);
                  if (v49)
                  {
                    v50 = *(_QWORD *)(v49 + 16);
                    if (v50)
                    {
                      v51 = 0;
                      v52 = 0;
                      while (v52 < *(unsigned __int16 *)(v50 + 24))
                      {
                        v53 = *(_QWORD *)(v50 + 16);
                        if (*(_DWORD *)(v53 + v51 + 64) == 1)
                        {
                          if (*(_QWORD *)(a1 + 288))
                          {
                            if (strcmp(*(const char **)(a1 + 288), (const char *)(*(_QWORD *)(v53 + v51 + 48) + *(unsigned __int16 *)(v53 + v51))))
                            {
                              v66 = *(_QWORD *)(*(_QWORD *)a1 + 32);
                              v67 = *(_QWORD *)(a1 + 184);
                              v71 = "first assigned";
                              v68 = "%s%s%s%s";
                              v69 = 24053;
                              goto LABEL_67;
                            }
                          }
                          else
                          {
                            v54 = strlen((const char *)(*(_QWORD *)(v53 + v51 + 48) + *(unsigned __int16 *)(v53 + v51)));
                            v55 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, (v54 + 1));
                            *(_QWORD *)(a1 + 288) = v55;
                            if (!v55)
                            {
                              log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24048, 0, v56, v57, v58, v59, v71);
                              v17 = 10;
                              return FEDATA_ERROR(v17);
                            }
                            strcpy(v55, (const char *)(*(_QWORD *)(v53 + v51 + 48) + *(unsigned __int16 *)(v53 + v51)));
                            *(_WORD *)(a1 + 296) = v48;
                            *(_WORD *)(a1 + 298) = v52;
                          }
                        }
                        ++v52;
                        v50 = *(_QWORD *)(v49 + 16);
                        v51 += 72;
                        if (!v50)
                          break;
                      }
                    }
                    v47 = *v10;
                  }
                  ++v48;
                }
                while (v48 < v47);
                if (v47)
                {
                  for (i = 0; i < v47; ++i)
                  {
                    v61 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 17) + 8) + 8 * i);
                    if (v61)
                    {
                      v62 = *(_QWORD *)(v61 + 16);
                      if (v62)
                      {
                        v63 = 0;
                        v64 = -1;
                        do
                        {
                          if (++v64 >= (unint64_t)*(unsigned __int16 *)(v62 + 24))
                            break;
                          v65 = *(_QWORD *)(v62 + 16) + v63;
                          if (*(_WORD *)(v65 + 40) && (!*(_DWORD *)(v65 + 8) || !*(_WORD *)(v62 + 48)))
                            log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24062, 0, v43, v44, v45, v46, v71);
                          v63 += 72;
                          v62 = *(_QWORD *)(v61 + 16);
                        }
                        while (v62);
                      }
                      v47 = *v10;
                    }
                  }
                }
              }
              if (!*(_QWORD *)(a1 + 288))
              {
                v66 = *(_QWORD *)(*(_QWORD *)a1 + 32);
                v67 = *(_QWORD *)(a1 + 184);
                v69 = 24054;
                v68 = 0;
LABEL_67:
                log_OutPublic(v66, v67, v69, v68, v43, v44, v45, v46, v71);
                v17 = 0;
                return FEDATA_ERROR(v17);
              }
LABEL_64:
              if (v76)
                ssftriff_reader_ObjClose(v76, v40, v41, v42, v43, v44, v45, v46);
              return DataBlockFromFileRefCnt_0;
            }
LABEL_63:
            log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24052, 0, v27, v28, v29, v30, v71);
            goto LABEL_64;
          }
        }
LABEL_62:
        DataBlockFromFileRefCnt_0 = v36;
        goto LABEL_63;
      }
      v35 = *v74;
      if (*v74)
      {
        v33 = v74[1] == 1;
        if (v35 != 1)
        {
          v34 = v74[2] == 1;
          if (v35 >= 3 && v74[3] == 1)
            *a4 = 1;
LABEL_28:
          v36 = ssftriff_reader_CloseChunk((uint64_t)v76);
          if ((v36 & 0x80000000) != 0)
            goto LABEL_62;
          goto LABEL_29;
        }
      }
      else
      {
        v33 = 0;
      }
      v34 = 0;
      goto LABEL_28;
    }
  }
  strcpy((char *)v77, "tokentn/");
  __strcat_chk();
  v17 = brokeraux_ComposeBrokerString(*(_QWORD *)a1, (const char *)v77, 1, 1, *(char **)v72, 0, 0, v78, 0x80uLL);
  if ((v17 & 0x80000000) == 0)
  {
    v20 = (_WORD *)getRsrcHandleForThisApi(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32));
    if ((ssftriff_reader_ObjOpen(v20, v21, 0, v78, "TOKN", 1031, (uint64_t *)&v76) & 0x80000000) == 0)
      goto LABEL_15;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24057, "%s%s", v22, v23, v24, v25, "Missing broker header file");
    v17 = 3;
  }
  return FEDATA_ERROR(v17);
}

uint64_t readDataBlockFromFileDeRefCnt(uint64_t a1)
{
  uint64_t result;
  uint64_t ObjcForThisApi;
  uint64_t v4;
  uint64_t v5;

  v4 = 0;
  v5 = 0;
  result = InitRsrcFunction(*(_WORD **)(a1 + 8), *(_QWORD *)(a1 + 16), &v5);
  if ((result & 0x80000000) == 0)
  {
    result = InitRsrcFunction(*(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), &v4);
    if ((result & 0x80000000) == 0)
    {
      ObjcForThisApi = getObjcForThisApi(v5, v4);
      return objc_ReleaseObject(ObjcForThisApi, *(_QWORD *)(*(_QWORD *)(a1 + 152) + 16) + 2);
    }
  }
  return result;
}

uint64_t FEData_blockData_unloadDataFiles(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int vars0;

  if (*(_QWORD *)(a1[19] + 16))
    return readDataBlockFromFileDeRefCnt((uint64_t)a1);
  log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24049, 0, a5, a6, a7, a8, vars0);
  return FEDATA_ERROR(7);
}

uint64_t FEData_blockData_unloadUnusedDataFiles(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _WORD *v8;
  uint64_t result;
  unsigned int v10;

  v8 = *(_WORD **)(a1[19] + 16);
  if (v8)
  {
    result = readDataBlockFromFileDeRefCnt((uint64_t)a1);
    *v8 = 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24049, 0, a5, a6, a7, a8, v10);
    return FEDATA_ERROR(7);
  }
  return result;
}

uint64_t FEData_ObjOpen(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  unsigned int v28;

  log_OutText(*(_QWORD *)(*a3 + 32), a3[23], 4, 0, (uint64_t)"fe_data : ObjOpen Begin", a6, a7, a8, v27);
  v9 = (_QWORD *)heap_Calloc(*(_QWORD **)(*a3 + 8), 1, 24);
  if (!v9)
  {
    log_OutPublic(*(_QWORD *)(*a3 + 32), a3[23], 24048, 0, v12, v13, v14, v15, v28);
    return TOKENTNERROR(10);
  }
  v16 = v9;
  a3[19] = (uint64_t)v9;
  v17 = FEData_functionData_ObjOpen(a3, v9, v10, v11, v12, v13, v14, v15);
  if ((v17 & 0x80000000) != 0
    || (v17 = FEData_domainDefs_ObjOpen(a3, v16 + 1, v19, v20, v21, v22, v23, v24), (v17 & 0x80000000) != 0))
  {
    v25 = v17;
LABEL_8:
    FEData_ObjClose(a3, v18, v19, v20, v21, v22, v23, v24);
    goto LABEL_9;
  }
  v25 = FEData_blockData_ObjOpen(a3, v16 + 2, v19, v20, v21, v22, v23, v24);
  if ((v25 & 0x80000000) != 0)
    goto LABEL_8;
LABEL_9:
  log_OutText(*(_QWORD *)(*a3 + 32), a3[23], 4, 0, (uint64_t)"fe_data : ObjOpen End (%x)", v22, v23, v24, v25);
  return v25;
}

uint64_t FEData_ObjClose(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;

  v8 = a1[19];
  if (!v8)
    return TOKENTNERROR(8);
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"fe_data : ObjClose Begin", a6, a7, a8, v39);
  v17 = FEData_functionData_ObjClose(a1, v10, v11, v12, v13, v14, v15, v16);
  LODWORD(v18) = v17 & (v17 >> 31);
  v26 = FEData_blockData_ObjClose_NNTN(a1, v19, v20, v21, v22, v23, v24, v25);
  if (v26 < 0)
    LODWORD(v18) = v26;
  v34 = FEData_domainDefs_ObjClose(a1, v27, v28, v29, v30, v31, v32, v33);
  if (v34 >= 0)
    v18 = v18;
  else
    v18 = v34;
  heap_Free(*(_QWORD **)(*a1 + 8), v8);
  a1[19] = 0;
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"fe_data : ObjClose End (%x)", v35, v36, v37, v18);
  return v18;
}

_QWORD *FEData_freeEntry(_QWORD *result, uint64_t a2, int a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;

  if (a2)
  {
    v5 = result;
    v6 = *(_QWORD *)(a2 + 40);
    if (v6)
    {
      result = heap_Free((_QWORD *)result[1], v6);
      *(_QWORD *)(a2 + 40) = 0;
    }
    v7 = *(_QWORD *)(a2 + 32);
    if (v7)
    {
      result = heap_Free((_QWORD *)v5[1], v7);
      *(_QWORD *)(a2 + 32) = 0;
    }
    v8 = *(_QWORD *)(a2 + 48);
    if (v8)
    {
      result = heap_Free((_QWORD *)v5[1], v8);
      *(_QWORD *)(a2 + 48) = 0;
    }
    v9 = *(_QWORD *)(a2 + 16);
    if (v9)
    {
      v10 = *(unsigned __int8 *)(a2 + 24);
      if (*(_BYTE *)(a2 + 24))
      {
        v11 = 0;
        do
        {
          v12 = *(_QWORD *)(a2 + 16);
          if (a3 == 1)
          {
            FEData_freeEntry(v5, *(_QWORD *)(v12 + 8 * v11), 1);
            heap_Free((_QWORD *)v5[1], *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v11));
            v12 = *(_QWORD *)(a2 + 16);
            v10 = *(unsigned __int8 *)(a2 + 24);
          }
          *(_QWORD *)(v12 + 8 * v11++) = 0;
        }
        while (v11 < v10);
        v9 = *(_QWORD *)(a2 + 16);
      }
      result = heap_Free((_QWORD *)v5[1], v9);
      *(_BYTE *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
  }
  return result;
}

uint64_t freeFunctions(_QWORD **a1, unsigned __int16 *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*a2)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v4);
      FEData_freeEntry(*a1, v5, 0);
      heap_Free((_QWORD *)(*a1)[1], v5);
      ++v4;
    }
    while (v4 < *a2);
  }
  v6 = *((_QWORD *)a2 + 1);
  if (v6)
  {
    heap_Free((_QWORD *)(*a1)[1], v6);
    *((_QWORD *)a2 + 1) = 0;
  }
  *a2 = 0;
  return 0;
}

uint64_t FEData_functionData_ObjOpen(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;

  v10 = *(_QWORD *)(*a1 + 32);
  v11 = a1[23];
  if (a2)
  {
    log_OutText(v10, v11, 4, 0, (uint64_t)"functionData : ObjOpen Begin", a6, a7, a8, v19);
    *a2 = 0;
    v12 = (_QWORD *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 16);
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      *(_WORD *)v12 = 0;
      *a2 = v12;
      log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"functionData : ObjOpen End (%x)", v14, v15, v16, 0);
      return 0;
    }
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24048, 0, v13, v14, v15, v16, v20);
    v18 = 10;
  }
  else
  {
    log_OutPublic(v10, v11, 24049, 0, a5, a6, a7, a8, v19);
    v18 = 7;
  }
  return FEDATA_ERROR(v18);
}

uint64_t FEData_functionData_ObjClose(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 **v8;
  unsigned __int16 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v8 = (unsigned __int16 **)a1[19];
  if (!v8)
    return FEDATA_ERROR(8);
  v9 = *v8;
  if (!*v8)
    return FEDATA_ERROR(8);
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"functionData : ObjClose Begin", a6, a7, a8, v15);
  freeFunctions((_QWORD **)a1, v9);
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"functionData : ObjClose End (%x)", v11, v12, v13, 0);
  heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v9);
  return 0;
}

uint64_t FEData_readFunctionDataFromBinaryFile(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, unsigned int a7)
{
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t FunctionDataFromBinaryFile;
  void *v18;
  __int16 v19;
  unsigned __int16 v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned __int16 v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v48;
  unsigned int v49;

  v49 = 0;
  v14 = *a6;
  v15 = *(unsigned __int16 *)(a5 + v14);
  v16 = v14 + 2;
  *a6 = v14 + 2;
  switch(v15)
  {
    case 0:
      FunctionDataFromBinaryFile = 0;
      v18 = &StaticIntPointers_2;
      goto LABEL_18;
    case 1:
      FunctionDataFromBinaryFile = 0;
      v18 = &unk_1DEC65BC4;
      goto LABEL_18;
    case 2:
      FunctionDataFromBinaryFile = 0;
      v18 = &unk_1DEC65BC8;
      goto LABEL_18;
    case 3:
      *(_QWORD *)a4 = &unk_1DEC65BCC;
      v19 = *(_WORD *)(a5 + v16);
      *a6 = v14 + 4;
      v20 = v19 + 1;
      v21 = (_BYTE *)heap_Calloc(*(_QWORD **)(a3 + 8), 1, (unsigned __int16)(v19 + 1));
      *(_QWORD *)(a4 + 48) = v21;
      if (v21)
      {
        v26 = v20;
        v49 = v20;
        v27 = ssftriff_reader_ReadStringZ(a2, a5, a7, *a6, v21, &v49);
        if ((v27 & 0x80000000) == 0 && v49 == v20)
        {
          FunctionDataFromBinaryFile = v27;
          v16 = *a6 + v26;
          *a6 = v16;
LABEL_19:
          v28 = *(unsigned __int16 *)(a5 + v16);
          v29 = v16 + 2;
          *a6 = v29;
          if (!v28)
          {
            *(_QWORD *)(a4 + 40) = 0;
            goto LABEL_25;
          }
          v30 = v28 + 1;
          v31 = (_BYTE *)heap_Calloc(*(_QWORD **)(a3 + 8), 1, (unsigned __int16)(v28 + 1));
          *(_QWORD *)(a4 + 40) = v31;
          if (!v31)
            goto LABEL_33;
          v36 = v30;
          v49 = v30;
          v37 = ssftriff_reader_ReadStringZ(a2, a5, a7, *a6, v31, &v49);
          if ((v37 & 0x80000000) == 0 && v49 == v30)
          {
            FunctionDataFromBinaryFile = v37;
            v29 = *a6 + v36;
            *a6 = v29;
LABEL_25:
            *(_WORD *)(a4 + 8) = *(_WORD *)(a5 + v29);
            v38 = *a6;
            v39 = *a6 + 2;
            *a6 = v39;
            v40 = *(_WORD *)(a5 + v39);
            *a6 = v38 + 4;
            *(_BYTE *)(a4 + 24) = v40;
            if (!(_BYTE)v40)
              return FunctionDataFromBinaryFile;
            v41 = heap_Calloc(*(_QWORD **)(a3 + 8), 1, 8 * v40);
            *(_QWORD *)(a4 + 16) = v41;
            if (v41)
            {
              if (*(_BYTE *)(a4 + 24))
              {
                v42 = 0;
                while (1)
                {
                  v43 = heap_Calloc(*(_QWORD **)(a3 + 8), 1, 56);
                  if (!v43)
                    break;
                  *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8 * v42) = v43;
                  *(_QWORD *)v43 = &StaticIntPointers_2;
                  *(_BYTE *)(v43 + 24) = 0;
                  *(_QWORD *)(v43 + 16) = 0;
                  *(_QWORD *)(v43 + 40) = 0;
                  *(_QWORD *)(v43 + 48) = 0;
                  *(_QWORD *)(v43 + 32) = 0;
                  FunctionDataFromBinaryFile = FEData_readFunctionDataFromBinaryFile(a1, a2, a3);
                  if ((FunctionDataFromBinaryFile & 0x80000000) == 0
                    && ++v42 < (unint64_t)*(unsigned __int8 *)(a4 + 24))
                  {
                    continue;
                  }
                  return FunctionDataFromBinaryFile;
                }
                v44 = *(_QWORD *)(*a1 + 32);
                v45 = a1[23];
                goto LABEL_34;
              }
              return FunctionDataFromBinaryFile;
            }
LABEL_33:
            v44 = *(_QWORD *)(*a1 + 32);
            v45 = a1[23];
LABEL_34:
            log_OutPublic(v44, v45, 24048, 0, v32, v33, v34, v35, v48);
            v46 = 10;
            return FEDATA_ERROR(v46);
          }
        }
        v46 = 0;
        return FEDATA_ERROR(v46);
      }
      log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24048, 0, v22, v23, v24, v25, v48);
      return FEDATA_ERROR(10);
    case 4:
      FunctionDataFromBinaryFile = 0;
      v18 = &unk_1DEC65BD0;
      goto LABEL_18;
    case 5:
      FunctionDataFromBinaryFile = 0;
      v18 = &unk_1DEC65BD4;
      goto LABEL_18;
    case 6:
      FunctionDataFromBinaryFile = 0;
      v18 = &unk_1DEC65BD8;
      goto LABEL_18;
    case 7:
      FunctionDataFromBinaryFile = 0;
      v18 = &unk_1DEC65BDC;
      goto LABEL_18;
    case 8:
      FunctionDataFromBinaryFile = 0;
      v18 = &unk_1DEC65BE0;
      goto LABEL_18;
    case 9:
      FunctionDataFromBinaryFile = 0;
      v18 = &unk_1DEC65BE4;
      goto LABEL_18;
    case 10:
      FunctionDataFromBinaryFile = 0;
      v18 = &unk_1DEC65BE8;
      goto LABEL_18;
    case 11:
      FunctionDataFromBinaryFile = 0;
      v18 = &unk_1DEC65BEC;
LABEL_18:
      *(_QWORD *)a4 = v18;
      goto LABEL_19;
    default:
      FunctionDataFromBinaryFile = 0;
      goto LABEL_19;
  }
}

uint64_t FEFunctionMap_ObjOpen(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;

  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"fe_functionmap : ObjOpen Begin", a6, a7, a8, v15);
  v9 = (_QWORD *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 16);
  if (v9)
  {
    *v9 = 0;
    v9[1] = 0;
    a1[20] = (uint64_t)v9;
    log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"fe_functionmap : ObjOpen End (%x)", v11, v12, v13, 0);
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24048, 0, v10, v11, v12, v13, v16);
    return TOKENTNERROR(10);
  }
}

uint64_t FEFunctionMap_ObjClose(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v19;

  v8 = a1[20];
  if (!v8)
    return TOKENTNERROR(8);
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"fe_functionmap : ObjClose Begin", a6, a7, a8, v19);
  v13 = 0;
  v14 = *a1;
  v15 = 1;
  do
  {
    v16 = v15;
    v17 = *(_QWORD *)(v8 + 8 * v13);
    if (v17)
    {
      ssftmap_ObjClose(v17);
      *(_QWORD *)(v8 + 8 * v13) = 0;
    }
    v15 = 0;
    v13 = 1;
  }
  while ((v16 & 1) != 0);
  log_OutText(*(_QWORD *)(v14 + 32), a1[23], 4, 0, (uint64_t)"fe_functionmap : ObjClose End (%x)", v10, v11, v12, 0);
  heap_Free(*(_QWORD **)(*a1 + 8), v8);
  return 0;
}

uint64_t FEFunctionMap_GetMap(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  __int128 v10[2];
  uint64_t (*v11)();

  v3 = *(_QWORD **)(*a1 + 8);
  v10[0] = xmmword_1EA93F670;
  v10[1] = *(_OWORD *)off_1EA93F680;
  v11 = action2FunctionMap_FreeFunctionData;
  v8 = ssftmap_ObjOpen(v3, 0, v10, a2);
  result = 0;
  if ((v8 & 0x80000000) != 0)
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24039, 0, v4, v5, v6, v7, v10[0]);
    return v8;
  }
  return result;
}

uint64_t action2FunctionMap_CopyMapKey(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if (!a1 || !a2 || !a3)
    return TOKENTNERROR(7);
  *a3 = a1;
  return 0;
}

uint64_t action2FunctionMap_CompareKeys(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2;

  if (*a1 < *a2)
    v2 = -1;
  else
    v2 = 1;
  if (*a1 == *a2)
    return 0;
  else
    return v2;
}

uint64_t action2FunctionMap_CopyFunctionData(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if (!a1 || !a2 || !a3)
    return TOKENTNERROR(7);
  *a3 = a1;
  return 0;
}

uint64_t FEFunctionMap_AddFunctionMap(uint64_t a1, unsigned int a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * a2) = a3;
  return 0;
}

uint64_t FEFunctionMap_GetFunction(uint64_t a1, unsigned int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 160);
  *a4 = 0;
  ssftmap_FindReadOnly(*(_QWORD *)(v4 + 8 * a2), a3, a4);
  return 0;
}

uint64_t FERuntimeData_ObjOpen(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  __int128 v36;
  uint64_t v37;

  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"fe_runtimedata : ObjOpen Begin", a6, a7, a8, v34);
  v9 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 88);
  if (!v9)
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24048, 0, v10, v11, v12, v13, v35);
    return TOKENTNERROR(10);
  }
  v14 = v9;
  a1[22] = v9;
  v15 = *(_QWORD **)(*a1 + 8);
  v36 = xmmword_1DEC65BF8;
  v37 = 0;
  if (vector_ObjOpen(v15, &v36, 5, (uint64_t *)v14))
  {
    v20 = 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24048, 0, v16, v17, v18, v19, v35);
    v20 = TOKENTNERROR(10);
    if ((v20 & 0x80000000) != 0)
      goto LABEL_10;
  }
  *(_QWORD *)(v14 + 8) = 0;
  *(_WORD *)(v14 + 16) = 0;
  *(_WORD *)(v14 + 40) = 50;
  *(_QWORD *)(v14 + 32) = 0x8800050000;
  v29 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 816);
  *(_QWORD *)(v14 + 24) = v29;
  if (!v29
    || (v31 = (uint64_t *)(v29 + 16 * *(unsigned __int16 *)(v14 + 32)),
        v32 = *(unsigned __int16 *)(v14 + 34) * *(unsigned __int16 *)(v14 + 36) + 1,
        v31[1] = v32,
        *v31 = 0,
        v33 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, v32),
        (*v31 = v33) == 0))
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24048, 0, v30, v26, v27, v28, v35);
    v20 = TOKENTNERROR(10);
    if ((v20 & 0x80000000) == 0)
      goto LABEL_11;
LABEL_10:
    FERuntimeData_ObjClose(a1, v22, v23, v24, v25, v26, v27, v28);
    goto LABEL_11;
  }
  ++*(_WORD *)(v14 + 32);
LABEL_11:
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"fe_runtimedata : ObjOpen End (%x)", v26, v27, v28, v20);
  return v20;
}

uint64_t FERuntimeData_ObjClose(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v8 = a1[22];
  if (!v8)
    return TOKENTNERROR(8);
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"fe_runtimedata : ObjClose Begin", a6, a7, a8, v16);
  v10 = (uint64_t *)a1[22];
  if (*v10)
  {
    vector_ObjClose(*v10);
    *v10 = 0;
  }
  node_clearMem(a1);
  v11 = *(uint64_t **)(v8 + 24);
  if (v11)
  {
    if (*v11)
    {
      heap_Free(*(_QWORD **)(*a1 + 8), *v11);
      v11 = *(uint64_t **)(v8 + 24);
      *v11 = 0;
    }
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v11);
    *(_QWORD *)(v8 + 24) = 0;
  }
  *(_WORD *)(v8 + 16) = 0;
  heap_Free(*(_QWORD **)(*a1 + 8), v8);
  a1[22] = 0;
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"fe_runtimedata : ObjClose End (%x)", v12, v13, v14, 0);
  return 0;
}

void node_clearMem(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = a1[22];
  v2 = *(_QWORD *)(v1 + 24);
  if (v2)
  {
    v3 = *(unsigned __int16 *)(v1 + 32);
    if (v3 >= 2)
    {
      v5 = 1;
      v6 = 16;
      do
      {
        v7 = *(_QWORD *)(v2 + v6);
        if (v7)
        {
          heap_Free(*(_QWORD **)(*a1 + 8), v7);
          v2 = *(_QWORD *)(v1 + 24);
          *(_QWORD *)(v2 + v6) = 0;
          v3 = *(unsigned __int16 *)(v1 + 32);
        }
        ++v5;
        v6 += 16;
      }
      while (v5 < v3);
      if (v3 >= 2)
      {
        bzero((void *)(v2 + 16), (16 * v3 + 0xFFFFFFFF0) & 0xFFFFFFFF0);
        *(_WORD *)(v1 + 32) = 1;
      }
    }
    *(_WORD *)(v1 + 38) = 0;
  }
}

uint64_t FERuntimeData_DumpMatch(uint64_t a1, uint64_t a2, __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int16 *v19;
  uint64_t v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  char v30[16];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v29 = 0;
  if (*(_QWORD *)(a1 + 176))
  {
    if ((_DWORD)a4 == 1)
      strcpy(v30, "<LOGFE> ");
    else
      v30[0] = 0;
    FEData_blockData_getTokenData((_QWORD *)a1, *(_QWORD *)(a2 + 88), &v29, a4, a5, a6, a7, a8);
    strncpy(*(char **)(a1 + 552), (const char *)(*(_QWORD *)(a1 + 304) + *a3), (unsigned __int16)(a3[1] - *a3));
    *(_BYTE *)(*(_QWORD *)(a1 + 552) - *a3 + a3[1]) = 0;
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"%s%20s [%d,%d] _%s_ (domainBlockID=%d, domainNum=%d)", v12, v13, v14, (uint64_t)v30);
    if (*(_BYTE *)(a2 + 82))
    {
      v18 = 0;
      v19 = (__int16 *)(a2 + 44);
      do
      {
        v20 = *(v19 - 1);
        v21 = (unsigned __int16)*v19;
        if (v20 == -1 && v21 == 0xFFFF)
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"%30s[%d] [%d,%d] _NULL_", v15, v16, v17, (uint64_t)"MATCH");
        }
        else
        {
          strncpy(*(char **)(a1 + 552), (const char *)(*(_QWORD *)(a1 + 304) + v20), (unsigned __int16)(v21 - v20));
          *(_BYTE *)(*(_QWORD *)(a1 + 552) - *(v19 - 1) + *v19) = 0;
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"%30s[%d] [%d,%d] _%s_", v23, v24, v25, (uint64_t)"MATCH");
        }
        ++v18;
        v19 += 2;
      }
      while (v18 < *(unsigned __int8 *)(a2 + 82));
    }
    if (*(_WORD *)(a2 + 40))
    {
      v26 = 0;
      v27 = a2 + 2;
      do
      {
        v27 += 4;
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"%30s[%d] \"%s\"", v15, v16, v17, (uint64_t)"EXPANDEDORTH");
        ++v26;
      }
      while (v26 < *(unsigned __int16 *)(a2 + 40));
    }
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24049, 0, a5, a6, a7, a8, v28);
    return TOKENTNERROR(7);
  }
}

uint64_t FERuntimeData_DumpMatches(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 *i;
  unsigned int v17;
  char v18[16];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 548))
  {
    v9 = *(_QWORD *)(a1 + 176);
    if (!v9)
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24049, 0, a5, a6, a7, a8, v17);
      return TOKENTNERROR(7);
    }
    if ((_DWORD)a3 == 1)
      strcpy(v18, "<LOGFE> ");
    else
      v18[0] = 0;
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"%sfe_runtimedata : DumpMatches Begin %s", a6, a7, a8, (uint64_t)v18);
    if (*(_WORD *)(v9 + 16))
    {
      for (i = *(__int16 **)(v9 + 8); i; i = *(__int16 **)i)
        FERuntimeData_DumpMatch(a1, (uint64_t)(i + 12), i + 8, a3, v12, v13, v14, v15);
    }
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"%sfe_runtimedata : DumpMatches End (%x)", v13, v14, v15, (uint64_t)v18);
  }
  return 0;
}

uint64_t FERuntimeData_GetNumMatches(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int vars0;

  v8 = a1[22];
  if (v8)
    return *(unsigned __int16 *)(v8 + 16);
  log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24049, 0, a5, a6, a7, a8, vars0);
  return 0;
}

uint64_t FERuntimeData_FreeMatches(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v10 = a1[22];
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"fe_runtimedata : FreeMatches Begin", a6, a7, a8, v15);
  node_clearMem(a1);
  *(_QWORD *)(v10 + 8) = 0;
  *(_WORD *)(v10 + 16) = 0;
  if (a2 == 1)
    vector_Clear(*(_QWORD *)v10);
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"fe_runtimedata : FreeMatches End (%x)", v11, v12, v13, 0);
  return 0;
}

uint64_t FERuntimeData_AddDomainRange(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;

  if (vector_AddGet(**(_QWORD **)(a1 + 176), a2))
  {
    v8 = *a2;
    *(_DWORD *)(v8 + 8) = 0;
    *(_QWORD *)v8 = 0;
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24048, 0, v4, v5, v6, v7, v10);
    return TOKENTNERROR(10);
  }
}

uint64_t FERuntimeData_AddMatch(uint64_t *a1, _DWORD *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t *v32;
  int v33;
  uint64_t *v34;
  int v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int v41;
  int v42;
  uint64_t *v43;
  _QWORD *v44;
  _QWORD *v45;
  const char *v46;

  if (!a2 || !a3)
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24049, 0, a5, a6, a7, a8, v46);
    return TOKENTNERROR(7);
  }
  v10 = a1[22];
  v11 = *(unsigned __int16 *)(v10 + 32);
  if (!*(_WORD *)(v10 + 32))
  {
    v37 = *(_QWORD *)(*a1 + 32);
    v38 = a1[23];
    v39 = 24035;
    v40 = 0;
LABEL_21:
    log_OutPublic(v37, v38, v39, v40, a5, a6, a7, a8, v46);
    v41 = 0;
    goto LABEL_22;
  }
  v13 = *(_QWORD *)(v10 + 24);
  v14 = *(unsigned __int16 *)(v10 + 38);
  v15 = v13 + 16 * v14;
  v16 = *(unsigned __int16 *)(v10 + 36);
  if ((*(_DWORD *)(v15 + 12) + v16) < *(_DWORD *)(v15 + 8))
    goto LABEL_10;
  if (v11 + 1 >= *(unsigned __int16 *)(v10 + 40))
  {
    v37 = *(_QWORD *)(*a1 + 32);
    v38 = a1[23];
    v46 = "maxBlocks";
    v40 = "%s%d";
    v39 = 24036;
    goto LABEL_21;
  }
  if ((int)v14 + 1 >= v11)
  {
    v17 = (uint64_t *)(v13 + 16 * *(unsigned __int16 *)(v10 + 32));
    v18 = *(unsigned __int16 *)(v10 + 34) * v16 + 1;
    v17[1] = v18;
    *v17 = 0;
    v19 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, v18);
    *v17 = v19;
    if (v19)
    {
      ++*(_WORD *)(v10 + 32);
      LOWORD(v14) = *(_WORD *)(v10 + 38);
      v13 = *(_QWORD *)(v10 + 24);
      v16 = *(unsigned __int16 *)(v10 + 36);
      goto LABEL_9;
    }
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24048, 0, v20, v21, v22, v23, v46);
    v41 = 10;
LABEL_22:
    LODWORD(result) = TOKENTNERROR(v41);
    if ((int)result >= 0)
      return 6;
    else
      return result;
  }
LABEL_9:
  v24 = v14 + 1;
  *(_WORD *)(v10 + 38) = v24;
  v15 = v13 + 16 * v24;
LABEL_10:
  v25 = *(unsigned int *)(v15 + 12);
  *(_DWORD *)(v15 + 12) = v25 + v16;
  if (!*(_QWORD *)v15)
    return 6;
  v26 = *(_QWORD *)v15 + v25;
  *(_QWORD *)v26 = 0;
  *(_QWORD *)(v26 + 8) = 0;
  *(_DWORD *)(v26 + 16) = *a2;
  v27 = *a3;
  v28 = a3[1];
  *(_OWORD *)(v26 + 56) = a3[2];
  *(_OWORD *)(v26 + 40) = v28;
  *(_OWORD *)(v26 + 24) = v27;
  v29 = a3[3];
  v30 = a3[4];
  v31 = a3[5];
  *(_OWORD *)(v26 + 120) = a3[6];
  *(_OWORD *)(v26 + 104) = v31;
  *(_OWORD *)(v26 + 88) = v30;
  *(_OWORD *)(v26 + 72) = v29;
  v32 = *(uint64_t **)(v10 + 8);
  if (v32)
  {
    v33 = *(unsigned __int16 *)(v26 + 16);
    while (1)
    {
      v34 = v32;
      v35 = *((unsigned __int16 *)v32 + 8);
      if (v35 == v33)
        break;
      if ((__int16)v35 >= (__int16)v33)
      {
        v45 = (_QWORD *)v34[1];
        v34[1] = v26;
        *(_QWORD *)v26 = v34;
        if (!v45)
          goto LABEL_38;
        *(_QWORD *)(v26 + 8) = v45;
        *v45 = v26;
        goto LABEL_39;
      }
      v32 = (uint64_t *)*v34;
      if (!*v34)
      {
        *v34 = v26;
        *(_QWORD *)(v26 + 8) = v34;
        goto LABEL_39;
      }
    }
    v42 = *(__int16 *)(v26 + 18);
    if (*((__int16 *)v34 + 9) > v42)
    {
      while (1)
      {
        v43 = v34;
        v34 = (uint64_t *)v34[1];
        if (!v34)
          break;
        if (*((unsigned __int16 *)v34 + 8) != v33 || *((__int16 *)v34 + 9) <= v42)
        {
          v43[1] = v26;
          *(_QWORD *)v26 = v43;
          *(_QWORD *)(v26 + 8) = v34;
          *v34 = v26;
          goto LABEL_39;
        }
      }
      v43[1] = v26;
      *(_QWORD *)v26 = v43;
      goto LABEL_38;
    }
    while (1)
    {
      v44 = v34;
      v34 = (uint64_t *)*v34;
      if (!v34)
        break;
      if (*((unsigned __int16 *)v34 + 8) != v33 || *((__int16 *)v34 + 9) >= v42)
      {
        *v44 = v26;
        *(_QWORD *)v26 = v34;
        *(_QWORD *)(v26 + 8) = v44;
        v34[1] = v26;
        goto LABEL_39;
      }
    }
    *v44 = v26;
    *(_QWORD *)(v26 + 8) = v44;
  }
  else
  {
LABEL_38:
    *(_QWORD *)(v10 + 8) = v26;
  }
LABEL_39:
  result = 0;
  ++*(_WORD *)(v10 + 16);
  return result;
}

uint64_t FERuntimeData_FindLongestMatch(uint64_t a1, unsigned __int16 *a2, _WORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  int v6;

  v3 = *(_QWORD *)(a1 + 176);
  if (*(_WORD *)(v3 + 16))
  {
    v4 = *(uint64_t **)(v3 + 8);
    for (*a3 = a2[1]; v4; v4 = (uint64_t *)*v4)
    {
      v5 = *((unsigned __int16 *)v4 + 8);
      v6 = *a2;
      if (v5 == v6)
      {
        *a3 = *((_WORD *)v4 + 9);
      }
      else if ((__int16)v5 > (__int16)v6)
      {
        return 0;
      }
    }
  }
  return 0;
}

uint64_t FERuntimeData_GetAllMatchesAtKey(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  uint64_t **v5;
  unsigned __int16 v6;
  uint64_t result;
  uint64_t **v8;
  int v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 176);
  if (!*(_WORD *)(v2 + 16))
    return 0;
  v5 = *(uint64_t ***)(v2 + 8);
  if (v5)
  {
    v6 = 0;
    do
    {
      if (*((unsigned __int16 *)v5 + 8) != *a2)
        break;
      if (*((unsigned __int16 *)v5 + 9) != a2[1])
        break;
      ++v6;
      v5 = (uint64_t **)*v5;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  result = resetMatchList(a1, v6);
  if ((result & 0x80000000) == 0)
  {
    v8 = *(uint64_t ***)(v2 + 8);
    if (v8)
    {
      v9 = *a2;
      do
      {
        if (*((unsigned __int16 *)v8 + 8) != v9)
          break;
        if (*((unsigned __int16 *)v8 + 9) != a2[1])
          break;
        v10 = *(unsigned __int16 *)(a1 + 386);
        *(_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * v10) = v8 + 3;
        *(_WORD *)(a1 + 386) = v10 + 1;
        v8 = (uint64_t **)*v8;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t FERuntimeData_DeleteSubsumedkeys(uint64_t a1, unsigned __int16 *a2, int a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  int v8;
  uint64_t *v9;
  _QWORD *v10;

  v3 = *(_QWORD *)(a1 + 176);
  if (*(_WORD *)(v3 + 16))
  {
    v6 = *(uint64_t **)(v3 + 8);
    v4 = (_QWORD *)(v3 + 8);
    v5 = v6;
    if (v6)
    {
      v7 = *a2;
      while (1)
      {
        v8 = *((__int16 *)v5 + 8);
        if (v8 == v7 && *((__int16 *)v5 + 9) == a3)
          goto LABEL_8;
        if (v8 < v7)
          break;
        if (*((__int16 *)v5 + 9) <= a3)
        {
          v9 = (uint64_t *)*v5;
LABEL_13:
          v10 = (_QWORD *)v5[1];
          if (!v10)
          {
            v10 = v4;
            if (v9)
            {
              v9[1] = 0;
              v10 = v4;
            }
          }
          *v10 = v9;
          if (*v5)
            *(_QWORD *)(*v5 + 8) = v5[1];
          goto LABEL_18;
        }
        v9 = (uint64_t *)*v5;
        if (v8 < a3)
          goto LABEL_13;
LABEL_18:
        v5 = v9;
        if (!v9)
          return 0;
      }
      if (v8 > a3)
        return 0;
LABEL_8:
      v9 = (uint64_t *)*v5;
      goto LABEL_18;
    }
  }
  return 0;
}

uint64_t FERuntimeData_DeleteMatch(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v9;
  _QWORD *v10;

  v3 = *(_QWORD *)(a1 + 176);
  if (*(_WORD *)(v3 + 16))
  {
    v4 = (_QWORD *)(v3 + 8);
    v5 = (uint64_t *)(v3 + 8);
    do
    {
      v5 = (uint64_t *)*v5;
      if (!v5)
        break;
      v6 = *((unsigned __int16 *)v5 + 8);
      v7 = *a2;
      if (v6 == v7 && *((unsigned __int16 *)v5 + 9) == a2[1] && v5[14] == *(_QWORD *)(a3 + 88))
      {
        v9 = (uint64_t *)*v5;
        v10 = (_QWORD *)v5[1];
        if (!v10)
        {
          if (v9)
            v9[1] = 0;
          v10 = v4;
        }
        *v10 = v9;
        if (*v5)
          *(_QWORD *)(*v5 + 8) = v5[1];
        return 0;
      }
    }
    while ((__int16)v6 <= (__int16)v7);
  }
  return 0;
}

uint64_t FERuntimeData_GetKeyAtPos(uint64_t a1, int a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t **v5;
  int v6;

  v4 = *(_QWORD *)(a1 + 176);
  if (*(_WORD *)(v4 + 16))
  {
    v5 = (uint64_t **)(v4 + 8);
    do
    {
      v5 = (uint64_t **)*v5;
      if (!v5)
        break;
      v6 = *((__int16 *)v5 + 8);
      if (v6 == a2)
      {
        *a3 = v5 + 2;
        *a4 = v5 + 3;
        return 0;
      }
    }
    while (v6 <= a2);
  }
  return 0;
}

uint64_t FERuntimeData_UpdateDomainRange(_QWORD *a1, unsigned int a2, __int16 a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v5 = (uint64_t *)a1[22];
  v11 = 0;
  if (vector_GetElemAt(*v5, a2, &v11))
  {
    result = 0;
    *(_WORD *)(v11 + 2) = a3;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24037, "%s%d", v6, v7, v8, v9, "domainIndex");
    return TOKENTNERROR(0);
  }
  return result;
}

uint64_t FERuntimeData_GetDomainRange(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (vector_GetElemAt(**(_QWORD **)(a1 + 176), a2, a3))
    return 0;
  log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24037, "%s%d", v4, v5, v6, v7, "domainIndex");
  return TOKENTNERROR(0);
}

uint64_t FERuntimeData_GetActiveDomains(uint64_t a1, uint64_t a2, _WORD *a3, int a4, int a5, int a6)
{
  uint64_t *v11;
  __int16 v12;
  unsigned int v13;
  __int16 *v15;

  v15 = 0;
  v11 = *(uint64_t **)(a1 + 176);
  if (vector_GetElemAt(*v11, 0, &v15))
  {
    v12 = 0;
    while (a6)
    {
      v13 = (unsigned __int16)*a3;
      if (v13 <= 0x1F3)
        goto LABEL_5;
LABEL_9:
      if (!vector_GetElemAt(*v11, (unsigned __int16)++v12, &v15))
        return 0;
    }
    if (a4 < *v15)
      goto LABEL_9;
    if (a5 > v15[1])
      goto LABEL_9;
    v13 = (unsigned __int16)*a3;
    if (v13 >= 0x1F4)
      goto LABEL_9;
LABEL_5:
    *(_WORD *)(a2 + 2 * v13) = v12;
    ++*a3;
    goto LABEL_9;
  }
  return 0;
}

uint64_t FERuntimeData_PruneAndDumpActiveDomains(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Size;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v23;
  __int16 *v24;

  v24 = 0;
  v2 = (uint64_t *)a1[22];
  if (vector_GetElemAt(*v2, 0, &v24))
  {
    v6 = 0;
    v7 = 0;
    do
    {
      log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"DomainRange [%d,%d] %s", v3, v4, v5, *v24);
      if (*((_DWORD *)v24 + 2))
      {
        ++v7;
      }
      else if (!vector_Remove(*v2, v6))
      {
        log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24038, "%s%d", v8, v9, v10, v11, "domain range index");
        return 0;
      }
      v6 = v7;
    }
    while (vector_GetElemAt(*v2, v7, &v24));
  }
  Size = vector_GetSize(*v2);
  v16 = *(_QWORD *)(*a1 + 32);
  v17 = a1[23];
  if ((_DWORD)Size)
  {
    log_OutText(v16, v17, 4, 0, (uint64_t)"%d Final Active Domains", v12, v13, v14, Size);
    if (vector_GetElemAt(*v2, 0, &v24))
    {
      v21 = 0;
      do
      {
        log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"Domain[block=%d,num=%d] Range [%d,%d]", v18, v19, v20, (unsigned __int16)v24[3]);
        ++v21;
      }
      while (vector_GetElemAt(*v2, (unsigned __int16)v21, &v24));
    }
  }
  else
  {
    log_OutText(v16, v17, 4, 0, (uint64_t)"No Final Active Domains", v12, v13, v14, v23);
  }
  return 0;
}

uint64_t FERuntimeData_GetDomainBlockIndex(_QWORD *a1, unsigned int a2, _WORD *a3, _WORD *a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v7 = (uint64_t *)a1[22];
  v14 = 0;
  if (vector_GetElemAt(*v7, a2, &v14))
  {
    result = 0;
    v13 = v14;
    *a3 = *(_WORD *)(v14 + 6);
    *a4 = *(_WORD *)(v13 + 4);
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24038, "%s%d", v8, v9, v10, v11, "iDomainIndexID");
    return TOKENTNERROR(0);
  }
  return result;
}

uint64_t applyChecks(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t DomainDefBlockInfo;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  _QWORD v56[2];
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t *, uint64_t *);

  v60 = 0;
  v61 = 0;
  v58 = 0;
  v59 = 0;
  v56[1] = 0;
  v57 = 0;
  v56[0] = 0;
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer : applyChecks Begin (recursionlevel=%d)", a6, a7, a8, a5);
  inited = initStrRes((uint64_t)a1, (uint64_t)&v59);
  if ((inited & 0x80000000) == 0)
  {
    DomainDefBlockInfo = initStrRes((uint64_t)a1, (uint64_t)&v57);
    if ((DomainDefBlockInfo & 0x80000000) != 0)
    {
LABEL_29:
      clearStrRes((_QWORD *)*a1, (uint64_t)&v57);
      clearStrRes((_QWORD *)*a1, (uint64_t)&v59);
      log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer : applyChecks End", v46, v47, v48, v52);
      return DomainDefBlockInfo;
    }
    v53 = a4;
    if (*(_BYTE *)(a3 + 24))
    {
      v18 = 0;
      while (1)
      {
        log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"level %d Apply Check %d ...", v14, v15, v16, a5);
        v19 = applyChecks(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v18), &v59, (a5 + 1));
        if ((v19 & 0x80000000) != 0)
          break;
        if (WORD1(v60))
          log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"After check %d, result = \"%s\"", v20, v21, v22, v18);
        DomainDefBlockInfo = add2StringV3(a1, (uint64_t)&v57, (uint64_t)&v59);
        if ((DomainDefBlockInfo & 0x80000000) != 0)
          goto LABEL_29;
        if ((_DWORD)v18 + 1 != *(unsigned __int8 *)(a3 + 24))
        {
          DomainDefBlockInfo = add2StringV2(a1, (uint64_t)&v57, " ");
          if ((DomainDefBlockInfo & 0x80000000) != 0)
            goto LABEL_29;
        }
        WORD1(v60) = 0;
        *v59 = 0;
        if (++v18 >= (unint64_t)*(unsigned __int8 *)(a3 + 24))
          goto LABEL_12;
      }
LABEL_21:
      DomainDefBlockInfo = v19;
      goto LABEL_29;
    }
LABEL_12:
    clearStrRes((_QWORD *)*a1, (uint64_t)&v59);
    if (WORD1(v58))
      log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"doing function calls on expanded string \"%s\"", v23, v24, v25, v57);
    FEFunctionMap_GetFunction((uint64_t)a1, 0, *(_QWORD *)a3, &v61);
    if (!v61)
    {
      v38 = *(_QWORD *)(*a1 + 32);
      v39 = a1[23];
      if (WORD1(v58))
        log_OutPublic(v38, v39, 24001, "%s%s", v26, v27, v28, v29, "argstr");
      else
        log_OutPublic(v38, v39, 24001, 0, v26, v27, v28, v29, v52);
      goto LABEL_29;
    }
    v19 = initStrRes((uint64_t)a1, (uint64_t)v56);
    if ((v19 & 0x80000000) != 0)
      goto LABEL_21;
    if ((**(_DWORD **)a3 & 0xFFFFFFFE) == 8)
    {
      LODWORD(v55) = 0;
      v35 = a1[41];
      *(_QWORD *)v35 = v57;
      *(_QWORD *)(v35 + 8) = v56;
      *(_QWORD *)(v35 + 32) = 0;
      *(_WORD *)(v35 + 40) = *(_WORD *)(a3 + 8);
      v36 = v61(a1, &v55);
      v37 = v53;
      if ((v36 & 0x80000000) == 0)
LABEL_18:
        v36 = add2StringV3(a1, v37, (uint64_t)v56);
    }
    else
    {
      v55 = 0;
      v54 = 0;
      DomainDefBlockInfo = FEData_blockData_newGetDomainDefBlockInfo(a1, *(unsigned __int16 *)(*(_QWORD *)(a1[41] + 24) + 104), &v55, v30, v31, v32, v33, v34);
      v37 = v53;
      if ((DomainDefBlockInfo & 0x80000000) != 0)
        goto LABEL_27;
      v44 = a1[41];
      v45 = *(unsigned __int16 *)(*(_QWORD *)(v44 + 24) + 106);
      if (v45 > *(unsigned __int16 *)(v55 + 24))
      {
        log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24002, 0, v40, v41, v42, v43, v52);
        goto LABEL_27;
      }
      v50 = *(_QWORD *)(v55 + 16);
      *(_QWORD *)v44 = *(_QWORD *)(a3 + 40);
      *(_QWORD *)(v44 + 8) = v56;
      if (*(_DWORD *)(v50 + 72 * v45 + 60))
        v51 = a1[36];
      else
        v51 = *(_QWORD *)(v50 + 72 * v45 + 48) + *(unsigned __int16 *)(v50 + 72 * v45 + 2);
      *(_QWORD *)(v44 + 32) = v51;
      *(_WORD *)(v44 + 40) = *(_WORD *)(a3 + 8);
      v36 = v61(a1, (uint64_t *)&v54);
      if ((v36 & 0x80000000) == 0)
        goto LABEL_18;
    }
    DomainDefBlockInfo = v36;
LABEL_27:
    clearStrRes((_QWORD *)*a1, (uint64_t)v56);
    goto LABEL_29;
  }
  return inited;
}

uint64_t validateCurrentMatch(uint64_t a1, uint64_t a2, __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;

  v32 = 0;
  v30 = 0;
  v31 = 0;
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 4, 0, (uint64_t)"tokenizer : validateCurrentMatch Begin", a6, (uint64_t)a7, a8, v29);
  *a7 = 1;
  if (partialMatchFoundInBasicToken_NNTN(a1, a3) != 1)
  {
    if (*(_DWORD *)(a1 + 548) == 1)
      FERuntimeData_DumpMatch(a1, a2, a3, 0, v15, v16, v17, v18);
    FEData_blockData_getTokenAndCheckData((_QWORD *)a1, a6, &v31, &v32, &v30, v16, v17, v18);
    if (v32)
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"Applying check rule for token %s", v20, v21, v22, a5);
      *(_WORD *)(a1 + 402) = 0;
      **(_BYTE **)(a1 + 392) = 0;
      v23 = *(_QWORD *)(a1 + 328);
      *(_QWORD *)(v23 + 16) = a3;
      *(_QWORD *)(v23 + 24) = a2;
      v19 = applyChecks((uint64_t *)a1, a4, v30, a1 + 392, 0, v24, v25, v26);
      if ((v19 & 0x80000000) != 0)
        return v19;
      v27 = *(unsigned __int16 *)(a1 + 402);
      if (*(_WORD *)(a1 + 402))
      {
        v27 = strcmp(*(const char **)(a1 + 392), "TRUE") == 0;
        *a7 = v27;
      }
      else
      {
        *a7 = 0;
      }
    }
    else
    {
      v19 = 0;
      v27 = *a7;
    }
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 4, 0, (uint64_t)"tokenizer : validateCurrentMatch End result=%d", v20, v21, v22, v27);
    return v19;
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 4, 0, (uint64_t)"tokenizer : validateCurrentMatch End result=%d (partial match in basic token found)", v16, v17, v18, *a7);
  v19 = 0;
  *a7 = 0;
  return v19;
}

uint64_t tokenizer_CheckNOTNULL(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;

  *a2 = 0;
  if (*(_DWORD *)(a1 + 548) == 1)
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"_NOTNULL( %d) = ", a6, a7, a8, *(unsigned __int16 *)(*(_QWORD *)(a1 + 328) + 40));
  v17 = 0;
  if (!validateMatchAndGetKey((uint64_t *)a1, &v17, a3, a4, a5, a6, a7, a8))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8);
LABEL_10:
    v11 = "FALSE";
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8);
  if ((__int16)v17 == -1 && HIWORD(v17) == 0xFFFF)
    goto LABEL_10;
  v11 = "TRUE";
LABEL_11:
  v15 = add2StringV2((uint64_t *)a1, v9, v11);
  if ((v15 & 0x80000000) == 0 && *(_DWORD *)(a1 + 548) == 1)
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"%s", v12, v13, v14, **(_QWORD **)(*(_QWORD *)(a1 + 328) + 8));
  return v15;
}

uint64_t tokenizer_CheckLessThan(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  int v26;

  v26 = 0;
  if (*(_DWORD *)(a1 + 548) == 1)
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"_LESSTHAN( %d, %s) = ", a6, a7, a8, *(unsigned __int16 *)(*(_QWORD *)(a1 + 328) + 40));
  v25 = 0;
  *a2 = 0;
  if (validateMatchAndGetKey((uint64_t *)a1, &v25, a3, a4, a5, a6, a7, a8))
  {
    if ((__int16)v25 == -1 && HIWORD(v25) == 0xFFFF)
    {
      if (*(_DWORD *)(a1 + 548) == 1)
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"NULL SUBMATCH", v12, v13, v14, v24);
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8);
      v17 = "TRUE";
    }
    else
    {
      if (!getValFromSentence(a1, (__int16 *)&v25, &v26, v10, v11, v12, v13, v14))
        *a2 = 0;
      getValFromArgString(a1, (_WORD *)&v26 + 1);
      v16 = (unsigned __int16)v26 >= HIWORD(v26);
      *a2 = (unsigned __int16)v26 < HIWORD(v26);
      if (v16)
        v17 = "FALSE";
      else
        v17 = "TRUE";
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8);
    }
  }
  else
  {
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8);
    v17 = "FALSE";
  }
  v22 = add2StringV2((uint64_t *)a1, v18, v17);
  if ((v22 & 0x80000000) == 0 && *(_DWORD *)(a1 + 548) == 1)
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"%s", v19, v20, v21, **(_QWORD **)(*(_QWORD *)(a1 + 328) + 8));
  return v22;
}

uint64_t addExpandedOrthography2Match(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  __int16 v5;
  _WORD *v6;
  uint64_t result;

  *a2 = 0;
  v4 = *(_QWORD *)(a1 + 328);
  v5 = *(_WORD *)(v4 + 40);
  v6 = (_WORD *)(*(_QWORD *)(v4 + 24) + 4 * *(unsigned __int16 *)(*(_QWORD *)(v4 + 24) + 40));
  *v6 = v5;
  v6[1] = *(_WORD *)(a1 + 514);
  result = add2StringV5((uint64_t *)a1, a1 + 504, *(char **)(a1 + 560));
  if ((result & 0x80000000) == 0)
  {
    ++*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 328) + 24) + 40);
    *a2 = 1;
  }
  return result;
}

uint64_t compareToken(uint64_t *a1, char *__s, int a3, unsigned int a4, int a5, unsigned int a6, unsigned int a7, int *a8)
{
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned __int16 v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  int v30;
  uint64_t result;
  unsigned __int8 v32;
  int v33;
  const char **v34;
  const char *v35;
  unsigned __int16 v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int *v44;
  uint64_t *v45;

  v16 = strlen(__s);
  v21 = a4;
  *a8 = 0;
  if (a6 <= a4)
    v22 = a4;
  else
    v22 = a6;
  if (v22 <= a7)
    v22 = a7;
  v23 = 0;
  if ((_WORD)v16)
  {
    while (__s[(unsigned __int16)v23] != a3)
    {
      if ((unsigned __int16)++v23 >= (unsigned __int16)v16)
      {
        v23 = v16;
        break;
      }
    }
  }
  if (a3 == __s[(unsigned __int16)v23])
  {
    v43 = a5;
    if (a6 == 1)
      v24 = v23;
    else
      v24 = 0;
    if (a7 == 1)
      v25 = v23;
    else
      v25 = 0;
    if (v21 == 1)
      v26 = v23;
    else
      v26 = 0;
    v44 = a8;
    v45 = a1;
    if (v22 != 1)
    {
      v29 = 0;
      v28 = 0;
      v27 = 0;
      v32 = 1;
      while (1)
      {
        v33 = v23 + 1;
        v23 = v33;
        if ((unsigned __int16)v16 > (unsigned __int16)v33)
        {
          do
          {
            if (a3 == __s[(unsigned __int16)v23])
              break;
            ++v23;
          }
          while ((unsigned __int16)v16 > (unsigned __int16)v23);
          if ((unsigned __int16)v33 == (unsigned __int16)v16 && (unsigned __int16)v33 != (unsigned __int16)v23)
            break;
        }
        if (++v32 == a6)
        {
          v28 = v33;
          v24 = v23;
        }
        if (v32 == a7)
        {
          v29 = v33;
          v25 = v23;
        }
        if (v32 == v21)
        {
          v27 = v33;
          v26 = v23;
        }
        if (v32 == v22)
          goto LABEL_37;
      }
      log_OutPublic(*(_QWORD *)(*v45 + 32), v45[23], 24003, "%s%s%s%d%s%c", v17, v18, v19, v20, "dictionaryStr");
      goto LABEL_45;
    }
    v27 = 0;
    v28 = 0;
    v29 = 0;
LABEL_37:
    v34 = (const char **)v45[41];
    v35 = *v34;
    v36 = strlen(*v34);
    v37 = v26 - v27;
    v38 = v37 >= 1 && v36 == v37;
    if (!v38 || strncmp(&__s[v27], v35, v36))
      return 0;
    if (v29 == v25 || strstr(&__s[v29], v34[4]))
    {
      if (v43 == 1)
      {
        if (v28 == v24)
        {
          log_OutPublic(*(_QWORD *)(*v45 + 32), v45[23], 24004, "%s%s%s%s", v39, v40, v41, v42, "argStr");
LABEL_45:
          v30 = 0;
          result = 0;
LABEL_54:
          a8 = v44;
          goto LABEL_55;
        }
        __s[v24 - v28] = 0;
        result = add2StringV2(v45, (uint64_t)(v45 + 70), __s);
        if ((result & 0x80000000) != 0)
          return result;
      }
      else
      {
        result = 0;
      }
      v30 = 1;
      goto LABEL_54;
    }
    a8 = v44;
    if (*((_DWORD *)v45 + 137) == 1)
      log_OutText(*(_QWORD *)(*v45 + 32), v45[23], 5, 0, (uint64_t)"search word \"%s\", domain=\"%s\" - blocked on domain", v40, v41, v42, (uint64_t)v35);
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24003, "%s%s%s%c", v17, v18, v19, v20, "dictionaryStr");
  }
  v30 = 0;
  result = 0;
LABEL_55:
  *a8 = v30;
  return result;
}

uint64_t doDictionaryLookup(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6, int *a7, uint64_t a8, int a9)
{
  uint64_t result;
  unint64_t v17;
  const char *v19;
  size_t v20;
  size_t v21;
  unsigned __int8 v22;
  unsigned __int16 v23;
  uint64_t v24;

  v24 = 0;
  v23 = 0;
  v22 = 0;
  *a7 = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t *, unsigned __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 88) + 152))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), a2, *(_QWORD *)(a1 + 592), &v24, &v23, &v22);
  if ((result & 0x80000000) == 0)
  {
    if (v23)
      goto LABEL_21;
    if (a9 == 1)
      return result;
    v19 = *(const char **)(a1 + 592);
    v20 = (4 * strlen(v19)) | 1;
    v21 = *(unsigned __int16 *)(a1 + 600);
    if (v20 > v21)
    {
      result = growStrRes((uint64_t *)a1, a1 + 592, (unsigned __int16)v20);
      if ((result & 0x80000000) != 0)
        return result;
      v19 = *(const char **)(a1 + 592);
      LOWORD(v21) = *(_WORD *)(a1 + 600);
    }
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, const char *, _QWORD))(*(_QWORD *)(a1 + 88) + 112))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(*(_QWORD *)(a1 + 328) + 32), v19, (unsigned __int16)(v21 - 1));
    if (**(_BYTE **)(a1 + 592))
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 88) + 152))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), a2);
      if ((result & 0x80000000) == 0)
      {
        if (v23)
        {
LABEL_21:
          if (!*a7)
          {
            v17 = 0;
            do
            {
              result = compareToken((uint64_t *)a1, *(char **)(v24 + 8 * v17), v22, a3, a4, a5, a6, a7);
              if ((result & 0x80000000) != 0)
                break;
              ++v17;
            }
            while (!*a7 && v17 < v23);
          }
        }
      }
    }
  }
  return result;
}

uint64_t doDictionaryLookupLoop(uint64_t a1, int *a2, _DWORD *a3, int a4)
{
  uint64_t result;

  *a2 = 0;
  result = doDictionaryLookup(a1, (uint64_t)"tnlab", 1u, 0, 0, 2u, a2, 1, a4);
  if ((result & 0x80000000) == 0 && *a2 != 1)
  {
    strcpy(*(char **)(a1 + 592), *(const char **)(a1 + 576));
    result = doDictionaryLookup(a1, (uint64_t)"tn", 2u, 1, 1u, 3u, a2, *(unsigned __int8 *)(a1 + 609), a4);
    if ((result & 0x80000000) == 0)
    {
      if (*a2 == 1)
      {
        *a3 = 1;
      }
      else
      {
        strcpy(*(char **)(a1 + 592), *(const char **)(a1 + 576));
        return doDictionaryLookup(a1, (uint64_t)"g2p", 2u, 0, 0, 3u, a2, *(unsigned __int8 *)(a1 + 608), a4);
      }
    }
  }
  return result;
}

uint64_t tokenizer_CheckToken(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;

  v8 = a3;
  v33 = 0;
  v31 = 0;
  if (*(_DWORD *)(a1 + 548) == 1)
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"_ISTOKEN( %d, %s) = ", a6, a7, a8, *(unsigned __int16 *)(*(_QWORD *)(a1 + 328) + 40));
  v32 = 0;
  *a2 = 0;
  if (!validateMatchAndGetKey((uint64_t *)a1, &v32, a3, a4, a5, a6, a7, a8))
    goto LABEL_16;
  if ((__int16)v32 == -1 && HIWORD(v32) == 0xFFFF)
  {
    if (*(_DWORD *)(a1 + 548) == 1)
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"NULL SUBMATCH", v11, v12, v13, v29);
    goto LABEL_19;
  }
  if ((resetStrRes((uint64_t *)a1, a1 + 576) & 0x80000000) != 0
    || (resetStrRes((uint64_t *)a1, a1 + 592) & 0x80000000) != 0)
  {
    return TOKENTNERROR(8);
  }
  v15 = add2StringV4((uint64_t *)a1, a1 + 592, (unsigned __int16)v32, SHIWORD(v32));
  if ((v15 & 0x80000000) != 0)
    return v15;
  v15 = add2StringV4((uint64_t *)a1, a1 + 576, (unsigned __int16)v32, SHIWORD(v32));
  if ((v15 & 0x80000000) != 0)
    return v15;
  if (*(_DWORD *)(a1 + 548) == 1)
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"search word \"%s\", domain=\"%s\"", v16, v17, v18, *(_QWORD *)(a1 + 592));
  *(_WORD *)(a1 + 570) = 0;
  **(_BYTE **)(a1 + 560) = 0;
  v15 = doDictionaryLookupLoop(a1, &v33, &v31, v8);
  if ((v15 & 0x80000000) != 0)
    return v15;
  if (v33 == 1)
  {
    if (v31 != 1)
      goto LABEL_19;
    v30 = 0;
    v15 = addExpandedOrthography2Match(a1, &v30);
    if ((v15 & 0x80000000) == 0)
    {
      if (v30 != 1)
      {
        if (*(_DWORD *)(a1 + 548) == 1)
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"ERROR : problem adding expanded orthography for word \"%s\"", v26, v27, v28, *(_QWORD *)(a1 + 592));
        goto LABEL_16;
      }
LABEL_19:
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8);
      v20 = "TRUE";
      goto LABEL_20;
    }
    return v15;
  }
LABEL_16:
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8);
  v20 = "FALSE";
LABEL_20:
  v24 = add2StringV2((uint64_t *)a1, v19, v20);
  if ((v24 & 0x80000000) == 0 && *(_DWORD *)(a1 + 548) == 1)
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"%s", v21, v22, v23, **(_QWORD **)(*(_QWORD *)(a1 + 328) + 8));
  return v24;
}

uint64_t tokenizer_CheckIsExactToken(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return tokenizer_CheckToken(a1, a2, 1, a4, a5, a6, a7, a8);
}

uint64_t tokenizer_CheckIsToken(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return tokenizer_CheckToken(a1, a2, 0, a4, a5, a6, a7, a8);
}

uint64_t tokenizer_CheckEqualTo(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  int v24;
  int v25;

  v25 = 0;
  if (*(_DWORD *)(a1 + 548) == 1)
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"_EQUALTO( %d, %s) = ", a6, a7, a8, *(unsigned __int16 *)(*(_QWORD *)(a1 + 328) + 40));
  v24 = 0;
  *a2 = 0;
  if (validateMatchAndGetKey((uint64_t *)a1, &v24, a3, a4, a5, a6, a7, a8))
  {
    v15 = (__int16)v24 == -1 && HIWORD(v24) == 0xFFFF;
    if (v15)
    {
      if (*(_DWORD *)(a1 + 548) == 1)
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"NULL SUBMATCH", v12, v13, v14, v23);
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8);
      v16 = "TRUE";
    }
    else
    {
      if (!getValFromSentence(a1, (__int16 *)&v24, &v25, v10, v11, v12, v13, v14))
        *a2 = 0;
      getValFromArgString(a1, (_WORD *)&v25 + 1);
      v15 = (unsigned __int16)v25 == HIWORD(v25);
      *a2 = v15;
      if (v15)
        v16 = "TRUE";
      else
        v16 = "FALSE";
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8);
    }
  }
  else
  {
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8);
    v16 = "FALSE";
  }
  v21 = add2StringV2((uint64_t *)a1, v17, v16);
  if ((v21 & 0x80000000) == 0 && *(_DWORD *)(a1 + 548) == 1)
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"%s", v18, v19, v20, **(_QWORD **)(*(_QWORD *)(a1 + 328) + 8));
  return v21;
}

uint64_t tokenizer_CheckAND(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  int v17;
  unsigned __int8 v18;
  int v19;
  unsigned __int8 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 548) == 1)
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"_AND( %s) = ", a6, a7, a8, **(_QWORD **)(a1 + 328));
  *a2 = 0;
  if (parseIntoBinaryArgs(a1, (char *)&v19, (char *)&v17) && !(v19 ^ 0x45555254 | v20))
  {
    v16 = v17 ^ 0x45555254 | v18;
    *a2 = v16 == 0;
    if (!v16)
    {
      v10 = "TRUE";
      goto LABEL_7;
    }
  }
  else
  {
    *a2 = 0;
  }
  v10 = "FALSE";
LABEL_7:
  v14 = add2StringV2((uint64_t *)a1, *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8), v10);
  if ((v14 & 0x80000000) == 0 && *(_DWORD *)(a1 + 548) == 1)
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"%s", v11, v12, v13, **(_QWORD **)(*(_QWORD *)(a1 + 328) + 8));
  return v14;
}

uint64_t getValFromSentence(uint64_t a1, __int16 *a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  size_t v13;
  const char *v14;
  uint64_t v15;
  int v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  const char *v23;

  v9 = *a2;
  v10 = (unsigned __int16)a2[1];
  if (v9 == -1 && v10 == 0xFFFF)
  {
    v19 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v20 = *(_QWORD *)(a1 + 184);
    v21 = 24005;
    v22 = 0;
  }
  else
  {
    v13 = (unsigned __int16)(v10 - v9);
    strncpy(*(char **)(a1 + 552), (const char *)(*(_QWORD *)(a1 + 304) + v9), v13);
    *(_BYTE *)(*(_QWORD *)(a1 + 552) + v13) = 0;
    v14 = *(const char **)(a1 + 552);
    if (v10 == (unsigned __int16)v9)
    {
LABEL_12:
      *a3 = atoi(v14);
      return 1;
    }
    v15 = 0;
    while (1)
    {
      v16 = v14[v15];
      if (v16 != 32 && (v16 - 48) >= 0xA)
        break;
      if (v13 == ++v15)
        goto LABEL_12;
    }
    v20 = *(_QWORD *)(a1 + 184);
    v23 = "string";
    v22 = "%s%s";
    v19 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v21 = 24006;
  }
  log_OutPublic(v19, v20, v21, v22, a5, a6, a7, a8, v23);
  return 0;
}

uint64_t getValFromArgString(uint64_t a1, _WORD *a2)
{
  const char *v4;
  unsigned __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;

  v4 = **(const char ***)(a1 + 328);
  v5 = strlen(v4);
  if (v5)
  {
    v10 = 0;
    while (1)
    {
      v11 = v4[v10];
      if (v11 != 32 && (v11 - 48) >= 0xA)
        break;
      if (++v10 >= v5)
        goto LABEL_8;
    }
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24006, "%s%s", v6, v7, v8, v9, "string");
    return 0;
  }
  else
  {
LABEL_8:
    *a2 = atoi(v4);
    return 1;
  }
}

uint64_t parseIntoBinaryArgs(uint64_t a1, char *a2, char *a3)
{
  const char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  unsigned int v13;
  int v14;
  unsigned __int16 v15;
  unsigned __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  int v23;
  uint64_t v24;
  unsigned __int16 v25;

  v6 = **(const char ***)(a1 + 328);
  v7 = strlen(v6);
  v12 = v7;
  v13 = v7;
  if (!v7)
    goto LABEL_8;
  v14 = 0;
  while (v6[v14] != 32)
  {
    v15 = v14 + 1;
    v14 = (unsigned __int16)(v14 + 1);
    if (v7 <= v15)
    {
      v16 = v7;
      goto LABEL_7;
    }
  }
  v16 = v14;
LABEL_7:
  if (v7 != v14)
  {
    strncpy(a2, v6, v16);
    a2[v16] = 0;
    if ((unsigned __int16)(v16 + 1) <= v13)
      v21 = v13;
    else
      v21 = v16 + 1;
    while (++v16 < v12)
    {
      v22 = v16;
      if (*(_BYTE *)(**(_QWORD **)(a1 + 328) + v16) != 32)
        goto LABEL_16;
    }
    v22 = v21;
LABEL_16:
    if (v13 != v16)
    {
      v23 = v22;
      if (v13 > v22)
      {
        v24 = **(_QWORD **)(a1 + 328);
        if (*(_BYTE *)(v24 + v22) != 32)
        {
          v25 = v22;
          do
            v23 = ++v25;
          while (v13 > v25 && *(_BYTE *)(v24 + v25) != 32);
        }
      }
      if (v13 == v23)
      {
        strncpy(a3, (const char *)(**(_QWORD **)(a1 + 328) + v22), (int)(v13 - v16));
        a3[v13 - v16] = 0;
        return 1;
      }
    }
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24008, "%s%s", v17, v18, v19, v20, "string");
  }
  else
  {
LABEL_8:
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24007, "%s%s", v8, v9, v10, v11, "string");
  }
  return 0;
}

uint64_t validateMatchAndGetKey(uint64_t *a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v8 = a1[41];
  v9 = *(unsigned __int16 *)(v8 + 40);
  if (*(_WORD *)(v8 + 40))
  {
    v10 = *(_QWORD *)(v8 + 24);
    if (v9 > *(unsigned __int8 *)(v10 + 82))
    {
      log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24008, "%s%d", a5, a6, a7, a8, "index");
      return 0;
    }
    v12 = v10 + 42;
    *a2 = *(_WORD *)(v12 + 4 * (v9 - 1));
    a2[1] = *(_WORD *)(v12 + 4 * v9 - 2);
  }
  else
  {
    *(_DWORD *)a2 = **(_DWORD **)(v8 + 16);
  }
  return 1;
}

uint64_t tokenizer_CheckOR(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  unsigned __int8 v18;
  int v19;
  unsigned __int8 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 548) == 1)
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"_OR( %s) = ", a6, a7, a8, **(_QWORD **)(a1 + 328));
  *a2 = 0;
  if (parseIntoBinaryArgs(a1, (char *)&v19, (char *)&v17))
  {
    if (!(v19 ^ 0x45555254 | v20))
    {
      *a2 = 1;
LABEL_10:
      v11 = "TRUE";
      goto LABEL_11;
    }
    v10 = v17 ^ 0x45555254 | v18;
    *a2 = v10 == 0;
    if (!v10)
      goto LABEL_10;
  }
  else
  {
    *a2 = 0;
  }
  v11 = "FALSE";
LABEL_11:
  v15 = add2StringV2((uint64_t *)a1, *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8), v11);
  if ((v15 & 0x80000000) == 0 && *(_DWORD *)(a1 + 548) == 1)
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"%s", v12, v13, v14, **(_QWORD **)(*(_QWORD *)(a1 + 328) + 8));
  return v15;
}

uint64_t resolveTokensUsingPriorityList(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t DomainDefBlockInfo;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  __int16 v16;
  int *v17;
  unsigned __int16 v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  unint64_t v31;
  uint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  unsigned __int16 *v41;
  uint64_t v42;
  unsigned __int16 *v43;
  uint64_t v44;

  v43 = 0;
  v44 = 0;
  v42 = 0;
  DomainDefBlockInfo = resetSolutionList(a2, *(unsigned __int16 *)(a2 + 386));
  if ((DomainDefBlockInfo & 0x80000000) == 0)
  {
    if (*(_WORD *)(a2 + 386))
    {
      v10 = 0;
      v11 = 0;
      v12 = 4;
      do
      {
        DomainDefBlockInfo = FEData_blockData_newGetDomainDefBlockInfo((_QWORD *)a2, *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 376) + 8 * v10) + 104), &v42, v4, v5, v6, v7, v8);
        if ((DomainDefBlockInfo & 0x80000000) != 0)
          return DomainDefBlockInfo;
        v13 = *(_DWORD *)(v42 + 8);
        *(_DWORD *)(*(_QWORD *)(a2 + 360) + v12) = v13;
        if (v13 > v11)
          v11 = v13;
        ++v10;
        v14 = *(unsigned __int16 *)(a2 + 386);
        v12 += 12;
      }
      while (v10 < v14);
      if (!*(_WORD *)(a2 + 386))
        goto LABEL_35;
      v15 = 0;
      v16 = 0;
      v17 = (int *)(*(_QWORD *)(a2 + 360) + 4);
      v18 = 999;
      do
      {
        v19 = *v17;
        v17 += 3;
        if (v19 == v11)
        {
          ++v16;
          v18 = v15;
        }
        ++v15;
      }
      while (v14 != v15);
      if (v16 == 1)
      {
        *a1 = v18;
        log_OutText(*(_QWORD *)(*(_QWORD *)a2 + 32), *(_QWORD *)(a2 + 184), 5, 0, (uint64_t)"priority list resolution by domain type : match %d", v6, v7, v8, v18);
        return 0;
      }
      v41 = a1;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 999;
      do
      {
        *(_WORD *)(*(_QWORD *)(a2 + 360) + 12 * v20) = 999;
        v24 = *(_QWORD *)(*(_QWORD *)(a2 + 376) + 8 * v20);
        FEData_blockData_newGetDomainEntry((_QWORD *)a2, *(unsigned __int16 *)(v24 + 104), *(unsigned __int16 *)(v24 + 106), &v44, v5, v6, v7, v8);
        if (*(_DWORD *)(v44 + 8) == 1)
        {
          FEData_blockData_newGetPriorityList((_QWORD *)a2, *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 376) + 8 * v20) + 104), *(unsigned __int16 *)(v44 + 12), &v43, v5, v6, v7, v8);
          if (!v43 || v43 == v22)
          {
            v22 = v43;
          }
          else
          {
            log_OutText(*(_QWORD *)(*(_QWORD *)a2 + 32), *(_QWORD *)(a2 + 184), 5, 0, (uint64_t)"using priority list from match %d, to resolve", v6, v7, v8, v21);
            v22 = v43;
            if (*(_WORD *)(a2 + 386))
            {
              v25 = 0;
              v26 = 0;
              v27 = v43[4];
              do
              {
                if (v43[4])
                {
                  v28 = 0;
                  v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 376) + 8 * v25) + 88);
                  v30 = (unsigned __int16 *)(*(_QWORD *)v43 + 4);
                  while (*(unsigned __int16 *)(v29 + 2) != *(v30 - 1) || *(unsigned __int16 *)(v29 + 4) != *v30)
                  {
                    v30 += 6;
                    if (v43[4] == ++v28)
                      goto LABEL_29;
                  }
                  log_OutText(*(_QWORD *)(*(_QWORD *)a2 + 32), *(_QWORD *)(a2 + 184), 5, 0, (uint64_t)"token [%d] priority = %d", v6, v7, v8, v26);
                  if (v27 > (unsigned __int16)v28)
                  {
                    v27 = (unsigned __int16)v28;
                    v23 = (unsigned __int16)v25;
                    *(_WORD *)(*(_QWORD *)(a2 + 360) + 12 * v20) = v25;
                  }
                }
LABEL_29:
                v26 = ++v25;
              }
              while (v25 < *(unsigned __int16 *)(a2 + 386));
              v22 = v43;
            }
          }
        }
        ++v20;
        v31 = *(unsigned __int16 *)(a2 + 386);
        v21 = v20;
      }
      while (v20 < v31);
      if ((_DWORD)v23 == 999)
      {
        a1 = v41;
        goto LABEL_35;
      }
      if (*(_WORD *)(a2 + 386))
      {
        v33 = 0;
        v34 = 0;
        v35 = 0;
        do
        {
          v36 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 360) + v33);
          if (v36 != 999 && v36 != (_DWORD)v23)
          {
            log_OutText(*(_QWORD *)(*(_QWORD *)a2 + 32), *(_QWORD *)(a2 + 184), 5, 0, (uint64_t)"priority lists conflict in resolution : solution %d and %d", v6, v7, v8, *(unsigned __int16 *)(*(_QWORD *)(a2 + 360) + v33));
            LOWORD(v31) = *(_WORD *)(a2 + 386);
            v35 = 1;
          }
          ++v34;
          v33 += 12;
        }
        while (v34 < (unsigned __int16)v31);
        *v41 = v23;
        if (v35 == 1)
        {
          v38 = *(_QWORD *)(*(_QWORD *)a2 + 32);
          v39 = *(_QWORD *)(a2 + 184);
          v40 = "priority list resolution : conflict found, so choosing match %d";
LABEL_49:
          log_OutText(v38, v39, 5, 0, (uint64_t)v40, v6, v7, v8, v23);
          return DomainDefBlockInfo;
        }
      }
      else
      {
        *v41 = v23;
      }
      v38 = *(_QWORD *)(*(_QWORD *)a2 + 32);
      v39 = *(_QWORD *)(a2 + 184);
      v40 = "priority list resolution : match %d";
      goto LABEL_49;
    }
LABEL_35:
    *a1 = 0;
    log_OutText(*(_QWORD *)(*(_QWORD *)a2 + 32), *(_QWORD *)(a2 + 184), 5, 0, (uint64_t)"no priority list resolution : return default match %d", v6, v7, v8, 0);
  }
  return DomainDefBlockInfo;
}

uint64_t tokenizer_ResolveMatches(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned __int16 v10;
  uint64_t matched;
  uint64_t AllMatchesAtKey;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned __int16 v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned __int16 *v43;
  unsigned __int16 v44;

  v44 = 0;
  v43 = 0;
  v40 = 0;
  v41 = 0;
  v39 = 0;
  if (!a1)
    return TOKENTNERROR(7);
  if (!*(_QWORD *)(a1 + 304))
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24049, 0, a5, a6, a7, a8, v38);
    return TOKENTNERROR(7);
  }
  if (*(_DWORD *)(a1 + 548) == 1
    && FERuntimeData_GetNumMatches((_QWORD *)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
    FERuntimeData_DumpMatches(a1, (uint64_t)"Dump at start of ResolveMatches", 0, a4, a5, a6, a7, a8);
  }
  v42 = 0;
  if (*(_WORD *)(a1 + 312))
  {
    v9 = 0;
    v10 = 0;
    matched = 0;
    while (1)
    {
      FERuntimeData_GetKeyAtPos(a1, v10, &v43, &v41);
      a2 = v43;
      if (v43 && v9 == (__int16)*v43)
      {
        FERuntimeData_FindLongestMatch(a1, v43, &v44);
        LOWORD(v42) = *v43;
        HIWORD(v42) = v44;
        FERuntimeData_DeleteSubsumedkeys(a1, v43, v44);
        AllMatchesAtKey = FERuntimeData_GetAllMatchesAtKey(a1, (unsigned __int16 *)&v42);
        if ((AllMatchesAtKey & 0x80000000) != 0)
          return AllMatchesAtKey;
        v16 = *(unsigned __int16 *)(a1 + 386);
        if (v16 >= 2)
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"applying token priority lists to resolve %d token clashes at position %d,%d", v13, v14, v15, v16);
          if (*(_DWORD *)(a1 + 548) == 1 && *(_WORD *)(a1 + 386))
          {
            v22 = 0;
            do
            {
              FEData_blockData_getTokenData((_QWORD *)a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * v22) + 88), &v40, v17, v18, v19, v20, v21);
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"[%d] = token %s", v23, v24, v25, v22++);
            }
            while (v22 < *(unsigned __int16 *)(a1 + 386));
          }
          AllMatchesAtKey = resolveTokensUsingPriorityList(&v39, a1);
          if ((AllMatchesAtKey & 0x80000000) != 0)
            return AllMatchesAtKey;
          v29 = *(_WORD *)(a1 + 386);
          if (v29)
          {
            v30 = 0;
            v31 = v39;
            do
            {
              if (v31 != v30)
              {
                log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"deleting match %d", v26, v27, v28, v30);
                FERuntimeData_DeleteMatch(a1, (unsigned __int16 *)&v42, *(_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * v30));
                v29 = *(_WORD *)(a1 + 386);
              }
              ++v30;
            }
            while (v30 < v29);
          }
        }
        matched = resetMatchList(a1, 0);
        if ((matched & 0x80000000) != 0)
          return matched;
        v10 = v44;
      }
      else
      {
        ++v10;
      }
      v43 = 0;
      v9 = v10;
      if (v10 >= *(unsigned __int16 *)(a1 + 312))
        goto LABEL_30;
    }
  }
  matched = 0;
LABEL_30:
  if (*(_DWORD *)(a1 + 548) == 1)
  {
    if (FERuntimeData_GetNumMatches((_QWORD *)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
      FERuntimeData_DumpMatches(a1, (uint64_t)"Dump at end of ResolveMatches", 0, v33, v34, v35, v36, v37);
  }
  return matched;
}

uint64_t addBTokMatchToList(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;

  v4 = *(unsigned __int16 *)(a1 + 634);
  if (*(_WORD *)(a1 + 634))
  {
    v5 = *(_QWORD *)(a1 + 624);
    if ((_DWORD)v4 != *(unsigned __int16 *)(a1 + 632))
    {
LABEL_8:
      v13 = *(unsigned __int16 *)(a1 + 634);
      *(_DWORD *)(v5 + 4 * v13) = *a2;
      *(_WORD *)(a1 + 634) = v13 + 1;
      return 0;
    }
    v6 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), v5, 4 * v4 + 128);
    if (*(_QWORD *)(a1 + 624))
    {
      v5 = v6;
      *(_QWORD *)(a1 + 624) = v6;
      v11 = *(_WORD *)(a1 + 632) + 32;
LABEL_7:
      *(_WORD *)(a1 + 632) = v11;
      goto LABEL_8;
    }
  }
  else
  {
    v12 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 128);
    *(_QWORD *)(a1 + 624) = v12;
    if (v12)
    {
      v5 = v12;
      v11 = 32;
      goto LABEL_7;
    }
  }
  log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24048, 0, v7, v8, v9, v10, v15);
  return TOKENTNERROR(10);
}

uint64_t tokenizer_apply_regex_LongestMatch(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _DWORD **v24;
  int v26;
  _DWORD v27[100];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v10 = *(unsigned __int16 *)(a2 + 44);
  while (!*(_DWORD *)(*(_QWORD *)(a2 + 8) + 48))
  {
    v11 = nuance_pcre_exec2((_QWORD *)a1[17], a1[18], *(_QWORD *)(a2 + 32), *(int **)a2, (char *)a1[38], *(unsigned __int16 *)(a2 + 42), v10, *(unsigned __int16 *)(a2 + 64), v27, 100, (uint64_t (*)(__int128 *))CALLOUTCHECK);
    if ((v11 & 0x80000000) != 0)
    {
      v12 = nuance_pcre_ErrorToLhError(v11);
      v14 = v12;
      if (v12 >> 20 != 2213)
        goto LABEL_9;
      if ((v12 & 0x1FFF) != 0x14)
      {
        if ((v12 & 0x1FFF) == 0xA)
          log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 11002, "%s%x%s%s", v13, a6, a7, a8, "lhError");
        else
          log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 11027, "%s%x%s%s", v13, a6, a7, a8, "lhError");
        return v14;
      }
      break;
    }
  }
  v14 = 0;
LABEL_9:
  v15 = *(_QWORD *)(a2 + 8);
  if ((*(_DWORD *)(v15 + 48) & 0x80000000) != 0)
    return *(unsigned int *)(v15 + 48);
  v16 = *(__int16 **)(v15 + 8);
  if (*v16 || v16[1])
  {
    v26 = 1;
    if (*(_DWORD *)(v15 + 44) == 1)
    {
      log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"token %s already validated", a6, a7, a8, *(_QWORD *)(a2 + 24));
      v26 = 1;
    }
    else
    {
      v14 = validateCurrentMatch((uint64_t)a1, *(_QWORD *)v15, v16, a1[38], *(_QWORD *)(v15 + 24), *(_QWORD *)(a2 + 48), &v26, a8);
      if ((v14 & 0x80000000) != 0)
        return v14;
      if (v26 != 1)
      {
        *(_WORD *)(**(_QWORD **)(a2 + 8) + 40) = 0;
        log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"token %s invalidated.", v19, v20, v21, *(_QWORD *)(a2 + 24));
        return v14;
      }
    }
    v22 = *(uint64_t **)(a2 + 8);
    v23 = *v22;
    *(_QWORD *)(v23 + 88) = *(_QWORD *)(a2 + 48);
    v14 = FERuntimeData_AddMatch(a1, (_DWORD *)v22[1], (__int128 *)v23, v17, v18, v19, v20, v21);
    if ((v14 & 0x80000000) == 0)
    {
      v24 = *(_DWORD ***)(a2 + 8);
      if (*(_DWORD *)(*((_QWORD *)*v24 + 11) + 8) == 1)
        return addBTokMatchToList((uint64_t)a1, v24[1]);
    }
  }
  return v14;
}

uint64_t CALLOUTCHECK(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v10;
  __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  __int16 v68[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;

  v8 = *(uint64_t **)(a1 + 48);
  if ((v8[6] & 0x80000000) == 0)
  {
    v10 = *v8;
    v11 = (__int16 *)v8[1];
    if (*((_WORD *)v8 + 20))
    {
      v12 = *((unsigned __int16 *)v8 + 20) + 1;
      *(_DWORD *)(a1 + 36) = v12;
    }
    else
    {
      v12 = *(unsigned int *)(a1 + 36);
    }
    log_OutText(*(_QWORD *)(*(_QWORD *)v8[4] + 32), *(_QWORD *)(v8[4] + 184), 6, 0, (uint64_t)"CALLOUT top=%d: (numsubmatches=%d) (match=%d,%d) token=%s", a6, a7, a8, v12);
    if (!v11[1] && !*v11)
      goto LABEL_16;
    if (*(_DWORD *)(a1 + 28) < v11[1])
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)v8[4] + 32), *(_QWORD *)(v8[4] + 184), 6, 0, (uint64_t)"CALLOUT Match invalidated as start position %d is <= key \"to\" position %d", v13, v14, v15, *(unsigned int *)(a1 + 28));
      return 1;
    }
    v16 = *(_QWORD *)(*v8 + 88);
    LODWORD(v69) = 0;
    log_OutText(*(_QWORD *)(*(_QWORD *)v8[4] + 32), *(_QWORD *)(v8[4] + 184), 6, 0, (uint64_t)"CALLOUT non-overlapping longestMatch found...validating...", v13, v14, v15, v64);
    v18 = validateCurrentMatch(v8[4], *v8, (__int16 *)v8[1], v8[2], v8[3], v16, &v69, v17);
    if (v18 < 0)
    {
LABEL_31:
      *((_DWORD *)v8 + 12) = v18;
      return 1;
    }
    v24 = (uint64_t *)v8[4];
    if ((_DWORD)v69 == 1)
    {
      v18 = FERuntimeData_AddMatch(v24, (_DWORD *)v8[1], (__int128 *)*v8, v19, v20, v21, v22, v23);
      if (v18 < 0)
        goto LABEL_31;
    }
    else
    {
      log_OutText(*(_QWORD *)(*v24 + 32), v24[23], 6, 0, (uint64_t)"CALLOUT token invalidated", v21, v22, v23, v65);
    }
    *(_DWORD *)v8[1] = 0;
    *((_DWORD *)v8 + 11) = 0;
    *(_WORD *)(*v8 + 40) = 0;
    v25 = v11[1];
    v26 = *v11;
    if (!(v25 | v26) || v25 - v26 < *(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 28))
    {
LABEL_16:
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v69 = 0u;
      v67 = 1;
      log_OutText(*(_QWORD *)(*(_QWORD *)v8[4] + 32), *(_QWORD *)(v8[4] + 184), 6, 0, (uint64_t)"CALLOUT - Longest Match Found %d,%d (num submatches=%d)...validating...", v13, v14, v15, *(unsigned int *)(a1 + 28));
      v32 = *(_DWORD *)(a1 + 28);
      v33 = *(_DWORD *)(a1 + 32);
      v68[0] = v32;
      v68[1] = v33;
      if (*((__int16 *)v8 + 26) > (__int16)v32 || *((__int16 *)v8 + 27) < (__int16)v33)
      {
        v34 = (_QWORD *)v8[4];
        v35 = *(_QWORD *)(*v34 + 32);
        v36 = v34[23];
        v37 = "CALLOUT - this match is out of domain...";
LABEL_19:
        log_OutText(v35, v36, 6, 0, (uint64_t)v37, v29, v30, v31, v66);
        return 1;
      }
      v38 = v8[4];
      if (*(_DWORD *)(v38 + 960) == 1
        && blockedByBtok(v38, (__int16)v32, (__int16)v33, v27, v28, v29, v30, v31) == 1)
      {
        v39 = (_QWORD *)v8[4];
        v35 = *(_QWORD *)(*v39 + 32);
        v36 = v39[23];
        v37 = "CALLOUT - blocked by prior btok...";
        goto LABEL_19;
      }
      v40 = *(_DWORD *)(a1 + 36);
      v41 = v40 - 1;
      v42 = *v8;
      v43 = *(_QWORD *)(*v8 + 88);
      *((_QWORD *)&v74 + 1) = v43;
      DWORD2(v75) = *(_DWORD *)(v42 + 104);
      BYTE2(v74) = v40 - 1;
      WORD4(v71) = 0;
      if ((_BYTE)v40 != 1 && v40 >= 2)
      {
        v44 = 0;
        v45 = 2 * v40;
        v46 = *(_QWORD *)(a1 + 8);
        v47 = 2;
        v48 = 2;
        do
        {
          v49 = (char *)&v69 + 4 * (unsigned __int16)v44;
          *((_WORD *)v49 + 21) = *(_DWORD *)(v46 + 4 * (unsigned __int16)v48);
          *((_WORD *)v49 + 22) = *(_DWORD *)(v46 + 4 * (v47 | 1u));
          ++v44;
          v48 += 2;
          v47 = (unsigned __int16)v48;
        }
        while (v45 > (unsigned __int16)v48);
      }
      v18 = validateCurrentMatch(v8[4], (uint64_t)&v69, v68, v8[2], v8[3], v43, &v67, v31);
      if (v18 < 0)
        goto LABEL_31;
      if (v67 == 1)
      {
        *(_WORD *)(v10 + 40) = WORD4(v71);
        v53 = v71;
        v54 = v70;
        *(_OWORD *)v10 = v69;
        *(_OWORD *)(v10 + 16) = v54;
        *(_QWORD *)(v10 + 32) = v53;
LABEL_37:
        log_OutText(*(_QWORD *)(*(_QWORD *)v8[4] + 32), *(_QWORD *)(v8[4] + 184), 6, 0, (uint64_t)"CALLOUT - VALIDATING longest match. saving...", v50, v51, v52, v66);
        *v11 = *(_DWORD *)(a1 + 28);
        v11[1] = *(_DWORD *)(a1 + 32);
        *((_DWORD *)v8 + 11) = 1;
        if (v41)
        {
          *(_BYTE *)(v10 + 82) = v41;
          if (*(int *)(a1 + 36) >= 2)
          {
            v59 = 0;
            v60 = 2;
            v61 = 2;
            do
            {
              v62 = *(_QWORD *)(a1 + 8);
              v63 = v10 + 4 * (unsigned __int16)v59;
              *(_WORD *)(v63 + 42) = *(_DWORD *)(v62 + 4 * (unsigned __int16)v61);
              *(_WORD *)(v63 + 44) = *(_DWORD *)(v62 + 4 * (v60 | 1u));
              log_OutText(*(_QWORD *)(*(_QWORD *)v8[4] + 32), *(_QWORD *)(v8[4] + 184), 6, 0, (uint64_t)"CALLOUT - setting longest match submatch[%d] = %d,%d", v56, v57, v58, (unsigned __int16)v59++);
              v61 += 2;
              v60 = (unsigned __int16)v61;
            }
            while ((unsigned __int16)v61 < 2 * *(_DWORD *)(a1 + 36));
          }
        }
        return 1;
      }
      if (v67 || !WORD4(v71))
      {
        if (v67)
          goto LABEL_37;
      }
      else
      {
        WORD4(v71) = 0;
      }
      log_OutText(*(_QWORD *)(*(_QWORD *)v8[4] + 32), *(_QWORD *)(v8[4] + 184), 6, 0, (uint64_t)"CALLOUT - INVALIDATING this longest match...", v50, v51, v52, v66);
      *(_DWORD *)v8[1] = 0;
      *((_DWORD *)v8 + 11) = 0;
      *(_WORD *)(*v8 + 40) = 0;
    }
  }
  return 1;
}

uint64_t tokenizer_CheckGreaterThan(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  int v26;

  v26 = 0;
  if (*(_DWORD *)(a1 + 548) == 1)
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"_GREATERTHAN( %d, %s) = ", a6, a7, a8, *(unsigned __int16 *)(*(_QWORD *)(a1 + 328) + 40));
  v25 = 0;
  *a2 = 0;
  if (validateMatchAndGetKey((uint64_t *)a1, &v25, a3, a4, a5, a6, a7, a8))
  {
    if ((__int16)v25 == -1 && HIWORD(v25) == 0xFFFF)
    {
      if (*(_DWORD *)(a1 + 548) == 1)
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"NULL SUBMATCH", v12, v13, v14, v24);
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8);
      v17 = "TRUE";
    }
    else
    {
      if (!getValFromSentence(a1, (__int16 *)&v25, &v26, v10, v11, v12, v13, v14))
        *a2 = 0;
      getValFromArgString(a1, (_WORD *)&v26 + 1);
      v16 = (unsigned __int16)v26 > HIWORD(v26);
      *a2 = v16;
      if (v16)
        v17 = "TRUE";
      else
        v17 = "FALSE";
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8);
    }
  }
  else
  {
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8);
    v17 = "FALSE";
  }
  v22 = add2StringV2((uint64_t *)a1, v18, v17);
  if ((v22 & 0x80000000) == 0 && *(_DWORD *)(a1 + 548) == 1)
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"%s", v19, v20, v21, **(_QWORD **)(*(_QWORD *)(a1 + 328) + 8));
  return v22;
}

uint64_t tokenizer_ObjOpen(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  _QWORD **v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t Map;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;

  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer : ObjOpen Begin", a6, a7, a8, v47);
  v9 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 8);
  if (!v9)
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24048, 0, v10, v11, v12, v13, v48);
    return TOKENTNERROR(10);
  }
  v14 = v9;
  a1[21] = v9;
  v15 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 80);
  *(_QWORD *)v14 = v15;
  v20 = *a1;
  if (v15)
  {
    v21 = heap_Calloc(*(_QWORD **)(v20 + 8), 1, 40);
    **(_QWORD **)v14 = v21;
    v20 = *a1;
    if (v21)
    {
      v22 = heap_Calloc(*(_QWORD **)(v20 + 8), 1, 56);
      *(_QWORD *)(*(_QWORD *)v14 + 8) = v22;
      v20 = *a1;
      if (v22)
      {
        v23 = (_DWORD *)heap_Calloc(*(_QWORD **)(v20 + 8), 1, 4);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 8) + 8) = v23;
        if (v23)
        {
          *v23 = 0;
          v24 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 112);
          v25 = *(_QWORD ***)v14;
          v26 = *(_QWORD *)(*(_QWORD *)v14 + 8);
          *(_QWORD *)v26 = v24;
          if (v24)
          {
            *(_QWORD *)(v24 + 88) = 0;
            *(_WORD *)(v26 + 40) = 0;
            *(_DWORD *)(v26 + 48) = 0;
            *(_QWORD *)(v26 + 16) = 0;
            *(_QWORD *)(v26 + 24) = 0;
            v27 = *v25;
            *v27 |= 4uLL;
            v27[3] = v26;
            v50 = 0;
            log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer : InitCheckFunctions Begin", v17, v18, v19, v48);
            Map = FEFunctionMap_GetMap(a1, &v50);
            if ((Map & 0x80000000) != 0)
            {
              v38 = Map;
            }
            else
            {
              for (i = 0; i != 128; i += 16)
              {
                v30 = ssftmap_Insert(v50, *(uint64_t *)((char *)&off_1EA93F698 + i), *(uint64_t *)((char *)&off_1EA93F698 + i + 8));
                if ((v30 & 0x80000000) != 0)
                {
                  v38 = v30;
                  log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 21011, 0, v31, v32, v33, v34, v49);
                  goto LABEL_20;
                }
              }
              v38 = FEFunctionMap_AddFunctionMap((uint64_t)a1, 0, v50);
              if ((v38 & 0x80000000) == 0)
                goto LABEL_21;
            }
LABEL_20:
            ssftmap_ObjClose(v50);
LABEL_21:
            log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer : InitCheckFunctions End (%x)", v35, v36, v37, v38);
            if ((v38 & 0x80000000) == 0)
              goto LABEL_17;
            goto LABEL_16;
          }
        }
        v20 = *a1;
      }
    }
  }
  log_OutPublic(*(_QWORD *)(v20 + 32), a1[23], 24048, 0, v16, v17, v18, v19, v48);
  v38 = TOKENTNERROR(10);
  if ((v38 & 0x80000000) != 0)
LABEL_16:
    tokenizer_loc_ObjClose_0(a1, v40, v41, v42, v43, v44, v45, v46);
LABEL_17:
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer : ObjOpen End (%x)", v44, v45, v46, v38);
  return v38;
}

uint64_t tokenizer_loc_ObjClose_0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v9 = a1[21];
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer : loc ObjClose Begin", a6, a7, a8, v16);
  v10 = *(uint64_t **)v9;
  if (*(_QWORD *)v9)
  {
    v11 = (uint64_t *)v10[1];
    if (v11)
    {
      if (v11[1])
      {
        heap_Free(*(_QWORD **)(*a1 + 8), v11[1]);
        v11 = *(uint64_t **)(*(_QWORD *)v9 + 8);
        v11[1] = 0;
      }
      if (*v11)
      {
        heap_Free(*(_QWORD **)(*a1 + 8), *v11);
        v11 = *(uint64_t **)(*(_QWORD *)v9 + 8);
        *v11 = 0;
      }
      heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v11);
      v10 = *(uint64_t **)v9;
      *(_QWORD *)(*(_QWORD *)v9 + 8) = 0;
    }
    if (*v10)
    {
      heap_Free(*(_QWORD **)(*a1 + 8), *v10);
      v10 = *(uint64_t **)v9;
      **(_QWORD **)v9 = 0;
    }
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v10);
    *(_QWORD *)v9 = 0;
  }
  heap_Free(*(_QWORD **)(*a1 + 8), v9);
  a1[21] = 0;
  return log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer : loc ObjClose End (%x)", v12, v13, v14, 0);
}

uint64_t tokenizer_ObjClose(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  if (!a1[21])
    return TOKENTNERROR(8);
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer : ObjClose Begin", a6, a7, a8, v20);
  tokenizer_loc_ObjClose_0(a1, v9, v10, v11, v12, v13, v14, v15);
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer : ObjOpen End (%x)", v16, v17, v18, 0);
  return 0;
}

uint64_t textnormalizer_DoDepes(uint64_t a1, uint64_t a2, unsigned int a3, int a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  unsigned __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  _BYTE *v31;
  unsigned int v32;
  int i;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned __int8 *v39;
  unsigned __int16 v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int16 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  int v66;
  int v67;
  unsigned __int16 v68;
  unsigned __int16 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  char *v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  char *v79;
  _BOOL4 v80;
  unsigned __int16 v81;
  unsigned __int16 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _WORD *v91;
  unint64_t v92;
  unsigned int v94;
  unsigned __int16 v95;
  uint64_t v96;
  _DWORD *v97;
  uint64_t v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  _BYTE *v102;
  _WORD __n[8];
  unsigned __int16 v104;
  char *v105;
  unsigned __int16 v106;

  v9 = a5;
  v106 = 0;
  v105 = 0;
  v104 = 0;
  *(_QWORD *)&__n[1] = 0;
  __n[0] = 0;
  v102 = 0;
  *a5 = 0;
  if (*(_DWORD *)(a1 + 548) == 1)
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"_%s(%s)", a6, a7, a8, a2);
  v14 = *(_QWORD *)(a1 + 320);
  v15 = *(const char **)v14;
  if (!*(_QWORD *)v14 || !strcmp(*(const char **)v14, "NULL") || !*v15)
  {
    v34 = add2StringV2((uint64_t *)a1, *(_QWORD *)(v14 + 8), &byte_1DEBD87CE);
    if ((v34 & 0x80000000) != 0)
      return v34;
    goto LABEL_101;
  }
  v99 = a3;
  v100 = a4;
  if (*(_DWORD *)(a1 + 548) == 1)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"DEPES IN (%s)(running len=%d)", v16, v17, v18, (uint64_t)v15);
    v15 = **(const char ***)(a1 + 320);
  }
  v19 = strlen(v15);
  v20 = Utf8_LengthInUtf8chars((unint64_t)v15, v19);
  v21 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 112) + 120))(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), 0, **(_QWORD **)(a1 + 320), v19);
  if ((v21 & 0x80000000) != 0)
  {
    v34 = v21;
    v35 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v36 = *(_QWORD *)(a1 + 184);
    v37 = 24010;
  }
  else
  {
    v26 = growStrRes((uint64_t *)a1, a1 + 488, v19);
    if ((v26 & 0x80000000) != 0)
    {
      v34 = v26;
      goto LABEL_101;
    }
    v97 = v9;
    v98 = a6;
    v30 = **(unsigned __int8 ***)(a1 + 320);
    v31 = *(_BYTE **)(a1 + 488);
    if (v19)
      bzero(*(void **)(a1 + 488), v19);
    v95 = v20;
    if (utf8_strchr(g_szSpace_2, v30))
    {
      v32 = 0;
      i = 0;
    }
    else
    {
      i = 1;
      *v31 = 1;
      v32 = utf8_determineUTF8CharLength(*v30);
      v38 = (unsigned __int16)v32;
      if ((unsigned __int16)v32 < v19)
      {
        v39 = &v30[(unsigned __int16)v32];
        for (i = 1; !utf8_strchr(g_szSpace_2, v39); v39 = &v30[v38])
        {
          v40 = utf8_determineUTF8CharLength(*v39);
          v32 = v38 + v40;
          ++i;
          v38 = (unsigned __int16)(v38 + v40);
          if (v38 >= v19)
            break;
        }
      }
    }
    if ((unsigned __int16)v32 < v19)
    {
      while (1)
      {
        v41 = &v30[(unsigned __int16)v32];
        if (!utf8_strchr(g_szSpace_2, v41))
          break;
        v32 += utf8_determineUTF8CharLength(*v41);
        ++i;
        v42 = v32;
        if ((unsigned __int16)v32 >= v19)
        {
LABEL_29:
          v43 = (unsigned __int16)v42;
          while (v43 < v19 && !utf8_strchr(g_szSpace_2, &v30[(unsigned __int16)v42]))
          {
            v42 += utf8_determineUTF8CharLength(v30[(unsigned __int16)v42]);
            v43 = (unsigned __int16)v42;
            ++i;
          }
          v32 = v42;
          if ((unsigned __int16)v42 >= v19)
            goto LABEL_34;
        }
      }
      v31[(unsigned __int16)i] = 1;
      v42 = v32 + utf8_determineUTF8CharLength(*v41);
      ++i;
      goto LABEL_29;
    }
LABEL_34:
    v44 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 112) + 88))(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 488), v95);
    if ((v44 & 0x80000000) != 0)
    {
      v34 = v44;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24011, 0, v45, v46, v47, v48, v94);
      v9 = v97;
      goto LABEL_101;
    }
    v49 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 112) + 80))(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), a2 + 1);
    v9 = v97;
    if ((v49 & 0x80000000) != 0)
    {
      v34 = v49;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24012, "%s%s", v50, v51, v52, v53, "functionName");
      goto LABEL_101;
    }
    v54 = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE **, unsigned __int16 *))(*(_QWORD *)(a1 + 112) + 96))(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), &v102, &v106);
    if ((v54 & 0x80000000) != 0)
    {
      v34 = v54;
      v35 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      v36 = *(_QWORD *)(a1 + 184);
      v37 = 24013;
    }
    else
    {
      v55 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char **, unsigned __int16 *))(*(_QWORD *)(a1 + 112)
                                                                                           + 128))(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), 0, &v105, &v104);
      if ((v55 & 0x80000000) != 0)
      {
        v34 = v55;
        v35 = *(_QWORD *)(*(_QWORD *)a1 + 32);
        v36 = *(_QWORD *)(a1 + 184);
        v37 = 24014;
      }
      else
      {
        v105[v104] = 0;
        v59 = Utf8_LengthInUtf8chars((unint64_t)v105, v104);
        if (*(_DWORD *)(a1 + 548) == 1)
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"DEPES Layer 0 OUT strsize(%d bytes, %d chars) -> (%s)", v56, v57, v58, v104);
        v60 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _WORD *, _WORD *))(*(_QWORD *)(a1 + 112) + 128))(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), 1, &__n[1], __n);
        if ((v60 & 0x80000000) == 0)
        {
          *(_BYTE *)(*(_QWORD *)&__n[1] + __n[0]) = 0;
          if (*(_DWORD *)(a1 + 548) == 1)
            log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"DEPES layer 1 OUT strsize(%d bytes) -> (%s)", v23, v24, v25, __n[0]);
          v61 = (unsigned __int16)(__n[0] - v59);
          if (__n[0] < v59)
            v61 = 0;
          if (__n[0] <= v104)
            v62 = v104;
          else
            v62 = __n[0];
          v63 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), v62 + v61 + 1);
          if (!v63)
            return 2383421450;
          v64 = v63;
          v65 = strncpy(v63, *(const char **)&__n[1], __n[0]);
          v65[__n[0]] = 0;
          v66 = v104;
          if (v104 != __n[0])
          {
            if (v104)
            {
              v67 = 0;
              v68 = 0;
              do
              {
                v69 = utf8_determineUTF8CharLength(v105[v68]);
                if (v69 >= 2u)
                {
                  __n[0] = strlen(v64);
                  memmove(&v64[v69 + v67], &v64[v67 + 1], __n[0] - v67);
                  memset(&v64[v67 + 1], 126, v69 - 1);
                }
                v68 += v69;
                v67 = v68;
              }
              while (v68 < v104);
            }
            __n[0] = strlen(v64);
            log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"(adjusted) DEPES layer 1 OUT strsize(%d bytes) -> (%s)", v70, v71, v72, __n[0]);
            v66 = __n[0];
          }
          if (v66)
          {
            v73 = 0;
            v74 = 0;
            while (1)
            {
              v75 = &v64[(unsigned __int16)v74];
              if (*v75 == 126)
                *v75 = 32;
              if (utf8_strchr(g_szSpace_2, (unsigned __int8 *)&v64[(unsigned __int16)v74]))
                goto LABEL_61;
              v76 = *v75;
              if ((v76 | 2) != 0x4E)
                break;
LABEL_63:
              if ((v76 | 2) == 0x4E)
              {
                if ((_WORD)v74)
                {
                  v77 = 0;
                  do
                  {
                    v78 = (unsigned __int16)v77;
                    v77 += utf8_determineUTF8CharLength(v105[(unsigned __int16)v77]);
                  }
                  while ((unsigned __int16)v77 < (unsigned __int16)v74);
                  if (utf8_strchr(g_szSpace_2, (unsigned __int8 *)&v105[v78]))
                    goto LABEL_92;
                  if ((_WORD)v77)
                  {
                    while (1)
                    {
                      v79 = utf8_strchr(g_szSpace_2, (unsigned __int8 *)&v105[(unsigned __int16)v77]);
                      v80 = v79 == 0;
                      if (v79)
                        break;
                      if ((_WORD)v77 != 1)
                      {
                        v101 = (unsigned __int16)(v77 - 1);
                        utf8_GetPreviousValidUtf8Offset((uint64_t)v105, &v101);
                        v77 = v101;
                        if ((_WORD)v101)
                          continue;
                      }
                      v77 = 0;
                      break;
                    }
                  }
                  else
                  {
                    v77 = 0;
                    v80 = 1;
                  }
                  v82 = utf8_determineUTF8CharLength(v105[(unsigned __int16)v77]);
                  if (utf8_strchr(g_szSpace_2, (unsigned __int8 *)&v105[(unsigned __int16)v77])
                    && (v96 = v82 + (unint64_t)(unsigned __int16)v77, v96 < v104)
                    && !utf8_strchr(g_szSpace_2, (unsigned __int8 *)&v105[(unsigned __int16)v77 + v82]))
                  {
                    if (utf8_strchr(g_szSpace_2, (unsigned __int8 *)&v64[(unsigned __int16)v77 + v82]))
                    {
                      v64[v96] = *v75;
                      v74 = v77;
                    }
                    else
                    {
                      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"DEPES language layer problem, trying to overwrite [%d] \"%c\" when aligning with [%d] \"%c\"; ignore",
                        v83,
                        v84,
                        v85,
                        v96);
                    }
                  }
                  else
                  {
                    if (!v80
                      || v82 >= v104
                      || utf8_strchr(g_szSpace_2, (unsigned __int8 *)&v105[(unsigned __int16)v77 + v82]))
                    {
                      goto LABEL_92;
                    }
                    if (utf8_strchr(g_szSpace_2, (unsigned __int8 *)&v64[(unsigned __int16)v77]))
                      v64[(unsigned __int16)v77] = *v75;
                    else
                      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"DEPES language layer problem, trying to overwrite [%d] \"%c\" when aligning with [%d] \"%c\"; ignore",
                        v86,
                        v87,
                        v88,
                        0);
                  }
                  *v75 = 32;
                }
                else
                {
                  v74 = 0;
                }
              }
LABEL_92:
              v74 += utf8_determineUTF8CharLength(v64[(unsigned __int16)v74]);
              v73 = (unsigned __int16)v74;
              if ((unsigned __int16)v74 >= __n[0])
                goto LABEL_93;
            }
            v81 = utf8_determineUTF8CharLength(v76);
            if (v81)
              memset(&v64[v73], 32, v81);
LABEL_61:
            v76 = *v75;
            goto LABEL_63;
          }
LABEL_93:
          v89 = add2StringV2((uint64_t *)a1, *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8), v105);
          if ((v89 & 0x80000000) != 0)
          {
            v34 = v89;
          }
          else
          {
            v34 = add2StringV2((uint64_t *)a1, v98, v64);
            if ((v34 & 0x80000000) == 0)
            {
              v9 = v97;
              if (v100 == 1)
              {
                LOWORD(v101) = v99;
                textnormalizer_markercountlayer_GetWordBegPos(v102, v106, v105, *(_QWORD *)(a1 + 520), &v101, *(unsigned __int16 *)(a1 + 544));
                if ((unsigned __int16)v101 > v99)
                {
                  v90 = *(_QWORD *)(a1 + 320);
                  v91 = (_WORD *)(*(_QWORD *)(a1 + 520) + 2 * v99);
                  v92 = (unsigned __int16)v101 - (unint64_t)v99;
                  do
                  {
                    *v91++ += *(_WORD *)(v90 + 32);
                    --v92;
                  }
                  while (v92);
                }
              }
              heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v64);
              goto LABEL_101;
            }
          }
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v64);
          return v34;
        }
        v34 = v60;
        v35 = *(_QWORD *)(*(_QWORD *)a1 + 32);
        v36 = *(_QWORD *)(a1 + 184);
        v37 = 24058;
      }
    }
  }
  log_OutPublic(v35, v36, v37, 0, v22, v23, v24, v25, v94);
LABEL_101:
  if (*(_DWORD *)(a1 + 548) == 1)
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"TOKEN _%s_, MAP _%s_", v27, v28, v29, **(_QWORD **)(*(_QWORD *)(a1 + 320) + 8));
  *v9 = 1;
  return v34;
}

uint64_t textnormalizer_markercountlayer_GetWordBegPos(_BYTE *a1, int a2, const char *a3, uint64_t a4, _WORD *a5, unsigned int a6)
{
  uint64_t v10;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  unsigned __int16 v15;
  uint64_t v16;

  LODWORD(v10) = a2;
  result = TOK_COUNT_SP_WORDS(a3);
  if ((_DWORD)v10)
  {
    v13 = result;
    v14 = 0;
    v15 = 0;
    v10 = v10;
    do
    {
      v16 = (unsigned __int16)*a5;
      if (v16 >= a6 || v14 >= v13)
        break;
      if (*a1)
      {
        *(_WORD *)(a4 + 2 * v16) = v15;
        ++*a5;
        ++v14;
      }
      result = utf8_determineUTF8CharLength(a3[v15]);
      v15 += result;
      ++a1;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t blockedByBtok(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int16 *i;
  int v10;

  v8 = *(unsigned __int16 *)(a1 + 634);
  if (!*(_WORD *)(a1 + 634))
    return 0;
  for (i = (__int16 *)(*(_QWORD *)(a1 + 624) + 2); ; i += 2)
  {
    v10 = *(i - 1);
    if (v10 <= a2 && *i >= a3)
      break;
    if (v10 <= a3 && *i >= a3 || v10 <= a2 && *i >= a2)
      break;
    if (!--v8)
      return 0;
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 4, 0, (uint64_t)"match %d,%d blocked by btok %d,%d", a6, a7, a8, a2);
  return 1;
}

uint64_t clearBTokMatchList(uint64_t a1)
{
  if (*(_WORD *)(a1 + 634))
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 624));
    *(_DWORD *)(a1 + 632) = 0;
  }
  return 0;
}

uint64_t textnormalizer_DoExpansionActions(uint64_t *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned __int16 v16;
  uint64_t v17;
  const char **v18;
  const char **v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned __int16 v24;
  int v25;
  uint64_t v26;
  unsigned __int16 *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned __int16 v32;
  int v33;
  signed __int16 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int16 v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  _BOOL4 v60;
  unint64_t v61;
  int v62;
  unsigned __int16 v63;
  unsigned int i;
  uint64_t v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  BOOL v70;
  unsigned int v71;
  BOOL v72;
  unint64_t v73;
  _WORD *v74;
  unsigned int v75;
  uint64_t v76;
  _WORD *v77;
  unint64_t v78;
  unsigned __int16 *v79;
  unsigned __int16 *v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  unsigned __int16 v88;
  unsigned __int16 CurrentUtf8Offset;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unsigned int j;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  unsigned __int16 v107;
  unsigned __int8 v108;
  uint64_t v109;
  unsigned __int8 *v110;
  unsigned int v111;
  char *v112;
  unsigned __int16 v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  size_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  _BOOL4 v142;
  uint64_t *v143;
  char **v144;
  char **v146;
  __int16 v147;
  int **v148;
  uint64_t v149;
  unsigned __int16 *v150;
  char *v151;

  v150 = 0;
  v151 = 0;
  v149 = 0;
  v148 = 0;
  v147 = 0;
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"textnormalizer : DoExpansions Begin", a6, a7, a8, v138);
  if (!a1[38])
    return TOKENTNERROR(7);
  if (*((_DWORD *)a1 + 137) == 1)
    dumpTokenRecordsInLingDB(a1, (uint64_t)"At Start of DoExpansions", 0, v9, v10, v11, v12, v13);
  if (!*((_WORD *)a1 + 156))
  {
    v17 = 0;
    goto LABEL_195;
  }
  v14 = 0;
  LOWORD(v15) = 0;
  v16 = 0;
  v17 = 0;
  v18 = (const char **)(a1 + 49);
  v19 = (const char **)(a1 + 51);
  v146 = (char **)(a1 + 55);
  v143 = a1 + 53;
  v144 = (char **)(a1 + 57);
  while (1)
  {
    FERuntimeData_GetKeyAtPos((uint64_t)a1, v16, &v150, &v149);
    if (!v150 || v14 != (__int16)*v150)
    {
      ++v16;
      goto LABEL_182;
    }
    FEData_blockData_getTokenAndExpansionData(a1, *(_QWORD *)(v149 + 88), &v151, &v147, &v148, v11, v12, v13);
    v20 = *v150;
    v21 = (__int16)v150[1];
    if (v20 >= v21)
    {
      v22 = *v150;
    }
    else
    {
      while (*(_BYTE *)(a1[38] + (unsigned __int16)v20) == 32)
      {
        v22 = (unsigned __int16)++v20;
        if ((unsigned __int16)v20 >= v21)
          goto LABEL_15;
      }
      v22 = (unsigned __int16)v20;
    }
LABEL_15:
    if (v22 >= v21)
    {
      v24 = 1;
    }
    else
    {
      v23 = a1[38];
      v24 = 1;
      do
      {
        if (*(_BYTE *)(v23 + (unsigned __int16)v20) == 32)
        {
          ++v24;
          do
            v25 = (unsigned __int16)++v20;
          while ((unsigned __int16)v20 < v21 && *(_BYTE *)(v23 + (unsigned __int16)v20) == 32);
        }
        else
        {
          v25 = (unsigned __int16)++v20;
        }
      }
      while (v25 < v21);
    }
    resetAlignmentData((uint64_t)a1);
    v27 = v150;
    v28 = *v150;
    v29 = (__int16)v150[1];
    if (v28 >= v29)
    {
      v30 = *v150;
    }
    else
    {
      while (*(_BYTE *)(a1[38] + (unsigned __int16)v28) == 32)
      {
        v30 = (unsigned __int16)++v28;
        if ((unsigned __int16)v28 >= v29)
          goto LABEL_32;
      }
      v30 = (unsigned __int16)v28;
    }
LABEL_32:
    v31 = a1[67];
    *(_WORD *)(v31 + 2 * *((unsigned __int16 *)a1 + 272)) = v28;
    v32 = *((_WORD *)a1 + 272) + 1;
    *((_WORD *)a1 + 272) = v32;
    v33 = (__int16)v27[1];
    if (v30 < v33)
    {
      v34 = v27[1];
      v35 = a1[38];
      do
      {
        if (*(_BYTE *)(v35 + (unsigned __int16)v28) == 32)
        {
          while (v33 > (unsigned __int16)v28 && *(_BYTE *)(v35 + (unsigned __int16)v28) == 32)
            ++v28;
          *(_WORD *)(v31 + 2 * v32) = v28;
          v32 = *((_WORD *)a1 + 272) + 1;
          *((_WORD *)a1 + 272) = v32;
          v34 = v27[1];
        }
        ++v28;
        v33 = v34;
      }
      while (v34 > (int)(unsigned __int16)v28);
    }
    if (!v148)
    {
      v47 = *(_QWORD *)(*a1 + 32);
      v48 = a1[23];
      v137 = 24015;
      goto LABEL_193;
    }
    if (*(_DWORD *)(*(_QWORD *)(v149 + 88) + 8) == 1)
    {
      v36 = addBTokMatchToList((uint64_t)a1, v27);
      if ((v36 & 0x80000000) != 0)
        goto LABEL_194;
    }
    if (*((_DWORD *)a1 + 137) == 1)
    {
      strncpy((char *)a1[69], (const char *)(a1[38] + (__int16)*v150), (unsigned __int16)(v150[1] - *v150));
      *(_BYTE *)(a1[69] - (__int16)*v150 + (__int16)v150[1]) = 0;
      v40 = *(_QWORD *)(*a1 + 32);
      v41 = a1[23];
      if (*(_DWORD *)(*(_QWORD *)(v149 + 88) + 8) == 1)
        log_OutText(v40, v41, 5, 0, (uint64_t)"DoExpansions : applying method %s with arg %s for btok %3d,%3d %-15s \"%s\" (%d input words)", v37, v38, v39, (uint64_t)v148[6]);
      else
        log_OutText(v40, v41, 5, 0, (uint64_t)"DoExpansions : applying expansion for token %3d,%3d %-15s \"%s\" (%d input words)", v37, v38, v39, (__int16)*v150);
    }
    if (*((_WORD *)a1 + 272))
    {
      v42 = 0;
      v43 = a1[65];
      do
        *(_WORD *)(v43 + 2 * v42++) = 9999;
      while (v42 < *((unsigned __int16 *)a1 + 272));
    }
    *((_WORD *)a1 + 201) = 0;
    *(_BYTE *)a1[49] = 0;
    *((_WORD *)a1 + 209) = 0;
    *(_BYTE *)a1[51] = 0;
    *((_WORD *)a1 + 217) = 0;
    *(_BYTE *)a1[53] = 0;
    *((_WORD *)a1 + 225) = 0;
    *(_BYTE *)a1[55] = 0;
    *((_WORD *)a1 + 233) = 0;
    *(_BYTE *)a1[57] = 0;
    *((_WORD *)a1 + 241) = 0;
    *(_BYTE *)a1[59] = 0;
    v45 = v149;
    v44 = v150;
    v46 = a1[40];
    *(_QWORD *)(v46 + 16) = v150;
    *(_QWORD *)(v46 + 24) = v45;
    *(_WORD *)(v46 + 32) = 0;
    if (*(_DWORD *)(*(_QWORD *)(v45 + 88) + 8) == 1)
    {
      v36 = tn_nn_predictBTok(a1, (uint64_t)v148, (uint64_t)(a1 + 49), (uint64_t)(a1 + 51), v143, (uint64_t)v146, (uint64_t)v144, (char **)a1 + 59, *(_DWORD *)v44, HIWORD(*(_DWORD *)v44), (char *)a1[38]);
      if ((v36 & 0x80000000) != 0)
        goto LABEL_194;
      goto LABEL_163;
    }
    v36 = applyExpansion(a1, v148, (uint64_t)(a1 + 49), (uint64_t)(a1 + 51), (uint64_t)v146, a1[38], v12, v13);
    if ((v36 & 0x80000000) != 0)
      goto LABEL_194;
    v47 = *(_QWORD *)(*a1 + 32);
    v48 = a1[23];
    if (!*((_WORD *)a1 + 201))
      break;
    log_OutText(v47, v48, 5, 0, (uint64_t)"DoExpansions : expansion -> \"%s\"", v11, v12, v13, a1[49]);
    log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"               langmap   -> \"%s\"", v49, v50, v51, a1[51]);
    v52 = strlen((const char *)a1[49]);
    v53 = TOK_COUNT_SP_WORDS((const char *)a1[49]);
    v58 = v53;
    if (v53 == v24)
    {
      v59 = v24;
      v60 = v24 > 1u;
      if (v59 >= 2)
      {
        if (*((_WORD *)a1 + 272))
        {
          v141 = v53;
          v61 = 0;
          do
          {
            if (*(_WORD *)(a1[65] + 2 * v61) == 9999)
            {
              v62 = 0;
              if (v52)
              {
                do
                {
                  if (!utf8_strchr(g_szSpace_3, (unsigned __int8 *)&(*v18)[(unsigned __int16)v62]))
                    break;
                  v62 += utf8_determineUTF8CharLength((*v18)[(unsigned __int16)v62]);
                }
                while ((unsigned __int16)v62 < v52);
              }
              v63 = 0;
              if (v61 && v52 > (unsigned __int16)v62)
              {
                v63 = 0;
                do
                {
                  if (utf8_strchr(g_szSpace_3, (unsigned __int8 *)&(*v18)[(unsigned __int16)v62]))
                  {
                    if (v61 == ++v63)
                      break;
                    for (i = (*v18)[(unsigned __int16)v62];
                          ;
                          i = (*v18)[(unsigned __int16)v62])
                    {
                      v62 += utf8_determineUTF8CharLength(i);
                      if ((__int16)v150[1] <= (int)(unsigned __int16)v62
                        || !utf8_strchr(g_szSpace_3, (unsigned __int8 *)&(*v18)[(unsigned __int16)v62]))
                      {
                        break;
                      }
                    }
                  }
                  else
                  {
                    v62 += utf8_determineUTF8CharLength((*v18)[(unsigned __int16)v62]);
                  }
                }
                while (v52 > (unsigned __int16)v62);
              }
              v65 = a1[65];
              if (v61 != v63)
              {
                *(_WORD *)(v65 + 2 * v61) = 9999;
                log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24017, "%s%d", v54, v55, v56, v57, "position");
                v60 = 1;
                v66 = 1;
                v58 = v141;
                goto LABEL_81;
              }
              *(_WORD *)(v65 + 2 * v61) = v62;
              log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"guessing alignment position for word %d to be %d", v55, v56, v57, v61);
            }
            ++v61;
          }
          while (v61 < *((unsigned __int16 *)a1 + 272));
          v66 = 0;
          v60 = 1;
          v58 = v141;
          if (*((_WORD *)a1 + 272))
            goto LABEL_82;
        }
        else
        {
          v66 = 0;
          v60 = 1;
        }
        goto LABEL_97;
      }
      v66 = 0;
    }
    else
    {
      log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"mismatch in number of words; in:%d out: %d",
        v55,
        v56,
        v57,
        v24);
      v60 = v24 > 1u;
      v66 = 1;
    }
LABEL_81:
    if (*((_WORD *)a1 + 272))
    {
LABEL_82:
      v67 = 0;
      v68 = a1[65];
      do
      {
        v69 = *(unsigned __int16 *)(v68 + 2 * v67);
        v70 = v69 != 9999 && v52 >= v69;
        if (!v70
          || v67
          && ((v71 = *(unsigned __int16 *)(v68 + 2 * (v67 - 1)), v71 != 9999)
            ? (v72 = v69 >= v71)
            : (v72 = 1),
              !v72))
        {
          *(_WORD *)(v68 + 2 * v67) = 9999;
          v66 = 1;
        }
        ++v67;
        v73 = *((unsigned __int16 *)a1 + 272);
      }
      while (v67 < v73);
      goto LABEL_98;
    }
LABEL_97:
    LODWORD(v73) = 0;
LABEL_98:
    if (v66 == 1)
    {
      if (v58 < 2)
      {
        if ((_DWORD)v73)
        {
          v85 = 0;
          v86 = a1[65];
          do
            *(_WORD *)(v86 + 2 * v85++) = 0;
          while (v85 < *((unsigned __int16 *)a1 + 272));
        }
      }
      else if ((_DWORD)v73)
      {
        v74 = (_WORD *)a1[65];
        *v74 = 0;
        v75 = *((unsigned __int16 *)a1 + 272);
        if (v75 >= 2)
        {
          v76 = 0;
          do
          {
            v77 = &v74[v76];
            if (v77[1] == 9999)
            {
              v77[1] = v74[v76];
              v75 = *((unsigned __int16 *)a1 + 272);
            }
            v78 = v76 + 2;
            ++v76;
          }
          while (v78 < v75);
          if (v75 >= 2)
          {
            v79 = (unsigned __int16 *)a1[65];
            v80 = v79 + 1;
            v81 = *v79;
            v82 = v75 - 1;
            while (1)
            {
              v84 = *v80++;
              v83 = v84;
              if (v81 > v84)
                break;
              v81 = v83;
              if (!--v82)
                goto LABEL_114;
            }
            v135 = 0;
            do
              v79[v135++] = 0;
            while (v135 < *((unsigned __int16 *)a1 + 272));
          }
        }
      }
    }
LABEL_114:
    v87 = (char *)*v18;
    v88 = strlen(*v18);
    if (v88)
    {
      CurrentUtf8Offset = utf8_GetCurrentUtf8Offset((unint64_t)v87, v88 - 1);
      v87 = (char *)*v18;
    }
    else
    {
      CurrentUtf8Offset = v88;
    }
    if (utf8_strchr(g_szSpace_3, (unsigned __int8 *)v87))
    {
      v93 = 0;
      v15 = 0;
      do
      {
        v15 += utf8_determineUTF8CharLength((*v18)[v93]);
        v93 = (unsigned __int16)v15;
      }
      while (utf8_strchr(g_szSpace_3, (unsigned __int8 *)&(*v18)[(unsigned __int16)v15]));
    }
    else
    {
      LOWORD(v15) = 0;
    }
    for (;
          (unsigned __int16)v15 < CurrentUtf8Offset;
          CurrentUtf8Offset = utf8_GetCurrentUtf8Offset((unint64_t)*v18, CurrentUtf8Offset - 1))
    {
      if (!utf8_strchr(g_szSpace_3, (unsigned __int8 *)&(*v18)[CurrentUtf8Offset]))
        break;
      *(_BYTE *)(a1[49] + CurrentUtf8Offset) = 0;
      if (*((unsigned __int16 *)a1 + 209) > CurrentUtf8Offset)
        (*v19)[CurrentUtf8Offset] = 0;
    }
    v142 = v60;
    if (v60 && *((_WORD *)a1 + 272))
    {
      v94 = 0;
      do
      {
        v95 = a1[65];
        for (j = *(unsigned __int16 *)(v95 + 2 * v94); j < CurrentUtf8Offset; j = *(unsigned __int16 *)(v95 + 2 * v94))
        {
          if (!utf8_strchr(g_szSpace_3, (unsigned __int8 *)&(*v18)[(unsigned __int16)j]))
            break;
          *(_WORD *)(v95 + 2 * v94) += utf8_determineUTF8CharLength(*(unsigned __int8 *)(a1[49]
                                                                                       + *(unsigned __int16 *)(v95 + 2 * v94)));
          log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"alignment position for word %d adjusted to %d", v97, v98, v99, v94);
        }
        ++v94;
      }
      while (v94 < *((unsigned __int16 *)a1 + 272));
    }
    if ((_WORD)v15)
    {
      log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"DoExpansions : adjusted expansion -> \"%s\"", v90, v91, v92, a1[49]);
      if (v142)
      {
        if (*((_WORD *)a1 + 272))
        {
          v100 = 0;
          do
          {
            v101 = a1[65];
            if (*(_WORD *)(v101 + 2 * v100))
            {
              *(_WORD *)(v101 + 2 * v100) -= v15;
              log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"alignment position for word %d adjusted (by +%d) to %d", v90, v91, v92, v100);
            }
            ++v100;
          }
          while (v100 < *((unsigned __int16 *)a1 + 272));
        }
      }
    }
    if (*((unsigned __int16 *)a1 + 201) != *((unsigned __int16 *)a1 + 209))
    {
      log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"mismatch in langmap and expansion string (length is different: %d vs %d)", v90, v91, v92, *((unsigned __int16 *)a1 + 209));
      *((_WORD *)a1 + 209) = 0;
      *(_BYTE *)a1[51] = 0;
    }
    v105 = (unsigned __int16)strlen(*v19);
    if (!v105)
      goto LABEL_156;
    v106 = 0;
    v107 = 0;
    v108 = 32;
    do
    {
      v109 = v107;
      v110 = (unsigned __int8 *)&(*v19)[v107];
      v111 = *v110;
      if (v111 == v108 && (v112 = utf8_strchr(g_szSpace_3, v110), v111 = (*v19)[v109], !v112))
      {
        v113 = utf8_determineUTF8CharLength(v111);
        v114 = v113;
        if (v113)
        {
          v115 = v106;
          do
          {
            (*v19)[v115++] = 32;
            --v114;
          }
          while (v114);
        }
      }
      else if ((v111 | 2) == 0x4E)
      {
        v108 = v111;
      }
      v107 = v109 + utf8_determineUTF8CharLength((*v19)[v109]);
      v106 = v107;
    }
    while (v105 > v107);
    if (v108 == 32)
    {
LABEL_156:
      *((_WORD *)a1 + 209) = 0;
      *(_BYTE *)a1[51] = 0;
    }
    if (*((_WORD *)a1 + 209))
      v116 = *v19;
    else
      v116 = "(empty)";
    log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"sanitized langMap=\"%s\"", v102, v103, v104, (uint64_t)v116);
    if (*((_WORD *)a1 + 209))
    {
      v117 = strlen(*v19);
      if (v117 != strlen(*v18))
      {
        log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24061, "%s%s%s%s", v118, v119, v120, v121, "langmap:\"");
        *((_WORD *)a1 + 209) = 0;
        *(_BYTE *)a1[51] = 0;
      }
    }
LABEL_163:
    v122 = a1[49];
    if (*(_DWORD *)(*(_QWORD *)(v149 + 88) + 8) == 1)
    {
      if (*((_WORD *)a1 + 225))
        v123 = *v146;
      else
        v123 = 0;
      if (*((_WORD *)a1 + 233))
        v125 = *v144;
      else
        v125 = 0;
      v17 = saveExpansionInLDO((uint64_t)a1, (char *)*v143, v122, v123, v125, (char *)a1[59], (unsigned __int16)v15, v150);
      *((_WORD *)a1 + 217) = 0;
      *(_BYTE *)a1[53] = 0;
      *((_WORD *)a1 + 225) = 0;
      *(_BYTE *)a1[55] = 0;
      *((_WORD *)a1 + 233) = 0;
      *(_BYTE *)a1[57] = 0;
      *((_WORD *)a1 + 241) = 0;
      *(_BYTE *)a1[59] = 0;
    }
    else
    {
      if (*((_WORD *)a1 + 225))
        v124 = *v146;
      else
        v124 = 0;
      if (*((_WORD *)a1 + 233))
        v126 = *v144;
      else
        v126 = 0;
      v17 = saveExpansionInLDO((uint64_t)a1, v151, v122, v124, v126, 0, (unsigned __int16)v15, v150);
    }
    v131 = *(_QWORD *)(*a1 + 32);
    v132 = a1[23];
    if ((v17 & 0x80000000) != 0)
    {
      log_OutPublic(v131, v132, 24019, 0, v127, v128, v129, v130, v140);
      goto LABEL_195;
    }
    log_OutText(v131, v132, 5, 0, (uint64_t)"DoExpansions : created new LDO Label from %d to %d", v128, v129, v130, (__int16)*v150);
    if (*((_DWORD *)a1 + 137) == 1)
      dumpTokenRecordsInLingDB(a1, (uint64_t)"After saving expanded token as Label in LDO", 0, v133, v134, v11, v12, v13);
    v16 = v150[1];
    *a2 = v16;
LABEL_182:
    v150 = 0;
    v14 = v16;
    if (v16 >= *((unsigned __int16 *)a1 + 156))
      goto LABEL_195;
  }
  v137 = 24016;
LABEL_193:
  log_OutPublic(v47, v48, v137, 0, v26, v11, v12, v13, v139);
  v36 = TOKENTNERROR(266);
LABEL_194:
  v17 = v36;
LABEL_195:
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"textnormalizer : DoExpansions End (%x)", v11, v12, v13, v17);
  return v17;
}

uint64_t applyExpansion(uint64_t *a1, int **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v14;
  const char *v15;
  char *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  __int16 *v22;
  uint64_t v23;
  int v24;
  uint64_t v26;
  uint64_t inited;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  int v41;
  _QWORD *v42;
  void **p_b;
  unsigned int v44;
  uint64_t v45;
  unsigned __int16 v46;
  uint64_t v47;
  unsigned int v48;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  uint64_t v53;
  int v54;
  unsigned __int16 *v55;
  int v56;
  unsigned int v57;
  unsigned __int16 v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  void *__b;
  size_t __len;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t *, int *);

  v80 = 0;
  v81 = 0;
  v79 = 0;
  v77 = 0;
  v78 = 0;
  v75 = 0;
  v76 = 0;
  v73 = 0;
  v74 = 0;
  __b = 0;
  __len = 0;
  v69 = 0;
  v70 = 0;
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"textnormalizer : applyExpansion Begin", a6, a7, a8, v65);
  if (*((_DWORD *)a1 + 153) == 1)
  {
    v14 = (char *)a2[5];
    if (v14)
    {
      v15 = (const char *)a1[88];
      v16 = strstr(v14, v15);
      if (a6)
      {
        if (v16)
        {
          if ((v16[strlen(v15)] | 0x20) == 0x20)
          {
            v17 = (_QWORD *)a1[22];
            if (*((_WORD *)v17 + 8))
            {
              v18 = (uint64_t *)v17[1];
              if (v18)
              {
                v67 = a3;
                do
                {
                  v19 = a4;
                  LOBYTE(v20) = *((_BYTE *)v18 + 106);
                  if ((_BYTE)v20)
                  {
                    v21 = 0;
                    v22 = (__int16 *)v18 + 34;
                    do
                    {
                      v23 = *(v22 - 1);
                      v24 = (unsigned __int16)*v22;
                      if (v23 != -1 || v24 != 0xFFFF)
                      {
                        strncpy((char *)a1[69], (const char *)(a6 + v23), (unsigned __int16)(v24 - v23));
                        *(_BYTE *)(a1[69] - *(v22 - 1) + *v22) = 0;
                        v26 = add2StringV2(a1, a5, (char *)a1[69]);
                        if ((v26 & 0x80000000) != 0)
                          goto LABEL_90;
                        v20 = *((unsigned __int8 *)v18 + 106);
                        if ((_DWORD)v21 + 1 != v20)
                        {
                          v26 = add2StringV2(a1, a5, (char *)a1[87]);
                          if ((v26 & 0x80000000) != 0)
                            goto LABEL_90;
                          LOBYTE(v20) = *((_BYTE *)v18 + 106);
                        }
                      }
                      ++v21;
                      v22 += 2;
                    }
                    while (v21 < v20);
                  }
                  v18 = (uint64_t *)*v18;
                  a4 = v19;
                  a3 = v67;
                }
                while (v18);
              }
            }
          }
        }
      }
    }
  }
  v77 = 0;
  v78 = 0;
  v75 = 0;
  v76 = 0;
  v73 = 0;
  v74 = 0;
  __b = 0;
  __len = 0;
  v69 = 0;
  v70 = 0;
  inited = initStrRes((uint64_t)a1, (uint64_t)&v79);
  if ((inited & 0x80000000) == 0)
  {
    v26 = initStrRes((uint64_t)a1, (uint64_t)&v77);
    if ((v26 & 0x80000000) != 0)
      goto LABEL_90;
    v26 = initStrRes((uint64_t)a1, (uint64_t)&v69);
    if ((v26 & 0x80000000) != 0)
      goto LABEL_90;
    v26 = initStrRes((uint64_t)a1, (uint64_t)&v73);
    if ((v26 & 0x80000000) != 0)
      goto LABEL_90;
    v26 = initStrRes((uint64_t)a1, (uint64_t)&v75);
    if ((v26 & 0x80000000) != 0)
      goto LABEL_90;
    if (*((_BYTE *)a2 + 24))
    {
      v31 = 0;
      do
      {
        log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"doing subexpansion %d ...", v28, v29, v30, v31);
        v26 = applyExpansion(a1, *(_QWORD *)&a2[2][2 * v31], &v79, &v77, 0, 0);
        if ((v26 & 0x80000000) != 0)
          goto LABEL_90;
        if (WORD1(v80))
        {
          log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"after subexpansion %d str=\"%s\", langmap=\"%s\"", v28, v29, v30, v31);
          if (WORD1(v80))
          {
            if (!**a2)
              *(_WORD *)(a1[40] + 32) += strlen(v79);
            v26 = add2StringV3(a1, (uint64_t)&v73, (uint64_t)&v79);
            if ((v26 & 0x80000000) != 0)
              goto LABEL_90;
            v26 = add2StringV3(a1, (uint64_t)&v75, (uint64_t)&v77);
            if ((v26 & 0x80000000) != 0)
              goto LABEL_90;
            WORD1(v80) = 0;
            *v79 = 0;
            WORD1(v78) = 0;
            *v77 = 0;
          }
        }
      }
      while (++v31 < (unint64_t)*((unsigned __int8 *)a2 + 24));
    }
    clearStrRes((_QWORD *)*a1, (uint64_t)&v79);
    clearStrRes((_QWORD *)*a1, (uint64_t)&v77);
    clearStrRes((_QWORD *)*a1, (uint64_t)&v69);
    if (WORD1(v74) && (**a2 - 1) <= 2)
      log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"CALL function on expanded string (%s)", v32, v33, v34, v73);
    v39 = initStrRes((uint64_t)a1, (uint64_t)&__b);
    if ((v39 & 0x80000000) != 0)
      goto LABEL_91;
    v40 = *a2;
    v41 = **a2;
    if ((v41 - 1) < 2)
    {
      v68 = 0;
      FEFunctionMap_GetFunction((uint64_t)a1, 1u, (uint64_t)v40, &v81);
      v42 = (_QWORD *)a1[40];
      *v42 = a2[5];
      v42[1] = &__b;
      *((_WORD *)v42 + 17) = *((_WORD *)a2 + 4);
      v39 = v81(a1, &v68);
      if ((v39 & 0x80000000) != 0)
        goto LABEL_91;
      if (!v68)
        goto LABEL_88;
      v26 = add2StringV3(a1, a3, (uint64_t)&__b);
      if ((v26 & 0x80000000) == 0)
      {
        memset(__b, 32, WORD1(__len));
        p_b = &__b;
        goto LABEL_87;
      }
      goto LABEL_90;
    }
    if (v41 != 3)
      goto LABEL_88;
    v44 = *((unsigned __int8 *)a2 + 24);
    if (*((_BYTE *)a2 + 24))
    {
      v45 = 0;
      v46 = 9999;
      while (1)
      {
        v47 = *(_QWORD *)&a2[2][2 * v45];
        if (**(_DWORD **)v47 == 2)
        {
          v48 = *(unsigned __int16 *)(v47 + 8);
          v49 = (_QWORD *)a1[40];
          v50 = v49[3];
          if (v48 > *(unsigned __int8 *)(v50 + 82))
          {
            log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24008, "%s%d", v35, v36, v37, v38, "intVal");
            TOKENTNERROR(0);
            v50 = *(_QWORD *)(a1[40] + 24);
            v44 = *((unsigned __int8 *)a2 + 24);
LABEL_54:
            v51 = *(__int16 *)(v50 + 4 * (unsigned __int16)(v48 - 1) + 42);
            if (v51 < v46 && v51 != -1)
              v46 = v51;
            goto LABEL_59;
          }
          if (v48)
            goto LABEL_54;
          v46 = *(_WORD *)v49[2];
        }
LABEL_59:
        if (++v45 >= (unint64_t)v44)
          goto LABEL_63;
      }
    }
    v46 = 9999;
LABEL_63:
    v53 = *((unsigned __int16 *)a1 + 272);
    if (*((_WORD *)a1 + 272))
    {
      v54 = 0;
      v55 = (unsigned __int16 *)a1[67];
      do
      {
        v56 = *v55++;
        if (v56 == v46)
          v54 = 1;
        --v53;
      }
      while (v53);
      if (v54 == 1)
      {
        v57 = **(unsigned __int16 **)(a1[40] + 16);
        if (v57 < v46)
        {
          do
          {
            if (!utf8_strchr(g_szSpace_3, (unsigned __int8 *)(a1[38] + (unsigned __int16)v57)))
              break;
            v57 += utf8_determineUTF8CharLength(*(unsigned __int8 *)(a1[38] + (unsigned __int16)v57));
          }
          while ((unsigned __int16)v57 < v46);
        }
        if ((unsigned __int16)v57 < v46)
        {
          v58 = 0;
          do
          {
            v59 = (unsigned __int16)v57;
            if (utf8_strchr(g_szSpace_3, (unsigned __int8 *)(a1[38] + (unsigned __int16)v57)))
            {
              ++v58;
              if ((unsigned __int16)v57 < v46)
              {
                while (1)
                {
                  v59 = (unsigned __int16)v57;
                  if (!utf8_strchr(g_szSpace_3, (unsigned __int8 *)(a1[38] + (unsigned __int16)v57)))
                    break;
                  v57 += utf8_determineUTF8CharLength(*(unsigned __int8 *)(a1[38] + (unsigned __int16)v57));
                  if ((unsigned __int16)v57 >= v46)
                  {
                    v59 = (unsigned __int16)v57;
                    break;
                  }
                }
              }
            }
            v57 += utf8_determineUTF8CharLength(*(unsigned __int8 *)(a1[38] + v59));
          }
          while ((unsigned __int16)v57 < v46);
LABEL_83:
          v60 = (_QWORD *)a1[40];
          *v60 = v73;
          v60[1] = &__b;
          v68 = 0;
          v39 = textnormalizer_DoDepes((uint64_t)a1, (uint64_t)a2[6], v58, v54, &v68, (uint64_t)&v69, v37, v38);
          if ((v39 & 0x80000000) != 0)
            goto LABEL_91;
          if (!v68)
            goto LABEL_88;
          v26 = add2StringV3(a1, a3, (uint64_t)&__b);
          if ((v26 & 0x80000000) == 0)
          {
            p_b = (void **)&v69;
LABEL_87:
            v39 = add2StringV3(a1, a4, (uint64_t)p_b);
            if ((v39 & 0x80000000) == 0)
            {
LABEL_88:
              clearStrRes((_QWORD *)*a1, (uint64_t)&__b);
              if (!**a2)
              {
                add2StringV3(a1, a3, (uint64_t)&v73);
                add2StringV3(a1, a4, (uint64_t)&v75);
              }
            }
LABEL_91:
            clearStrRes((_QWORD *)*a1, (uint64_t)&v69);
            clearStrRes((_QWORD *)*a1, (uint64_t)&__b);
            clearStrRes((_QWORD *)*a1, (uint64_t)&v73);
            clearStrRes((_QWORD *)*a1, (uint64_t)&v75);
            clearStrRes((_QWORD *)*a1, (uint64_t)&v79);
            clearStrRes((_QWORD *)*a1, (uint64_t)&v77);
            log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"textnormalizer : applyExpansion End", v61, v62, v63, v66);
            return v39;
          }
LABEL_90:
          v39 = v26;
          goto LABEL_91;
        }
      }
    }
    else
    {
      v54 = 0;
    }
    v58 = 0;
    goto LABEL_83;
  }
  return inited;
}

uint64_t textnormalizer_ObjOpen(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t Map;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;

  v25 = 0;
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"textnormalizer : ObjOpen Begin", a6, a7, a8, v23);
  Map = FEFunctionMap_GetMap(a1, &v25);
  if ((Map & 0x80000000) != 0)
  {
LABEL_6:
    v21 = Map;
  }
  else
  {
    v13 = 0;
    v14 = 1;
    while (1)
    {
      v15 = v14;
      v16 = ssftmap_Insert(v25, (uint64_t)*(&off_1EA93F718 + 2 * v13), (uint64_t)*(&off_1EA93F718 + 2 * v13 + 1));
      if ((v16 & 0x80000000) != 0)
        break;
      v14 = 0;
      v13 = 1;
      if ((v15 & 1) == 0)
      {
        Map = FEFunctionMap_AddFunctionMap((uint64_t)a1, 1u, v25);
        goto LABEL_6;
      }
    }
    v21 = v16;
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24010, 0, v17, v18, v19, v20, v24);
    ssftmap_ObjClose(v25);
  }
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"textnormalizer : ObjOpen End (%x)", v10, v11, v12, v21);
  return v21;
}

uint64_t textnormalizer_ObjClose(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"textnormalizer : ObjClose Begin", a6, a7, a8, v13);
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"textnormalizer : ObjClose End (%x)", v9, v10, v11, 0);
  return 0;
}

uint64_t textnormalizer_DoMatch(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  uint64_t v10;
  int v11;
  unsigned __int16 *v12;
  int v13;
  uint64_t v14;
  _WORD *v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  _WORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unsigned __int8 v29;
  const char *v30;
  unsigned __int16 v31;
  int v32;
  int v33;
  unsigned __int8 *v34;
  BOOL v35;
  unsigned __int16 v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int i;
  unsigned __int16 PreviousUtf8Offset;
  uint64_t v41;
  int *v43;

  v8 = a2;
  *a2 = 0;
  if (*(_DWORD *)(a1 + 548) == 1)
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"_MATCH( %d) = ", a6, a7, a8, *(unsigned __int16 *)(*(_QWORD *)(a1 + 320) + 34));
  v10 = *(_QWORD *)(a1 + 320);
  v11 = *(unsigned __int16 *)(v10 + 34);
  if (!*(_WORD *)(v10 + 34))
  {
    v15 = *(_WORD **)(v10 + 24);
    if (v15[20])
    {
      if (!*v15)
      {
        v17 = 0;
LABEL_19:
        v27 = *(_QWORD *)(v10 + 8);
        v28 = (char *)(*(_QWORD *)(a1 + 504) + (unsigned __int16)v15[2 * v17 + 1]);
        goto LABEL_67;
      }
      v16 = 0;
      while ((unsigned __int16)v15[20] > ++v16)
      {
        v17 = v16;
        if (!v15[2 * v16])
          goto LABEL_19;
      }
    }
    v23 = add2StringV4((uint64_t *)a1, *(_QWORD *)(v10 + 8), **(unsigned __int16 **)(v10 + 16), *(_WORD *)(*(_QWORD *)(v10 + 16) + 2));
    goto LABEL_68;
  }
  v12 = *(unsigned __int16 **)(v10 + 24);
  if (*((unsigned __int8 *)v12 + 82) < (unsigned __int16)(v11 - 1))
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24008, "%s%d", a5, a6, a7, a8, "intVal");
    v13 = 0;
    v14 = 0;
LABEL_72:
    *v8 = v13;
    return v14;
  }
  v18 = (unsigned __int16)(v11 - 1);
  v19 = &v12[2 * v18];
  v21 = (__int16)v19[21];
  v20 = v19 + 21;
  if (v21 == -1 && (__int16)v12[2 * v18 + 22] == -1)
  {
    v27 = *(_QWORD *)(v10 + 8);
    v28 = &byte_1DEBD87CE;
LABEL_67:
    v23 = add2StringV2((uint64_t *)a1, v27, v28);
LABEL_68:
    v14 = v23;
    if ((v23 & 0x80000000) == 0)
      goto LABEL_69;
    return v14;
  }
  if (v12[20])
  {
    if (*v12 == v11)
    {
      v22 = 0;
LABEL_23:
      v14 = add2StringV2((uint64_t *)a1, *(_QWORD *)(v10 + 8), (char *)(*(_QWORD *)(a1 + 504) + v12[2 * v22 + 1]));
      if ((v14 & 0x80000000) == 0)
      {
        v43 = v8;
        v30 = (const char *)(*(_QWORD *)(a1 + 504)
                           + *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 24) + 4 * v22 + 2));
LABEL_27:
        v31 = strlen(v30);
        if (v31)
        {
          v32 = 0;
          while ((_WORD)v32)
          {
            if (utf8_strchr(g_szSpace_4, (unsigned __int8 *)&v30[(unsigned __int16)v32]))
            {
              if (v31 > (unsigned __int16)v32)
              {
                v33 = (unsigned __int16)v32;
                do
                {
                  v34 = (unsigned __int8 *)&v30[(unsigned __int16)v32];
                  if (utf8_strchr(g_szSpace_4, v34))
                    v35 = v33 + 1 >= v31;
                  else
                    v35 = 1;
                  if (v35)
                    break;
                  if (!utf8_strchr(g_szSpace_4, v34 + 1))
                    break;
                  v32 += utf8_determineUTF8CharLength(*v34);
                  v33 = (unsigned __int16)v32;
                }
                while (v31 > (unsigned __int16)v32);
              }
              goto LABEL_41;
            }
LABEL_64:
            v32 += utf8_determineUTF8CharLength(v30[(unsigned __int16)v32]);
            if ((unsigned __int16)v32 >= v31)
              goto LABEL_65;
          }
          v32 = 0;
LABEL_41:
          v36 = *v20 + v32;
          if (*(_WORD *)(a1 + 544))
          {
            v37 = 0;
            while (*(unsigned __int16 *)(*(_QWORD *)(a1 + 536) + v37) != v36)
            {
              v37 += 2;
              if (2 * *(unsigned __int16 *)(a1 + 544) == v37)
                goto LABEL_47;
            }
            *(_WORD *)(*(_QWORD *)(a1 + 520) + v37) = *(_WORD *)(*(_QWORD *)(a1 + 320) + 32) + v32;
          }
LABEL_47:
          if (v36
            && *(unsigned __int16 *)(a1 + 312) > v36
            && TOK_IS_ALPHANUM((unsigned __int8 *)(*(_QWORD *)(a1 + 304) + v36))
            && TOK_IS_PUNCT((unsigned __int8 *)(*(_QWORD *)(a1 + 304) + v36 - 1)))
          {
            v38 = *(_QWORD *)(a1 + 304);
            for (i = v36; ; i = PreviousUtf8Offset)
            {
              PreviousUtf8Offset = utf8_GetPreviousUtf8Offset(v38, i);
              if (!PreviousUtf8Offset
                || !TOK_IS_PUNCT((unsigned __int8 *)(*(_QWORD *)(a1 + 304) + PreviousUtf8Offset))
                || !TOK_IS_PUNCT((unsigned __int8 *)(*(_QWORD *)(a1 + 304) + PreviousUtf8Offset - 1)))
              {
                break;
              }
              v38 = *(_QWORD *)(a1 + 304);
            }
            if (utf8_strchr(g_szSpace_4, (unsigned __int8 *)(*(_QWORD *)(a1 + 304) + PreviousUtf8Offset)))
              PreviousUtf8Offset += utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(_QWORD *)(a1 + 304)
                                                                                    + PreviousUtf8Offset));
            if (*(_WORD *)(a1 + 544))
            {
              v41 = 0;
              while (*(unsigned __int16 *)(*(_QWORD *)(a1 + 536) + v41) != PreviousUtf8Offset)
              {
                v41 += 2;
                if (2 * *(unsigned __int16 *)(a1 + 544) == v41)
                  goto LABEL_64;
              }
              *(_WORD *)(*(_QWORD *)(a1 + 520) + v41) = *(_WORD *)(*(_QWORD *)(a1 + 320) + 32) + v32;
            }
          }
          goto LABEL_64;
        }
LABEL_65:
        v8 = v43;
LABEL_69:
        if (*(_DWORD *)(a1 + 548) == 1)
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"%s", v24, v25, v26, **(_QWORD **)(*(_QWORD *)(a1 + 320) + 8));
        v13 = 1;
        goto LABEL_72;
      }
      return v14;
    }
    v29 = 0;
    while (v12[20] > ++v29)
    {
      v22 = v29;
      if (v12[2 * v29] == v11)
        goto LABEL_23;
    }
  }
  strncpy(*(char **)(a1 + 552), (const char *)(*(_QWORD *)(a1 + 304) + **(__int16 **)(v10 + 16)), (unsigned __int16)(*(_WORD *)(*(_QWORD *)(v10 + 16) + 2) - **(_WORD **)(v10 + 16)));
  *(_BYTE *)(*(_QWORD *)(a1 + 552)
           - **(__int16 **)(*(_QWORD *)(a1 + 320) + 16)
           + *(__int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 16) + 2)) = 0;
  v30 = *(const char **)(a1 + 552);
  v14 = add2StringV4((uint64_t *)a1, *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8), (unsigned __int16)*v20, v12[2 * v18 + 22]);
  if ((v14 & 0x80000000) == 0)
  {
    v43 = v8;
    goto LABEL_27;
  }
  return v14;
}

uint64_t textnormalizer_DoString(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a2 = 0;
  if (*(_DWORD *)(a1 + 548) == 1)
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"_STRING_TTS( %s) = ", a6, a7, a8, **(_QWORD **)(a1 + 320));
  v13 = add2StringV2((uint64_t *)a1, *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8), **(char ***)(a1 + 320));
  if ((v13 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 548) == 1)
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"%s", v10, v11, v12, **(_QWORD **)(*(_QWORD *)(a1 + 320) + 8));
    *a2 = 1;
  }
  return v13;
}

uint64_t getDctStr(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unint64_t v7;
  int v8;
  uint64_t result;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned __int16 v12;
  unint64_t v13;
  unsigned __int16 *v14;
  char *v15;

  v3 = *(unsigned __int8 *)(a2 + 82);
  if (*(_BYTE *)(a2 + 82))
  {
    v7 = 0;
    v8 = 0;
    result = 0;
    v10 = (unsigned __int16 *)(a2 + 2);
    while (1)
    {
      v11 = a2 + 4 * v7;
      if (*(__int16 *)(v11 + 42) != -1 || *(__int16 *)(v11 + 44) != -1)
      {
        v12 = *(_WORD *)(a2 + 40);
        if (v12)
        {
          v13 = 0;
          v14 = v10;
          do
          {
            if (*(v14 - 1) - 1 == v8)
            {
              result = add2StringV2(a1, a3, (char *)(a1[63] + *v14));
              if ((result & 0x80000000) != 0)
                return result;
              v12 = *(_WORD *)(a2 + 40);
            }
            v14 += 2;
            ++v13;
          }
          while (v13 < v12);
          v3 = *(unsigned __int8 *)(a2 + 82);
        }
      }
      if (v8 + 1 != v3)
      {
        if (a1[87])
          v15 = (char *)a1[87];
        else
          v15 = "|";
        result = add2StringV2(a1, a3, v15);
        if ((result & 0x80000000) != 0)
          return result;
        v3 = *(unsigned __int8 *)(a2 + 82);
      }
      v8 = ++v7;
      if (v7 >= v3)
        return result;
    }
  }
  return 0;
}

uint64_t getRegexStr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v9;
  uint64_t result;
  __int16 *i;
  uint64_t v12;
  int v13;
  int v15;
  char *v16;
  BOOL v17;
  char *v18;

  v4 = *(unsigned __int8 *)(a2 + 82);
  if (*(_BYTE *)(a2 + 82))
  {
    v9 = 0;
    result = 0;
    for (i = (__int16 *)(a2 + 44); ; i += 2)
    {
      v12 = *(i - 1);
      v13 = (unsigned __int16)*i;
      if (v12 == -1 && v13 == 0xFFFF)
        goto LABEL_15;
      strncpy(*(char **)(a1 + 552), (const char *)(a4 + v12), (unsigned __int16)(v13 - v12));
      *(_BYTE *)(*(_QWORD *)(a1 + 552) - *(i - 1) + *i) = 0;
      result = add2StringV2((uint64_t *)a1, a3, *(char **)(a1 + 552));
      if ((result & 0x80000000) != 0)
        return result;
      v15 = *(_DWORD *)(a1 + 960);
      v4 = *(unsigned __int8 *)(a2 + 82);
      if (v15 == 1)
        break;
LABEL_16:
      if (v15)
        v17 = 1;
      else
        v17 = (_DWORD)v9 + 1 == v4;
      if (!v17)
      {
        if (*(_QWORD *)(a1 + 696))
          v18 = *(char **)(a1 + 696);
        else
          v18 = "|";
        result = add2StringV2((uint64_t *)a1, a3, v18);
        if ((result & 0x80000000) != 0)
          return result;
        v4 = *(unsigned __int8 *)(a2 + 82);
      }
      if (++v9 >= (unint64_t)v4)
        return result;
    }
    if ((_DWORD)v9 + 1 != v4)
    {
      if (*(_QWORD *)(a1 + 696))
        v16 = *(char **)(a1 + 696);
      else
        v16 = "|";
      result = add2StringV2((uint64_t *)a1, a3, v16);
      if ((result & 0x80000000) != 0)
        return result;
      v4 = *(unsigned __int8 *)(a2 + 82);
    }
LABEL_15:
    v15 = *(_DWORD *)(a1 + 960);
    goto LABEL_16;
  }
  return 0;
}

uint64_t tn_nn_predictBTok(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, char **a8, unsigned __int16 a9, unsigned __int16 a10, char *a11)
{
  uint64_t v18;
  const char *v19;
  uint64_t RegexStr;
  const char *v21;
  unsigned __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t Only;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  const char *v40;
  uint64_t v41;
  int v43[2];
  char *v44;

  *(_QWORD *)v43 = 0;
  v44 = 0;
  v18 = a1[22];
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"textnormalizer : predictBTokAndApplyExpansion Begin", a6, a7, (uint64_t)a8, v41);
  v19 = *(const char **)(a2 + 48);
  if (!strcmp(v19, "_NN"))
  {
    v21 = *(const char **)(a2 + 40);
    v22 = strlen(v21);
    v23 = v22;
    if (v22)
    {
      v24 = 0;
      while (v21[v24] == 32)
      {
        if (v22 == ++v24)
        {
          LOWORD(v24) = v22;
          break;
        }
      }
      v23 = (unsigned __int16)v24;
    }
    v25 = add2StringV2(a1, (uint64_t)a8, (char *)&v21[v23]);
    if ((v25 & 0x80000000) != 0)
      return v25;
    v26 = *a8;
    v27 = strchr(*a8, 32);
    if (v27)
    {
      *v27 = 0;
      v26 = *a8;
    }
    Only = ssftmap_FindReadOnly(a1[85], (uint64_t)v26, v43);
    if ((Only & 0x80000000) != 0)
    {
      RegexStr = Only;
      log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24069, "%s%s", v29, v30, v31, v32, "pattern");
      return RegexStr;
    }
    if (*((unsigned __int16 *)a1 + 365) >= *((unsigned __int16 *)a1 + 364))
    {
      log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"exceeded max NN calls per sentence %d, fallback to default prediction %s", v30, v31, v32, *((unsigned __int16 *)a1 + 364));
      v33 = *(char **)(*(_QWORD *)v43 + 16);
    }
    else
    {
      v25 = nn_tn_process(*a1, a1[23], (uint64_t)(a1 + 80), (uint64_t)*a8, *(uint64_t *)v43, a9, a10, a11, &v44);
      ++*((_WORD *)a1 + 365);
      if ((v25 & 0x80000000) != 0)
        return v25;
      v33 = v44;
    }
  }
  else
  {
    if (strcmp(v19, "_UNAMBIG"))
      return 2304778240;
    v33 = *(char **)(a2 + 40);
  }
  v25 = add2StringV2(a1, (uint64_t)a5, v33);
  if ((v25 & 0x80000000) != 0)
    return v25;
  if (a1[88])
    v34 = (char *)a1[88];
  else
    v34 = "LUA";
  if ((add2StringV2(a1, a3, v34) & 0x80000000) != 0)
    return 2304778240;
  RegexStr = add2StringV2(a1, a4, &byte_1DEBD87CE);
  if ((RegexStr & 0x80000000) == 0)
  {
    memset(*(void **)a4, 32, *(unsigned __int16 *)(a4 + 10));
    if (*(_WORD *)(v18 + 16) && (v38 = *(_QWORD **)(v18 + 8)) != 0)
    {
      while (1)
      {
        RegexStr = getRegexStr((uint64_t)a1, (uint64_t)(v38 + 3), a6, (uint64_t)a11);
        if ((RegexStr & 0x80000000) != 0)
          break;
        if (!*((_DWORD *)a1 + 240))
        {
          RegexStr = getDctStr(a1, (uint64_t)(v38 + 3), a7);
          if ((RegexStr & 0x80000000) != 0)
            break;
        }
        v38 = (_QWORD *)*v38;
        if (!v38)
          goto LABEL_35;
      }
    }
    else
    {
LABEL_35:
      if (*((_DWORD *)a1 + 240) == 1)
        v40 = "textnormalizer : predictBTokAndApplyExpansion End expansionFunction=%s regexStr=%s";
      else
        v40 = "textnormalizer : predictBTokAndApplyExpansion End expansionFunction=%s regexStr=%s dctmatchStr=%s";
      log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)v40, v35, v36, v37, *a5);
    }
  }
  return RegexStr;
}

uint64_t nn_tn_checkIfActive(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t BrokerString;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  char *v21;

  v20 = 0;
  v21 = 0;
  *a5 = 0;
  BrokerString = nn_tn_getBrokerString(a3, a4, &v21);
  if ((BrokerString & 0x80000000) != 0)
    return BrokerString;
  v10 = v21;
  if ((ssftriff_reader_ObjOpen(a1, a2, 2, v21, "FINN", 1, (uint64_t *)&v20) & 0x80000000) != 0)
  {
    v18 = 0;
    if (!v10)
      return v18;
LABEL_9:
    heap_Free(*(_QWORD **)(a3 + 8), (uint64_t)v10);
    return v18;
  }
  v18 = ssftriff_reader_ObjClose(v20, v11, v12, v13, v14, v15, v16, v17);
  if ((v18 & 0x80000000) == 0)
    *a5 = 1;
  if (v10)
    goto LABEL_9;
  return v18;
}

uint64_t nn_tn_getBrokerString(uint64_t a1, uint64_t a2, char **a3)
{
  uint64_t result;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  int v14[2];
  _OWORD v15[8];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v13 = &byte_1DEBD87CE;
  *(_QWORD *)v14 = 0;
  memset(v15, 0, sizeof(v15));
  result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"langcode", v14);
  if ((result & 0x80000000) == 0)
  {
    result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"fecfg", &v13);
    if ((result & 0x80000000) == 0)
    {
      __strcat_chk();
      __strcat_chk();
      __strcat_chk();
      __strcat_chk();
      v7 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 1024);
      *a3 = v7;
      if (v7)
      {
        return brokeraux_ComposeBrokerString(a1, (const char *)v15, 1, 1, *(char **)v14, 0, 0, v7, 0x400uLL);
      }
      else
      {
        log_OutPublic(*(_QWORD *)(a1 + 32), a2, 24048, 0, v8, v9, v10, v11, v12);
        return 2304778250;
      }
    }
  }
  return result;
}

uint64_t nn_tn_Load(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int *a11)
{
  uint64_t NumericFeatureValue;
  const char *v18;
  char *v19;
  int v20;
  const char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t BrokerString;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  unsigned int v81;
  unsigned int v82;
  uint64_t v84;
  char *v85;
  __int16 v86;
  unsigned __int8 v87;
  __int16 v88;
  char **v89;

  v84 = 0;
  v85 = 0;
  v86 = 0;
  v89 = 0;
  v88 = -1;
  v87 = 0;
  *a11 = 0;
  NumericFeatureValue = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(a7 + 96))(a9, a10, "fecfg", "nn_tn_modelType", &v89, &v88, &v87);
  if ((NumericFeatureValue & 0x80000000) != 0)
    return NumericFeatureValue;
  if (v88 == 1 && v89)
  {
    v18 = *v89;
    v19 = strchr(*v89, v87);
    if (v19)
    {
      *v19 = 0;
      v18 = *v89;
    }
    if (!strcmp(v18, "char"))
    {
      v20 = 0;
    }
    else
    {
      if (strcmp(v18, "word_and_char"))
        goto LABEL_11;
      v20 = 2;
    }
    *a11 = v20;
  }
LABEL_11:
  v89 = 0;
  v88 = -1;
  v87 = 0;
  a11[3] = 0;
  a11[6] = 0;
  if (*a11 == 1)
  {
    NumericFeatureValue = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(a7 + 96))(a9, a10, "fecfg", "nn_tn_wordFocusPatternProcessing", &v89, &v88, &v87);
  }
  else
  {
    if (*a11)
      goto LABEL_22;
    NumericFeatureValue = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(a7 + 96))(a9, a10, "fecfg", "nn_tn_charFocusPatternProcessing", &v89, &v88, &v87);
  }
  if ((NumericFeatureValue & 0x80000000) != 0)
    return NumericFeatureValue;
  if (v88 == 1 && v89)
  {
    v21 = *v89;
    v22 = strchr(*v89, v87);
    if (v22)
    {
      *v22 = 0;
      v21 = *v89;
    }
    if (!strcmp(v21, "Markup"))
    {
      if (*a11 == 1)
      {
        a11[6] = 1;
      }
      else if (!*a11)
      {
        a11[3] = 1;
      }
    }
    if (!strcmp(v21, "Embedded"))
    {
      if (*a11 == 1)
      {
        a11[6] = 2;
      }
      else if (!*a11)
      {
        a11[3] = 2;
      }
    }
  }
LABEL_22:
  NumericFeatureValue = getNumericFeatureValue(a7, a9, a10, (uint64_t)"nn_tn_maxNNCallsPerSent", (_WORD *)a11 + 44);
  if ((NumericFeatureValue & 0x80000000) != 0)
    return NumericFeatureValue;
  NumericFeatureValue = getNumericFeatureValue(a7, a9, a10, (uint64_t)"nn_tn_charContextWindow", (_WORD *)a11 + 2);
  if ((NumericFeatureValue & 0x80000000) != 0)
    return NumericFeatureValue;
  NumericFeatureValue = getNumericFeatureValue(a7, a9, a10, (uint64_t)"nn_tn_wordContextWindow", (_WORD *)a11 + 3);
  if ((NumericFeatureValue & 0x80000000) != 0)
    return NumericFeatureValue;
  NumericFeatureValue = getNumericFeatureValue(a7, a9, a10, (uint64_t)"nn_tn_charEmbeddingDimension", (_WORD *)a11 + 4);
  if ((NumericFeatureValue & 0x80000000) != 0)
    return NumericFeatureValue;
  NumericFeatureValue = getNumericFeatureValue(a7, a9, a10, (uint64_t)"nn_tn_wordEmbeddingDimension", (_WORD *)a11 + 5);
  if ((NumericFeatureValue & 0x80000000) != 0)
    return NumericFeatureValue;
  NumericFeatureValue = getNumericFeatureValue(a7, a9, a10, (uint64_t)"nn_tn_max_x_len", (_WORD *)a11 + 14);
  if ((NumericFeatureValue & 0x80000000) != 0)
    return NumericFeatureValue;
  NumericFeatureValue = getNumericFeatureValue(a7, a9, a10, (uint64_t)"nn_tn_Y_dict_size", (_WORD *)a11 + 15);
  if ((NumericFeatureValue & 0x80000000) != 0)
    return NumericFeatureValue;
  NumericFeatureValue = getNumericFeatureValue(a7, a9, a10, (uint64_t)"nn_tn_addPatternAsFeature", &v86);
  if ((NumericFeatureValue & 0x80000000) != 0)
    return NumericFeatureValue;
  NumericFeatureValue = getStringFeatureValue(a5, a6, a7, a9, a10, (uint64_t)"nn_tn_contextPaddingChar", (char **)a11 + 2);
  if ((NumericFeatureValue & 0x80000000) != 0)
    return NumericFeatureValue;
  if (v86 == 1)
    a11[8] = 1;
  NumericFeatureValue = getStringFeatureValue(a5, a6, a7, a9, a10, (uint64_t)"nn_tn_regexSubmatchSeparator", (char **)a11 + 7);
  if ((NumericFeatureValue & 0x80000000) != 0)
    return NumericFeatureValue;
  NumericFeatureValue = getStringFeatureValue(a5, a6, a7, a9, a10, (uint64_t)"nn_tn_expansionProxyString", (char **)a11 + 8);
  if ((NumericFeatureValue & 0x80000000) != 0)
    return NumericFeatureValue;
  NumericFeatureValue = setModelPredictions(a5, a6, a7, a9, a10, (uint64_t)a11);
  if ((NumericFeatureValue & 0x80000000) != 0)
    return NumericFeatureValue;
  v26 = a5;
  log_OutText(*(_QWORD *)(a5 + 32), a6, 5, 0, (uint64_t)"modelType %d", v23, v24, v25, *a11);
  log_OutText(*(_QWORD *)(a5 + 32), a6, 5, 0, (uint64_t)"charContextWindow %d", v27, v28, v29, *((unsigned __int16 *)a11 + 2));
  log_OutText(*(_QWORD *)(a5 + 32), a6, 5, 0, (uint64_t)"wordContextWindow %d", v30, v31, v32, *((unsigned __int16 *)a11 + 3));
  log_OutText(*(_QWORD *)(a5 + 32), a6, 5, 0, (uint64_t)"charEmbeddingDimension %d", v33, v34, v35, *((unsigned __int16 *)a11 + 4));
  log_OutText(*(_QWORD *)(a5 + 32), a6, 5, 0, (uint64_t)"wordEmbeddingDimension %d", v36, v37, v38, *((unsigned __int16 *)a11 + 5));
  log_OutText(*(_QWORD *)(a5 + 32), a6, 5, 0, (uint64_t)"charFocusType %d", v39, v40, v41, a11[3]);
  log_OutText(*(_QWORD *)(a5 + 32), a6, 5, 0, (uint64_t)"wordFocusType %d", v42, v43, v44, a11[6]);
  log_OutText(*(_QWORD *)(a5 + 32), a6, 5, 0, (uint64_t)"addPatternAsFeature %d", v45, v46, v47, a11[8]);
  log_OutText(*(_QWORD *)(a5 + 32), a6, 5, 0, (uint64_t)"max_x_len %d", v48, v49, v50, *((unsigned __int16 *)a11 + 14));
  log_OutText(*(_QWORD *)(a5 + 32), a6, 5, 0, (uint64_t)"expansionProxyString %s", v51, v52, v53, *((_QWORD *)a11 + 8));
  log_OutText(*(_QWORD *)(a5 + 32), a6, 5, 0, (uint64_t)"regexSubmatchSeparator %s", v54, v55, v56, *((_QWORD *)a11 + 7));
  v57 = a11[8];
  *((_WORD *)a11 + 18) = v57 == 1;
  if (*a11 == 1)
  {
    v58 = a11[6];
  }
  else
  {
    if (*a11)
      goto LABEL_53;
    v58 = a11[3];
  }
  if (v58 == 2)
  {
    if (v57 == 1)
      v59 = 2;
    else
      v59 = 1;
    *((_WORD *)a11 + 18) = v59;
  }
LABEL_53:
  NumericFeatureValue = nn_word_lkp_GetInterface(1u, (_QWORD *)a11 + 16);
  if ((NumericFeatureValue & 0x80000000) != 0)
    return NumericFeatureValue;
  *((_QWORD *)a11 + 17) = safeh_GetNullHandle();
  *((_QWORD *)a11 + 18) = v60;
  *((_QWORD *)a11 + 19) = safeh_GetNullHandle();
  *((_QWORD *)a11 + 20) = v61;
  NumericFeatureValue = (*(uint64_t (**)(_QWORD, _QWORD, const char *, _WORD *, uint64_t))(*((_QWORD *)a11 + 16)
                                                                                                  + 16))(*((_QWORD *)a11 + 17), *((_QWORD *)a11 + 18), "char", a1, a2);
  if ((NumericFeatureValue & 0x80000000) != 0)
    return NumericFeatureValue;
  NumericFeatureValue = (*(uint64_t (**)(_QWORD, _QWORD, unsigned int *))(*((_QWORD *)a11 + 16) + 40))(*((_QWORD *)a11 + 19), *((_QWORD *)a11 + 20), (unsigned int *)a11 + 42);
  if ((NumericFeatureValue & 0x80000000) != 0)
    return NumericFeatureValue;
  log_OutText(*(_QWORD *)(a5 + 32), a6, 5, 0, (uint64_t)"word2vec length %d", v62, v63, v64, a11[42]);
  v65 = heap_Alloc(*(_QWORD *)(a5 + 8), 4 * a11[42]);
  *((_QWORD *)a11 + 22) = v65;
  if (v65)
  {
    BrokerString = nn_tn_getBrokerString(a5, a6, &v85);
    v71 = v85;
    if ((BrokerString & 0x80000000) != 0)
    {
      v79 = BrokerString;
    }
    else
    {
      v72 = fi_init(a1, a2, a3, a4, &v84, 0, (uint64_t)v85, (uint64_t)"FINN", 1, 0);
      if ((v72 & 0x80000000) != 0)
      {
        v79 = 2304778240;
        log_OutPublic(*(_QWORD *)(a5 + 32), a6, 24063, 0, v73, v74, v75, v76, v82);
      }
      else
      {
        v77 = *(_DWORD *)(*(_QWORD *)v84 + 56);
        if (*(_DWORD *)(*(_QWORD *)v84 + 52) == 2
          && v77 == *((unsigned __int16 *)a11 + 14)
          && (v78 = *(_DWORD *)(*(_QWORD *)v84 + 60), v78 == a11[42] + *((unsigned __int16 *)a11 + 18)))
        {
          v79 = v72;
          *((_QWORD *)a11 + 13) = v84;
          a11[28] = v78 * v77;
          *((_QWORD *)a11 + 23) = 0;
          *((_WORD *)a11 + 96) = 0;
          v26 = a5;
        }
        else
        {
          v26 = a5;
          log_OutPublic(*(_QWORD *)(a5 + 32), a6, 24067, "%s%d%d%s%d%d", v73, v74, v75, v76, "expected");
          v79 = 2304778265;
        }
      }
    }
    if (v71)
      heap_Free(*(_QWORD **)(v26 + 8), (uint64_t)v71);
  }
  else
  {
    log_OutPublic(*(_QWORD *)(a5 + 32), a6, 24048, 0, v66, v67, v68, v69, v81);
    return 2304778250;
  }
  return v79;
}

uint64_t nn_tn_UnLoad(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;

  v6 = *(_QWORD *)(a3 + 176);
  if (v6)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v6);
    *(_QWORD *)(a3 + 176) = 0;
  }
  v7 = *(_QWORD *)(a3 + 128);
  if (v7)
  {
    (*(void (**)(_QWORD, _QWORD))(v7 + 24))(*(_QWORD *)(a3 + 152), *(_QWORD *)(a3 + 160));
    *(_QWORD *)(a3 + 128) = 0;
  }
  v8 = *(_QWORD *)(a3 + 48);
  if (v8)
    ssftmap_ObjClose(v8);
  v9 = *(_QWORD *)(a3 + 40);
  if (v9)
    ssftmap_ObjClose(v9);
  v10 = *(_QWORD *)(a3 + 56);
  if (v10)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v10);
    *(_QWORD *)(a3 + 56) = 0;
  }
  v11 = *(_QWORD *)(a3 + 64);
  if (v11)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v11);
    *(_QWORD *)(a3 + 64) = 0;
  }
  v12 = *(_QWORD *)(a3 + 16);
  if (v12)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v12);
    *(_QWORD *)(a3 + 16) = 0;
  }
  v13 = *(_QWORD *)(a3 + 80);
  if (v13)
  {
    if (*(_WORD *)(a3 + 72))
    {
      v14 = 0;
      do
      {
        heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a3 + 80) + 8 * v14));
        *(_QWORD *)(*(_QWORD *)(a3 + 80) + 8 * v14++) = 0;
      }
      while (v14 < *(unsigned __int16 *)(a3 + 72));
      v13 = *(_QWORD *)(a3 + 80);
    }
    *(_WORD *)(a3 + 72) = 0;
    heap_Free(*(_QWORD **)(a1 + 8), v13);
    *(_QWORD *)(a3 + 80) = 0;
  }
  v15 = *(uint64_t **)(a3 + 104);
  if (v15)
    return fi_deinit(a1, a2, v15);
  else
    return 0;
}

uint64_t nn_tn_freeSentData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;

  v3 = *(_QWORD *)(a2 + 184);
  if (v3)
  {
    if (*(_WORD *)(a2 + 192))
    {
      v5 = 0;
      do
      {
        heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 184) + 8 * v5));
        *(_QWORD *)(*(_QWORD *)(a2 + 184) + 8 * v5++) = 0;
      }
      while (v5 < *(unsigned __int16 *)(a2 + 192));
      v3 = *(_QWORD *)(a2 + 184);
    }
    heap_Free(*(_QWORD **)(a1 + 8), v3);
    *(_QWORD *)(a2 + 184) = 0;
  }
  return 0;
}

uint64_t nn_tn_getCharContextString(uint64_t a1, uint64_t a2, char *__s, unsigned int a4, int a5, uint64_t *a6, unsigned __int16 *a7, unsigned int a8, int a9, const char *a10, unsigned __int16 a11, unsigned __int16 *a12, _WORD *a13, _WORD *a14)
{
  unsigned __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  __int16 v36;
  unsigned __int16 PreviousUtf8Offset;
  unsigned __int16 v38;
  uint64_t v39;
  unsigned __int16 v40;
  unint64_t v41;
  uint64_t v42;
  char **v43;
  char *v44;
  unsigned __int16 v45;
  int v46;
  signed __int16 v47;
  unsigned __int16 v48;
  int v49;
  char *v50;
  uint64_t v51;
  const char *v52;
  int v53;
  unsigned __int16 v54;
  int v55;
  char *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _WORD **v61;
  unint64_t v62;
  _WORD *v63;
  unsigned __int16 v64;
  __int16 v65;
  unsigned __int16 v66;
  int v67;
  uint64_t v68;
  size_t v69;
  int v70;
  char *v71;
  unsigned int v73;
  unsigned __int16 v74;
  uint64_t *v75;

  v20 = strlen(__s);
  *a12 = 0;
  v21 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, (8 * a11) | 1);
  if (!v21)
  {
    v51 = 2304778250;
    log_OutPublic(*(_QWORD *)(a1 + 32), a2, 24048, 0, v22, v23, v24, v25, v73);
    return v51;
  }
  v26 = v21;
  v74 = v20;
  v75 = a6;
  *a7 = a11;
  if (!a11)
  {
LABEL_6:
    v34 = a5 - a4;
    v35 = a8;
    if (v34 >= (unsigned __int16)(a11 - 2 * a8 - 2))
      v36 = a11 - 2 * a8 - 2;
    else
      v36 = v34;
    PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)__s, a4);
    v38 = 0;
    if (a8 && ((__int16)PreviousUtf8Offset & 0x80000000) == 0)
    {
      v38 = 0;
      v39 = PreviousUtf8Offset;
      do
      {
        Utf8_LengthInBytes((unsigned __int8 *)&__s[v39], 1);
        ++v38;
        if (!v39)
          break;
        v40 = utf8_GetPreviousUtf8Offset((uint64_t)__s, (unsigned __int16)v39);
        if ((v40 & 0x8000) != 0)
          break;
        v39 = v40;
      }
      while (a8 > v38);
    }
    LOWORD(v41) = v38;
    if (a10)
    {
      v42 = a8 >= a11 ? a11 : a8;
      LOWORD(v41) = a8;
      if ((_DWORD)v42)
      {
        v43 = (char **)v26;
        do
        {
          v44 = *v43++;
          strcpy(v44, a10);
          --v42;
        }
        while (v42);
        LOWORD(v41) = a8;
      }
    }
    v45 = v36 + a4;
    *a13 = v41;
    if (a9 == 1)
    {
      **(_BYTE **)(v26 + 8 * (unsigned __int16)v41) = -61;
      LOWORD(v41) = v41 + 1;
    }
    v46 = (unsigned __int16)(v36 + a4);
    if (v45 <= (__int16)a4 || a11 <= (unsigned __int16)v41)
    {
      v47 = a4;
    }
    else
    {
      v41 = (unsigned __int16)v41;
      v47 = a4;
      do
      {
        v48 = Utf8_LengthInBytes((unsigned __int8 *)&__s[v47], 1);
        v49 = strncmp(&__s[v47], " ", v48);
        v50 = *(char **)(v26 + 8 * v41);
        if (v49)
          strncpy(v50, &__s[v47], v48);
        else
          strcpy(v50, "<sp>");
        ++v41;
        v47 += v48;
      }
      while (v46 > v47 && v41 < a11);
      v35 = a8;
    }
    *a14 = v41;
    v52 = a10;
    if (a9 == 1)
    {
      **(_BYTE **)(v26 + 8 * (unsigned __int16)v41) = -60;
      LOWORD(v41) = v41 + 1;
    }
    if (a11 <= (unsigned __int16)v41)
    {
      v53 = 0;
    }
    else
    {
      v53 = 0;
      v41 = (unsigned __int16)v41;
      while (v74 > v47 && v35 > (unsigned __int16)v53)
      {
        v54 = Utf8_LengthInBytes((unsigned __int8 *)&__s[v47], 1);
        v55 = strncmp(&__s[v47], " ", v54);
        v56 = *(char **)(v26 + 8 * v41);
        if (v55)
          strncpy(v56, &__s[v47], v54);
        else
          strcpy(v56, "<sp>");
        v35 = a8;
        ++v41;
        v47 += v54;
        ++v53;
        v52 = a10;
        if (a11 == v41)
        {
          v57 = v75;
          *a12 = a11;
          goto LABEL_62;
        }
      }
    }
    v57 = v75;
    if (v52 && v35 > (unsigned __int16)v53 && a11 > (unsigned __int16)v41)
    {
      v41 = (unsigned __int16)v41;
      do
      {
        v60 = *(char **)(v26 + 8 * v41++);
        strcpy(v60, v52);
        if (v41 >= a11)
          break;
        ++v53;
      }
      while (v35 > (unsigned __int16)v53);
    }
    *a12 = v41;
    if (a11 > (unsigned __int16)v41)
    {
      v61 = (_WORD **)(v26 + 8 * (unsigned __int16)v41);
      v62 = a11 - (unint64_t)(unsigned __int16)v41;
      do
      {
        v63 = *v61++;
        *v63 = 11;
        --v62;
      }
      while (v62);
    }
LABEL_62:
    *v57 = v26;
    v64 = utf8_GetPreviousUtf8Offset((uint64_t)__s, a4);
    v51 = 0;
    if (v52)
      v65 = v35;
    else
      v65 = v38;
    if ((v64 & 0x8000) != 0)
      return v51;
    if (!v35)
      return v51;
    v66 = v65 - 1;
    if (a11 <= (unsigned __int16)(v65 - 1))
      return v51;
    v67 = 0;
    v68 = v64;
    while (1)
    {
      v69 = (unsigned __int16)Utf8_LengthInBytes((unsigned __int8 *)&__s[v68], 1);
      v70 = strncmp(&__s[v68], " ", v69);
      v71 = *(char **)(v26 + 8 * v66);
      if (v70)
      {
        strncpy(v71, &__s[v68], v69);
        if (v68)
          goto LABEL_71;
      }
      else
      {
        strcpy(v71, "<sp>");
        if (v68)
        {
LABEL_71:
          v68 = (unsigned __int16)utf8_GetPreviousUtf8Offset((uint64_t)__s, (unsigned __int16)v68);
          goto LABEL_74;
        }
      }
      v68 = 0xFFFFLL;
LABEL_74:
      v51 = 0;
      if ((v68 & 0x8000) == 0 && a8 > (unsigned __int16)++v67 && a11 > --v66)
        continue;
      return v51;
    }
  }
  v27 = 0;
  v28 = 8 * a11;
  while (1)
  {
    v29 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 5);
    *(_QWORD *)(v26 + v27) = v29;
    if (!v29)
      break;
    v27 += 8;
    if (v28 == v27)
      goto LABEL_6;
  }
  log_OutPublic(*(_QWORD *)(a1 + 32), a2, 24048, 0, v30, v31, v32, v33, v73);
  v58 = 0;
  do
  {
    v59 = *(_QWORD *)(v26 + v58);
    if (v59)
      heap_Free(*(_QWORD **)(a1 + 8), v59);
    v58 += 8;
  }
  while (v28 != v58);
  v51 = 2304778250;
  heap_Free(*(_QWORD **)(a1 + 8), v26);
  *v75 = 0;
  return v51;
}

uint64_t nn_tn_process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, int a7, char *__s, _QWORD *a9)
{
  uint64_t v11;
  uint64_t CharContextString;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  const char *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  uint64_t v57;
  unsigned __int16 v58;
  float v59;
  float *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unsigned __int16 v70;
  uint64_t v71;
  const char *v72;
  uint64_t ReadOnly;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float *v82;
  int v83;
  uint64_t v84;
  unsigned __int16 v85;
  uint64_t v86;

  v11 = 0;
  v86 = 0;
  v85 = 0;
  v84 = 0;
  v83 = 0;
  v82 = 0;
  if (*(_DWORD *)a3)
    goto LABEL_2;
  CharContextString = nn_tn_getCharContextString(a1, a2, __s, a6, a7, (uint64_t *)(a3 + 184), (unsigned __int16 *)(a3 + 192), *(unsigned __int16 *)(a3 + 4), *(_DWORD *)(a3 + 12), *(const char **)(a3 + 16), *(_WORD *)(a3 + 28), &v85, (_WORD *)&v83 + 1, &v83);
  if ((CharContextString & 0x80000000) != 0)
  {
    v11 = CharContextString;
    goto LABEL_2;
  }
  v81 = a5;
  log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"char context:", v17, v18, v19, 0);
  if (*(_WORD *)(a3 + 28))
  {
    v23 = 0;
    do
      log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"[%d] \"%s\"%s", v20, v21, v22, v23++);
    while (v23 < *(unsigned __int16 *)(a3 + 28));
  }
  v24 = (_DWORD *)heap_Alloc(*(_QWORD *)(a1 + 8), 4 * *(unsigned int *)(a3 + 112));
  v86 = (uint64_t)v24;
  if (v24)
  {
    v29 = v24;
    v80 = a4;
    v30 = *(_DWORD *)(a3 + 112);
    if (v30)
    {
      v31 = 0;
      do
        v24[(unsigned __int16)v31++] = 0;
      while (v30 > (unsigned __int16)v31);
    }
    v32 = v85;
    if (v85)
    {
      v33 = 0;
      v79 = HIWORD(v83);
      v78 = (unsigned __int16)v83;
      do
      {
        v34 = *(_DWORD *)(a3 + 168) + *(unsigned __int16 *)(a3 + 36);
        v35 = *(unsigned __int8 **)(*(_QWORD *)(a3 + 184) + 8 * v33);
        v36 = *v35;
        if (v36 == 195)
        {
          if (v34)
          {
            v39 = 0;
            v40 = v33 * v34;
            do
            {
              v29[v40] = -1082130432;
              ++v39;
              ++v40;
            }
            while (v34 > (unsigned __int16)v39);
          }
        }
        else if (v36 == 196)
        {
          if (v34)
          {
            v37 = 0;
            v38 = v33 * v34;
            do
            {
              v29[v38] = -1073741824;
              ++v37;
              ++v38;
            }
            while (v34 > (unsigned __int16)v37);
          }
        }
        else
        {
          v41 = *(const char **)(a3 + 16);
          if (v41 && !strcmp(*(const char **)(*(_QWORD *)(a3 + 184) + 8 * v33), v41))
          {
            if (v34)
            {
              v55 = 0;
              v56 = v33 * v34;
              do
              {
                v29[v56] = -1082130432;
                ++v55;
                ++v56;
              }
              while (v34 > (unsigned __int16)v55);
            }
          }
          else
          {
            if (v34)
            {
              v42 = 0;
              v43 = v33 * v34;
              do
              {
                v29[v43] = 0;
                ++v42;
                ++v43;
              }
              while (v34 > (unsigned __int16)v42);
            }
            v44 = (*(uint64_t (**)(_QWORD, _QWORD, unsigned __int8 *, _QWORD))(*(_QWORD *)(a3 + 128) + 56))(*(_QWORD *)(a3 + 152), *(_QWORD *)(a3 + 160), v35, *(_QWORD *)(a3 + 176));
            if ((v44 & 0x1FFF) == 0x14)
            {
              if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, _QWORD))(*(_QWORD *)(a3 + 128) + 56))(*(_QWORD *)(a3 + 152), *(_QWORD *)(a3 + 160), "$MEANW2V$", *(_QWORD *)(a3 + 176)) & 0x1FFF) == 0x14)
              {
                v11 = 2304778240;
                log_OutPublic(*(_QWORD *)(a1 + 32), a2, 24066, "%s%s", v49, v50, v51, v52, "expected");
                goto LABEL_2;
              }
            }
            else
            {
              v11 = v44;
              if ((v44 & 0x80000000) != 0)
              {
                v62 = *(_QWORD *)(a1 + 32);
                v63 = a2;
                v64 = 24068;
LABEL_54:
                log_OutPublic(v62, v63, v64, 0, v45, v46, v47, v48, v77);
                goto LABEL_2;
              }
            }
            v53 = v34 * v33;
            memcpy(&v29[v53], *(const void **)(a3 + 176), 4 * *(unsigned int *)(a3 + 168));
            if (*(_DWORD *)(a3 + 32) == 1)
            {
              LOWORD(v54) = *(_WORD *)(v81 + 24);
              *(float *)&v29[*(_DWORD *)(a3 + 168) + v53] = (float)v54;
            }
            if (*(_DWORD *)(a3 + 12) == 2 && v33 >= v79 && v33 < v78)
              v29[v53 + *(_DWORD *)(a3 + 168) + 1] = 1065353216;
          }
        }
        ++v33;
      }
      while (v33 != v32);
    }
    v11 = fi_predict(*(uint64_t ****)(a3 + 104), (const void **)&v86, *(unsigned __int16 *)(a3 + 28), &v84, v25, v26, v27, v28);
    if ((v11 & 0x80000000) != 0)
    {
      v62 = *(_QWORD *)(a1 + 32);
      v63 = a2;
      v64 = 24065;
      goto LABEL_54;
    }
    if (*(_WORD *)(a3 + 30))
    {
      v57 = 0;
      v58 = 0;
      v59 = 0.0;
      v60 = (float *)v81;
      do
      {
        if (v59 < *(float *)(v84 + 4 * v57))
        {
          v59 = *(float *)(v84 + 4 * v57);
          v58 = v57;
        }
        ++v57;
      }
      while (*(unsigned __int16 *)(a3 + 30) != v57);
      v61 = v58;
    }
    else
    {
      v61 = 0;
      v59 = 0.0;
      v60 = (float *)v81;
    }
    log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"results (threshold=%1.5lf)", v46, v47, v48, COERCE__INT64(*v60));
    if (*(_WORD *)(a3 + 30))
    {
      v68 = 0;
      do
        log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"[%3d] %1.5lf : %s %s", v65, v66, v67, v68++);
      while (v68 < *(unsigned __int16 *)(a3 + 30));
    }
    v69 = v81;
    if (*(unsigned __int16 *)(v81 + 4) >= 2u)
    {
      v70 = 0;
      do
      {
        v71 = v70;
        v72 = *(const char **)(*(_QWORD *)(v69 + 8) + 8 * v70);
        if (!strcmp(*(const char **)(*(_QWORD *)(a3 + 80) + 8 * v61), v72))
        {
          ReadOnly = ssftmap_FindReadOnly(*(_QWORD *)(a3 + 48), (uint64_t)v72, &v82);
          if ((ReadOnly & 0x80000000) != 0 || v59 >= *v82)
          {
            v69 = v81;
            if (v59 >= *(float *)v81)
            {
              *a9 = *(_QWORD *)(*(_QWORD *)(v81 + 8) + 8 * v71);
              log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"validated prediction for pattern \"%s\"", v74, v75, v76, v80);
              v11 = 0;
              goto LABEL_2;
            }
            log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"blocked selected prediction \"%s\"; value %1.5lf below pattern threshold %1.5lf",
              v74,
              v75,
              v76,
              v80);
            v11 = 0;
          }
          else
          {
            v11 = ReadOnly;
            v69 = v81;
            log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"blocked selected prediction \"%s\"; value %1.5lf below individual threshold for %s (%1.5f)",
              v74,
              v75,
              v76,
              v80);
          }
        }
        v70 = v71 + 1;
      }
      while (*(unsigned __int16 *)(v69 + 4) - 1 > (unsigned __int16)(v71 + 1));
    }
    log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"invalid or blocked prediction for pattern \"%s\", set to default \"%s\"", v65, v66, v67, v80);
    *a9 = *(_QWORD *)(v69 + 16);
LABEL_2:
    nn_tn_freeSentData(a1, a3);
    if (v86)
      heap_Free(*(_QWORD **)(a1 + 8), v86);
  }
  else
  {
    log_OutPublic(*(_QWORD *)(a1 + 32), a2, 24048, 0, v25, v26, v27, v28, v77);
    return 2304778250;
  }
  return v11;
}

uint64_t getStringFeatureValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char **a7)
{
  uint64_t v10;
  const char *v12;
  char *v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v21;
  _BYTE __c[11];

  *(_QWORD *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  *a7 = 0;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _BYTE *, _BYTE *, _BYTE *))(a3 + 96))(a4, a5, "fecfg", a6, &__c[3], &__c[1], __c);
  if ((v10 & 0x80000000) == 0 && *(unsigned __int16 *)&__c[1] == 1 && *(_QWORD *)&__c[3] != 0)
  {
    v12 = **(const char ***)&__c[3];
    v13 = strchr(**(char ***)&__c[3], __c[0]);
    if (v13)
    {
      *v13 = 0;
      v12 = **(const char ***)&__c[3];
    }
    v14 = strlen(v12);
    v15 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, (v14 + 1));
    *a7 = v15;
    if (v15)
    {
      strcpy(v15, **(const char ***)&__c[3]);
    }
    else
    {
      log_OutPublic(*(_QWORD *)(a1 + 32), a2, 37000, 0, v16, v17, v18, v19, v21);
      return 2304778250;
    }
  }
  return v10;
}

uint64_t setModelPredictions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t NumericFeatureValue;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  const char *v23;
  char *v24;
  size_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  char *v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  size_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  size_t v61;
  const char *v62;
  void *v63;
  size_t v64;
  size_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  size_t v72;
  float *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float *v78;
  float v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  size_t v86;
  uint64_t v87;
  size_t v88;
  size_t v89;
  uint64_t v90;
  size_t v91;
  float *v92;
  float v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  char *v98;
  size_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  const char **v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int16 v117;
  unsigned __int16 v118;
  __int128 v119;
  __int128 v120;
  unsigned __int8 __c;
  __int16 __c_1;
  char **__c_3;
  unsigned __int8 v124;
  __int16 v125;
  char **v126;
  __int128 v127;
  uint64_t (*v128)(const char *, const char *);
  void *v129;
  _QWORD *(*v130)(_QWORD *, _QWORD *);
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  __c_3 = 0;
  __c_1 = -1;
  __c = 0;
  v118 = 0;
  NumericFeatureValue = getNumericFeatureValue(a3, a4, a5, (uint64_t)"nn_tn_numPatterns", &v118);
  if ((NumericFeatureValue & 0x80000000) == 0 && v118)
  {
    v119 = 0u;
    v120 = 0u;
    v13 = getNumericFeatureValue(a3, a4, a5, (uint64_t)"nn_tn_numAllPredictions", (_WORD *)(a6 + 72));
    if ((v13 & 0x80000000) == 0)
    {
      v14 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 8 * *(unsigned __int16 *)(a6 + 72));
      *(_QWORD *)(a6 + 80) = v14;
      if (!v14
        || (**(_QWORD **)(a6 + 80) = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 8), (v19 = **(_QWORD ***)(a6 + 80)) == 0))
      {
LABEL_76:
        NumericFeatureValue = 2304778250;
        log_OutPublic(*(_QWORD *)(a1 + 32), a2, 24048, 0, v15, v16, v17, v18, v110);
        return NumericFeatureValue;
      }
      v117 = 1;
      *v19 = 0x544C5541464544;
      v20 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)&v127 = ssftmap_ElemCopyString;
      *((_QWORD *)&v127 + 1) = ssftmap_ElemFreeString;
      v128 = ssftmap_ElemCompareKeysString;
      v129 = patternMap_CopyData;
      v130 = patternMap_FreeData;
      v13 = ssftmap_ObjOpen(v20, 0, &v127, (uint64_t *)(a6 + 40));
      if ((v13 & 0x80000000) == 0)
      {
        v21 = *(_QWORD **)(a1 + 8);
        *(_QWORD *)&v127 = ssftmap_ElemCopyString;
        *((_QWORD *)&v127 + 1) = ssftmap_ElemFreeString;
        v128 = ssftmap_ElemCompareKeysString;
        v129 = floatThreshold_CopyData;
        v130 = floatThreshold_FreeData;
        v13 = ssftmap_ObjOpen(v21, 0, &v127, (uint64_t *)(a6 + 48));
        if ((v13 & 0x80000000) == 0)
        {
          v22 = 0;
          v116 = a2;
          while (1)
          {
            setDictKeyString((uint64_t)&v127, "nn_tn_patternName", (unsigned __int16)++v22);
            __c_1 = -1;
            v13 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, __int128 *, char ***, __int16 *, unsigned __int8 *))(a3 + 96))(a4, a5, "fecfg", &v127, &__c_3, &__c_1, &__c);
            if ((v13 & 0x80000000) != 0)
              return v13;
            v112 = v22;
            if (__c_1)
            {
              v23 = *__c_3;
              v24 = strchr(*__c_3, __c);
              if (v24)
                *v24 = 0;
              v25 = strlen(v23);
              v26 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v25 + 1);
              if (!v26)
                goto LABEL_76;
              v27 = (uint64_t)v26;
              strcpy(v26, v23);
              v22 = v112;
            }
            else
            {
              v27 = 0;
            }
            setDictKeyString((uint64_t)&v127, "nn_tn_patternThreshold", (unsigned __int16)v22);
            v126 = 0;
            v125 = -1;
            v124 = 0;
            LODWORD(v119) = 0;
            v28 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, __int128 *, char ***, __int16 *, unsigned __int8 *))(a3 + 96))(a4, a5, "fecfg", &v127, &v126, &v125, &v124);
            if ((v28 & 0x80000000) != 0)
              goto LABEL_80;
            if (v125 == 1 && v126)
            {
              v29 = *v126;
              v30 = strchr(*v126, v124);
              if (v30)
              {
                *v30 = 0;
                v29 = *v126;
              }
              v31 = atof(v29);
              *(float *)&v119 = v31;
              v22 = v112;
            }
            setDictKeyString((uint64_t)&v127, "nn_tn_numPredictions", (unsigned __int16)v22);
            v28 = getNumericFeatureValue(a3, a4, a5, (uint64_t)&v127, (_WORD *)&v119 + 2);
            if ((v28 & 0x80000000) != 0)
            {
LABEL_80:
              NumericFeatureValue = v28;
              goto LABEL_92;
            }
            *((_QWORD *)&v119 + 1) = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 8 * WORD2(v119));
            if (!*((_QWORD *)&v119 + 1))
              goto LABEL_87;
            setDictKeyString((uint64_t)&v127, "nn_tn_predictions", (unsigned __int16)v22);
            v113 = *(const char ***)(a6 + 80);
            v114 = *((_QWORD *)&v119 + 1);
            v126 = 0;
            v125 = -1;
            v124 = 0;
            NumericFeatureValue = (*(uint64_t (**)(uint64_t, uint64_t, const char *, __int128 *, char ***, __int16 *, unsigned __int8 *))(a3 + 96))(a4, a5, "fecfg", &v127, &v126, &v125, &v124);
            if ((NumericFeatureValue & 0x80000000) == 0 && v125)
            {
              v111 = v27;
              v36 = *v126;
              v37 = strchr(*v126, v124);
              if (v37)
                *v37 = 0;
              v38 = strchr(v36, 59);
              if (v38)
              {
                v39 = v38;
                LOWORD(v40) = 0;
                while (1)
                {
                  *v39 = 0;
                  v41 = strlen(v36) + 1;
                  a2 = v116;
                  v42 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v41);
                  *(_QWORD *)(v114 + 8 * (unsigned __int16)v40) = v42;
                  if (!v42)
                    break;
                  strcpy(v42, v36);
                  v47 = addToAllPredictions(a1, v116, v36, v113, &v117);
                  if ((v47 & 0x80000000) != 0)
                  {
                    NumericFeatureValue = v47;
                    goto LABEL_84;
                  }
                  LOWORD(v40) = v40 + 1;
                  v36 = v39 + 1;
                  v39 = strchr(v39 + 1, 59);
                  if (!v39)
                  {
                    v40 = (unsigned __int16)v40;
                    goto LABEL_36;
                  }
                }
LABEL_78:
                NumericFeatureValue = 2304778250;
                v106 = *(_QWORD *)(a1 + 32);
                v107 = a2;
LABEL_83:
                log_OutPublic(v106, v107, 24048, 0, v43, v44, v45, v46, v110);
                goto LABEL_84;
              }
              if (!v36)
              {
                v22 = v112;
                goto LABEL_39;
              }
              v40 = 0;
LABEL_36:
              v48 = strlen(v36);
              v49 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v48 + 1);
              *(_QWORD *)(v114 + 8 * v40) = v49;
              if (!v49)
                goto LABEL_78;
              strcpy(v49, v36);
              NumericFeatureValue = addToAllPredictions(a1, a2, v36, v113, &v117);
              v27 = v111;
              v22 = v112;
            }
            if ((NumericFeatureValue & 0x80000000) != 0)
              goto LABEL_92;
LABEL_39:
            setDictKeyString((uint64_t)&v127, "nn_tn_predictionsThresholds", (unsigned __int16)v22);
            v115 = *(_QWORD *)(a6 + 48);
            v126 = 0;
            v125 = -1;
            v124 = 0;
            v50 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, __int128 *, char ***, __int16 *, unsigned __int8 *))(a3 + 96))(a4, a5, "fecfg", &v127, &v126, &v125, &v124);
            NumericFeatureValue = v50;
            if ((v50 & 0x80000000) != 0 || !v125)
            {
              if ((v50 & 0x80000000) != 0)
                goto LABEL_92;
            }
            else
            {
              v111 = v27;
              v51 = *v126;
              v52 = strchr(*v126, v124);
              if (v52)
                *v52 = 0;
              v53 = strchr(v51, 59);
              if (v53)
              {
                v54 = v53;
                while (1)
                {
                  *v54 = 0;
                  v55 = strchr(v51, 44);
                  if (!v55)
                    break;
                  v60 = v55;
                  v61 = strlen(v51);
                  v62 = (const char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v61 + 1);
                  if (!v62)
                    goto LABEL_82;
                  v63 = (void *)v62;
                  v64 = strlen(v62);
                  bzero(v63, v64);
                  strncpy((char *)v63, v51, (unsigned __int16)((_WORD)v60 - (_WORD)v51));
                  v65 = strlen(v51);
                  v66 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, v65 + 1);
                  if (!v66)
                    goto LABEL_85;
                  v71 = (void *)v66;
                  v72 = strlen(v51);
                  bzero(v71, v72 + 1);
                  strcpy((char *)v71, v60 + 1);
                  v73 = (float *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 4);
                  if (!v73)
                    goto LABEL_86;
                  v78 = v73;
                  *v73 = 0.0;
                  v79 = atof((const char *)v71);
                  *v78 = v79;
                  log_OutText(*(_QWORD *)(a1 + 32), v116, 5, 0, (uint64_t)"Adding individual threshold %s : %1.5lf", v80, v81, v82, (uint64_t)v63);
                  v83 = ssftmap_Insert(v115, (uint64_t)v63, (uint64_t)v78);
                  if ((v83 & 0x80000000) != 0)
                    goto LABEL_88;
                  v51 = v54 + 1;
                  v54 = strchr(v54 + 1, 59);
                  heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v63);
                  heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v71);
                  heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v78);
                  a2 = v116;
                  if (!v54)
                    goto LABEL_55;
                }
LABEL_81:
                log_OutPublic(*(_QWORD *)(a1 + 32), a2, 24048, 0, v56, v57, v58, v59, v110);
                NumericFeatureValue = 2304778246;
LABEL_84:
                v27 = v111;
                goto LABEL_92;
              }
              if (v51)
              {
LABEL_55:
                v84 = strchr(v51, 44);
                if (!v84)
                  goto LABEL_81;
                v85 = v84;
                v86 = strlen(v51);
                v87 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, v86 + 1);
                if (!v87)
                {
LABEL_82:
                  NumericFeatureValue = 2304778250;
                  v106 = *(_QWORD *)(a1 + 32);
                  v107 = v116;
                  goto LABEL_83;
                }
                v63 = (void *)v87;
                v88 = strlen(v51);
                bzero(v63, v88);
                strncpy((char *)v63, v51, (unsigned __int16)((_WORD)v85 - (_WORD)v51));
                v89 = strlen(v51);
                v90 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, v89 + 1);
                if (!v90)
                {
LABEL_85:
                  v27 = v111;
                  NumericFeatureValue = 2304778250;
                  log_OutPublic(*(_QWORD *)(a1 + 32), v116, 24048, 0, v67, v68, v69, v70, v110);
                  v108 = *(_QWORD **)(a1 + 8);
                  v109 = (uint64_t)v63;
                  goto LABEL_91;
                }
                v71 = (void *)v90;
                v91 = strlen(v51);
                bzero(v71, v91 + 1);
                strcpy((char *)v71, v85 + 1);
                v92 = (float *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 4);
                if (!v92)
                {
LABEL_86:
                  NumericFeatureValue = 2304778250;
                  log_OutPublic(*(_QWORD *)(a1 + 32), v116, 24048, 0, v74, v75, v76, v77, v110);
                  v78 = 0;
LABEL_89:
                  v27 = v111;
                  heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v63);
                  heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v71);
                  if (v78)
                  {
                    v108 = *(_QWORD **)(a1 + 8);
                    v109 = (uint64_t)v78;
LABEL_91:
                    heap_Free(v108, v109);
                  }
LABEL_92:
                  if (v27)
                    heap_Free(*(_QWORD **)(a1 + 8), v27);
                  return NumericFeatureValue;
                }
                v78 = v92;
                *v92 = 0.0;
                v93 = atof((const char *)v71);
                *v78 = v93;
                log_OutText(*(_QWORD *)(a1 + 32), v116, 5, 0, (uint64_t)"Adding individual threshold %s : %1.5lf", v94, v95, v96, (uint64_t)v63);
                v83 = ssftmap_Insert(v115, (uint64_t)v63, (uint64_t)v78);
                if ((v83 & 0x80000000) != 0)
                {
LABEL_88:
                  NumericFeatureValue = v83;
                  goto LABEL_89;
                }
                heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v63);
                heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v71);
                heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v78);
                a2 = v116;
              }
              v27 = v111;
              v22 = v112;
            }
            setDictKeyString((uint64_t)&v127, "nn_tn_defaultPrediction", (unsigned __int16)v22);
            __c_1 = -1;
            v28 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, __int128 *, char ***, __int16 *, unsigned __int8 *))(a3 + 96))(a4, a5, "fecfg", &v127, &__c_3, &__c_1, &__c);
            if ((v28 & 0x80000000) != 0)
              goto LABEL_80;
            if (__c_1)
            {
              v97 = *__c_3;
              v98 = strchr(*__c_3, __c);
              if (v98)
                *v98 = 0;
              v99 = strlen(v97);
              v100 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v99 + 1);
              *(_QWORD *)&v120 = v100;
              if (!v100)
              {
LABEL_87:
                NumericFeatureValue = 2304778250;
                log_OutPublic(*(_QWORD *)(a1 + 32), a2, 24048, 0, v32, v33, v34, v35, v110);
                goto LABEL_92;
              }
              strcpy(v100, v97);
              v22 = v112;
            }
            setDictKeyString((uint64_t)&v127, "nn_tn_patternIndex", (unsigned __int16)v22);
            v28 = getNumericFeatureValue(a3, a4, a5, (uint64_t)&v127, (_WORD *)&v120 + 4);
            if ((v28 & 0x80000000) != 0)
              goto LABEL_80;
            NumericFeatureValue = ssftmap_Insert(*(_QWORD *)(a6 + 40), v27, (uint64_t)&v119);
            if ((NumericFeatureValue & 0x80000000) != 0)
              goto LABEL_92;
            v119 = 0u;
            v120 = 0u;
            if (v27)
              heap_Free(*(_QWORD **)(a1 + 8), v27);
            if (v118 <= (unsigned __int16)v22)
            {
              if (v117 != *(_WORD *)(a6 + 72))
              {
                log_OutPublic(*(_QWORD *)(a1 + 32), a2, 24071, 0, v101, v102, v103, v104, v110);
                return 2304778240;
              }
              return NumericFeatureValue;
            }
          }
        }
      }
    }
    return v13;
  }
  return NumericFeatureValue;
}

uint64_t patternMap_CopyData(_OWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  _OWORD *v6;
  __int128 v7;

  v3 = 2304778247;
  if (a1 && a2 && a3)
  {
    v6 = (_OWORD *)heap_Calloc(a2, 1, 32);
    if (v6)
    {
      v3 = 0;
      v7 = a1[1];
      *v6 = *a1;
      v6[1] = v7;
      *a3 = v6;
    }
    else
    {
      return 2304778250;
    }
  }
  return v3;
}

_QWORD *patternMap_FreeData(_QWORD *result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (uint64_t)result;
    v4 = result[1];
    if (v4)
    {
      if (*((_WORD *)result + 2))
      {
        v5 = 0;
        do
        {
          heap_Free(a2, *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v5));
          *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v5++) = 0;
        }
        while (v5 < *(unsigned __int16 *)(v3 + 4));
        v4 = *(_QWORD *)(v3 + 8);
      }
      *(_WORD *)(v3 + 4) = 0;
      heap_Free(a2, v4);
      *(_QWORD *)(v3 + 8) = 0;
    }
    v6 = *(_QWORD *)(v3 + 16);
    if (v6)
    {
      heap_Free(a2, v6);
      *(_QWORD *)(v3 + 16) = 0;
    }
    return heap_Free(a2, v3);
  }
  return result;
}

uint64_t floatThreshold_CopyData(_DWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _DWORD *v6;

  v3 = 2304778247;
  if (a1 && a2 && a3)
  {
    v6 = (_DWORD *)heap_Alloc(a2, 4);
    if (v6)
    {
      v3 = 0;
      *v6 = *a1;
      *a3 = v6;
    }
    else
    {
      return 2304778250;
    }
  }
  return v3;
}

_QWORD *floatThreshold_FreeData(_QWORD *result, _QWORD *a2)
{
  if (result)
    return heap_Free(a2, (uint64_t)result);
  return result;
}

char *setDictKeyString(uint64_t a1, const char *a2, unsigned int a3)
{
  char *v5;
  char v7[4];

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  strcpy((char *)a1, a2);
  v5 = LH_itoa(a3, v7, 0xAu);
  return strcat((char *)a1, v5);
}

uint64_t addToAllPredictions(uint64_t a1, uint64_t a2, char *__s, const char **a4, _WORD *a5)
{
  uint64_t v10;
  const char **v11;
  uint64_t result;
  size_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;

  v10 = (unsigned __int16)*a5;
  if (*a5)
  {
    v11 = a4;
    while (1)
    {
      result = strcmp(__s, *v11);
      if (!(_DWORD)result)
        break;
      ++v11;
      if (!--v10)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v13 = strlen(__s);
    v14 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v13 + 1);
    v19 = (unsigned __int16)*a5;
    a4[v19] = v14;
    if (v14)
    {
      *a5 = v19 + 1;
      strcpy(v14, __s);
      return 0;
    }
    else
    {
      log_OutPublic(*(_QWORD *)(a1 + 32), a2, 24048, 0, v15, v16, v17, v18, v20);
      return 2304778250;
    }
  }
  return result;
}

uint64_t fe_udwl_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t inited;
  uint64_t Object;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = 0;
  v28 = 0;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  if (!a5)
    return 2323652615;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v28);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = objc_GetObject(*(_QWORD *)(v28 + 48), (uint64_t)"SYNTHSTREAM", &v27);
  if ((inited & 0x80000000) != 0)
    return inited;
  Object = objc_GetObject(*(_QWORD *)(v28 + 48), (uint64_t)"FE_DEPES", &v26);
  v10 = *(_QWORD *)(v28 + 48);
  if ((Object & 0x80000000) != 0)
  {
    objc_ReleaseObject(v10, (uint64_t)"SYNTHSTREAM");
  }
  else
  {
    objc_GetObject(v10, (uint64_t)"DCTEG", &v25);
    v11 = heap_Calloc(*(_QWORD **)(v28 + 8), 1, 976);
    if (v11)
    {
      v16 = v11;
      *(_QWORD *)v11 = a3;
      *(_QWORD *)(v11 + 8) = a4;
      v18 = v27;
      v17 = v28;
      *(_QWORD *)(v11 + 16) = v28;
      *(_QWORD *)(v11 + 48) = *(_QWORD *)(v18 + 8);
      v19 = v26;
      *(_QWORD *)(v11 + 40) = *(_QWORD *)(v26 + 8);
      *(_OWORD *)(v11 + 24) = *(_OWORD *)(v19 + 16);
      v20 = v25;
      if (v25)
      {
        v21 = *(_QWORD *)(v25 + 8);
        if (v21)
        {
          *(_QWORD *)(v11 + 944) = v21;
          *(_OWORD *)(v11 + 952) = *(_OWORD *)(v20 + 16);
        }
      }
      *(_WORD *)(v11 + 968) = 512;
      if ((paramc_ParamGetUInt(*(_QWORD *)(v17 + 40), (uint64_t)"udctmaxlookuplen", &v24) & 0x80000000) == 0)
        *(_WORD *)(v16 + 968) = v24;
      *(_QWORD *)a5 = v16;
      *(_DWORD *)(a5 + 8) = 62346;
    }
    else
    {
      log_OutPublic(*(_QWORD *)(v28 + 32), (uint64_t)"FE_UDWL", 40000, 0, v12, v13, v14, v15, v23);
      objc_ReleaseObject(*(_QWORD *)(v28 + 48), (uint64_t)"SYNTHSTREAM");
      objc_ReleaseObject(*(_QWORD *)(v28 + 48), (uint64_t)"FE_DEPES");
      if (v25)
        objc_ReleaseObject(*(_QWORD *)(v28 + 48), (uint64_t)"DCTEG");
      return 2323652618;
    }
  }
  return Object;
}

uint64_t fe_udwl_ObjClose(uint64_t a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 62346, 976);
  if ((result & 0x80000000) != 0)
    return 2323652616;
  if (a1)
  {
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), (uint64_t)"FE_DEPES");
    if (*(_QWORD *)(a1 + 944))
      objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), (uint64_t)"DCTEG");
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), a1);
    return 0;
  }
  return result;
}

uint64_t fe_udwl_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v6;

  v6 = 0;
  v3 = safeh_HandleCheck(a1, a2, 62346, 976);
  if ((v3 & 0x80000000) != 0)
    return 2323652616;
  v4 = v3;
  if (a1)
  {
    *(_WORD *)(a1 + 968) = 512;
    if ((paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"udctmaxlookuplen", &v6) & 0x80000000) == 0)
      *(_WORD *)(a1 + 968) = v6;
  }
  return v4;
}

uint64_t fe_udwl_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if ((safeh_HandleCheck(a1, a2, 62346, 976) & 0x80000000) != 0)
    return 2323652616;
  synstrmaux_InitStreamOpener(a1 + 56, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL");
  synstrmaux_RegisterInStream((_WORD *)(a1 + 56), (uint64_t)"text/plain;charset=utf-8", 0, a1 + 880);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 56), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    0,
    a1 + 896);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 56), (uint64_t)"text/plain;charset=utf-8", a1 + 912);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 56), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 928);
  v7 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 56), *(_QWORD *)(a1 + 48), a3, a4);
  if ((v7 & 0x80000000) != 0)
    synstrmaux_CloseStreams((_WORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
  return v7;
}

BOOL sameLanguage(const char *a1, char *__s1, const char *a3)
{
  if (!strcmp(__s1, "normal"))
    return strcmp(a3, a1) == 0;
  else
    return strstr(__s1, a3) != 0;
}

uint64_t fe_udwl_Process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v8;
  int UInt;
  int v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t MainLangLC;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unsigned __int16 v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int16 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  uint64_t v92;
  int v93;
  int v95;
  _DWORD *v96;
  _DWORD *v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  _BYTE *v102;
  unsigned int v103;
  unsigned __int16 PreviousUtf8OffsetLimit;
  _DWORD *v105;
  unsigned int v106;
  unsigned __int16 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t NextUtf8OffsetLimit;
  unsigned __int16 v117;
  __int16 v118;
  unsigned __int16 v119;
  int v120;
  unsigned __int16 v121;
  __int16 v122;
  unsigned int v123;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  int *v129;
  int v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int *v142;
  int v143;
  unsigned int v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  BOOL v151;
  unsigned __int16 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t inserted;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  unsigned __int16 NextUtf8Offset;
  unsigned __int16 v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int Utf8Symbol;
  unsigned int v186;
  int v187;
  unsigned __int16 *v189;
  int v190;
  int v191;
  uint64_t v193;
  uint64_t v194;
  int v195;
  int v196;
  uint64_t k;
  uint64_t v198;
  unsigned __int16 PreviousUtf8Offset;
  unsigned int v200;
  int v201;
  unsigned __int16 v202;
  unsigned __int16 v203;
  char *v204;
  unsigned __int16 v205;
  unsigned int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  BOOL v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _DWORD *v225;
  unsigned int v226;
  _DWORD *v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _BYTE *v232;
  char *v233;
  char v234;
  uint64_t v235;
  _DWORD *v236;
  unsigned int v237;
  BOOL v238;
  uint64_t v239;
  _BYTE *v240;
  unsigned int v241;
  uint64_t v242;
  int *v243;
  int v244;
  int v245;
  unsigned int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  unsigned int v261;
  int v262;
  unsigned __int16 v263;
  int v264;
  int v265;
  unsigned int v266;
  unsigned int i;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  unsigned int v271;
  unsigned int j;
  char v273;
  uint64_t v274;
  _DWORD *v275;
  uint64_t v276;
  unsigned int v277;
  unsigned int v278;
  _DWORD *v279;
  unsigned int v280;
  int v282;
  int v283;
  size_t v284;
  uint64_t v285;
  unsigned int v286;
  size_t v287;
  _BYTE *v288;
  char v289;
  uint64_t v290;
  unsigned int v291;
  unsigned int v292;
  signed int v293;
  uint64_t v294;
  _DWORD *v295;
  char *v296;
  int v297;
  _DWORD *v298;
  unsigned int v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  uint64_t v303;
  _OWORD *v304;
  _OWORD *v305;
  __int128 v306;
  unsigned __int16 v307;
  int v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unsigned __int16 v318;
  unsigned int *v319;
  uint64_t v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  __int128 v328;
  __int128 v329;
  unsigned int v330;
  char *v331;
  char *v332;
  int v333;
  _BOOL4 v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  int v340;
  size_t v341;
  int v342;
  _DWORD *v343;
  unsigned int v344;
  uint64_t v345;
  _BOOL4 v346;
  char *v347;
  int v348;
  size_t v349;
  char *__dst;
  char *__dsta;
  unsigned int v352;
  const char *v353;
  int v354;
  int v355;
  uint64_t v356;
  BOOL v357;
  int v358[2];
  unsigned int v359;
  uint64_t v360;
  uint64_t v361;
  unsigned int MultiWordEntry;
  uint64_t v363;
  int v364;
  unsigned __int16 v365;
  __int16 v366;
  int v367;
  uint64_t v368;
  char *v369;
  unsigned __int16 v370;
  int v371;
  char *v372;
  unsigned int v373;
  int v374;
  int v375;
  char *v376;
  uint64_t v377;
  int v378;
  unsigned __int16 v379;
  unsigned int v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  _DWORD *v384;
  int v385;
  unsigned int v386;
  unsigned int v387;
  uint64_t v388;
  _BYTE *v389;
  int v390;
  unsigned int v391;
  char v392[4];
  char __s[8];
  char *v394;
  int v395;
  _BYTE *v396;
  uint64_t v397;
  unsigned __int16 v398;
  char *v399;
  char v400[4];
  char *v401;
  int v402;
  int v403;
  uint64_t v404;
  int v405;
  int v406;
  unsigned int v407;
  const void *v408;
  __int128 v409;
  _QWORD __src[3];

  __src[1] = *MEMORY[0x1E0C80C00];
  v409 = 0uLL;
  v8 = 2323652618;
  v405 = 0;
  v406 = 0;
  v404 = 0;
  v402 = 0;
  v401 = 0;
  v399 = 0;
  v398 = 0;
  v397 = 15;
  v396 = 0;
  v395 = 0;
  *(_QWORD *)__s = 0;
  v394 = 0;
  v391 = 0;
  if ((safeh_HandleCheck(a1, a2, 62346, 976) & 0x80000000) != 0)
    return 2323652616;
  v408 = 0;
  v407 = 0;
  v403 = 0;
  *a5 = 1;
  UInt = paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"numberoutputtranscriptions", &v391);
  v10 = (unsigned __int16)v391;
  if ((int)paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"udctmaxdictretlen", &v391) < 0)
    v11 = 512;
  else
    v11 = v391;
  v12 = (*(uint64_t (**)(_QWORD, _QWORD, char *, char *))(*(_QWORD *)(a1 + 48) + 144))(*(_QWORD *)(a1 + 880), *(_QWORD *)(a1 + 888), (char *)&v409 + 12, (char *)&v409 + 4);
  if ((v12 & 0x80000000) != 0)
    return v12;
  v18 = (*(uint64_t (**)(_QWORD, _QWORD, char *, char *))(*(_QWORD *)(a1 + 48) + 144))(*(_QWORD *)(a1 + 896), *(_QWORD *)(a1 + 904), (char *)&v409 + 8, (char *)&v409 + 4);
  if ((v18 & 0x80000000) != 0)
    return v18;
  log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)(a1 + 16) + 32), 104, (uint64_t)"%s%s", v13, v14, v15, v16, v17, "BEG");
  if (HIDWORD(v409))
  {
    v12 = (*(uint64_t (**)(_QWORD, _QWORD, char *, char *))(*(_QWORD *)(a1 + 48) + 144))(*(_QWORD *)(a1 + 880), *(_QWORD *)(a1 + 888), (char *)&v409 + 12, (char *)&v409 + 4);
    if ((v12 & 0x80000000) == 0)
    {
      v23 = (_BYTE *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, (HIDWORD(v409) + 1));
      if (!v23)
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 40000, 0, v19, v20, v21, v22, v325);
        v54 = 0;
        v389 = 0;
        v32 = 0;
        v388 = 0;
        v41 = 0;
        v39 = 0;
        v55 = 0;
        v42 = 0;
LABEL_120:
        log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)(a1 + 16) + 32), 104, (uint64_t)"%s%s %s%u", v49, v50, v51, v52, v53, "END");
        if (v54 && v23)
        {
          v106 = v398 + v55;
          if (v106 < 2)
            goto LABEL_130;
          v107 = 1;
          do
          {
            v108 = v107;
            if (*(_DWORD *)&v23[4 * v107])
            {
              v109 = *(_QWORD *)(v54 + 8 * v107);
              if (*(_DWORD *)v109 != 7)
              {
                heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(v109 + 24));
                v109 = *(_QWORD *)(v54 + 8 * v108);
              }
              heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v109);
            }
            v107 = v108 + 1;
          }
          while (v106 > (unsigned __int16)(v108 + 1));
        }
        if (!v54)
        {
LABEL_131:
          if (v23)
          {
            heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v23);
            v396 = 0;
          }
          if (v41)
            heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v41);
          if (v388)
            heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v388);
          if (v32)
            heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v32);
          if (v389)
            heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v389);
          if (v39)
            heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v39);
          if (v42)
            heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v42);
          return v8;
        }
LABEL_130:
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v54);
        v399 = 0;
        goto LABEL_131;
      }
      v12 = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE *, _QWORD, __int128 *))(*(_QWORD *)(a1 + 48) + 80))(*(_QWORD *)(a1 + 880), *(_QWORD *)(a1 + 888), v23, HIDWORD(v409), &v409);
      if ((v12 & 0x80000000) == 0)
      {
        v23[HIDWORD(v409)] = 0;
        log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), 105, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
          (uint64_t)v23,
          v409);
        v24 = (*(uint64_t (**)(_QWORD, _QWORD, const void **, unsigned int *))(*(_QWORD *)(a1 + 48) + 88))(*(_QWORD *)(a1 + 896), *(_QWORD *)(a1 + 904), &v408, &v407);
        if ((v24 & 0x80000000) != 0)
        {
          v389 = 0;
          v32 = 0;
          v388 = 0;
          v41 = 0;
          v39 = 0;
          v55 = 0;
          v42 = 0;
          v8 = v24;
LABEL_119:
          heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v23);
          v54 = (uint64_t)v399;
          v23 = v396;
          goto LABEL_120;
        }
        v25 = v407;
        v387 = v407 >> 5;
        if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32)))
          log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), 105, (uint64_t)&byte_1DEBD87CE, (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
            (uint64_t)v408,
            v25 & 0x1FFFE0);
        v26 = *(_QWORD *)(a1 + 944);
        if (!v26
          || !(*(unsigned int (**)(_QWORD, _QWORD))(v26 + 80))(*(_QWORD *)(a1 + 952), *(_QWORD *)(a1 + 960)))
        {
          v56 = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE *, _QWORD))(*(_QWORD *)(a1 + 48) + 104))(*(_QWORD *)(a1 + 912), *(_QWORD *)(a1 + 920), v23, v409);
          v55 = v387;
          if ((v56 & 0x80000000) == 0)
          {
            log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), 106, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
              (uint64_t)v23,
              v409);
            v56 = (*(uint64_t (**)(_QWORD, _QWORD, const void *, _QWORD))(*(_QWORD *)(a1 + 48) + 104))(*(_QWORD *)(a1 + 928), *(_QWORD *)(a1 + 936), v408, v407);
            if ((v56 & 0x80000000) == 0)
            {
              if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32)))
                log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), 106, (uint64_t)&byte_1DEBD87CE, (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
                  (uint64_t)v408,
                  v25 & 0x1FFFE0);
              v56 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 96))(*(_QWORD *)(a1 + 896), *(_QWORD *)(a1 + 904), v407);
            }
          }
          v8 = v56;
          v389 = 0;
          v32 = 0;
          v388 = 0;
          v41 = 0;
          v39 = 0;
          v42 = 0;
          goto LABEL_119;
        }
        *(_DWORD *)v400 = 10994208;
        v394 = "normal";
        v401 = "normal";
        MainLangLC = hlp_GetMainLangLC(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), v392);
        if ((MainLangLC & 0x80000000) != 0)
        {
          v389 = 0;
          v32 = 0;
          v388 = 0;
          v41 = 0;
          v39 = 0;
          v42 = 0;
          v8 = MainLangLC;
          goto LABEL_118;
        }
        v32 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *(unsigned __int16 *)(a1 + 968) + 1, 1);
        if (v32)
        {
          v33 = v409;
          if (v409 < v11)
            v33 = v11;
          if (UInt < 0)
            v34 = 1;
          else
            v34 = v10;
          v39 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v34 + v34 * v33 + 1, 1);
          if (v39)
          {
            v40 = v34 + v34 * v11;
            if (v40 > 0xFFFE)
            {
              v389 = 0;
              v388 = 0;
              v41 = 0;
              v42 = 0;
              v8 = 2323652623;
LABEL_118:
              v55 = v387;
              goto LABEL_119;
            }
            v58 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v40 + 1, 1);
            v57 = *(_QWORD *)(a1 + 16);
            v389 = (_BYTE *)v58;
            if (v58)
            {
              v349 = v40 + 1;
              v59 = (void *)heap_Alloc(*(_QWORD *)(v57 + 8), v407);
              v42 = (uint64_t)v59;
              if (v59)
              {
                memcpy(v59, v408, v407);
                log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"Markers IN", v64, v65, v66, v325);
                v352 = v40;
                v386 = (unsigned __int16)(v25 >> 5);
                v344 = v25;
                if ((unsigned __int16)(v25 >> 5))
                {
                  __dst = (char *)v39;
                  v383 = v42;
                  v70 = v42 + 8;
                  v71 = (unsigned __int16)(v25 >> 5);
                  do
                  {
                    v72 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
                    v73 = *(unsigned int *)(v70 - 8);
                    if ((_DWORD)v73 == 0x4000)
                      log_OutText(v72, (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"Marker [type=SYNC] Ref (%u,%u) Cur(%u,%u)", v67, v68, v69, *(unsigned int *)(v70 - 4));
                    else
                      log_OutText(v72, (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"Marker [type=%5u] Ref (%u,%u) Cur(%u,%u)", v67, v68, v69, v73);
                    v70 += 32;
                    --v71;
                  }
                  while (v71);
                  v42 = v383;
                  v74 = (_DWORD *)(v383 + 16);
                  v75 = (unsigned __int16)(v25 >> 5);
                  v39 = (uint64_t)__dst;
                  do
                  {
                    if (*(v74 - 4) == 1)
                      *v74 = 0;
                    v74 += 8;
                    --v75;
                  }
                  while (v75);
                }
                MultiWordEntry = (*(uint64_t (**)(_QWORD, _QWORD, int *, _QWORD))(*(_QWORD *)(a1 + 40) + 112))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), &v402, 0);
                if ((MultiWordEntry & 0x80000000) != 0)
                {
                  v388 = 0;
                  v41 = 0;
                  v8 = MultiWordEntry;
                  goto LABEL_118;
                }
                v399 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (unsigned __int16)(v25 >> 5), 8);
                v76 = *(_QWORD *)(a1 + 16);
                v377 = (uint64_t)v399;
                if (v399)
                {
                  v396 = (_BYTE *)heap_Calloc(*(_QWORD **)(v76 + 8), (unsigned __int16)(v25 >> 5), 4);
                  v76 = *(_QWORD *)(a1 + 16);
                  v369 = v396;
                  if (v396)
                  {
                    v41 = heap_Calloc(*(_QWORD **)(v76 + 8), (v409 + 1), 2);
                    v81 = *(_QWORD *)(a1 + 16);
                    if (!v41)
                    {
                      log_OutPublic(*(_QWORD *)(v81 + 32), (uint64_t)"FE_UDWL", 40000, 0, v77, v78, v79, v80, v325);
                      v388 = 0;
                      goto LABEL_118;
                    }
                    __dsta = (char *)v39;
                    v388 = heap_Calloc(*(_QWORD **)(v81 + 8), (v409 + 1), 2);
                    if (!v388)
                    {
                      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 40000, 0, v82, v83, v84, v85, v325);
                      v388 = 0;
                      v55 = v387;
                      goto LABEL_119;
                    }
                    v384 = (_DWORD *)v42;
                    v343 = (_DWORD *)(v42 + 12);
                    v385 = *(_DWORD *)(v42 + 12);
                    if (!v386)
                    {
                      v360 = 0;
                      goto LABEL_151;
                    }
                    v86 = 0;
                    do
                    {
                      v87 = &v384[8 * (unsigned __int16)v86];
                      if (v87[3] != v385)
                        break;
                      hlp_KeepTrackBeforeMovingOn(&v384[8 * (unsigned __int16)v86], (int *)&v397 + 1, &v401, &v394, &v397);
                      *(_QWORD *)(v377 + 8 * (unsigned __int16)v86) = v87;
                      *(_DWORD *)&v369[4 * (unsigned __int16)v86] = 0;
                      v86 = (v86 + 1);
                    }
                    while ((unsigned __int16)v86 < (unsigned __int16)v387);
                    v88 = 0;
                    v347 = v394;
                    v353 = v401;
                    v360 = v86;
                    v89 = 0xFFFFLL;
                    v90 = v386;
                    v91 = v384;
                    while (1)
                    {
                      v92 = v89;
                      v93 = v91[8 * v88];
                      if (v93 == 7 || v93 == 21)
                      {
                        v89 = 0xFFFFLL;
                        if ((_WORD)v92 != 0xFFFF)
                          goto LABEL_96;
                      }
                      else
                      {
                        if (v93 == 32)
                        {
                          v95 = v91[8 * v88 + 6];
                          if (!v95)
                          {
                            if ((unsigned __int16)v92 == 0xFFFF)
                            {
                              v105 = v91;
                              log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"Warning : Ignoring multiword end tag at position %u - start position missing (or ignored)", v83, v84, v85, (unsigned __int16)(v91[8 * v88 + 3] - v385));
                              v91 = v105;
                              v89 = 0xFFFFLL;
                            }
                            else
                            {
                              v378 = v91[8 * v88 + 3] - v385;
                              v99 = (unsigned __int16)(LOWORD(v91[8 * v88 + 3]) - v385);
                              if (v99 == (_DWORD)v409 && utf8_BelongsToSet(3u, v23, v99 - 1, v99))
                              {
                                v370 = v378 - 1;
                                if ((_WORD)v378 == 1)
                                {
                                  LOWORD(v378) = 1;
                                }
                                else
                                {
                                  v100 = (unsigned __int16)(v378 - 1);
                                  v101 = v409;
                                  v102 = v23;
                                  v103 = v100;
                                  while (utf8_BelongsToSet(3u, v102, v100, v101))
                                  {
                                    LOWORD(v378) = v370;
                                    PreviousUtf8OffsetLimit = utf8_GetPreviousUtf8OffsetLimit((uint64_t)v23, v103, v409);
                                    if (!PreviousUtf8OffsetLimit)
                                      break;
                                    v103 = PreviousUtf8OffsetLimit;
                                    v101 = v409;
                                    v370 = PreviousUtf8OffsetLimit;
                                    v102 = v23;
                                    v100 = PreviousUtf8OffsetLimit;
                                  }
                                }
                              }
                              LOWORD(v406) = v352;
                              if ((unsigned __int16)v378 - (unsigned __int16)v92 >= *(unsigned __int16 *)(a1 + 968))
                              {
                                log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"MW lookup len %u  exceeds maxLookupLen %u - skipping", v83, v84, v85, (unsigned __int16)v378 - (unsigned __int16)v92);
                              }
                              else
                              {
                                *(_WORD *)(v41 + 2 * (unsigned __int16)v92) = v378;
                                *((_QWORD *)&v329 + 1) = &__s[4];
                                *(_QWORD *)&v329 = &v406;
                                if (hlp_ValidateMultiWordMarker((uint64_t *)a1, a2, (uint64_t)v23, (unsigned __int16)v92, (unsigned __int16)v378, v32, (uint64_t)v347, (uint64_t)v353, v389, v329, (uint64_t)__s, v404))
                                {
                                  *(_WORD *)(v388 + 2 * (unsigned __int16)v92) = v378;
                                }
                              }
                              v89 = 0xFFFFLL;
                              v91 = v384;
                            }
                            goto LABEL_112;
                          }
                          if (v95 == 1)
                          {
                            if ((_WORD)v92 != 0xFFFF)
                            {
                              v326 = (unsigned __int16)v92;
                              v96 = v91;
                              log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"Warning : Ignoring multiword start tag at position %u - nested tag found at position %u, using this as start position", v83, v84, v85, v326);
                              v91 = v96;
                            }
                            v89 = (v91[8 * v88 + 3] - v385);
LABEL_112:
                            v90 = v386;
                            goto LABEL_113;
                          }
                        }
                        else if (v93 == 34 && (unsigned __int16)~(_WORD)v92 != 0)
                        {
LABEL_96:
                          v327 = (unsigned __int16)v92;
                          v98 = v91;
                          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"Warning : Ignoring multiword tag at position %u - contains internal tags (tn, phon)", v83, v84, v85, v327);
                          v91 = v98;
                          v90 = v386;
                          v89 = 0xFFFFLL;
                          goto LABEL_113;
                        }
                        v89 = v92;
                      }
LABEL_113:
                      if (++v88 == v90)
                      {
                        if ((_WORD)v89 != 0xFFFF)
                          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"Warning : Ignoring multiword tag at position %u - no closing tag", v83, v84, v85, (unsigned __int16)v89);
LABEL_151:
                        v341 = strlen(v23);
                        if (!(_DWORD)v341)
                        {
                          v324 = 0;
                          LOWORD(v342) = 0;
LABEL_432:
                          if (v386 > (unsigned __int16)v360)
                          {
                            v296 = &v399[8 * (unsigned __int16)v360 + 8 * v324];
                            v297 = v360;
                            do
                            {
                              v298 = &v384[8 * (unsigned __int16)v297];
                              v298[3] += (__int16)v342;
                              *(_QWORD *)v296 = v298;
                              v296 += 8;
                              ++v297;
                            }
                            while (v386 > (unsigned __int16)v297);
                          }
                          v384[4] += (__int16)v342;
                          v299 = v386 + v324;
                          v300 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v386 + v324, 32);
                          if (!v300)
                            goto LABEL_469;
                          v301 = v300;
                          if (!v299)
                            goto LABEL_445;
                          v302 = 0;
                          v303 = (uint64_t)v399;
                          do
                          {
                            v304 = (_OWORD *)(v300 + 32 * (unsigned __int16)v302);
                            v305 = *(_OWORD **)(v303 + 8 * (unsigned __int16)v302);
                            v306 = v305[1];
                            *v304 = *v305;
                            v304[1] = v306;
                            ++v302;
                          }
                          while (v299 > (unsigned __int16)v302);
                          if (*(_DWORD *)(v300 + 12) == v385)
                          {
                            v307 = 0;
                            do
                              v308 = ++v307;
                            while (v299 > v307 && *(_DWORD *)(v300 + 32 * v307 + 12) == v385);
                          }
                          else
                          {
LABEL_445:
                            v308 = 0;
                          }
                          stableArraySort(v300, v308, v299 - v308);
                          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"New Markers OUT", v309, v310, v311, v325);
                          v312 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 48)
                                                                                            + 104))(*(_QWORD *)(a1 + 928), *(_QWORD *)(a1 + 936), v301, 32 * v299);
                          v313 = *(_QWORD *)(a1 + 16);
                          if ((v312 & 0x80000000) != 0)
                          {
                            v8 = v312;
                            v322 = *(_QWORD **)(v313 + 8);
                            v323 = v301;
LABEL_463:
                            heap_Free(v322, v323);
                          }
                          else
                          {
                            if (log_GetLogLevel(*(_QWORD *)(v313 + 32)) >= 5 && v299 != 0)
                            {
                              v318 = 0;
                              do
                              {
                                v319 = (unsigned int *)(v301 + 32 * v318);
                                v320 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
                                v321 = *v319;
                                if ((_DWORD)v321 == 0x4000)
                                  log_OutText(v320, (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"Marker [type=SYNC] Ref (%u,%u) Cur(%u,%u)", v314, v315, v316, v319[1]);
                                else
                                  log_OutText(v320, (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"Marker [type=%5u] Ref (%u,%u) Cur(%u,%u)", v314, v315, v316, v321);
                                ++v318;
                              }
                              while (v299 > v318);
                            }
                            heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v301);
                            if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32)))
                              log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), 106, (uint64_t)"PTRARRAY", (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
                                (uint64_t)v399,
                                8 * v299);
                            inserted = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 96))(*(_QWORD *)(a1 + 896), *(_QWORD *)(a1 + 904), v407);
                            if ((inserted & 0x80000000) == 0)
                            {
                              v402 += (__int16)v342;
                              inserted = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 104))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
                            }
LABEL_460:
                            v8 = inserted;
                          }
LABEL_470:
                          v55 = v387;
                          v39 = (uint64_t)__dsta;
                          v42 = (uint64_t)v384;
                          goto LABEL_119;
                        }
                        v371 = 0;
                        v354 = 0;
                        v342 = 0;
                        v113 = 0;
                        v114 = v341;
                        while (2)
                        {
                          v405 = 0;
                          v115 = (unsigned __int16)v113;
                          v379 = v113;
                          NextUtf8OffsetLimit = v113;
                          if ((unsigned __int16)v113 < v114)
                          {
                            NextUtf8OffsetLimit = v113;
                            if (utf8_BelongsToSet(3u, v23, (unsigned __int16)v113, v114))
                            {
                              do
                              {
                                NextUtf8OffsetLimit = utf8_GetNextUtf8OffsetLimit(v23, v115, v114);
                                v115 = (unsigned __int16)NextUtf8OffsetLimit;
                              }
                              while ((unsigned __int16)NextUtf8OffsetLimit < v114
                                   && utf8_BelongsToSet(3u, v23, (unsigned __int16)NextUtf8OffsetLimit, v114));
                            }
                          }
                          if (v354)
                          {
                            v346 = 0;
                            goto LABEL_170;
                          }
                          v117 = HIWORD(v395);
                          v118 = v395;
                          if (v379 <= (unsigned __int16)NextUtf8OffsetLimit)
                          {
                            v119 = v379;
                            do
                            {
                              v120 = *(unsigned __int16 *)(v41 + 2 * v119);
                              if (*(_WORD *)(v41 + 2 * v119))
                              {
                                v118 = *(_WORD *)(v41 + 2 * v119);
                                v117 = v119;
                              }
                              ++v119;
                            }
                            while (v119 <= (unsigned __int16)NextUtf8OffsetLimit && !v120);
                            v346 = v120 != 0;
                          }
                          else
                          {
                            v346 = 0;
                          }
                          HIWORD(v395) = v117;
                          LOWORD(v395) = v118;
                          if (v379 == (unsigned __int16)NextUtf8OffsetLimit)
                          {
                            v121 = v379;
                            v122 = *(_WORD *)(v41 + 2 * v379);
                            if (v122)
                            {
                              HIWORD(v395) = v379;
                              LOWORD(v395) = v122;
                              v346 = 1;
                            }
                          }
                          else
                          {
LABEL_170:
                            v121 = v379;
                          }
                          if ((unsigned __int16)NextUtf8OffsetLimit > v121)
                          {
                            v123 = HIWORD(v395);
                            if ((unsigned __int16)NextUtf8OffsetLimit < HIWORD(v395))
                              v123 = (unsigned __int16)NextUtf8OffsetLimit;
                            if ((unsigned __int16)NextUtf8OffsetLimit >= (unsigned __int16)v395 || !v346)
                              NextUtf8OffsetLimit = NextUtf8OffsetLimit;
                            else
                              NextUtf8OffsetLimit = v123;
                            v125 = (unsigned __int16)NextUtf8OffsetLimit - v371;
                            if ((int)v125 >= 1)
                            {
                              MultiWordEntry = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE *, uint64_t))(*(_QWORD *)(a1 + 48) + 104))(*(_QWORD *)(a1 + 912), *(_QWORD *)(a1 + 920), &v23[v379], v125);
                              if ((MultiWordEntry & 0x80000000) != 0)
                                goto LABEL_461;
                              log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), 106, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
                                (uint64_t)&v23[v379],
                                v125);
                            }
                            v121 = NextUtf8OffsetLimit;
                          }
                          v345 = NextUtf8OffsetLimit;
                          v126 = v360;
                          if (v386 > (unsigned __int16)v360)
                          {
                            v380 = v121;
                            v363 = (uint64_t)v399;
                            v127 = (uint64_t)v396;
                            v128 = (unsigned __int16)v360 + v398;
                            do
                            {
                              v129 = &v384[8 * (unsigned __int16)v126];
                              v130 = v129[3];
                              if (v380 < (unsigned __int16)(v130 - v385))
                                break;
                              v129[3] = v130 + (__int16)v342;
                              *(_QWORD *)(v363 + 8 * v128) = v129;
                              *(_DWORD *)(v127 + 4 * v128) = 0;
                              hlp_KeepTrackBeforeMovingOn(v129, (int *)&v397 + 1, &v401, &v394, &v397);
                              v126 = (v126 + 1);
                              ++v128;
                            }
                            while (v386 > (unsigned __int16)v126);
                          }
                          v360 = v126;
                          LOWORD(v406) = v352;
                          if (v346)
                          {
                            v381 = (unsigned __int16)v395;
                            v131 = HIWORD(v395);
                            v132 = (unsigned __int16)v395 - HIWORD(v395);
                            HIWORD(v406) = v395 - HIWORD(v395);
                            log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"SET MW %u %u", v110, v111, v112, HIWORD(v395));
                            strncpy(v32, &v23[v131], (unsigned __int16)v132);
                            HIDWORD(v338) = 0;
                            v32[(unsigned __int16)v132] = 0;
                            v348 = v132;
                            LOWORD(v345) = v131;
                            v133 = v381;
                            goto LABEL_193;
                          }
                          v390 = 0;
                          MultiWordEntry = hlp_FindMultiWordEntry(a1, a2, v23, (unsigned __int16)v341, v384, (unsigned __int16)(v344 >> 5), v388, (unsigned __int16)v345, (uint64_t)v394, (uint64_t)v401, (_WORD *)&v395 + 1, &v395, v32, (_WORD *)&v406 + 1, v352, (uint64_t)&__s[4], (uint64_t)__s, &v390);
                          if ((MultiWordEntry & 0x80000000) != 0)
                            goto LABEL_461;
                          if (v390)
                          {
                            v137 = HIWORD(v395);
                            v138 = (unsigned __int16)v395;
                            log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"SET UMW %u %u", v134, v135, v136, HIWORD(v395));
                            v139 = HIWORD(v406);
                            strncpy(v32, &v23[v137], HIWORD(v406));
                            v32[v139] = 0;
                            HIDWORD(v338) = 1;
                            v348 = v139;
                            LOWORD(v345) = v137;
                            v133 = v138;
LABEL_193:
                            v382 = v133;
                            LODWORD(v338) = !v346;
LABEL_194:
                            v403 = 1;
                            v140 = (unsigned __int16)v360;
                            if (v386 <= (unsigned __int16)v360)
                            {
                              v335 = (unsigned __int16)v360;
                            }
                            else
                            {
                              v361 = (uint64_t)v399;
                              v355 = v398;
                              v141 = (uint64_t)v396;
                              while (1)
                              {
                                v142 = &v384[8 * (unsigned __int16)v140];
                                v143 = v142[3];
                                if ((unsigned __int16)v345 < (unsigned __int16)(v143 - v385))
                                  break;
                                v142[3] = v143 + (__int16)v342;
                                v144 = v355 + v140;
                                *(_QWORD *)(v361 + 8 * v144) = v142;
                                *(_DWORD *)(v141 + 4 * v144) = 0;
                                hlp_KeepTrackBeforeMovingOn(v142, (int *)&v397 + 1, &v401, &v394, &v397);
                                v140 = (v140 + 1);
                                if (v386 <= (unsigned __int16)v140)
                                {
                                  v360 = v140;
                                  v335 = (unsigned __int16)v140;
                                  goto LABEL_201;
                                }
                              }
                              v335 = v140;
                              v360 = v140;
                            }
LABEL_201:
                            LOWORD(v406) = v352;
                            __s[4] = 0;
                            v145 = v401;
                            v151 = strcmp(v401, "spell") && HIDWORD(v397) == 0;
                            v152 = v352;
                            v340 = v352;
                            if (v151)
                            {
                              strncpy(__dsta, &v23[(unsigned __int16)v345], (unsigned __int16)v348);
                              __dsta[(unsigned __int16)v348] = 0;
                              log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"lookup = \"%s\"", v153, v154, v155, (uint64_t)__dsta);
                              bzero(v389, v349);
                              *((_QWORD *)&v328 + 1) = &__s[4];
                              *(_QWORD *)&v328 = &v406;
                              MultiWordEntry = fe_udwl_MatchUDctWord((uint64_t *)a1, a2, 1, v32, (uint64_t)v394, (uint64_t)v145, (uint64_t)&v403, (uint64_t)v389, v328, (uint64_t)__s, (uint64_t)&v404, (_WORD *)&v405 + 1, &v405);
                              if ((MultiWordEntry & 0x80000000) == 0)
                              {
                                v156 = strlen(v389);
                                log_OutEvent(*(uint64_t ***)(*(_QWORD *)(a1 + 16) + 32), 32, "%s%s%s", v157, v158, v159, v160, v161, "TEXT");
                                v152 = v406;
                                v340 = v156;
                                goto LABEL_208;
                              }
                              v340 = v352;
                            }
                            else
                            {
LABEL_208:
                              if ((MultiWordEntry & 0x80000000) == 0 && v152 && v352 > v152)
                              {
                                log_OutEvent(*(uint64_t ***)(*(_QWORD *)(a1 + 16) + 32), 19, "%s%s", v146, v147, v148, v149, v150, "URI");
                                log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"return string = \"%s\"", v162, v163, v164, (uint64_t)v389);
                                v339 = v385 + (unsigned __int16)v345 + (__int16)v342;
                                v334 = sameLanguage(v392, v394, &__s[4]);
                                if (!v334)
                                {
                                  inserted = hlp_InsertLangMarker(a1, &__s[4], v339, v339, (uint64_t *)&v399, (uint64_t *)&v396, (unsigned __int16)(v344 >> 5), (unsigned __int16)v360, &v398);
                                  if ((inserted & 0x80000000) != 0)
                                    goto LABEL_460;
                                  MultiWordEntry = 0;
                                }
                                if (v403 == 4)
                                {
                                  if ((unsigned __int16)v406 >= 4u && *(_WORD *)v389 == 12049 && v389[2] == 60)
                                  {
                                    v189 = (unsigned __int16 *)&v389[(unsigned __int16)v340 - 3];
                                    v190 = *v189;
                                    v191 = *((unsigned __int8 *)v189 + 2);
                                    if (v190 == 12049 && v191 == 60)
                                    {
                                      memmove(v389, v389 + 3, (unsigned __int16)v340 - 6);
                                      *(_QWORD *)v358 = (unsigned __int16)v340 - 6;
                                      v389[*(_QWORD *)v358] = 0;
                                      LOWORD(v406) = v406 - 6;
                                      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"transformed lookup = \"%s\"", v217, v218, v219, (uint64_t)v389);
                                      v374 = v398;
                                      v220 = v386 + v398;
                                      v221 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v399, 8 * v220 + 16);
                                      if (!v221)
                                        goto LABEL_469;
                                      v222 = v221;
                                      v399 = (char *)v221;
                                      v223 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v396, 4 * v220 + 8);
                                      if (!v223)
                                        goto LABEL_469;
                                      v224 = v223;
                                      *(_DWORD *)(v223 + 4 * v220) = 0;
                                      v396 = (_BYTE *)v223;
                                      *(_DWORD *)(v223 + 4 * (v220 + 1)) = 0;
                                      v225 = (_DWORD *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 32);
                                      if (!v225)
                                        goto LABEL_469;
                                      v225[6] = 60;
                                      *v225 = 7;
                                      v225[1] = v339;
                                      v225[2] = 0;
                                      v225[3] = v339;
                                      v225[4] = 0;
                                      v226 = v335 + v374;
                                      *(_QWORD *)(v222 + 8 * v226) = v225;
                                      *(_DWORD *)(v224 + 4 * v226) = 1;
                                      v227 = (_DWORD *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 32);
                                      if (!v227)
                                      {
                                        v398 = v374 + 1;
LABEL_469:
                                        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 40000, 0, v167, v168, v169, v170, v325);
                                        goto LABEL_470;
                                      }
                                      LOWORD(v364) = 0;
                                      v227[6] = v397;
                                      v228 = v339 + LOWORD(v358[0]);
                                      *v227 = 7;
                                      v227[1] = v228;
                                      v227[2] = 0;
                                      v227[3] = v228;
                                      v227[4] = 0;
                                      *(_QWORD *)(v222 + 8 * (v226 + 1)) = v227;
                                      *(_DWORD *)(v224 + 4 * (v226 + 1)) = 1;
                                      v398 = v374 + 2;
                                      v340 = (unsigned __int16)v340 - 6;
                                      goto LABEL_358;
                                    }
                                  }
                                }
                                else if (v403 == 1)
                                {
                                  v333 = v398;
                                  v166 = v386 + v398;
                                  v356 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v399, 8 * v166 + 16);
                                  if (!v356)
                                    goto LABEL_469;
                                  v399 = (char *)v356;
                                  v337 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v396, 4 * v166 + 8);
                                  if (!v337)
                                    goto LABEL_469;
                                  *(_DWORD *)(v337 + 4 * v166) = 0;
                                  v396 = (_BYTE *)v337;
                                  *(_DWORD *)(v337 + 4 * (v166 + 1)) = 0;
                                  v331 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 32);
                                  if (!v331)
                                    goto LABEL_469;
                                  v171 = strlen(v389);
                                  if (strlen(__s) == 3)
                                    v172 = 14;
                                  else
                                    v172 = 10;
                                  v372 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (v172 + v171), 1);
                                  if (!v372)
                                  {
                                    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 40000, 0, v173, v174, v175, v176, v325);
                                    v322 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
                                    v323 = (uint64_t)v331;
                                    goto LABEL_463;
                                  }
                                  strcpy(v372, v389);
                                  v177 = v338;
                                  if (v346)
                                    v177 = 1;
                                  if ((v177 & 1) != 0)
                                  {
                                    v178 = strlen(v32);
                                    if ((_WORD)v348)
                                    {
                                      v179 = v178;
                                      if (!utf8_BelongsToSet(3u, v32, 0, v178))
                                      {
                                        v182 = 0;
                                        goto LABEL_284;
                                      }
                                      v180 = 0;
                                      while (1)
                                      {
                                        NextUtf8Offset = utf8_GetNextUtf8Offset(v32, v180);
                                        v182 = NextUtf8Offset;
                                        if ((unsigned __int16)v348 <= NextUtf8Offset)
                                          break;
                                        v180 = NextUtf8Offset;
                                        if (!utf8_BelongsToSet(3u, v32, NextUtf8Offset, v179))
                                          goto LABEL_284;
                                      }
                                      if ((_WORD)v348)
                                      {
LABEL_284:
                                        PreviousUtf8Offset = v348;
                                        while (1)
                                        {
                                          v200 = PreviousUtf8Offset;
                                          if (!utf8_BelongsToSet(3u, v32, PreviousUtf8Offset, v179))
                                            break;
                                          PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)v32, v200);
                                          if (!PreviousUtf8Offset)
                                            goto LABEL_298;
                                        }
                                        v330 = v200;
                                        if (v200 > v182)
                                        {
                                          v365 = 1;
                                          do
                                          {
                                            if (!v32[v182])
                                              break;
                                            v201 = v182;
                                            if (utf8_BelongsToSet(3u, v32, v182, v179))
                                            {
                                              ++v365;
                                              if (v182 < (unsigned __int16)v348)
                                              {
                                                while (1)
                                                {
                                                  v201 = v182;
                                                  if (!utf8_BelongsToSet(3u, v32, v182, v179))
                                                    break;
                                                  v202 = utf8_GetNextUtf8Offset(v32, v182);
                                                  v182 = v202;
                                                  if ((unsigned __int16)v348 <= v202)
                                                  {
                                                    v201 = v202;
                                                    break;
                                                  }
                                                }
                                              }
                                            }
                                            v182 = utf8_GetNextUtf8Offset(v32, v201);
                                          }
                                          while (v330 >= v182);
LABEL_299:
                                          LOWORD(__src[0]) = 0;
                                          LOWORD(v390) = 0;
                                          v203 = v406;
                                          v204 = strchr(v372, 18);
                                          v205 = (_WORD)v204 - (_WORD)v372;
                                          if (!v204)
                                            v205 = v203;
                                          v206 = utf8_countNbrOfPhonWords(v372, v205, __src, &v390);
                                          v210 = v365;
                                          v238 = v365 >= v206;
                                          v211 = v365 > v206;
                                          v366 = v365 - v206;
                                          if (!v238)
                                          {
                                            v364 = v206 - v210;
                                            log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"TYPE1 modification : insert %u dummy words (%u orthographic words, %u phonetic words)", v207, v208, v209, (unsigned __int16)(v206 - v210));
                                            goto LABEL_337;
                                          }
                                          if (v211)
                                          {
                                            log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"TYPE2 modification : hyphenate words (%u orthographic words, %u phonetic words)", v207, v208, v209, v210);
                                            v212 = (unsigned __int16)v348;
                                            strncpy(__dsta, &v23[(unsigned __int16)v345], (unsigned __int16)v348)[(unsigned __int16)v348] = 0;
                                            v216 = v348;
                                            while ((_WORD)--v216)
                                            {
                                              if (__dsta[(unsigned __int16)v216] != 32)
                                              {
                                                while (__dsta[(unsigned __int16)v216] != 32)
                                                {
                                                  if (!(_WORD)--v216)
                                                    goto LABEL_325;
                                                }
                                                while (v366)
                                                {
                                                  while (__dsta[(unsigned __int16)v216] == 32)
                                                  {
                                                    __dsta[(unsigned __int16)v216--] = 45;
                                                    if (!(_WORD)v216)
                                                      goto LABEL_325;
                                                  }
                                                  --v366;
                                                  while (__dsta[(unsigned __int16)v216] != 32)
                                                  {
                                                    if (!(_WORD)--v216)
                                                      goto LABEL_325;
                                                  }
                                                }
                                                break;
                                              }
                                            }
LABEL_325:
                                            log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"TYPE2 modification : now \"%s\"", v213, v214, v215, (uint64_t)__dsta);
                                            if ((_WORD)v348)
                                            {
                                              v232 = &v23[(unsigned __int16)v345];
                                              v233 = __dsta;
                                              do
                                              {
                                                v234 = *v233++;
                                                *v232++ = v234;
                                                --v212;
                                              }
                                              while (v212);
                                            }
                                            if (v386)
                                            {
                                              v235 = 0;
                                              v236 = v343;
                                              do
                                              {
                                                v237 = *v236 - *v343;
                                                v238 = v237 <= (unsigned __int16)v345
                                                    || v237 >= (unsigned __int16)v345
                                                             + (unsigned __int16)v348;
                                                if (!v238)
                                                {
                                                  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"realign Markers in midword postions to start of word Mrk[%u].posCur from %u to %u", v229, v230, v231, v235);
                                                  *v236 = v385 + (unsigned __int16)(v345 + v342);
                                                }
                                                ++v235;
                                                v236 += 8;
                                              }
                                              while (v386 != v235);
                                            }
                                          }
LABEL_336:
                                          v364 = 0;
                                          goto LABEL_337;
                                        }
                                      }
                                    }
LABEL_298:
                                    v365 = 0;
                                    goto LABEL_299;
                                  }
                                  if ((unsigned __int16)v406 < 3uLL)
                                    goto LABEL_336;
                                  v364 = 0;
                                  v193 = 1;
                                  v194 = 1;
                                  do
                                  {
                                    v195 = v372[v194];
                                    if (v195 == 35 || v195 == 95)
                                    {
                                      if (v372[++v193] == 18)
                                        v196 = v364;
                                      else
                                        v196 = v364 + 1;
                                      v364 = v196;
                                    }
                                    else
                                    {
                                      if (v195 == 18)
                                        break;
                                      ++v193;
                                    }
                                    ++v194;
                                  }
                                  while (v193 != (unsigned __int16)v406 - 1);
LABEL_337:
                                  if ((_WORD)v348)
                                  {
                                    v239 = (unsigned __int16)v348;
                                    v240 = &v23[(unsigned __int16)v345];
                                    do
                                    {
                                      if (*v240 == 95)
                                        *v240 = 45;
                                      ++v240;
                                      --v239;
                                    }
                                    while (v239);
                                  }
                                  *(_WORD *)&v372[strlen(v372)] = 20;
                                  strcat(v372, "EXTDCT");
                                  if (strlen(__s) == 3)
                                  {
                                    *(_WORD *)&v372[strlen(v372)] = 20;
                                    strcat(v372, __s);
                                  }
                                  *((_QWORD *)v331 + 3) = v372;
                                  *(_DWORD *)v331 = 34;
                                  *((_DWORD *)v331 + 1) = v339;
                                  v241 = v335 + v333;
                                  v242 = (unsigned __int16)v360;
                                  *((_DWORD *)v331 + 2) = 0;
                                  *((_DWORD *)v331 + 3) = v339;
                                  *((_DWORD *)v331 + 4) = 0;
                                  *(_QWORD *)(v356 + 8 * v241) = v331;
                                  *(_DWORD *)(v337 + 4 * v241) = 1;
                                  if (v386 > (unsigned __int16)v360)
                                  {
                                    while (1)
                                    {
                                      v243 = &v384[8 * (unsigned __int16)v242];
                                      v244 = v243[3];
                                      if ((unsigned __int16)v382 < (unsigned __int16)(v244 - v385))
                                        break;
                                      v245 = v244 + (__int16)v342;
                                      if (*v243 == 36)
                                        v245 = v385
                                             + (__int16)v342
                                             + (unsigned __int16)v382
                                             + 3 * (unsigned __int16)v364;
                                      if (*v243 == 21)
                                        v245 = v385
                                             + (__int16)v342
                                             + (unsigned __int16)v382
                                             + 3 * (unsigned __int16)v364;
                                      v243[3] = v245;
                                      v246 = v333 + 1 + v242;
                                      *(_QWORD *)(v356 + 8 * v246) = v243;
                                      *(_DWORD *)(v337 + 4 * v246) = 0;
                                      hlp_KeepTrackBeforeMovingOn(v243, (int *)&v397 + 1, &v401, &v394, &v397);
                                      v242 = (v242 + 1);
                                      if (v386 <= (unsigned __int16)v242)
                                      {
                                        v360 = v242;
                                        LODWORD(v242) = (unsigned __int16)v242;
                                        goto LABEL_353;
                                      }
                                    }
                                    v360 = v242;
                                  }
LABEL_353:
                                  if ((unsigned __int16)v382 < v341)
                                  {
                                    v247 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 32);
                                    v252 = *(_QWORD *)(a1 + 16);
                                    if (!v247)
                                    {
                                      log_OutPublic(*(_QWORD *)(v252 + 32), (uint64_t)"FE_UDWL", 40000, 0, v248, v249, v250, v251, v325);
LABEL_467:
                                      v398 = v333 + 1;
                                      goto LABEL_470;
                                    }
                                    v253 = v247;
                                    v336 = *(_QWORD *)(v252 + 8);
                                    v332 = v401;
                                    v254 = strlen(v401);
                                    v255 = (char *)heap_Alloc(v336, (v254 + 1));
                                    if (!v255)
                                    {
                                      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 40000, 0, v256, v257, v258, v259, v325);
                                      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v253);
                                      goto LABEL_467;
                                    }
                                    *(_QWORD *)(v253 + 24) = strcpy(v255, v332);
                                    v260 = v385 + (__int16)v342 + (unsigned __int16)v382 + 3 * (unsigned __int16)v364;
                                    *(_DWORD *)v253 = 21;
                                    *(_DWORD *)(v253 + 4) = v260;
                                    *(_DWORD *)(v253 + 8) = 0;
                                    *(_DWORD *)(v253 + 12) = v260;
                                    *(_DWORD *)(v253 + 16) = 0;
                                    v261 = v333 + v242 + 1;
                                    *(_QWORD *)(v356 + 8 * v261) = v253;
                                    *(_DWORD *)(v337 + 4 * v261) = 1;
                                    LOWORD(v333) = v333 + 1;
                                  }
                                  v342 += 3 * v364;
                                  v398 = v333 + 1;
LABEL_358:
                                  if (v334)
                                  {
                                    v357 = (HIDWORD(v338) | v346) == 0;
                                    goto LABEL_360;
                                  }
                                  if (v403 == 1)
                                    v263 = v382;
                                  else
                                    v263 = v340;
                                  v264 = v385;
                                  if (v403 != 1)
                                    v264 = v385 + (unsigned __int16)v345;
                                  inserted = hlp_InsertLangMarker(a1, v394, v264 + v263 + (__int16)v342, v264 + v263 + (__int16)v342, (uint64_t *)&v399, (uint64_t *)&v396, (unsigned __int16)(v344 >> 5), (unsigned __int16)v360, &v398);
                                  if ((inserted & 0x80000000) != 0)
                                    goto LABEL_460;
                                  MultiWordEntry = 0;
                                  v357 = (HIDWORD(v338) | v346) == 0;
                                  v262 = (unsigned __int16)v345;
LABEL_368:
                                  v265 = (unsigned __int16)v382 - v262;
                                  if (v265 >= 1
                                    && (v403 == 1
                                     || !(_WORD)v406
                                     || (MultiWordEntry & 0x80000000) != 0
                                     || (unsigned __int16)v406 >= v11))
                                  {
                                    v282 = (unsigned __int16)v405;
                                    if (v265 <= (unsigned __int16)v405)
                                    {
                                      v282 = 0;
                                      LOWORD(v405) = 0;
                                    }
                                    MultiWordEntry = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE *, _QWORD))(*(_QWORD *)(a1 + 48) + 104))(*(_QWORD *)(a1 + 912), *(_QWORD *)(a1 + 920), &v23[(unsigned __int16)v345], (v265 - v282));
                                    if ((MultiWordEntry & 0x80000000) != 0)
                                    {
LABEL_461:
                                      v8 = MultiWordEntry;
                                      goto LABEL_470;
                                    }
                                    log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), 106, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
                                      (uint64_t)&v23[(unsigned __int16)v345],
                                      v265 - (unsigned __int16)v405);
                                    v269 = (unsigned __int16)v405;
                                    v375 = v265 - (unsigned __int16)v405;
                                    if ((_WORD)v364)
                                    {
                                      v283 = 0;
                                      while (1)
                                      {
                                        v284 = strlen(v400);
                                        v285 = (*(uint64_t (**)(_QWORD, _QWORD, char *, size_t))(*(_QWORD *)(a1 + 48) + 104))(*(_QWORD *)(a1 + 912), *(_QWORD *)(a1 + 920), v400, v284);
                                        v286 = v285;
                                        if ((v285 & 0x80000000) != 0)
                                          break;
                                        v287 = strlen(v400);
                                        log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), 106, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
                                          (uint64_t)v400,
                                          v287);
                                        v375 += strlen(v400);
                                        if ((unsigned __int16)++v283 >= (unsigned __int16)v364)
                                        {
                                          MultiWordEntry = v286;
                                          v269 = (unsigned __int16)v405;
                                          goto LABEL_410;
                                        }
                                      }
                                      v8 = v285;
                                      goto LABEL_470;
                                    }
LABEL_410:
                                    if ((_DWORD)v269)
                                    {
                                      v288 = &v23[(unsigned __int16)v382];
                                      MultiWordEntry = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)(a1 + 48) + 104))(*(_QWORD *)(a1 + 912), *(_QWORD *)(a1 + 920), &v288[-v269]);
                                      if ((MultiWordEntry & 0x80000000) != 0)
                                        goto LABEL_461;
                                      log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), 106, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
                                        (uint64_t)&v288[-(unsigned __int16)v405],
                                        (unsigned __int16)v405);
                                    }
                                  }
                                  else
                                  {
                                    MultiWordEntry = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)(a1 + 48) + 104))(*(_QWORD *)(a1 + 912), *(_QWORD *)(a1 + 920), v389);
                                    if ((MultiWordEntry & 0x80000000) != 0)
                                      goto LABEL_461;
                                    log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), 106, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
                                      (uint64_t)v389,
                                      (unsigned __int16)v340);
                                    v266 = strlen(v32);
                                    if (v266)
                                    {
                                      for (i = 0; i < v266; i = (unsigned __int16)utf8_GetNextUtf8Offset(v32, i))
                                      {
                                        if (utf8_BelongsToSet(3u, v32, i, v266))
                                        {
                                          while (i < v266 && utf8_BelongsToSet(3u, v32, i, v266))
                                            i = (unsigned __int16)utf8_GetNextUtf8Offset(v32, i);
                                        }
                                      }
                                    }
                                    v268 = v389;
                                    v271 = strlen(v389);
                                    if (v271)
                                    {
                                      for (j = 0; j < v271; j = (unsigned __int16)utf8_GetNextUtf8Offset(v268, j))
                                      {
                                        if (utf8_BelongsToSet(3u, v268, j, v271) && j < v271)
                                        {
                                          v268 = v389;
                                          do
                                          {
                                            if (!utf8_BelongsToSet(3u, v389, j, v271))
                                              break;
                                            j = (unsigned __int16)utf8_GetNextUtf8Offset(v389, j);
                                          }
                                          while (j < v271);
                                        }
                                        else
                                        {
                                          v268 = v389;
                                        }
                                      }
                                    }
                                    v273 = v357;
                                    if (!v386)
                                      v273 = 1;
                                    v274 = v386;
                                    v275 = v343;
                                    if ((v273 & 1) == 0)
                                    {
                                      v276 = 0;
                                      v277 = HIWORD(v395);
                                      v278 = (unsigned __int16)v395;
                                      v367 = v385 + HIWORD(v395);
                                      v279 = v343;
                                      v359 = (unsigned __int16)v395;
                                      do
                                      {
                                        v280 = *v279 - *v275;
                                        if (v280 > v277 && v280 < v278)
                                        {
                                          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"realign Markers in midword postions to start of word Mrk[%u].posCur from %u to %u", v110, v111, v112, v276);
                                          v278 = v359;
                                          v275 = v343;
                                          v274 = v386;
                                          *v279 = v367;
                                        }
                                        ++v276;
                                        v279 += 8;
                                      }
                                      while (v274 != v276);
                                    }
                                    v342 = v340 + v342 - v348;
                                  }
                                  if (v339 != -1)
                                    log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)(a1 + 16) + 32), 109, (uint64_t)"%s%d %s%d %s%s", v269, v270, v110, v111, v112, "POSREF");
                                  v289 = v338;
                                  if (v346)
                                    v289 = 1;
                                  if ((v289 & 1) != 0)
                                  {
                                    v382 = (unsigned __int16)v395;
                                    if (v386 > (unsigned __int16)v360)
                                    {
                                      v290 = v360;
                                      v368 = (uint64_t)v396;
                                      v376 = v399;
                                      v291 = (unsigned __int16)v360 + v398;
                                      while (1)
                                      {
                                        v292 = v384[8 * (unsigned __int16)v290 + 3];
                                        v113 = v382;
                                        if (v382 <= (unsigned __int16)(v292 - v385))
                                          break;
                                        v293 = v291 - 1;
                                        v294 = *(_QWORD *)&v376[8 * (v291 - 1)];
                                        if (v292 >= *(_DWORD *)(v294 + 12))
                                        {
                                          *(_QWORD *)&v376[8 * v291] = &v384[8 * (unsigned __int16)v290];
                                          v295 = (_DWORD *)(v368 + 4 * v291);
                                        }
                                        else
                                        {
                                          *(_QWORD *)&v376[8 * v291] = v294;
                                          v295 = (_DWORD *)(v368 + 4 * v293);
                                          *(_DWORD *)(v368 + 4 * v291) = *v295;
                                          *(_QWORD *)&v376[8 * v293] = &v384[8 * (unsigned __int16)v290];
                                        }
                                        *v295 = 0;
                                        hlp_KeepTrackBeforeMovingOn(&v384[8 * (unsigned __int16)v290], (int *)&v397 + 1, &v401, &v394, &v397);
                                        v290 = (v290 + 1);
                                        ++v291;
                                        if (v386 <= (unsigned __int16)v290)
                                        {
                                          v354 = 0;
                                          v360 = v290;
                                          goto LABEL_427;
                                        }
                                      }
                                      v354 = 0;
                                      v360 = v290;
                                      goto LABEL_428;
                                    }
                                  }
                                  v354 = 0;
LABEL_427:
                                  v113 = v382;
                                  goto LABEL_428;
                                }
                                LOWORD(v364) = 0;
                                goto LABEL_358;
                              }
                            }
                            log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"Warning : Found user dictionary entries are ignored as return buffer too small; c"
                                       "onsider increasing value with parameter SSFT_PARAMC_UDCTMAXDICTRETLEN",
                              v148,
                              v149,
                              v150,
                              v325);
                            LOWORD(v364) = 0;
                            v339 = -1;
                            v357 = (HIDWORD(v338) | v346) == 0;
                            if (!(HIDWORD(v338) | v346) || (MultiWordEntry & 0x80000000) == 0)
                            {
LABEL_360:
                              v262 = (unsigned __int16)v345;
                              goto LABEL_368;
                            }
                            v187 = v338;
                            if (v346)
                              v187 = 1;
                            if (v187)
                              v113 = HIWORD(v395);
                            else
                              v113 = v382;
                            v354 = 1;
LABEL_428:
                            v114 = v341;
                            v371 = (unsigned __int16)v113;
                            if ((unsigned __int16)v113 >= v341)
                            {
                              v324 = v398;
                              goto LABEL_432;
                            }
                            continue;
                          }
                          break;
                        }
                        bzero(v32, *(unsigned __int16 *)(a1 + 968) + 1);
                        if ((unsigned __int16)v345 >= v341)
                        {
                          v348 = 0;
                          v382 = v345;
                          v183 = (unsigned __int16)v345;
                          v184 = v341;
                        }
                        else
                        {
                          v348 = 0;
                          v183 = (unsigned __int16)v345;
                          v382 = v345;
                          v184 = v341;
                          while (!utf8_BelongsToSet(3u, v23, v183, v341))
                          {
                            Utf8Symbol = utf8_GetUtf8Symbol(v23, v183, v341, (char *)__src);
                            v373 = v183;
                            if ((unsigned __int16)Utf8Symbol + (unsigned __int16)v348 >= *(unsigned __int16 *)(a1 + 968))
                            {
                              v183 = (unsigned __int16)v382;
                              break;
                            }
                            v186 = Utf8Symbol;
                            strcpy(&v32[(unsigned __int16)v348], (const char *)__src);
                            v348 += v186;
                            v382 = utf8_GetNextUtf8OffsetLimit(v23, v373, v341);
                            v183 = (unsigned __int16)v382;
                            if ((unsigned __int16)v382 >= v341)
                              break;
                          }
                        }
                        HIWORD(v406) = v348;
                        if (v183 >= v184 || utf8_BelongsToSet(3u, v23, v183, v341))
                        {
                          if ((_WORD)v348)
                          {
                            v338 = 0;
                            goto LABEL_194;
                          }
                        }
                        else
                        {
                          for (k = (unsigned __int16)v382;
                                (unsigned __int16)v382 < v341;
                                k = (unsigned __int16)v382)
                          {
                            if (utf8_BelongsToSet(3u, v23, k, v341))
                              break;
                            v382 = utf8_GetNextUtf8OffsetLimit(v23, k, v341);
                          }
                          v198 = k - (unsigned __int16)v345;
                          if ((int)v198 >= 1)
                          {
                            MultiWordEntry = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE *, uint64_t))(*(_QWORD *)(a1 + 48) + 104))(*(_QWORD *)(a1 + 912), *(_QWORD *)(a1 + 920), &v23[(unsigned __int16)v345], v198);
                            if ((MultiWordEntry & 0x80000000) != 0)
                              goto LABEL_461;
                            log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), 106, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
                              (uint64_t)&v23[(unsigned __int16)v345],
                              v198);
                          }
                        }
                        goto LABEL_427;
                      }
                    }
                  }
                }
              }
              else
              {
                v76 = *(_QWORD *)(a1 + 16);
              }
              log_OutPublic(*(_QWORD *)(v76 + 32), (uint64_t)"FE_UDWL", 40000, 0, v60, v61, v62, v63, v325);
              v388 = 0;
              v41 = 0;
              goto LABEL_118;
            }
          }
          else
          {
            v57 = *(_QWORD *)(a1 + 16);
          }
          log_OutPublic(*(_QWORD *)(v57 + 32), (uint64_t)"FE_UDWL", 40000, 0, v35, v36, v37, v38, v325);
          v389 = 0;
          v388 = 0;
          v41 = 0;
        }
        else
        {
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 40000, 0, v28, v29, v30, v31, v325);
          v389 = 0;
          v388 = 0;
          v41 = 0;
          v39 = 0;
        }
        v42 = 0;
        goto LABEL_118;
      }
    }
    return v12;
  }
  if (!*(_QWORD *)((char *)&v409 + 4))
  {
    __src[0] = 0;
    if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"clcpppipelinemode", __src) & 0x80000000) != 0
      || !__src[0]
      || !*(_BYTE *)__src[0])
    {
      *a5 = 0;
    }
    goto LABEL_41;
  }
  if (!DWORD2(v409))
    goto LABEL_34;
  v12 = (*(uint64_t (**)(_QWORD, _QWORD, const void **, unsigned int *))(*(_QWORD *)(a1 + 48) + 88))(*(_QWORD *)(a1 + 896), *(_QWORD *)(a1 + 904), &v408, &v407);
  if ((v12 & 0x80000000) != 0)
    return v12;
  v12 = (*(uint64_t (**)(_QWORD, _QWORD, const void *, _QWORD))(*(_QWORD *)(a1 + 48) + 104))(*(_QWORD *)(a1 + 928), *(_QWORD *)(a1 + 936), v408, v407);
  if ((v12 & 0x80000000) != 0)
    return v12;
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32)))
    log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), 105, (uint64_t)&byte_1DEBD87CE, (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
      (uint64_t)v408,
      v407);
  v18 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 96))(*(_QWORD *)(a1 + 896), *(_QWORD *)(a1 + 904), v407);
  v8 = v18;
  if ((v18 & 0x80000000) == 0)
  {
LABEL_34:
    log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), 105, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
      (uint64_t)&byte_1DEBD87CE,
      0);
    if (DWORD1(v409))
      v18 = synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
LABEL_41:
    log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)(a1 + 16) + 32), 104, (uint64_t)"%s%s", v43, v44, v45, v46, v47, "END");
    return v18;
  }
  return v8;
}

uint64_t hlp_GetMainLangLC(uint64_t a1, char *a2)
{
  uint64_t Str;
  uint64_t v4;
  size_t v5;
  char *__s;

  __s = 0;
  *a2 = 0;
  Str = paramc_ParamGetStr(a1, (uint64_t)"langcode", &__s);
  if ((Str & 0x80000000) != 0)
    return Str;
  v4 = 2323652608;
  if (__s && strlen(__s) == 3)
  {
    strcpy(a2, __s);
    if (*a2)
    {
      v5 = 0;
      do
      {
        a2[v5] = __tolower(a2[v5]);
        ++v5;
      }
      while (v5 < strlen(a2));
    }
    return Str;
  }
  return v4;
}

int *hlp_KeepTrackBeforeMovingOn(int *result, int *a2, _QWORD *a3, _QWORD *a4, _DWORD *a5)
{
  int v5;
  int v6;
  int v7;

  v5 = *a2;
  v6 = *result;
  if (!*a2)
  {
    if (v6 == 7)
      goto LABEL_12;
    if (v6 != 21)
    {
      if (v6 != 36)
        goto LABEL_9;
      a3 = a4;
    }
    *a3 = *((_QWORD *)result + 3);
    goto LABEL_9;
  }
  if (v6 == 7)
  {
LABEL_12:
    v7 = 1;
    if (result[6] == 43 && v5 == 0)
    {
      *a2 = 1;
      goto LABEL_24;
    }
LABEL_20:
    if (v5 == 1)
    {
      *a2 = 0;
      if ((v7 & 1) == 0)
        return result;
    }
    else if (!v7)
    {
      return result;
    }
LABEL_24:
    *a5 = result[6];
    return result;
  }
LABEL_9:
  if (!v5 && v6 == 34)
  {
    *a2 = 1;
    return result;
  }
  if (v6 == 21)
  {
    v7 = 0;
    goto LABEL_20;
  }
  return result;
}

BOOL hlp_ValidateMultiWordMarker(uint64_t *a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, char *__dst, uint64_t a7, uint64_t a8, _BYTE *a9, __int128 a10, uint64_t a11, uint64_t a12)
{
  size_t v16;
  __int128 v18;
  int v19;

  v16 = a5 - (unint64_t)a4;
  strncpy(__dst, (const char *)(a3 + a4), v16);
  __dst[v16] = 0;
  v19 = 1;
  *(_QWORD *)&v18 = &v19;
  *((_QWORD *)&v18 + 1) = a9;
  return (udwl_MatchUdctWord(a1[2], a1[118], a1[119], a1[120], 1, __dst, a7, a8, v18, a10, a11, (uint64_t)&a12, 0, 0, 0) & 0x80000000) == 0&& *a9 != 0;
}

uint64_t hlp_FindMultiWordEntry(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, _DWORD *a5, unsigned int a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, _WORD *a11, _WORD *a12, char *a13, _WORD *a14, unsigned __int16 a15, uint64_t a16, uint64_t a17, _DWORD *a18)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unsigned __int16 v39;
  unsigned __int16 PreviousUtf8Offset;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  size_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  BOOL v57;
  unint64_t v58;
  int v59;
  _DWORD *v60;
  unint64_t v61;
  unsigned int v63;
  _BOOL4 v65;
  unint64_t v66;
  int v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t matched;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  char *__src;
  unsigned int v86;
  char *v90;
  uint64_t v91;
  unsigned __int16 v92;
  uint64_t v93;
  int v94;
  unsigned __int16 v95;
  unsigned __int16 v96;
  unsigned __int16 v97;
  unsigned __int16 v98;
  char __s2[20];
  uint64_t v100;

  v21 = a1;
  v100 = *MEMORY[0x1E0C80C00];
  v95 = 1;
  v94 = 1;
  v93 = 0;
  v92 = a15;
  *a18 = 0;
  v22 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), a15 + 1, 1);
  v27 = *(_QWORD *)(v21 + 16);
  if (v22)
  {
    v28 = v22;
    v90 = (char *)heap_Calloc(*(_QWORD **)(v27 + 8), a15 + 1, 1);
    if (!v90)
    {
      v52 = 2323652618;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(v21 + 16) + 32), (uint64_t)"FE_UDWL", 40000, 0, v29, v30, v31, v32, v81);
LABEL_75:
      heap_Free(*(_QWORD **)(*(_QWORD *)(v21 + 16) + 8), v28);
      return v52;
    }
    v98 = a15;
    *(_DWORD *)__s2 = 1;
    v33 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(v21 + 16) + 8), *(unsigned __int16 *)(v21 + 968) + 1, 1);
    if (v33)
    {
      v38 = (char *)v33;
      v91 = v21;
      v39 = a4;
      v97 = a8;
      do
      {
        PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)a3, v39);
        v39 = PreviousUtf8Offset;
      }
      while (PreviousUtf8Offset > a8 && utf8_BelongsToSet(0, a3, PreviousUtf8Offset, a4));
      v84 = v28;
      hlp_Skip(1, 1, a3, &v97, a8, a4);
      v41 = v97;
      v96 = v97;
      if (v95)
      {
        v42 = 0;
        v86 = 0;
        v43 = v39;
        __src = &a3[v97];
        v44 = v91;
        while (v96 <= v43)
        {
          hlp_Skip(1, 1, a3, &v96, v41, a4);
          if (hlp_Skip(2, 1, a3, &v96, v41, a4))
          {
            if (v42)
            {
              ++v42;
            }
            else
            {
              if (*(unsigned __int16 *)(v91 + 968) <= (unsigned __int16)(v96 - v41))
              {
                *v38 = 0;
              }
              else
              {
                v45 = (unsigned __int16)(v96 - v41);
                strncpy(v38, __src, v45);
                v38[v45] = 0;
                *(_DWORD *)__s2 = 1;
                v46 = udwl_LookupMultiWordLengths(*(_QWORD *)(v91 + 16), *(_QWORD *)(v91 + 944), *(_QWORD *)(v91 + 952), *(_QWORD *)(v91 + 960), v38, __s2, v90, &v98, (uint64_t)&v95);
                v50 = 0;
                if ((v46 & 0x1FFF) != 0x14)
                {
                  if ((v46 & 0x80000000) != 0)
                  {
                    v42 = 1;
                    v86 = v46;
                    break;
                  }
                  v50 = v46;
                }
                v86 = v50;
                v51 = *(_QWORD *)(*(_QWORD *)(v91 + 16) + 32);
                if (v95 < 2u)
                  log_OutText(v51, (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"lookup UMW: start word '%s': not found", v47, v48, v49, (uint64_t)v38);
                else
                  log_OutText(v51, (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"lookup UMW: start word '%s': found", v47, v48, v49, (uint64_t)v38);
              }
              v42 = 1;
            }
          }
          if (v42 >= v95)
            break;
        }
      }
      else
      {
        v42 = 0;
        v86 = 0;
        v44 = v21;
      }
      heap_Free(*(_QWORD **)(*(_QWORD *)(v44 + 16) + 8), (uint64_t)v38);
      v56 = *a18 == 0;
      if (*a18)
        v57 = 0;
      else
        v57 = v42 >= 2;
      if (v57)
      {
        while (1)
        {
          v58 = v96;
          v59 = v96 - (_DWORD)v41;
          if (v59 >= 1 && v59 <= *(unsigned __int16 *)(v91 + 968))
          {
            strcpy(__s2, " ");
            LH_itoa(v42, &__s2[1], 0xAu);
            __strcat_chk();
            if (strstr(v90, __s2))
            {
              if (a6)
              {
                v60 = a5;
                v61 = 1;
                while (1)
                {
                  if (*v60 > 0x22u || ((1 << *v60) & 0x400200080) == 0)
                  {
                    v65 = 1;
                  }
                  else
                  {
                    v63 = v60[3] - a5[3];
                    v65 = v63 <= v41 || v63 >= v58;
                    if (!v65)
                      goto LABEL_56;
                  }
                  v60 += 8;
                  v57 = v61++ >= a6;
                  if (v57)
                    goto LABEL_56;
                }
              }
              v65 = 1;
LABEL_56:
              if (v58 > v41)
              {
                v66 = v41;
                if (v65)
                {
                  do
                  {
                    v67 = *(unsigned __int16 *)(a7 + 2 * v66++);
                    if (v67)
                      v68 = 1;
                    else
                      v68 = v66 >= v58;
                  }
                  while (!v68);
                  v65 = v67 == 0;
                }
              }
              if (v65)
              {
                strncpy(a13, &a3[v41], (unsigned __int16)(v58 - v41));
                a13[(unsigned __int16)(v58 - v41)] = 0;
                v92 = a15;
                v94 = 1;
                log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)(v91 + 16) + 32), 110, (uint64_t)"%s%s %s%s %s%s", v69, v70, v71, v72, v73, "BEG");
                *((_QWORD *)&v83 + 1) = a16;
                *(_QWORD *)&v83 = &v92;
                *(_QWORD *)&v82 = &v94;
                *((_QWORD *)&v82 + 1) = v84;
                matched = udwl_MatchUdctWord(*(_QWORD *)(v91 + 16), *(_QWORD *)(v91 + 944), *(_QWORD *)(v91 + 952), *(_QWORD *)(v91 + 960), 1, a13, a9, a10, v82, v83, a17, (uint64_t)&v93, 2, 0, 0);
                v86 = 0;
                if ((matched & 0x1FFF) != 0x14)
                {
                  v52 = matched;
                  if ((matched & 0x80000000) != 0)
                  {
                    v21 = v91;
                    v28 = v84;
                    goto LABEL_74;
                  }
                  log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)(v91 + 16) + 32), 110, (uint64_t)"%s%s %s%u %s%d %s%s %s%s", v75, v76, v77, v78, v79, "END");
                  *a18 = 1;
                  *a11 = v41;
                  *a12 = v58;
                  v86 = v52;
                  *a14 = v58 - v41;
                }
              }
            }
          }
          hlp_Skip(2, -1, a3, &v96, v41, a4);
          hlp_Skip(1, -1, a3, &v96, v41, a4);
          v56 = *a18 == 0;
          if (!*a18 && (--v42 & 0xFFFE) != 0)
            continue;
          break;
        }
      }
      v52 = v86;
      v21 = v91;
      v28 = v84;
      if (v56)
        goto LABEL_71;
    }
    else
    {
      v52 = 2323652618;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(v21 + 16) + 32), (uint64_t)"FE_UDWL", 40000, 0, v34, v35, v36, v37, v81);
      if (!*a18)
      {
LABEL_71:
        if (v95 >= 2u)
          log_OutText(*(_QWORD *)(*(_QWORD *)(v21 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"lookup UMW: no UMW found", v53, v54, v55, (uint64_t)a13);
        *a13 = 0;
LABEL_74:
        heap_Free(*(_QWORD **)(*(_QWORD *)(v21 + 16) + 8), (uint64_t)v90);
        goto LABEL_75;
      }
    }
    log_OutText(*(_QWORD *)(*(_QWORD *)(v21 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"lookup UMW: '%s': found", v53, v54, v55, (uint64_t)a13);
    goto LABEL_74;
  }
  v52 = 2323652618;
  log_OutPublic(*(_QWORD *)(v27 + 32), (uint64_t)"FE_UDWL", 40000, 0, v23, v24, v25, v26, v81);
  return v52;
}

uint64_t fe_udwl_MatchUDctWord(uint64_t *a1, int a2, int a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, _WORD *a12, _WORD *a13)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t matched;
  uint64_t **v31;
  __int128 v33;

  if ((safeh_HandleCheck((uint64_t)a1, a2, 62346, 976) & 0x80000000) != 0)
    return 2323652616;
  log_OutTraceTuningData(*(uint64_t ***)(a1[2] + 32), 107, (uint64_t)"%s%s %s%s %s%s", v20, v21, v22, v23, v24, "BEG");
  *(_QWORD *)&v33 = a7;
  *((_QWORD *)&v33 + 1) = a8;
  matched = udwl_MatchUdctWord(a1[2], a1[118], a1[119], a1[120], a3, a4, a5, a6, v33, a9, a10, a11, 1, a12, a13);
  v31 = *(uint64_t ***)(a1[2] + 32);
  if ((matched & 0x80000000) != 0)
    log_OutTraceTuningData(v31, 107, (uint64_t)"%s%s %s%u", v25, v26, v27, v28, v29, "END");
  else
    log_OutTraceTuningData(v31, 107, (uint64_t)"%s%s %s%u %s%d %s%s %s%s", v25, v26, v27, v28, v29, "END");
  return matched;
}

uint64_t hlp_InsertLangMarker(uint64_t a1, const char *a2, int a3, int a4, uint64_t *a5, uint64_t *a6, int a7, unsigned int a8, _WORD *a9)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v38;

  v17 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), *a5, 8 * ((unsigned __int16)*a9 + a7) + 8);
  if (!v17
    || (*a5 = v17,
        (v22 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), *a6, 4 * ((unsigned __int16)*a9 + a7) + 4)) == 0))
  {
    v34 = 2323652618;
    v24 = *(_QWORD *)(a1 + 16);
LABEL_7:
    log_OutPublic(*(_QWORD *)(v24 + 32), (uint64_t)"FE_UDWL", 40000, 0, v18, v19, v20, v21, v38);
    return v34;
  }
  *a6 = v22;
  *(_DWORD *)(v22 + 4 * ((unsigned __int16)*a9 + a7)) = 0;
  v23 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 32);
  v24 = *(_QWORD *)(a1 + 16);
  if (!v23)
  {
    v34 = 2323652618;
    goto LABEL_7;
  }
  v25 = v23;
  v26 = *(_QWORD **)(v24 + 8);
  v27 = strlen(a2);
  v28 = (char *)heap_Calloc(v26, (v27 + 1), 1);
  if (v28)
  {
    v33 = strcpy(v28, a2);
    v34 = 0;
    *(_QWORD *)(v25 + 24) = v33;
    *(_DWORD *)v25 = 36;
    *(_DWORD *)(v25 + 4) = a3;
    *(_DWORD *)(v25 + 8) = 0;
    *(_DWORD *)(v25 + 12) = a4;
    v35 = (unsigned __int16)*a9;
    v36 = v35 + a8;
    *(_QWORD *)(*a5 + 8 * v36) = v25;
    *(_DWORD *)(v25 + 16) = 0;
    *(_DWORD *)(*a6 + 4 * v36) = 1;
    *a9 = v35 + 1;
  }
  else
  {
    v34 = 2323652618;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 40000, 0, v29, v30, v31, v32, v38);
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v25);
  }
  return v34;
}

uint64_t stableArraySort(uint64_t result, int a2, int a3)
{
  signed int v3;
  unsigned int v4;
  __int128 *v5;
  signed int v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (a2 < a3)
  {
    v3 = a2;
    do
    {
      if (v3 >= a2)
      {
        v4 = v3;
        do
        {
          v5 = (__int128 *)(result + 32 * (v4 + 1));
          v6 = v4;
          v7 = (__int128 *)(result + 32 * v4);
          if (*((_DWORD *)v5 + 3) >= *((_DWORD *)v7 + 3))
            break;
          v9 = *v5;
          v8 = v5[1];
          v10 = v7[1];
          *v5 = *v7;
          v5[1] = v10;
          *v7 = v9;
          v7[1] = v8;
          v4 = v6 - 1;
        }
        while (v6 > a2);
      }
      ++v3;
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t fe_udwl_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 62346, 976) & 0x80000000) != 0)
    return 2323652616;
  else
    return synstrmaux_CloseStreams((_WORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
}

uint64_t fe_udwl_ResourceTypes(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t result;

  if ((safeh_HandleCheck(a1, a2, 62346, 976) & 0x80000000) != 0)
    return 2323652616;
  result = 0;
  *a3 = fe_udwl_ResourceTypes_SZ_FE_UDWL_CONTENT_TYPES_DCTEG;
  return result;
}

uint64_t fe_udwl_ResourceUnload(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if ((safeh_HandleCheck((uint64_t)a1, a2, 62346, 976) & 0x80000000) != 0)
    return 2323652616;
  v7 = a1[118];
  if (!v7)
    return 2323652616;
  else
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v7 + 64))(a1[119], a1[120], a3, a4);
}

uint64_t fe_udwl_IsUDictAvailable(_QWORD *a1, int a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = safeh_HandleCheck((uint64_t)a1, a2, 62346, 976);
  if ((v5 & 0x80000000) != 0)
    return 2323652616;
  v6 = v5;
  *a3 = 1;
  v7 = a1[118];
  if (!v7 || !(*(unsigned int (**)(_QWORD, _QWORD))(v7 + 80))(a1[119], a1[120]))
    *a3 = 0;
  return v6;
}

uint64_t fe_udwl_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2323652609;
  result = 0;
  *a2 = &IFeUdwl;
  return result;
}

BOOL hlp_Skip(int a1, int a2, _BYTE *a3, unsigned __int16 *a4, unsigned int a5, uint64_t a6)
{
  unsigned int v10;
  unsigned __int16 v11;
  unsigned __int16 PreviousUtf8OffsetLimit;
  unsigned int v13;
  unsigned __int16 v14;
  unsigned int v15;
  unsigned __int16 NextUtf8OffsetLimit;
  unsigned __int16 v17;

  v10 = *a4;
  if (a1 == 1)
  {
    if (a2 == 1)
    {
      if (v10 < a6)
      {
        v15 = *a4;
        do
        {
          if (!utf8_BelongsToSet(0, a3, v15, a6))
            break;
          NextUtf8OffsetLimit = utf8_GetNextUtf8OffsetLimit(a3, *a4, a6);
          v15 = NextUtf8OffsetLimit;
          *a4 = NextUtf8OffsetLimit;
        }
        while (NextUtf8OffsetLimit < a6);
      }
    }
    else if (a2 == -1)
    {
      do
      {
        v11 = *a4;
        PreviousUtf8OffsetLimit = utf8_GetPreviousUtf8OffsetLimit((uint64_t)a3, *a4, a6);
        *a4 = PreviousUtf8OffsetLimit;
      }
      while (PreviousUtf8OffsetLimit > a5 && utf8_BelongsToSet(0, a3, PreviousUtf8OffsetLimit, a6));
LABEL_22:
      *a4 = v11;
    }
  }
  else if (a2 == -1)
  {
    if (v10 > a5)
    {
      do
      {
        v11 = *a4;
        v17 = utf8_GetPreviousUtf8OffsetLimit((uint64_t)a3, *a4, a6);
        *a4 = v17;
      }
      while (v17 > a5 && !utf8_BelongsToSet(0, a3, v17, a6));
      goto LABEL_22;
    }
  }
  else if (a2 == 1 && v10 < a6)
  {
    v13 = *a4;
    do
    {
      if (utf8_BelongsToSet(0, a3, v13, a6))
        break;
      v14 = utf8_GetNextUtf8OffsetLimit(a3, *a4, a6);
      v13 = v14;
      *a4 = v14;
    }
    while (v14 < a6);
  }
  return v10 != *a4;
}

uint64_t fe_udwl_ResourceLoad(uint64_t *a1, int a2, char *a3, const char *a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t Str;
  char *v31;
  char *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int v40[2];
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char __s[1024];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  bzero(__s, 0x400uLL);
  v38 = 0;
  v39 = 0;
  v14 = safeh_HandleCheck((uint64_t)a1, a2, 62346, 976);
  if ((v14 & 0x80000000) != 0)
    return 2323652616;
  *(_QWORD *)a7 = 0;
  *(_DWORD *)(a7 + 8) = 0;
  if (!a3)
    goto LABEL_38;
  v20 = v14;
  if (a4)
  {
    v21 = a6 != 0;
    if (a5 || !a6)
      goto LABEL_11;
LABEL_38:
    log_OutPublic(*(_QWORD *)(a1[2] + 32), (uint64_t)"FE_UDWL", 40001, 0, v16, v17, v18, v19, v37);
    return 2323652615;
  }
  if (!a5 || !a6)
    goto LABEL_38;
  v21 = 1;
LABEL_11:
  v43 = 0;
  v44 = a3;
  if (a5 != 0 && v21)
    v22 = 0;
  else
    v22 = a4;
  *(_QWORD *)v40 = 0;
  v41[0] = v22;
  v41[1] = a4;
  v42 = a5;
  LODWORD(v43) = a6;
  log_OutTraceTuningData(*(uint64_t ***)(a1[2] + 32), 101, (uint64_t)"%s%s %s%s %s%s", v15, v16, v17, v18, v19, "BEG");
  if (v21 || !strstr(a3, ";loader=broker"))
    goto LABEL_30;
  v28 = brk_DataOpenEx(*(_QWORD *)(a1[2] + 24), (uint64_t)a4, 1, (uint64_t)&v39);
  v29 = v28;
  if (a4 && v28 < 0)
  {
    Str = paramc_ParamGetStr(*(_QWORD *)(a1[2] + 40), (uint64_t)"langcode", v40);
    if ((Str & 0x80000000) != 0)
    {
LABEL_32:
      v20 = Str;
      goto LABEL_33;
    }
    if ((brokeraux_ComposeBrokerString(a1[2], a4, 0, 1, *(char **)v40, 0, 0, __s, 0x400uLL) & 0x80000000) != 0)
    {
LABEL_40:
      v20 = 0;
      goto LABEL_33;
    }
    v29 = brk_DataOpenEx(*(_QWORD *)(a1[2] + 24), (uint64_t)__s, 1, (uint64_t)&v39);
  }
  if (v29 < 0)
    goto LABEL_40;
  v20 = brk_DataMapEx(*(_QWORD *)(a1[2] + 24), v39, 0, (uint64_t)&v43, (uint64_t)&v38);
  if ((v20 & 0x80000000) != 0)
    goto LABEL_33;
  v41[0] = 0;
  __s[0] = 0;
  __strcat_chk();
  v31 = strchr(__s, 59);
  if (v31)
    *v31 = 0;
  v32 = strstr(a3, "mode=");
  if (v32)
  {
    v33 = v32;
    if (!strchr(v32, 59))
      strlen(v33);
    __strcat_chk();
    __strncat_chk();
  }
  v44 = __s;
  v42 = v38;
LABEL_30:
  v34 = a1[118];
  if (v34)
  {
    Str = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(v34 + 56))(a1[119], a1[120], v41, a7);
    goto LABEL_32;
  }
LABEL_33:
  v35 = v39;
  if (v38)
  {
    brk_DataUnmap(*(_QWORD *)(a1[2] + 24), v39, v38);
    v38 = 0;
    v35 = v39;
  }
  if (v35)
  {
    brk_DataClose(*(_QWORD *)(a1[2] + 24), v35);
    v39 = 0;
  }
  log_OutTraceTuningData(*(uint64_t ***)(a1[2] + 32), 101, (uint64_t)"%s%s %s%u", v23, v24, v25, v26, v27, "END");
  return v20;
}

uint64_t udwl_MatchUdctWord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char *__s, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11, uint64_t a12, int a13, _WORD *a14, _WORD *a15)
{
  __int16 v16;

  v16 = 0;
  return hlp_udwl_Lookup(0, a1, a2, a3, a4, a5, __s, a7, a8, (_DWORD *)a9, *((char **)&a9 + 1), (unsigned __int16 *)a10, *((uint64_t *)&a10 + 1), a11, a12, (uint64_t)&v16, a13, a14, a15);
}

uint64_t hlp_udwl_Lookup(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char *__s, uint64_t a8, uint64_t a9, _DWORD *a10, char *a11, unsigned __int16 *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, _WORD *a18, _WORD *a19)
{
  uint64_t v19;
  uint64_t v21;
  unsigned __int16 v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t **v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  unsigned __int16 v39;
  char *v40;
  char *v41;
  const char *v42;
  __int16 v43;
  char *v44;
  unsigned __int16 *v45;
  signed int v46;
  char *v47;
  _QWORD *v48;
  char *v49;
  char *v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v61;
  BOOL v62;
  int v63;
  char *__s1;
  _QWORD v65[3];
  int v66;
  uint64_t (*v67)(char *, char *, uint64_t, _DWORD *, unsigned int *);
  char **p_s1;
  uint64_t *v69;
  int v70;
  uint64_t (*v71)(char *, char *, unsigned int, _DWORD *, unsigned int *);
  uint64_t *v72;
  uint64_t *v73;
  int v74;
  uint64_t (*v75)(char *, char *, unsigned int, _DWORD *, _DWORD *);
  uint64_t *v76;
  uint64_t *v77;
  int v78;
  uint64_t (*v79)(char *, char *, unsigned int, _DWORD *, _DWORD *);
  const char **v80;
  char **v81;
  int v82;
  uint64_t (*v83)(char *, char *, unsigned int, _DWORD *, _DWORD *);
  uint64_t *v84;
  uint64_t *v85;
  int v86;
  uint64_t v87;
  uint64_t v88[3];

  v88[1] = *MEMORY[0x1E0C80C00];
  v63 = 0;
  v87 = 0;
  v88[0] = 0;
  __s1 = __s;
  v65[0] = udwl_nbs_TakeAsIs;
  v65[1] = &__s1;
  v65[2] = &__s1;
  v66 = 0;
  v67 = udwl_nbs_TrimBlanksAndMatchingQuotes;
  p_s1 = &__s1;
  v69 = &v87;
  v70 = 0;
  v71 = udwl_nbs_TrimHeadAndTail;
  v72 = &v87;
  v73 = v88;
  v74 = 0;
  v75 = udwl_nbs_TrimTrailingDots;
  v76 = v88;
  v77 = &v87;
  v79 = udwl_nbs_ToLower;
  v80 = (const char **)v88;
  v81 = (char **)&v87;
  v78 = 0;
  v82 = 0;
  v83 = udwl_nbs_TrimTrailingDots;
  v84 = &v87;
  v85 = v88;
  if (a6)
    v19 = 6;
  else
    v19 = 1;
  v86 = 0;
  if (!__s)
    return 2323652615;
  v21 = 2323652628;
  if (a3 && a4)
  {
    v61 = v19;
    v26 = strlen(__s) + 1;
    v27 = (void *)heap_Alloc(*(_QWORD *)(a2 + 8), v26);
    v87 = (uint64_t)v27;
    if (v27 && (bzero(v27, v26), v28 = (void *)heap_Alloc(*(_QWORD *)(a2 + 8), v26), (v88[0] = (uint64_t)v28) != 0))
    {
      v57 = a5;
      v54 = a8;
      bzero(v28, v26);
      v29 = 0;
      v58 = a3;
      v55 = *a12;
      v62 = 1;
      v56 = v26;
      while (2)
      {
        v30 = 0;
        v59 = v29;
        v31 = &v65[4 * v29];
        v32 = (uint64_t **)(v31 + 2);
        while (1)
        {
          v21 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, int *, _QWORD *))*v31)(*(_QWORD *)v31[1], **v32, v26, &v63, v31 + 3);
          if ((v21 & 0x80001FFF) != 0x80000009)
            break;
          if (v30 >= 3)
            goto LABEL_53;
          v26 = 2 * v26 + 10;
          v33 = (void *)heap_Realloc(*(uint64_t **)(a2 + 8), v87, v26 & 0xFFFE);
          v87 = (uint64_t)v33;
          if (!v33)
            return 2323652618;
          bzero(v33, v26 & 0xFFFE);
          v34 = (void *)heap_Realloc(*(uint64_t **)(a2 + 8), v88[0], v26 & 0xFFFE);
          v88[0] = (uint64_t)v34;
          if (!v34)
            return 2323652618;
          ++v30;
          bzero(v34, v26 & 0xFFFE);
          if (!v62)
          {
            v62 = 0;
            v39 = v59;
            goto LABEL_32;
          }
        }
        v39 = v59;
        if (!v63
          || ((v35 = **v32, !a1)
            ? (v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *, char *, _DWORD *, uint64_t, uint64_t, uint64_t, int))(v58 + 112))(a4, v57, v35, v54, a9, a12, a11, a10, a13, a14, a15, a17)): (v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *, char *, uint64_t))(v58 + 120))(a4, v57, v35, a12, a11, a16)),
              (v21 = v36, (v36 & 0x1FFF) == 0x14) || ((v36 & 0x1FFF) != 0x404 ? (v37 = (int)v36 < 1) : (v37 = 0), !v37)))
        {
          v29 = v59 + 1;
          v62 = v59 + 1 < v61;
          if (v59 + 1 != v61)
            continue;
          v62 = 0;
          v39 = v61;
LABEL_32:
          if (*a10 == 4)
          {
            if (v39 == 4 && v63)
            {
              v40 = __s1;
              v41 = *v81;
              v42 = *v80;
              v43 = v56;
              v44 = a11;
              v45 = a12;
              v46 = v55;
LABEL_38:
              LODWORD(v21) = udwl_RestoreHeadAndTail(v44, v45, v46, v40, v43, v41, v42);
              goto LABEL_39;
            }
            if (v62)
            {
              v40 = __s1;
              v41 = *(char **)v65[4 * v39 + 2];
              v43 = v56;
              v44 = a11;
              v45 = a12;
              v46 = v55;
              v42 = 0;
              goto LABEL_38;
            }
          }
LABEL_39:
          if (v87)
            heap_Free(*(_QWORD **)(a2 + 8), v87);
          if (v88[0])
            heap_Free(*(_QWORD **)(a2 + 8), v88[0]);
          if (v62)
            return v21;
          else
            return 2323652628;
        }
        break;
      }
      if ((v36 & 0x80000000) == 0)
      {
        LODWORD(v21) = 0;
        if (a18 && a19)
        {
          v47 = __s1;
          *a18 = 0;
          v48 = &v65[4 * (unsigned __int16)v59];
          v49 = *(char **)v48[1];
          v21 = *(_QWORD *)v48[2];
          v50 = strstr(v49, (const char *)v21);
          if (v50)
          {
            v51 = (_WORD)v50 - (_WORD)v49;
            *a18 = (_WORD)v50 - (_WORD)v49;
            if ((_WORD)v59)
            {
              v51 += v70;
              *a18 = v51;
              if ((unsigned __int16)v59 != 1)
              {
                v51 += v74;
                *a18 = v51;
              }
            }
          }
          else
          {
            v51 = 0;
          }
          v52 = strlen(v47);
          v53 = strlen((const char *)v21);
          LODWORD(v21) = 0;
          *a19 = v52 - v51 - v53;
        }
        goto LABEL_32;
      }
LABEL_53:
      if (v87)
        heap_Free(*(_QWORD **)(a2 + 8), v87);
      if (v88[0])
        heap_Free(*(_QWORD **)(a2 + 8), v88[0]);
    }
    else
    {
      return 2323652618;
    }
  }
  return v21;
}

uint64_t udwl_LookupMultiWordLengths(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *__s, _DWORD *a6, char *a7, unsigned __int16 *a8, uint64_t a9)
{
  _BYTE v10[4];
  _BYTE v11[4];

  return hlp_udwl_Lookup(1, a1, a2, a3, a4, 1, __s, 0, 0, a6, a7, a8, (uint64_t)v11, (uint64_t)v10, 0, a9, 0, 0, 0);
}

uint64_t udwl_nbs_TakeAsIs(char *__s, char *a2, unsigned int a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v9;

  if (a4)
    *a4 = 0;
  v9 = 2323652615;
  if (__s && a2)
  {
    if (__s == a2)
    {
      if (a4)
        *a4 = 1;
      if (!a5)
        return 0;
    }
    else
    {
      if (strlen(__s) >= a3)
        return 2323652617;
      strcpy(a2, __s);
      if (a4)
        *a4 = 1;
      if (!a5)
        return 0;
    }
    v9 = 0;
    *a5 = 0;
  }
  return v9;
}

uint64_t udwl_nbs_TrimBlanksAndMatchingQuotes(char *__s, char *a2, uint64_t a3, _DWORD *a4, unsigned int *a5)
{
  uint64_t result;
  unsigned int NextUtf8Offset;
  unsigned int v11;
  int v12;
  unsigned int PreviousUtf8Offset;
  unsigned int v14;
  unsigned int v15;
  int v16;
  _BOOL4 v17;
  size_t v18;

  if (a4)
    *a4 = 0;
  result = 2323652615;
  if (__s && a2 && *__s)
  {
    NextUtf8Offset = 0;
    v11 = strlen(__s);
    if (!v11)
      goto LABEL_12;
    while (utf8_BelongsToSet(0, __s, NextUtf8Offset, v11))
    {
      NextUtf8Offset = utf8_GetNextUtf8Offset(__s, NextUtf8Offset);
      if (NextUtf8Offset >= v11)
        goto LABEL_12;
    }
    if (utf8_BelongsToSet(7u, __s, NextUtf8Offset, v11))
    {
      NextUtf8Offset = utf8_GetNextUtf8Offset(__s, NextUtf8Offset);
      v12 = 0;
    }
    else
    {
LABEL_12:
      v12 = 1;
    }
    if (NextUtf8Offset >= v11)
    {
      return 2323652628;
    }
    else
    {
      while (utf8_BelongsToSet(0, __s, NextUtf8Offset, v11))
      {
        NextUtf8Offset = utf8_GetNextUtf8Offset(__s, NextUtf8Offset);
        if (NextUtf8Offset >= v11)
          return 2323652628;
      }
      if (a5)
        *a5 = NextUtf8Offset;
      PreviousUtf8Offset = v11;
      do
      {
        v14 = PreviousUtf8Offset;
        if (PreviousUtf8Offset <= NextUtf8Offset)
        {
          v17 = 1;
          goto LABEL_25;
        }
        PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)__s, PreviousUtf8Offset);
      }
      while (utf8_BelongsToSet(0, __s, PreviousUtf8Offset, v11));
      v15 = utf8_GetPreviousUtf8Offset((uint64_t)__s, v14);
      v16 = utf8_BelongsToSet(7u, __s, v15, v11);
      v17 = v16 == 0;
      if (v16)
        v14 = v15;
      do
      {
LABEL_25:
        v18 = v14 - NextUtf8Offset;
        if (v14 <= NextUtf8Offset)
          break;
        v14 = utf8_GetPreviousUtf8Offset((uint64_t)__s, v14);
      }
      while (utf8_BelongsToSet(0, __s, v14, v11));
      if ((_DWORD)v18 == v11)
      {
        strcpy(a2, __s);
      }
      else
      {
        strncpy(a2, &__s[NextUtf8Offset], v18);
        a2[v18] = 0;
        if (a4)
          *a4 = 1;
      }
      if (v12 | v17)
        return 2323652628;
      else
        return 0;
    }
  }
  return result;
}

uint64_t udwl_nbs_TrimHeadAndTail(char *__s, char *a2, unsigned int a3, _DWORD *a4, unsigned int *a5)
{
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int WCharFromUtf8;
  unsigned int PreviousUtf8Offset;
  unsigned int NextUtf8Offset;
  unsigned int v17;
  int v18;
  unsigned int v19;

  if (a4)
    *a4 = 0;
  v10 = 2323652615;
  if (__s && a2 && *__s)
  {
    v11 = strlen(__s);
    if (!v11)
      return 2323652628;
    v12 = 0;
    while (1)
    {
      WCharFromUtf8 = utf8_GetWCharFromUtf8(__s, v12, v11);
      if (WCharFromUtf8 <= 129)
      {
        if (((WCharFromUtf8 - 60) > 0x3F
           || ((1 << (WCharFromUtf8 - 60)) & 0x8000000180000001) == 0)
          && (WCharFromUtf8 - 39) >= 2)
        {
LABEL_20:
          if (a5)
            *a5 = v12;
          PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)__s, v11);
          NextUtf8Offset = v11;
          if (v12 < v11)
          {
            v17 = v11;
            do
            {
              NextUtf8Offset = v17;
              v17 = PreviousUtf8Offset;
              v18 = utf8_GetWCharFromUtf8(__s, PreviousUtf8Offset, v11);
              if (((v18 - 33) > 0x3C || ((1 << (v18 - 33)) & 0x1800000066000947) == 0)
                && ((v18 - 125) > 0x3E
                 || ((1 << (v18 - 125)) & 0x4080000000A000A1) == 0)
                && ((v18 - 8217) > 0x21 || ((1 << (v18 - 25)) & 0x200000055) == 0)
                && utf8_GetWCharFromUtf8(__s, v17, v11) != 46)
              {
                break;
              }
              PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)__s, v17);
              NextUtf8Offset = v17;
            }
            while (v17 > v12);
          }
          if (utf8_GetWCharFromUtf8(__s, NextUtf8Offset, v11) == 46)
            NextUtf8Offset = utf8_GetNextUtf8Offset(__s, NextUtf8Offset);
          v19 = NextUtf8Offset - v12;
          if (a4 && v19 != v11)
            *a4 = 1;
          v10 = 2323652617;
          if (NextUtf8Offset != v12 && v19 < a3)
          {
            v10 = 0;
            strncpy(a2, &__s[v12], NextUtf8Offset - v12)[v19] = 0;
          }
          return v10;
        }
      }
      else if (((WCharFromUtf8 - 130) > 0x3D
              || ((1 << (WCharFromUtf8 + 126)) & 0x2004020080028005) == 0)
             && ((WCharFromUtf8 - 8216) > 0x21
              || ((1 << (WCharFromUtf8 - 24)) & 0x200000055) == 0))
      {
        goto LABEL_20;
      }
      v12 = utf8_GetNextUtf8Offset(__s, v12);
      if (v12 >= v11)
        return 2323652628;
    }
  }
  return v10;
}

uint64_t udwl_nbs_TrimTrailingDots(char *__s, char *a2, unsigned int a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int PreviousUtf8Offset;
  unsigned int v14;

  if (a4)
    *a4 = 0;
  v10 = 2323652615;
  if (__s && a2 && *__s)
  {
    v11 = strlen(__s);
    v12 = v11;
    if (a5)
      *a5 = 0;
    PreviousUtf8Offset = v11;
    do
    {
      v14 = PreviousUtf8Offset;
      if (!PreviousUtf8Offset)
        break;
      PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)__s, PreviousUtf8Offset);
    }
    while (utf8_GetWCharFromUtf8(__s, PreviousUtf8Offset, v12) == 46);
    if (a4 && v14 != v12)
      *a4 = 1;
    if (v14 >= a3)
    {
      return 2323652617;
    }
    else
    {
      strncpy(a2, __s, v14);
      v10 = 0;
      a2[v14] = 0;
    }
  }
  return v10;
}

uint64_t udwl_nbs_ToLower(char *__s, char *a2, unsigned int a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int NextUtf8Offset;
  size_t v14;
  int v15;
  size_t v16;
  char __sa[10];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a4)
    *a4 = 0;
  v10 = 2323652615;
  if (__s && a2 && *__s)
  {
    v11 = strlen(__s);
    v12 = v11;
    if (a5)
      *a5 = 0;
    *a2 = 0;
    if (v11)
    {
      NextUtf8Offset = 0;
      v14 = a3;
      while (1)
      {
        v15 = utf8_ToLower(__s, NextUtf8Offset, (uint64_t)__sa);
        if (a4 && v15 == 1)
          *a4 = 1;
        v16 = strlen(__sa);
        if (strlen(a2) + v16 >= v14)
          break;
        strcat(a2, __sa);
        NextUtf8Offset = utf8_GetNextUtf8Offset(__s, NextUtf8Offset);
        if (NextUtf8Offset >= v12)
          return 0;
      }
      return 2323652617;
    }
    else
    {
      return 0;
    }
  }
  return v10;
}

uint64_t udwl_RestoreHeadAndTail(char *a1, _WORD *a2, signed int a3, char *__s1, __int16 a5, char *__s2, const char *a7)
{
  char *v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  unsigned __int16 v20;
  size_t v21;
  int v22;
  char *v23;
  int v24;

  v14 = strstr(__s1, __s2);
  if (v14)
  {
    v15 = (unsigned __int16)((_WORD)v14 - (_WORD)__s1);
  }
  else if (a7)
  {
    v16 = strstr(__s1, a7);
    if (v16)
      v15 = (unsigned __int16)((_WORD)v16 - (_WORD)__s1);
    else
      v15 = 0;
  }
  else
  {
    v15 = 0;
  }
  v17 = 2323652615;
  if (a1 && a2 && __s1 && __s2)
  {
    v18 = a5 - 1;
    v19 = strlen(__s2);
    v20 = v19;
    v21 = (unsigned __int16)*a2;
    if ((int)(v21 + v18 - v19) <= a3)
    {
      v22 = v19;
      v23 = &a1[v15];
      if (v15)
      {
        memmove(&a1[v15], a1, v21);
        memmove(a1, __s1, v15);
        LODWORD(v21) = (unsigned __int16)*a2;
      }
      v24 = v18 - v22;
      if ((int)(v24 - v15) >= 1)
      {
        memmove(&v23[v21], &__s1[v15 + v20], v24 - v15);
        LOWORD(v21) = *a2;
      }
      v17 = 0;
      *a2 = v21 + v24;
    }
    else
    {
      return 2323652617;
    }
  }
  return v17;
}

uint64_t unixlit_replace_utf8char(unsigned __int8 *a1, unsigned __int8 *a2)
{
  __int16 v4;
  uint64_t result;
  int v6;
  int v7;
  const char *v8;
  size_t v9;
  uint64_t v10;

  v4 = utf8_determineUTF8CharLength(*a1);
  result = utf8_determineUTF8CharLength(*a2);
  v6 = (_DWORD)result << 16;
  v7 = (__int16)result;
  if ((__int16)result != v4)
  {
    v8 = (const char *)&a1[v4];
    v9 = strlen(v8);
    result = (uint64_t)memmove(&a1[v7], v8, v9 + 1);
  }
  if (v6 >= 1)
  {
    v10 = 0;
    do
    {
      a1[v10] = a2[v10];
      ++v10;
    }
    while (v7 > (unsigned __int16)v10);
  }
  return result;
}

uint64_t fe_unixlit_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t Object;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  unsigned int v22;
  char v23;
  __int16 v24;
  _BYTE **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v28 = 0;
  v29 = 0;
  v5 = 2321555463;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v24 = 0;
  v23 = 0;
  if (!a5)
    return v5;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v29);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = objc_GetObject(v29[6], (uint64_t)"SYNTHSTREAM", &v28);
  if ((inited & 0x80000000) != 0)
    return inited;
  Object = objc_GetObject(v29[6], (uint64_t)"FE_DEPES", &v26);
  v9 = v29[6];
  if ((Object & 0x80000000) != 0)
  {
    v20 = "SYNTHSTREAM";
LABEL_29:
    objc_ReleaseObject(v9, (uint64_t)v20);
    return Object;
  }
  v10 = objc_GetObject(v9, (uint64_t)"FE_DCTLKP", &v27);
  if ((v10 & 0x80000000) != 0)
  {
    Object = v10;
    objc_ReleaseObject(v29[6], (uint64_t)"SYNTHSTREAM");
    v9 = v29[6];
    v20 = "FE_DEPES";
    goto LABEL_29;
  }
  v11 = heap_Alloc(v29[1], 984);
  if (v11)
  {
    v16 = v11;
    *(_QWORD *)v11 = v29;
    *(_QWORD *)(v11 + 8) = 0;
    *(_DWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 56) = *(_QWORD *)(v28 + 8);
    v17 = v27;
    v18 = *(_QWORD *)(v27 + 8);
    *(_QWORD *)(v11 + 24) = v18;
    *(_OWORD *)(v11 + 8) = *(_OWORD *)(v17 + 16);
    v19 = v26;
    *(_QWORD *)(v11 + 48) = *(_QWORD *)(v26 + 8);
    *(_OWORD *)(v11 + 32) = *(_OWORD *)(v19 + 16);
    *(_QWORD *)(v11 + 952) = 0;
    *(_DWORD *)(v11 + 960) = 0;
    *(_QWORD *)(v11 + 968) = 0;
    *(_WORD *)(v11 + 976) = 0;
    if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE ***, __int16 *, char *))(v18 + 96))(*(_QWORD *)(v11 + 8), *(_QWORD *)(v11 + 16), "fecfg", "uselatin", &v25, &v24, &v23) & 0x80000000) != 0)
    {
      fe_unixlit_ObjClose(*(_QWORD *)a5, *(_QWORD *)(a5 + 8));
      *(_QWORD *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
    }
    if (v24 == 1 && v25 && **v25 == 49)
      *(_DWORD *)(v16 + 952) = 1;
    v24 = 0;
    if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE ***, __int16 *, char *))(*(_QWORD *)(v16 + 24) + 96))(*(_QWORD *)(v16 + 8), *(_QWORD *)(v16 + 16), "fecfg", "unixlitlatinsp", &v25, &v24, &v23) & 0x80000000) != 0)
    {
      fe_unixlit_ObjClose(*(_QWORD *)a5, *(_QWORD *)(a5 + 8));
      *(_QWORD *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
    }
    if (v24 == 1 && v25 && **v25 == 49)
      *(_DWORD *)(v16 + 956) = 1;
    v24 = 0;
    v5 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE ***, __int16 *, char *))(*(_QWORD *)(v16 + 24) + 96))(*(_QWORD *)(v16 + 8), *(_QWORD *)(v16 + 16), "fecfg", "lookupa2z", &v25, &v24, &v23);
    if ((v5 & 0x80000000) != 0)
    {
      fe_unixlit_ObjClose(*(_QWORD *)a5, *(_QWORD *)(a5 + 8));
      *(_QWORD *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
    }
    if (v24 == 1 && v25 && **v25 == 49)
      *(_DWORD *)(v16 + 960) = 1;
    *(_QWORD *)a5 = v16;
    *(_DWORD *)(a5 + 8) = 62345;
    synstrmaux_InitStreamOpener(v16 + 64, *(_QWORD *)(*(_QWORD *)v16 + 32), (uint64_t)"FE_UNIXLIT");
  }
  else
  {
    log_OutPublic(v29[4], (uint64_t)"FE_UNIXLIT", 39000, 0, v12, v13, v14, v15, v22);
    objc_ReleaseObject(v29[6], (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(v29[6], (uint64_t)"FE_DEPES");
    objc_ReleaseObject(v29[6], (uint64_t)"FE_DCTLKP");
    return 2321555466;
  }
  return v5;
}

uint64_t fe_unixlit_ObjClose(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;

  result = safeh_HandleCheck(a1, a2, 62345, 984);
  if ((result & 0x80000000) != 0)
    return 2321555464;
  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 968);
    if (v4)
    {
      if (*(_WORD *)(a1 + 976))
      {
        v5 = 0;
        v6 = 0;
        do
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), *(_QWORD *)(v4 + v5));
          v7 = (_QWORD *)(*(_QWORD *)(a1 + 968) + v5);
          *v7 = 0;
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v7[1]);
          v4 = *(_QWORD *)(a1 + 968);
          *(_QWORD *)(v4 + v5 + 8) = 0;
          ++v6;
          v5 += 16;
        }
        while (v6 < *(unsigned __int16 *)(a1 + 976));
      }
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v4);
      *(_QWORD *)(a1 + 968) = 0;
    }
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"FE_DCTLKP");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"FE_DEPES");
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), a1);
    return 0;
  }
  return result;
}

uint64_t fe_unixlit_ObjReopen(uint64_t a1, int a2)
{
  uint64_t result;
  char v4;
  __int16 v5;
  _BYTE **v6;

  v6 = 0;
  v5 = 0;
  v4 = 0;
  if ((safeh_HandleCheck(a1, a2, 62345, 984) & 0x80000000) != 0)
    return 2321555464;
  synstrmaux_InitStreamOpener(a1 + 64, *(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_UNIXLIT");
  *(_QWORD *)(a1 + 952) = 0;
  *(_DWORD *)(a1 + 960) = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE ***, __int16 *, char *))(*(_QWORD *)(a1 + 24) + 96))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), "fecfg", "uselatin", &v6, &v5, &v4);
  if ((result & 0x80000000) == 0)
  {
    if (v5 == 1 && v6 && **v6 == 49)
      *(_DWORD *)(a1 + 952) = 1;
    v5 = 0;
    result = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE ***, __int16 *, char *))(*(_QWORD *)(a1 + 24) + 96))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), "fecfg", "unixlitlatinsp", &v6, &v5, &v4);
    if ((result & 0x80000000) == 0)
    {
      if (v5 == 1 && v6 && **v6 == 49)
        *(_DWORD *)(a1 + 956) = 1;
      v5 = 0;
      result = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE ***, __int16 *, char *))(*(_QWORD *)(a1 + 24) + 96))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), "fecfg", "lookupa2z", &v6, &v5, &v4);
      if ((result & 0x80000000) == 0 && v5 == 1 && v6 && **v6 == 49)
        *(_DWORD *)(a1 + 960) = 1;
    }
  }
  return result;
}

uint64_t fe_unixlit_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  if ((safeh_HandleCheck(a1, a2, 62345, 984) & 0x80000000) != 0)
    return 2321555464;
  synstrmaux_InitStreamOpener(a1 + 64, *(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_UNIXLIT");
  synstrmaux_RegisterInStream((_WORD *)(a1 + 64), (uint64_t)"text/plain;charset=utf-8", 0, a1 + 888);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 64), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    0,
    a1 + 904);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 64), (uint64_t)"text/plain;charset=utf-8", a1 + 920);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 64), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 936);
  v7 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 64), *(_QWORD *)(a1 + 56), a3, a4);
  if ((v7 & 0x80000000) != 0
    || (v7 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 48) + 104))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0, 1), (v7 & 0x80000000) != 0))
  {
    v8 = v7;
LABEL_8:
    synstrmaux_CloseStreams((_WORD *)(a1 + 64), *(_QWORD *)(a1 + 56));
    return v8;
  }
  v8 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 104))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0, 0);
  if ((v8 & 0x80000000) != 0)
    goto LABEL_8;
  return v8;
}

uint64_t unixlit_growMapCharStr(uint64_t a1, uint64_t *a2, unsigned __int16 *a3, unsigned int a4, int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t result;
  unsigned __int16 v12;
  unsigned __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  unsigned int v21;

  v5 = a5 + a4;
  v6 = *a3;
  if (a5 + a4 < v6)
    return 0;
  v12 = v6 + 32;
  if (v5 <= v12)
    v13 = v12;
  else
    v13 = v5 + 32;
  v14 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *a2, 8 * v13);
  if (v14)
  {
    *a2 = v14;
    if (a4 < v13)
    {
      v19 = (_DWORD *)(v14 + 8 * a4 + 4);
      v20 = v13 - (unint64_t)a4;
      do
      {
        *((_WORD *)v19 - 2) = 9999;
        *v19 = 0;
        v19 += 2;
        --v20;
      }
      while (v20);
    }
    result = 0;
    *a3 = v13;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_UNIXLIT", 40000, 0, v15, v16, v17, v18, v21);
    return 2321555466;
  }
  return result;
}

uint64_t unixlit_addLangStrs(uint64_t *a1, uint64_t *a2, _WORD *a3, char *__s2, _WORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v51;

  v10 = (unsigned __int16)*a3;
  if (*a3)
  {
    v11 = 0;
    v12 = *a2;
    v13 = (const char **)*a2;
    do
    {
      if (!strcmp(*v13, __s2))
      {
        v31 = 0;
        *a5 = v11;
        return v31;
      }
      ++v11;
      v13 += 2;
    }
    while (v10 != v11);
    v14 = heap_Realloc(*(uint64_t **)(*a1 + 8), v12, 16 * v10 + 17);
    if (v14)
    {
      v19 = v14;
      *a2 = v14;
      v20 = strlen(__s2);
      v21 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, v20 + 1);
      *(_QWORD *)(v19 + 16 * (unsigned __int16)*a3) = v21;
      v22 = *a1;
      if (!v21)
        goto LABEL_14;
      v23 = *(_QWORD **)(v22 + 8);
      v24 = strlen(__s2);
      v25 = heap_Calloc(v23, 1, (v24 + 1));
      v30 = (unsigned __int16)*a3;
      *(_QWORD *)(v19 + 16 * v30 + 8) = v25;
      if (!v25)
      {
        v31 = 2321555466;
        log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 40000, 0, v26, v27, v28, v29, v51);
        v32 = *(_QWORD **)(*a1 + 8);
        v33 = *(_QWORD *)(v19 + 16 * (unsigned __int16)*a3);
        goto LABEL_20;
      }
      goto LABEL_12;
    }
    v31 = 2321555466;
    v22 = *a1;
LABEL_16:
    log_OutPublic(*(_QWORD *)(v22 + 32), (uint64_t)"FE_UNIXLIT", 40000, 0, v15, v16, v17, v18, v51);
    return v31;
  }
  v34 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 17);
  v22 = *a1;
  if (!v34)
  {
LABEL_14:
    v31 = 2321555466;
    goto LABEL_16;
  }
  v19 = v34;
  v35 = *(_QWORD **)(v22 + 8);
  v36 = strlen(__s2);
  v37 = heap_Calloc(v35, 1, v36 + 1);
  *(_QWORD *)(v19 + 16 * (unsigned __int16)*a3) = v37;
  v42 = *a1;
  if (v37)
  {
    v43 = *(_QWORD **)(v42 + 8);
    v44 = strlen(__s2);
    v45 = heap_Calloc(v43, 1, (v44 + 1));
    v30 = (unsigned __int16)*a3;
    *(_QWORD *)(v19 + 16 * v30 + 8) = v45;
    if (v45)
    {
LABEL_12:
      strcpy(*(char **)(v19 + 16 * v30), __s2);
      strcpy(*(char **)(v19 + 16 * (unsigned __int16)*a3 + 8), __s2);
      v31 = 0;
      *a5 = (*a3)++;
      *a2 = v19;
      return v31;
    }
    v31 = 2321555466;
    log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 40000, 0, v46, v47, v48, v49, v51);
    heap_Free(*(_QWORD **)(*a1 + 8), *(_QWORD *)(v19 + 16 * (unsigned __int16)*a3));
  }
  else
  {
    v31 = 2321555466;
    log_OutPublic(*(_QWORD *)(v42 + 32), (uint64_t)"FE_UNIXLIT", 40000, 0, v38, v39, v40, v41, v51);
  }
  v32 = *(_QWORD **)(*a1 + 8);
  v33 = v19;
LABEL_20:
  heap_Free(v32, v33);
  return v31;
}

uint64_t unixlit_lookup(_QWORD *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  int v13;
  char v15[20];
  _BYTE v16[20];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v16[0] = 0;
  if (*a3)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      LH_itoa(a3[v12], v15, 0x10u);
      __strcat_chk();
      v12 = (unsigned __int16)++v13;
    }
    while (strlen(a3) > (unsigned __int16)v13);
  }
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _BYTE *, uint64_t, uint64_t, uint64_t))(a1[3] + 96))(a1[1], a1[2], a2, v16, a4, a5, a6);
}

uint64_t fe_unixlit_Process(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _WORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int16 v34;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  unsigned __int8 v42;
  int v43;
  unsigned int v45;
  uint64_t v46;
  uint64_t v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  uint64_t i;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unsigned __int16 v74;
  uint64_t v75;
  __int16 k;
  int *v77;
  int v78;
  int *v79;
  int v80;
  uint64_t v81;
  int *v82;
  int v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  int v87;
  int v88;
  const char *v89;
  uint64_t v90;
  _BOOL4 v91;
  int *v94;
  int v95;
  uint64_t v96;
  const char *v97;
  int v98;
  int *v99;
  uint64_t v100;
  unsigned __int8 **v101;
  const char *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  unsigned __int8 v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  _QWORD *v114;
  int v115;
  uint64_t v116;
  int *v117;
  int v118;
  uint64_t v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int *v127;
  int *v128;
  int v129;
  int v130;
  uint64_t v131;
  int v132;
  _BOOL4 v133;
  int v134;
  BOOL v135;
  int v136;
  BOOL v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _WORD *v141;
  unsigned int v142;
  unsigned __int16 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  int v148;
  char *v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  _BOOL4 v154;
  BOOL v155;
  _BOOL4 v156;
  int v157;
  int v158;
  _BOOL4 v159;
  size_t v160;
  _BYTE *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _BYTE *v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  _WORD *v173;
  unsigned int v174;
  unsigned __int16 v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  char *v179;
  char *v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  _BOOL4 v184;
  unsigned int v185;
  unsigned int v186;
  unint64_t v187;
  BOOL v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  _DWORD *v192;
  int v193;
  int v194;
  uint64_t v195;
  char *v196;
  uint64_t UTF8Char;
  char *v198;
  unsigned __int8 v199;
  char v200;
  __int16 v201;
  uint64_t v202;
  uint64_t v203;
  const char *v204;
  unsigned int v205;
  BOOL v206;
  int v207;
  int v208;
  _BOOL4 v212;
  BOOL v215;
  char *v216;
  char *v217;
  char *v218;
  char *v219;
  int v220;
  unsigned __int8 *v221;
  char *v222;
  uint64_t v223;
  int v224;
  int v225;
  size_t v226;
  __int16 v227;
  unsigned __int16 v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  int v233;
  unsigned __int16 v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  int v238;
  unsigned int v239;
  int v240;
  unsigned int v241;
  unsigned __int16 v242;
  uint64_t v243;
  uint64_t v244;
  unsigned __int16 v245;
  int v246;
  unsigned __int16 v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  size_t v252;
  unsigned __int16 v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  int v257;
  int v258;
  int v259;
  unsigned int v260;
  unsigned __int16 v261;
  uint64_t v262;
  int v263;
  __int16 v264;
  uint64_t v265;
  _WORD *v266;
  int v267;
  int v268;
  uint64_t *v269;
  uint64_t v270;
  unsigned __int16 j;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unsigned __int16 v276;
  unsigned __int16 v277;
  uint64_t v278;
  unsigned __int16 v279;
  uint64_t v280;
  unsigned int v281;
  unsigned __int16 v282;
  int *v283;
  uint64_t v284;
  int v285;
  unsigned __int16 v286;
  unsigned __int16 *v287;
  unint64_t v288;
  unsigned __int16 *v289;
  int v290;
  int v291;
  BOOL v292;
  uint64_t v294;
  _WORD *v295;
  uint64_t v296;
  unsigned __int16 v297;
  uint64_t v298;
  int v299;
  __int16 v300;
  unsigned __int16 *v301;
  int v302;
  int v303;
  uint64_t v304;
  _WORD *v305;
  unsigned int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  _DWORD *v314;
  unsigned __int16 v315;
  unsigned __int16 v316;
  unsigned __int16 v317;
  uint64_t v318;
  unsigned __int16 *v319;
  unsigned int v320;
  int v321;
  _DWORD *v322;
  int v323;
  uint64_t v324;
  int v325;
  uint64_t v326;
  _OWORD *v327;
  __int128 v328;
  _OWORD *v329;
  uint64_t v330;
  unsigned int v331;
  int v332;
  uint64_t v333;
  int v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  BOOL v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unsigned __int16 v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unsigned int v352;
  uint64_t v353;
  uint64_t v354;
  int v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  int v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  _QWORD *v364;
  _WORD *v365;
  uint64_t *v366;
  unsigned __int8 v367;
  unsigned __int8 v368;
  int v369;
  uint64_t v370;
  unsigned int v371;
  char v372;
  uint64_t v373;
  unsigned int v374;
  _BOOL4 v375;
  char *v376;
  __int16 v377;
  const char *__s;
  int *v379;
  int *v380;
  int v381;
  int v382;
  _BOOL4 v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  int v388;
  int v389;
  uint64_t v390;
  int v391;
  uint64_t v392;
  uint64_t v393;
  unsigned __int16 v394;
  uint64_t v395;
  int v396;
  int v397;
  int v398;
  int v399;
  uint64_t v400;
  unsigned __int8 v401;
  __int16 v402;
  const char **v403;
  const char *v404;
  char v405[8];
  _WORD v406[4];
  __int16 v407;
  unsigned __int16 v408;
  _WORD *v409;
  char v410[8];
  uint64_t v411;
  unsigned int v412;
  char v413[5];
  uint64_t v414;
  unsigned int v415;
  const void *v416;
  unsigned int v417;
  _BYTE v418[12];
  __int16 v419;
  char __s2[8];
  uint64_t v421;

  v421 = *MEMORY[0x1E0C80C00];
  memset(v418, 0, sizeof(v418));
  v411 = 0;
  v409 = 0;
  v408 = 0;
  v407 = 9999;
  v406[3] = 9999;
  strcpy((char *)v406, "latin");
  strcpy(v405, "normal");
  v404 = 0;
  strcpy(v410, "spell");
  strcpy(__s2, "normal");
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62345, 984) & 0x80000000) != 0)
    return 2321555464;
  v417 = 0;
  v416 = 0;
  v415 = 0;
  v414 = 0;
  v412 = 0;
  *a5 = 1;
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE *, _BYTE *))(a1[7] + 144))(a1[111], a1[112], &v418[8], v418);
  if ((v7 & 0x80000000) != 0)
    return v7;
  v8 = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE *, _BYTE *))(a1[7] + 144))(a1[113], a1[114], &v418[4], v418);
  if ((v8 & 0x80000000) != 0)
    return v8;
  if (!*(_DWORD *)&v418[8])
  {
    v43 = *(_DWORD *)v418;
    if (!*(_QWORD *)v418)
    {
      if ((paramc_ParamGetStr(*(_QWORD *)(*a1 + 40), (uint64_t)"clcpppipelinemode", &v404) & 0x80000000) != 0
        || !v404
        || !*v404)
      {
        *a5 = 0;
      }
      return v8;
    }
    if (*(_DWORD *)&v418[4])
    {
      v7 = (*(uint64_t (**)(_QWORD, _QWORD, const void **, unsigned int *))(a1[7] + 88))(a1[113], a1[114], &v416, &v415);
      if ((v7 & 0x80000000) != 0)
        return v7;
      v7 = (*(uint64_t (**)(_QWORD, _QWORD, const void *, _QWORD))(a1[7] + 104))(a1[117], a1[118], v416, v415);
      if ((v7 & 0x80000000) != 0)
        return v7;
      v8 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[7] + 96))(a1[113], a1[114], v415);
      if ((v8 & 0x80000000) != 0)
        return v8;
      v43 = *(_DWORD *)v418;
    }
    if (!v43)
      return v8;
    return synstrmaux_CloseOutStreamsOnly((_WORD *)a1 + 32, a1[7]);
  }
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t))(a1[6] + 112))(a1[4], a1[5], (char *)&v411 + 4, 1);
  if ((v7 & 0x80000000) != 0)
    return v7;
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, _QWORD))(a1[6] + 112))(a1[4], a1[5], &v411, 0);
  if ((v7 & 0x80000000) != 0)
    return v7;
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, unsigned int *))(a1[7] + 88))(a1[111], a1[112], &v414, &v417);
  if ((v7 & 0x80000000) != 0)
    return v7;
  v9 = v417;
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, const void **, unsigned int *))(a1[7] + 88))(a1[113], a1[114], &v416, &v415);
  if ((v7 & 0x80000000) != 0)
    return v7;
  v10 = v415;
  v11 = (unint64_t)v415 >> 5;
  v12 = (unsigned __int16)v11;
  v13 = (void *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, (32 * (unsigned __int16)v11) | 1);
  if (!v13)
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 39000, 0, v14, v15, v16, v17, v361);
    v25 = 0;
    v8 = 2321555466;
    goto LABEL_513;
  }
  v400 = (uint64_t)v13;
  memcpy(v13, v416, v415);
  if ((_WORD)v11)
  {
    v18 = (_DWORD *)(v400 + 16);
    v19 = (unsigned __int16)(v10 >> 5);
    do
    {
      if (*(v18 - 4) == 1)
        *v18 = 0;
      v18 += 8;
      --v19;
    }
    while (v19);
  }
  v20 = (void *)heap_Alloc(*(_QWORD *)(*a1 + 8), 8 * (unsigned __int16)v11);
  if (!v20)
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 40000, 0, v21, v22, v23, v24, v361);
LABEL_52:
    heap_Free(*(_QWORD **)(*a1 + 8), v400);
    return 2321555466;
  }
  v25 = (uint64_t)v20;
  if ((_WORD)v11)
    bzero(v20, 8 * (unsigned __int16)v11);
  v26 = *(_DWORD *)(v400 + 12);
  if (!v26)
  {
    HIDWORD(v411) = 0;
    v27 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(a1[6] + 104))(a1[4], a1[5], 0, 1);
    if ((v27 & 0x80000000) != 0)
    {
      v8 = v27;
      goto LABEL_64;
    }
  }
  v389 = v26;
  v408 = v9 + 32;
  v28 = (_WORD *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, (8 * (unsigned __int16)(v9 + 32)) | 1);
  v409 = v28;
  if (!v28)
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 40000, 0, v29, v30, v31, v32, v361);
    heap_Free(*(_QWORD **)(*a1 + 8), v25);
    goto LABEL_52;
  }
  v33 = (unsigned __int16)(v9 + 32);
  if ((_WORD)v9 != 0xFFE0)
  {
    do
    {
      *v28 = 9999;
      v28 += 4;
      --v33;
    }
    while (v33);
  }
  log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 5, 0, (uint64_t)" ", v30, v31, v32, v361);
  do
    v34 = v9;
  while (!*(unsigned __int8 *)(v414 + (unsigned __int16)v9-- - 1));
  v370 = (32 * (unsigned __int16)(v10 >> 5)) | 1;
  if (v34)
  {
    v36 = 0;
    while (1)
    {
      v37 = *(unsigned __int8 *)(v414 + v36);
      v38 = v37 > 0x20;
      v39 = (1 << v37) & 0x100002600;
      v40 = v38 || v39 == 0;
      if (v40)
        break;
      if (v34 == ++v36)
      {
        LOBYTE(v36) = v34;
LABEL_33:
        LOWORD(v41) = v34;
        v42 = v34;
        goto LABEL_66;
      }
    }
  }
  else
  {
    LOWORD(v36) = 0;
  }
  if ((unsigned __int16)v36 >= v34)
  {
    LOWORD(v41) = v36;
    v42 = v36;
  }
  else
  {
    v41 = (unsigned __int16)v36;
    while (1)
    {
      v45 = *(unsigned __int8 *)(v414 + v41);
      v38 = v45 > 0x20;
      v46 = (1 << v45) & 0x100002600;
      if (!v38 && v46 != 0)
        break;
      if (++v41 >= (unint64_t)v34)
        goto LABEL_33;
    }
    v42 = v41;
  }
LABEL_66:
  v49 = v34;
  v50 = v36;
  v394 = v34;
  if (v36 >= v34
    || v36
     + (unsigned __int16)utf8_determineUTF8CharLength(*(unsigned __int8 *)(v414 + v36)) != (unsigned __int16)v41)
  {
    goto LABEL_78;
  }
  if ((unsigned __int16)v41 < v394)
  {
    v41 = (unsigned __int16)v41;
    while (1)
    {
      v51 = *(unsigned __int8 *)(v414 + v41);
      v38 = v51 > 0x20;
      v52 = (1 << v51) & 0x100002600;
      if (v38 || v52 == 0)
        break;
      if (++v41 >= (unint64_t)v394)
        goto LABEL_77;
    }
  }
  if ((unsigned __int16)v41 == v394)
  {
LABEL_77:
    v367 = v49 - v42;
    v397 = 1;
  }
  else
  {
LABEL_78:
    v397 = 0;
    v367 = 0;
  }
  if (paramc_ParamGetStr(*(_QWORD *)(*a1 + 40), (uint64_t)"clcpppipelinemode", &v404))
    v57 = 1;
  else
    v57 = v404 == 0;
  if (!v57)
  {
    v58 = strcmp(v404, "internal");
    v59 = v397;
    if (!v58)
      v59 = 0;
    v397 = v59;
  }
  v374 = v49;
  v368 = v42;
  v369 = v50;
  v371 = v10;
  log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 5, 0, (uint64_t)"Markers IN", v54, v55, v56, v362);
  if ((_DWORD)v12)
  {
    v63 = (unsigned int *)v400;
    for (i = (unsigned __int16)(v10 >> 5); i; --i)
    {
      v65 = *(_QWORD *)(*a1 + 32);
      v66 = *v63;
      if ((_DWORD)v66 == 0x4000)
        log_OutText(v65, (uint64_t)"FE_UNIXLIT", 5, 0, (uint64_t)"Marker [type=SYNC] Ref (%u,%u) Cur(%u,%u)", v60, v61, v62, v63[1]);
      else
        log_OutText(v65, (uint64_t)"FE_UNIXLIT", 5, 0, (uint64_t)"Marker [type=%5u] Ref (%u,%u) Cur(%u,%u)", v60, v61, v62, v66);
      v67 = *v63;
      if ((int)*v63 > 33)
      {
        if (v67 != 34 && v67 != 40)
          goto LABEL_99;
      }
      else if (v67 != 7 && (v67 != 21 || !strcmp(*((const char **)v63 + 3), __s2)))
      {
        goto LABEL_99;
      }
      v397 = 0;
LABEL_99:
      v63 += 8;
    }
  }
  v68 = unixlit_addLangStrs(a1, a1 + 121, (_WORD *)a1 + 488, (char *)v406, &v407);
  if ((v68 & 0x80000000) != 0
    || (v68 = unixlit_addLangStrs(a1, a1 + 121, (_WORD *)a1 + 488, v405, &v407), (v68 & 0x80000000) != 0))
  {
    v8 = v68;
    goto LABEL_507;
  }
  v365 = a1 + 122;
  v366 = a1 + 121;
  v373 = v25;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v381 = 0;
  v388 = 0;
  v383 = 0;
  v391 = 0;
  v398 = 0;
  v376 = 0;
  v72 = 0;
  v73 = 0;
  v74 = v394;
  __s = __s2;
  v372 = 2;
  v382 = 1;
  v390 = v12;
  v75 = v400;
  k = v389;
  while (1)
  {
    v403 = 0;
    v402 = 0;
    v401 = 0;
    if (v12 > (unsigned __int16)v72)
      break;
LABEL_290:
    v157 = v70;
    v158 = v69;
LABEL_291:
    v396 = v158;
    v195 = (unsigned __int16)v73;
    if ((unsigned __int16)v73 >= v74)
    {
LABEL_522:
      for (j = v71; v12 > (unsigned __int16)v72; ++v72)
        *(_DWORD *)(v75 + 32 * (unsigned __int16)v72 + 12) = (*(_DWORD *)(v75 + 32 * (unsigned __int16)v72 + 12)
                                                              + (__int16)v398
                                                              + HIDWORD(v411)) & ~((*(_DWORD *)(v75
                                                                                              + 32
                                                                                              * (unsigned __int16)v72
                                                                                              + 12)
                                                                                  + (__int16)v398
                                                                                  + HIDWORD(v411)) >> 31);
      v272 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t))(a1[7] + 104))(a1[115], a1[116], &byte_1DEBD87CE, 1);
      if ((v272 & 0x80000000) != 0
        || (v272 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v409, &v408, j, 1), (v272 & 0x80000000) != 0)
        || (v272 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[7] + 96))(a1[111], a1[112], v417),
            (v272 & 0x80000000) != 0))
      {
        v8 = v272;
      }
      else
      {
        v276 = j + 1;
        *(_DWORD *)(v400 + 16) += (__int16)v398;
        if (!v276)
          goto LABEL_618;
        v277 = 0;
        v278 = (uint64_t)v409;
        do
        {
          v279 = v277;
          v280 = v277;
          v281 = (unsigned __int16)(v277 + 1);
          if (v281 <= v276)
            v282 = v276;
          else
            v282 = v281;
          v283 = (int *)(v278 + 4 + 8 * v279);
          v284 = v280;
          while (1)
          {
            v285 = *v283;
            v283 += 2;
            if (v285 == 1)
              break;
            if (++v284 >= (unint64_t)v276)
              goto LABEL_537;
          }
          v282 = v284;
LABEL_537:
          v286 = v276;
          if ((unsigned __int16)(v282 + 1) > v276)
            v286 = v282 + 1;
          v277 = v282;
          while (++v277 < v276)
          {
            if (*(_DWORD *)(v278 + 8 * v277 + 4) != 1)
              goto LABEL_544;
          }
          v277 = v286;
LABEL_544:
          if (v280 < v282 && v280 < v276)
          {
            v287 = (unsigned __int16 *)(v278 + 8 * v280);
            v288 = v280 + 1;
            v289 = v287;
            do
            {
              v291 = *v289;
              v289 += 4;
              v290 = v291;
              if (v291)
                v292 = v288 >= v282;
              else
                v292 = 1;
            }
            while (!v292 && v288++ < v276);
            if (!v290 && v280 < v277)
            {
              v294 = v277 - v280;
              do
              {
                *v287 = 0;
                v287 += 4;
                --v294;
              }
              while (v294);
            }
          }
        }
        while (v277 < v276);
        v295 = v409;
        v296 = v276;
        do
        {
          if (*v295 == 9999)
            *v295 = 1;
          v295 += 4;
          --v296;
        }
        while (v296);
        v297 = 0;
        LOWORD(v298) = 0;
        while (1)
        {
          v298 = (unsigned __int16)v298;
          v299 = (unsigned __int16)v409[4 * (unsigned __int16)v298];
          if (v299 != 9999)
            break;
          v300 = (unsigned __int16)v298 == 0;
          LOWORD(v298) = v298 + 1;
LABEL_571:
          v297 += v300;
          if ((unsigned __int16)v298 >= v276)
            goto LABEL_581;
        }
        v301 = &v409[4 * (unsigned __int16)v298 + 4];
        while (++v298 < (unint64_t)v276)
        {
          v302 = *v301;
          v301 += 4;
          if (v299 != v302)
          {
            v300 = 1;
            goto LABEL_571;
          }
        }
        ++v297;
LABEL_581:
        v303 = v297;
        if (!v297)
        {
LABEL_618:
          v306 = v390;
          goto LABEL_619;
        }
        v304 = 0;
        v305 = v409 + 2;
        do
        {
          log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 5, 0, (uint64_t)"LANGMAP[%u] = %s [%s]", v273, v274, v275, v304++);
          v305 += 4;
        }
        while (v276 != v304);
        v306 = v390 + v303;
        v307 = heap_Realloc(*(uint64_t **)(*a1 + 8), v400, (32 * ((_DWORD)v390 + v303)) | 1u);
        if (!v307)
          goto LABEL_642;
        v312 = v307;
        bzero((void *)(v307 + v370), ((32 * v306) | 1) - v370);
        v313 = 0;
        v314 = 0;
        v315 = 0;
        v316 = 0;
        v317 = 0;
        v318 = (uint64_t)v409;
        do
        {
          v319 = (unsigned __int16 *)(v318 + 8 * v317);
          v320 = (unsigned __int16)(v317 + 1);
          if (v320 <= v276)
            LOWORD(v320) = v276;
          while (++v317 < v276)
          {
            if (*v319 != *(unsigned __int16 *)(v318 + 8 * v317))
              goto LABEL_592;
          }
          v317 = v320;
LABEL_592:
          v321 = v316;
          if (v390 > v316)
          {
            v322 = (_DWORD *)(v312 + 32 * (v316 + v315));
            while (v322[3] <= (*(_DWORD *)(v312 + 12) + v313))
            {
              v323 = *v322;
              if (*v322 == 34)
                v314 = v322;
              v322 += 8;
              if (v323 == 21)
                v314 = 0;
              if (v390 <= (unsigned __int16)++v321)
              {
                v316 = v321;
                v321 = (unsigned __int16)v321;
                goto LABEL_602;
              }
            }
            v316 = v321;
          }
LABEL_602:
          if ((_DWORD)v390 != v321 && v316 != (unsigned __int16)(v371 >> 5))
          {
            LODWORD(v324) = v321 + v315 + (unsigned __int16)((v371 >> 5) - v316);
            v325 = (unsigned __int16)((v371 >> 5) - v316) - 1;
            do
            {
              v326 = v324;
              v324 = (v324 - 1);
              v327 = (_OWORD *)(v312 + 32 * v324);
              v328 = v327[1];
              v329 = (_OWORD *)(v312 + 32 * v326);
              *v329 = *v327;
              v329[1] = v328;
              LODWORD(v329) = (unsigned __int16)v325--;
            }
            while ((_DWORD)v329);
          }
          v330 = v312 + 32 * (v321 + v315);
          v331 = *v319;
          if (v331 == 9999)
            v331 = 1;
          *(_QWORD *)(v330 + 24) = *(_QWORD *)(*v366 + 16 * v331 + 8);
          *(_QWORD *)v330 = 36;
          v332 = *(_DWORD *)(v312 + 12) + v313;
          *(_DWORD *)(v330 + 8) = 0;
          *(_DWORD *)(v330 + 12) = v332;
          if (v314)
          {
            v333 = v314[3];
            v334 = *(_DWORD *)(v312 + 12);
            v335 = (v334 + v313);
            v336 = -v334;
            v337 = -1;
            do
            {
              ++v337;
              if (*(_DWORD *)(v318 + 8 * (v333 + v336++) + 4))
                v339 = v337 + v333 >= v335;
              else
                v339 = 1;
            }
            while (!v339);
            v314[3] = v333 + v337;
          }
          *(_DWORD *)(v330 + 16) = 0;
          ++v315;
          v313 = v317;
        }
        while (v317 < v276);
        v400 = v312;
LABEL_619:
        marker_sort(v400 + 32, (int)(v306 - 1));
        v340 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(a1[7] + 104))(a1[117], a1[118], v400, 32 * v306);
        if ((v340 & 0x80000000) == 0)
        {
          log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 5, 0, (uint64_t)"Markers OUT", v341, v342, v343, v363);
          v347 = v400;
          if (v306)
          {
            v348 = 0;
            v349 = (uint64_t)v409;
            do
            {
              v350 = v348;
              v351 = *(unsigned int *)(v347 + 32 * v348);
              if ((_DWORD)v351 == 36)
              {
                v352 = *(unsigned __int16 *)(v349
                                           + 8
                                           * (*(_DWORD *)(v347 + 32 * v350 + 12) - *(_DWORD *)(v347 + 12)));
                if (v352 == 9999)
                  v352 = 1;
                log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 5, 0, (uint64_t)"Marker [type=SET_LANG(%s)] Ref (%u,%u) Cur(%u,%u)", v344, v345, v346, *(_QWORD *)(a1[121] + 16 * v352));
              }
              else if ((_DWORD)v351 == 0x4000)
              {
                log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 5, 0, (uint64_t)"Marker[type=SYNC] Ref (%u,%u) Cur(%u,%u)", v344, v345, v346, *(unsigned int *)(v400 + 32 * v350 + 4));
              }
              else
              {
                log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 5, 0, (uint64_t)"Marker [type=%5u] Ref (%u,%u) Cur(%u,%u)", v344, v345, v346, v351);
              }
              v348 = v350 + 1;
              v347 = v400;
            }
            while (v306 > (unsigned __int16)(v350 + 1));
          }
          v340 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[7] + 96))(a1[113], a1[114], v415);
          if ((v340 & 0x80000000) == 0)
          {
            v416 = 0;
            if ((paramc_ParamGetStr(*(_QWORD *)(*a1 + 40), (uint64_t)"clcpppipelinemode", &v404)
               || !v404
               || strcmp(v404, "internal"))
              && v397
              && *(_DWORD *)(v400 + 16))
            {
              v353 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 32);
              if (v353)
              {
                v354 = v353;
                *(_DWORD *)v353 = 21;
                *(_QWORD *)(v353 + 24) = v410;
                v355 = HIDWORD(v411) + v389;
                *(_QWORD *)(v353 + 4) = (HIDWORD(v411) + v389 + v369);
                *(_DWORD *)(v353 + 12) = v355 & ~(v355 >> 31);
                *(_DWORD *)(v353 + 16) = 0;
                v356 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(a1[7] + 104))(a1[117], a1[118], v353, 32);
                heap_Free(*(_QWORD **)(*a1 + 8), v354);
                if ((v356 & 0x80000000) != 0)
                {
                  v8 = v356;
                  goto LABEL_646;
                }
                v357 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 32);
                if (v357)
                {
                  v358 = v357;
                  *(_DWORD *)v357 = 21;
                  *(_QWORD *)(v357 + 24) = __s2;
                  v359 = v367 + v368 + v389 + HIDWORD(v411);
                  *(_DWORD *)(v357 + 4) = v359;
                  *(_DWORD *)(v357 + 8) = 0;
                  *(_QWORD *)(v357 + 12) = (v359 + (__int16)v398) & ~((v359 + (__int16)v398) >> 31);
                  v360 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(a1[7] + 104))(a1[117], a1[118], v357, 32);
                  heap_Free(*(_QWORD **)(*a1 + 8), v358);
                  if ((v360 & 0x80000000) == 0)
                    goto LABEL_640;
                  v8 = v360;
LABEL_646:
                  v12 = v390;
                  v25 = v373;
LABEL_64:
                  v48 = v400;
                  goto LABEL_512;
                }
              }
LABEL_642:
              log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 39000, 0, v308, v309, v310, v311, v363);
              v12 = v390;
              v25 = v373;
              v48 = v400;
              v8 = 2321555466;
              goto LABEL_512;
            }
LABEL_640:
            LODWORD(v411) = v411 + (__int16)v398;
            v340 = (*(uint64_t (**)(_QWORD, _QWORD))(a1[6] + 104))(a1[4], a1[5]);
          }
        }
        v8 = v340;
        v12 = v390;
      }
      v25 = v373;
LABEL_507:
      v48 = v400;
      goto LABEL_512;
    }
    v387 = v71;
    v407 = 9999;
    v196 = v413;
    UTF8Char = utf8_getUTF8Char(v414, (unsigned __int16)v73, v413);
    v393 = v195;
    if (v381)
    {
      v198 = 0;
      v199 = 2;
      v376 = v413;
      goto LABEL_294;
    }
    v8 = UTF8Char;
    v204 = (const char *)(v414 + v195);
    v205 = *(unsigned __int8 *)v204;
    v206 = v205 != 32 || v382 == 0;
    v207 = v398;
    if (!v206)
    {
      v376 = 0;
      k = v389;
      goto LABEL_492;
    }
    v208 = *((_DWORD *)a1 + 240);
    v212 = v208 != 1 || v391 == 1 || v383 || v397 == 1;
    if (v208 && v212)
    {
      if (v205 == 32 && v208 == 1 && v397 == 1)
        goto LABEL_364;
    }
    else
    {
      v215 = v205 - 48 >= 0xA && (v205 & 0xFFFFFFDF) - 65 >= 0x1A;
      if (!v215 || v205 == 32)
      {
LABEL_364:
        if (*((_DWORD *)a1 + 238) == 1 && (v205 > 0x60 || v205 - 65 <= 0x19))
        {
          v140 = unixlit_addLangStrs(a1, v366, v365, (char *)v406, &v407);
          if ((v140 & 0x80000000) != 0)
            goto LABEL_509;
          v198 = 0;
          v376 = v413;
          v199 = 1;
        }
        else
        {
          v198 = 0;
          v376 = v413;
          v199 = 2;
        }
        goto LABEL_453;
      }
    }
    if (v388)
    {
      v199 = 2;
      if (!strncmp(v204, "§", 2uLL))
      {
        v198 = 0;
        v376 = v413;
LABEL_453:
        v196 = v413;
        goto LABEL_294;
      }
    }
    v48 = v400;
    if ((v8 & 0x80000000) != 0)
      goto LABEL_511;
    v402 = -1;
    v140 = unixlit_lookup(a1, (uint64_t)"utfunixlit", v413, (uint64_t)&v403, (uint64_t)&v402, (uint64_t)&v401);
    if ((v140 & 0x80000000) != 0)
      goto LABEL_509;
    if (v402)
    {
      if (v388)
        v216 = "-";
      else
        v216 = " ";
      v196 = (char *)*v403;
      if (!strncmp(*v403, "░", 3uLL) && strcmp(__s, v410))
        unixlit_replace_utf8char((unsigned __int8 *)v196, (unsigned __int8 *)v216);
      v217 = strchr(v196, v401);
      if (v217)
      {
        v218 = v217;
        v219 = v196;
        if (v217 != v196)
        {
          v220 = utf8_determineUTF8CharLength(0xE2u);
          v221 = (unsigned __int8 *)&v218[-v220];
          if (v221 >= (unsigned __int8 *)v196 && !strncmp(&v218[-v220], "░", 3uLL))
          {
            v268 = strcmp(__s, v410);
            v219 = v218;
            if (v268)
            {
              unixlit_replace_utf8char(v221, (unsigned __int8 *)v216);
              v219 = &v218[-utf8_determineUTF8CharLength(0xE2u) + 1];
            }
          }
          else
          {
            v219 = v218;
          }
        }
        *v219 = 0;
        v376 = v219 + 1;
        v222 = strchr(v219 + 1, v401);
        if (v222)
        {
          *v222 = 0;
          if (*v196)
          {
            v198 = v222 + 1;
            if (v222[1])
            {
              v172 = unixlit_addLangStrs(a1, v366, v365, v198, &v407);
              if ((v172 & 0x80000000) != 0)
                goto LABEL_578;
              if (!strcmp(v198, "normal"))
              {
                v199 = 0;
              }
              else if (!strcmp(v198, "latin"))
              {
                v199 = 1;
              }
              else
              {
                v199 = 2;
              }
            }
            else
            {
LABEL_483:
              v198 = 0;
              v199 = 2;
            }
            if (*v196)
            {
              if (!v376 || !*v376)
                v376 = v196;
              v12 = v390;
LABEL_294:
              k = v389;
              if (strcmp(v196, " ") || (_DWORD)v393 + (__int16)v398 || v397)
              {
                if (*v196 != 32)
                {
                  v70 = v157 + 1;
                  goto LABEL_369;
                }
                v70 = 0;
                if (!v388 || !(_WORD)v157)
                {
                  v396 = 0;
                  goto LABEL_369;
                }
                v40 = (unsigned __int16)v157 == (unsigned __int16)v396;
                v396 = 0;
                if (v40)
                {
                  (*(void (**)(_QWORD, _QWORD, const char *, uint64_t))(a1[7] + 104))(a1[115], a1[116], "§", 2);
                  v140 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v409, &v408, (unsigned __int16)v387, 2);
                  if ((v140 & 0x80000000) != 0)
                    goto LABEL_509;
                  v200 = 0;
                  v396 = 0;
                  v70 = 0;
                  v382 = 0;
                  v201 = v406[3];
                  v202 = (uint64_t)v409;
                  v409[4 * (unsigned __int16)v387] = v406[3];
                  *(_WORD *)(v202 + 8 * (unsigned __int16)(v387 + 1)) = v201;
                  v398 += 2;
                  k = v389;
                  v203 = (v387 + 2);
                }
                else
                {
LABEL_369:
                  if (v388)
                  {
                    v200 = 0;
                    goto LABEL_371;
                  }
                  if (v372 == 1 && !v199 || (v200 = 1, !v372) && v199 == 1)
                  {
                    v140 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(a1[7] + 104))(a1[115], a1[116], " ", 1);
                    if ((v140 & 0x80000000) != 0)
                      goto LABEL_509;
                    v140 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v409, &v408, (unsigned __int16)v387, 1);
                    if ((v140 & 0x80000000) != 0)
                      goto LABEL_509;
                    v200 = 1;
                    *(_DWORD *)&v409[4 * (unsigned __int16)v387 + 2] = 1;
                    ++v398;
                    k = v389;
                    v203 = (v387 + 1);
LABEL_383:
                    v372 = v199;
LABEL_384:
                    v195 = v393;
                    v387 = v203;
                    if (!v381 && v391 | v397 && (v391 || *(unsigned __int8 *)(v414 + v393) > 0x20u))
                    {
                      if (v383
                        && ((v238 = *(char *)(v414 + v393),
                             v239 = *(unsigned __int8 *)(v414 + v393),
                             v238 > 122)
                         || (v238 - 91) < 6u
                         || (v238 - 58) < 7u
                         || v239 < 0xE
                         || (v238 & 0xFFFFFFF0) == 0x20))
                      {
                        v398 -= utf8_determineUTF8CharLength(v239);
                      }
                      else
                      {
                        v240 = strlen(v376);
                        if ((int)Utf8_LengthInUtf8chars((unint64_t)v376, v240) < 2)
                        {
                          v244 = v387;
                        }
                        else
                        {
                          v419 = 9668;
                          utf8_Utf16ToUtf8((uint64_t)&v419, 1u, 0, (uint64_t)v413, 5u, &v412, 0);
                          v140 = (*(uint64_t (**)(_QWORD, _QWORD, char *, _QWORD))(a1[7] + 104))(a1[115], a1[116], v413, v412);
                          if ((v140 & 0x80000000) != 0)
                            goto LABEL_509;
                          v140 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v409, &v408, (unsigned __int16)v387, (unsigned __int16)v412);
                          if ((v140 & 0x80000000) != 0)
                            goto LABEL_509;
                          v241 = v412;
                          if (v412)
                          {
                            v242 = 0;
                            v243 = (uint64_t)v409;
                            LODWORD(v244) = v387;
                            do
                            {
                              if (v413[v242] == 32)
                              {
                                *(_DWORD *)(v243 + 8 * (unsigned __int16)v244 + 4) = 1;
                                v241 = v412;
                              }
                              v244 = (v244 + 1);
                              ++v242;
                            }
                            while (v241 > v242);
                          }
                          else
                          {
                            v244 = v387;
                          }
                          v398 += v241;
                          v12 = v390;
                        }
                        v252 = strlen(v376);
                        v140 = (*(uint64_t (**)(_QWORD, _QWORD, char *, size_t))(a1[7] + 104))(a1[115], a1[116], v376, v252);
                        if ((v140 & 0x80000000) != 0)
                          goto LABEL_509;
                        v253 = strlen(v376);
                        v140 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v409, &v408, (unsigned __int16)v244, v253);
                        if ((v140 & 0x80000000) != 0)
                          goto LABEL_509;
                        v254 = v253;
                        if (v253)
                        {
                          v255 = (uint64_t)v409;
                          v256 = v376;
                          do
                          {
                            v257 = *v256++;
                            if (v257 == 32)
                              *(_DWORD *)(v255 + 8 * (unsigned __int16)v244 + 4) = 1;
                            v244 = (v244 + 1);
                            --v254;
                          }
                          while (v254);
                        }
                        v258 = strlen(v376);
                        v398 += v258 - utf8_determineUTF8CharLength(*(unsigned __int8 *)(v414 + v393));
                        v259 = strlen(v376);
                        if ((int)Utf8_LengthInUtf8chars((unint64_t)v376, v259) < 2)
                        {
                          v382 = 0;
                          v387 = v244;
                        }
                        else
                        {
                          v419 = 9668;
                          utf8_Utf16ToUtf8((uint64_t)&v419, 1u, 0, (uint64_t)v413, 5u, &v412, 0);
                          v172 = (*(uint64_t (**)(_QWORD, _QWORD, char *, _QWORD))(a1[7] + 104))(a1[115], a1[116], v413, v412);
                          if ((v172 & 0x80000000) != 0)
                            goto LABEL_578;
                          v172 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v409, &v408, (unsigned __int16)v244, (unsigned __int16)v412);
                          if ((v172 & 0x80000000) != 0)
                            goto LABEL_578;
                          v260 = v412;
                          if (v412)
                          {
                            v261 = 0;
                            v262 = (uint64_t)v409;
                            do
                            {
                              if (v413[v261] == 32)
                              {
                                *(_DWORD *)(v262 + 8 * (unsigned __int16)v244 + 4) = 1;
                                v260 = v412;
                              }
                              v244 = (v244 + 1);
                              ++v261;
                            }
                            while (v260 > v261);
                          }
                          v382 = 0;
                          v398 += v260;
                          v387 = v244;
                          v12 = v390;
                        }
                        k = v389;
                        v195 = v393;
                      }
                    }
                    else
                    {
                      if ((v200 & 1) != 0 || strlen(v196) == 1 || !strchr(v196, 32) && !strchr(v196, 95))
                        goto LABEL_398;
                      if (*v196)
                      {
                        v223 = 0;
                        v224 = 0;
                        do
                        {
                          v225 = v196[v223];
                          if (v225 == 95 || v225 == 32)
                            v196[v223] = 45;
                          v223 = (unsigned __int16)++v224;
                        }
                        while (strlen(v196) > (unsigned __int16)v224);
LABEL_398:
                        if (*v196)
                        {
                          v226 = strlen(v196);
                          v8 = (*(uint64_t (**)(_QWORD, _QWORD, char *, size_t))(a1[7] + 104))(a1[115], a1[116], v196, v226);
                          if (!strcmp(v196, " "))
                          {
                            v234 = strlen(v196);
                            v140 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v409, &v408, (unsigned __int16)v387, v234);
                            if ((v140 & 0x80000000) != 0)
                              goto LABEL_509;
                            v235 = (uint64_t)v409;
                            v236 = v387;
                            if (!(_WORD)v387)
                              goto LABEL_432;
                          }
                          else
                          {
                            if (strcmp(v196, "\x15"))
                            {
                              v227 = v407;
                              if (!v198 && v407 == 9999 && v406[3] == 9999)
                              {
                                v228 = strlen(v196);
                                v140 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v409, &v408, (unsigned __int16)v387, v228);
                                v195 = v393;
                                if ((v140 & 0x80000000) != 0)
                                  goto LABEL_509;
                                v229 = v228;
                                if (v228)
                                {
                                  v230 = (uint64_t)v409;
                                  v231 = v196;
                                  LODWORD(v232) = v387;
                                  do
                                  {
                                    v233 = *v231++;
                                    if (v233 == 32)
                                      *(_DWORD *)(v230 + 8 * (unsigned __int16)v232 + 4) = 1;
                                    v232 = (v232 + 1);
                                    --v229;
                                  }
                                  while (v229);
                                  v382 = 0;
                                  v387 = v232;
                                }
                                else
                                {
                                  v382 = 0;
                                }
                              }
                              else
                              {
                                if (v407 == 9999 && v406[3] == 9999)
                                {
                                  v48 = v400;
                                  if ((v8 & 0x80000000) != 0)
                                    goto LABEL_511;
                                  v382 = 0;
                                }
                                else
                                {
                                  v246 = v406[3];
                                  v247 = strlen(v196);
                                  v172 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v409, &v408, (unsigned __int16)v387, v247);
                                  if ((v172 & 0x80000000) != 0)
                                    goto LABEL_578;
                                  if (*v196)
                                  {
                                    v248 = 0;
                                    v249 = 0;
                                    v250 = (uint64_t)v409;
                                    if (v246 == 9999)
                                      LOWORD(v246) = v227;
                                    LOWORD(v251) = v387;
                                    do
                                    {
                                      *(_WORD *)(v250 + 8 * (unsigned __int16)v251) = v246;
                                      if (v196[v248] == 32)
                                        *(_DWORD *)(v250 + 8 * (unsigned __int16)v251 + 4) = 1;
                                      v251 = (unsigned __int16)v251 + 1;
                                      v248 = (unsigned __int16)++v249;
                                    }
                                    while (strlen(v196) > (unsigned __int16)v249);
                                    v382 = 0;
                                    v387 = v251;
                                  }
                                  else
                                  {
                                    v382 = 0;
                                  }
                                  v12 = v390;
                                }
                                v195 = v393;
                              }
                              goto LABEL_477;
                            }
                            v245 = strlen(v196);
                            v140 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v409, &v408, (unsigned __int16)v387, v245);
                            if ((v140 & 0x80000000) != 0)
                              goto LABEL_509;
                            if (v406[3] != 9999)
                            {
                              v382 = 0;
                              v409[4 * (unsigned __int16)v387] = v406[3];
                              v387 = (v387 + 1);
                              goto LABEL_477;
                            }
                            v235 = (uint64_t)v409;
                            v236 = v387;
                            if (!(_WORD)v387)
                            {
LABEL_432:
                              v237 = 0;
                              goto LABEL_433;
                            }
                          }
                          v237 = (unsigned __int16)v236;
                          *(_WORD *)(v235 + 8 * (unsigned __int16)v236) = *(_WORD *)(v235
                                                                                     + 8
                                                                                     * ((unsigned __int16)v236
                                                                                      - 1));
LABEL_433:
                          v382 = 0;
                          v387 = (v236 + 1);
                          *(_DWORD *)(v235 + 8 * v237 + 4) = 1;
                        }
                      }
LABEL_477:
                      v263 = strlen(v196);
                      v398 += v263 - utf8_determineUTF8CharLength(*(unsigned __int8 *)(v414 + v195));
                      k = v389;
                    }
                    v69 = v396;
                    goto LABEL_501;
                  }
LABEL_371:
                  v203 = v387;
                }
                if (v199 < 2u || !*((_DWORD *)a1 + 239) || *v196 == 32)
                  goto LABEL_383;
                goto LABEL_384;
              }
              goto LABEL_491;
            }
          }
          v12 = v390;
          goto LABEL_490;
        }
        v12 = v390;
      }
      if (v196)
        goto LABEL_483;
    }
LABEL_490:
    k = v389;
LABEL_491:
    v207 = v398;
    v195 = v393;
LABEL_492:
    v398 = v207 - utf8_determineUTF8CharLength(*(unsigned __int8 *)(v414 + v195));
    if (*(_BYTE *)(v414 + v195) == 32)
    {
      v70 = 0;
      if (v388 && (_WORD)v157 && (unsigned __int16)v157 == (unsigned __int16)v396)
      {
        (*(void (**)(_QWORD, _QWORD, const char *, uint64_t))(a1[7] + 104))(a1[115], a1[116], "§", 2);
        v140 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v409, &v408, (unsigned __int16)v387, 2);
        if ((v140 & 0x80000000) != 0)
          goto LABEL_509;
        v264 = v406[3];
        v265 = (uint64_t)v409;
        v409[4 * (unsigned __int16)v387] = v406[3];
        *(_WORD *)(v265 + 8 * (unsigned __int16)(v387 + 1)) = v264;
        (*(void (**)(_QWORD, _QWORD, const char *, uint64_t))(a1[7] + 104))(a1[115], a1[116], " ", 1);
        v140 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v409, &v408, (unsigned __int16)(v387 + 2), 1);
        if ((v140 & 0x80000000) != 0)
          goto LABEL_509;
        v382 = 0;
        v70 = 0;
        v69 = 0;
        v266 = &v409[4 * (unsigned __int16)(v387 + 2)];
        *v266 = v264;
        *((_DWORD *)v266 + 1) = 1;
        v387 = (v387 + 3);
        v398 += 3;
        k = v389;
      }
      else
      {
        v69 = 0;
      }
    }
    else
    {
      v70 = v157 + 1;
      v69 = v396 + 1;
    }
LABEL_501:
    v267 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(v414 + v195));
    v73 = (v195 + v267);
    v74 = v394;
    v75 = v400;
    v71 = v387;
    if ((unsigned __int16)(v195 + v267) > v394)
      goto LABEL_522;
  }
  while (2)
  {
    v392 = (unsigned __int16)v72;
    v77 = (int *)(v75 + 32 * (unsigned __int16)v72);
    v79 = v77 + 3;
    v78 = v77[3];
    v80 = (unsigned __int16)v73;
    if ((unsigned __int16)v73 != (unsigned __int16)(v78 - k))
      goto LABEL_290;
    v395 = v73;
    if (v388 && (_WORD)v70 && (unsigned __int16)v70 == (unsigned __int16)v69)
    {
      v81 = v12;
      v82 = (int *)(v75 + 32 * (unsigned __int16)v72);
      v83 = v71;
      (*(void (**)(_QWORD, _QWORD, const char *, uint64_t))(a1[7] + 104))(a1[115], a1[116], "§", 2);
      v84 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v409, &v408, (unsigned __int16)v83, 2);
      if ((v84 & 0x80000000) != 0)
        goto LABEL_508;
      v382 = 0;
      v85 = v406[3];
      v86 = (uint64_t)v409;
      v409[4 * (unsigned __int16)v83] = v406[3];
      *(_WORD *)(v86 + 8 * (unsigned __int16)(v83 + 1)) = v85;
      v87 = v398 + 2;
      v78 = *v79;
      v75 = v400;
      v74 = v394;
      v73 = v395;
      v71 = (v83 + 2);
      v77 = v82;
      v12 = v81;
    }
    else
    {
      v87 = v398;
    }
    *v79 = (v78 + (__int16)v87 + HIDWORD(v411)) & ~((v78 + (__int16)v87 + HIDWORD(v411)) >> 31);
    v88 = *v77;
    if (*v77 == 36)
    {
LABEL_131:
      if ((_WORD)v73)
        goto LABEL_132;
    }
    else
    {
      if (v88 == 21)
      {
        v89 = *(const char **)(v75 + 32 * (unsigned __int16)v72 + 24);
        __s = v89;
        if (v391 == 1)
        {
          v379 = v77;
          v399 = v87;
          v90 = v71;
          v91 = !strcmp(v89, v410)
             || !strncmp(v89, "spell:", 6uLL)
             || !strcmp(v89, "alphanumeric")
             || !strcmp(v89, "digits")
             || strcmp(v89, "characters") == 0;
          v391 = v91;
          v75 = v400;
          v74 = v394;
          v73 = v395;
          v71 = v90;
          v87 = v399;
          v77 = v379;
        }
        else
        {
          v391 = 0;
        }
        goto LABEL_131;
      }
      if (v88 == 8 && (v388 | v391) == 0 && (unsigned __int16)v73 != 0)
      {
LABEL_132:
        if (*(_BYTE *)(v414 + (unsigned __int16)v73 - 1) != 32)
        {
          v81 = v12;
          v94 = v77;
          v95 = v71;
          v84 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(a1[7] + 104))(a1[115], a1[116], " ", 1);
          if ((v84 & 0x80000000) != 0
            || (v84 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v409, &v408, (unsigned __int16)v95, 1),
                (v84 & 0x80000000) != 0))
          {
LABEL_508:
            v8 = v84;
            v48 = v400;
            v12 = v81;
            goto LABEL_511;
          }
          *(_DWORD *)&v409[4 * (unsigned __int16)v95 + 2] = 1;
          ++*v79;
          ++v87;
          v77 = v94;
          v88 = *v94;
          v75 = v400;
          v74 = v394;
          v73 = v395;
          v71 = (v95 + 1);
          v12 = v81;
        }
      }
    }
    v398 = v87;
    if (v88 > 33)
    {
      v384 = v71;
      if (v88 == 34)
      {
        v149 = strstr(*(char **)(v75 + 32 * (unsigned __int16)v72 + 24), "\x14EXTCLC");
        v74 = v394;
        v73 = v395;
        v98 = 0;
        v75 = v400;
        v150 = v381;
        if (v149)
          v150 = 1;
        v381 = v150;
        v388 = 1;
        v71 = v384;
      }
      else
      {
        if (v88 != 36)
        {
          k = v389;
          goto LABEL_238;
        }
        v99 = v77;
        v100 = v75 + 32 * (unsigned __int16)v72;
        v102 = *(const char **)(v100 + 24);
        v101 = (unsigned __int8 **)(v100 + 24);
        v103 = strlen(v102);
        v104 = heap_Alloc(*(_QWORD *)(*a1 + 8), (v103 + 1));
        if (!v104)
        {
          log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 30000, 0, v105, v106, v107, v108, v363);
          v8 = 2321555466;
          goto LABEL_510;
        }
        v109 = (char *)v104;
        v110 = **v101;
        if (v110)
        {
          v111 = 0;
          v112 = 0;
          do
          {
            v109[v111] = ssft_tolower(v110);
            v111 = (unsigned __int16)++v112;
            v110 = (*v101)[(unsigned __int16)v112];
          }
          while (v110);
        }
        else
        {
          v111 = 0;
        }
        v109[v111] = 0;
        if (!strcmp(v109, "normal"))
        {
          v406[3] = 9999;
        }
        else
        {
          v151 = unixlit_addLangStrs(a1, v366, v365, v109, &v406[3]);
          if ((v151 & 0x80000000) != 0)
          {
            v8 = v151;
            heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v109);
            goto LABEL_510;
          }
        }
        heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v109);
        v98 = 0;
        *v99 = 0x4000;
        v75 = v400;
        v74 = v394;
        v152 = v400 + 32 * (unsigned __int16)v72;
        *(_DWORD *)(v152 + 16) = 0;
        *(_DWORD *)(v152 + 8) = 0;
        v71 = v384;
        v73 = v395;
      }
      goto LABEL_232;
    }
    if (v88 != 7)
    {
      if (v88 != 21)
      {
LABEL_237:
        k = v389;
        goto LABEL_238;
      }
      v96 = v71;
      v97 = *(const char **)(v75 + 32 * (unsigned __int16)v72 + 24);
      if (strcmp(v97, v410)
        && strncmp(v97, "spell:", 6uLL)
        && strcmp(v97, "alphanumeric")
        && strcmp(v97, "digits")
        && strcmp(v97, "characters"))
      {
        v381 = 0;
        v388 = 0;
        v98 = 1;
        v75 = v400;
        v74 = v394;
        v73 = v395;
        v71 = v96;
LABEL_232:
        v153 = v391;
        v154 = v391 != 0;
        v155 = (v98 & v154) == 0;
        if ((v98 & v154) != 0)
          v153 = 0;
        v391 = v153;
        v156 = v383;
        if (!v155)
          v156 = 0;
        v383 = v156;
        goto LABEL_237;
      }
      if (!strcmp(v97, "spell:alphanumeric") || !strcmp(v97, "alphanumeric") || !strcmp(v97, "digits"))
      {
        v388 = 0;
        v381 = 0;
        v383 = 1;
      }
      else
      {
        v388 = 0;
        v381 = 0;
        v383 = strcmp(v97, "characters") == 0;
      }
      v391 = 1;
      v75 = v400;
      k = v389;
      v74 = v394;
      v73 = v395;
LABEL_224:
      v71 = v96;
      goto LABEL_238;
    }
    v113 = v75 + 32 * (unsigned __int16)v72;
    v115 = *(_DWORD *)(v113 + 24);
    v114 = (_QWORD *)(v113 + 24);
    k = v389;
    if (v115 != 43)
      goto LABEL_238;
    v364 = v114;
    if ((_WORD)v73 && *(_BYTE *)(v414 + (v80 - 1)) != 32)
    {
      v116 = v12;
      v117 = v77;
      v118 = v71;
      v119 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(a1[7] + 104))(a1[115], a1[116], " ", 1);
      if ((v119 & 0x80000000) != 0
        || (v119 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v409, &v408, (unsigned __int16)v118, 1),
            (v119 & 0x80000000) != 0))
      {
        v8 = v119;
        v48 = v400;
        v12 = v116;
        goto LABEL_511;
      }
      *(_DWORD *)&v409[4 * (unsigned __int16)v118 + 2] = 1;
      ++*v79;
      v398 = v87 + 1;
      v75 = v400;
      k = v389;
      v74 = v394;
      v73 = v395;
      v71 = (v118 + 1);
      v77 = v117;
      v12 = v116;
    }
    v380 = v77;
    v120 = 0;
    v121 = 0;
    ++v72;
    v122 = 1;
    v377 = v406[3];
    v123 = v73;
    while (2)
    {
      v124 = (unsigned __int16)v123;
      v375 = (unsigned __int16)v123 < v74;
      v125 = (unsigned __int16)v123;
      v126 = (unsigned __int16)v123 - 1;
LABEL_160:
      if (v12 <= (unsigned __int16)v72)
      {
        v40 = (_DWORD)v12 == (unsigned __int16)v72;
        v133 = v40;
        if (!v40 || (unsigned __int16)v123 >= v74)
          goto LABEL_241;
        v12 = v390;
LABEL_179:
        v134 = *(unsigned __int8 *)(v414 + v125);
        if (v121)
          v135 = 1;
        else
          v135 = v134 == 32;
        if (!v135)
          v120 = 0;
        if ((v134 == 95 || v134 == 35) && (unsigned __int16)v123 != (unsigned __int16)v73)
        {
          v136 = *(unsigned __int8 *)(v414 + v126);
          v137 = (v136 - 32) > 0x3F || ((1 << (v136 - 32)) & 0x8000000000000009) == 0;
          if (v137
            && ((unsigned __int16)v123 < 4u
             || v136 != 92
             || (*(unsigned __int8 *)(v414 + (unsigned __int16)v123 - 3) | 0x20) != 0x74
             || *(_BYTE *)(v414 + (unsigned __int16)v123 - 4) != 92))
          {
            v138 = v71;
            if (v134 == 35)
              v120 = 1;
            if ((_DWORD)v122)
            {
              v139 = v124;
            }
            else
            {
              v139 = v124;
              v140 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(a1[7] + 104))(a1[115], a1[116], " ", 1);
              if ((v140 & 0x80000000) != 0)
                goto LABEL_509;
              v140 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v409, &v408, (unsigned __int16)v138, 1);
              if ((v140 & 0x80000000) != 0)
                goto LABEL_509;
              v141 = &v409[4 * (unsigned __int16)v138];
              *v141 = v377;
              *((_DWORD *)v141 + 1) = 1;
              v138 = (v138 + 1);
              ++v398;
            }
            v419 = 167;
            utf8_Utf16ToUtf8((uint64_t)&v419, 1u, 0, (uint64_t)v413, 5u, &v412, 0);
            v140 = (*(uint64_t (**)(_QWORD, _QWORD, char *, _QWORD))(a1[7] + 104))(a1[115], a1[116], v413, v412);
            if ((v140 & 0x80000000) != 0)
              goto LABEL_509;
            v140 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v409, &v408, (unsigned __int16)v138, (unsigned __int16)v412);
            if ((v140 & 0x80000000) != 0)
              goto LABEL_509;
            v142 = v412;
            v75 = v400;
            if (v412)
            {
              v143 = 0;
              v144 = (uint64_t)v409;
              k = v389;
              v74 = v394;
              v73 = v395;
              LOWORD(v71) = v138;
              v125 = (unsigned __int16)v123;
              v124 = v139;
              v126 = (unsigned __int16)v123 - 1;
              do
              {
                *(_WORD *)(v144 + 8 * (unsigned __int16)v71) = v377;
                if (v413[v143] == 32)
                {
                  *(_DWORD *)(v144 + 8 * (unsigned __int16)v71 + 4) = 1;
                  v142 = v412;
                }
                v71 = (unsigned __int16)v71 + 1;
                ++v143;
              }
              while (v142 > v143);
            }
            else
            {
              k = v389;
              v74 = v394;
              v73 = v395;
              v71 = v138;
              v125 = (unsigned __int16)v123;
              v124 = v139;
              v126 = (unsigned __int16)v123 - 1;
            }
            v382 = 0;
            v122 = 0;
            v398 += v142;
          }
        }
        if (!v121)
        {
          v385 = v71;
          v145 = v122;
          v146 = v125;
          v398 -= utf8_determineUTF8CharLength(*(unsigned __int8 *)(v414 + v125));
          v147 = *(unsigned __int8 *)(v414 + v146);
          v122 = v145;
          v148 = utf8_determineUTF8CharLength(v147);
          v74 = v394;
          v73 = v395;
          v71 = v385;
          v123 = (v123 + v148);
          v75 = v400;
          continue;
        }
        goto LABEL_160;
      }
      break;
    }
    if (*(_DWORD *)(v75 + 32 * (unsigned __int16)v72) != 7
      || v124 < (unsigned __int16)(*(_WORD *)(v75 + 32 * (unsigned __int16)v72 + 12) - k))
    {
      v127 = (int *)(v75 + 32 * (unsigned __int16)v72);
      v128 = v127 + 3;
      v129 = v127[3];
      if ((unsigned __int16)v123 == (unsigned __int16)(v129 - k))
      {
        do
        {
          v130 = *v127;
          if (*v127 == 21 || v130 == 36)
          {
            *v127 = 0x4000;
            v127[4] = 0;
            v127[2] = 0;
          }
          else if (v130 == 7)
          {
            goto LABEL_179;
          }
          *v128 = (v129 + (__int16)v398 + HIDWORD(v411)) & ~((v129 + (__int16)v398 + HIDWORD(v411)) >> 31);
          if (v12 <= (unsigned __int16)++v72)
            break;
          if ((unsigned __int16)v123 == (unsigned __int16)(*(_WORD *)(v75 + 32 * (unsigned __int16)v72 + 12) - k)
            && *(_DWORD *)(v75 + 32 * (unsigned __int16)v72) == 7)
          {
            v121 = 1;
          }
          v131 = v75 + 32 * (unsigned __int16)v72;
          v132 = *(_DWORD *)(v131 + 12);
          v128 = (int *)(v131 + 12);
          v129 = v132;
          v127 += 8;
        }
        while ((unsigned __int16)v123 == (unsigned __int16)(v132 - k));
      }
      goto LABEL_179;
    }
    v133 = v12 == (unsigned __int16)v72;
    v375 = (unsigned __int16)v123 < v74;
LABEL_241:
    v159 = (unsigned __int16)v123 == v74 && v133;
    if (v390 <= (unsigned __int16)v72 && !v159)
    {
      v12 = v390;
      goto LABEL_238;
    }
    v386 = v71;
    v160 = (unsigned __int16)v123 - (unint64_t)(unsigned __int16)v73;
    v161 = (_BYTE *)heap_Alloc(*(_QWORD *)(*a1 + 8), (int)v160 + 1);
    if (!v161)
      goto LABEL_577;
    v166 = v161;
    memcpy(v161, (const void *)(v414 + (unsigned __int16)v395), v160);
    v166[v160] = 0;
    *v380 = 34;
    *v364 = v166;
    *(_QWORD *)(v373 + 8 * v392) = v166;
    if (v120)
    {
      v167 = v400;
      v168 = v398;
      v74 = v394;
      v169 = v394;
      v71 = v386;
      goto LABEL_263;
    }
    v170 = v398;
    if (!(_DWORD)v122)
    {
      v172 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(a1[7] + 104))(a1[115], a1[116], " ", 1);
      if ((v172 & 0x80000000) == 0)
      {
        v172 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v409, &v408, (unsigned __int16)v386, 1);
        if ((v172 & 0x80000000) == 0)
        {
          v173 = &v409[4 * (unsigned __int16)v386];
          *v173 = v377;
          *((_DWORD *)v173 + 1) = 1;
          v171 = (v386 + 1);
          v170 = v398 + 1;
          goto LABEL_255;
        }
      }
LABEL_578:
      v8 = v172;
      goto LABEL_579;
    }
    v171 = v386;
LABEL_255:
    v419 = 167;
    utf8_Utf16ToUtf8((uint64_t)&v419, 1u, 0, (uint64_t)v413, 5u, &v412, 0);
    v172 = (*(uint64_t (**)(_QWORD, _QWORD, char *, _QWORD))(a1[7] + 104))(a1[115], a1[116], v413, v412);
    if ((v172 & 0x80000000) != 0)
      goto LABEL_578;
    v172 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v409, &v408, (unsigned __int16)v171, (unsigned __int16)v412);
    if ((v172 & 0x80000000) != 0)
      goto LABEL_578;
    v174 = v412;
    v167 = v400;
    v74 = v394;
    v169 = v394;
    if (v412)
    {
      v175 = 0;
      v176 = (uint64_t)v409;
      do
      {
        *(_WORD *)(v176 + 8 * (unsigned __int16)v171) = v377;
        if (v413[v175] == 32)
        {
          *(_DWORD *)(v176 + 8 * (unsigned __int16)v171 + 4) = 1;
          v174 = v412;
        }
        v171 = (unsigned __int16)v171 + 1;
        ++v175;
      }
      while (v174 > v175);
    }
    v382 = 0;
    v168 = v170 + v174;
    v71 = v171;
LABEL_263:
    if (v133)
    {
LABEL_266:
      if (v375)
      {
        v183 = (unsigned __int16)v123;
        v184 = *(unsigned __int8 *)(v414 + (unsigned __int16)v123) != 32;
        v12 = v390;
        while (*(_BYTE *)(v414 + v183) == 32)
        {
          if (v169 == ++v183)
          {
            v185 = v374;
            LOWORD(v183) = v74;
            goto LABEL_273;
          }
        }
        v185 = (unsigned __int16)v183;
      }
      else
      {
        v184 = 1;
        LOWORD(v183) = v123;
        v12 = v390;
        v185 = (unsigned __int16)v123;
      }
LABEL_273:
      if (v185 + 1 != *(_DWORD *)(v167 + 16)
        || ((v186 = *(unsigned __int8 *)(v414 + (unsigned __int16)v183),
             v38 = v186 > 0x3F,
             v187 = (1 << v186) & 0x8800400200000000,
             !v38)
          ? (v188 = v187 == 0)
          : (v188 = 1),
            v188))
      {
        if (v184)
        {
          v194 = v71;
          v140 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(a1[7] + 104))(a1[115], a1[116], " ", 1);
          if ((v140 & 0x80000000) != 0
            || (v140 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v409, &v408, (unsigned __int16)v194, 1),
                (v140 & 0x80000000) != 0))
          {
LABEL_509:
            v8 = v140;
            goto LABEL_510;
          }
          *(_DWORD *)&v409[4 * (unsigned __int16)v194 + 2] = 1;
          v96 = (v194 + 1);
          v398 = v168 + 1;
          v73 = v123;
          v75 = v400;
          k = v389;
          v74 = v394;
          goto LABEL_224;
        }
        v398 = v168;
        v73 = v123;
        v75 = v400;
        k = v389;
      }
      else
      {
        v189 = v185 + 1;
        v190 = v71;
        utf8_getUTF8Char(v414, v185, v413);
        v140 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t))(a1[7] + 104))(a1[115], a1[116], v413, 1);
        if ((v140 & 0x80000000) != 0)
          goto LABEL_509;
        v140 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v409, &v408, (unsigned __int16)v190, 1);
        if ((v140 & 0x80000000) != 0)
          goto LABEL_509;
        v398 = v168;
        v75 = v400;
        v74 = v394;
        v73 = v189;
        if (v413[0] == 32)
          *(_DWORD *)&v409[4 * (unsigned __int16)v190 + 2] = 1;
        v71 = (v190 + 1);
        v191 = v400 + 32 * (unsigned __int16)v72;
        v193 = *(_DWORD *)(v191 + 12);
        v192 = (_DWORD *)(v191 + 12);
        *v192 = v193 + 1;
        for (k = v389; v12 > (unsigned __int16)v72; ++v72)
          *(_DWORD *)(v400 + 32 * (unsigned __int16)v72 + 12) = *v192;
      }
LABEL_238:
      v69 = 0;
      v70 = 0;
      v157 = 0;
      v158 = 0;
      if (v12 <= (unsigned __int16)++v72)
        goto LABEL_291;
      continue;
    }
    break;
  }
  v177 = v71;
  v178 = strlen(__s);
  v179 = (char *)heap_Alloc(*(_QWORD *)(*a1 + 8), (v178 + 1));
  if (v179)
  {
    v180 = strcpy(v179, __s);
    v167 = v400;
    v181 = v400 + 32 * (unsigned __int16)v72;
    *(_DWORD *)v181 = 21;
    *(_QWORD *)(v181 + 24) = v180;
    *(_QWORD *)(v373 + 8 * (unsigned __int16)v72) = v180;
    v182 = *(_DWORD *)(v181 + 12) + (__int16)v168 + HIDWORD(v411);
    *(_DWORD *)(v181 + 12) = v182 & ~(v182 >> 31);
    v74 = v394;
    v169 = v394;
    v71 = v177;
    goto LABEL_266;
  }
LABEL_577:
  log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 39000, 0, v162, v163, v164, v165, v363);
  v8 = 2321555466;
LABEL_579:
  v12 = v390;
LABEL_510:
  v48 = v400;
LABEL_511:
  v25 = v373;
LABEL_512:
  heap_Free(*(_QWORD **)(*a1 + 8), v48);
LABEL_513:
  if (v409)
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v409);
  if (v25)
  {
    if (v12 >= 2)
    {
      v269 = (uint64_t *)(v25 + 8);
      v270 = v12 - 1;
      do
      {
        if (*v269)
          heap_Free(*(_QWORD **)(*a1 + 8), *v269);
        ++v269;
        --v270;
      }
      while (v270);
    }
    heap_Free(*(_QWORD **)(*a1 + 8), v25);
  }
  return v8;
}

uint64_t fe_unixlit_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 62345, 984) & 0x80000000) != 0)
    return 2321555464;
  else
    return synstrmaux_CloseStreams((_WORD *)(a1 + 64), *(_QWORD *)(a1 + 56));
}

uint64_t fe_unixlit_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2321555457;
  result = 0;
  *a2 = &IFeUnixlit;
  return result;
}

uint64_t LhpuCreate(uint64_t a1)
{
  uint64_t result;

  result = heap_Alloc(a1, 52);
  if (result)
  {
    *(_BYTE *)result = 0;
    *(_DWORD *)(result + 12) = 0;
    *(_BYTE *)(result + 18) = 0;
  }
  return result;
}

uint64_t LhpuRemove(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = *a2;
    if (v3)
    {
      heap_Free(a1, v3);
      *a2 = 0;
    }
  }
  return 0;
}

BOOL LhpuHasDurSpec(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) != 0;
}

BOOL LhpuDurSpecIsAbs(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) == 1;
}

uint64_t LhpuGetDurValue(uint64_t a1)
{
  return *(__int16 *)(a1 + 16);
}

uint64_t LhpuGetcBp(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 18);
}

uint64_t LhpuGetpBp(uint64_t a1)
{
  return a1 + 20;
}

uint64_t LhpuSetSymbol(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a3 > 9)
    return 4294967294;
  __strncpy_chk();
  result = 0;
  *(_BYTE *)(a1 + a3) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 18) = 0;
  return result;
}

uint64_t LhpuSetDurValue(uint64_t a1, char *a2)
{
  __int16 v4;
  int v5;
  uint64_t result;
  int v7;

  v4 = atoi(a2);
  *(_WORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 12) = 1;
  v5 = *a2;
  if (!v4)
  {
    v7 = 0;
    if (v5 == 48)
      return 0;
    result = 0xFFFFFFFFLL;
    goto LABEL_8;
  }
  result = 0;
  v7 = 2;
  if (v5 == 45 || v5 == 43)
LABEL_8:
    *(_DWORD *)(a1 + 12) = v7;
  return result;
}

uint64_t LhpuAddBpTime(uint64_t a1, char *a2)
{
  uint64_t v2;
  __int16 v4;
  uint64_t result;
  uint64_t v6;

  v2 = *(unsigned __int8 *)(a1 + 18);
  if (v2 > 6)
    return 0xFFFFFFFFLL;
  v4 = atoi(a2);
  result = 0;
  v6 = a1 + 4 * v2;
  *(_WORD *)(v6 + 22) = v4;
  *(_WORD *)(v6 + 20) = 0;
  *(_BYTE *)(a1 + 18) = v2 + 1;
  return result;
}

uint64_t LhpuSetBpPitch(uint64_t a1, char *a2)
{
  *(_WORD *)(a1 + 4 * *(unsigned __int8 *)(a1 + 18) + 16) = atoi(a2);
  return 0;
}

uint64_t phonmapmrk_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2322604033;
  result = 0;
  *a2 = &IPhonmapmrk;
  return result;
}

uint64_t phonmapmrk_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t Object;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;

  v5 = 2322604039;
  v31 = 0;
  v32 = 0;
  if (a5)
  {
    inited = InitRsrcFunction(a3, a4, &v32);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      *(_QWORD *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      log_OutText(*(_QWORD *)(v32 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"Entering phonmapmrk_ObjOpen", v10, v11, v12, v29);
      v13 = (_QWORD *)heap_Calloc(*(_QWORD **)(v32 + 8), 1, 912);
      if (v13)
      {
        v14 = v13;
        v15 = v32;
        v13[1] = a4;
        v13[2] = v15;
        *v13 = a3;
        Object = objc_GetObject(*(_QWORD *)(v32 + 48), (uint64_t)"SYNTHSTREAM", &v31);
        if ((Object & 0x80000000) != 0)
        {
          v5 = Object;
          log_OutPublic(*(_QWORD *)(v14[2] + 32), (uint64_t)"PHONMAP", 45101, 0, v17, v18, v19, v20, v30);
          *(_QWORD *)a5 = v14;
          *(_DWORD *)(a5 + 8) = 29349;
          phonmapmrk_ObjClose(v14, *(_QWORD *)(a5 + 8));
          v14 = 0;
          v27 = 0;
        }
        else
        {
          v14[109] = *(_QWORD *)(v31 + 8);
          v21 = objc_GetObject(*(_QWORD *)(v32 + 48), (uint64_t)"PHONMAP", &v31);
          if ((v21 & 0x80000000) != 0)
          {
            log_OutPublic(*(_QWORD *)(v14[2] + 32), (uint64_t)"PHONMAP", 45102, 0, v22, v23, v24, v25, v30);
            v5 = 0;
          }
          else
          {
            v5 = v21;
            v26 = v31;
            v14[3] = *(_QWORD *)(v31 + 8);
            *((_OWORD *)v14 + 2) = *(_OWORD *)(v26 + 16);
          }
          v27 = 29349;
        }
        *(_QWORD *)a5 = v14;
        *(_DWORD *)(a5 + 8) = v27;
        log_OutText(*(_QWORD *)(v32 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"Leaving phonmapmrk_ObjOpen: %x", v23, v24, v25, v5);
      }
      else
      {
        return 2322604042;
      }
    }
  }
  return v5;
}

uint64_t phonmapmrk_ObjClose(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = safeh_HandleCheck((uint64_t)a1, a2, 29349, 912);
  if ((v3 & 0x80000000) != 0)
    return 2322604040;
  v7 = v3;
  v8 = a1[2];
  log_OutText(*(_QWORD *)(v8 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"Entering phonmapmrk_ObjClose", v4, v5, v6, v16);
  if (a1[109])
  {
    v9 = objc_ReleaseObject(*(_QWORD *)(v8 + 48), (uint64_t)"SYNTHSTREAM");
    if (v9 >= 0)
      v7 = v7;
    else
      v7 = v9;
  }
  if (a1[3])
  {
    v10 = objc_ReleaseObject(*(_QWORD *)(v8 + 48), (uint64_t)"PHONMAP");
    if (v10 >= 0 || (int)v7 <= -1)
      v7 = v7;
    else
      v7 = v10;
  }
  heap_Free(*(_QWORD **)(v8 + 8), (uint64_t)a1);
  log_OutText(*(_QWORD *)(v8 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"Leaving phonmapmrk_ObjClose: %x", v12, v13, v14, v7);
  return v7;
}

uint64_t phonmapmrk_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  unsigned int v9;

  v8 = 1;
  v9 = 0;
  if ((safeh_HandleCheck(a1, a2, 29349, 912) & 0x80000000) != 0)
    return 2322604040;
  synstrmaux_InitStreamOpener(a1 + 48, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PHONMAP");
  if (!*(_QWORD *)(a1 + 32))
    return 0;
  result = paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"markermode", &v9);
  if ((result & 0x80000000) == 0)
  {
    if ((v9 & 4) == 0
      || (paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"phonmapmrkenabled", &v8) & 0x80000000) == 0
      && !v8)
    {
      return 0;
    }
    synstrmaux_RegisterInStream((_WORD *)(a1 + 48), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
      0,
      a1 + 880);
    synstrmaux_RegisterOutStream((_WORD *)(a1 + 48), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
      a1 + 896);
    return synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 48), *(_QWORD *)(a1 + 872), a3, a4);
  }
  return result;
}

uint64_t phonmapmrk_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _OWORD *v28;
  _DWORD *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v43;
  _BYTE v44[2];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v46 = 0;
  v47 = 0;
  v45 = 0;
  v7 = safeh_HandleCheck(a1, a2, 29349, 912);
  if ((v7 & 0x80000000) != 0)
    return 2322604040;
  v8 = v7;
  *a5 = 1;
  v9 = *(_QWORD *)(a1 + 880);
  if (v9)
  {
    v8 = (*(uint64_t (**)(uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)(a1 + 872) + 144))(v9, *(_QWORD *)(a1 + 888), (char *)&v47 + 4, &v47);
    if ((v8 & 0x80000000) != 0)
    {
LABEL_10:
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PHONMAP", 45105, "%s%x", v10, v11, v12, v13, "lhError");
      return v8;
    }
    if (HIDWORD(v47))
    {
      v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, char *))(*(_QWORD *)(a1 + 872) + 88))(*(_QWORD *)(a1 + 880), *(_QWORD *)(a1 + 888), &v46, (char *)&v47 + 4);
      if ((v14 & 0x80000000) != 0)
      {
        v8 = v14;
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PHONMAP", 45105, "%s%x", v15, v16, v17, v18, "lhError");
        return v8;
      }
      v19 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)(a1 + 872) + 112))(*(_QWORD *)(a1 + 896), *(_QWORD *)(a1 + 904), &v45, HIDWORD(v47));
      if ((v19 & 0x80000000) != 0)
      {
        v8 = v19;
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PHONMAP", 45106, "%s%x", v20, v21, v22, v23, "lhError");
        (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 872) + 96))(*(_QWORD *)(a1 + 880), *(_QWORD *)(a1 + 888), 0);
        return v8;
      }
      v24 = HIDWORD(v47);
      v25 = (unint64_t)HIDWORD(v47) >> 5;
      HIDWORD(v47) >>= 5;
      if (v24 >= 0x20)
      {
        v26 = 0;
        v27 = 0;
        do
        {
          v28 = (_OWORD *)(v45 + v26);
          v29 = (_DWORD *)(v46 + v26);
          v30 = *(_OWORD *)(v46 + v26 + 16);
          *v28 = *(_OWORD *)(v46 + v26);
          v28[1] = v30;
          if (*v29 == 33)
          {
            v43 = 0;
            *(_DWORD *)v28 = 38;
            v44[0] = v29[6];
            v44[1] = 0;
            if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _BYTE *, void **, _QWORD))(*(_QWORD *)(a1 + 24)
                                                                                              + 64))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0, v44, &v43, 0) & 0x80000000) != 0)
            {
              log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PHONMAP", 45107, "%s%u%s%x", v31, v32, v33, v34, "phonemeID");
              v35 = &szEMPTY;
            }
            else
            {
              v35 = v43;
            }
            *(_QWORD *)(v45 + v26 + 24) = v35;
            v25 = HIDWORD(v47);
          }
          ++v27;
          v26 += 32;
        }
        while (v27 < v25);
      }
      else
      {
        v26 = 0;
      }
      v36 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 872) + 120))(*(_QWORD *)(a1 + 896), *(_QWORD *)(a1 + 904), v26);
      if ((v36 & 0x80000000) != 0)
      {
        v41 = v36;
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PHONMAP", 45106, "%s%x", v37, v38, v39, v40, "lhError");
        (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 872) + 96))(*(_QWORD *)(a1 + 880), *(_QWORD *)(a1 + 888), 0);
        return v41;
      }
      v8 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 872) + 96))(*(_QWORD *)(a1 + 880), *(_QWORD *)(a1 + 888), v26);
      if ((v8 & 0x80000000) != 0)
        goto LABEL_10;
    }
    else if ((_DWORD)v47)
    {
      return synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 48), *(_QWORD *)(a1 + 872));
    }
    else
    {
      *a5 = 0;
    }
  }
  return v8;
}

uint64_t phonmapmrk_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 29349, 912) & 0x80000000) != 0)
    return 2322604040;
  else
    return synstrmaux_CloseStreams((_WORD *)(a1 + 48), *(_QWORD *)(a1 + 872));
}

void LhplGetSymbol()
{
  __asm { BR              X9 }
}

uint64_t sub_1DE6D06D4()
{
  uint64_t v0;
  char v1;
  _BYTE *v2;
  unsigned __int8 *v3;
  _BYTE *v4;
  unsigned int v5;
  unsigned int v7;
  unsigned __int8 *v8;
  uint64_t result;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  char *v15;
  int v16;
  int v17;
  char *v18;
  int v19;
  int v20;
  char v21;

  v5 = *v3;
  if (v5 <= 0x27)
  {
    if (v5 > 0xC)
    {
      if (v5 != 13 && v5 != 32)
        return 0xFFFFFFFFLL;
    }
    else if (v5 < 9 || v5 == 12)
    {
      return 0xFFFFFFFFLL;
    }
    v8 = v3 + 1;
    v7 = v3[1];
    if (v7 > 0x27)
    {
      if (v7 <= 0x2C)
      {
LABEL_44:
        if (v7 < 0x29)
          goto LABEL_84;
        if (v7 != 43)
          return 0xFFFFFFFFLL;
LABEL_48:
        v13 = v8[1];
        v10 = v8 + 1;
        if ((v13 - 48) <= 9)
        {
LABEL_49:
          v8 = v10 + 1;
          while (1)
          {
            v11 = *v8;
            if (v11 <= 0x20)
              break;
            if (v11 <= 0x2F)
              goto LABEL_55;
            ++v8;
            if (v11 >= 0x3A)
              goto LABEL_88;
          }
LABEL_65:
          if (v11 <= 0xC)
          {
            if (v11 < 9 || v11 == 12)
              return 0xFFFFFFFFLL;
            do
            {
LABEL_74:
              while (1)
              {
                v11 = *++v8;
                if (v11 > 0x1F)
                  break;
                if (v11 > 0xB)
                {
                  if (v11 != 13)
                    return 0xFFFFFFFFLL;
                }
                else if (v11 < 9)
                {
                  return 0xFFFFFFFFLL;
                }
              }
              if (v11 > 0x28)
                goto LABEL_90;
            }
            while (v11 < 0x21);
            if (v11 <= 0x27)
              return 0xFFFFFFFFLL;
            goto LABEL_84;
          }
LABEL_72:
          if (v11 == 13 || v11 >= 0x20)
            goto LABEL_74;
        }
        return 0xFFFFFFFFLL;
      }
      if (v7 == 45)
        goto LABEL_48;
      if (v7 - 48 >= 0xA)
        return 0xFFFFFFFFLL;
    }
    else
    {
      if (v7 > 0xC)
      {
        if (v7 != 32 && v7 != 13)
          return 0xFFFFFFFFLL;
      }
      else
      {
        result = 0xFFFFFFFFLL;
        if (v7 < 9 || v7 == 12)
          return result;
      }
      v8 = v3 + 2;
      v7 = v3[2];
      if (v7 <= 0x27)
      {
        do
        {
          if (v7 > 0xC)
          {
            if (v7 != 13 && v7 != 32)
              return 0xFFFFFFFFLL;
          }
          else
          {
            result = 0xFFFFFFFFLL;
            if (v7 < 9 || v7 == 12)
              return result;
          }
          v12 = *++v8;
          v7 = v12;
        }
        while (v12 < 0x28);
      }
      if (v7 <= 0x2C)
        goto LABEL_44;
      if (v7 == 45)
        goto LABEL_48;
      if (v7 - 48 > 9)
        return 0xFFFFFFFFLL;
    }
    goto LABEL_60;
  }
  if (v5 <= 0x2C)
  {
    if (v5 < 0x29)
      goto LABEL_84;
    if (v5 != 43)
      return 0xFFFFFFFFLL;
    goto LABEL_21;
  }
  if (v5 == 45)
  {
LABEL_21:
    v10 = v3 + 1;
    if (v3[1] - 48 < 0xA)
      goto LABEL_49;
    return 0xFFFFFFFFLL;
  }
  if (v5 - 48 >= 0xA)
    return 0xFFFFFFFFLL;
  v8 = v3 + 1;
  v11 = v3[1];
  if (v11 > 0x20)
  {
    if (v11 <= 0x2F)
    {
LABEL_55:
      if (v11 != 40)
        return 0xFFFFFFFFLL;
LABEL_84:
      v15 = (char *)(v3 - 1);
      do
      {
        v17 = *++v15;
        v16 = v17;
      }
      while (!memchr("0123456789+-(", v17, 0xEuLL));
      if (v16 != 40)
        LhpuSetDurValue(v0, v15);
      JUMPOUT(0x1DE6D06C0);
    }
    if (v11 >= 0x3A)
    {
LABEL_90:
      if (v11 != 93)
        return 0xFFFFFFFFLL;
LABEL_91:
      v18 = (char *)(v3 - 1);
      do
      {
        v20 = *++v18;
        v19 = v20;
      }
      while (!memchr("0123456789+-]", v20, 0xEuLL));
      if (v19 != 93)
        LhpuSetDurValue(v0, v18);
      result = 0;
      *v2 = v21 - v1;
      *v4 = (_BYTE)v8 + 1 + ~v1;
      return result;
    }
LABEL_60:
    ++v8;
    do
    {
      v11 = *v8;
      if (v11 <= 0x20)
        goto LABEL_65;
      if (v11 <= 0x2F)
        goto LABEL_55;
      ++v8;
    }
    while (v11 < 0x3A);
LABEL_88:
    if (v11 != 93)
      return 0xFFFFFFFFLL;
    LOBYTE(v8) = (_BYTE)v8 - 1;
    goto LABEL_91;
  }
  if (v11 > 0xC)
    goto LABEL_72;
  result = 0xFFFFFFFFLL;
  if (v11 >= 9 && v11 != 12)
    goto LABEL_74;
  return result;
}

uint64_t phonmap_GetLanguagesInVoiceMaps(uint64_t a1, int a2, _WORD *a3, unsigned __int16 *a4, char *a5)
{
  uint64_t v5;
  uint64_t v10;
  __int16 Size;
  size_t v12;
  uint64_t v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unsigned __int16 v20;
  size_t v21;
  uint64_t v22;
  char *__s;
  uint64_t *v24;

  v5 = 2322604039;
  if (!a3 || !a4)
    return 2322604039;
  v10 = safeh_HandleCheck(a1, a2, 29348, 624);
  if ((v10 & 0x80000000) == 0)
  {
    Size = ssftmap_GetSize(*(_QWORD *)(a1 + 56));
    *a3 = Size;
    if (!a5)
    {
      *a4 = 4 * Size;
      return v10;
    }
    v12 = *a4;
    if (v12 < 4)
      return 2322604041;
    v14 = *(_QWORD *)(a1 + 56);
    v24 = 0;
    if (v14)
    {
      *a5 = 0;
      *a4 = 1;
      if ((ssftmap_IteratorOpen(v14, 0, 1, (uint64_t)&v24) & 0x80000000) == 0)
      {
        v22 = 0;
        __s = 0;
        if ((ssftmap_IteratorNext(v24, &__s, &v22) & 0x80000000) != 0)
        {
          v18 = -1;
        }
        else
        {
          v15 = strlen(a5);
          v16 = __s;
          if (v15 + strlen(__s) + 1 > v12)
          {
            v17 = -1;
LABEL_19:
            a5[v17] = 0;
            ssftmap_IteratorClose((uint64_t)v24);
            return 2322604041;
          }
          while (1)
          {
            v19 = strcat(a5, v16);
            *(_WORD *)&a5[strlen(v19)] = 44;
            v20 = strlen(a5);
            *a4 = v20;
            if ((ssftmap_IteratorNext(v24, &__s, &v22) & 0x80000000) != 0)
              break;
            v21 = strlen(a5);
            v16 = __s;
            if (v21 + strlen(__s) + 1 > v12)
            {
              v17 = v20 - 1;
              goto LABEL_19;
            }
          }
          v18 = v20 - 1;
        }
        a5[v18] = 0;
        ssftmap_IteratorClose((uint64_t)v24);
      }
      return 0;
    }
    return v5;
  }
  return v10;
}

uint64_t phonmap_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 2)
    return 2322604033;
  result = 0;
  *a2 = &IPhonmap;
  return result;
}

uint64_t phonmap_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t Data;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t Str;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  unsigned int v33;
  __int128 v34;
  uint64_t (*v35)(const char *, const char *);
  uint64_t (*v36)(uint64_t, uint64_t, _QWORD *);
  uint64_t (*v37)();
  const char *v38;
  uint64_t v39;

  Data = 2322604038;
  v38 = 0;
  v39 = 0;
  if (a5)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v39);
    if ((inited & 0x80000000) == 0)
    {
      log_OutText(*(_QWORD *)(v39 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP ObjOpen: Begin", v10, v11, v12, v32);
      v13 = (uint64_t *)heap_Calloc(*(_QWORD **)(v39 + 8), 1, 624);
      if (v13)
      {
        v18 = v13;
        *v13 = (uint64_t)a3;
        v13[1] = a4;
        v19 = v39;
        v13[2] = v39;
        if ((paramc_ParamGetStr(*(_QWORD *)(v19 + 40), (uint64_t)"fevoice", &v38) & 0x80000000) != 0
          && (Str = paramc_ParamGetStr(*(_QWORD *)(v39 + 40), (uint64_t)"voice", &v38), (Str & 0x80000000) != 0))
        {
          Data = Str;
        }
        else
        {
          Data = phonmap_loc_LoadData(v18, v38, v20, v21, v22, v23, v24, v25);
          if (v38)
            paramc_ParamRelease(*(_QWORD *)(v39 + 40));
          if ((Data & 0x80000000) == 0)
          {
            v27 = *(_QWORD **)(v18[2] + 8);
            *(_QWORD *)&v34 = ssftmap_ElemCopyString;
            *((_QWORD *)&v34 + 1) = ssftmap_ElemFreeString;
            v35 = ssftmap_ElemCompareKeysString;
            v36 = stringmap_loc_ElemCopyPtr_0;
            v37 = stringmap_loc_ElemFreeNoOp_0;
            Data = ssftmap_ObjOpen(v27, 0, &v34, v18 + 77);
            if ((Data & 0x80000000) == 0)
            {
              *(_QWORD *)a5 = v18;
              *(_DWORD *)(a5 + 8) = 29348;
LABEL_15:
              log_OutText(*(_QWORD *)(v39 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP ObjOpen: End (%x)", v28, v29, v30, Data);
              return Data;
            }
          }
        }
        *(_QWORD *)a5 = v18;
        *(_DWORD *)(a5 + 8) = 29348;
        phonmap_ObjClose(v18, *(_QWORD *)(a5 + 8));
        *(_QWORD *)a5 = 0;
        *(_DWORD *)(a5 + 8) = 0;
        goto LABEL_15;
      }
      log_OutPublic(*(_QWORD *)(v39 + 32), (uint64_t)"PHONMAP", 29000, 0, v14, v15, v16, v17, v33);
      Data = 2322604042;
      goto LABEL_15;
    }
    return inited;
  }
  return Data;
}

uint64_t phonmap_ObjClose(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t *v70;

  v3 = safeh_HandleCheck((uint64_t)a1, a2, 29348, 624);
  v7 = v3;
  if ((int)v3 >= 0)
    v8 = a1;
  else
    v8 = 0;
  if ((v3 & 0x80000000) == 0)
  {
    v9 = a1[2];
    log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP ObjClose : Begin", v4, v5, v6, v67);
    v17 = (_QWORD *)a1[3];
    if (v17)
      v7 = stringmap_reader_ObjClose(v17, v10, v11, v12, v13, v14, v15, v16);
    v18 = (_QWORD *)a1[4];
    if (v18)
      v7 = stringmap_reader_ObjClose(v18, v10, v11, v12, v13, v14, v15, v16);
    v19 = (_QWORD *)a1[5];
    if (v19)
      v7 = stringmap_reader_ObjClose(v19, v10, v11, v12, v13, v14, v15, v16);
    v20 = (_QWORD *)a1[6];
    if (v20)
      v7 = stringmap_reader_ObjClose(v20, v10, v11, v12, v13, v14, v15, v16);
    v21 = a1[7];
    if (v21)
    {
      v70 = 0;
      if ((ssftmap_IteratorOpen(v21, 0, 1, (uint64_t)&v70) & 0x80000000) == 0)
      {
        v68 = 0;
        v69 = 0;
        while ((ssftmap_IteratorNext(v70, &v69, &v68) & 0x80000000) == 0)
          v7 = stringmap_reader_ObjClose(v68, v22, v23, v24, v25, v26, v27, v28);
        ssftmap_IteratorClose((uint64_t)v70);
      }
      ssftmap_ObjClose(a1[7]);
    }
    v29 = v8[9];
    if (v29)
    {
      v70 = 0;
      if ((ssftmap_IteratorOpen(v29, 0, 1, (uint64_t)&v70) & 0x80000000) == 0)
      {
        v68 = 0;
        v69 = 0;
        while ((ssftmap_IteratorNext(v70, &v69, &v68) & 0x80000000) == 0)
          v7 = stringmap_reader_ObjClose(v68, v30, v31, v32, v33, v34, v35, v36);
        ssftmap_IteratorClose((uint64_t)v70);
      }
      ssftmap_ObjClose(v8[9]);
    }
    v37 = v8[8];
    if (v37)
    {
      v70 = 0;
      if ((ssftmap_IteratorOpen(v37, 0, 1, (uint64_t)&v70) & 0x80000000) == 0)
      {
        v68 = 0;
        v69 = 0;
        while ((ssftmap_IteratorNext(v70, &v69, &v68) & 0x80000000) == 0)
          v7 = stringmap_reader_ObjClose(v68, v38, v39, v40, v41, v42, v43, v44);
        ssftmap_IteratorClose((uint64_t)v70);
      }
      ssftmap_ObjClose(v8[8]);
    }
    v45 = v8[10];
    if (v45)
    {
      v70 = 0;
      if ((ssftmap_IteratorOpen(v45, 0, 1, (uint64_t)&v70) & 0x80000000) == 0)
      {
        v68 = 0;
        v69 = 0;
        while ((ssftmap_IteratorNext(v70, &v69, &v68) & 0x80000000) == 0)
          v7 = stringmap_reader_ObjClose(v68, v46, v47, v48, v49, v50, v51, v52);
        ssftmap_IteratorClose((uint64_t)v70);
      }
      ssftmap_ObjClose(v8[10]);
    }
    v53 = (_QWORD *)v8[75];
    if (v53)
      v7 = stringmap_reader_ObjClose(v53, v10, v11, v12, v13, v14, v15, v16);
    v54 = (_QWORD *)v8[76];
    if (v54)
      v7 = stringmap_reader_ObjClose(v54, v10, v11, v12, v13, v14, v15, v16);
    v55 = v8[77];
    if (v55)
    {
      v70 = 0;
      if ((ssftmap_IteratorOpen(v55, 0, 1, (uint64_t)&v70) & 0x80000000) == 0)
      {
        v68 = 0;
        v69 = 0;
        while ((ssftmap_IteratorNext(v70, &v69, &v68) & 0x80000000) == 0)
          v7 = stringmap_reader_ObjClose(v68, v56, v57, v58, v59, v60, v61, v62);
        ssftmap_IteratorClose((uint64_t)v70);
      }
      ssftmap_ObjClose(v8[77]);
    }
    heap_Free(*(_QWORD **)(v9 + 8), (uint64_t)v8);
    log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP ObjClose : End (%x)", v63, v64, v65, v7);
  }
  return v7;
}

uint64_t phonmap_ObjReopen(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Str;
  uint64_t Data;
  uint64_t v17;
  const char *v18;

  v18 = 0;
  v3 = safeh_HandleCheck((uint64_t)a1, a2, 29348, 624);
  if ((v3 & 0x80000000) != 0)
    return v3;
  v7 = a1[2];
  log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP ObjReopen : Begin", v4, v5, v6, v17);
  if ((paramc_ParamGetStr(*(_QWORD *)(v7 + 40), (uint64_t)"fevoice", &v18) & 0x80000000) != 0
    && (Str = paramc_ParamGetStr(*(_QWORD *)(v7 + 40), (uint64_t)"voice", &v18), (Str & 0x80000000) != 0))
  {
    Data = Str;
  }
  else
  {
    Data = phonmap_loc_LoadData(a1, v18, v8, v9, v10, v11, v12, v13);
    if (v18)
      paramc_ParamRelease(*(_QWORD *)(v7 + 40));
  }
  log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP ObjReopen : End (%x)", v11, v12, v13, Data);
  return Data;
}

uint64_t phonmap_LhPToLhTtsSym(_QWORD *a1, int a2, int a3, char *a4, uint64_t *a5)
{
  return phonmap_LhPToLhTtsSymEx(a1, a2, a3, a4, a5, 0);
}

uint64_t phonmap_LhTtsToLhPSym(_QWORD *a1, int a2, int a3, char *a4, uint64_t *a5, char *a6)
{
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t StrMap;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t MapTroughLng;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  unsigned int v34;
  uint64_t v35;
  char v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v35 = 0;
  if (!a4 || !a5 || !*a4)
    return 2322604039;
  v11 = safeh_HandleCheck((uint64_t)a1, a2, 29348, 624);
  if ((v11 & 0x80000000) != 0)
    return v11;
  v12 = a1[2];
  v13 = strlen(a4);
  v14 = Utf8_DepesLengthInBytesUtf8((unsigned __int8 *)a4, v13);
  v15 = heap_Alloc(*(_QWORD *)(v12 + 8), v14 + 1);
  if (!v15)
  {
    log_OutPublic(*(_QWORD *)(v12 + 32), (uint64_t)"PHONMAP", 29000, 0, v16, v17, v18, v19, v34);
    return 2322604042;
  }
  v20 = v15;
  StrMap = utf8_DepesToUtf8((uint64_t)a4, v13, 0, v15, v14, 0, 0);
  if ((StrMap & 0x80000000) != 0)
  {
LABEL_17:
    v29 = StrMap;
    goto LABEL_18;
  }
  *(_BYTE *)(v20 + v14) = 0;
  log_OutText(*(_QWORD *)(v12 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP LhTtsToLhPSym : Begin (%s)", v22, v23, v24, v20);
  if (a3)
  {
    if (a3 != 1)
    {
      v31 = *(_QWORD *)(v12 + 32);
      v29 = 2322604039;
      goto LABEL_28;
    }
    if (!a6 || !*a6)
    {
      MapTroughLng = a1[3];
      v35 = MapTroughLng;
      goto LABEL_25;
    }
    strcpy(v36, "phonmap/");
    __strcat_chk();
    StrMap = phonmap_loc_GetStrMap((uint64_t)a1, v36, "LANG", &v35, 0);
    if ((StrMap & 0x80000000) == 0)
    {
      MapTroughLng = v35;
      goto LABEL_25;
    }
    goto LABEL_17;
  }
  if (!a6 || !*a6)
  {
    v32 = phonmap_reader_Maps(a1[7], 1, a4, a5);
    goto LABEL_27;
  }
  MapTroughLng = phonmap_findMapTroughLng(a1[7], a6);
  if (MapTroughLng)
  {
LABEL_25:
    v32 = stringmap_reader_ReverseMap(MapTroughLng, a4, a5);
LABEL_27:
    v29 = v32;
    v31 = *(_QWORD *)(v12 + 32);
LABEL_28:
    log_OutText(v31, (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP LhTtsToLhPSym : End (%x, %s)", v25, v26, v27, v29);
    heap_Free(*(_QWORD **)(v12 + 8), v20);
    if ((v29 & 0x80000000) == 0)
      return v29;
    goto LABEL_29;
  }
  v29 = 2322604052;
LABEL_18:
  heap_Free(*(_QWORD **)(v12 + 8), v20);
LABEL_29:
  if (((unsigned __int16)v29 & 0x1FFFu) <= 0x14 && ((1 << v29) & 0x10001A) != 0)
    return v29 & 0x1FFF | 0x8A702000;
  return v29;
}

uint64_t phonmap_LhPToLhTtsSequence(_QWORD *a1, int a2, int a3, const char *a4, unsigned int a5, char *a6, char *a7)
{
  int v7;
  unsigned int v8;
  unsigned int v9;

  v7 = phonmap_LhPToLhTtsSequenceLng(a1, a2, a3, a4, a5, a6, a7);
  v8 = v7 & 0x1FFF | 0x8A702000;
  if (((1 << v7) & 0x10001A) == 0)
    v8 = v7;
  if ((v7 & 0x1FFFu) <= 0x14)
    v9 = v8;
  else
    v9 = v7;
  if (v7 >= 0)
    v9 = v7;
  if (v7 == 1)
    return 0;
  else
    return v9;
}

uint64_t phonmap_LhPToLhTtsSequenceWithCheck(_QWORD *a1, int a2, int a3, const char *a4, unsigned int a5, char *a6)
{
  uint64_t result;
  BOOL v7;
  unsigned int v8;

  LODWORD(result) = phonmap_LhPToLhTtsSequenceLng(a1, a2, a3, a4, a5, a6, 0);
  v7 = ((unsigned __int16)result & 0x1FFFu) > 0x14 || ((1 << result) & 0x10001A) == 0;
  v8 = result & 0x1FFF | 0x8A702000;
  if (v7)
    v8 = result;
  if ((int)result < 0)
    return v8;
  else
    return result;
}

uint64_t phonmap_LhPToIpaSym(uint64_t a1, int a2, char *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;

  v4 = 2322604039;
  if (a3 && a4 && *(_WORD *)a3)
  {
    v8 = safeh_HandleCheck(a1, a2, 29348, 624);
    if ((v8 & 0x80000000) != 0)
    {
      return v8;
    }
    else
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP LhPToIpaSym : Begin", v9, v10, v11, v20);
      v15 = *(_QWORD *)(a1 + 600);
      if (v15)
        v16 = stringmap_reader_WReverseMap(v15, a3, a4);
      else
        v16 = 2322604033;
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP LhPToIpaSym : End (%x)", v12, v13, v14, v16);
      if (((1 << v16) & 0x10001A) != 0)
        v17 = v16 & 0x1FFF | 0x8A702000;
      else
        v17 = v16;
      if (((unsigned __int16)v16 & 0x1FFFu) <= 0x14)
        v18 = v17;
      else
        v18 = v16;
      if ((int)v16 < 0)
        return v18;
      else
        return v16;
    }
  }
  return v4;
}

uint64_t phonmap_IpaToLhPSequence(uint64_t a1, int a2, _WORD *a3, unsigned int a4, _WORD *a5, char *a6, _BYTE *a7)
{
  uint64_t StrMap;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  unsigned int v23;
  int v24;
  int v25;
  _BOOL4 v26;
  unsigned int v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  int v36;
  unsigned __int16 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  char *__s;
  uint64_t v44;
  unsigned __int16 *v45;
  unsigned __int16 v46;
  char v47[128];
  _OWORD v48[8];
  _OWORD v49[8];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v46 = 0;
  v44 = 0;
  v45 = 0;
  memset(v49, 0, sizeof(v49));
  memset(v48, 0, sizeof(v48));
  __s = 0;
  if (!a3)
    return 2322604039;
  StrMap = 2322604039;
  if (a5 && a4 && *a3)
  {
    *a5 = 0;
    v14 = safeh_HandleCheck(a1, a2, 29348, 624);
    StrMap = v14;
    v18 = (int)v14 >= 0 ? a1 : 0;
    if ((v14 & 0x80000000) == 0)
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP IpaToLhPSequence : Begin", v15, v16, v17, v42);
      if (a6 && a7 && *a6 && *a7)
      {
        strcpy((char *)v48, "phonmap_ipa/");
        __strcat_chk();
        paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"fedataprefix", &__s);
        if (__s && *__s && (v22 = strlen(__s) - 1, __s[v22] == 47))
        {
          __strcpy_chk();
          v47[v22] = 0;
          v23 = 1;
          do
          {
            if (v23 == 1)
              v24 = 1;
            else
              v24 = 2;
            v25 = brokeraux_ComposeBrokerString(*(_QWORD *)(a1 + 16), (const char *)v48, v24, 1, a6, v47, 0, (char *)v49, 0x80uLL);
            if (v25 < 0)
              StrMap = v25 | 0x8A702000;
            else
              StrMap = phonmap_loc_GetStrMap(v18, (const char *)v49, "IPA ", &v44, v23 == 1);
            if (v23 > 1)
              break;
            ++v23;
          }
          while ((StrMap & 0x80000000) != 0);
        }
        else
        {
          v28 = brokeraux_ComposeBrokerString(*(_QWORD *)(a1 + 16), (const char *)v48, 0, 1, a6, 0, 0, (char *)v49, 0x80uLL);
          if (v28 < 0)
            StrMap = v28 | 0x8A702000;
          else
            StrMap = phonmap_loc_GetStrMap(a1, (const char *)v49, "IPA ", &v44, 0);
        }
        v26 = v44 != 0;
      }
      else
      {
        if (!*(_QWORD *)(a1 + 600))
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP IpaToLhPSequence : End (%x)", v19, v20, v21, 2322604033);
          v27 = 1;
          return v27 | 0x8A702000;
        }
        v44 = *(_QWORD *)(a1 + 600);
        v26 = 1;
      }
      v29 = (int)StrMap >= 0;
      if ((StrMap & 0x80000000) != 0 || !v26)
      {
LABEL_45:
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP IpaToLhPSequence : End (%x)", v19, v20, v21, StrMap);
        if (v29)
          return StrMap;
      }
      else
      {
        v30 = 0;
        v31 = 0;
        while (1)
        {
          if (LH_wcslen((uint64_t)a3) <= (unint64_t)v31)
          {
            log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP IpaToLhPSequence : End (%x)", v32, v33, v34, StrMap);
            return StrMap;
          }
          v35 = &a3[v31];
          if (*v35 == 32)
          {
            v36 = 1;
            v46 = 1;
            v45 = (unsigned __int16 *)&phonmap_IpaToLhPSequence_szWordBnd;
            v37 = (unsigned __int16 *)&phonmap_IpaToLhPSequence_szWordBnd;
          }
          else
          {
            StrMap = stringmap_reader_WMapToken(v44, v35, &v46, (uint64_t *)&v45);
            if ((StrMap & 0x80000000) != 0)
              goto LABEL_49;
            v36 = v46;
            v37 = v45;
          }
          if (LH_wcslen((uint64_t)v37) + (unint64_t)v30 + 1 >= a4)
            break;
          v31 += v36;
          LH_wcscpy(&a5[v30], v45);
          v30 += LH_wcslen((uint64_t)v45);
          if (!v44)
          {
            v29 = 1;
            goto LABEL_45;
          }
        }
        StrMap = 2322604041;
LABEL_49:
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP IpaToLhPSequence : End (%x)", v38, v39, v40, StrMap);
      }
      v27 = StrMap & 0x1FFF;
      if (v27 <= 0x14 && ((1 << StrMap) & 0x10001A) != 0)
        return v27 | 0x8A702000;
    }
  }
  return StrMap;
}

uint64_t phonmap_LhPToSapi5Sym(_QWORD *a1, int a2, char *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;

  v4 = 2322604039;
  if (a3 && a4 && *(_WORD *)a3)
  {
    v8 = safeh_HandleCheck((uint64_t)a1, a2, 29348, 624);
    if ((v8 & 0x80000000) != 0)
    {
      return v8;
    }
    else
    {
      log_OutText(*(_QWORD *)(a1[2] + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP LhPToSapi5Sym : Begin", v9, v10, v11, v20);
      v15 = a1[76];
      if (v15 || (v15 = a1[75]) != 0)
        v16 = stringmap_reader_WReverseMap(v15, a3, a4);
      else
        v16 = 2322604033;
      log_OutText(*(_QWORD *)(a1[2] + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP LhPToSapi5Sym : End (%x)", v12, v13, v14, v16);
      if (((1 << v16) & 0x10001A) != 0)
        v17 = v16 & 0x1FFF | 0x8A702000;
      else
        v17 = v16;
      if (((unsigned __int16)v16 & 0x1FFFu) <= 0x14)
        v18 = v17;
      else
        v18 = v16;
      if ((int)v16 < 0)
        return v18;
      else
        return v16;
    }
  }
  return v4;
}

uint64_t phonmap_Sapi5ToLhPSequence(_QWORD *a1, int a2, _WORD *a3, unsigned int a4, _WORD *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v31;
  unsigned __int16 *v32;
  unsigned __int16 v33;

  v33 = 0;
  v32 = 0;
  v5 = 2322604039;
  if (!a3 || !a5 || !a4 || !*a3)
    return v5;
  *a5 = 0;
  v13 = safeh_HandleCheck((uint64_t)a1, a2, 29348, 624);
  if ((v13 & 0x80000000) != 0)
    return v13;
  log_OutText(*(_QWORD *)(a1[2] + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP Sapi5ToLhPSequence : Begin", v10, v11, v12, v31);
  v17 = a1[76];
  if (!v17)
    v17 = a1[75];
  if (v17)
    v18 = v13;
  else
    v18 = 2322604033;
  if ((v18 & 0x80000000) == 0)
  {
    if (LH_wcslen((uint64_t)a3))
    {
      v22 = 0;
      v23 = 0;
      v24 = 0;
      do
      {
        v13 = stringmap_reader_WMapToken(v17, &a3[v22], &v33, (uint64_t *)&v32);
        if ((v13 & 0x80000000) != 0)
          goto LABEL_20;
        v25 = v33;
        if (LH_wcslen((uint64_t)v32) + (unint64_t)v24 + 1 >= a4)
        {
          v5 = 2322604041;
          log_OutText(*(_QWORD *)(a1[2] + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP Sapi5ToLhPSequence : End (%x)", v26, v27, v28, 2322604041);
          return v5;
        }
        v22 = (v23 + v25);
        LH_wcscpy(&a5[v24], v32);
        v24 += LH_wcslen((uint64_t)v32);
        v23 = v22;
      }
      while (LH_wcslen((uint64_t)a3) > v22);
    }
    log_OutText(*(_QWORD *)(a1[2] + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP Sapi5ToLhPSequence : End (%x)", v19, v20, v21, v13);
    return v13;
  }
  v13 = v18;
LABEL_20:
  log_OutText(*(_QWORD *)(a1[2] + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP Sapi5ToLhPSequence : End (%x)", v14, v15, v16, v13);
  if (((1 << v13) & 0x10001A) != 0)
    v29 = v13 & 0x1FFF | 0x8A702000;
  else
    v29 = v13;
  if (((unsigned __int16)v13 & 0x1FFFu) <= 0x14)
    return v29;
  else
    return v13;
}

uint64_t phonmap_GetLhPAlphabetInfo(_QWORD *a1, int a2, int a3, char *a4, __int16 *a5, char *a6)
{
  return phonmap_GetLhPAlphabetInfoEx(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t phonmap_GetLhPSample(_QWORD *a1, int a2, int a3, char *a4, uint64_t *a5)
{
  return phonmap_GetLhPSampleEx(a1, a2, a3, a4, a5, 0);
}

uint64_t phonmap_LhPToLhPSequence(_QWORD *a1, int a2, int a3, const char **a4)
{
  return phonmap_LhPToLhPSequenceEx(a1, a2, a3, a4, 0);
}

uint64_t phonmap_GetLhPAlphabetInfoEx(_QWORD *a1, int a2, int a3, char *a4, __int16 *a5, char *a6, char *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  size_t v35;
  uint64_t MapTroughLng;
  uint64_t LhPAlphabetCore;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;

  v14 = 2322604039;
  if (!LH_stricmp(a4, "alphabet"))
  {
    if (a5)
    {
      v25 = safeh_HandleCheck((uint64_t)a1, a2, 29348, 624);
      if ((v25 & 0x80000000) != 0)
        return v25;
      v29 = a1[2];
      log_OutText(*(_QWORD *)(v29 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP GetLhPAlphabet : Begin", v26, v27, v28, v43);
      switch(a3)
      {
        case 0:
          if (a7 && *a7)
          {
            v33 = a1[7];
            goto LABEL_27;
          }
          v41 = a1[7];
          goto LABEL_34;
        case 1:
          MapTroughLng = a1[3];
          goto LABEL_31;
        case 2:
          if (a7 && *a7)
          {
            v33 = a1[9];
LABEL_27:
            MapTroughLng = phonmap_findMapTroughLng(v33, a7);
            if (!MapTroughLng)
            {
              v14 = 2322604052;
LABEL_29:
              log_OutText(*(_QWORD *)(v29 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP GetLhPAlphabet : End (%x)", v30, v31, v32, v14);
              LODWORD(v18) = v14;
              goto LABEL_36;
            }
LABEL_31:
            LhPAlphabetCore = phonmap_GetLhPAlphabetCore(MapTroughLng, a5, (uint64_t)a6);
          }
          else
          {
            v41 = a1[9];
LABEL_34:
            LhPAlphabetCore = phonmap_reader_MapsGetGetLhPAlphabetCore(v41, a5, (uint64_t)a6);
          }
          v18 = LhPAlphabetCore;
          log_OutText(*(_QWORD *)(v29 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP GetLhPAlphabet : End (%x)", v38, v39, v40, LhPAlphabetCore);
          if ((v18 & 0x80000000) == 0)
            return v18;
LABEL_36:
          if (((1 << v18) & 0x10001A) != 0)
            v42 = v18 & 0x1FFF | 0x8A702000;
          else
            v42 = v18;
          if (((unsigned __int16)v18 & 0x1FFFu) <= 0x14)
            v18 = v42;
          else
            v18 = v18;
          break;
        case 3:
          MapTroughLng = a1[5];
          goto LABEL_31;
        default:
          goto LABEL_29;
      }
      return v18;
    }
    return 2322604039;
  }
  if (LH_stricmp(a4, "version"))
    return 2322604039;
  v18 = safeh_HandleCheck((uint64_t)a1, a2, 29348, 624);
  if ((v18 & 0x80000000) == 0)
  {
    v19 = a1[2];
    log_OutText(*(_QWORD *)(v19 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP GetLhPAlphabetInfo : Begin (%s)", v15, v16, v17, (uint64_t)a4);
    switch(a3)
    {
      case 0:
      case 2:
        v23 = (unsigned __int16)*a5;
        v24 = (const char *)(a1 + 43);
        goto LABEL_16;
      case 1:
      case 3:
        v23 = (unsigned __int16)*a5;
        v24 = (const char *)(a1 + 11);
LABEL_16:
        v35 = strlen(v24);
        if (!v23)
        {
          *a5 = v35 + 1;
          goto LABEL_20;
        }
        if (v35 < v23)
        {
          strcpy(a6, v24);
LABEL_20:
          log_OutText(*(_QWORD *)(v19 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP GetLhPAlphabetInfo : End (%x, %s)", v20, v21, v22, v18);
          return v18;
        }
        v14 = 2322604041;
LABEL_22:
        log_OutText(*(_QWORD *)(v19 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP GetLhPAlphabetInfo : End (%x, %s)", v20, v21, v22, v14);
        v18 = v14;
        break;
      default:
        goto LABEL_22;
    }
  }
  return v18;
}

uint64_t phonmap_GetLhPSampleEx(_QWORD *a1, int a2, int a3, char *a4, uint64_t *a5, char *a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t MapTroughLng;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;

  v6 = 2322604039;
  if (a4 && a5 && *a4)
  {
    v12 = safeh_HandleCheck((uint64_t)a1, a2, 29348, 624);
    if ((v12 & 0x80000000) != 0)
    {
      return v12;
    }
    else
    {
      v16 = a1[2];
      log_OutText(*(_QWORD *)(v16 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP GetLhPSample : Begin (%s)", v13, v14, v15, (uint64_t)a4);
      switch(a3)
      {
        case 0:
          if (a6 && *a6)
          {
            v20 = a1[8];
            goto LABEL_14;
          }
          v24 = a1[8];
          goto LABEL_21;
        case 1:
          MapTroughLng = a1[4];
          goto LABEL_18;
        case 2:
          if (a6 && *a6)
          {
            v20 = a1[10];
LABEL_14:
            MapTroughLng = phonmap_findMapTroughLng(v20, a6);
            if (!MapTroughLng)
            {
              v6 = 2322604052;
LABEL_16:
              v22 = *(_QWORD *)(v16 + 32);
              goto LABEL_24;
            }
LABEL_18:
            v23 = stringmap_reader_Map(MapTroughLng, a4, a5);
          }
          else
          {
            v24 = a1[10];
LABEL_21:
            v23 = phonmap_reader_Maps(v24, 0, a4, a5);
          }
          v6 = v23;
          v22 = *(_QWORD *)(v16 + 32);
          if ((v6 & 0x80000000) == 0)
          {
            log_OutText(v22, (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP phonmap_GetLhPSample : End (%x, %s)", v17, v18, v19, v6);
            return v6;
          }
LABEL_24:
          log_OutText(v22, (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP phonmap_GetLhPSample : End (%x, %s)", v17, v18, v19, v6);
          if (((1 << v6) & 0x10001A) != 0)
            v25 = v6 & 0x1FFF | 0x8A702000;
          else
            v25 = v6;
          if (((unsigned __int16)v6 & 0x1FFFu) <= 0x14)
            v6 = v25;
          else
            v6 = v6;
          break;
        case 3:
          MapTroughLng = a1[6];
          goto LABEL_18;
        default:
          goto LABEL_16;
      }
    }
  }
  return v6;
}

uint64_t phonmap_LhPToLhTtsSymEx(_QWORD *a1, int a2, int a3, char *a4, uint64_t *a5, char *a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t MapTroughLng;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;

  v6 = 2322604039;
  if (a4 && a5 && *a4)
  {
    v12 = safeh_HandleCheck((uint64_t)a1, a2, 29348, 624);
    if ((v12 & 0x80000000) != 0)
    {
      return v12;
    }
    else
    {
      v16 = a1[2];
      log_OutText(*(_QWORD *)(v16 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP LhPToLhTtsSym : Begin (%s)", v13, v14, v15, (uint64_t)a4);
      switch(a3)
      {
        case 0:
          if (a6 && *a6)
          {
            v20 = a1[7];
            goto LABEL_14;
          }
          v24 = a1[7];
          goto LABEL_21;
        case 1:
          MapTroughLng = a1[3];
          goto LABEL_18;
        case 2:
          if (a6 && *a6)
          {
            v20 = a1[9];
LABEL_14:
            MapTroughLng = phonmap_findMapTroughLng(v20, a6);
            if (!MapTroughLng)
            {
              v6 = 2322604052;
LABEL_16:
              v22 = *(_QWORD *)(v16 + 32);
              goto LABEL_24;
            }
LABEL_18:
            v23 = stringmap_reader_Map(MapTroughLng, a4, a5);
          }
          else
          {
            v24 = a1[9];
LABEL_21:
            v23 = phonmap_reader_Maps(v24, 0, a4, a5);
          }
          v6 = v23;
          v22 = *(_QWORD *)(v16 + 32);
          if ((v6 & 0x80000000) == 0)
          {
            log_OutText(v22, (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP LhPToLhTtsSym : End (%x, %s)", v17, v18, v19, v6);
            return v6;
          }
LABEL_24:
          log_OutText(v22, (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP LhPToLhTtsSym : End (%x, %s)", v17, v18, v19, v6);
          if (((1 << v6) & 0x10001A) != 0)
            v25 = v6 & 0x1FFF | 0x8A702000;
          else
            v25 = v6;
          if (((unsigned __int16)v6 & 0x1FFFu) <= 0x14)
            v6 = v25;
          else
            v6 = v6;
          break;
        case 3:
          MapTroughLng = a1[5];
          goto LABEL_18;
        default:
          goto LABEL_16;
      }
    }
  }
  return v6;
}

uint64_t phonmap_LhPToLhPSequenceEx(_QWORD *a1, int a2, int a3, const char **a4, char *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t MapTroughLng;
  int v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;

  v5 = 2322604039;
  if (a4 && *a4)
  {
    v10 = safeh_HandleCheck((uint64_t)a1, a2, 29348, 624);
    if ((v10 & 0x80000000) != 0)
      return v10;
    if (!a3)
    {
      MapTroughLng = phonmap_findMapTroughLng(a1[7], a5);
      if (!MapTroughLng)
        return 2322604052;
      v11 = MapTroughLng;
      if (a5)
      {
        v13 = *a5;
        a5 = *a5 ? (char *)MapTroughLng : 0;
        if (v13)
          v11 = 0;
      }
      goto LABEL_14;
    }
    if (a3 == 1)
    {
      v11 = 0;
      a5 = (char *)a1[3];
LABEL_14:
      v14 = a1[2];
      v15 = (char *)*a4;
      v16 = strlen(*a4);
      log_OutText(*(_QWORD *)(v14 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP LhPToLhPSequence : Begin (%s)", v17, v18, v19, (uint64_t)*a4);
      v51 = LhpuCreate(*(_QWORD *)(v14 + 8));
      if (!v51)
      {
        log_OutPublic(*(_QWORD *)(v14 + 32), (uint64_t)"PHONMAP", 29000, 0, v20, v21, v22, v23, v45);
        return 2322604042;
      }
      v50 = 0;
      v49 = 0;
      if (v16 >= 1)
      {
        v24 = &v15[v16];
        while (1)
        {
          if (*v15 == 18)
          {
            ++v15;
            goto LABEL_21;
          }
          LhplGetSymbol();
          if (v25)
          {
            memmove(v15, v15 + 1, (unsigned __int16)((_WORD)v24 + ~(_WORD)v15));
            *--v24 = 0;
            log_OutText(*(_QWORD *)(v14 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"Wrong L&H+ phoneme", v26, v27, v28, v45);
            goto LABEL_21;
          }
          if (!a5)
            goto LABEL_26;
          v49 = 0;
          v29 = v51;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(v51);
          stringmap_reader_Map((uint64_t)a5, v30, &v49);
          if (v49)
            break;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(v29);
          if (!strcmp(v33, "_"))
            break;
          memmove(v15, &v15[v50 + 1], (unsigned __int16)(~(v50 + (_WORD)v15) + (_WORD)v24));
          v24 += ~(unint64_t)v50;
          *v24 = 0;
          log_OutText(*(_QWORD *)(v14 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"Wrong L&H+ phoneme", v34, v35, v36, v45);
          if (v11)
          {
LABEL_27:
            v48 = 0;
            if ((ssftmap_IteratorOpen(a1[7], 0, 1, (uint64_t)&v48) & 0x80000000) == 0)
            {
              v46 = 0;
              v47 = 0;
              v49 = 0;
              while ((ssftmap_IteratorNext(v48, &v47, &v46) & 0x80000000) == 0)
              {
                v49 = 0;
                v31 = v46;
                kaldi::CuMatrixBase<float>::~CuMatrixBase(v51);
                stringmap_reader_Map(v31, v32, &v49);
                if (v49)
                {
                  v15 += v50 + 1;
                  goto LABEL_38;
                }
              }
              if (!v49)
              {
                kaldi::CuMatrixBase<float>::~CuMatrixBase(v51);
                if (strcmp(v37, "_"))
                {
                  memmove(v15, &v15[v50 + 1], (unsigned __int16)(~(v50 + (_WORD)v15) + (_WORD)v24));
                  v24 += ~(unint64_t)v50;
                  *v24 = 0;
                  log_OutText(*(_QWORD *)(v14 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"Wrong L&H+ phoneme", v38, v39, v40, v45);
                }
              }
LABEL_38:
              ssftmap_IteratorClose((uint64_t)v48);
            }
          }
LABEL_21:
          if (v15 >= v24)
            goto LABEL_39;
        }
        v15 += v50 + 1;
LABEL_26:
        if (v11)
          goto LABEL_27;
        goto LABEL_21;
      }
LABEL_39:
      LhpuRemove(*(_QWORD **)(v14 + 8), &v51);
      log_OutText(*(_QWORD *)(v14 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP LhPToLhPSequence : End (%s)", v41, v42, v43, (uint64_t)*a4);
      return v10;
    }
  }
  return v5;
}

uint64_t phonmap_LhPToLhTtsSequenceWithCheckEx(_QWORD *a1, int a2, int a3, const char *a4, unsigned int a5, char *a6, char *a7)
{
  uint64_t result;
  BOOL v8;
  unsigned int v9;

  LODWORD(result) = phonmap_LhPToLhTtsSequenceLng(a1, a2, a3, a4, a5, a6, a7);
  v8 = ((unsigned __int16)result & 0x1FFFu) > 0x14 || ((1 << result) & 0x10001A) == 0;
  v9 = result & 0x1FFF | 0x8A702000;
  if (v8)
    v9 = result;
  if ((int)result < 0)
    return v9;
  else
    return result;
}

uint64_t phonmap_loc_LoadData(uint64_t *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  _WORD *v66;
  int v67;
  char *i;
  _BOOL4 v69;
  uint64_t v70;
  _BOOL4 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  _WORD *v87;
  uint64_t v88;
  _QWORD *v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  int v94;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  _QWORD *v107;
  int v108;
  const char *v109;
  unsigned int v110;
  _QWORD *v111;
  _BYTE v112[4];
  char *v113;
  int v114[2];
  int v115[2];
  int v116;
  int v117;
  unsigned __int8 v118;
  int v119[2];
  _QWORD *v120[32];
  _QWORD __dst[34];
  __int128 v122;
  uint64_t (*v123)(const char *, const char *);
  uint64_t (*v124)(uint64_t, uint64_t, _QWORD *);
  uint64_t (*v125)();
  char v126[128];
  char v127[128];
  char v128[128];
  char v129[128];
  char v130[128];
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v119 = 0;
  v118 = 0;
  v116 = 0;
  v117 = 0;
  *(_QWORD *)v114 = 0;
  *(_QWORD *)v115 = 0;
  v113 = 0;
  v111 = 0;
  v130[0] = 0;
  v129[0] = 0;
  v128[0] = 0;
  v112[0] = 0;
  v11 = a1 + 3;
  v10 = (_QWORD *)a1[3];
  if (v10)
  {
    stringmap_reader_ObjClose(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    *v11 = 0;
  }
  v12 = (_QWORD *)a1[4];
  if (v12)
  {
    stringmap_reader_ObjClose(v12, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    a1[4] = 0;
  }
  v13 = (_QWORD *)a1[5];
  if (v13)
  {
    stringmap_reader_ObjClose(v13, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    a1[5] = 0;
  }
  v107 = v11;
  v14 = (_QWORD *)a1[6];
  if (v14)
  {
    stringmap_reader_ObjClose(v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    a1[6] = 0;
  }
  v16 = a1 + 7;
  v15 = a1[7];
  if (v15)
  {
    *(_QWORD *)&v122 = 0;
    if ((ssftmap_IteratorOpen(v15, 0, 1, (uint64_t)&v122) & 0x80000000) == 0)
    {
      __dst[0] = 0;
      v120[0] = 0;
      while ((ssftmap_IteratorNext((uint64_t *)v122, __dst, v120) & 0x80000000) == 0)
        stringmap_reader_ObjClose(v120[0], v17, v18, v19, v20, v21, v22, v23);
      ssftmap_IteratorClose(v122);
    }
    ssftmap_ObjClose(*v16);
    *v16 = 0;
  }
  v24 = *(_QWORD **)(a1[2] + 8);
  *(_QWORD *)&v122 = ssftmap_ElemCopyString;
  *((_QWORD *)&v122 + 1) = ssftmap_ElemFreeString;
  v123 = ssftmap_ElemCompareKeysString;
  v124 = stringmap_loc_ElemCopyPtr_0;
  v125 = stringmap_loc_ElemFreeNoOp_0;
  v25 = ssftmap_ObjOpen(v24, 0, &v122, a1 + 7);
  if ((v25 & 0x80000000) != 0)
    return v25;
  v27 = a1 + 8;
  v26 = a1[8];
  if (v26)
  {
    *(_QWORD *)&v122 = 0;
    if ((ssftmap_IteratorOpen(v26, 0, 1, (uint64_t)&v122) & 0x80000000) == 0)
    {
      __dst[0] = 0;
      v120[0] = 0;
      while ((ssftmap_IteratorNext((uint64_t *)v122, __dst, v120) & 0x80000000) == 0)
        stringmap_reader_ObjClose(v120[0], v28, v29, v30, v31, v32, v33, v34);
      ssftmap_IteratorClose(v122);
    }
    ssftmap_ObjClose(*v27);
    *v27 = 0;
  }
  v35 = *(_QWORD **)(a1[2] + 8);
  *(_QWORD *)&v122 = ssftmap_ElemCopyString;
  *((_QWORD *)&v122 + 1) = ssftmap_ElemFreeString;
  v123 = ssftmap_ElemCompareKeysString;
  v124 = stringmap_loc_ElemCopyPtr_0;
  v125 = stringmap_loc_ElemFreeNoOp_0;
  v25 = ssftmap_ObjOpen(v35, 0, &v122, a1 + 8);
  if ((v25 & 0x80000000) != 0)
    return v25;
  v37 = a1 + 9;
  v36 = a1[9];
  if (v36)
  {
    *(_QWORD *)&v122 = 0;
    if ((ssftmap_IteratorOpen(v36, 0, 1, (uint64_t)&v122) & 0x80000000) == 0)
    {
      __dst[0] = 0;
      v120[0] = 0;
      while ((ssftmap_IteratorNext((uint64_t *)v122, __dst, v120) & 0x80000000) == 0)
        stringmap_reader_ObjClose(v120[0], v38, v39, v40, v41, v42, v43, v44);
      ssftmap_IteratorClose(v122);
    }
    ssftmap_ObjClose(*v37);
    *v37 = 0;
  }
  v45 = *(_QWORD **)(a1[2] + 8);
  *(_QWORD *)&v122 = ssftmap_ElemCopyString;
  *((_QWORD *)&v122 + 1) = ssftmap_ElemFreeString;
  v123 = ssftmap_ElemCompareKeysString;
  v124 = stringmap_loc_ElemCopyPtr_0;
  v125 = stringmap_loc_ElemFreeNoOp_0;
  v25 = ssftmap_ObjOpen(v45, 0, &v122, a1 + 9);
  if ((v25 & 0x80000000) != 0)
    return v25;
  v47 = a1 + 10;
  v46 = a1[10];
  if (v46)
  {
    *(_QWORD *)&v122 = 0;
    if ((ssftmap_IteratorOpen(v46, 0, 1, (uint64_t)&v122) & 0x80000000) == 0)
    {
      __dst[0] = 0;
      v120[0] = 0;
      while ((ssftmap_IteratorNext((uint64_t *)v122, __dst, v120) & 0x80000000) == 0)
        stringmap_reader_ObjClose(v120[0], v48, v49, v50, v51, v52, v53, v54);
      ssftmap_IteratorClose(v122);
    }
    ssftmap_ObjClose(*v47);
    *v47 = 0;
  }
  v55 = *(_QWORD **)(a1[2] + 8);
  *(_QWORD *)&v122 = ssftmap_ElemCopyString;
  *((_QWORD *)&v122 + 1) = ssftmap_ElemFreeString;
  v123 = ssftmap_ElemCompareKeysString;
  v124 = stringmap_loc_ElemCopyPtr_0;
  v125 = stringmap_loc_ElemFreeNoOp_0;
  v25 = ssftmap_ObjOpen(v55, 0, &v122, a1 + 10);
  if ((v25 & 0x80000000) != 0)
    return v25;
  v63 = (_QWORD *)a1[75];
  if (v63)
  {
    stringmap_reader_ObjClose(v63, v56, v57, v58, v59, v60, v61, v62);
    a1[75] = 0;
  }
  v64 = (_QWORD *)a1[76];
  if (v64)
  {
    stringmap_reader_ObjClose(v64, v56, v57, v58, v59, v60, v61, v62);
    a1[76] = 0;
  }
  if ((paramc_ParamGetStr(*(_QWORD *)(a1[2] + 40), (uint64_t)"langcode", v114) & 0x80000000) != 0)
    *(_QWORD *)v114 = &byte_1DEBD87CE;
  if ((paramc_ParamGetStr(*(_QWORD *)(a1[2] + 40), (uint64_t)"voicemodel", &v113) & 0x80000000) != 0)
    v113 = 0;
  strcpy((char *)&v122, "phonmap/");
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  brokeraux_ComposeBrokerString(a1[2], (const char *)&v122, 1, 1, *(char **)v114, a2, v113, v128, 0x80uLL);
  strcpy(v126, "phonmap_ipa/");
  __strcat_chk();
  brokeraux_ComposeBrokerString(a1[2], v126, 1, 1, *(char **)v114, 0, 0, v129, 0x80uLL);
  __strcpy_chk();
  brokeraux_ComposeBrokerString(a1[2], v127, 1, 1, *(char **)v114, a2, 0, v130, 0x80uLL);
  v65 = 0;
  v66 = (_WORD *)a1[2];
  do
  {
    if (*((_QWORD *)v66 + 3))
    {
      v67 = 2;
      goto LABEL_58;
    }
    for (i = &v128[128 * v65]; *i == 47; ++i)
    {
      *i = 95;
LABEL_57:
      ;
    }
    if (*i)
      goto LABEL_57;
    strcat(&v128[128 * v65], ".dat");
    v67 = 3;
LABEL_58:
    *((_DWORD *)&__dst[32] + ++v65) = v67;
  }
  while (v65 != 3);
  v69 = 0;
  v108 = 0;
  v70 = 0;
  v71 = 1;
  while (1)
  {
    v109 = &v128[128 * v70];
    v76 = ssftriff_reader_ObjOpen((_WORD *)*a1, a1[1], *((unsigned int *)&__dst[32] + v70 + 1), v109, "PHMP", 1031, (uint64_t *)v119);
    if ((v76 & 0x80000000) != 0)
      break;
    v77 = v108;
    if (!v70)
      v77 = 1;
    v108 = v77;
    while ((ssftriff_reader_OpenChunk(*(uint64_t *)v119, &v117, (unsigned int *)&v116, v115, v72, v73, v74, v75) & 0x80000000) == 0)
    {
      if (v117 ^ 0x464E494C | v118 && v117 ^ 0x464E4956 | v118)
      {
        if (!(v117 ^ 0x474E414C | v118))
        {
          v85 = *(_QWORD *)v119;
          v86 = &v128[128 * v70];
          v87 = (_WORD *)*a1;
          v88 = a1[1];
          v89 = v107;
LABEL_99:
          v93 = stringmap_reader_ObjOpen(v87, v88, v86, v85, v89);
LABEL_100:
          LODWORD(v76) = v93;
          goto LABEL_101;
        }
        if (!(v117 ^ 0x4158454C | v118))
        {
          v85 = *(_QWORD *)v119;
          v86 = &v128[128 * v70];
          v87 = (_WORD *)*a1;
          v88 = a1[1];
          v89 = a1 + 4;
          goto LABEL_99;
        }
        if (!(v117 ^ 0x4E414C53 | v118))
        {
          v85 = *(_QWORD *)v119;
          v86 = &v128[128 * v70];
          v87 = (_WORD *)*a1;
          v88 = a1[1];
          v89 = a1 + 5;
          goto LABEL_99;
        }
        if (!(v117 ^ 0x58454C53 | v118))
        {
          v85 = *(_QWORD *)v119;
          v86 = &v128[128 * v70];
          v87 = (_WORD *)*a1;
          v88 = a1[1];
          v89 = a1 + 6;
          goto LABEL_99;
        }
        if (v117 ^ 0x43494F56 | v118)
        {
          if (!(v117 ^ 0x41584556 | v118))
          {
            LODWORD(v76) = ssftmap_FindReadOnly(a1[8], (uint64_t)v112, &v111);
            if ((v76 & 0x80000000) == 0)
              goto LABEL_101;
            v93 = stringmap_reader_ObjOpen((_WORD *)*a1, a1[1], v109, *(uint64_t *)v119, &v111);
            if (v93 < 0)
              goto LABEL_100;
            v96 = a1 + 8;
            goto LABEL_121;
          }
          if (!(v117 ^ 0x494F5653 | v118))
          {
            LODWORD(v76) = ssftmap_FindReadOnly(a1[9], (uint64_t)v112, &v111);
            if ((v76 & 0x80000000) == 0)
              goto LABEL_101;
            v93 = stringmap_reader_ObjOpen((_WORD *)*a1, a1[1], v109, *(uint64_t *)v119, &v111);
            if (v93 < 0)
              goto LABEL_100;
            v96 = a1 + 9;
            goto LABEL_121;
          }
          if (v117 ^ 0x58455653 | v118)
          {
            if (v117 ^ 0x20415049 | v118)
            {
              if (v117 ^ 0x49504153 | v118)
                goto LABEL_101;
              v85 = *(_QWORD *)v119;
              v86 = &v128[128 * v70];
              v87 = (_WORD *)*a1;
              v88 = a1[1];
              v89 = a1 + 76;
            }
            else
            {
              v85 = *(_QWORD *)v119;
              v86 = &v128[128 * v70];
              v87 = (_WORD *)*a1;
              v88 = a1[1];
              v89 = a1 + 75;
            }
            goto LABEL_99;
          }
          LODWORD(v76) = ssftmap_FindReadOnly(a1[10], (uint64_t)v112, &v111);
          if ((v76 & 0x80000000) != 0)
          {
            v93 = stringmap_reader_ObjOpen((_WORD *)*a1, a1[1], v109, *(uint64_t *)v119, &v111);
            if (v93 < 0)
              goto LABEL_100;
            v96 = a1 + 10;
            goto LABEL_121;
          }
        }
        else
        {
          if (!v112[0])
            __strcpy_chk();
          LODWORD(v76) = ssftmap_FindReadOnly(a1[7], (uint64_t)v112, &v111);
          if ((v76 & 0x80000000) != 0)
          {
            v93 = stringmap_reader_ObjOpen((_WORD *)*a1, a1[1], v109, *(uint64_t *)v119, &v111);
            if (v93 < 0)
              goto LABEL_100;
            v96 = a1 + 7;
LABEL_121:
            LODWORD(v76) = ssftmap_Insert(*v96, (uint64_t)v112, (uint64_t)v111);
            if ((v76 & 0x80000000) != 0)
              stringmap_reader_ObjClose(v111, v97, v98, v99, v100, v101, v102, v103);
          }
        }
      }
      else if ((v76 & 0x80000000) == 0)
      {
        v90 = v116;
        if (v116)
        {
          v91 = 0;
          do
          {
            LOBYTE(v120[0]) = 0;
            LOBYTE(__dst[0]) = 0;
            v110 = 256;
            LODWORD(v76) = ssftriff_reader_ReadStringZ(*(uint64_t *)v119, *(uint64_t *)v115, v90, v91, __dst, &v110);
            if ((v76 & 0x80000000) == 0 && v91 < v116)
            {
              v91 += v110;
              v110 = 256;
              LODWORD(v76) = ssftriff_reader_ReadStringZ(*(uint64_t *)v119, *(uint64_t *)v115, v116, v91, v120, &v110);
            }
            if ((v76 & 0x80000000) != 0)
              break;
            v92 = v110;
            if (!LH_stricmp((char *)__dst, "version"))
              __strcpy_chk();
            if (!(v117 ^ 0x464E4956 | v118) && !LH_stricmp((char *)__dst, "language"))
              __strcpy_chk();
            if (!(v117 ^ 0x464E4956 | v118) && !LH_stricmp((char *)__dst, "version"))
              __strcpy_chk();
            v91 += v92;
            v90 = v116;
          }
          while (v91 < v116);
        }
      }
LABEL_101:
      v94 = ssftriff_reader_CloseChunk(*(uint64_t *)v119);
      if ((int)v76 > -1 && v94 < 0)
        v76 = v94;
      else
        v76 = v76;
    }
    if (*(_QWORD *)v119)
    {
      v104 = ssftriff_reader_ObjClose(*(_QWORD **)v119, v78, v79, v80, v81, v82, v83, v84);
      *(_QWORD *)v119 = 0;
      if ((int)v76 > -1 && v104 < 0)
        v76 = v104;
      else
        v76 = v76;
    }
LABEL_133:
    if (++v70 != 3)
    {
      v69 = v108 != 0;
      v71 = v70 != 2;
      if (v70 != 2 || !v108)
        continue;
    }
    return v76;
  }
  if (v71 || v69)
  {
    v76 = 0;
    goto LABEL_133;
  }
  return v76;
}

uint64_t stringmap_loc_ElemCopyPtr_0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = a1;
  return 0;
}

uint64_t phonmap_loc_GetStrMap(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5)
{
  uint64_t v10;
  uint64_t Chunk;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v21;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v26 = 0;
  v25 = 0;
  v24 = 0;
  *a4 = 0;
  __strcpy_chk();
  __strcat_chk();
  __strcat_chk();
  v10 = 0;
  if ((ssftmap_FindReadOnly(*(_QWORD *)(a1 + 616), (uint64_t)v27, a4) & 0x80000000) != 0)
  {
    Chunk = ssftriff_reader_ObjOpen(*(_WORD **)a1, *(_QWORD *)(a1 + 8), 2 * (a5 != 0), a2, "PHMP", 1031, (uint64_t *)&v26);
    if ((Chunk & 0x80000000) != 0
      || (Chunk = ssftriff_reader_FindChunk((uint64_t)v26, a3, 1, &v25, &v24), (Chunk & 0x80000000) != 0)
      || (Chunk = stringmap_reader_ObjOpen(*(_WORD **)a1, *(_QWORD *)(a1 + 8), a2, (uint64_t)v26, a4),
          (Chunk & 0x80000000) != 0))
    {
      v10 = Chunk;
    }
    else
    {
      v10 = ssftmap_Insert(*(_QWORD *)(a1 + 616), (uint64_t)v27, *a4);
      if ((v10 & 0x80000000) != 0)
      {
        stringmap_reader_ObjClose((_QWORD *)*a4, v12, v13, v14, v15, v16, v17, v18);
        *a4 = 0;
      }
    }
    if (v24)
    {
      v19 = ssftriff_reader_CloseChunk((uint64_t)v26);
      if (v19 >= 0 || (int)v10 <= -1)
        v10 = v10;
      else
        v10 = v19;
    }
    if (v26)
    {
      v21 = ssftriff_reader_ObjClose(v26, v12, v13, v14, v15, v16, v17, v18);
      if (v21 >= 0 || (int)v10 <= -1)
        v10 = v10;
      else
        v10 = v21;
    }
    if ((v10 & 0x80000000) == 0)
    {
      if (*a4)
        return v10;
      else
        return 2322604033;
    }
  }
  return v10;
}

uint64_t phonmap_findMapTroughLng(uint64_t result, char *a2)
{
  uint64_t v3;
  char *v4;
  uint64_t *v5;

  if (result)
  {
    v5 = 0;
    if ((ssftmap_IteratorOpen(result, 0, 1, (uint64_t)&v5) & 0x80000000) == 0)
    {
      v3 = 0;
      v4 = 0;
      while ((ssftmap_IteratorNext(v5, &v4, &v3) & 0x80000000) == 0)
      {
        if (!a2 || !LH_stricmp(v4, a2))
        {
          ssftmap_IteratorClose((uint64_t)v5);
          return v3;
        }
      }
      ssftmap_IteratorClose((uint64_t)v5);
    }
    return 0;
  }
  return result;
}

uint64_t phonmap_reader_Maps(uint64_t a1, int a2, char *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  int v10[2];
  uint64_t v11;
  uint64_t *v12;

  v12 = 0;
  v4 = 2322604052;
  if (!a1)
    return 2322604039;
  if ((ssftmap_IteratorOpen(a1, 0, 1, (uint64_t)&v12) & 0x80000000) == 0)
  {
    *(_QWORD *)v10 = 0;
    v11 = 0;
    while ((ssftmap_IteratorNext(v12, &v11, v10) & 0x80000000) == 0)
    {
      if (a2)
        v8 = stringmap_reader_ReverseMap(*(uint64_t *)v10, a3, a4);
      else
        v8 = stringmap_reader_Map(*(uint64_t *)v10, a3, a4);
      v4 = v8;
      if ((v8 & 0x80000000) == 0)
      {
        v4 = 0;
        break;
      }
    }
    ssftmap_IteratorClose((uint64_t)v12);
  }
  return v4;
}

uint64_t phonmap_LhPToLhTtsSequenceLng(_QWORD *a1, int a2, int a3, const char *a4, unsigned int a5, char *a6, char *a7)
{
  char *v7;
  const char *v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t StrMap;
  uint64_t v18;
  uint64_t v19;
  uint64_t MapTroughLng;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  const char *v33;
  char *v34;
  int v35;
  int v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  unsigned __int8 v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int16 v48;
  char *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  size_t v54;
  signed int DurValue;
  _BOOL4 IsAbs;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  size_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  size_t v69;
  char *v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  size_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  size_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  int v110;
  unsigned __int8 v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unsigned __int16 v117;
  uint64_t v118;
  unsigned __int16 v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  size_t v123;
  signed int v124;
  _BOOL4 v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unsigned int v131;
  size_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unsigned int v137;
  size_t v138;
  char *v139;
  int v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unsigned int v147;
  size_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unsigned int v152;
  size_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  size_t v171;
  int v172;
  const char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  const char *v178;
  char *__s1;
  char *__s1a;
  uint64_t v181;
  uint64_t v182;
  const char *v183;
  const char *v184;
  size_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *__s;
  char *v191;
  __int16 v192;
  char v193[128];
  char v194[8];
  uint64_t v195;
  uint64_t v196;
  char __s2[128];
  uint64_t v198;

  v198 = *MEMORY[0x1E0C80C00];
  v188 = 0;
  if (!a4)
    return 2322604039;
  v7 = a6;
  if (!a6)
    return 2322604039;
  if (!a5)
    return 2322604039;
  v9 = a4;
  if (!*a4)
    return 2322604039;
  StrMap = safeh_HandleCheck((uint64_t)a1, a2, 29348, 624);
  if ((StrMap & 0x80000000) != 0)
    return StrMap;
  v186 = 2322604039;
  v18 = a1[2];
  if (a3)
  {
    if (a3 == 1)
    {
      if (a7 && *a7)
      {
        strcpy(v193, "phonmap/");
        __strcat_chk();
        StrMap = phonmap_loc_GetStrMap((uint64_t)a1, v193, "LANG", &v188, 0);
        if ((StrMap & 0x80000000) != 0)
          return StrMap;
        v19 = v188;
      }
      else
      {
        v19 = a1[3];
        v188 = v19;
      }
      v181 = v19;
      if (!v19)
        goto LABEL_188;
      goto LABEL_20;
    }
    return 2322604039;
  }
  MapTroughLng = phonmap_findMapTroughLng(a1[7], a7);
  if (!MapTroughLng)
    return 2322604052;
  if (a7 && *a7)
  {
    v181 = MapTroughLng;
    v188 = MapTroughLng;
LABEL_20:
    if (!*v9)
      goto LABEL_187;
    v186 = safeh_HandleCheck((uint64_t)a1, a2, 29348, 624);
    if ((v186 & 0x80000000) != 0)
      goto LABEL_187;
    v22 = a1[2];
    v23 = strlen(v9);
    *v7 = 0;
    log_OutText(*(_QWORD *)(v22 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP phonmap_LhPToLhTtsSequenceLngOneMap : Begin (%s)", v24, v25, v26, (uint64_t)v9);
    v191 = (char *)LhpuCreate(*(_QWORD *)(v22 + 8));
    if (v191)
    {
      v169 = v22;
      LOBYTE(v189) = 0;
      LOBYTE(v195) = 0;
      __s = 0;
      if (v23 >= 1)
      {
        v31 = 0;
        v32 = a5;
        v33 = &v9[v23];
        v173 = &v9[v23];
        v175 = v18;
        __s1 = v7;
        v171 = v32;
        do
        {
          v34 = v191;
          LhplGetSymbol();
          if (v35)
          {
            if (v35 == 1)
              break;
            v36 = 0;
            v37 = 1;
          }
          else
          {
            __s2[0] = 0;
            __s = 0;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(v34);
            stringmap_reader_Map(v181, v38, (uint64_t *)&__s);
            if (__s)
            {
              if (LhpuHasDurSpec((uint64_t)v34) || LhpuGetcBp((uint64_t)v34))
              {
                v39 = __s;
                v40 = strchr(__s, 124);
                if (v40)
                {
                  v41 = 0;
                  do
                  {
                    v42 = v41;
                    v43 = &v39[v41++];
                  }
                  while (v43 < v40);
                }
                else
                {
                  v42 = strlen(v39);
                }
                v183 = v9;
                v177 = v31;
                if (v42 < 2u)
                {
                  __strcpy_chk();
                  if (LhpuHasDurSpec((uint64_t)v34))
                  {
                    DurValue = LhpuGetDurValue((uint64_t)v34);
                    v194[0] = 91;
                    IsAbs = LhpuDurSpecIsAbs((uint64_t)v34);
                    v57 = &v194[1];
                    v7 = __s1;
                    if (!IsAbs)
                    {
                      if (DurValue < 1)
                      {
                        v58 = 1;
                      }
                      else
                      {
                        v194[1] = 43;
                        v58 = 2;
                      }
                      v57 = &v194[v58];
                    }
                    LH_itoa(DurValue, v57, 0xAu);
                    __strcat_chk();
                    if (LhpuGetcBp((uint64_t)v34))
                    {
                      v75 = 0;
                      v76 = 0;
                      do
                      {
                        v194[0] = 40;
                        v77 = LhpuGetpBp((uint64_t)v34);
                        LH_itoa(*(__int16 *)(v77 + v75 + 2), &v194[1], 0xAu);
                        __strcat_chk();
                        v78 = *(unsigned __int16 *)(LhpuGetpBp((uint64_t)v34) + v75);
                        v79 = strlen(v194);
                        LH_itoa(v78, &v194[v79], 0xAu);
                        __strcat_chk();
                        __strcat_chk();
                        ++v76;
                        v75 += 4;
                      }
                      while (v76 < LhpuGetcBp((uint64_t)v34));
                    }
                  }
                  else
                  {
                    __strcat_chk();
                    v7 = __s1;
                    if (LhpuGetcBp((uint64_t)v34))
                    {
                      v65 = 0;
                      v66 = 0;
                      do
                      {
                        v194[0] = 40;
                        v67 = LhpuGetpBp((uint64_t)v34);
                        LH_itoa(*(__int16 *)(v67 + v65 + 2), &v194[1], 0xAu);
                        __strcat_chk();
                        v68 = *(unsigned __int16 *)(LhpuGetpBp((uint64_t)v34) + v65);
                        v69 = strlen(v194);
                        LH_itoa(v68, &v194[v69], 0xAu);
                        __strcat_chk();
                        __strcat_chk();
                        ++v66;
                        v65 += 4;
                      }
                      while (v66 < LhpuGetcBp((uint64_t)v34));
                    }
                  }
                  __strcat_chk();
                  v9 = v183;
                  v32 = v171;
                  v33 = v173;
                  v18 = v175;
                }
                else
                {
                  v44 = 0;
                  v196 = 0;
                  v45 = v42;
                  do
                  {
                    if (v40)
                    {
                      __s2[v44 - 8] = atoi(v40 + 1);
                      v40 = strchr(v40 + 1, 58);
                    }
                    ++v44;
                  }
                  while (v45 != v44);
                  v187 = v45;
                  if (LhpuHasDurSpec((uint64_t)v34))
                  {
                    if (LhpuDurSpecIsAbs((uint64_t)v34))
                    {
                      v46 = 0;
                      LODWORD(v47) = 0;
                      v48 = 0;
                      v49 = v191;
                      do
                      {
                        *(_WORD *)v194 = __s[v46];
                        __strcat_chk();
                        v50 = (int)(__s2[v46 - 8] * LhpuGetDurValue((uint64_t)v34) + 50)
                            / 100;
                        v194[0] = 91;
                        LH_itoa((unsigned __int16)v50, &v194[1], 0xAu);
                        __strcat_chk();
                        if (v47 < LhpuGetcBp((uint64_t)v49))
                        {
                          v51 = 4 * v47;
                          v47 = v47;
                          do
                          {
                            if ((unsigned __int16)v50 + v48 < *(__int16 *)(LhpuGetpBp((uint64_t)v49) + v51 + 2))
                              break;
                            v194[0] = 40;
                            v52 = LhpuGetpBp((uint64_t)v49);
                            LH_itoa(*(__int16 *)(v52 + v51 + 2) - v48, &v194[1], 0xAu);
                            __strcat_chk();
                            v53 = *(unsigned __int16 *)(LhpuGetpBp((uint64_t)v49) + v51);
                            v54 = strlen(v194);
                            LH_itoa(v53, &v194[v54], 0xAu);
                            __strcat_chk();
                            __strcat_chk();
                            ++v47;
                            v51 += 4;
                          }
                          while (v47 < LhpuGetcBp((uint64_t)v49));
                          LODWORD(v47) = v47;
                          v9 = v183;
                        }
                        __strcat_chk();
                        v48 += v50;
                        ++v46;
                        v34 = v49;
                      }
                      while (v46 != v187);
                    }
                    else
                    {
                      *(_WORD *)v194 = *__s;
                      __strcat_chk();
                      v194[0] = 91;
                      v71 = LhpuGetDurValue((uint64_t)v34);
                      v72 = 1374389535 * (v196 * v71 + 50);
                      v73 = (v72 >> 37) + ((unint64_t)v72 >> 63);
                      if (v73 << 16 < 1)
                      {
                        v74 = 1;
                      }
                      else
                      {
                        v194[1] = 43;
                        v74 = 2;
                      }
                      LH_itoa((__int16)v73, &v194[v74], 0xAu);
                      __strcat_chk();
                      if (LhpuGetcBp((uint64_t)v34))
                      {
                        v80 = 0;
                        v81 = 0;
                        do
                        {
                          v194[0] = 40;
                          v82 = LhpuGetpBp((uint64_t)v34);
                          LH_itoa(*(__int16 *)(v82 + v80 + 2), &v194[1], 0xAu);
                          __strcat_chk();
                          v83 = *(unsigned __int16 *)(LhpuGetpBp((uint64_t)v34) + v80);
                          v84 = strlen(v194);
                          LH_itoa(v83, &v194[v84], 0xAu);
                          __strcat_chk();
                          __strcat_chk();
                          ++v81;
                          v80 += 4;
                        }
                        while (v81 < LhpuGetcBp((uint64_t)v34));
                      }
                      __strcat_chk();
                      v85 = 1;
                      v9 = v183;
                      do
                      {
                        *(_WORD *)v194 = __s[v85];
                        __strcat_chk();
                        v194[0] = 91;
                        v86 = 1374389535
                            * (int)(__s2[v85 - 8] * LhpuGetDurValue((uint64_t)v34) + 50);
                        v87 = (v86 >> 37) + ((unint64_t)v86 >> 63);
                        if (v87 << 16 < 1)
                        {
                          v88 = 1;
                        }
                        else
                        {
                          v194[1] = 43;
                          v88 = 2;
                        }
                        LH_itoa((__int16)v87, &v194[v88], 0xAu);
                        __strcat_chk();
                        __strcat_chk();
                        ++v85;
                      }
                      while (v45 != v85);
                    }
                  }
                  else
                  {
                    *(_WORD *)v194 = *__s;
                    __strcat_chk();
                    __strcat_chk();
                    if (LhpuGetcBp((uint64_t)v34))
                    {
                      v59 = 0;
                      v60 = 0;
                      do
                      {
                        v194[0] = 40;
                        v61 = LhpuGetpBp((uint64_t)v34);
                        LH_itoa(*(__int16 *)(v61 + v59 + 2), &v194[1], 0xAu);
                        __strcat_chk();
                        v62 = *(unsigned __int16 *)(LhpuGetpBp((uint64_t)v34) + v59);
                        v63 = strlen(v194);
                        LH_itoa(v62, &v194[v63], 0xAu);
                        __strcat_chk();
                        __strcat_chk();
                        ++v60;
                        v59 += 4;
                      }
                      while (v60 < LhpuGetcBp((uint64_t)v34));
                    }
                    __strcat_chk();
                    v64 = 1;
                    v9 = v183;
                    do
                    {
                      *(_WORD *)v194 = __s[v64];
                      __strcat_chk();
                      ++v64;
                    }
                    while (v45 != v64);
                  }
                  v31 = v177;
                  v7 = __s1;
                  v33 = v173;
                  v18 = v175;
                  v32 = v171;
                }
              }
              else
              {
                __strcpy_chk();
                v70 = strchr(__s2, 124);
                if (v70)
                  *v70 = 0;
              }
            }
            else
            {
              v186 = 1;
            }
            if (strlen(__s2) + (unsigned __int16)v31 >= v32)
            {
              v36 = 1;
            }
            else
            {
              strcat(v7, __s2);
              v89 = strlen(__s2);
              v36 = 0;
              v31 = (v31 + v89);
            }
            v37 = v195 + 1;
          }
          if (v36)
            break;
          v9 += v37;
        }
        while (v9 < v33);
      }
      LhpuRemove(*(_QWORD **)(v169 + 8), (uint64_t *)&v191);
      log_OutText(*(_QWORD *)(v169 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP phonmap_LhPToLhTtsSequenceLngOneMap : End (%x, %s)", v90, v91, v92, v186);
      if ((_DWORD)v186 != 1)
        goto LABEL_187;
      v93 = *(_QWORD *)(v169 + 32);
      goto LABEL_181;
    }
    v162 = *(_QWORD *)(v22 + 32);
LABEL_185:
    log_OutPublic(v162, (uint64_t)"PHONMAP", 29000, 0, v27, v28, v29, v30, v166);
    v161 = 2322604042;
    goto LABEL_186;
  }
  if (!*v9)
    goto LABEL_187;
  v182 = a1[7];
  v186 = safeh_HandleCheck((uint64_t)a1, a2, 29348, 624);
  if ((v186 & 0x80000000) != 0)
    goto LABEL_187;
  v94 = a1[2];
  v95 = strlen(v9);
  *v7 = 0;
  log_OutText(*(_QWORD *)(v94 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP phonmap_LhPToLhTtsSequenceLngOneMap : Begin (%s)", v96, v97, v98, (uint64_t)v9);
  *(_QWORD *)v194 = LhpuCreate(*(_QWORD *)(v94 + 8));
  if (!*(_QWORD *)v194)
  {
    v162 = *(_QWORD *)(v94 + 32);
    goto LABEL_185;
  }
  v192 = 0;
  v191 = 0;
  if (v95 >= 1)
  {
    v99 = 0;
    v185 = a5;
    v100 = &v9[v95];
    v178 = &v9[v95];
    __s1a = v7;
    v176 = v18;
    v170 = v94;
    do
    {
      LhplGetSymbol();
      if (v101)
      {
        if (v101 == 1)
          break;
        v102 = 0;
        ++v9;
      }
      else
      {
        __s = 0;
        if ((ssftmap_IteratorOpen(v182, 0, 1, (uint64_t)&__s) & 0x80000000) != 0)
        {
          v102 = 0;
        }
        else
        {
          v196 = 0;
          v189 = 0;
          v191 = 0;
          if ((ssftmap_IteratorNext((uint64_t *)__s, &v196, &v189) & 0x80000000) != 0)
          {
            v102 = 0;
          }
          else
          {
            v103 = *(_QWORD *)v194;
            __s2[0] = 0;
            v191 = 0;
            v104 = v189;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(*(_QWORD *)v194);
            stringmap_reader_Map(v104, v105, (uint64_t *)&v191);
            if (v191)
            {
              v102 = 0;
LABEL_115:
              if (LhpuHasDurSpec(v103) || LhpuGetcBp(v103))
              {
                v172 = v102;
                v174 = v99;
                v108 = v191;
                v109 = strchr(v191, 124);
                if (v109)
                {
                  v110 = 0;
                  do
                  {
                    v111 = v110;
                    v112 = &v108[v110++];
                  }
                  while (v112 < v109);
                }
                else
                {
                  v111 = strlen(v108);
                }
                v184 = v9;
                if (v111 < 2u)
                {
                  __strcpy_chk();
                  if (LhpuHasDurSpec(v103))
                  {
                    v124 = LhpuGetDurValue(v103);
                    v193[0] = 91;
                    v125 = LhpuDurSpecIsAbs(v103);
                    v126 = &v193[1];
                    v99 = v174;
                    if (!v125)
                    {
                      if (v124 < 1)
                      {
                        v127 = 1;
                      }
                      else
                      {
                        v193[1] = 43;
                        v127 = 2;
                      }
                      v126 = &v193[v127];
                    }
                    LH_itoa(v124, v126, 0xAu);
                    __strcat_chk();
                    if (LhpuGetcBp(v103))
                    {
                      v144 = 0;
                      v145 = 0;
                      do
                      {
                        v193[0] = 40;
                        v146 = LhpuGetpBp(v103);
                        LH_itoa(*(__int16 *)(v146 + v144 + 2), &v193[1], 0xAu);
                        __strcat_chk();
                        v147 = *(unsigned __int16 *)(LhpuGetpBp(v103) + v144);
                        v148 = strlen(v193);
                        LH_itoa(v147, &v193[v148], 0xAu);
                        __strcat_chk();
                        __strcat_chk();
                        ++v145;
                        v144 += 4;
                      }
                      while (v145 < LhpuGetcBp(v103));
                    }
                  }
                  else
                  {
                    __strcat_chk();
                    v99 = v174;
                    if (LhpuGetcBp(v103))
                    {
                      v134 = 0;
                      v135 = 0;
                      do
                      {
                        v193[0] = 40;
                        v136 = LhpuGetpBp(v103);
                        LH_itoa(*(__int16 *)(v136 + v134 + 2), &v193[1], 0xAu);
                        __strcat_chk();
                        v137 = *(unsigned __int16 *)(LhpuGetpBp(v103) + v134);
                        v138 = strlen(v193);
                        LH_itoa(v137, &v193[v138], 0xAu);
                        __strcat_chk();
                        __strcat_chk();
                        ++v135;
                        v134 += 4;
                      }
                      while (v135 < LhpuGetcBp(v103));
                    }
                  }
                  __strcat_chk();
                  v9 = v184;
                  v100 = v178;
                  v102 = v172;
                  v94 = v170;
                }
                else
                {
                  v113 = 0;
                  v195 = 0;
                  v114 = v111;
                  do
                  {
                    if (v109)
                    {
                      *((_BYTE *)&v195 + v113) = atoi(v109 + 1);
                      v109 = strchr(v109 + 1, 58);
                    }
                    ++v113;
                  }
                  while (v114 != v113);
                  if (LhpuHasDurSpec(v103))
                  {
                    if (LhpuDurSpecIsAbs(v103))
                    {
                      v115 = 0;
                      LODWORD(v116) = 0;
                      v117 = 0;
                      do
                      {
                        v193[0] = v191[v115];
                        v193[1] = 0;
                        __strcat_chk();
                        v118 = 1374389535
                             * (int)(*((unsigned __int8 *)&v195 + v115) * LhpuGetDurValue(v103) + 50);
                        v119 = (v118 >> 37) + ((unint64_t)v118 >> 63);
                        v193[0] = 91;
                        LH_itoa(v119, &v193[1], 0xAu);
                        __strcat_chk();
                        if (v116 < LhpuGetcBp(v103))
                        {
                          v120 = 4 * v116;
                          v116 = v116;
                          do
                          {
                            if (v119 + v117 < *(__int16 *)(LhpuGetpBp(v103) + v120 + 2))
                              break;
                            v193[0] = 40;
                            v121 = LhpuGetpBp(v103);
                            LH_itoa(*(__int16 *)(v121 + v120 + 2) - v117, &v193[1], 0xAu);
                            __strcat_chk();
                            v122 = *(unsigned __int16 *)(LhpuGetpBp(v103) + v120);
                            v123 = strlen(v193);
                            LH_itoa(v122, &v193[v123], 0xAu);
                            __strcat_chk();
                            __strcat_chk();
                            ++v116;
                            v120 += 4;
                          }
                          while (v116 < LhpuGetcBp(v103));
                          LODWORD(v116) = v116;
                          v9 = v184;
                          v100 = v178;
                        }
                        __strcat_chk();
                        v117 += v119;
                        ++v115;
                      }
                      while (v115 != v114);
                    }
                    else
                    {
                      v193[0] = *v191;
                      v193[1] = 0;
                      __strcat_chk();
                      v193[0] = 91;
                      v140 = LhpuGetDurValue(v103);
                      v141 = 1374389535 * (v195 * v140 + 50);
                      v142 = (v141 >> 37) + ((unint64_t)v141 >> 63);
                      if (v142 << 16 < 1)
                      {
                        v143 = 1;
                      }
                      else
                      {
                        v193[1] = 43;
                        v143 = 2;
                      }
                      LH_itoa((__int16)v142, &v193[v143], 0xAu);
                      __strcat_chk();
                      if (LhpuGetcBp(v103))
                      {
                        v149 = 0;
                        v150 = 0;
                        do
                        {
                          v193[0] = 40;
                          v151 = LhpuGetpBp(v103);
                          LH_itoa(*(__int16 *)(v151 + v149 + 2), &v193[1], 0xAu);
                          __strcat_chk();
                          v152 = *(unsigned __int16 *)(LhpuGetpBp(v103) + v149);
                          v153 = strlen(v193);
                          LH_itoa(v152, &v193[v153], 0xAu);
                          __strcat_chk();
                          __strcat_chk();
                          ++v150;
                          v149 += 4;
                        }
                        while (v150 < LhpuGetcBp(v103));
                      }
                      __strcat_chk();
                      v154 = 1;
                      v9 = v184;
                      v100 = v178;
                      do
                      {
                        v193[0] = v191[v154];
                        v193[1] = 0;
                        __strcat_chk();
                        v193[0] = 91;
                        v155 = 1374389535
                             * (int)(*((unsigned __int8 *)&v195 + v154) * LhpuGetDurValue(v103) + 50);
                        v156 = (v155 >> 37) + ((unint64_t)v155 >> 63);
                        if (v156 << 16 < 1)
                        {
                          v157 = 1;
                        }
                        else
                        {
                          v193[1] = 43;
                          v157 = 2;
                        }
                        LH_itoa((__int16)v156, &v193[v157], 0xAu);
                        __strcat_chk();
                        __strcat_chk();
                        ++v154;
                      }
                      while (v114 != v154);
                    }
                  }
                  else
                  {
                    v193[0] = *v191;
                    v193[1] = 0;
                    __strcat_chk();
                    __strcat_chk();
                    if (LhpuGetcBp(v103))
                    {
                      v128 = 0;
                      v129 = 0;
                      do
                      {
                        v193[0] = 40;
                        v130 = LhpuGetpBp(v103);
                        LH_itoa(*(__int16 *)(v130 + v128 + 2), &v193[1], 0xAu);
                        __strcat_chk();
                        v131 = *(unsigned __int16 *)(LhpuGetpBp(v103) + v128);
                        v132 = strlen(v193);
                        LH_itoa(v131, &v193[v132], 0xAu);
                        __strcat_chk();
                        __strcat_chk();
                        ++v129;
                        v128 += 4;
                      }
                      while (v129 < LhpuGetcBp(v103));
                    }
                    __strcat_chk();
                    v133 = 1;
                    v9 = v184;
                    do
                    {
                      v193[0] = v191[v133];
                      v193[1] = 0;
                      __strcat_chk();
                      ++v133;
                    }
                    while (v114 != v133);
                  }
                  v94 = v170;
                  v99 = v174;
                  v102 = v172;
                }
              }
              else
              {
                __strcpy_chk();
                v139 = strchr(__s2, 124);
                if (v139)
                  *v139 = 0;
              }
              v18 = v176;
              if (strlen(__s2) + (unsigned __int16)v99 >= v185)
              {
                v102 = 1;
              }
              else
              {
                strcat(__s1a, __s2);
                v99 = v99 + strlen(__s2);
              }
              v9 += v192 + 1;
            }
            else
            {
              v102 = 0;
              while (1)
              {
                if (strlen(__s2) + (unsigned __int16)v99 >= v185)
                {
                  v102 = 1;
                }
                else
                {
                  strcat(__s1a, __s2);
                  v99 = v99 + strlen(__s2);
                }
                v9 += v192 + 1;
                if ((ssftmap_IteratorNext((uint64_t *)__s, &v196, &v189) & 0x80000000) != 0)
                  break;
                __s2[0] = 0;
                v191 = 0;
                v106 = v189;
                kaldi::CuMatrixBase<float>::~CuMatrixBase(v103);
                stringmap_reader_Map(v106, v107, (uint64_t *)&v191);
                if (v191)
                {
                  v186 = 1;
                  goto LABEL_115;
                }
              }
              v186 = 1;
              v18 = v176;
            }
          }
          ssftmap_IteratorClose((uint64_t)__s);
        }
      }
    }
    while (!v102 && v9 < v100);
  }
  LhpuRemove(*(_QWORD **)(v94 + 8), (uint64_t *)v194);
  log_OutText(*(_QWORD *)(v94 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP phonmap_LhPToLhTtsSequenceLngOneMap : End (%x, %s)", v158, v159, v160, v186);
  if ((_DWORD)v186 != 1)
    goto LABEL_187;
  v93 = *(_QWORD *)(v94 + 32);
LABEL_181:
  log_OutText(v93, (uint64_t)"PHONMAP", 4, 0, (uint64_t)"Wrong L&H+ phoneme", v14, v15, v16, v167);
  v161 = 1;
LABEL_186:
  v186 = v161;
LABEL_187:
  StrMap = v186;
LABEL_188:
  log_OutText(*(_QWORD *)(v18 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP LhPToLhTtsSequence : End (%x, %s)", v14, v15, v16, StrMap);
  if ((_DWORD)StrMap == 1)
  {
    log_OutText(*(_QWORD *)(v18 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"Wrong L&H+ phoneme", v163, v164, v165, v168);
    return 1;
  }
  else if ((StrMap & 0x80000000) != 0
         && ((unsigned __int16)StrMap & 0x1FFFu) <= 0x14
         && ((1 << StrMap) & 0x10001A) != 0)
  {
    return StrMap & 0x1FFF | 0x8A702000;
  }
  return StrMap;
}

uint64_t phonmap_GetLhPAlphabetCore(uint64_t a1, _WORD *a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;

  v13 = 0;
  v12 = 0;
  result = stringmap_reader_MapGetRawData(a1, &v13, &v12);
  if ((result & 0x80000000) == 0)
  {
    v6 = v13;
    if (v13)
    {
      v7 = 0;
      v8 = 0;
      v9 = v12;
      v10 = 1;
      while (1)
      {
        if (*(_BYTE *)(v9 + v7))
        {
          if (v6 > v7)
          {
            while (*(_BYTE *)(v9 + v7))
            {
              if (v10)
              {
                v11 = (unsigned __int16)*a2;
                if (*a2)
                {
                  if (v11 <= (unsigned __int16)v8)
                    goto LABEL_26;
                  *(_BYTE *)(a3 + (unsigned __int16)v8) = *(_BYTE *)(v9 + v7);
                }
                ++v8;
              }
              if (++v7 >= v6)
              {
                v7 = v6;
                if (v10)
                  goto LABEL_19;
                goto LABEL_23;
              }
            }
          }
          v7 = v7;
          if (v10)
          {
LABEL_19:
            v11 = (unsigned __int16)*a2;
            if (*a2)
            {
              if (v11 <= (unsigned __int16)v8)
                goto LABEL_26;
              *(_BYTE *)(a3 + (unsigned __int16)v8) = 32;
            }
            ++v8;
          }
LABEL_23:
          v10 ^= 1u;
        }
        else
        {
          ++v7;
        }
        if (v7 >= v6)
          goto LABEL_25;
      }
    }
  }
  LOWORD(v8) = 0;
LABEL_25:
  v11 = (unsigned __int16)*a2;
  if (*a2)
  {
LABEL_26:
    if (v11 <= (unsigned __int16)v8)
      result = 2322604041;
    else
      *(_BYTE *)(a3 + (unsigned __int16)v8) = 0;
  }
  *a2 = v8 + 1;
  return result;
}

uint64_t phonmap_reader_MapsGetGetLhPAlphabetCore(uint64_t a1, __int16 *a2, uint64_t a3)
{
  uint64_t LhPAlphabetCore;
  uint64_t v4;
  __int16 v7;
  unsigned __int16 v8;
  __int16 v9;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t *v14;

  LhPAlphabetCore = 2322604052;
  v14 = 0;
  v4 = 2322604039;
  if (a1 && a3)
  {
    v7 = *a2;
    v13 = *a2;
    if ((ssftmap_IteratorOpen(a1, 0, 1, (uint64_t)&v14) & 0x80000000) != 0)
    {
      return 2322604052;
    }
    else
    {
      v11 = 0;
      v12 = 0;
      if ((ssftmap_IteratorNext(v14, &v12, &v11) & 0x80000000) == 0)
      {
        v8 = 0;
        v9 = v7;
        while (1)
        {
          LhPAlphabetCore = phonmap_GetLhPAlphabetCore(v11, &v13, a3 + v8);
          if ((LhPAlphabetCore & 0x80000000) != 0)
            break;
          v9 -= v13 - 1;
          v8 += v13 - 1;
          v13 = v9;
          if ((ssftmap_IteratorNext(v14, &v12, &v11) & 0x80000000) != 0)
          {
            v7 = v7 - v9 + 1;
            break;
          }
        }
      }
      *a2 = v7;
      ssftmap_IteratorClose((uint64_t)v14);
      return LhPAlphabetCore;
    }
  }
  return v4;
}

uint64_t charcount_CountBlanks(_BYTE *a1, unsigned int a2)
{
  unsigned int v4;
  unsigned __int16 v5;

  if (a1 && a2)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      if (utf8_BelongsToSet(4u, a1, v4, a2))
        ++v5;
      v4 = (unsigned __int16)(utf8_determineUTF8CharLength(a1[v4]) + v4);
    }
    while (v4 < a2);
  }
  else
  {
    return 0;
  }
  return v5;
}

uint64_t charcount_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 2)
    return 2709528577;
  result = 0;
  *a2 = &ICharcount;
  return result;
}

uint64_t charcount_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v29;
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  _QWORD *(*v33)(uint64_t, _QWORD *);
  uint64_t v34;

  v5 = 2709528586;
  v34 = 0;
  if (!a5)
    return 2709528582;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v34);
  if ((inited & 0x80000000) != 0)
    return inited;
  log_OutText(*(_QWORD *)(v34 + 32), (uint64_t)"CHARCOUNT", 4, 0, (uint64_t)"CHARCOUNT ObjOpen: Begin", v10, v11, v12, v29);
  v13 = (_QWORD *)heap_Calloc(*(_QWORD **)(v34 + 8), 1, 48);
  if (!v13)
  {
    v22 = v34;
    goto LABEL_11;
  }
  v18 = v13;
  *v13 = a3;
  v13[1] = a4;
  v19 = v34;
  v13[2] = v34;
  v20 = *(_QWORD **)(v19 + 8);
  v31 = xmmword_1EA93F760;
  *(_QWORD *)&v32 = charcount_ElemFreeParts;
  v21 = vector_ObjOpen(v20, &v31, 1, v18 + 3);
  v22 = v34;
  if (!v21)
  {
LABEL_11:
    log_OutPublic(*(_QWORD *)(v22 + 32), (uint64_t)"CHARCOUNT", 16000, 0, v14, v15, v16, v17, v30);
    return v5;
  }
  v23 = *(_QWORD **)(v34 + 8);
  v31 = xmmword_1EA93F778;
  v32 = *(_OWORD *)off_1EA93F788;
  v33 = charcount_IElemValueFree;
  v5 = ssftmap_ObjOpen(v23, 0, &v31, v18 + 4);
  v27 = 29350;
  if ((v5 & 0x80000000) != 0)
  {
    *(_QWORD *)a5 = v18;
    *(_DWORD *)(a5 + 8) = 29350;
    charcount_ObjClose(v18, *(_QWORD *)(a5 + 8));
    v18 = 0;
    v27 = 0;
  }
  *(_QWORD *)a5 = v18;
  *(_DWORD *)(a5 + 8) = v27;
  log_OutText(*(_QWORD *)(v34 + 32), (uint64_t)"CHARCOUNT", 4, 0, (uint64_t)"CHARCOUNT ObjOpen: End (%x)", v24, v25, v26, v5);
  return v5;
}

uint64_t charcount_ObjClose(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = safeh_HandleCheck((uint64_t)a1, a2, 29350, 48);
  if ((v6 & 0x80000000) == 0)
  {
    v7 = a1[2];
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"CHARCOUNT", 4, 0, (uint64_t)"CHARCOUNT ObjClose : Begin", v3, v4, v5, v12);
    vector_ObjClose(a1[3]);
    ssftmap_ObjClose(a1[4]);
    heap_Free(*(_QWORD **)(v7 + 8), (uint64_t)a1);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"CHARCOUNT", 4, 0, (uint64_t)"CHARCOUNT ObjClose : End (%x)", v8, v9, v10, v6);
  }
  return v6;
}

uint64_t charcount_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = safeh_HandleCheck(a1, a2, 29350, 48);
  if ((v6 & 0x80000000) == 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"CHARCOUNT", 4, 0, (uint64_t)"CHARCOUNT ObjReopen : Begin", v3, v4, v5, v12);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"CHARCOUNT", 4, 0, (uint64_t)"CHARCOUNT ObjReopen : End (%x)", v8, v9, v10, v6);
  }
  return v6;
}

uint64_t charcount_AddCharcountEvent(uint64_t a1, int a2, _BYTE *a3, unsigned __int16 a4)
{
  uint64_t Str;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  char *__s2;
  char *__s;

  __s2 = 0;
  __s = 0;
  Str = safeh_HandleCheck(a1, a2, 29350, 48);
  if ((Str & 0x80000000) != 0)
    return Str;
  v27[0] = 0;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = a4;
  v10 = Utf8_LengthInUtf8chars((unint64_t)a3, a4);
  v11 = v10 - charcount_CountBlanks(a3, v9);
  *(_DWORD *)(a1 + 40) += v11;
  Str = paramc_ParamGetStr(*(_QWORD *)(v8 + 40), (uint64_t)"voice", &__s);
  if ((Str & 0x80000000) != 0)
    return Str;
  v12 = paramc_ParamGetStr(*(_QWORD *)(v8 + 40), (uint64_t)"voiceoperatingpoint", &__s2);
  if ((v12 & 0x80000000) == 0
    || (v12 = paramc_ParamGetStr(*(_QWORD *)(v8 + 40), (uint64_t)"voicemodel", &__s2), (v12 & 0x80000000) == 0))
  {
    v13 = strlen(__s);
    v14 = strlen(__s2);
    v15 = (char *)heap_Calloc(*(_QWORD **)(v8 + 8), 1, (v13 + v14 + 2));
    if (v15)
    {
      v20 = v15;
      v21 = strcpy(v15, __s);
      *(_WORD *)&v20[strlen(v21)] = 95;
      strcat(v20, __s2);
      LODWORD(v27[0]) = v11;
      v27[1] = v20;
      if (!vector_Add(*(_QWORD *)(a1 + 24), v27))
      {
        v12 = 2709528586;
        log_OutPublic(*(_QWORD *)(v8 + 32), (uint64_t)"CHARCOUNT", 16000, 0, v22, v23, v24, v25, v27[0]);
      }
      heap_Free(*(_QWORD **)(v8 + 8), (uint64_t)v20);
    }
    else
    {
      v12 = 2709528586;
      log_OutPublic(*(_QWORD *)(v8 + 32), (uint64_t)"CHARCOUNT", 16000, 0, v16, v17, v18, v19, v27[0]);
    }
  }
  return v12;
}

uint64_t charcount_ReportCharcounts(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int Size;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  _DWORD *v31;
  uint64_t v32;

  v31 = 0;
  v30 = 0;
  v28 = 0;
  v29 = 0;
  v3 = safeh_HandleCheck((uint64_t)a1, a2, 29350, 48);
  v4 = v3;
  if ((int)v3 >= 0)
    v5 = a1;
  else
    v5 = 0;
  if ((v3 & 0x80000000) == 0)
  {
    v32 = 0;
    v6 = a1[2];
    Size = vector_GetSize(a1[3]);
    if (Size)
    {
      v8 = Size;
      v9 = 0;
      while (vector_GetElemAt(a1[3], v9, &v32))
      {
        if ((ssftmap_FindReadOnly(a1[4], *(_QWORD *)(v32 + 8), &v31) & 0x80000000) != 0)
        {
          v10 = v32;
          v30 = *(_DWORD *)v32;
        }
        else
        {
          v30 = *(_DWORD *)v32 + *v31;
          ssftmap_Remove(a1[4], *(_QWORD *)(v32 + 8));
          v10 = v32;
        }
        v4 = ssftmap_Insert(a1[4], *(_QWORD *)(v10 + 8), (uint64_t)&v30);
        if ((v4 & 0x80000000) != 0)
          return v4;
        if (v8 == ++v9)
          goto LABEL_13;
      }
      v4 = 2709528576;
    }
    else
    {
LABEL_13:
      if ((ssftmap_IteratorOpen(v5[4], 0, 0, (uint64_t)&v29) & 0x80000000) == 0)
      {
        while ((ssftmap_IteratorNext(v29, &v28, &v31) & 0x80000000) == 0)
        {
          log_OutEvent(*(uint64_t ***)(v6 + 32), 31, "%s%s%s%u", v16, v17, v18, v19, v20, "VOICE_VOP");
          log_OutText(*(_QWORD *)(v6 + 32), (uint64_t)"CHARCOUNT", 5, 0, (uint64_t)"Number of utf-8 characters processed for voice_model%s=%d", v21, v22, v23, v28);
        }
        ssftmap_IteratorClose((uint64_t)v29);
      }
      log_OutEvent(*(uint64_t ***)(v6 + 32), 30, "%s%u", v11, v12, v13, v14, v15, "CHARS");
      log_OutText(*(_QWORD *)(v6 + 32), (uint64_t)"CHARCOUNT", 5, 0, (uint64_t)"Total number of utf-8 characters processed %d", v24, v25, v26, *((unsigned int *)v5 + 10));
    }
    vector_Clear(a1[3]);
    ssftmap_Clear(v5[4]);
    *((_DWORD *)v5 + 10) = 0;
  }
  return v4;
}

uint64_t charcount_CheckAndModifyLastCharcountEvent(uint64_t a1, int a2, _BYTE *a3, unsigned __int16 a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t Str;
  uint64_t v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  char *v15;
  int Size;
  const char *v17;
  size_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v25;
  uint64_t v26;
  char *__s2;
  char *__s;

  __s2 = 0;
  __s = 0;
  v7 = safeh_HandleCheck(a1, a2, 29350, 48);
  if ((v7 & 0x80000000) == 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (charcount_CountBlanks(a3, a4) != a4)
    {
      v26 = 0;
      Str = paramc_ParamGetStr(*(_QWORD *)(v8 + 40), (uint64_t)"voice", &__s);
      if ((Str & 0x80000000) != 0)
      {
        return Str;
      }
      else
      {
        v10 = paramc_ParamGetStr(*(_QWORD *)(v8 + 40), (uint64_t)"voiceoperatingpoint", &__s2);
        if ((v10 & 0x80000000) == 0
          || (v10 = paramc_ParamGetStr(*(_QWORD *)(v8 + 40), (uint64_t)"voicemodel", &__s2),
              v7 = v10,
              (v10 & 0x80000000) == 0))
        {
          v7 = 2709528586;
          v11 = strlen(__s);
          v12 = strlen(__s2);
          v13 = (char *)heap_Calloc(*(_QWORD **)(v8 + 8), 1, (v11 + v12 + 2));
          if (v13)
          {
            v14 = v13;
            v15 = strcpy(v13, __s);
            *(_WORD *)&v14[strlen(v15)] = 95;
            strcat(v14, __s2);
            Size = vector_GetSize(*(_QWORD *)(a1 + 24));
            if (vector_GetElemAt(*(_QWORD *)(a1 + 24), Size - 1, &v26))
            {
              v17 = *(const char **)(v26 + 8);
              if (strcmp(v17, v14))
              {
                v18 = strlen(v14);
                v19 = (char *)heap_Realloc(*(uint64_t **)(v8 + 8), (uint64_t)v17, v18 + 1);
                if (!v19)
                {
                  log_OutPublic(*(_QWORD *)(v8 + 32), (uint64_t)"CHARCOUNT", 16000, 0, v20, v21, v22, v23, v25);
                  goto LABEL_15;
                }
                *(_QWORD *)(v26 + 8) = v19;
                strcpy(v19, v14);
              }
              v7 = v10;
            }
            else
            {
              v7 = 2709528576;
            }
LABEL_15:
            heap_Free(*(_QWORD **)(v8 + 8), (uint64_t)v14);
          }
        }
      }
    }
  }
  return v7;
}

uint64_t charcount_ElemCopyParts(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  size_t v7;

  result = 0;
  if (a1 && a3)
  {
    v7 = strlen(*(const char **)(a1 + 8));
    result = heap_Alloc(a2, v7 + 1);
    *(_QWORD *)(a3 + 8) = result;
    if (result)
    {
      *(_DWORD *)a3 = *(_DWORD *)a1;
      strcpy((char *)result, *(const char **)(a1 + 8));
      return 1;
    }
  }
  return result;
}

_QWORD *charcount_ElemFreeParts(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = result[1];
    if (v2)
      return heap_Free(a2, v2);
  }
  return result;
}

uint64_t charcount_IElemValueCopy(_DWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t result;

  v5 = heap_Alloc(a2, 4);
  if (!v5)
    return 2709528586;
  v6 = (_DWORD *)v5;
  result = 0;
  *v6 = *a1;
  *a3 = v6;
  return result;
}

_QWORD *charcount_IElemValueFree(uint64_t a1, _QWORD *a2)
{
  return heap_Free(a2, a1);
}

uint64_t wordSeg_stricmp(char *a1, unsigned __int8 *a2)
{
  int v2;
  unsigned __int8 *v3;
  int v5;
  int v6;
  BOOL v7;
  uint64_t result;

  LOBYTE(v2) = *a2;
  if (!*a2)
    return 0;
  v3 = a2;
  do
  {
    v5 = *a1;
    v6 = v5 - (char)v2;
    if (v5 == (char)v2)
    {
      ++a1;
      ++v3;
    }
    else if (v5 >= 1 && ssft_tolower(v2) == v5)
    {
      ++a1;
      ++v3;
      v6 = 0;
    }
    v2 = *v3;
    if (v6)
      v7 = 1;
    else
      v7 = v2 == 0;
  }
  while (!v7);
  result = v6 != 0;
  if (v6 < 0)
    return 0xFFFFFFFFLL;
  return result;
}

uint64_t fe_word_seg_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t Object;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  unsigned int v22;
  char v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v28 = 0;
  v29 = 0;
  v5 = 2359304199;
  v26 = 0;
  v27 = 0;
  if (a5)
  {
    v25 = 0;
    v23 = 0;
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v29);
    if ((inited & 0x80000000) != 0)
      return inited;
    inited = objc_GetObject(v29[6], (uint64_t)"SYNTHSTREAM", &v28);
    if ((inited & 0x80000000) != 0)
      return inited;
    Object = objc_GetObject(v29[6], (uint64_t)"FE_DEPES", &v27);
    v9 = v29[6];
    if ((Object & 0x80000000) != 0)
    {
      v20 = "SYNTHSTREAM";
    }
    else
    {
      v10 = objc_GetObject(v9, (uint64_t)"FE_DCTLKP", &v26);
      if ((v10 & 0x80000000) == 0)
      {
        v11 = heap_Alloc(v29[1], 1208);
        if (v11)
        {
          v16 = v11;
          *(_QWORD *)v11 = v29;
          *(_QWORD *)(v11 + 8) = *(_QWORD *)(v28 + 8);
          v17 = v27;
          *(_QWORD *)(v11 + 32) = *(_QWORD *)(v27 + 8);
          *(_OWORD *)(v11 + 16) = *(_OWORD *)(v17 + 16);
          v18 = v26;
          v19 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v11 + 56) = v19;
          *(_OWORD *)(v11 + 40) = *(_OWORD *)(v18 + 16);
          *(_QWORD *)(v11 + 1032) = 0;
          *(_DWORD *)(v11 + 1040) = 0;
          *(_QWORD *)(v11 + 1048) = 0;
          *(_WORD *)(v11 + 1056) = 0;
          *(_QWORD *)(v11 + 1188) = 0x100000000;
          *(_OWORD *)(v11 + 952) = 0u;
          *(_OWORD *)(v11 + 968) = 0u;
          *(_OWORD *)(v11 + 984) = 0u;
          *(_OWORD *)(v11 + 1000) = 0u;
          *(_OWORD *)(v11 + 1010) = 0u;
          v24 = -1;
          v5 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, uint64_t *, __int16 *, char *))(v19 + 96))(*(_QWORD *)(v11 + 40), *(_QWORD *)(v11 + 48), "fecfg", "backtrans", &v25, &v24, &v23);
          if ((v5 & 0x80000000) != 0)
          {
            heap_Free((_QWORD *)v29[1], v16);
          }
          else
          {
            *(_DWORD *)(v16 + 1200) = v24 != 0;
            *(_QWORD *)a5 = v16;
            *(_DWORD *)(a5 + 8) = 86237;
          }
        }
        else
        {
          log_OutPublic(v29[4], (uint64_t)"FE_WORDSEG", 61000, 0, v12, v13, v14, v15, v22);
          objc_ReleaseObject(v29[6], (uint64_t)"SYNTHSTREAM");
          objc_ReleaseObject(v29[6], (uint64_t)"FE_DEPES");
          objc_ReleaseObject(v29[6], (uint64_t)"FE_DCTLKP");
          return 2359304202;
        }
        return v5;
      }
      Object = v10;
      objc_ReleaseObject(v29[6], (uint64_t)"SYNTHSTREAM");
      v9 = v29[6];
      v20 = "FE_DEPES";
    }
    objc_ReleaseObject(v9, (uint64_t)v20);
    return Object;
  }
  return v5;
}

uint64_t fe_word_seg_ObjClose(uint64_t a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 86237, 1208);
  if ((result & 0x80000000) != 0)
    return 2359304200;
  if (a1)
  {
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"FE_DEPES");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"FE_DCTLKP");
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), a1);
    return 0;
  }
  return result;
}

uint64_t fe_word_seg_ObjReopen(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 86237, 1208);
  if ((int)result >= 0)
    return result;
  else
    return 2359304200;
}

uint64_t fe_word_seg_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((safeh_HandleCheck(a1, a2, 86237, 1208) & 0x80000000) != 0)
    return 2359304200;
  synstrmaux_InitStreamOpener(a1 + 64, *(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG");
  synstrmaux_RegisterInStream((_WORD *)(a1 + 64), (uint64_t)"text/plain;charset=utf-8", 0, a1 + 888);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 64), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    0,
    a1 + 904);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 64), (uint64_t)"text/plain;charset=utf-8", a1 + 920);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 64), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 936);
  v7 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 64), *(_QWORD *)(a1 + 8), a3, a4);
  if ((v7 & 0x80000000) != 0
    || (v7 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, void *, _QWORD))(*(_QWORD *)(a1 + 32) + 120))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 0, &unk_1DEC65E6D, 0), (v7 & 0x80000000) != 0))
  {
    v11 = v7;
    *(_BYTE *)(a1 + 1196) = 54;
    synstrmaux_CloseStreams((_WORD *)(a1 + 64), *(_QWORD *)(a1 + 8));
  }
  else
  {
    v11 = (*(uint64_t (**)(_QWORD, _QWORD, const char *))(*(_QWORD *)(a1 + 32) + 80))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), "word_segmentation");
    if ((v11 & 0x80000000) != 0)
    {
      *(_DWORD *)(a1 + 1192) = 0;
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"depes grammar %s not present", v8, v9, v10, (uint64_t)"word_segmentation");
      v11 = 0;
    }
    *(_BYTE *)(a1 + 1196) = 54;
  }
  return v11;
}

uint64_t fe_word_seg_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unsigned __int16 v20;
  unsigned __int16 v21;
  _QWORD *v22;
  uint64_t NewCharStr;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  _QWORD *v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  __int16 v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  char *v51;
  unint64_t v52;
  int v53;
  _QWORD *v54;
  unsigned __int16 v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unsigned __int16 v59;
  char v60;
  uint64_t v61;
  int v62;
  unsigned __int16 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned __int16 v68;
  unsigned __int16 v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t WordDefs;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  char *v107;
  const char *v108;
  void *v109;
  const void *v110;
  int v111;
  const char *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  __int16 v162;
  uint64_t v163;
  unsigned int v164;
  unsigned int v165;
  unsigned __int16 v166;
  int v167;
  _BYTE *v168;
  int v169;
  unsigned __int16 v170;
  uint64_t v171;
  void *__src;
  uint64_t v173;
  uint64_t v174;
  const char *v175;

  v174 = 0;
  v175 = 0;
  v173 = 0;
  v171 = 0;
  v170 = 0;
  v169 = 0;
  if ((safeh_HandleCheck(a1, a2, 86237, 1208) & 0x80000000) != 0)
    return 2359304200;
  __src = 0;
  *a5 = 1;
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, const char **, char *))(*(_QWORD *)(a1 + 8) + 88))(*(_QWORD *)(a1 + 888), *(_QWORD *)(a1 + 896), &v175, (char *)&v174 + 4);
  if ((v7 & 0x80000000) != 0)
    return v7;
  v8 = HIDWORD(v174);
  v9 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)(a1 + 8) + 144))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), (char *)&v173 + 4, &v173);
  if ((v9 & 0x80000000) != 0)
    return v9;
  if (HIDWORD(v174))
  {
    *(_DWORD *)(a1 + 1188) = log_GetLogLevel(*(_QWORD *)(*(_QWORD *)a1 + 32)) > 4;
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"Processing Sentence=\"%s\"", v10, v11, v12, (uint64_t)v175);
    v7 = (*(uint64_t (**)(_QWORD, _QWORD, void **, uint64_t *))(*(_QWORD *)(a1 + 8) + 88))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), &__src, &v174);
    if ((v7 & 0x80000000) == 0)
    {
      v13 = v174;
      *(_WORD *)(a1 + 1040) = v174 >> 5;
      *(_WORD *)(a1 + 1042) = v13 >> 5;
      v14 = (void *)heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), v13);
      *(_QWORD *)(a1 + 1032) = v14;
      if (v14
        && (memcpy(v14, __src, v174),
            v19 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, (HIDWORD(v174) + 33)),
            (*(_QWORD *)(a1 + 1016) = v19) != 0))
      {
        *(_WORD *)(a1 + 1024) = WORD2(v174) + 32;
        strcpy(v19, v175);
        v20 = strlen(*(const char **)(a1 + 1016));
        v165 = v20;
        v21 = Utf8_LengthInUtf8chars(*(_QWORD *)(a1 + 1016), v20);
        v22 = (_QWORD *)(a1 + 1000);
        NewCharStr = wordSeg_GetNewCharStr(a1, (uint64_t *)(a1 + 1000), v21);
        if ((NewCharStr & 0x80000000) == 0)
        {
          memset(*(void **)(a1 + 1000), 110, v21);
          *(_BYTE *)(*(_QWORD *)(a1 + 1000) + v21) = 0;
          NewCharStr = wordSeg_GetNewCharStr(a1, (uint64_t *)(a1 + 1008), v21);
          if ((NewCharStr & 0x80000000) == 0)
          {
            memset(*(void **)(a1 + 1008), 32, v21);
            LOWORD(v24) = 0;
            *(_BYTE *)(*(_QWORD *)(a1 + 1008) + v21) = 0;
            if (*(unsigned __int16 *)(a1 + 1040) < 2u)
              goto LABEL_87;
            v163 = v13;
            v164 = v8;
            v24 = 0;
            v25 = 1;
            v26 = 88;
            v27 = 3;
            v166 = v20;
            do
            {
              v28 = (unsigned __int16)(*(_WORD *)(*(_QWORD *)(a1 + 1032) + 32 * v25 + 12)
                                     - *(_WORD *)(*(_QWORD *)(a1 + 1032) + 12));
              v29 = Utf8_LengthInUtf8chars(*(_QWORD *)(a1 + 1016), v28);
              v30 = *(_QWORD *)(a1 + 1032);
              v31 = *(_DWORD *)(v30 + 32 * v25);
              if (v31 != 34)
              {
                if (v31 != 21)
                {
                  if (v31 == 1)
                    v24 = (v24 + 1);
                  else
                    v24 = v24;
                  goto LABEL_38;
                }
                if (!*(_QWORD *)(v30 + 32 * v25 + 24))
                  goto LABEL_38;
              }
              v32 = *(unsigned __int16 *)(a1 + 1040);
              LOWORD(v33) = v20;
              if (v25 + 1 >= v32)
                goto LABEL_28;
              v34 = (_QWORD *)(v30 + v26);
              v35 = v27;
              while (1)
              {
                v36 = *((_DWORD *)v34 - 6);
                if (v36 == 21)
                  break;
                if (v36 == 34)
                  goto LABEL_27;
LABEL_24:
                v34 += 4;
                if ((_DWORD)v32 == (unsigned __int16)v35++)
                {
                  LOWORD(v33) = v20;
                  goto LABEL_28;
                }
              }
              if (!*v34)
                goto LABEL_24;
LABEL_27:
              v33 = *((_DWORD *)v34 - 3) - *(_DWORD *)(v30 + 12);
LABEL_28:
              v38 = v22;
              v39 = v24;
              if (v31 == 34)
              {
                v40 = 112;
              }
              else if (wordSeg_stricmp(*(char **)(v30 + 32 * v25 + 24), "normal"))
              {
                if (wordSeg_stricmp(*(char **)(*(_QWORD *)(a1 + 1032) + 32 * v25 + 24), "spell"))
                  v40 = 110;
                else
                  v40 = 115;
              }
              else
              {
                v40 = 110;
              }
              for (;
                    v28 < (unsigned __int16)v33;
                    v28 = (unsigned __int16)(utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(_QWORD *)(a1 + 1016)
                                                                                             + v28))
                                           + v28))
              {
                *(_BYTE *)(*(_QWORD *)(a1 + 1000) + (unsigned __int16)v29++) = v40;
              }
              v24 = v39;
              v22 = v38;
              v20 = v166;
LABEL_38:
              ++v25;
              v41 = *(unsigned __int16 *)(a1 + 1040);
              v26 += 32;
              ++v27;
            }
            while (v25 < v41);
            if (v41 >= 2)
            {
              v162 = v24;
              v42 = 2;
              v43 = 1;
              v44 = 88;
              while (1)
              {
                v45 = *(_QWORD *)(a1 + 1032);
                v46 = *(_DWORD *)(v45 + 32 * v43 + 12);
                LODWORD(v45) = *(_DWORD *)(v45 + 12);
                v47 = v46 - v45;
                v48 = Utf8_LengthInUtf8chars(*(_QWORD *)(a1 + 1016), (unsigned __int16)(v46 - v45));
                v49 = *(_QWORD *)(a1 + 1032);
                v50 = *(_DWORD *)(v49 + 32 * v43);
                if (v50 != 7)
                {
                  if (v50 == 36)
                  {
                    v51 = *(char **)(v49 + 32 * v43 + 24);
                    if (v51)
                    {
                      v52 = *(unsigned __int16 *)(a1 + 1040);
                      LOWORD(v53) = v20;
                      if (v43 + 1 < v52)
                      {
                        v54 = (_QWORD *)(v49 + v44);
                        v55 = v42;
                        while (*((_DWORD *)v54 - 6) != 36 || !*v54)
                        {
                          ++v55;
                          v54 += 4;
                          if ((_DWORD)v52 == v55)
                          {
                            LOWORD(v53) = v20;
                            goto LABEL_64;
                          }
                        }
                        LOWORD(v53) = v20;
                        if (*(_DWORD *)(v49 + 32 * v55) == 36)
                        {
                          v61 = v49 + 32 * v55;
                          LOWORD(v53) = v20;
                          if (*(_QWORD *)(v61 + 24))
                            v53 = *(_DWORD *)(v61 + 12) - *(_DWORD *)(v49 + 12);
                        }
                      }
LABEL_64:
                      if (!wordSeg_stricmp(v51, "latin")
                        && (unsigned __int16)v53 > (unsigned __int16)v47)
                      {
                        do
                        {
                          *(_BYTE *)(*(_QWORD *)(a1 + 1000) + (unsigned __int16)v48) = 108;
                          v47 += utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(_QWORD *)(a1 + 1016)
                                                                                 + (unsigned __int16)v47));
                          ++v48;
                        }
                        while ((unsigned __int16)v47 < (unsigned __int16)v53);
                      }
                    }
                  }
                  goto LABEL_67;
                }
                v56 = v49 + 32 * v43;
                v57 = *(_QWORD *)(v56 + 24);
                if (v57)
                {
                  v58 = *(_DWORD *)(v56 + 16) + v47;
                  if (v165 >= (unsigned __int16)v58)
                    v59 = v58;
                  else
                    v59 = v20;
                  if ((_DWORD)v57 == 43)
                  {
                    v60 = 112;
LABEL_58:
                    while ((unsigned __int16)v47 < v59)
                    {
                      *(_BYTE *)(*(_QWORD *)(a1 + 1000) + (unsigned __int16)v48) = v60;
                      v47 += utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(_QWORD *)(a1 + 1016)
                                                                             + (unsigned __int16)v47));
                      ++v48;
                    }
                    goto LABEL_67;
                  }
                  if ((_DWORD)v57 == 16)
                  {
                    v60 = 116;
                    goto LABEL_58;
                  }
                }
LABEL_67:
                ++v43;
                ++v42;
                v44 += 32;
                if (v43 >= *(unsigned __int16 *)(a1 + 1040))
                {
                  v8 = v164;
                  v13 = v163;
                  LOWORD(v24) = v162;
                  goto LABEL_87;
                }
              }
            }
            v8 = v164;
            v13 = v163;
LABEL_87:
            if (!v165)
              goto LABEL_106;
            v64 = v24;
            v65 = v13;
            v66 = v8;
            v67 = 0;
            v68 = 0;
            v69 = 0;
            do
            {
              v70 = v69;
              if (*(_BYTE *)(*(_QWORD *)(a1 + 1016) + v69) == 32)
              {
                v71 = v68;
                *(_BYTE *)(*v22 + v68) = 32;
                *(_BYTE *)(*(_QWORD *)(a1 + 1008) + v68) = 32;
              }
              else
              {
                v71 = v68;
              }
              v72 = *(unsigned __int8 *)(*v22 + v71);
              if (v72 == 115 || v72 == 110)
                v67 = 1;
              v69 = v70 + utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(_QWORD *)(a1 + 1016) + v70));
              ++v68;
            }
            while (v69 < v20);
            v13 = v65;
            if (v67 != 1)
            {
              v108 = 0;
              v110 = 0;
              v8 = v66;
              goto LABEL_108;
            }
            LODWORD(v168) = 0;
            wordSeg_logMarkers((_DWORD *)a1, (uint64_t)"Start of Chinese Word Segmentation", v73, v74, v75, v76, v77, v78);
            v8 = v66;
            if (*(_DWORD *)(a1 + 1188) == 1)
            {
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"Orth   =\"%s\"", v79, v80, v81, *(_QWORD *)(a1 + 1016));
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"Region =\"%s\"", v82, v83, v84, *(_QWORD *)(a1 + 1000));
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"Hex    =\"%s\"", v85, v86, v87, *(_QWORD *)(a1 + 1008));
            }
            WordDefs = wordSeg_GetWordDefs(a1, &v171, &v170, v64);
            if ((WordDefs & 0x80000000) != 0)
            {
              v9 = WordDefs;
              v110 = 0;
              goto LABEL_129;
            }
            v89 = v171;
            v90 = v170;
            wordSeg_ParseOutPOSAndAttributes(a1, v171, v170);
            if (*(_DWORD *)(a1 + 1188) == 1)
            {
              wordSeg_logMarkers((_DWORD *)a1, (uint64_t)"After POS and ATTRIBUTE processing", v91, v92, v93, v94, v95, v96);
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"AFTER POS   =\"%s\"", v97, v98, v99, *(_QWORD *)(a1 + 1016));
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"AFTER POS   =\"%s\"", v100, v101, v102, *(_QWORD *)(a1 + 1000));
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"AFTER POS   =\"%s\"", v103, v104, v105, *(_QWORD *)(a1 + 1008));
            }
            if (*(_DWORD *)(a1 + 1192) != 1)
            {
LABEL_106:
              v108 = 0;
              v110 = 0;
              goto LABEL_108;
            }
            v106 = strlen(*(const char **)(a1 + 1016));
            HIDWORD(v174) = v106 + 1;
            v107 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, (v106 + 2));
            v108 = v107;
            if (v107)
            {
              strcpy(v107, *(const char **)(a1 + 1016));
              v109 = (void *)heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), v174);
              v110 = v109;
              if (v109)
              {
                memcpy(v109, *(const void **)(a1 + 1032), v174);
                v111 = 1;
                goto LABEL_117;
              }
            }
            else
            {
              v110 = 0;
            }
            v111 = 0;
LABEL_117:
            v117 = wordSeg_setDepesLayers(a1, v89, v90);
            if ((v117 & 0x80000000) != 0)
              goto LABEL_127;
            v117 = wordSeg_execDepesLayers(a1, &v168, v118, v119, v120, v121, v122, v123);
            if ((v117 & 0x80000000) != 0)
              goto LABEL_127;
            if (!(_DWORD)v168)
            {
              v167 = 0;
              v117 = wordSeg_processDepesOutput(a1, v89, v90, &v167);
              if ((v117 & 0x80000000) != 0)
                goto LABEL_127;
              if (v167 == 1)
              {
                v133 = *(_QWORD *)(*(_QWORD *)a1 + 32);
                if (!v111)
                {
                  log_OutPublic(v133, (uint64_t)"FE_WORDSEG", 61005, "%s%s", v129, v130, v131, v132, "ABORT");
                  v9 = 2359304192;
                  if (!v108)
                  {
LABEL_129:
                    if (v110)
                      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v110);
                    goto LABEL_131;
                  }
LABEL_128:
                  heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v108);
                  goto LABEL_129;
                }
                log_OutPublic(v133, (uint64_t)"FE_WORDSEG", 61005, 0, v129, v130, v131, v132, v160);
                log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"!! Restoring backup as post-processing fails !!", v134, v135, v136, v161);
                strcpy(*(char **)(a1 + 1016), v108);
                memcpy(*(void **)(a1 + 1032), v110, v174);
                heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v108);
                heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v110);
                v108 = 0;
                v110 = 0;
                v13 = v65;
              }
              wordSeg_logMarkers((_DWORD *)a1, (uint64_t)"After DEPES result processing", v127, v128, v129, v130, v131, v132);
            }
            v8 = v66;
            if (*(_DWORD *)(a1 + 1188) == 1)
            {
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"AFTER DEPES =\"%s\"", v124, v125, v126, *(_QWORD *)(a1 + 1016));
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"AFTER DEPES =\"%s\"", v137, v138, v139, *(_QWORD *)(a1 + 1000));
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"AFTER DEPES =\"%s\"", v140, v141, v142, *(_QWORD *)(a1 + 1008));
            }
LABEL_108:
            v112 = *(const char **)(a1 + 1016);
            v113 = strlen(v112);
            LODWORD(v174) = 32 * *(unsigned __int16 *)(a1 + 1040);
            HIDWORD(v174) = v113 + 1;
            log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"Final Sentence \"%s\"", v114, v115, v116, (uint64_t)v112);
            v117 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 104))(*(_QWORD *)(a1 + 920), *(_QWORD *)(a1 + 928), *(_QWORD *)(a1 + 1016), HIDWORD(v174));
            if ((v117 & 0x80000000) == 0)
            {
              v117 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 104))(*(_QWORD *)(a1 + 936), *(_QWORD *)(a1 + 944), *(_QWORD *)(a1 + 1032), v174);
              if ((v117 & 0x80000000) == 0)
              {
                v117 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 8) + 96))(*(_QWORD *)(a1 + 888), *(_QWORD *)(a1 + 896), v8);
                if ((v117 & 0x80000000) == 0)
                {
                  v117 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 8) + 96))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), v13);
                  if ((v117 & 0x80000000) == 0)
                  {
                    v117 = (*(uint64_t (**)(_QWORD, _QWORD, int *, _QWORD))(*(_QWORD *)(a1 + 32) + 112))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), &v169, 0);
                    if ((v117 & 0x80000000) == 0)
                    {
                      v169 += HIDWORD(v174) - v8;
                      v117 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 104))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
                    }
                  }
                }
              }
            }
LABEL_127:
            v9 = v117;
            if (!v108)
              goto LABEL_129;
            goto LABEL_128;
          }
        }
        v9 = NewCharStr;
      }
      else
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 61000, 0, v15, v16, v17, v18, v160);
        v9 = 2359304202;
      }
LABEL_131:
      if (*(_WORD *)(a1 + 1056))
      {
        v143 = 0;
        do
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 1048) + 8 * v143));
          *(_QWORD *)(*(_QWORD *)(a1 + 1048) + 8 * v143++) = 0;
        }
        while (v143 < *(unsigned __int16 *)(a1 + 1056));
      }
      *(_WORD *)(a1 + 1056) = 0;
      v144 = *(_QWORD *)(a1 + 1048);
      if (v144)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v144);
        *(_QWORD *)(a1 + 1048) = 0;
      }
      *(_WORD *)(a1 + 1058) = 0;
      v145 = *(_QWORD *)(a1 + 1032);
      if (v145)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v145);
        *(_QWORD *)(a1 + 1032) = 0;
        *(_DWORD *)(a1 + 1040) = 0;
      }
      v146 = *(_QWORD *)(a1 + 952);
      if (v146)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v146);
        *(_QWORD *)(a1 + 952) = 0;
      }
      v147 = *(_QWORD *)(a1 + 960);
      if (v147)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v147);
        *(_QWORD *)(a1 + 960) = 0;
      }
      v148 = *(_QWORD *)(a1 + 968);
      if (v148)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v148);
        *(_QWORD *)(a1 + 968) = 0;
      }
      v149 = *(_QWORD *)(a1 + 976);
      if (v149)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v149);
        *(_QWORD *)(a1 + 976) = 0;
      }
      v150 = *(_QWORD *)(a1 + 1000);
      if (v150)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v150);
        *(_QWORD *)(a1 + 1000) = 0;
      }
      v151 = *(_QWORD *)(a1 + 1008);
      if (v151)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v151);
        *(_QWORD *)(a1 + 1008) = 0;
      }
      v152 = *(_QWORD *)(a1 + 1016);
      if (v152)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v152);
        *(_QWORD *)(a1 + 1016) = 0;
        *(_WORD *)(a1 + 1024) = 0;
      }
      v153 = v171;
      if (v171)
      {
        v154 = v170;
        if (v170)
        {
          v155 = (uint64_t *)(v171 + 32);
          do
          {
            v156 = *(v155 - 3);
            if (v156)
            {
              heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v156);
              *(v155 - 3) = 0;
            }
            v157 = *(v155 - 2);
            if (v157)
            {
              heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v157);
              *(v155 - 2) = 0;
            }
            v158 = *(v155 - 1);
            if (v158)
            {
              heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v158);
              *(v155 - 1) = 0;
            }
            if (*v155)
            {
              heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), *v155);
              *v155 = 0;
            }
            v159 = v155[3];
            if (v159)
            {
              heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v159);
              v155[3] = 0;
            }
            v155 += 9;
            --v154;
          }
          while (v154);
        }
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v153);
      }
      return v9;
    }
    return v7;
  }
  v62 = v173;
  if (v173)
  {
    if (HIDWORD(v173))
    {
      v7 = (*(uint64_t (**)(_QWORD, _QWORD, void **, uint64_t *))(*(_QWORD *)(a1 + 8) + 88))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), &__src, &v174);
      if ((v7 & 0x80000000) != 0)
        return v7;
      v7 = (*(uint64_t (**)(_QWORD, _QWORD, void *, _QWORD))(*(_QWORD *)(a1 + 8) + 104))(*(_QWORD *)(a1 + 936), *(_QWORD *)(a1 + 944), __src, v174);
      if ((v7 & 0x80000000) != 0)
        return v7;
      v9 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 96))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), v174);
      if ((v9 & 0x80000000) != 0)
        return v9;
      v62 = v173;
    }
    if (!v62)
      return v9;
    return synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 64), *(_QWORD *)(a1 + 8));
  }
  v168 = 0;
  if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"clcpppipelinemode", &v168) & 0x80000000) != 0
    || !v168
    || !*v168)
  {
    *a5 = 0;
  }
  return v9;
}

_DWORD *wordSeg_logMarkers(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  unint64_t v9;
  const char *v10;
  const char *v11;
  const char *v12;
  int hasCharPtrArg;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  unsigned __int16 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  _DWORD *v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (result[297])
  {
    v8 = result;
    result = (_DWORD *)log_OutText(*(_QWORD *)(*(_QWORD *)result + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"%s", a6, a7, a8, a2);
    if (*((_WORD *)v8 + 520))
    {
      v9 = 0;
      v10 = "ARG=";
      v11 = "FE_WORDSEG";
      v12 = "marker[%d] %d(%s) %u,%u %u,%u %s%s";
      do
      {
        marker_getString(*(_DWORD *)(*((_QWORD *)v8 + 129) + 32 * v9));
        v30 = 0;
        hasCharPtrArg = marker_hasCharPtrArg(*(_DWORD *)(*((_QWORD *)v8 + 129) + 32 * v9));
        v17 = *((_QWORD *)v8 + 129);
        if (hasCharPtrArg == 1 && (v18 = v17 + 32 * v9, (v19 = *(unsigned __int8 **)(v18 + 24)) != 0))
        {
          v20 = v12;
          v21 = v11;
          v22 = v10;
          v23 = strlen(*(const char **)(v18 + 24));
          if (v23 <= 0x40uLL)
            v24 = v23;
          else
            v24 = 63;
          if (v24)
          {
            v25 = 1 - v24;
            v26 = &v31;
            while (1)
            {
              v27 = *v19;
              *(v26 - 1) = v27;
              if (!v27)
                break;
              ++v19;
              ++v25;
              ++v26;
              if (v25 == 1)
                goto LABEL_17;
            }
            if (v25)
              bzero(v26, -v25);
          }
LABEL_17:
          *(&v30 + v24) = 0;
          v10 = v22;
          v11 = v21;
          v12 = v20;
        }
        else
        {
          v30 = 0;
        }
        v28 = (_DWORD *)(v17 + 32 * v9);
        if (*v28 == 32)
        {
          v30 = 48;
          if (v28[6] == 1)
            v29 = 49;
          else
            v29 = 48;
          v30 = v29;
          v31 = 0;
        }
        result = (_DWORD *)log_OutText(*(_QWORD *)(*(_QWORD *)v8 + 32), (uint64_t)v11, 5, 0, (uint64_t)v12, v14, v15, v16, v9++);
      }
      while (v9 < *((unsigned __int16 *)v8 + 520));
    }
  }
  return result;
}

uint64_t wordSeg_GetWordDefs(uint64_t a1, uint64_t *a2, unsigned __int16 *a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  uint64_t NewCharStr;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned __int16 v36;
  uint64_t v37;
  unsigned __int16 v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned __int16 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int16 v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned __int16 v61;
  unsigned int v62;
  uint64_t v63;
  unsigned __int16 v64;
  uint64_t v65;
  BOOL v66;
  char **v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int16 v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  char **v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  const char *v82;
  uint64_t v83;
  const char *v84;
  unsigned __int16 v85;
  unsigned __int16 v86;
  _DWORD *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned __int16 v90;
  int v91;
  unsigned int OrthPinyinWords;
  uint64_t v93;
  unsigned __int16 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unsigned int v102;
  int v103;
  uint64_t v104;
  uint64_t *v105;
  char v106;
  uint64_t v108;
  char *__endptr;
  char v110[3];
  char __str[3];
  unsigned __int16 v112;

  v5 = a1;
  v6 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 72 * a4 + 72);
  if (!v6)
  {
    v21 = 2359304202;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)v5 + 32), (uint64_t)"FE_WORDSEG", 61000, 0, v7, v8, v9, v10, v102);
    return v21;
  }
  v11 = v6;
  if (*(unsigned __int16 *)(v5 + 1040) < 2u)
  {
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 1;
    do
    {
      v15 = *(_QWORD *)(v5 + 1032);
      if (*(_DWORD *)(v15 + v12 + 32) == 1)
      {
        v16 = *(_QWORD *)(v5 + 1000);
        if (*(_BYTE *)(v16
                      + (unsigned __int16)Utf8_LengthInUtf8chars(*(_QWORD *)(v5 + 1016), *(_DWORD *)(v15 + v12 + 44) - *(_DWORD *)(v15 + 12))) == 110)
        {
          v17 = v11 + 72 * v13;
          *(_WORD *)v17 = v14;
          *(_OWORD *)(v17 + 8) = 0u;
          v18 = (char **)(v17 + 8);
          *(_DWORD *)(v17 + 44) = 0;
          *(_DWORD *)(v17 + 48) = 0;
          *(_OWORD *)(v17 + 24) = 0u;
          *(_WORD *)(v17 + 40) = 1;
          *(_QWORD *)(v17 + 56) = 0;
          v19 = *(_QWORD *)(v5 + 1032) + v12;
          *(_QWORD *)(v17 + 64) = *(_QWORD *)(v19 + 36);
          NewCharStr = wordSeg_GetNewCharStr(v5, (uint64_t *)(v17 + 8), *(unsigned __int16 *)(v19 + 48));
          if ((NewCharStr & 0x80000000) != 0)
          {
            v21 = NewCharStr;
            goto LABEL_121;
          }
          strncpy(*v18, (const char *)(*(_QWORD *)(v5 + 1016)+ (unsigned __int16)(*(_DWORD *)(*(_QWORD *)(v5 + 1032) + v12 + 44)- *(_DWORD *)(*(_QWORD *)(v5 + 1032) + 12))), *(unsigned __int16 *)(*(_QWORD *)(v5 + 1032) + v12 + 48));
          ++v13;
        }
      }
      ++v14;
      v12 += 32;
    }
    while (v14 < *(unsigned __int16 *)(v5 + 1040));
  }
  *a3 = v13;
  v104 = v11;
  v108 = v5;
  if (*(unsigned __int16 *)(v5 + 1040) >= 2u)
  {
    v22 = a2;
    v105 = (uint64_t *)(v11 + 16);
    v23 = 1;
    while (1)
    {
      v24 = *(_QWORD *)(v5 + 1032);
      if (*(_DWORD *)(v24 + 32 * v23) == 37)
      {
        v25 = *(_QWORD *)(v5 + 1000);
        if (*(_BYTE *)(v25
                      + (unsigned __int16)Utf8_LengthInUtf8chars(*(_QWORD *)(v5 + 1016), *(_DWORD *)(v24 + 32 * v23 + 12) - *(_DWORD *)(v24 + 12))) == 110)break;
      }
LABEL_56:
      if (++v23 >= (unint64_t)*(unsigned __int16 *)(v5 + 1040))
      {
        v13 = *a3;
        a2 = v22;
        v11 = v104;
        goto LABEL_83;
      }
    }
    v30 = *(unsigned __int16 *)(v5 + 1040);
    a2 = v22;
    if (v30 < 2)
      goto LABEL_80;
    v31 = *a3;
    v32 = *(_QWORD *)(v5 + 1032);
    v33 = (_DWORD *)(v32 + 44);
    v34 = 1;
    while (*(v33 - 3) != 1 || *v33 != *(_DWORD *)(v32 + 32 * v23 + 12))
    {
      ++v34;
      v33 += 8;
      if (v30 == v34)
        goto LABEL_80;
    }
    if (!*a3)
    {
LABEL_80:
      log_OutPublic(*(_QWORD *)(*(_QWORD *)v5 + 32), (uint64_t)"FE_WORDSEG", 61005, 0, v26, v27, v28, v29, v102);
      v21 = 0;
LABEL_81:
      v11 = v104;
      goto LABEL_121;
    }
    v35 = v105;
    while (*((unsigned __int16 *)v35 - 8) != (unsigned __int16)v34)
    {
      v35 += 9;
      if (!--v31)
        goto LABEL_80;
    }
    v36 = strlen(*(const char **)(v32 + 32 * v23 + 24));
    v37 = v5;
    v38 = v36;
    v39 = wordSeg_GetNewCharStr(v37, v35, v36);
    if ((v39 & 0x80000000) != 0)
    {
      v21 = v39;
      goto LABEL_125;
    }
    v41 = v38;
    v40 = v38 == 0;
    v5 = v108;
    if (!v40)
    {
      v42 = *(unsigned __int8 **)(*(_QWORD *)(v108 + 1032) + 32 * v23 + 24);
      v43 = 1 - v41;
      v44 = (char *)(*v35 + 1);
      while (1)
      {
        v45 = *v42;
        *(v44 - 1) = v45;
        if (!v45)
          break;
        ++v42;
        ++v43;
        ++v44;
        if (v43 == 1)
          goto LABEL_35;
      }
      if (v43)
        bzero(v44, -v43);
    }
LABEL_35:
    v46 = *(_QWORD *)(v108 + 1032);
    v47 = v46 + 32 * *((unsigned __int16 *)v35 - 8);
    LODWORD(v46) = *(_DWORD *)(v46 + 12);
    v48 = *(_DWORD *)(v47 + 12);
    v49 = v48 - v46;
    v50 = v48 - v46 + *(_DWORD *)(v47 + 16);
    v51 = (unsigned __int16)(v48 - v46);
    v52 = Utf8_LengthInUtf8chars(*(_QWORD *)(v108 + 1016), v51);
    if (v51 >= (unsigned __int16)v50)
      goto LABEL_123;
    v57 = v52;
    LODWORD(v58) = v49;
    do
    {
      v59 = *(_QWORD *)(v108 + 1016);
      v60 = *(unsigned __int8 *)(v59 + (unsigned __int16)v58);
      if ((_WORD)v58 && v60 == 92 && *(_BYTE *)(v59 + (unsigned __int16)v58 - 1) != 32)
        break;
      LODWORD(v58) = v58 + utf8_determineUTF8CharLength(v60);
    }
    while ((unsigned __int16)v58 < (unsigned __int16)v50);
    v5 = v108;
    if ((unsigned __int16)v58 == (unsigned __int16)v49)
    {
LABEL_123:
      log_OutPublic(*(_QWORD *)(*(_QWORD *)v5 + 32), (uint64_t)"FE_WORDSEG", 61013, "%s%d", v53, v54, v55, v56, "at input position");
      v21 = 2359304192;
LABEL_125:
      a2 = v22;
      goto LABEL_81;
    }
    log_OutText(*(_QWORD *)(*(_QWORD *)v108 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"word _%s_", v54, v55, v56, *(v35 - 1));
    if ((unsigned __int16)v58 > (unsigned __int16)v49)
    {
      v61 = v57;
      do
      {
        v62 = *(unsigned __int8 *)(*(_QWORD *)(v108 + 1016) + (unsigned __int16)v49);
        if (*(char *)(*(_QWORD *)(v108 + 1016) + (unsigned __int16)v49) >= 48
          && v62 <= *(unsigned __int8 *)(v108 + 1196))
        {
          *(_BYTE *)(*(_QWORD *)(v108 + 1008) + v61) = 120;
          v62 = *(unsigned __int8 *)(*(_QWORD *)(v108 + 1016) + (unsigned __int16)v49);
        }
        LOWORD(v49) = v49 + utf8_determineUTF8CharLength(v62);
        ++v61;
      }
      while ((unsigned __int16)v49 < (unsigned __int16)v58);
    }
    if (v51 + 1 == (unsigned __int16)v50 && *v35)
      *(_BYTE *)(*(_QWORD *)(v108 + 1008) + v57) = 120;
    if ((_WORD)v58)
    {
      v63 = *(_QWORD *)(v108 + 1016);
      if (*(_BYTE *)(v63 + (unsigned __int16)v58) == 92
        && *(_BYTE *)(v63 + (unsigned __int16)v58 - 1) != 32)
      {
        v64 = v58 + 1;
        if ((unsigned __int16)(v58 + 1) >= (unsigned __int16)v50)
        {
LABEL_55:
          v5 = v108;
          if (v64 != (unsigned __int16)v50)
            goto LABEL_123;
          goto LABEL_56;
        }
        v65 = (unsigned __int16)(v58 + 1);
        v66 = 1;
        v58 = v65;
        while (!v58 || *(_BYTE *)(v63 + v58) != 92 || *(_BYTE *)(v63 + (v58 - 1)) == 32)
        {
          v66 = ++v58 < (unint64_t)(unsigned __int16)v50;
          if ((unsigned __int16)v58 == (unsigned __int16)v50)
          {
            LOWORD(v58) = v50;
            break;
          }
        }
        if ((unsigned __int16)v58 == v64)
        {
          if (v66)
            goto LABEL_70;
          goto LABEL_55;
        }
        v67 = (char **)(v35 + 1);
        v103 = (unsigned __int16)v58 - v64;
        v5 = v108;
        if ((wordSeg_GetNewCharStr(v108, v35 + 1, (unsigned __int16)(v58 - v64)) & 0x80000000) != 0)
          goto LABEL_123;
        strncpy(*v67, (const char *)(*(_QWORD *)(v108 + 1016) + v65), v103);
        log_OutText(*(_QWORD *)(*(_QWORD *)v108 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"pos _%s_", v68, v69, v70, (uint64_t)*v67);
        if (v66)
        {
LABEL_70:
          v71 = v58 + 1;
          LOWORD(v72) = v71;
          if (v71 < (unsigned __int16)v50)
          {
            v73 = *(_QWORD *)(v108 + 1016);
            v72 = v71;
            while (*(_BYTE *)(v73 + v72) != 92 || *(_BYTE *)(v73 + (v72 - 1)) == 32)
            {
              ++v72;
              v5 = v108;
              if ((unsigned __int16)v72 == (unsigned __int16)v50)
                goto LABEL_77;
            }
          }
          v5 = v108;
          if ((unsigned __int16)v72 != (unsigned __int16)v50)
            goto LABEL_123;
LABEL_77:
          if (v71 != (unsigned __int16)v50)
          {
            v74 = (unsigned __int16)v50 - v71;
            v75 = (char **)(v35 + 2);
            if ((wordSeg_GetNewCharStr(v5, v35 + 2, (unsigned __int16)v74) & 0x80000000) != 0)
              goto LABEL_123;
            strncpy(*v75, (const char *)(*(_QWORD *)(v5 + 1016) + v71), v74);
            log_OutText(*(_QWORD *)(*(_QWORD *)v5 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"attr _%s_", v76, v77, v78, (uint64_t)*v75);
          }
          goto LABEL_56;
        }
      }
    }
    v64 = v58;
    goto LABEL_55;
  }
LABEL_83:
  if (!v13)
  {
    v21 = 0;
    goto LABEL_121;
  }
  v79 = v5;
  v80 = 0;
  v81 = (_OWORD *)(v79 + 1060);
  while (1)
  {
    v82 = *(const char **)(v11 + 72 * v80 + 16);
    if (v82)
      break;
LABEL_117:
    if (++v80 >= (unint64_t)*a3)
    {
      v21 = 0;
      goto LABEL_121;
    }
  }
  v83 = v11 + 72 * v80;
  v84 = *(const char **)(v83 + 8);
  v85 = strlen(v84);
  v86 = strlen(v82);
  *(_DWORD *)(v83 + 44) = 0;
  v87 = (_DWORD *)(v83 + 44);
  __endptr = 0;
  *v81 = 0u;
  v81[1] = 0u;
  v81[2] = 0u;
  v81[3] = 0u;
  v81[4] = 0u;
  v81[5] = 0u;
  v106 = v86;
  v88 = v86;
  v81[6] = 0u;
  v81[7] = 0u;
  if (v86 >= 3u)
  {
    v90 = 0;
    while (1)
    {
      __str[0] = v82[v90];
      __str[1] = v82[v90 | 1];
      __str[2] = 0;
      v91 = strtol(__str, &__endptr, 16);
      v110[0] = v82[v90 | 2];
      v110[1] = v82[v90 | 3];
      v110[2] = 0;
      if (strtol(v110, &__endptr, 16) == 49 && v91 >= 5 && v91 <= 45)
        break;
      v90 += 4;
      if (v88 <= v90 || (v90 | 3u) > v88)
        goto LABEL_87;
    }
    *(_WORD *)v81 = v85;
    v11 = v104;
    goto LABEL_110;
  }
LABEL_87:
  if (v85)
  {
    v89 = 0;
    while (!v89 || v84[v89] != 92 || v84[(v89 - 1)] == 32)
    {
      if (v85 == ++v89)
      {
        LOWORD(v89) = v85;
        goto LABEL_104;
      }
    }
    v85 = v89;
  }
  else
  {
    LOWORD(v89) = 0;
  }
LABEL_104:
  ++v87;
  v112 = v89;
  OrthPinyinWords = wordSeg_GetOrthPinyinWords(v108, v85, (uint64_t)v84, &v112);
  v11 = v104;
  if (OrthPinyinWords)
  {
    if (!v88 || (v106 & 3) != 0 || v88 >> 2 != OrthPinyinWords)
      goto LABEL_112;
LABEL_111:
    v93 = v11 + 72 * v80;
    goto LABEL_113;
  }
  if (v85 == 1)
  {
LABEL_110:
    OrthPinyinWords = 1;
    *v87 = 1;
    goto LABEL_111;
  }
LABEL_112:
  v93 = v104 + 72 * v80;
  OrthPinyinWords = *v87 != 1;
LABEL_113:
  *(_WORD *)(v93 + 40) = OrthPinyinWords;
  v94 = (unsigned __int16 *)(v93 + 40);
  v95 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v108 + 8), 1, 2 * OrthPinyinWords + 2);
  *(_QWORD *)(v11 + 72 * v80 + 56) = v95;
  if (v95)
  {
    if (*v94 >= 2u)
    {
      v100 = 0;
      do
      {
        *(_WORD *)(v95 + 2 * v100) = *((_WORD *)v81 + v100);
        ++v100;
      }
      while (v100 < *v94);
    }
    goto LABEL_117;
  }
  v21 = 2359304202;
  log_OutPublic(*(_QWORD *)(*(_QWORD *)v108 + 32), (uint64_t)"FE_WORDSEG", 61000, 0, v96, v97, v98, v99, v102);
LABEL_121:
  *a2 = v11;
  return v21;
}

unint64_t wordSeg_ParseOutPOSAndAttributes(uint64_t a1, uint64_t a2, unsigned int a3)
{
  const char *v5;
  unsigned int v6;
  unint64_t result;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned __int16 v11;
  unint64_t v12;
  unsigned int v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  unint64_t v17;
  unsigned __int16 *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v22;
  unsigned __int16 v23;
  int v24;
  int v25;
  int v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  _DWORD *v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  size_t __len;
  unsigned int v43;
  int v44;
  int v45;
  unsigned __int16 v46;
  uint64_t v48;

  v5 = *(const char **)(a1 + 1016);
  v6 = (unsigned __int16)strlen(v5);
  result = Utf8_LengthInUtf8chars((unint64_t)v5, v6);
  if (!v6)
    goto LABEL_66;
  v46 = result;
  v8 = 0;
  v48 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a3;
  do
  {
    v13 = v8;
    while (1)
    {
      v14 = *(unsigned __int8 **)(a1 + 1000);
      if ((_WORD)v10)
      {
        v15 = v14[(unsigned __int16)v10];
        if (v15 != 110 && v15 != 115 || v14[(unsigned __int16)v10 - 1] != 32)
          goto LABEL_22;
      }
      else
      {
        v16 = *v14;
        if (v16 != 110 && v16 != 115)
          goto LABEL_22;
      }
      if (v9 >= a3)
      {
LABEL_19:
        HIDWORD(v48) = 0;
      }
      else
      {
        v17 = v9;
        v18 = (unsigned __int16 *)(a2 + 72 * v9);
        while (1)
        {
          v19 = *v18;
          v18 += 36;
          v20 = *(_DWORD *)(*(_QWORD *)(a1 + 1032) + 32 * v19 + 12) - *(_DWORD *)(*(_QWORD *)(a1 + 1032) + 12);
          if (v20 == v13)
            break;
          ++v17;
          if (v20 > v13 || v17 >= v12)
            goto LABEL_19;
        }
        v9 = (unsigned __int16)v17;
        HIDWORD(v48) = 1;
      }
      LOWORD(v48) = v11;
LABEL_22:
      v22 = *(_QWORD *)(a1 + 1016);
      result = *(unsigned __int8 *)(v22 + v11);
      if (!v11 || (_DWORD)result != 92 || *(_BYTE *)(v22 + v11 - 1) == 32)
        goto LABEL_30;
      if (HIDWORD(v48))
        break;
      if (v14[(unsigned __int16)v10] == 115)
        goto LABEL_32;
LABEL_30:
      result = utf8_determineUTF8CharLength(result);
      v11 += result;
      ++v10;
      v13 = v11;
      if (v6 <= v11)
        goto LABEL_66;
    }
    if (!*(_QWORD *)(a2 + 72 * v9 + 16) || v14[(unsigned __int16)v10] != 110)
      goto LABEL_30;
LABEL_32:
    v23 = v11;
    LOWORD(v24) = v10;
    v43 = a3;
    v25 = v11;
    if (v6 > v11)
    {
      v26 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1016) + v11);
      v27 = v11;
      v24 = v10;
      v23 = v11;
      v25 = v11;
      while (v26 != 32)
      {
        v44 = v24;
        result = utf8_determineUTF8CharLength(v26);
        v27 += result;
        v24 = v44 + 1;
        v25 = v27;
        if (v6 <= v27)
        {
          v23 = v27;
          break;
        }
        v26 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1016) + v27);
        v23 = v27;
      }
    }
    v8 = v11;
    if (v11 == v23)
    {
      v46 = v10 + v46 - v24;
    }
    else
    {
      v28 = v24;
      v45 = v25;
      memmove((void *)(*(_QWORD *)(a1 + 1016) + v11), (const void *)(*(_QWORD *)(a1 + 1016) + v23), (int)(v6 - v25));
      *(_BYTE *)(*(_QWORD *)(a1 + 1016) + (int)(v13 + v6 - v45)) = 0;
      __len = v46 - v28;
      memmove((void *)(*(_QWORD *)(a1 + 1000) + (unsigned __int16)v10), (const void *)(*(_QWORD *)(a1 + 1000) + v28), __len);
      v29 = (unsigned __int16)v10 + v46 - v28;
      *(_BYTE *)(*(_QWORD *)(a1 + 1000) + v29) = 0;
      result = (unint64_t)memmove((void *)(*(_QWORD *)(a1 + 1008) + (unsigned __int16)v10), (const void *)(*(_QWORD *)(a1 + 1008) + v28), __len);
      v8 = v11;
      v25 = v45;
      v46 = v10 + v46 - v28;
      *(_BYTE *)(*(_QWORD *)(a1 + 1008) + v29) = 0;
    }
    a3 = v43;
    v30 = v25 - v13;
    v31 = *(unsigned __int16 *)(a1 + 1040);
    if (v31 >= 2)
    {
      v32 = *(_QWORD *)(a1 + 1032);
      v33 = *(_DWORD *)(v32 + 12);
      v34 = (_DWORD *)(v32 + 48);
      v35 = v31 - 1;
      do
      {
        v36 = *(v34 - 1);
        if (v36 >= v33 + v13)
        {
          v36 -= v30;
          *(v34 - 1) = v36;
        }
        v37 = v36 - v33;
        if (*(v34 - 4) == 1 && v37 == (unsigned __int16)v48)
          *v34 -= v30;
        v34 += 8;
        --v35;
      }
      while (v35);
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 1000) + (unsigned __int16)v10 - 1) == 110)
    {
      v39 = a2 + 72 * v9;
      v40 = *(_QWORD *)(v39 + 8);
      if (v40)
      {
        result = strlen(*(const char **)(v39 + 8));
        v8 = v11;
        if ((_WORD)result)
        {
          v41 = 0;
          while (!v41 || *(_BYTE *)(v40 + v41) != 92 || *(_BYTE *)(v40 + (v41 - 1)) == 32)
          {
            if ((unsigned __int16)result == ++v41)
            {
              LOWORD(v41) = result;
              break;
            }
          }
          if ((_WORD)v41
            && *(_BYTE *)(v40 + (unsigned __int16)v41) == 92
            && *(_BYTE *)(v40 + (unsigned __int16)v41 - 1) != 32)
          {
            *(_BYTE *)(v40 + (unsigned __int16)v41) = 0;
          }
        }
      }
    }
    v6 = (unsigned __int16)(v6 - v30);
  }
  while (v6 > v8);
LABEL_66:
  *(_DWORD *)(*(_QWORD *)(a1 + 1032) + 16) = v6;
  return result;
}

uint64_t wordSeg_setDepesLayers(uint64_t a1, uint64_t a2, unsigned int a3)
{
  __int16 v6;
  uint64_t NewCharStr;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char *v26;
  unsigned __int16 v27;
  int v28;
  unsigned __int16 v29;
  unsigned __int16 v30;
  unsigned __int16 v31;
  const char *v32;
  const char *v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v38;
  __int16 v39;
  int v40;
  uint64_t v41;
  const char **v42;
  const char **v43;
  _DWORD *v44;
  unsigned __int16 v45;
  _QWORD *v46;
  uint64_t v47;
  char **v48;
  _DWORD *v49;
  unint64_t *v50;
  unsigned __int16 *v51;
  int v52;
  int v53;
  int v54;
  unsigned __int16 v55;
  unsigned __int16 v56;
  char __dst[64];
  char __s[64];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v6 = strlen(*(const char **)(a1 + 1016));
  v45 = strlen(*(const char **)(a1 + 1000));
  NewCharStr = wordSeg_GetNewCharStr(a1, (uint64_t *)(a1 + 952), (unsigned __int16)(v6 + 32));
  if ((NewCharStr & 0x80000000) != 0)
    return NewCharStr;
  **(_BYTE **)(a1 + 952) = 0;
  NewCharStr = wordSeg_GetNewCharStr(a1, (uint64_t *)(a1 + 960), (unsigned __int16)(v6 + 32));
  if ((NewCharStr & 0x80000000) != 0)
    return NewCharStr;
  **(_BYTE **)(a1 + 960) = 0;
  NewCharStr = wordSeg_GetNewCharStr(a1, (uint64_t *)(a1 + 968), (unsigned __int16)(v6 + 32));
  if ((NewCharStr & 0x80000000) != 0)
    return NewCharStr;
  **(_BYTE **)(a1 + 968) = 0;
  NewCharStr = wordSeg_GetNewCharStr(a1, (uint64_t *)(a1 + 976), (unsigned __int16)(v6 + 32));
  if ((NewCharStr & 0x80000000) != 0)
    return NewCharStr;
  **(_BYTE **)(a1 + 976) = 0;
  v56 = v6 + 32;
  if (a3)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v38 = a3;
    v39 = v6;
    v47 = a2;
    while (1)
    {
      v41 = v8;
      v12 = *(_DWORD *)(*(_QWORD *)(a1 + 1032) + 32 * *(unsigned __int16 *)(a2 + 72 * v8) + 12)
          - *(_DWORD *)(*(_QWORD *)(a1 + 1032) + 12);
      v13 = Utf8_LengthInUtf8chars(*(_QWORD *)(a1 + 1016), v12);
      if ((unsigned __int16)v13 > (unsigned __int16)v9)
      {
        v14 = v13;
        v11 = wordSeg_GrowDepesLayers(a1, &v56, (unsigned __int16)v10, (unsigned __int16)v9, (const char *)&unk_1DEC65E6D, (const char *)&unk_1DEC65E6D, (const char *)&unk_1DEC65E6D, (const char *)&unk_1DEC65E6D, (unsigned __int16)v12 - (unsigned __int16)v10, (unsigned __int16)v13 - (unsigned __int16)v9, 1);
        if ((v11 & 0x80000000) != 0)
          return v11;
        v10 = v12;
        v9 = v14;
      }
      v15 = a2 + 72 * v41;
      LODWORD(v16) = *(unsigned __int16 *)(v15 + 40);
      v51 = (unsigned __int16 *)(v15 + 40);
      if (*(_WORD *)(v15 + 40))
        break;
LABEL_47:
      v8 = v41 + 1;
      v6 = v39;
      if (v41 + 1 == v38)
        goto LABEL_50;
    }
    v17 = 0;
    v40 = 0;
    v18 = a2 + 72 * v41;
    v46 = (_QWORD *)(v18 + 56);
    v49 = (_DWORD *)(v18 + 44);
    v50 = (unint64_t *)(v18 + 8);
    v48 = (char **)(v18 + 16);
    v43 = (const char **)(v18 + 24);
    v44 = (_DWORD *)(v18 + 48);
    v42 = (const char **)(v18 + 32);
    while (1)
    {
      if (v17)
      {
        v19 = *(unsigned __int16 *)(*v46 + 2 * (v17 - 1));
        v55 = Utf8_LengthInUtf8chars(*v50, v19);
        v20 = *(unsigned __int16 *)(*v46 + 2 * v17) - *(unsigned __int16 *)(*v46 + 2 * (v17 - 1));
        v25 = Utf8_LengthInUtf8chars(*v50, v20);
      }
      else
      {
        if ((_DWORD)v16 == 1)
        {
          v20 = strlen((const char *)*v50);
          v25 = Utf8_LengthInUtf8chars(*v50, (unsigned __int16)v20);
        }
        else
        {
          v20 = *(unsigned __int16 *)*v46;
          v25 = Utf8_LengthInUtf8chars(*v50, v20);
        }
        v19 = 0;
        v55 = 0;
      }
      if ((unsigned __int16)v20 >= 0x40u)
        break;
      __strncpy_chk();
      __s[(unsigned __int16)v20] = 0;
      v54 = v9;
      if (*v49 == 1 || *v44 == 1)
      {
        v26 = *v48;
      }
      else if (*v48)
      {
        v26 = __dst;
        strncpy(__dst, &(*v48)[(unsigned __int16)v40], 4uLL);
        __dst[4] = 0;
        v40 += 4;
      }
      else
      {
        v26 = (char *)&unk_1DEC65E6D;
      }
      v53 = v10;
      v27 = strlen(v26);
      v28 = strlen(__s);
      v29 = Utf8_LengthInUtf8chars((unint64_t)__s, v28);
      v52 = v25;
      if (v17)
      {
        v30 = 0;
        v31 = 0;
        v32 = (const char *)&unk_1DEC65E6D;
        v33 = (const char *)&unk_1DEC65E6D;
      }
      else
      {
        v33 = *v43;
        if (*v43)
        {
          v34 = strlen(*v43);
          v30 = Utf8_LengthInUtf8chars((unint64_t)v33, v34);
        }
        else
        {
          v30 = 0;
          v33 = (const char *)&unk_1DEC65E6D;
        }
        v32 = *v42;
        if (*v42)
        {
          v35 = strlen(*v42);
          v31 = Utf8_LengthInUtf8chars((unint64_t)v32, v35);
        }
        else
        {
          v31 = 0;
          v32 = (const char *)&unk_1DEC65E6D;
        }
      }
      LOWORD(v36) = v29;
      if (v29 <= v27)
        LOWORD(v36) = v27;
      if (*(_DWORD *)(a1 + 1200))
        LOWORD(v36) = v29;
      v36 = (unsigned __int16)v36;
      if ((unsigned __int16)v36 <= v30)
        v36 = v30;
      if (v36 <= v31)
        LOWORD(v36) = v31;
      v11 = wordSeg_GrowDepesLayers(a1, &v56, v19, v55, v26, __s, v33, v32, v36, v36, 0);
      if ((v11 & 0x80000000) != 0)
        return v11;
      ++v17;
      v16 = *v51;
      a2 = v47;
      if (v17 < v16)
      {
        NewCharStr = wordSeg_GrowDepesLayers(a1, &v56, v19, v55, "*", "*", "~", "~", 1u, 1u, 0);
        if ((NewCharStr & 0x80000000) != 0)
          return NewCharStr;
        v11 = 0;
        LODWORD(v16) = *v51;
      }
      v10 = v20 + v53;
      v9 = v54 + v52;
      if (v17 >= v16)
        goto LABEL_47;
    }
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 61011, "%s%d%s%d", v21, v22, v23, v24, "trying to handle pinyin word length");
    return 2359304192;
  }
  v11 = 0;
  LOWORD(v10) = 0;
  LOWORD(v9) = 0;
LABEL_50:
  if (v45 > (unsigned __int16)v9)
    return wordSeg_GrowDepesLayers(a1, &v56, (unsigned __int16)v10, (unsigned __int16)v9, (const char *)&unk_1DEC65E6D, (const char *)&unk_1DEC65E6D, (const char *)&unk_1DEC65E6D, (const char *)&unk_1DEC65E6D, v6 - (unsigned __int16)v10, v45 - (unsigned __int16)v9, 1);
  return v11;
}

uint64_t wordSeg_execDepesLayers(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  uint64_t v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  unsigned __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;

  v50 = 0;
  *a2 = 0;
  if (*(_DWORD *)(a1 + 1188) == 1)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"IN  L1: %s", a6, a7, a8, *(_QWORD *)(a1 + 952));
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"IN  L2: %s", v10, v11, v12, *(_QWORD *)(a1 + 960));
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"IN  L3: %s", v13, v14, v15, *(_QWORD *)(a1 + 968));
    if (!*(_DWORD *)(a1 + 1200))
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"IN  L4: %s", v16, v17, v18, *(_QWORD *)(a1 + 976));
  }
  v19 = strlen(*(const char **)(a1 + 952));
  v20 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 120))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 0, *(_QWORD *)(a1 + 952), v19);
  if ((v20 & 0x80000000) != 0)
    return v20;
  v21 = strlen(*(const char **)(a1 + 960));
  v20 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 120))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1, *(_QWORD *)(a1 + 960), v21);
  if ((v20 & 0x80000000) != 0)
    return v20;
  v22 = strlen(*(const char **)(a1 + 968));
  v20 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 120))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 2, *(_QWORD *)(a1 + 968), v22);
  if ((v20 & 0x80000000) != 0)
    return v20;
  if (!*(_DWORD *)(a1 + 1200))
  {
    v23 = strlen(*(const char **)(a1 + 976));
    v20 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 120))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 3, *(_QWORD *)(a1 + 976), v23);
    if ((v20 & 0x80000000) != 0)
      return v20;
  }
  v24 = (*(uint64_t (**)(_QWORD, _QWORD, const char *))(*(_QWORD *)(a1 + 32) + 80))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), "word_segmentation");
  if ((v24 & 0x80000000) != 0)
  {
    v29 = v24;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 61006, "%s%s", v25, v26, v27, v28, "functionName");
    return v29;
  }
  v29 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, char *))(*(_QWORD *)(a1 + 32) + 128))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 0, a1 + 984, (char *)&v50 + 2);
  if ((v29 & 0x80000000) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 984) + HIWORD(v50)) = 0;
    if (!*(_DWORD *)(a1 + 1200))
    {
      v30 = (unint64_t *)(a1 + 992);
      v29 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, int *))(*(_QWORD *)(a1 + 32) + 128))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1, a1 + 992, &v50);
      if ((v29 & 0x80000000) == 0)
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 992) + (unsigned __int16)v50) = 0;
        if (*(_DWORD *)(a1 + 1188) == 1)
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"OUT L1: %s", v31, v32, v33, *(_QWORD *)(a1 + 984));
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"OUT L2: %s", v34, v35, v36, *(_QWORD *)(a1 + 992));
        }
        v37 = HIWORD(v50);
        if (v37 != (unsigned __int16)Utf8_LengthInUtf8chars(*v30, (unsigned __int16)v50))
        {
          v47 = *(_QWORD *)(*(_QWORD *)a1 + 32);
          v48 = 61008;
          goto LABEL_32;
        }
        if (HIWORD(v50))
        {
          v42 = 0;
          v43 = 0;
          do
          {
            v44 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 984) + v42);
            if (v44 == 32)
            {
              if (*(_BYTE *)(*v30 + (unsigned __int16)v43) != 32)
              {
LABEL_31:
                v47 = *(_QWORD *)(*(_QWORD *)a1 + 32);
                v48 = 61009;
LABEL_32:
                log_OutPublic(v47, (uint64_t)"FE_WORDSEG", v48, 0, v38, v39, v40, v41, v49);
                *a2 = 1;
                return v29;
              }
              v45 = 32;
            }
            else if (v44 == 42)
            {
              if (*(_BYTE *)(*v30 + (unsigned __int16)v43) != 42)
                goto LABEL_31;
              v45 = 42;
            }
            else
            {
              v45 = *(unsigned __int8 *)(*v30 + (unsigned __int16)v43);
            }
            ++v42;
            v43 += utf8_determineUTF8CharLength(v45);
          }
          while (v42 < HIWORD(v50));
        }
      }
    }
  }
  return v29;
}

uint64_t wordSeg_processDepesOutput(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  unsigned __int16 v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int16 *v14;
  const char *v15;
  uint64_t *k;
  uint64_t v17;
  unsigned int v18;
  unsigned __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int i;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  unsigned __int16 v43;
  unsigned __int16 v44;
  int v45;
  unsigned __int16 v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned __int16 v50;
  int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  int v54;
  uint64_t v55;
  unsigned int j;
  const char *v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned __int16 v63;
  int v64;
  int v65;
  unsigned __int16 v66;
  int v67;
  int v68;
  uint64_t v69;
  unsigned __int8 *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int16 v76;
  __int16 v77;
  __int16 v78;
  const char *v79;
  unsigned __int16 v80;
  unsigned __int16 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int16 v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  __int16 v91;
  __int16 v92;
  unsigned int v93;
  uint64_t MrkMemory;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  _QWORD *v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  _DWORD *v113;
  unint64_t v114;
  int v115;
  unsigned int v116;
  int v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  unsigned __int16 v126;
  unsigned __int16 v127;
  uint64_t v128;
  unsigned __int16 v129;
  unsigned int v130;
  uint64_t v131;
  size_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  int v139;
  unint64_t v140;
  _DWORD *v141;
  int v142;
  const char *v143;
  uint64_t v144;
  const char *v145;
  unsigned __int16 v146;
  int v147;
  unsigned __int16 v148;
  int v149;
  int v150;
  unsigned __int16 v151;
  unsigned __int16 v152;
  unsigned __int16 v153;
  unsigned __int16 v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  size_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  int v163;
  unint64_t v164;
  _DWORD *v165;
  int v166;
  int v167;
  unsigned __int16 v168;
  unsigned __int16 v169;
  int v170;
  unsigned int v171;
  int v172;
  unsigned __int16 v173;
  uint64_t v174;
  unsigned __int16 v175;
  int v176;
  uint64_t v177;
  unsigned int v178;
  uint64_t v179;
  int v180;
  int v181;
  uint64_t v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned __int16 v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  unint64_t v201;
  const char **v202;
  unsigned int v203;
  int v204;
  uint64_t v205;
  unsigned int v206;
  unsigned __int16 v207;
  uint64_t v208;
  unint64_t v209;
  _DWORD *v210;
  int v211;
  unsigned int v212;
  _DWORD *v213;
  uint64_t v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t v217;
  unsigned int v218;
  __int16 v219;
  uint64_t v220;
  unsigned int v221;
  BOOL v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  unsigned int OrthPinyinWords;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  __int16 v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  unsigned __int16 v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unsigned __int16 v252;
  uint64_t v253;
  int v254;
  int v255;
  unsigned int v256;
  unsigned __int8 *v257;
  _BYTE *v258;
  uint64_t v259;
  int v260;
  unsigned __int8 *v261;
  _BYTE *v262;
  uint64_t v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int MrkInsertPos;
  uint64_t v269;
  _DWORD *v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  _DWORD *v279;
  uint64_t v280;
  uint64_t v281;
  const char *v282;
  const char *v283;
  uint64_t v284;
  const char *v285;
  char *v286;
  uint64_t v287;
  unsigned int v289;
  const char *v290;
  _DWORD *v291;
  int __len;
  size_t __lena;
  size_t __lenb;
  unint64_t v295;
  unsigned __int16 v296;
  unsigned __int16 v297;
  _QWORD *v298;
  uint64_t v299;
  unsigned __int16 v300;
  unsigned __int16 v301;
  uint64_t v302;
  uint64_t *v303;
  uint64_t *v304;
  unsigned int v305;
  uint64_t v306;
  unsigned int v307;
  unsigned int v308;
  uint64_t *v309;
  int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned __int16 v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  unsigned __int16 v319;
  unsigned __int16 v320;
  int v321;
  unsigned __int16 v322;
  int v323;
  int v324;
  uint64_t v325;
  uint64_t v326;
  unsigned int v327;
  int v328;
  unsigned int v329;
  char __s2[4];
  char v331;
  char __dst[4];
  char v333;
  unsigned __int16 v334;
  char __s[64];
  char __s1[64];
  uint64_t v337;

  v337 = *MEMORY[0x1E0C80C00];
  v333 = 0;
  *(_DWORD *)__dst = 0;
  v331 = 0;
  *(_DWORD *)__s2 = 0;
  v8 = strlen(*(const char **)(a1 + 952));
  v9 = strlen(*(const char **)(a1 + 984));
  v291 = a4;
  *a4 = 0;
  v308 = a3;
  v326 = a2;
  if (!a3)
  {
LABEL_165:
    v168 = strlen(*(const char **)(a1 + 1016));
    v169 = strlen(*(const char **)(a1 + 1000));
    v170 = v168;
    v171 = v169;
    if (!v169)
    {
LABEL_304:
      v280 = 0;
      *(_DWORD *)(*(_QWORD *)(a1 + 1032) + 16) = v170;
      return v280;
    }
    v172 = 0;
    v173 = 0;
    v174 = 0;
    v175 = 0;
    LOWORD(v176) = 0;
    LODWORD(v177) = 0;
    if (v168 >= v169)
      v178 = v169;
    else
      v178 = v168;
    v310 = v168;
    v307 = v169;
    v305 = v178;
    while (1)
    {
      v179 = *(_QWORD *)(a1 + 1000);
      v180 = *(unsigned __int8 *)(v179 + v175);
      if ((v180 == 110 || v180 == 88) && v178 > v175)
        break;
LABEL_196:
      v172 = ++v175;
      if (v171 <= v175)
        goto LABEL_304;
    }
    v181 = 0;
    v182 = v175;
    do
    {
      v183 = v182;
      v184 = *(unsigned __int8 *)(v179 + v182);
      if (v184 == 88)
      {
        v181 = 1;
      }
      else if (v184 == 32)
      {
        goto LABEL_180;
      }
      ++v182;
    }
    while (v178 > v183 + 1);
    LOWORD(v183) = v183 + 1;
LABEL_180:
    if (v181 != 1)
      goto LABEL_196;
    v314 = v183;
    v185 = Utf8_LengthInBytes(*(unsigned __int8 **)(a1 + 1016), v172);
    v311 = Utf8_LengthInBytes(*(unsigned __int8 **)(a1 + 1016), v182);
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"processing modified region from %d to %d (last region processed %d,%d)", v186, v187, v188, (unsigned __int16)v185);
    v316 = v174;
    if ((unsigned __int16)v185 > v173)
    {
      if (v173 >= v175)
      {
        v189 = 0;
      }
      else
      {
        v189 = 0;
        v190 = *(_QWORD *)(a1 + 1000);
        do
        {
          v191 = v173;
          v192 = *(unsigned __int8 *)(v190 + v173);
          if ((v192 == 110 || v192 == 88) && v173 < v175)
          {
            while (1)
            {
              v193 = *(unsigned __int8 *)(v190 + v191);
              if (v193 != 110 && v193 != 88)
                break;
              if (*(_BYTE *)(*(_QWORD *)(a1 + 1008) + v191) == 120)
                ++v189;
              if (v175 == ++v191)
              {
                v173 = v175;
                goto LABEL_194;
              }
            }
            v173 = v191;
          }
LABEL_194:
          ++v173;
        }
        while (v173 < v175);
      }
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"skipping %d pinyin words in region (%d,%d)", v96, v97, v98, v189);
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"START curWordDef=%d curHexCount=%d", v194, v195, v196, (unsigned __int16)v177);
      v200 = 0;
      if (v308 > (unsigned __int16)v177 && v189)
      {
        v200 = 0;
        v201 = (unsigned __int16)v177 + 1;
        v202 = (const char **)(v326 + 16 + 72 * (unsigned __int16)v177);
        while (1)
        {
          if (*v202)
          {
            v203 = strlen(*v202) >> 2;
            if ((_WORD)v176)
            {
              v204 = v189 - (unsigned __int16)v203 + (unsigned __int16)v176;
              if (v204 < 0)
              {
                LOWORD(v176) = v176 + v189;
                break;
              }
            }
            else
            {
              v204 = v189 - (unsigned __int16)v203;
              if (v204 < 0)
              {
                LOWORD(v176) = v189;
                break;
              }
            }
            LOWORD(v176) = 0;
            LODWORD(v177) = v177 + 1;
            v189 = v204;
          }
          else
          {
            ++v200;
          }
          if (v201 < v308)
          {
            ++v201;
            v202 += 9;
            if (v189)
              continue;
          }
          break;
        }
      }
      LODWORD(v177) = v200 + v177;
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"END curWordDef=%d curHexCount=%d", v197, v198, v199, (unsigned __int16)v177);
    }
    v205 = (unsigned __int16)v311;
    v206 = *(unsigned __int16 *)(a1 + 1040);
    if (v206 < 2)
      goto LABEL_245;
    v207 = 1;
    do
    {
      v208 = *(_QWORD *)(a1 + 1032);
      v209 = v207;
      v210 = (_DWORD *)(v208 + 32 * v207);
      while (1)
      {
        v211 = v210[3];
        v212 = (unsigned __int16)(v211 - *(_DWORD *)(v208 + 12));
        if (v212 <= (unsigned __int16)v311)
          break;
        if (*v210 == 1 || *v210 == 37)
          goto LABEL_245;
LABEL_223:
        ++v209;
        v210 += 8;
        if (v209 >= (unsigned __int16)v206)
          goto LABEL_245;
      }
      if (v212 < (unsigned __int16)v185 || *v210 != 37)
        goto LABEL_223;
      if ((unsigned __int16)v206 < 2u)
      {
        LOWORD(v206) = 1;
      }
      else
      {
        v213 = (_DWORD *)(v208 + 44);
        v214 = 1;
        while (*(v213 - 3) != 1 || *v213 != v211)
        {
          ++v214;
          v213 += 8;
          if ((unsigned __int16)v206 == v214)
            goto LABEL_233;
        }
        LOWORD(v206) = v214;
      }
LABEL_233:
      v215 = (unsigned __int16)v206;
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"invalidate (WORD and HEX) markers %d and %d", v96, v97, v98, (unsigned __int16)v209);
      if (v215 <= (unsigned __int16)v209)
        v216 = (unsigned __int16)v209;
      else
        v216 = v215;
      if (v215 >= (unsigned __int16)v209)
        v209 = (unsigned __int16)v209;
      else
        v209 = v215;
      v217 = (v216 + 1);
      v218 = *(unsigned __int16 *)(a1 + 1040);
      if (v218 > v217)
      {
        memmove((void *)(*(_QWORD *)(a1 + 1032) + 32 * v216), (const void *)(*(_QWORD *)(a1 + 1032) + 32 * v217), 32 * (int)(v218 - v217));
        LOWORD(v218) = *(_WORD *)(a1 + 1040);
      }
      v219 = v218 - 1;
      *(_WORD *)(a1 + 1040) = v218 - 1;
      v220 = (v209 + 1);
      v221 = (unsigned __int16)(v218 - 1);
      v222 = v221 >= v220;
      v223 = v221 - v220;
      if (v223 != 0 && v222)
      {
        memmove((void *)(*(_QWORD *)(a1 + 1032) + 32 * v209), (const void *)(*(_QWORD *)(a1 + 1032) + 32 * v220), 32 * v223);
        v219 = *(_WORD *)(a1 + 1040);
      }
      LOWORD(v206) = v219 - 1;
      *(_WORD *)(a1 + 1040) = v206;
      v207 = v209 - 1;
    }
    while ((unsigned __int16)(v209 - 1) < (unsigned __int16)v206);
LABEL_245:
    if ((unsigned __int16)v311 <= (unsigned __int16)v185)
      goto LABEL_303;
LABEL_246:
    v325 = (unsigned __int16)v185;
    if (v205 <= (unsigned __int16)v185)
    {
      v226 = v185;
    }
    else
    {
      v224 = *(_QWORD *)(a1 + 1016);
      v225 = (unsigned __int16)v185;
      v226 = v185;
      if (*(_BYTE *)(v224 + (unsigned __int16)v185) == 32)
      {
        v227 = v224 + 1;
        while (v205 > (int)v225 + 1)
        {
          v228 = *(unsigned __int8 *)(v227 + v225++);
          if (v228 != 32)
          {
            v226 = v225;
            goto LABEL_254;
          }
        }
        v226 = v311;
        v225 = v205;
LABEL_254:
        v325 = v225;
      }
    }
    LODWORD(v185) = v226;
    do
      v185 = (v185 + 1);
    while (v205 > (unsigned __int16)v185
         && *(_BYTE *)(*(_QWORD *)(a1 + 1016) + (unsigned __int16)v185) != 32);
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"processing word from %d to %d", v96, v97, v98, v325);
    v334 = 0;
    v320 = v185 - v226;
    OrthPinyinWords = wordSeg_GetOrthPinyinWords(a1, (unsigned __int16)(v185 - v226), *(_QWORD *)(a1 + 1016) + (unsigned __int16)v226, &v334);
    if (!OrthPinyinWords)
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 61002, "%s%s", v230, v231, v232, v233, "parsing region");
      goto LABEL_313;
    }
    v234 = OrthPinyinWords;
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"got %d words", v231, v232, v233, OrthPinyinWords);
    v235 = *(_QWORD *)(a1 + 1048);
    if (v235)
    {
      v236 = *(unsigned __int16 *)(a1 + 1058);
      if (*(unsigned __int16 *)(a1 + 1056) + 1 < v236)
      {
LABEL_266:
        v316 = v226;
        v244 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, (4 * v234) | 1);
        if (!v244)
        {
LABEL_309:
          v280 = 2359304202;
          log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 61000, 0, v238, v239, v240, v241, v289);
          goto LABEL_314;
        }
        v245 = v244;
        v246 = *(unsigned __int16 *)(a1 + 1056);
        *(_QWORD *)(*(_QWORD *)(a1 + 1048) + 8 * v246) = v244;
        *(_WORD *)(a1 + 1056) = v246 + 1;
        if (v308 <= (unsigned __int16)v177)
        {
          v328 = 0;
          goto LABEL_296;
        }
        v328 = 0;
        v323 = 0;
        v247 = 0;
        v248 = 0;
        v177 = (unsigned __int16)v177;
        v249 = v326;
        while (1)
        {
          v250 = v249 + 72 * v177;
          v251 = *(_QWORD *)(v250 + 16);
          if (v251)
          {
            v252 = strlen(*(const char **)(v250 + 16));
            if (!v328)
            {
              if (v323)
              {
                v328 = 0;
              }
              else
              {
                v253 = v326 + 72 * v177;
                v323 = *(_DWORD *)(v253 + 68);
                v328 = *(_DWORD *)(v253 + 64) + 2 * (unsigned __int16)v176;
              }
            }
            v254 = (unsigned __int16)v176;
            v255 = (v252 >> 2) - (unsigned __int16)v176;
            v176 = v234 - v247;
            if (v255 >= (int)(v234 - v247))
            {
              if (v234 != v248)
              {
                v261 = (unsigned __int8 *)(v251 + (4 * v254));
                v262 = (_BYTE *)(v245 + (4 * v247));
                v263 = 1 - 4 * v176;
                while (1)
                {
                  v264 = *v261;
                  *v262 = v264;
                  if (!v264)
                    break;
                  ++v262;
                  ++v261;
                  if (++v263 == 1)
                    goto LABEL_294;
                }
                if (v263)
                  bzero(v262, -v263);
              }
LABEL_294:
              if (v255 == v176)
              {
                LOWORD(v176) = 0;
                LODWORD(v177) = v177 + 1;
              }
LABEL_296:
              MrkInsertPos = wordSeg_GetMrkInsertPos(a1, *(_DWORD *)(*(_QWORD *)(a1 + 1032) + 12) + (int)v325, *(_DWORD *)(*(_QWORD *)(a1 + 1032) + 12) + v325 + v320);
              if (*(_DWORD *)(a1 + 1188) == 1)
                log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"add WORD marker at index %d (spos=%d, epos=%d)", v265, v266, v267, MrkInsertPos);
              MrkMemory = wordSeg_GetMrkMemory(a1, MrkInsertPos);
              if ((MrkMemory & 0x80000000) != 0)
                goto LABEL_305;
              v269 = *(_QWORD *)(a1 + 1032);
              v270 = (_DWORD *)(v269 + 32 * MrkInsertPos);
              v270[3] = *(_DWORD *)(v269 + 12) + v325;
              v270[4] = v320;
              *v270 = 1;
              v271 = (unsigned __int16)(4 * v234) >> 1;
              v270[1] = v328;
              v270[2] = v271;
              v275 = wordSeg_GetMrkInsertPos(a1, *(_DWORD *)(v269 + 12) + (int)v325, *(_DWORD *)(v269 + 12) + v325 + (unsigned __int16)(4 * v234));
              if (*(_DWORD *)(a1 + 1188) == 1)
                log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"add HEX marker at index %d (spos=%d, epos=%d)", v272, v273, v274, v275);
              MrkMemory = wordSeg_GetMrkMemory(a1, v275);
              if ((MrkMemory & 0x80000000) != 0)
                goto LABEL_305;
              v276 = *(_QWORD *)(a1 + 1032) + 32 * v275;
              *(_DWORD *)v276 = 37;
              *(_QWORD *)(v276 + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 1048) + 8 * *(unsigned __int16 *)(a1 + 1056) - 8);
              v277 = *(_QWORD *)(a1 + 1032);
              v278 = *(_DWORD *)(v277 + 12) + v325;
              v279 = (_DWORD *)(v277 + 32 * v275);
              v279[3] = v278;
              v279[4] = 2 * (unsigned __int16)(4 * v234);
              v279[1] = v328;
              v279[2] = v271;
              v205 = (unsigned __int16)v311;
              if ((unsigned __int16)v311 <= (unsigned __int16)v185)
              {
LABEL_303:
                v174 = v316;
                Utf8_LengthInUtf8chars(*(_QWORD *)(a1 + 1016), (unsigned __int16)v316);
                v175 = v314;
                v173 = v314;
                v170 = v310;
                v171 = v307;
                v178 = v305;
                goto LABEL_196;
              }
              goto LABEL_246;
            }
            v256 = 4 * (unsigned __int16)v255;
            if (v256)
            {
              v257 = (unsigned __int8 *)(v251 + (4 * v254));
              v258 = (_BYTE *)(v245 + (4 * v247));
              v259 = 1 - v256;
              while (1)
              {
                v260 = *v257;
                *v258 = v260;
                if (!v260)
                  break;
                ++v258;
                ++v257;
                if (++v259 == 1)
                  goto LABEL_282;
              }
              if (v259)
                bzero(v258, -v259);
            }
LABEL_282:
            v248 += v255;
            v249 = v326;
          }
          if (++v177 < (unint64_t)v308)
          {
            LOWORD(v176) = 0;
            v247 = v248;
            if (v234 > v248)
              continue;
          }
          LOWORD(v176) = 0;
          goto LABEL_296;
        }
      }
      v237 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), v235, 8 * v236 + 136);
      if (!v237)
        goto LABEL_309;
      *(_QWORD *)(a1 + 1048) = v237;
      v242 = *(_WORD *)(a1 + 1058) + 16;
    }
    else
    {
      v243 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 136);
      *(_QWORD *)(a1 + 1048) = v243;
      if (!v243)
        goto LABEL_309;
      v242 = 16;
    }
    *(_WORD *)(a1 + 1058) = v242;
    goto LABEL_266;
  }
  v10 = 0;
  v318 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v324 = 0;
  v303 = (uint64_t *)(a1 + 1016);
  v329 = v8;
  v327 = v9;
  v309 = (uint64_t *)(a1 + 1000);
  while (1)
  {
    v14 = (unsigned __int16 *)(a2 + 72 * v10);
    k = (uint64_t *)(v14 + 8);
    v15 = (const char *)*((_QWORD *)v14 + 2);
    if (v15)
    {
      if (!*(_DWORD *)(a2 + 72 * v10 + 44))
        break;
    }
    v17 = v11;
LABEL_6:
    ++v10;
    v11 = v17;
    if (v10 == v308)
      goto LABEL_165;
  }
  v18 = strlen(v15);
  v321 = *(_DWORD *)(*(_QWORD *)(a1 + 1032) + 32 * *v14 + 12) - *(_DWORD *)(*(_QWORD *)(a1 + 1032) + 12);
  v19 = Utf8_LengthInUtf8chars(*(_QWORD *)(a1 + 1016), (unsigned __int16)(*(_WORD *)(*(_QWORD *)(a1 + 1032) + 32 * *v14 + 12)- *(_WORD *)(*(_QWORD *)(a1 + 1032) + 12)));
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"DOING hexStr=%s posInSentStr=%d", v20, v21, v22, *k);
  v306 = (unsigned __int16)(v18 >> 2);
  if (!(unsigned __int16)(v18 >> 2))
  {
    v17 = v11;
    a2 = v326;
    goto LABEL_6;
  }
  v319 = 0;
  v298 = (_QWORD *)(v326 + 72 * v10 + 8);
  v299 = v19;
  v23 = 0;
  v302 = v10;
  v304 = k;
  while (1)
  {
    v315 = v23;
    if (!*(_DWORD *)(a1 + 1200))
      break;
    v24 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(*v298 + v319));
    __strncpy_chk();
    __dst[(unsigned __int16)v24] = 0;
    strncpy(__dst, (const char *)(*k + 4 * v23), 4uLL);
    v333 = 0;
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"\tthisOrthStr=%s", v25, v26, v27, (uint64_t)__s2);
    v28 = v324;
    v29 = (unsigned __int16)v324 + 1;
    for (i = v329; v29 < i; i = v329)
    {
      v31 = (const char *)(*(_QWORD *)(a1 + 952) + (unsigned __int16)v28);
      if (!strncmp(v31, __s2, (unsigned __int16)v24))
        break;
      v28 += utf8_determineUTF8CharLength(*(unsigned __int8 *)v31);
      v29 = (unsigned __int16)v28 + 1;
    }
    v32 = *(_QWORD *)(a1 + 952);
    if (strncmp((const char *)(v32 + (unsigned __int16)v28), __s2, (unsigned __int16)v24))
    {
      v281 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      v283 = "orth1";
      goto LABEL_319;
    }
    v318 = v24;
    v319 += v24;
    v37 = v329;
LABEL_23:
    v324 = v28 + 1;
    if ((unsigned __int16)(v28 + 1) <= v37)
      v43 = v37;
    else
      v43 = v28 + 1;
    v44 = v28;
    while (v37 > ++v44)
    {
      v45 = *(unsigned __int8 *)(v32 + v44);
      v46 = v44;
      if (v45 == 42 || v45 == 32)
        goto LABEL_32;
    }
    v46 = v43;
LABEL_32:
    v47 = v44;
    v48 = v44 - (unsigned __int16)v28;
    if (v48 > 63)
    {
      v144 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      v290 = "(L1InIdx)start position";
      goto LABEL_322;
    }
    v49 = *(_DWORD *)(a1 + 1200);
    if (v48 < 1)
    {
      v50 = 0;
    }
    else
    {
      v50 = 0;
      v51 = 0;
      v52 = (unsigned __int16)v13;
      v53 = (unsigned __int8 *)(v32 + (unsigned __int16)v28);
      do
      {
        if (v49)
          v54 = *v53;
        else
          v54 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 960) + v52);
        if (v54 != 126)
        {
          v55 = v50++;
          __s1[v55] = v54;
        }
        ++v51;
        ++v52;
        ++v53;
      }
      while (v48 > (unsigned __int16)v51);
    }
    __s1[v50] = 0;
    v312 = v47;
    if (v49)
    {
      for (j = (unsigned __int16)v12 + 1; j < v327; j = (unsigned __int16)v12 + 1)
      {
        v57 = (const char *)(*(_QWORD *)(a1 + 984) + (unsigned __int16)v12);
        if (!strncmp(v57, __s2, (unsigned __int16)v318))
          break;
        v12 += utf8_determineUTF8CharLength(*(unsigned __int8 *)v57);
      }
      v58 = *(_QWORD *)(a1 + 984);
      if (strncmp((const char *)(v58 + (unsigned __int16)v12), __s2, (unsigned __int16)v318))
        goto LABEL_307;
      v59 = v327;
    }
    else
    {
      v59 = v327;
      if ((unsigned __int16)v12 + 4 < v327)
      {
        v60 = v12;
        while (strncmp((const char *)(*(_QWORD *)(a1 + 984) + (unsigned __int16)v60), __dst, 4uLL))
        {
          v12 = v60 + 1;
          v11 = v11
              + utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(_QWORD *)(a1 + 992)
                                                                              + (unsigned __int16)v11));
          v61 = (unsigned __int16)v60++ + 5;
          if (v61 >= v327)
            goto LABEL_56;
        }
        v12 = v60;
      }
LABEL_56:
      v58 = *(_QWORD *)(a1 + 984);
      if (strncmp((const char *)(v58 + (unsigned __int16)v12), __dst, 4uLL))
      {
LABEL_307:
        v281 = *(_QWORD *)(*(_QWORD *)a1 + 32);
        goto LABEL_318;
      }
    }
    if (*(_DWORD *)__dst == 808466276 || *(_DWORD *)__dst == 1717985584)
    {
      v63 = v12 + 4;
      v62 = (unsigned __int16)v12;
    }
    else
    {
      v62 = (unsigned __int16)v12;
      v63 = v12;
      if (v59 <= (unsigned __int16)v12)
      {
        v63 = v12;
      }
      else
      {
        do
        {
          v64 = *(unsigned __int8 *)(v58 + v63);
          if (v64 == 32)
            break;
          if (v64 == 42)
            break;
          ++v63;
        }
        while (v59 > v63);
      }
    }
    v65 = v63 - v62;
    if (v65 > 63)
    {
      v144 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      v282 = "start position";
      goto LABEL_321;
    }
    v317 = v13;
    if (v65 < 1)
    {
      v66 = 0;
    }
    else
    {
      v66 = 0;
      v67 = 0;
      v68 = *(_DWORD *)(a1 + 1200);
      v69 = (unsigned __int16)v11;
      v70 = (unsigned __int8 *)(v58 + v62);
      do
      {
        if (v68)
          v71 = *v70;
        else
          v71 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 992) + v69);
        if (v71 != 32 && v71 != 126)
          __s[v66++] = v71;
        ++v67;
        ++v69;
        ++v70;
      }
      while (v65 > (unsigned __int16)v67);
    }
    __s[v66] = 0;
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"processing words IN=_%s_ OUT=_%s_", v34, v35, v36, (uint64_t)__s1);
    if (strcmp(__s1, __s))
    {
      if (*(_DWORD *)(a1 + 1200))
      {
        v284 = *(_QWORD *)(*(_QWORD *)a1 + 32);
        v285 = "original word";
      }
      else
      {
        v76 = strlen(__s);
        v77 = strlen(__s1);
        v334 = 0;
        if (wordSeg_GetOrthPinyinWords(a1, v66, (uint64_t)__s, &v334))
        {
          v78 = v76 - v77;
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"updating pinyin from \"%s\" to \"%s\"", v73, v74, v75, (uint64_t)__s1);
          v79 = *(const char **)(a1 + 1016);
          v80 = strlen(v79);
          v296 = strlen(__s1);
          v300 = strlen(__s);
          v81 = strlen(*(const char **)(a1 + 1000));
          v86 = v81;
          v87 = v78;
          if (v78 < 1)
          {
            if ((v78 & 0x80000000) == 0)
            {
              v101 = (unsigned __int16)v321;
              v99 = (unsigned __int16)v321;
              v100 = (_QWORD *)(a1 + 1016);
              goto LABEL_93;
            }
            v99 = (unsigned __int16)v321;
            v102 = (unsigned __int16)v321 - v87;
            if (v102 <= v80)
            {
              __lenb = (unsigned __int16)(v80 - (v321 - v87));
              memmove((void *)&v79[(unsigned __int16)v321], &v79[v102], __lenb);
              v103 = v80 + v87;
              *(_BYTE *)(*v303 + (int)v103) = 0;
              memmove((void *)(*v309 + v299), (const void *)(*v309 + v299 - v87), __lenb);
              v101 = (unsigned __int16)v321;
              *(_BYTE *)(*v309 + (int)v103) = 0;
              v100 = (_QWORD *)(a1 + 1016);
              goto LABEL_93;
            }
            log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 61005, "%s%d%s%d%s%d", v82, v83, v84, v85, "incorrect position detected : pos");
LABEL_313:
            v280 = 2359304192;
          }
          else
          {
            v297 = v81;
            v88 = v80;
            v89 = v80 + (unint64_t)v78;
            v90 = *(unsigned __int16 *)(a1 + 1024);
            if ((int)v89 <= v90)
              goto LABEL_88;
            __len = v88;
            v295 = v88 + v78;
            v91 = v78;
            if ((unsigned __int16)v78 <= 0x20u)
              v91 = 32;
            v92 = v90 + v91;
            v93 = (unsigned __int16)(v90 + v91);
            MrkMemory = wordSeg_ReallocCharStr(a1, v303, v93);
            if ((MrkMemory & 0x80000000) == 0)
            {
              MrkMemory = wordSeg_ReallocCharStr(a1, v309, v93);
              if ((MrkMemory & 0x80000000) == 0)
              {
                *(_WORD *)(a1 + 1024) = v92;
                v79 = *(const char **)(a1 + 1016);
                LODWORD(v88) = __len;
                v89 = v295;
LABEL_88:
                v99 = (unsigned __int16)v321;
                __lena = (int)(v88 - (unsigned __int16)v321);
                memmove((void *)&v79[v87 + (unsigned __int16)v321], &v79[(unsigned __int16)v321], __lena);
                v100 = (_QWORD *)(a1 + 1016);
                *(_BYTE *)(*v303 + v89) = 0;
                memmove((void *)(*v309 + v299 + v87), (const void *)(*v309 + v299), __lena);
                v101 = (unsigned __int16)v321;
                v86 = v297;
                *(_BYTE *)(*v309 + v297 + (unint64_t)v87) = 0;
LABEL_93:
                v104 = v300;
                memmove((void *)(*v100 + v101), __s, v300);
                if (v300)
                {
                  LODWORD(v108) = v86 - v99;
                  if (v86 >= v99)
                    v108 = v108;
                  else
                    v108 = 0;
                  v109 = v299;
                  do
                  {
                    if (!v108)
                      break;
                    *(_BYTE *)(*v309 + v109) = 88;
                    --v108;
                    ++v109;
                    --v104;
                  }
                  while (v104);
                }
                v110 = *(unsigned __int16 *)(a1 + 1040);
                if (v110 >= 2)
                {
                  v111 = *(_QWORD *)(a1 + 1032);
                  v112 = *(_DWORD *)(v111 + 12);
                  v113 = (_DWORD *)(v111 + 48);
                  v114 = v110 - 1;
                  do
                  {
                    v115 = *(v113 - 1);
                    v116 = v115 - v112;
                    if (*(v113 - 4) == 1 && v116 == v99)
                      *v113 = v87 + v296;
                    if (v116 >= v99 + v296)
                      *(v113 - 1) = v115 + v87;
                    v113 += 8;
                    --v114;
                  }
                  while (v114);
                }
                log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"AFTER pinyin rule      =\"%s\"", v105, v106, v107, *(_QWORD *)(a1 + 1016));
                v59 = v327;
                goto LABEL_112;
              }
            }
LABEL_305:
            v280 = MrkMemory;
          }
LABEL_314:
          log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 61010, 0, v95, v96, v97, v98, v289);
          return v280;
        }
        v284 = *(_QWORD *)(*(_QWORD *)a1 + 32);
        v285 = "original pinyin";
      }
      log_OutPublic(v284, (uint64_t)"FE_WORDSEG", 61002, "%s%s%s%s", v72, v73, v74, v75, v285);
      goto LABEL_324;
    }
LABEL_112:
    if (*(_DWORD *)(a1 + 1200))
    {
      v13 = v317;
      v118 = v12 + v318;
      for (k = v304; v59 > (unsigned __int16)v118; v118 += utf8_determineUTF8CharLength(0x7Eu))
      {
        if (*(_BYTE *)(*(_QWORD *)(a1 + 984) + (unsigned __int16)v118) != 126)
          break;
      }
      v17 = v11;
    }
    else
    {
      v118 = v12 + 4;
      v17 = (v11 + 4);
      v13 = v317;
      for (k = v304;
            v59 > (unsigned __int16)v118;
            v17 = v17
                + utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(_QWORD *)(a1 + 992)
                                                                                + (unsigned __int16)v17)))
      {
        if (*(_BYTE *)(*(_QWORD *)(a1 + 984) + (unsigned __int16)v118) != 126)
          break;
        ++v118;
      }
    }
    v119 = strlen(__s);
    v120 = v321 + v119;
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"posInSentStr=%d", v121, v122, v123, (unsigned __int16)(v321 + v119));
    if (v329 > v312)
    {
      v124 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 952) + v46);
      v125 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 984) + (unsigned __int16)v118);
      if (v124 != v125)
      {
        v313 = (unsigned __int16)(v321 + v119);
        if (v124 == 42 && v125 == 32)
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"insert boundary at position %d", v34, v35, v36, (unsigned __int16)(v321 + v119));
          v126 = strlen(*(const char **)(a1 + 1016));
          v127 = Utf8_LengthInUtf8chars(*(_QWORD *)(a1 + 1016), (unsigned __int16)(v321 + v119));
          v128 = v126;
          v129 = Utf8_LengthInUtf8chars(*(_QWORD *)(a1 + 1016), v126);
          v130 = *(unsigned __int16 *)(a1 + 1024);
          if (v128 >= v130)
          {
            MrkMemory = wordSeg_ReallocCharStr(a1, v303, (unsigned __int16)(v130 + 32));
            if ((MrkMemory & 0x80000000) != 0)
              goto LABEL_305;
            MrkMemory = wordSeg_ReallocCharStr(a1, v309, (unsigned __int16)(*(_WORD *)(a1 + 1024) + 32));
            if ((MrkMemory & 0x80000000) != 0)
              goto LABEL_305;
            *(_WORD *)(a1 + 1024) += 32;
          }
          memmove((void *)(*(_QWORD *)(a1 + 1016) + (unsigned __int16)v120 + 1), (const void *)(*(_QWORD *)(a1 + 1016) + (unsigned __int16)v120), (int)(v128 - (unsigned __int16)v120));
          *(_BYTE *)(*(_QWORD *)(a1 + 1016) + (unsigned __int16)v120) = 32;
          *(_BYTE *)(*(_QWORD *)(a1 + 1016) + v128 + 1) = 0;
          v131 = v127 + 1;
          v132 = v129 - v127;
          memmove((void *)(*(_QWORD *)(a1 + 1000) + v131), (const void *)(*(_QWORD *)(a1 + 1000) + v127), v132);
          *(_BYTE *)(*(_QWORD *)(a1 + 1000) + v127) = 88;
          v133 = v129 + 1;
          *(_BYTE *)(*(_QWORD *)(a1 + 1000) + v133) = 0;
          memmove((void *)(*(_QWORD *)(a1 + 1008) + v131), (const void *)(*(_QWORD *)(a1 + 1008) + v127), v132);
          *(_BYTE *)(*(_QWORD *)(a1 + 1008) + v127) = 32;
          *(_BYTE *)(*(_QWORD *)(a1 + 1008) + v133) = 0;
          v137 = *(unsigned __int16 *)(a1 + 1040);
          if (v137 < 2)
          {
            v142 = 1;
            v143 = "AFTER insert rule      =\"%s\" posInSentStr=%d";
            v13 = v317;
            k = v304;
          }
          else
          {
            v138 = *(_QWORD *)(a1 + 1032);
            v139 = *(_DWORD *)(v138 + 12);
            v140 = v137 - 1;
            v141 = (_DWORD *)(v138 + 44);
            v13 = v317;
            k = v304;
            do
            {
              if (*v141 - v139 >= v313)
                ++*v141;
              v141 += 8;
              --v140;
            }
            while (v140);
            v142 = 1;
            v143 = "AFTER insert rule      =\"%s\" posInSentStr=%d";
          }
          goto LABEL_158;
        }
        v144 = *(_QWORD *)(*(_QWORD *)a1 + 32);
        if (v124 != 32 || v125 != 42)
        {
          v287 = 61010;
          v286 = 0;
          goto LABEL_323;
        }
        log_OutText(v144, (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"delete boundary at position %d", v34, v35, v36, (unsigned __int16)(v321 + v119));
        if ((_WORD)v321 + (_WORD)v119)
        {
          v145 = (const char *)*v303;
          v146 = strlen((const char *)*v303);
          if ((unsigned __int16)(v321 + v119) != v146)
          {
            v147 = (unsigned __int16)(v321 + v119 - 1);
            v148 = v321 + v119 - 1;
            do
            {
              v149 = v147;
              if (!v148)
                break;
              v150 = v145[v148];
              --v147;
              --v148;
            }
            while (v150 != 32);
            v151 = v146;
            if ((unsigned __int16)(v321 + v119 + 1) > v146)
              v151 = v321 + v119 + 1;
            v152 = v321 + v119;
            while (++v152 < v146)
            {
              if (v145[v152] == 32)
                goto LABEL_150;
            }
            v152 = v151;
LABEL_150:
            if (v152 - v149 < 65)
            {
              v153 = strlen(v145);
              v154 = Utf8_LengthInUtf8chars((unint64_t)v145, (unsigned __int16)(v321 + v119));
              v322 = Utf8_LengthInUtf8chars(*(_QWORD *)(a1 + 1016), v153);
              memmove((void *)(*(_QWORD *)(a1 + 1016) + (unsigned __int16)v120), (const void *)(*(_QWORD *)(a1 + 1016) + (unsigned __int16)v120 + 1), v153 - ((unsigned __int16)v120 + 1));
              *(_BYTE *)(v153 + *(_QWORD *)(a1 + 1016) - 1) = 0;
              v155 = *(_QWORD *)(a1 + 1000);
              v301 = v154;
              v156 = v154;
              v157 = (void *)(v155 + v154);
              v158 = v154 + 1;
              v159 = v322 - (int)v158;
              memmove(v157, (const void *)(v155 + v158), v159);
              *(_BYTE *)(*(_QWORD *)(a1 + 1000) + v156) = 88;
              v160 = v322 - 1;
              *(_BYTE *)(*(_QWORD *)(a1 + 1000) + v160) = 0;
              memmove((void *)(*(_QWORD *)(a1 + 1008) + v301), (const void *)(*(_QWORD *)(a1 + 1008) + v158), v159);
              *(_BYTE *)(*(_QWORD *)(a1 + 1008) + v156) = 32;
              *(_BYTE *)(*(_QWORD *)(a1 + 1008) + v160) = 0;
              v161 = *(unsigned __int16 *)(a1 + 1040);
              if (v161 < 2)
              {
                v142 = 0xFFFF;
                v143 = "AFTER delete rule      =\"%s\" posInSentStr=%d";
                v13 = v317;
              }
              else
              {
                v162 = *(_QWORD *)(a1 + 1032);
                v163 = *(_DWORD *)(v162 + 12);
                v164 = v161 - 1;
                v165 = (_DWORD *)(v162 + 44);
                v13 = v317;
                do
                {
                  if (*v165 - v163 >= v313)
                    --*v165;
                  v165 += 8;
                  --v164;
                }
                while (v164);
                v142 = 0xFFFF;
                v143 = "AFTER delete rule      =\"%s\" posInSentStr=%d";
              }
LABEL_158:
              v321 = v120 + v142;
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)v143, v134, v135, v136, *(_QWORD *)(a1 + 1016));
              goto LABEL_159;
            }
          }
        }
        v144 = *(_QWORD *)(*(_QWORD *)a1 + 32);
        v282 = "deleting boundary at position";
LABEL_321:
        LODWORD(v290) = (_DWORD)v282;
LABEL_322:
        v286 = "%s%d%s%d";
        v287 = 61011;
LABEL_323:
        log_OutPublic(v144, (uint64_t)"FE_WORDSEG", v287, v286, v33, v34, v35, v36, v290);
        goto LABEL_324;
      }
    }
    v321 += v119;
LABEL_159:
    if (*(_DWORD *)(a1 + 1200))
    {
      v166 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(_QWORD *)(a1 + 952) + (unsigned __int16)v28));
      v167 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(_QWORD *)(a1 + 984) + (unsigned __int16)v118));
      v324 = v28 + v166;
    }
    else
    {
      v13 = v13
          + utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(_QWORD *)(a1 + 960) + (unsigned __int16)v13));
      v17 = v17
          + utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(_QWORD *)(a1 + 992) + (unsigned __int16)v17));
      v167 = 1;
    }
    v10 = v302;
    v12 = v167 + v118;
    v23 = v315 + 1;
    v11 = v17;
    a2 = v326;
    if (v315 + 1 == v306)
      goto LABEL_6;
  }
  strncpy(__dst, (const char *)(*k + 4 * v23), 4uLL);
  v333 = 0;
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"\tthisHexStr=%s", v38, v39, v40, (uint64_t)__dst);
  v41 = v324;
  v37 = v329;
  if ((unsigned __int16)v324 + 4 < v329)
  {
    while (strncmp((const char *)(*(_QWORD *)(a1 + 952) + (unsigned __int16)v41), __dst, 4uLL))
    {
      v28 = v41 + 1;
      v13 = v13
          + utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(_QWORD *)(a1 + 960) + (unsigned __int16)v13));
      v42 = (unsigned __int16)v41++ + 5;
      if (v42 >= v329)
        goto LABEL_22;
    }
  }
  v28 = v41;
LABEL_22:
  v32 = *(_QWORD *)(a1 + 952);
  if (!strncmp((const char *)(v32 + (unsigned __int16)v28), __dst, 4uLL))
    goto LABEL_23;
  v281 = *(_QWORD *)(*(_QWORD *)a1 + 32);
LABEL_318:
  v283 = "hex1(first 4 chars)";
LABEL_319:
  log_OutPublic(v281, (uint64_t)"FE_WORDSEG", 61012, "%s%s%s%s%s%s", v33, v34, v35, v36, v283);
LABEL_324:
  v280 = 0;
  *v291 = 1;
  return v280;
}

uint64_t fe_word_seg_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 86237, 1208) & 0x80000000) != 0)
    return 2359304200;
  else
    return synstrmaux_CloseStreams((_WORD *)(a1 + 64), *(_QWORD *)(a1 + 8));
}

uint64_t fe_word_seg_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2359304193;
  result = 0;
  *a2 = &IWordSeg;
  return result;
}

uint64_t wordSeg_GetNewCharStr(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;

  v6 = *a2;
  if (v6)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v6);
    *a2 = 0;
  }
  v7 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, a3 + 1);
  *a2 = v7;
  if (v7)
    return 0;
  log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 61000, 0, v8, v9, v10, v11, v13);
  return 2359304202;
}

uint64_t wordSeg_GetOrthPinyinWords(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int16 *a4)
{
  int v8;
  unsigned int v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  unsigned __int16 i;
  unsigned int v13;
  unsigned int v14;

  v8 = *(_DWORD *)(a1 + 1200);
  *a4 = 0;
  if (v8)
  {
    if (a2)
    {
      LOWORD(v9) = 0;
      v10 = 0;
      do
      {
        v11 = *a4 + utf8_determineUTF8CharLength(*(unsigned __int8 *)(a3 + (unsigned __int16)v9));
        *a4 = v11;
        *(_WORD *)(a1 + 2 * v10++ + 1060) = v11;
        v9 = *a4;
      }
      while (v9 < a2);
      return v10;
    }
    return 0;
  }
  if (!a2)
    return 0;
  v10 = 0;
  for (i = 0; i < a2; *a4 = i)
  {
    while (1)
    {
      v13 = *(unsigned __int8 *)(a3 + i);
      if (v13 - 97 > 0x19)
        break;
      *a4 = ++i;
      if (a2 <= i)
      {
        if (a2 == i)
          return 0;
        goto LABEL_17;
      }
    }
    if ((v13 < 0x31 || v13 > *(unsigned __int8 *)(a1 + 1196))
      && (!i || v13 != 39 || *(_BYTE *)(a3 + i - 1) != 114))
    {
      goto LABEL_28;
    }
LABEL_17:
    *(_WORD *)(a1 + 2 * v10++ + 1060) = i + 1;
    i = *a4 + 1;
  }
  if (a2 == i)
  {
    if (i)
    {
      v14 = *(unsigned __int8 *)(a3 + i - 1);
      if ((v14 < 0x31 || v14 > *(unsigned __int8 *)(a1 + 1196))
        && (a2 < 3 || *(_BYTE *)(a3 + a2 - 2) != 114 || *(_BYTE *)(a3 + a2 - 1) != 39))
      {
        LOBYTE(v13) = *(_BYTE *)(a3 + i);
LABEL_28:
        if (!memchr("|-=*()&%^@#$", (char)v13, 0xDuLL))
          return 0;
      }
    }
  }
  return v10;
}

uint64_t wordSeg_GrowDepesLayers(uint64_t a1, unsigned __int16 *a2, unsigned int a3, unsigned int a4, const char *a5, const char *a6, const char *a7, const char *a8, unsigned __int16 a9, unsigned __int16 a10, int a11)
{
  const char *v11;
  char **v15;
  unsigned __int16 v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  unsigned __int16 v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  unsigned int v23;
  unsigned int v26;
  unsigned int v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  unsigned __int16 v30;
  uint64_t result;
  unsigned int k;
  unsigned int m;
  char **v35;
  unsigned __int16 v36;
  char **v37;
  unsigned int v38;
  unint64_t v39;
  __int16 v40;
  unsigned int v41;
  size_t v42;
  unsigned int i;
  unsigned int j;
  const char *v45;
  unsigned __int16 v46;
  unsigned __int16 v47;
  unsigned __int16 v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unsigned __int16 v58;
  int v59;
  unsigned __int16 v60;
  int v61;
  unsigned __int16 v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  unsigned __int16 __n;
  const char **v70;
  unsigned __int16 *v71;
  const char **v73;
  unsigned __int16 v74;
  unsigned __int16 v78;

  v11 = a8;
  if (!*(_DWORD *)(a1 + 1200))
  {
    v35 = (char **)(a1 + 960);
    v36 = strlen(*(const char **)(a1 + 960));
    v37 = (char **)(a1 + 952);
    v74 = strlen(*(const char **)(a1 + 952));
    v71 = a2;
    v38 = *a2;
    v39 = v36 + (unint64_t)a9;
    if (v39 > v38)
    {
      if (a9 <= 0x20u)
        v40 = 32;
      else
        v40 = a9;
      __n = v38 + v40;
      v41 = (unsigned __int16)(v38 + v40);
      result = wordSeg_ReallocCharStr(a1, (uint64_t *)(a1 + 952), v41);
      if ((result & 0x80000000) != 0)
        return result;
      v42 = (int)(v41 - v36);
      bzero((void *)(*(_QWORD *)(a1 + 952) + v74), v42);
      result = wordSeg_ReallocCharStr(a1, (uint64_t *)(a1 + 960), v41);
      if ((result & 0x80000000) != 0)
        return result;
      bzero((void *)(*(_QWORD *)(a1 + 960) + v36), v42);
      result = wordSeg_ReallocCharStr(a1, (uint64_t *)(a1 + 968), __n);
      if ((result & 0x80000000) != 0)
        return result;
      bzero((void *)(*(_QWORD *)(a1 + 968) + v74), v42);
      result = wordSeg_ReallocCharStr(a1, (uint64_t *)(a1 + 976), __n);
      if ((result & 0x80000000) != 0)
        return result;
      bzero((void *)(*(_QWORD *)(a1 + 976) + v74), v42);
      *v71 = __n;
      v11 = a8;
    }
    if (a11 == 1)
    {
      strncat(*(char **)(a1 + 952), (const char *)(*(_QWORD *)(a1 + 1000) + a4), a10);
      *(_BYTE *)(*(_QWORD *)(a1 + 952) + v74 + (unint64_t)a10) = 0;
      strncat(*(char **)(a1 + 960), (const char *)(*(_QWORD *)(a1 + 1016) + a3), a9);
      *(_BYTE *)(*(_QWORD *)(a1 + 960) + v39) = 0;
      if (a10)
      {
        for (i = 0; i < a10; ++i)
          *(_WORD *)(*(_QWORD *)(a1 + 968) + strlen(*(const char **)(a1 + 968))) = 32;
        for (j = 0; j < a10; ++j)
          *(_WORD *)(*(_QWORD *)(a1 + 976) + strlen(*(const char **)(a1 + 976))) = 32;
      }
    }
    else
    {
      v45 = v11;
      v46 = strlen(a5);
      v47 = strlen(a6);
      v48 = strlen(a7);
      v78 = strlen(v45);
      strcat(*v37, a5);
      v49 = a10 - v46;
      if (v49 >= 1)
      {
        v50 = 0;
        do
        {
          *(_WORD *)&(*v37)[strlen(*v37)] = 126;
          ++v50;
        }
        while (v49 > (unsigned __int16)v50);
      }
      strcat(*v35, a6);
      v51 = a10 - v47;
      if (v51 >= 1)
      {
        v52 = 0;
        do
        {
          *(_WORD *)&(*v35)[strlen(*v35)] = 126;
          ++v52;
        }
        while (v51 > (unsigned __int16)v52);
      }
      strcat(*(char **)(a1 + 968), a7);
      v53 = a10 - v48;
      if (v53 >= 1)
      {
        v54 = 0;
        do
        {
          *(_WORD *)(*(_QWORD *)(a1 + 968) + strlen(*(const char **)(a1 + 968))) = 126;
          ++v54;
        }
        while (v53 > (unsigned __int16)v54);
      }
      strcat(*(char **)(a1 + 976), a8);
      v55 = a10 - v78;
      if (v55 >= 1)
      {
        v56 = 0;
        do
        {
          *(_WORD *)(*(_QWORD *)(a1 + 976) + strlen(*(const char **)(a1 + 976))) = 126;
          ++v56;
        }
        while (v55 > (unsigned __int16)v56);
      }
    }
    return 0;
  }
  v15 = (char **)(a1 + 952);
  v17 = strlen(*(const char **)(a1 + 952));
  v73 = (const char **)(a1 + 960);
  v18 = strlen(*(const char **)(a1 + 960));
  v70 = (const char **)(a1 + 968);
  v19 = strlen(*(const char **)(a1 + 968));
  v20 = strlen(a6);
  v21 = strlen(a7);
  v22 = strlen(v11);
  v23 = *a2;
  if (a9 + v17 + v20 < v23 && a9 + v18 + v21 < v23 && a9 + v19 + v22 < v23)
  {
LABEL_21:
    if (a11 == 1)
    {
      strncat(*(char **)(a1 + 952), (const char *)(*(_QWORD *)(a1 + 1000) + a4), a10);
      *(_BYTE *)(*(_QWORD *)(a1 + 952) + v17 + (unint64_t)a10) = 0;
      if (a10)
      {
        for (k = 0; k < a10; ++k)
          *(_WORD *)&(*v73)[strlen(*v73)] = 32;
        for (m = 0; m < a10; ++m)
          *(_WORD *)&(*v70)[strlen(*v70)] = 32;
      }
    }
    else
    {
      v57 = strlen(a6);
      v58 = Utf8_LengthInUtf8chars((unint64_t)a6, v57);
      v59 = strlen(a7);
      v60 = Utf8_LengthInUtf8chars((unint64_t)a7, v59);
      v61 = strlen(a8);
      v62 = Utf8_LengthInUtf8chars((unint64_t)a8, v61);
      strcat(*v15, a6);
      v63 = a10 - v58;
      if (v63 >= 1)
      {
        v64 = 0;
        do
        {
          *(_WORD *)&(*v15)[strlen(*v15)] = 126;
          ++v64;
        }
        while (v63 > (unsigned __int16)v64);
      }
      strcat((char *)*v73, a7);
      v65 = a10 - v60;
      if (v65 >= 1)
      {
        v66 = 0;
        do
        {
          *(_WORD *)&(*v73)[strlen(*v73)] = 126;
          ++v66;
        }
        while (v65 > (unsigned __int16)v66);
      }
      strcat((char *)*v70, a8);
      v67 = a10 - v62;
      if (v67 >= 1)
      {
        v68 = 0;
        do
        {
          *(_WORD *)&(*v70)[strlen(*v70)] = 126;
          ++v68;
        }
        while (v67 > (unsigned __int16)v68);
      }
    }
    return 0;
  }
  v26 = v21;
  if (v20 > v21)
    v26 = v20;
  if (v26 <= v22)
    v26 = v22;
  v27 = v26 + a9;
  v28 = v23 + a9 + v26;
  v29 = v23 + 32;
  if (v27 <= 0x20)
    v30 = v29;
  else
    v30 = v28;
  result = wordSeg_ReallocCharStr(a1, (uint64_t *)(a1 + 952), v30);
  if ((result & 0x80000000) == 0)
  {
    bzero((void *)(*(_QWORD *)(a1 + 952) + v17), v30 - v17);
    result = wordSeg_ReallocCharStr(a1, (uint64_t *)v73, v30);
    if ((result & 0x80000000) == 0)
    {
      bzero((void *)(*(_QWORD *)(a1 + 960) + v18), v30 - v18);
      result = wordSeg_ReallocCharStr(a1, (uint64_t *)v70, v30);
      if ((result & 0x80000000) == 0)
      {
        bzero((void *)&(*v70)[v19], v30 - v19);
        *a2 = v30;
        goto LABEL_21;
      }
    }
  }
  return result;
}

uint64_t wordSeg_ReallocCharStr(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unsigned int v12;

  v5 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *a2, a3 + 1);
  if (v5)
  {
    v10 = v5;
    result = 0;
    *a2 = v10;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 61000, 0, v6, v7, v8, v9, v12);
    return 2359304202;
  }
  return result;
}

uint64_t wordSeg_GetMrkInsertPos(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(unsigned __int16 *)(a1 + 1040);
  if (v3 < 2)
    return 1;
  v4 = (_DWORD *)(*(_QWORD *)(a1 + 1032) + 48);
  v5 = 1;
  while (*(v4 - 1) <= a2)
  {
    ++v5;
    v4 += 8;
    if (v3 == v5)
      return v3;
  }
  result = (unsigned __int16)v5;
  if (*(v4 - 1) == a2 && v3 > (unsigned __int16)v5)
  {
    while (*(v4 - 1) == a2 && *v4 + a2 <= a3)
    {
      v4 += 8;
      if (v3 == ++v5)
        return v3;
    }
    return (unsigned __int16)v5;
  }
  return result;
}

uint64_t wordSeg_GetMrkMemory(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unsigned int v11;

  v4 = *(unsigned __int16 *)(a1 + 1040);
  if (v4 < *(unsigned __int16 *)(a1 + 1042))
  {
    v5 = *(_QWORD *)(a1 + 1032);
LABEL_5:
    memmove((void *)(v5 + 32 * (a2 + 1)), (const void *)(v5 + 32 * a2), 32 * (int)(v4 - a2));
    result = 0;
    ++*(_WORD *)(a1 + 1040);
    return result;
  }
  *(_WORD *)(a1 + 1042) = v4 + 1;
  v5 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 1032), 32 * (unsigned __int16)(v4 + 1));
  if (v5)
  {
    *(_QWORD *)(a1 + 1032) = v5;
    v4 = *(unsigned __int16 *)(a1 + 1040);
    goto LABEL_5;
  }
  log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WORDSEG", 61000, 0, v6, v7, v8, v9, v11);
  return 2359304202;
}

uint64_t tryLoadingCrfModel(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Only_ReferenceCnt;

  v8 = a8;
  log_OutText(*(_QWORD *)(a5 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"looking for CRF PW model at %s", (uint64_t)a6, a7, a8, a7);
  Only_ReferenceCnt = crf_Init_ReadOnly_ReferenceCnt(a1, a2, a3, a4, a6, 2, a7, (uint64_t)"CRPH", v8, (v8 & 0xFFFFFFu) >> 16, 0);
  if ((Only_ReferenceCnt & 0x80000000) != 0)
    log_OutText(*(_QWORD *)(a5 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"no CRF PW model found", v16, v17, v18, a7);
  return Only_ReferenceCnt;
}

uint64_t pw_crf_process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t *a8, unsigned __int16 *a9, _DWORD *a10)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  const char **v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char **v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  const char *v29;
  unsigned int v30;
  size_t v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char **v38;
  int v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char **v43;
  int v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  _BOOL4 v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  size_t v60;
  char *v61;
  char v62;
  const char *v63;
  size_t v64;
  char v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  int v77;
  char v78;
  _BYTE *v79;
  int v80;
  _BYTE *v81;
  int v82;
  unsigned __int8 **v83;
  unint64_t v84;
  _BYTE *v85;
  int v86;
  int v87;
  int v88;
  _BYTE *v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  const char *v94;
  int v95;
  _BYTE *v96;
  int v97;
  int v98;
  unsigned int v99;
  _BYTE **v100;
  unsigned int v101;
  const char **v102;
  int v103;
  _BYTE *v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  char *v109;
  int v110;
  int v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  char v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t *v121;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  const char *v126;
  int v127;
  int v128;
  const char *v129;
  int v130;
  const char *v131;
  size_t v132;
  size_t v133;
  uint64_t v134;
  const char *v135;
  size_t v136;
  size_t v137;
  char *v138;
  int v139;
  char v140;
  char *v141;
  int v142;
  char v143;
  uint64_t v144;
  char *v145;
  int v146;
  char v147;
  char *v148;
  int v149;
  char v150;
  unsigned __int16 v151;
  char v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  int v162;
  unint64_t v163;
  int v164;
  uint64_t v165;
  int v166;
  int v167;
  BOOL v168;
  unsigned __int16 v170;
  unsigned __int16 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  unsigned __int16 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  const char **v191;
  uint64_t v192;
  uint64_t v193;
  const char *v194;
  int v195;
  int v196;
  unsigned int LogLevel;
  uint64_t *v198;
  uint64_t v201;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  char v206;
  unsigned int v207;
  uint64_t v208;
  char **v209;
  unsigned __int16 v210;
  unsigned __int8 __c;
  _BYTE __c_1[5];
  char __src[16];
  __int128 v214;
  __int128 v215;
  char v216[21];
  char __s[16];
  __int128 v218;
  __int128 v219;
  _BYTE v220[21];
  uint64_t v221;

  v13 = a1;
  v221 = *MEMORY[0x1E0C80C00];
  v208 = 0;
  v207 = 0;
  LogLevel = log_GetLogLevel(*(_QWORD *)(a1 + 32));
  v14 = 0;
  if (a7)
  {
    v15 = a7;
    v16 = (const char **)(a6 + 8);
    do
    {
      v17 = *(v16 - 1);
      if (strcmp(*v16, "non"))
        *a10 = 0;
      v14 += strlen(v17);
      v16 += 5;
      --v15;
    }
    while (v15);
  }
  if (*a10)
    return 0;
  v18 = 2586845194;
  v198 = (uint64_t *)heap_Calloc(*(_QWORD **)(v13 + 8), (unsigned __int16)v14, 8);
  if (!v198)
    return v18;
  v19 = heap_Calloc(*(_QWORD **)(v13 + 8), (unsigned __int16)v14, 8);
  v20 = *(_QWORD **)(v13 + 8);
  v189 = v19;
  if (!v19)
  {
    v114 = (uint64_t)v198;
    goto LABEL_181;
  }
  v21 = heap_Calloc(v20, (unsigned __int16)v14, 8);
  if (!v21)
  {
    heap_Free(*(_QWORD **)(v13 + 8), (uint64_t)v198);
    v20 = *(_QWORD **)(v13 + 8);
    v114 = v189;
    goto LABEL_181;
  }
  v22 = v21;
  v185 = a8;
  v188 = a6;
  if (!a7)
    goto LABEL_167;
  v192 = v21;
  v23 = 0;
  v24 = 0;
  v186 = a7;
  v193 = v13;
  do
  {
    v187 = v23;
    v25 = (const char **)(v188 + 40 * v23);
    v194 = *v25;
    if (**v25)
    {
      v26 = 0;
      v195 = 0;
      v27 = 0;
      v191 = (const char **)(v188 + 40 * v23);
      do
      {
        v28 = 83;
        v219 = 0u;
        memset(v220, 0, sizeof(v220));
        *(_OWORD *)__s = 0u;
        v218 = 0u;
        v215 = 0u;
        memset(v216, 0, sizeof(v216));
        *(_OWORD *)__src = 0u;
        v214 = 0u;
        v29 = &v194[v26];
        v30 = utf8_determineUTF8CharLength(v194[v26]);
        v31 = strlen(*v25);
        v32 = v30;
        if (v31 != v30)
        {
          if (v31 - v30 == v26)
          {
            v28 = 69;
          }
          else if (v27)
          {
            v28 = 77;
          }
          else
          {
            v28 = 66;
          }
        }
        v33 = v24;
        v206 = v28;
        __c = 0;
        v209 = 0;
        __strncpy_chk();
        __c_1[v30] = 0;
        v210 = 0;
        if (((*(uint64_t (**)(uint64_t, uint64_t, const char *, _BYTE *, char ***, unsigned __int16 *, unsigned __int8 *))(a3 + 96))(a4, a5, "wpcrf", __c_1, &v209, &v210, &__c) & 0x80000000) == 0)
        {
          v37 = v210;
          if (v210)
          {
            v38 = v209;
            v39 = __c;
            while (1)
            {
              v40 = *v38;
              v41 = strchr(*v38, v39);
              if (v41)
                break;
              ++v38;
              if (!--v37)
                goto LABEL_53;
            }
            v47 = v41;
            if (v41 != v40)
              __strncat_chk();
            __strcat_chk();
            v48 = v47 + 1;
            v49 = strchr(v48, __c);
            if (v49)
            {
              v50 = v49;
              v51 = 0;
              do
              {
                __strcat_chk();
                v52 = (_DWORD)v50 - (_DWORD)v48;
                if (v50 - v48 < 0)
                  v52 = (_DWORD)v48 - (_DWORD)v50;
                v53 = v52;
                __strncat_chk();
                if (!v51)
                {
                  v54 = v53 == 1 && *v48 == 49;
                  *(_DWORD *)(v189 + 8 * v33) = v54;
                }
                v48 = v50 + 1;
                v50 = strchr(v50 + 1, __c);
                --v51;
              }
              while (v50);
            }
LABEL_52:
            __strcat_chk();
            __strncat_chk();
            goto LABEL_53;
          }
          if (((*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, char ***, unsigned __int16 *, unsigned __int8 *))(a3 + 96))(a4, a5, "wpcrf", "NULL", &v209, &v210, &__c) & 0x80000000) == 0)
          {
            v42 = v210;
            if (v210)
            {
              v43 = v209;
              v44 = __c;
              while (1)
              {
                v45 = *v43;
                v46 = strchr(*v43, v44);
                if (v46)
                  break;
                ++v43;
                if (!--v42)
                  goto LABEL_53;
              }
              v55 = v46;
              if (v46 != v45)
                __strncat_chk();
              __strcat_chk();
              v56 = strchr(v55 + 1, __c);
              if (v56)
              {
                v57 = v56;
                do
                {
                  __strcat_chk();
                  __strncat_chk();
                  v57 = strchr(v57 + 1, __c);
                }
                while (v57);
              }
              goto LABEL_52;
            }
          }
        }
LABEL_53:
        v13 = v193;
        if (LogLevel >= 5)
          log_OutText(*(_QWORD *)(v193 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"[PWCRF] Feat: %s", v34, v35, v36, (uint64_t)__s);
        v24 = v33;
        v58 = (char *)heap_Calloc(*(_QWORD **)(v193 + 8), 1, 69);
        v22 = v192;
        *(_QWORD *)(v192 + 8 * v33) = v58;
        if (!v58)
        {
LABEL_160:
          v18 = 2584748042;
          goto LABEL_161;
        }
        v59 = (uint64_t)v58;
        if (!__src[0])
        {
          strncpy(v58, v29, v32);
          goto LABEL_60;
        }
        if (*(_DWORD *)__src ^ 0x4C4C554E | __src[4])
        {
          strcpy(v58, __src);
LABEL_60:
          v60 = strlen(__s);
          v61 = (char *)heap_Calloc(*(_QWORD **)(v193 + 8), 1, v60 + 1);
          v198[v33] = (uint64_t)v61;
          if (!v61)
            goto LABEL_160;
          strcpy(v61, __s);
          if (v195)
          {
            if (v206 == 69)
              v62 = 83;
            else
              v62 = 66;
            *(_BYTE *)(strlen((const char *)v198[v33]) + v198[v33] - 1) = v62;
          }
          v195 = 0;
          v24 = (v33 + 1);
          goto LABEL_77;
        }
        if ((_DWORD)v33 && v206 == 69)
        {
          v63 = (const char *)v198[(v33 - 1)];
          v64 = strlen(v63);
          if (v63[v64 - 1] == 66)
            v65 = 83;
          else
            v65 = 69;
          v63[v64 - 1] = v65;
          v59 = *(_QWORD *)(v192 + 8 * v33);
        }
        else
        {
          v66 = v195;
          if (v206 == 66)
            v66 = 1;
          v195 = v66;
        }
        heap_Free(*(_QWORD **)(v193 + 8), v59);
        *(_QWORD *)(v192 + 8 * v33) = 0;
LABEL_77:
        v25 = v191;
        v27 += v32;
        v26 = v27;
      }
      while (strlen(*v191) > v27);
    }
    v23 = v187 + 1;
  }
  while (v187 + 1 != v186);
  v22 = v192;
  if (!(_DWORD)v24)
  {
LABEL_167:
    LODWORD(v24) = 0;
    v72 = v208;
    LODWORD(v71) = v207;
    v18 = 2584748040;
    goto LABEL_168;
  }
  v67 = crf_Process(a2, v198, v24, &v208, &v207);
  v71 = v207;
  v72 = v208;
  if (!v207)
  {
    v18 = v67;
    goto LABEL_162;
  }
  v73 = 0;
  v74 = 8 * v207;
  v75 = 1;
  while (2)
  {
    if (*(_DWORD *)(v189 + v73))
    {
      if (v73)
      {
        **(_BYTE **)(v72 + v73) = 69;
        v76 = *(char **)(v72 + v73 - 8);
        v77 = *v76;
        if (v77 == 83)
        {
          v78 = 66;
LABEL_92:
          *v76 = v78;
        }
        else if (v77 == 69)
        {
          v78 = 77;
          goto LABEL_92;
        }
        if (v75 < v71)
        {
          v81 = *(_BYTE **)(v72 + v73 + 8);
          v82 = *v81;
          if (v82 == 69)
          {
            *v81 = 83;
          }
          else if (v82 == 77)
          {
            *v81 = 66;
          }
        }
      }
      else if ((_DWORD)v71 != 1)
      {
        **(_BYTE **)v72 = 66;
        v79 = *(_BYTE **)(v72 + 8);
        v80 = *v79;
        if (v80 == 83)
        {
          *v79 = 69;
        }
        else if (v80 == 66)
        {
          *v79 = 77;
        }
      }
    }
    v73 += 8;
    ++v75;
    if (v74 != v73)
      continue;
    break;
  }
  v83 = (unsigned __int8 **)(v72 + 8);
  v84 = v71;
  while (2)
  {
    v85 = *(v83 - 1);
    v86 = *v85;
    if (v84 == 1)
    {
      if (v86 == 77)
      {
        LOBYTE(v87) = 69;
      }
      else
      {
        if (v86 != 66)
          break;
        LOBYTE(v87) = 83;
      }
LABEL_119:
      *v85 = v87;
    }
    else
    {
      if (*v85 > 0x4Cu)
      {
        if (v86 != 77)
        {
          if (v86 == 83 && (**v83 | 8) == 0x4D)
          {
            LOBYTE(v87) = 66;
            goto LABEL_119;
          }
          goto LABEL_120;
        }
        v88 = **v83;
        LOBYTE(v87) = 69;
      }
      else
      {
        if (v86 != 66)
        {
          if (v86 == 69)
          {
            v87 = **v83 | 8;
            if (v87 == 77)
              goto LABEL_119;
          }
          goto LABEL_120;
        }
        v88 = **v83;
        LOBYTE(v87) = 83;
      }
      if (v88 == 66 || v88 == 83)
        goto LABEL_119;
    }
LABEL_120:
    ++v83;
    if (--v84)
      continue;
    break;
  }
  if (LogLevel >= 5)
  {
    do
    {
      v89 = *(_BYTE **)v72;
      v72 += 8;
      log_OutText(*(_QWORD *)(v13 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"[PWCRF] Predicted Tag: %s", v68, v69, v70, (uint64_t)v89);
      --v71;
    }
    while (v71);
  }
  v90 = v207;
  v91 = v208;
  v196 = v24;
  if (!v207)
  {
    v123 = 0;
    v151 = 0;
    v152 = 1;
    v22 = v192;
    goto LABEL_241;
  }
  v92 = 0;
  v93 = v207 - 1;
  v203 = v207 - 1;
  while (2)
  {
    v94 = (const char *)v198[v92];
    v95 = strlen(v94) - 1;
    v96 = *(_BYTE **)(v91 + 8 * v92);
    v97 = *v96;
    if (v97 == 83)
    {
      if (v94[v95] != 83)
      {
        *v96 = 66;
        v105 = v92 + 1;
        if (v105 < v90)
        {
          v106 = *(unsigned __int8 *)(v198[v105]
                                    + strlen((const char *)v198[v105])
                                    - 1);
          v107 = v92;
          while (v106 != 69)
          {
            **(_BYTE **)(v91 + 8 * v105) = 77;
            if (v93 == v105)
              goto LABEL_141;
            v106 = *(unsigned __int8 *)(v198[v105 + 1] + strlen((const char *)v198[v105 + 1]) - 1);
            ++v107;
            ++v105;
          }
          **(_BYTE **)(v91 + 8 * v105) = 69;
          v108 = v107 + 2;
          if (v107 + 2 >= v90)
            goto LABEL_154;
          v109 = *(char **)(v91 + 8 * v108);
          v110 = *v109;
          if (v110 == 77)
            goto LABEL_151;
          if (v110 != 69)
            goto LABEL_154;
          goto LABEL_152;
        }
      }
      goto LABEL_141;
    }
    if (v97 != 69
      || (v98 = v94[v95], v98 == 69)
      || v98 == 83
      || (*v96 = 77, v99 = v92 + 1, v92 + 1 >= v90))
    {
LABEL_141:
      ++v92;
      goto LABEL_142;
    }
    v100 = (_BYTE **)(v91 + 8 * v99);
    v101 = v92;
    v102 = (const char **)&v198[v99];
    while (1)
    {
      v103 = (*v102)[strlen(*v102) - 1];
      if (v103 == 83 || v103 == 69)
        break;
      v104 = *v100++;
      *v104 = 77;
      ++v101;
      ++v102;
      if (v203 == v101)
        goto LABEL_141;
    }
    **v100 = 69;
    v108 = v101 + 2;
    if (v101 + 2 >= v90)
      goto LABEL_154;
    v109 = *(char **)(v91 + 8 * v108);
    v111 = *v109;
    if (v111 != 69)
    {
      if (v111 == 77)
      {
LABEL_151:
        v112 = 66;
        goto LABEL_153;
      }
      goto LABEL_154;
    }
LABEL_152:
    v112 = 83;
LABEL_153:
    *v109 = v112;
LABEL_154:
    if (v108 <= 1)
      v113 = v92;
    else
      v113 = 0;
    v92 = v113 + v108;
LABEL_142:
    if (v92 < v90)
      continue;
    break;
  }
  v123 = v207;
  v91 = v208;
  if (!v207)
  {
    v22 = v192;
    goto LABEL_233;
  }
  v201 = v208;
  v204 = v207;
  v124 = 0;
  LODWORD(v125) = 0;
  v126 = "latin";
  v22 = v192;
  while (2)
  {
    if (!strcmp(*(const char **)(v188 + 40 * v124 + 16), v126))
    {
      v129 = v126;
      v130 = Utf8_Utf8NbrOfSymbols(*(const char **)(v188 + 40 * v124));
      if (!v124)
        goto LABEL_208;
      if (!(_DWORD)v125)
        goto LABEL_208;
      v131 = (const char *)v198[v125];
      v132 = strlen(v131);
      if (!v132)
        goto LABEL_208;
      v133 = v132;
      v134 = (v125 - 1);
      v135 = (const char *)v198[v134];
      v136 = strlen(v135);
      if (!v136)
        goto LABEL_208;
      v137 = v136;
      if (!strcmp(*(const char **)(v188 + 40 * (v124 - 1) + 16), v129)
        || v131[v133 - 1] == 77
        || v135[v137 - 1] == 77)
      {
        goto LABEL_208;
      }
      v138 = *(char **)(v201 + 8 * v134);
      v139 = *v138;
      if (v139 == 77)
      {
        v140 = 69;
      }
      else
      {
        if (v139 != 66)
        {
LABEL_203:
          v141 = *(char **)(v201 + 8 * v125);
          v142 = *v141;
          if (v142 == 69)
          {
            v143 = 83;
          }
          else
          {
            if (v142 != 77)
              goto LABEL_208;
            v143 = 66;
          }
          *v141 = v143;
LABEL_208:
          v125 = (v125 + v130 - 1);
          v123 = v204;
          if (v125 >= v204)
          {
            v22 = v192;
LABEL_214:
            v126 = v129;
            goto LABEL_215;
          }
          v126 = v129;
          if (!strcmp(*(const char **)(v188 + 40 * v124 + 56), v129)
            || (v144 = (v125 - 1),
                *(_BYTE *)(strlen((const char *)v198[v144]) + v198[v144] - 1) == 77)
            || *(_BYTE *)(strlen((const char *)v198[v125]) + v198[v125] - 1) == 77)
          {
            v22 = v192;
LABEL_215:
            if (++v124 >= v186 || v125 >= v123)
              goto LABEL_230;
            continue;
          }
          v145 = *(char **)(v201 + 8 * v144);
          v146 = *v145;
          if (v146 == 77)
          {
            v147 = 69;
          }
          else
          {
            if (v146 != 66)
              goto LABEL_223;
            v147 = 83;
          }
          *v145 = v147;
LABEL_223:
          v148 = *(char **)(v201 + 8 * v125);
          v149 = *v148;
          if (v149 == 69)
          {
            v150 = 83;
          }
          else
          {
            if (v149 != 77)
            {
LABEL_228:
              v22 = v192;
              v123 = v204;
              goto LABEL_214;
            }
            v150 = 66;
          }
          *v148 = v150;
          goto LABEL_228;
        }
        v140 = 83;
      }
      *v138 = v140;
      goto LABEL_203;
    }
    break;
  }
  v127 = v125;
  while (1)
  {
    LODWORD(v125) = v127 + 1;
    if (v127 + 1 >= v123)
      break;
    v128 = *(unsigned __int8 *)(strlen((const char *)v198[v127]) + v198[v127] - 1);
    if (v128 != 83)
    {
      v127 = v125;
      if (v128 != 69)
        continue;
    }
    goto LABEL_215;
  }
LABEL_230:
  v123 = v207;
  v91 = v208;
LABEL_233:
  v13 = v193;
  LODWORD(v24) = v196;
  if (v123)
  {
    v153 = 0;
    v151 = 0;
    do
    {
      v154 = **(unsigned __int8 **)(v91 + v153);
      if (v154 == 83 || v154 == 69)
        ++v151;
      v153 += 8;
    }
    while (8 * v123 != v153);
    v152 = 0;
  }
  else
  {
    v151 = 0;
    v152 = 1;
  }
LABEL_241:
  *a9 = v151;
  v155 = heap_Calloc(*(_QWORD **)(v13 + 8), v151 + 1, 16);
  *v185 = v155;
  if (!v155)
  {
    v18 = 2584748042;
    log_OutPublic(*(_QWORD *)(v13 + 32), (uint64_t)"FE_PW", 37000, 0, v156, v157, v158, v159, v184);
    goto LABEL_161;
  }
  if ((v152 & 1) != 0)
  {
LABEL_266:
    v18 = 0;
    goto LABEL_161;
  }
  v160 = v155;
  LODWORD(v161) = 0;
  v162 = 0;
  v163 = v123;
  v205 = v123;
  while (2)
  {
    v164 = 0;
    v165 = v161;
    v161 = v161;
    do
    {
      v166 = v164;
      v167 = **(unsigned __int8 **)(v91 + 8 * v161);
      if (v167 == 69)
        break;
      v168 = v167 == 83;
      v164 = v166 + 1;
      ++v161;
    }
    while (!v168 && v161 < v163);
    if (v165 >= v123)
    {
      v177 = 0;
      v170 = 0;
      goto LABEL_265;
    }
    v170 = 0;
    v171 = 0;
    v172 = v165;
    while (1)
    {
      v176 = *(unsigned __int8 *)(strlen((const char *)v198[v172]) + v198[v172] - 1);
      if (v176 == 83 || v176 == 69)
        ++v170;
      v177 = v171 + 1;
      if (v171 == (unsigned __int16)v166)
        break;
      ++v172;
      ++v171;
      if (v163 == v172)
      {
        v22 = v192;
        v123 = v205;
        goto LABEL_265;
      }
    }
    if (!v170)
    {
      v13 = v193;
      log_OutText(*(_QWORD *)(v193 + 32), (uint64_t)"FE_PW", 0, 0, (uint64_t)"No Lex Word Found in Current PW. Pos: %d", v173, v174, v175, v172);
      v18 = 2584748047;
      goto LABEL_270;
    }
    *(_WORD *)(v160 + 8) = v170;
    v178 = heap_Alloc(*(_QWORD *)(v193 + 8), 2 * v170);
    *(_QWORD *)v160 = v178;
    v123 = v205;
    if (v178)
    {
      v183 = 0;
      do
      {
        *(_WORD *)(v178 + 2 * v183) = *(_WORD *)(v188 + 40 * (v162 + v183) + 24);
        ++v183;
      }
      while (v170 != v183);
      v22 = v192;
LABEL_265:
      v162 += v170;
      LODWORD(v161) = v165 + v177;
      v160 += 16;
      v13 = v193;
      LODWORD(v24) = v196;
      if (v161 >= v123)
        goto LABEL_266;
      continue;
    }
    break;
  }
  v18 = 2584748042;
  v13 = v193;
  log_OutPublic(*(_QWORD *)(v193 + 32), (uint64_t)"FE_PW", 37000, 0, v179, v180, v181, v182, v184);
LABEL_270:
  v22 = v192;
  LODWORD(v24) = v196;
LABEL_161:
  v72 = v208;
  LODWORD(v71) = v207;
  if (!(_DWORD)v24)
  {
LABEL_168:
    v117 = 1;
    goto LABEL_169;
  }
LABEL_162:
  v115 = v24;
  v116 = v198;
  do
  {
    if (*v116)
      heap_Free(*(_QWORD **)(v13 + 8), *v116);
    ++v116;
    --v115;
  }
  while (v115);
  v117 = 0;
LABEL_169:
  heap_Free(*(_QWORD **)(v13 + 8), (uint64_t)v198);
  heap_Free(*(_QWORD **)(v13 + 8), v189);
  if ((v117 & 1) == 0)
  {
    v118 = v24;
    v119 = (uint64_t *)v22;
    do
    {
      if (*v119)
        heap_Free(*(_QWORD **)(v13 + 8), *v119);
      ++v119;
      --v118;
    }
    while (v118);
  }
  heap_Free(*(_QWORD **)(v13 + 8), v22);
  if (v72)
  {
    if ((_DWORD)v71)
    {
      v120 = v71;
      v121 = (uint64_t *)v72;
      do
      {
        if (*v121)
          heap_Free(*(_QWORD **)(v13 + 8), *v121);
        ++v121;
        --v120;
      }
      while (v120);
    }
    v20 = *(_QWORD **)(v13 + 8);
    v114 = v72;
LABEL_181:
    heap_Free(v20, v114);
  }
  return v18;
}

uint64_t fe_pw_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t igtree;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned __int8 v49;
  int v50;
  char v51;
  __int16 v52;
  const char **v53;
  char *__s1;
  uint64_t v55;
  uint64_t v56;
  int v57[2];
  _OWORD v58[16];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v56 = 0;
  *(_QWORD *)v57 = 0;
  __s1 = 0;
  v55 = 0;
  igtree = 2584748039;
  v53 = 0;
  v52 = -1;
  v51 = 0;
  memset(v58, 0, sizeof(v58));
  if (!a5)
    return igtree;
  v50 = 0;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, v57);
  if ((inited & 0x80000000) != 0)
    goto LABEL_37;
  v12 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v57 + 8), 1, 1192);
  if (!v12)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)v57 + 32), (uint64_t)"FE_PW", 37000, 0, v13, v14, v15, v16, v45);
    igtree = 2584748042;
LABEL_38:
    fe_pw_ObjClose(*(_QWORD *)a5, *(_QWORD *)(a5 + 8));
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    return igtree;
  }
  v17 = v12;
  inited = objc_GetObject(*(_QWORD *)(*(_QWORD *)v57 + 48), (uint64_t)"LINGDB", &v56);
  if ((inited & 0x80000000) != 0)
    goto LABEL_37;
  *(_QWORD *)(v17 + 48) = *(_QWORD *)(v56 + 8);
  inited = objc_GetObject(*(_QWORD *)(*(_QWORD *)v57 + 48), (uint64_t)"FE_DCTLKP", &v55);
  if ((inited & 0x80000000) != 0)
    goto LABEL_37;
  v18 = v55;
  v19 = *(_QWORD *)(v55 + 8);
  *(_QWORD *)(v17 + 128) = v19;
  *(_OWORD *)(v17 + 136) = *(_OWORD *)(v18 + 16);
  v20 = *(_QWORD *)v57;
  *(_QWORD *)(v17 + 32) = a3;
  *(_QWORD *)(v17 + 40) = a4;
  *(_QWORD *)v17 = a1;
  *(_QWORD *)(v17 + 8) = a1;
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = v20;
  *(_DWORD *)(v17 + 1180) = 0;
  *(_QWORD *)(v17 + 64) = 0;
  v21 = (uint64_t *)(v17 + 64);
  *(_QWORD *)(v17 + 1184) = 0;
  igtree = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, char *))(v19 + 96))(*(_QWORD *)(v17 + 136), *(_QWORD *)(v17 + 144), "fecfg", "statbnd_enable_nnets", &v53, &v52, &v51);
  if (v52 && v53 && ((*v53)[strlen(*v53) - 1] = 0, !strcmp(*v53, "yes")))
  {
    *(_DWORD *)(v17 + 1180) = 1;
    *(_QWORD *)a5 = v17;
    *(_DWORD *)(a5 + 8) = 62341;
  }
  else if (!*(_DWORD *)(v17 + 1180))
  {
    if (!com_enable_cscgroup(*(_QWORD *)(v17 + 128), *(_QWORD *)(v17 + 136), *(_QWORD *)(v17 + 144), (_DWORD *)(v17 + 152)))*(_DWORD *)(v17 + 152) = 1;
    if (!com_cscgroup_stopwords(*(_QWORD *)(v17 + 128), *(_QWORD *)(v17 + 136), *(_QWORD *)(v17 + 144), (char *)(v17 + 156)))*(_BYTE *)(v17 + 156) = 0;
    v22 = (_QWORD *)(v17 + 112);
    if (!com_auxiliarywords(*(_QWORD *)(v17 + 24), *(_QWORD *)(v17 + 128), *(_QWORD *)(v17 + 136), *(_QWORD *)(v17 + 144), (uint64_t *)(v17 + 112), (unsigned __int8 *)(v17 + 120)))*v22 = 0;
    inited = fw_pw_CreateVoiceBrokerString(*(_QWORD *)(v17 + 24), (char *)v58);
    if ((inited & 0x80000000) == 0)
    {
      if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char **))(*(_QWORD *)(v17 + 128)
                                                                                           + 256))(*(_QWORD *)(v17 + 136), *(_QWORD *)(v17 + 144), "fepw_enable_crf", "no", &__s1) & 0x80000000) != 0|| strcmp(__s1, "yes"))
      {
        if ((ssftriff_reader_ObjOpen(a3, a4, 2, (const char *)v58, "PWDT", 1031, (uint64_t *)(v17 + 64)) & 0x80000000) == 0)
        {
          v49 = 0;
          v47 = 0;
          v48 = 0;
          v46 = 0;
          for (i = ssftriff_reader_OpenChunk(*v21, &v48, (unsigned int *)&v47, &v46, v23, v24, v25, v26);
                (i & 0x80000000) == 0;
                i = ssftriff_reader_OpenChunk(*v21, &v48, (unsigned int *)&v47, &v46, v33, v34, v35, v36))
          {
            if (!(v48 ^ 0x52545344 | v49))
            {
              inited = ssftriff_reader_GetChunkData(*v21, v47, (_QWORD *)(v17 + 56), v28, v29, v30, v31, v32);
              if ((inited & 0x80000000) != 0)
                goto LABEL_37;
              *v22 = 0;
              inited = GetRulesFromRiffData(*(uint64_t *)v57, *v21, *(_QWORD *)(v17 + 56), v47, (uint64_t *)(v17 + 72), (unsigned int *)(v17 + 80), (unsigned __int16 *)(v17 + 96), (_DWORD *)(v17 + 100), (unsigned int *)(v17 + 104), (uint64_t *)(v17 + 112), (unsigned __int8 *)(v17 + 120));
              if ((inited & 0x80000000) != 0)
                goto LABEL_37;
            }
            ssftriff_reader_CloseChunk(*v21);
          }
          igtree = i;
          if ((i & 0x1FFF) == 0xA)
          {
            *(_QWORD *)(v17 + 56) = 0;
            return igtree;
          }
        }
        goto LABEL_32;
      }
      inited = tryLoadingCrfModel(*(_WORD **)(v17 + 32), *(_QWORD *)(v17 + 40), *(_WORD **)(v17 + 8), *(_QWORD *)(v17 + 16), *(_QWORD *)(v17 + 24), (_QWORD *)(v17 + 88), (uint64_t)v58, 1031);
      if ((inited & 0x80000000) == 0)
      {
LABEL_32:
        igtree = load_igtree_cfg(*(_QWORD *)(v17 + 136), *(_QWORD *)(v17 + 144), *(_QWORD *)(v17 + 128), &v50);
        if ((igtree & 0x80000000) == 0)
        {
          if (v50)
          {
            v37 = (uint64_t *)(v17 + 1184);
            igtree = load_igtree(*(_WORD **)(v17 + 32), *(_QWORD *)(v17 + 40), *(_QWORD *)(v17 + 24), (char **)(v17 + 1184));
            if ((igtree & 0x80000000) != 0)
            {
              if (*v37)
              {
                igtree_Deinit(*(_QWORD *)(v17 + 24), *v37, v38, v39, v40, v41, v42, v43);
                igtree = 0;
                *(_QWORD *)(v17 + 1184) = 0;
              }
              else
              {
                igtree = 0;
              }
            }
          }
          *(_QWORD *)a5 = v17;
          *(_DWORD *)(a5 + 8) = 62341;
        }
        return igtree;
      }
    }
LABEL_37:
    igtree = inited;
    goto LABEL_38;
  }
  if ((igtree & 0x80000000) != 0)
    goto LABEL_38;
  return igtree;
}

uint64_t fw_pw_CreateVoiceBrokerString(uint64_t a1, char *a2)
{
  uint64_t result;
  int v5[2];

  *(_QWORD *)v5 = 0;
  result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"langcode", v5);
  if ((result & 0x80000000) == 0)
    return brokeraux_ComposeBrokerString(a1, "prosodyword", 1, 1, *(char **)v5, 0, 0, a2, 0x100uLL);
  return result;
}

uint64_t fe_pw_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Only_DereferenceCnt;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = safeh_HandleCheck(a1, a2, 62341, 1192);
  if ((v3 & 0x80000000) != 0)
    return 2584748040;
  Only_DereferenceCnt = v3;
  if (a1)
  {
    if (*(_QWORD *)(a1 + 48))
      objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 48), (uint64_t)"LINGDB");
    if (*(_QWORD *)(a1 + 128))
      objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 48), (uint64_t)"FE_DCTLKP");
    v12 = *(_QWORD **)(a1 + 64);
    if (v12)
      ssftriff_reader_ObjClose(v12, v4, v5, v6, v7, v8, v9, v10);
    v13 = *(_QWORD *)(a1 + 112);
    if (v13)
    {
      v14 = *(unsigned __int8 *)(a1 + 120);
      if (*(_BYTE *)(a1 + 120))
      {
        v15 = 0;
        do
        {
          v16 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v15);
          if (v16)
          {
            heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), v16);
            v14 = *(unsigned __int8 *)(a1 + 120);
          }
          ++v15;
        }
        while (v15 < v14);
        v13 = *(_QWORD *)(a1 + 112);
      }
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), v13);
    }
    if (*(_DWORD *)(a1 + 1180))
      goto LABEL_31;
    v17 = *(_QWORD *)(a1 + 88);
    if (!v17)
    {
LABEL_21:
      v18 = *(_QWORD *)(a1 + 72);
      if (v18)
      {
        v19 = *(unsigned int *)(a1 + 80);
        if ((_DWORD)v19)
        {
          v20 = 0;
          v21 = 16;
          do
          {
            v22 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + v21);
            if (v22)
            {
              heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), v22);
              v19 = *(unsigned int *)(a1 + 80);
            }
            ++v20;
            v21 += 32;
          }
          while (v20 < v19);
          v18 = *(_QWORD *)(a1 + 72);
        }
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), v18);
      }
      v23 = *(_QWORD *)(a1 + 1184);
      if (v23)
      {
        igtree_Deinit(*(_QWORD *)(a1 + 24), v23, v17, v6, v7, v8, v9, v10);
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), *(_QWORD *)(a1 + 1184));
        *(_QWORD *)(a1 + 1184) = 0;
      }
LABEL_31:
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), a1);
      return Only_DereferenceCnt;
    }
    Only_DereferenceCnt = crf_Deinit_ReadOnly_DereferenceCnt(*(_QWORD *)(a1 + 24), *(_QWORD *)a1, v17);
    if ((Only_DereferenceCnt & 0x80000000) == 0)
    {
      *(_QWORD *)(a1 + 88) = 0;
      goto LABEL_21;
    }
  }
  return Only_DereferenceCnt;
}

uint64_t fe_pw_ObjReopen(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44[2];
  unsigned __int8 v45;
  int v46;
  _OWORD v47[16];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  memset(v47, 0, sizeof(v47));
  result = safeh_HandleCheck(a1, a2, 62341, 1192);
  if ((result & 0x80000000) != 0)
    return 2584748040;
  if (!a1)
    return 2584748038;
  if (!*(_DWORD *)(a1 + 1180))
  {
    v46 = 0;
    result = fw_pw_CreateVoiceBrokerString(*(_QWORD *)(a1 + 24), (char *)v47);
    if ((result & 0x80000000) == 0)
    {
      v12 = (uint64_t *)(a1 + 64);
      v11 = *(_QWORD **)(a1 + 64);
      if (v11)
      {
        ssftriff_reader_ObjClose(v11, v4, v5, v6, v7, v8, v9, v10);
        *v12 = 0;
      }
      v13 = *(_QWORD *)(a1 + 88);
      if (v13)
      {
        result = crf_Deinit_ReadOnly_DereferenceCnt(*(_QWORD *)(a1 + 24), *(_QWORD *)a1, v13);
        if ((result & 0x80000000) != 0)
          return result;
        *(_QWORD *)(a1 + 88) = 0;
      }
      if ((tryLoadingCrfModel(*(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), *(_WORD **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), (_QWORD *)(a1 + 88), (uint64_t)v47, 1031) & 0x80000000) == 0)goto LABEL_11;
      if ((ssftriff_reader_ObjOpen(*(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), 2, (const char *)v47, "PWDT", 1031, (uint64_t *)(a1 + 64)) & 0x80000000) != 0)
      {
        *(_QWORD *)(a1 + 56) = 0;
LABEL_11:
        v20 = *(_QWORD *)(a1 + 1184);
        if (v20)
        {
          igtree_Deinit(*(_QWORD *)(a1 + 24), v20, v14, v15, v16, v17, v18, v19);
          heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), *(_QWORD *)(a1 + 1184));
          *(_QWORD *)(a1 + 1184) = 0;
        }
        result = load_igtree_cfg(*(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 128), &v46);
        if ((result & 0x80000000) == 0)
        {
          if (v46)
          {
            v21 = (uint64_t *)(a1 + 1184);
            result = load_igtree(*(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 24), (char **)(a1 + 1184));
            if ((result & 0x80000000) != 0)
            {
              if (*v21)
              {
                igtree_Deinit(*(_QWORD *)(a1 + 24), *v21, v22, v23, v24, v25, v26, v27);
                result = 0;
                *(_QWORD *)(a1 + 1184) = 0;
              }
              else
              {
                return 0;
              }
            }
          }
        }
        return result;
      }
      v45 = 0;
      v43 = 0;
      *(_QWORD *)v44 = 0;
      v29 = (uint64_t *)(a1 + 112);
      v28 = *(_QWORD *)(a1 + 112);
      if (v28)
      {
        v30 = *(unsigned __int8 *)(a1 + 120);
        if (*(_BYTE *)(a1 + 120))
        {
          v31 = 0;
          do
          {
            v32 = *(_QWORD *)(*v29 + 8 * v31);
            if (v32)
            {
              heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), v32);
              v30 = *(unsigned __int8 *)(a1 + 120);
            }
            ++v31;
          }
          while (v31 < v30);
          v28 = *v29;
        }
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), v28);
      }
      v34 = (uint64_t *)(a1 + 72);
      v33 = *(_QWORD *)(a1 + 72);
      if (v33)
      {
        v35 = *(unsigned int *)(a1 + 80);
        if ((_DWORD)v35)
        {
          v36 = 0;
          v37 = 16;
          do
          {
            v38 = *(_QWORD *)(*v34 + v37);
            if (v38)
            {
              heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), v38);
              v35 = *(unsigned int *)(a1 + 80);
            }
            ++v36;
            v37 += 32;
          }
          while (v36 < v35);
          v33 = *v34;
        }
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), v33);
      }
      result = ssftriff_reader_OpenChunk(*v12, &v44[1], (unsigned int *)v44, &v43, v16, v17, v18, v19);
      if ((result & 0x80000000) != 0)
      {
LABEL_43:
        if ((result & 0x1FFF) == 0xA)
          return result;
        goto LABEL_11;
      }
      while (1)
      {
        if (!(v44[1] ^ 0x52545344 | v45))
        {
          result = ssftriff_reader_GetChunkData(*v12, v44[0], (_QWORD *)(a1 + 56), v15, v16, v17, v18, v19);
          if ((result & 0x80000000) != 0)
            break;
          *(_QWORD *)(a1 + 112) = 0;
          result = GetRulesFromRiffData(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 56), v44[0], (uint64_t *)(a1 + 72), (unsigned int *)(a1 + 80), (unsigned __int16 *)(a1 + 96), (_DWORD *)(a1 + 100), (unsigned int *)(a1 + 100), (uint64_t *)(a1 + 112), (unsigned __int8 *)(a1 + 120));
          if ((result & 0x80000000) != 0)
            break;
        }
        ssftriff_reader_CloseChunk(*v12);
        result = ssftriff_reader_OpenChunk(*v12, &v44[1], (unsigned int *)v44, &v43, v39, v40, v41, v42);
        if ((result & 0x80000000) != 0)
          goto LABEL_43;
      }
    }
  }
  return result;
}

uint64_t fe_pw_ProcessStart(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 62341, 1192);
  if ((int)result >= 0)
    return result;
  else
    return 2584748040;
}

uint64_t fe_pw_PYT_process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, int *a7, unsigned int a8, uint64_t *a9, unsigned __int16 *a10)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  unsigned __int16 v15;
  unsigned __int16 *v16;
  int v17;
  unsigned __int16 **v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  unsigned __int16 *v22;
  int v23;
  int v24;
  int *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  int v36;
  unsigned __int16 **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 *v49;
  int v50;
  int v51;
  int *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int16 v70;
  uint64_t v71;
  _WORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int16 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v111;
  uint64_t v112;
  uint64_t v116;
  char *__s1;
  __int16 v118;
  const char *v119;

  v116 = *a9;
  __s1 = 0;
  v11 = *a10;
  v119 = 0;
  v12 = a6;
  v118 = 0;
  if (v11)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v111 = a8;
    v16 = (unsigned __int16 *)(a5 + 24);
    v17 = 1;
    while (1)
    {
      v18 = (unsigned __int16 **)(v116 + 16 * v14);
      if (*((unsigned __int16 *)v18 + 4) > 1u)
        goto LABEL_9;
      v19 = **v18;
      v118 = 0;
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(*(_QWORD *)(a1 + 48) + 184))(a2, a3, v19, 9, &v118);
      if ((v13 & 0x80000000) == 0 && v118 == 1)
      {
        v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const char **, __int16 *))(*(_QWORD *)(a1 + 48) + 176))(a2, a3, v19, 9, &v119, &v118);
        if ((v13 & 0x80000000) != 0)
        {
LABEL_67:
          heap_Free(*(_QWORD **)(a4 + 8), v116);
          return v13;
        }
      }
      if (!v119 || !strcmp(v119, "mnc!"))
      {
        v21 = 0;
        if (v12)
        {
          v22 = v16;
          while (1)
          {
            v23 = *v22;
            v22 += 20;
            if (v23 == **v18)
              break;
            if (v12 == ++v21)
            {
              LODWORD(v21) = v12;
              goto LABEL_16;
            }
          }
          LODWORD(v21) = (unsigned __int16)v21;
        }
LABEL_16:
        if (a8)
        {
          v24 = *(unsigned __int16 *)(a5 + 40 * v21 + 28);
          v25 = a7;
          v26 = v111;
          while (1)
          {
            v27 = *v25++;
            if (v27 == v24)
              break;
            if (!--v26)
              goto LABEL_20;
          }
        }
        else
        {
LABEL_20:
          if (v17 != 1)
          {
            v118 = 0;
            __s1 = 0;
            v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(*(_QWORD *)(a1 + 48) + 184))(a2, a3, v19, 19, &v118);
            v17 = 0;
            v20 = 1;
            if ((v13 & 0x80000000) == 0 && v118 == 1)
            {
              v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, __int16 *))(*(_QWORD *)(a1 + 48) + 176))(a2, a3, v19, 19, &__s1, &v118);
              if ((v13 & 0x80000000) != 0)
                return v13;
              v17 = 0;
              v20 = strcmp(__s1, "left") == 0;
            }
            goto LABEL_26;
          }
        }
        v17 = 0;
        v20 = 1;
      }
      else
      {
LABEL_9:
        v20 = 1;
        v17 = 1;
      }
LABEL_26:
      v15 += v20;
      if (v11 <= ++v14)
        goto LABEL_29;
    }
  }
  v15 = 0;
  v13 = 0;
LABEL_29:
  v28 = heap_Calloc(*(_QWORD **)(a4 + 8), v15, 16);
  if (!v28)
  {
LABEL_68:
    v13 = 2584748042;
    log_OutPublic(*(_QWORD *)(a4 + 32), (uint64_t)"FE_PW", 37000, 0, v29, v30, v31, v32, v103);
    return v13;
  }
  *a10 = v15;
  v112 = v28;
  *a9 = v28;
  if (v11)
  {
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 1;
    while (1)
    {
      v37 = (unsigned __int16 **)(v116 + 16 * v34);
      if (*((unsigned __int16 *)v37 + 4) < 2u)
      {
        v38 = **v37;
        v118 = 0;
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(*(_QWORD *)(a1 + 48) + 184))(a2, a3, v38, 9, &v118) & 0x80000000) == 0&& v118 == 1)
        {
          v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const char **, __int16 *))(*(_QWORD *)(a1 + 48) + 176))(a2, a3, v38, 9, &v119, &v118);
          if ((v39 & 0x80000000) != 0)
          {
            v13 = v39;
            goto LABEL_67;
          }
        }
        if (!v119 || !strcmp(v119, "mnc!"))
          break;
      }
      log_OutText(*(_QWORD *)(a4 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)">>> Not a PYT PW. Skip by copying pPWIn[%d] to pPWOut[%d].", v30, v31, v32, v33);
      fe_pw_copy_pw(a4, (uint64_t)v37, v112 + 16 * (unsigned __int16)v35, v40, v41, v42, v43, v44, v104);
      log_OutText(*(_QWORD *)(a4 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"Copy pPWIn[%d] to pPWOut[%d] done!", v45, v46, v47, v33);
      v13 = 0;
      ++v35;
      v36 = 1;
LABEL_63:
      v33 = ++v34;
      if ((int)v33 >= v11)
        goto LABEL_66;
    }
    v48 = 0;
    if (v12)
    {
      v49 = (unsigned __int16 *)(a5 + 24);
      while (1)
      {
        v50 = *v49;
        v49 += 20;
        if (v50 == **v37)
          break;
        if (v12 == ++v48)
        {
          LODWORD(v48) = v12;
          goto LABEL_45;
        }
      }
      LODWORD(v48) = (unsigned __int16)v48;
    }
LABEL_45:
    if (a8)
    {
      v51 = *(unsigned __int16 *)(a5 + 40 * v48 + 28);
      v53 = a8;
      v52 = a7;
      while (1)
      {
        v54 = *v52++;
        if (v54 == v51)
          break;
        if (!--v53)
          goto LABEL_49;
      }
      if (v36 != 1)
      {
        v79 = v35;
        log_OutText(*(_QWORD *)(a4 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)">>> I am a PYT PW start with Marker! Copy pPWIn[%d] to pPWOut[%d].", v30, v31, v32, v33);
LABEL_60:
        fe_pw_copy_pw(a4, (uint64_t)v37, v112 + 16 * v79, v80, v81, v82, v83, v84, v105);
        v93 = *(_QWORD *)(a4 + 32);
        goto LABEL_61;
      }
    }
    else
    {
LABEL_49:
      if (v36 != 1)
      {
        v118 = 0;
        __s1 = 0;
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(*(_QWORD *)(a1 + 48) + 184))(a2, a3, v38, 19, &v118) & 0x80000000) == 0&& v118 == 1)
        {
          v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, __int16 *))(*(_QWORD *)(a1 + 48)
                                                                                                  + 176))(a2, a3, v38, 19, &__s1, &v118);
          if ((v13 & 0x80000000) != 0)
            return v13;
          v61 = strcmp(__s1, "left");
          v62 = *(_QWORD *)(a4 + 32);
          if (v61)
          {
            log_OutText(v62, (uint64_t)"FE_PW", 5, 0, (uint64_t)">>> No space before this PYT unit. Merge pPWIn[%d] to pPWOut[%d] ...", v58, v59, v60, v33);
            log_OutText(*(_QWORD *)(a4 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"pPWIn[%d] is: ", v63, v64, v65, v33);
            pw_show_pw_0(a4, (uint64_t)v37);
            log_OutText(*(_QWORD *)(a4 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"Before merge, pPWOut[%d] is: ", v66, v67, v68, (unsigned __int16)v35 - 1);
            v69 = v112 + 16 * ((unsigned __int16)v35 - 1);
            pw_show_pw_0(a4, v69);
            v70 = *(_WORD *)(v69 + 8) + 1;
            *(_WORD *)(v69 + 8) = v70;
            v71 = heap_Realloc(*(uint64_t **)(a4 + 8), *(_QWORD *)v69, 2 * v70);
            *(_QWORD *)v69 = v71;
            if (!v71)
              goto LABEL_68;
            v72 = *v37;
            *(_WORD *)(v71 + 2 * *(unsigned __int16 *)(v69 + 8) - 2) = **v37;
            heap_Free(*(_QWORD **)(a4 + 8), (uint64_t)v72);
            log_OutText(*(_QWORD *)(a4 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"After merge, pPWOut[%d] is: ", v73, v74, v75, (unsigned __int16)v35 - 1);
            pw_show_pw_0(a4, v69);
            log_OutText(*(_QWORD *)(a4 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"Merge pPWIn[%d] to pPWOut[%d] done!", v76, v77, v78, v33);
            v36 = 0;
            goto LABEL_63;
          }
          log_OutText(v62, (uint64_t)"FE_PW", 5, 0, (uint64_t)">>> There is a space before this PYT PW. Copy pPWIn[%d] to pPWOut[%d].", v58, v59, v60, v33);
          fe_pw_copy_pw(a4, (uint64_t)v37, v112 + 16 * (unsigned __int16)v35, v94, v95, v96, v97, v98, v107);
          log_OutText(*(_QWORD *)(a4 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"Copy pPWIn[%d] to pPWOut[%d] done!", v99, v100, v101, v33);
          goto LABEL_62;
        }
        v79 = v35;
        log_OutText(*(_QWORD *)(a4 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)">>> The WORD_DCT record doesn't has field LD_W_INPUTSPACETAG. Copy pPWIn[%d] to pPWOut[%d].", v55, v56, v57, v33);
        goto LABEL_60;
      }
    }
    log_OutText(*(_QWORD *)(a4 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)">>> I am First PYT PW. Copy pPWIn[%d] to pPWOut[%d].", v30, v31, v32, v33);
    fe_pw_copy_pw(a4, (uint64_t)v37, v112 + 16 * (unsigned __int16)v35, v85, v86, v87, v88, v89, v106);
    v93 = *(_QWORD *)(a4 + 32);
LABEL_61:
    log_OutText(v93, (uint64_t)"FE_PW", 5, 0, (uint64_t)"Copy pPWIn[%d] to pPWOut[%d] done!", v90, v91, v92, v33);
LABEL_62:
    v36 = 0;
    v13 = 0;
    ++v35;
    goto LABEL_63;
  }
LABEL_66:
  if (v116)
    goto LABEL_67;
  return v13;
}

uint64_t fe_pw_copy_pw(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"Copying PW ... ", a6, a7, a8, v19);
  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"pPWIn and pPWOut is: ", v12, v13, v14, v20);
  pw_show_pw_0(a1, a2);
  *(_WORD *)(a3 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)a3 = *(_QWORD *)a2;
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 12);
  return log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"Copy PW done!", v15, v16, v17, a9);
}

const char *pw_show_pw_0(uint64_t a1, uint64_t a2)
{
  const char *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  unint64_t v9;
  int v10;

  result = (const char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 1000);
  if (result)
  {
    v8 = result;
    if (*(_WORD *)(a2 + 8))
    {
      v9 = 0;
      v10 = 0;
      do
      {
        sprintf((char *)&v8[v10], "%d-", *(unsigned __int16 *)(*(_QWORD *)a2 + 2 * v9));
        v10 = strlen(v8);
        ++v9;
      }
      while (v9 < *(unsigned __int16 *)(a2 + 8));
    }
    log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"\tPW [tids:%s, ntok:%d]", v5, v6, v7, (uint64_t)v8);
    return (const char *)heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v8);
  }
  return result;
}

uint64_t fe_pw_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 62341, 1192);
  if ((int)result >= 0)
    return result;
  else
    return 2584748040;
}

uint64_t fe_pw_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2584748033;
  result = 0;
  *a2 = &IFePw;
  return result;
}

uint64_t com_enable_cscgroup(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v5;
  uint64_t result;
  const char *v7;
  char *v8;
  _BYTE __c[11];

  *(_QWORD *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(a1 + 96))(a2, a3, "fecfg", "fepw_enable_cscgroup", &__c[3], &__c[1], __c);
  result = 0;
  if ((v5 & 0x80000000) == 0 && *(_WORD *)&__c[1])
  {
    v7 = **(const char ***)&__c[3];
    v8 = strchr(**(char ***)&__c[3], __c[0]);
    if (v8)
    {
      *v8 = 0;
      v7 = **(const char ***)&__c[3];
    }
    *a4 = strcmp(v7, "no") != 0;
    return 1;
  }
  return result;
}

uint64_t com_cscgroup_stopwords(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  int v5;
  uint64_t result;
  const char *v7;
  char *v8;
  _BYTE __c[11];

  *(_QWORD *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(a1 + 96))(a2, a3, "fecfg", "fepw_cscgroup_stopwords", &__c[3], &__c[1], __c);
  result = 0;
  if ((v5 & 0x80000000) == 0 && *(_WORD *)&__c[1])
  {
    v7 = **(const char ***)&__c[3];
    v8 = strchr(**(char ***)&__c[3], __c[0]);
    if (v8)
    {
      *v8 = 0;
      v7 = **(const char ***)&__c[3];
    }
    strcpy(a4, v7);
    return 1;
  }
  return result;
}

uint64_t com_auxiliarywords(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned __int8 *a6)
{
  uint64_t v9;
  unsigned __int16 v10;
  unsigned __int8 ChineseUTFCharNum;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  size_t v15;
  char v17;
  __int16 v18;
  const char **v19;

  v19 = 0;
  v18 = -1;
  v17 = 0;
  v9 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, const char ***, __int16 *, char *))(a2 + 96))(a3, a4, "fecfg", "fepw_auxiliarywords", &v19, &v18, &v17) & 0x80000000) == 0&& v18)
  {
    v10 = strlen(*v19);
    ChineseUTFCharNum = utf8_GetChineseUTFCharNum((uint64_t)*v19, v10);
    *a6 = ChineseUTFCharNum;
    v12 = heap_Alloc(*(_QWORD *)(a1 + 8), 8 * ChineseUTFCharNum);
    *a5 = v12;
    if (v12 && *a6)
    {
      v13 = 0;
      v14 = *v19;
      while (1)
      {
        v15 = (unsigned __int16)utf8_determineUTF8CharLength(*(unsigned __int8 *)v14);
        v9 = 1;
        *(_QWORD *)(*a5 + 8 * v13) = heap_Calloc(*(_QWORD **)(a1 + 8), 1, v15 + 1);
        if (!*a5)
          break;
        memcpy(*(void **)(*a5 + 8 * v13), v14, v15);
        *(_BYTE *)(*(_QWORD *)(*a5 + 8 * v13) + v15) = 0;
        v14 += v15;
        if (++v13 >= (unint64_t)*a6)
          return 1;
      }
    }
    else
    {
      return 1;
    }
  }
  return v9;
}

uint64_t fe_pw_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  v7 = 0;
  if (!a3)
    return 2584748039;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t fe_pw_ClassClose()
{
  return 0;
}

uint64_t fe_pw_Process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v30;
  uint64_t v31;
  int v32;
  unsigned __int16 v33;
  unsigned __int16 v34;
  int v35;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int16 v47;
  int v48;
  int v49;
  unsigned int v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int word_separating_markers_0;
  unsigned __int16 v67;
  char *v69;
  _WORD *v70;
  char *v71;
  int v72;
  char *v73;
  unsigned int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int *v93;
  unsigned int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t *v106;
  int v107;
  size_t v108;
  size_t v109;
  size_t v110;
  uint64_t v111;
  char *v112;
  int v113;
  char *i;
  char *v115;
  unsigned __int16 **v116;
  __int16 v117;
  char *v118;
  __int16 v119;
  __int16 v120;
  unsigned __int16 v121;
  int v122;
  uint64_t v123;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int *v128;
  int v129;
  unsigned int v130;
  int v131;
  unsigned __int8 v132;
  unint64_t j;
  uint64_t v134;
  _BYTE *v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  size_t v140;
  size_t v141;
  const char *v142;
  size_t v143;
  __int16 v145;
  int v146;
  int v147;
  char *v148;
  __int16 v149;
  __int16 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  _WORD *v156;
  int v157;
  unsigned __int16 __s;
  char *__sa;
  char *v160;
  char *v161;
  unsigned __int16 v162;
  unint64_t v163;
  uint64_t v164;
  _BOOL4 v165;
  int v166;
  int v167;
  int v168;
  char __s1[4];
  char v170;
  char *__src;
  char *v172;
  _DWORD v173[256];
  unsigned int v174;
  const char *v175;
  int v176;
  char *v177;
  unsigned int v178;
  int *v179;
  _DWORD v180[2];
  char *v181;
  int v182;
  const char *v183;
  char *v184;
  char *v185;
  size_t v186;
  char *v187;
  size_t v188;
  char *v189;
  size_t v190;
  char *v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t *v195;
  unsigned int v196;
  unsigned __int16 v197;
  int v198;
  int v199;
  int v200;
  char v201[8];
  uint64_t v202;

  v202 = *MEMORY[0x1E0C80C00];
  v199 = 0;
  v200 = 0;
  v198 = 0;
  v197 = 0;
  v196 = 0;
  v194 = 0;
  v195 = 0;
  v193 = 0;
  v191 = 0;
  v192 = 0;
  v189 = 0;
  v190 = 1024;
  v187 = 0;
  v188 = 64;
  v185 = 0;
  v186 = 64;
  v183 = 0;
  v184 = &byte_1DEBD87CE;
  v182 = 0;
  v181 = 0;
  BYTE2(v180[1]) = 0;
  strcpy((char *)v180, "latin");
  v179 = 0;
  v178 = 0;
  v177 = 0;
  v176 = 0;
  v175 = 0;
  v172 = 0;
  bzero(v173, 0x404uLL);
  *a5 = 1;
  if (*(_DWORD *)(a1 + 1180))
  {
    v12 = 0;
    v13 = 0;
    LODWORD(v14) = 0;
    goto LABEL_3;
  }
  if (!*(_QWORD *)(a1 + 56) && !*(_QWORD *)(a1 + 88))
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"[FE_PROSODY_WORD]: NO DATA,LEAVING", v9, v10, v11, v151);
    return 0;
  }
  v30 = *(_QWORD *)(a1 + 72);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"[FE_PROSODY_WORD]: Entering", v9, v10, v11, v151);
  v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 48) + 104))(a3, a4, 1, 0, (char *)&v200 + 2);
  if ((v31 & 0x80000000) != 0)
    return v31;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, int *))(*(_QWORD *)(a1 + 48) + 184))(a3, a4, HIWORD(v200), 0, &v182);
  if ((v14 & 0x80000000) == 0 && (unsigned __int16)v182 == 1)
  {
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t *, int *))(*(_QWORD *)(a1 + 48) + 176))(a3, a4, HIWORD(v200), 0, &v192, &v199);
    if ((v14 & 0x80000000) == 0 && (unsigned __int16)v199 >= 2u)
    {
      *(_WORD *)v201 = 0;
      LODWORD(__src) = 0;
      *(_WORD *)__s1 = 0;
      LOWORD(v168) = 0;
      LOWORD(v167) = 0;
      v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 48) + 104))(a3, a4, 2, HIWORD(v200), v201);
      LODWORD(v14) = v32;
      if ((v32 & 0x80000000) == 0)
      {
        v33 = *(_WORD *)v201;
        if (*(_WORD *)v201)
        {
          v34 = 0;
          while (1)
          {
            v35 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, char **, char *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, v33, 0, 1, &__src, __s1);
            if (v35 < 0)
              break;
            if (__src > 0xA || ((1 << (char)__src) & 0x610) == 0)
            {
              v40 = 0;
              v39 = *(unsigned __int16 *)v201;
            }
            else
            {
              v35 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, *(unsigned __int16 *)v201, 1, 1, &v168, __s1);
              if (v35 < 0)
                break;
              v35 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, *(unsigned __int16 *)v201, 2, 1, &v167, __s1);
              if (v35 < 0)
                break;
              v38 = (unsigned __int16)v168 > v34 || (unsigned __int16)v167 > v34;
              v39 = *(unsigned __int16 *)v201;
              if (v38)
              {
                v34 = v167;
                v40 = 0;
              }
              else
              {
                v40 = *(unsigned __int16 *)v201;
              }
            }
            v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)(a1 + 48) + 120))(a3, a4, v39, v201);
            if (v35 < 0)
              break;
            if ((_DWORD)v40)
            {
              log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"%s", v41, v42, v43, (uint64_t)"Dropping nested word record");
              v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 48) + 192))(a3, a4, v40);
              if (v35 < 0)
                break;
            }
            v33 = *(_WORD *)v201;
            if (!*(_WORD *)v201)
              goto LABEL_80;
          }
          LODWORD(v14) = v35;
LABEL_165:
          v12 = 0;
          v13 = 0;
          goto LABEL_3;
        }
      }
      if (v32 < 0)
        goto LABEL_165;
LABEL_80:
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)(a1 + 48) + 104))(a3, a4, 2, HIWORD(v200), &v200);
      if ((v14 & 0x80000000) != 0)
        goto LABEL_165;
      v47 = v200;
      if (!(_WORD)v200)
        goto LABEL_166;
      v162 = 0;
      v13 = 0;
      v48 = 0;
      do
      {
        v49 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 48) + 120))(a3, a4, v47, (char *)&v199 + 2);
        if (v49 < 0)
        {
          LODWORD(v14) = v49;
LABEL_168:
          v12 = 0;
          goto LABEL_3;
        }
        v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, int *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v200, 0, 1, &v196, &v199);
        if ((v14 & 0x80000000) != 0)
          goto LABEL_168;
        v50 = v196;
        if (v196 <= 0xA && ((1 << v196) & 0x610) != 0)
        {
          v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v200, 1, 1, &v198, &v199);
          if ((v31 & 0x80000000) != 0)
            return v31;
          v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v200, 2, 1, &v197, &v199);
          if ((v14 & 0x80000000) != 0)
            return v14;
          if (!(_WORD)v198 || v48 + 1 == (unsigned __int16)v198 && v197 > (unsigned __int16)v198)
          {
            ++v13;
            v48 = v197;
          }
          v50 = v196;
        }
        if (v50 == 5)
        {
          v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, int *))(*(_QWORD *)(a1 + 48) + 176))(a3, a4, (unsigned __int16)v200, 4, &v175, &v199);
          if ((v14 & 0x80000000) != 0)
            return v14;
          if ((_WORD)v199)
          {
            if (!strncmp(v175, "prompt", (unsigned __int16)v199))
            {
              ++v162;
              if (v174 <= 0x7F)
              {
                v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v200, 1, 1, &v198, &v199);
                if ((v31 & 0x80000000) != 0)
                  return v31;
                v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v200, 2, 1, &v197, &v199);
                if ((v14 & 0x80000000) != 0)
                  return v14;
                v173[v174] = (unsigned __int16)v198;
                v173[v174++ + 128] = v197;
              }
            }
          }
        }
        v47 = HIWORD(v199);
        LOWORD(v200) = HIWORD(v199);
      }
      while (HIWORD(v199));
      if (v162 >= 0x81u)
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"Warning: the prompt number %d is large than the threshold %d, so the last %d promp not used to guide grouping", v44, v45, v46, v162);
      if (!v13)
      {
LABEL_166:
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"Warning: no lexicon word", v44, v45, v46, v152);
        return v14;
      }
      v52 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), v13, 40);
      if (!v52)
      {
        v14 = 2584748042;
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"FE_PW", 37000, 0, v53, v54, v55, v56, v152);
        return v14;
      }
      v12 = v52;
      v57 = v48;
      v58 = 0;
      while (1)
      {
        v59 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), 128, 1);
        *(_QWORD *)(v12 + v58) = v59;
        v64 = *(_QWORD *)(a1 + 24);
        if (!v59)
          break;
        v65 = heap_Calloc(*(_QWORD **)(v64 + 8), 64, 1);
        *(_QWORD *)(v12 + v58 + 8) = v65;
        if (!v65)
        {
LABEL_329:
          LODWORD(v14) = -1710219254;
LABEL_330:
          v64 = *(_QWORD *)(a1 + 24);
          goto LABEL_331;
        }
        v58 += 40;
        if (40 * v13 == v58)
        {
          word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)(a1 + 48) + 104))(a3, a4, 2, HIWORD(v200), &v200);
          if (word_separating_markers_0 < 0)
            goto LABEL_332;
          v163 = v30;
          LODWORD(v14) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t *, int *))(*(_QWORD *)(a1 + 48) + 176))(a3, a4, HIWORD(v200), 0, &v192, &v199);
          if ((v14 & 0x80000000) != 0 || (unsigned __int16)v199 < 2u)
            goto LABEL_3;
          v67 = v200;
          if ((_WORD)v200)
          {
            __s = 0;
            LODWORD(v14) = -1710219254;
            do
            {
              word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 48) + 120))(a3, a4, v67, (char *)&v199 + 2);
              if (word_separating_markers_0 < 0)
                goto LABEL_332;
              word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, int *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v200, 0, 1, &v196, &v199);
              if (word_separating_markers_0 < 0)
                goto LABEL_332;
              if (v196 <= 0xA && ((1 << v196) & 0x610) != 0)
              {
                word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v200, 1, 1, &v198, &v199);
                if (word_separating_markers_0 < 0)
                  goto LABEL_332;
                word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v200, 2, 1, &v197, &v199);
                if (word_separating_markers_0 < 0)
                  goto LABEL_332;
                if (!(_WORD)v198 || v57 + 1 == (unsigned __int16)v198 && v197 > (unsigned __int16)v198)
                {
                  word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a1 + 48) + 176))(a3, a4, (unsigned __int16)v200, 3, &v185, &v199);
                  if (word_separating_markers_0 < 0)
                    goto LABEL_332;
                  v69 = v185;
                  v70 = (_WORD *)(v12 + 40 * __s + 26);
                  if (strstr(v185, "comma"))
                  {
                    *v70 = 11;
                  }
                  else
                  {
                    *v70 = 1;
                    v181 = v69;
                    v71 = strchr(v69, 46);
                    v181 = v71;
                    if (v71)
                    {
                      v72 = 1;
                      do
                      {
                        v73 = v71 + 1;
                        v181 = v73;
                        *v70 = ++v72;
                        v71 = strchr(v73, 46);
                        v181 = v71;
                      }
                      while (v71);
                    }
                  }
                  v74 = (unsigned __int16)v198;
                  if ((unsigned __int16)v198 >= v197)
                  {
                    v75 = 0;
                  }
                  else
                  {
                    v75 = 0;
                    do
                    {
                      if (!utf8_IsChineseLetter((const char *)(v192 + v74)))
                        v75 = 1;
                      v74 += utf8_determineUTF8CharLength(*(unsigned __int8 *)(v192 + v74));
                    }
                    while (v74 < v197);
                  }
                  v76 = v12 + 40 * __s;
                  *(_WORD *)(v76 + 24) = v200;
                  word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a1 + 48) + 176))(a3, a4, (unsigned __int16)v200, 14, &v184, &v199);
                  if (word_separating_markers_0 < 0)
                    goto LABEL_332;
                  if (!hlp_NLUStrFind(v184, "POS", (uint64_t *)&v183, (unsigned __int16 *)&v182 + 1))
                  {
                    LODWORD(v14) = -1710219264;
                    goto LABEL_3;
                  }
                  v77 = v12 + 40 * __s;
                  **(_BYTE **)(v77 + 8) = 0;
                  if (v75)
                    *(_DWORD *)(*(_QWORD *)(v77 + 8) + strlen(*(const char **)(v77 + 8))) = 7237486;
                  else
                    strncat(*(char **)(v77 + 8), v183, HIWORD(v182));
                  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(*(_QWORD *)(a1 + 48)
                                                                                            + 184))(a3, a4, (unsigned __int16)v200, 9, &v199) & 0x80000000) == 0&& (unsigned __int16)v199 == 1)
                  {
                    word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *))(*(_QWORD *)(a1 + 48) + 176))(a3, a4, (unsigned __int16)v200, 9, v12 + 40 * __s + 16, &v199);
                    if (word_separating_markers_0 < 0)
                      goto LABEL_332;
                  }
                  v78 = v197;
                  v79 = (unsigned __int16)v198;
                  v80 = v197 - (unsigned __int16)v198;
                  v81 = *(void **)v76;
                  if (v80 >= 128)
                  {
                    v82 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 24) + 8), *(_QWORD *)v76, (v80 + 1));
                    *(_QWORD *)v76 = v82;
                    if (!v82)
                      goto LABEL_330;
                    v81 = (void *)v82;
                    v79 = (unsigned __int16)v198;
                    v78 = v197;
                  }
                  memcpy(v81, (const void *)(v192 + v79), v78 - v79);
                  *(_BYTE *)(*(_QWORD *)v76 - (unsigned __int16)v198 + v197) = 0;
                  v83 = v12 + 40 * __s;
                  v84 = v197;
                  *(_DWORD *)(v83 + 28) = (unsigned __int16)v198;
                  *(_DWORD *)(v83 + 32) = v84;
                  v57 = v84;
                  ++__s;
                }
              }
              v67 = HIWORD(v199);
              LOWORD(v200) = HIWORD(v199);
            }
            while (HIWORD(v199));
          }
          word_separating_markers_0 = pw_get_word_separating_markers_0(a1, a3, a4, HIWORD(v200), (uint64_t *)&v179, &v178);
          if (word_separating_markers_0 < 0)
            goto LABEL_332;
          v88 = v178;
          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"Info: Valid Word Seperator Markers Count:%d", v85, v86, v87, v178);
          if (v88)
          {
            v92 = 0;
            v93 = v179;
            do
              log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"Info: Valid Word Seperator Markers POS:%d", v89, v90, v91, v93[(unsigned __int16)v92++]);
            while (v88 > (unsigned __int16)v92);
          }
          v94 = v88;
          v95 = *(_QWORD *)(a1 + 88);
          if (v95)
          {
            LODWORD(__src) = 1;
            LODWORD(v14) = pw_crf_process(*(_QWORD *)(a1 + 24), v95, *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), v12, v13, &v194, (unsigned __int16 *)&v193, &__src);
            if ((v14 & 0x80000000) != 0 || (_DWORD)__src)
              goto LABEL_3;
LABEL_172:
            if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40), (uint64_t)"spaceInPYT", &v177) & 0x80000000) != 0
              || LH_stricmp(v177, "yes")
              || (v15 = v179,
                  v96 = fe_pw_PYT_process(a1, a3, a4, *(_QWORD *)(a1 + 24), v12, v13, v179, v94, &v194, (unsigned __int16 *)&v193), (v96 & 0x80000000) == 0))
            {
              if (*(_DWORD *)(a1 + 152) == 1)
              {
                word_separating_markers_0 = pw_group_csc_0(*(_QWORD *)(a1 + 24), (uint64_t)v173, v12, v13, (char *)(a1 + 156), v194, (unsigned __int16)v193, (uint64_t *)&v195, (_WORD *)&v193 + 1);
                if (word_separating_markers_0 < 0)
                  goto LABEL_332;
              }
              else
              {
                HIWORD(v193) = v193;
                v97 = v194;
                v194 = 0;
                v195 = (uint64_t *)v97;
                LOWORD(v193) = 0;
              }
              v98 = *(_QWORD *)(a1 + 1184);
              if (v98)
              {
                word_separating_markers_0 = pw_igtree_process_0(*(_QWORD *)(a1 + 24), v12, (uint64_t *)&v195, (unsigned __int16 *)&v193 + 1, v13, v98);
                if (word_separating_markers_0 < 0)
                {
LABEL_332:
                  LODWORD(v14) = word_separating_markers_0;
                  goto LABEL_3;
                }
              }
              LODWORD(v14) = pw_respect_word_separating_markers_0(a1, a3, a4, HIWORD(v200), (uint64_t *)&v195, (unsigned __int16 *)&v193 + 1);
              if ((v14 & 0x80000000) == 0)
              {
                v99 = (const char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), 1024, 1);
                v191 = (char *)v99;
                if (v99)
                {
                  v100 = (char *)v99;
                  v189 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), 64, 1);
                  if (v189)
                  {
                    v187 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), 64, 1);
                    if (v187)
                    {
                      v104 = HIWORD(v193);
                      if (HIWORD(v193))
                      {
                        v105 = 0;
                        do
                        {
                          v153 = (uint64_t)v195;
                          v154 = v105;
                          v106 = &v195[2 * v105];
                          v156 = v106 + 1;
                          if (*((_WORD *)v106 + 4) != 1)
                          {
                            if (!*((_WORD *)v106 + 4))
                            {
                              LODWORD(v14) = -1710219254;
                              log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"Error: the prosody word should has at least one lexical word", v101, v102, v103, v152);
                              goto LABEL_3;
                            }
                            __src = 0;
                            bzero(v100, v190);
                            bzero(v189, v188);
                            bzero(v187, v186);
                            if (*v156)
                            {
                              v107 = 0;
                              LODWORD(v14) = -1710219254;
                              __sa = v172;
                              v157 = 1;
                              v160 = (char *)(v153 + 16 * v154);
                              v164 = 0;
                              while (1)
                              {
                                word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, *(unsigned __int16 *)(*(_QWORD *)v160 + 2 * v164), 1, 1, &v198, &v199);
                                if (word_separating_markers_0 < 0)
                                  goto LABEL_332;
                                word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, *(unsigned __int16 *)(*(_QWORD *)v160 + 2 * v164), 2, 1, &v197, &v199);
                                if (word_separating_markers_0 < 0)
                                  goto LABEL_332;
                                word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a1 + 48) + 176))(a3, a4, *(unsigned __int16 *)(*(_QWORD *)v160 + 2 * v164), 3, &v185, &v199);
                                if (word_separating_markers_0 < 0)
                                  goto LABEL_332;
                                word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a1 + 48) + 176))(a3, a4, *(unsigned __int16 *)(*(_QWORD *)v160 + 2 * v164), 14, &v184, &v199);
                                if (word_separating_markers_0 < 0)
                                  goto LABEL_332;
                                v155 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 8);
                                v108 = strlen(v184);
                                v109 = v108;
                                if (__sa)
                                {
                                  v110 = strlen(__sa);
                                  __sa = (char *)heap_Realloc(v155, (uint64_t)__sa, v109 + v110 + 2);
                                  if (!__sa)
                                    goto LABEL_3;
                                  v172 = __sa;
                                  *(_WORD *)&__sa[strlen(__sa)] = 59;
                                  strcat(__sa, v184);
                                }
                                else
                                {
                                  v172 = (char *)heap_Alloc((uint64_t)v155, v108 + 1);
                                  __sa = v172;
                                  if (!v172)
                                    goto LABEL_3;
                                  strcpy(v172, v184);
                                }
                                if (v157)
                                {
                                  v157 = 0;
                                  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(*(_QWORD *)(a1 + 48) + 184))(a3, a4, *(unsigned __int16 *)(*(_QWORD *)v160 + 2 * v164), 10, &v182) & 0x80000000) == 0&& (unsigned __int16)v182 == 1)
                                  {
                                    word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a1 + 48) + 176))(a3, a4, *(unsigned __int16 *)(*(_QWORD *)v160 + 2 * v164), 10, &__src, &v199);
                                    if (word_separating_markers_0 < 0)
                                      goto LABEL_332;
                                    v157 = 1;
                                  }
                                }
                                else
                                {
                                  v157 = 0;
                                }
                                if (v164)
                                {
                                  *(_BYTE *)((unsigned __int16)v198 + v192 - 1) = 45;
                                  cstdlib_safe_strcat(*(_QWORD *)(a1 + 24), (const char **)&v191, ".", &v190, 0x400uLL);
                                  cstdlib_safe_strcat(*(_QWORD *)(a1 + 24), (const char **)&v189, "-", &v188, 0x40uLL);
                                  v111 = *(unsigned __int16 *)(*(_QWORD *)v160 + 2 * v164);
                                  v181 = v185;
                                  v112 = strstr(v185, "{SEP");
                                  v181 = v112;
                                  if (v112)
                                  {
                                    v181 = v112 + 4;
                                    v112[4] += v107;
                                  }
                                }
                                else
                                {
                                  v111 = 0;
                                }
                                cstdlib_safe_strcat(*(_QWORD *)(a1 + 24), (const char **)&v191, v185, &v190, 0x400uLL);
                                if (hlp_NLUStrFind(v184, "POS", (uint64_t *)&v183, (unsigned __int16 *)&v182 + 1))
                                  cstdlib_safe_strncat(*(_QWORD *)(a1 + 24), (const char **)&v189, v183, HIWORD(v182), &v188);
                                v113 = v157;
                                if (!__src)
                                  v113 = 0;
                                if (v113 == 1)
                                  cstdlib_safe_strcat(*(_QWORD *)(a1 + 24), (const char **)&v187, __src, &v186, 0x40uLL);
                                for (i = v185; ; i = v115 + 1)
                                {
                                  v115 = strchr(i, 46);
                                  v181 = v115;
                                  if (!v115)
                                  {
                                    if (!i)
                                      break;
                                    v115 = strstr(i, "{SEP");
                                    v181 = v115;
                                    if (!v115)
                                      break;
                                  }
                                  ++v107;
                                }
                                if ((_DWORD)v111)
                                {
                                  word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 48) + 192))(a3, a4, v111);
                                  if (word_separating_markers_0 < 0)
                                    goto LABEL_332;
                                }
                                ++v107;
                                if (++v164 >= (unint64_t)(unsigned __int16)*v156)
                                  goto LABEL_226;
                              }
                            }
                            v157 = 1;
LABEL_226:
                            word_separating_markers_0 = pw_merge_NLU_0(*(_QWORD *)(a1 + 24), &v172);
                            if (word_separating_markers_0 < 0)
                              goto LABEL_332;
                            if (*(_DWORD *)(a1 + 152) == 1)
                              pw_split_csc_pw_0(*(char **)(a1 + 24), v153 + 16 * v154, (const char **)&v191, (uint64_t *)&v190);
                            v116 = (unsigned __int16 **)(v153 + 16 * v154);
                            word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(*(_QWORD *)(a1 + 48) + 160))(a3, a4, **v116, 2, 1, &v197, (char *)&v198 + 2);
                            if (word_separating_markers_0 < 0)
                              goto LABEL_332;
                            v100 = v191;
                            v117 = strlen(v191);
                            word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, char *))(*(_QWORD *)(a1 + 48) + 160))(a3, a4, **v116, 3, (unsigned __int16)(v117 + 1), v191, (char *)&v198 + 2);
                            if (word_separating_markers_0 < 0)
                              goto LABEL_332;
                            v118 = v172;
                            hlp_NLUStrRemoveKeyVal(v172, "POS");
                            hlp_NLUStrSet(v118, "POS", v189);
                            v119 = strlen(v118);
                            word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, char *))(*(_QWORD *)(a1 + 48) + 160))(a3, a4, **v116, 14, (unsigned __int16)(v119 + 1), v118, (char *)&v198 + 2);
                            v184 = &byte_1DEBD87CE;
                            if (word_separating_markers_0 < 0)
                              goto LABEL_332;
                            if (v118)
                            {
                              heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), (uint64_t)v118);
                              v172 = 0;
                            }
                            if (v157)
                            {
                              v120 = strlen(v187);
                              word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, char *))(*(_QWORD *)(a1 + 48) + 160))(a3, a4, **v116, 10, (unsigned __int16)(v120 + 1), v187, (char *)&v198 + 2);
                              if (word_separating_markers_0 < 0)
                                goto LABEL_332;
                            }
                            v104 = HIWORD(v193);
                          }
                          v105 = v154 + 1;
                        }
                        while ((int)v154 + 1 < v104);
                      }
                      LODWORD(v14) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)(a1 + 48) + 104))(a3, a4, 2, HIWORD(v200), &v200);
                      if ((v14 & 0x80000000) == 0)
                      {
                        bzero(v100, v190);
                        v161 = v189;
                        bzero(v189, v188);
                        bzero(v187, v186);
                        HIWORD(v199) = 0;
                        v121 = v200;
                        if ((_WORD)v200)
                        {
                          v122 = 0;
                          LOWORD(v123) = 0;
                          while (1)
                          {
                            word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 48) + 120))(a3, a4, v121, (char *)&v199 + 2);
                            if (word_separating_markers_0 < 0)
                              goto LABEL_332;
                            LODWORD(v14) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, int *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v200, 0, 1, &v196, &v199);
                            if ((v14 & 0x80000000) != 0)
                              goto LABEL_3;
                            if (v196 <= 0xA && ((1 << v196) & 0x610) != 0)
                            {
                              word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v200, 1, 1, &v198, &v199);
                              if (word_separating_markers_0 < 0)
                                goto LABEL_332;
                              LODWORD(v14) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v200, 2, 1, &v197, &v199);
                              if ((v14 & 0x80000000) != 0)
                                goto LABEL_3;
                              if (!(_WORD)v198
                                || v122 + 1 == (unsigned __int16)v198 && v197 > (unsigned __int16)v198)
                              {
                                break;
                              }
                            }
LABEL_318:
                            v121 = HIWORD(v199);
                            LOWORD(v200) = HIWORD(v199);
                            if (!HIWORD(v199))
                              goto LABEL_3;
                          }
                          __src = 0;
                          word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a1 + 48) + 176))(a3, a4, (unsigned __int16)v200, 3, &v185, &v199);
                          if (word_separating_markers_0 < 0)
                            goto LABEL_332;
                          LODWORD(v14) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a1 + 48) + 176))(a3, a4, (unsigned __int16)v200, 14, &v184, &v199);
                          if ((v14 & 0x80000000) != 0)
                            goto LABEL_3;
                          if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(*(_QWORD *)(a1 + 48) + 184))(a3, a4, (unsigned __int16)v200, 10, &v182) & 0x80000000) == 0&& (unsigned __int16)v182 == 1)
                          {
                            LODWORD(v14) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a1 + 48) + 176))(a3, a4, (unsigned __int16)v200, 10, &__src, &v199);
                            if ((v14 & 0x80000000) != 0)
                              goto LABEL_3;
                          }
                          v125 = v197;
                          if (v197 - (unsigned __int16)v198 > 5)
                          {
                            v165 = 0;
                            goto LABEL_278;
                          }
                          *(_QWORD *)v201 = 0;
                          v170 = 0;
                          *(_DWORD *)__s1 = 0;
                          v126 = v197 - (unint64_t)(unsigned __int16)v198;
                          __memcpy_chk();
                          v201[v126] = 0;
                          if (utf8_IsChineseLetter(v201))
                          {
                            v127 = v178;
                            if (v178)
                            {
                              v128 = v179;
                              do
                              {
                                v129 = *v128++;
                                if (v129 == (unsigned __int16)v198)
                                  goto LABEL_275;
                              }
                              while (--v127);
                            }
                            if (!strstr(v185, "11") || !utf8_IsChineseLetter((const char *)&v176))
                            {
                              v168 = 0;
                              v130 = strlen(v201);
                              v166 = 0;
                              v167 = 0;
                              utf8_Utf8ToUtf32_Tolerant((uint64_t)v201, v130, (uint64_t)&v168, 1u, &v167);
                              v131 = v167;
                              if (v130 <= 3)
                                v131 = 0;
                              utf8_Utf32ToUtf8((uint64_t)&v168, 1, (uint64_t)__s1, v130 - v131, &v166);
                              __s1[v166] = 0;
                              v132 = *(_BYTE *)(a1 + 120);
                              if (v132)
                              {
                                for (j = 0; j < v132; ++j)
                                {
                                  if (!strcmp(__s1, *(const char **)(*(_QWORD *)(a1 + 112) + 8 * j)))
                                  {
                                    if (utf8_IsChineseLetter((const char *)&v176))
                                      goto LABEL_266;
                                    v132 = *(_BYTE *)(a1 + 120);
                                  }
                                }
                              }
                              goto LABEL_275;
                            }
LABEL_266:
                            v165 = 1;
                          }
                          else
                          {
LABEL_275:
                            v165 = 0;
                          }
                          v125 = v197;
                          v134 = (unsigned __int16)v198;
                          if (v197 - (unsigned __int16)v198 > 2)
                          {
LABEL_278:
                            v136 = *(_BYTE *)(v192 + v125 - 1);
                            LOWORD(v176) = *(_WORD *)(v192 + v125 - 3);
                            BYTE2(v176) = v136;
                            v135 = (char *)&v176 + 3;
                          }
                          else
                          {
                            __memcpy_chk();
                            v135 = (char *)&v176 + v125 - v134;
                          }
                          *v135 = 0;
                          if (v165)
                          {
                            if ((_WORD)v123)
                            {
                              *(_DWORD *)v201 = 0;
                              LODWORD(v14) = pw_check_if_glue_forbidden_0(a1, a3, a4, HIWORD(v200), (unsigned __int16)v123, (unsigned __int16)v200, (int *)v201);
                              v165 = *(_DWORD *)v201 == 0;
                              if ((v14 & 0x80000000) != 0)
                                goto LABEL_3;
                            }
                          }
                          hlp_NLUStrFind(v184, "POS", (uint64_t *)&v183, (unsigned __int16 *)&v182 + 1);
                          if (__src && (v140 = strlen(v187), v140 + strlen(__src) + 1 >= v186)
                            || v183 && (v141 = strlen(v161), v141 + strlen(v183) + 2 >= v188)
                            || (v142 = v185) != 0 && (v143 = strlen(v191), v143 + strlen(v185) + 2 >= v190))
                          {
                            log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"skip the merging due to the length limit of prosodic word", v137, v138, v139, v152);
                            v142 = v185;
                          }
                          else if (v165 && (_WORD)v123 && (v180[0] != 1769234796 || LOWORD(v180[1]) != 110))
                          {
                            log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"merge special auxiliary word and neutral tone cases", v137, v138, v139, v152);
                            *(_BYTE *)((unsigned __int16)v198 + v192 - 1) = 45;
                            cstdlib_safe_strcat(*(_QWORD *)(a1 + 24), (const char **)&v191, ".", &v190, 0x400uLL);
                            if (v185)
                              cstdlib_safe_strcat(*(_QWORD *)(a1 + 24), (const char **)&v191, v185, &v190, 0x400uLL);
                            if (HIWORD(v182))
                            {
                              cstdlib_safe_strcat(*(_QWORD *)(a1 + 24), (const char **)&v189, "-", &v188, 0x40uLL);
                              if (v183)
                                cstdlib_safe_strncat(*(_QWORD *)(a1 + 24), (const char **)&v189, v183, HIWORD(v182), &v188);
                            }
                            if (__src && *v187)
                              cstdlib_safe_strcat(*(_QWORD *)(a1 + 24), (const char **)&v187, __src, &v186, 0x40uLL);
                            else
                              *v187 = 0;
                            word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 48) + 192))(a3, a4, (unsigned __int16)v200);
                            if (word_separating_markers_0 < 0)
                              goto LABEL_332;
                            word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(*(_QWORD *)(a1 + 48) + 160))(a3, a4, (unsigned __int16)v123, 2, 1, &v197, (char *)&v198 + 2);
                            if (word_separating_markers_0 < 0)
                              goto LABEL_332;
                            v145 = strlen(v191);
                            word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, char *))(*(_QWORD *)(a1 + 48) + 160))(a3, a4, (unsigned __int16)v123, 3, (unsigned __int16)(v145 + 1), v191, (char *)&v198 + 2);
                            if (word_separating_markers_0 < 0)
                              goto LABEL_332;
                            v161 = v189;
                            v146 = strlen(v189);
                            v147 = strlen(v184);
                            v148 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), 1, (v146 + v147 + 6));
                            if (!v148)
                              goto LABEL_329;
                            v184 = strcpy(v148, v184);
                            hlp_NLUStrSet(v184, "POS", v161);
                            v149 = strlen(v184);
                            LODWORD(v14) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, char *))(*(_QWORD *)(a1 + 48) + 160))(a3, a4, (unsigned __int16)v123, 14, (unsigned __int16)(v149 + 1), v184, (char *)&v198 + 2);
                            heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), (uint64_t)v184);
                            v184 = &byte_1DEBD87CE;
                            if ((v14 & 0x80000000) != 0)
                              goto LABEL_3;
                            if (*v187)
                            {
                              v150 = strlen(v187);
                              LODWORD(v14) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, char *))(*(_QWORD *)(a1 + 48) + 160))(a3, a4, (unsigned __int16)v123, 10, (unsigned __int16)(v150 + 1), v187, (char *)&v198 + 2);
                              if ((v14 & 0x80000000) != 0)
                                goto LABEL_3;
                            }
                            goto LABEL_317;
                          }
                          if (v142)
                            strcpy(v191, v142);
                          *v161 = 0;
                          if (HIWORD(v182) && v183)
                            strncat(v161, v183, HIWORD(v182));
                          if (__src)
                            strcpy(v187, __src);
                          else
                            *v187 = 0;
                          v123 = (unsigned __int16)v200;
                          if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 48) + 184))(a3, a4) & 0x80000000) != 0
                            || (unsigned __int16)v199 != 1)
                          {
                            strcpy((char *)v180, "latin");
                          }
                          else
                          {
                            LODWORD(v14) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, int *))(*(_QWORD *)(a1 + 48) + 176))(a3, a4, v123, 9, &v181, &v199);
                            if ((v14 & 0x80000000) != 0 || strlen(v181) > 6)
                              goto LABEL_3;
                            __strcpy_chk();
                          }
LABEL_317:
                          v122 = v197;
                          goto LABEL_318;
                        }
                      }
                    }
                  }
                }
              }
LABEL_3:
              v15 = v179;
              if (v179)
LABEL_4:
                heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), (uint64_t)v15);
LABEL_5:
              if (v12)
              {
                if (v13)
                {
                  v16 = v13;
                  v17 = v13;
                  v18 = (uint64_t *)v12;
                  do
                  {
                    if (*v18)
                      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), *v18);
                    v18 += 5;
                    --v17;
                  }
                  while (v17);
                  v19 = (uint64_t *)(v12 + 8);
                  do
                  {
                    if (*v19)
                      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), *v19);
                    v19 += 5;
                    --v16;
                  }
                  while (v16);
                }
                heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), v12);
              }
              v20 = (uint64_t)v195;
              if (v195)
              {
                v21 = HIWORD(v193);
                if (HIWORD(v193))
                {
                  v22 = v195;
                  do
                  {
                    if (*v22)
                    {
                      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), *v22);
                      *v22 = 0;
                    }
                    v22 += 2;
                    --v21;
                  }
                  while (v21);
                }
                heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), v20);
              }
              v23 = v194;
              if (v194)
              {
                v24 = (unsigned __int16)v193;
                if ((_WORD)v193)
                {
                  v25 = 0;
                  v26 = 0;
                  do
                  {
                    v27 = *(_QWORD *)(v194 + v25);
                    if (v27)
                    {
                      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), v27);
                      *(_QWORD *)(v194 + v25) = 0;
                      v24 = (unsigned __int16)v193;
                    }
                    ++v26;
                    v25 += 16;
                  }
                  while (v26 < v24);
                  v23 = v194;
                }
                heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), v23);
                v194 = 0;
              }
              if (v172)
                heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), (uint64_t)v172);
              if (v191)
                heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), (uint64_t)v191);
              if (v189)
                heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), (uint64_t)v189);
              if (v187)
                heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), (uint64_t)v187);
              if ((_WORD)v193)
                v28 = 0;
              else
                v28 = (_DWORD)v14 == -1710219256;
              if (v28)
                return 0;
              else
                return v14;
            }
          }
          else
          {
            v15 = v179;
            v96 = pw_dag_process(*(_QWORD *)(a1 + 24), v163, *(_DWORD *)(a1 + 80), *(unsigned __int16 *)(a1 + 96), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), (uint64_t)v173, v12, v13, (unsigned int *)v179, v88, &v194, (unsigned __int16 *)&v193);
            if ((v96 & 0x80000000) == 0)
              goto LABEL_172;
          }
          LODWORD(v14) = v96;
          if (v15)
            goto LABEL_4;
          goto LABEL_5;
        }
      }
      LODWORD(v14) = -1710219254;
LABEL_331:
      log_OutPublic(*(_QWORD *)(v64 + 32), (uint64_t)"FE_PW", 37000, 0, v60, v61, v62, v63, v152);
      goto LABEL_3;
    }
  }
  return v14;
}

uint64_t pw_get_word_separating_markers_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned int *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v23;
  unsigned int *v25;
  unsigned __int16 v26;

  v26 = 0;
  v25 = 0;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int **, unsigned __int16 *))(*(_QWORD *)(a1 + 48) + 176))(a2, a3, a4, 1, &v25, &v26);
  if ((v9 & 0x80000000) != 0)
  {
LABEL_15:
    if (*a5)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), *a5);
      *a5 = 0;
    }
    return v9;
  }
  v10 = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), 4 * v26);
  *a5 = v10;
  if (!v10)
    goto LABEL_14;
  *a6 = 0;
  v15 = v26;
  if (v26)
  {
    v16 = 0;
    v17 = v25;
    v18 = v25;
    v19 = v25;
    do
    {
      v20 = *v19;
      v19 += 8;
      v21 = (1 << v20) & 0x3C0010124001140;
      if (v20 <= 0x39 && v21 != 0)
      {
        *(_DWORD *)(v10 + 4 * v16) = v18[3] - v17[3];
        v16 = *a6 + 1;
        *a6 = v16;
      }
      v18 = v19;
      --v15;
    }
    while (v15);
  }
  else
  {
    v16 = 0;
  }
  v23 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 24) + 8), v10, 4 * (v16 + 1));
  *a5 = v23;
  if (!v23)
  {
LABEL_14:
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"FE_PW", 37000, 0, v11, v12, v13, v14, v25);
    v9 = 2584748042;
    goto LABEL_15;
  }
  return v9;
}

uint64_t pw_group_csc_0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, char *a5, uint64_t a6, uint64_t a7, uint64_t *a8, _WORD *a9)
{
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned __int16 v22;
  unsigned __int16 v23;
  unsigned __int16 **v24;
  uint64_t v25;
  int v26;
  unsigned __int16 *v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned __int16 *v31;
  int v32;
  const char *v33;
  int v34;
  size_t v35;
  _BOOL4 v36;
  uint64_t v37;
  unsigned __int16 *v38;
  int v39;
  const char *v40;
  _BOOL4 IsChineseLetter;
  int v42;
  _BOOL4 v43;
  BOOL v44;
  char v46;
  unsigned int v47;
  unsigned __int16 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int16 *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned __int16 v59;
  uint64_t v60;
  unsigned __int16 **v61;
  unsigned int v62;
  unsigned __int16 *v63;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  unsigned __int16 v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unsigned int v78;
  unsigned __int16 *v80;
  unsigned int v81;
  int v82;
  unsigned __int16 v85;
  int v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;

  v10 = a7;
  v89 = *MEMORY[0x1E0C80C00];
  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"pw_group_csc Begin", a6, a7, (uint64_t)a8, v70);
  v13 = heap_Calloc(*(_QWORD **)(a1 + 8), v10, 16);
  *a8 = v13;
  if (!v13)
  {
    v67 = 2584748042;
    v68 = *(_QWORD *)(a1 + 32);
LABEL_74:
    log_OutPublic(v68, (uint64_t)"FE_PW", 37000, 0, v14, v15, v16, v17, v71);
    return v67;
  }
  v72 = a8;
  v74 = a1;
  *a9 = 0;
  v88 = 0;
  v87 = 0;
  if (v10)
  {
    LOWORD(v18) = 0;
    v76 = 0;
    v19 = 0;
    v20 = a4;
    v21 = (unsigned __int16 *)(v13 + 8);
    v78 = v10;
    while (1)
    {
      v80 = v21;
      v75 = v19;
      *v21 = 0;
      v22 = v10 <= (unsigned __int16)(v18 + 1) ? v18 + 1 : v10;
      v73 = v22;
      v23 = v18;
      while (1)
      {
        v24 = (unsigned __int16 **)(a6 + 16 * v23);
        if (v20)
        {
          v25 = 0;
          v26 = **v24;
          v27 = (unsigned __int16 *)(a3 + 24);
          while (1)
          {
            v28 = *v27;
            v27 += 20;
            if (v28 == v26)
              break;
            if (v20 == ++v25)
            {
              v81 = v20;
              goto LABEL_15;
            }
          }
          v81 = (unsigned __int16)v25;
LABEL_15:
          v30 = 0;
          v86 = 0;
          v31 = (unsigned __int16 *)(a3 + 24);
          while (1)
          {
            v32 = *v31;
            v31 += 20;
            if (v32 == v26)
              break;
            if (v20 == ++v30)
            {
              v29 = v20;
              goto LABEL_20;
            }
          }
          v29 = (unsigned __int16)v30;
        }
        else
        {
          v81 = 0;
          v29 = 0;
          v86 = 0;
        }
LABEL_20:
        v33 = *(const char **)(a3 + 40 * v29);
        v34 = (unsigned __int16)(Utf8_Utf8NbrOfSymbols(v33) - 1);
        v36 = 0;
        if (v34 == 2)
        {
          if (v33)
          {
            v35 = strlen(v33);
            if (v35)
            {
              if (strstr(",.:?!;()", &v33[v35 - 1]))
                v36 = 1;
            }
          }
        }
        v37 = 0;
        if (v20)
        {
          v38 = (unsigned __int16 *)(a3 + 24);
          while (1)
          {
            v39 = *v38;
            v38 += 20;
            if (v39 == **v24)
              break;
            if (v20 == ++v37)
            {
              LODWORD(v37) = v20;
              goto LABEL_32;
            }
          }
          LODWORD(v37) = (unsigned __int16)v37;
        }
LABEL_32:
        v40 = *(const char **)(a3 + 40 * v37 + 16);
        utf8_getUTF8Char((uint64_t)v33, 0, &v87);
        IsChineseLetter = utf8_IsChineseLetter((const char *)&v87);
        pw_weather_word_in_prompt(a2, a3 + 40 * v81, &v86);
        v42 = *(unsigned __int16 *)(a6 + 16 * v23 + 8);
        if (v42 != 1)
          break;
        v43 = v34 == 2 && v36;
        if (v34 != 1 && !v43)
          break;
        v44 = strcmp(v40, "latin") && IsChineseLetter;
        if (!v44 || v86 != 0)
          break;
        if (strstr(a5, v33))
          v46 = 1;
        else
          v46 = v36;
        if ((v46 & 1) != 0)
        {
          v85 = v23 + 1;
          v48 = v80;
          v23 = *v80;
          v10 = v78;
          goto LABEL_58;
        }
        v47 = ++*v80;
        v10 = v78;
        if (v47 > 2)
        {
          v85 = v23;
          goto LABEL_57;
        }
        if (v78 <= ++v23)
        {
          v85 = v73;
          goto LABEL_59;
        }
      }
      v85 = v23;
      v10 = v78;
      if (*v80)
        goto LABEL_59;
      *v80 = v42;
LABEL_57:
      v48 = &v85;
LABEL_58:
      *v48 = v23 + 1;
LABEL_59:
      ++*a9;
      *(_QWORD *)(*v72 + 16 * v76) = heap_Calloc(*(_QWORD **)(v74 + 8), *(unsigned __int16 *)(*v72 + 16 * v76 + 8), 2);
      v49 = *v72;
      v50 = *(_QWORD *)(*v72 + 16 * v76);
      if (!v50)
        break;
      v51 = v49 + 16 * v76;
      v54 = *(unsigned __int16 *)(v51 + 8);
      v52 = (unsigned __int16 *)(v51 + 8);
      v53 = v54;
      v18 = v85;
      if (v54 <= *(unsigned __int16 *)(a6 + 16 * (v85 - 1) + 8))
      {
        if (v53)
        {
          v65 = 0;
          v66 = *(_QWORD *)(a6 + 16 * (v85 - 1));
          do
          {
            *(_WORD *)(v50 + 2 * v65) = *(_WORD *)(v66 + 2 * v65);
            ++v65;
          }
          while (v65 < *v52);
        }
      }
      else
      {
        v55 = heap_Calloc(*(_QWORD **)(v74 + 8), 1, 1024);
        if (!v55)
          break;
        v56 = (const char *)v55;
        v57 = *v72 + 16 * v76;
        *(_DWORD *)(v57 + 12) = 1;
        v58 = *(unsigned __int16 *)(v57 + 8);
        if (v58)
        {
          v59 = 0;
          v60 = -(uint64_t)v58;
          v82 = v18;
          v61 = (unsigned __int16 **)(a6 - 16 * v58 + 16 * v18);
          v62 = v58 - 1;
          do
          {
            v63 = *v61;
            v61 += 2;
            *(_WORD *)(*(_QWORD *)(*v72 + 16 * v76) + 2 * (v60 + *(unsigned __int16 *)(*v72 + 16 * v76 + 8))) = *v63;
            sprintf((char *)&v56[v59], "%d-", *v63);
            v59 = strlen(v56);
            ++v60;
          }
          while ((unsigned __int16)v62--);
          LODWORD(v18) = v82;
        }
        log_OutText(*(_QWORD *)(v74 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"\t group [tids:%s, ntok: %d]", v15, v16, v17, (uint64_t)v56);
        heap_Free(*(_QWORD **)(v74 + 8), (uint64_t)v56);
        v49 = *v72;
      }
      v19 = v75 + 1;
      v76 = (unsigned __int16)(v75 + 1);
      v21 = (unsigned __int16 *)(v49 + 16 * v76 + 8);
      v88 = 0;
      v87 = 0;
      if (v18 >= v10)
        goto LABEL_71;
    }
    v67 = 2584748042;
    v68 = *(_QWORD *)(v74 + 32);
    goto LABEL_74;
  }
LABEL_71:
  log_OutText(*(_QWORD *)(v74 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"pw_group_csc End", v15, v16, v17, v71);
  return 0;
}

uint64_t pw_igtree_process_0(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int16 *a4, unsigned int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int16 v20;
  _WORD *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  int v32;
  char *v33;
  _WORD *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _WORD *v39;
  __int16 v40;
  uint64_t v41;
  _WORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _DWORD *v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  uint64_t v57;
  int v59;
  _WORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v71;
  uint64_t v72;
  const char *v73;

  v6 = a6;
  v9 = a1;
  inited = 2584748042;
  v11 = *a4;
  v73 = 0;
  v12 = *a3;
  v13 = (uint64_t *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 8 * *(unsigned __int8 *)(a6 + 1296) - 8);
  if (!v13)
    return inited;
  v14 = v13;
  inited = igtree_initFeatureVector(v9, v13, (unsigned __int16)(*(unsigned __int8 *)(v6 + 1296) - 1));
  if ((inited & 0x80000000) != 0)
  {
    v57 = 0;
    goto LABEL_49;
  }
  v15 = heap_Calloc(*(_QWORD **)(v9 + 8), a5, 4);
  if (!v15)
  {
    v57 = 0;
    inited = 2584748042;
    goto LABEL_49;
  }
  v68 = v6;
  v60 = a4;
  v61 = a3;
  v71 = v15;
  if (!(_DWORD)v11)
  {
    v18 = v12;
LABEL_46:
    *v60 = v11;
    *v61 = v18;
    goto LABEL_47;
  }
  v16 = 0;
  v17 = 0;
  v67 = a5 - 1;
  v18 = v12;
  v65 = v14;
  while (1)
  {
    v19 = v18 + 16 * v16;
    v22 = *(unsigned __int16 *)(v19 + 8);
    v21 = (_WORD *)(v19 + 8);
    v20 = v22;
    v66 = v11;
    if (v22)
    {
      if (v67 != v17)
        break;
    }
LABEL_8:
    ++v16;
    v11 = v66;
    if (v16 >= (unsigned __int16)v66)
      goto LABEL_46;
  }
  v23 = 0;
  v24 = 0;
  v63 = (v16 + 2);
  v64 = (v16 + 1);
  v59 = ~(_DWORD)v16;
  v25 = 2;
  while (1)
  {
    v72 = v24;
    v26 = v16;
    v27 = v18;
    v28 = v17;
    *(_DWORD *)(v71 + 4 * v17) = v20 - 1 == v23;
    v6 = v68;
    v29 = igtree_setFeatureVector(v9, (uint64_t)v14, *(_QWORD *)(v68 + 1312), *(unsigned __int8 *)(v68 + 1296), a2, a5, v17);
    if ((v29 & 0x80000000) != 0)
    {
      inited = v29;
      v57 = v71;
      goto LABEL_49;
    }
    inited = igtree_Process(v68, (uint64_t)v14, &v73);
    if ((inited & 0x80000000) != 0)
      goto LABEL_47;
    v30 = v9;
    v31 = v73;
    if (!strcmp(v73, "NOMATCH"))
    {
      v9 = v30;
      v14 = v65;
      v18 = v27;
      v16 = v26;
      goto LABEL_37;
    }
    v32 = *(_DWORD *)(v71 + 4 * v28);
    v16 = v26;
    if (v32 == (strcmp(v31, "1") == 0))
    {
      inited = 0;
      v9 = v30;
LABEL_36:
      v14 = v65;
      v18 = v27;
      goto LABEL_37;
    }
    v18 = v27;
    if (v32)
    {
      v33 = (char *)(v27 + 16 * v64);
      v34 = v33 + 8;
      v35 = *((unsigned __int16 *)v33 + 4) + (unsigned __int16)*v21;
      if (v35 <= 4)
      {
        *v21 = v35;
        v51 = heap_Realloc(*(uint64_t **)(v30 + 8), *(_QWORD *)(v27 + 16 * v26), 2 * (unsigned __int16)v35);
        *(_QWORD *)(v27 + 16 * v26) = v51;
        if (!v51)
          goto LABEL_52;
        LOWORD(v52) = *v34;
        v53 = *(_QWORD *)v33;
        if (*v34)
        {
          v54 = 0;
          do
          {
            *(_WORD *)(v51 + 2 * (v54 - (unsigned __int16)v52 + (unsigned __int16)*v21)) = *(_WORD *)(v53 + 2 * v54);
            ++v54;
            v52 = (unsigned __int16)*v34;
          }
          while (v54 < v52);
        }
        v16 = v26;
        *(_DWORD *)(v27 + 16 * v26 + 12) |= *(_DWORD *)(v27 + 16 * v64 + 12);
        v9 = v30;
        heap_Free(*(_QWORD **)(v30 + 8), v53);
        if (v63 < (unsigned __int16)v66)
          memmove(v33, (const void *)(v27 + 16 * v63), 16 * ((unsigned __int16)v66 - (int)v26 - 2));
        inited = 0;
        v66 = (v66 - 1);
        goto LABEL_36;
      }
      inited = 0;
      v9 = v30;
      v14 = v65;
LABEL_37:
      v49 = v72;
      goto LABEL_38;
    }
    v9 = v30;
    v36 = heap_Realloc(*(uint64_t **)(v30 + 8), v27, 16 * (unsigned __int16)v66 + 16);
    if (!v36)
      break;
    v37 = v36;
    v62 = v36;
    if (v64 < (unsigned __int16)v66)
    {
      memmove((void *)(v36 + 16 * v63), (const void *)(v36 + 16 * v64), 16 * ((unsigned __int16)v66 + v59));
      v37 = v62;
    }
    v38 = v37 + 16 * v26;
    v40 = *(_WORD *)(v38 + 8);
    v39 = (_WORD *)(v38 + 8);
    v41 = v37 + 16 * v64;
    *(_WORD *)(v41 + 8) = v40 + ~(_WORD)v23;
    v42 = (_WORD *)(v41 + 8);
    v43 = heap_Alloc(*(_QWORD *)(v30 + 8), 2 * (unsigned __int16)(v40 + ~(_WORD)v23));
    v18 = v62;
    *(_QWORD *)(v62 + 16 * v64) = v43;
    if (!v43)
    {
LABEL_52:
      inited = 2584748042;
      v9 = v30;
      goto LABEL_54;
    }
    if (*v42)
    {
      v44 = 0;
      v45 = *(_QWORD *)v38 + v25;
      do
      {
        *(_WORD *)(v43 + 2 * v44) = *(_WORD *)(v45 + 2 * v44);
        ++v44;
      }
      while (v44 < (unsigned __int16)*v42);
    }
    v16 = v26;
    v46 = v62 + 16 * v26;
    v48 = *(_DWORD *)(v46 + 12);
    v47 = (_DWORD *)(v46 + 12);
    v49 = v72;
    if (v48 == 1)
    {
      *v47 = 0;
      v50 = 1;
    }
    else
    {
      v50 = 0;
    }
    v9 = v30;
    inited = 0;
    *(_DWORD *)(v62 + 16 * v64 + 12) = v50;
    *v39 = v72 + 1;
    v66 = (v66 + 1);
    v14 = v65;
LABEL_38:
    v17 = v28 + 1;
    v23 = v49 + 1;
    v55 = v18 + 16 * v16;
    v56 = *(unsigned __int16 *)(v55 + 8);
    v21 = (_WORD *)(v55 + 8);
    v20 = v56;
    if (v49 + 1 < (unint64_t)v56)
    {
      v25 += 2;
      v24 = v49 + 1;
      if (v67 != (unsigned __int16)(v28 + 1))
        continue;
    }
    goto LABEL_8;
  }
  inited = 2584748042;
LABEL_54:
  v14 = v65;
LABEL_47:
  v57 = v71;
  v6 = v68;
LABEL_49:
  hlp_igtree_freeFeatureVector(v9, v14, (unsigned __int16)(*(unsigned __int8 *)(v6 + 1296) - 1));
  heap_Free(*(_QWORD **)(v9 + 8), (uint64_t)v14);
  if (v57)
    heap_Free(*(_QWORD **)(v9 + 8), v57);
  return inited;
}

uint64_t pw_respect_word_separating_markers_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned __int16 *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  uint64_t v23;
  unsigned __int16 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v32;
  uint64_t v33;
  int v34;

  if (!*a6)
    return 0;
  v12 = 0;
  v13 = 0;
  v34 = 0;
  v14 = *a5;
  while (1)
  {
    if (*(unsigned __int16 *)(v14 + 16 * v12 + 8) >= 2u)
    {
      v34 = 0;
      v14 = *a5;
      if (*(unsigned __int16 *)(*a5 + 16 * v12 + 8) >= 2u)
        break;
    }
LABEL_17:
    if (++v12 >= (unint64_t)*a6)
      return v13;
  }
  v15 = 1;
  while (1)
  {
    v16 = (unsigned __int16 *)(*(_QWORD *)(v14 + 16 * v12) + 2 * v15);
    v13 = pw_check_if_glue_forbidden_0(a1, a2, a3, a4, *(v16 - 1), *v16, &v34);
    if ((v13 & 0x80000000) != 0)
      return v13;
    if (v34)
    {
      v17 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 24) + 8), *a5, 16 * *a6 + 16);
      if (!v17)
        goto LABEL_21;
      *a5 = v17;
      v22 = *a6 + 1;
      *a6 = v22;
      v33 = v12 + 1;
      if (v12 + 2 < (unint64_t)v22)
      {
        memmove((void *)(v17 + 16 * (v12 + 2)), (const void *)(v17 + 16 * (v12 + 1)), (uint64_t)(((unint64_t)(v22 - v12) << 32) - 0x200000000) >> 28);
        v17 = *a5;
      }
      v23 = v17 + 16 * v12;
      v24 = *(_WORD *)(v23 + 8) - v15;
      *(_WORD *)(v17 + 16 * v33 + 8) = v24;
      *(_WORD *)(v23 + 8) = v15;
      *(_QWORD *)(*a5 + 16 * v33) = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), 2, v24);
      v14 = *a5;
      v25 = *(_QWORD *)(*a5 + 16 * v33);
      if (!v25)
      {
LABEL_21:
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"FE_PW", 37000, 0, v18, v19, v20, v21, v32);
        return 2584748042;
      }
      v26 = v14 + 16 * v33;
      v28 = *(unsigned __int16 *)(v26 + 8);
      v27 = (unsigned __int16 *)(v26 + 8);
      if (v28)
      {
        v29 = 0;
        v30 = *(_QWORD *)(v14 + 16 * v12) + 2 * v15;
        do
        {
          *(_WORD *)(v25 + 2 * v29) = *(_WORD *)(v30 + 2 * v29);
          ++v29;
        }
        while (v29 < *v27);
      }
      goto LABEL_17;
    }
    ++v15;
    v14 = *a5;
    if (*(unsigned __int16 *)(*a5 + 16 * v12 + 8) <= v15)
      goto LABEL_17;
  }
}

char *cstdlib_safe_strcat(uint64_t a1, const char **a2, char *__s, _QWORD *a4, unint64_t a5)
{
  size_t v10;

  v10 = strlen(__s);
  checksize_and_realloc(a1, a2, v10, a4, a5);
  return strcat((char *)*a2, __s);
}

char *cstdlib_safe_strncat(uint64_t a1, const char **a2, const char *a3, size_t a4, _QWORD *a5)
{
  checksize_and_realloc(a1, a2, a4, a5, 0x40uLL);
  return strncat((char *)*a2, a3, a4);
}

uint64_t pw_merge_NLU_0(uint64_t a1, char **a2)
{
  char *v2;
  unsigned __int16 v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned __int16 v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  char *v20;
  const char *v21;
  uint64_t v22;
  const char **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *i;
  unsigned int v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  size_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *j;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int KeyIdx;
  unsigned __int8 *v49;
  const char *v50;
  unsigned int v51;
  unsigned int v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  size_t v58;
  const char *v59;
  const char *v60;
  char *v61;
  size_t v62;
  char *v63;
  char *v64;
  size_t v65;
  char *v66;
  size_t v67;
  char *v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  const char *v73;
  const char *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  char v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int16 v83;
  unint64_t k;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  unsigned int __n;
  size_t __n_4;
  char *__s;
  char *__s1;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  unsigned int v98;
  char **v99;
  char *__s2;
  unsigned __int16 v101;

  v2 = *a2;
  if (!*a2)
    return 0;
  v5 = 0;
  do
  {
    if (hlp_NLUStrKeyLen(v2) >= 3)
    {
      v6 = *v2 - 69;
      v7 = v6 > 0xE;
      v8 = (1 << v6) & 0x4011;
      v9 = v7 || v8 == 0;
      if (!v9 && v2[1] == 95)
        ++v5;
    }
    v2 = hlp_NLUStrNext(v2);
  }
  while (v2);
  if (!v5)
    return 0;
  v10 = 2584748042;
  v11 = heap_Calloc(*(_QWORD **)(a1 + 8), 8, v5);
  if (v11)
  {
    v12 = v11;
    v13 = *a2;
    if (*a2)
    {
      v99 = a2;
      v98 = -1710219254;
      v14 = 0;
      do
      {
        v15 = hlp_NLUStrKeyLen(v13);
        if (v15 >= 3)
        {
          v16 = *v13 - 69;
          v7 = v16 > 0xE;
          v17 = (1 << v16) & 0x4011;
          v18 = v7 || v17 == 0;
          if (!v18 && v13[1] == 95)
          {
            v19 = v15;
            v20 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v15 - 1);
            if (!v20)
            {
              v26 = v12;
              v10 = 2584748042;
              goto LABEL_181;
            }
            v21 = v20;
            strncpy(v20, v13 + 2, v19 - 2);
            if (v14)
            {
              v22 = v14;
              v23 = (const char **)v12;
              v24 = v14;
              while (*v23)
              {
                if (!strcmp(*v23, v21))
                {
                  heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v21);
                  goto LABEL_31;
                }
                ++v23;
                if (!--v24)
                  break;
              }
            }
            else
            {
              v22 = 0;
            }
            *(_QWORD *)(v12 + 8 * v22) = v21;
            ++v14;
          }
        }
LABEL_31:
        v13 = hlp_NLUStrNext(v13);
      }
      while (v13);
      if (!v14)
        goto LABEL_158;
      v25 = heap_Realloc(*(uint64_t **)(a1 + 8), v12, 8 * v14);
      if (v25)
      {
        v26 = v25;
        v27 = heap_Calloc(*(_QWORD **)(a1 + 8), 2, v14);
        if (v27)
        {
          v28 = v27;
          for (i = *v99; i; i = hlp_NLUStrNext(i))
          {
            v30 = hlp_NLUStrKeyLen(i);
            if (v30 >= 3)
            {
              v31 = *i - 69;
              v7 = v31 > 0xE;
              v32 = (1 << v31) & 0x4011;
              v33 = v7 || v32 == 0;
              if (!v33 && i[1] == 95)
              {
                v34 = 0;
                v35 = (unsigned __int16)(v30 - 2);
                do
                {
                  v36 = *(const char **)(v26 + 8 * v34);
                  if (!v36)
                    break;
                  if (!strncmp(v36, i + 2, v35))
                  {
                    if ((v34 & 0x8000) == 0)
                      ++*(_WORD *)(v28 + 2 * v34);
                    break;
                  }
                  ++v34;
                }
                while (v14 != v34);
              }
            }
          }
          v37 = heap_Calloc(*(_QWORD **)(a1 + 8), 8, v14);
          if (v37)
          {
            v38 = v37;
            v39 = 0;
            if ((v14 & 0xFFFE) != 0)
              v40 = v14;
            else
              v40 = 1;
            do
            {
              v41 = heap_Calloc(*(_QWORD **)(a1 + 8), 8, *(unsigned __int16 *)(v28 + 2 * v39));
              *(_QWORD *)(v38 + 8 * v39) = v41;
              if (!v41)
              {
                v42 = 0;
                goto LABEL_166;
              }
              ++v39;
            }
            while (v40 != v39);
            v42 = heap_Calloc(*(_QWORD **)(a1 + 8), 2, v14);
            if (v42)
            {
              for (j = *v99; j; j = hlp_NLUStrNext(j))
              {
                v44 = hlp_NLUStrKeyLen(j);
                if (v44 >= 3)
                {
                  v45 = *j - 69;
                  v7 = v45 > 0xE;
                  v46 = (1 << v45) & 0x4011;
                  if (!v7 && v46 != 0 && j[1] == 95)
                  {
                    KeyIdx = hlp_getKeyIdx(v26, v14, j + 2, (unsigned __int16)(v44 - 2));
                    if ((KeyIdx & 0x80000000) == 0)
                    {
                      v94 = (unsigned __int16)KeyIdx;
                      v96 = *(_QWORD *)(v38 + 8 * (unsigned __int16)KeyIdx);
                      v49 = hlp_NLUStrKeyValue(j);
                      v50 = (const char *)v49;
                      v51 = v49 ? hlp_NLUStrLength((char *)v49) : 0;
                      v52 = v51;
                      if (!hlp_checkValExist(v96, *(unsigned __int16 *)(v42 + 2 * v94), v50, v51))
                      {
                        v53 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v52 + 2);
                        if (!v53)
                          goto LABEL_166;
                        if (v50)
                          v53 = strncpy(v53, v50, v52);
                        else
                          *(_WORD *)v53 = 32;
                        v54 = *(unsigned __int16 *)(v42 + 2 * v94);
                        *(_QWORD *)(v96 + 8 * v54) = v53;
                        *(_WORD *)(v42 + 2 * v94) = v54 + 1;
                      }
                    }
                  }
                }
              }
              v89 = v28;
              v55 = 0;
              do
              {
                v56 = heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)(v38 + 8 * v55), 8 * *(unsigned __int16 *)(v42 + 2 * v55));
                if (!v56)
                {
LABEL_164:
                  v28 = v89;
                  goto LABEL_166;
                }
                *(_QWORD *)(v38 + 8 * v55++) = v56;
              }
              while (v40 != v55);
              v57 = 0;
              while (!*(_WORD *)(v42 + 2 * v57))
              {
LABEL_155:
                if (++v57 == v40)
                {
                  v28 = v89;
                  v98 = 0;
                  goto LABEL_166;
                }
              }
              v58 = 0;
              while (2)
              {
                v59 = *(const char **)(v26 + 8 * v57);
                v60 = *(const char **)(*(_QWORD *)(v38 + 8 * v57) + 8 * v58);
                v61 = *v99;
                v101 = 0;
                __s2 = 0;
                v97 = v61;
                if (!v61)
                  goto LABEL_129;
                __n_4 = v58;
                if (v60)
                  __n = (unsigned __int16)strlen(v60);
                else
                  __n = 0;
                v62 = strlen(v59);
                v63 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v62 + 3);
                if (!v63)
                  goto LABEL_164;
                v64 = v63;
                __s1 = (char *)v60;
                strcpy(v63, "S_");
                strcat(v63, v59);
                v65 = strlen(v59);
                v66 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v65 + 3);
                if (v66)
                {
                  strcpy(v66, "I_");
                  __s = v66;
                  strcat(v66, v59);
                  v67 = strlen(v59);
                  v68 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v67 + 3);
                  if (v68)
                  {
                    v69 = v57;
                    strcpy(v68, "E_");
                    v95 = v68;
                    strcat(v68, v59);
                    if (!hlp_NLUStrFind(v97, v64, (uint64_t *)&__s2, &v101)
                      || ((v70 = v101, !__s1) || v101 || strcmp(__s1, " "))
                      && (!__s1 || v70 != __n || strncmp(__s1, __s2, __n)))
                    {
                      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v64);
                      v64 = 0;
                    }
                    if (!hlp_NLUStrFind(v97, __s, (uint64_t *)&__s2, &v101)
                      || ((v71 = v101, !__s1) || v101 || strcmp(__s1, " "))
                      && (!__s1 || v71 != __n || strncmp(__s1, __s2, __n)))
                    {
                      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)__s);
                      __s = 0;
                    }
                    if (!hlp_NLUStrFind(v97, v95, (uint64_t *)&__s2, &v101))
                      goto LABEL_114;
                    v72 = v101;
                    if (__s1 && !v101 && !strcmp(__s1, " "))
                      goto LABEL_112;
                    if (__s1 && v72 == __n)
                    {
                      if (strncmp(__s1, __s2, __n))
                      {
                        heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v95);
                        v95 = 0;
                      }
LABEL_112:
                      v57 = v69;
                      v73 = __s1;
LABEL_115:
                      if (!strcmp(v73, " "))
                        v73 = 0;
                    }
                    else
                    {
LABEL_114:
                      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v95);
                      v95 = 0;
                      v57 = v69;
                      v73 = __s1;
                      if (__s1)
                        goto LABEL_115;
                    }
                    hlp_NLUStrRemoveRangeKey((unsigned __int8 *)v97, v59, v73);
                    if (v64)
                    {
                      if (!__s)
                      {
                        v74 = v64;
                        if (!v95)
                          goto LABEL_120;
                      }
                    }
                    if (v64)
                      v78 = 1;
                    else
                      v78 = __s == 0;
                    v79 = !v78;
                    if (!v78)
                    {
                      v80 = __s;
                      if (!v95)
                      {
LABEL_139:
                        hlp_NLUStrAppendKeyVal(v97, v80, v73);
                        v76 = (uint64_t)__s;
                        v75 = 0;
LABEL_125:
                        heap_Free(*(_QWORD **)(a1 + 8), v76);
LABEL_126:
                        v77 = (uint64_t)v95;
                        if (v95)
LABEL_127:
                          heap_Free(*(_QWORD **)(a1 + 8), v77);
                        v58 = __n_4;
                        if (v75 < 0)
                        {
                          v28 = v89;
                          v98 = v75;
                          goto LABEL_166;
                        }
LABEL_129:
                        if (++v58 >= *(unsigned __int16 *)(v42 + 2 * v57))
                          goto LABEL_155;
                        continue;
                      }
                    }
                    if (!v64 && !__s && v95)
                    {
                      hlp_NLUStrAppendKeyVal(v97, v95, v73);
                      v77 = (uint64_t)v95;
                      v75 = 0;
                      goto LABEL_127;
                    }
                    if (v64 && v95)
                    {
                      hlp_NLUStrAppendKeyVal(v97, v64, v73);
                      v74 = v95;
                      goto LABEL_120;
                    }
                    if (v64 && __s && (v74 = v64, !v95))
                    {
LABEL_120:
                      hlp_NLUStrAppendKeyVal(v97, v74, v73);
                      v75 = 0;
                    }
                    else
                    {
                      if (!v95)
                        v79 = 0;
                      v80 = v95;
                      if ((v79 & 1) != 0)
                        goto LABEL_139;
                      v75 = 0;
                      if (!v64)
                      {
LABEL_124:
                        v76 = (uint64_t)__s;
                        if (__s)
                          goto LABEL_125;
                        goto LABEL_126;
                      }
                    }
LABEL_123:
                    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v64);
                    goto LABEL_124;
                  }
                  v95 = 0;
                }
                else
                {
                  v95 = 0;
                  __s = 0;
                }
                break;
              }
              v75 = -1710219254;
              goto LABEL_123;
            }
LABEL_166:
            v81 = 0;
            do
            {
              v82 = *(_QWORD *)(v38 + 8 * v81);
              if (v82)
              {
                if (v42)
                {
                  v83 = *(_WORD *)(v42 + 2 * v81);
                  if (v83)
                  {
                    for (k = 0; k < v83; ++k)
                    {
                      v85 = *(_QWORD *)(*(_QWORD *)(v38 + 8 * v81) + 8 * k);
                      if (v85)
                      {
                        heap_Free(*(_QWORD **)(a1 + 8), v85);
                        v83 = *(_WORD *)(v42 + 2 * v81);
                      }
                    }
                    v82 = *(_QWORD *)(v38 + 8 * v81);
                  }
                }
                heap_Free(*(_QWORD **)(a1 + 8), v82);
              }
              ++v81;
            }
            while (v81 != v40);
            heap_Free(*(_QWORD **)(a1 + 8), v38);
            if (v42)
              heap_Free(*(_QWORD **)(a1 + 8), v42);
            v10 = v98;
          }
          else
          {
            v10 = 2584748042;
          }
          heap_Free(*(_QWORD **)(a1 + 8), v28);
          v12 = v26;
LABEL_181:
          if (!v14)
            goto LABEL_187;
LABEL_182:
          v86 = 0;
          do
          {
            v87 = *(_QWORD *)(v26 + 8 * v86);
            if (v87)
              heap_Free(*(_QWORD **)(a1 + 8), v87);
            ++v86;
          }
          while (v14 != v86);
          v12 = v26;
          goto LABEL_187;
        }
      }
      else
      {
        v26 = v12;
      }
      v10 = 2584748042;
      goto LABEL_182;
    }
LABEL_158:
    v10 = 0;
LABEL_187:
    heap_Free(*(_QWORD **)(a1 + 8), v12);
  }
  return v10;
}

char *pw_split_csc_pw_0(char *result, uint64_t a2, const char **a3, uint64_t *a4)
{
  const char *v5;
  char *v7;
  char v8;
  char *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  if (*(_DWORD *)(a2 + 12) == 1 && (*(_WORD *)(a2 + 8) & 0xFFFE) == 4)
  {
    v5 = *a3;
    if (*a3)
    {
      v7 = result;
      v8 = 1;
      v9 = (char *)*a3;
      do
      {
        v10 = v8;
        result = strchr(v9, 46);
        if (result)
          v9 = result + 1;
        else
          v9 = 0;
        if (!result)
          break;
        v8 = 0;
      }
      while ((v10 & 1) != 0);
      if (result)
      {
        v11 = strlen(v5) + 7;
        v12 = *a4;
        if (v11 > *a4)
        {
          result = (char *)heap_Realloc(*((uint64_t **)v7 + 1), (uint64_t)v5, v11);
          if (!result)
            return result;
          *a3 = result;
          *a4 = v11;
          v12 = v11;
        }
        result = (char *)heap_Calloc(*((_QWORD **)v7 + 1), 1, v12);
        if (result)
        {
          v13 = result;
          v14 = strncpy(result, *a3, (~*(_DWORD *)a3 + (_DWORD)v9));
          strcpy(&v13[strlen(v14)], "{SEP2}");
          strcat(v13, v9);
          return strcpy((char *)*a3, v13);
        }
      }
    }
  }
  return result;
}

uint64_t pw_check_if_glue_forbidden_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  uint64_t result;
  uint64_t v15;
  int *v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  _DWORD *v20;
  int v22;
  uint64_t v23;
  int v24;
  int v25;

  *a7 = 0;
  pw_check_if_word_in_prompt_0(a1, a2, a3, a5, a7);
  result = 0;
  if (!*a7)
  {
    pw_check_if_word_in_prompt_0(a1, a2, a3, a6, a7);
    if (*a7)
    {
      return 0;
    }
    else
    {
      v24 = 0;
      v25 = 0;
      v23 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, int *))(*(_QWORD *)(a1 + 48)
                                                                                               + 176))(a2, a3, a4, 1, &v23, &v24);
      if ((result & 0x80000000) == 0)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(_QWORD *)(a1 + 48)
                                                                                            + 168))(a2, a3, a5, 1, 1, (char *)&v25 + 2, (char *)&v24 + 2);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(a1 + 48) + 168))(a2, a3, a6, 2, 1, &v25, (char *)&v24 + 2);
        if ((result & 0x80000000) == 0)
        {
          if ((_WORD)v24)
          {
            v15 = 0;
            v16 = (int *)(v23 + 12);
            while (1)
            {
              v17 = *v16;
              v16 += 8;
              if (v17 - *(_DWORD *)(v23 + 12) > HIWORD(v25))
                break;
              if ((unsigned __int16)v24 == ++v15)
                goto LABEL_23;
            }
            v18 = (unsigned __int16)v15;
          }
          else
          {
            v18 = 0;
          }
          if (v18 < (unsigned __int16)v24)
          {
            v19 = (unsigned __int16)v24 - (unint64_t)v18;
            v20 = (_DWORD *)(v23 + 32 * v18);
            while (v20[3] - *(_DWORD *)(v23 + 12) < (unsigned __int16)v25)
            {
              if (*v20 <= 0x39u && ((1 << *v20) & 0x3C0010124001140) != 0)
              {
                v22 = 1;
                goto LABEL_24;
              }
              v20 += 8;
              if (!--v19)
                break;
            }
          }
LABEL_23:
          v22 = 0;
LABEL_24:
          *a7 = v22;
        }
      }
    }
  }
  return result;
}

void checksize_and_realloc(uint64_t a1, const char **a2, uint64_t a3, _QWORD *a4, unint64_t a5)
{
  const char *v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  unint64_t v14;

  v10 = *a2;
  v11 = strlen(*a2);
  if (a3 + 1 + v11 > *a4)
  {
    v12 = v11;
    if (a3 + 1 > a5)
      a5 = a3 + 1;
    v13 = heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)v10, *a4 + a5);
    if (v13)
    {
      *a2 = (const char *)v13;
      v14 = *a4 + a5;
      *a4 = v14;
      bzero((void *)(v13 + v12), v14 - v12);
    }
  }
}

uint64_t pw_check_if_word_in_prompt_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t result;
  int v10;

  v10 = 0;
  *a5 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(a1 + 48)
                                                                                                 + 168))(a2, a3, a4, 1, 1, &v10, (char *)&v10 + 2);
  if ((result & 0x80000000) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _DWORD *))(*(_QWORD *)(a1 + 48) + 312))(a2, a3, (unsigned __int16)v10, a5);
  return result;
}

uint64_t load_igtree_cfg(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v5;
  char v7;
  __int16 v8;
  const char **v9;

  v9 = 0;
  v8 = -1;
  v7 = 0;
  *a4 = 0;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, const char ***, __int16 *, char *))(a3 + 96))(a1, a2, "fecfg", "statbnd_igtree", &v9, &v8, &v7);
  if ((v5 & 0x80000000) == 0 && v8 == 1)
  {
    (*v9)[strlen(*v9) - 1] = 0;
    if (!strcmp(*v9, "yes"))
      *a4 = 1;
  }
  return v5;
}

uint64_t load_igtree(_WORD *a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t Str;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v26;
  int v27[2];
  uint64_t v28;
  int v29[2];
  _OWORD v30[16];
  char v31[136];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  memset(v30, 0, 240);
  *(_QWORD *)v27 = 0;
  v28 = 0;
  *a4 = 0;
  *(_QWORD *)v29 = 0;
  memset(v31, 0, 128);
  v30[15] = 0u;
  Str = paramc_ParamGetStr(*(_QWORD *)(a3 + 40), (uint64_t)"langcode", v29);
  if ((Str & 0x80000000) != 0)
    goto LABEL_7;
  Str = paramc_ParamGetStr(*(_QWORD *)(a3 + 40), (uint64_t)"fecfg", &v28);
  if ((Str & 0x80000000) != 0)
    goto LABEL_7;
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  v16 = brokeraux_ComposeBrokerString(a3, v31, 1, 1, *(char **)v29, 0, 0, (char *)v30, 0x100uLL);
  v17 = v16 & (v16 >> 31);
  if ((v16 & (v16 >> 31)) < 0)
    goto LABEL_8;
  Str = ssftriff_reader_ObjOpen(a1, a2, 2, (const char *)v30, "IGTR", 1031, (uint64_t *)v27);
  if ((Str & 0x80000000) != 0)
  {
LABEL_7:
    v17 = Str;
  }
  else
  {
    v18 = (char *)heap_Calloc(*(_QWORD **)(a3 + 8), 1, 1600);
    *a4 = v18;
    if (v18)
    {
      v17 = igtree_Init(a1, a2, *(uint64_t *)v27, v18);
      ssftriff_reader_CloseChunk(*(uint64_t *)v27);
    }
    else
    {
      log_OutPublic(*(_QWORD *)(a3 + 32), (uint64_t)"FE_PW", 37000, 0, v19, v20, v21, v22, v26);
      v17 = 2584748042;
    }
  }
LABEL_8:
  if (*(_QWORD *)v27)
  {
    v23 = ssftriff_reader_ObjClose(*(_QWORD **)v27, v9, v10, v11, v12, v13, v14, v15);
    if (v23 >= 0 || (int)v17 <= -1)
      return v17;
    else
      return v23;
  }
  return v17;
}

uint64_t igtree_initFeatureVector(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;

  if (!a3)
    return 0;
  v5 = a3;
  while (1)
  {
    v6 = (_WORD *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 65);
    *a2 = v6;
    if (!v6)
      break;
    *v6 = 61;
    ++a2;
    if (!--v5)
      return 0;
  }
  log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PW", 37000, 0, v7, v8, v9, v10, v12);
  return 2584748042;
}

uint64_t igtree_setFeatureVector(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  unsigned int v48;
  int v49;
  const char *v50;
  unsigned __int16 v51;
  const char *v52;
  unsigned __int16 v53;
  char v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  char v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  char v62;
  const char *v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  char v68;
  const char *v69;
  char v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  const char *v76;
  int v77;
  unsigned int v78;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  unsigned __int16 v83;

  v83 = 0;
  v14 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 2048);
  if (v14)
  {
    v19 = (char *)v14;
    if (a4 < 2)
    {
      v22 = 0;
    }
    else
    {
      v82 = a7;
      v81 = a2;
      v20 = 0;
      v21 = a4 - 1;
      while (strcmp(*(const char **)(a3 + 8 * v20), "word"))
      {
        if (v21 == ++v20)
          goto LABEL_24;
      }
      v83 = v20;
LABEL_24:
      v31 = 0;
      while (strcmp(*(const char **)(a3 + 8 * v31), "word"))
      {
        if (v21 == ++v31)
        {
          v22 = 0;
          goto LABEL_32;
        }
      }
      v83 = v31;
      if (v82 >= a6)
        v32 = "=";
      else
        v32 = *(const char **)(a5 + 40 * v82);
      v22 = hlp_igtree_setFeature_0(a1, a3, a4, 0, v81, v32);
      if ((v22 & 0x80000000) != 0)
        goto LABEL_192;
LABEL_32:
      v33 = 0;
      while (strcmp(*(const char **)(a3 + 8 * v33), "lword"))
      {
        if (v21 == ++v33)
          goto LABEL_40;
      }
      v83 = v33;
      if (v82 - 1 >= a6)
        v34 = "=";
      else
        v34 = *(const char **)(a5 + 40 * (v82 - 1));
      v22 = hlp_igtree_setFeature_0(a1, a3, a4, 1, v81, v34);
      if ((v22 & 0x80000000) != 0)
        goto LABEL_192;
LABEL_40:
      v35 = 0;
      while (strcmp(*(const char **)(a3 + 8 * v35), "llword"))
      {
        if (v21 == ++v35)
          goto LABEL_48;
      }
      v83 = v35;
      if (v82 - 2 >= a6)
        v36 = "=";
      else
        v36 = *(const char **)(a5 + 40 * (v82 - 2));
      v22 = hlp_igtree_setFeature_0(a1, a3, a4, 2, v81, v36);
      if ((v22 & 0x80000000) != 0)
        goto LABEL_192;
LABEL_48:
      v37 = 0;
      while (strcmp(*(const char **)(a3 + 8 * v37), "rword"))
      {
        if (v21 == ++v37)
          goto LABEL_56;
      }
      v83 = v37;
      if (v82 + 1 >= a6)
        v38 = "=";
      else
        v38 = *(const char **)(a5 + 40 * (v82 + 1));
      v22 = hlp_igtree_setFeature_0(a1, a3, a4, 3, v81, v38);
      if ((v22 & 0x80000000) != 0)
        goto LABEL_192;
LABEL_56:
      v39 = 0;
      while (strcmp(*(const char **)(a3 + 8 * v39), "rrword"))
      {
        if (v21 == ++v39)
          goto LABEL_64;
      }
      v83 = v39;
      if (v82 + 2 >= a6)
        v40 = "=";
      else
        v40 = *(const char **)(a5 + 40 * (v82 + 2));
      v22 = hlp_igtree_setFeature_0(a1, a3, a4, 4, v81, v40);
      if ((v22 & 0x80000000) != 0)
        goto LABEL_192;
LABEL_64:
      v41 = 0;
      while (strcmp(*(const char **)(a3 + 8 * v41), "wordlen"))
      {
        if (v21 == ++v41)
          goto LABEL_69;
      }
      v83 = v41;
      feat_wordlength_0(a5, a6, v82, 0, v19);
      v22 = hlp_igtree_setFeature_0(a1, a3, a4, 5, v81, v19);
      if ((v22 & 0x80000000) != 0)
        goto LABEL_192;
LABEL_69:
      v42 = 0;
      while (strcmp(*(const char **)(a3 + 8 * v42), "lwordlen"))
      {
        if (v21 == ++v42)
          goto LABEL_74;
      }
      v83 = v42;
      feat_wordlength_0(a5, a6, v82, -1, v19);
      v22 = hlp_igtree_setFeature_0(a1, a3, a4, 6, v81, v19);
      if ((v22 & 0x80000000) != 0)
        goto LABEL_192;
LABEL_74:
      v43 = 0;
      while (strcmp(*(const char **)(a3 + 8 * v43), "rwordlen"))
      {
        if (v21 == ++v43)
          goto LABEL_79;
      }
      v83 = v43;
      feat_wordlength_0(a5, a6, v82, 1, v19);
      v22 = hlp_igtree_setFeature_0(a1, a3, a4, 7, v81, v19);
      if ((v22 & 0x80000000) != 0)
        goto LABEL_192;
LABEL_79:
      v44 = 0;
      while (strcmp(*(const char **)(a3 + 8 * v44), "pos"))
      {
        if (v21 == ++v44)
          goto LABEL_115;
      }
      v83 = v44;
      if (v82 >= a6)
        v45 = "=";
      else
        v45 = *(const char **)(a5 + 40 * v82 + 8);
      v22 = hlp_igtree_setFeature_0(a1, a3, a4, 8, v81, v45);
      if ((v22 & 0x80000000) != 0)
        goto LABEL_192;
LABEL_115:
      v56 = 0;
      while (strcmp(*(const char **)(a3 + 8 * v56), "lpos"))
      {
        if (v21 == ++v56)
          goto LABEL_131;
      }
      v83 = v56;
      if (v82 - 1 >= a6)
        v57 = "=";
      else
        v57 = *(const char **)(a5 + 40 * (v82 - 1) + 8);
      v22 = hlp_igtree_setFeature_0(a1, a3, a4, 9, v81, v57);
      if ((v22 & 0x80000000) != 0)
        goto LABEL_192;
LABEL_131:
      v60 = 0;
      while (strcmp(*(const char **)(a3 + 8 * v60), "llpos"))
      {
        if (v21 == ++v60)
          goto LABEL_147;
      }
      v83 = v60;
      if (v82 - 2 >= a6)
        v61 = "=";
      else
        v61 = *(const char **)(a5 + 40 * (v82 - 2) + 8);
      v22 = hlp_igtree_setFeature_0(a1, a3, a4, 10, v81, v61);
      if ((v22 & 0x80000000) != 0)
        goto LABEL_192;
LABEL_147:
      v64 = 0;
      while (strcmp(*(const char **)(a3 + 8 * v64), "rpos"))
      {
        if (v21 == ++v64)
          goto LABEL_155;
      }
      v83 = v64;
      if (v82 + 1 >= a6)
        v65 = "=";
      else
        v65 = *(const char **)(a5 + 40 * (v82 + 1) + 8);
      v22 = hlp_igtree_setFeature_0(a1, a3, a4, 11, v81, v65);
      if ((v22 & 0x80000000) != 0)
        goto LABEL_192;
LABEL_155:
      v66 = 0;
      while (strcmp(*(const char **)(a3 + 8 * v66), "rrpos"))
      {
        if (v21 == ++v66)
        {
          a2 = v81;
          a7 = v82;
          goto LABEL_9;
        }
      }
      v83 = v66;
      a7 = v82;
      if (v82 + 2 >= a6)
        v67 = "=";
      else
        v67 = *(const char **)(a5 + 40 * (v82 + 2) + 8);
      a2 = v81;
      v22 = hlp_igtree_setFeature_0(a1, a3, a4, 12, v81, v67);
      if ((v22 & 0x80000000) != 0)
        goto LABEL_192;
    }
LABEL_9:
    if (!hlp_igtree_isFeatureRequired_0(a3, a4, 13, &v83)
      || (v23 = feat_char(a5, a7, 0, v19),
          v22 = hlp_igtree_setFeature_0(a1, a3, a4, 13, a2, v23),
          (v22 & 0x80000000) == 0))
    {
      if (!hlp_igtree_isFeatureRequired_0(a3, a4, 15, &v83)
        || (v24 = feat_char(a5, a7, 1, v19),
            v22 = hlp_igtree_setFeature_0(a1, a3, a4, 15, a2, v24),
            (v22 & 0x80000000) == 0))
      {
        if (!hlp_igtree_isFeatureRequired_0(a3, a4, 14, &v83)
          || (v25 = feat_char(a5, a7, -1, v19),
              v22 = hlp_igtree_setFeature_0(a1, a3, a4, 14, a2, v25),
              (v22 & 0x80000000) == 0))
        {
          if (!hlp_igtree_isFeatureRequired_0(a3, a4, 16, &v83)
            || (v26 = feat_char(a5, a7, -2, v19),
                v22 = hlp_igtree_setFeature_0(a1, a3, a4, 16, a2, v26),
                (v22 & 0x80000000) == 0))
          {
            if (!hlp_igtree_isFeatureRequired_0(a3, a4, 17, &v83))
              goto LABEL_196;
            if (a7)
            {
              v27 = a7;
              v28 = "=";
              while (v27 != 1)
              {
                v29 = v27 - 2;
                v30 = **(unsigned __int8 **)(a5 + 40 * (v27-- - 2) + 8);
                if (v30 == 110)
                {
                  v28 = *(const char **)(a5 + 40 * v29);
                  break;
                }
              }
            }
            else
            {
              v28 = "=";
            }
            v22 = hlp_igtree_setFeature_0(a1, a3, a4, 17, a2, v28);
            if ((v22 & 0x80000000) == 0)
            {
LABEL_196:
              if (!hlp_igtree_isFeatureRequired_0(a3, a4, 18, &v83))
                goto LABEL_197;
              if (a7)
              {
                v46 = a7;
                v47 = "=";
                while (v46 != 1)
                {
                  v48 = v46 - 2;
                  v49 = **(unsigned __int8 **)(a5 + 40 * (v46-- - 2) + 8);
                  if (v49 == 118)
                  {
                    v47 = *(const char **)(a5 + 40 * v48);
                    break;
                  }
                }
              }
              else
              {
                v47 = "=";
              }
              v22 = hlp_igtree_setFeature_0(a1, a3, a4, 18, a2, v47);
              if ((v22 & 0x80000000) == 0)
              {
LABEL_197:
                if (!hlp_igtree_isFeatureRequired_0(a3, a4, 19, &v83))
                  goto LABEL_198;
                v50 = "=";
                v51 = a7;
                while (a6 > ++v51)
                {
                  if (**(_BYTE **)(a5 + 40 * v51 + 8) == 110)
                  {
                    v50 = *(const char **)(a5 + 40 * v51);
                    break;
                  }
                }
                v22 = hlp_igtree_setFeature_0(a1, a3, a4, 19, a2, v50);
                if ((v22 & 0x80000000) == 0)
                {
LABEL_198:
                  if (!hlp_igtree_isFeatureRequired_0(a3, a4, 19, &v83))
                    goto LABEL_199;
                  v52 = "=";
                  v53 = a7;
                  while (a6 > ++v53)
                  {
                    if (**(_BYTE **)(a5 + 40 * v53 + 8) == 118)
                    {
                      v52 = *(const char **)(a5 + 40 * v53);
                      break;
                    }
                  }
                  v22 = hlp_igtree_setFeature_0(a1, a3, a4, 20, a2, v52);
                  if ((v22 & 0x80000000) == 0)
                  {
LABEL_199:
                    if (!hlp_igtree_isFeatureRequired_0(a3, a4, 21, &v83)
                      || (a7 >= a6
                        ? (v55 = "=")
                        : ((v19[1] = 0, *(unsigned __int16 *)(a5 + 40 * a7 + 26) > 5u) ? (v54 = 48) : (v54 = 49),
                           *v19 = v54,
                           v55 = v19),
                          v22 = hlp_igtree_setFeature_0(a1, a3, a4, 21, a2, v55),
                          (v22 & 0x80000000) == 0))
                    {
                      if (!hlp_igtree_isFeatureRequired_0(a3, a4, 22, &v83)
                        || (a7 >= a6
                          ? (v59 = "=")
                          : ((v19[1] = 0, *(unsigned __int16 *)(a5 + 40 * a7 + 26) < 2u) ? (v58 = 48) : (v58 = 49),
                             *v19 = v58,
                             v59 = v19),
                            v22 = hlp_igtree_setFeature_0(a1, a3, a4, 22, a2, v59),
                            (v22 & 0x80000000) == 0))
                      {
                        if (!hlp_igtree_isFeatureRequired_0(a3, a4, 23, &v83)
                          || (a7 - 1 >= a6
                            ? (v63 = "=")
                            : ((v19[1] = 0, *(unsigned __int16 *)(a5 + 40 * (a7 - 1) + 26) > 5u)
                             ? (v62 = 48)
                             : (v62 = 49),
                               *v19 = v62,
                               v63 = v19),
                              v22 = hlp_igtree_setFeature_0(a1, a3, a4, 23, a2, v63),
                              (v22 & 0x80000000) == 0))
                        {
                          if (!hlp_igtree_isFeatureRequired_0(a3, a4, 24, &v83)
                            || (a7 - 1 >= a6
                              ? (v69 = "=")
                              : ((v19[1] = 0, *(unsigned __int16 *)(a5 + 40 * (a7 - 1) + 26) < 2u)
                               ? (v68 = 48)
                               : (v68 = 49),
                                 *v19 = v68,
                                 v69 = v19),
                                v22 = hlp_igtree_setFeature_0(a1, a3, a4, 24, a2, v69),
                                (v22 & 0x80000000) == 0))
                          {
                            if (!hlp_igtree_isFeatureRequired_0(a3, a4, 25, &v83)
                              || (a7 + 1 >= a6
                                ? (v71 = "=")
                                : ((v19[1] = 0, *(unsigned __int16 *)(a5 + 40 * (a7 + 1) + 26) > 5u)
                                 ? (v70 = 48)
                                 : (v70 = 49),
                                   *v19 = v70,
                                   v71 = v19),
                                  v22 = hlp_igtree_setFeature_0(a1, a3, a4, 25, a2, v71),
                                  (v22 & 0x80000000) == 0))
                            {
                              if (!hlp_igtree_isFeatureRequired_0(a3, a4, 26, &v83)
                                || (a7 + 1 >= a6
                                  ? (v76 = "=")
                                  : ((v19[1] = 0, *(unsigned __int16 *)(a5 + 40 * (a7 + 1) + 26) < 2u)
                                   ? (v75 = 48)
                                   : (v75 = 49),
                                     *v19 = v75,
                                     v76 = v19),
                                    v22 = hlp_igtree_setFeature_0(a1, a3, a4, 26, a2, v76),
                                    (v22 & 0x80000000) == 0))
                              {
                                v77 = 0;
                                v78 = v83;
                                do
                                  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"igtree feature %s", v72, v73, v74, *(_QWORD *)(a2 + 8 * (unsigned __int16)v77++));
                                while (v78 >= (unsigned __int16)v77);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_192:
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v19);
    return v22;
  }
  log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PW", 37000, 0, v15, v16, v17, v18, v80);
  return 2584748042;
}

uint64_t hlp_igtree_isFeatureRequired_0(uint64_t a1, unsigned int a2, int a3, _WORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;

  if (a2 < 2)
    return 0;
  v6 = 0;
  v7 = a2 - 1;
  v8 = g_featureNames_4[a3];
  while (strcmp(*(const char **)(a1 + 8 * v6), v8))
  {
    if (v7 == ++v6)
      return 0;
  }
  *a4 = v6;
  return 1;
}

uint64_t hlp_igtree_setFeature_0(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, const char *a6)
{
  uint64_t result;
  size_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int16 v18;

  v18 = -1;
  result = hlp_igtree_isFeatureRequired_0(a2, a3, a4, &v18);
  if ((_DWORD)result)
  {
    if (!*a6)
    {
      result = 0;
      **(_WORD **)(a5 + 8 * v18) = 61;
      return result;
    }
    v10 = strlen(a6);
    v11 = v18;
    if (v10 <= 0x40)
    {
      v12 = *(char **)(a5 + 8 * v18);
      goto LABEL_8;
    }
    v12 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)(a5 + 8 * v18), (v10 + 1));
    if (v12)
    {
      *(_QWORD *)(a5 + 8 * v11) = v12;
LABEL_8:
      strcpy(v12, a6);
      return 0;
    }
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PW", 37000, 0, v13, v14, v15, v16, v17);
    return 2584748042;
  }
  return result;
}

uint64_t feat_wordlength_0(uint64_t result, unsigned int a2, int a3, int a4, char *a5)
{
  *a5 = 0;
  if (a4 + a3 < a2)
    return sprintf(a5, "%d", *(unsigned __int16 *)(result + 40 * (a4 + a3) + 26));
  *(_WORD *)a5 = 61;
  return result;
}

uint64_t pw_dag_process(uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, uint64_t a8, unsigned __int16 a9, unsigned int *a10, unsigned int a11, uint64_t *a12, unsigned __int16 *a13)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _WORD *v32;
  uint64_t v33;
  char *v34;
  int v35;
  __int16 v36;
  const char *v37;
  unsigned int v38;
  unsigned __int16 v39;
  uint64_t v40;
  unsigned int v41;
  _DWORD *v42;
  unint64_t rules;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  int v48;
  uint64_t v49;
  int v50;
  unsigned __int16 *v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  unsigned __int16 v57;
  uint64_t v58;
  unsigned int v59;
  _DWORD *v60;
  char *v61;
  size_t v62;
  size_t v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  unsigned __int16 v69;
  uint64_t v70;
  unsigned int v71;
  _DWORD *v72;
  int v73;
  unsigned int *v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  int v79;
  __int16 v80;
  int v81;
  unsigned __int16 v82;
  unsigned __int16 v83;
  unsigned int v84;
  uint64_t inserted;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int16 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *i;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _WORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int16 *v120;
  int v121;
  unsigned int v122;
  unsigned __int16 v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  unsigned int v128;
  unsigned __int16 *v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  __int16 v148;
  uint64_t v149;
  __int16 v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned __int16 *v160;
  int v161;
  unsigned int v164;
  uint64_t v165;
  const char **v166;
  _WORD *v167;
  int v168;
  int v169;
  int v170;
  uint64_t v171;

  v18 = heap_Alloc(*(_QWORD *)(a1 + 8), 24);
  if (!v18)
  {
    v95 = 2584748042;
    v96 = *(_QWORD *)(a1 + 32);
LABEL_78:
    log_OutPublic(v96, (uint64_t)"FE_PW", 37000, 0, v19, v20, v21, v22, v158);
    return v95;
  }
  v23 = (unsigned __int16 *)v18;
  *(_WORD *)(v18 + 8) = a9 + 1;
  v24 = a6 - 1;
  if (a6 - 1 <= 1)
    v24 = 1;
  *(_DWORD *)(v18 + 12) = a5;
  *(_DWORD *)(v18 + 16) = v24;
  v25 = heap_Alloc(*(_QWORD *)(a1 + 8), 16 * (unsigned __int16)(a9 + 1));
  *(_QWORD *)v23 = v25;
  v30 = a1;
  if (!v25)
  {
    v95 = 2584748042;
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PW", 37000, 0, v26, v27, v28, v29, v158);
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v23);
    return v95;
  }
  v31 = v23[4];
  if (v23[4])
  {
    v32 = (_WORD *)(v25 + 12);
    do
    {
      *(_QWORD *)(v32 - 6) = 0;
      *((_DWORD *)v32 - 1) = -2147483647;
      *v32 = -1;
      v32 += 8;
      --v31;
    }
    while (v31);
  }
  v33 = heap_Alloc(*(_QWORD *)(a1 + 8), a4 + 11);
  if (!v33)
  {
    v95 = 2584748042;
    v96 = *(_QWORD *)(a1 + 32);
    goto LABEL_78;
  }
  v34 = (char *)v33;
  v165 = a1;
  v160 = v23;
  if (!a9)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v33);
LABEL_81:
    if (!*(_QWORD *)v23)
      return 2584748039;
    v98 = (__int16)v23[4];
    v99 = v23[4];
    *(_DWORD *)(*(_QWORD *)v23 + 8) = 0;
    log_OutText(*(_QWORD *)(v30 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"[DAG]: All possible path, <vertex_from: vertex_to>: weight, accumulated weight", v92, v93, v94, v158);
    if (v98 >= 1)
    {
      v103 = 0;
      v104 = *(_QWORD *)v23;
      do
      {
        for (i = *(uint64_t **)(v104 + 16 * v103); i; i = (uint64_t *)*i)
        {
          v106 = *((unsigned int *)i + 3);
          v107 = *((_DWORD *)i + 4) + *(_DWORD *)(v104 + 16 * v103 + 8);
          log_OutText(*(_QWORD *)(v30 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"<%d: %d>: %d, %d", v100, v101, v102, v103);
          v104 = *(_QWORD *)v23;
          v108 = *(_QWORD *)v23 + 16 * v106;
          if (v107 > *(_DWORD *)(v108 + 8))
          {
            *(_DWORD *)(v108 + 8) = v107;
            *(_WORD *)(v108 + 12) = v103;
          }
        }
        ++v103;
      }
      while (v103 != v99);
    }
    v109 = heap_Alloc(*(_QWORD *)(v30 + 8), 16);
    if (!v109)
      goto LABEL_121;
    v114 = v109;
    v115 = (_WORD *)heap_Alloc(*(_QWORD *)(v30 + 8), 2 * v99);
    *(_QWORD *)v114 = v115;
    if (!v115)
    {
      log_OutPublic(*(_QWORD *)(v30 + 32), (uint64_t)"FE_PW", 37000, 0, v116, v117, v118, v119, v159);
      if (*(_QWORD *)v114)
      {
        heap_Free(*(_QWORD **)(v30 + 8), *(_QWORD *)v114);
        *(_QWORD *)v114 = 0;
      }
      heap_Free(*(_QWORD **)(v30 + 8), v114);
      return 2584748042;
    }
    v120 = a13;
    *(_WORD *)(v114 + 8) = 0;
    v121 = (__int16)(v99 - 1);
    *v115 = v99 - 1;
    v122 = *(unsigned __int16 *)(v114 + 8);
    v123 = v122 + 1;
    *(_WORD *)(v114 + 8) = v122 + 1;
    if (v121 >= 1)
    {
      v124 = *(_QWORD *)v23;
      do
      {
        v121 = *(__int16 *)(v124 + 16 * (unsigned __int16)v121 + 12);
        v115[v123] = v121;
        v122 = *(unsigned __int16 *)(v114 + 8);
        v123 = v122 + 1;
        *(_WORD *)(v114 + 8) = v122 + 1;
      }
      while (v121 > 0);
    }
    *a13 = v122;
    v125 = heap_Calloc(*(_QWORD **)(v30 + 8), v122, 16);
    *a12 = v125;
    if (!v125)
    {
LABEL_121:
      log_OutPublic(*(_QWORD *)(v30 + 32), (uint64_t)"FE_PW", 37000, 0, v110, v111, v112, v113, v159);
      return 2584748042;
    }
    v126 = *a13;
    if (!*a13)
    {
LABEL_111:
      heap_Free(*(_QWORD **)(v165 + 8), *(_QWORD *)v114);
      heap_Free(*(_QWORD **)(v165 + 8), v114);
      v152 = *(_QWORD *)v23;
      if (*(_QWORD *)v23)
      {
        v153 = v23[4];
        if (v23[4])
        {
          v154 = 0;
          do
          {
            v155 = *(_QWORD **)(*(_QWORD *)v23 + 16 * v154);
            if (v155)
            {
              do
              {
                v156 = (_QWORD *)*v155;
                heap_Free(*(_QWORD **)(v165 + 8), (uint64_t)v155);
                v155 = v156;
              }
              while (v156);
            }
            ++v154;
          }
          while (v154 != v153);
          v152 = *(_QWORD *)v23;
        }
      }
      heap_Free(*(_QWORD **)(v165 + 8), v152);
      heap_Free(*(_QWORD **)(v165 + 8), (uint64_t)v23);
      return 0;
    }
    v127 = v125;
    v128 = 0;
    while (1)
    {
      v129 = (unsigned __int16 *)(*(_QWORD *)v114 + 2 * (int)(v126 - v128));
      v130 = *(v129 - 1);
      v131 = *v129;
      LOWORD(v132) = v130 - v131;
      v133 = heap_Alloc(*(_QWORD *)(v165 + 8), 2 * (unsigned __int16)(v130 - v131));
      if (!v133)
      {
        log_OutPublic(*(_QWORD *)(v165 + 32), (uint64_t)"FE_PW", 37000, 0, v134, v135, v136, v137, v159);
        if (*a12)
        {
          heap_Free(*(_QWORD **)(v165 + 8), *a12);
          *a12 = 0;
        }
        return 2584748042;
      }
      v138 = v133;
      *(_WORD *)(v127 + 8) = v132;
      *(_QWORD *)v127 = v133;
      log_OutText(*(_QWORD *)(v165 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"Orthography is: ", v135, v136, v137, v159);
      if (v130 == v131)
      {
        v145 = (const char *)heap_Calloc(*(_QWORD **)(v165 + 8), 1, 1000);
        if (!v145)
          goto LABEL_110;
      }
      else
      {
        v146 = 0;
        v170 = (unsigned __int16)v132;
        if ((unsigned __int16)v132 <= 1u)
          v132 = 1;
        else
          v132 = (unsigned __int16)v132;
        do
        {
          v147 = a8 + 40 * (v146 + *(unsigned __int16 *)(*(_QWORD *)v114 + 2 * (int)(*v120 - v128)));
          v148 = *(_WORD *)(v147 + 24);
          log_OutText(*(_QWORD *)(v165 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"    %s [tid: %d, pos: %s]    ", v139, v140, v141, *(_QWORD *)v147);
          *(_WORD *)(v138 + 2 * v146++) = v148;
        }
        while (v132 != v146);
        v149 = heap_Calloc(*(_QWORD **)(v165 + 8), 1, 1000);
        v23 = v160;
        if (!v149)
          goto LABEL_110;
        v145 = (const char *)v149;
        v150 = 0;
        v151 = 0;
        do
        {
          sprintf((char *)&v145[v150], "%d-", *(unsigned __int16 *)(*(_QWORD *)v127 + 2 * (__int16)v151));
          v150 = strlen(v145);
          ++v151;
        }
        while (v170 > (__int16)v151);
        v120 = a13;
      }
      log_OutText(*(_QWORD *)(v165 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"PW [tids:%s, ntok:%d]", v142, v143, v144, (uint64_t)v145);
      heap_Free(*(_QWORD **)(v165 + 8), (uint64_t)v145);
LABEL_110:
      v127 += 16;
      ++v128;
      v126 = *v120;
      if (v128 >= v126)
        goto LABEL_111;
    }
  }
  v35 = 0;
  v36 = 0;
  do
  {
    v168 = v36;
    v166 = (const char **)(a8 + 40 * v36);
    v37 = *v166;
    if (strlen(*v166) <= 5 && strcmp(*(const char **)(a8 + 40 * v168 + 16), "latin"))
    {
      v38 = *(_DWORD *)(a7 + 1024);
      if (v38)
      {
        v39 = 0;
        v40 = a8 + 40 * v168;
        v41 = *(_DWORD *)(v40 + 28);
        v42 = (_DWORD *)(v40 + 32);
        while (*(_DWORD *)(a7 + 4 * v39) > v41 || *v42 > *(_DWORD *)(a7 + 4 * v39 + 512))
        {
          if (v38 <= ++v39)
            goto LABEL_18;
        }
      }
      else
      {
LABEL_18:
        rules = pw_get_rules(a2, a3, (uint64_t)v37);
        if (rules)
        {
          v169 = *(unsigned __int16 *)(rules + 8);
          if (*(_WORD *)(rules + 8))
          {
            v47 = 0;
            v171 = *(_QWORD *)(rules + 16);
            v161 = v35 + 1;
            do
            {
              v48 = v47;
              v49 = v171 + 40 * v47;
              *v34 = 0;
              v51 = (unsigned __int16 *)(v49 + 36);
              v50 = *(unsigned __int16 *)(v49 + 36);
              if (v35 >= v50)
              {
                v167 = (_WORD *)(v171 + 40 * v48 + 38);
                if (a9 - v35 > (unsigned __int16)*v167)
                {
                  if (*(_WORD *)(v49 + 36))
                  {
                    v52 = 0;
                    v53 = 0;
                    v54 = a8;
                    while (1)
                    {
                      v55 = v52 + v35 - v50;
                      if (!strcmp(*(const char **)(v54 + 40 * v55 + 16), "latin"))
                        break;
                      v56 = *(_DWORD *)(a7 + 1024);
                      if (v56)
                      {
                        v57 = 0;
                        v58 = a8 + 40 * v55;
                        v59 = *(_DWORD *)(v58 + 28);
                        v60 = (_DWORD *)(v58 + 32);
                        while (*(_DWORD *)(a7 + 4 * v57) > v59 || *v60 > *(_DWORD *)(a7 + 4 * v57 + 512))
                        {
                          if (v56 <= ++v57)
                            goto LABEL_31;
                        }
                        break;
                      }
LABEL_31:
                      v61 = strcat(v34, *(const char **)(a8 + 40 * v55 + 8));
                      v62 = strlen(v61);
                      v54 = a8;
                      *(_WORD *)&v34[v62] = 45;
                      v52 = (__int16)++v53;
                      v50 = *v51;
                      if ((__int16)v53 >= v50)
                        goto LABEL_34;
                    }
                  }
                  else
                  {
                    v54 = a8;
LABEL_34:
                    v164 = *(unsigned __int16 *)(v54 + 40 * (v35 - v50) + 28);
                    v63 = strlen(v34);
                    if (!strncmp(v34, (const char *)v49, v63))
                    {
                      strcat(v34, *v166);
                      if (*v167)
                      {
                        v64 = 0;
                        v65 = 0;
                        v66 = a8;
                        while (1)
                        {
                          v67 = v161 + v64;
                          if (!strcmp(*(const char **)(v66 + 40 * (v161 + v64) + 16), "latin"))
                            break;
                          v68 = *(_DWORD *)(a7 + 1024);
                          if (v68)
                          {
                            v69 = 0;
                            v70 = a8 + 40 * v67;
                            v71 = *(_DWORD *)(v70 + 28);
                            v72 = (_DWORD *)(v70 + 32);
                            while (*(_DWORD *)(a7 + 4 * v69) > v71 || *v72 > *(_DWORD *)(a7 + 4 * v69 + 512))
                            {
                              if (v68 <= ++v69)
                                goto LABEL_45;
                            }
                            break;
                          }
LABEL_45:
                          *(_WORD *)&v34[strlen(v34)] = 45;
                          v66 = a8;
                          strcat(v34, *(const char **)(a8 + 40 * v67 + 8));
                          v64 = (__int16)++v65;
                          v73 = (unsigned __int16)*v167;
                          if ((__int16)v65 >= v73)
                            goto LABEL_48;
                        }
                      }
                      else
                      {
                        v73 = 0;
LABEL_48:
                        if (!strcmp(v34, (const char *)v49))
                        {
                          if (a11)
                          {
                            v74 = a10;
                            v75 = a11;
                            while (1)
                            {
                              v77 = *v74++;
                              v76 = v77;
                              if (v77 > v164 && v76 < *(unsigned __int16 *)(a8 + 40 * (v73 + v35) + 32))
                                break;
                              if (!--v75)
                                goto LABEL_57;
                            }
                          }
                          else
                          {
LABEL_57:
                            v79 = *v51;
                            v80 = v168 - v79;
                            v81 = v35 + (__int16)v73;
                            if (v81 >= (__int16)(v168 - v79))
                            {
                              v83 = 0;
                              v82 = 0;
                              do
                              {
                                v84 = *(unsigned __int16 *)(a8 + 40 * v80 + 26);
                                v82 += v84;
                                if (v84 > 1)
                                  ++v83;
                                ++v80;
                              }
                              while (v81 >= v80);
                            }
                            else
                            {
                              v82 = 0;
                              v83 = 0;
                            }
                            if (v83 <= 1u && v82 <= 5u)
                            {
                              inserted = dag_insert_edge(v165, (uint64_t *)v160, (unsigned __int16)v168 - v79, (unsigned __int16)v168 + 1 + v73, *(unsigned int *)(v171 + 40 * v48 + 32));
                              if ((inserted & 0x80000000) != 0)
                              {
                                v157 = inserted;
                                heap_Free(*(_QWORD **)(v165 + 8), (uint64_t)v34);
                                return v157;
                              }
                              log_OutText(*(_QWORD *)(v165 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"%s Matches rule %s with weight %d, and insert edges between point %d and %d", v87, v88, v89, (uint64_t)*v166);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              v47 = v48 + 1;
            }
            while (v169 > (__int16)(v48 + 1));
          }
        }
        else
        {
          log_OutText(*(_QWORD *)(v165 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"Warning: Can't find rules for the character %s", v44, v45, v46, (uint64_t)*v166);
        }
      }
    }
    v36 = v168 + 1;
    v35 = (__int16)(v168 + 1);
  }
  while (v35 < a9);
  v30 = v165;
  heap_Free(*(_QWORD **)(v165 + 8), (uint64_t)v34);
  v90 = 0;
  v23 = v160;
  while (1)
  {
    v91 = dag_insert_edge(v165, (uint64_t *)v160, v90, v90 + 1, *((unsigned int *)v160 + 4));
    if ((v91 & 0x80000000) != 0)
      return v91;
    if (a9 <= (__int16)++v90)
      goto LABEL_81;
  }
}

uint64_t pw_weather_word_in_prompt(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v3;
  unsigned __int16 v4;

  *a3 = 0;
  v3 = *(_DWORD *)(a1 + 1024);
  if (v3)
  {
    v4 = 0;
    while (*(_DWORD *)(a1 + 4 * v4) > *(_DWORD *)(a2 + 28) || *(_DWORD *)(a2 + 32) > *(_DWORD *)(a1 + 4 * v4 + 512))
    {
      if (v3 <= ++v4)
        return 0;
    }
    *a3 = 1;
  }
  return 0;
}

uint64_t dag_insert_edge(uint64_t a1, uint64_t *a2, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;

  v10 = heap_Alloc(*(_QWORD *)(a1 + 8), 24);
  if (v10)
  {
    v15 = v10;
    *(_DWORD *)(v10 + 8) = a3;
    *(_DWORD *)(v10 + 12) = a4;
    v16 = uint32_log2(a5);
    v17 = uint32_log2(*((unsigned int *)a2 + 3));
    result = 0;
    *(_DWORD *)(v15 + 16) = v16 - v17;
    v19 = *a2;
    v20 = 16 * a3;
    *(_QWORD *)v15 = *(_QWORD *)(*a2 + v20);
    *(_QWORD *)(v19 + v20) = v15;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PW", 37000, 0, v11, v12, v13, v14, v21);
    return 2584748042;
  }
  return result;
}

uint64_t BSCompareUtf8ChineseChar(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;

  v4 = utf8_determineUTF8CharLength(*a1);
  v5 = utf8_determineUTF8CharLength(*a2);
  if (v4 != v5)
    return v4 - v5;
  if (!v4)
    return 0;
  v6 = 0;
  while (1)
  {
    v7 = a1[v6];
    v8 = a2[v6];
    result = (v7 - v8);
    if (v7 != v8)
      break;
    if (++v6 >= v4)
      return 0;
  }
  return result;
}

unint64_t pw_get_rules(unint64_t a1, unsigned int a2, uint64_t a3)
{
  return ssft_bsearch(a3, a1, a2, 32, (uint64_t (*)(uint64_t, unint64_t))BSCompareUtf8ChineseChar);
}

uint64_t GetRulesFromRiffData(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t *a5, unsigned int *a6, unsigned __int16 *a7, _DWORD *a8, unsigned int *a9, uint64_t *a10, unsigned __int8 *a11)
{
  unsigned int v19;
  char *v20;
  const char *v21;
  char *v22;
  char *v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int16 v39;
  char *v40;
  unsigned __int16 v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned __int16 v53;
  char *v54;
  _WORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int16 v62;
  unsigned __int16 v63;
  uint64_t v64;
  const char *v65;
  int v66;
  unsigned __int16 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int16 v71;
  unsigned int v72;
  unsigned __int8 v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  int *v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  unsigned int v86;
  unint64_t v87;
  uint64_t v88;
  unsigned int v90;
  _WORD *v91;
  unsigned __int16 *v92;
  uint64_t v93;
  uint64_t *v94;
  _DWORD *v95;
  uint64_t *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned __int16 *v99;
  unsigned int *v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  char __s[16];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _OWORD v121[2];
  _OWORD v122[2];
  _BYTE __dst[40];
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  memset(__dst, 0, 32);
  memset(v122, 0, sizeof(v122));
  v104 = 0;
  memset(v121, 0, sizeof(v121));
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  v107 = 0u;
  v108 = 0u;
  *(_OWORD *)__s = 0u;
  v106 = 0u;
  *a7 = 0;
  *a8 = 0;
  *a9 = 10000;
  *a11 = 0;
  ssftriff_reader_ReadStringZ(a2, a3, a4, 0, 0, &v104);
  v102 = a2;
  v103 = a3;
  ssftriff_reader_ReadStringZ(a2, a3, a4, 0, __s, &v104);
  v19 = v104;
  v20 = strchr(__s, 9);
  if (!v20)
    return 0;
  v101 = a4;
  v21 = v20 + 1;
  v22 = strchr(v20 + 1, 9);
  if (!v22)
    return 0;
  v23 = v22;
  v99 = a7;
  *v22 = 0;
  v24 = atoi(v21);
  *a11 = v24;
  v25 = heap_Calloc(*(_QWORD **)(a1 + 8), v24, 8);
  *a10 = v25;
  if (!v25)
  {
    v81 = 2584748042;
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PW", 37000, 0, v26, v27, v28, v29, v90);
    return v81;
  }
  v30 = v25;
  v95 = a8;
  v96 = a5;
  v100 = a6;
  if (!*a11)
  {
LABEL_8:
    v43 = v102;
    v42 = v103;
    v44 = v101;
    ssftriff_reader_ReadStringZ(v102, v103, v101, v19, 0, &v104);
    ssftriff_reader_ReadStringZ(v102, v103, v101, v19, __dst, &v104);
    v45 = v104 + v19;
    v104 = 0;
    ssftriff_reader_ReadStringZ(v102, v103, v101, v45, 0, &v104);
    ssftriff_reader_ReadStringZ(v102, v103, v101, v45, v122, &v104);
    v46 = v104;
    v47 = atoi((const char *)v122);
    v48 = v100;
    *v100 = v47;
    v98 = heap_Calloc(*(_QWORD **)(a1 + 8), v47, 32);
    if (!v98)
      goto LABEL_45;
    if (!*v100)
      goto LABEL_42;
    v49 = v46 + v45;
    v50 = 0;
LABEL_11:
    v104 = 0;
    ssftriff_reader_ReadStringZ(v43, v42, v44, v49, 0, &v104);
    ssftriff_reader_ReadStringZ(v43, v42, v44, v49, v121, &v104);
    v51 = v49;
    v52 = v104;
    v53 = atoi((const char *)v121);
    v93 = v50;
    v54 = (char *)(v98 + 32 * v50);
    *((_WORD *)v54 + 4) = v53;
    v55 = v54 + 8;
    v56 = heap_Calloc(*(_QWORD **)(a1 + 8), v53, 40);
    *((_QWORD *)v54 + 2) = v56;
    v94 = (uint64_t *)(v54 + 16);
    if (!v56)
    {
      v81 = 2584748042;
      log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PW", 37000, 0, v57, v58, v59, v60, v90);
LABEL_47:
      v82 = a10;
      v83 = *v48;
      if ((_DWORD)v83)
      {
        v84 = 0;
        v85 = (uint64_t *)(v98 + 16);
        do
        {
          if (*v85)
          {
            heap_Free(*(_QWORD **)(a1 + 8), *v85);
            *v85 = 0;
            v83 = *v48;
          }
          ++v84;
          v85 += 4;
        }
        while (v84 < v83);
      }
      heap_Free(*(_QWORD **)(a1 + 8), v98);
      goto LABEL_53;
    }
    v97 = v52 + v51;
    *((_DWORD *)v54 + 6) = 0;
    *(_DWORD *)v54 = 0;
    v54[4] = 0;
    if (!*v55)
      goto LABEL_41;
    v61 = 0;
    v92 = (unsigned __int16 *)(v54 + 26);
    v91 = v54 + 24;
LABEL_14:
    v104 = 0;
    ssftriff_reader_ReadStringZ(v43, v42, v101, v97, 0, &v104);
    ssftriff_reader_ReadStringZ(v43, v42, v101, v97, (_BYTE *)(*v94 + 40 * v61), &v104);
    v62 = 0;
    v63 = 0;
    v97 += v104;
    v64 = *v94;
    *(_QWORD *)(*v94 + 40 * v61 + 32) = 0;
    while (1)
    {
      v65 = (const char *)(v64 + 40 * v61 + v63);
      v66 = *(unsigned __int8 *)v65;
      if (v66 == 45)
        break;
      if (!*v65)
      {
        v63 = 0;
        goto LABEL_32;
      }
      if (v66 == 9)
      {
        *(_DWORD *)(v64 + 40 * v61 + 32) = atoi(v65 + 1);
        *v65 = 0;
        v64 = *v94;
LABEL_32:
        v75 = v64 + 40 * v61;
        *(_WORD *)(v75 + 38) = v62;
        v76 = *(unsigned __int16 *)(v75 + 36);
        if ((unsigned __int16)*v91 < v76)
          *v91 = v76;
        if (*v92 < v62)
          *v92 = v62;
        if (*v99 < v63)
          *v99 = v63;
        v48 = v100;
        v77 = v64 + 40 * v61;
        v80 = *(_DWORD *)(v77 + 32);
        v79 = (int *)(v77 + 32);
        v78 = v80;
        if (*a9 > v80)
        {
          *a9 = v78;
          v78 = *v79;
        }
        v43 = v102;
        v42 = v103;
        *v95 += v78;
        if (++v61 < (unint64_t)(unsigned __int16)*v55)
          goto LABEL_14;
LABEL_41:
        v50 = v93 + 1;
        v49 = v97;
        v44 = v101;
        if (v93 + 1 >= (unint64_t)*v48)
        {
LABEL_42:
          v81 = 0;
          *v96 = v98;
          return v81;
        }
        goto LABEL_11;
      }
      if ((v66 & 0xFFFFFFDF) - 65 < 0x1A)
        goto LABEL_26;
      *(_WORD *)(v64 + 40 * v61 + 36) = v62;
      v67 = utf8_determineUTF8CharLength(*(unsigned __int8 *)v65);
      v71 = v67;
      if (v61)
      {
        v64 = *v94;
        if (v67)
        {
          v72 = 0;
          v73 = 0;
          v48 = v100;
          while (1)
          {
            v74 = v54[v73];
            if ((_DWORD)v74 != *(unsigned __int8 *)(v64 + 40 * v61 + v72 + (unint64_t)v63))
              break;
            v72 = ++v73;
            if (v67 <= v73)
              goto LABEL_28;
          }
          log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"the Chinese Character %s in %d rule: %d is not same", v68, v69, v70, v74);
          v81 = 2584748060;
          goto LABEL_47;
        }
      }
      else
      {
        memcpy(v54, (const void *)(*v94 + v63), v67);
        v64 = *v94;
      }
LABEL_28:
      v62 = 0;
LABEL_29:
      v63 += v71;
    }
    ++v62;
LABEL_26:
    v71 = 1;
    goto LABEL_29;
  }
  v31 = 0;
  v32 = 0;
  v33 = v23 + 1;
  while (1)
  {
    v34 = heap_Calloc(*(_QWORD **)(a1 + 8), 8, 1);
    *(_QWORD *)(v30 + 8 * v31) = v34;
    if (!v34)
      break;
    v39 = v32;
    v40 = &v33[v32];
    v41 = utf8_determineUTF8CharLength(*v40);
    memcpy(*(void **)(v30 + 8 * v31), v40, v41);
    *(_BYTE *)(v41 + *(_QWORD *)(v30 + 8 * v31) + 1) = 0;
    v32 = v39 + v41;
    if (++v31 >= (unint64_t)*a11)
      goto LABEL_8;
  }
LABEL_45:
  v81 = 2584748042;
  log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PW", 37000, 0, v35, v36, v37, v38, v90);
  v82 = a10;
LABEL_53:
  v86 = *a11;
  if (*a11)
  {
    v87 = 0;
    do
    {
      v88 = *(_QWORD *)(v30 + 8 * v87);
      if (v88)
      {
        heap_Free(*(_QWORD **)(a1 + 8), v88);
        v86 = *a11;
      }
      ++v87;
    }
    while (v87 < v86);
  }
  heap_Free(*(_QWORD **)(a1 + 8), v30);
  *v82 = 0;
  return v81;
}

uint64_t fe_wmp_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2587893761;
  result = 0;
  *a2 = &IFeWmp;
  return result;
}

uint64_t fe_wmp_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Object;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v25[16];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  v24 = 0;
  v5 = 2587893767;
  v22 = 0;
  memset(v25, 0, sizeof(v25));
  if (a5)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v24);
    if ((inited & 0x80000000) == 0)
    {
      v10 = heap_Calloc(*(_QWORD **)(v24 + 8), 1, 168);
      if (v10)
      {
        v15 = v10;
        Object = objc_GetObject(*(_QWORD *)(v24 + 48), (uint64_t)"LINGDB", &v23);
        if ((Object & 0x80000000) != 0)
          goto LABEL_10;
        *(_QWORD *)(v15 + 24) = *(_QWORD *)(v23 + 8);
        Object = objc_GetObject(*(_QWORD *)(v24 + 48), (uint64_t)"FE_DCTLKP", &v22);
        if ((Object & 0x80000000) != 0)
          goto LABEL_10;
        v17 = v22;
        *(_QWORD *)(v15 + 56) = *(_QWORD *)(v22 + 8);
        *(_OWORD *)(v15 + 64) = *(_OWORD *)(v17 + 16);
        v18 = v24;
        *(_QWORD *)v15 = v24;
        *(_QWORD *)(v15 + 8) = a3;
        *(_QWORD *)(v15 + 16) = a4;
        Object = fe_wmp_CreateVoiceBrokerString(v18, (char *)v25);
        if ((Object & 0x80000000) != 0)
        {
LABEL_10:
          v5 = Object;
        }
        else
        {
          v5 = fe_wmp_tryLoadingWmpModel(*(_WORD **)(v15 + 8), *(_QWORD *)(v15 + 16), *(_QWORD *)v15, (char **)(v15 + 32));
          if ((v5 & 0x80000000) == 0)
          {
            v19 = 62342;
LABEL_13:
            *(_QWORD *)a5 = v15;
            *(_DWORD *)(a5 + 8) = v19;
            return v5;
          }
        }
      }
      else
      {
        log_OutPublic(*(_QWORD *)(v24 + 32), (uint64_t)"FE_WMP", 37000, 0, v11, v12, v13, v14, v21);
        v5 = 2587893770;
      }
      fe_wmp_ObjClose(*(uint64_t **)a5, *(_QWORD *)(a5 + 8));
      v15 = 0;
      v19 = 0;
      goto LABEL_13;
    }
    return inited;
  }
  return v5;
}

uint64_t fe_wmp_ObjClose(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = safeh_HandleCheck((uint64_t)a1, a2, 62342, 168);
  if ((v3 & 0x80000000) != 0)
    return 2587893768;
  v10 = v3;
  if (a1)
  {
    if (a1[3])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"LINGDB");
    if (a1[7])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"FE_DCTLKP");
    v11 = a1[4];
    if (v11)
    {
      igtree_Deinit(*a1, v11, v4, v5, v6, v7, v8, v9);
      heap_Free(*(_QWORD **)(*a1 + 8), a1[4]);
      a1[4] = 0;
    }
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)a1);
  }
  return v10;
}

uint64_t fe_wmp_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t VoiceBrokerString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v13[16];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = 2587893766;
  memset(v13, 0, sizeof(v13));
  if ((safeh_HandleCheck(a1, a2, 62342, 168) & 0x80000000) != 0)
    return 2587893768;
  if (a1)
  {
    VoiceBrokerString = fe_wmp_CreateVoiceBrokerString(*(_QWORD *)a1, (char *)v13);
    if ((VoiceBrokerString & 0x80000000) == 0)
    {
      v11 = *(_QWORD *)(a1 + 32);
      if (v11)
      {
        igtree_Deinit(*(_QWORD *)a1, v11, v5, v6, v7, v8, v9, v10);
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 32));
        *(_QWORD *)(a1 + 32) = 0;
      }
      return fe_wmp_tryLoadingWmpModel(*(_WORD **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)a1, (char **)(a1 + 32));
    }
    return VoiceBrokerString;
  }
  return v3;
}

uint64_t fe_wmp_ProcessStart(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 62342, 168);
  if ((int)result >= 0)
    return result;
  else
    return 2587893768;
}

uint64_t fe_wmp_Process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t Str;
  uint64_t v29;
  size_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  char *__s1;
  int v42;
  _DWORD *v43;
  int v44;
  int v45[2];
  int v46;
  int v47;
  const char *v48;

  v48 = 0;
  v46 = 0;
  v47 = 0;
  *(_QWORD *)v45 = 0;
  v44 = 0;
  v43 = 0;
  v42 = 0;
  v40 = 0;
  __s1 = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *a5 = 1;
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WMP", 5, 0, (uint64_t)"[FE_WORD_MAP]: Entering", a6, a7, a8, v38);
  if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char **))(*(_QWORD *)(a1 + 56) + 256))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fewmp_act_wmp", "no", &__s1) & 0x80000000) != 0)goto LABEL_3;
  v11 = strcmp(__s1, "yes");
  *(_DWORD *)(a1 + 160) = v11 == 0;
  if (v11
    || ((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char **))(*(_QWORD *)(a1 + 56) + 256))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fewmp_late_wmp", "no", &__s1) & 0x80000000) != 0)
  {
    goto LABEL_3;
  }
  *(_DWORD *)(a1 + 164) = strcmp(__s1, "yes") == 0;
  Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"langcode", &v40);
  if ((Str & 0x80000000) != 0)
    return Str;
  v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 24) + 104))(a3, a4, 1, 0, (char *)&v47 + 2);
  if ((v29 & 0x80000000) != 0)
    goto LABEL_3;
  v26 = v29;
  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, int *))(*(_QWORD *)(a1 + 24) + 184))(a3, a4, HIWORD(v47), 0, &v44) & 0x80000000) != 0)return v26;
  if ((unsigned __int16)v44 != 1)
    return v26;
  v26 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, const char **, char *))(*(_QWORD *)(a1 + 24) + 176))(a3, a4, HIWORD(v47), 0, &v48, (char *)&v46 + 2);
  if ((v26 & 0x80000000) != 0)
    return v26;
  if (HIWORD(v46) < 2u)
    return v26;
  v30 = strlen(v48);
  if (!v30)
    return v26;
  v31 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), v30 + 1);
  *(_QWORD *)(a1 + 40) = v31;
  if (!v31)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_WMP", 37000, 0, v32, v33, v34, v35, v39);
    return 2587893770;
  }
  strcpy(v31, v48);
  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *, char *))(*(_QWORD *)(a1 + 24) + 176))(a3, a4, HIWORD(v47), 1, v45, (char *)&v44 + 2) & 0x80000000) != 0)goto LABEL_3;
  v36 = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)a1;
  if ((fe_wmp_getSent(a1, v36, a3, a4, HIWORD(v47), *(char **)(a1 + 40), *(uint64_t *)v45, HIWORD(v44), a1 + 88, (const char *)v40, (uint64_t *)&v43) & 0x80000000) != 0|| (fe_wmp_mapEachWord(a1, &v42) & 0x80000000) != 0|| !v42)
  {
    goto LABEL_3;
  }
  if (*(_DWORD *)(a1 + 164) != 1)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)(a1 + 24) + 104))(a3, a4, 3, HIWORD(v47), &v47) & 0x80000000) != 0|| (fe_wmp_userTNBoundaryAdjust(a1, a3, a4, v43, (unsigned __int16)v47, SHIWORD(v46), v46) & 0x80000000) != 0)
    {
      goto LABEL_3;
    }
    fe_wmp_AdjustMarkers(a1, *(uint64_t *)v45, HIWORD(v44), (const char *)v40);
    goto LABEL_58;
  }
  v12 = v43;
  if ((fe_wmp_userTNBoundaryAdjustLateWMP(a1, a3, a4, v43, HIWORD(v47)) & 0x80000000) != 0)
    goto LABEL_4;
  if ((fe_wmp_adjustWordRecords((_QWORD *)a1, a3, a4) & 0x80000000) == 0)
  {
    fe_wmp_AdjustMarkersLateWMP(a1, *(uint64_t *)v45, HIWORD(v44), (const char *)v40);
LABEL_58:
    v37 = strlen(*(const char **)(a1 + 40));
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, int *))(*(_QWORD *)(a1 + 24) + 160))(a3, a4, HIWORD(v47), 0, (unsigned __int16)(v37 + 1), *(_QWORD *)(a1 + 40), &v46);
  }
LABEL_3:
  v12 = v43;
LABEL_4:
  if (v12)
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v12);
  v13 = *(_QWORD *)(a1 + 96);
  if (v13)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v13);
    *(_QWORD *)(a1 + 96) = 0;
  }
  v14 = *(_QWORD *)(a1 + 88);
  if (v14)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v14);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v15 = *(_QWORD *)(a1 + 104);
  if (v15)
  {
    v16 = *(unsigned __int16 *)(a1 + 136);
    if (*(_WORD *)(a1 + 136))
    {
      v17 = 0;
      do
      {
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v17);
        if (v18)
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v18);
          *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v17) = 0;
          v16 = *(unsigned __int16 *)(a1 + 136);
        }
        ++v17;
      }
      while (v17 < v16);
      v15 = *(_QWORD *)(a1 + 104);
    }
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v15);
    *(_QWORD *)(a1 + 104) = 0;
  }
  v19 = *(_QWORD *)(a1 + 112);
  if (v19)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v19);
    *(_QWORD *)(a1 + 112) = 0;
  }
  v20 = *(_QWORD *)(a1 + 120);
  if (v20)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v20);
    *(_QWORD *)(a1 + 120) = 0;
  }
  v21 = *(_QWORD *)(a1 + 128);
  if (v21)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v21);
    *(_QWORD *)(a1 + 128) = 0;
  }
  v22 = *(_QWORD *)(a1 + 144);
  if (v22)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v22);
    *(_QWORD *)(a1 + 144) = 0;
  }
  v23 = *(_QWORD *)(a1 + 40);
  if (v23)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v23);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v24 = *(_QWORD *)(a1 + 152);
  if (!v24)
    return 0;
  if (*(_WORD *)(a1 + 136))
  {
    v25 = 0;
    do
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v25));
      *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v25++) = 0;
    }
    while (v25 < *(unsigned __int16 *)(a1 + 136));
    v24 = *(_QWORD *)(a1 + 152);
  }
  heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v24);
  v26 = 0;
  *(_QWORD *)(a1 + 152) = 0;
  return v26;
}

uint64_t fe_wmp_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 62342, 168);
  if ((int)result >= 0)
    return result;
  else
    return 2587893768;
}

uint64_t fe_wmp_CreateVoiceBrokerString(uint64_t a1, char *a2)
{
  uint64_t result;
  int v5[2];

  *(_QWORD *)v5 = 0;
  result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"langcode", v5);
  if ((result & 0x80000000) == 0)
    return brokeraux_ComposeBrokerString(a1, "wordmap", 1, 1, *(char **)v5, 0, 0, a2, 0x100uLL);
  return result;
}

uint64_t fe_wmp_tryLoadingWmpModel(_WORD *a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t Str;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v25;
  int v26[2];
  uint64_t v27;
  int v28[2];
  _OWORD v29[16];
  char v30[136];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  memset(v29, 0, 240);
  *(_QWORD *)v26 = 0;
  v27 = 0;
  *a4 = 0;
  *(_QWORD *)v28 = 0;
  memset(v30, 0, 128);
  v29[15] = 0u;
  Str = paramc_ParamGetStr(*(_QWORD *)(a3 + 40), (uint64_t)"langcode", v28);
  if ((Str & 0x80000000) != 0
    || (Str = paramc_ParamGetStr(*(_QWORD *)(a3 + 40), (uint64_t)"fecfg", &v27), (Str & 0x80000000) != 0)
    || (__strcat_chk(),
        Str = brokeraux_ComposeBrokerString(a3, v30, 1, 1, *(char **)v28, 0, 0, (char *)v29, 0x100uLL),
        (Str & 0x80000000) != 0)
    || (Str = ssftriff_reader_ObjOpen(a1, a2, 2, (const char *)v29, "IGTR", 1031, (uint64_t *)v26),
        (Str & 0x80000000) != 0))
  {
    v21 = Str;
  }
  else
  {
    v16 = (char *)heap_Calloc(*(_QWORD **)(a3 + 8), 1, 1600);
    *a4 = v16;
    if (v16)
    {
      v21 = igtree_Init(a1, a2, *(uint64_t *)v26, v16);
      ssftriff_reader_CloseChunk(*(uint64_t *)v26);
      if ((v21 & 0x80001FFF) == 0x14)
      {
        ssftriff_reader_CloseChunk(*(uint64_t *)v26);
        v21 = 0;
      }
    }
    else
    {
      log_OutPublic(*(_QWORD *)(a3 + 32), (uint64_t)"FE_WMP", 37000, 0, v17, v18, v19, v20, v25);
      v21 = 2587893770;
    }
  }
  if (*(_QWORD *)v26)
  {
    v22 = ssftriff_reader_ObjClose(*(_QWORD **)v26, v9, v10, v11, v12, v13, v14, v15);
    if (v22 >= 0 || (int)v21 <= -1)
      return v21;
    else
      return v22;
  }
  return v21;
}

uint64_t fe_wmp_getSent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *__s, uint64_t a7, unsigned int a8, uint64_t a9, const char *a10, uint64_t *a11)
{
  uint64_t v18;
  size_t v19;
  char *v20;
  uint64_t v21;
  unsigned __int16 v22;
  int v23;
  int v24;
  int v25;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  const char *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t i;
  unsigned __int16 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t *v59;
  unsigned int v60;
  uint64_t v61;
  char *__sa;
  uint64_t v63;
  unsigned __int16 v65;
  int v66;
  int v67;
  __int16 v68;
  unsigned int v69;
  unsigned __int16 v70;
  int v71;
  int v72;
  __int16 v73;
  unsigned int v74;

  v66 = 0;
  v67 = 0;
  *(_QWORD *)a9 = 0;
  v18 = *(_QWORD *)(a2 + 8);
  v19 = strlen(__s);
  v20 = (char *)heap_Alloc(v18, v19 + 1);
  *(_QWORD *)(a9 + 8) = v20;
  if (!v20)
    return 2587893770;
  v69 = 0;
  v68 = 0;
  v65 = 0;
  strcpy(v20, __s);
  if (*(_DWORD *)(a1 + 164) == 1)
  {
    v74 = 0;
    v73 = 0;
    v72 = 0;
    v71 = 0;
    v70 = 0;
    v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*(_QWORD *)(a1 + 24)
                                                                                            + 104))(a3, a4, 2, a5, &v70);
    if ((v21 & 0x80000000) != 0)
      return v21;
    __sa = __s;
    v63 = a2;
    v22 = v70;
    if (v70)
    {
      v23 = 0;
      LOWORD(v24) = 0;
      v25 = 1;
      while (1)
      {
        v21 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, __int16 *))(*(_QWORD *)(a1 + 24) + 168))(a3, a4, v22, 0, 1, &v74, &v73);
        if ((v21 & 0x80000000) != 0)
          return v21;
        if (v74 <= 0x11 && ((1 << v74) & 0x20210) != 0)
        {
          v21 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(*(_QWORD *)(a1 + 24) + 168))(a3, a4, v70, 1, 1, &v72, &v73);
          if ((v21 & 0x80000000) != 0)
            return v21;
          v21 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(*(_QWORD *)(a1 + 24) + 168))(a3, a4, v70, 2, 1, &v71, &v73);
          if ((v21 & 0x80000000) != 0)
            return v21;
          if (v25 == 1 || v23 != v72)
            LOWORD(v24) = v24 + 1;
          v23 = v72;
          v25 = 0;
        }
        v21 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 24) + 120))(a3, a4, v70, &v70);
        if ((v21 & 0x80000000) != 0)
          return v21;
        v22 = v70;
        if (!v70)
          goto LABEL_39;
      }
    }
    LOWORD(v24) = 0;
LABEL_39:
    v61 = a7;
    v60 = a5;
  }
  else
  {
    if (!a8)
      return 2587893767;
    __sa = __s;
    v63 = a2;
    v60 = a5;
    v24 = 0;
    v28 = a8;
    v29 = a7;
    v61 = a7;
    v30 = 1;
    do
    {
      if (*(_DWORD *)v29 == 36)
      {
        v31 = *(const char **)(v29 + 24);
        v30 = !strcmp(v31, "normal") || !strcmp(v31, a10);
      }
      else
      {
        if (*(_DWORD *)v29 == 1)
          v32 = v24 + 1;
        else
          v32 = v24;
        if (v30)
          v24 = v32;
        v30 = v30;
      }
      v29 += 32;
      --v28;
    }
    while (v28);
  }
  v33 = 2587893767;
  if (!(_WORD)v24)
    return v33;
  *(_WORD *)(a9 + 48) = v24;
  v34 = heap_Calloc(*(_QWORD **)(v63 + 8), (unsigned __int16)v24, 4);
  *a11 = v34;
  if (!v34)
    return v33;
  if (!*(_DWORD *)(a1 + 164))
  {
    v58 = (unsigned __int16)v24;
    v59 = a11;
    if (!a8)
      goto LABEL_71;
    v39 = v34;
    v40 = 0;
    v41 = a8;
    v42 = v61 + 12;
    v43 = 1;
    while (1)
    {
      v44 = *(_DWORD *)(v42 - 12);
      if (v44 == 36)
      {
        v45 = *(const char **)(v42 + 12);
        if (strcmp(v45, "normal") && strcmp(v45, a10))
        {
LABEL_69:
          v43 = 0;
          goto LABEL_70;
        }
      }
      else
      {
        if (v43 != 1)
          goto LABEL_69;
        if (v44 == 1)
          *(_DWORD *)(v39 + 4 * (unsigned __int16)v40++) = *(_DWORD *)v42;
      }
      v43 = 1;
LABEL_70:
      v42 += 32;
      if (!--v41)
        goto LABEL_71;
    }
  }
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 24) + 104))(a3, a4, 2, v60, &v65);
  if ((v21 & 0x80000000) != 0)
    return v21;
  v58 = (unsigned __int16)v24;
  v59 = a11;
  v35 = 0;
  v36 = 0;
  v37 = 1;
  while (v65)
  {
    v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 24) + 168))(a3, a4);
    if ((v21 & 0x80000000) != 0)
      return v21;
    if (v69 <= 0x11 && ((1 << v69) & 0x20210) != 0)
    {
      v21 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(*(_QWORD *)(a1 + 24) + 168))(a3, a4, v65, 1, 1, &v67, &v68);
      if ((v21 & 0x80000000) != 0)
        return v21;
      v21 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(*(_QWORD *)(a1 + 24) + 168))(a3, a4, v65, 2, 1, &v66, &v68);
      if ((v21 & 0x80000000) != 0)
        return v21;
      if (v37 == 1 || v36 != v67)
      {
        v37 = 0;
        *(_DWORD *)(*a11 + 4 * (unsigned __int16)v35++) = *(_DWORD *)(v61 + 12) + v67;
        v36 = v67;
      }
      else
      {
        v37 = 0;
      }
    }
    v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 24) + 120))(a3, a4, v65, &v65);
    if ((v33 & 0x80000000) != 0)
      return v33;
  }
LABEL_71:
  v46 = heap_Calloc(*(_QWORD **)(v63 + 8), v58, 8);
  *(_QWORD *)a9 = v46;
  if (!v46)
    return 2587893770;
  v47 = heap_Calloc(*(_QWORD **)(v63 + 8), v58, 8);
  *(_QWORD *)(a9 + 64) = v47;
  if (!v47)
    return 2587893770;
  v48 = heap_Calloc(*(_QWORD **)(v63 + 8), v58, 8);
  *(_QWORD *)(a9 + 16) = v48;
  if (!v48)
    return 2587893770;
  v49 = 0;
  v50 = (v24 & 0xFFFE) != 0 ? (unsigned __int16)v24 : 1;
  do
  {
    *(_QWORD *)(*(_QWORD *)(a9 + 16) + v49) = 0;
    v49 += 8;
  }
  while (8 * v50 != v49);
  v51 = heap_Calloc(*(_QWORD **)(v63 + 8), v58, 2);
  *(_QWORD *)(a9 + 32) = v51;
  if (!v51)
    return 2587893770;
  v52 = heap_Calloc(*(_QWORD **)(v63 + 8), v58, 2);
  *(_QWORD *)(a9 + 40) = v52;
  v33 = 2587893770;
  if (v52)
  {
    for (i = 0; i != v50; ++i)
    {
      v54 = *(_DWORD *)(*v59 + 4 * i) - *(_DWORD *)(v61 + 12);
      *(_WORD *)(*(_QWORD *)(a9 + 32) + 2 * i) = v54;
      *(_QWORD *)(*(_QWORD *)a9 + 8 * i) = *(_QWORD *)(a9 + 8) + v54;
      if ((int)i + 1 >= (unsigned __int16)v24)
      {
        *(_WORD *)(*(_QWORD *)(a9 + 40) + 2 * i) = strlen(__sa);
      }
      else
      {
        v55 = *(unsigned int *)(*v59 + 4 * i);
        v56 = *(unsigned int *)(*v59 + 4 * i + 4);
        *(_WORD *)(*(_QWORD *)(a9 + 40) + 2 * i) = *(_WORD *)(*(_QWORD *)(a9 + 32) + 2 * i) + v56 + ~(_WORD)v55;
        *(_BYTE *)(~v55 + *(_QWORD *)(*(_QWORD *)a9 + 8 * i) + v56) = 0;
      }
    }
    return fe_wmp_getPos(a1, a3, a4, a9, v60, v63);
  }
  return v33;
}

uint64_t fe_wmp_mapEachWord(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  _DWORD *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  __int16 v51;
  size_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  size_t v56;
  char *v57;
  uint64_t v59;
  char *__s;
  _DWORD *v61;
  unsigned int v62;
  uint64_t v63;
  char *__s1;

  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(unsigned __int16 *)(a1 + 136);
  __s1 = 0;
  v6 = 2 * strlen(*(const char **)(a1 + 40));
  if (v6 <= 8 * (int)v5)
    v6 = 9 * v5;
  v7 = (char *)heap_Calloc(*(_QWORD **)(v4 + 8), 1, v6 + 1);
  if (v7)
  {
    v12 = v7;
    *v7 = 0;
    v13 = *(_QWORD *)(a1 + 32);
    if (v13)
    {
      v14 = 2587893770;
      v63 = heap_Alloc(*(_QWORD *)(v4 + 8), 8 * *(unsigned __int8 *)(v13 + 1296) - 8);
      if (v63)
      {
        v61 = a2;
        if (*(_BYTE *)(v13 + 1296) != 1)
        {
          v15 = (unsigned __int16)(*(unsigned __int8 *)(v13 + 1296) - 1);
          v16 = (_QWORD *)v63;
          do
          {
            v17 = (_WORD *)heap_Calloc(*(_QWORD **)(v4 + 8), 1, 65);
            *v16 = v17;
            if (!v17)
              goto LABEL_95;
            *v17 = 61;
            ++v16;
          }
          while (--v15);
        }
        v22 = heap_Calloc(*(_QWORD **)(v4 + 8), v5, 2);
        *(_QWORD *)(a1 + 112) = v22;
        if (v22)
        {
          *(_QWORD *)(a1 + 144) = heap_Calloc(*(_QWORD **)(v4 + 8), v5, 2);
          __s = v12;
          if (*(_WORD *)(a1 + 136))
          {
            v23 = 0;
            LODWORD(v24) = 0;
            v25 = v61;
            while (1)
            {
              v62 = v24;
              v26 = *(_QWORD *)(v13 + 1312);
              v27 = *(unsigned __int8 *)(v13 + 1296);
              v28 = heap_Calloc(*(_QWORD **)(v4 + 8), 1, 2048);
              if (!v28)
                goto LABEL_95;
              v29 = v28;
              if (v27 <= 1)
              {
                heap_Free(*(_QWORD **)(v4 + 8), v28);
                v14 = 0;
                v32 = v62;
              }
              else
              {
                v30 = 0;
                v31 = v27 - 1;
                while (strcmp(*(const char **)(v26 + v30), "word"))
                {
                  v30 += 8;
                  if (8 * (v27 - 1) == v30)
                  {
                    v14 = 0;
                    goto LABEL_23;
                  }
                }
                v33 = "=";
                if (v23 < *(unsigned __int16 *)(a1 + 136))
                  v33 = *(const char **)(*(_QWORD *)(a1 + 88) + 8 * v23);
                v14 = fe_wmp_setFeature(v4, v26, v27, 2, v63, v33);
                if ((v14 & 0x80000000) != 0)
                {
LABEL_96:
                  heap_Free(*(_QWORD **)(v4 + 8), v29);
                  v12 = __s;
                  goto LABEL_97;
                }
LABEL_23:
                v34 = 0;
                while (strcmp(*(const char **)(v26 + 8 * v34), "pos"))
                {
                  if (v31 == ++v34)
                    goto LABEL_30;
                }
                v35 = "=";
                if (v23 < *(unsigned __int16 *)(a1 + 136))
                  v35 = *(const char **)(*(_QWORD *)(a1 + 152) + 8 * v23);
                v14 = fe_wmp_setFeature(v4, v26, v27, 5, v63, v35);
                if ((v14 & 0x80000000) != 0)
                  goto LABEL_96;
LABEL_30:
                v36 = 0;
                while (strcmp(*(const char **)(v26 + 8 * v36), "lpos"))
                {
                  if (v31 == ++v36)
                    goto LABEL_39;
                }
                if (v23)
                {
                  v37 = "=";
                  if ((int)v23 - 1 < *(unsigned __int16 *)(a1 + 136))
                    v37 = *(const char **)(*(_QWORD *)(a1 + 152) + 8 * (v23 - 1));
                }
                else
                {
                  v37 = "=";
                }
                v14 = fe_wmp_setFeature(v4, v26, v27, 6, v63, v37);
                if ((v14 & 0x80000000) != 0)
                  goto LABEL_96;
LABEL_39:
                v38 = 0;
                while (strcmp(*(const char **)(v26 + 8 * v38), "rpos"))
                {
                  if (v31 == ++v38)
                    goto LABEL_46;
                }
                v39 = "=";
                if ((int)v23 + 1 < *(unsigned __int16 *)(a1 + 136))
                  v39 = *(const char **)(*(_QWORD *)(a1 + 152) + 8 * (v23 + 1));
                v14 = fe_wmp_setFeature(v4, v26, v27, 7, v63, v39);
                if ((v14 & 0x80000000) != 0)
                  goto LABEL_96;
LABEL_46:
                v40 = 0;
                while (strcmp(*(const char **)(v26 + 8 * v40), "lword"))
                {
                  if (v31 == ++v40)
                    goto LABEL_55;
                }
                if (v23)
                {
                  v41 = "=";
                  if ((int)v23 - 1 < *(unsigned __int16 *)(a1 + 136))
                    v41 = *(const char **)(*(_QWORD *)(a1 + 88) + 8 * (v23 - 1));
                }
                else
                {
                  v41 = "=";
                }
                v14 = fe_wmp_setFeature(v4, v26, v27, 1, v63, v41);
                if ((v14 & 0x80000000) != 0)
                  goto LABEL_96;
LABEL_55:
                v42 = 0;
                while (strcmp(*(const char **)(v26 + 8 * v42), "llword"))
                {
                  if (v31 == ++v42)
                    goto LABEL_63;
                }
                v43 = "=";
                if (v23 >= 2 && (int)v23 - 2 < *(unsigned __int16 *)(a1 + 136))
                  v43 = *(const char **)(*(_QWORD *)(a1 + 88) + 8 * (v23 - 2));
                v14 = fe_wmp_setFeature(v4, v26, v27, 0, v63, v43);
                if ((v14 & 0x80000000) != 0)
                  goto LABEL_96;
LABEL_63:
                v44 = 0;
                while (strcmp(*(const char **)(v26 + 8 * v44), "rword"))
                {
                  if (v31 == ++v44)
                    goto LABEL_70;
                }
                v45 = "=";
                if ((int)v23 + 1 < *(unsigned __int16 *)(a1 + 136))
                  v45 = *(const char **)(*(_QWORD *)(a1 + 88) + 8 * (v23 + 1));
                v14 = fe_wmp_setFeature(v4, v26, v27, 3, v63, v45);
                if ((v14 & 0x80000000) != 0)
                  goto LABEL_96;
LABEL_70:
                v46 = 0;
                while (strcmp(*(const char **)(v26 + 8 * v46), "rrword"))
                {
                  if (v31 == ++v46)
                  {
                    v12 = __s;
                    v25 = v61;
                    goto LABEL_77;
                  }
                }
                v47 = "=";
                v25 = v61;
                if ((int)v23 + 2 < *(unsigned __int16 *)(a1 + 136))
                  v47 = *(const char **)(*(_QWORD *)(a1 + 88) + 8 * (v23 + 2));
                v14 = fe_wmp_setFeature(v4, v26, v27, 4, v63, v47);
                v12 = __s;
LABEL_77:
                heap_Free(*(_QWORD **)(v4 + 8), v29);
                v32 = v62;
                if ((v14 & 0x80000000) != 0)
                  goto LABEL_97;
              }
              igtree_Process(v13, v63, &__s1);
              v48 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 120) + 2 * v23);
              if (v32 < v48)
                strncat(v12, (const char *)(*(_QWORD *)(a1 + 40) + v32), v48 - v32);
              v49 = __s1;
              if (!strcmp(__s1, "NOMATCH"))
              {
                strcat(v12, *(const char **)(*(_QWORD *)(a1 + 88) + 8 * v23));
              }
              else
              {
                strcat(v12, v49);
                v50 = __s1;
                v51 = strlen(__s1);
                *(_WORD *)(*(_QWORD *)(a1 + 112) + 2 * v23) = v51
                                                            - strlen(*(const char **)(*(_QWORD *)(a1 + 88) + 8 * v23));
                *(_WORD *)(*(_QWORD *)(a1 + 144) + 2 * v23) = 1;
                v52 = strlen(v50);
                *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v23) = heap_Calloc(*(_QWORD **)(v4 + 8), 1, v52 + 1);
                strcpy(*(char **)(*(_QWORD *)(a1 + 104) + 8 * v23), __s1);
                *v25 = 1;
              }
              v24 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 128) + 2 * v23++);
              if (v23 >= *(unsigned __int16 *)(a1 + 136))
                goto LABEL_88;
            }
          }
          v14 = 0;
          v24 = 0;
LABEL_88:
          if (strlen(*(const char **)(a1 + 40)) > v24)
            strcat(v12, (const char *)(*(_QWORD *)(a1 + 40) + v24));
          if (*(_BYTE *)(v13 + 1296) != 1)
          {
            v53 = (unsigned __int16)(*(unsigned __int8 *)(v13 + 1296) - 1);
            v54 = (uint64_t *)v63;
            do
            {
              v55 = *v54++;
              heap_Free(*(_QWORD **)(v4 + 8), v55);
              --v53;
            }
            while (v53);
          }
          v12 = __s;
          v56 = strlen(__s);
          v57 = (char *)heap_Realloc(*(uint64_t **)(v4 + 8), *(_QWORD *)(a1 + 40), v56 + 1);
          *(_QWORD *)(a1 + 40) = v57;
          if (!v57)
          {
LABEL_95:
            log_OutPublic(*(_QWORD *)(v4 + 32), (uint64_t)"FE_WMP", 37000, 0, v18, v19, v20, v21, v59);
            v14 = 2587893770;
            goto LABEL_97;
          }
          strcpy(v57, __s);
        }
LABEL_97:
        heap_Free(*(_QWORD **)(v4 + 8), v63);
      }
    }
    else
    {
      log_OutText(*(_QWORD *)(v4 + 32), (uint64_t)"FE_WMP", 0, 0, (uint64_t)"IGTree model for wordmap does not exist", v9, v10, v11, v59);
      v14 = 0;
    }
    heap_Free(*(_QWORD **)(v4 + 8), (uint64_t)v12);
    return v14;
  }
  v14 = 2587893770;
  log_OutPublic(*(_QWORD *)(v4 + 32), (uint64_t)"FE_WMP", 37000, 0, v8, v9, v10, v11, v59);
  return v14;
}

uint64_t fe_wmp_userTNBoundaryAdjustLateWMP(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned __int16 v17;
  int v18;
  int v19;
  uint64_t v20;

  v20 = 0;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*(_QWORD *)(a1 + 24)
                                                                                             + 104))(a2, a3, 2, a5, &v17);
  if ((result & 0x80000000) == 0)
  {
    while (v17)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, char *, char *))(*(_QWORD *)(a1 + 24) + 168))(a2, a3, v17, 0, 1, (char *)&v20 + 4, (char *)&v18 + 2);
      if ((result & 0x80000000) != 0)
        break;
      v10 = v17;
      if ((HIDWORD(v20) - 5) > 1)
        goto LABEL_24;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t *, char *))(*(_QWORD *)(a1 + 24) + 168))(a2, a3, v17, 1, 1, &v20, (char *)&v18 + 2);
      if ((result & 0x80000000) != 0)
        return result;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(a1 + 24) + 168))(a2, a3, v17, 2, 1, &v19, (char *)&v18 + 2);
      if ((result & 0x80000000) != 0)
        return result;
      if (v19)
      {
        if (*(_WORD *)(a1 + 136))
        {
          v11 = 0;
          v12 = 0;
          v13 = 0;
          do
          {
            v14 = a4[v11];
            if (v14 >= *a4 + v19)
              break;
            v13 += *(__int16 *)(*(_QWORD *)(a1 + 112) + 2 * v11);
            v15 = v14 >= (int)v20 + *a4 ? 0 : *(__int16 *)(*(_QWORD *)(a1 + 112) + 2 * v11);
            v12 += v15;
            ++v11;
          }
          while (*(unsigned __int16 *)(a1 + 136) != v11);
        }
        else
        {
          v13 = 0;
          v12 = 0;
        }
        v19 += v13;
        LODWORD(v20) = v12 + v20;
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t *, int *))(*(_QWORD *)(a1 + 24) + 160))(a2, a3, v17, 1, 1, &v20, &v18);
      if ((result & 0x80000000) != 0)
        return result;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a1 + 24) + 160))(a2, a3, v17, 2, 1, &v19, &v18);
      if ((result & 0x80000000) != 0)
        return result;
      v10 = v17;
      if (HIDWORD(v20) == 5)
      {
        if ((_DWORD)v20 == v19)
          v16 = v17;
        else
          v16 = 0;
      }
      else
      {
LABEL_24:
        v16 = 0;
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*(_QWORD *)(a1 + 24) + 120))(a2, a3, v10, &v17);
      if ((result & 0x80000000) == 0)
      {
        if (!(_DWORD)v16)
          continue;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 24) + 192))(a2, a3, v16);
        if ((result & 0x80000000) == 0)
          continue;
      }
      return result;
    }
  }
  return result;
}

uint64_t fe_wmp_adjustWordRecords(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unsigned __int16 v7;
  __int16 v8;
  unsigned __int16 v9;
  unsigned int v10;
  int v11;
  int v13;
  char *v15;
  uint64_t v16;
  __int16 v17;
  __int16 v18;
  unsigned __int16 v19;
  __int16 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  char *__s;
  unsigned __int16 v29;
  _BYTE __c[9];
  int v31;
  int v32;
  __int16 v33;
  unsigned __int16 v34;
  int v35;

  v35 = 0;
  v34 = 0;
  v33 = 0;
  v31 = 0;
  v32 = 0;
  memset(__c, 0, sizeof(__c));
  v29 = 0;
  v27 = 0;
  __s = 0;
  v26 = 0;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  v22 = 0;
  v21 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1[3] + 104))(a2, a3, 1, 0, &v29);
  if ((result & 0x80000000) == 0)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a1[3] + 104))(a2, a3, 2, v29, (char *)&v35 + 2);
    if ((result & 0x80000000) == 0)
    {
      v7 = HIWORD(v35);
      if (HIWORD(v35))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        v11 = 1;
        do
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(a1[3] + 168))(a2, a3, v7, 0, 1, &v32, &v35);
          if ((result & 0x80000000) != 0)
            break;
          if (v32 == 9 || v32 == 4)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(a1[3] + 168))(a2, a3, HIWORD(v35), 1, 1, &v34, &v35);
            if ((result & 0x80000000) != 0)
              return result;
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, int *))(a1[3] + 168))(a2, a3, HIWORD(v35), 2, 1, &v33, &v35);
            if ((result & 0x80000000) != 0)
              return result;
            if (v34)
              v13 = 0;
            else
              v13 = v11;
            if (v34 > v10)
              v11 = 1;
            else
              v11 = v13;
            if (v34 > v10)
              ++v9;
            if (*(_WORD *)(a1[18] + 2 * v9) == 1 && v11 == 1)
            {
              __s = 0;
              *(_QWORD *)&__c[1] = 0;
              LOWORD(v31) = 0;
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(a1[3] + 176))(a2, a3, HIWORD(v35), 3, &__s, &v35);
              if ((result & 0x80000000) != 0)
                return result;
              result = (*(uint64_t (**)(_QWORD, _QWORD, const char *, _QWORD, _BYTE *, int *, _BYTE *, _QWORD))(a1[7] + 232))(a1[8], a1[9], "wmp_dct", *(_QWORD *)(a1[13] + 8 * v9), &__c[1], &v31, __c, 0);
              if ((result & 0x80000000) != 0)
                return result;
              if ((_WORD)v31)
              {
                __s = **(char ***)&__c[1];
                v15 = strchr(__s, __c[0]);
                if (v15)
                  *v15 = 0;
              }
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, int *))(a1[3] + 176))(a2, a3, HIWORD(v35), 5, &v27, &v35);
              if ((result & 0x80000000) != 0)
                return result;
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, int *))(a1[3] + 168))(a2, a3, HIWORD(v35), 7, 1, &v26, &v35);
              if ((result & 0x80000000) != 0)
                return result;
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, int *))(a1[3] + 176))(a2, a3, HIWORD(v35), 6, &v25, &v35);
              if ((result & 0x80000000) != 0)
                return result;
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, int *))(a1[3] + 176))(a2, a3, HIWORD(v35), 9, &v24, &v35);
              if ((result & 0x80000000) != 0)
                return result;
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, int *))(a1[3] + 176))(a2, a3, HIWORD(v35), 14, &v23, &v35);
              if ((result & 0x80000000) != 0)
                return result;
              v16 = a1[14];
              LOWORD(v22) = *(_WORD *)(a1[15] + 2 * v9) + v8;
              v21 = *(_WORD *)(a1[16] + 2 * v9) + v8 + *(_WORD *)(v16 + 2 * v9);
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(a1[3] + 160))(a2, a3, HIWORD(v35), 1, 1, &v22, (char *)&v22 + 2);
              if ((result & 0x80000000) != 0)
                return result;
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, char *))(a1[3] + 160))(a2, a3, HIWORD(v35), 2, 1, &v21, (char *)&v22 + 2);
              if ((result & 0x80000000) != 0)
                return result;
              v17 = strlen(__s);
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, char *))(a1[3] + 160))(a2, a3, HIWORD(v35), 3, (unsigned __int16)(v17 + 1), __s, (char *)&v22 + 2);
              if ((result & 0x80000000) != 0)
                return result;
              v18 = *(_WORD *)(a1[14] + 2 * v9);
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(a1[3] + 120))(a2, a3, HIWORD(v35), (char *)&v35 + 2);
              if ((result & 0x80000000) != 0)
                return result;
              v8 += v18;
              if (HIWORD(v35))
              {
                result = (*(uint64_t (**)(uint64_t, uint64_t))(a1[3] + 168))(a2, a3);
                if ((result & 0x80000000) != 0)
                  return result;
                result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(a1[3] + 168))(a2, a3, HIWORD(v35), 1, 1, (char *)&v31 + 2, &v35);
                if ((result & 0x80000000) != 0)
                  return result;
                while (HIWORD(v31) == v34)
                {
                  v19 = HIWORD(v35);
                  if (!HIWORD(v35))
                    break;
                  if (v32 != 9 && v32 != 4)
                    break;
                  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(a1[3] + 120))(a2, a3, HIWORD(v35), (char *)&v35 + 2);
                  if ((result & 0x80000000) == 0)
                  {
                    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(a1[3] + 168))(a2, a3, HIWORD(v35), 0, 1, &v32, &v35);
                    if ((result & 0x80000000) == 0)
                    {
                      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(a1[3] + 168))(a2, a3, HIWORD(v35), 1, 1, (char *)&v31 + 2, &v35);
                      if ((result & 0x80000000) == 0)
                      {
                        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1[3] + 192))(a2, a3, v19);
                        if ((result & 0x80000000) == 0)
                          continue;
                      }
                    }
                  }
                  return result;
                }
              }
            }
            else
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(a1[3] + 168))(a2, a3, HIWORD(v35), 1, 1, &v34, &v35);
              if ((result & 0x80000000) != 0)
                return result;
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, int *))(a1[3] + 168))(a2, a3, HIWORD(v35), 2, 1, &v33, &v35);
              if ((result & 0x80000000) != 0)
                return result;
              LOWORD(v22) = v34 + v8;
              v21 = v33 + v8;
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(a1[3] + 160))(a2, a3, HIWORD(v35), 1, 1, &v22, (char *)&v22 + 2);
              if ((result & 0x80000000) != 0)
                return result;
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, char *))(a1[3] + 160))(a2, a3, HIWORD(v35), 2, 1, &v21, (char *)&v22 + 2);
              if ((result & 0x80000000) != 0)
                return result;
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(a1[3] + 120))(a2, a3, HIWORD(v35), (char *)&v35 + 2);
              if ((result & 0x80000000) != 0)
                return result;
            }
            v10 = v34;
          }
          else
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(a1[3] + 120))(a2, a3, HIWORD(v35), (char *)&v35 + 2);
            if ((result & 0x80000000) != 0)
              return result;
          }
          v7 = HIWORD(v35);
        }
        while (HIWORD(v35));
      }
    }
  }
  return result;
}

uint64_t fe_wmp_AdjustMarkersLateWMP(uint64_t result, uint64_t a2, unsigned int a3, const char *a4)
{
  unsigned int v5;
  uint64_t v8;
  int v9;
  int v10;
  _BOOL4 v11;
  unsigned __int16 *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;
  int *v19;
  int v20;
  int v21;
  const char *v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;

  v32 = (_QWORD *)result;
  v5 = *(unsigned __int16 *)(result + 136);
  if (*(_WORD *)(result + 136))
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v30 = v5 - 1;
    v31 = *(unsigned __int16 *)(result + 136);
    v11 = 1;
    do
    {
      if ((int)v8 + 1 >= v5)
        v12 = (unsigned __int16 *)(v32[16] + 2 * v30);
      else
        v12 = (unsigned __int16 *)(v32[15] + 2 * (v8 + 1));
      v13 = *v12;
      v14 = (unsigned __int16)v9;
      v15 = a2 + 32 * (unsigned __int16)v9;
      v18 = *(_DWORD *)(v15 + 12);
      v16 = (_DWORD *)(v15 + 12);
      v17 = v18;
      if (v18 < v13)
      {
        do
        {
          v19 = (int *)(a2 + 32 * v14);
          v20 = *v19;
          v19[1] += v10;
          v21 = v17 + v10;
          *v16 = v21;
          if (v20 == 36)
          {
            v22 = (const char *)*((_QWORD *)v19 + 3);
            result = strcmp(v22, "normal");
            v11 = 1;
            if ((_DWORD)result)
            {
              result = strcmp(v22, a4);
              if ((_DWORD)result)
                v11 = 0;
            }
          }
          else if (v21 != v13 - 1 && v20 == 1)
          {
            if (v11)
              v23 = *(__int16 *)(v32[14] + 2 * v8);
            else
              v23 = 0;
            *(_DWORD *)(a2 + 32 * v14 + 8) += v23;
            v24 = (unsigned __int16)v9 + 1;
            if (v24 < a3 && *(_DWORD *)(a2 + 32 * ((unsigned __int16)v9 + 1)) == 37)
            {
              v25 = (_DWORD *)(a2 + 32 * v24);
              v26 = v25[3];
              v27 = v25[4] + v23;
              v25[1] += v10;
              v25[3] = v26 + v10;
              v25[4] = v27;
              ++v9;
            }
            v10 += v23;
          }
          v14 = (unsigned __int16)++v9;
          v28 = a2 + 32 * (unsigned __int16)v9;
          v29 = *(_DWORD *)(v28 + 12);
          v16 = (_DWORD *)(v28 + 12);
          v17 = v29;
        }
        while (v29 < v13);
      }
      ++v8;
      v5 = v31;
    }
    while (v8 != v31);
  }
  else
  {
    v10 = 0;
  }
  *(_DWORD *)(a2 + 8) += v10;
  *(_DWORD *)(a2 + 16) += v10;
  return result;
}

uint64_t fe_wmp_userTNBoundaryAdjust(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, int a5, __int16 a6, __int16 a7)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  __int16 v22;
  __int16 v23;
  unsigned __int16 v24;

  v24 = a5;
  v23 = a6;
  v22 = a7;
  v19 = 0;
  v20 = 0;
  if (!a5)
    return 0;
  v21 = 0;
  while (1)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, __int16 *))(*(_QWORD *)(a1 + 24) + 168))(a2, a3, (unsigned __int16)a5, 0, 1, &v21, &v23);
    if ((result & 0x80000000) != 0)
      return result;
    v12 = v24;
    if ((v21 - 4) > 2)
      goto LABEL_24;
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(*(_QWORD *)(a1 + 24) + 168))(a2, a3, v24, 1, 1, &v20, &v23);
    if ((result & 0x80000000) != 0)
      return result;
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(*(_QWORD *)(a1 + 24) + 168))(a2, a3, v24, 2, 1, &v19, &v23);
    if ((result & 0x80000000) != 0)
      return result;
    if (v19)
    {
      if (*(_WORD *)(a1 + 136))
      {
        v13 = 0;
        v14 = 0;
        v15 = 0;
        do
        {
          v16 = a4[v13];
          if (v16 >= *a4 + v19)
            break;
          v15 += *(__int16 *)(*(_QWORD *)(a1 + 112) + 2 * v13);
          v17 = v16 >= v20 + *a4 ? 0 : *(__int16 *)(*(_QWORD *)(a1 + 112) + 2 * v13);
          v14 += v17;
          ++v13;
        }
        while (*(unsigned __int16 *)(a1 + 136) != v13);
      }
      else
      {
        v15 = 0;
        v14 = 0;
      }
      v19 += v15;
      v20 += v14;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(*(_QWORD *)(a1 + 24) + 160))(a2, a3, v24, 1, 1, &v20, &v22);
    if ((result & 0x80000000) != 0)
      return result;
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(*(_QWORD *)(a1 + 24) + 160))(a2, a3, v24, 2, 1, &v19, &v22);
    if ((result & 0x80000000) != 0)
      return result;
    v12 = v24;
    if (v21 == 5)
    {
      if (v20 == v19)
        v18 = v24;
      else
        v18 = 0;
    }
    else
    {
LABEL_24:
      v18 = 0;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*(_QWORD *)(a1 + 24) + 120))(a2, a3, v12, &v24);
    if ((result & 0x80000000) == 0)
    {
      if (!(_DWORD)v18
        || (result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 24) + 192))(a2, a3, v18),
            (result & 0x80000000) == 0))
      {
        LOWORD(a5) = v24;
        if (v24)
          continue;
      }
    }
    return result;
  }
}

uint64_t fe_wmp_AdjustMarkers(uint64_t result, uint64_t a2, unsigned int a3, const char *a4)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  int v12;
  const char *v13;
  int v14;

  if (a3)
  {
    v6 = result;
    v7 = 0;
    v8 = 0;
    v9 = a3;
    v10 = a2 + 12;
    v11 = 1;
    do
    {
      v12 = *(_DWORD *)(v10 - 12);
      *(_DWORD *)(v10 - 8) += v7;
      *(_DWORD *)v10 += v7;
      if (v12 == 1)
      {
        if (v11)
          v14 = *(__int16 *)(*(_QWORD *)(v6 + 112) + 2 * (unsigned __int16)v8++);
        else
          v14 = 0;
        *(_DWORD *)(v10 - 4) += v14;
        v7 += v14;
      }
      else if (v12 == 36)
      {
        v13 = *(const char **)(v10 + 12);
        result = strcmp(v13, "normal");
        v11 = 1;
        if ((_DWORD)result)
        {
          result = strcmp(v13, a4);
          if ((_DWORD)result)
            v11 = 0;
        }
      }
      v10 += 32;
      --v9;
    }
    while (v9);
  }
  else
  {
    v7 = 0;
  }
  *(_DWORD *)(a2 + 8) += v7;
  *(_DWORD *)(a2 + 16) += v7;
  return result;
}

uint64_t fe_wmp_getPos(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  unsigned __int16 v12;
  unsigned int v13;
  size_t v15;
  char *v16;
  int v17;
  unsigned int v18;
  __int16 v19;
  char *__s;
  unsigned __int16 v21;

  v21 = 0;
  __s = 0;
  v19 = 0;
  v17 = 0;
  v18 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*(_QWORD *)(a1 + 24)
                                                                                             + 104))(a2, a3, 2, a5, &v21);
  if ((result & 0x80000000) == 0)
  {
    v12 = v21;
    if (v21)
    {
      v13 = 0;
      while (1)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, __int16 *))(*(_QWORD *)(a1 + 24) + 168))(a2, a3, v12, 0, 1, &v18, &v19);
        if ((result & 0x80000000) != 0)
          break;
        if (v18 <= 0x11 && ((1 << v18) & 0x20210) != 0)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(*(_QWORD *)(a1 + 24) + 168))(a2, a3, v21, 1, 1, (char *)&v17 + 2, &v19);
          if ((result & 0x80000000) != 0)
            return result;
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(*(_QWORD *)(a1 + 24) + 168))(a2, a3, v21, 2, 1, &v17, &v19);
          if ((result & 0x80000000) != 0)
            return result;
          if (v13 < *(unsigned __int16 *)(a4 + 48)
            && HIWORD(v17) == *(unsigned __int16 *)(*(_QWORD *)(a4 + 32) + 2 * v13))
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, __int16 *))(*(_QWORD *)(a1 + 24) + 176))(a2, a3, v21, 5, &__s, &v19);
            if ((result & 0x80000000) != 0)
              return result;
            v15 = strlen(__s);
            *(_QWORD *)(*(_QWORD *)(a4 + 64) + 8 * v13) = heap_Calloc(*(_QWORD **)(a6 + 8), 1, v15 + 1);
            v16 = *(char **)(*(_QWORD *)(a4 + 64) + 8 * v13);
            if (!v16)
              return 2587893770;
            strcpy(v16, __s);
            ++v13;
          }
        }
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 24) + 120))(a2, a3, v21, &v21);
        if ((result & 0x80000000) == 0)
        {
          v12 = v21;
          if (v21)
            continue;
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t fe_wmp_isFeatureRequired(uint64_t a1, unsigned int a2, int a3, _WORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;

  if (a2 < 2)
    return 0;
  v6 = 0;
  v7 = a2 - 1;
  v8 = g_featureNames_5[a3];
  while (strcmp(*(const char **)(a1 + 8 * v6), v8))
  {
    if (v7 == ++v6)
      return 0;
  }
  *a4 = v6;
  return 1;
}

uint64_t fe_wmp_setFeature(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, const char *a6)
{
  uint64_t result;
  size_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int16 v18;

  v18 = -1;
  result = fe_wmp_isFeatureRequired(a2, a3, a4, &v18);
  if ((_DWORD)result)
  {
    if (!*a6)
    {
      result = 0;
      **(_WORD **)(a5 + 8 * v18) = 61;
      return result;
    }
    v10 = strlen(a6);
    v11 = v18;
    if (v10 <= 0x40)
    {
      v12 = *(char **)(a5 + 8 * v18);
      goto LABEL_8;
    }
    v12 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)(a5 + 8 * v18), (unsigned __int16)v10 + 1);
    if (v12)
    {
      *(_QWORD *)(a5 + 8 * v11) = v12;
LABEL_8:
      strcpy(v12, a6);
      return 0;
    }
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_WMP", 37000, 0, v13, v14, v15, v16, v17);
    return 2587893770;
  }
  return result;
}

uint64_t fe_text_analyzer_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2592088065;
  result = 0;
  *a2 = &IFeTextAnalyzer;
  return result;
}

uint64_t fe_text_analyzer_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Object;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  uint64_t v75;
  __int128 v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  const char *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  size_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  size_t v103;
  _QWORD *v104;
  void *v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  int v123;
  uint64_t *v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  unsigned __int8 *v140;
  int v141;
  unsigned __int8 v142;
  int v143[2];
  int v144;
  int v145[2];
  _OWORD v146[16];
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  v137 = 0;
  v138 = 0;
  v5 = 2592088071;
  v136 = 0;
  memset(v146, 0, sizeof(v146));
  if (!a5)
    return v5;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v138);
  if ((inited & 0x80000000) != 0)
    return inited;
  v10 = heap_Calloc(*(_QWORD **)(v138 + 8), 1, 80);
  if (!v10)
  {
    log_OutPublic(*(_QWORD *)(v138 + 32), (uint64_t)"FE_TEXT_ANALYZER", 37000, 0, v11, v12, v13, v14, v126);
    v5 = 2592088074;
    goto LABEL_13;
  }
  v15 = v10;
  *(_QWORD *)a5 = v10;
  *(_DWORD *)(a5 + 8) = 62347;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 72) = 0;
  Object = objc_GetObject(*(_QWORD *)(v138 + 48), (uint64_t)"LINGDB", &v137);
  if ((Object & 0x80000000) != 0)
    goto LABEL_11;
  *(_QWORD *)(v15 + 24) = *(_QWORD *)(v137 + 8);
  Object = objc_GetObject(*(_QWORD *)(v138 + 48), (uint64_t)"FE_DCTLKP", &v136);
  if ((Object & 0x80000000) != 0)
    goto LABEL_11;
  v17 = v136;
  *(_QWORD *)(v15 + 40) = *(_QWORD *)(v136 + 8);
  *(_OWORD *)(v15 + 48) = *(_OWORD *)(v17 + 16);
  v18 = v138;
  *(_QWORD *)v15 = v138;
  *(_QWORD *)(v15 + 8) = a3;
  *(_QWORD *)(v15 + 16) = a4;
  Object = fe_text_analyzer_CreateBrokerString(v18, (char *)v146);
  if ((Object & 0x80000000) != 0)
  {
LABEL_11:
    v5 = Object;
LABEL_13:
    fe_text_analyzer_ObjClose(*(_QWORD ***)a5, *(_QWORD *)(a5 + 8));
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    return v5;
  }
  v20 = *(_QWORD *)v15;
  v19 = *(_WORD **)(v15 + 8);
  v21 = *(_QWORD *)(v15 + 16);
  *(_QWORD *)v145 = 0;
  v144 = 0;
  *(_QWORD *)v143 = 0;
  v142 = 0;
  v141 = 0;
  v140 = 0;
  v139 = 0;
  v22 = ssftriff_reader_ObjOpen(v19, v21, 2, (const char *)v146, "STLE", 5, (uint64_t *)v145);
  if (v22 < 0 && (v22 & 0x1FFF) != 0x14)
  {
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    LODWORD(v31) = 0;
    goto LABEL_102;
  }
  v33 = ssftriff_reader_OpenChunk(*(uint64_t *)v145, &v141, (unsigned int *)&v144, v143, v23, v24, v25, v26);
  if ((v33 & 0x80000000) == 0)
  {
    v35 = 0;
    v36 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    LODWORD(v31) = 0;
    while (1)
    {
      if (v141 ^ 0x454E494C | v142)
      {
        if (v141 ^ 0x4E4B4F54 | v142)
        {
          if (!(v141 ^ 0x4E454C54 | v142))
          {
            ssftriff_reader_GetChunkData(*(uint64_t *)v145, v144, &v140, v34, v23, v24, v25, v26);
            v28 = (uint64_t *)heap_Calloc(*(_QWORD **)(v20 + 8), 1, 8 * *v140);
            if (!v28)
              goto LABEL_89;
            ++v35;
            if (v29 && (_DWORD)v31)
            {
              v51 = 0;
              while (1)
              {
                v52 = heap_Calloc(*(_QWORD **)(v20 + 8), 1, 4 * *(unsigned int *)(v29 + 4 * v51));
                v28[v51] = v52;
                if (!v52)
                  break;
                if (*(_DWORD *)(v29 + 4 * v51))
                {
                  v53 = 0;
                  v54 = v140;
                  do
                  {
                    *(_DWORD *)(v52 + 4 * v53) = v54[(v35 + v53)];
                    ++v53;
                  }
                  while (v53 < *(unsigned int *)(v29 + 4 * v51));
                  v35 += v53;
                }
                if (++v51 == v31)
                {
                  v36 = v31;
                  goto LABEL_52;
                }
              }
LABEL_89:
              log_OutPublic(*(_QWORD *)(*(_QWORD *)v15 + 32), (uint64_t)"FE_TEXT_ANALYZER", 37000, 0, v37, v38, v39, v40, v126);
              goto LABEL_102;
            }
LABEL_51:
            v36 = 0;
            goto LABEL_52;
          }
          if (!(v141 ^ 0x4E454C4C | v142))
          {
            v27 = heap_Calloc(*(_QWORD **)(v20 + 8), 1, 4 * v31);
            if (!v27)
            {
              v121 = *(_QWORD *)(*(_QWORD *)v15 + 32);
              goto LABEL_103;
            }
            ssftriff_reader_GetChunkData(*(uint64_t *)v145, v144, &v140, v55, v23, v24, v25, v26);
            if (!(_DWORD)v31)
              goto LABEL_51;
            v56 = 0;
            v57 = v140;
            do
            {
              *(_DWORD *)(v27 + 4 * v56) = v57[v56];
              ++v56;
            }
            while (v31 != v56);
            goto LABEL_50;
          }
          if (!(v141 ^ 0x454C5552 | v142))
          {
            v30 = heap_Alloc(*(_QWORD *)(v20 + 8), 8 * v31);
            if (!v30)
              goto LABEL_89;
            v139 = 0;
            if (v27 && v144)
            {
              v132 = v28;
              v41 = v27;
              v42 = 0;
              v36 = 0;
              while (1)
              {
                v139 = 0;
                v43 = heap_Alloc(*(_QWORD *)(v20 + 8), (*(_DWORD *)(v41 + 4 * v36) + 1));
                *(_QWORD *)(v30 + 8 * v36) = v43;
                if (!v43)
                  break;
                ssftriff_reader_ReadStringZ(*(uint64_t *)v145, *(uint64_t *)v143, v144, v42, 0, &v139);
                ssftriff_reader_ReadStringZ(*(uint64_t *)v145, *(uint64_t *)v143, v144, v42, *(_BYTE **)(v30 + 8 * v36++), &v139);
                v42 += v139;
                if (v42 >= v144)
                {
                  v27 = v41;
                  v28 = v132;
                  goto LABEL_52;
                }
              }
              log_OutPublic(*(_QWORD *)(*(_QWORD *)v15 + 32), (uint64_t)"FE_TEXT_ANALYZER", 37000, 0, v44, v45, v46, v47, v126);
              v27 = v41;
              v28 = v132;
              goto LABEL_102;
            }
            goto LABEL_51;
          }
        }
        else
        {
          ssftriff_reader_GetChunkData(*(uint64_t *)v145, v144, &v140, v34, v23, v24, v25, v26);
          v48 = heap_Calloc(*(_QWORD **)(v20 + 8), 1, 4 * v31);
          v29 = v48;
          if (!v48)
            goto LABEL_89;
          if (v36 < v31)
          {
            v49 = v140;
            v50 = v36;
            do
            {
              *(_DWORD *)(v48 + 4 * v50) = v49[v50];
              ++v50;
            }
            while (v31 != v50);
LABEL_50:
            v36 = v31;
          }
        }
      }
      else
      {
        ssftriff_reader_GetChunkData(*(uint64_t *)v145, v144, &v140, v34, v23, v24, v25, v26);
        LODWORD(v31) = *v140;
      }
LABEL_52:
      ssftriff_reader_CloseChunk(*(uint64_t *)v145);
      v33 = ssftriff_reader_OpenChunk(*(uint64_t *)v145, &v141, (unsigned int *)&v144, v143, v58, v59, v60, v61);
      if (v33 < 0)
        goto LABEL_55;
    }
  }
  LODWORD(v31) = 0;
  v30 = 0;
  v29 = 0;
  v28 = 0;
  v27 = 0;
LABEL_55:
  if ((v33 & 0x1FFF) != 0x14)
    goto LABEL_102;
  v62 = heap_Calloc(*(_QWORD **)(v20 + 8), 1, 32);
  if (!v62)
  {
    log_OutPublic(*(_QWORD *)(v20 + 32), (uint64_t)"FE_TEXT_ANALYZER", 37000, 0, v63, v64, v65, v66, v126);
LABEL_101:
    *(_QWORD *)(v15 + 32) = 0;
LABEL_102:
    v121 = *(_QWORD *)(v20 + 32);
LABEL_103:
    log_OutPublic(v121, (uint64_t)"FE_TEXT_ANALYZER", 37000, 0, v23, v24, v25, v26, v126);
    goto LABEL_104;
  }
  v67 = v62;
  *(_BYTE *)(v62 + 9) = 0;
  *(_QWORD *)(v62 + 16) = 0;
  v68 = (char *)heap_Calloc(*(_QWORD **)(v20 + 8), 1, 128);
  *(_QWORD *)v67 = v68;
  if (!v68)
  {
    v120 = *(_QWORD *)(v20 + 32);
    goto LABEL_95;
  }
  strcpy(v68, "START");
  v73 = heap_Calloc(*(_QWORD **)(v20 + 8), 1, 128);
  if (!v73)
  {
    v120 = *(_QWORD *)(*(_QWORD *)v15 + 32);
LABEL_95:
    log_OutPublic(v120, (uint64_t)"FE_TEXT_ANALYZER", 37000, 0, v69, v70, v71, v72, v126);
LABEL_98:
    if (*(_QWORD *)v67)
      heap_Free(*(_QWORD **)(v20 + 8), *(_QWORD *)v67);
    heap_Free(*(_QWORD **)(v20 + 8), v67);
    goto LABEL_101;
  }
  v74 = (_OWORD *)v73;
  v128 = v27;
  v129 = v67;
  if ((_DWORD)v31)
  {
    v75 = 0;
    v127 = v31;
    v76 = 0uLL;
    v133 = v28;
    v134 = v30;
    v130 = v31;
    while (2)
    {
      v74[6] = v76;
      v74[7] = v76;
      v74[4] = v76;
      v74[5] = v76;
      v74[2] = v76;
      v74[3] = v76;
      *v74 = v76;
      v74[1] = v76;
      memcpy(v74, *(const void **)(v30 + 8 * v75), *(unsigned int *)v28[v75]);
      LODWORD(v77) = 0;
      v135 = 0;
      v131 = v75;
      while (1)
      {
        v78 = *(unsigned __int8 *)(v67 + 9);
        if (*(_BYTE *)(v67 + 9))
        {
          v77 = v77;
          while (2)
          {
            v79 = 0;
            v80 = *(_QWORD *)(v67 + 16);
            v81 = 32 * v78;
            v82 = v78;
            while (1)
            {
              v83 = *(const char **)(v80 + v79);
              if (v83)
              {
                if (!strcmp(v83, (const char *)v74))
                  break;
              }
              v79 += 32;
              if (v81 == v79)
              {
                v100 = v82;
                v75 = v131;
                LODWORD(v82) = *(_DWORD *)(v29 + 4 * v131) - 1;
                goto LABEL_76;
              }
            }
            v100 = v82;
            v82 = (*(_DWORD *)(v29 + 4 * v131) - 1);
            if (v77 < v82)
            {
              v67 = v80 + v79;
              v28 = v133;
              v84 = v135 + *(_DWORD *)(v133[v131] + 4 * v77) + 1;
              v74[6] = 0uLL;
              v74[7] = 0uLL;
              v74[4] = 0uLL;
              v74[5] = 0uLL;
              v74[2] = 0uLL;
              v74[3] = 0uLL;
              *v74 = 0uLL;
              v74[1] = 0uLL;
              ++v77;
              v135 = v84;
              memcpy(v74, (const void *)(*(_QWORD *)(v134 + 8 * v131) + v84), *(unsigned int *)(v133[v131] + 4 * v77));
              v78 = *(unsigned __int8 *)(v80 + v79 + 9);
              if (*(_BYTE *)(v80 + v79 + 9))
                continue;
              v67 = v80 + v79;
              v30 = v134;
              v75 = v131;
              goto LABEL_72;
            }
            break;
          }
          v75 = v131;
LABEL_76:
          if ((_DWORD)v82 == (_DWORD)v77)
          {
            v30 = v134;
            goto LABEL_85;
          }
          v28 = v133;
          v101 = *(_DWORD *)(v133[v75] + 4 * v77);
          v102 = heap_Realloc(*(uint64_t **)(v20 + 8), v80, 32 * v100 + 32);
          if (v102)
          {
            v103 = (v101 + 1);
            *(_QWORD *)(v67 + 16) = v102;
            *(_BYTE *)(v102 + 32 * *(unsigned __int8 *)(v67 + 9) + 9) = 0;
            v104 = (_QWORD *)(v102 + 32 * *(unsigned __int8 *)(v67 + 9));
            *v104 = 0;
            v104[2] = 0;
            v104[3] = 0;
            v105 = (void *)heap_Alloc(*(_QWORD *)(v20 + 8), v103);
            *(_QWORD *)(*(_QWORD *)(v67 + 16) + 32 * *(unsigned __int8 *)(v67 + 9)) = v105;
            if (v105)
            {
              v98 = (_BYTE *)(v67 + 9);
              v99 = v77;
              memcpy(v105, v74, v103);
              v91 = *(_QWORD **)(v67 + 16);
              goto LABEL_80;
            }
          }
LABEL_96:
          log_OutPublic(*(_QWORD *)(v20 + 32), (uint64_t)"FE_TEXT_ANALYZER", 37000, 0, v87, v88, v89, v90, v126);
LABEL_97:
          heap_Free(*(_QWORD **)(v20 + 8), (uint64_t)v74);
          v27 = v128;
          v67 = v129;
          LODWORD(v31) = v130;
          v30 = v134;
          goto LABEL_98;
        }
LABEL_72:
        if ((_DWORD)v77 == *(_DWORD *)(v29 + 4 * v75) - 1)
          break;
        v85 = *(_DWORD *)(v28[v75] + 4 * v77);
        v86 = heap_Alloc(*(_QWORD *)(v20 + 8), 32);
        if (!v86)
          goto LABEL_96;
        v91 = (_QWORD *)v86;
        v92 = (v85 + 1);
        *(_BYTE *)(v86 + 9) = 0;
        *(_QWORD *)v86 = 0;
        *(_QWORD *)(v86 + 16) = 0;
        *(_QWORD *)(v86 + 24) = 0;
        v93 = (void *)heap_Alloc(*(_QWORD *)(v20 + 8), v92);
        *v91 = v93;
        if (!v93)
        {
          log_OutPublic(*(_QWORD *)(v20 + 32), (uint64_t)"FE_TEXT_ANALYZER", 37000, 0, v94, v95, v96, v97, v126);
          heap_Free(*(_QWORD **)(v20 + 8), (uint64_t)v91);
          goto LABEL_97;
        }
        v98 = (_BYTE *)(v67 + 9);
        v99 = v77;
        memcpy(v93, v74, v92);
        *(_QWORD *)(v67 + 16) = v91;
        v75 = v131;
LABEL_80:
        v106 = *v98;
        v67 = (uint64_t)&v91[4 * v106];
        *v98 = v106 + 1;
        v28 = v133;
        v30 = v134;
        v31 = v135 + *(_DWORD *)(v133[v75] + 4 * v99) + 1;
        v74[6] = 0u;
        v74[7] = 0u;
        v74[4] = 0u;
        v74[5] = 0u;
        v74[2] = 0u;
        v74[3] = 0u;
        *v74 = 0u;
        v74[1] = 0u;
        LODWORD(v77) = v77 + 1;
        memcpy(v74, (const void *)(*(_QWORD *)(v134 + 8 * v75) + v31), *(unsigned int *)(v133[v75] + 4 * v77));
        v135 = v31;
        LODWORD(v31) = v130;
        if (v77 >= *(_DWORD *)(v29 + 4 * v75))
          goto LABEL_87;
      }
      LODWORD(v82) = v77;
LABEL_85:
      v107 = (void *)heap_Alloc(*(_QWORD *)(v20 + 8), 128);
      *(_QWORD *)(v67 + 24) = v107;
      if (!v107)
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)v15 + 32), (uint64_t)"FE_TEXT_ANALYZER", 37000, 0, v108, v109, v110, v111, v126);
        v28 = v133;
        goto LABEL_97;
      }
      memcpy(v107, (const void *)(*(_QWORD *)(v30 + 8 * v75) + v135), *(unsigned int *)(v133[v75] + 4 * v82));
      v112 = *(unsigned int *)(v133[v75] + 4 * v82);
      v28 = v133;
      *(_BYTE *)(*(_QWORD *)(v67 + 24) + v112) = 0;
      v67 = v129;
      LODWORD(v31) = v130;
LABEL_87:
      ++v75;
      v76 = 0uLL;
      if (v75 != v127)
        continue;
      break;
    }
  }
  heap_Free(*(_QWORD **)(v20 + 8), (uint64_t)v74);
  v27 = v128;
  *(_QWORD *)(v15 + 32) = v129;
LABEL_104:
  if (*(_QWORD *)v145)
    ssftriff_reader_ObjClose(*(_QWORD **)v145, v113, v114, v115, v116, v117, v118, v119);
  if (v30)
  {
    v122 = v28;
    v123 = v31;
    if ((_DWORD)v31)
    {
      v31 = v31;
      v124 = (uint64_t *)v30;
      do
      {
        if (*v124)
        {
          heap_Free(*(_QWORD **)(v20 + 8), *v124);
          *v124 = 0;
        }
        ++v124;
        --v31;
      }
      while (v31);
    }
    heap_Free(*(_QWORD **)(v20 + 8), v30);
    v28 = v122;
    LODWORD(v31) = v123;
  }
  if (v28)
  {
    v125 = (uint64_t)v28;
    if ((_DWORD)v31)
    {
      v31 = v31;
      do
      {
        if (*v28)
        {
          heap_Free(*(_QWORD **)(v20 + 8), *v28);
          *v28 = 0;
        }
        ++v28;
        --v31;
      }
      while (v31);
    }
    heap_Free(*(_QWORD **)(v20 + 8), v125);
  }
  if (v27)
    heap_Free(*(_QWORD **)(v20 + 8), v27);
  if (v29)
    heap_Free(*(_QWORD **)(v20 + 8), v29);
  return 0;
}

uint64_t fe_text_analyzer_ObjClose(_QWORD **a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = safeh_HandleCheck((uint64_t)a1, a2, 62347, 80);
  if ((v3 & 0x80000000) != 0)
    return 2592088072;
  v4 = v3;
  if (a1)
  {
    if (a1[3])
      objc_ReleaseObject((*a1)[6], (uint64_t)"LINGDB");
    if (a1[5])
      objc_ReleaseObject((*a1)[6], (uint64_t)"FE_DCTLKP");
    v5 = (uint64_t)a1[4];
    if (v5)
    {
      loc_text_analyzer_free_node(*a1, v5);
      v6 = (uint64_t)a1[4];
      if (v6)
        heap_Free((_QWORD *)(*a1)[1], v6);
      a1[4] = 0;
    }
    heap_Free((_QWORD *)(*a1)[1], (uint64_t)a1);
  }
  return v4;
}

uint64_t fe_text_analyzer_ObjReopen(uint64_t *a1, int a2)
{
  uint64_t v3;
  _OWORD v5[16];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 2592088070;
  memset(v5, 0, sizeof(v5));
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62347, 80) & 0x80000000) != 0)
    return 2592088072;
  if (a1)
    return fe_text_analyzer_CreateBrokerString(*a1, (char *)v5);
  return v3;
}

uint64_t fe_text_analyzer_ProcessStart(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 62347, 80);
  if ((int)result >= 0)
    return result;
  else
    return 2592088072;
}

uint64_t fe_text_analyzer_Process(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  char **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  void *v40;
  size_t v41;
  uint64_t v42;
  char *v43;
  unsigned int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  __int128 v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  char *v62;
  uint64_t *v63;
  char *v64;
  char *__s;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 __c;
  __int16 __c_1;
  char **__c_3;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  _BYTE *v76;
  char __s2[16];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v76 = 0;
  v74 = 0;
  v75 = 0;
  v73 = 0;
  v72 = 0;
  __c_3 = 0;
  __c_1 = 0;
  __c = 0;
  v67 = 0;
  v68 = 0;
  v66 = 0;
  v64 = 0;
  __s = 0;
  v91 = 0u;
  v92 = 0u;
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v80 = 0u;
  v78 = 0u;
  v79 = 0u;
  *(_OWORD *)__s2 = 0u;
  *((_DWORD *)a1 + 16) = 0;
  *a5 = 1;
  log_OutText((*a1)[4], (uint64_t)"FE_TEXT_ANALYZER", 5, 0, (uint64_t)"[FE_TEXT_ANALYZER]: Entering", a6, a7, a8, v59);
  *((_DWORD *)a1 + 16) = 0;
  if ((((uint64_t (*)(_QWORD *, _QWORD *, const char *, const char *, char ***, __int16 *, unsigned __int8 *))a1[5][12])(a1[6], a1[7], "fecfg", "fetext_act_text_analyzer", &__c_3, &__c_1, &__c) & 0x80000000) == 0&& __c_1)
  {
    v11 = *__c_3;
    v12 = strchr(*__c_3, __c);
    if (v12)
    {
      *v12 = 0;
      v11 = *__c_3;
    }
    if (!strcmp(v11, "yes"))
      *((_DWORD *)a1 + 16) = 1;
  }
  __c_1 = 0;
  v13 = ((uint64_t (*)(_QWORD *, _QWORD *, const char *, const char *, char ***, __int16 *, unsigned __int8 *))a1[5][12])(a1[6], a1[7], "fecfg", "fetext_trigger", &__c_3, &__c_1, &__c);
  v14 = 0;
  if ((v13 & 0x80000000) == 0 && __c_1)
  {
    v15 = v13;
    v16 = *__c_3;
    v17 = strchr(*__c_3, __c);
    if (v17)
    {
      *v17 = 0;
      v16 = *__c_3;
    }
    strlen(v16);
    __memcpy_chk();
    v14 = v15;
  }
  if (*((_DWORD *)a1 + 16))
  {
    v18 = (char **)a1[4];
    if (v18)
    {
      v14 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, char *))a1[3][13])(a3, a4, 1, 0, (char *)&v75 + 2);
      if ((v14 & 0x80000000) == 0
        && (((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, int *))a1[3][23])(a3, a4, HIWORD(v75), 0, &v72) & 0x80000000) == 0
        && (unsigned __int16)v72 == 1)
      {
        v14 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _BYTE **, char *))a1[3][22])(a3, a4, HIWORD(v75), 0, &v76, (char *)&v74 + 2);
        if ((v14 & 0x80000000) == 0 && HIWORD(v74) >= 2u)
        {
          if (*v76)
          {
            v14 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, char *))a1[3][22])(a3, a4, HIWORD(v75), 1, &v73, (char *)&v72 + 2);
            if ((v14 & 0x80000000) == 0)
            {
              v19 = HIWORD(v72);
              if (HIWORD(v72))
              {
                v20 = 0;
                v21 = v73;
                for (i = 24; *(_DWORD *)(v21 + i - 24) != 60 || strcmp(*(const char **)(v21 + i), __s2); i += 32)
                {
                  if (v19 == ++v20)
                    return v14;
                }
                v14 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, int *))a1[3][13])(a3, a4, 2, HIWORD(v75), &v75);
                if ((v14 & 0x80000000) == 0)
                {
                  v63 = (uint64_t *)heap_Calloc((_QWORD *)(*a1)[1], 1, 32);
                  if (!v63)
                  {
                    v14 = 2592088074;
                    log_OutPublic((*a1)[4], (uint64_t)"FE_TEXT_ANALYZER", 37000, 0, v24, v25, v26, v27, v60);
                    return v14;
                  }
                  v28 = v75;
                  if ((_WORD)v75)
                  {
                    v29 = 0;
                    v61 = 0;
                    v30 = -1;
                    v31 = (uint64_t)v63;
                    while (1)
                    {
                      v32 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, char *, char *))a1[3][21])(a3, a4, v28, 0, 1, (char *)&v67 + 4, (char *)&v74 + 2);
                      if ((v32 & 0x80000000) != 0)
                        break;
                      v32 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t *, char *))a1[3][21])(a3, a4, (unsigned __int16)v75, 1, 1, &v67, (char *)&v74 + 2);
                      if ((v32 & 0x80000000) != 0)
                        break;
                      v32 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))a1[3][21])(a3, a4, (unsigned __int16)v75, 2, 1, &v66, (char *)&v74 + 2);
                      if ((v32 & 0x80000000) != 0)
                        break;
                      if ((HIDWORD(v67) == 9 || HIDWORD(v67) == 4) && (v67 > v29 || v30 == -1))
                      {
                        v32 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))a1[3][22])(a3, a4, (unsigned __int16)v75, 5, &__s, (char *)&v74 + 2);
                        if ((v32 & 0x80000000) != 0)
                          break;
                        if (v30 == -1)
                          v30 = (unsigned __int16)v75;
                        v33 = (void *)heap_Calloc((_QWORD *)(*a1)[1], 1, (v66 - v67 + 1));
                        *(_QWORD *)v31 = v33;
                        if (!v33)
                          goto LABEL_65;
                        memcpy(v33, &v76[v67], (v66 - v67));
                        *(_BYTE *)(*(_QWORD *)v31 + (v66 - v67)) = 0;
                        v38 = strlen(__s);
                        v39 = heap_Calloc((_QWORD *)(*a1)[1], 1, v38 + 1);
                        *(_QWORD *)(v31 + 8) = v39;
                        if (!v39)
                          goto LABEL_65;
                        v40 = (void *)v39;
                        v41 = strlen(__s);
                        memcpy(v40, __s, v41);
                        *(_BYTE *)(*(_QWORD *)(v31 + 8) + strlen(__s)) = 0;
                        v42 = heap_Calloc((_QWORD *)(*a1)[1], 1, 32);
                        *(_QWORD *)(v31 + 24) = v42;
                        if (!v42)
                          goto LABEL_65;
                        *(_DWORD *)(v31 + 16) = v61;
                        v29 = v67;
                        ++v61;
                        v31 = v42;
                      }
                      v14 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, int *))a1[3][15])(a3, a4, (unsigned __int16)v75, &v75);
                      if ((v14 & 0x80000000) != 0)
                        goto LABEL_66;
                      v28 = v75;
                      if (!(_WORD)v75)
                        goto LABEL_47;
                    }
                    v14 = v32;
                  }
                  else
                  {
LABEL_47:
                    v43 = (char *)heap_Calloc((_QWORD *)(*a1)[1], 1, 128);
                    v64 = v43;
                    if (v43)
                    {
                      v62 = v43;
                      v44 = 0;
                      v45 = 0;
                      v46 = 1;
                      v47 = (uint64_t)v63;
                      do
                      {
                        if (loc_match_against_rules(v47, &v68, v18, &v64, v46)
                          && *(_DWORD *)(v68 + 16) - *(_DWORD *)(v47 + 16) > v44)
                        {
                          v44 = *(_DWORD *)(v68 + 16) - *(_DWORD *)(v47 + 16);
                          v45 = 1;
                        }
                        v46 = 0;
                        v47 = *(_QWORD *)(v47 + 24);
                      }
                      while (v47);
                      v48 = 0;
                      if (v20 && v45 == 1)
                      {
                        v49 = heap_Calloc((_QWORD *)(*a1)[1], 1, 32 * HIWORD(v72));
                        v48 = v49;
                        if (v49)
                        {
                          if (HIWORD(v72))
                          {
                            v54 = 0;
                            v55 = v49 + i;
                            v56 = 32 * HIWORD(v72);
                            do
                            {
                              if (v20)
                              {
                                v57 = (_OWORD *)(v49 + v54);
                                v58 = *(_OWORD *)(v73 + v54 + 16);
                                *v57 = *(_OWORD *)(v73 + v54);
                                v57[1] = v58;
                              }
                              else
                              {
                                *(_DWORD *)(v55 - 24) = 60;
                                *(_OWORD *)(v55 - 20) = *(_OWORD *)(v73 + i - 20);
                                *(_QWORD *)(v49 + i) = v62;
                              }
                              v54 += 32;
                              --v20;
                            }
                            while (v56 != v54);
                          }
                          v14 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))a1[3][20])(a3, a4, HIWORD(v75), 1);
                        }
                        else
                        {
                          v14 = 2592088074;
                          log_OutPublic((*a1)[4], (uint64_t)"FE_TEXT_ANALYZER", 37000, 0, v50, v51, v52, v53, v60);
                        }
                      }
                      goto LABEL_67;
                    }
LABEL_65:
                    v14 = 2592088074;
                    log_OutPublic((*a1)[4], (uint64_t)"FE_TEXT_ANALYZER", 37000, 0, v34, v35, v36, v37, v60);
                  }
LABEL_66:
                  v48 = 0;
LABEL_67:
                  loc_text_analyzer_free_orth(*a1, v63);
                  heap_Free((_QWORD *)(*a1)[1], (uint64_t)v63);
                  if (v64)
                    heap_Free((_QWORD *)(*a1)[1], (uint64_t)v64);
                  if (v48)
                    heap_Free((_QWORD *)(*a1)[1], v48);
                }
              }
            }
          }
        }
      }
    }
  }
  return v14;
}

uint64_t fe_text_analyzer_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 62347, 80);
  if ((int)result >= 0)
    return result;
  else
    return 2592088072;
}

uint64_t fe_text_analyzer_CreateBrokerString(uint64_t a1, char *a2)
{
  uint64_t result;
  uint64_t v5;
  int v6[2];
  _OWORD v7[8];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  *(_QWORD *)v6 = 0;
  memset(v7, 0, sizeof(v7));
  result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"langcode", v6);
  if ((result & 0x80000000) == 0)
  {
    result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"fecfg", &v5);
    if ((result & 0x80000000) == 0)
    {
      __strcat_chk();
      __strcat_chk();
      __strcat_chk();
      __strcat_chk();
      return brokeraux_ComposeBrokerString(a1, (const char *)v7, 1, 1, *(char **)v6, 0, 0, a2, 0x100uLL);
    }
  }
  return result;
}

_QWORD *loc_text_analyzer_free_node(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (a2)
  {
    v3 = result;
    v4 = *(_QWORD *)a2;
    if (v4)
    {
      result = heap_Free((_QWORD *)result[1], v4);
      *(_QWORD *)a2 = 0;
    }
    v5 = *(_QWORD *)(a2 + 24);
    if (v5)
    {
      result = heap_Free((_QWORD *)v3[1], v5);
      *(_QWORD *)(a2 + 24) = 0;
    }
    if (*(_BYTE *)(a2 + 9))
    {
      v6 = 0;
      v7 = 0;
      do
      {
        result = (_QWORD *)loc_text_analyzer_free_node(v3, *(_QWORD *)(a2 + 16) + v6);
        ++v7;
        v6 += 32;
      }
      while (v7 < *(unsigned __int8 *)(a2 + 9));
    }
    v8 = *(_QWORD *)(a2 + 16);
    if (v8)
      result = heap_Free((_QWORD *)v3[1], v8);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t loc_match_against_rules(uint64_t a1, _QWORD *a2, char **a3, char **a4, int a5)
{
  char **v7;
  uint64_t v8;
  int v9;
  const char *v10;
  char *v11;
  char **v12;
  char *v13;
  char *v14;
  const char *v15;
  const char *v16;
  BOOL v17;
  const char *v18;

  v7 = 0;
  while (1)
  {
    v8 = *((unsigned __int8 *)a3 + 9);
    if (!*((_BYTE *)a3 + 9))
      return 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = (char **)a3[2];
    do
    {
      v13 = *v12;
      v14 = strchr(*v12, 58);
      if (v14)
      {
        v11 = v13;
        v10 = v14 + 1;
      }
      if (!v11)
      {
        v15 = *(const char **)a1;
        if (v13)
          v17 = v15 == 0;
        else
          v17 = 1;
        if (v17)
          goto LABEL_26;
        v16 = v13;
        goto LABEL_18;
      }
      if (strstr(v11, "POS:") && (v15 = *(const char **)(a1 + 8)) != 0
        || a5 == 1 && strstr(v11, "BEG:") && (v15 = *(const char **)a1) != 0)
      {
        v16 = v10;
LABEL_18:
        if (!strcmp(v16, v15))
          goto LABEL_29;
        goto LABEL_26;
      }
      if (strstr(v11, "NOT:") && *(_QWORD *)a1)
      {
        if (strcmp(v10, *(const char **)a1))
        {
LABEL_29:
          v7 = v12;
          goto LABEL_30;
        }
      }
      else if (strstr(v11, "ELIP:"))
      {
        v7 = v12;
        v9 = 1;
      }
LABEL_26:
      v12 += 4;
      --v8;
    }
    while (v8);
    if (!v9)
      return 0;
LABEL_30:
    a1 = *(_QWORD *)(a1 + 24);
    if (!a1)
      return 0;
    a5 = 0;
    v18 = v7[3];
    a3 = v7;
    if (v18)
    {
      strcpy(*a4, v18);
      *a2 = a1;
      return 1;
    }
  }
}

_QWORD *loc_text_analyzer_free_orth(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2)
  {
    v3 = result;
    v4 = *a2;
    if (v4)
      heap_Free((_QWORD *)result[1], v4);
    v5 = a2[1];
    if (v5)
      heap_Free((_QWORD *)v3[1], v5);
    result = (_QWORD *)loc_text_analyzer_free_orth(v3, a2[3]);
    v6 = a2[3];
    if (v6)
      result = heap_Free((_QWORD *)v3[1], v6);
    a2[3] = 0;
  }
  return result;
}

uint64_t lidword_Identify(uint64_t a1, const void *a2, unsigned int a3, uint64_t *a4, unsigned int *a5, unsigned int *a6, uint64_t *a7, unsigned int *a8, unsigned int *a9)
{
  uint64_t inserted;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unsigned int v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int16 v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  char *v43;
  int v44;
  unsigned int v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned __int8 v48;
  uint64_t Langs;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  unsigned int v56;
  char v57;
  unsigned int v58;
  unsigned __int16 v59;
  unsigned __int8 v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unsigned int v67;
  char v68;
  unsigned int v69;
  unsigned __int16 v70;
  unsigned __int8 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  unsigned int v79;
  char v80;
  unsigned int v81;
  unsigned __int16 v82;
  unsigned __int8 *v83;
  unsigned __int8 *v84;
  unsigned __int8 v85;
  unsigned __int8 v86;
  const char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  __int16 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  __int16 v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  _DWORD *v134;
  _DWORD *v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  _DWORD *v140;
  _DWORD *v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  BOOL v145;
  char *v146;
  unsigned int v147;
  int v148;
  int v149;
  unsigned __int8 *v150;
  char *v151;
  unsigned __int8 *v152;
  int v153;
  unsigned __int16 v154;
  unsigned __int8 *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  const char *v166;
  int v167;
  _DWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  _QWORD *v190;
  int v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned __int8 *v199;
  unsigned __int8 *v200;
  unint64_t v201;
  uint64_t v202;
  unsigned __int16 v203;
  unsigned __int8 v204;
  unsigned __int16 v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  float *v212;
  unsigned int v213;
  char *v214;
  unint64_t v215;
  int v216;
  unsigned __int8 *v217;
  int v218;
  uint64_t v219;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t ***v224;
  unsigned int *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  float v229;
  int v230;
  int v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  BOOL v237;
  int *v238;
  int v239;
  uint64_t v240;
  float v241;
  float v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  BOOL v249;
  unint64_t v250;
  unint64_t v251;
  float v252;
  float v253;
  unint64_t v254;
  float v255;
  int v256;
  uint64_t v257;
  unint64_t v258;
  float v259;
  int *v260;
  float v261;
  uint64_t v262;
  unsigned int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  unsigned __int8 *v274;
  unsigned __int8 *v275;
  unsigned __int8 v276;
  unsigned __int8 *v277;
  uint64_t v278;
  uint64_t v279;
  unsigned int v280;
  unsigned int *v281;
  uint64_t *v282;
  unsigned int *v283;
  _DWORD *v284;
  unsigned __int16 v285;
  unsigned int *v286;
  unsigned int *v287;
  unsigned __int8 *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t *v291;
  unsigned __int8 *v292;
  unsigned __int8 *v293;
  unint64_t v294;
  int v295;
  uint64_t v296;
  uint64_t ****v297;
  char *__s;
  char *__sa;
  char *__sb;
  int __sc;
  _QWORD v302[4];
  unsigned __int8 *v303;
  unsigned __int8 *v304;
  unsigned __int8 *v305;
  unsigned __int8 *v306;
  char *v307;
  char v308;
  int v309;
  uint64_t v310;
  _QWORD v311[2];
  _QWORD v312[2];
  int v313;
  _BYTE __c[11];
  _QWORD v315[2];
  _QWORD v316[2];
  _BYTE v317[20];
  const void *v318[66];

  v318[64] = *(const void **)MEMORY[0x1E0C80C00];
  inserted = 2345672714;
  v305 = 0;
  v303 = 0;
  if (!a1)
    return 2345672711;
  if (!*(_DWORD *)(a1 + 1924))
    return 0;
  v18 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, a3 + 1);
  if (!v18)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 48000, 0, v19, v20, v21, v22, v263);
    return inserted;
  }
  v23 = v18;
  memcpy(v18, a2, a3);
  v23[a3] = 0;
  v24 = strlen(v23);
  if (*(_DWORD *)(*a4 + 16) < v24)
  {
LABEL_5:
    inserted = 0;
    v25 = 0;
LABEL_6:
    v26 = 0;
    goto LABEL_7;
  }
  if (*a6 >= 2)
  {
    v28 = 1;
    do
    {
      v29 = *(_DWORD *)(*a4 + 32 * v28);
      v30 = v29 > 0x28;
      v31 = (1 << v29) & 0x10000200080;
      if (!v30 && v31 != 0)
        goto LABEL_5;
    }
    while (*a6 > ++v28);
  }
  memset(v302, 0, 30);
  v25 = (unsigned __int8 *)lidword_normalizedDup(a1, v23, v24, v302, 1);
  if (!v25)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 48000, 0, v33, v34, v35, v36, v263);
    goto LABEL_6;
  }
  v37 = strlen(v23);
  v26 = (unsigned __int8 *)lidword_normalizedDup(a1, v23, v37, v302, 0);
  if (!v26)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 48000, 0, v38, v39, v40, v41, v263);
    goto LABEL_7;
  }
  v282 = a7;
  v283 = a8;
  v297 = (uint64_t ****)(a1 + 134912);
  lidword_InitStruct(a1);
  v292 = (unsigned __int8 *)v23;
  v281 = a6;
  lidword_CheckLangTags(a1, (unsigned __int8 *)v23, a4, a6);
  v288 = v25;
  v306 = v25;
  lidword_AdvanceSkippingSpacesInNormSW(&v306, &v305);
  v293 = v26;
  v304 = v26;
  lidword_AdvanceSkippingSpacesInNormSW(&v304, &v303);
  v42 = v305;
  v43 = (char *)v306;
  v291 = a4;
  v44 = 0;
  if (v305 == v306)
  {
LABEL_252:
    v192 = (unsigned __int16)v44;
    v23 = (char *)v292;
    lidword_ExtractFeats(a1, v292, (unsigned __int16)v44);
    v304 = v293;
    lidword_AdvanceSkippingSpacesInNormSW(&v304, &v303);
    v200 = v303;
    v199 = v304;
    if (v303 == v304)
    {
LABEL_338:
      lidword_Smoothing(a1, v192, v193, v194, v195, v196, v197, v198);
      inserted = lidword_InsertLangTags(a1, (unsigned __int8 *)v23, a4, a5, v281, v192, v282, v283, a9);
      goto LABEL_346;
    }
    v201 = 0;
    v202 = a1 + 2044;
    v280 = (unsigned __int16)v44;
    while (1)
    {
      if (!*v199 || v201 > 0xFF)
        goto LABEL_338;
      if (*(_DWORD *)(a1 + 4 * v201 + 133116) != -1)
        goto LABEL_337;
      v203 = *(_WORD *)(a1 + 2026) + *(_WORD *)(a1 + 2030) * *(_WORD *)(a1 + 1928) + 3;
      v204 = *v200;
      *v200 = 0;
      __sb = (char *)v199;
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID NN fallback: %s", v196, v197, v198, (uint64_t)v199);
      *v200 = v204;
      v285 = v203;
      v205 = *(_WORD *)(a1 + 2024) * v203;
      v206 = 4 * v205;
      v207 = (void *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), v206);
      v318[0] = v207;
      if (!v207)
      {
        v221 = *(_QWORD *)(a1 + 16);
        goto LABEL_343;
      }
      v212 = (float *)v207;
      v296 = v202;
      if (v205)
        memset_pattern16(v207, &unk_1DEC65190, v206);
      v315[0] = 0;
      v294 = *(unsigned __int16 *)(a1 + 2024);
      if (*(_QWORD *)(a1 + 2016))
      {
LABEL_261:
        v213 = 0;
        v214 = __sb;
        if ((_WORD)v200 == (_WORD)__sb || !(_DWORD)v294)
          goto LABEL_278;
        v287 = a5;
        v215 = 0;
        v216 = 0;
        do
        {
          v217 = (unsigned __int8 *)&v214[(unsigned __int16)v216];
          v218 = Utf8_LengthInBytes(v217, 1);
          strncpy(*(char **)(*(_QWORD *)(a1 + 2016) + 8 * v215), (const char *)v217, (unsigned __int16)v218);
          v214 = __sb;
          v219 = *(_QWORD *)(*(_QWORD *)(a1 + 2016) + 8 * v215++);
          *(_BYTE *)(v219 + (unsigned __int16)v218) = 0;
          v216 += v218;
        }
        while ((unsigned __int16)((_WORD)v200 - (_WORD)__sb) > (unsigned __int16)v216 && v215 < v294);
        v213 = (unsigned __int16)v215;
        a5 = v287;
        a4 = v291;
      }
      else
      {
        v221 = *(_QWORD *)(a1 + 16);
        v222 = heap_Calloc(*(_QWORD **)(v221 + 8), 1, (8 * v294) | 1);
        *(_QWORD *)(a1 + 2016) = v222;
        if (!v222)
          goto LABEL_343;
        if ((_DWORD)v294)
        {
          v223 = 0;
          v192 = v280;
          while (1)
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 2016) + v223) = heap_Calloc(*(_QWORD **)(v221 + 8), 1, 5);
            if (!*(_QWORD *)(*(_QWORD *)(a1 + 2016) + v223))
              break;
            v223 += 8;
            if (8 * v294 == v223)
              goto LABEL_261;
          }
LABEL_343:
          log_OutPublic(*(_QWORD *)(v221 + 32), (uint64_t)"FE_LID", 48000, 0, v208, v209, v210, v211, v272);
          v228 = 2345672714;
LABEL_344:
          inserted = v228;
          goto LABEL_345;
        }
        v213 = 0;
      }
      v192 = v280;
LABEL_278:
      if (!*(_QWORD *)(a1 + 1960) || (v224 = *v297) == 0)
      {
        v228 = 2345672704;
        goto LABEL_344;
      }
      if (v213)
      {
        v225 = a5;
        v226 = 0;
        v227 = v213;
        do
        {
          v228 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1960) + 56))(*(_QWORD *)(a1 + 1984), *(_QWORD *)(a1 + 1992), *(_QWORD *)(*(_QWORD *)(a1 + 2016) + 8 * v226), *(_QWORD *)(a1 + 2008));
          if ((v228 & 0x1FFF) == 0x14)
          {
            if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, _QWORD))(*(_QWORD *)(a1 + 1960) + 56))(*(_QWORD *)(a1 + 1984), *(_QWORD *)(a1 + 1992), "$MEANC2V$", *(_QWORD *)(a1 + 2008)) & 0x1FFF) == 0x14)
            {
              v228 = 2345672704;
              goto LABEL_344;
            }
          }
          else if ((v228 & 0x80000000) != 0)
          {
            goto LABEL_344;
          }
          memcpy(&v212[v226 * v285], *(const void **)(a1 + 2008), 4 * *(unsigned __int16 *)(a1 + 2026));
          v230 = v226 * v285 + *(unsigned __int16 *)(a1 + 2026);
          v231 = *(unsigned __int16 *)(a1 + 2030);
          if (*(_WORD *)(a1 + 2030))
          {
            v232 = 0;
            v233 = *(unsigned __int16 *)(a1 + 1928);
            v202 = v296;
            v234 = v296;
            do
            {
              if ((_DWORD)v233)
              {
                v235 = *(unsigned __int16 *)(a1 + 2028);
                v237 = v232 + (int)v201 < v235 || v232 + (int)v201 >= v235 + v192;
                v238 = (int *)(v234 - (v235 << 9));
                v239 = v230;
                v240 = v233;
                do
                {
                  v229 = -1.0;
                  if (!v237)
                    v229 = (float)*v238;
                  v212[v239++] = v229;
                  ++v238;
                  --v240;
                }
                while (v240);
              }
              v230 += v233;
              ++v232;
              v234 += 512;
            }
            while (v232 != v231);
          }
          else
          {
            v202 = v296;
          }
          LOBYTE(v229) = *(_BYTE *)(a1 + v201 + 134396);
          v241 = (float)LODWORD(v229);
          v212[v230] = v241;
          LOBYTE(v241) = *(_BYTE *)(a1 + v201 + 134652);
          v242 = (float)LODWORD(v241);
          v212[v230 + 1] = v242;
          LOBYTE(v242) = *(_BYTE *)(a1 + v201 + 134140);
          v212[v230 + 2] = (float)LODWORD(v242);
          ++v226;
        }
        while (v226 != v227);
        v224 = *v297;
        a5 = v225;
        a4 = v291;
      }
      v228 = fi_predict(v224, v318, *(unsigned __int16 *)(a1 + 2024), v315, v208, v209, v210, v211);
      if ((v228 & 0x80000000) != 0)
        goto LABEL_344;
      v246 = *(unsigned __int16 *)(a1 + 1928);
      if (*(_WORD *)(a1 + 1928))
      {
        v247 = 0;
        do
        {
          v248 = *(_DWORD *)(v202 + v247);
          if (v248)
            v249 = 1;
          else
            v249 = 4 * v246 - 4 == v247;
          v247 += 4;
        }
        while (!v249);
        v250 = 0;
        v251 = 0;
        v252 = 0.0;
        v23 = (char *)v292;
        do
        {
          v253 = v252;
          v254 = v251;
          v252 = *(float *)(v315[0] + 4 * v250);
          if (v253 < v252)
            v255 = *(float *)(v315[0] + 4 * v250);
          else
            v255 = v253;
          if (v253 < v252)
            v251 = v250;
          else
            v251 = v251;
          if (v248 && v253 < v252)
          {
            v251 = v250;
            if (!*(_DWORD *)(v202 + 4 * v250))
            {
              log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID prune out NN predictions if languages not in the LID1.0 destination field", v243, v244, v245, v272);
              LODWORD(v246) = *(unsigned __int16 *)(a1 + 1928);
              v252 = v253;
              v251 = v254;
            }
          }
          else
          {
            v252 = v255;
          }
          ++v250;
        }
        while (v250 < v246);
        v256 = (unsigned __int16)v251;
        if ((_DWORD)v246)
        {
          __sc = (unsigned __int16)v251;
          v257 = 0;
          v258 = 0;
          do
          {
            log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID [%3d] %1.5lf : %s %s", v243, v244, v245, v258++);
            v257 += 8;
          }
          while (v258 < *(unsigned __int16 *)(a1 + 1928));
          v202 = v296;
          v256 = __sc;
        }
      }
      else
      {
        v256 = 0;
        v252 = 0.0;
        v23 = (char *)v292;
      }
      v259 = *(float *)(a1 + 2036);
      v260 = (int *)(a1 + 4 * v201 + 133116);
      if (v252 <= v259 && v256 != *(unsigned __int16 *)(a1 + 1930))
      {
        v261 = *(float *)(a1 + 2032);
        v262 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
        if (v252 <= v261)
        {
          log_OutText(v262, (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID NN thresholding set to %f triggered: falling back on main language", v243, v244, v245, COERCE__INT64(v261));
          v256 = *(unsigned __int16 *)(a1 + 1930);
        }
        else
        {
          log_OutText(v262, (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID NN thresholding set to %f triggered: falling back on language smoothing", v243, v244, v245, COERCE__INT64(v259));
          v256 = -3;
        }
        v260 = (int *)(a1 + 4 * v201 + 133116);
      }
      *v260 = v256;
LABEL_337:
      lidword_AdvanceSkippingSpacesInNormEW((uint64_t)&v304, &v303);
      ++v201;
      v200 = v303;
      v199 = v304;
      v202 += 512;
      if (v303 == v304)
        goto LABEL_338;
    }
  }
  v278 = a1 + 133116;
  v279 = a1 + 2044;
  v45 = 1;
  v286 = a5;
  while (1)
  {
    if (!*v43 || (unsigned __int16)v44 > 0xFFu)
      goto LABEL_252;
    if (*(_DWORD *)(a1 + 4 * (unsigned __int16)v44 + 133116) != -4)
      break;
LABEL_228:
    lidword_AdvanceSkippingSpacesInNormEW((uint64_t)&v306, &v305);
    lidword_AdvanceSkippingSpacesInNormEW((uint64_t)&v304, &v303);
    v44 += v45;
    v42 = v305;
    v43 = (char *)v306;
    if (v305 == v306)
      goto LABEL_252;
  }
  v295 = v44;
  v284 = (_DWORD *)(a1 + 4 * (unsigned __int16)v44 + 133116);
  v47 = v303;
  v46 = v304;
  v311[0] = 0;
  v311[1] = 0;
  *(_QWORD *)((char *)v312 + 6) = 0;
  v312[0] = 0;
  v289 = *(_QWORD *)(a1 + 1088);
  v310 = 0;
  v309 = 0;
  v308 = 0;
  v307 = 0;
  v315[0] = 0;
  *(_WORD *)&__c[1] = 0;
  __c[0] = 0;
  v48 = *v303;
  *v303 = 0;
  LOWORD(v313) = 1;
  __s = (char *)v46;
  Langs = (*(uint64_t (**)(_QWORD, _QWORD, const char *))(*(_QWORD *)(a1 + 64) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "ml2mw");
  if ((Langs & 0x80000000) != 0)
    goto LABEL_341;
  if ((_WORD)v313)
  {
    v50 = 0;
    do
    {
      *((_BYTE *)v318 + v50) = LH_atou(*(const char **)(v315[0] + 8 * v50));
      ++v50;
    }
    while (v50 < (unsigned __int16)v313);
    ssft_qsort((uint64_t)v318, (unsigned __int16)v313, 1, (uint64_t (*)(unint64_t, unint64_t))compare_2);
    if ((_WORD)v313)
    {
      v54 = 0;
      while (1)
      {
        *v303 = v48;
        v55 = __s;
        if (*__s)
        {
          v55 = __s;
          do
          {
            v56 = strlen(v55);
            if (utf8_BelongsToSet(0, v55, 0, v56))
              break;
            v55 += (int)Utf8_LengthInBytes((unsigned __int8 *)v55, 1);
          }
          while (*v55);
        }
        *(_QWORD *)&__c[3] = v55;
        v57 = *v55;
        v58 = *((unsigned __int8 *)v318 + v54);
        if (*v55 && v58 >= 2)
        {
          v59 = 1;
          do
          {
            lidword_AdvanceToEndMultiword((char **)&__c[3]);
            ++v59;
            v55 = *(char **)&__c[3];
            v57 = **(_BYTE **)&__c[3];
            v58 = *((unsigned __int8 *)v318 + v54);
          }
          while (**(_BYTE **)&__c[3] && v58 > v59);
        }
        else
        {
          v59 = 1;
        }
        if (v58 == v59)
        {
          *v55 = 0;
          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID multi word case-sensitive lookup : %s", v51, v52, v53, (uint64_t)__s);
          *(_WORD *)&__c[1] = 1;
          Langs = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, _QWORD *, _BYTE *, _BYTE *, _QWORD))(*(_QWORD *)(a1 + 64) + 152))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "ml2", __s, v315, &__c[1], __c, *(unsigned __int8 *)(a1 + 2040));
          if ((Langs & 0x80000000) != 0)
            goto LABEL_341;
          *v55 = v57;
          if (*(unsigned __int16 *)&__c[1] == 1)
            break;
        }
        if (++v54 >= (unint64_t)(unsigned __int16)v313)
        {
          v47 = v303;
          goto LABEL_52;
        }
      }
      v104 = *(const char **)v315[0];
      if (!strcmp(*(const char **)v315[0], "all"))
      {
        v109 = -3;
      }
      else
      {
        v108 = *(unsigned __int16 *)(a1 + 1928);
        if (*(_WORD *)(a1 + 1928))
        {
          v109 = 0;
          v110 = *(_QWORD *)(a1 + 1936);
          do
          {
            if (!strcmp((const char *)(v110 + 8 * v109), v104))
              break;
            ++v109;
          }
          while (v108 > v109);
        }
        else
        {
          v109 = 0;
        }
      }
      v45 = *((unsigned __int8 *)v318 + v54);
      if (*((_BYTE *)v318 + v54))
      {
        v134 = (_DWORD *)(v279 + ((unint64_t)(unsigned __int16)v295 << 9) + 4 * (unsigned __int16)v109);
        v135 = (_DWORD *)(v278 + 4 * (unsigned __int16)v295);
        v136 = *((unsigned __int8 *)v318 + v54);
        do
        {
          if ((v109 & 0x8000) == 0)
            *v134 = 1;
          *v135++ = v109;
          v134 += 128;
          --v136;
        }
        while (v136);
      }
      v137 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
      if (v109 < 0)
        log_OutText(v137, (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID found ambiguously in ML2 lexicon", v105, v106, v107, v264);
      else
        log_OutText(v137, (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID found unambiguously in ML2 lexicon: %s", v105, v106, v107, *(_QWORD *)(a1 + 1944) + 8 * (unsigned __int16)v109);
      v42 = v305;
      if (*v305 && *((unsigned __int8 *)v318 + v54) >= 2u)
      {
        v138 = 1;
        do
        {
          lidword_AdvanceToEndMultiword((char **)&v305);
          v42 = v305;
          if (!*v305)
            break;
          ++v138;
        }
        while (v138 < *((unsigned __int8 *)v318 + v54));
      }
      v303 = (unsigned __int8 *)v55;
      a4 = v291;
      if (v45 > 1)
      {
LABEL_178:
        a5 = v286;
        v44 = v295;
        goto LABEL_228;
      }
    }
    else
    {
LABEL_52:
      *v47 = v48;
      if ((Langs & 0x80000000) != 0)
        goto LABEL_341;
      v42 = v305;
    }
  }
  else
  {
    *v47 = v48;
  }
  v315[0] = 0;
  *(_WORD *)&__c[1] = 0;
  __c[0] = 0;
  v60 = *v42;
  *v42 = 0;
  LOWORD(v313) = 1;
  Langs = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, _QWORD *, int *, _BYTE *))(*(_QWORD *)(a1 + 64) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "ml2mw", v43, v315, &v313, __c);
  if ((Langs & 0x80000000) != 0)
    goto LABEL_341;
  if (!(_WORD)v313)
  {
    v66 = (char *)v305;
    *v305 = v60;
    goto LABEL_79;
  }
  v61 = 0;
  do
  {
    *((_BYTE *)v318 + v61) = LH_atou(*(const char **)(v315[0] + 8 * v61));
    ++v61;
  }
  while (v61 < (unsigned __int16)v313);
  ssft_qsort((uint64_t)v318, (unsigned __int16)v313, 1, (uint64_t (*)(unint64_t, unint64_t))compare_2);
  if ((_WORD)v313)
  {
    v65 = 0;
    while (1)
    {
      *v305 = v60;
      v66 = v43;
      if (*v43)
      {
        v66 = v43;
        do
        {
          v67 = strlen(v66);
          if (utf8_BelongsToSet(0, v66, 0, v67))
            break;
          v66 += (int)Utf8_LengthInBytes((unsigned __int8 *)v66, 1);
        }
        while (*v66);
      }
      *(_QWORD *)&__c[3] = v66;
      v68 = *v66;
      v69 = *((unsigned __int8 *)v318 + v65);
      if (*v66 && v69 >= 2)
      {
        v70 = 1;
        do
        {
          lidword_AdvanceToEndMultiword((char **)&__c[3]);
          ++v70;
          v66 = *(char **)&__c[3];
          v68 = **(_BYTE **)&__c[3];
          v69 = *((unsigned __int8 *)v318 + v65);
        }
        while (**(_BYTE **)&__c[3] && v69 > v70);
      }
      else
      {
        v70 = 1;
      }
      if (v69 == v70)
      {
        *v66 = 0;
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID multi word lookup : %s", v62, v63, v64, (uint64_t)v43);
        *(_WORD *)&__c[1] = 1;
        Langs = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, _QWORD *, _BYTE *, _BYTE *, _QWORD))(*(_QWORD *)(a1 + 64) + 152))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "ml2", v43, v315, &__c[1], __c, *(unsigned __int8 *)(a1 + 2040));
        if ((Langs & 0x80000000) != 0)
          goto LABEL_341;
        *v66 = v68;
        if (*(unsigned __int16 *)&__c[1] == 1)
          break;
      }
      if (++v65 >= (unint64_t)(unsigned __int16)v313)
        goto LABEL_76;
    }
    v119 = *(const char **)v315[0];
    if (!strcmp(*(const char **)v315[0], "all"))
    {
      v124 = -3;
    }
    else
    {
      v123 = *(unsigned __int16 *)(a1 + 1928);
      if (*(_WORD *)(a1 + 1928))
      {
        v124 = 0;
        v125 = *(_QWORD *)(a1 + 1936);
        do
        {
          if (!strcmp((const char *)(v125 + 8 * v124), v119))
            break;
          ++v124;
        }
        while (v123 > v124);
      }
      else
      {
        v124 = 0;
      }
    }
    v139 = *((unsigned __int8 *)v318 + v65);
    if (*((_BYTE *)v318 + v65))
    {
      v140 = (_DWORD *)(v279 + ((unint64_t)(unsigned __int16)v295 << 9) + 4 * (unsigned __int16)v124);
      v141 = (_DWORD *)(v278 + 4 * (unsigned __int16)v295);
      v142 = *((unsigned __int8 *)v318 + v65);
      do
      {
        if ((v124 & 0x8000) == 0)
          *v140 = 1;
        *v141++ = v124;
        v140 += 128;
        --v142;
      }
      while (v142);
    }
    v143 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    if (v124 < 0)
      log_OutText(v143, (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID found ambiguously in ML2 lexicon", v120, v121, v122, v265);
    else
      log_OutText(v143, (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID found unambiguously in ML2 lexicon: %s", v120, v121, v122, *(_QWORD *)(a1 + 1944) + 8 * (unsigned __int16)v124);
    if (*v303)
    {
      v144 = 1;
      do
      {
        if (v144 >= *((unsigned __int8 *)v318 + v65))
          break;
        lidword_AdvanceToEndMultiword((char **)&v303);
        ++v144;
      }
      while (*v303);
    }
    v305 = (unsigned __int8 *)v66;
    v45 = v139;
    a4 = v291;
    if (v139 <= 1)
      goto LABEL_79;
    goto LABEL_178;
  }
LABEL_76:
  v66 = (char *)v305;
  *v305 = v60;
  if ((Langs & 0x80000000) != 0)
    goto LABEL_341;
LABEL_79:
  v71 = *v66;
  *v66 = 0;
  HIWORD(v309) = 0;
  v72 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t, const char *, char *, uint64_t *, char *))(*(_QWORD *)(a1 + 64) + 120))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v43, 20, "femwtn", &byte_1DEBD87CE, &v310, (char *)&v309 + 2);
  if ((v72 & 0x80000000) == 0)
  {
    if (HIWORD(v309))
    {
      v76 = 0;
      do
      {
        v317[v76] = LH_atou(*(const char **)(v310 + 8 * v76));
        ++v76;
      }
      while (v76 < HIWORD(v309));
      ssft_qsort((uint64_t)v317, HIWORD(v309), 1, (uint64_t (*)(unint64_t, unint64_t))compare_2);
      if (HIWORD(v309))
      {
        v77 = 0;
        while (1)
        {
          *v305 = v71;
          v78 = v43;
          if (*v43)
          {
            v78 = v43;
            do
            {
              v79 = strlen(v78);
              if (utf8_BelongsToSet(0, v78, 0, v79))
                break;
              v78 += (int)Utf8_LengthInBytes((unsigned __int8 *)v78, 1);
            }
            while (*v78);
          }
          v307 = v78;
          v80 = *v78;
          v81 = v317[v77];
          if (*v78 && v81 >= 2)
          {
            v82 = 1;
            do
            {
              lidword_AdvanceToEndMultiword(&v307);
              ++v82;
              v78 = v307;
              v80 = *v307;
              v81 = v317[v77];
            }
            while (*v307 && v81 > v82);
          }
          else
          {
            v82 = 1;
          }
          if (v81 == v82)
          {
            *v78 = 0;
            log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID TN multi word lookup : %s", v73, v74, v75, (uint64_t)v43);
            LOWORD(v309) = 0;
            Langs = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, uint64_t *, int *, char *, _QWORD, _QWORD))(*(_QWORD *)(a1 + 64) + 240))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "tn", v43, &v310, &v309, &v308, *(unsigned __int8 *)(a1 + 134920), 0);
            if ((Langs & 0x80000000) != 0)
              goto LABEL_341;
            *v78 = v80;
            if ((unsigned __int16)v309 == 1)
              break;
          }
          if (++v77 >= (unint64_t)HIWORD(v309))
            goto LABEL_100;
        }
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID TN multi word : %s", v73, v74, v75, (uint64_t)v43);
        if (v317[v77])
        {
          v126 = 0;
          __sa = (char *)v305;
          v127 = (char *)(v279 + ((unint64_t)(unsigned __int16)v295 << 9));
          do
          {
            *(_DWORD *)(v278 + 4 * (unsigned __int16)v295 + 4 * v126) = -3;
            Langs = calcWScore(a1, (uint64_t)v43, (uint64_t)"merwfrq_latn", 1, *(unsigned __int16 *)(v289 + 8), v127, (uint64_t)v311);
            if ((Langs & 0x80000000) != 0)
              goto LABEL_341;
            *__sa = v71;
            calcWPenalties((_QWORD *)a1, (unsigned __int16)(v295 + v126++), 0, v128, v129, v130, v131, v132, v270);
            v127 += 512;
          }
          while (v126 < v317[v77]);
          v45 = v317[v77];
        }
        else
        {
          v45 = 0;
        }
        a4 = v291;
        if (*v303)
        {
          v133 = 1;
          do
          {
            if (v133 >= v317[v77])
              break;
            lidword_AdvanceToEndMultiword((char **)&v303);
            ++v133;
          }
          while (*v303);
        }
        v305 = (unsigned __int8 *)v78;
        a5 = v286;
LABEL_227:
        v44 = v295;
        if ((Langs & 0x80000000) != 0)
          goto LABEL_341;
        goto LABEL_228;
      }
    }
LABEL_100:
    v83 = v305;
    *v305 = v71;
    v84 = v303;
    v315[0] = 0;
    v315[1] = 0;
    *(_QWORD *)((char *)v316 + 6) = 0;
    v316[0] = 0;
    v290 = *(_QWORD *)(a1 + 1088);
    *(_QWORD *)&__c[3] = 0;
    __c[0] = 0;
    v85 = *v83;
    v86 = *v303;
    v313 = 0;
    *v83 = 0;
    *v84 = 0;
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID word lookup : %s", v73, v74, v75, (uint64_t)v43);
    *(_WORD *)&__c[1] = 1;
    Langs = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, _BYTE *, _BYTE *, _BYTE *, _QWORD))(*(_QWORD *)(a1 + 64) + 152))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "ml2", __s, &__c[3], &__c[1], __c, *(unsigned __int8 *)(a1 + 2040));
    if ((Langs & 0x80000000) != 0)
      goto LABEL_224;
    v277 = v83;
    v276 = v86;
    if (*(_WORD *)&__c[1])
      goto LABEL_102;
    if (strcmp(v43, __s))
    {
      *(_WORD *)&__c[1] = 1;
      Langs = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, _BYTE *, _BYTE *, _BYTE *, _QWORD))(*(_QWORD *)(a1 + 64) + 152))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "ml2", v43, &__c[3], &__c[1], __c, *(unsigned __int8 *)(a1 + 2040));
      a5 = v286;
      if ((Langs & 0x80000000) == 0)
      {
        if (!*(_WORD *)&__c[1])
          goto LABEL_113;
LABEL_102:
        v87 = **(const char ***)&__c[3];
        v88 = strchr(**(char ***)&__c[3], __c[0]);
        v274 = v84;
        if (v88)
        {
          *v88 = 0;
          v87 = **(const char ***)&__c[3];
        }
        a5 = v286;
        if (strcmp(v87, "all"))
        {
          v92 = v85;
          v93 = *(unsigned __int16 *)(a1 + 1928);
          if (*(_WORD *)(a1 + 1928))
          {
            v94 = 0;
            v95 = *(const char **)(a1 + 1936);
            a4 = v291;
            while (strcmp(v95, v87))
            {
              ++v94;
              v95 += 8;
              if (v93 == v94)
                goto LABEL_139;
            }
            LOWORD(v93) = v94;
          }
          else
          {
            a4 = v291;
          }
LABEL_139:
          *(_DWORD *)(a1 + ((unint64_t)(unsigned __int16)v295 << 9) + 4 * (unsigned __int16)v93 + 2044) = 1;
          *v284 = (unsigned __int16)v93;
          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID found unambiguously in ML2 lexicon: %s", v89, v90, v91, *(_QWORD *)(a1 + 1944) + 8 * (unsigned __int16)v93);
          *v277 = v92;
          *v274 = v276;
          goto LABEL_226;
        }
        *v284 = -3;
        Langs = calcWScore(a1, (uint64_t)v43, (uint64_t)"merwfrq_latn", 1, *(unsigned __int16 *)(v290 + 8), (void *)(a1 + ((unint64_t)(unsigned __int16)v295 << 9) + 2044), (uint64_t)v315);
        if ((Langs & 0x80000000) == 0)
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID found ambiguously in ML2 lexicon", v111, v112, v113, v266);
          *v83 = v85;
          *v84 = v276;
          calcWPenalties((_QWORD *)a1, (unsigned __int16)v295, 0, v114, v115, v116, v117, v118, v269);
        }
LABEL_125:
        a4 = v291;
LABEL_226:
        v45 = 1;
        goto LABEL_227;
      }
LABEL_225:
      a4 = v291;
      goto LABEL_226;
    }
LABEL_113:
    *(_WORD *)&__c[1] = 0;
    v267 = 0;
    Langs = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, _BYTE *, _BYTE *, _BYTE *, _QWORD))(*(_QWORD *)(a1 + 64) + 240))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "tn", v43, &__c[3], &__c[1], __c, *(unsigned __int8 *)(a1 + 134920));
    a5 = v286;
    if ((Langs & 0x80000000) != 0)
      goto LABEL_225;
    if (*(_WORD *)&__c[1])
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID TN word : %s", v96, v97, v98, (uint64_t)v43);
      *v284 = -3;
      Langs = calcWScore(a1, (uint64_t)v43, (uint64_t)"merwfrq_latn", 1, *(unsigned __int16 *)(v290 + 8), (void *)(a1 + ((unint64_t)(unsigned __int16)v295 << 9) + 2044), (uint64_t)v315);
      if ((Langs & 0x80000000) == 0)
      {
        *v83 = v85;
        *v84 = v276;
        calcWPenalties((_QWORD *)a1, (unsigned __int16)v295, 0, v99, v100, v101, v102, v103, v268);
      }
      goto LABEL_225;
    }
    v275 = v84;
    if (*v43)
    {
      v145 = 1;
      v146 = v43;
      do
      {
        if (!v145)
          goto LABEL_184;
        v147 = strlen(v146);
        v148 = utf8_BelongsToSet(6u, v146, 0, v147);
        v145 = v148 == 0;
        v146 += (int)Utf8_LengthInBytes((unsigned __int8 *)v146, 1);
      }
      while (*v146);
      if (v148)
      {
LABEL_184:
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID digit word : %s", v96, v97, v98, (uint64_t)v43);
        v273 = 1;
        goto LABEL_185;
      }
      v273 = 0;
LABEL_185:
      if (*v43)
      {
        v149 = 1;
        v150 = (unsigned __int8 *)v43;
        while (v149)
        {
          v151 = utf8_strchr(*(char **)(a1 + 134928), v150);
          if (!v151)
            v149 = 0;
          v150 += (int)Utf8_LengthInBytes(v150, 1);
          if (!*v150)
          {
            if (v151)
              goto LABEL_194;
            v149 = 0;
            break;
          }
        }
LABEL_195:
        if (*__s)
        {
          v152 = (unsigned __int8 *)__s;
          while (lidword_IsUppercase((char *)v152) || utf8_strchr(*(char **)(a1 + 134944), v152))
          {
            v152 += (int)Utf8_LengthInBytes(v152, 1);
            if (!*v152)
              goto LABEL_200;
          }
          v153 = 0;
        }
        else
        {
LABEL_200:
          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID acronym word : %s", v96, v97, v98, (uint64_t)__s);
          v153 = 1;
        }
        if (*v43)
        {
          v154 = 0;
          v155 = (unsigned __int8 *)v43;
          while (utf8_strchr(*(char **)(a1 + 134952), v155) || utf8_strchr(*(char **)(a1 + 134944), v155))
          {
            v155 += (int)Utf8_LengthInBytes(v155, 1);
            ++v154;
            if (!*v155)
            {
              if (v154 < 4u)
                break;
              log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID consonant word : %s", v156, v157, v158, (uint64_t)v43);
              v159 = 1;
              goto LABEL_209;
            }
          }
        }
        v159 = 0;
LABEL_209:
        v160 = strchr(v43, 64);
        if (!v160 || !strchr(v160, 46))
        {
          v165 = 1u;
          v166 = "http";
          while (!strstr(v43, v166))
          {
            v166 = szURL[v165++];
            if (v165 == 15)
            {
              v164 = 0;
              goto LABEL_216;
            }
          }
        }
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID URL or EMail : %s", v161, v162, v163, (uint64_t)v43);
        v164 = 1;
LABEL_216:
        if (v273)
          v167 = 1;
        else
          v167 = v149;
        if (((v167 | v153) & 1) != 0 || v164 | v159)
        {
          a5 = v286;
          *v284 = *(unsigned __int16 *)(a1 + 1930);
          *v277 = v85;
          *v275 = v276;
          if ((_WORD)v295)
          {
            v179 = (unsigned __int16)v295 - 1;
            a4 = v291;
            if (*(_DWORD *)(a1 + 4 * v179 + 133116) == *(unsigned __int16 *)(a1 + 1930))
              memcpy((void *)(a1 + 2044 + ((unint64_t)(unsigned __int16)v295 << 9)), (const void *)(a1 + 2044 + (v179 << 9)), 0x200uLL);
            goto LABEL_226;
          }
          goto LABEL_225;
        }
        v168 = (_DWORD *)(a1 + ((unint64_t)(unsigned __int16)v295 << 9) + 2044);
        Langs = calcWScore(a1, (uint64_t)v43, (uint64_t)"merwfrq_latn", 1, *(unsigned __int16 *)(v290 + 8), v168, (uint64_t)v315);
        if ((Langs & 0x80000000) != 0)
        {
LABEL_224:
          a5 = v286;
          goto LABEL_225;
        }
        if (lidword_OutOfLID2(a1, (unsigned __int16)v295))
        {
          *v284 = *(unsigned __int16 *)(a1 + 1930);
          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID fallback to the main language (language code is not in LID2 subset): %s", v171, v172, v173, (uint64_t)v43);
          *v277 = v85;
          *v275 = v276;
          calcWPenalties((_QWORD *)a1, (unsigned __int16)v295, 0, v174, v175, v176, v177, v178, v271);
          goto LABEL_224;
        }
        if (*(_QWORD *)(a1 + 134976))
        {
          v180 = *(unsigned __int16 *)(v290 + 8);
          if (*(_WORD *)(v290 + 8))
          {
            do
            {
              if (*v168++)
                goto LABEL_247;
            }
            while (--v180);
          }
          Langs = lidmde_FindLangs(a1, (uint64_t)v43, (__int16)v277, __s, (__int16)v275, v318, &v313, v173);
          if ((Langs & 0x80000000) == 0)
          {
            if (v313)
            {
              *v284 = *(unsigned __int16 *)(a1 + 1930);
              log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID (MDE) fallback to the main language (language code is not in LID2 subset): %s", v182, v183, v184, (uint64_t)v43);
            }
            else
            {
              v185 = lidmde_SingleLang((uint64_t)v318, *(unsigned __int16 *)(a1 + 1928));
              if (v185 < 0)
              {
                if (!lidmde_MainLangPlusSomeOtherLangs(v318, *(unsigned __int16 *)(a1 + 1930), *(unsigned __int16 *)(a1 + 1928)))goto LABEL_247;
                *v284 = -3;
                log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID (MDE) found ambiguously", v171, v172, v173, v267);
              }
              else
              {
                *v284 = (unsigned __int16)v185;
                log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID (MDE) found unambiguously: %s", v186, v187, v188, *(_QWORD *)(a1 + 1944) + 8 * (unsigned __int16)v185);
              }
            }
            *v277 = v85;
            *v275 = v276;
            v189 = (unsigned __int16)v295;
            v190 = (_QWORD *)a1;
            v191 = 0;
LABEL_248:
            calcWPenalties(v190, v189, v191, v169, v170, v171, v172, v173, v267);
          }
          a5 = v286;
          goto LABEL_125;
        }
LABEL_247:
        *v277 = v85;
        *v275 = v276;
        v189 = (unsigned __int16)v295;
        v190 = (_QWORD *)a1;
        v191 = 1;
        goto LABEL_248;
      }
    }
    else
    {
      v273 = 0;
    }
LABEL_194:
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID punctuation word : %s", v96, v97, v98, (uint64_t)v43);
    v149 = 1;
    goto LABEL_195;
  }
  Langs = v72;
LABEL_341:
  inserted = Langs;
LABEL_345:
  v23 = (char *)v292;
LABEL_346:
  v25 = v288;
  v26 = v293;
LABEL_7:
  heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v23);
  if (v25)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v25);
  if (v26)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v26);
  return inserted;
}

uint64_t lidword_normalizedDup(uint64_t a1, char *a2, unsigned int a3, _WORD *a4, int a5)
{
  _WORD *v5;
  uint64_t result;
  int v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int PreviousUtf8Offset;
  char *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int NextUtf8Offset;
  char *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  char *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  char *v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  char *v69;
  unsigned int v70;
  unsigned int v71;
  char *v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  char *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  char *__src;
  uint64_t v99;
  uint64_t v100;
  _BOOL4 v101;
  uint64_t v102;
  char **v103;
  char __s1[10];
  char __s2[10];
  uint64_t v106;

  v5 = a4;
  v106 = *MEMORY[0x1E0C80C00];
  a4[4] = 0;
  __s2[0] = 0;
  result = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), (4 * a3) | 1);
  if (result)
  {
    if (a3)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v99 = result;
      v100 = 0;
      v13 = 0;
      v96 = a1;
      v14 = a1 + 0x20000;
      v15 = (char *)result;
      v102 = 0;
      v103 = (char **)(v14 + 3856);
      v16 = __s2;
      if (!a5)
        v16 = __s1;
      __src = v16;
      v101 = 1;
      while (1)
      {
        v17 = (unsigned __int8 *)&a2[v13];
        if (utf8_strchr(*v103, v17))
          break;
        v19 = strlen(&a2[v13]);
        if (!utf8_BelongsToSet(0, &a2[v13], 0, v19))
        {
          if (v12)
          {
            v21 = (unsigned __int16)v5[4];
            if (v21 > 9)
              goto LABEL_115;
            if (v101)
            {
              if ((unint64_t)&v15[-v99 - v100 - v12 - v11 - 2] < 3)
              {
LABEL_114:
                v5[4] = v21 + 1;
                v5[v21 + 5] = v100;
                goto LABEL_115;
              }
            }
            else if ((_DWORD)v102)
            {
              goto LABEL_115;
            }
            if (HIDWORD(v102) | v10)
              goto LABEL_114;
LABEL_115:
            v11 = 0;
            v100 = (unsigned __int16)((_WORD)v15 - v99);
            ++*v5;
            if (!(_DWORD)v102 || HIDWORD(v102))
            {
              v101 = 1;
              v87 = 0;
              v86 = 0;
            }
            else
            {
              v87 = 0;
              v86 = 0;
              v11 = 0;
              ++v5[1];
              v101 = 1;
            }
          }
          else
          {
            v87 = v102;
            v86 = HIDWORD(v102);
          }
          v88 = strlen(&a2[v13]);
          v89 = utf8_BelongsToSet(6u, &a2[v13], 0, v88);
          if (!v89)
            v87 = 1;
          LODWORD(v102) = v87;
          if (v89)
            v86 = 1;
          v90 = utf8_determineUTF8CharLength(*v17);
          HIDWORD(v102) = v86;
          if (v90 < 2)
          {
            v91 = *v17;
            if (a5)
              LOBYTE(v91) = ssft_tolower(v91);
            *v15 = v91;
            v101 = v101
                && ((v92 = strlen(&a2[v13]), utf8_BelongsToSet(6u, &a2[v13], 0, v92))
                 || *v15 != *v17);
            v12 = 0;
            v10 = 0;
            ++v15;
            v20 = 1;
          }
          else
          {
            v20 = v90;
            __s2[0] = 0;
            __strncpy_chk();
            __s1[v20] = 0;
            utf8_ToLower(__s1, 0, (uint64_t)__s2);
            v101 = v101 && strcmp(__s1, __s2);
            strcpy(v15, __src);
            v12 = 0;
            v10 = 0;
            v15 += strlen(__src);
          }
          goto LABEL_28;
        }
        *v15++ = 32;
        v20 = utf8_determineUTF8CharLength(*v17);
        ++v12;
LABEL_28:
        v13 += v20;
        if (v13 >= a3)
        {
          v93 = (unsigned __int16)v5[4];
          if (v93 >= 0xA)
          {
            result = v99;
          }
          else
          {
            result = v99;
            if (v101)
            {
              v94 = v100;
              goto LABEL_150;
            }
            LOWORD(v94) = v100;
            if (!(_DWORD)v102)
            {
              LODWORD(v102) = 0;
              goto LABEL_151;
            }
          }
LABEL_154:
          v95 = HIDWORD(v102);
LABEL_155:
          ++*v5;
          if ((_DWORD)v102 && !v95)
          {
            ++v5;
            goto LABEL_159;
          }
          goto LABEL_160;
        }
      }
      if (!v12)
      {
LABEL_26:
        if (utf8_strchr(v103[1], (unsigned __int8 *)&a2[v13]))
        {
LABEL_27:
          v20 = utf8_determineUTF8CharLength(*v17);
          strncpy(v15, &a2[v13], v20);
          v12 = 0;
          ++v11;
          v10 = 1;
          v15 += v20;
          goto LABEL_28;
        }
        if (v13)
        {
          PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)a2, v13);
          if (PreviousUtf8Offset >= strlen(a2)
            || (v23 = &a2[PreviousUtf8Offset], v24 = strlen(v23), !utf8_BelongsToSet(0, v23, 0, v24)))
          {
            v64 = utf8_GetPreviousUtf8Offset((uint64_t)a2, v13);
            if (v64 >= strlen(a2) || !utf8_strchr(*v103, (unsigned __int8 *)&a2[v64]))
              goto LABEL_88;
            v65 = 2;
            v66 = v13;
            while (v66)
            {
              v66 = utf8_GetPreviousUtf8Offset((uint64_t)a2, v66);
              if (!--v65)
              {
                if (v66 >= strlen(a2))
                  break;
                v67 = 2;
                v68 = v13;
                while (v68)
                {
                  v68 = utf8_GetPreviousUtf8Offset((uint64_t)a2, v68);
                  if (!--v67)
                  {
                    if (v68 < strlen(a2))
                    {
                      v69 = &a2[v68];
                      v70 = strlen(v69);
                      if (utf8_BelongsToSet(0, v69, 0, v70))
                        goto LABEL_33;
                    }
                    goto LABEL_87;
                  }
                }
                goto LABEL_87;
              }
            }
          }
        }
LABEL_33:
        v25 = strlen(a2);
        if (v13 >= v25)
          goto LABEL_27;
        if (utf8_GetNextUtf8Offset(a2, v13) >= v25)
          goto LABEL_27;
        v26 = strlen(a2);
        if (v13 < v26)
        {
          NextUtf8Offset = utf8_GetNextUtf8Offset(a2, v13);
          if (NextUtf8Offset < v26)
          {
            v28 = &a2[NextUtf8Offset];
            v29 = strlen(v28);
            if (utf8_BelongsToSet(0, v28, 0, v29))
              goto LABEL_27;
          }
        }
        v30 = strlen(a2);
        if (v13 >= v30
          || (v31 = utf8_GetNextUtf8Offset(a2, v13), v31 >= v30)
          || !utf8_strchr(*v103, (unsigned __int8 *)&a2[v31]))
        {
          v32 = strlen(a2);
          v33 = 3;
          v34 = v13;
          while (v34 < v32)
          {
            v35 = utf8_GetNextUtf8Offset(a2, v34);
            v34 = v35;
            if (--v33 <= 1)
            {
              if (v35 < v32 && utf8_strchr(*v103, (unsigned __int8 *)&a2[v35]))
                goto LABEL_27;
              break;
            }
          }
        }
        v36 = strlen(a2);
        if (v13 < v36)
        {
          v37 = utf8_GetNextUtf8Offset(a2, v13);
          if (v37 < v36)
          {
            if (utf8_strchr(*v103, (unsigned __int8 *)&a2[v37]))
            {
              v38 = strlen(a2);
              v39 = 3;
              v40 = v13;
              while (v40 < v38)
              {
                v41 = utf8_GetNextUtf8Offset(a2, v40);
                v40 = v41;
                if (--v39 <= 1)
                {
                  if (v41 >= v38)
                    goto LABEL_27;
                  v42 = strlen(a2);
                  v43 = 3;
                  v44 = v13;
                  while (v44 < v42)
                  {
                    v45 = utf8_GetNextUtf8Offset(a2, v44);
                    v44 = v45;
                    if (--v43 <= 1)
                    {
                      if (v45 < v42)
                      {
                        v46 = &a2[v45];
                        v47 = strlen(v46);
                        if (utf8_BelongsToSet(0, v46, 0, v47))
                          goto LABEL_27;
                      }
                      goto LABEL_58;
                    }
                  }
                  goto LABEL_58;
                }
              }
              goto LABEL_27;
            }
          }
        }
LABEL_58:
        v48 = strlen(a2);
        if (v13 < v48)
        {
          v49 = utf8_GetNextUtf8Offset(a2, v13);
          if (v49 < v48)
          {
            if (utf8_strchr(*v103, (unsigned __int8 *)&a2[v49]))
            {
              v50 = strlen(a2);
              v51 = 3;
              v52 = v13;
              while (v52 < v50)
              {
                v53 = utf8_GetNextUtf8Offset(a2, v52);
                v52 = v53;
                if (--v51 <= 1)
                {
                  if (v53 >= v50 || !utf8_strchr(*v103, (unsigned __int8 *)&a2[v53]))
                    break;
                  v54 = strlen(a2);
                  v55 = 4;
                  v56 = v13;
                  while (v56 < v54)
                  {
                    v57 = utf8_GetNextUtf8Offset(a2, v56);
                    v56 = v57;
                    if (--v55 <= 1)
                    {
                      if (v57 >= v54)
                        goto LABEL_27;
                      v58 = strlen(a2);
                      v59 = 4;
                      v60 = v13;
                      while (v60 < v58)
                      {
                        v61 = utf8_GetNextUtf8Offset(a2, v60);
                        v60 = v61;
                        if (--v59 <= 1)
                        {
                          if (v61 < v58)
                          {
                            v62 = &a2[v61];
                            v63 = strlen(v62);
                            if (utf8_BelongsToSet(0, v62, 0, v63))
                              goto LABEL_27;
                          }
                          goto LABEL_87;
                        }
                      }
                      goto LABEL_87;
                    }
                  }
                  goto LABEL_27;
                }
              }
            }
          }
        }
LABEL_87:
        if (!v13)
          goto LABEL_110;
LABEL_88:
        v71 = utf8_GetPreviousUtf8Offset((uint64_t)a2, v13);
        if (v71 < strlen(a2))
        {
          v72 = &a2[v71];
          v73 = strlen(v72);
          if (utf8_BelongsToSet(0, v72, 0, v73))
            goto LABEL_110;
        }
        v74 = utf8_GetPreviousUtf8Offset((uint64_t)a2, v13);
        if (v74 < strlen(a2) && utf8_strchr(*v103, (unsigned __int8 *)&a2[v74]))
        {
          v75 = 2;
          v76 = v13;
          while (v76)
          {
            v76 = utf8_GetPreviousUtf8Offset((uint64_t)a2, v76);
            if (!--v75)
            {
              if (v76 >= strlen(a2))
                break;
              v77 = 2;
              v78 = v13;
              while (v78)
              {
                v78 = utf8_GetPreviousUtf8Offset((uint64_t)a2, v78);
                if (!--v77)
                {
                  if (v78 < strlen(a2))
                  {
                    v79 = &a2[v78];
                    v80 = strlen(v79);
                    if (utf8_BelongsToSet(0, v79, 0, v80))
                      goto LABEL_110;
                  }
                  goto LABEL_101;
                }
              }
              goto LABEL_101;
            }
          }
LABEL_110:
          v20 = utf8_determineUTF8CharLength(*v17);
          v12 = 0;
          goto LABEL_28;
        }
LABEL_101:
        v81 = strlen(a2);
        if (v13 >= v81)
          goto LABEL_110;
        if (utf8_GetNextUtf8Offset(a2, v13) >= v81)
          goto LABEL_110;
        v82 = strlen(a2);
        if (v13 < v82)
        {
          v83 = utf8_GetNextUtf8Offset(a2, v13);
          if (v83 < v82)
          {
            if (lidword_IsSpace(v83, &a2[v83]))
              goto LABEL_110;
          }
        }
        v84 = strlen(a2);
        if (v13 >= v84
          || (v85 = utf8_GetNextUtf8Offset(a2, v13), v85 >= v84)
          || !utf8_strchr(*v103, (unsigned __int8 *)&a2[v85]))
        {
          if (lidword_CharAtOffsetSatisfies(v96, a2, v13, 2, (uint64_t (*)(uint64_t, char *))lidword_IsPunc))goto LABEL_110;
        }
        if (lidword_CharAtOffsetSatisfies(v96, a2, v13, 1, (uint64_t (*)(uint64_t, char *))lidword_IsPunc)&& (!lidword_CharAtOffsetSatisfies(v96, a2, v13, 2, (uint64_t (*)(uint64_t, char *))lidword_True)|| lidword_CharAtOffsetSatisfies(v96, a2, v13, 2, (uint64_t (*)(uint64_t, char *))lidword_IsSpace))|| lidword_CharAtOffsetSatisfies(v96,
                             a2,
                             v13,
                             1,
                             (uint64_t (*)(uint64_t, char *))lidword_IsPunc)
          && lidword_CharAtOffsetSatisfies(v96, a2, v13, 2, (uint64_t (*)(uint64_t, char *))lidword_IsPunc)&& (!lidword_CharAtOffsetSatisfies(v96, a2, v13, 3, (uint64_t (*)(uint64_t, char *))lidword_True)|| lidword_CharAtOffsetSatisfies(v96, a2, v13, 3, (uint64_t (*)(uint64_t, char *))lidword_IsSpace)))
        {
          goto LABEL_110;
        }
        goto LABEL_27;
      }
      v18 = (unsigned __int16)v5[4];
      if (v18 <= 9)
      {
        if (v101)
        {
          if ((unint64_t)&v15[-v99 - v100 - v12 - v11 - 2] < 3)
            goto LABEL_21;
        }
        else if ((_DWORD)v102)
        {
          goto LABEL_22;
        }
        if (HIDWORD(v102) | v10)
        {
LABEL_21:
          v5[4] = v18 + 1;
          v5[v18 + 5] = v100;
        }
      }
LABEL_22:
      v11 = 0;
      v100 = (unsigned __int16)((_WORD)v15 - v99);
      ++*v5;
      if (!(_DWORD)v102 || HIDWORD(v102))
      {
        v101 = 1;
        v102 = 0;
        v10 = 0;
      }
      else
      {
        v102 = 0;
        v11 = 0;
        v10 = 0;
        ++v5[1];
        v101 = 1;
      }
      goto LABEL_26;
    }
    v93 = (unsigned __int16)v5[4];
    if (v93 < 0xA)
    {
      v102 = 0;
      v94 = 0;
      v12 = 0;
      v11 = 0;
      v10 = 0;
      v15 = (char *)result;
LABEL_150:
      if ((unint64_t)&v15[-result - v94 - v12 - v11 - 2] >= 3)
      {
LABEL_151:
        v95 = HIDWORD(v102) | v10;
        if (!(HIDWORD(v102) | v10))
          goto LABEL_155;
      }
      v5[4] = v93 + 1;
      v5[v93 + 5] = v94;
      goto LABEL_154;
    }
    v15 = (char *)result;
LABEL_159:
    ++*v5;
LABEL_160:
    *v15 = 0;
  }
  return result;
}

double lidword_InitStruct(uint64_t a1)
{
  double result;

  bzero((void *)(a1 + 2044), 0x20000uLL);
  memset((void *)(a1 + 133116), 255, 0x400uLL);
  result = 0.0;
  *(_OWORD *)(a1 + 134140) = 0u;
  *(_OWORD *)(a1 + 134156) = 0u;
  *(_OWORD *)(a1 + 134172) = 0u;
  *(_OWORD *)(a1 + 134188) = 0u;
  *(_OWORD *)(a1 + 134204) = 0u;
  *(_OWORD *)(a1 + 134220) = 0u;
  *(_OWORD *)(a1 + 134236) = 0u;
  *(_OWORD *)(a1 + 134252) = 0u;
  *(_OWORD *)(a1 + 134268) = 0u;
  *(_OWORD *)(a1 + 134284) = 0u;
  *(_OWORD *)(a1 + 134300) = 0u;
  *(_OWORD *)(a1 + 134316) = 0u;
  *(_OWORD *)(a1 + 134332) = 0u;
  *(_OWORD *)(a1 + 134348) = 0u;
  *(_OWORD *)(a1 + 134364) = 0u;
  *(_OWORD *)(a1 + 134380) = 0u;
  *(_OWORD *)(a1 + 134396) = 0u;
  *(_OWORD *)(a1 + 134412) = 0u;
  *(_OWORD *)(a1 + 134428) = 0u;
  *(_OWORD *)(a1 + 134444) = 0u;
  *(_OWORD *)(a1 + 134460) = 0u;
  *(_OWORD *)(a1 + 134476) = 0u;
  *(_OWORD *)(a1 + 134492) = 0u;
  *(_OWORD *)(a1 + 134508) = 0u;
  *(_OWORD *)(a1 + 134524) = 0u;
  *(_OWORD *)(a1 + 134540) = 0u;
  *(_OWORD *)(a1 + 134556) = 0u;
  *(_OWORD *)(a1 + 134572) = 0u;
  *(_OWORD *)(a1 + 134588) = 0u;
  *(_OWORD *)(a1 + 134604) = 0u;
  *(_OWORD *)(a1 + 134620) = 0u;
  *(_OWORD *)(a1 + 134636) = 0u;
  *(_OWORD *)(a1 + 134876) = 0u;
  *(_OWORD *)(a1 + 134892) = 0u;
  *(_OWORD *)(a1 + 134844) = 0u;
  *(_OWORD *)(a1 + 134860) = 0u;
  *(_OWORD *)(a1 + 134812) = 0u;
  *(_OWORD *)(a1 + 134828) = 0u;
  *(_OWORD *)(a1 + 134780) = 0u;
  *(_OWORD *)(a1 + 134796) = 0u;
  *(_OWORD *)(a1 + 134748) = 0u;
  *(_OWORD *)(a1 + 134764) = 0u;
  *(_OWORD *)(a1 + 134716) = 0u;
  *(_OWORD *)(a1 + 134732) = 0u;
  *(_OWORD *)(a1 + 134684) = 0u;
  *(_OWORD *)(a1 + 134700) = 0u;
  *(_OWORD *)(a1 + 134652) = 0u;
  *(_OWORD *)(a1 + 134668) = 0u;
  return result;
}

uint64_t lidword_CheckLangTags(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, unsigned int *a4)
{
  int v6;
  uint64_t result;
  unsigned __int8 *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  char __dst[20];
  uint64_t v19;

  v6 = (int)a2;
  v19 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v17 = a2;
  result = (uint64_t)lidword_AdvanceSkippingSpacesInNormSW(&v17, &v16);
  v9 = v17;
  if (v16 != v17)
  {
    v10 = 0;
    do
    {
      if (!*v9 || v10 > 0xFF)
        break;
      v11 = *a3;
      v12 = *a4;
      __dst[0] = 0;
      if (v12 >= 2)
      {
        v13 = *(_DWORD *)(v11 + 12) + (_DWORD)v9 - v6;
        v14 = 1;
        do
        {
          v15 = v14;
          if (v13 < *(_DWORD *)(v11 + 32 * v14 + 12))
            break;
          if (*(_DWORD *)(v11 + 32 * v14) == 36)
            strncpy(__dst, *(const char **)(v11 + 32 * v14 + 24), 0x13uLL);
          v14 = v15 + 1;
        }
        while (v12 > (unsigned __int16)(v15 + 1));
        if (__dst[0]
          && (!strstr(__dst, *(const char **)(a1 + 1912)) && !strstr(__dst, "normal") || strstr(__dst, "noautolid")))
        {
          *(_DWORD *)(a1 + 4 * v10 + 133116) = -4;
        }
      }
      result = lidword_AdvanceSkippingSpacesInNormEW((uint64_t)&v17, &v16);
      ++v10;
      v9 = v17;
    }
    while (v16 != v17);
  }
  return result;
}

unsigned __int8 **lidword_AdvanceSkippingSpacesInNormSW(unsigned __int8 **result, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  unsigned __int8 **v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *result;
  if (**result)
  {
    v4 = result;
    do
    {
      v5 = strlen((const char *)v3);
      result = (unsigned __int8 **)utf8_BelongsToSet(0, v3, 0, v5);
      v3 = *v4;
      if (!(_DWORD)result)
        break;
      result = (unsigned __int8 **)Utf8_LengthInBytes(*v4, 1);
      v3 = &(*v4)[(int)result];
      *v4 = v3;
    }
    while (*v3);
  }
  while (1)
  {
    *a2 = v3;
    if (!*v3)
      break;
    v6 = strlen((const char *)v3);
    result = (unsigned __int8 **)utf8_BelongsToSet(0, v3, 0, v6);
    if ((_DWORD)result)
      break;
    result = (unsigned __int8 **)Utf8_LengthInBytes(*a2, 1);
    v3 = &(*a2)[(int)result];
  }
  return result;
}

uint64_t lidword_AdvanceSkippingSpacesInNormEW(uint64_t result, unsigned __int8 **a2)
{
  _QWORD *v3;
  unsigned __int8 *i;
  unsigned int v5;
  unsigned __int8 *j;
  unsigned int v7;

  v3 = (_QWORD *)result;
  for (i = *a2; *i; *a2 = i)
  {
    v5 = strlen((const char *)i);
    result = utf8_BelongsToSet(0, i, 0, v5);
    i = *a2;
    if (!(_DWORD)result)
      break;
    result = Utf8_LengthInBytes(*a2, 1);
    i = &(*a2)[(int)result];
  }
  *v3 = i;
  for (j = *a2; *j; *a2 = j)
  {
    v7 = strlen((const char *)j);
    result = utf8_BelongsToSet(0, j, 0, v7);
    if ((_DWORD)result)
      break;
    result = Utf8_LengthInBytes(*a2, 1);
    j = &(*a2)[(int)result];
  }
  return result;
}

uint64_t lidword_ExtractFeats(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t result;
  int v6;
  char *v7;
  unint64_t v8;
  char **v9;
  int v10;
  int PreviousUtf8Offset;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;

  v14 = 0;
  v15 = a2;
  result = (uint64_t)lidword_AdvanceSkippingSpacesInNormSW(&v15, &v14);
  v6 = (int)v14;
  v7 = (char *)v15;
  if (v14 != v15)
  {
    v8 = 0;
    v9 = (char **)(a1 + 134928);
    v10 = a3 - 1;
    do
    {
      if (!*v7 || v8 > 0xFF)
        break;
      PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)v7, v6 - (int)v7);
      if (*v7)
      {
        if (lidword_IsUppercase(v7))
          *(_BYTE *)(a1 + v8 + 134140) = 1;
        if (*v7 && utf8_strchr(*v9, (unsigned __int8 *)v7))
        {
          *(_BYTE *)(a1 + v8 + 134396) = 1;
          if (v8)
            *(_BYTE *)(a1 + (v8 - 1) + 134652) = 1;
          v12 = (unsigned __int8 *)v7;
          if (*v7)
          {
            v12 = (unsigned __int8 *)v7;
            while (utf8_strchr(*v9, v12))
            {
              v12 += (int)Utf8_LengthInBytes(v12, 1);
              if (!*v12)
                goto LABEL_16;
            }
            v15 = v12;
            if (*v12 && lidword_IsUppercase((char *)v12))
              *(_BYTE *)(a1 + v8 + 134140) = 1;
          }
          else
          {
LABEL_16:
            v15 = v12;
          }
        }
      }
      v13 = (unsigned __int8 *)&v7[PreviousUtf8Offset];
      if (*v13 && utf8_strchr(*v9, v13))
      {
        *(_BYTE *)(a1 + v8 + 134652) = 1;
        if (v10 > (int)v8)
          *(_BYTE *)(a1 + (v8 + 1) + 134396) = 1;
      }
      result = lidword_AdvanceSkippingSpacesInNormEW((uint64_t)&v15, &v14);
      ++v8;
      v6 = (int)v14;
      v7 = (char *)v15;
    }
    while (v14 != v15);
  }
  return result;
}

uint64_t lidword_Smoothing(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  const char *v17;
  unsigned int *v18;
  BOOL v19;
  BOOL v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;

  if (a2)
  {
    v9 = result;
    v10 = 0;
    v11 = (unsigned int *)(result + 133116);
    v12 = (unsigned int *)(result + 133120);
    v13 = a2;
    v14 = a2 - 1;
    do
    {
      v15 = *v11;
      if (*v11 + 3 <= 1)
      {
        if (a2 == 1 || v10)
        {
          if (!v10
            || v14 != v10
            || ((v18 = (unsigned int *)(v9 + 4 * (v10 - 1) + 133116),
                 *v18 != *(unsigned __int16 *)(v9 + 1930))
              ? (v19 = v15 == -2)
              : (v19 = 0),
                v19 ? (v20 = *v18 == -4) : (v20 = 1),
                v20))
          {
            if (!v10
              || v14 == v10
              || (v18 = (unsigned int *)(v9 + 4 * (v10 - 1) + 133116),
                  v21 = *v18,
                  *v18 == *(unsigned __int16 *)(v9 + 1930))
              || (v21 != -4 ? (v22 = v21 == v11[1]) : (v22 = 0), !v22))
            {
LABEL_30:
              log_OutText(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID fallback on main language", a6, a7, a8, v23);
              v15 = *(unsigned __int16 *)(v9 + 1930);
              *v11 = v15;
LABEL_34:
              result = log_OutText(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID final prediction : %s", a6, a7, a8, *(_QWORD *)(v9 + 1944) + 8 * v15);
              goto LABEL_35;
            }
          }
          v17 = "ML2 LID smoothing with previous word";
        }
        else
        {
          if (*v12 == *(unsigned __int16 *)(v9 + 1930) || v15 != -2)
            goto LABEL_30;
          v17 = "ML2 LID smoothing with next word";
          v18 = v12;
          if ((*v12 & 0x80000000) != 0)
            goto LABEL_30;
        }
        result = log_OutText(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)v17, a6, a7, a8, v23);
        v15 = *v18;
        *v11 = *v18;
      }
      if ((v15 & 0x80000000) == 0)
        goto LABEL_34;
LABEL_35:
      ++v10;
      ++v11;
    }
    while (v13 != v10);
  }
  return result;
}

uint64_t lidword_InsertLangTags(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, unsigned int *a4, unsigned int *a5, int a6, uint64_t *a7, unsigned int *a8, unsigned int *a9)
{
  unsigned __int8 *v12;
  int v13;
  unint64_t v14;
  uint64_t inserted;
  const char *v16;
  const char *v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned __int16 v23;
  uint64_t appended;
  int v27;
  int v31;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  char __s2[20];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v33 = 0;
  v34 = a2;
  v31 = (int)a2;
  lidword_AdvanceSkippingSpacesInNormSW(&v34, &v33);
  v13 = (int)v33;
  v12 = v34;
  if (v33 != v34)
  {
    v14 = 0;
    inserted = 0;
    v16 = 0;
    v17 = 0;
    v27 = a6 - 1;
    while (1)
    {
      if (!*v12 || v14 > 0xFF)
        return inserted;
      v18 = (_DWORD *)(a1 + 4 * v14 + 133116);
      v19 = *v18;
      if ((v19 & 0x80000000) == 0 && !strstr((char *)(*(_QWORD *)(a1 + 1944) + 8 * v19), *(const char **)(a1 + 1912)))
      {
        __strcpy_chk();
        __strcat_chk();
        v20 = (_DWORD)v12 - v31;
        if (*a5 < 2)
        {
          v21 = a3;
        }
        else
        {
          v21 = a3;
          v22 = *a3;
          v23 = 1;
          do
          {
            if ((*(_DWORD *)(*a3 + 12) + v20) < *(_DWORD *)(v22 + 32 * v23 + 12))
              break;
            if (*(_DWORD *)(v22 + 32 * v23) == 36)
              v17 = *(const char **)(v22 + 32 * v23 + 24);
            ++v23;
          }
          while (*a5 > v23);
        }
        if (!v17)
          v17 = "normal";
        if (!strcmp(v17, __s2))
        {
          inserted = 0;
        }
        else
        {
          appended = hlp_AppendItemRaw32(a1, v21, a4, a5, 0x20u, 10);
          if ((appended & 0x80000000) != 0)
            return appended;
          inserted = lidword_InsertLangMarker(a1, *v21, *a5, v20, __s2, 1, a7, a8, a9);
          v16 = v17;
          if ((inserted & 0x80000000) != 0)
            return inserted;
        }
        if (v27 == (_DWORD)v14)
        {
          if (!v16)
            goto LABEL_7;
        }
        else
        {
          if (v27 <= (int)v14)
            goto LABEL_7;
          if (*v18 == *(_DWORD *)(a1 + 4 * (v14 + 1) + 133116) || v16 == 0)
            goto LABEL_7;
        }
        appended = hlp_AppendItemRaw32(a1, a3, a4, a5, 0x20u, 10);
        if ((appended & 0x80000000) != 0)
          return appended;
        inserted = lidword_InsertLangMarker(a1, *a3, *a5, v13 - v31, v16, 0, a7, a8, a9);
        if ((inserted & 0x80000000) != 0)
          return inserted;
      }
LABEL_7:
      lidword_AdvanceSkippingSpacesInNormEW((uint64_t)&v34, &v33);
      ++v14;
      v13 = (int)v33;
      v12 = v34;
      if (v33 == v34)
        return inserted;
    }
  }
  return 0;
}

uint64_t lidword_Init(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  char **v5;
  char **v6;
  unsigned int U16Param;
  char *v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  size_t v19;
  char *v20;
  char *v21;
  size_t v22;
  char *v23;
  char *v24;
  size_t v25;
  char *v26;
  size_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int inited;
  unsigned int v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  const char *v39;
  const char *v40;
  const char *v41;
  uint64_t Interface;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v59;
  unsigned int v60;
  _BYTE __c[11];
  uint64_t v62;
  char *__s1;
  _OWORD v64[16];
  char v65[264];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v1 = 2345672714;
  memset(v65, 0, 256);
  memset(v64, 0, sizeof(v64));
  memset(__c, 0, sizeof(__c));
  if (!a1)
    return 2345672711;
  v3 = a1 + 16864;
  v62 = 0;
  __s1 = 0;
  v4 = a1[136];
  *((_OWORD *)a1 + 8433) = 0uLL;
  v5 = (char **)(a1 + 16866);
  *(_OWORD *)(a1 + 16871) = 0uLL;
  v6 = (char **)(a1 + 16871);
  *((_OWORD *)a1 + 8434) = 0uLL;
  *((_WORD *)a1 + 67480) = 0;
  *(_OWORD *)(a1 + 16873) = 0uLL;
  *((_DWORD *)a1 + 481) = 0;
  if ((paramc_ParamGetStr(*(_QWORD *)(a1[2] + 40), (uint64_t)"ml2lid", &__s1) & 0x80000000) == 0
    && __s1
    && !strcmp(__s1, "no")
    || (lidword_GetU16Param(a1, (uint64_t)"nrlanguages", (_WORD *)a1 + 964) & 0x80000000) != 0)
  {
    U16Param = -1949294572;
    goto LABEL_79;
  }
  *((_DWORD *)a1 + 481) = 1;
  *((_WORD *)a1 + 1012) = 21;
  U16Param = lidword_GetU16Param(a1, (uint64_t)"maxwordlen", (_WORD *)a1 + 1012);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14)
    goto LABEL_79;
  *((_WORD *)a1 + 1013) = 100;
  U16Param = lidword_GetU16Param(a1, (uint64_t)"embdim", (_WORD *)a1 + 1013);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14)
    goto LABEL_79;
  *((_WORD *)a1 + 1014) = 1;
  U16Param = lidword_GetU16Param(a1, (uint64_t)"contextlength", (_WORD *)a1 + 1014);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14)
    goto LABEL_79;
  *((_WORD *)a1 + 1020) = 1;
  U16Param = lidword_GetU16Param(a1, (uint64_t)"nrpart", (_WORD *)a1 + 1020);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14)
    goto LABEL_79;
  *((_DWORD *)a1 + 508) = 1061997773;
  U16Param = lidword_GetF32Param(a1, (uint64_t)"nnthreshold", (float *)a1 + 508);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14)
    goto LABEL_79;
  *((_DWORD *)a1 + 509) = 1064514355;
  U16Param = lidword_GetF32Param(a1, (uint64_t)"ctxtnnthreshold", (float *)a1 + 509);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14)
    goto LABEL_79;
  __s1 = 0;
  U16Param = lidword_GetTextParam(a1, (uint64_t)"punclist", &__s1);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14)
    goto LABEL_79;
  v8 = __s1;
  if (!__s1)
  {
  }
  v9 = strlen(v8);
  v10 = (char *)heap_Alloc(*(_QWORD *)(a1[2] + 8), v9 + 1);
  *v5 = v10;
  if (!v10)
    goto LABEL_83;
  strcpy(v10, __s1);
  __s1 = 0;
  U16Param = lidword_GetTextParam(a1, (uint64_t)"punccurrencylist", &__s1);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14)
    goto LABEL_79;
  v15 = __s1;
  if (!__s1)
  {
    v15 = "€£$";
    __s1 = "€£$";
  }
  v16 = strlen(v15);
  v17 = (char *)heap_Alloc(*(_QWORD *)(a1[2] + 8), v16 + 1);
  v3[3] = v17;
  if (!v17)
    goto LABEL_83;
  strcpy(v17, __s1);
  __s1 = 0;
  U16Param = lidword_GetTextParam(a1, (uint64_t)"puncincludedlist", &__s1);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14)
    goto LABEL_79;
  v18 = __s1;
  if (!__s1)
  {
    v18 = ".&-/";
    __s1 = ".&-/";
  }
  v19 = strlen(v18);
  v20 = (char *)heap_Alloc(*(_QWORD *)(a1[2] + 8), v19 + 1);
  v3[4] = v20;
  if (!v20)
    goto LABEL_83;
  strcpy(v20, __s1);
  __s1 = 0;
  U16Param = lidword_GetTextParam(a1, (uint64_t)"consonantlist", &__s1);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14)
    goto LABEL_79;
  v21 = __s1;
  if (!__s1)
  {
    v21 = "bcdfghjklmnpqrstvwxzß";
    __s1 = "bcdfghjklmnpqrstvwxzß";
  }
  v22 = strlen(v21);
  v23 = (char *)heap_Alloc(*(_QWORD *)(a1[2] + 8), v22 + 1);
  v3[5] = v23;
  if (!v23)
    goto LABEL_83;
  strcpy(v23, __s1);
  *((_WORD *)v3 + 25) = 4;
  U16Param = lidword_GetU16Param(a1, (uint64_t)"mdeminstemlen", (_WORD *)v3 + 25);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14)
    goto LABEL_79;
  __s1 = 0;
  U16Param = lidword_GetTextParam(a1, (uint64_t)"mdestemvowels", &__s1);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14)
    goto LABEL_79;
  v24 = __s1;
  if (!__s1)
  {
    v24 = "aeiouy";
    __s1 = "aeiouy";
  }
  v25 = strlen(v24);
  v26 = (char *)heap_Alloc(*(_QWORD *)(a1[2] + 8), v25 + 1);
  *v6 = v26;
  if (!v26)
    goto LABEL_83;
  strcpy(v26, __s1);
  __s1 = 0;
  U16Param = lidword_GetTextParam(a1, (uint64_t)"mdestemmingrules", &__s1);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14)
    goto LABEL_79;
  if (__s1)
  {
    v27 = strlen(__s1);
    v28 = (char *)heap_Alloc(*(_QWORD *)(a1[2] + 8), v27 + 1);
    v3[8] = v28;
    if (!v28)
      goto LABEL_83;
    strcpy(v28, __s1);
    U16Param = lidmde_ParseStemmingRules((uint64_t)a1);
    if ((U16Param & 0x80000000) != 0)
      goto LABEL_79;
  }
  v29 = heap_Calloc(*(_QWORD **)(a1[2] + 8), *((unsigned __int16 *)a1 + 964), 8);
  a1[242] = v29;
  v30 = a1[2];
  if (!v29)
    goto LABEL_84;
  v31 = heap_Calloc(*(_QWORD **)(v30 + 8), *((unsigned __int16 *)a1 + 964), 8);
  a1[243] = v31;
  v30 = a1[2];
  if (!v31)
    goto LABEL_84;
  v32 = heap_Calloc(*(_QWORD **)(v30 + 8), *((unsigned __int16 *)a1 + 964), 2);
  a1[244] = v32;
  if (!v32)
  {
LABEL_83:
    v30 = a1[2];
LABEL_84:
    log_OutPublic(*(_QWORD *)(v30 + 32), (uint64_t)"FE_LID", 48000, 0, v11, v12, v13, v14, v59);
    U16Param = -1949294582;
    goto LABEL_79;
  }
  inited = lidword_InitLangParams((uint64_t)a1);
  if (inited < 0)
  {
    U16Param = inited & (inited >> 31);
LABEL_79:
    if ((U16Param & 0x1FFF) == 0x14)
      return 0;
    else
      return U16Param;
  }
  v34 = *(unsigned __int16 *)(v4 + 8);
  if (*(_WORD *)(v4 + 8))
  {
    v35 = 0;
    v36 = *((unsigned __int16 *)a1 + 964);
    v37 = v36;
    do
    {
      if (v37)
      {
        v38 = 0;
        v39 = (const char *)(*(_QWORD *)(v4 + 16) + 8 * v35);
        v40 = (const char *)a1[242];
        do
        {
          v41 = v40;
          if (!strcmp(v39, v40))
          {
            *(_WORD *)(a1[244] + 2 * v38) = v35;
            v36 = *((unsigned __int16 *)a1 + 964);
          }
          ++v38;
          v40 = v41 + 8;
        }
        while (v38 < v36);
        v34 = *(unsigned __int16 *)(v4 + 8);
        v37 = v36;
      }
      ++v35;
    }
    while (v35 < v34);
  }
  Interface = nn_word_lkp_GetInterface(1u, a1 + 245);
  if ((Interface & 0x80000000) != 0)
    return Interface;
  a1[246] = safeh_GetNullHandle();
  a1[247] = v43;
  a1[248] = safeh_GetNullHandle();
  a1[249] = v44;
  Interface = (*(uint64_t (**)(_QWORD, _QWORD, const char *, _QWORD, _QWORD, _QWORD *))(a1[245] + 16))(a1[246], a1[247], "lid", *a1, a1[1], a1 + 248);
  if ((Interface & 0x80000000) != 0)
    return Interface;
  Interface = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *))(a1[245] + 40))(a1[248], a1[249], a1 + 250);
  if ((Interface & 0x80000000) != 0)
    return Interface;
  log_OutText(*(_QWORD *)(a1[2] + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"word2vec length %d", v45, v46, v47, *((unsigned int *)a1 + 500));
  v48 = heap_Alloc(*(_QWORD *)(a1[2] + 8), 4 * *((unsigned int *)a1 + 500));
  a1[251] = v48;
  if (v48)
  {
    *((_WORD *)a1 + 1015) = (2 * *((_WORD *)a1 + 1014)) | 1;
    *(_WORD *)&__c[1] = -1;
    Interface = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(a1[8] + 96))(a1[6], a1[7], "fecfg", "nrpart_tn", &__c[3], &__c[1], __c);
    if ((Interface & 0x80000000) != 0)
      return Interface;
    *((_BYTE *)v3 + 8) = 1;
    if (*(_WORD *)&__c[1])
    {
      v53 = **(const char ***)&__c[3];
      v54 = strchr(**(char ***)&__c[3], __c[0]);
      if (v54)
      {
        *v54 = 0;
        v53 = **(const char ***)&__c[3];
      }
      *((_BYTE *)v3 + 8) = atoi(v53);
    }
    strcpy((char *)v64, "ml2rnn");
    __strcat_chk();
    Interface = brokeraux_ComposeBrokerString(a1[2], (const char *)v64, 1, 0, (char *)a1[239], 0, 0, v65, 0x100uLL);
    if ((Interface & 0x80000000) != 0)
      return Interface;
    Interface = fi_init((_WORD *)*a1, a1[1], (_WORD *)a1[3], a1[4], &v62, 2, (uint64_t)v65, (uint64_t)"FINN", 1, 0);
    if ((Interface & 0x80000000) == 0)
      goto LABEL_75;
    Interface = brokeraux_ComposeBrokerString(a1[2], "ml2rnn", 1, 0, (char *)a1[239], 0, 0, v65, 0x100uLL);
    if ((Interface & 0x80000000) != 0)
      return Interface;
    Interface = fi_init((_WORD *)*a1, a1[1], (_WORD *)a1[3], a1[4], &v62, 0, (uint64_t)v65, (uint64_t)"FINN", 1, 0);
    if ((Interface & 0x80000000) != 0)
    {
      return 2345672704;
    }
    else
    {
LABEL_75:
      if (*(_QWORD *)(*(_QWORD *)v62 + 52) == __PAIR64__(*((unsigned __int16 *)a1 + 1012), 2)
        && *(_DWORD *)(*(_QWORD *)v62 + 60) == *((unsigned __int16 *)a1 + 1013)
                                               + *((unsigned __int16 *)a1 + 1015) * *((unsigned __int16 *)a1 + 964)
                                               + 3)
      {
        *v3 = v62;
        return Interface;
      }
      log_OutText(*(_QWORD *)(a1[2] + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"expected (%d, %d) got (%d, %d)", v55, v56, v57, *(unsigned int *)(*(_QWORD *)v62 + 56));
      return 2345672729;
    }
  }
  else
  {
    log_OutPublic(*(_QWORD *)(a1[2] + 32), (uint64_t)"FE_LID", 48000, 0, v49, v50, v51, v52, v60);
  }
  return v1;
}

uint64_t lidword_Deinit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!a1)
    return 2345672711;
  if (!*(_DWORD *)(a1 + 1924))
    return 0;
  v2 = *(_QWORD *)(a1 + 1936);
  if (v2)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v2);
  v3 = *(_QWORD *)(a1 + 1944);
  if (v3)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v3);
  v4 = *(_QWORD *)(a1 + 1952);
  if (v4)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v4);
  v5 = *(_QWORD *)(a1 + 2008);
  if (v5)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v5);
  v6 = *(_QWORD *)(a1 + 1960);
  if (v6)
  {
    v7 = (*(uint64_t (**)(_QWORD, _QWORD))(v6 + 24))(*(_QWORD *)(a1 + 1984), *(_QWORD *)(a1 + 1992));
    if ((v7 & 0x80000000) != 0)
      return v7;
    *(_QWORD *)(a1 + 1960) = 0;
  }
  else
  {
    v7 = 0;
  }
  v8 = (uint64_t **)(a1 + 134912);
  v9 = *(_QWORD *)(a1 + 2016);
  if (v9)
  {
    v10 = *(unsigned __int16 *)(a1 + 2024);
    if (*(_WORD *)(a1 + 2024))
    {
      v11 = 0;
      do
      {
        v12 = *(_QWORD *)(*(_QWORD *)(a1 + 2016) + 8 * v11);
        if (v12)
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v12);
          *(_QWORD *)(*(_QWORD *)(a1 + 2016) + 8 * v11) = 0;
          v10 = *(unsigned __int16 *)(a1 + 2024);
        }
        ++v11;
      }
      while (v11 < v10);
      v9 = *(_QWORD *)(a1 + 2016);
    }
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v9);
    *(_QWORD *)(a1 + 2016) = 0;
  }
  if (*v8)
  {
    v7 = fi_deinit(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 40), *v8);
    *v8 = 0;
  }
  v13 = *(_QWORD *)(a1 + 134928);
  if (v13)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v13);
  v14 = *(_QWORD *)(a1 + 134936);
  if (v14)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v14);
  v15 = *(_QWORD *)(a1 + 134944);
  if (v15)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v15);
  v16 = *(_QWORD *)(a1 + 134952);
  if (v16)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v16);
  v17 = *(_QWORD *)(a1 + 134968);
  if (v17)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v17);
  v18 = *(_QWORD *)(a1 + 134976);
  if (v18)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v18);
  v19 = *(_QWORD *)(a1 + 134984);
  if (v19)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v19);
  v20 = *(_QWORD *)(a1 + 134992);
  if (v20)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v20);
  *(_WORD *)(a1 + 1928) = 0;
  return v7;
}

BOOL lidword_IsPunc(uint64_t a1, unsigned __int8 *a2)
{
  return utf8_strchr(*(char **)(a1 + 134928), a2) != 0;
}

uint64_t lidword_CharAtOffsetSatisfies(uint64_t a1, char *__s, unsigned int PreviousUtf8Offset, int a4, uint64_t (*a5)(uint64_t, char *))
{
  int v5;
  unsigned int v9;
  int v10;

  v5 = a4;
  if (a4 < 0)
  {
    while (PreviousUtf8Offset)
    {
      PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)__s, PreviousUtf8Offset);
      if (__CFADD__(v5++, 1))
      {
        v9 = strlen(__s);
        goto LABEL_11;
      }
    }
  }
  else
  {
    v9 = strlen(__s);
    if (v5)
    {
      v10 = v5 + 1;
      while (PreviousUtf8Offset < v9)
      {
        PreviousUtf8Offset = utf8_GetNextUtf8Offset(__s, PreviousUtf8Offset);
        if (--v10 <= 1)
          goto LABEL_11;
      }
    }
    else
    {
LABEL_11:
      if (PreviousUtf8Offset < v9)
        return a5(a1, &__s[PreviousUtf8Offset]);
    }
  }
  return 0;
}

uint64_t lidword_IsSpace(int a1, char *__s)
{
  unsigned int v3;

  v3 = strlen(__s);
  return utf8_BelongsToSet(0, __s, 0, v3);
}

uint64_t lidword_True()
{
  return 1;
}

BOOL compare_2(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

char **lidword_AdvanceToEndMultiword(char **result)
{
  char *v1;
  unsigned __int8 **v2;
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned int v5;

  v1 = *result;
  if (**result)
  {
    v2 = (unsigned __int8 **)result;
    while (1)
    {
      v3 = strlen(v1);
      result = (char **)utf8_BelongsToSet(0, v1, 0, v3);
      v4 = *v2;
      if (!(_DWORD)result)
        break;
      result = (char **)Utf8_LengthInBytes(*v2, 1);
      v1 = (char *)&(*v2)[(int)result];
      *v2 = (unsigned __int8 *)v1;
      if (!*v1)
        return result;
    }
    while (*v4)
    {
      v5 = strlen((const char *)v4);
      result = (char **)utf8_BelongsToSet(0, v4, 0, v5);
      if ((_DWORD)result)
        break;
      result = (char **)Utf8_LengthInBytes(*v2, 1);
      v4 = &(*v2)[(int)result];
      *v2 = v4;
    }
  }
  return result;
}

_QWORD *calcWPenalties(_QWORD *result, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  __int16 v13;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  BOOL v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD __src[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v9 = *((unsigned __int16 *)result + 964);
  if (*((_WORD *)result + 964))
  {
    v11 = result;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = result[244];
    v16 = a2;
    do
    {
      v17 = (char *)&result[64 * (unint64_t)a2];
      v18 = *(_DWORD *)&v17[4 * *(unsigned __int16 *)(v15 + 2 * v12) + 2044];
      v19 = v18 == 0;
      v20 = v18 != 0;
      if (!v19)
      {
        v14 = v12;
        ++v13;
      }
      __src[v12++] = v20;
    }
    while (v9 != v12);
    result = memcpy(v17 + 2044, __src, 4 * v9);
    if (v13)
    {
      if (v13 == 1)
      {
        if (a3)
          *((_DWORD *)v11 + v16 + 33279) = v14;
        return (_QWORD *)log_OutText(*(_QWORD *)(v11[2] + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID found unambiguously in ML1 lexicon: %s", v21, v22, v23, v11[243] + 8 * v14);
      }
      else
      {
        return (_QWORD *)log_OutText(*(_QWORD *)(v11[2] + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID found ambiguously in ML1 lexicon", v21, v22, v23, a9);
      }
    }
  }
  return result;
}

uint64_t lidword_OutOfLID2(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 1088);
  v3 = *(unsigned __int16 *)(v2 + 8);
  if (*(_WORD *)(v2 + 8))
  {
    v4 = 0;
    v5 = 0;
    while (1)
    {
      if (*(_DWORD *)(a1 + ((unint64_t)a2 << 9) + 4 * v4 + 2044))
      {
        v6 = *(unsigned __int16 *)(a1 + 1928);
        if (*(_WORD *)(a1 + 1928))
        {
          v7 = *(unsigned __int16 **)(a1 + 1952);
          do
          {
            v8 = *v7++;
            if (v4 == v8)
              return 0;
          }
          while (--v6);
        }
        v5 = 1;
      }
      if (++v4 == v3)
        return v5;
    }
  }
  return 0;
}

BOOL lidword_IsUppercase(char *a1)
{
  unsigned int v2;

  v2 = strlen(a1);
  return utf8_BelongsToSet(0x12u, a1, 0, v2)
      || utf8_BelongsToSet(0x15u, a1, 0, v2)
      || utf8_BelongsToSet(0x18u, a1, 0, v2)
      || utf8_BelongsToSet(0x1Bu, a1, 0, v2)
      || utf8_BelongsToSet(0x1Eu, a1, 0, v2) != 0;
}

uint64_t lidword_InsertLangMarker(uint64_t a1, uint64_t a2, int a3, int a4, const char *a5, int a6, uint64_t *a7, unsigned int *a8, unsigned int *a9)
{
  unsigned int v11;
  const char *v12;
  uint64_t v13;
  unsigned __int16 i;
  unsigned __int16 j;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;

  v11 = a3 - 1;
  if (a6)
  {
    if (v11 >= 2)
    {
      for (i = 1; i < v11; ++i)
      {
        if ((*(_DWORD *)(a2 + 12) + a4) < *(_DWORD *)(a2 + 32 * i + 12))
          break;
      }
    }
    else
    {
      i = 1;
    }
    v12 = a5;
    v13 = a1;
    j = i - 1;
  }
  else
  {
    v12 = a5;
    v13 = a1;
    if (v11 >= 2)
    {
      for (j = 1; j < v11; ++j)
      {
        if ((*(_DWORD *)(a2 + 12) + a4) <= *(_DWORD *)(a2 + 32 * j + 12))
          break;
      }
    }
    else
    {
      j = 1;
    }
  }
  v16 = j;
  v34 = j + 1;
  v17 = j;
  v18 = (_QWORD *)(a2 + 32 * j);
  memmove((void *)(a2 + 32 * v34), v18, 32 * (v11 - j));
  v19 = *a9;
  if ((_DWORD)v19)
  {
    v20 = 0;
    v21 = *a7;
    do
    {
      v22 = *(_DWORD *)(v21 + 4 * v20);
      if (v22 >= v16)
      {
        *(_DWORD *)(v21 + 4 * v20) = v22 + 1;
        v19 = *a9;
      }
      ++v20;
    }
    while (v20 < v19);
  }
  *(_DWORD *)v18 = 36;
  v23 = strlen(v12);
  v24 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 8), (v23 + 1));
  v18[3] = v24;
  if (!v24)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 32), (uint64_t)"FE_LID", 48000, 0, v25, v26, v27, v28, v33);
    return 2345672714;
  }
  strcpy(v24, v12);
  *(_QWORD *)(a2 + 32 * v17 + 12) = (*(_DWORD *)(a2 + 12) + a4);
  if (v11 <= v16)
  {
    v30 = (int)v16 - 1;
    goto LABEL_26;
  }
  v29 = *(_DWORD *)(a2 + 32 * v34 + 4);
  v30 = v16 - 1;
  if (v29 <= *(_DWORD *)(a2 + 32 * (v16 - 1) + 4))
LABEL_26:
    v29 = *(_DWORD *)(a2 + 32 * v30 + 4);
  v32 = a2 + 32 * v17;
  *(_DWORD *)(v32 + 4) = v29;
  *(_DWORD *)(v32 + 8) = 0;
  result = hlp_AppendItemRaw32(v13, a7, a8, a9, 4u, 10);
  if ((result & 0x80000000) == 0)
    *(_DWORD *)(*a7 + 4 * (*a9 - 1)) = v16;
  return result;
}

uint64_t lidword_GetU16Param(_QWORD *a1, uint64_t a2, _WORD *a3)
{
  uint64_t v4;
  const char *v5;
  char *v6;
  _BYTE __c[11];

  *(_QWORD *)&__c[3] = 0;
  __c[0] = 0;
  *(_WORD *)&__c[1] = 1;
  v4 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t, _BYTE *, _BYTE *, _BYTE *))(a1[8] + 96))(a1[6], a1[7], "ml2cfg", a2, &__c[3], &__c[1], __c);
  if ((v4 & 0x80000000) == 0)
  {
    if (*(_WORD *)&__c[1])
    {
      v5 = **(const char ***)&__c[3];
      v6 = strchr(**(char ***)&__c[3], __c[0]);
      if (v6)
      {
        *v6 = 0;
        v5 = **(const char ***)&__c[3];
      }
      *a3 = LH_atou(v5);
    }
    else
    {
      return 2345672724;
    }
  }
  return v4;
}

uint64_t lidword_GetF32Param(_QWORD *a1, uint64_t a2, float *a3)
{
  uint64_t v4;
  const char *v5;
  char *v6;
  float v7;
  _BYTE __c[11];

  *(_QWORD *)&__c[3] = 0;
  __c[0] = 0;
  *(_WORD *)&__c[1] = 1;
  v4 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t, _BYTE *, _BYTE *, _BYTE *))(a1[8] + 96))(a1[6], a1[7], "ml2cfg", a2, &__c[3], &__c[1], __c);
  if ((v4 & 0x80000000) == 0)
  {
    if (*(_WORD *)&__c[1])
    {
      v5 = **(const char ***)&__c[3];
      v6 = strchr(**(char ***)&__c[3], __c[0]);
      if (v6)
      {
        *v6 = 0;
        v5 = **(const char ***)&__c[3];
      }
      v7 = atof(v5);
      *a3 = v7;
    }
    else
    {
      return 2345672724;
    }
  }
  return v4;
}

uint64_t lidword_GetTextParam(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _BYTE __c[11];

  *(_QWORD *)&__c[3] = 0;
  __c[0] = 0;
  *(_WORD *)&__c[1] = 1;
  v4 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t, _BYTE *, _BYTE *, _BYTE *))(a1[8] + 96))(a1[6], a1[7], "ml2cfg", a2, &__c[3], &__c[1], __c);
  if ((v4 & 0x80000000) == 0)
  {
    if (*(_WORD *)&__c[1])
    {
      v5 = **(_QWORD **)&__c[3];
      v6 = strchr(**(char ***)&__c[3], __c[0]);
      if (v6)
      {
        *v6 = 0;
        v5 = **(_QWORD **)&__c[3];
      }
      *a3 = v5;
    }
    else
    {
      return 2345672724;
    }
  }
  return v4;
}

uint64_t lidword_InitLangParams(uint64_t a1)
{
  uint64_t LangParam;
  uint64_t v3;
  uint64_t v4;
  char *__s1;
  char v7[256];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  __s1 = 0;
  **(_DWORD **)(a1 + 1936) = 6579559;
  *(_DWORD *)(*(_QWORD *)(a1 + 1936) + 8) = 7892581;
  if (*(_WORD *)(a1 + 1928) == 3)
    *(_DWORD *)(*(_QWORD *)(a1 + 1936) + 16) = 7893606;
  LangParam = lidword_GetLangParam((_QWORD *)a1, "languages");
  if ((LangParam & 0x80000000) == 0 || (v3 = LangParam, (LangParam & 0x1FFF) == 0x14))
  {
    *(_WORD *)(a1 + 1930) = 0;
    **(_DWORD **)(a1 + 1944) = 6579559;
    *(_DWORD *)(*(_QWORD *)(a1 + 1944) + 8) = 6778469;
    if (*(_WORD *)(a1 + 1928) == 3)
      *(_DWORD *)(*(_QWORD *)(a1 + 1944) + 16) = 6713958;
    strcpy(v7, "languages.");
    __strcat_chk();
    v4 = lidword_GetLangParam((_QWORD *)a1, v7);
    v3 = v4;
    if ((v4 & 0x80000000) == 0 || (v4 & 0x1FFF) == 0x14)
    {
      paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"extraesclang", &__s1);
      if (__s1)
        AdjustLanguageGroupMappingLID2((char *)(a1 + 1928), __s1);
    }
  }
  return v3;
}

uint64_t lidword_GetLangParam(_QWORD *a1, const char *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  unsigned __int16 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _BYTE __c[11];

  *(_QWORD *)&__c[3] = 0;
  __c[0] = 0;
  *(_WORD *)&__c[1] = 1;
  v4 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(a1[8] + 96))(a1[6], a1[7], "ml2cfg", a2, &__c[3], &__c[1], __c);
  if ((v4 & 0x80000000) == 0)
  {
    if (*(_WORD *)&__c[1])
    {
      v5 = **(char ***)&__c[3];
      v6 = strchr(**(char ***)&__c[3], __c[0]);
      if (v6)
      {
        *v6 = 0;
        v5 = **(char ***)&__c[3];
      }
      v7 = strchr(v5, 44);
      if (v7)
      {
        v8 = 0;
        do
        {
          if (!strcmp(a2, "languages"))
            v9 = 242;
          else
            v9 = 243;
          strncpy((char *)(a1[v9] + 8 * v8++), v5, (unsigned __int16)((_WORD)v7 - (_WORD)v5));
          v5 = v7 + 1;
          v7 = strchr(v7 + 1, 44);
        }
        while (v7);
        v7 = (char *)v8;
      }
      v10 = strcmp(a2, "languages");
      v11 = 243;
      if (!v10)
        v11 = 242;
      strcpy((char *)(a1[v11] + 8 * (_QWORD)v7), v5);
    }
    else
    {
      return 2345672724;
    }
  }
  return v4;
}

char *lid_make_language_group(char *a1, const char *a2)
{
  uint64_t v4;
  char *result;

  v4 = 0;
  strcpy(a1, a2)[2] = 120;
  do
  {
    result = (char *)strcmp(&FE_LID_LANG_2_LANG_GROUP[v4], a2);
    if (!(_DWORD)result)
      result = strcpy(a1, &FE_LID_LANG_2_LANG_GROUP[v4 + 4]);
    v4 += 8;
  }
  while (v4 != 32);
  return result;
}

uint64_t fe_lid_HlpClose(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
  v15 = a1;
  v16 = xmmword_1EA93F938;
  paramc_ListenerRemove(v2, "extraesclang", (__int128 *)&v15);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
  v15 = a1;
  v16 = xmmword_1EA93F938;
  paramc_ListenerRemove(v3, "lidlanguages", (__int128 *)&v15);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
  v15 = a1;
  v16 = xmmword_1EA93F938;
  paramc_ListenerRemove(v4, "lidscope", (__int128 *)&v15);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
  v15 = a1;
  v16 = xmmword_1EA93F938;
  paramc_ListenerRemove(v5, "lidmode", (__int128 *)&v15);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
  v15 = a1;
  v16 = xmmword_1EA93F938;
  paramc_ListenerRemove(v6, "lidvoiceswitch", (__int128 *)&v15);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
  v15 = a1;
  v16 = xmmword_1EA93F938;
  paramc_ListenerRemove(v7, "membiasedrejectparam1", (__int128 *)&v15);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
  v15 = a1;
  v16 = xmmword_1EA93F938;
  paramc_ListenerRemove(v8, "membiasedrejectparam2", (__int128 *)&v15);
  v9 = *(_QWORD *)(a1 + 1880);
  if (v9)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v9);
    *(_QWORD *)(a1 + 1880) = 0;
  }
  v10 = *(_QWORD *)(a1 + 1024);
  if (v10)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v10);
    *(_QWORD *)(a1 + 1024) = 0;
  }
  v11 = *(_QWORD *)(a1 + 1072);
  if (v11)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v11);
    *(_QWORD *)(a1 + 1072) = 0;
  }
  v12 = *(_QWORD *)(a1 + 1904);
  if (v12)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v12);
    *(_QWORD *)(a1 + 1904) = 0;
  }
  v13 = *(_QWORD *)(a1 + 1120);
  if (v13)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v13);
    *(_QWORD *)(a1 + 1120) = 0;
    *(_WORD *)(a1 + 1112) = 0;
  }
  lid_Deinit(a1);
  return lidword_Deinit(a1);
}

uint64_t fe_lid_ParamCheckChange(int a1, char *__s1, char *a3, _DWORD *a4)
{
  char *v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;

  if (!strcmp(__s1, "lidscope"))
  {
    if (!LH_stricmp(a3, "none"))
      goto LABEL_25;
    v7 = "user-defined";
  }
  else
  {
    if (strcmp(__s1, "lidmode"))
    {
      if (!strcmp(__s1, "lidlanguages"))
      {
        if (a3 && *a3)
        {
          v8 = 2345672719;
          v9 = strlen(a3);
          v10 = 0;
          v11 = 1;
          do
          {
            v12 = a3[v10];
            if ((v11 & 3) != 0)
            {
              if ((v12 & 0xFFFFFFDF) - 91 < 0xFFFFFFE6)
                goto LABEL_26;
            }
            else if (v12 && v12 != 44)
            {
              goto LABEL_26;
            }
            v10 = v11;
          }
          while (v9 >= v11++);
        }
      }
      else if (!strcmp(__s1, "lidvoiceswitch") && LH_stricmp(a3, "yes"))
      {
        v7 = "no";
        goto LABEL_13;
      }
LABEL_25:
      v8 = 0;
      goto LABEL_26;
    }
    if (!LH_stricmp(a3, "rejection")
      || !LH_stricmp(a3, "memory-bias")
      || !LH_stricmp(a3, "bias-mlset"))
    {
      goto LABEL_25;
    }
    v7 = "forced-choice";
  }
LABEL_13:
  if (LH_stricmp(a3, v7))
    v8 = 2345672719;
  else
    v8 = 0;
LABEL_26:
  *a4 = (int)v8 >= 0;
  return v8;
}

uint64_t fe_lid_ParamLearnChange(uint64_t a1, char *__s1, char *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  int v10;
  _OWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  char __s2[4];

  if (!strcmp(__s1, "lidscope"))
  {
    result = LH_stricmp(a3, "none");
    if (!(_DWORD)result)
    {
      *(_DWORD *)(a1 + 1004) = 0;
      return result;
    }
    result = LH_stricmp(a3, "user-defined");
    if ((_DWORD)result)
    {
      result = LH_stricmp(a3, "message");
      if ((_DWORD)result)
        return 2345672719;
      v10 = 2;
    }
    else
    {
      v10 = 1;
    }
    *(_DWORD *)(a1 + 1004) = v10;
    return result;
  }
  if (!strcmp(__s1, "lidmode"))
  {
    result = LH_stricmp(a3, "rejection");
    if ((_DWORD)result)
    {
      result = LH_stricmp(a3, "forced-choice");
      if (!(_DWORD)result)
      {
        *(_QWORD *)(a1 + 1140) = 0;
        *(_DWORD *)(a1 + 1188) = 0;
        *(_DWORD *)(a1 + 1200) = 0;
        *(_QWORD *)(a1 + 1128) = 0;
        return result;
      }
      result = LH_stricmp(a3, "memory-bias");
      if ((_DWORD)result)
      {
        result = LH_stricmp(a3, "bias-mlset");
        if ((_DWORD)result)
          return 2345672719;
        v11 = (_OWORD *)(a1 + 1128);
        *(_DWORD *)(a1 + 1188) = 1;
        *(_DWORD *)(a1 + 1200) = 1;
      }
      else
      {
        v11 = (_OWORD *)(a1 + 1128);
        *(_DWORD *)(a1 + 1188) = 1;
        *(_DWORD *)(a1 + 1200) = 0;
      }
      *v11 = xmmword_1DEC65F60;
      v12 = 279172874250000;
    }
    else
    {
      *(_DWORD *)(a1 + 1188) = 0;
      *(_DWORD *)(a1 + 1200) = 0;
      *(_OWORD *)(a1 + 1128) = xmmword_1DEC65F70;
      v12 = 1000;
    }
    *(_QWORD *)(a1 + 1144) = v12;
    return result;
  }
  if (!strcmp(__s1, "lidlanguages"))
    return hlp_SetActiveLngs(a1, a3);
  if (!strcmp(__s1, "lidvoiceswitch"))
  {
    result = LH_stricmp(a3, "yes");
    if (!(_DWORD)result)
    {
      *(_DWORD *)(a1 + 1008) = 0;
      return result;
    }
    result = LH_stricmp(a3, "no");
    if (!(_DWORD)result)
    {
      *(_DWORD *)(a1 + 1008) = 1;
      return result;
    }
    return 2345672719;
  }
  if (!strcmp(__s1, "membiasedrejectparam1"))
  {
    v13 = LH_atou(a3);
    result = 0;
    *(_DWORD *)(a1 + 1132) = v13;
    *(_DWORD *)(a1 + 1144) = v13;
  }
  else if (!strcmp(__s1, "membiasedrejectparam2"))
  {
    v14 = LH_atou(a3);
    result = 0;
    *(_DWORD *)(a1 + 1136) = v14;
    *(_DWORD *)(a1 + 1148) = v14;
  }
  else
  {
    if (!strcmp(__s1, "extraesclang"))
    {
      if (*(_WORD *)(a1 + 1066))
      {
        v6 = 0;
        v7 = 20;
        do
        {
          if (*(_DWORD *)(*(_QWORD *)(a1 + 1072) + v7) == 1)
          {
            __strcpy_chk();
            __s2[2] = 0;
            v8 = strstr(a3, __s2);
            if (v8)
            {
              if (v8 == a3 || *(v8 - 1) == 44)
                strncpy((char *)(*(_QWORD *)(a1 + 1072) + v7 - 12), v8, 3uLL);
            }
          }
          ++v6;
          v7 += 24;
        }
        while (v6 < *(unsigned __int16 *)(a1 + 1066));
      }
      AdjustLanguageGroupMappingLID2((char *)(a1 + 1928), a3);
    }
    return 0;
  }
  return result;
}

uint64_t fe_lid_ObjOpen(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Object;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = 0;
  v28 = 0;
  v5 = 2345672711;
  v26 = 0;
  if (!a5)
    return v5;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v28);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = InitRsrcFunction(a1, a2, &v27);
  if ((inited & 0x80000000) != 0)
    return inited;
  v12 = (_QWORD *)heap_Calloc(*(_QWORD **)(v28 + 8), 1, 135000);
  if (!v12)
  {
    log_OutPublic(*(_QWORD *)(v28 + 32), (uint64_t)"FE_LID", 48000, 0, v13, v14, v15, v16, v25);
    return 2345672714;
  }
  v17 = (uint64_t)v12;
  *v12 = a3;
  v12[1] = a4;
  v19 = v27;
  v18 = v28;
  v12[2] = v28;
  v12[3] = a1;
  v12[4] = a2;
  v12[5] = v19;
  Object = objc_GetObject(*(_QWORD *)(v18 + 48), (uint64_t)"SYNTHSTREAM", &v26);
  if ((Object & 0x80000000) != 0
    || (*(_QWORD *)(v17 + 72) = *(_QWORD *)(v26 + 8),
        Object = objc_GetObject(*(_QWORD *)(v28 + 48), (uint64_t)"FE_DCTLKP", &v26),
        (Object & 0x80000000) != 0))
  {
    v5 = Object;
    *(_QWORD *)a5 = v17;
    *(_DWORD *)(a5 + 8) = 62400;
LABEL_11:
    fe_lid_ObjClose((_QWORD *)v17, *(_QWORD *)(a5 + 8));
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    return v5;
  }
  v21 = v26;
  *(_QWORD *)(v17 + 64) = *(_QWORD *)(v26 + 8);
  *(_OWORD *)(v17 + 48) = *(_OWORD *)(v21 + 16);
  if ((objc_GetObject(*(_QWORD *)(v28 + 48), (uint64_t)"COMPQUERY", &v26) & 0x80000000) != 0)
  {
    *(_QWORD *)(v17 + 96) = 0;
    *(_QWORD *)(v17 + 80) = safeh_GetNullHandle();
    *(_QWORD *)(v17 + 88) = v23;
  }
  else
  {
    v22 = v26;
    *(_QWORD *)(v17 + 96) = *(_QWORD *)(v26 + 8);
    *(_OWORD *)(v17 + 80) = *(_OWORD *)(v22 + 16);
  }
  v5 = fe_lid_HlpOpen(v17);
  *(_QWORD *)a5 = v17;
  *(_DWORD *)(a5 + 8) = 62400;
  if ((v5 & 0x80000000) != 0)
    goto LABEL_11;
  return v5;
}

uint64_t fe_lid_HlpOpen(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t Str;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  const char *v11;
  char *v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  int v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  int v42;
  uint64_t v43;
  uint64_t active;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int16 v54;
  unsigned int v55;
  uint64_t v56;
  unsigned __int8 v57;
  char *v58;
  int v59;
  int v60;
  char *v61;
  uint64_t v62;
  int v63;
  const char *ModelLng;
  const char *v65;
  int v66;
  uint64_t v67;
  int v68;
  __int128 v69;
  int v70;
  int v71;
  const char *v72;
  char *v73;
  uint64_t v74;
  _BOOL4 v75;
  BOOL v76;
  int v77;
  char *v78;
  int v79;
  __int128 v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  _QWORD *v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  char v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _DWORD *v106;
  char *v107;
  size_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  size_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  char *v118;
  char *__src;
  char *v120;
  char *__s;
  char *v122;
  uint64_t v123;
  unsigned int v124;
  char v125;
  __int16 v126;
  char **v127;
  char __s2[8];
  __int128 v129;
  char __dst[128];
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v127 = 0;
  v126 = 0;
  v125 = 0;
  v124 = 0;
  v122 = 0;
  v123 = 0;
  v120 = 0;
  __s = 0;
  v118 = 0;
  __src = 0;
  v2 = *(_QWORD *)(a1 + 16);
  if ((paramc_ParamGetStr(*(_QWORD *)(v2 + 40), (uint64_t)"mlset", &__s) & 0x80000000) != 0 || (v3 = __s, !*__s))
  {
    Str = paramc_ParamGetStr(*(_QWORD *)(v2 + 40), (uint64_t)"langcode", &__s);
    if ((Str & 0x80000000) != 0)
      goto LABEL_17;
    v3 = __s;
  }
  v9 = strlen(v3);
  v10 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), v9 + 1);
  if (!v10)
  {
    v16 = 2345672714;
    *(_QWORD *)(a1 + 1904) = 0;
    return v16;
  }
  v11 = v10;
  v12 = strcpy(v10, v3);
  *(_QWORD *)(a1 + 1904) = v12;
  if ((int)strlen(v12) >= 1)
  {
    v13 = 0;
    do
    {
      v11[(unsigned __int16)v13] = __tolower(v11[(unsigned __int16)v13]);
      ++v13;
      v11 = *(const char **)(a1 + 1904);
    }
    while ((int)strlen(v11) > (unsigned __int16)v13);
  }
  if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"extraesclang", &v120) & 0x80000000) == 0)
  {
    v14 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)__s2 = a1;
    v129 = xmmword_1EA93F938;
    Str = paramc_ListenerAdd(v14, "extraesclang", __s2);
    if ((Str & 0x80000000) != 0)
      goto LABEL_17;
  }
  paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"langcode", &__src);
  *(_DWORD *)(a1 + 1008) = 0;
  if ((paramc_ParamGetStr(*(_QWORD *)(v2 + 40), (uint64_t)"lidvoiceswitch", &v122) & 0x80000000) != 0)
  {
    Str = paramc_ParamSetStr(*(_QWORD *)(v2 + 40), (uint64_t)"lidvoiceswitch", "no");
    if ((Str & 0x80000000) != 0)
      goto LABEL_17;
  }
  else
  {
    if (!LH_stricmp(v122, "yes"))
    {
      v15 = 0;
      goto LABEL_20;
    }
    if (!LH_stricmp(v122, "no"))
    {
      v15 = 1;
LABEL_20:
      *(_DWORD *)(a1 + 1008) = v15;
    }
  }
  v18 = *(const char **)(a1 + 1904);
  if (!v18)
    goto LABEL_62;
  if (strlen(v18) < 4)
    goto LABEL_62;
  paramc_ParamGetStr(*(_QWORD *)(v2 + 40), (uint64_t)"lidlanguages", &v118);
  v23 = v120;
  if (!v120 || !*v120)
    goto LABEL_62;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  do
  {
    if ((++v26 & 3) != 0)
    {
      v27 = v23[v24];
      if ((v27 & 0xFFFFFFDF) - 91 > 0xFFFFFFE5)
        __s2[v25++] = ssft_tolower(v27);
      else
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 60003, "%s%s", v19, v20, v21, v22, "extraesclang");
    }
    else
    {
      __s2[v25] = 0;
      if (v23[v24] && v23[v24] != 44)
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 60003, "%s%s", v19, v20, v21, v22, "extraesclang");
      }
      else if (!strstr(*(char **)(a1 + 1904), __s2) || !LH_stricmp(__src, __s2))
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 60004, "%s%s", v28, v29, v30, v31, "language");
      }
      v25 = 0;
    }
    v24 = v26;
    v23 = v120;
    v32 = strlen(v120);
  }
  while (v32 >= v26);
  v33 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), (v32 + 5));
  if (!v33)
  {
    v16 = 2345672714;
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    v43 = 60000;
LABEL_74:
    log_OutPublic(v17, (uint64_t)"FE_LID", v43, 0, v5, v6, v7, v8, v117);
    return v16;
  }
  v34 = v33;
  v35 = strcpy(v33, __src);
  *(_WORD *)&v34[strlen(v35)] = 44;
  strcat(v34, v120);
  paramc_ParamGetStr(*(_QWORD *)(v2 + 40), (uint64_t)"lidlanguages", &v118);
  v36 = v118;
  if (*v34)
  {
    if (v118 && *v118)
    {
      __s2[0] = 0;
      strncpy(__dst, v34, 0x7FuLL);
      __dst[127] = 0;
      v37 = __dst[0];
      if (__dst[0])
      {
        v38 = 0;
        v39 = __dst;
        do
        {
          v40 = 0;
          v41 = (unsigned __int8 *)(v39 + 1);
          if (v37)
          {
            while (v37 != 44)
            {
              v37 = v39[++v40];
              ++v41;
              if (!v37)
                goto LABEL_47;
            }
            v38 += v40;
            do
            {
              *(v41 - 1) = 0;
              ++v38;
              v42 = *v41++;
            }
            while (v42 == 44);
          }
          else
          {
LABEL_47:
            v38 += v40;
          }
          if (strstr(v36, v39))
          {
            if (__s2[0])
              __strcat_chk();
            __strcat_chk();
          }
          v39 = &__dst[v38];
          v37 = __dst[v38];
        }
        while (__dst[v38]);
      }
      goto LABEL_60;
    }
  }
  else if (!v118)
  {
    __s2[0] = 0;
    goto LABEL_60;
  }
  __strcpy_chk();
LABEL_60:
  active = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"lidlanguages", __s2);
  if ((active & 0x80000000) != 0)
    return active;
  heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v34);
LABEL_62:
  v45 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)__s2 = a1;
  v129 = xmmword_1EA93F938;
  v16 = paramc_ListenerAdd(v45, "lidvoiceswitch", __s2);
  v46 = *(_QWORD *)(a1 + 16);
  if ((v16 & 0x80000000) != 0)
  {
    v17 = *(_QWORD *)(v46 + 32);
    goto LABEL_73;
  }
  v16 = hlp_FillDicLMLanguages(v46, a1 + 1016, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(char **)(a1 + 1904), v120, 0xFFFF);
  if ((v16 & 0x80001FFF) == 0x8000000A)
    return v16;
  v16 = hlp_FillDicLMLanguages(*(_QWORD *)(a1 + 16), a1 + 1064, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(char **)(a1 + 1904), v120, 1);
  if ((v16 & 0x80001FFF) == 0x8000000A)
    return v16;
  if (!*(_WORD *)(a1 + 1018) && !*(_WORD *)(a1 + 1066))
    return 0;
  *(_DWORD *)(a1 + 1004) = 0;
  active = paramc_ParamGet(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"langcode", (_QWORD *)(a1 + 1912), 0);
  if ((active & 0x80000000) != 0)
    return active;
  v47 = *(unsigned __int16 *)(a1 + 1018);
  v48 = *(unsigned __int16 *)(a1 + 1066);
  if (!(v47 | v48))
    goto LABEL_69;
  *(_DWORD *)(a1 + 1152) = 69077;
  if (v47 <= v48)
    v47 = v48;
  v50 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 16 * v47);
  *(_QWORD *)(a1 + 1880) = v50;
  if (!v50)
  {
    v16 = 2345672714;
    goto LABEL_18;
  }
  Str = lid_Init(a1);
  if ((Str & 0x80000000) != 0)
    goto LABEL_17;
  if (*(_WORD *)(a1 + 1066))
  {
    Str = lidword_Init((_QWORD *)a1);
    if ((Str & 0x80000000) != 0)
      goto LABEL_17;
  }
  v51 = *(_QWORD *)(a1 + 96);
  if (v51)
  {
    v16 = (*(uint64_t (**)(_QWORD, _QWORD, void *, _QWORD, unsigned int *))(v51 + 64))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), &unk_1DEC66016, 0, &v124);
    if ((v16 & 0x80001FFF) == 0x8000000A)
      return v16;
    if (v124)
    {
      v52 = heap_Calloc(*(_QWORD **)(v2 + 8), v124, 86);
      if (!v52)
      {
        v17 = *(_QWORD *)(v2 + 32);
        goto LABEL_73;
      }
      v53 = v52;
      active = (*(uint64_t (**)(_QWORD, _QWORD, void *, uint64_t, unsigned int *))(*(_QWORD *)(a1 + 96) + 64))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), &unk_1DEC66016, v52, &v124);
      if ((active & 0x80000000) == 0)
      {
        if (v124)
        {
          v54 = 0;
          do
          {
            v55 = v54;
            v56 = v53 + 86 * v54;
            v59 = *(unsigned __int8 *)(v56 + 64);
            v58 = (char *)(v56 + 64);
            v57 = v59;
            if (v59)
            {
              v60 = 0;
              v61 = v58;
              do
              {
                *v61 = ssft_tolower(v57);
                v62 = v53 + 86 * v55 + (unsigned __int16)++v60;
                v63 = *(unsigned __int8 *)(v62 + 64);
                v61 = (char *)(v62 + 64);
                v57 = v63;
              }
              while (v63);
            }
            ModelLng = hlp_FindModelLng(a1, v58, 1);
            if (ModelLng || (lid_make_language_group(__dst, v58), (ModelLng = hlp_FindModelLng(a1, __dst, 1)) != 0))
              *((_DWORD *)ModelLng + 4) = 1;
            v65 = hlp_FindModelLng(a1, v58, 0);
            if (v65 || (lid_make_language_group(__dst, v58), (v65 = hlp_FindModelLng(a1, __dst, 1)) != 0))
              *((_DWORD *)v65 + 4) = 1;
            v54 = v55 + 1;
          }
          while (v124 > (unsigned __int16)(v55 + 1));
        }
        heap_Free(*(_QWORD **)(v2 + 8), v53);
        goto LABEL_100;
      }
      return active;
    }
  }
LABEL_100:
  v126 = -1;
  active = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, char *))(*(_QWORD *)(a1 + 64) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "lidcfg", "lidscope", &v127, &v126, &v125);
  if ((active & 0x80000000) != 0)
    return active;
  if (v126)
    goto LABEL_236;
  v126 = 1;
  active = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, char *))(*(_QWORD *)(a1 + 64) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "lidcfg", "lidscope", &v127, &v126, &v125);
  if ((active & 0x80000000) != 0)
    return active;
  if (v126)
  {
LABEL_236:
    if (strstr(*v127, "user-defined"))
      v66 = 1;
    else
      v66 = 2;
    *(_DWORD *)(a1 + 1004) = v66;
  }
LABEL_69:
  if ((paramc_ParamGetStr(*(_QWORD *)(v2 + 40), (uint64_t)"lidlanguages", &v122) & 0x80000000) != 0)
  {
    Str = paramc_ParamSetStr(*(_QWORD *)(v2 + 40), (uint64_t)"lidlanguages", (char *)&unk_1DEC66016);
    if ((Str & 0x80000000) == 0)
      goto LABEL_107;
LABEL_17:
    v16 = Str;
LABEL_18:
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
LABEL_73:
    v43 = 48000;
    goto LABEL_74;
  }
  active = hlp_SetActiveLngs(a1, v122);
  if ((active & 0x80000000) != 0)
    return active;
LABEL_107:
  v67 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)__s2 = a1;
  v129 = xmmword_1EA93F938;
  Str = paramc_ListenerAdd(v67, "lidlanguages", __s2);
  if ((Str & 0x80000000) != 0)
    goto LABEL_17;
  if ((paramc_ParamGetStr(*(_QWORD *)(v2 + 40), (uint64_t)"lidscope", &v122) & 0x80000000) == 0)
  {
    if (LH_stricmp(v122, "none"))
    {
      if (LH_stricmp(v122, "user-defined"))
      {
        v68 = LH_stricmp(v122, "message");
        v69 = xmmword_1EA93F938;
        if (v68)
          goto LABEL_126;
        v70 = 2;
        goto LABEL_125;
      }
      v70 = 1;
    }
    else
    {
      v70 = 0;
    }
    v69 = xmmword_1EA93F938;
LABEL_125:
    *(_DWORD *)(a1 + 1004) = v70;
    goto LABEL_126;
  }
  v71 = *(_DWORD *)(a1 + 1004);
  v72 = "message";
  if (v71 == 1)
    v72 = "user-defined";
  if (v71)
    v73 = (char *)v72;
  else
    v73 = "none";
  Str = paramc_ParamSetStr(*(_QWORD *)(v2 + 40), (uint64_t)"lidscope", v73);
  v69 = xmmword_1EA93F938;
  if ((Str & 0x80000000) != 0)
    goto LABEL_17;
LABEL_126:
  v74 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)__s2 = a1;
  v129 = v69;
  Str = paramc_ListenerAdd(v74, "lidscope", __s2);
  if ((Str & 0x80000000) != 0)
    goto LABEL_17;
  if ((paramc_ParamGetUInt(*(_QWORD *)(v2 + 40), (uint64_t)"membiasedrejectparam1", (unsigned int *)&v123 + 1) & 0x80000000) != 0)
  {
    v75 = 0;
    HIDWORD(v123) = 0;
  }
  else
  {
    if ((paramc_ParamGetUInt(*(_QWORD *)(v2 + 40), (uint64_t)"membiasedrejectparam2", (unsigned int *)&v123) & 0x80000000) == 0)
    {
      v75 = v123 != 0;
      v76 = v123 == 0;
      goto LABEL_133;
    }
    v75 = 0;
    v123 = 0;
  }
  v76 = 1;
LABEL_133:
  *(_DWORD *)(a1 + 1140) = 0;
  *(_DWORD *)(a1 + 1128) = 0;
  *(_DWORD *)(a1 + 1188) = 0;
  *(_DWORD *)(a1 + 1200) = 0;
  v126 = -1;
  active = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, char *))(*(_QWORD *)(a1 + 64) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "lidcfg", "lidmode", &v127, &v126, &v125);
  if ((active & 0x80000000) != 0)
    return active;
  if (v126 && strstr(*v127, "rejection"))
    *(_DWORD *)(a1 + 1128) = 1;
  v126 = 1;
  v77 = 0;
  if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, char *))(*(_QWORD *)(a1 + 64) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "lidcfg", "lidmode", &v127, &v126, &v125) & 0x80000000) == 0&& v126)
  {
    v78 = *v127;
    if (strstr(*v127, "rejection"))
      *(_DWORD *)(a1 + 1140) = 1;
    if (strstr(v78, "memory-bias"))
    {
      v77 = 1;
      *(_DWORD *)(a1 + 1188) = 1;
      *(_DWORD *)(a1 + 1200) = 0;
    }
    else
    {
      v77 = 0;
    }
    if (strstr(v78, "bias-mlset"))
    {
      v77 = 1;
      *(_DWORD *)(a1 + 1188) = 1;
      *(_DWORD *)(a1 + 1200) = 1;
    }
  }
  if ((paramc_ParamGetStr(*(_QWORD *)(v2 + 40), (uint64_t)"lidmode", &v122) & 0x80000000) == 0)
  {
    if (LH_stricmp(v122, "rejection"))
    {
      if (LH_stricmp(v122, "forced-choice"))
      {
        if (LH_stricmp(v122, "memory-bias"))
        {
          v79 = LH_stricmp(v122, "bias-mlset");
          v80 = xmmword_1EA93F938;
          if (v79)
            goto LABEL_166;
          v81 = 0;
          v82 = 1;
          v83 = 1;
          goto LABEL_165;
        }
        v81 = 0;
        v83 = 0;
        v82 = 1;
      }
      else
      {
        v81 = 0;
        v82 = 0;
        v83 = 0;
      }
    }
    else
    {
      v82 = 0;
      v83 = 0;
      v81 = 1;
    }
    v80 = xmmword_1EA93F938;
LABEL_165:
    *(_DWORD *)(a1 + 1128) = v81;
    *(_DWORD *)(a1 + 1140) = v81;
    *(_DWORD *)(a1 + 1188) = v82;
    *(_DWORD *)(a1 + 1200) = v83;
    goto LABEL_166;
  }
  if (*(_DWORD *)(a1 + 1128) || *(_DWORD *)(a1 + 1140))
  {
    v84 = *(_QWORD *)(v2 + 40);
    v85 = "rejection";
  }
  else if (*(_DWORD *)(a1 + 1188))
  {
    v84 = *(_QWORD *)(v2 + 40);
    v85 = "memory-bias";
  }
  else
  {
    v84 = *(_QWORD *)(v2 + 40);
    if (*(_DWORD *)(a1 + 1200))
      v85 = "bias-mlset";
    else
      v85 = "forced-choice";
  }
  v16 = paramc_ParamSetStr(v84, (uint64_t)"lidmode", v85);
  v80 = xmmword_1EA93F938;
  if ((v16 & 0x80000000) != 0)
    goto LABEL_18;
LABEL_166:
  v86 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)__s2 = a1;
  v129 = v80;
  Str = paramc_ListenerAdd(v86, "lidmode", __s2);
  if ((Str & 0x80000000) != 0)
    goto LABEL_17;
  v87 = (_QWORD *)(a1 + 1132);
  *(_QWORD *)(a1 + 1132) = 0x3200000000;
  *(_QWORD *)(a1 + 1144) = 0x3200000000;
  v88 = *(_DWORD *)(a1 + 1128);
  if (v88)
  {
    if (*(_DWORD *)(a1 + 1188) != 1)
    {
      if (v88 == 1)
      {
LABEL_174:
        v91 = 0;
        *v87 = 1000;
        *(_DWORD *)(a1 + 1144) = 1000;
LABEL_200:
        *(_DWORD *)(a1 + 1148) = v91;
        goto LABEL_201;
      }
      v89 = *(_DWORD *)(a1 + 1140);
      goto LABEL_173;
    }
LABEL_178:
    if (v75)
    {
      v93 = v123;
      v92 = HIDWORD(v123);
      *(_DWORD *)(a1 + 1132) = HIDWORD(v123);
      *(_DWORD *)(a1 + 1136) = v93;
      *(_DWORD *)(a1 + 1144) = v92;
      *(_DWORD *)(a1 + 1148) = v93;
    }
    v94 = !v76;
    if (v77)
      v95 = !v76;
    else
      v95 = 1;
    if ((v95 & 1) != 0)
    {
      if (v77)
        v94 = 1;
      if ((v94 & 1) == 0)
      {
        *v87 = 279172874250000;
        *(_DWORD *)(a1 + 1144) = 10000;
        v91 = 65000;
        goto LABEL_200;
      }
    }
    else
    {
      v126 = -1;
      active = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, char *))(*(_QWORD *)(a1 + 64) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "lidcfg", "rejectparam1", &v127, &v126, &v125);
      if ((active & 0x80000000) != 0)
        return active;
      if (v126)
        *(_DWORD *)v87 = (unsigned __int16)LH_atou(*v127);
      v126 = -1;
      active = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, char *))(*(_QWORD *)(a1 + 64) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "lidcfg", "rejectparam2", &v127, &v126, &v125);
      if ((active & 0x80000000) != 0)
        return active;
      if (v126)
        *(_DWORD *)(a1 + 1136) = (unsigned __int16)LH_atou(*v127);
      v126 = 1;
      if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, char *))(*(_QWORD *)(a1 + 64) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "lidcfg", "rejectparam1", &v127, &v126, &v125) & 0x80000000) == 0&& v126)
      {
        *(_DWORD *)(a1 + 1144) = (unsigned __int16)LH_atou(*v127);
      }
      v126 = 1;
      if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, char *))(*(_QWORD *)(a1 + 64) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "lidcfg", "rejectparam2", &v127, &v126, &v125) & 0x80000000) == 0&& v126)
      {
        v91 = (unsigned __int16)LH_atou(*v127);
        goto LABEL_200;
      }
    }
    goto LABEL_201;
  }
  v89 = *(_DWORD *)(a1 + 1140);
  v90 = *(_DWORD *)(a1 + 1188);
  if (!v89)
  {
    if (v90 != 1)
    {
      if (!v90)
      {
        v91 = 0;
        *(_DWORD *)(a1 + 1136) = 0;
        goto LABEL_200;
      }
      goto LABEL_201;
    }
    goto LABEL_178;
  }
  if (v90 == 1)
    goto LABEL_178;
LABEL_173:
  if (v89 == 1)
    goto LABEL_174;
LABEL_201:
  Str = paramc_ParamSetUInt(*(_QWORD *)(v2 + 40), (uint64_t)"membiasedrejectparam1", *(_DWORD *)(a1 + 1144));
  if ((Str & 0x80000000) != 0)
    goto LABEL_17;
  Str = paramc_ParamSetUInt(*(_QWORD *)(v2 + 40), (uint64_t)"membiasedrejectparam2", *(_DWORD *)(a1 + 1148));
  if ((Str & 0x80000000) != 0)
    goto LABEL_17;
  v96 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)__s2 = a1;
  v129 = xmmword_1EA93F938;
  Str = paramc_ListenerAdd(v96, "membiasedrejectparam1", __s2);
  if ((Str & 0x80000000) != 0)
    goto LABEL_17;
  v97 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)__s2 = a1;
  v129 = xmmword_1EA93F938;
  Str = paramc_ListenerAdd(v97, "membiasedrejectparam2", __s2);
  if ((Str & 0x80000000) != 0)
    goto LABEL_17;
  *(_QWORD *)(a1 + 1180) = 0;
  v126 = -1;
  active = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, char *))(*(_QWORD *)(a1 + 64) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "lidcfg", "numfallback", &v127, &v126, &v125);
  if ((active & 0x80000000) != 0)
    return active;
  if (v126)
    *(_DWORD *)(a1 + 1180) = 1;
  v126 = 1;
  if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, char *))(*(_QWORD *)(a1 + 64) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "lidcfg", "numfallback", &v127, &v126, &v125) & 0x80000000) == 0&& v126)
  {
    *(_DWORD *)(a1 + 1184) = 1;
  }
  *(_OWORD *)(a1 + 1156) = xmmword_1DEC65F80;
  *(_QWORD *)(a1 + 1172) = 0x786E65000003E8;
  v126 = -1;
  active = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, char *))(*(_QWORD *)(a1 + 64) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "lidcfg", "fuzzythreshold", &v127, &v126, &v125);
  if ((active & 0x80000000) != 0)
    return active;
  if (v126)
  {
    *(_DWORD *)(a1 + 1156) = 1;
    v98 = LH_atou(*v127);
    *(_DWORD *)(a1 + 1160) = (_DWORD)v98;
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"setting fuzzy matching threshold to %7lu", v99, v100, v101, (uint64_t)v98);
  }
  v126 = 1;
  if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, char *))(*(_QWORD *)(a1 + 64) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "lidcfg", "fuzzythreshold", &v127, &v126, &v125) & 0x80000000) == 0&& v126)
  {
    *(_DWORD *)(a1 + 1168) = 1;
    v102 = LH_atou(*v127);
    *(_DWORD *)(a1 + 1172) = (_DWORD)v102;
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"setting common fuzzy matching threshold to %7lu", v103, v104, v105, (uint64_t)v102);
  }
  v126 = -1;
  active = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, char *))(*(_QWORD *)(a1 + 64) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "lidcfg", "fuzzyfallbacklang", &v127, &v126, &v125);
  if ((active & 0x80000000) != 0)
    return active;
  v106 = (_DWORD *)(a1 + 1164);
  if (v126)
  {
    v107 = *v127;
    v108 = strlen(*v127);
    *(_DWORD *)(a1 + 1156) = 1;
    *v106 = *(_DWORD *)v107;
    if (v108 >= 4)
      *(_BYTE *)(a1 + 1167) = 0;
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"setting fuzzy matching fallback language to %s", v109, v110, v111, a1 + 1164);
  }
  v126 = 1;
  v16 = 0;
  if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, char *))(*(_QWORD *)(a1 + 64) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "lidcfg", "fuzzyfallbacklang", &v127, &v126, &v125) & 0x80000000) == 0&& v126)
  {
    v112 = *v127;
    v113 = strlen(*v127);
    *(_DWORD *)(a1 + 1156) = 1;
    *v106 = *(_DWORD *)v112;
    if (v113 >= 4)
      *(_BYTE *)(a1 + 1167) = 0;
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"setting fuzzy matching fallback language to %s", v114, v115, v116, a1 + 1164);
    return 0;
  }
  return v16;
}

uint64_t fe_lid_ObjClose(_QWORD *a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck((uint64_t)a1, a2, 62400, 135000);
  if ((result & 0x80000000) != 0)
    return 2345672712;
  if (a1)
  {
    if (a1[9])
      objc_ReleaseObject(*(_QWORD *)(a1[2] + 48), (uint64_t)"SYNTHSTREAM");
    if (a1[8])
      objc_ReleaseObject(*(_QWORD *)(a1[2] + 48), (uint64_t)"FE_DCTLKP");
    if (a1[12])
      objc_ReleaseObject(*(_QWORD *)(a1[2] + 48), (uint64_t)"COMPQUERY");
    fe_lid_HlpClose((uint64_t)a1);
    heap_Free(*(_QWORD **)(a1[2] + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t fe_lid_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int v15;
  _DWORD *v16;
  unsigned int v17;
  char *__s1;

  __s1 = 0;
  v17 = 0;
  v16 = 0;
  v7 = safeh_HandleCheck(a1, a2, 62400, 135000);
  if ((v7 & 0x80000000) != 0)
    return 2345672712;
  v8 = v7;
  synstrmaux_InitStreamOpener(a1 + 104, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID");
  *(_DWORD *)(a1 + 1000) = 0;
  if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"textanalysison", &__s1) & 0x80000000) == 0
    && __s1
    && *__s1
    && !strcmp(__s1, "yes"))
  {
    *(_DWORD *)(a1 + 996) = 1;
  }
  if (*(_DWORD *)(a1 + 1188))
  {
    *(_DWORD *)(a1 + 1192) = *(_DWORD *)(a1 + 1144);
    if (*(_DWORD *)(a1 + 996))
    {
      *(_DWORD *)(a1 + 1000) = 0;
      paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"initcommonbiasvalue", 0);
      paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"initcommonbiaslanguage", (char *)&unk_1DEC66016);
      if (*(_DWORD *)(a1 + 1000))
        goto LABEL_20;
    }
    else
    {
      if ((paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"initcommonbiasvalue", &v17) & 0x80000000) == 0)
      {
        if (v17)
        {
          if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"initcommonbiaslanguage", &v16) & 0x80000000) == 0)
          {
            v13 = v16;
            if (v16)
            {
              *(_DWORD *)(a1 + 1192) = v17;
              *(_DWORD *)(a1 + 1000) = 1;
LABEL_19:
              *(_DWORD *)(a1 + 1196) = *v13;
              goto LABEL_20;
            }
          }
        }
      }
      *(_DWORD *)(a1 + 1000) = 0;
    }
    v13 = *(_DWORD **)(a1 + 1912);
    goto LABEL_19;
  }
LABEL_20:
  if (*(_DWORD *)(a1 + 1004))
  {
    if (*(_WORD *)(a1 + 1018) || *(_WORD *)(a1 + 1066))
    {
      synstrmaux_RegisterInStream((_WORD *)(a1 + 104), (uint64_t)"text/plain;charset=utf-8", 0, a1 + 928);
      synstrmaux_RegisterInStream((_WORD *)(a1 + 104), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
        0,
        a1 + 944);
      synstrmaux_RegisterOutStream((_WORD *)(a1 + 104), (uint64_t)"text/plain;charset=utf-8", a1 + 960);
      synstrmaux_RegisterOutStream((_WORD *)(a1 + 104), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
        a1 + 976);
      v8 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 104), *(_QWORD *)(a1 + 72), a3, a4);
      if ((v8 & 0x80000000) != 0)
        synstrmaux_CloseStreams((_WORD *)(a1 + 104), *(_QWORD *)(a1 + 72));
    }
    else
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 48002, 0, v9, v10, v11, v12, v15);
      return 2345672707;
    }
  }
  return v8;
}

uint64_t hlp_AppendItemRaw32(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned int *a4, unsigned int a5, int a6)
{
  uint64_t v6;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v6 = 2345672714;
  if (!a2)
    return 2345672711;
  v10 = *a2;
  if (v10)
  {
    v11 = *a4 + 1;
    v12 = *a3;
    if (v11 <= *a3)
    {
LABEL_9:
      v6 = 0;
      *a4 = v11;
      return v6;
    }
    v13 = v12 + a6;
    v14 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), v10, (v12 + a6) * a5);
    if (!v14)
      return v6;
LABEL_8:
    *a2 = v14;
    *a3 = v13;
    v11 = *a4 + 1;
    goto LABEL_9;
  }
  *a3 = 0;
  *a4 = 0;
  v13 = *a3 + a6;
  v14 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), a5, v13);
  if (v14)
    goto LABEL_8;
  return v6;
}

uint64_t fe_lid_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7;
  uint64_t Str;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t appended;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t InputOutputMarkers;
  int v29;
  _DWORD *v30;
  const char *v31;
  char *v32;
  const char *v33;
  const char *v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned __int16 v39;
  unsigned __int16 v40;
  uint64_t v41;
  const char *v42;
  const char **v43;
  _BOOL4 v44;
  char *v45;
  unsigned __int16 v47;
  int v48;
  _DWORD *v49;
  int *v50;
  int v51;
  _BOOL4 v52;
  unsigned int v53;
  int v54;
  const char *v55;
  int v56;
  const char *v57;
  _DWORD *v58;
  const char **v59;
  const char *v60;
  const char *v61;
  char v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  unsigned __int16 v66;
  int v67;
  _DWORD *v69;
  const char **v70;
  const char *v71;
  const char *v72;
  uint64_t v73;
  char *v74;
  int v75;
  char *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  __int16 v84;
  int v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  _DWORD *v89;
  _OWORD *v90;
  __int128 v91;
  BOOL v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned __int16 v96;
  int v97;
  int v99;
  __int16 v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  _DWORD *v104;
  uint64_t v105;
  __int128 v106;
  char *v107;
  char *v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  int v112;
  int *v113;
  int v114;
  const char *v115;
  _BOOL4 v117;
  _BOOL4 v118;
  uint64_t v119;
  unsigned int *v120;
  uint64_t v121;
  int v122;
  _QWORD *v123;
  _BYTE *v124;
  size_t v125;
  int v126;
  char *v127;
  char *v128;
  char *v129;
  unsigned int CurrentUtf8Offset;
  unsigned int v131;
  unsigned int NextUtf8Offset;
  uint64_t v133;
  uint64_t v134;
  unsigned int *v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  int v147;
  __int16 v148;
  unsigned int v149;
  unsigned __int16 v150;
  unsigned __int16 v151;
  char *v152;
  __int128 v153;
  int v154;
  BOOL v155;
  int v156;
  int v157;
  unsigned int v159;
  int v160;
  unsigned int v161;
  uint64_t v162;
  int v163;
  int v164;
  int v165;
  int v166;
  _DWORD *v167;
  unsigned int v168;
  uint64_t v169;
  char *__s1;
  char *__s1a;
  int v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  _DWORD *v176;
  const void *v177;
  uint64_t v178;
  int v179;
  char v180;
  __int16 v181;
  char *__s;
  int v183;
  uint64_t v184;
  _DWORD *v185;
  unsigned int v186;
  int v187;
  uint64_t v188;
  const char *v189;
  unsigned int v190;
  _DWORD *v191;
  uint64_t v192;
  _BYTE *v193;
  char __src[11];
  uint64_t v195;

  v195 = *MEMORY[0x1E0C80C00];
  v179 = 0;
  v177 = 0;
  v178 = 0;
  v175 = 0;
  v176 = 0;
  v174 = 0;
  v7 = safeh_HandleCheck(a1, a2, 62400, 135000);
  if ((v7 & 0x80000000) != 0)
    return 2345672712;
  Str = v7;
  *a5 = 1;
  v9 = *(_QWORD *)(a1 + 928);
  if (v9)
  {
    v10 = (*(uint64_t (**)(uint64_t, _QWORD, int *, uint64_t *))(*(_QWORD *)(a1 + 72) + 144))(v9, *(_QWORD *)(a1 + 936), &v179, &v178);
    if ((v10 & 0x80000000) != 0)
      return v10;
    Str = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)(a1 + 72) + 144))(*(_QWORD *)(a1 + 944), *(_QWORD *)(a1 + 952), (char *)&v178 + 4, &v178);
    if ((Str & 0x80000000) == 0)
    {
      if (v179)
      {
        v192 = 0;
        v193 = 0;
        v191 = 0;
        v190 = 0;
        v188 = 0;
        v189 = 0;
        v187 = 0;
        v186 = 0;
        v184 = 0;
        v185 = 0;
        v183 = 0;
        *(_DWORD *)(a1 + 992) = 1;
        v11 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, _QWORD, int *))(*(_QWORD *)(a1 + 64) + 80))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "mertfrq", 0, &v183);
        if (v11 < 0 || (v12 = v183) == 0)
        {
          v11 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, _QWORD, int *))(*(_QWORD *)(a1 + 64) + 80))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "mertfrq_latn", 0, &v183);
          v12 = v183;
        }
        v13 = v11 < 0 || v12 == 0;
        v14 = v13;
        v15 = 1180;
        if (v13)
          v15 = 1184;
        *(_DWORD *)(a1 + 992) = v14;
        v16 = *(_DWORD *)(a1 + v15);
        appended = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE **, char *))(*(_QWORD *)(a1 + 72) + 88))(*(_QWORD *)(a1 + 928), *(_QWORD *)(a1 + 936), &v193, (char *)&v192 + 4);
        if ((appended & 0x80000000) != 0
          || (v18 = HIDWORD(v192),
              appended = (*(uint64_t (**)(_QWORD, _QWORD, _DWORD **, unsigned int *))(*(_QWORD *)(a1 + 72)
                                                                                              + 88))(*(_QWORD *)(a1 + 944), *(_QWORD *)(a1 + 952), &v191, &v190), (appended & 0x80000000) != 0)|| (v190 >>= 5, v188 = 0, appended = hlp_AppendItemRaw32(a1, &v188, &v186, (unsigned int *)&v187, 0x20u, v190 + 10), (appended & 0x80000000) != 0))
        {
          Str = appended;
          v19 = 0;
          goto LABEL_25;
        }
        v187 = 0;
        if (*v191 == 0x4000)
          LODWORD(v192) = v191[3];
        else
          (*(void (**)(_QWORD, _QWORD, uint64_t *))(*(_QWORD *)(a1 + 72) + 136))(*(_QWORD *)(a1 + 928), *(_QWORD *)(a1 + 936), &v192);
        v164 = v16;
        v160 = v18;
        __src[0] = 0;
        if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"lidon", &v189) & 0x80000000) != 0)
        {
          v36 = 0;
        }
        else
        {
          __strcpy_chk();
          v34 = v189;
          v35 = strcmp(v189, "unknown") == 0;
          if (strlen(v34) == 3)
            v35 = 2;
          if (!strncmp(v34, "vceunkn", 7uLL))
            v35 = 3;
          if (!strcmp(v34, "unknown:noautolid"))
            v36 = 4;
          else
            v36 = v35;
        }
        v37 = v190;
        if (v190)
        {
          v165 = v36;
          v38 = 0;
          v39 = 0;
          do
          {
            v40 = v39;
            v41 = (uint64_t)&v191[8 * v39];
            if (*(_DWORD *)v41 == 36)
            {
              v43 = (const char **)(v41 + 24);
              v42 = *(const char **)(v41 + 24);
              v44 = strcmp(v42, "unknownint") && strcmp(v42, "normal") != 0;
              if (*(_DWORD *)(a1 + 996))
              {
                hlp_SetParamcTAHasUserUnknown(a1, v41, v37 - v38);
                v45 = (char *)*v43;
                if (!strcmp(*v43, "ins_unknown"))
                  *(_QWORD *)v45 = 0x6E776F6E6B6E75;
              }
            }
            else
            {
              v44 = 0;
            }
            v39 = v40 + 1;
            v38 = (unsigned __int16)(v40 + 1);
            v37 = v190;
          }
          while (v190 > v38 && !v44);
          if (v190)
          {
            v168 = 0;
            v47 = 0;
            v162 = 0;
            v48 = v165;
            v163 = v165;
            while (1)
            {
              v172 = v48;
              v49 = v191;
              v50 = &v191[8 * v47];
              if (*(_DWORD *)(a1 + 1004) == 2)
              {
                v51 = v50[3];
                v52 = v51 != v192;
                if (v51 == (_DWORD)v192)
                  v53 = 0;
                else
                  v53 = HIDWORD(v192);
              }
              else
              {
                v52 = 0;
                v53 = 0;
              }
              v54 = *v50;
              if (v165 && v54 == 36)
              {
                v55 = *(const char **)&v191[8 * v47 + 6];
                if (!strcmp(v55, "unknown"))
                  v56 = 1;
                else
                  v56 = v172;
                if (strlen(v55) == 3)
                  v56 = 2;
                if (!strncmp(v55, "vceunkn", 7uLL))
                  v56 = 3;
                if (!strcmp(v55, "unknown:noautolid"))
                  v56 = 4;
                __strcpy_chk();
                v54 = *v50;
                v172 = v56;
                v163 = v56;
              }
              v167 = v49;
              __s1 = (char *)&v49[8 * v47];
              if (v54 == 36
                && (!*(_DWORD *)(a1 + 1188)
                 || (v57 = *(const char **)&v49[8 * v47 + 6], strcmp(v57, "normal")) && strcmp(v57, "normal:noautolid")
                 || (*(_DWORD *)(a1 + 1192) = *(_DWORD *)(a1 + 1144),
                     *(_DWORD *)(a1 + 1196) = **(_DWORD **)(a1 + 1912),
                     *v50 == 36))
                && ((v58 = &v49[8 * v47],
                     v61 = (const char *)*((_QWORD *)v58 + 3),
                     v59 = (const char **)(v58 + 6),
                     v60 = v61,
                     !(strcmp(v61, "unknownint") | v44))
                 || !strcmp(v60, "unknown")
                 || !strcmp(v60, "unknown:noautolid")
                 || !strncmp(v60, "vceunkn", 7uLL)
                 || !strcmp(v60, "unknownmem")))
              {
                *(_DWORD *)(a1 + 1920) = 0;
                *(_DWORD *)(a1 + 1920) = strcmp(*v59, "unknownmem") == 0;
                if (!strncmp(*v59, "vceunkn", 7uLL))
                  *(_DWORD *)(a1 + 1008) = 0;
                v65 = v49[8 * v47 + 3];
                v63 = v65 - v192;
                v64 = HIDWORD(v192) - (v65 - v192);
                v66 = v47;
                while (v190 > ++v66)
                {
                  v67 = v191[8 * v66];
                  if (v67 == 36 || v67 == 7)
                  {
                    v172 = 0;
                    v64 = v191[8 * v66 + 3] - v65;
                    goto LABEL_121;
                  }
                }
                v172 = 0;
LABEL_121:
                v62 = 1;
              }
              else
              {
                v62 = 0;
                v63 = 0;
                v64 = v53;
                if (!v52)
                  goto LABEL_139;
              }
              if (v64)
              {
                v69 = &v167[8 * v47];
                v72 = (const char *)*((_QWORD *)v69 + 3);
                v70 = (const char **)(v69 + 6);
                v71 = v72;
                if (!strncmp(v72, "vceunkn", 7uLL))
                {
                  v161 = v64;
                  __s = 0;
                  Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"lidlanguages", &__s);
                  if (__s && *__s)
                  {
                    v75 = strlen(__s);
                    v76 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), (v75 + 1));
                    if (!v76)
                      goto LABEL_307;
                    v74 = v76;
                    strcpy(v76, __s);
                  }
                  else
                  {
                    v74 = 0;
                  }
                  if ((Str & 0x80000000) == 0)
                  {
                    v77 = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"lidlanguages", 0);
                    if ((v77 & 0x80000000) != 0)
                    {
                      Str = v77;
                      if (v74)
                        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v74);
LABEL_307:
                      v19 = v162;
LABEL_25:
                      v20 = 0;
LABEL_26:
                      v21 = HIDWORD(v184);
                      if (HIDWORD(v184))
                      {
                        v22 = 0;
                        do
                        {
                          v23 = *(_QWORD *)(v188 + 32 * v185[v22] + 24);
                          if (v23)
                          {
                            heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v23);
                            v21 = HIDWORD(v184);
                          }
                          ++v22;
                        }
                        while (v22 < v21);
                      }
                      if (v19)
                      {
                        v24 = *(_QWORD *)(v19 + 24);
                        if (v24)
                          heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v24);
                      }
                      if (v188)
                        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v188);
                      if (v185)
                        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v185);
                      if (v20)
                      {
                        v25 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
                        v26 = v20;
                        goto LABEL_326;
                      }
                      return Str;
                    }
                  }
                  v73 = (uint64_t)(*v70 + 7);
                  v71 = *v70;
                  v64 = v161;
                }
                else
                {
                  v73 = 0;
                  v74 = 0;
                }
                v78 = strcmp(v71, "unknown:noautolid");
                v79 = lid_Identify(a1, &v193[v63], v64);
                if ((v79 & 0x80000000) != 0)
                {
                  Str = v79;
                  if (v74)
                    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v74);
                  goto LABEL_302;
                }
                v80 = v71 + 7;
                if (v78)
                  v80 = (const char *)v73;
                v81 = hlp_AppendLidResultAsMarkers(a1, &v188, &v186, (unsigned int *)&v187, (uint64_t *)&v185, (unsigned int *)&v184, (unsigned int *)&v184 + 1, v192 + v63, v80);
                if ((v81 & 0x80000000) != 0)
                {
                  Str = v81;
                  v19 = v162;
                  if (v74)
                    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v74);
                  goto LABEL_25;
                }
                if (v74)
                {
                  Str = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"lidlanguages", v74);
                  heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v74);
                  if ((Str & 0x80000000) != 0)
                    goto LABEL_302;
                }
              }
LABEL_139:
              if ((v62 & 1) != 0)
                goto LABEL_159;
              v82 = hlp_AppendItemRaw32(a1, &v188, &v186, (unsigned int *)&v187, 0x20u, 10);
              if ((v82 & 0x80000000) != 0)
                goto LABEL_299;
              v83 = v187 - 1;
              if (v187 > 1)
              {
                v84 = 0;
                v85 = v187 - 2;
                while (*(_DWORD *)(v188 + 32 * v85 + 12) > v167[8 * v47 + 3])
                {
                  ++v84;
                  v86 = v85-- <= 0;
                  if (v86)
                  {
                    v85 = -1;
                    goto LABEL_149;
                  }
                }
                LOWORD(v83) = v84;
LABEL_149:
                v87 = (v85 + 1);
                if ((_WORD)v83)
                {
                  memmove((void *)(v188 + 32 * v87 + 32), (const void *)(v188 + 32 * v87), 32 * (unsigned __int16)v83);
                  v88 = HIDWORD(v184);
                  if (HIDWORD(v184))
                  {
                    v89 = v185;
                    do
                    {
                      if (*v89 >= v87)
                        ++*v89;
                      ++v89;
                      --v88;
                    }
                    while (v88);
                  }
                  goto LABEL_158;
                }
                v83 = v85 + 1;
              }
              v87 = v83;
LABEL_158:
              v90 = (_OWORD *)(v188 + 32 * v87);
              v91 = *((_OWORD *)__s1 + 1);
              *v90 = *(_OWORD *)__s1;
              v90[1] = v91;
LABEL_159:
              v48 = v172;
              v92 = *(_DWORD *)__s1 == 0x4000 && (v172 & 0xFFFFFFFD) == 1;
              if (v92 && v190 - 1 > v168 && *((_DWORD *)__s1 + 8) != 36)
              {
                v93 = v167[8 * v47 + 3];
                v94 = v93 - v192;
                v95 = HIDWORD(v192) - (v93 - v192);
                v96 = v47;
                while (v190 > ++v96)
                {
                  v97 = v191[8 * v96];
                  if (v97 == 36 || v97 == 7)
                  {
                    v95 = v191[8 * v96 + 3] - v93;
                    break;
                  }
                }
                if (v95)
                {
                  v82 = lid_Identify(a1, &v193[v94], v95);
                  if ((v82 & 0x80000000) != 0
                    || (v82 = hlp_AppendLidResultAsMarkers(a1, &v188, &v186, (unsigned int *)&v187, (uint64_t *)&v185, (unsigned int *)&v184, (unsigned int *)&v184 + 1, v192 + v94, 0), (v82 & 0x80000000) != 0))
                  {
LABEL_299:
                    Str = v82;
LABEL_302:
                    v20 = 0;
                    v19 = v162;
                    goto LABEL_26;
                  }
                }
                goto LABEL_203;
              }
              if (*(_DWORD *)__s1 != 0x4000 || v172 != 2)
                goto LABEL_204;
              if (v190 - 1 > v168 && *((_DWORD *)__s1 + 8) != 36)
              {
                Str = hlp_AppendItemRaw32(a1, &v188, &v186, (unsigned int *)&v187, 0x20u, 10);
                if ((Str & 0x80000000) != 0)
                  goto LABEL_302;
                v99 = v187 - 1;
                if (v187 > 1)
                {
                  v100 = 0;
                  v101 = v187 - 2;
                  while (*(_DWORD *)(v188 + 32 * v101 + 12) > v167[8 * v47 + 3])
                  {
                    ++v100;
                    v86 = v101-- <= 0;
                    if (v86)
                    {
                      v101 = -1;
                      goto LABEL_192;
                    }
                  }
                  LOWORD(v99) = v100;
LABEL_192:
                  v102 = (v101 + 1);
                  if ((_WORD)v99)
                  {
                    memmove((void *)(v188 + 32 * v102 + 32), (const void *)(v188 + 32 * v102), 32 * (unsigned __int16)v99);
                    v103 = HIDWORD(v184);
                    if (HIDWORD(v184))
                    {
                      v104 = v185;
                      do
                      {
                        if (*v104 >= v102)
                          ++*v104;
                        ++v104;
                        --v103;
                      }
                      while (v103);
                    }
LABEL_201:
                    v105 = v188 + 32 * v102;
                    v106 = *(_OWORD *)(v105 - 16);
                    *(_OWORD *)v105 = *(_OWORD *)(v105 - 32);
                    *(_OWORD *)(v105 + 16) = v106;
                    *(_DWORD *)v105 = 36;
                    v107 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 8);
                    v162 = v105;
                    *(_QWORD *)(v105 + 24) = v107;
                    if (!v107)
                      goto LABEL_302;
                    strcpy(v107, __src);
LABEL_203:
                    v48 = 0;
                    goto LABEL_204;
                  }
                  v99 = v101 + 1;
                }
                v102 = v99;
                goto LABEL_201;
              }
              v48 = 2;
LABEL_204:
              v168 = ++v47;
              if (v190 <= v47)
                goto LABEL_212;
            }
          }
          v162 = 0;
          v36 = v165;
        }
        else
        {
          v162 = 0;
        }
        v163 = v36;
LABEL_212:
        v108 = "unknown";
        v19 = v162;
        switch(v163)
        {
          case 1:
            break;
          case 2:
            v108 = __src;
            break;
          case 3:
            v108 = "vceunkn";
            break;
          case 4:
            v108 = "unknown:noautolid";
            break;
          default:
            v108 = (char *)&unk_1DEC66016;
            v19 = v162;
            break;
        }
        paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"lidon", v108);
        v109 = v187;
        if (v187)
        {
          v110 = 0;
          v20 = 0;
          v111 = 0;
          v173 = 0;
          v112 = 0;
          __s1a = "normal";
          while (1)
          {
            v113 = (int *)(v188 + 32 * (unsigned __int16)v112);
            v114 = *v113;
            if (*v113 == 21)
              goto LABEL_279;
            if (v114 == 34)
            {
              v111 = 1;
              goto LABEL_280;
            }
            if (v114 == 36)
            {
              v115 = *(const char **)(v188 + 32 * (unsigned __int16)v112 + 24);
              if (!strcmp(v115, "unknown")
                || !strcmp(v115, "unknown:noautolid")
                || !strcmp(v115, "unknownint")
                || !strncmp(v115, "vceunkn", 7uLL)
                || !strcmp(v115, "unknownmem"))
              {
                v187 = --v109;
                if (v109 > v110)
                {
                  memmove(v113, v113 + 8, 32 * (v109 - v110));
                  v119 = HIDWORD(v184);
                  if (HIDWORD(v184))
                  {
                    v120 = v185;
                    do
                    {
                      if (*v120 > v110)
                        --*v120;
                      ++v120;
                      --v119;
                    }
                    while (v119);
                  }
                }
              }
              else
              {
                v173 = 0;
                ++v112;
                __s1a = (char *)v115;
              }
              goto LABEL_281;
            }
            if (v114 == 1 && v164 != 0)
              break;
LABEL_280:
            ++v112;
            v109 = v187;
LABEL_281:
            v110 = (unsigned __int16)v112;
            if (v109 <= (unsigned __int16)v112)
              goto LABEL_284;
          }
          if (v111)
          {
            v117 = 0;
            v118 = 1;
          }
          else
          {
            v169 = v20;
            v121 = v188 + 32 * (unsigned __int16)v112;
            v122 = v192;
            v123 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
            v124 = v193;
            v126 = *(_DWORD *)(v121 + 12);
            v125 = *(unsigned int *)(v121 + 16);
            v127 = (char *)heap_Alloc((uint64_t)v123, (v125 + 1));
            if (v127)
            {
              v128 = v127;
              v166 = v126 - v122;
              v129 = strncpy(v127, &v124[v126 - v122], v125);
              v129[v125] = 0;
              CurrentUtf8Offset = utf8_GetCurrentUtf8Offset((unint64_t)v129, 0);
              v131 = CurrentUtf8Offset + v125;
              v19 = v162;
              if (CurrentUtf8Offset < CurrentUtf8Offset + v125)
              {
                NextUtf8Offset = CurrentUtf8Offset;
                while (!utf8_BelongsToSet(6u, v128, NextUtf8Offset, v125))
                {
                  NextUtf8Offset = utf8_GetNextUtf8Offset(v128, NextUtf8Offset);
                  if (NextUtf8Offset >= v131)
                    goto LABEL_247;
                }
                heap_Free(v123, (uint64_t)v128);
                v140 = (char *)heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), v169, (*(_DWORD *)(v188 + 32 * (unsigned __int16)v112 + 16) + 7));
                if (!v140)
                {
                  log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 48000, 0, v141, v142, v143, v144, v159);
                  return 2345672714;
                }
                v20 = (uint64_t)v140;
                strcpy(v140, "mlnum_");
                v145 = *(_DWORD *)(v188 + 32 * (unsigned __int16)v112 + 16);
                v111 = 0;
                if (v145)
                {
                  v145 = 0;
                  v146 = 0;
                  while (1)
                  {
                    v147 = v193[v145 + v166];
                    if (v147 == 255)
                      break;
                    v140[v145 + 6] = v147;
                    v145 = (unsigned __int16)++v146;
                    if (*(_DWORD *)(v188 + 32 * (unsigned __int16)v112 + 16) <= (unsigned __int16)v146)
                      goto LABEL_268;
                  }
                  v117 = 1;
                }
                else
                {
LABEL_268:
                  __s = 0;
                  v180 = 0;
                  if (*(_DWORD *)(a1 + 992))
                    v148 = 1;
                  else
                    v148 = -1;
                  v181 = v148;
                  v140[v145 + 6] = 0;
                  v133 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, char **, __int16 *, char *))(*(_QWORD *)(a1 + 64) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "lidcfg", v140, &__s, &v181, &v180);
                  v117 = v181 == 0;
                  if ((v133 & 0x80000000) != 0)
                    goto LABEL_298;
                }
                v118 = !v117;
                if (v117 && !v173)
                {
                  if (strcmp(__s1a, "normal"))
                  {
                    v173 = 1;
                    v118 = 0;
LABEL_253:
                    v133 = hlp_AppendItemRaw32(a1, &v188, &v186, (unsigned int *)&v187, 0x20u, 10);
                    if ((v133 & 0x80000000) != 0)
                      goto LABEL_298;
                    memmove((void *)(v188 + 32 * (unsigned __int16)v112 + 32), (const void *)(v188 + 32 * (unsigned __int16)v112), 32 * (v187 + ~v110));
                    v134 = HIDWORD(v184);
                    if (HIDWORD(v184))
                    {
                      v135 = v185;
                      do
                      {
                        if (*v135 >= v110)
                          ++*v135;
                        ++v135;
                        --v134;
                      }
                      while (v134);
                    }
                    v136 = v188 + 32 * (unsigned __int16)v112;
                    *(_DWORD *)v136 = 36;
                    v137 = "normal";
                    if (v118)
                      v137 = __s1a;
                    *(_QWORD *)(v136 + 24) = v137;
                    v138 = v188;
                    v139 = v188 + 32 * (unsigned __int16)v112;
                    *(_DWORD *)(v139 + 4) = 0;
                    *(_DWORD *)(v139 + 8) = 0;
                    *(_QWORD *)(v139 + 12) = *(unsigned int *)(v138 + 32 * (v110 + 1) + 12);
                    ++v112;
                    goto LABEL_280;
                  }
                  v173 = 1;
LABEL_279:
                  v111 = 0;
                  goto LABEL_280;
                }
                goto LABEL_250;
              }
LABEL_247:
              heap_Free(v123, (uint64_t)v128);
              v117 = 0;
              v118 = 1;
            }
            else
            {
              v117 = 0;
              v118 = 1;
              v19 = v162;
            }
            v20 = v169;
            v111 = 0;
          }
LABEL_250:
          if (!v173 || v117)
          {
            v173 = v117;
          }
          else
          {
            v173 = 0;
            if (strcmp(__s1a, "normal"))
              goto LABEL_253;
          }
          goto LABEL_280;
        }
        v20 = 0;
LABEL_284:
        v133 = lidword_Identify(a1, v193, HIDWORD(v192), &v188, &v186, (unsigned int *)&v187, (uint64_t *)&v185, (unsigned int *)&v184, (unsigned int *)&v184 + 1);
        if ((v133 & 0x80000000) == 0)
        {
          v149 = v187;
          if (v187)
          {
            v150 = 0;
            do
            {
              v151 = v150;
              if (*(_DWORD *)(v188 + 32 * v150) == 36)
              {
                v152 = strstr(*(char **)(v188 + 32 * v150 + 24), ":noautolid");
                if (v152)
                {
                  *v152 = 0;
                  v149 = v187;
                }
              }
              v150 = v151 + 1;
            }
            while (v149 > (unsigned __int16)(v151 + 1));
          }
          if (!v160)
            goto LABEL_294;
          v133 = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)(a1 + 72) + 104))(*(_QWORD *)(a1 + 960), *(_QWORD *)(a1 + 968), v193);
          if ((v133 & 0x80000000) == 0)
          {
            v149 = v187;
LABEL_294:
            v133 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 72) + 104))(*(_QWORD *)(a1 + 976), *(_QWORD *)(a1 + 984), v188, 32 * v149);
            if ((v133 & 0x80000000) == 0)
            {
              if (!HIDWORD(v192)
                || (v133 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 72) + 96))(*(_QWORD *)(a1 + 928), *(_QWORD *)(a1 + 936)), (v133 & 0x80000000) == 0))
              {
                v133 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 72) + 96))(*(_QWORD *)(a1 + 944), *(_QWORD *)(a1 + 952), 32 * v190);
              }
            }
          }
        }
LABEL_298:
        Str = v133;
        goto LABEL_26;
      }
      v27 = v178;
      if (!v178)
      {
        *a5 = 0;
        goto LABEL_324;
      }
      if (!HIDWORD(v178))
        goto LABEL_322;
      InputOutputMarkers = hlp_GetInputOutputMarkers(a1, &v177, (void **)&v176, (int *)&v175 + 1, &v175, &v174);
      if ((InputOutputMarkers & 0x80000000) != 0)
      {
        Str = InputOutputMarkers;
      }
      else
      {
        if (!(_DWORD)v178 && *(_DWORD *)(a1 + 1004) == 1)
        {
          v29 = (unsigned __int16)v175;
          if ((_WORD)v175)
          {
            v30 = v176;
            v31 = "unknown";
            while (1)
            {
              if (v30[8 * (v29 - 1)] == 36)
              {
                v32 = (char *)&v30[8 * (v29 - 1)];
                v33 = (const char *)*((_QWORD *)v32 + 3);
                if (!strcmp(v33, "unknown"))
                  goto LABEL_311;
                if (!strcmp(v33, "unknown:noautolid"))
                {
                  v31 = "unknown:noautolid";
                  goto LABEL_311;
                }
                if (!strncmp(v33, "vceunkn", 7uLL))
                {
                  v31 = "vceunkn";
                  goto LABEL_311;
                }
                if (!strcmp(v33, "normal"))
                  break;
              }
              if (!(_WORD)--v29)
                goto LABEL_312;
            }
            v31 = "normal";
LABEL_311:
            v153 = *(_OWORD *)v32;
            *(_QWORD *)(a1 + 1832) = *((_QWORD *)v32 + 2);
            *(_OWORD *)(a1 + 1816) = v153;
            *(_QWORD *)(a1 + 1840) = v31;
          }
        }
LABEL_312:
        v154 = HIDWORD(v175);
        if (*(_DWORD *)(a1 + 996))
          v155 = HIDWORD(v175) == 0;
        else
          v155 = 1;
        if (!v155)
        {
          v156 = 0;
          v157 = 0;
          do
          {
            hlp_SetParamcTAHasUserUnknown(a1, (uint64_t)v177 + 32 * (unsigned __int16)v157++, v154 - v156);
            v156 = (unsigned __int16)v157;
            v154 = HIDWORD(v175);
          }
          while (HIDWORD(v175) > (unsigned __int16)v157);
        }
        Str = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 72) + 120))(*(_QWORD *)(a1 + 976), *(_QWORD *)(a1 + 984), (32 * v175));
        v176 = 0;
        if ((Str & 0x80000000) != 0)
          goto LABEL_324;
        if (!HIDWORD(v175)
          || (Str = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 72) + 96))(*(_QWORD *)(a1 + 944), *(_QWORD *)(a1 + 952), (32 * HIDWORD(v175))), (Str & 0x80000000) == 0))
        {
          v27 = v178;
LABEL_322:
          if (v27)
            Str = synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 104), *(_QWORD *)(a1 + 72));
          goto LABEL_324;
        }
      }
      if (v176)
        (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 72) + 120))(*(_QWORD *)(a1 + 976), *(_QWORD *)(a1 + 984), 0);
LABEL_324:
      v26 = v174;
      if (v174)
      {
        v25 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
LABEL_326:
        heap_Free(v25, v26);
      }
    }
  }
  return Str;
}

uint64_t hlp_GetInputOutputMarkers(uint64_t a1, const void **a2, void **a3, int *a4, _DWORD *a5, _QWORD *a6)
{
  uint64_t v12;
  char *v13;
  int v14;
  size_t v15;
  int v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  const char *v20;
  int v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  _DWORD *v29;
  int v30;
  void *v31;
  char *v32;
  _OWORD *v33;
  __int128 v34;
  _DWORD *v35;
  _OWORD *v36;
  __int128 v37;
  char *v38;
  char *v39;
  int v40;
  char *__s1;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  __s1 = 0;
  *a5 = 0;
  *a4 = 0;
  v12 = (*(uint64_t (**)(_QWORD, _QWORD, const void **))(*(_QWORD *)(a1 + 72) + 88))(*(_QWORD *)(a1 + 944), *(_QWORD *)(a1 + 952), a2);
  if ((v12 & 0x80000000) != 0)
    return v12;
  *a4 = *a4 >> 5;
  v43 = 0;
  if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"lidon", &__s1) & 0x80000000) != 0)
    goto LABEL_28;
  __strcpy_chk();
  v13 = __s1;
  if (!strcmp(__s1, "unknown:noautolid"))
  {
    v17 = 4;
    goto LABEL_13;
  }
  v14 = strncmp(v13, "vceunkn", 7uLL);
  v15 = strlen(v13);
  v16 = strcmp(v13, "unknown") == 0;
  if (v15 == 3)
    v16 = 2;
  if (v14)
    v17 = v16;
  else
    v17 = 3;
  if (v17)
  {
LABEL_13:
    if (*a4 < 2)
      goto LABEL_29;
    v19 = *a2;
    if (*(_DWORD *)*a2 != 0x4000 || v19[8] != 36)
      goto LABEL_29;
    v20 = (const char *)*((_QWORD *)v19 + 7);
    if (strcmp(v20, "unknown"))
    {
      if (!strcmp(v20, "vceunkn"))
        goto LABEL_26;
      v21 = strcmp(v20, "unknown:noautolid");
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
      if (!v21)
      {
LABEL_24:
        v24 = "unknown:noautolid";
LABEL_27:
        paramc_ParamSetStr(v22, (uint64_t)"lidon", v24);
        goto LABEL_28;
      }
      paramc_ParamSetStr(v22, (uint64_t)"lidon", v13);
      if (*((_DWORD *)*a2 + 16) != 36)
      {
LABEL_28:
        v17 = 0;
        goto LABEL_29;
      }
      v23 = (const char *)*((_QWORD *)*a2 + 11);
      if (strcmp(v23, "unknown"))
      {
        if (strncmp(v23, "vceunkn", 7uLL))
        {
          if (!strcmp(v23, "unknown:noautolid"))
          {
            v22 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
            goto LABEL_24;
          }
          goto LABEL_28;
        }
LABEL_26:
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
        v24 = "vceunkn";
        goto LABEL_27;
      }
    }
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    v24 = "unknown";
    goto LABEL_27;
  }
LABEL_29:
  v18 = (*(uint64_t (**)(_QWORD, _QWORD, void **, _QWORD))(*(_QWORD *)(a1 + 72) + 112))(*(_QWORD *)(a1 + 976), *(_QWORD *)(a1 + 984), a3, (32 * *a4 + 160));
  if ((v18 & 0x80000000) == 0)
  {
    v25 = *a4;
    if ((_DWORD)v25)
    {
      if (*(_DWORD *)(a1 + 1816) == 36 && (v26 = *a2, *(_DWORD *)*a2 == 0x4000))
      {
        v27 = *a3;
        v28 = v26[1];
        *v27 = *v26;
        v27[1] = v28;
        v29 = *a3;
        v29[8] = *(_DWORD *)(a1 + 1816);
        *((_QWORD *)v29 + 7) = *(_QWORD *)(a1 + 1840);
        *((_DWORD *)*a3 + 11) = *((_DWORD *)*a2 + 3);
        *(_OWORD *)(a1 + 1816) = 0u;
        *(_OWORD *)(a1 + 1832) = 0u;
        v30 = *a4;
        if (*a4 >= 2)
        {
          v31 = (char *)*a3 + 64;
          v32 = (char *)*a2;
LABEL_42:
          memcpy(v31, v32 + 32, 32 * (v30 - 1));
          v30 = *a4;
        }
      }
      else
      {
        if (v17 == 2)
        {
          v36 = *a3;
          v37 = *((_OWORD *)*a2 + 1);
          *v36 = *(_OWORD *)*a2;
          v36[1] = v37;
          *((_DWORD *)*a3 + 8) = 36;
          *((_QWORD *)*a3 + 7) = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 8);
          v38 = (char *)*((_QWORD *)*a3 + 7);
          if (!v38)
            return 2345672714;
          strcpy(v38, __s1);
          *a6 = *((_QWORD *)*a3 + 7);
        }
        else
        {
          if (v17 != 1)
          {
            memcpy(*a3, *a2, 32 * v25);
            v40 = *a4;
            goto LABEL_45;
          }
          v33 = *a3;
          v34 = *((_OWORD *)*a2 + 1);
          *v33 = *(_OWORD *)*a2;
          v33[1] = v34;
          v35 = *a3;
          v35[8] = 36;
          *((_QWORD *)v35 + 7) = "unknown";
        }
        v32 = (char *)*a2;
        v39 = (char *)*a3;
        *((_DWORD *)*a3 + 11) = *((_DWORD *)*a2 + 3);
        v30 = *a4;
        if (*a4 >= 2)
        {
          v31 = v39 + 64;
          goto LABEL_42;
        }
      }
      v40 = v30 + 1;
LABEL_45:
      *a5 = v40;
    }
  }
  return v18;
}

uint64_t hlp_SetParamcTAHasUserUnknown(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  unsigned __int16 v7;
  int v8;
  unsigned __int16 v9;
  const char *v10;
  char *v11;

  if (*(_DWORD *)(result + 996))
  {
    if (*(_DWORD *)a2 == 36 && a3 != 0)
    {
      v6 = result;
      v7 = 0;
      v8 = *(_DWORD *)(a2 + 12);
      while (1)
      {
        v9 = v7;
        if (v8 == *(_DWORD *)(a2 + 32 * v7 + 12) && *(_DWORD *)(a2 + 32 * v7) == 36)
        {
          v10 = *(const char **)(a2 + 32 * v7 + 24);
          if (!strcmp(v10, "unknown"))
            break;
          result = strcmp(v10, "unknown:noautolid");
          if (!(_DWORD)result)
            break;
        }
        v7 = v9 + 1;
        if (a3 <= (unsigned __int16)(v9 + 1))
          return result;
      }
      v11 = *(char **)(a2 + 24);
      if (!strcmp(v11, "ins_unknown"))
        strcpy(v11, v10);
      return paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 40), (uint64_t)"hasuserunknowninserted", "yes");
    }
  }
  return result;
}

uint64_t fe_lid_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 62400, 135000) & 0x80000000) != 0)
    return 2345672712;
  if (*(_DWORD *)(a1 + 996) == 1)
    *(_DWORD *)(a1 + 996) = 0;
  return synstrmaux_CloseStreams((_WORD *)(a1 + 104), *(_QWORD *)(a1 + 72));
}

char *AdjustLanguageGroupMappingLID2(char *result, char *__s1)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  char __s2[4];

  if (*(_WORD *)result)
  {
    v3 = result;
    v4 = 0;
    v5 = 0;
    do
    {
      result = strstr(__s1, (const char *)(*((_QWORD *)v3 + 2) + v4));
      if (!result)
      {
        __strcpy_chk();
        __s2[2] = 0;
        result = strstr(__s1, __s2);
        if (result)
        {
          if (result == __s1 || *(result - 1) == 44)
            result = strncpy((char *)(*((_QWORD *)v3 + 2) + v4), result, 3uLL);
        }
      }
      ++v5;
      v4 += 8;
    }
    while (v5 < *(unsigned __int16 *)v3);
  }
  return result;
}

uint64_t fe_lid_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2345672705;
  result = 0;
  *a2 = &IFeLid;
  return result;
}

uint64_t hlp_FillDicLMLanguages(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, char *a7, __int16 a8)
{
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unsigned int v33;
  unsigned int v34;
  char __s2[4];
  _BYTE __c[11];

  *(_QWORD *)&__c[3] = 0;
  __c[0] = 0;
  *(_WORD *)&__c[1] = a8;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(a5 + 96))(a3, a4, "lidcfg", "languages", &__c[3], &__c[1], __c);
  if ((v12 & 0x80000000) == 0)
  {
    if (!*(_WORD *)&__c[1])
    {
      *(_WORD *)(a2 + 2) = 0;
      *(_QWORD *)(a2 + 8) = 0;
      return v12;
    }
    v13 = **(char ***)&__c[3];
    v14 = strchr(**(char ***)&__c[3], __c[0]);
    if (v14)
    {
      *v14 = 0;
      v13 = **(char ***)&__c[3];
    }
    v15 = 1;
    *(_WORD *)(a2 + 2) = 1;
    v16 = strchr(v13, 44);
    if (v16)
    {
      LOWORD(v15) = 1;
      do
      {
        LOWORD(v15) = v15 + 1;
        *(_WORD *)(a2 + 2) = v15;
        v16 = strchr(v16 + 1, 44);
      }
      while (v16);
      v15 = (unsigned __int16)v15;
    }
    v17 = heap_Calloc(*(_QWORD **)(a1 + 8), v15, 24);
    *(_QWORD *)(a2 + 8) = v17;
    if (!v17)
    {
      log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_LID", 48000, 0, v18, v19, v20, v21, v33);
      return 2345672714;
    }
    v22 = **(const char ***)&__c[3];
    v23 = strchr(**(char ***)&__c[3], 44);
    v24 = v23;
    if (v23)
      *v23 = 0;
    if (*(_WORD *)(a2 + 2))
    {
      v34 = v12;
      v25 = 0;
      while (1)
      {
        __strcpy_chk();
        __strcpy_chk();
        *(_DWORD *)(*(_QWORD *)(a2 + 8) + 24 * v25 + 16) = 0;
        __strcpy_chk();
        __s2[2] = 0;
        if (!a7)
          goto LABEL_18;
        v26 = strstr(a7, __s2);
        v27 = v26;
        if (v26)
        {
          if (v26 != a7)
            break;
        }
LABEL_19:
        if (!a6 || v27 || (v28 = strstr(a6, __s2), (v27 = v28) == 0) || v28 == a6)
        {
          if (!v27)
          {
LABEL_26:
            v29 = 0;
            while (strcmp(&FE_LID_LANG_2_LANG_GROUP[v29 + 4], v22))
            {
              v29 += 8;
              if (v29 == 32)
                goto LABEL_33;
            }
            v27 = strstr(a6, &FE_LID_LANG_2_LANG_GROUP[v29]);
            if (v27)
              goto LABEL_31;
LABEL_33:
            *(_DWORD *)(*(_QWORD *)(a2 + 8) + 24 * v25 + 20) = 0;
            if (!v24)
              goto LABEL_36;
LABEL_34:
            v22 = v24 + 1;
            v31 = strchr(v24 + 1, 44);
            v24 = v31;
            if (v31)
              *v31 = 0;
            goto LABEL_36;
          }
        }
        else if (*(v28 - 1) != 44)
        {
          goto LABEL_26;
        }
LABEL_31:
        v30 = *(_QWORD *)(a2 + 8) + 24 * v25;
        *(_DWORD *)(v30 + 20) = 1;
        strncpy((char *)(v30 + 8), v27, 3uLL);
        if (v24)
          goto LABEL_34;
LABEL_36:
        if (++v25 >= (unint64_t)*(unsigned __int16 *)(a2 + 2))
          return v34;
      }
      if (*(v26 - 1) == 44)
        goto LABEL_31;
LABEL_18:
      v27 = 0;
      goto LABEL_19;
    }
  }
  return v12;
}

const char *hlp_FindModelLng(uint64_t a1, char *__s1, int a3)
{
  uint64_t v4;
  const char *i;
  uint64_t v6;

  if (a3)
  {
    v4 = *(unsigned __int16 *)(a1 + 1066);
    if (*(_WORD *)(a1 + 1066))
    {
      for (i = *(const char **)(a1 + 1072); strcmp(__s1, i); i += 24)
      {
        if (!--v4)
          return 0;
      }
      return i;
    }
    return 0;
  }
  v6 = *(unsigned __int16 *)(a1 + 1018);
  if (!*(_WORD *)(a1 + 1018))
    return 0;
  for (i = *(const char **)(a1 + 1024); strcmp(__s1, i); i += 24)
  {
    if (!--v6)
      return 0;
  }
  return i;
}

uint64_t hlp_SetActiveLngs(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v36;
  char __s1[8];

  *(_QWORD *)__s1 = 0;
  v4 = *(_QWORD *)(a1 + 1120);
  if (v4)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v4);
    *(_QWORD *)(a1 + 1120) = 0;
    *(_WORD *)(a1 + 1112) = 0;
  }
  if (!__s || !*__s)
    return 0;
  v5 = strlen(__s);
  if (v5)
  {
    v6 = 0;
    LODWORD(v7) = 1;
    do
    {
      if (__s[v6] == 44)
        v7 = (v7 + 1);
      else
        v7 = v7;
      ++v6;
    }
    while (v5 > v6);
  }
  else
  {
    v7 = 1;
  }
  v8 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v7, 16);
  *(_QWORD *)(a1 + 1120) = v8;
  if (v8)
  {
    v13 = 0;
    LODWORD(v14) = 0;
    v15 = 0;
    v16 = 0;
    while (1)
    {
      v17 = __s[v13];
      if (v17 != 44 && v17 != 0)
      {
        if (v14 > 2)
          v16 = 1;
        else
          __s1[v14 + 4] = ssft_tolower(v17);
        LODWORD(v14) = (_DWORD)v14 + 1;
        goto LABEL_56;
      }
      if ((_DWORD)v14 == 3)
        break;
      LODWORD(v14) = 0;
      v16 = 1;
LABEL_56:
      v13 = ++v15;
      if (strlen(__s) < v15)
      {
        if (v16)
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 48005, "%s%s", v31, v32, v33, v34, "languageCodeList");
        return 0;
      }
    }
    lid_make_language_group(__s1, &__s1[4]);
    v22 = *(unsigned __int16 *)(a1 + 1066);
    if (*(_WORD *)(a1 + 1066))
    {
      v23 = 0;
      v24 = *(const char **)(a1 + 1072);
      while (1)
      {
        v14 = &v24[v23];
        if (!strcmp(&__s1[4], &v24[v23]))
          break;
        v23 += 24;
        if (24 * v22 == v23)
        {
          v25 = v24;
          goto LABEL_32;
        }
      }
      v25 = v24;
      if (v24)
        goto LABEL_36;
LABEL_32:
      while (strcmp(__s1, v25))
      {
        v25 += 24;
        if (!--v22)
          goto LABEL_39;
      }
      v14 = v25;
      if (v24)
      {
LABEL_36:
        if (*((_DWORD *)v14 + 4) || *((_DWORD *)v14 + 5))
        {
LABEL_52:
          __strcpy_chk();
          strcpy((char *)(*(_QWORD *)(a1 + 1120) + 16 * *(unsigned __int16 *)(a1 + 1112) + 8), __s1);
          LODWORD(v14) = 0;
          ++*(_WORD *)(a1 + 1112);
          goto LABEL_56;
        }
LABEL_40:
        v26 = *(unsigned __int16 *)(a1 + 1018);
        if (!*(_WORD *)(a1 + 1018))
          goto LABEL_53;
        v27 = 0;
        v28 = *(const char **)(a1 + 1024);
        while (1)
        {
          v29 = &v28[v27];
          if (!strcmp(&__s1[4], &v28[v27]))
            break;
          v27 += 24;
          if (24 * v26 == v27)
          {
            v30 = v28;
            goto LABEL_46;
          }
        }
        v30 = v28;
        if (!v28)
        {
LABEL_46:
          while (strcmp(__s1, v30))
          {
            v30 += 24;
            if (!--v26)
              goto LABEL_53;
          }
          v29 = v30;
          if (!v28)
          {
LABEL_53:
            if (!v14)
            {
              log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"Language \"%s\" cannot be added to the language identifier active languages: not supported by the Vocalizer models", v19, v20, v21, (uint64_t)&__s1[4]);
              goto LABEL_56;
            }
LABEL_54:
            LODWORD(v14) = 0;
            goto LABEL_56;
          }
        }
        if (!*((_DWORD *)v29 + 4) && !*((_DWORD *)v29 + 5))
          goto LABEL_54;
        goto LABEL_52;
      }
    }
LABEL_39:
    v14 = 0;
    goto LABEL_40;
  }
  log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 48000, 0, v9, v10, v11, v12, v36);
  return 2345672714;
}

uint64_t hlp_AppendLidResultAsMarkers(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned int *a4, uint64_t *a5, unsigned int *a6, unsigned int *a7, int a8, const char *a9)
{
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned __int16 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  char *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  int v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  int v65;
  int v66;
  unsigned int *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  _DWORD *v79;
  _DWORD *v80;
  uint64_t v82;
  unsigned __int16 *v83;
  int *v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  const char *ModelLng;
  uint64_t v93;
  char __s[32];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  int v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  v82 = *(unsigned __int16 *)(a1 + 1890);
  if (!*(_WORD *)(a1 + 1890))
    return 0;
  v10 = 0;
  v79 = (_DWORD *)(a1 + 1128);
  v80 = (_DWORD *)(a1 + 1140);
  while (2)
  {
    v91 = *(_DWORD *)(a1 + 1008);
    v89 = v10;
    v88 = *(_QWORD *)(a1 + 1896);
    v11 = v88 + 56 * v10;
    v12 = (unsigned __int16 *)(v11 + 10);
    v13 = *(unsigned __int16 *)(v11 + 10);
    v84 = (int *)v11;
    v90 = *(_QWORD *)(v11 + 16);
    v87 = (uint64_t *)(v11 + 16);
    v116 = 0;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v110 = 0u;
    v111 = 0u;
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    v101 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0;
    result = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"lidoriginalvoice", &v93);
    if ((result & 0x80000000) != 0)
    {
      result = 0;
      v93 = 0;
      if (!(_DWORD)v13)
        goto LABEL_58;
    }
    else if (!(_DWORD)v13)
    {
      goto LABEL_58;
    }
    v83 = v12;
    v85 = result;
    v15 = 0;
    while (1)
    {
      v16 = *(_QWORD *)(v90 + 16 * v15);
      if (v15 && *(_DWORD *)(a1 + 1200))
      {
        if (LH_stricmp(*(char **)(v90 + 16 * v15), *(char **)(a1 + 1912)))
          goto LABEL_54;
      }
      else
      {
        if (!*(_WORD *)(a1 + 1066))
          goto LABEL_22;
        v17 = 0;
        v18 = *(_QWORD *)(a1 + 1072);
        v19 = 24 * *(unsigned __int16 *)(a1 + 1066);
        while (strcmp((const char *)v16, (const char *)(v18 + v17)))
        {
          v17 += 24;
          if (v19 == v17)
            goto LABEL_22;
        }
        if (!v18 || ((v20 = v18 + v17, v91) || !*(_DWORD *)(v20 + 16)) && (!v91 || !*(_DWORD *)(v20 + 20)))
        {
LABEL_22:
          if (!*(_WORD *)(a1 + 1018))
            goto LABEL_54;
          v21 = 0;
          v22 = *(_QWORD *)(a1 + 1024);
          v23 = 24 * *(unsigned __int16 *)(a1 + 1018);
          while (strcmp((const char *)v16, (const char *)(v22 + v21)))
          {
            v21 += 24;
            if (v23 == v21)
              goto LABEL_54;
          }
          if (!v22)
            goto LABEL_54;
          v24 = v22 + v21;
          if ((v91 || !*(_DWORD *)(v24 + 16)) && (!v91 || !*(_DWORD *)(v24 + 20)))
            goto LABEL_54;
        }
      }
      v116 = 0;
      v114 = 0u;
      v115 = 0u;
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      v108 = 0u;
      v109 = 0u;
      v106 = 0u;
      v107 = 0u;
      v104 = 0u;
      v105 = 0u;
      v102 = 0u;
      v103 = 0u;
      v101 = 0u;
      v99 = 0u;
      v100 = 0u;
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v25 = *(unsigned __int8 *)(v16 + 2);
      if (*(_QWORD *)(a1 + 1120))
      {
        v26 = *(_WORD *)(a1 + 1112);
        if (v26)
        {
          v27 = 0;
          v28 = 8;
          while (1)
          {
            v29 = *(_QWORD *)(a1 + 1120);
            if (v25 == 120)
              v30 = (const char *)(v29 + v28);
            else
              v30 = (const char *)(v29 + v28 - 8);
            if (!strcmp((const char *)v16, v30))
            {
              if (v91 || !*(_QWORD *)(a1 + 96))
                goto LABEL_56;
              __strcpy_chk();
              if (v93)
                __strcpy_chk();
              if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, __int128 *))(*(_QWORD *)(a1 + 96) + 112))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), &v95) & 0x80000000) == 0)goto LABEL_56;
              BYTE8(v103) = 0;
              if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, __int128 *))(*(_QWORD *)(a1 + 96) + 96))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), &v95) & 0x80000000) == 0)goto LABEL_56;
              v26 = *(_WORD *)(a1 + 1112);
            }
            ++v27;
            v28 += 16;
            if (v27 >= v26)
              goto LABEL_54;
          }
        }
        goto LABEL_54;
      }
      if (v91 || !*(_QWORD *)(a1 + 96))
        break;
      __strcpy_chk();
      if (v93)
        __strcpy_chk();
      if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, __int128 *))(*(_QWORD *)(a1 + 96) + 112))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), &v95) & 0x80000000) == 0)break;
      BYTE8(v103) = 0;
      if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, __int128 *))(*(_QWORD *)(a1 + 96) + 96))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), &v95) & 0x80000000) == 0)break;
LABEL_54:
      if (++v15 == v13)
      {
        result = v85;
        goto LABEL_57;
      }
    }
LABEL_56:
    result = 0;
    v13 = (unsigned __int16)v15;
LABEL_57:
    v12 = v83;
LABEL_58:
    if (v13 >= *v12)
    {
      v48 = v89;
      goto LABEL_95;
    }
    v86 = result;
    v31 = *v87;
    v32 = *(char **)(*v87 + 16 * v13);
    v33 = *(_DWORD *)(a1 + 992);
    ModelLng = hlp_FindModelLng(a1, v32, v33);
    v37 = v79;
    if (v33)
    {
      v38 = *(_DWORD *)(v31 + 16 * v13 + 8);
      v37 = v80;
      if (v38)
      {
        v39 = v38 / *(unsigned __int16 *)(v88 + 56 * v89 + 24);
        v40 = *(_DWORD *)(a1 + 1148);
        v41 = v40 >= v39;
        v42 = v40 - v39;
        if (!v41)
          v42 = 0;
        v43 = *(_DWORD *)(a1 + 1144) + v42;
        *(_DWORD *)(a1 + 1192) = v43;
        *(_DWORD *)(a1 + 1196) = *(_DWORD *)v32;
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"Setting bias %u: %s", v34, v35, v36, v43);
        v37 = v80;
      }
    }
    if (*v37
      && (!*(_WORD *)(v88 + 56 * v89 + 26)
       || v37[1] <= *(unsigned __int16 *)(v88 + 56 * v89 + 26)
       && v37[2] >= *(unsigned __int16 *)(v88 + 56 * v89 + 30)))
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"Rejection for message: %u %u, %u %u, %u %u", v34, v35, v36, v13);
      v48 = v89;
      result = v86;
      goto LABEL_95;
    }
    result = hlp_AppendItemRaw32(a1, a2, a3, a4, 0x20u, 10);
    if ((result & 0x80000000) != 0)
      return result;
    v47 = *a2 + 32 * (*a4 - 1);
    if (!*(_DWORD *)(a1 + 996))
    {
      v48 = v89;
LABEL_76:
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"Identified language for segment %u: %s", v44, v45, v46, v48);
      if (ModelLng)
      {
        v59 = strlen(ModelLng + 8);
        if (a9)
          v60 = v59 + strlen(a9) + 6;
        else
          v60 = v59 + 5;
        v61 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), v60);
        if (v61)
        {
          v62 = v61;
          v63 = strcpy(v61, ModelLng + 8);
          v64 = &v62[strlen(v63)];
          if (*(_DWORD *)(a1 + 1008))
          {
            v64[4] = 0;
            v65 = 1684630623;
          }
          else
          {
            v64[4] = 0;
            v65 = 1768715871;
          }
          *(_DWORD *)v64 = v65;
          if (a9)
            strcat(v62, a9);
          *(_QWORD *)(v47 + 24) = v62;
          *(_QWORD *)v47 = 36;
          *(_DWORD *)(v47 + 8) = 0;
          v66 = *v84;
          *(_DWORD *)(v47 + 12) = *v84 + a8;
          *(_DWORD *)(v47 + 16) = *(_DWORD *)(v88 + 56 * v48 + 4) - v66;
          if (*(_DWORD *)(a1 + 996) && *(_DWORD *)(a1 + 1188))
          {
            v67 = a7;
            result = hlp_AppendItemRaw32(a1, a5, a6, a7, 4u, 10);
            if ((result & 0x80000000) != 0)
              return result;
            *(_DWORD *)(*a5 + 4 * (*a7 - 1)) = *a4 - 2;
            result = hlp_AppendItemRaw32(a1, a5, a6, a7, 4u, 10);
            if ((result & 0x80000000) != 0)
              return result;
            result = 0;
            v68 = *a4 - 1;
            v69 = *a5;
          }
          else
          {
            v67 = a7;
            result = hlp_AppendItemRaw32(a1, a5, a6, a7, 4u, 10);
            if ((result & 0x80000000) != 0)
              return result;
            result = 0;
            v68 = *a4 - 1;
            v69 = *a5;
          }
          *(_DWORD *)(v69 + 4 * (*v67 - 1)) = v68;
LABEL_95:
          v10 = v48 + 1;
          if (v10 == v82)
            return result;
          continue;
        }
        v71 = 48000;
        v70 = 2345672714;
      }
      else
      {
        v70 = 2345672711;
        v71 = 48001;
      }
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", v71, 0, v55, v56, v57, v58, v72);
      return v70;
    }
    break;
  }
  v48 = v89;
  if (!*(_DWORD *)(a1 + 1188))
    goto LABEL_76;
  result = hlp_AppendItemRaw32(a1, a2, a3, a4, 0x20u, 10);
  if ((result & 0x80000000) == 0)
  {
    v49 = *a2;
    v50 = *a4;
    v51 = *a2 + 32 * (*a4 - 1);
    *(_QWORD *)v51 = 42;
    *(_DWORD *)(v51 + 8) = 0;
    v52 = *v84;
    *(_DWORD *)(v51 + 12) = *v84 + a8;
    *(_DWORD *)(v51 + 16) = *(_DWORD *)(v88 + 56 * v89 + 4) - v52;
    LH_utoa(*(_DWORD *)(a1 + 1192), __s, 0xAu);
    __strcat_chk();
    __strcat_chk();
    v53 = strlen(__s);
    v54 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), (v53 + 1));
    *(_QWORD *)(v51 + 24) = v54;
    if (v54)
    {
      v47 = v49 + 32 * (v50 - 2);
      strcpy(v54, __s);
      goto LABEL_76;
    }
    return 2345672714;
  }
  return result;
}

uint64_t fe_lid_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  v7 = 0;
  if (!a3)
    return 2345672711;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t fe_lid_ClassClose()
{
  return 0;
}

uint64_t fe_lid_ObjReopen(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 62400, 135000) & 0x80000000) != 0)
    return 2345672712;
  fe_lid_HlpClose(a1);
  return fe_lid_HlpOpen(a1);
}

uint64_t lidmde_ParseStemmingRules(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unsigned int v15;
  unsigned __int16 v16;
  char *v17;
  char *v18;
  uint64_t result;
  char *v20;
  const char *v21;
  unsigned __int16 v22;
  uint64_t v23;
  unsigned int v24;

  v2 = a1 + 134960;
  v3 = *(char **)(a1 + 134976);
  v4 = strchr(v3, 59);
  v5 = 2;
  if (v4)
  {
    do
    {
      v4 = strchr(v4 + 1, 59);
      LOWORD(v5) = v5 + 1;
    }
    while (v4);
    v5 = (unsigned __int16)v5;
  }
  v6 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v5, 8);
  *(_QWORD *)(v2 + 24) = v6;
  v11 = *(_QWORD *)(a1 + 16);
  if (!v6)
    goto LABEL_15;
  v12 = heap_Calloc(*(_QWORD **)(v11 + 8), v5, 8);
  *(_QWORD *)(v2 + 32) = v12;
  if (!v12)
  {
    v11 = *(_QWORD *)(a1 + 16);
LABEL_15:
    log_OutPublic(*(_QWORD *)(v11 + 32), (uint64_t)"FE_LID", 48000, 0, v7, v8, v9, v10, v24);
    return 2345672714;
  }
  v13 = strchr(v3, 59);
  if (v13)
  {
    v14 = v13;
    LOWORD(v15) = 0;
    v16 = 0;
    while (1)
    {
      *v14 = 0;
      v17 = strchr(v3, 44);
      if (!v17)
        return 2345672711;
      *v17 = 0;
      v18 = v17 + 1;
      *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8 * v16) = v3;
      *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8 * v16) = v18;
      v3 = v14 + 1;
      if ((unsigned __int16)((_WORD)v14 - (_WORD)v18) <= (unsigned __int16)v15)
        v15 = (unsigned __int16)v15;
      else
        v15 = (unsigned __int16)((_WORD)v14 - (_WORD)v18);
      v14 = strchr(v14 + 1, 59);
      ++v16;
      if (!v14)
        goto LABEL_17;
    }
  }
  v16 = 0;
  v15 = 0;
LABEL_17:
  v20 = strchr(v3, 44);
  if (!v20)
    return 2345672711;
  *v20 = 0;
  v21 = v20 + 1;
  *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8 * v16) = v3;
  *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8 * v16) = v21;
  v22 = strlen(v21);
  result = 0;
  if (v15 > v22)
    v22 = v15;
  *(_WORD *)v2 = v22;
  v23 = (unsigned __int16)(v16 + 1);
  *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8 * v23) = 0;
  *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8 * v23) = 0;
  return result;
}

uint64_t lidmde_MainLangPlusSomeOtherLangs(_DWORD *a1, unsigned int a2, unsigned int a3)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  if (a1[a2])
    v3 = a3 == 0;
  else
    v3 = 1;
  if (v3)
    return 0;
  v4 = a2;
  v5 = a3;
  while (!v4 || !*a1)
  {
    ++a1;
    --v4;
    if (!--v5)
      return 0;
  }
  return 1;
}

uint64_t lidmde_SingleLang(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (a2)
  {
    v2 = 0;
    v3 = 0xFFFF;
    do
    {
      if (*(_DWORD *)(a1 + 4 * v2))
      {
        if (v3 != 0xFFFF)
          goto LABEL_8;
        v3 = (unsigned __int16)v2;
      }
      ++v2;
    }
    while (a2 != v2);
  }
  else
  {
LABEL_8:
    LOWORD(v3) = -1;
  }
  return (__int16)v3;
}

uint64_t lidmde_FindLangs(uint64_t a1, uint64_t a2, __int16 a3, const char *a4, __int16 a5, void *a6, _DWORD *a7, uint64_t a8)
{
  unsigned __int16 *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  char *v36;
  unsigned __int16 *v37;
  const char *v38;
  unsigned __int16 v39;
  uint64_t v40;
  unint64_t i;
  unsigned int v43;
  __int16 v44;
  uint64_t v45;
  int v46;
  char *__s1;
  __int16 v48;
  int v49;
  _QWORD v50[4];
  _DWORD v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v15 = (unsigned __int16 *)(a1 + 134960);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"Start ML2 LID MDE : %s", (uint64_t)a6, (uint64_t)a7, a8, a2);
  __s1 = (char *)a2;
  v48 = a5;
  v16 = (unsigned __int16)(a3 - a2);
  if (v16 <= (unsigned __int16)(a5 - (_WORD)a4))
    v16 = (unsigned __int16)(a5 - (_WORD)a4);
  v17 = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), v16 + *v15 + 1);
  if (v17)
  {
    v22 = (char *)v17;
    if (*(_WORD *)(a1 + 1928))
      bzero(a6, 4 * *(unsigned __int16 *)(a1 + 1928));
    if (**((_QWORD **)v15 + 3))
    {
      v44 = a3;
      v23 = 0;
      v24 = 0;
      v49 = 0;
      while (1)
      {
        *v22 = 0;
        v25 = lidmde_StemLookup2(a1, a4, v48, *(char **)(*((_QWORD *)v15 + 3) + 8 * v23), *(const char **)(*((_QWORD *)v15 + 4) + 8 * v23), v22, a6, &v49);
        if ((v25 & 0x80000000) != 0)
          goto LABEL_43;
        if (!v49)
        {
          if (!strcmp(__s1, a4))
            goto LABEL_20;
          v25 = lidmde_StemLookup2(a1, __s1, v44, *(char **)(*((_QWORD *)v15 + 3) + 8 * v23), *(const char **)(*((_QWORD *)v15 + 4) + 8 * v23), v22, a6, &v49);
          if ((v25 & 0x80000000) != 0)
            goto LABEL_43;
          if (!v49)
          {
LABEL_20:
            v30 = *(_QWORD *)(a1 + 1088);
            v49 = 0;
            *a7 = 0;
            if (!lidmde_HasVowelWord(*((char **)v15 + 1), (unsigned __int8 *)v22)
              || (int)Utf8_Utf8NbrOfSymbols(v22) < v15[1])
            {
              v25 = 0;
LABEL_23:
              v27 = *a7 == 0;
              goto LABEL_24;
            }
            memset(v50, 0, 30);
            v25 = calcWScore(a1, (uint64_t)v22, (uint64_t)"merwfrq_latn", 1, *(unsigned __int16 *)(v30 + 8), v51, (uint64_t)v50);
            if ((v25 & 0x80000000) != 0)
              goto LABEL_43;
            if (!*(_WORD *)(v30 + 8))
              goto LABEL_23;
            v34 = 0;
            v35 = 0;
            v45 = v30;
            v46 = v24;
            do
            {
              if (v51[v35])
              {
                v36 = v22;
                v37 = v15;
                v38 = a4;
                v39 = *(_WORD *)(a1 + 1928);
                if (v39)
                {
                  v40 = 0;
                  for (i = 0; i < v39; ++i)
                  {
                    if (v35 == *(unsigned __int16 *)(*(_QWORD *)(a1 + 1952) + 2 * i))
                    {
                      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID (MDE) stem found as %s", v31, v32, v33, *(_QWORD *)(a1 + 1936) + v40);
                      v34 = 1;
                      *((_DWORD *)a6 + i) = 1;
                      *a7 = 0;
                      v39 = *(_WORD *)(a1 + 1928);
                    }
                    v40 += 8;
                  }
                }
                a4 = v38;
                v15 = v37;
                v22 = v36;
                v30 = v45;
                v24 = v46;
                if (!v34)
                  *a7 = 1;
              }
              ++v35;
            }
            while (v35 < *(unsigned __int16 *)(v30 + 8));
            v49 = v34;
            v27 = *a7 == 0;
            if (!v34)
              goto LABEL_24;
          }
        }
        v26 = *(unsigned __int16 *)(a1 + 1928);
        v27 = 1;
        if (*(_WORD *)(a1 + 1928))
        {
          v28 = *(unsigned __int16 *)(a1 + 1930);
          if (*((_DWORD *)a6 + v28))
          {
            v29 = a6;
            while (!v28 || !*v29)
            {
              ++v29;
              --v28;
              if (!--v26)
              {
                v27 = 1;
                goto LABEL_24;
              }
            }
            goto LABEL_43;
          }
        }
LABEL_24:
        v23 = (unsigned __int16)++v24;
        if (!*(_QWORD *)(*((_QWORD *)v15 + 3) + 8 * (unsigned __int16)v24) || !v27)
          goto LABEL_43;
      }
    }
    v25 = 0;
LABEL_43:
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v22);
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 48000, 0, v18, v19, v20, v21, v43);
    return 2345672714;
  }
  return v25;
}

uint64_t lidmde_StemLookup2(uint64_t a1, const char *a2, __int16 a3, char *__s, const char *a5, char *a6, void *a7, _DWORD *a8)
{
  uint64_t v15;
  unsigned __int16 v16;
  const char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char **v31;
  unsigned __int8 __c;
  __int16 __c_1;

  *a8 = 0;
  v15 = 0;
  v16 = a3 - (_WORD)a2 - strlen(__s);
  __c = 0;
  v31 = 0;
  if ((v16 & 0x8000) == 0)
  {
    if (!strcmp(&a2[(__int16)v16], __s)
      && (strncpy(a6, a2, v16),
          strcpy(&a6[(__int16)v16], a5),
          lidmde_HasVowelWord(*(char **)(a1 + 134968), (unsigned __int8 *)a6))
      && (int)Utf8_Utf8NbrOfSymbols(a6) >= *(unsigned __int16 *)(a1 + 134962))
    {
      __c_1 = 1;
      v15 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, char ***, __int16 *, unsigned __int8 *, _QWORD))(*(_QWORD *)(a1 + 64) + 152))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "ml2", a6, &v31, &__c_1, &__c, *(unsigned __int8 *)(a1 + 2040));
      if ((v15 & 0x80000000) == 0 && __c_1)
      {
        v18 = *v31;
        v19 = strchr(*v31, __c);
        if (v19)
        {
          *v19 = 0;
          v18 = *v31;
        }
        if (!strcmp(v18, "all"))
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID (MDE) stem found: %s as all", v20, v21, v22, (uint64_t)a6);
          if (*(_WORD *)(a1 + 1928))
            memset_pattern16(a7, &unk_1DEC660C0, 4 * *(unsigned __int16 *)(a1 + 1928));
        }
        else
        {
          v23 = *(unsigned __int16 *)(a1 + 1928);
          if (*(_WORD *)(a1 + 1928))
          {
            v24 = 0;
            v25 = *v31;
            v26 = *(_QWORD *)(a1 + 1936);
            while (1)
            {
              v27 = v24;
              if (!strcmp(v25, (const char *)(v26 + 8 * v24)))
                break;
              v24 = v27 + 1;
              if ((int)v27 + 1 >= v23)
                goto LABEL_20;
            }
            log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID (MDE) stem found: %s as %s", v28, v29, v30, (uint64_t)a6);
            *((_DWORD *)a7 + v27) = 1;
          }
        }
LABEL_20:
        *a8 = 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return v15;
}

uint64_t lidmde_HasVowelWord(char *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;

  if (!*a2)
    return 0;
  v2 = a2;
  while (!utf8_strchr(a1, v2))
  {
    v2 += (int)Utf8_LengthInBytes(v2, 1);
    if (!*v2)
      return 0;
  }
  return 1;
}

uint64_t calcWScore(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, unsigned int a5, void *a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  int v17;
  char *v18;
  _BOOL4 v19;
  BOOL v20;
  char *v21;
  unint64_t v22;
  char *v23;
  BOOL v24;
  _BYTE __c[11];

  *(_QWORD *)&__c[3] = 0;
  __c[0] = 0;
  *(_WORD *)&__c[1] = a4;
  v15 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _BYTE *, _BYTE *, _BYTE *, _QWORD))(*(_QWORD *)(a1 + 64) + 152))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), a3, a2, &__c[3], &__c[1], __c, *(unsigned __int8 *)(a1 + 1848));
  if ((v15 & 0x80000000) == 0)
  {
    if (a5)
      bzero(a6, 4 * a5);
    if (*(_WORD *)&__c[1])
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"LID found: %s", v12, v13, v14, a2);
      ++*(_WORD *)(a7 + 4);
      v16 = **(const char ***)&__c[3];
      v17 = __c[0];
      v18 = strchr(**(char ***)&__c[3], __c[0]);
      v19 = a5 != 0;
      if (v18)
        v20 = a5 == 0;
      else
        v20 = 1;
      if (v20)
      {
        v22 = 0;
      }
      else
      {
        v21 = v18;
        v22 = 0;
        do
        {
          if (v21 != v16)
          {
            *v21 = 0;
            *((_DWORD *)a6 + v22) = LH_atou(v16);
            v17 = __c[0];
          }
          ++v22;
          v16 = v21 + 1;
          v23 = strchr(v21 + 1, v17);
          v19 = v22 < a5;
          if (!v23)
            break;
          v21 = v23;
        }
        while (v22 < a5);
      }
      if (*v16)
        v24 = !v19;
      else
        v24 = 1;
      if (!v24)
        *((_DWORD *)a6 + v22) = LH_atou(v16);
    }
  }
  return v15;
}

uint64_t lid_Init(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 1896) = 0;
  *(_WORD *)(a1 + 1888) = 0;
  *(_QWORD *)(a1 + 1204) = 0x7172667472656DLL;
  *(_QWORD *)(a1 + 1460) = 0x7172667772656DLL;
  result = initLanguagesModel(a1, a1 + 1016, 0xFFFF);
  if ((result & 0x80000000) == 0)
  {
    result = initLanguagesModel(a1, a1 + 1064, 1);
    if ((result & 0x80000000) == 0 || *(_WORD *)(a1 + 1018))
      return 0;
  }
  return result;
}

uint64_t initLanguagesModel(uint64_t a1, uint64_t a2, __int16 a3)
{
  int v6;
  unsigned __int8 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _WORD *v28;
  char *v29;
  unsigned __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  int v47;
  int v48;
  uint64_t appended;
  unsigned int v51;
  _QWORD v52[3];
  unsigned __int8 __c;
  __int16 __c_1;
  const char **__c_3;
  _BYTE v56[11];
  _QWORD __src[4];

  __src[3] = *MEMORY[0x1E0C80C00];
  __c_3 = 0;
  __c = 0;
  *(_WORD *)a2 = a3;
  *(_QWORD *)(a2 + 24) = 0;
  *(_WORD *)(a2 + 16) = 0;
  __c_1 = a3;
  v6 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 64) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "lidcfg", "nrpartwgram_lid", &__c_3, &__c_1, &__c);
  v7 = 1;
  if ((v6 & 0x80000000) == 0 && __c_1)
    v7 = LH_atou(*__c_3);
  *(_BYTE *)(a1 + 1848) = v7;
  __c_1 = a3;
  v8 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 64) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "lidcfg", "scripts", &__c_3, &__c_1, &__c);
  if ((v8 & 0x80000000) == 0)
  {
    if (!__c_1)
      return 0;
    v9 = (char *)*__c_3;
    v10 = strchr((char *)*__c_3, __c);
    if (v10)
      *v10 = 0;
    v11 = 1;
    *(_WORD *)(a2 + 16) = 1;
    v12 = strchr(v9, 44);
    if (v12)
    {
      LOWORD(v11) = 1;
      do
      {
        LOWORD(v11) = v11 + 1;
        *(_WORD *)(a2 + 16) = v11;
        v12 = strchr(v12 + 1, 44);
      }
      while (v12);
      v11 = (unsigned __int16)v11;
    }
    v13 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v11, 536);
    *(_QWORD *)(a2 + 24) = v13;
    if (!v13)
    {
LABEL_74:
      appended = 2345672714;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 48000, 0, v14, v15, v16, v17, v51);
      return appended;
    }
    v18 = strchr(v9, 44);
    v19 = v18;
    if (v18)
      *v18 = 0;
    if (!*(_WORD *)(a2 + 16))
      goto LABEL_75;
    v20 = 0;
    v21 = 0;
    do
    {
      __strcpy_chk();
      if (v19)
      {
        v22 = strchr(v19 + 1, 44);
        v19 = v22;
        if (v22)
          *v22 = 0;
      }
      ++v21;
      v20 += 536;
    }
    while (v21 < *(unsigned __int16 *)(a2 + 16));
    if (!*(_WORD *)(a2 + 16))
    {
LABEL_75:
      appended = 0;
      *(_QWORD *)(a2 + 40) = 0;
      return appended;
    }
    v23 = 0;
    qmemcpy(v52, "languagemerwfrq_mertfrq_", sizeof(v52));
    while (1)
    {
      v24 = *(_QWORD *)(a2 + 24);
      v56[0] = 0;
      *(_QWORD *)&v56[3] = 0;
      __src[0] = v52[2];
      LOBYTE(__src[1]) = 0;
      __strcat_chk();
      __strcpy_chk();
      LOBYTE(__src[1]) = 0;
      __src[0] = v52[1];
      __strcat_chk();
      strcpy((char *)(v24 + 536 * v23 + 280), (const char *)__src);
      strcpy((char *)__src + 7, "es.");
      __src[0] = v52[0];
      __strcat_chk();
      *(_WORD *)&v56[1] = a3;
      v8 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, _QWORD *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 64) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), "lidcfg", __src, &v56[3], &v56[1], v56);
      if ((v8 & 0x80000000) != 0)
        break;
      v25 = **(char ***)&v56[3];
      v26 = strchr(**(char ***)&v56[3], v56[0]);
      if (v26)
        *v26 = 0;
      v27 = v24 + 536 * v23;
      *(_WORD *)(v27 + 8) = 1;
      v28 = (_WORD *)(v27 + 8);
      v29 = strchr(v25, 44);
      if (v29)
      {
        v30 = 1;
        do
        {
          *v28 = ++v30;
          v29 = strchr(v29 + 1, 44);
        }
        while (v29);
        v31 = v30;
      }
      else
      {
        v31 = 1;
      }
      v32 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v31, 8);
      v33 = v24 + 536 * v23;
      *(_QWORD *)(v33 + 16) = v32;
      v34 = (_QWORD *)(v33 + 16);
      if (!v32)
        goto LABEL_74;
      v35 = strchr(v25, 44);
      v36 = v35;
      if (v35)
        *v35 = 0;
      if (*v28)
      {
        v37 = 0;
        v38 = 0;
        do
        {
          strcpy((char *)(*v34 + v37), v25);
          if (v36)
          {
            v25 = v36 + 1;
            v39 = strchr(v36 + 1, 44);
            v36 = v39;
            if (v39)
              *v39 = 0;
          }
          ++v38;
          v37 += 8;
        }
        while (v38 < (unsigned __int16)*v28);
      }
      ++v23;
      v40 = *(unsigned __int16 *)(a2 + 16);
      if (v23 >= v40)
      {
        *(_QWORD *)(a2 + 40) = 0;
        if ((_DWORD)v40)
        {
          v41 = 0;
          v42 = 0;
          LODWORD(v52[2]) = 195101;
          LODWORD(v52[1]) = -1949294585;
          while (1)
          {
            v43 = (const char *)(*(_QWORD *)(a2 + 24) + v41);
            if (!strcmp(v43, "latn"))
            {
              v46 = v42;
              v44 = a1;
              v45 = a2 + 32;
              v47 = 0;
              v48 = 591;
            }
            else if (!strcmp(v43, "cyrl"))
            {
              appendUnicodeRange(a1, a2 + 32, v42, 1024, 1327);
              appendUnicodeRange(a1, a2 + 32, v42, 11744, 11775);
              v44 = a1;
              v45 = a2 + 32;
              v46 = v42;
              v47 = 42560;
              v48 = 42655;
            }
            else if (!strcmp(v43, "deva"))
            {
              v46 = v42;
              v44 = a1;
              v45 = a2 + 32;
              v47 = 2304;
              v48 = 2431;
            }
            else if (!strcmp(v43, "tami"))
            {
              v46 = v42;
              v44 = a1;
              v45 = a2 + 32;
              v47 = 2944;
              v48 = 3071;
            }
            else if (!strcmp(v43, "telu"))
            {
              v46 = v42;
              v44 = a1;
              v45 = a2 + 32;
              v47 = 3072;
              v48 = 3199;
            }
            else if (!strcmp(v43, "beng"))
            {
              v46 = v42;
              v44 = a1;
              v45 = a2 + 32;
              v47 = 2432;
              v48 = 2559;
            }
            else if (!strcmp(v43, "kann"))
            {
              v46 = v42;
              v44 = a1;
              v45 = a2 + 32;
              v47 = 3200;
              v48 = 3327;
            }
            else if (!strcmp(v43, "hanx"))
            {
              appendUnicodeRange(a1, a2 + 32, v42, 13312, 19903);
              appendUnicodeRange(a1, a2 + 32, v42, 19968, 40879);
              appendUnicodeRange(a1, a2 + 32, v42, 0x20000, 173782);
              appendUnicodeRange(a1, a2 + 32, v42, 173824, 183983);
              v44 = a1;
              v45 = a2 + 32;
              v46 = v42;
              v47 = 194560;
              v48 = v52[2];
            }
            else if (!strcmp(v43, "hrkt"))
            {
              appendUnicodeRange(a1, a2 + 32, v42, 12352, 12543);
              v44 = a1;
              v45 = a2 + 32;
              v46 = v42;
              v47 = 65381;
              v48 = 65439;
            }
            else if (!strcmp(v43, "hang"))
            {
              appendUnicodeRange(a1, a2 + 32, v42, 4352, 4607);
              appendUnicodeRange(a1, a2 + 32, v42, 44032, 55215);
              v44 = a1;
              v45 = a2 + 32;
              v46 = v42;
              v47 = 65440;
              v48 = 65500;
            }
            else if (!strcmp(v43, "arab"))
            {
              appendUnicodeRange(a1, a2 + 32, v42, 1536, 1791);
              appendUnicodeRange(a1, a2 + 32, v42, 1872, 1919);
              appendUnicodeRange(a1, a2 + 32, v42, 64336, 65023);
              v44 = a1;
              v45 = a2 + 32;
              v46 = v42;
              v47 = 65136;
              v48 = 65279;
            }
            else if (!strcmp(v43, "grek"))
            {
              appendUnicodeRange(a1, a2 + 32, v42, 880, 1023);
              v44 = a1;
              v45 = a2 + 32;
              v46 = v42;
              v47 = 7936;
              v48 = 0x1FFF;
            }
            else
            {
              if (strcmp(v43, "hebr"))
                return LODWORD(v52[1]);
              appendUnicodeRange(a1, a2 + 32, v42, 1424, 1535);
              v44 = a1;
              v45 = a2 + 32;
              v46 = v42;
              v47 = 64285;
              v48 = 64320;
            }
            appended = appendUnicodeRange(v44, v45, v46, v47, v48);
            if ((appended & 0x80000000) == 0)
            {
              ++v42;
              v41 += 536;
              if (v42 < *(unsigned __int16 *)(a2 + 16))
                continue;
            }
            return appended;
          }
        }
        return 0;
      }
    }
  }
  return v8;
}

uint64_t lid_Deinit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_WORD *)(a1 + 1888))
  {
    v2 = 0;
    v3 = 56 * *(unsigned __int16 *)(a1 + 1888);
    do
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 1896) + v2 + 16));
      v2 += 56;
    }
    while (v3 != v2);
  }
  v4 = *(_QWORD *)(a1 + 1896);
  if (v4)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v4);
  *(_QWORD *)(a1 + 1896) = 0;
  *(_DWORD *)(a1 + 1888) = 0;
  deinitLanguagesModel((_QWORD *)a1, a1 + 1016);
  deinitLanguagesModel((_QWORD *)a1, a1 + 1064);
  return 0;
}

_QWORD *deinitLanguagesModel(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v4 = *(unsigned __int16 *)(a2 + 16);
  if (*(_WORD *)(a2 + 16))
  {
    v5 = 0;
    v6 = 16;
    do
    {
      v7 = *(_QWORD *)(a2 + 24);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + v6);
        if (v8)
        {
          result = heap_Free(*(_QWORD **)(v3[2] + 8), v8);
          v4 = *(unsigned __int16 *)(a2 + 16);
        }
      }
      ++v5;
      v6 += 536;
    }
    while (v5 < v4);
  }
  v9 = *(_QWORD *)(a2 + 24);
  if (v9)
  {
    result = heap_Free(*(_QWORD **)(v3[2] + 8), v9);
    *(_QWORD *)(a2 + 24) = 0;
  }
  v10 = *(_QWORD *)(a2 + 40);
  if (v10)
  {
    result = heap_Free(*(_QWORD **)(v3[2] + 8), v10);
    *(_QWORD *)(a2 + 40) = 0;
  }
  return result;
}

uint64_t lid_Identify(uint64_t a1, _BYTE *a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t appended;
  uint64_t v11;
  int v12;
  unsigned int U32FromUtf8;
  _BOOL4 v14;
  int v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  unsigned int v42;
  _WORD *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned __int8 *Word;
  char *v53;
  unsigned __int8 *v54;
  char v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned __int8 *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  _WORD *v87;
  int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  unsigned int v94;
  __int128 *v95;
  const char *v96;
  const char *v97;
  int v98;
  int v99;
  unsigned int v100;
  uint64_t v101;
  __int128 v102;
  unsigned int v103;
  BOOL v104;
  int v105;
  unsigned int v107;
  char *v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  _BYTE *v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *__s2;
  unsigned int v123;
  _WORD *v124;
  uint64_t v125;
  int v126;
  __int16 v127;
  uint64_t v128;
  char v129;
  __int16 v130;
  uint64_t v131;
  unint64_t v132;
  _OWORD v133[32];
  _OWORD v134[32];
  uint64_t v135;

  v3 = a3;
  v5 = a1;
  v135 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 992))
    v6 = 1064;
  else
    v6 = 1016;
  if (*(_DWORD *)(a1 + 992))
    v7 = a1 + 1064;
  else
    v7 = a1 + 1016;
  v128 = v7;
  *(_WORD *)(a1 + 1890) = 0;
  if (*(_WORD *)(v7 + 16))
  {
    *(_QWORD *)&v134[0] = 0;
    *(_WORD *)(a1 + 1890) = 0;
    if (!a3)
      return 0;
    v119 = v6;
    v8 = 0;
    v9 = 0;
    appended = 0;
    v11 = 0xFFFFLL;
    v12 = -1;
    v126 = -1;
    do
    {
      U32FromUtf8 = utf8_GetU32FromUtf8(a2, v9, v3);
      v14 = (U32FromUtf8 & 0xFFFFFFDF) - 91 < 0xFFFFFFE6;
      if (U32FromUtf8 == 9 || U32FromUtf8 == 32)
        v16 = v9;
      else
        v16 = v12;
      if (U32FromUtf8 > 0xFE)
        v14 = 0;
      else
        v12 = v16;
      v17 = *(unsigned __int16 *)(v128 + 34);
      if (!*(_WORD *)(v128 + 34))
        goto LABEL_24;
      v18 = (unsigned __int16 *)(*(_QWORD *)(v128 + 40) + 8);
      while (*((_DWORD *)v18 - 2) > U32FromUtf8 || *((_DWORD *)v18 - 1) <= U32FromUtf8)
      {
        v18 += 6;
        if (!--v17)
          goto LABEL_24;
      }
      if (v14 || (v19 = (__int16)*v18, (v19 & 0x80000000) != 0))
      {
LABEL_24:
        v19 = v11;
      }
      else
      {
        if (*v18 == (unsigned __int16)v11)
        {
          v19 = v11;
        }
        else
        {
          if (v8)
            *(_DWORD *)(v8 + 4) = v126 + 1;
          appended = appendCoLangSegment(v5, v134);
          if ((appended & 0x80000000) != 0)
            return appended;
          v8 = *(_QWORD *)&v134[0];
          *(_WORD *)(*(_QWORD *)&v134[0] + 8) = v19;
          if (v12 >= v126)
            v20 = v12 + 1;
          else
            v20 = v9;
          *(_DWORD *)v8 = v20;
          *(_WORD *)(v8 + 10) = 0;
        }
        v126 = v9;
      }
      v9 += utf8_determineUTF8CharLength(a2[v9]);
      v11 = v19;
    }
    while (v9 < v3);
    if (v8)
      *(_DWORD *)(v8 + 4) = v126 + 1;
    v6 = v119;
    v22 = v128;
    if ((appended & 0x80000000) != 0)
      return appended;
  }
  else
  {
    *(_QWORD *)&v134[0] = 0;
    appended = appendCoLangSegment(a1, v134);
    if ((appended & 0x80000000) != 0)
      return appended;
    v21 = *(_QWORD *)&v134[0];
    **(_DWORD **)&v134[0] = 0;
    *(_DWORD *)(v21 + 4) = v3;
    *(_DWORD *)(v21 + 8) = 0xFFFF;
    v22 = v128;
  }
  v23 = *(unsigned __int16 *)(v5 + 1890);
  if (!*(_WORD *)(v5 + 1890))
    return appended;
  v24 = 0;
  v25 = v23 - 1;
  v26 = v5 + 1204;
  v27 = v5 + 1460;
  v108 = (char *)(v5 + 1164);
  v109 = (const char *)(v5 + 1176);
  v28 = 0uLL;
  v114 = *(unsigned __int16 *)(v5 + 1890);
  v115 = a2;
  v120 = v6;
  v113 = v23 - 1;
  v111 = v5 + 1460;
  v112 = v5 + 1204;
  __s2 = (char *)(v5 + 1196);
  while (1)
  {
    v29 = *(_QWORD *)(v5 + 1896);
    v30 = (_DWORD *)(v29 + 56 * v24);
    if (!v24)
      *v30 = 0;
    if (v25 == (_DWORD)v24)
      *(_DWORD *)(v29 + 56 * v24 + 4) = v3;
    v31 = v29 + 56 * v24;
    v32 = *(_QWORD *)(v31 + 16);
    if (*(__int16 *)(v31 + 8) < 0)
      break;
    v33 = *(_QWORD *)(v22 + 24);
    v34 = v33 + 536 * *(unsigned __int16 *)(v31 + 8);
    v35 = *(unsigned __int16 *)(v34 + 8);
    if (*(_WORD *)(v34 + 8))
    {
      v121 = v34 + 24;
      v125 = v34 + 280;
      v36 = *(_QWORD *)(v33 + 536 * *(unsigned __int16 *)(v31 + 8) + 16);
      v37 = (_DWORD *)(v32 + 8);
      v38 = *(unsigned __int16 *)(v34 + 8);
      do
      {
        *v37 = 0;
        *((_QWORD *)v37 - 1) = v36;
        v36 += 8;
        v37 += 4;
        --v38;
      }
      while (v38);
      goto LABEL_59;
    }
LABEL_77:
    appended = 0;
    *(_WORD *)(v29 + 56 * v24 + 10) = 0;
LABEL_141:
    if (++v24 == v23)
      return appended;
  }
  v39 = *(unsigned __int16 *)(v22 + 2);
  if (!*(_WORD *)(v22 + 2))
    goto LABEL_77;
  v40 = *(_QWORD *)(v22 + 8);
  v41 = (_DWORD *)(v32 + 8);
  v42 = *(unsigned __int16 *)(v22 + 2);
  do
  {
    *v41 = 0;
    *((_QWORD *)v41 - 1) = v40;
    v40 += 24;
    v41 += 4;
    --v39;
  }
  while (v39);
  v121 = v26;
  v125 = v27;
  v35 = v42;
LABEL_59:
  v43 = (_WORD *)(v31 + 24);
  *(_WORD *)(v29 + 56 * v24 + 10) = v35;
  if (v35 < 2)
  {
    appended = 0;
    if (v35 == 1)
    {
      *(_DWORD *)(v32 + 8) = 0;
      *(_QWORD *)v43 = 0;
    }
    goto LABEL_141;
  }
  v123 = v35;
  v44 = *v30;
  v117 = v29 + 56 * v24;
  v118 = v24;
  v45 = *(_DWORD *)(v117 + 4) - v44;
  v127 = *(_WORD *)(v5 + v6);
  v134[0] = v28;
  v134[1] = v28;
  v134[2] = v28;
  v134[3] = v28;
  v134[4] = v28;
  v134[5] = v28;
  v134[6] = v28;
  v134[7] = v28;
  v133[0] = v28;
  v133[1] = v28;
  v133[2] = v28;
  v133[3] = v28;
  v133[4] = v28;
  v133[5] = v28;
  v133[6] = v28;
  v133[7] = v28;
  *(_QWORD *)v43 = 0;
  v124 = (_WORD *)(v31 + 24);
  v46 = normalizedDup(v5, (uint64_t)&a2[v44], v45, v43);
  if (!v46)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 32), (uint64_t)"FE_LID", 48000, 0, v47, v48, v49, v50, v107);
    return 2345672714;
  }
  v51 = v46;
  v131 = 0;
  v132 = v46;
  v130 = 0;
  v129 = 0;
  Word = nextWord((uint64_t *)&v132);
  if (!Word)
  {
    appended = 0;
LABEL_82:
    v132 = v51;
    v57 = nextWord((uint64_t *)&v132);
    v60 = v123;
    if (v57)
    {
      v61 = v57;
      v116 = v3;
      v110 = v5;
      do
      {
        appended = calcWScore(v5, (uint64_t)v61, v125, v127, v60, v133, (uint64_t)v124);
        if ((appended & 0x80000000) != 0)
          return appended;
        v64 = v60;
        v65 = v133;
        traceScore(v5, (uint64_t)"doLidString WSCORE THIS WORD", (uint64_t)v61, v64, (uint64_t *)v32, (uint64_t)v133, v62, v63);
        bzero(v134, 4 * v123);
        v68 = 0;
        v69 = 0;
        v70 = v123;
        do
        {
          if (*v65++)
            v68 = 1;
          else
            v69 = 1;
          --v70;
        }
        while (v70);
        if (v69)
        {
          v60 = v123;
          if (v68
            || !IsFlatDistribution(v5, (uint64_t)v124, (char *)v61, (unsigned __int16)((_WORD)v61 - v51)))
          {
            appended = calcTScore(v5, (char *)v61, v121, v127, v123, v134, (uint64_t *)v32);
            if ((appended & 0x80000000) != 0)
              return appended;
          }
          else
          {
            if (*(_DWORD *)(v5 + 1188))
            {
              v74 = (int *)v134;
              v75 = (uint64_t *)v32;
              v76 = v123;
              do
              {
                v77 = *v75;
                v75 += 2;
                if (LH_strnicmp(v77, (uint64_t)__s2, 2uLL))
                  v78 = 100;
                else
                  v78 = 10;
                *v74++ = v78;
                --v76;
              }
              while (v76);
              v3 = v116;
              v5 = v110;
            }
            else
            {
              v79 = (int *)v134;
              v80 = (uint64_t *)v32;
              v81 = v123;
              do
              {
                v82 = *v80;
                v80 += 2;
                if (LH_strnicmp(v82, *(_QWORD *)(v5 + 1912), 2uLL))
                  v83 = 100;
                else
                  v83 = 10;
                *v79++ = v83;
                --v81;
              }
              while (v81);
              v3 = v116;
            }
            v60 = v123;
          }
          traceScore(v5, (uint64_t)"doLidString TSCORE THIS WORD", (uint64_t)v61, v60, (uint64_t *)v32, (uint64_t)v134, v72, v73);
        }
        else
        {
          v60 = v123;
        }
        v84 = 0;
        v85 = v123;
        do
        {
          v86 = *(_DWORD *)((char *)v133 + v84);
          if (!v86)
            v86 = *(_DWORD *)((char *)v134 + v84);
          *(_DWORD *)(v32 + 4 * v84 + 8) += v86;
          v84 += 4;
          --v85;
        }
        while (v85);
        traceScore(v5, (uint64_t)"doLidString COMBINED ALL WORDS UNTIL THIS WORD NOT BIASED", (uint64_t)v61, v60, (uint64_t *)v32, 0, v66, v67);
        v61 = nextWord((uint64_t *)&v132);
      }
      while (v61);
    }
    traceScore(v5, (uint64_t)"doLidString ALL WORDS COMBINED NOT BIASED, NOT SORTED", (uint64_t)"Result", v60, (uint64_t *)v32, 0, v58, v59);
    if (*v124)
      *(_WORD *)(v117 + 30) = 100 * *(unsigned __int16 *)(v117 + 28) / (unsigned __int16)*v124;
    if (*(_DWORD *)(v5 + 1188))
    {
      v87 = (_WORD *)(v117 + 26);
      v88 = (int *)(v32 + 8);
      v89 = v60;
      while (strncmp(*((const char **)v88 - 1), __s2, 2uLL))
      {
        v88 += 4;
        if (!--v89)
          goto LABEL_127;
      }
      if (*v87 && *(_WORD *)(v117 + 28) && !*(_DWORD *)(v5 + 1920))
      {
        v103 = *(_DWORD *)(v5 + 1192) * (unsigned __int16)*v87;
        v104 = *v88 >= v103;
        v105 = *v88 - v103;
        if (v105 == 0 || !v104)
          v105 = 1;
        *v88 = v105;
      }
      else
      {
        *v88 = 0;
      }
    }
LABEL_127:
    ssft_qsort(v32, v60, 16, (uint64_t (*)(unint64_t, unint64_t))compareScore);
    if (*(_DWORD *)(v5 + 992))
    {
      if (*(_DWORD *)(v5 + 1168))
      {
        v92 = *(_DWORD *)(v32 + 8);
        v93 = *(_DWORD *)(v32 + 24);
        v94 = v92 - v93;
        if (v92 - v93 < 0)
          v94 = v93 - v92;
        if (v94 < *(_DWORD *)(v5 + 1172))
        {
          v95 = (__int128 *)(v32 + 16);
          v96 = *(const char **)(v32 + 16);
          v97 = v109;
          goto LABEL_138;
        }
      }
    }
    else if (*(_DWORD *)(v5 + 1156))
    {
      v98 = *(_DWORD *)(v32 + 8);
      v99 = *(_DWORD *)(v32 + 24);
      v100 = v98 - v99;
      if (v98 - v99 < 0)
        v100 = v99 - v98;
      if (v100 < *(_DWORD *)(v5 + 1160))
      {
        v95 = (__int128 *)(v32 + 16);
        v96 = *(const char **)(v32 + 16);
        v97 = v108;
LABEL_138:
        if (!strcmp(v96, v97))
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"fuzzy fallback from %s to %s: %7lu -> %7lu", v101, v90, v91, *(_QWORD *)v32);
          v102 = *v95;
          *v95 = *(_OWORD *)v32;
          *(_OWORD *)v32 = v102;
        }
      }
    }
    traceScore(v5, (uint64_t)"doLidString ALL WORDS COMBINED BIASED AND/OR FUZZY CORRECTED, SORTED", (uint64_t)"Result", v123, (uint64_t *)v32, 0, v90, v91);
    heap_Free(*(_QWORD **)(*(_QWORD *)(v5 + 16) + 8), v51);
    v23 = v114;
    a2 = v115;
    v24 = v118;
    v6 = v120;
    v22 = v128;
    v25 = v113;
    v27 = v111;
    v26 = v112;
    v28 = 0uLL;
    if ((appended & 0x80000000) != 0)
      return appended;
    goto LABEL_141;
  }
  v53 = (char *)Word;
  while (1)
  {
    v130 = v127;
    appended = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, char *, uint64_t *, __int16 *, char *, _QWORD))(*(_QWORD *)(v5 + 64) + 152))(*(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56), v125, v53, &v131, &v130, &v129, *(unsigned __int8 *)(v5 + 1848));
    if ((appended & 0x80000000) != 0)
      return appended;
    v54 = nextWord((uint64_t *)&v132);
    if (!v130 && !IsFlatDistribution(v5, (uint64_t)v124, v53, (unsigned __int16)((_WORD)v53 - v51)))
    {
      while (1)
      {
        v55 = *v53;
        if (!*v53)
          break;
        {
          v55 = 32;
          *v53 = 32;
        }
        v53 += utf8_determineUTF8CharLength(v55);
      }
    }
    if (!v54)
      goto LABEL_82;
    v56 = v54 - 1;
    v53 = (char *)v54;
    if ((unint64_t)(v54 - 1) > v51)
    {
      do
      {
        if (*v56 && !memchr(" \t\n", (char)*v56, 4uLL))
          break;
        *v56-- = 32;
      }
      while ((unint64_t)v56 > v51);
      v53 = (char *)v54;
    }
  }
}

uint64_t appendCoLangSegment(uint64_t a1, _QWORD *a2)
{
  unsigned __int16 *v4;
  unint64_t v5;
  _QWORD *v6;
  unsigned __int16 *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  v4 = (unsigned __int16 *)(a1 + 1888);
  v5 = *(unsigned __int16 *)(a1 + 1888);
  v6 = (_QWORD *)(a1 + 1896);
  v7 = (unsigned __int16 *)(a1 + 1890);
  result = appendItemRaw16(a1, (uint64_t *)(a1 + 1896), (unsigned __int16 *)(a1 + 1888), (_WORD *)(a1 + 1890), 0x38u);
  if ((result & 0x80000000) == 0)
  {
    if (v5 >= *v4)
    {
LABEL_8:
      result = 0;
      *a2 = *v6 + 56 * *v7 - 56;
    }
    else
    {
      v9 = 56 * v5 + 16;
      while (1)
      {
        v10 = *(_QWORD *)(a1 + 1896);
        v11 = *(unsigned __int16 *)(a1 + 1018);
        if (v11 <= *(unsigned __int16 *)(a1 + 1066))
          v11 = *(unsigned __int16 *)(a1 + 1066);
        v12 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 16 * v11);
        *(_QWORD *)(v10 + v9) = v12;
        if (!v12)
          break;
        ++v5;
        v9 += 56;
        if (v5 >= *v4)
          goto LABEL_8;
      }
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 48000, 0, v13, v14, v15, v16, v17);
      return 2345672714;
    }
  }
  return result;
}

uint64_t appendUnicodeRange(uint64_t a1, uint64_t a2, __int16 a3, int a4, int a5)
{
  _QWORD *v8;
  unsigned __int16 *v9;
  uint64_t result;
  uint64_t v11;

  v8 = (_QWORD *)(a2 + 8);
  v9 = (unsigned __int16 *)(a2 + 2);
  result = appendItemRaw16(a1, (uint64_t *)(a2 + 8), (unsigned __int16 *)a2, (_WORD *)(a2 + 2), 0xCu);
  if ((result & 0x80000000) == 0)
  {
    if (*v8)
    {
      v11 = *v8 + 12 * *v9;
      *(_WORD *)(v11 - 4) = a3;
      *(_DWORD *)(v11 - 12) = a4;
      *(_DWORD *)(v11 - 8) = a5 + 1;
    }
  }
  return result;
}

uint64_t appendItemRaw16(uint64_t a1, uint64_t *a2, unsigned __int16 *a3, _WORD *a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int16 v12;
  uint64_t v13;

  v5 = 2345672714;
  if (!a2)
    return 2345672711;
  v9 = *a2;
  if (v9)
  {
    v10 = (unsigned __int16)*a4;
    v11 = *a3;
    if (v10 < v11)
    {
LABEL_9:
      v5 = 0;
      *a4 = v10 + 1;
      return v5;
    }
    v12 = v11 + 10;
    v13 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), v9, (unsigned __int16)(v11 + 10) * (unint64_t)a5);
    if (v13)
    {
LABEL_8:
      *a2 = v13;
      *a3 = v12;
      LOWORD(v10) = *a4;
      goto LABEL_9;
    }
  }
  else
  {
    *a3 = 0;
    *a4 = 0;
    v12 = *a3 + 10;
    v13 = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), v12 * (unint64_t)a5);
    if (v13)
      goto LABEL_8;
  }
  return v5;
}

uint64_t normalizedDup(uint64_t a1, uint64_t a2, unsigned int a3, _WORD *a4)
{
  _WORD *v4;
  uint64_t result;
  int v8;
  unsigned __int16 v9;
  unsigned __int16 v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  _BOOL4 v14;
  unsigned int v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  void *v21;
  int v22;
  void *v23;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  size_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  int v41;
  char __s1[10];
  char __s2[10];
  uint64_t v44;

  v4 = a4;
  v44 = *MEMORY[0x1E0C80C00];
  a4[4] = 0;
  __s2[0] = 0;
  result = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), (4 * a3) | 1);
  if (result)
  {
    if (a3)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v11 = (char *)result;
      v12 = 0;
      v13 = a3 - 1;
      v36 = a3 - 2;
      v14 = 1;
      v37 = result;
      v15 = a3;
      v38 = a3;
      while (1)
      {
        v16 = (char *)(a2 + v12);
        v17 = *v16;
        if (v17 <= 0x7A)
        {
          switch(*v16)
          {
            case 27:
            case 32:
            case 95:
              break;
            case 28:
            case 29:
            case 30:
            case 31:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
              goto LABEL_59;
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 64:
            case 91:
            case 92:
            case 93:
            case 94:
            case 96:
              goto LABEL_6;
            default:
              if (v17 != 10 && v17 != 13)
                goto LABEL_59;
              break;
          }
          *v11++ = 32;
          ++v10;
          v22 = 1;
          goto LABEL_44;
        }
        v19 = v17 - 171 > 0x10 || ((1 << (v17 + 85)) & 0x10019) == 0;
        if (v19 && v17 - 123 >= 3)
        {
LABEL_59:
          if (v10)
          {
            v25 = (unsigned __int16)v4[4];
            if (v25 > 9)
              goto LABEL_68;
            if (v14)
            {
              if ((unint64_t)&v11[-v37 - v39 - v10 - v9 - 2] < 3)
              {
LABEL_67:
                v4[4] = v25 + 1;
                v4[v25 + 5] = v39;
                goto LABEL_68;
              }
            }
            else if (v41)
            {
              goto LABEL_68;
            }
            if (v40 | v8)
              goto LABEL_67;
LABEL_68:
            v9 = 0;
            v39 = (unsigned __int16)((_WORD)v11 - v37);
            ++*v4;
            v14 = 1;
            if (!v41 || v40)
            {
              v26 = 0;
              v27 = 0;
            }
            else
            {
              v26 = 0;
              v27 = 0;
              v9 = 0;
              ++v4[1];
            }
          }
          else
          {
            v27 = v40;
            v26 = v41;
          }
          v28 = *v16;
          if (v28 - 48 >= 0xA)
            v26 = 1;
          v41 = v26;
          if (v28 - 48 < 0xA)
            v27 = 1;
          v29 = utf8_determineUTF8CharLength(v28);
          v40 = v27;
          if (v29 >= 2)
          {
            v22 = v29;
            __s2[0] = 0;
            __strncpy_chk();
            __s1[v22] = 0;
            utf8_ToLower(__s1, 0, (uint64_t)__s2);
            v14 = v14 && strcmp(__s1, __s2);
            strcpy(v11, __s2);
            v32 = strlen(__s2);
            v10 = 0;
            v8 = 0;
            v11 += v32;
            goto LABEL_43;
          }
          v30 = ssft_tolower(*v16);
          *v11 = v30;
          if (!v14 || (v31 = *v16, v14 = 1, (v31 - 58) <= 0xFFFFFFF5) && v30 == v31)
            v14 = 0;
          v10 = 0;
          v8 = 0;
          ++v11;
          goto LABEL_50;
        }
LABEL_6:
        if (!v10)
          goto LABEL_24;
        v18 = (unsigned __int16)v4[4];
        if (v18 <= 9)
        {
          if (v14)
          {
            if ((unint64_t)&v11[-v37 - v39 - v10 - v9 - 2] < 3)
              goto LABEL_20;
          }
          else if (v41)
          {
            goto LABEL_21;
          }
          if (v40 | v8)
          {
LABEL_20:
            v4[4] = v18 + 1;
            v4[v18 + 5] = v39;
          }
        }
LABEL_21:
        v9 = 0;
        v39 = (unsigned __int16)((_WORD)v11 - v37);
        ++*v4;
        v14 = 1;
        if (v41 && !v40)
        {
          v40 = 0;
          v41 = 0;
          v9 = 0;
          v8 = 0;
          ++v4[1];
LABEL_24:
          if (v12)
            goto LABEL_27;
          goto LABEL_28;
        }
        v40 = 0;
        v41 = 0;
        v8 = 0;
        if (v12)
        {
LABEL_27:
          v20 = v12 - 1;
          if (!memchr("_ \r\n\x1B", *(unsigned __int8 *)(a2 + v20), 6uLL))
            goto LABEL_36;
        }
LABEL_28:
        if (v12 == (_DWORD)v13
          || v12 < v13 && memchr("_ \r\n\x1B", v16[1], 6uLL)
          || v12 == v36
        {
          v10 = 0;
          *v11++ = *v16;
LABEL_42:
          ++v9;
          v22 = 1;
          v8 = 1;
          goto LABEL_43;
        }
        if (!v12)
          goto LABEL_49;
        v20 = v12 - 1;
LABEL_36:
        v21 = memchr("_ \r\n\x1B", *(unsigned __int8 *)(a2 + v20), 6uLL);
        v10 = 0;
        v22 = 1;
        if (v21 || v12 == (_DWORD)v13)
          goto LABEL_43;
        if (v12 >= v13 || !memchr("_ \r\n\x1B", v16[1], 6uLL))
        {
          if (v12 == v36)
          {
            LODWORD(v16) = *v16;
            {
LABEL_49:
              v10 = 0;
LABEL_50:
              v22 = 1;
              goto LABEL_43;
            }
          }
          else
          {
            LOBYTE(v16) = *v16;
          }
          v10 = 0;
          *v11++ = (char)v16;
          goto LABEL_42;
        }
        v10 = 0;
LABEL_43:
        v15 = v38;
LABEL_44:
        v12 += v22;
        if (v12 >= v15)
        {
          v33 = (unsigned __int16)v4[4];
          if (v33 >= 0xA)
          {
            result = v37;
          }
          else
          {
            result = v37;
            if (v14)
            {
              v34 = v39;
              goto LABEL_92;
            }
            if (!v41)
            {
              v41 = 0;
              LOWORD(v34) = v39;
              goto LABEL_93;
            }
          }
LABEL_96:
          v35 = v40;
LABEL_97:
          ++*v4;
          if (v41 && !v35)
          {
            ++v4;
            goto LABEL_101;
          }
          goto LABEL_102;
        }
      }
    }
    v33 = (unsigned __int16)v4[4];
    if (v33 < 0xA)
    {
      v40 = 0;
      v41 = 0;
      v34 = 0;
      v10 = 0;
      v9 = 0;
      v8 = 0;
      v11 = (char *)result;
LABEL_92:
      if ((unint64_t)&v11[-result - v34 - v10 - v9 - 2] >= 3)
      {
LABEL_93:
        if (!(v40 | v8))
        {
          v35 = 0;
          goto LABEL_97;
        }
      }
      v4[4] = v33 + 1;
      v4[v33 + 5] = v34;
      goto LABEL_96;
    }
    v11 = (char *)result;
LABEL_101:
    ++*v4;
LABEL_102:
    *v11 = 0;
  }
  return result;
}

unsigned __int8 *nextWord(uint64_t *a1)
{
  _BYTE *v2;
  char v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 *v6;
  char v8;
  int v9;
  uint64_t v10;

  if (!a1)
    return 0;
  v2 = (_BYTE *)*a1;
  if (!*a1)
    return 0;
  v3 = *v2;
  if (!*v2)
    return 0;
  v4 = v2 + 1;
  while (memchr(" \t\n", v3, 4uLL))
  {
    v5 = *v4++;
    v3 = v5;
    if (!v5)
      return 0;
  }
  v6 = v4 - 1;
  *a1 = (uint64_t)(v4 - 1);
  v8 = *(v4 - 1);
  if (v8)
  {
    while (!memchr(" \t\n", v8, 4uLL))
    {
      *a1 = (uint64_t)v4;
      v9 = *v4++;
      v8 = v9;
      if (!v9)
        goto LABEL_12;
    }
    *(v4 - 1) = 0;
    v10 = *a1 + 1;
  }
  else
  {
LABEL_12:
    v10 = 0;
  }
  *a1 = v10;
  return v6;
}

uint64_t calcTScore(uint64_t a1, char *__s, uint64_t a3, __int16 a4, unsigned int a5, void *a6, uint64_t *a7)
{
  unsigned int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int16 v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  __int16 v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  const char *v31;
  int v32;
  char *v33;
  BOOL v34;
  _BOOL4 v35;
  char *v36;
  unint64_t v37;
  char *v38;
  BOOL v39;
  int *v40;
  uint64_t v41;
  _DWORD *v42;
  int v43;
  int v44;
  unsigned int v46;
  unsigned int v47;
  _DWORD *v48;
  unsigned int v52;
  _BYTE __c[11];
  _DWORD v54[128];
  _BYTE v55[13];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (a5)
    bzero(a6, 4 * a5);
  v52 = a5;
  v11 = (unsigned __int16)(strlen(__s) + 4);
  v12 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), v11 + 1);
  if (v12)
  {
    v17 = (uint64_t)v12;
    memset(__c, 0, sizeof(__c));
    strcpy(v12, "__");
    strcpy(v12 + 2, __s);
    v18 = 0;
    strcpy((char *)(v17 + v11 - 2), "__");
    v55[3] = 0;
    if (v11 < 3)
    {
LABEL_40:
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v17);
    }
    else
    {
      v19 = 0;
      v20 = 0;
      v47 = v11 - 2;
      v48 = a6;
      while (1)
      {
        v55[0] = 0;
        v21 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(v17 + v20));
        v22 = 0;
        v23 = 0;
        do
        {
          v24 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(v17 + (v22 + v19)));
          __strncat_chk();
          v22 += v24;
        }
        while (v23++ < 2);
        v26 = v21 <= 1 ? 0 : v21;
        v27 = v26 ? v26 - 1 : 0;
        *(_WORD *)&__c[1] = a4;
        v18 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _BYTE *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 64) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), a3, v55, &__c[3], &__c[1], __c);
        if ((v18 & 0x80000000) != 0)
          break;
        v30 = v52;
        if (v52)
          bzero(v54, 4 * v52);
        if (*(_WORD *)&__c[1])
        {
          v31 = **(const char ***)&__c[3];
          v32 = __c[0];
          v33 = strchr(**(char ***)&__c[3], __c[0]);
          if (v33)
            v34 = v52 == 0;
          else
            v34 = 1;
          if (v34)
          {
            LOWORD(v37) = 0;
            v35 = v52 != 0;
          }
          else
          {
            v36 = v33;
            v37 = 0;
            do
            {
              if (v36 != v31)
              {
                *v36 = 0;
                v54[v37] = LH_atou(v31);
                v32 = __c[0];
              }
              ++v37;
              v31 = v36 + 1;
              v38 = strchr(v36 + 1, v32);
              v35 = v37 < v52;
              if (!v38)
                break;
              v36 = v38;
            }
            while (v37 < v52);
          }
          if (*v31)
            v39 = !v35;
          else
            v39 = 1;
          v30 = v52;
          if (!v39)
            v54[(unsigned __int16)v37] = LH_atou(v31);
        }
        if (v30)
        {
          v40 = v54;
          v41 = v52;
          v42 = v48;
          do
          {
            v44 = *v40++;
            v43 = v44;
            if (!v44)
              v43 = *(_DWORD *)(a1 + 1152);
            *v42++ += v43;
            --v41;
          }
          while (v41);
        }
        traceScore(a1, (uint64_t)"calcTScore TSCORES ACCUMULATED", (uint64_t)v55, v30, a7, (uint64_t)v48, v28, v29);
        v20 += v27 + 1;
        v19 = v20;
        if (v47 <= v20)
          goto LABEL_40;
      }
    }
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 48000, 0, v13, v14, v15, v16, v46);
    return 2345672714;
  }
  return v18;
}

uint64_t traceScore(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  v8 = a6;
  LODWORD(v10) = a4;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
  if (a2)
    result = log_OutText(v12, (uint64_t)"FE_LID", 5, 0, (uint64_t)"%s %s", a6, a7, a8, a2);
  else
    result = log_OutText(v12, (uint64_t)"FE_LID", 5, 0, (uint64_t)"%s", a6, a7, a8, a3);
  if (v8)
  {
    if ((_DWORD)v10)
    {
      v17 = v10;
      do
      {
        v18 = *a5;
        a5 += 2;
        v8 += 4;
        result = log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"%s: %7lu", v14, v15, v16, v18);
        --v17;
      }
      while (v17);
    }
  }
  else if ((_DWORD)v10)
  {
    v10 = v10;
    v19 = a5 + 1;
    do
    {
      v20 = *(v19 - 1);
      v19 += 2;
      result = log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"%s: %7lu", v14, v15, v16, v20);
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t compareScore(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a1 + 8) - *(_DWORD *)(a2 + 8));
}

uint64_t IsFlatDistribution(uint64_t a1, uint64_t a2, char *__s, int a4)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  uint64_t v14;
  int v15;

  v8 = strchr(__s, 64);
  if ((!v8 || !strchr(v8, 46)) && !strstr(__s, "http") && !strstr(__s, "ftp") && !strstr(__s, "www."))
  {
    v12 = strstr(__s, ".com");
    v13 = v12 == 0;
    if (*(_WORD *)(a2 + 8) && !v12)
    {
      v14 = 5;
      do
      {
        v15 = *(unsigned __int16 *)(a2 + 2 * v14);
        v13 = v15 != a4;
        if (v14 - 4 >= (unint64_t)*(unsigned __int16 *)(a2 + 8))
          break;
        ++v14;
      }
      while (v15 != a4);
    }
    if (v13)
      return 0;
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"Acronym or digit or punctuation or url or e-mail address: %s => flat distribution with very small bias toward main language or memory", v9, v10, v11, (uint64_t)__s);
  return 1;
}

uint64_t dcteg_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 2)
    return 2231377921;
  result = 0;
  *a2 = &IDcteg;
  return result;
}

uint64_t dcteg_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t NullHandle;
  int v10;
  _BOOL4 v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v22;
  uint64_t v23;

  v8 = 2231377927;
  v23 = 0;
  NullHandle = safeh_GetNullHandle();
  v11 = safeh_HandlesEqual((uint64_t)a3, a4, NullHandle, v10);
  if (a5)
  {
    if (!v11)
    {
      *(_QWORD *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      inited = InitRsrcFunction(a3, a4, &v23);
      if ((inited & 0x80000000) == 0)
      {
        v13 = inited;
        v14 = heap_Calloc(*(_QWORD **)(v23 + 8), 1, 80);
        if (v14)
        {
          v19 = v14;
          *(_QWORD *)v14 = a3;
          *(_QWORD *)(v14 + 8) = a4;
          v20 = v23;
          *(_QWORD *)(v14 + 16) = v23;
          *(_DWORD *)(v14 + 72) = 1;
          dctlist_ObjOpen((_QWORD *)(v14 + 24), *(_QWORD *)(v20 + 8));
          *(_QWORD *)a5 = v19;
          *(_DWORD *)(a5 + 8) = 752;
          return v13;
        }
        else
        {
          log_OutPublic(*(_QWORD *)(v23 + 32), (uint64_t)"DCTEG", 4400, 0, v15, v16, v17, v18, v22);
          return 2231377930;
        }
      }
    }
  }
  return v8;
}

uint64_t dcteg_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t inited;
  uint64_t Next;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  v3 = safeh_HandleCheck(a1, a2, 752, 80);
  if ((v3 & 0x80000000) != 0)
    return v3;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v9);
  if ((inited & 0x80000000) == 0)
  {
    Next = dctlist_GetNext(a1 + 24, &v10);
    if (Next)
    {
      v6 = Next;
      do
      {
        p_unloadDct(a1, v6);
        v6 = dctlist_GetNext(a1 + 24, &v10);
      }
      while (v6);
    }
    dctlist_ObjClose(a1 + 24);
    v7 = *(_QWORD *)(a1 + 48);
    if (v7)
      inited = CloseEDCTObj(v7);
    heap_Free(*(_QWORD **)(v9 + 8), a1);
  }
  return inited;
}

uint64_t dcteg_LoadDictionary(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t UDct;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  const char *v36;
  _QWORD *v37;
  char *v38;
  const char *v39;
  char *v40;
  const char *v41;
  int v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  const char *v46;
  char *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  int v57;
  char *v58;
  const char *v59;
  int v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t *v77;

  v4 = 2231377930;
  v77 = 0;
  v5 = 2231377927;
  if (!a3 || !a4)
    return v5;
  *(_QWORD *)a4 = 0;
  *(_DWORD *)(a4 + 8) = 0;
  inited = safeh_HandleCheck(a1, a2, 752, 80);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v77);
  if ((inited & 0x80000000) != 0)
    return inited;
  if (*(_QWORD *)a3 && p_checkIfPresent(a1, *(const char **)a3))
  {
    v14 = *(const char **)a3;
    if (!*(_QWORD *)a3)
      v14 = "Unknown";
    log_OutText(v77[4], (uint64_t)"DCTEG", 3, 0, (uint64_t)"dcteg_LoadDictionary failed, already loaded: %s", v11, v12, v13, (uint64_t)v14);
    return 2231378968;
  }
  v16 = *(const char **)(a3 + 8);
  if (v16 && *v16 && p_checkIfPresent(a1, v16))
  {
    v17 = *(const char **)(a3 + 8);
    if (!v17)
      v17 = "Unknown";
    log_OutText(v77[4], (uint64_t)"DCTEG", 3, 0, (uint64_t)"dcteg_LoadDictionary failed, already loaded: %s", v11, v12, v13, (uint64_t)v17);
    return 2231377939;
  }
  if (!*(_QWORD *)a3)
  {
    if (!*(_QWORD *)(a3 + 16))
    {
      log_OutPublic(v77[4], (uint64_t)"DCTEG", 4408, 0, v10, v11, v12, v13, v76);
      return v5;
    }
    v37 = (_QWORD *)heap_Calloc((_QWORD *)v77[1], 1, 112);
    v23 = v77;
    if (!v37)
      goto LABEL_44;
    v24 = (uint64_t)v37;
    *v37 = v77[1];
    v38 = *(char **)(a3 + 32);
    if (v38)
    {
      v39 = "application/edct-bin-dictionary";
      if (strstr(*(char **)(a3 + 32), "application/edct-bin-dictionary"))
        goto LABEL_40;
      if (strstr(v38, "application/octet-stream"))
        goto LABEL_40;
      v39 = "application/cdct-bin-dictionary";
      if (strstr(v38, "application/cdct-bin-dictionary"))
        goto LABEL_40;
      v39 = "application/x-vocalizer-userdct-pointer";
      if (strstr(v38, "application/x-vocalizer-userdct-pointer"))
        goto LABEL_40;
      if (strstr(v38, "application/vmp-bin-dictionary"))
      {
        v39 = "application/edct-bin-dictionary";
LABEL_40:
        *(_QWORD *)(v24 + 16) = v39;
        v40 = strstr(v38, "mode=langoverwriting");
        v41 = "mode=standard";
        if (v40)
          v41 = "mode=langoverwriting";
        *(_QWORD *)(v24 + 32) = v41;
        if (strstr(v38, "application/x-vocalizer-userdct-pointer"))
          v42 = 4;
        else
          v42 = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(v24 + 64) = v42;
        *(_DWORD *)(v24 + 44) = 0;
        *(_QWORD *)(v24 + 48) = *(_QWORD *)(a3 + 16);
        goto LABEL_50;
      }
    }
    log_OutPublic(v77[4], (uint64_t)"DCTEG", 4403, "%s%s%s%s", v19, v20, v21, v22, "name");
    v4 = 2231378966;
    goto LABEL_90;
  }
  v18 = heap_Calloc((_QWORD *)v77[1], 1, 112);
  v23 = v77;
  if (!v18)
  {
LABEL_44:
    log_OutPublic(v23[4], (uint64_t)"DCTEG", 4400, 0, v19, v20, v21, v22, v76);
    return 2231377930;
  }
  v24 = v18;
  *(_QWORD *)v18 = v77[1];
  v25 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v18 + 96) = 0;
  v26 = (uint64_t *)(v18 + 96);
  *(_QWORD *)(v18 + 48) = 0;
  v27 = v18 + 48;
  *(_DWORD *)(v18 + 44) = 0;
  *(_DWORD *)(v18 + 64) = 0;
  v28 = v18 + 64;
  UDct = brk_DataOpenEx(*(_QWORD *)(v25 + 24), *(_QWORD *)a3, 0, v18 + 96);
  if ((UDct & 0x80000000) != 0)
    goto LABEL_86;
  UDct = brk_DataMapEx(*(_QWORD *)(v25 + 24), *v26, 0, v28, v27);
  if ((UDct & 0x80000000) != 0)
    goto LABEL_86;
  v35 = *(char **)(a3 + 32);
  if (!v35 || !*v35)
  {
    log_OutPublic(*(_QWORD *)(v25 + 32), (uint64_t)"DCTEG", 4415, "%s%s", v31, v32, v33, v34, "uri");
    v4 = 2231377922;
    goto LABEL_90;
  }
  v36 = "application/edct-bin-dictionary";
  if (strstr(*(char **)(a3 + 32), "application/edct-bin-dictionary")
    || strstr(v35, "application/octet-stream")
    || (v36 = "application/cdct-bin-dictionary", strstr(v35, "application/cdct-bin-dictionary"))
    || (v36 = "application/x-vocalizer-userdct-pointer", strstr(v35, "application/x-vocalizer-userdct-pointer")))
  {
    *(_QWORD *)(v24 + 16) = v36;
  }
  else
  {
    *(_QWORD *)(v24 + 16) = "application/octet-stream";
  }
  if (strstr(v35, "mode=langoverwriting"))
    *(_QWORD *)(v24 + 32) = "mode=langoverwriting";
  else
    *(_QWORD *)(v24 + 32) = "mode=standard";
LABEL_50:
  v43 = v77;
  v44 = *(char **)(a3 + 32);
  if (v44)
  {
    v45 = strstr(v44, "type=");
    if (v45)
    {
      v46 = v45 + 5;
      v47 = strchr(v45 + 5, 59);
      if (!v47)
        v47 = (char *)&v46[strlen(v46)];
      v48 = (_DWORD)v47 - (_DWORD)v46;
      v49 = heap_Alloc(v43[1], ((_DWORD)v47 - (_DWORD)v46 + 1));
      *(_QWORD *)(v24 + 24) = v49;
      if (!v49)
      {
        v72 = v43[4];
        goto LABEL_89;
      }
      v54 = v48;
      if (v48)
      {
        v55 = 0;
        do
        {
          *(_BYTE *)(*(_QWORD *)(v24 + 24) + v55) = __tolower(v46[v55]);
          ++v55;
        }
        while (v54 != v55);
        v49 = *(_QWORD *)(v24 + 24);
      }
      *(_BYTE *)(v49 + v54) = 0;
      v43 = v77;
    }
    else
    {
      *(_QWORD *)(v24 + 24) = 0;
    }
  }
  if (*(_QWORD *)(a3 + 8))
    v56 = *(const char **)(a3 + 8);
  else
    v56 = "Unknown";
  v57 = strlen(v56);
  v58 = (char *)heap_Alloc(v43[1], (v57 + 1));
  *(_QWORD *)(v24 + 8) = v58;
  if (!v58
    || ((strcpy(v58, v56), *(_QWORD *)a3) ? (v59 = *(const char **)a3) : (v59 = "Unknown"),
        v60 = strlen(v59),
        v61 = (char *)heap_Alloc(v77[1], (v60 + 1)),
        (*(_QWORD *)(v24 + 56) = v61) == 0))
  {
    v72 = v77[4];
LABEL_89:
    log_OutPublic(v72, (uint64_t)"DCTEG", 4400, 0, v50, v51, v52, v53, v76);
    goto LABEL_90;
  }
  strcpy(v61, v59);
  if (*(_QWORD *)(v24 + 56) && *(_QWORD *)(a3 + 32))
    log_OutEvent((uint64_t **)v77[4], 12, "%s%s%s%s", v62, v63, v64, v65, v66, "URI");
  v67 = *(const char **)(v24 + 16);
  if (strcmp(v67, "application/edct-bin-dictionary")
    && strcmp(v67, "application/cdct-bin-dictionary")
    && strcmp(v67, "application/x-vocalizer-userdct-pointer"))
  {
    log_OutPublic(v77[4], (uint64_t)"DCTEG", 4403, "%s%s%s%s", v68, v69, v70, v71, "name");
LABEL_85:
    v4 = v5;
    goto LABEL_90;
  }
  v73 = *(_QWORD *)(a1 + 48);
  if (!v73)
  {
    UDct = OpenEDCTObj(*(_WORD **)a1, *(_QWORD *)(a1 + 8), a1 + 48);
    if ((UDct & 0x80000000) != 0)
    {
LABEL_86:
      v4 = UDct;
      goto LABEL_90;
    }
    v73 = *(_QWORD *)(a1 + 48);
  }
  UDct = LoadUDct(v73, v24);
  if ((UDct & 0x80000000) != 0)
    goto LABEL_86;
  if (*(_DWORD *)(a1 + 72))
  {
    UDct = dcteg_hlp_InitializeMWDct((uint64_t)v77, a1, v24);
    if ((UDct & 0x80000000) != 0)
      goto LABEL_86;
  }
  *(_DWORD *)(v24 + 40) = 1;
  v5 = dctlist_Add(a1 + 24, v24);
  if ((v5 & 0x80000000) == 0)
  {
    *(_QWORD *)a4 = v24;
    *(_DWORD *)(a4 + 8) = 753;
    goto LABEL_85;
  }
  log_OutPublic(v77[4], (uint64_t)"DCTEG", 4418, "%s%s", v31, v32, v33, v34, "name");
  v4 = v5 | 0x85002000;
LABEL_90:
  if (*(_QWORD *)(v24 + 56) && *(_QWORD *)(a3 + 32))
    log_OutEvent((uint64_t **)v77[4], 13, "%s%s%s%s", v30, v31, v32, v33, v34, "URI");
  v74 = *(_QWORD *)(v24 + 48);
  if (v74)
    brk_DataUnmap(v77[3], *(_QWORD *)(v24 + 96), v74);
  v75 = *(_QWORD *)(v24 + 96);
  if (v75)
    brk_DataClose(v77[3], v75);
  if ((v4 & 0x80000000) != 0)
    p_unloadDct(a1, v24);
  return v4;
}

uint64_t dcteg_UnloadDictionary(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v15 = 0;
  inited = safeh_HandleCheck(a1, a2, 752, 80);
  if ((inited & 0x80000000) == 0)
  {
    inited = safeh_HandleCheck(a3, a4, 753, 112);
    if ((inited & 0x80000000) == 0)
    {
      inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v15);
      if ((inited & 0x80000000) == 0)
      {
        v8 = dctlist_Remove(a1 + 24, a3);
        if ((v8 & 0x80000000) != 0)
        {
          v13 = v8;
          log_OutPublic(*(_QWORD *)(v15 + 32), (uint64_t)"DCTEG", 4410, "%s%s", v9, v10, v11, v12, "name");
          return v13;
        }
        return p_unloadDct(a1, a3);
      }
    }
  }
  return inited;
}

uint64_t dcteg_SetExternalCallback(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  v8 = 0;
  result = safeh_HandleCheck(a1, a2, 752, 80);
  if ((result & 0x80000000) == 0)
  {
    result = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v8);
    if ((result & 0x80000000) == 0)
    {
      *(_QWORD *)(a1 + 56) = a3;
      *(_QWORD *)(a1 + 64) = a4;
    }
  }
  return result;
}

uint64_t dcteg_IsDictActive(uint64_t a1, int a2)
{
  uint64_t Next;
  uint64_t v4;
  const char *v5;
  uint64_t v7;

  v7 = 0;
  if ((safeh_HandleCheck(a1, a2, 752, 80) & 0x80000000) != 0)
    return 0;
  Next = dctlist_GetNext(a1 + 24, &v7);
  if (!Next)
    return *(_QWORD *)(a1 + 56) != 0;
  v4 = Next;
  while (1)
  {
    v5 = *(const char **)(v4 + 16);
    if ((!strcmp(v5, "application/edct-bin-dictionary")
       || !strcmp(v5, "application/cdct-bin-dictionary")
       || !strcmp(v5, "application/x-vocalizer-userdct-pointer"))
      && *(_DWORD *)(v4 + 40) == 1)
    {
      break;
    }
    v4 = dctlist_GetNext(a1 + 24, &v7);
    if (!v4)
      return *(_QWORD *)(a1 + 56) != 0;
  }
  return 1;
}

uint64_t dcteg_EnableDictionary(uint64_t a1, int a2, uint64_t a3, int a4, unsigned int a5)
{
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = 0;
  inited = safeh_HandleCheck(a1, a2, 752, 80);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = safeh_HandleCheck(a3, a4, 753, 112);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v20);
  if ((inited & 0x80000000) != 0)
    return inited;
  if (*(_DWORD *)(a3 + 40) == 1)
  {
    v13 = *(const char **)(a3 + 8);
    if (!v13)
      v13 = "Unknown";
    log_OutText(*(_QWORD *)(v20 + 32), (uint64_t)"DCTEG", 3, 0, (uint64_t)"dcteg_EnableDictionary failed, already enabled: %s", v10, v11, v12, (uint64_t)v13);
    return 2231378970;
  }
  else
  {
    v14 = dctlist_Move(a1 + 24, a3, a5);
    if ((v14 & 0x80000000) != 0)
      log_OutPublic(*(_QWORD *)(v20 + 32), (uint64_t)"DCTEG", 4411, "%s%s", v16, v17, v18, v19, "name");
    else
      *(_DWORD *)(a3 + 40) = 1;
  }
  return v14;
}

uint64_t dcteg_DisableDictionary(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v17;
  uint64_t v18;

  inited = safeh_HandleCheck(a3, a4, 753, 112);
  if ((inited & 0x80000000) != 0)
    return inited;
  v18 = 0;
  inited = safeh_HandleCheck(a1, a2, 752, 80);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v18);
  if ((inited & 0x80000000) != 0)
    return inited;
  if (*(_DWORD *)(a3 + 40))
  {
    v15 = dctlist_Move(a1 + 24, a3, 0xFFFFFFFF);
    if ((v15 & 0x80000000) != 0)
    {
      log_OutPublic(*(_QWORD *)(v18 + 32), (uint64_t)"DCTEG", 4412, "%s%s", v11, v12, v13, v14, "name");
      return v15 | 0x85002000;
    }
    else
    {
      *(_DWORD *)(a3 + 40) = 0;
    }
  }
  else
  {
    v17 = *(const char **)(a3 + 8);
    if (!v17)
      v17 = "Unknown";
    log_OutText(*(_QWORD *)(v18 + 32), (uint64_t)"DCTEG", 3, 0, (uint64_t)"dcteg_DisableDictionary failed, already disabled: %s", v8, v9, v10, (uint64_t)v17);
    return 2231378957;
  }
  return v15;
}

uint64_t dcteg_DisableAllDictionaries(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  _DWORD *v7;

  v7 = 0;
  v3 = safeh_HandleCheck(a1, a2, 752, 80);
  if ((v3 & 0x80000000) == 0)
  {
    v4 = a1 + 24;
    for (i = dctlist_GetNext(v4, (uint64_t *)&v7); i; i = dctlist_GetNext(v4, (uint64_t *)&v7))
    {
      *v7 = -1;
      *(_DWORD *)(i + 40) = 0;
    }
  }
  return v3;
}

uint64_t dcteg_Lookup_Utf8(_QWORD *a1, uint64_t a2, _BYTE *a3, const char *a4, char *a5, __int16 *a6, const char *a7, _DWORD *a8, char *a9, _BYTE *a10, _QWORD *a11, int a12)
{
  uint64_t v18;
  uint64_t NullHandle;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t Str;
  size_t v25;
  int v26;
  char *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unsigned int v35;
  unsigned __int8 v36;
  uint64_t v37;
  const char *v38;
  uint64_t Next;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t (*v55)(_QWORD, _BYTE *, __int16 *, const char *);
  unsigned int v56;
  __int16 v57;
  uint64_t v58;
  unsigned int v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  int v64;
  char __s[4];
  _QWORD *v66;
  uint64_t v67;
  char __s1[8];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v18 = 2231377920;
  v66 = 0;
  v67 = 0;
  NullHandle = safeh_GetNullHandle();
  if (a12 == 2)
    v21 = 111;
  else
    v21 = 0;
  if (a12 == 1)
    v21 = 108;
  if (!a1)
    return 2231377928;
  v61 = v20;
  v62 = NullHandle;
  v59 = v21;
  v22 = *(_QWORD *)(a1[2] + 40);
  *(_QWORD *)__s1 = 0;
  __s[0] = 0;
  Str = paramc_ParamGetStr(v22, (uint64_t)"langcode", __s1);
  if ((Str & 0x80000000) != 0)
    return Str;
  v60 = a3;
  if (!*(_QWORD *)__s1 || strlen(*(const char **)__s1) != 3)
    return 2231377920;
  __strcpy_chk();
  if ((objc_GetObject(*(_QWORD *)(a1[2] + 48), (uint64_t)"CLMOBJECT", &v66) & 0x80000000) != 0)
  {
    v58 = 0;
  }
  else
  {
    v58 = v66[1];
    v61 = v66[3];
    v62 = v66[2];
  }
  __s1[0] = 0;
  if (a4 && (v25 = strlen(a4)) != 0)
  {
    if (v25 + 1 > 0xC)
      goto LABEL_72;
    __strcpy_chk();
    if ((int)strlen(__s1) >= 1)
    {
      v26 = 0;
      do
      {
        __s1[v26] = __tolower(__s1[v26]);
        ++v26;
      }
      while ((int)strlen(__s1) > v26);
    }
    v27 = strstr(__s1, "normal");
    if (v27 || (v27 = strstr(__s1, "lid")) != 0)
      strcpy(v27, __s);
  }
  else
  {
    __strcpy_chk();
  }
  if (a5)
  {
    v28 = strlen(a5);
    v29 = heap_Alloc(*(_QWORD *)(a1[2] + 8), (v28 + 1));
    if (!v29)
    {
      log_OutPublic(*(_QWORD *)(a1[2] + 32), (uint64_t)"DCTEG", 4400, 0, v30, v31, v32, v33, v56);
      v18 = 2231377930;
      goto LABEL_72;
    }
    v34 = (char *)v29;
    if ((int)strlen(a5) < 1)
    {
      v37 = 0;
    }
    else
    {
      v35 = 0;
      v36 = 0;
      do
      {
        utf8_ToLower(a5, v35, (uint64_t)&v34[v36++]);
        v35 = v36;
      }
      while (v36 < (int)strlen(a5));
      v37 = v36;
    }
    v38 = a7;
    v34[v37] = 0;
  }
  else
  {
    v38 = a7;
    v34 = 0;
  }
  Next = dctlist_GetNext((uint64_t)(a1 + 3), &v67);
  if (!Next)
  {
LABEL_59:
    v55 = (uint64_t (*)(_QWORD, _BYTE *, __int16 *, const char *))a1[7];
    if (v55)
    {
      Str = v55(a1[8], v60, a6, v38);
    }
    else if ((int)Str < 0)
    {
      Str = Str;
    }
    else
    {
      Str = 2231377940;
    }
    goto LABEL_69;
  }
  v40 = Next;
  v57 = 0;
  while (1)
  {
    v41 = *(const char **)(v40 + 16);
    if (strcmp(v41, "application/edct-bin-dictionary")
      && strcmp(v41, "application/cdct-bin-dictionary")
      && strcmp(v41, "application/x-vocalizer-userdct-pointer"))
    {
      log_OutPublic(*(_QWORD *)(a1[2] + 32), (uint64_t)"DCTEG", 4413, "%s%s%s%s", v42, v43, v44, v45, "name");
      Str = 2231377927;
      goto LABEL_69;
    }
    if (*(_DWORD *)(v40 + 40) == 1)
      break;
LABEL_58:
    v40 = dctlist_GetNext((uint64_t)(a1 + 3), &v67);
    if (!v40)
      goto LABEL_59;
  }
  if (!strcmp(*(const char **)(v40 + 32), "mode=langoverwriting"))
    v46 = 0;
  else
    v46 = __s1;
  if (a6)
    v57 = *a6;
  Str = RetrieveUDctEntry((uint64_t)a1, v40, v46, v34, v60, v38, a6, a9, a10, a8);
  if ((Str & 0x80000000) != 0)
  {
LABEL_56:
    if (a12)
      log_OutTraceTuningData(*(uint64_t ***)(a1[2] + 32), v59, (uint64_t)"%s%s %s%s %s%u", v47, v48, v49, v50, v51, "NAME");
    goto LABEL_58;
  }
  v64 = 1;
  if (v58)
  {
    v52 = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(v62, v61, v52, v53) && *a8 == 1)
    {
      log_OutText(*(_QWORD *)(a1[2] + 32), (uint64_t)"DCTEG", 4, 0, (uint64_t)"Validating transcription [%s] [LNG=%s LOO=%s] [%s]", v49, v50, v51, (uint64_t)v38);
      v54 = (*(uint64_t (**)(uint64_t, uint64_t, char *, _BYTE *, const char *, int *))(v58 + 88))(v62, v61, a9, a10, v38, &v64);
      Str = v54;
      if (a6 && (v54 & 0x80000000) != 0)
      {
        *a6 = v57;
      }
      else if ((v54 & 0x80000000) == 0)
      {
        goto LABEL_61;
      }
      goto LABEL_56;
    }
  }
LABEL_61:
  if (a11)
    *a11 = *(_QWORD *)(v40 + 56);
  if (a12)
    log_OutTraceTuningData(*(uint64_t ***)(a1[2] + 32), v59, (uint64_t)"%s%s %s%s %s%s %s%u", v47, v48, v49, v50, v51, "NAME");
LABEL_69:
  if (v34)
    heap_Free(*(_QWORD **)(a1[2] + 8), (uint64_t)v34);
  v18 = Str;
LABEL_72:
  if (v58)
    objc_ReleaseObject(*(_QWORD *)(a1[2] + 48), (uint64_t)"CLMOBJECT");
  return v18;
}

uint64_t dcteg_LookupMultiWordLengths(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, char *a5, unsigned __int16 *a6)
{
  uint64_t v6;
  size_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Next;
  unsigned __int16 v17;
  char v18;
  unsigned __int16 v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int16 v23;
  int v24;
  unsigned __int16 v25;
  char *__s1;
  char *__s;
  uint64_t v29[3];

  v29[2] = *MEMORY[0x1E0C80C00];
  v6 = 2231377940;
  __s = 0;
  v29[0] = 0;
  v7 = *a4;
  __s1 = 0;
  if (!a1)
    return 2231377928;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13
    || (v14 = *(_QWORD *)(v13 + 40)) == 0
    || (paramc_ParamGetStr(v14, (uint64_t)"disablemultiworddictionarywithoutescseqlookup", &__s1) & 0x80000000) != 0
    || !__s1
    || strcmp(__s1, "yes"))
  {
    *a5 = 0;
    v15 = a1 + 24;
    Next = dctlist_GetNext(v15, v29);
    if (Next)
    {
      v17 = 0;
      v18 = 0;
      do
      {
        while ((ssftmap_FindReadOnly(*(_QWORD *)(Next + 88), a3, &__s) & 0x80000000) == 0 && strlen(__s) + v17 < v7)
        {
          strcat(a5, __s);
          v17 += strlen(__s);
          *a4 = v17;
          Next = dctlist_GetNext(v15, v29);
          v6 = 0;
          v18 = 1;
          if (!Next)
            goto LABEL_17;
        }
        Next = dctlist_GetNext(v15, v29);
      }
      while (Next);
      if ((v18 & 1) == 0)
        return v6;
LABEL_17:
      if (*a4)
      {
        v19 = strlen(a5);
        v20 = v19;
        if (v19)
        {
          v21 = 0;
          v22 = v19;
          do
          {
            while (v20 > v21 && a5[v21] == 32)
              ++v21;
            if (v20 <= v21)
            {
              v23 = 0;
            }
            else
            {
              v23 = 0;
              do
              {
                v24 = a5[v21];
                if (v24 == 32)
                  break;
                *((_BYTE *)v29 + v23) = v24;
                ++v21;
                ++v23;
              }
              while (v20 > v21);
            }
            *((_BYTE *)v29 + v23) = 0;
            v25 = (unsigned __int16)LH_atoi((const char *)v29);
            if (*a6 < v25)
              *a6 = v25;
          }
          while (v21 < v22);
        }
      }
      return 0;
    }
  }
  return v6;
}

uint64_t p_unloadDct(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v27 = 0;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v27);
  if ((inited & 0x80000000) == 0)
  {
    log_OutTraceTuningData(*(uint64_t ***)(v27 + 32), 103, (uint64_t)"%s%s %s%s", v4, v5, v6, v7, v8, "BEG");
    v14 = *(_QWORD *)(a2 + 88);
    if (!v14 || (inited = ssftmap_ObjClose(v14), (inited & 0x80000000) == 0))
    {
      v16 = *(const char **)(a2 + 16);
      if (!v16)
      {
        inited = 2231377927;
        log_OutPublic(*(_QWORD *)(v27 + 32), (uint64_t)"DCTEG", 4405, "%s%s", v10, v11, v12, v13, "name");
        goto LABEL_13;
      }
      if (strcmp(*(const char **)(a2 + 16), "application/edct-bin-dictionary")
        && strcmp(v16, "application/cdct-bin-dictionary")
        && strcmp(v16, "application/x-vocalizer-userdct-pointer"))
      {
        inited = 2231377927;
        log_OutPublic(*(_QWORD *)(v27 + 32), (uint64_t)"DCTEG", 4404, "%s%s%s%s", v17, v18, v19, v20, "name");
LABEL_13:
        v22 = *(_QWORD *)(a2 + 8);
        if (v22)
          heap_Free(*(_QWORD **)(v27 + 8), v22);
        v23 = *(_QWORD *)(a2 + 24);
        if (v23)
          heap_Free(*(_QWORD **)(v27 + 8), v23);
        v24 = *(_QWORD *)(a2 + 56);
        if (v24)
          heap_Free(*(_QWORD **)(v27 + 8), v24);
        v25 = *(_QWORD *)(a2 + 48);
        if (v25 && *(_DWORD *)(a2 + 44))
          heap_Free(*(_QWORD **)(v27 + 8), v25);
        heap_Free(*(_QWORD **)(v27 + 8), a2);
        goto LABEL_23;
      }
      v21 = *(_QWORD *)(a1 + 48);
      if (!v21)
        goto LABEL_13;
      inited = UnloadUDct(v21, (_QWORD *)a2);
      if ((inited & 0x80000000) == 0)
        goto LABEL_13;
    }
LABEL_23:
    log_OutTraceTuningData(*(uint64_t ***)(v27 + 32), 103, (uint64_t)"%s%s %s%u", v15, v10, v11, v12, v13, "END");
  }
  return inited;
}

uint64_t p_checkIfPresent(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t Next;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  v3 = a1 + 24;
  do
  {
    Next = dctlist_GetNext(v3, &v7);
    v5 = Next;
  }
  while (Next && strcmp(a2, *(const char **)(Next + 8)));
  return v5;
}

uint64_t dcteg_hlp_InitializeMWDct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int Keys;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned __int16 v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int16 NextUtf8Offset;
  char *v18;
  size_t v19;
  int v20;
  unsigned __int16 v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int i;
  uint64_t v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  const char *v34;
  size_t v35;
  size_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char **v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  char *__s1[2];
  __int128 v64;
  _QWORD *(*v65)(_QWORD *, _QWORD *);
  unint64_t v66;
  char **v67;
  char __s2;
  char v69[7];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v66 = 0;
  v67 = 0;
  v4 = *(_QWORD **)(*(_QWORD *)(a2 + 16) + 8);
  *(_OWORD *)__s1 = xmmword_1EA93F948;
  v64 = *(_OWORD *)off_1EA93F958;
  v65 = ssftmap_ElemFreeString;
  v60 = (uint64_t *)(a3 + 88);
  v5 = ssftmap_ObjOpen(v4, 0, (__int128 *)__s1, (uint64_t *)(a3 + 88));
  if ((v5 & 0x80000000) != 0)
    goto LABEL_61;
  v6 = *(_QWORD *)(a3 + 72);
  if (v6)
  {
    Dictionary_FetchKeys(v6, &v67, &v66);
  }
  else
  {
    if (strstr(*(char **)(a3 + 16), "application/x-vocalizer-userdct-pointer"))
    {
      v45 = *(_QWORD *)(a3 + 48);
      if (v45)
      {
        __s1[0] = 0;
        v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45 - *(_QWORD *)(*(_QWORD *)v45 + 48));
        if (v46)
        {
          v47 = (**(uint64_t (***)(uint64_t, uint64_t, char **))v46)(v46 - *(_QWORD *)(*(_QWORD *)v46 + 64), 414531107, __s1);
          v5 = LH_ERROR_to_VERROR(v47);
          if ((v5 & 0x80000000) == 0 && __s1[0])
          {
            v48 = (*(uint64_t (**)(char *, char ***, unint64_t *))(*(_QWORD *)__s1[0] + 16))(&__s1[0][-*(_QWORD *)(*(_QWORD *)__s1[0] + 32)], &v67, &v66);
            v5 = LH_ERROR_to_VERROR(v48);
          }
          if ((v5 & 0x80000000) != 0)
            goto LABEL_61;
        }
        else
        {
          v5 = 0;
        }
        goto LABEL_5;
      }
    }
    v59 = *(_QWORD *)(a3 + 80);
    if (!v59)
      goto LABEL_5;
    Keys = CDSObject_FetchKeys(v59, (uint64_t *)&v67, &v66);
  }
  v5 = LH_ERROR_to_VERROR(Keys);
  if ((v5 & 0x80000000) != 0)
  {
LABEL_61:
    v23 = 0;
    goto LABEL_62;
  }
LABEL_5:
  if (!v66)
    goto LABEL_61;
  v8 = 0;
  v9 = 0;
  v61 = 0;
  while (1)
  {
    v10 = v67[v8];
    v11 = strlen(v10);
    v12 = v11;
    if (v11)
    {
      v13 = 0;
      v14 = 0;
      v15 = v11;
      do
      {
        if (v12 > v13)
        {
          v16 = v13;
          if (utf8_BelongsToSet(0, v10, v13, v12))
          {
            while (1)
            {
              NextUtf8Offset = utf8_GetNextUtf8Offset(v10, v13);
              v13 = NextUtf8Offset;
              if (v12 <= NextUtf8Offset)
                break;
              LOWORD(v16) = NextUtf8Offset;
              if (!utf8_BelongsToSet(0, v10, NextUtf8Offset, v12))
              {
                v16 = (unsigned __int16)v16;
                goto LABEL_14;
              }
            }
          }
          else
          {
LABEL_14:
            if (v12 > v13 && !utf8_BelongsToSet(0, v10, v13, v12))
            {
              do
                v13 = (unsigned __int16)utf8_GetNextUtf8Offset(v10, v13);
              while (v12 > v13 && !utf8_BelongsToSet(0, v10, v13, v12));
              v16 = v13;
            }
            ++v14;
            v13 = v16;
          }
        }
      }
      while (v13 < v15);
      if (v14 >= 2)
        break;
    }
    v23 = v9;
LABEL_52:
    ++v8;
    v9 = v23;
    if (v8 >= v66)
      goto LABEL_62;
  }
  v18 = v67[v8];
  v19 = strlen(v18);
  if ((_WORD)v19)
  {
    v20 = 0;
    if (utf8_BelongsToSet(0, v18, 0, (unsigned __int16)v19))
    {
      while (1)
      {
        v21 = utf8_GetNextUtf8Offset(v18, v20);
        v20 = v21;
        if ((unsigned __int16)v19 <= v21)
          break;
        if (!utf8_BelongsToSet(0, v18, v21, (unsigned __int16)v19))
          goto LABEL_26;
      }
      LOWORD(v22) = v21;
    }
    else
    {
LABEL_26:
      v22 = v20;
      do
      {
        if (utf8_BelongsToSet(0, v18, v22, (unsigned __int16)v19))
          break;
        v22 = (unsigned __int16)utf8_GetNextUtf8Offset(v18, v22);
      }
      while ((unsigned __int16)v19 > v22);
    }
  }
  else
  {
    LOWORD(v20) = 0;
    LOWORD(v22) = 0;
  }
  v24 = (unsigned __int16)(v22 - v20);
  if (v61 >= v24)
  {
    v23 = v9;
  }
  else
  {
    v23 = heap_Realloc(*(uint64_t **)(a1 + 8), v9, v24 + 1);
    v61 = v24;
    if (!v23)
    {
      v5 = 2231377930;
      log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"DCTEG", 4400, 0, v25, v26, v27, v28, v69);
      v23 = v9;
      goto LABEL_62;
    }
  }
  for (i = 0; v19 > (unsigned __int16)i; i = utf8_GetNextUtf8Offset(v18, (unsigned __int16)i))
  {
    if (!utf8_BelongsToSet(0, v18, (unsigned __int16)i, v19))
      break;
  }
  v30 = 0;
  if ((_DWORD)v24)
  {
    v31 = 0;
    do
    {
      v32 = (unsigned __int8 *)(v23 + v30);
      utf8_ToLower(v18, (unsigned __int16)i, v23 + v30);
      i += utf8_determineUTF8CharLength(v18[(unsigned __int16)i]);
      v31 += utf8_determineUTF8CharLength(*v32);
      v30 = (unsigned __int16)v31;
    }
    while (v24 > (unsigned __int16)v31);
  }
  *(_BYTE *)(v23 + v30) = 0;
  v33 = *v60;
  __s1[0] = 0;
  __s2 = 32;
  LH_itoa(v14, v69, 0xAu);
  __strcat_chk();
  if ((ssftmap_FindReadOnly(v33, v23, __s1) & 0x80000000) != 0)
  {
    v5 = ssftmap_Insert(v33, v23, (uint64_t)&__s2);
    if ((v5 & 0x80000000) != 0)
      goto LABEL_62;
    goto LABEL_52;
  }
  v34 = __s1[0];
  if (strstr(__s1[0], &__s2))
  {
    v5 = 0;
    goto LABEL_52;
  }
  v35 = strlen(v34);
  v36 = strlen(&__s2);
  v37 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), v36 + v35, 1);
  if (!v37)
  {
    v5 = 2231377930;
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"DCTEG", 4400, 0, v38, v39, v40, v41, v69);
    goto LABEL_62;
  }
  v42 = (uint64_t)v37;
  v43 = strcpy(v37, __s1[0]);
  strcat(v43, v69);
  v44 = ssftmap_Remove(v33, v23);
  if ((v44 & 0x80000000) == 0)
    v44 = ssftmap_Insert(v33, v23, v42);
  v5 = v44;
  heap_Free(*(_QWORD **)(a1 + 8), v42);
  if ((v5 & 0x80000000) == 0)
    goto LABEL_52;
  while (1)
  {
LABEL_62:
    if (v23)
      heap_Free(*(_QWORD **)(a1 + 8), v23);
    v49 = *(_QWORD *)(a3 + 72);
    if (v49)
    {
      Dictionary_ReturnKeys(v49, (uint64_t)v67);
      return v5;
    }
    if (!strstr(*(char **)(a3 + 16), "application/x-vocalizer-userdct-pointer")
      || (v50 = *(_QWORD *)(a3 + 48)) == 0
      || (_DWORD)v5)
    {
      v57 = *(_QWORD *)(a3 + 80);
      if (v57)
        CDSObject_ReturnKeys(v57, (uint64_t)v67);
      return v5;
    }
    v51 = v67;
    __s1[0] = 0;
    v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50 - *(_QWORD *)(*(_QWORD *)v50 + 48));
    if (!v52)
      break;
    v53 = (**(uint64_t (***)(uint64_t, uint64_t, char **))v52)(v52 - *(_QWORD *)(*(_QWORD *)v52 + 64), 414531107, __s1);
    v54 = LH_ERROR_to_VERROR(v53);
    if ((v54 & 0x80000000) == 0 && __s1[0])
    {
      v55 = (*(uint64_t (**)(char *, char **))(*(_QWORD *)__s1[0] + 24))(&__s1[0][-*(_QWORD *)(*(_QWORD *)__s1[0] + 32)], v51);
      v54 = LH_ERROR_to_VERROR(v55);
    }
    v5 = 0;
    v56 = 0;
    if ((v54 & 0x80000000) == 0)
      return v56;
  }
  return 0;
}

uint64_t dctlist_ObjOpen(_QWORD *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = a2;
  return 0;
}

uint64_t dctlist_ObjClose(uint64_t a1)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i; i = *(_QWORD *)(a1 + 8))
    dctlist_Remove(a1, *(_QWORD *)(i + 8));
  return 0;
}

uint64_t dctlist_Remove(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = 2231377940;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    if (*(_QWORD *)(v5 + 8) == a2)
    {
      v8 = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(a1 + 8) = v8;
      if (!v8)
        *(_QWORD *)(a1 + 16) = 0;
      heap_Free(*(_QWORD **)a1, v5);
      return 0;
    }
    else
    {
      while (1)
      {
        v6 = v5;
        v5 = *(_QWORD *)(v5 + 16);
        if (!v5)
          break;
        if (*(_QWORD *)(v5 + 8) == a2)
        {
          v7 = *(_QWORD *)(v5 + 16);
          heap_Free(*(_QWORD **)a1, v5);
          *(_QWORD *)(v6 + 16) = v7;
          if (v7)
            return 0;
          result = 0;
          *(_QWORD *)(a1 + 16) = v6;
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t dctlist_Add(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = heap_Calloc(*(_QWORD **)a1, 1, 24);
  if (v4)
  {
    *(_DWORD *)v4 = -1;
    *(_QWORD *)(v4 + 8) = a2;
    *(_QWORD *)(v4 + 16) = 0;
    v6 = (uint64_t *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      if (*(_DWORD *)v5 == -1)
      {
        *(_QWORD *)(v4 + 16) = v5;
        goto LABEL_10;
      }
      do
      {
        v7 = v5;
        v5 = *(_QWORD *)(v5 + 16);
      }
      while (v5);
      *(_QWORD *)(v7 + 16) = v4;
    }
    else
    {
      *(_QWORD *)(a1 + 8) = v4;
    }
    v6 = (uint64_t *)(a1 + 16);
LABEL_10:
    v8 = 0;
    *v6 = v4;
    return v8;
  }
  return 2231377930;
}

uint64_t dctlist_Move(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = 2231377940;
  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = *(int **)(a1 + 8);
    do
    {
      v10 = *((_QWORD *)v9 + 1);
      v11 = *v9;
      if (v10 == a2)
      {
        v6 = v8;
        if (v11 == a3)
          return 0;
      }
      if (a3 != -1 && v11 == a3)
        return 2231378969;
      if (v11 <= a3 && v10 != a2)
        v7 = v9;
      if (v6 && v7)
        break;
      v8 = v9;
      v9 = (int *)*((_QWORD *)v9 + 2);
    }
    while (v9);
    if (a3 == -1 && v7 && *((_QWORD *)v7 + 2) != *(_QWORD *)(a1 + 16))
      v7 = *(int **)(a1 + 16);
    if (v6 == v7)
    {
      if (v6)
        v4 = *((_QWORD *)v6 + 2);
      goto LABEL_34;
    }
    if (v6)
    {
      v13 = *((_QWORD *)v6 + 2);
      v14 = *(_QWORD *)(v13 + 16);
      *((_QWORD *)v6 + 2) = v14;
      v15 = v4;
      v4 = v13;
      if (v14)
        goto LABEL_28;
    }
    else
    {
      if (*(_QWORD *)(v4 + 8) != a2)
        return v3;
      v15 = *(_QWORD *)(v4 + 16);
      *v5 = v15;
      if (v15)
      {
LABEL_28:
        if (v7)
        {
          *(_QWORD *)(v4 + 16) = *((_QWORD *)v7 + 2);
          *((_QWORD *)v7 + 2) = v4;
          if (*(_QWORD *)(v4 + 16))
          {
LABEL_34:
            v3 = 0;
            *(_DWORD *)v4 = a3;
            return v3;
          }
          v5 = (_QWORD *)(a1 + 16);
        }
        else
        {
          *(_QWORD *)(v4 + 16) = v15;
        }
        *v5 = v4;
        goto LABEL_34;
      }
      v6 = 0;
      v13 = v4;
    }
    *(_QWORD *)(a1 + 16) = v6;
    v4 = v13;
    goto LABEL_28;
  }
  return v3;
}

uint64_t dctlist_GetNext(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    *a2 = *(_QWORD *)(v2 + 16);
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
      return *(_QWORD *)(v3 + 8);
  }
  else
  {
    *a2 = *(_QWORD *)(a1 + 8);
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
      return *(_QWORD *)(v3 + 8);
  }
  return 0;
}

uint64_t OpenEDCTObj(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t inited;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v16;
  uint64_t v17;

  v17 = 0;
  inited = InitRsrcFunction(a1, a2, &v17);
  if ((inited & 0x80000000) != 0)
    return inited;
  v7 = (_QWORD *)heap_Calloc(*(_QWORD **)(v17 + 8), 1, 128);
  *(_QWORD *)a3 = v7;
  if (!v7)
  {
    v13 = 2231377930;
    v14 = 4400;
    goto LABEL_7;
  }
  *v7 = a1;
  v7[1] = a2;
  *(_QWORD *)(*(_QWORD *)a3 + 16) = heap_Alloc;
  *(_QWORD *)(*(_QWORD *)a3 + 24) = heap_Calloc;
  *(_QWORD *)(*(_QWORD *)a3 + 32) = heap_Realloc;
  *(_QWORD *)(*(_QWORD *)a3 + 40) = heap_Free;
  *(_QWORD *)(*(_QWORD *)a3 + 88) = dcteg_fread;
  *(_QWORD *)(*(_QWORD *)a3 + 96) = dcteg_fseek;
  *(_QWORD *)(*(_QWORD *)a3 + 112) = dcteg_ffinished;
  *(_QWORD *)(*(_QWORD *)a3 + 104) = dcteg_ferror;
  *(_DWORD *)(*(_QWORD *)a3 + 120) = 0;
  v12 = OOCAllocator_Con(*(_QWORD *)a3 + 48, (_OWORD *)(*(_QWORD *)a3 + 16), *(_QWORD *)(v17 + 8));
  v13 = LH_ERROR_to_VERROR(v12);
  if ((v13 & 0x80000000) != 0)
  {
    v14 = 4477;
LABEL_7:
    log_OutPublic(*(_QWORD *)(v17 + 32), (uint64_t)"DCTEG", v14, 0, v8, v9, v10, v11, v16);
  }
  return v13;
}

size_t dcteg_fread(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  size_t v6;

  v5 = *(unsigned int *)(a4 + 68);
  if (a3 * a2 >= (*(_DWORD *)(a4 + 64) - v5))
    v6 = (*(_DWORD *)(a4 + 64) - v5);
  else
    v6 = a3 * a2;
  if (v6)
  {
    memcpy(a1, (const void *)(*(_QWORD *)(a4 + 48) + v5), v6);
    *(_DWORD *)(a4 + 68) += v6;
  }
  return v6 / a2;
}

uint64_t dcteg_fseek(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v3;
  uint64_t v4;

  if (a3 == 2)
  {
    if ((a2 & 0x8000000000000000) == 0)
      return 1;
    v3 = *(_DWORD *)(a1 + 64);
LABEL_9:
    if (v3 >= -(int)a2)
      goto LABEL_10;
    return 1;
  }
  if (a3 == 1)
  {
    v3 = *(_DWORD *)(a1 + 68);
    if ((a2 & 0x8000000000000000) == 0)
    {
LABEL_10:
      LODWORD(a2) = v3 + a2;
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if (a3 || a2 < 0)
    return 1;
LABEL_11:
  if (a2 >= *(_DWORD *)(a1 + 64))
    return 1;
  v4 = 0;
  *(_DWORD *)(a1 + 68) = a2;
  return v4;
}

uint64_t dcteg_ffinished(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 48);
    if (v2)
    {
      if (*(_DWORD *)(a1 + 44))
        heap_Free(*(_QWORD **)a1, v2);
      *(_QWORD *)(a1 + 48) = 0;
    }
  }
  return 0;
}

uint64_t dcteg_ferror()
{
  return 0;
}

uint64_t CloseEDCTObj(uint64_t a1)
{
  uint64_t inited;
  uint64_t v4;

  v4 = 0;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v4);
  if ((inited & 0x80000000) == 0)
    heap_Free(*(_QWORD **)(v4 + 8), a1);
  return inited;
}

uint64_t hlp_TraceTuningData_UDctEntries(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t inited;
  int Info;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t **v18;
  int v19;
  int HasEnded;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  __int128 v28;
  __int128 v29;

  v28 = 0u;
  v29 = 0u;
  v26 = 0;
  v27 = 0;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  v22 = 0;
  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 128);
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v22);
  if ((inited & 0x80000000) != 0)
    return inited;
  Info = edct_DctGetInfo(v2, (uint64_t)&v28);
  v5 = LH_ERROR_to_VERROR(Info);
  if ((v5 & 0x80000000) == 0 && !(_DWORD)v29)
  {
    edct_DctItOpen(*(_QWORD *)(v2 + 48), (_DWORD *)v2, (uint64_t *)&v27);
    v7 = LH_ERROR_to_VERROR(v6);
    if ((v7 & 0x80000000) == 0)
    {
      while (1)
      {
        v8 = edct_DctItCurrent((uint64_t)v27, &v26, &v25, (_DWORD *)&v24 + 1, &v24);
        v5 = LH_ERROR_to_VERROR(v8);
        if ((v5 & 0x80000000) != 0)
          goto LABEL_27;
        if (!v26 || v25 == 0)
          goto LABEL_27;
        if (HIDWORD(v24))
          break;
LABEL_21:
        v19 = edct_DctItIncrement((uint64_t)v27);
        v7 = LH_ERROR_to_VERROR(v19);
        if ((v7 & 0x80000000) != 0)
          goto LABEL_26;
        HasEnded = edct_DctItHasEnded((uint64_t)v27, &v23);
        v5 = LH_ERROR_to_VERROR(HasEnded);
        if ((v5 & 0x80000000) != 0 || v23)
          goto LABEL_27;
      }
      v15 = 0;
      v16 = 0;
      while (1)
      {
        if (!*(_DWORD *)(v25 + v15 + 56))
          strlen(*(const char **)(v25 + v15 + 48));
        v17 = *(_DWORD *)(v25 + v15);
        if (v17 == 2)
        {
          v18 = *(uint64_t ***)(v22 + 32);
        }
        else
        {
          if (v17)
          {
            log_OutTraceTuningData(*(uint64_t ***)(v22 + 32), 102, (uint64_t)"%s%s %s%s %s%s", v9, v10, v11, v12, v13, "USERDCTKEY");
            goto LABEL_20;
          }
          v18 = *(uint64_t ***)(v22 + 32);
        }
        log_OutTraceTuningData(v18, 102, (uint64_t)"%s%s %s%.*s %s%s", v9, v10, v11, v12, v13, "USERDCTKEY");
LABEL_20:
        ++v16;
        v15 += 64;
        if (v16 >= HIDWORD(v24))
          goto LABEL_21;
      }
    }
LABEL_26:
    v5 = v7;
  }
LABEL_27:
  if (v27)
    edct_DctItClose(v27);
  return v5;
}

uint64_t LoadUDct(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int Interface;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v34[2];
  uint64_t v35;
  uint64_t v36;

  v36 = 0;
  v4 = *(const char **)(a2 + 16);
  v35 = 0;
  memset(v34, 0, sizeof(v34));
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v36);
  if ((inited & 0x80000000) != 0)
    return inited;
  *(_DWORD *)(a2 + 68) = 0;
  if (strcmp(v4, "application/edct-bin-dictionary"))
  {
    if (strcmp(v4, "application/cdct-bin-dictionary"))
    {
      if (!strcmp(v4, "application/x-vocalizer-userdct-pointer"))
      {
        *(_QWORD *)(a2 + 104) = *(_QWORD *)(a2 + 48);
        return inited;
      }
      log_OutPublic(*(_QWORD *)(v36 + 32), (uint64_t)"DCTEG", 4403, "%s%s", v6, v7, v8, v9, "contentType");
      inited = 2231378966;
      goto LABEL_20;
    }
    v22 = PNEW_CDSObject_Con(a1 + 48, a1 + 48, (_OWORD *)(a1 + 88), a2, 0, (_QWORD *)(a2 + 80));
    v23 = LH_ERROR_to_VERROR(v22);
    if ((v23 & 0x80000000) != 0)
    {
      inited = v23;
      log_OutPublic(*(_QWORD *)(v36 + 32), (uint64_t)"DCTEG", 4481, "%s%s%s%x", v24, v25, v26, v27, "name");
      *(_QWORD *)(a2 + 104) = 0;
LABEL_20:
      if (*(_QWORD *)(a2 + 72) || *(_QWORD *)(a2 + 80))
        UnloadUDct(a1, (_QWORD *)a2);
      return inited;
    }
    Interface = CDSObject_QueryInterface(*(_QWORD *)(a2 + 80), 414531721, (uint64_t *)(a2 + 104));
    inited = LH_ERROR_to_VERROR(Interface);
    if ((inited & 0x80000000) == 0)
      return inited;
    log_OutPublic(*(_QWORD *)(v36 + 32), (uint64_t)"DCTEG", 4482, "%s%s%s%x", v29, v30, v31, v32, "name");
LABEL_19:
    *(_QWORD *)(a2 + 104) = 0;
    goto LABEL_20;
  }
  v10 = PNEW_Dictionary_Con(a1 + 48, a1 + 48, (char **)v34, (_OWORD *)(a1 + 88), a2, (_DWORD *)(a1 + 120), 1, (uint64_t *)(a2 + 72));
  v11 = LH_ERROR_to_VERROR(v10);
  if ((v11 & 0x80000000) != 0)
  {
    inited = v11;
    log_OutPublic(*(_QWORD *)(v36 + 32), (uint64_t)"DCTEG", 4478, "%s%s%s%x", v12, v13, v14, v15, "name");
    goto LABEL_19;
  }
  if (*(_QWORD *)(a2 + 48) && !*(_DWORD *)(a2 + 44))
  {
    inited = 2231377945;
    log_OutPublic(*(_QWORD *)(v36 + 32), (uint64_t)"DCTEG", 4479, "%s%s", v12, v13, v14, v15, "name");
    goto LABEL_20;
  }
  v16 = Dictionary_QueryInterface(*(_QWORD *)(a2 + 72), 414531721, (uint64_t *)(a2 + 104));
  inited = LH_ERROR_to_VERROR(v16);
  v21 = *(_QWORD *)(v36 + 32);
  if ((inited & 0x80000000) != 0)
  {
    log_OutPublic(v21, (uint64_t)"DCTEG", 4480, "%s%s%s%x", v17, v18, v19, v20, "name");
    goto LABEL_19;
  }
  if (log_HasTraceTuningDataSubscriber(v21))
    hlp_TraceTuningData_UDctEntries(a1, a2);
  return inited;
}

uint64_t UnloadUDct(uint64_t a1, _QWORD *a2)
{
  const char *v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v12;

  v12 = 0;
  v3 = (const char *)a2[2];
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v12);
  if ((inited & 0x80000000) == 0)
  {
    if (!strcmp(v3, "application/edct-bin-dictionary"))
    {
      v9 = (uint64_t *)a2[9];
      if (v9)
      {
        Dictionary_Des(v9);
        heap_Free(*(_QWORD **)(v12 + 8), a2[9]);
        a2[9] = 0;
      }
    }
    else if (!strcmp(v3, "application/cdct-bin-dictionary"))
    {
      v10 = (_QWORD *)a2[10];
      if (v10)
      {
        CDSObject_Des(v10);
        heap_Free(*(_QWORD **)(v12 + 8), a2[10]);
        a2[10] = 0;
      }
    }
    else if (strcmp(v3, "application/x-vocalizer-userdct-pointer"))
    {
      log_OutPublic(*(_QWORD *)(v12 + 32), (uint64_t)"DCTEG", 4404, "%s%s", v5, v6, v7, v8, "contentType");
      return 2231378966;
    }
  }
  return inited;
}

uint64_t RetrieveUDctEntry(uint64_t a1, uint64_t a2, char *a3, char *__s, _BYTE *a5, const char *a6, _WORD *a7, char *a8, _BYTE *a9, _DWORD *a10)
{
  uint64_t v10;
  uint64_t v11;
  char *v18;
  int UInt;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t i;
  int v26;
  int v27;
  _DWORD *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t j;
  unsigned int v36;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  char __s2[4];
  _QWORD *v46;
  _DWORD *v47;
  unsigned int v48;
  uint64_t v49;
  _WORD *v50;
  const char *v51;

  v50 = a7;
  v51 = a6;
  v10 = *(_QWORD *)(a1 + 16);
  v49 = 0;
  v48 = 0;
  v11 = *(_QWORD *)(a2 + 16);
  v47 = 0;
  if (!__s)
    return 2231377940;
  v18 = *(char **)(a2 + 24);
  if (v18)
  {
    if (!strhelper_csv_HasElem(v18, __s))
      return 2231377940;
  }
  *a8 = 0;
  if (a9)
    *a9 = 0;
  v46 = 0;
  UInt = paramc_ParamGetUInt(*(_QWORD *)(v10 + 40), (uint64_t)"numberoutputtranscriptions", &v48);
  v20 = (unsigned __int16)v48;
  if (UInt < 0)
    v20 = 1;
  v44 = v20;
  if ((int)paramc_ParamGetUInt(*(_QWORD *)(v10 + 40), (uint64_t)"numberoutputorthsubstitutes", &v48) < 0)
    v21 = 1;
  else
    v21 = (unsigned __int16)v48;
  v22 = 2231377927;
  if (a5 && *(_QWORD *)(a1 + 48) && v11 && a7 && *a5)
  {
    v23 = v21;
    v24 = (*(uint64_t (**)(_QWORD, _QWORD **))(**(_QWORD **)(a2 + 104) + 16))(*(_QWORD *)(a2 + 104) - *(_QWORD *)(**(_QWORD **)(a2 + 104) + 48), &v46);
    if ((LH_ERROR_to_VERROR(v24) & 0x80000000) == 0)
    {
      if (*v46)
      {
        for (i = 0; i != 3; ++i)
          __s2[i] = __tolower(*(char *)(*v46 + i));
        __s2[3] = 0;
        if (!a3 || strstr(a3, __s2))
        {
          v26 = (***(uint64_t (****)(_QWORD, _BYTE *, _DWORD **, uint64_t *))(a2 + 104))(*(_QWORD *)(a2 + 104) - *(_QWORD *)(**(_QWORD **)(a2 + 104) + 48), a5, &v47, &v49);
          v27 = LH_ERROR_to_VERROR(v26);
          v28 = v47;
          if (v27 < 0 || (v29 = v49) == 0 || !v47)
          {
            if (v27 < 0)
              v22 = v27;
            else
              v22 = 2231377940;
LABEL_47:
            if (v28)
            {
              v38 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 104) + 8))(*(_QWORD *)(a2 + 104) - *(_QWORD *)(**(_QWORD **)(a2 + 104) + 48));
              v39 = LH_ERROR_to_VERROR(v38);
              if ((v39 & 0x80000000) != 0)
              {
                v43 = v39;
                log_OutText(*(_QWORD *)(v10 + 32), (uint64_t)"DCTEG", 3, 0, (uint64_t)"MSG_ITransLookUp_ReturnTranscriptions failed: %x", v40, v41, v42, v39);
                return v43;
              }
            }
            return v22;
          }
          *a10 = *v47;
          strcpy(a8, __s2);
          v22 = 2231377940;
          if (a9)
          {
            v34 = (const char *)v46[1];
            if (v34)
            {
              if (strlen(v34) == 3)
              {
                for (j = 0; j != 3; ++j)
                  a9[j] = __tolower(*(char *)(v46[1] + j));
                a9[3] = 0;
              }
            }
          }
          if (*v47 == 4)
          {
            if (v23 >= v29)
              v36 = v29;
            else
              v36 = v23;
          }
          else
          {
            if (*v47 != 1)
            {
              log_OutPublic(*(_QWORD *)(v10 + 32), (uint64_t)"DCTEG", 4476, "%s%d", v30, v31, v32, v33, "contentType");
              goto LABEL_46;
            }
            if (v44 >= v29)
              v36 = v29;
            else
              v36 = v44;
          }
          v22 = GetnTranscriptions(&v47, &v51, &v50, v36);
LABEL_46:
          v28 = v47;
          goto LABEL_47;
        }
      }
    }
    return 2231377940;
  }
  return v22;
}

uint64_t GetnTranscriptions(_QWORD *a1, const char **a2, _WORD **a3, unsigned int a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t result;

  **a2 = 0;
  if (a4)
  {
    v7 = 0;
    v8 = 0;
    v9 = a4;
    while (1)
    {
      v10 = *a1 + 24 * v7;
      v12 = *(const char **)(v10 + 8);
      v11 = *(_QWORD *)(v10 + 16);
      if ((_DWORD)v11)
      {
        v13 = 0;
        while (v12[v13])
        {
          if (v11 == ++v13)
            goto LABEL_9;
        }
        LODWORD(v11) = v13;
      }
LABEL_9:
      v14 = v8 + v11 + 1;
      if (v14 > (unsigned __int16)**a3)
        return 2231377929;
      if (v7)
      {
        *(_WORD *)&(*a2)[strlen(*a2)] = 18;
        v8 = v14;
      }
      else
      {
        v8 += v11;
      }
      strcat((char *)*a2, v12);
      if (++v7 == v9)
        goto LABEL_16;
    }
  }
  else
  {
    v8 = 0;
LABEL_16:
    result = 0;
    (*a2)[v8] = 0;
    **a3 = v8;
  }
  return result;
}

uint64_t LD_createChild(uint64_t a1, int a2, unsigned int a3, unsigned int a4, _WORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char i;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;

  v35 = 0;
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0)
    return 2300583944;
  if (*(_DWORD *)(a1 + 48) > a4 && (v14 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a4)) != 0)
  {
    if (a3 > 1)
    {
      if (*(unsigned __int8 *)(v14 + 2) == LD_ChildParentD[a3])
      {
        v15 = LD_createRec((uint64_t *)a1, a3, &v35, v9, v10, v11, v12, v13);
        if ((v15 & 0x80000000) == 0)
        {
          v21 = 0;
          v22 = v35;
          *(_QWORD *)(v35 + 8) = v14;
          *(_QWORD *)(v22 + 24) = 0;
          *(_QWORD *)(v22 + 32) = 0;
          v23 = 1;
          do
          {
            v24 = v23;
            v25 = v14 + 8 * v21;
            v28 = *(_QWORD *)(v25 + 32);
            v26 = v25 + 32;
            v27 = v28;
            if (v28 && *(unsigned __int8 *)(v27 + 2) == a3)
            {
              *(_QWORD *)(v22 + 16) = v27;
              *(_QWORD *)(*(_QWORD *)v26 + 24) = v22;
              *(_QWORD *)v26 = v22;
              goto LABEL_22;
            }
            v23 = 0;
            v21 = 1;
          }
          while ((v24 & 1) != 0);
          v29 = 0;
          for (i = 1; ; i = 0)
          {
            v31 = i;
            v32 = v14 + 8 * v29;
            v34 = *(_QWORD *)(v32 + 32);
            v33 = (uint64_t *)(v32 + 32);
            if (!v34)
              break;
            v29 = 1;
            if ((v31 & 1) == 0)
            {
              log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20030, "%s%u%s%u", v17, v18, v19, v20, "childType");
              return 2300591643;
            }
          }
          *v33 = v22;
          *(_QWORD *)(v22 + 16) = 0;
LABEL_22:
          *a5 = *(_WORD *)v22;
          *(_DWORD *)(a1 + 72) = 1;
        }
      }
      else
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20006, "%s%u%s%u", v10, v11, v12, v13, "childType");
        return 2300591619;
      }
    }
    else
    {
      v15 = 2300591618;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20005, "%s%u", v10, v11, v12, v13, "childType");
    }
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20020, "%s%u", v10, v11, v12, v13, "record");
    return 2300591633;
  }
  return v15;
}

uint64_t LD_createRec(uint64_t *a1, unsigned int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int16 *v27;
  unsigned int v28;
  unsigned __int8 v29;
  const char *v31;

  if (a2 - 7 <= 0xFFFFFFF9)
  {
    v10 = 2300591625;
    v11 = *(_QWORD *)(*a1 + 32);
    v31 = "method";
    v12 = "%s%s%s%u";
    v13 = 20012;
LABEL_3:
    log_OutPublic(v11, (uint64_t)"LINGDB", v13, v12, a5, a6, a7, a8, v31);
    return v10;
  }
  v14 = *((_DWORD *)a1 + 12);
  if (v14 - 1 >= *((_DWORD *)a1 + 15))
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"LINGDB", 20019, 0, a5, a6, a7, a8, v31);
    return 2300591632;
  }
  v16 = *((_DWORD *)a1 + 13);
  if (v14 >= v16)
  {
    v17 = *((_DWORD *)a1 + 14) + v16;
    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"LINGDB", 5, 0, (uint64_t)"LINGDB LD_reallocSentRecList : Begin (from %u to %u)", a6, a7, a8, *((unsigned int *)a1 + 13));
    v18 = heap_Realloc(*(uint64_t **)(*a1 + 8), a1[8], 8 * v17);
    if (!v18)
    {
      v10 = 2300583946;
      v11 = *(_QWORD *)(*a1 + 32);
      v13 = 20004;
      goto LABEL_22;
    }
    a1[8] = v18;
    *((_DWORD *)a1 + 13) = v17;
    bzero((void *)(v18 + 8 * *((unsigned int *)a1 + 12)), 8 * (v17 - *((_DWORD *)a1 + 12)));
    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"LINGDB", 5, 0, (uint64_t)"LINGDB LD_reallocSentRecList : End (%x)", v19, v20, v21, 0);
  }
  v22 = LD_HeapAlloc((uint64_t)(a1 + 1), LD_createRec_recordSizeLookup[a2]);
  *a3 = v22;
  if (!v22)
  {
    v10 = 2300583946;
    v11 = *(_QWORD *)(*a1 + 32);
    v13 = 20000;
LABEL_22:
    v12 = 0;
    goto LABEL_3;
  }
  v23 = *((unsigned int *)a1 + 12);
  *(_QWORD *)(a1[8] + 8 * v23) = v22;
  v24 = *a3;
  *(_WORD *)v24 = v23;
  *(_BYTE *)(v24 + 2) = a2;
  *((_DWORD *)a1 + 12) = v23 + 1;
  if ((int)v23 + 1 > (unsigned __int16)v23
    && (v25 = *(_QWORD *)(a1[8] + 8 * (unsigned __int16)v23)) != 0)
  {
    v26 = *(unsigned __int8 *)(v25 + 2);
    v27 = &LD_FIELDOFFSETSD[452 * *(unsigned __int8 *)(v25 + 2)];
    v28 = v27[4];
    if (v27[4])
    {
      v29 = 0;
      do
      {
        if (!LD_FIELDOFFSETSD[452 * v26 + 20 + 20 * v29])
          *(_QWORD *)(v25 + *(_QWORD *)&LD_FIELDOFFSETSD[452 * v26 + 12 + 20 * v29] - *(_QWORD *)v27) = 0;
        ++v29;
      }
      while (v28 > v29);
    }
    v10 = 0;
    *((_DWORD *)a1 + 18) = 1;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"LINGDB", 20020, "%s%u", a5, a6, a7, a8, "record");
    return 2300591633;
  }
  return v10;
}

uint64_t LD_createNext(uint64_t a1, int a2, unsigned int a3, _WORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;

  v20 = 0;
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0)
    return 2300583944;
  if (*(_DWORD *)(a1 + 48) > a3 && (v12 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a3)) != 0)
  {
    v13 = *(unsigned __int8 *)(v12 + 2);
    if (v13 == 1)
    {
      v14 = 2300591620;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20007, 0, v8, v9, v10, v11, v19);
    }
    else
    {
      v16 = LD_createRec((uint64_t *)a1, v13, &v20, v7, v8, v9, v10, v11);
      if ((v16 & 0x80000000) != 0)
      {
        return v16;
      }
      else
      {
        v17 = v20;
        *(_QWORD *)(v20 + 24) = v12;
        *(_OWORD *)(v17 + 8) = *(_OWORD *)(v12 + 8);
        *(_QWORD *)(v12 + 16) = v17;
        *(_QWORD *)(v17 + 32) = 0;
        v18 = *(_QWORD *)(v17 + 16);
        if (v18)
          *(_QWORD *)(v18 + 24) = v17;
        v14 = 0;
        *a4 = *(_WORD *)v17;
        *(_DWORD *)(a1 + 72) = 1;
      }
    }
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20020, "%s%u", v8, v9, v10, v11, "record");
    return 2300591633;
  }
  return v14;
}

uint64_t LD_findChild(uint64_t a1, int a2, int a3, unsigned int a4, _WORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  BOOL v20;

  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0)
    return 2300583944;
  if (a3 == 1)
  {
    v13 = *(_QWORD *)(a1 + 64) != 0;
  }
  else
  {
    if (*(_DWORD *)(a1 + 48) <= a4 || (v15 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a4)) == 0)
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20020, "%s%u", v9, v10, v11, v12, "record");
      return 2300591633;
    }
    if (*(unsigned __int8 *)(v15 + 2) != LD_ChildParentD[a3])
    {
      v14 = 2300591623;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20010, "%s%s%s%u%s%u%s%u", v9, v10, v11, v12, "method");
      return v14;
    }
    v16 = 0;
    v13 = 0;
    v17 = 1;
    do
    {
      v18 = v17;
      v19 = *(_QWORD *)(v15 + 8 * v16 + 32);
      if (v19)
        v20 = v13 == 0;
      else
        v20 = 0;
      if (!v20)
        break;
      v13 = *(unsigned __int8 *)(v19 + 2) == a3 ? *(_WORD *)v19 : 0;
      v17 = 0;
      v16 = 1;
    }
    while ((v18 & 1) != 0);
    if (!v13)
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20011, "%s%u%s%u%s%u", v9, v10, v11, v12, "childKey");
      return 2300591624;
    }
  }
  v14 = 0;
  *a5 = v13;
  return v14;
}

uint64_t LD_findNextCommonParent(uint64_t a1, int a2, unsigned int a3, _WORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t result;
  unsigned __int16 v14;

  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0)
  {
    v14 = 8200;
    return v14 | 0x89200000;
  }
  if (*(_DWORD *)(a1 + 48) <= a3 || (v11 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a3)) == 0)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20020, "%s%u", v7, v8, v9, v10, "record");
    v14 = 15889;
    return v14 | 0x89200000;
  }
  v12 = *(_WORD **)(v11 + 16);
  if (v12)
    LOWORD(v12) = *v12;
  result = 0;
  *a4 = (_WORD)v12;
  return result;
}

uint64_t LD_nextInSent(uint64_t a1, int a2, unsigned int a3, _WORD *a4)
{
  uint64_t NextCommonParent;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v16;

  v16 = 0;
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0)
    return 2300583944;
  NextCommonParent = LD_findNextCommonParent(a1, a2, a3, &v16);
  if ((NextCommonParent & 0x80000000) != 0)
    return NextCommonParent;
  if (v16)
    goto LABEL_4;
  if (*(_DWORD *)(a1 + 48) <= a3 || (v14 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a3)) == 0)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20020, "%s%u", v9, v10, v11, v12, "record");
    return 2300591633;
  }
  if ((*(_BYTE *)(v14 + 2) & 0xFE) == 2)
  {
LABEL_4:
    v13 = 0;
    *a4 = v16;
  }
  else
  {
    v13 = 2300591625;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20012, "%s%s%s%u%s%u", v9, v10, v11, v12, "method");
  }
  return v13;
}

uint64_t LD_findDirect(_QWORD *a1, int a2, int a3, int a4, _WORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t Child;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  __int16 v24;
  __int16 v25;

  v10 = 2300583944;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 45762, 80) & 0x80000000) == 0
    && (safeh_HandleCheck((uint64_t)a1, a2, 45762, 80) & 0x80000000) == 0)
  {
    v15 = a1[8] != 0;
    v25 = a1[8] != 0;
    if (a3 != 1)
    {
      if (a3 != 2)
      {
        v10 = 2300591625;
        log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"LINGDB", 20013, "%s%u", v11, v12, v13, v14, "recordType");
        return v10;
      }
      Child = LD_findChild((uint64_t)a1, a2, 2, v15, &v25);
      if ((Child & 0x80000000) != 0)
        return Child;
      LOWORD(v15) = v25;
      if (!v25)
      {
        log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"LINGDB", 20013, "%s%u", v17, v18, v19, v20, "recordType");
        return 2300591626;
      }
      v24 = v25;
      v21 = a4 - 1;
      if (v21)
      {
        v22 = 1;
        while (1)
        {
          Child = LD_findNextCommonParent((uint64_t)a1, a2, (unsigned __int16)v15, &v24);
          if ((Child & 0x80000000) != 0)
            return Child;
          LOWORD(v15) = v24;
          if (v22 < v21)
          {
            ++v22;
            if (v24)
              continue;
          }
          break;
        }
      }
    }
    v10 = 0;
    *a5 = v15;
  }
  return v10;
}

uint64_t LD_writeField(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, char *a6, _WORD *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  size_t v28;
  void *v29;
  uint64_t i;
  const char *v32;
  int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v13 = 2300583946;
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0)
    return 2300583944;
  if (*(_DWORD *)(a1 + 48) <= a3 || (v18 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a3)) == 0)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20020, "%s%u", v14, v15, v16, v17, "record");
    return 2300591633;
  }
  if (!*(_BYTE *)(v18 + 2) || LD_FIELDOFFSETSD[452 * *(unsigned __int8 *)(v18 + 2) + 4] <= a4)
  {
    v13 = 2300591629;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20016, "%s%s%s%u%s%u%s%u", v14, v15, v16, v17, "method");
    return v13;
  }
  v19 = (uint64_t *)&LD_FIELDOFFSETSD[452 * *(unsigned __int8 *)(v18 + 2)];
  v20 = &v19[5 * a4];
  v22 = (char *)v20[3];
  v21 = v20[4];
  v23 = &v22[v18 - *v19];
  v36 = *v19;
  *(_BYTE *)(v18 + v19[2] - *v19 + a4) = 1;
  v24 = *((unsigned __int16 *)v20 + 21);
  if (*((_WORD *)v20 + 20))
  {
    if (*((unsigned __int16 *)v20 + 20) < a5)
      a5 = *((unsigned __int16 *)v20 + 20);
    v25 = v21;
    memcpy(v23, a6, *((unsigned __int16 *)v20 + 21) * (unint64_t)a5);
    v26 = v25;
    if (!v25)
      goto LABEL_11;
  }
  else
  {
    v35 = v21;
    v28 = v24 * a5;
    v29 = (void *)LD_HeapAlloc(a1 + 8, v24 * a5);
    *(_QWORD *)v23 = v29;
    if (!v29)
      return v13;
    memcpy(v29, a6, v28);
    if (v22 == (char *)&unk_1DEC662E0 && a5 != 0)
    {
      for (i = 0; 32 * a5 != i; i += 32)
      {
        if (marker_hasNonConstCharPtrArg(*(_DWORD *)&a6[i]))
        {
          v32 = *(const char **)&a6[i + 24];
          if (v32)
            v33 = strlen(v32);
          else
            v33 = 0;
          v34 = (char *)LD_HeapAlloc(a1 + 8, v33 + 1);
          if (!v34)
            return v13;
          if (v33)
            v34 = strcpy(v34, *(const char **)&a6[i + 24]);
          else
            *v34 = 0;
          *(_QWORD *)(*(_QWORD *)v23 + i + 24) = v34;
        }
      }
    }
    v26 = v35;
    if (!v35)
      goto LABEL_11;
  }
  *(_WORD *)(v18 + v26 - v36) = a5;
LABEL_11:
  v13 = 0;
  *a7 = a5;
  *(_DWORD *)(a1 + 72) = 1;
  return v13;
}

uint64_t LD_readField(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, void *a6, _WORD *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int16 *v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned __int16 *v27;
  unsigned int v28;
  uint64_t v29;

  *a7 = 0;
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0)
    return 2300583944;
  if (*(_DWORD *)(a1 + 48) > a3 && (v17 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a3)) != 0)
  {
    v18 = *(unsigned __int8 *)(v17 + 2);
    if (*(_BYTE *)(v17 + 2) && LD_FIELDOFFSETSD[452 * *(unsigned __int8 *)(v17 + 2) + 4] > a4)
    {
      v19 = &LD_FIELDOFFSETSD[452 * *(unsigned __int8 *)(v17 + 2)];
      v20 = *(_QWORD *)v19;
      if (*(_BYTE *)(v17 + *((_QWORD *)v19 + 2) - *(_QWORD *)v19 + a4) == 1)
      {
        v21 = (_QWORD *)(v17 + *(_QWORD *)&v19[20 * a4 + 12] - v20);
        v22 = &LD_FIELDOFFSETSD[452 * *(unsigned __int8 *)(v17 + 2) + 20 * a4];
        v25 = v22[20];
        v23 = v22 + 20;
        v24 = v25;
        v26 = *((_QWORD *)v23 - 1);
        v27 = (unsigned __int16 *)(v17 + v26 - v20);
        if (!v26)
          v27 = v23;
        v28 = *v27;
        if (v28 < a5)
          a5 = v28;
        if (v24 || (v21 = (_QWORD *)*v21) != 0)
        {
          memcpy(a6, v21, LD_FIELDOFFSETSD[452 * v18 + 21 + 20 * a4] * (unint64_t)a5);
          v29 = 0;
          *a7 = a5;
        }
        else
        {
          v29 = 2300591633;
          log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20020, "%s%s%s%u%s%u%s%u", v13, v14, v15, v16, "method");
        }
      }
      else
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20017, "%s%u%s%u%s%u", v13, v14, v15, v16, "recordType");
        return 2300591630;
      }
    }
    else
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20016, "%s%s%s%u%s%u%s%u", v13, v14, v15, v16, "method");
      return 2300591629;
    }
  }
  else
  {
    v29 = 2300591633;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20020, "%s%u", v13, v14, v15, v16, "record");
  }
  return v29;
}

uint64_t LD_readDirectField(uint64_t a1, int a2, unsigned int a3, unsigned int a4, _QWORD *a5, unsigned __int16 *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned __int16 *v24;
  unsigned __int16 v25;
  uint64_t v26;

  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0)
    return 2300583944;
  if (*(_DWORD *)(a1 + 48) > a3 && (v15 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a3)) != 0)
  {
    if (*(_BYTE *)(v15 + 2) && LD_FIELDOFFSETSD[452 * *(unsigned __int8 *)(v15 + 2) + 4] > a4)
    {
      v16 = &LD_FIELDOFFSETSD[452 * *(unsigned __int8 *)(v15 + 2)];
      v17 = *(_QWORD *)v16;
      if (*(_BYTE *)(v15 + *((_QWORD *)v16 + 2) - *(_QWORD *)v16 + a4) == 1)
      {
        v18 = (_QWORD *)(v15 + *(_QWORD *)&v16[20 * a4 + 12] - v17);
        v19 = &LD_FIELDOFFSETSD[452 * *(unsigned __int8 *)(v15 + 2) + 20 * a4];
        v22 = v19[20];
        v20 = v19 + 20;
        v21 = v22;
        v23 = *((_QWORD *)v20 - 1);
        v24 = (unsigned __int16 *)(v15 + v23 - v17);
        if (!v23)
          v24 = v20;
        v25 = *v24;
        if (v21 || (v18 = (_QWORD *)*v18) != 0)
        {
          v26 = 0;
          *a5 = v18;
          *a6 = v25;
        }
        else
        {
          v26 = 2300591633;
          log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20020, "%s%u%s%u%s%u", v11, v12, v13, v14, "recordType");
        }
      }
      else
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20017, "%s%u%s%u%s%u", v11, v12, v13, v14, "recordType");
        return 2300591630;
      }
    }
    else
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20016, "%s%s%s%u%s%u%s%u", v11, v12, v13, v14, "method");
      return 2300591629;
    }
  }
  else
  {
    v26 = 2300591633;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20020, "%s%u", v11, v12, v13, v14, "record");
  }
  return v26;
}

uint64_t LD_enquireField(uint64_t a1, int a2, unsigned int a3, unsigned int a4, _WORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0)
    return 2300583944;
  v13 = 2300591633;
  if (*(_DWORD *)(a1 + 48) > a3)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a3);
    if (v14)
    {
      if (*(_BYTE *)(v14 + 2) && LD_FIELDOFFSETSD[452 * *(unsigned __int8 *)(v14 + 2) + 4] > a4)
      {
        v13 = 0;
        *a5 = *(unsigned __int8 *)(v14
                                 + *(_QWORD *)&LD_FIELDOFFSETSD[452 * *(unsigned __int8 *)(v14 + 2) + 8]
                                 - *(_QWORD *)&LD_FIELDOFFSETSD[452 * *(unsigned __int8 *)(v14 + 2)]
                                 + a4);
      }
      else
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20016, "%s%s%s%u%s%u%s%u", v9, v10, v11, v12, "method");
        return 2300591629;
      }
    }
  }
  return v13;
}

uint64_t LD_enquireChild(uint64_t a1, int a2, int a3, unsigned int a4, _WORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned __int16 *v18;
  BOOL v19;
  char v20;

  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0)
    return 2300583944;
  if (a3 == 1)
  {
    LOWORD(v13) = 1;
LABEL_4:
    v14 = 0;
    *a5 = v13;
    return v14;
  }
  v14 = 2300591633;
  if (*(_DWORD *)(a1 + 48) > a4)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a4);
    if (v15)
    {
      if (*(unsigned __int8 *)(v15 + 2) != LD_ChildParentD[a3])
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20010, "%s%s%s%u%s%u%s%u", v9, v10, v11, v12, "method");
        return 2300591623;
      }
      v16 = 0;
      v13 = 0;
      v17 = 1;
      do
      {
        v18 = *(unsigned __int16 **)(v15 + 8 * v16 + 32);
        if (v18)
          v19 = v13 == 0;
        else
          v19 = 0;
        if (!v19)
          break;
        v20 = v17;
        v13 = *((unsigned __int8 *)v18 + 2) == a3 ? *v18 : 0;
        v17 = 0;
        v16 = 1;
      }
      while ((v20 & 1) != 0);
      goto LABEL_4;
    }
  }
  return v14;
}

uint64_t LD_getDBChangedStatus(uint64_t a1, int a2, _DWORD *a3)
{
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) == 0)
    *a3 = *(_DWORD *)(a1 + 72);
  return 0;
}

uint64_t LD_resetDBChangedStatus(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) == 0)
    *(_DWORD *)(a1 + 72) = 0;
  return 0;
}

uint64_t LD_getPronMethod()
{
  return 0;
}

uint64_t LD_getWordClass()
{
  return 2300583937;
}

uint64_t LD_getRecordType(uint64_t a1, uint64_t a2, unsigned int a3, _QWORD *a4)
{
  *a4 = LD_RECORDTYPE_LOOKUP[2 * a3 + 1];
  return 0;
}

uint64_t LD_getTokenType(uint64_t a1, uint64_t a2, unsigned int a3, _QWORD *a4)
{
  *a4 = LD_TOKENTYPE_LOOKUP[2 * a3 + 1];
  return 0;
}

uint64_t LD_checkBEConsistency(_QWORD *a1, int a2, char a3, char a4, char *a5, char *a6)
{
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  int v21;
  uint64_t v22;
  BOOL v24;
  __int16 v25;
  char *v26;
  int v27;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  __int16 v36;
  char *v37;
  int v38;
  char *v39;
  char *v40;
  char *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  char *v46;
  const char *v47;
  int v48;
  char *v49;
  unsigned int v51;
  unsigned __int16 v52;
  unsigned int v53;
  int v54;
  char *v55;
  char *v56;
  char v57;
  int v58;
  __int16 v59;
  unsigned __int16 v60;
  unsigned __int16 v61;
  char v62;
  uint64_t v63;
  char *__s;
  unsigned __int16 v65;
  unsigned __int16 v66;
  char *__s2;
  char v68;
  __int16 v69;
  __int16 v70;
  __int16 v71;
  char __s1[4];
  unsigned __int16 v73;

  v65 = 0;
  v63 = 0;
  __s = 0;
  v62 = 0;
  v60 = 0;
  if (a5 && a6)
  {
    *(_WORD *)a5 = 0;
    *a6 = 0;
  }
  if ((safeh_HandleCheck((uint64_t)a1, a2, 45762, 80) & 0x80000000) != 0)
    return 2300583944;
  v66 = 0;
  v58 = 0;
  v12 = a1[8] != 0;
  v13 = LD_enquireChild((uint64_t)a1, a2, 2, v12, &v66);
  if ((v13 & 0x80000000) == 0)
  {
    v55 = a5;
    v56 = a6;
    v53 = v12;
    v57 = a4;
    v14 = v66;
    if (v66)
    {
      v15 = 0;
      v16 = 0;
      v52 = 0;
      v59 = 0;
      v54 = 0;
      while (1)
      {
        v17 = LD_readField((uint64_t)a1, a2, (unsigned __int16)v14, 0, 1u, &v58, &v61);
        if ((v17 & 0x80000000) != 0)
          return v17;
        if ((v58 - 9) >= 6)
        {
          if (v58 == 15)
          {
            if ((a3 & 0x10) != 0)
            {
              v17 = LD_checkPHR_TNTAG((uint64_t)a1, a2, v57, (unsigned __int16)v16, (unsigned __int16)v14, v55, v56);
              if ((v17 & 0x80000000) != 0)
                return v17;
            }
            v54 = 0;
            v65 = v14;
            v15 = v14;
            v22 = v14;
            v52 = v16;
            goto LABEL_105;
          }
          if (v58 != 4)
          {
            v22 = v16;
            goto LABEL_105;
          }
        }
        v61 = 0;
        v17 = LD_enquireField((uint64_t)a1, a2, (unsigned __int16)v14, 3u, &v59);
        if ((v17 & 0x80000000) != 0)
          return v17;
        if (!v59)
          goto LABEL_14;
        v17 = LD_readDirectField((uint64_t)a1, a2, (unsigned __int16)v14, 3u, &__s, &v61);
        if ((v17 & 0x80000000) != 0)
          return v17;
        if (!v61)
LABEL_14:
          __s = &v62;
        v17 = LD_enquireField((uint64_t)a1, a2, (unsigned __int16)v14, 0xDu, &v60);
        if ((v17 & 0x80000000) != 0)
          return v17;
        v18 = v15;
        v19 = v60;
        if (v60)
        {
          v17 = LD_readDirectField((uint64_t)a1, a2, (unsigned __int16)v14, 0xDu, &v63, &v61);
          if ((v17 & 0x80000000) != 0)
            return v17;
          if (!v61)
          {
            v19 = 0;
            v60 = 0;
          }
        }
        if ((a3 & 7) != 0)
        {
          v20 = __s;
          strcpy(__s1, "1");
          __s2 = 0;
          if (v19)
          {
            v21 = 0;
          }
          else
          {
            LD_setErrorDescription(v55, v56, 0, v14, "missing PRM");
            v21 = 1;
          }
          v24 = (a3 & 2) == 0 || v19 != 0;
          if ((a3 & 4) != 0 || !v24)
          {
            if (*v20)
            {
              if (!strchr(v20, 39) && !strchr(v20, 34) && !strstr(v20, "'2"))
              {
                strcpy(__s1, "0");
                if ((a3 & 4) != 0)
                {
                  if (v19)
                  {
                    v17 = LD_readDirectField((uint64_t)a1, a2, (unsigned __int16)v14, 0xDu, &__s2, &v73);
                    if ((v17 & 0x80000000) != 0)
                      return v17;
                    if (strcmp(__s1, __s2))
                    {
                      LD_setErrorDescription(v55, v56, 0, v14, "PRM != 0 without stress marker");
                      v21 = 1;
                    }
                  }
                }
              }
            }
          }
          if ((v57 & 1) != 0 && v21)
          {
            v25 = strlen(__s1);
            v17 = LD_writeField((uint64_t)a1, a2, (unsigned __int16)v14, 0xDu, (unsigned __int16)(v25 + 1), __s1, &__s1[2]);
            if ((v17 & 0x80000000) != 0)
              return v17;
            v19 = 1;
            v60 = 1;
          }
        }
        if ((a3 & 8) != 0)
        {
          *(_WORD *)__s1 = 0;
          if ((safeh_HandleCheck((uint64_t)a1, a2, 45762, 80) & 0x80000000) != 0)
            return 2300583944;
          __s2 = 0;
          v17 = LD_readDirectField((uint64_t)a1, a2, (unsigned __int16)v14, 5u, &__s2, &v73);
          if ((v17 & 0x80000000) != 0)
            return v17;
          if ((LD_enquireField((uint64_t)a1, a2, (unsigned __int16)v14, 0xEu, __s1) & 0x80000000) == 0
            && !*(_WORD *)__s1)
          {
            LD_setErrorDescription(v55, v56, 0, v14, "missing NLU field");
            if ((v57 & 1) != 0)
            {
              v37 = __s2;
              v38 = strlen(__s2);
              v39 = (char *)heap_Alloc(*(_QWORD *)(*a1 + 8), (v38 + 5));
              if (!v39)
                goto LABEL_138;
              v40 = v39;
              strcpy(v39, "POS:");
              v41 = strcat(v39, v37);
              v42 = strlen(v41);
              v43 = LD_writeField((uint64_t)a1, a2, (unsigned __int16)v14, 0xEu, (unsigned __int16)(v42 + 1), v40, &__s1[2]);
              v13 = v43 & (v43 >> 31);
              heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v40);
              if ((v13 & 0x80000000) != 0)
                return v13;
            }
          }
        }
        if ((a3 & 0x60) != 0)
        {
          v26 = __s;
          if ((safeh_HandleCheck((uint64_t)a1, a2, 45762, 80) & 0x80000000) != 0)
            return 2300583944;
          if (v19)
          {
            __s2 = 0;
            v17 = LD_readDirectField((uint64_t)a1, a2, (unsigned __int16)v14, 0xDu, &__s2, &v73);
            if ((v17 & 0x80000000) != 0)
              return v17;
            v27 = (unsigned __int16)atoi(__s2);
            if ((a3 & 0x20) == 0 || v27)
            {
              if ((a3 & 0x40) != 0
                && v27
                && *v26
                && !strchr(v26, 39)
                && !strchr(v26, 34)
                && !strchr(v26, 42)
                && !strchr(v26, 91))
              {
                if (strchr(v26, 45))
                {
                  if (v55)
                    *(_WORD *)v55 = v14;
                  if (v56)
                  {
                    *((_DWORD *)v56 + 24) = 0;
                    *((_WORD *)v56 + 21) = unk_1DEC6655E;
                    *((_DWORD *)v56 + 11) = unk_1DEC66560;
                    *((_OWORD *)v56 + 3) = unk_1DEC66564;
                    *((_OWORD *)v56 + 4) = xmmword_1DEC66574;
                    *((_OWORD *)v56 + 5) = unk_1DEC66584;
                    strcpy(v56, "missing marker of primary stress (unsafe)");
                  }
                  if ((v57 & 2) != 0)
                  {
LABEL_121:
                    v46 = &v26[2 * (strncmp(v26, "'2", 2uLL) == 0)];
                    if (*v46 == 96)
                      v47 = v46 + 1;
                    else
                      v47 = v46;
                    v48 = strlen(v47);
                    v49 = (char *)heap_Alloc(*(_QWORD *)(*a1 + 8), (v48 + 2));
                    if (!v49)
                    {
LABEL_138:
                      log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"LINGDB", 20000, 0, v30, v31, v32, v33, v51);
                      return 2300583946;
                    }
                    v34 = v49;
                    *(_WORD *)v49 = 39;
                    strcat(v49, v47);
                    goto LABEL_56;
                  }
                }
                else
                {
                  LD_setErrorDescription(v55, v56, 0, v14, "missing marker of primary stress (safe)");
                  if ((v57 & 1) != 0)
                    goto LABEL_121;
                }
              }
            }
            else if (strchr(v26, 39) || strchr(v26, 34) || strstr(v26, "'2"))
            {
              LD_setErrorDescription(v55, v56, 0, v14, "spurious stress marker in unaccented word");
              if ((v57 & 1) != 0)
              {
                v28 = strlen(v26);
                v29 = (char *)heap_Alloc(*(_QWORD *)(*a1 + 8), (v28 + 1));
                if (!v29)
                  goto LABEL_138;
                v34 = v29;
                v35 = strcpy(v29, v26);
                mosynt_RemoveAllSubstrOcc(v35, "'2");
                mosynt_RemoveAllSubstrOcc(v34, "'");
                mosynt_RemoveAllSubstrOcc(v34, "\"");
LABEL_56:
                v36 = strlen(v34);
                v13 = LD_writeField((uint64_t)a1, a2, (unsigned __int16)v14, 3u, (unsigned __int16)(v36 + 1), v34, &__s1[2]);
                heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v34);
                if ((v13 & 0x80000000) != 0)
                  return v13;
              }
            }
          }
        }
        if ((a3 & 0x10) != 0)
        {
          v71 = 0;
          v15 = v18;
          if (!(_WORD)v18)
          {
            LD_setErrorDescription(v55, v56, 0, v14, "missing initial phrase record");
            if ((v57 & 1) != 0)
            {
              LODWORD(__s2) = 15;
              v70 = 0;
              v69 = 200;
              v68 = 0;
              v17 = LD_createPrev((uint64_t)a1, a2, (unsigned __int16)v14, &v65);
              if ((v17 & 0x80000000) != 0)
                return v17;
              *(_WORD *)__s1 = 0;
              v17 = LD_enquireField((uint64_t)a1, a2, (unsigned __int16)v14, 1u, &v71);
              if ((v17 & 0x80000000) != 0)
                return v17;
              if (v71)
              {
                v17 = LD_readField((uint64_t)a1, a2, (unsigned __int16)v14, 1u, 1u, __s1, &v73);
                if ((v17 & 0x80000000) != 0)
                  return v17;
                v15 = v65;
                v17 = LD_writeField((uint64_t)a1, a2, v65, 1u, 1u, __s1, &__s1[2]);
                if ((v17 & 0x80000000) != 0)
                  return v17;
                v17 = LD_writeField((uint64_t)a1, a2, v15, 2u, 1u, __s1, &__s1[2]);
                if ((v17 & 0x80000000) != 0)
                  return v17;
              }
              else
              {
                v15 = v65;
              }
              v17 = LD_writeField((uint64_t)a1, a2, v15, 0, 1u, (char *)&__s2, &__s1[2]);
              if ((v17 & 0x80000000) != 0)
                return v17;
              v44 = strlen(&v68);
              v17 = LD_writeField((uint64_t)a1, a2, v15, 4u, (unsigned __int16)(v44 + 1), &v68, &__s1[2]);
              if ((v17 & 0x80000000) != 0)
                return v17;
              v17 = LD_writeField((uint64_t)a1, a2, v15, 7u, 1u, (char *)&v70, &__s1[2]);
              if ((v17 & 0x80000000) != 0)
                return v17;
              v45 = LD_writeField((uint64_t)a1, a2, v15, 8u, 1u, (char *)&v69, &__s1[2]);
              v13 = v45 & (v45 >> 31);
              if ((v45 & (v45 >> 31)) < 0)
                return v13;
            }
          }
          if (!v54)
          {
            v71 = 0;
            if ((_WORD)v15)
            {
              *(_DWORD *)__s1 = 0;
              v13 = LD_enquireField((uint64_t)a1, a2, (unsigned __int16)v15, 1u, &v71);
              if ((v13 & 0x80000000) != 0)
                goto LABEL_103;
              if (!v71)
                goto LABEL_103;
              v13 = LD_enquireField((uint64_t)a1, a2, (unsigned __int16)v14, 1u, &v71);
              if ((v13 & 0x80000000) != 0 || !v71)
                goto LABEL_103;
              v17 = LD_readField((uint64_t)a1, a2, (unsigned __int16)v15, 1u, 1u, __s1, &__s2);
              if ((v17 & 0x80000000) != 0)
                return v17;
              v17 = LD_readField((uint64_t)a1, a2, (unsigned __int16)v14, 1u, 1u, &__s1[2], &__s2);
              if ((v17 & 0x80000000) != 0)
                return v17;
              if (*(unsigned __int16 *)&__s1[2] != *(unsigned __int16 *)__s1)
              {
                LD_setErrorDescription(v55, v56, 0, v15, "inconsistent phrase FROMPOS");
                if ((v57 & 1) != 0)
                {
                  v13 = LD_writeField((uint64_t)a1, a2, (unsigned __int16)v15, 1u, 1u, &__s1[2], &v73);
LABEL_103:
                  if ((v13 & 0x80000000) != 0)
                    return v13;
                }
              }
            }
          }
          v54 = 1;
          v22 = v15;
          goto LABEL_105;
        }
        v22 = v16;
        v15 = v18;
LABEL_105:
        v17 = LD_nextInSent((uint64_t)a1, a2, (unsigned __int16)v14, &v66);
        if ((v17 & 0x80000000) != 0)
          return v17;
        v14 = v66;
        v16 = v22;
        if (!v66)
        {
          if ((a3 & 0x10) == 0)
          {
            v13 = 0;
            goto LABEL_134;
          }
          if (v54)
            v17 = LD_checkPHR_TNTAG((uint64_t)a1, a2, v57, (unsigned __int16)v15, 0, v55, v56);
          else
            v17 = LD_checkPHR_final((uint64_t)a1, a2, v57, v52, (__int16 *)&v65, v55, v56);
          if ((v17 & 0x80000000) == 0)
          {
            v13 = LD_checkPHR_TOPOS((uint64_t)a1, a2, v57, v53, v55, v56);
            if ((v13 & 0x80000000) != 0)
              return v13;
LABEL_134:
            if ((a3 & 0x80) == 0)
              return v13;
            return LD_checkRECPROMPT((uint64_t)a1, a2, v57, v53, v55, v56);
          }
          return v17;
        }
      }
    }
  }
  return v13;
}

uint64_t LD_checkPHR_TNTAG(uint64_t a1, int a2, char a3, unsigned int a4, unsigned int a5, char *a6, char *a7)
{
  uint64_t result;
  char *v15;
  int v16;
  __int16 v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  __int16 v23;
  char *v24;
  char *v25;
  char *__s1;
  char __s[2];
  __int16 v28;
  unsigned __int16 v29;
  __int16 v30;

  v25 = 0;
  __s1 = 0;
  if (!a4)
    return 0;
  v30 = 0;
  result = LD_enquireField(a1, a2, a4, 4u, &v30);
  if ((result & 0x80000000) != 0)
    return result;
  if (!v30)
    goto LABEL_12;
  v29 = 0;
  result = LD_readDirectField(a1, a2, a4, 4u, &__s1, &v29);
  if ((result & 0x80000000) != 0)
    return result;
  if (!v29 || (v15 = __s1) == 0 || !*__s1)
  {
LABEL_12:
    LD_setErrorDescription(a6, a7, 0, a4, "undefined phrase type");
    result = 0;
    if ((a3 & 1) == 0)
      return result;
    if (a5)
      v17 = 80;
    else
      v17 = 84;
    *(_WORD *)__s = v17;
    v18 = (unsigned __int16)(strlen(__s) + 1);
    v19 = __s;
    v20 = a1;
    v21 = a2;
    v22 = a4;
    return LD_writeField(v20, v21, v22, 4u, v18, v19, &v28);
  }
  if (!strcmp(__s1, "T"))
  {
    if (a5)
    {
LABEL_19:
      LD_setErrorDescription(a6, a7, 0, a4, "non-final phrase of final type");
      result = 0;
      if ((a3 & 1) == 0)
        return result;
      strcpy(__s, "P");
      v23 = strlen(__s);
      result = LD_writeField(a1, a2, a4, 4u, (unsigned __int16)(v23 + 1), __s, &v28);
      if ((result & 0x80000000) != 0)
        return result;
      result = LD_enquireField(a1, a2, a5, 4u, &v30);
      if ((result & 0x80000000) != 0)
        return result;
      if (v30)
      {
        result = LD_readDirectField(a1, a2, a5, 4u, &v25, &v29);
        if ((result & 0x80000000) != 0)
          return result;
        if (v29)
        {
          v24 = v25;
          if (v25)
          {
            result = strcmp(v25, "T");
            if (!(_DWORD)result)
              return result;
            result = strcmp(v24, "Y");
            if (!(_DWORD)result)
              return result;
          }
        }
      }
      v18 = (unsigned __int16)(strlen(v15) + 1);
      v20 = a1;
      v21 = a2;
      v22 = a5;
      v19 = v15;
      return LD_writeField(v20, v21, v22, 4u, v18, v19, &v28);
    }
    return 0;
  }
  v16 = strcmp(v15, "Y");
  result = 0;
  if (a5 && !v16)
    goto LABEL_19;
  return result;
}

uint64_t LD_checkPHR_final(uint64_t a1, int a2, char a3, unsigned int a4, __int16 *a5, char *a6, char *__dst)
{
  uint64_t result;
  __int16 v13;
  char *__s;
  __int16 v15;
  unsigned __int16 v16;

  if (!*a5)
    return 0;
  LD_setErrorDescription(a6, __dst, 0, *a5, "dangling final phrase record");
  result = 0;
  if ((a3 & 1) != 0)
  {
    if (!a4
      || (__s = 0,
          result = LD_readDirectField(a1, a2, (unsigned __int16)*a5, 4u, &__s, &v16),
          (result & 0x80000000) == 0)
      && (v13 = strlen(__s),
          result = LD_writeField(a1, a2, a4, 4u, (unsigned __int16)(v13 + 1), __s, &v15),
          (result & 0x80000000) == 0))
    {
      result = LD_deleteRec(a1, a2, (unsigned __int16)*a5);
      if ((result & 0x80000000) == 0)
      {
        result = 0;
        *a5 = a4;
      }
    }
  }
  return result;
}

uint64_t LD_checkPHR_TOPOS(uint64_t a1, int a2, char a3, unsigned int a4, char *a5, char *a6)
{
  uint64_t result;
  unsigned __int16 v12;
  unsigned __int16 v13;
  unsigned int v14;
  int v16;
  int v17;
  __int16 v18;
  __int16 v19;
  int v20;
  unsigned __int16 v21;

  v21 = 0;
  v20 = 0;
  v16 = 0;
  v17 = 0;
  result = LD_enquireChild(a1, a2, 2, a4, &v21);
  if ((result & 0x80000000) == 0)
  {
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = v21;
      if (!v21)
        break;
      result = LD_readField(a1, a2, v21, 0, 1u, &v20, &v19);
      if ((result & 0x80000000) != 0)
        return result;
      if ((v20 - 9) < 6 || v20 == 4)
      {
        v12 = v14;
      }
      else if (v20 == 15)
      {
        if (!v13)
          goto LABEL_23;
        result = LD_enquireField(a1, a2, v13, 2u, &v16);
        if ((result & 0x80000000) != 0)
          return result;
        if (!(_WORD)v16)
          goto LABEL_23;
        result = LD_readField(a1, a2, v13, 2u, 1u, &v17, &v19);
        if ((result & 0x80000000) != 0)
          return result;
        result = LD_enquireField(a1, a2, v14, 1u, &v16);
        if ((result & 0x80000000) != 0)
          return result;
        if (!(_WORD)v16)
          goto LABEL_23;
        result = LD_readField(a1, a2, v14, 1u, 1u, (char *)&v17 + 2, &v19);
        if ((result & 0x80000000) != 0)
          return result;
        if ((unsigned __int16)v17 != HIWORD(v17)
          && (LD_setErrorDescription(a5, a6, 0, v13, "inconsistent phrase TOPOS"), (a3 & 1) != 0))
        {
          result = LD_writeField(a1, a2, v13, 2u, 1u, (char *)&v17 + 2, &v18);
          v13 = v14;
          if ((result & 0x80000000) != 0)
            return result;
        }
        else
        {
LABEL_23:
          v13 = v14;
        }
      }
      result = LD_nextInSent(a1, a2, v14, &v21);
      if ((result & 0x80000000) != 0)
        return result;
    }
    result = 0;
    if (v13)
    {
      if (v12)
      {
        result = LD_enquireField(a1, a2, v12, 2u, &v16);
        if ((result & 0x80000000) == 0)
        {
          if ((_WORD)v16)
          {
            result = LD_readField(a1, a2, v12, 2u, 1u, &v17, &v19);
            if ((result & 0x80000000) == 0)
            {
              result = LD_enquireField(a1, a2, v13, 2u, &v16);
              if ((result & 0x80000000) == 0)
              {
                if ((_WORD)v16)
                {
                  result = LD_readField(a1, a2, v13, 2u, 1u, (char *)&v16 + 2, &v19);
                  if ((result & 0x80000000) == 0)
                  {
                    if ((unsigned __int16)v17 == HIWORD(v16))
                    {
                      return 0;
                    }
                    else
                    {
                      LD_setErrorDescription(a5, a6, 0, v13, "inconsistent TOPOS of final phrase record");
                      result = 0;
                      if ((a3 & 1) != 0)
                        return LD_writeField(a1, a2, v13, 2u, 1u, (char *)&v17, &v18);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t LD_checkRECPROMPT(uint64_t a1, int a2, char a3, unsigned int a4, char *a5, char *a6)
{
  uint64_t result;
  unsigned __int16 v12;
  int v13;
  unsigned int v14;
  unsigned int v16;
  __int16 v17;
  __int16 v18;
  int v19;
  char __s;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  unsigned __int16 v25;
  __int16 v26;
  __int16 v27;

  v25 = 0;
  v24 = 11;
  v23 = 0;
  result = LD_findChild(a1, a2, 2, a4, &v25);
  if ((result & 0x80000000) == 0)
  {
    v12 = 0;
    v13 = 4;
    while (1)
    {
      v14 = v25;
      if (!v25)
        return 0;
      result = LD_readField(a1, a2, v25, 0, 1u, &v24, &v27);
      if ((result & 0x80000000) != 0)
        return result;
      if ((v24 - 9) < 6 || v24 == 4)
        break;
LABEL_33:
      result = LD_nextInSent(a1, a2, v14, &v25);
      if ((result & 0x80000000) != 0)
        return result;
    }
    if (v12)
    {
      if ((v13 & 0xFFFFFFFD) == 0xC)
      {
        if ((v24 | 2) != 0xE)
        {
LABEL_15:
          result = LD_readField(a1, a2, v12, 8u, 1u, &v23, &v27);
          if ((result & 0x80000000) != 0)
            return result;
          if (!v23)
          {
            LD_setErrorDescription(a5, a6, 0, v12, "End of recorded prompt should coincide with phrase boundary: inserted short break");
            v23 = 1;
            if ((a3 & 1) != 0)
            {
              v22 = 15;
              v21 = 0;
              __s = 0;
              v19 = 0;
              v18 = 0;
              result = LD_writeField(a1, a2, v12, 8u, 1u, (char *)&v23, &v26);
              if ((result & 0x80000000) != 0)
                return result;
              result = LD_writeField(a1, a2, v12, 0x12u, 9u, "external", &v26);
              if ((result & 0x80000000) != 0)
                return result;
              result = LD_createPrev(a1, a2, v14, (_WORD *)&v19 + 1);
              if ((result & 0x80000000) != 0)
                return result;
              result = LD_enquireField(a1, a2, v14, 1u, &v19);
              if ((result & 0x80000000) != 0)
                return result;
              if ((_WORD)v19)
              {
                result = LD_readField(a1, a2, v14, 1u, 1u, &v18, &v27);
                if ((result & 0x80000000) != 0)
                  return result;
                v16 = HIWORD(v19);
                result = LD_writeField(a1, a2, HIWORD(v19), 1u, 1u, (char *)&v18, &v26);
                if ((result & 0x80000000) != 0)
                  return result;
                result = LD_writeField(a1, a2, v16, 2u, 1u, (char *)&v18, &v26);
                if ((result & 0x80000000) != 0)
                  return result;
              }
              else
              {
                v16 = HIWORD(v19);
              }
              result = LD_writeField(a1, a2, v16, 0, 1u, (char *)&v22, &v26);
              if ((result & 0x80000000) != 0)
                return result;
              v17 = strlen(&__s);
              result = LD_writeField(a1, a2, v16, 4u, (unsigned __int16)(v17 + 1), &__s, &v26);
              if ((result & 0x80000000) != 0)
                return result;
              result = LD_writeField(a1, a2, v16, 7u, 1u, (char *)&v21, &v26);
              if ((result & 0x80000000) != 0)
                return result;
              result = LD_writeField(a1, a2, v16, 8u, 1u, (char *)&v23, &v26);
              if ((result & 0x80000000) != 0)
                return result;
            }
          }
        }
      }
      else if (v24 == 14)
      {
        goto LABEL_15;
      }
    }
    v13 = v24;
    v12 = v14;
    goto LABEL_33;
  }
  return result;
}

uint64_t LD_getWordType(uint64_t a1, uint64_t a2, unsigned int a3, _QWORD *a4)
{
  *a4 = LD_WORDTYPE_LOOKUP[2 * a3 + 1];
  return 0;
}

uint64_t LD_traverseWordRecsFromTokenRec(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t (*a4)(uint64_t, uint64_t, unsigned __int16 *, uint64_t), uint64_t a5)
{
  uint64_t result;

  while (1)
  {
    if (!*a3)
      return 0;
    result = a4(a1, a2, a3, a5);
    if ((result & 0x1FFF) == 0x1E1C)
      break;
    if ((result & 0x80000000) == 0)
    {
      result = LD_nextInSent(a1, a2, *a3, a3);
      if ((result & 0x80000000) == 0)
        continue;
    }
    return result;
  }
  return LD_nextInSent(a1, a2, *a3, a3);
}

uint64_t LD_traverseWordRecs(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t (*a4)(uint64_t, uint64_t, unsigned __int16 *, uint64_t), uint64_t (*a5)(uint64_t, uint64_t, unsigned __int16 *, uint64_t), uint64_t (*a6)(uint64_t, uint64_t, unsigned __int16 *, uint64_t), uint64_t (*a7)(uint64_t, uint64_t, unsigned __int16 *, uint64_t), uint64_t a8)
{
  uint64_t result;
  unsigned __int16 v16;

  v16 = 0;
  result = LD_findChild(a1, a2, 2, a3, &v16);
  if ((result & 0x80000000) == 0)
  {
    if (!a4)
      goto LABEL_5;
    result = a4(a1, a2, &v16, a8);
    if ((result & 0x80000000) == 0)
    {
      while (v16)
      {
        result = a5(a1, a2, &v16, a8);
        if ((result & 0x80000000) != 0)
          return result;
        result = LD_nextInSent(a1, a2, v16, &v16);
        if ((result & 0x80000000) != 0)
          return result;
        if (a6)
        {
          result = a6(a1, a2, &v16, a8);
          if ((result & 0x80000000) != 0)
            return result;
        }
        else
        {
LABEL_5:
          result = 0;
        }
      }
      if (a7)
        return a7(a1, a2, &v16, a8);
    }
  }
  return result;
}

uint64_t lingdb_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2300583937;
  result = 0;
  *a2 = &iLingDB;
  return result;
}

char *LD_setErrorDescription(char *result, char *__dst, int a3, __int16 a4, char *__src)
{
  if (result && (a3 || !*(_WORD *)result))
  {
    *(_WORD *)result = a4;
    if (!__dst)
      return result;
  }
  else if (!__dst)
  {
    return result;
  }
  if (a3 || !*__dst)
    return strncpy(__dst, __src, 0x64uLL);
  return result;
}

uint64_t LD_createPrev(uint64_t a1, int a2, unsigned int a3, _WORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned int v19;
  __int16 v20;

  v20 = 0;
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0)
    return 2300583944;
  if (*(_DWORD *)(a1 + 48) <= a3 || (v12 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a3)) == 0)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20020, "%s%u", v8, v9, v10, v11, "record");
    return 2300591633;
  }
  v13 = *(unsigned __int8 *)(v12 + 2);
  if (v13 == 1)
  {
    v14 = 2300591621;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20008, 0, v8, v9, v10, v11, v19);
    return v14;
  }
  v16 = *(unsigned __int16 **)(v12 + 24);
  if (v16)
  {
    v17 = LD_createNext(a1, a2, *v16, &v20);
    if ((v17 & 0x80000000) != 0)
      return v17;
    v14 = 0;
    goto LABEL_14;
  }
  v18 = *(unsigned __int16 **)(v12 + 8);
  if (!v18)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20009, "%s%s%s%u%s%u", v8, v9, v10, v11, "method");
    return 2300591622;
  }
  v14 = LD_createChild(a1, a2, v13, *v18, &v20);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_14:
    *a4 = v20;
    *(_DWORD *)(a1 + 72) = 1;
  }
  return v14;
}

uint64_t LD_deleteRec(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0)
    return 2300583944;
  *(_DWORD *)(a1 + 72) = 1;
  return LD_deleteRecordRecursive(a1, a3, a3, v5, v6, v7, v8, v9);
}

uint64_t LD_deleteRecordRecursive(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  uint64_t v12;
  char v13;
  unsigned __int16 *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a1 + 48) > a2 && (v10 = *(_QWORD **)(*(_QWORD *)(a1 + 64) + 8 * a2)) != 0)
  {
    v12 = 0;
    v13 = 1;
    do
    {
      v14 = (unsigned __int16 *)v10[v12 + 4];
      if (!v14)
        break;
      v15 = v13;
      v16 = LD_deleteRecordRecursive(a1, *v14, a3);
      if ((_DWORD)v16)
        return v16;
      v13 = 0;
      v12 = 1;
    }
    while ((v15 & 1) != 0);
    if (a2 == (_DWORD)a3)
    {
      v17 = v10[3];
      if (v17)
      {
        v18 = v10[2];
        if (v18)
        {
          *(_QWORD *)(v18 + 24) = v17;
          *(_QWORD *)(v10[3] + 16) = v18;
        }
        else
        {
          *(_QWORD *)(v17 + 16) = 0;
        }
      }
      else
      {
        v22 = 0;
        v23 = 1;
        do
        {
          v24 = v10[1] + 8 * v22;
          v27 = *(_QWORD **)(v24 + 32);
          v25 = (_QWORD *)(v24 + 32);
          v26 = v27;
          if (!v27)
            goto LABEL_21;
          v28 = v23;
          v23 = 0;
          v22 = 1;
        }
        while ((v28 & (v26 != v10)) != 0);
        if (v26 != v10)
        {
LABEL_21:
          v19 = 2300591631;
          log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20018, "%s%u%s%u", a5, a6, a7, a8, "recordType");
          return v19;
        }
        v29 = v10[2];
        if (v29)
        {
          *v25 = v29;
          *(_QWORD *)(v10[2] + 24) = 0;
        }
        else
        {
          *v25 = 0;
          if ((v28 & 1) != 0)
          {
            v30 = v10[1];
            v31 = *(_QWORD *)(v30 + 40);
            if (v31)
            {
              *(_QWORD *)(v30 + 32) = v31;
              *(_QWORD *)(v10[1] + 40) = 0;
            }
          }
        }
      }
      goto LABEL_23;
    }
    v21 = (unsigned __int16 *)v10[2];
    if (!v21 || (v19 = LD_deleteRecordRecursive(a1, *v21, a3), !(_DWORD)v19))
    {
LABEL_23:
      v19 = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a2) = 0;
    }
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20020, "%s%u", a5, a6, a7, a8, "record");
    return 2300591633;
  }
  return v19;
}

uint64_t LD_objOpen(uint64_t a1, uint64_t a2, _WORD *a3, int a4, uint64_t a5)
{
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v27 = 0;
  v26 = 0;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v26);
  if ((inited & 0x80000000) != 0)
    return inited;
  log_OutText(*(_QWORD *)(v26 + 32), (uint64_t)"LINGDB", 4, 0, (uint64_t)"LINGDB ObjOpen: Begin", v7, v8, v9, v24);
  v10 = heap_Calloc(*(_QWORD **)(v26 + 8), 1, 80);
  if (v10)
  {
    v15 = (uint64_t *)v10;
    *(_QWORD *)v10 = v26;
    *(_DWORD *)(v10 + 48) = 1;
    if ((paramc_ParamGetUInt(*(_QWORD *)(v26 + 40), (uint64_t)"lingdbrecordinitialsize", (unsigned int *)(v10 + 52)) & 0x80000000) != 0)
      *((_DWORD *)v15 + 13) = 128;
    if ((paramc_ParamGetUInt(*(_QWORD *)(v26 + 40), (uint64_t)"lingdbrecordgrowbysize", (unsigned int *)v15 + 14) & 0x80000000) != 0)
      *((_DWORD *)v15 + 14) = 128;
    if ((paramc_ParamGetUInt(*(_QWORD *)(v26 + 40), (uint64_t)"lingdbmaxrecords", (unsigned int *)v15 + 15) & 0x80000000) != 0)
      *((_DWORD *)v15 + 15) = -1;
    if ((paramc_ParamGetUInt(*(_QWORD *)(v26 + 40), (uint64_t)"lingdbrecpoolinitialsize", (unsigned int *)&v27 + 1) & 0x80000000) != 0)
      HIDWORD(v27) = 10240;
    if ((paramc_ParamGetUInt(*(_QWORD *)(v26 + 40), (uint64_t)"lingdbrecpoolgrowsize", (unsigned int *)&v27) & 0x80000000) != 0)
      LODWORD(v27) = 4096;
    log_OutText(*(_QWORD *)(*v15 + 32), (uint64_t)"LINGDB", 5, 0, (uint64_t)"endMallocdID=%u, growBySize=%u, maxRecords=%u, recPoolInitial=%u, recPoolGrow=%u, currentSentID=%u", v16, v17, v18, *((unsigned int *)v15 + 13));
    LD_HeapInit((uint64_t)(v15 + 1), v26, (uint64_t)"records/fields", SHIDWORD(v27), v27);
    *(_QWORD *)a5 = v15;
    *(_DWORD *)(a5 + 8) = 45762;
    v19 = LD_reset(v15, *(_QWORD *)(a5 + 8));
    if ((v19 & 0x80000000) != 0)
    {
      LD_objClose(*(uint64_t **)a5, *(_QWORD *)(a5 + 8));
      *(_QWORD *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
    }
    log_OutText(*(_QWORD *)(v26 + 32), (uint64_t)"LINGDB", 4, 0, (uint64_t)"LINGDB ObjOpen: End (%x)", v20, v21, v22, v19);
  }
  else
  {
    log_OutPublic(*(_QWORD *)(v26 + 32), (uint64_t)"LINGDB", 20000, 0, v11, v12, v13, v14, v25);
    return 2300583946;
  }
  return v19;
}

uint64_t LD_objClose(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  if ((safeh_HandleCheck((uint64_t)a1, a2, 45762, 80) & 0x80000000) != 0)
    return 2300583944;
  v7 = *a1;
  log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"LINGDB", 4, 0, (uint64_t)"LINGDB ObjClose : Begin", v4, v5, v6, v20);
  LD_HeapFreePool(a1 + 1, v8, v9, v10, v11, v12, v13, v14);
  LD_clear((uint64_t)a1, a2);
  v15 = a1[8];
  if (v15)
    heap_Free(*(_QWORD **)(*a1 + 8), v15);
  heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)a1);
  log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"LINGDB", 4, 0, (uint64_t)"LINGDB ObjClose : End (%x)", v16, v17, v18, 0);
  return 0;
}

uint64_t LD_objReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0)
    return 2300583944;
  v6 = *(_QWORD *)a1;
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 4, 0, (uint64_t)"LINGDB ObjReopen : Begin", v3, v4, v5, v11);
  log_OutText(*(_QWORD *)(v6 + 32), (uint64_t)"LINGDB", 4, 0, (uint64_t)"LINGDB ObjReopen : End (%x)", v7, v8, v9, 0);
  return 0;
}

uint64_t LD_reset(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;

  v3 = 2300583944;
  v25 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 45762, 80) & 0x80000000) == 0)
  {
    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"LINGDB", 4, 0, (uint64_t)"LINGDB LD_reset : Begin", v4, v5, v6, v23);
    v14 = *((_DWORD *)a1 + 12);
    if (v14 == 1)
    {
      if (!a1[8])
      {
        v15 = heap_Calloc(*(_QWORD **)(*a1 + 8), *((unsigned int *)a1 + 13), 8);
        a1[8] = v15;
        if (!v15)
        {
          log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"LINGDB", 20000, 0, v10, v11, v12, v13, v24);
          return 2300583946;
        }
      }
      LD_HeapResetPool((uint64_t)(a1 + 1), v7, v8, v9, v10, v11, v12, v13);
      v21 = LD_createRec(a1, 1u, &v25, v16, v17, v18, v19, v20);
      if ((v21 & 0x80000000) != 0)
        return v21;
    }
    else if (v14 != 2)
    {
      log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"LINGDB", 20003, 0, v10, v11, v12, v13, v24);
      return 2300591616;
    }
    a1[9] = 0;
    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"LINGDB", 4, 0, (uint64_t)"LINGDB LD_reset : End (%x)", v11, v12, v13, 0);
    return 0;
  }
  return v3;
}

uint64_t LD_clear(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0)
    return 2300583944;
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 4, 0, (uint64_t)"LINGDB LD_clear : Begin", v3, v4, v5, v14);
  *(_DWORD *)(a1 + 72) = 0;
  if (*(_QWORD *)(a1 + 64))
  {
    LD_HeapResetPool(a1 + 8, v6, v7, v8, v9, v10, v11, v12);
    *(_DWORD *)(a1 + 48) = 1;
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 4, 0, (uint64_t)"LINGDB LD_clear : End (%x)", v10, v11, v12, 0);
  return 0;
}

uint64_t LD_findParent(uint64_t a1, int a2, unsigned int a3, _WORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t result;
  unsigned __int16 v14;

  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0)
  {
    v14 = 8200;
    return v14 | 0x89200000;
  }
  if (*(_DWORD *)(a1 + 48) <= a3 || (v11 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a3)) == 0)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20020, "%s%u", v7, v8, v9, v10, "record");
    v14 = 15889;
    return v14 | 0x89200000;
  }
  v12 = *(_WORD **)(v11 + 8);
  if (v12)
    LOWORD(v12) = *v12;
  result = 0;
  *a4 = (_WORD)v12;
  return result;
}

uint64_t LD_findPrevCommonParent(uint64_t a1, int a2, unsigned int a3, _WORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t result;
  unsigned __int16 v14;

  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0)
  {
    v14 = 8200;
    return v14 | 0x89200000;
  }
  if (*(_DWORD *)(a1 + 48) <= a3 || (v11 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a3)) == 0)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20020, "%s%u", v7, v8, v9, v10, "record");
    v14 = 15889;
    return v14 | 0x89200000;
  }
  v12 = *(_WORD **)(v11 + 24);
  if (v12)
    LOWORD(v12) = *v12;
  result = 0;
  *a4 = (_WORD)v12;
  return result;
}

uint64_t LD_prevInSent(uint64_t a1, int a2, unsigned int a3, _WORD *a4)
{
  uint64_t PrevCommonParent;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v16;

  v16 = 0;
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0)
    return 2300583944;
  PrevCommonParent = LD_findPrevCommonParent(a1, a2, a3, &v16);
  if ((PrevCommonParent & 0x80000000) != 0)
    return PrevCommonParent;
  if (v16)
    goto LABEL_4;
  if (*(_DWORD *)(a1 + 48) <= a3 || (v14 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a3)) == 0)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20020, "%s%u", v9, v10, v11, v12, "record");
    return 2300591633;
  }
  if ((*(_BYTE *)(v14 + 2) & 0xFE) == 2)
  {
LABEL_4:
    v13 = 0;
    *a4 = v16;
  }
  else
  {
    v13 = 2300591625;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"LINGDB", 20012, "%s%s%s%u%s%u", v9, v10, v11, v12, "method");
  }
  return v13;
}

uint64_t LD_checkIfIsInPrompt(uint64_t a1, int a2, unsigned int a3, _DWORD *a4)
{
  unsigned int v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  BOOL v12;
  char *__s1;
  int v14;
  __int16 v15;
  int v16;
  size_t __n;

  v16 = 0;
  LODWORD(__n) = 0;
  v15 = 0;
  v14 = 11;
  __s1 = 0;
  *a4 = 0;
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0)
    return 2300583944;
  v8 = *(_QWORD *)(a1 + 64) != 0;
  v9 = LD_enquireChild(a1, a2, 2, v8, &v15);
  result = 0;
  if ((v9 & 0x80000000) == 0)
  {
    if (v15)
    {
      result = LD_findChild(a1, a2, 2, v8, (_WORD *)&__n + 1);
      if ((result & 0x80000000) == 0)
      {
        while (1)
        {
          v11 = WORD1(__n);
          v12 = !WORD1(__n) || HIWORD(v16) > a3;
          if (v12 || *a4)
            break;
          result = LD_readField(a1, a2, WORD1(__n), 1u, 1u, (char *)&v16 + 2, &__n);
          if ((result & 0x80000000) != 0)
            return result;
          if (HIWORD(v16) <= a3)
          {
            result = LD_readField(a1, a2, v11, 0, 1u, &v14, &__n);
            if ((result & 0x80000000) != 0)
              return result;
            if (v14 == 5)
            {
              result = LD_readDirectField(a1, a2, v11, 4u, &__s1, (unsigned __int16 *)&__n);
              if ((result & 0x80000000) != 0)
                return result;
              if ((_WORD)__n && !strncmp(__s1, "prompt", (unsigned __int16)__n))
              {
                result = LD_readField(a1, a2, v11, 2u, 1u, &v16, &__n);
                if ((result & 0x80000000) != 0)
                  return result;
                if ((unsigned __int16)v16 > a3)
                  *a4 = 1;
              }
            }
          }
          result = LD_nextInSent(a1, a2, v11, (_WORD *)&__n + 1);
          if ((result & 0x80000000) != 0)
            return result;
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t LD_setPhonInDepes(uint64_t a1, int a2, int a3)
{
  uint64_t result;

  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0)
    return 2300583944;
  result = 0;
  *(_DWORD *)(a1 + 76) = a3;
  return result;
}

uint64_t LD_dumpDB(uint64_t *a1, uint64_t a2, int a3, const char *a4, int a5)
{
  return LD_dumpDBViaLogging(a1, a2, a3, a4, a5, 0x64u, 0);
}

uint64_t LD_dumpDBViaLogging(uint64_t *a1, uint64_t a2, int a3, const char *a4, int a5, unsigned int a6, int a7)
{
  int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _QWORD v22[257];

  v22[256] = *MEMORY[0x1E0C80C00];
  if ((safeh_HandleCheck((uint64_t)a1, a2, 45762, 80) & 0x80000000) != 0)
    return 2300583944;
  v21 = 0;
  if (log_GetLogLevel(*(_QWORD *)(*a1 + 32)) >= a6)
  {
    bzero(v22, 0x800uLL);
    v17 = *(_OWORD *)"LINGDB";
    v18 = unk_1DEC66260;
    v19 = xmmword_1DEC66270;
    v20 = unk_1DEC66280;
    LOWORD(v21) = 146;
    HIDWORD(v21) = a6;
    v16 = *(_QWORD *)(*a1 + 32);
    if (a3)
      LOWORD(v21) = a3;
    if (a4)
    {
      LD_logOutputCB((uint64_t)&v16, a4);
      LD_logOutputCB((uint64_t)&v16, "\n");
    }
    if (a5 == 1)
    {
      v15 = 0;
      if (LD_getDBChangedStatus((uint64_t)a1, a2, &v15) || v15 != 1)
      {
        LD_logOutputCB((uint64_t)&v16, "LingDB unchanged since last call\n");
        return 0;
      }
      LD_resetDBChangedStatus((uint64_t)a1, a2);
    }
    dumpSentenceRecord(a1, a2, (void (*)(uint64_t, const char *))LD_logOutputCB, (uint64_t)&v16, a7);
  }
  return 0;
}

uint64_t LD_dumpDBNew(uint64_t *a1, uint64_t a2, int a3, const char *a4, int a5)
{
  return LD_dumpDBViaLogging(a1, a2, a3, a4, a5, 0, 1);
}

uint64_t LD_serialize(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t, const char *), uint64_t a4)
{
  dumpSentenceRecord(a1, a2, a3, a4, 1);
  return 0;
}

uint64_t dumpSentenceRecord(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t, const char *), uint64_t a4, int a5)
{
  uint64_t *v9;
  uint64_t result;
  unsigned int v11;
  int v12;
  int v13;
  unsigned __int16 v14;
  BOOL v15;
  int v16;
  unsigned __int16 v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  size_t v22;
  char *v23;
  const char *v24;
  uint64_t v25;
  int v26;
  unsigned __int16 i;
  unsigned __int16 *v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned __int16 *v32;
  __int16 j;
  unsigned __int16 *v34;
  int v35;
  unsigned __int16 *v36;
  uint64_t v37;
  size_t __n;
  uint64_t v39;
  unsigned __int16 v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned __int16 v44;
  unsigned __int16 v45;
  unsigned __int16 v46;
  int v47;
  int v48;

  v9 = a1;
  v45 = 0;
  v44 = 0;
  v43 = 0;
  result = LD_findDirect(a1, a2, 1, 0, &v45);
  if (!(_DWORD)result)
  {
    v11 = v45;
    if (v45)
    {
      v48 = 0;
      if ((LD_enquireField((uint64_t)v9, a2, v45, 0, (_WORD *)&v48 + 1) & 0x80000000) == 0
        && HIWORD(v48) == 1
        && (LD_readDirectField((uint64_t)v9, a2, v11, 0, &v43, (unsigned __int16 *)&v48) & 0x80000000) == 0
        && (unsigned __int16)v48 <= 1u)
      {
        v43 = 0;
      }
      a3(a4, "<SentenceRecord>\n");
      v12 = 0;
      do
      {
        HIDWORD(v37) = a5;
        LOWORD(v37) = v45;
        (*(void (**)(uint64_t *, uint64_t, void (*)(uint64_t, const char *), uint64_t, const char *, _QWORD, _QWORD, _QWORD, uint64_t))&LD_FIELDOFFSETSD[20 * v12 + 480])(v9, a2, a3, a4, "  ", v12, *(_QWORD *)&LD_FIELDOFFSETSD[20 * v12 + 476], LD_FIELDOFFSETSD[20 * v12 + 472], v37);
        ++v12;
      }
      while (v12 < 5u);
      v13 = LD_enquireChild((uint64_t)v9, a2, 3, v45, &v44);
      v14 = v44;
      if (v13)
        v15 = 1;
      else
        v15 = v44 == 0;
      if (!v15)
      {
        do
        {
          a3(a4, " <TokenRecord>\n");
          v16 = 0;
          do
          {
            HIDWORD(v37) = a5;
            LOWORD(v37) = v14;
            (*(void (**)(uint64_t *, uint64_t, void (*)(uint64_t, const char *), uint64_t, const char *, _QWORD, _QWORD, _QWORD, uint64_t))&LD_FIELDOFFSETSD[20 * v16 + 1384])(v9, a2, a3, a4, "    ", v16, *(_QWORD *)&LD_FIELDOFFSETSD[20 * v16 + 1380], LD_FIELDOFFSETSD[20 * v16 + 1376], v37);
            ++v16;
          }
          while (v16 < 9u);
          a3(a4, " </TokenRecord>\n");
          LD_nextInSent((uint64_t)v9, a2, v44, &v44);
          v14 = v44;
        }
        while (v44);
      }
      if (!LD_enquireChild((uint64_t)v9, a2, 2, v45, &v44))
      {
        v17 = v44;
        if (v44)
        {
          v42 = a5;
          v41 = (uint64_t)v9;
          do
          {
            v18 = v43;
            v40 = v17;
            v46 = v17;
            a3(a4, " <WordRecord>\n");
            if (v18)
            {
              v47 = 0;
              v48 = 0;
              if ((safeh_HandleCheck((uint64_t)v9, a2, 45762, 80) & 0x80000000) == 0)
              {
                v19 = *v9;
                if ((LD_enquireField((uint64_t)v9, a2, v40, 2u, &v47) & 0x80000000) == 0
                  && (unsigned __int16)v47 == 1
                  && (LD_enquireField((uint64_t)v9, a2, v40, 1u, &v47) & 0x80000000) == 0
                  && (unsigned __int16)v47 == 1
                  && (LD_readField((uint64_t)v9, a2, v40, 1u, 1u, &v48, (_WORD *)&v48 + 1) & 0x80000000) == 0
                  && (LD_readField((uint64_t)v9, a2, v40, 2u, 1u, (char *)&v47 + 2, (_WORD *)&v48 + 1) & 0x80000000) == 0)
                {
                  v39 = v19;
                  v20 = HIWORD(v47) - (unsigned __int16)v48;
                  v21 = a5
                      ? xmlaux_calculateExtraEscapeBytes(v18 + (unsigned __int16)v48, HIWORD(v47) - (unsigned __int16)v48): 0;
                  __n = v20;
                  v22 = v21 + v20;
                  v23 = (char *)heap_Alloc(*(_QWORD *)(v39 + 8), (v22 + 1));
                  if (v23)
                  {
                    v24 = (const char *)(v18 + (unsigned __int16)v48);
                    v25 = (uint64_t)v23;
                    if (a5)
                      xmlaux_escape(v23, (uint64_t)v24, __n);
                    else
                      strncpy(v23, v24, __n);
                    *(_BYTE *)(v25 + v22) = 0;
                    a3(a4, "    ");
                    a3(a4, "<");
                    a3(a4, "LD_W_ORTH");
                    a3(a4, "> ");
                    a3(a4, (const char *)v25);
                    a3(a4, " </");
                    a3(a4, "LD_W_ORTH");
                    a3(a4, ">\n");
                    heap_Free(*(_QWORD **)(v39 + 8), v25);
                  }
                }
              }
            }
            v26 = 0;
            do
            {
              HIDWORD(v37) = a5;
              LOWORD(v37) = v40;
              (*(void (**)(uint64_t *, uint64_t, void (*)(uint64_t, const char *), uint64_t, const char *, _QWORD, _QWORD, _QWORD, uint64_t))&LD_FIELDOFFSETSD[20 * v26 + 932])(v9, a2, a3, a4, "    ", v26, *(_QWORD *)&LD_FIELDOFFSETSD[20 * v26 + 928], LD_FIELDOFFSETSD[20 * v26 + 924], v37);
              ++v26;
            }
            while (v26 < 0x16u);
            if (!LD_enquireChild((uint64_t)v9, a2, 4, v40, &v46))
            {
              for (i = v46; v46; a5 = v42)
              {
                HIWORD(v48) = i;
                a3(a4, "    <SI_LAYER>\n");
                v28 = LD_FIELDOFFSETSD;
                v29 = (uint64_t)v9;
                v30 = a5;
                v31 = 0;
                do
                {
                  v32 = v28;
                  HIDWORD(v37) = v30;
                  LOWORD(v37) = i;
                  (*(void (**)(uint64_t, uint64_t, void (*)(uint64_t, const char *), uint64_t, const char *, _QWORD, _QWORD, _QWORD, uint64_t))&v28[20 * v31 + 1836])(v29, a2, a3, a4, "      ", v31, *(_QWORD *)&v28[20 * v31 + 1832], v28[20 * v31 + 1828], v37);
                  v28 = v32;
                  ++v31;
                }
                while (v31 < 2u);
                if (!LD_enquireChild(v29, a2, 5, i, (_WORD *)&v48 + 1))
                {
                  for (j = HIWORD(v48); HIWORD(v48); j = HIWORD(v48))
                  {
                    a3(a4, "      <SI_W_TOKEN>\n");
                    v34 = LD_FIELDOFFSETSD;
                    v35 = 0;
                    do
                    {
                      v36 = v34;
                      HIDWORD(v37) = v42;
                      LOWORD(v37) = j;
                      (*(void (**)(uint64_t, uint64_t, void (*)(uint64_t, const char *), uint64_t, const char *, _QWORD, _QWORD, _QWORD, uint64_t))&v34[20 * v35 + 2288])(v41, a2, a3, a4, "        ", v35, *(_QWORD *)&v34[20 * v35 + 2284], v34[20 * v35 + 2280], v37);
                      v34 = v36;
                      ++v35;
                    }
                    while (v35 < 2u);
                    a3(a4, "      </SI_W_TOKEN>\n");
                    LD_findNextCommonParent(v41, a2, HIWORD(v48), (_WORD *)&v48 + 1);
                  }
                }
                a3(a4, "    </SI_LAYER>\n");
                v9 = (uint64_t *)v41;
                LD_findNextCommonParent(v41, a2, v46, &v46);
                i = v46;
              }
            }
            a3(a4, " </WordRecord>\n");
            LD_nextInSent((uint64_t)v9, a2, v44, &v44);
            v17 = v44;
          }
          while (v44);
        }
      }
      return ((uint64_t (*)(uint64_t, const char *))a3)(a4, "</SentenceRecord>\n");
    }
  }
  return result;
}

uint64_t LD_printLH_U8String(uint64_t a1, int a2, void (*a3)(uint64_t, const char *), uint64_t a4, const char *a5, unsigned int a6, const char *a7, uint64_t a8, unsigned __int16 a9, int a10)
{
  return loc_printLH_U8String(a1, a2, a3, a4, a5, a6, a7, a9, a10, 0);
}

uint64_t loc_printLH_U8String(uint64_t a1, int a2, void (*a3)(uint64_t, const char *), uint64_t a4, const char *a5, unsigned int a6, const char *a7, unsigned int a8, int a9, int a10)
{
  uint64_t result;
  unsigned __int16 v19;
  unsigned int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  int v26;
  unsigned __int8 *v27;

  v27 = 0;
  v25 = 0;
  v26 = 0;
  result = LD_enquireField(a1, a2, a8, a6, (_WORD *)&v26 + 1);
  if ((result & 0x80000000) == 0 && HIWORD(v26) == 1)
  {
    LD_readDirectField(a1, a2, a8, a6, &v27, (unsigned __int16 *)&v26);
    v19 = v26;
    if ((_WORD)v26)
    {
      while (!v27[v19 - 1])
      {
        LOWORD(v26) = --v19;
        if (!v19)
        {
          v19 = 0;
          break;
        }
      }
    }
    if (a10)
    {
      v20 = (unsigned __int16)Utf8_DepesLengthInBytesUtf8(v27, v19);
      result = heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), v20 + 1);
      if (!result)
        return result;
      v21 = (unsigned __int8 *)result;
      utf8_DepesToUtf8((uint64_t)v27, (unsigned __int16)v26, 0, result, v20, &v25, 0);
      v19 = v25;
      v21[v25] = 0;
      LOWORD(v26) = v19;
      v27 = v21;
    }
    else
    {
      v21 = 0;
    }
    if (a9 && (v22 = xmlaux_calculateExtraEscapeBytes((uint64_t)v27, v19)) != 0)
    {
      v23 = v22;
      result = heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), v22 + (unsigned __int16)v26 + 1);
      if (!result)
      {
LABEL_18:
        if (v21)
          return (uint64_t)heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v21);
        return result;
      }
      v24 = (unsigned __int8 *)result;
      xmlaux_escape((char *)result, (uint64_t)v27, (unsigned __int16)v26);
      v24[v23 + (unsigned __int16)v26] = 0;
      v27 = v24;
    }
    else
    {
      v24 = 0;
    }
    a3(a4, a5);
    a3(a4, "<");
    a3(a4, a7);
    a3(a4, "> ");
    a3(a4, (const char *)v27);
    a3(a4, " </");
    a3(a4, a7);
    result = ((uint64_t (*)(uint64_t, const char *))a3)(a4, ">\n");
    if (v24)
      result = (uint64_t)heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v24);
    goto LABEL_18;
  }
  return result;
}

uint64_t LD_printTokenType(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, const char *), uint64_t a4, const char *a5, unsigned int a6, const char *a7, unsigned int a8, unsigned __int16 a9)
{
  uint64_t result;
  const char *v18;
  int v19;
  int v20;

  v19 = 0;
  v20 = 0;
  v18 = 0;
  result = LD_enquireField(a1, a2, a9, a6, (_WORD *)&v19 + 1);
  if ((result & 0x80000000) == 0 && HIWORD(v19) == 1)
  {
    LD_readField(a1, a2, a9, a6, a8, &v20, &v19);
    LD_getTokenType(a1, a2, (unsigned __int16)v20, &v18);
    a3(a4, a5);
    a3(a4, "<");
    a3(a4, a7);
    a3(a4, "> ");
    a3(a4, v18);
    a3(a4, " </");
    a3(a4, a7);
    return ((uint64_t (*)(uint64_t, const char *))a3)(a4, ">\n");
  }
  return result;
}

uint64_t LD_printWordType(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, const char *), uint64_t a4, const char *a5, unsigned int a6, const char *a7, unsigned int a8, unsigned __int16 a9)
{
  uint64_t result;
  const char *v18;
  int v19;
  int v20;

  v19 = 0;
  v20 = 0;
  v18 = 0;
  result = LD_enquireField(a1, a2, a9, a6, (_WORD *)&v19 + 1);
  if ((result & 0x80000000) == 0 && HIWORD(v19) == 1)
  {
    LD_readField(a1, a2, a9, a6, a8, &v20, &v19);
    LD_getWordType(a1, a2, (unsigned __int16)v20, &v18);
    a3(a4, a5);
    a3(a4, "<");
    a3(a4, a7);
    a3(a4, "> ");
    a3(a4, v18);
    a3(a4, " </");
    a3(a4, a7);
    return ((uint64_t (*)(uint64_t, const char *))a3)(a4, ">\n");
  }
  return result;
}

uint64_t LD_printLH_BOOL(uint64_t a1, int a2, void (*a3)(uint64_t, const char *), uint64_t a4, const char *a5, unsigned int a6, const char *a7, unsigned int a8, unsigned __int16 a9)
{
  uint64_t result;
  const char *v18;
  int v19;
  int v20;

  v19 = 0;
  v20 = 0;
  result = LD_enquireField(a1, a2, a9, a6, (_WORD *)&v19 + 1);
  if ((result & 0x80000000) == 0 && HIWORD(v19) == 1)
  {
    LD_readField(a1, a2, a9, a6, a8, &v20, &v19);
    a3(a4, a5);
    a3(a4, "<");
    a3(a4, a7);
    a3(a4, "> ");
    if (v20)
      v18 = "true";
    else
      v18 = "false";
    a3(a4, v18);
    a3(a4, " </");
    a3(a4, a7);
    return ((uint64_t (*)(uint64_t, const char *))a3)(a4, ">\n");
  }
  return result;
}

uint64_t LD_printLH_U16(uint64_t a1, int a2, void (*a3)(uint64_t, const char *), uint64_t a4, const char *a5, unsigned int a6, const char *a7, unsigned int a8, unsigned __int16 a9)
{
  uint64_t result;
  char v18[6];
  __int16 v19;
  int v20;

  v20 = 0;
  v19 = 0;
  result = LD_enquireField(a1, a2, a9, a6, &v20);
  if ((result & 0x80000000) == 0 && (unsigned __int16)v20 == 1)
  {
    LD_readField(a1, a2, a9, a6, a8, (char *)&v20 + 2, &v19);
    LH_utoa(HIWORD(v20), v18, 0xAu);
    a3(a4, a5);
    a3(a4, "<");
    a3(a4, a7);
    a3(a4, "> ");
    a3(a4, v18);
    a3(a4, " </");
    a3(a4, a7);
    return ((uint64_t (*)(uint64_t, const char *))a3)(a4, ">\n");
  }
  return result;
}

uint64_t LD_printLH_U32Array(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  int v25;
  char v26[11];
  _BYTE v27[10241];
  _DWORD v28[1024];
  uint64_t v29;

  v9 = MEMORY[0x1E0C80A78]();
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v22 = v9;
  v29 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  result = LD_enquireField(v9, v20, a9, v12, (_WORD *)&v25 + 1);
  if ((result & 0x80000000) == 0 && HIWORD(v25) == 1)
  {
    LD_readField(v22, v21, a9, v13, 0x400u, v28, &v25);
    v27[0] = 0;
    if ((_WORD)v25)
    {
      v24 = 0;
      do
      {
        LH_utoa(v28[v24], v26, 0xAu);
        __strcat_chk();
        __strcat_chk();
        ++v24;
      }
      while (v24 < (unsigned __int16)v25);
    }
    v19(v17, v15);
    v19(v17, (uint64_t)"<");
    v19(v17, v11);
    v19(v17, (uint64_t)"> ");
    v19(v17, (uint64_t)v27);
    v19(v17, (uint64_t)"</");
    v19(v17, v11);
    return ((uint64_t (*)(uint64_t, const char *))v19)(v17, ">\n");
  }
  return result;
}

uint64_t LD_printPHON(uint64_t a1, int a2, void (*a3)(uint64_t, const char *), uint64_t a4, const char *a5, unsigned int a6, const char *a7, uint64_t a8, unsigned __int16 a9, int a10)
{
  return loc_printLH_U8String(a1, a2, a3, a4, a5, a6, a7, a9, a10, *(_DWORD *)(a1 + 76));
}

uint64_t LD_printLH_U8StringToUtf8(uint64_t a1, int a2, void (*a3)(uint64_t, const char *), uint64_t a4, const char *a5, unsigned int a6, const char *a7, uint64_t a8, unsigned __int16 a9, int a10)
{
  return loc_printLH_U8String(a1, a2, a3, a4, a5, a6, a7, a9, a10, 1);
}

uint64_t LD_printLH_U16String(uint64_t a1, int a2, void (*a3)(uint64_t, const char *), uint64_t a4, const char *a5, unsigned int a6, const char *a7, uint64_t a8, unsigned __int16 a9)
{
  uint64_t result;
  unint64_t i;
  char v18[6];
  unsigned __int16 v19;
  __int16 v20;
  _WORD v21[32];
  _BYTE v22[193];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  v19 = 0;
  result = LD_enquireField(a1, a2, a9, a6, &v20);
  if ((result & 0x80000000) == 0 && v20 == 1)
  {
    LD_readField(a1, a2, a9, a6, 0x20u, v21, &v19);
    v22[0] = 0;
    if (v19)
    {
      for (i = 0; i < v19; ++i)
      {
        LH_itoa((unsigned __int16)v21[i], v18, 0xAu);
        __strcat_chk();
        __strcat_chk();
      }
    }
    a3(a4, a5);
    a3(a4, "<");
    a3(a4, a7);
    a3(a4, "> ");
    a3(a4, v22);
    a3(a4, " </");
    a3(a4, a7);
    return ((uint64_t (*)(uint64_t, const char *))a3)(a4, ">\n");
  }
  return result;
}

uint64_t CB_appendString(uint64_t a1, char *__s)
{
  size_t v4;
  size_t v5;
  char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = strlen(__s);
  v5 = v4;
  v6 = *(char **)(a1 + 8);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7 > strlen(*(const char **)(a1 + 8)) + v4)
    {
LABEL_7:
      strcat(v6, __s);
      return 0;
    }
    *(_QWORD *)(a1 + 16) = v5 + v7 + 50;
    v8 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), (uint64_t)v6, (v5 + v7 + 50));
  }
  else
  {
    v9 = v4 + *(_QWORD *)(a1 + 16) + 50;
    *(_QWORD *)(a1 + 16) = v9;
    v8 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, v9);
  }
  v6 = (char *)v8;
  if (v8)
  {
    *(_QWORD *)(a1 + 8) = v8;
    goto LABEL_7;
  }
  return 10;
}

uint64_t LD_printMarkerT(uint64_t *a1, int a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned __int16 a9, unsigned int a10)
{
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  size_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  size_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *__s;
  uint64_t v37;
  uint64_t v38;
  int v39;

  v15 = (uint64_t)a1;
  v39 = 0;
  v37 = 0;
  v38 = 0;
  __s = 0;
  v35 = *a1;
  result = LD_enquireField((uint64_t)a1, a2, a9, a6, (_WORD *)&v39 + 1);
  v34 = 0;
  if ((result & 0x80000000) == 0 && HIWORD(v39) == 1)
  {
    v31 = v15;
    LD_readDirectField(v15, a2, a9, a6, &v38, (unsigned __int16 *)&v39);
    v17 = a5;
    a3(a4, a5);
    a3(a4, (uint64_t)"<");
    v30 = a7;
    a3(a4, a7);
    a3(a4, (uint64_t)">\n");
    if ((_WORD)v39)
    {
      v18 = 0;
      v19 = 0;
      v33 = 0;
      v34 = 0;
      v20 = a10;
      v21 = "  <MARKER> ";
      while (1)
      {
        a3(a4, v17);
        a3(a4, (uint64_t)v21);
        if (__s)
          *__s = 0;
        marker_serialize_tostring((void (*)(uint64_t, char *))CB_appendString, (uint64_t)&v35, v38 + v18, 0);
        v22 = __s;
        if ((_DWORD)v20)
        {
          v23 = strlen(__s);
          v24 = xmlaux_calculateExtraEscapeBytes((uint64_t)__s, v23);
          if (v24)
          {
            v25 = v21;
            v26 = v20;
            v27 = v24 + v23;
            if (v33 <= v24 + v23)
            {
              if (v34)
                heap_Free(*(_QWORD **)(*(_QWORD *)v31 + 8), v34);
              v33 = 2 * v27;
              result = heap_Alloc(*(_QWORD *)(*(_QWORD *)v31 + 8), (2 * v27) & 0xFFFFFFFE);
              if (!result)
              {
                v34 = 0;
                goto LABEL_23;
              }
              v28 = (char *)result;
              v17 = a5;
            }
            else
            {
              v28 = (char *)v34;
            }
            xmlaux_escape(v28, (uint64_t)v22, v23 + 1);
            v34 = (uint64_t)v28;
            v22 = v28;
            v20 = v26;
            v21 = v25;
          }
        }
        if (v22)
          v29 = v22;
        else
          v29 = &byte_1DEBD87CE;
        a3(a4, (uint64_t)v29);
        a3(a4, (uint64_t)" </MARKER>\n");
        ++v19;
        v18 += 32;
        if (v19 >= (unsigned __int16)v39)
          goto LABEL_22;
      }
    }
    v34 = 0;
LABEL_22:
    a3(a4, v17);
    a3(a4, (uint64_t)"</");
    a3(a4, v30);
    result = ((uint64_t (*)(uint64_t, const char *))a3)(a4, ">\n");
LABEL_23:
    v15 = v31;
  }
  if (__s)
    result = (uint64_t)heap_Free(*(_QWORD **)(*(_QWORD *)v15 + 8), (uint64_t)__s);
  if (v34)
    return (uint64_t)heap_Free(*(_QWORD **)(*(_QWORD *)v15 + 8), v34);
  return result;
}

uint64_t LD_logOutputCB(uint64_t a1, const char *a2)
{
  char *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;

  v4 = (char *)(a1 + 80);
  v5 = strlen((const char *)(a1 + 80));
  if (strlen(a2) + v5 >= 0x800)
  {
    result = log_OutText(*(_QWORD *)a1, a1 + 8, *(unsigned int *)(a1 + 76), 0, (uint64_t)"%s", v6, v7, v8, (uint64_t)v4);
    if (!(_DWORD)result)
      result = log_OutText(*(_QWORD *)a1, a1 + 8, *(unsigned int *)(a1 + 76), 0, (uint64_t)"%s", v10, v11, v12, (uint64_t)a2);
    goto LABEL_6;
  }
  v13 = strcat(v4, a2);
  v17 = (_BYTE *)(strlen(v13) + a1 + 79);
  if (*v17 == 10)
  {
    *v17 = 0;
    result = log_OutText(*(_QWORD *)a1, a1 + 8, *(unsigned int *)(a1 + 76), 0, (uint64_t)"%s", v14, v15, v16, (uint64_t)v4);
LABEL_6:
    *v4 = 0;
    return result;
  }
  return 0;
}

double LD_HeapInit(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  return result;
}

uint64_t LD_HeapAlloc(uint64_t a1, int a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;

  v4 = (_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)(a1 + 16);
  v5 = (a2 + 7) & 0xFFFFFFF8;
  if (v3)
  {
    while (1)
    {
      v6 = v3;
      result = v3[2];
      if ((unint64_t)(result + v5) <= v3[3])
        goto LABEL_16;
      v3 = (_QWORD *)*v3;
      if (!*v6)
        goto LABEL_6;
    }
  }
  v6 = 0;
LABEL_6:
  if (*(_DWORD *)(a1 + 32) || (v8 = *(_DWORD *)(a1 + 24), v8 <= v5))
  {
    if (*(_DWORD *)(a1 + 28) <= v5)
      v8 = (a2 + 7) & 0xFFFFFFF8;
    else
      v8 = *(_DWORD *)(a1 + 28);
  }
  result = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, v8 + 32);
  if (result)
  {
    v9 = (_QWORD *)result;
    result += 32;
    v9[2] = result;
    v9[3] = result + v8;
    *v9 = 0;
    v9[1] = result;
    *(_DWORD *)(a1 + 32) += v8;
    if (v6)
      v10 = v6;
    else
      v10 = v4;
    *v10 = v9;
    v6 = v9;
LABEL_16:
    *(_DWORD *)(a1 + 36) += v5;
    v6[2] = result + v5;
  }
  return result;
}

void LD_HeapResetPool(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *i;
  void *v10;

  if (a1 && *(_QWORD *)a1)
  {
    LD_HeapLogStats((uint64_t *)a1, (uint64_t)"before ResetPool", a3, a4, a5, a6, a7, a8);
    for (i = *(uint64_t **)(a1 + 16); i; i = (uint64_t *)*i)
    {
      v10 = (void *)i[1];
      i[2] = (uint64_t)v10;
      bzero(v10, (*((_DWORD *)i + 6) - (_DWORD)v10));
    }
    *(_DWORD *)(a1 + 36) = 0;
  }
}

uint64_t *LD_HeapLogStats(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  int v9;

  if (result && *result)
  {
    v8 = result + 2;
    v9 = -1;
    do
    {
      v8 = (_QWORD *)*v8;
      ++v9;
    }
    while (v8);
    return (uint64_t *)log_OutText(*(_QWORD *)(*result + 32), (uint64_t)"LINGDB", 5, 0, (uint64_t)"LD_Heap %s %s: alloc=%lu pool=%lu initial=%lu grow=%lu blocks=%lu", a6, a7, a8, result[1]);
  }
  return result;
}

uint64_t *LD_HeapFreePool(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;

  if (result)
  {
    v8 = result;
    if (*result)
    {
      result = LD_HeapLogStats(result, (uint64_t)"before FreePool", a3, a4, a5, a6, a7, a8);
      v9 = (_QWORD *)v8[2];
      if (v9)
      {
        do
        {
          v10 = (_QWORD *)*v9;
          result = heap_Free(*(_QWORD **)(*v8 + 8), (uint64_t)v9);
          v9 = v10;
        }
        while (v10);
      }
      v8[2] = 0;
      v8[4] = 0;
    }
  }
  return result;
}

uint64_t LD_loadXML()
{
  return 2300583937;
}

unint64_t fix16_exp(uint64_t a1)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int i;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (!(_DWORD)a1)
    return 0x10000;
  if ((_DWORD)a1 == 0x10000)
    return 178145;
  if ((int)a1 > 681391)
    return 0x7FFFFFFFLL;
  if ((int)a1 < -726817)
    return 0;
  v3 = int64_from_int32(0x10000);
  v4 = int64_from_int32(a1);
  v5 = int64_add(v3, v4);
  v6 = int64_from_int32(a1);
  v7 = 2;
  for (i = 3; i != 13; ++i)
  {
    v9 = int64_mul_i64_i32(v6, a1);
    v6 = int64_shift(v9, -16);
    v10 = int64_div_i64_i32(v6, v7);
    v11 = int64_add(v5, v10);
    v5 = v11;
    v7 *= i;
  }
  return int64_lo(v11);
}

unint64_t int64_from_int32(uint64_t a1)
{
  return ((int)a1 >> 31) | (unint64_t)(a1 << 32);
}

unint64_t int64_lo(unint64_t a1)
{
  return HIDWORD(a1);
}

unint64_t int64_add(uint64_t a1, uint64_t a2)
{
  _BOOL4 v2;

  v2 = __CFADD__(HIDWORD(a2), HIDWORD(a1)) || (int)a1 < 0;
  return (a2 + a1 + v2) | ((unint64_t)(HIDWORD(a2) + HIDWORD(a1)) << 32);
}

uint64_t int64_shift(uint64_t a1, int a2)
{
  int v2;
  BOOL v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = (char)-(char)a2;
  v3 = v2 <= 31;
  v4 = ((_DWORD)a1 << a2) | (HIDWORD(a1) >> v2);
  LODWORD(v5) = (int)a1 >> v2;
  if (!v3)
  {
    v4 = 0;
    LODWORD(v5) = 0;
  }
  v6 = (HIDWORD(a1) >> -(char)a2) | ((_DWORD)a1 << a2);
  LODWORD(v7) = HIDWORD(a1) << a2;
  if (a2 > 0x1F)
  {
    LODWORD(v7) = 0;
    v6 = 0;
  }
  if (a2 >= 1)
    v7 = v7;
  else
    v7 = v4;
  if (a2 >= 1)
    v5 = v6;
  else
    v5 = v5;
  return v5 | (v7 << 32);
}

uint64_t int64_mul_i64_i32(unint64_t a1, int a2)
{
  int v2;
  int v3;
  unint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a1 ^ a2;
  v3 = -(int)a1;
  if (HIDWORD(a1))
    v3 = ~(_DWORD)a1;
  if ((a1 & 0x80000000) != 0)
  {
    v4 = -(uint64_t)(a1 & 0xFFFFFFFF00000000);
  }
  else
  {
    v3 = a1;
    v4 = a1;
  }
  if (a2 >= 0)
    v5 = a2;
  else
    v5 = -a2;
  v6 = (v3 >> 16) * HIWORD(v5);
  v7 = (v3 >> 16) * (unsigned __int16)v5 + (unsigned __int16)v3 * HIWORD(v5);
  v8 = (unsigned __int16)v3 * (unsigned __int16)v5 + HIWORD(v5) * HIWORD(v4);
  v9 = v6 + (v7 << 16);
  v10 = 65537 * v8 + HIWORD(v7);
  v11 = -v10;
  if (v9)
    v11 = ~v10;
  v12 = v2 >= 0;
  if (v2 < 0)
    v13 = v11;
  else
    v13 = v10;
  if (v12)
    v14 = v9;
  else
    v14 = -v9;
  return v13 | (v14 << 32);
}

unint64_t int64_div_i64_i32(unint64_t a1, int a2)
{
  int v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  _BOOL4 v21;
  BOOL v22;
  int v23;
  _BOOL4 v24;
  int v25;
  int v26;
  _BOOL4 v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;

  v2 = a1 ^ a2;
  v3 = -(int)a1;
  if (HIDWORD(a1))
    v3 = ~(_DWORD)a1;
  if ((a1 & 0x80000000) != 0)
  {
    v4 = -(uint64_t)(a1 & 0xFFFFFFFF00000000);
  }
  else
  {
    v3 = a1;
    v4 = a1;
  }
  v5 = HIDWORD(v4);
  if (a2 >= 0)
    v6 = a2;
  else
    v6 = -a2;
  v7 = v3 / (int)v6;
  v8 = v3 % (int)v6;
  v9 = v5 / v6;
  v10 = v5 % v6;
  v11 = v6 << 32;
  v12 = 0x100000000;
  while (v8 > (int)v11 || v8 == (_DWORD)v11 && v10 > HIDWORD(v11))
  {
    v11 = (__PAIR64__(v11, HIDWORD(v11)) >> 31) | (HIDWORD(v11) << 33);
    v12 = (__PAIR64__(v12, HIDWORD(v12)) >> 31) | (HIDWORD(v12) << 33);
  }
  for (; v8; v12 = v16 | (v17 << 32))
  {
    v13 = (v11 >> 33) | ((_DWORD)v11 << 31);
    v14 = (int)v11 >> 1;
    v15 = v8 <= (int)v11 >> 1;
    v11 = ((int)v11 >> 1) | ((unint64_t)v13 << 32);
    v16 = ((int)v12 >> 1);
    v17 = (v12 >> 33) | ((_DWORD)v12 << 31);
    if (!v15 || v8 == v14 && v10 >= v13)
    {
      v18 = -(int)v11;
      v19 = -v13;
      if (HIDWORD(v11))
        v18 = ~(_DWORD)v11;
      v20 = v18 + v8;
      v21 = v8 < 0;
      v22 = __CFADD__(v10, v19);
      v10 += v19;
      if (v22)
        v21 = 1;
      v8 = v20 + v21;
      v23 = v7 + v16;
      v24 = v7 < 0;
      v22 = __CFADD__((_DWORD)v17, v9);
      v9 += v17;
      if (v22)
        v24 = 1;
      v7 = v23 + v24;
    }
  }
  v25 = (int)v10 / (int)v6;
  v26 = (v25 >> 31) + v7;
  v27 = v7 < 0;
  v22 = __CFADD__(v25, v9);
  v28 = v25 + v9;
  v29 = v22 || v27;
  v30 = v26 + v29;
  v31 = v28 << 32;
  v32 = v31 & 0xFFFFFFFF00000000 | v30;
  v33 = ~v30;
  v34 = -v30;
  if (HIDWORD(v32))
    v34 = v33;
  v35 = v34 - v31;
  if (v2 < 0)
    return v35;
  else
    return v32;
}

uint64_t uint32_log2(uint64_t result)
{
  unsigned int v1;
  unsigned int v2;

  if ((_DWORD)result)
  {
    v1 = WORD1(result);
    if (!WORD1(result))
      v1 = result;
    if (v1 <= 0xFF)
    {
      v2 = 16 * (WORD1(result) != 0);
    }
    else
    {
      v1 >>= 8;
      v2 = (16 * (WORD1(result) != 0)) | 8;
    }
    if (v1 > 0xF)
    {
      v1 >>= 4;
      v2 |= 4u;
    }
    if (v1 > 3)
    {
      v1 >>= 2;
      v2 |= 2u;
    }
    if (v1 <= 1)
      return v2;
    else
      return v2 + 1;
  }
  return result;
}

uint64_t fix16_add(int a1, int a2)
{
  if (((a2 + a1) ^ a1) > -1 || (a2 ^ a1) < 0)
    return (a2 + a1);
  else
    return 0x80000000;
}

uint64_t fix16_sub(int a1, int a2)
{
  char v2;

  if ((((a1 - a2) ^ a1) & (a2 ^ a1)) < 0 != v2)
    return 0x80000000;
  else
    return (a1 - a2);
}

uint64_t fix16_mul(int a1, int a2)
{
  int v2;
  unint64_t v3;
  unsigned int v4;

  v2 = (a2 >> 16) * (unsigned __int16)a1 + (unsigned __int16)a2 * (a1 >> 16);
  v3 = __PAIR64__((a2 >> 16) * (a1 >> 16), (unsigned __int16)a2 * (unsigned __int16)a1)
     + __PAIR64__(v2 >> 16, v2 << 16);
  v4 = (__PAIR64__((a2 >> 16) * (a1 >> 16), (unsigned __int16)a2 * (unsigned __int16)a1)
      + __PAIR64__(v2 >> 16, v2 << 16)) >> 16;
  if (SHIDWORD(v3) >> 31 == SHIDWORD(v3) >> 15)
    return v4;
  else
    return 0x80000000;
}

uint64_t fix16_div(int a1, int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  char v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v17;

  if (!a2)
    return 0x80000000;
  if (a1 >= 0)
    v2 = a1;
  else
    v2 = -a1;
  if (a2 >= 0)
    v3 = a2;
  else
    v3 = -a2;
  if (v3 >= 0x100000)
  {
    v4 = v2 / ((v3 >> 17) + 1);
    v2 -= (v4 * v3) >> 17;
  }
  else
  {
    v4 = 0;
  }
  if ((v3 & 0xF) != 0)
  {
    v5 = 17;
  }
  else
  {
    v6 = 17;
    do
    {
      v7 = v3;
      v3 >>= 4;
      v5 = v6 - 4;
      if ((v7 & 0xF0) != 0)
        break;
      v8 = v6 > 7;
      v6 -= 4;
    }
    while (v8);
  }
  while (v2 && (v5 & 0x80000000) == 0)
  {
    v9 = v2 >> 28;
    if (v2 >> 28)
    {
      LOBYTE(v9) = 0;
      v11 = v2;
      if ((v2 & 0x80000000) != 0)
        goto LABEL_23;
      do
      {
LABEL_22:
        LOBYTE(v9) = v9 + 1;
        v11 *= 2;
      }
      while ((v11 & 0x80000000) == 0);
      goto LABEL_23;
    }
    v10 = v2;
    do
    {
      LOBYTE(v9) = v9 + 4;
      v11 = 16 * v10;
      v12 = HIBYTE(v10);
      v10 *= 16;
    }
    while (!v12);
    if ((v11 & 0x80000000) == 0)
      goto LABEL_22;
LABEL_23:
    if (v5 >= v9)
      v9 = v9;
    else
      v9 = v5;
    v13 = v2 << v9;
    v14 = v5 - v9;
    v4 += (v13 / v3) << v14;
    v15 = (v13 / v3) & ~(0xFFFFFFFF >> v14);
    v2 = 2 * (v13 % v3);
    v5 = v14 - 1;
    if (v15)
      return 0x80000000;
  }
  v17 = v4 >> 1;
  if ((a2 ^ a1) >= 0)
    return v17;
  else
    return -v17;
}

uint64_t igtree_Init(_WORD *a1, int a2, uint64_t a3, char *a4)
{
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  _BYTE *v24;
  unsigned int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  _BYTE *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  _BYTE *v54;
  uint64_t v56;
  int v57;
  unsigned __int8 v58;
  int v59;
  int v60[2];
  int v61;

  v61 = 0;
  *(_QWORD *)v60 = 0;
  v59 = 0;
  v58 = 0;
  v57 = 0;
  v56 = 0;
  bzero(a4, 0x640uLL);
  inited = InitRsrcFunction(a1, a2, &v56);
  if ((inited & 0x80000000) != 0)
    return inited;
  v13 = ssftriff_reader_OpenChunk(a3, &v57, (unsigned int *)&v61, v60, v9, v10, v11, v12);
  if ((v13 & 0x80000000) != 0)
  {
LABEL_56:
    if ((v13 & 0x1FFF) == 0xA)
      return v13;
    else
      return 0;
  }
  v19 = 2380275722;
  while (v57 ^ 0x52545344 | v58)
  {
    if (v57 ^ 0x54414546 | v58)
    {
      if (v57 ^ 0x4C424154 | v58)
      {
        if (v57 ^ 0x534F5041 | v58)
        {
          if (v57 ^ 0x4D414E46 | v58)
          {
            if (!(v57 ^ 0x41524150 | v58))
            {
              v20 = heap_Calloc(*(_QWORD **)(v56 + 8), (unint64_t)v61 >> 2, 16);
              *((_QWORD *)a4 + 166) = v20;
              if (!v20)
                return v19;
              v21 = v61;
              if (v61)
              {
                v22 = 0;
                v23 = 0;
                while (1)
                {
                  v59 = 0;
                  ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v60, v21, v23, 0, (unsigned int *)&v59);
                  v24 = (_BYTE *)heap_Alloc(*(_QWORD *)(v56 + 8), v59);
                  *(_QWORD *)(*((_QWORD *)a4 + 166) + 16 * v22) = v24;
                  if (!v24)
                    return v19;
                  inited = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v60, v61, v23, v24, (unsigned int *)&v59);
                  if ((inited & 0x80000000) != 0)
                    return inited;
                  v25 = v59 + v23;
                  v59 = 0;
                  ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v60, v61, v25, 0, (unsigned int *)&v59);
                  v26 = (_BYTE *)heap_Alloc(*(_QWORD *)(v56 + 8), v59);
                  *(_QWORD *)(*((_QWORD *)a4 + 166) + 16 * v22 + 8) = v26;
                  if (!v26)
                    return v19;
                  inited = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v60, v61, v25, v26, (unsigned int *)&v59);
                  if ((inited & 0x80000000) != 0)
                    return inited;
                  ++v22;
                  v23 = v59 + v25;
                  v21 = v61;
                  if (v23 >= v61)
                    goto LABEL_54;
                }
              }
              v22 = 0;
LABEL_54:
              *((_DWORD *)a4 + 334) = v22;
            }
          }
          else
          {
            v50 = heap_Calloc(*(_QWORD **)(v56 + 8), (unint64_t)v61 >> 1, 8);
            *((_QWORD *)a4 + 164) = v50;
            if (!v50)
              return v19;
            v51 = v61;
            if (v61)
            {
              v52 = 0;
              v53 = 0;
              do
              {
                v59 = 0;
                ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v60, v51, v53, 0, (unsigned int *)&v59);
                *(_QWORD *)(*((_QWORD *)a4 + 164) + 8 * v52) = heap_Alloc(*(_QWORD *)(v56 + 8), v59);
                v54 = *(_BYTE **)(*((_QWORD *)a4 + 164) + 8 * v52);
                if (!v54)
                  return v19;
                inited = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v60, v61, v53, v54, (unsigned int *)&v59);
                if ((inited & 0x80000000) != 0)
                  return inited;
                ++v52;
                v53 += v59;
                v51 = v61;
              }
              while (v53 < v61);
            }
          }
        }
        else
        {
          v59 = v61;
          v45 = (_BYTE *)heap_Alloc(*(_QWORD *)(v56 + 8), v61);
          *((_QWORD *)a4 + 163) = v45;
          if (!v45)
            return v19;
          inited = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v60, v61, 0, v45, (unsigned int *)&v59);
          if ((inited & 0x80000000) != 0)
            return inited;
        }
      }
      else
      {
        inited = ssftriff_reader_DetachChunkData(a3, (uint64_t *)a4, v60, v14, v15, v16, v17, v18);
        if ((inited & 0x80001FFF) == 0x8000000A)
          return inited;
        a4[1296] = 0;
        if (v61 >= 2)
        {
          v35 = 0;
          LODWORD(v36) = 0;
          v37 = v61 >> 1;
          v38 = *(_QWORD *)v60;
          v39 = *(_QWORD *)v60 + 2;
          do
          {
            v40 = *(unsigned __int16 *)(v38 + 2 * v36);
            if (v40 == 0xFFFF)
            {
              v41 = 0;
              do
              {
                v41 += 0xFFFF;
                v36 = (v36 + 1);
                v40 = *(unsigned __int16 *)(v38 + 2 * v36);
              }
              while (v40 == 0xFFFF);
              v42 = v36;
            }
            else
            {
              v41 = 0;
              v42 = v36;
            }
            v43 = v39 + 2 * v42;
            v44 = v35 + 1;
            *(_QWORD *)&a4[8 * v35 + 272] = v43;
            LODWORD(v36) = v36 + v41 + v40 + 1;
            ++v35;
          }
          while (v36 < v37);
          a4[1296] = v44;
        }
      }
    }
    else
    {
      v32 = v61;
      if (v61)
      {
        v33 = 0;
        v34 = *(_QWORD *)v60;
        do
        {
          *(_WORD *)&a4[v33 + 16] = *(_WORD *)(v34 + v33);
          v33 += 2;
        }
        while (v33 < v32);
      }
    }
LABEL_44:
    ssftriff_reader_CloseChunk(a3);
    v13 = ssftriff_reader_OpenChunk(a3, &v57, (unsigned int *)&v61, v60, v46, v47, v48, v49);
    if ((v13 & 0x80000000) != 0)
      goto LABEL_56;
  }
  v27 = heap_Calloc(*(_QWORD **)(v56 + 8), (unint64_t)v61 >> 1, 8);
  *((_QWORD *)a4 + 1) = v27;
  if (!v27)
    return v19;
  v28 = v61;
  if (!v61)
  {
    v29 = 0;
LABEL_41:
    *((_DWORD *)a4 + 330) = v29;
    goto LABEL_44;
  }
  v29 = 0;
  v30 = 0;
  while (1)
  {
    v59 = 0;
    ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v60, v28, v30, 0, (unsigned int *)&v59);
    *(_QWORD *)(*((_QWORD *)a4 + 1) + 8 * v29) = heap_Alloc(*(_QWORD *)(v56 + 8), v59);
    v31 = *(_BYTE **)(*((_QWORD *)a4 + 1) + 8 * v29);
    if (!v31)
      return v19;
    inited = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v60, v61, v30, v31, (unsigned int *)&v59);
    if ((inited & 0x80000000) != 0)
      return inited;
    ++v29;
    v30 += v59;
    v28 = v61;
    if (v30 >= v61)
      goto LABEL_41;
  }
}

uint64_t igtree_Process(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  __int16 *v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned __int16 *v15;
  __int16 *v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v30;
  unsigned __int16 **v31;
  unsigned int v32;
  int v33;
  BOOL v34;
  _QWORD *v37;
  _OWORD __dst[50];
  unsigned __int16 *__src;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v4 = *(__int16 **)(a1 + 272);
  __src = (unsigned __int16 *)v4;
  v5 = *(unsigned __int8 *)(a1 + 1296);
  if (v5 < 2)
    goto LABEL_42;
  v37 = a3;
  v7 = 0;
  v4 = 0;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v56 = 0u;
  v71 = 0;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  v43 = 0u;
  v42 = 0u;
  v41 = 0u;
  v40 = 0u;
  v8 = (v5 - 1);
  v9 = (_QWORD *)(a1 + 8);
  v10 = 1;
  memset(__dst, 0, 512);
  do
  {
    if (v10 >= 1)
    {
      v12 = v10;
      memcpy(__dst, &__src, 8 * v10);
      v13 = 0;
      v11 = 0;
      v10 = 0;
      v14 = (uint64_t *)(a1 + 8 * v7 + 280);
      while (1)
      {
        v15 = (unsigned __int16 *)*((_QWORD *)__dst + v13);
        v18 = *v15;
        v16 = (__int16 *)(v15 + 1);
        v17 = v18;
        if (v18)
          break;
LABEL_28:
        if (v4)
          v34 = 0;
        else
          v34 = v11 == 0;
        if (v34 && v13 == 0)
          v4 = v16;
        if (++v13 == v12)
          goto LABEL_37;
      }
      v19 = *((_QWORD *)__dst + v13) + 4 * v17;
      while (1)
      {
        v20 = (unsigned __int16)*v16;
        if (v20 == 0xFFFF)
        {
          v30 = *v14;
          v31 = &(&__src)[v10];
          v32 = (unsigned __int16)v16[1];
          while (v32 == 0xFFFF)
          {
            v30 += 131070;
            v19 += 2;
            v32 = (unsigned __int16)v16[2];
            ++v16;
          }
        }
        else
        {
          v21 = *(unsigned __int8 **)(a2 + 8 * *(unsigned __int16 *)(a1 + 2 * v7 + 16));
          v22 = *(unsigned __int8 **)(*v9 + 8 * v20);
          if (*v21 != *v22)
            goto LABEL_25;
          v23 = v21 + 1;
          v24 = v22 + 1;
          do
          {
            v26 = *v23++;
            v25 = v26;
            v28 = *v24++;
            v27 = v28;
          }
          while (v25 == v28 && v27 != 0);
          if (v25 != v27)
            goto LABEL_25;
          v30 = *v14;
          v31 = &(&__src)[v10];
          v32 = (unsigned __int16)v16[1];
          while (v32 == 0xFFFF)
          {
            v30 += 131070;
            v19 += 2;
            v32 = (unsigned __int16)v16[2];
            ++v16;
          }
          v11 = 1;
        }
        *v31 = (unsigned __int16 *)(v30 + 2 * v32);
        ++v10;
LABEL_25:
        ++v16;
        v19 -= 2;
        do
        {
          v33 = *v16++;
          v19 += 2;
        }
        while (v33 == -1);
        if ((unint64_t)v16 >= v19)
          goto LABEL_28;
      }
    }
    v10 = 0;
    v11 = 0;
LABEL_37:
    if (!v11 && !v10 && v4)
    {
      a3 = v37;
      goto LABEL_44;
    }
    ++v7;
  }
  while (v7 != v8);
  v4 = (__int16 *)__src;
  a3 = v37;
LABEL_42:
  v9 = (_QWORD *)(a1 + 8);
LABEL_44:
  *a3 = *(_QWORD *)(*v9 + 8 * (unsigned __int16)*v4);
  return 0;
}

uint64_t igtree_Deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  ssftriff_reader_ReleaseChunkData(*(_QWORD **)a2, a2, a3, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(a2 + 1320))
  {
    v10 = 0;
    do
      heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * (unsigned __int16)v10++));
    while (*(_DWORD *)(a2 + 1320) > (unsigned __int16)v10);
  }
  heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 8));
  heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 1304));
  v11 = *(_QWORD *)(a2 + 1312);
  if (v11)
  {
    v12 = *(unsigned __int8 *)(a2 + 1296);
    if (*(_BYTE *)(a2 + 1296))
    {
      v13 = 0;
      do
      {
        v14 = *(_QWORD *)(*(_QWORD *)(a2 + 1312) + 8 * v13);
        if (v14)
        {
          heap_Free(*(_QWORD **)(a1 + 8), v14);
          v12 = *(unsigned __int8 *)(a2 + 1296);
        }
        ++v13;
      }
      while (v13 < v12);
      v11 = *(_QWORD *)(a2 + 1312);
    }
    heap_Free(*(_QWORD **)(a1 + 8), v11);
  }
  v15 = *(_QWORD *)(a2 + 1328);
  if (v15)
  {
    if (*(_DWORD *)(a2 + 1336))
    {
      v16 = 0;
      do
      {
        heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 1328) + 16 * (unsigned __int16)v16));
        heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 1328) + 16 * (unsigned __int16)v16++ + 8));
      }
      while (*(_DWORD *)(a2 + 1336) > (unsigned __int16)v16);
      v15 = *(_QWORD *)(a2 + 1328);
    }
    heap_Free(*(_QWORD **)(a1 + 8), v15);
  }
  return 0;
}

uint64_t igtree_Init_ReadOnly_ReferenceCnt(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, _QWORD *a5, int a6, uint64_t a7, uint64_t a8, __int16 a9, char a10)
{
  uint64_t result;
  uint64_t ObjcForThisApi;
  uint64_t v19;
  _QWORD v20[5];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = 0;
  v24 = 0;
  v21 = 0;
  v22 = 0;
  v20[4] = 0;
  result = InitRsrcFunction(a1, a2, &v24);
  if ((result & 0x80000000) == 0)
  {
    result = InitRsrcFunction(a3, a4, &v23);
    if ((result & 0x80000000) == 0)
    {
      v20[0] = a1;
      v20[1] = a2;
      v20[2] = a3;
      v20[3] = a4;
      __strcpy_chk();
      LODWORD(v21) = a6;
      BYTE6(v21) = a10;
      WORD2(v21) = a9;
      ObjcForThisApi = getObjcForThisApi(v24, v23);
      result = objc_GetAddRefCountedObject(ObjcForThisApi, a7, (uint64_t (*)(_QWORD, _QWORD, uint64_t, __int128 *, uint64_t))igtree_ObjcLoad, (void (*)(_QWORD, _QWORD, __int128 *))igtree_ObjcClose, (uint64_t)v20, &v22);
      if ((result & 0x80000000) != 0)
        v19 = 0;
      else
        v19 = *(_QWORD *)(v22 + 32);
      *a5 = v19;
    }
  }
  return result;
}

uint64_t igtree_ObjcLoad(_WORD *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t inited;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  int v44[2];

  v42 = 0;
  v43 = 0;
  inited = InitRsrcFunction(a1, a2, &v42);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = InitRsrcFunction(*(_WORD **)(a5 + 16), *(_QWORD *)(a5 + 24), &v43);
  if ((inited & 0x80000000) != 0)
    return inited;
  v11 = *(_QWORD **)(v42 + 8);
  v12 = *(_QWORD *)(v43 + 32);
  v13 = *(unsigned int *)(a5 + 40);
  v14 = *(unsigned __int16 *)(a5 + 44) | (*(unsigned __int8 *)(a5 + 46) << 16);
  *(_QWORD *)v44 = 0;
  v15 = ssftriff_reader_ObjOpen(a1, a2, v13, a3, (char *)(a5 + 32), v14, (uint64_t *)v44);
  if ((v15 & 0x80000000) != 0)
  {
    v34 = v15;
    log_OutText(v12, (uint64_t)"IGTREE", 3, 0, (uint64_t)"failed to read IGtree %s data - going on without", v16, v17, v18, (uint64_t)a3);
  }
  else
  {
    v19 = (char *)heap_Calloc(v11, 1, 1600);
    *(_QWORD *)(a4 + 32) = v19;
    if (v19)
    {
      v23 = igtree_Init(a1, a2, *(uint64_t *)v44, v19);
      if ((v23 & 0x80000000) != 0)
      {
        v34 = v23;
        v35 = "error initializing IGtree  %s - going on without";
        goto LABEL_12;
      }
      strcpy((char *)(*(_QWORD *)(a4 + 32) + 1340), a3);
      v34 = ssftriff_reader_ObjClose(*(_QWORD **)v44, v27, v28, v29, v30, v31, v32, v33);
      if ((v34 & 0x80000000) != 0)
      {
        v35 = "cannot complete reading IGtree  %s - going on without";
LABEL_12:
        log_OutText(v12, (uint64_t)"IGTREE", 0, 0, (uint64_t)v35, v24, v25, v26, (uint64_t)a3);
      }
    }
    else
    {
      log_OutText(v12, (uint64_t)"IGTREE", 0, 0, (uint64_t)"no memory for IGtree  %s", v20, v21, v22, (uint64_t)a3);
      log_OutPublic(v12, (uint64_t)"IGTREE", 37000, 0, v36, v37, v38, v39, v41);
      return 2380275722;
    }
  }
  return v34;
}

uint64_t igtree_ObjcClose(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = 0;
  result = InitRsrcFunction(a1, a2, &v13);
  if ((result & 0x80000000) == 0)
  {
    v11 = *(_QWORD *)(a3 + 32);
    if (v11)
    {
      v12 = v13;
      igtree_Deinit(v13, v11, v5, v6, v7, v8, v9, v10);
      heap_Free(*(_QWORD **)(v12 + 8), v11);
    }
    return 0;
  }
  return result;
}

uint64_t igtree_Deinit_ReadOnly_DereferenceCnt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjcForThisApi;

  ObjcForThisApi = getObjcForThisApi(a1, a2);
  return objc_ReleaseObject(ObjcForThisApi, a3 + 1340);
}

uint64_t posparser_ExtractPunctuation(_QWORD *a1, char *__s, char **a3, size_t *a4, _BYTE **a5, size_t *a6)
{
  size_t v12;
  size_t v13;
  char *v14;
  _BYTE *v15;
  size_t *v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t *v23;
  size_t v24;
  unsigned int PreviousUtf8Offset;
  size_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  unsigned int v31;

  v12 = strlen(__s);
  v13 = v12;
  v31 = 0;
  if (*a3)
  {
    **a3 = 0;
    v14 = *a3;
  }
  else
  {
    v14 = 0;
  }
  *a4 = 0;
  if (*a5)
  {
    **a5 = 0;
    v15 = *a5;
  }
  else
  {
    v15 = 0;
  }
  *a6 = 0;
  if (!v12)
    goto LABEL_21;
  v30 = (uint64_t)v15;
  v16 = a6;
  v17 = 0;
  do
  {
    if (!(*(unsigned int (**)(_QWORD, _QWORD, char *))(a1[3] + 128))(a1[1], a1[2], &__s[v17]))
      break;
    v17 += utf8_determineUTF8CharLength(__s[v17]);
  }
  while (v17 < v13);
  if (v17)
  {
    *a4 = v17;
    v18 = (char *)heap_Realloc(*(uint64_t **)(*a1 + 8), (uint64_t)v14, v17 + 1);
    if (!v18)
      goto LABEL_30;
    v14 = v18;
    strncpy(v18, __s, *a4)[*a4] = 0;
  }
  v23 = v16;
  v15 = (_BYTE *)v30;
  v31 = v13 - 1;
  utf8_GetPreviousValidUtf8Offset((uint64_t)__s, &v31);
  if (v31 == -1)
    goto LABEL_21;
  v24 = v13;
  if ((*(unsigned int (**)(_QWORD, _QWORD, char *))(a1[3] + 128))(a1[1], a1[2], &__s[v31]))
  {
    do
    {
      v24 = v31;
      PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)__s, v31);
      v31 = PreviousUtf8Offset;
    }
    while (PreviousUtf8Offset != -1
         && (*(unsigned int (**)(_QWORD, _QWORD, char *))(a1[3] + 128))(a1[1], a1[2], &__s[PreviousUtf8Offset]));
  }
  v26 = v13 - v24;
  if (v13 <= v24)
    goto LABEL_21;
  *v23 = v26;
  v27 = (char *)heap_Realloc(*(uint64_t **)(*a1 + 8), v30, v26 + 1);
  if (!v27)
  {
LABEL_30:
    v28 = 2687508490;
    log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v19, v20, v21, v22, v30);
    return v28;
  }
  v15 = v27;
  strncpy(v27, &__s[v24], *v23)[*v23] = 0;
LABEL_21:
  if (*a3)
  {
    *a3 = v14;
  }
  else if (v14)
  {
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v14);
  }
  if (*a5)
  {
    v28 = 0;
    *a5 = v15;
  }
  else
  {
    if (v15)
      heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v15);
    return 0;
  }
  return v28;
}

uint64_t posparser_isFeatureRequired(uint64_t a1, int a2, _WORD *a3, unsigned int a4, int a5)
{
  uint64_t v6;
  uint64_t v8;
  const char *v9;
  uint64_t v10;

  LOWORD(v6) = a2;
  if (a5 == 1)
  {
LABEL_2:
    *a3 = v6;
    return 1;
  }
  if (a4)
  {
    v8 = *(_QWORD *)(a1 + 1312);
    v9 = g_posparser_FeatureNames[a2];
    v10 = a4;
    v6 = 0;
    while (strcmp(*(const char **)(v8 + 8 * v6), v9))
    {
      if (v10 == ++v6)
        return 0;
    }
    goto LABEL_2;
  }
  return 0;
}

uint64_t posparser_DumpFeatureVectorAndResult(uint64_t a1, char *a2, char **a3, char *a4, const char **a5, _DWORD *a6, unsigned int a7, int a8, unsigned __int16 a9, char *a10)
{
  uint64_t result;
  uint64_t v19;
  char **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char __s[6];

  __sprintf_chk(__s, 0, 6uLL, "%d", a9);
  result = posparser_add2Str(a1, a5, a6, __s);
  if ((result & 0x80000000) == 0)
  {
    result = posparser_add2Str(a1, a5, a6, " FEATUREVECTOR:");
    if ((result & 0x80000000) == 0)
    {
      result = posparser_add2Str(a1, a5, a6, a2);
      if ((result & 0x80000000) == 0)
      {
        result = posparser_add2Str(a1, a5, a6, ":");
        if ((result & 0x80000000) == 0)
        {
          v19 = a7;
          __sprintf_chk(__s, 0, 6uLL, "%d", a7);
          result = posparser_add2Str(a1, a5, a6, __s);
          if ((result & 0x80000000) == 0)
          {
            result = posparser_add2Str(a1, a5, a6, ":");
            if ((result & 0x80000000) == 0)
            {
              result = posparser_add2Str(a1, a5, a6, a10);
              if ((result & 0x80000000) == 0)
              {
                if (a7)
                {
                  v20 = g_posparser_FeatureNames;
                  while (1)
                  {
                    if (a8 == 1)
                    {
                      result = posparser_add2Str(a1, a5, a6, *v20);
                      if ((result & 0x80000000) != 0)
                        break;
                      result = posparser_add2Str(a1, a5, a6, " ");
                      if ((result & 0x80000000) != 0)
                        break;
                    }
                    result = posparser_add2Str(a1, a5, a6, *a3);
                    if ((result & 0x80000000) != 0)
                      break;
                    result = posparser_add2Str(a1, a5, a6, " ");
                    if ((result & 0x80000000) != 0)
                      break;
                    ++v20;
                    ++a3;
                    if (!--v19)
                      goto LABEL_16;
                  }
                }
                else
                {
LABEL_16:
                  result = posparser_add2Str(a1, a5, a6, " PREDICTED:");
                  if ((result & 0x80000000) == 0)
                  {
                    result = posparser_add2Str(a1, a5, a6, a4);
                    if ((result & 0x80000000) == 0)
                    {
                      log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"%s", v21, v22, v23, (uint64_t)*a5);
                      result = 0;
                      **a5 = 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t posparser_add2Str(uint64_t a1, const char **a2, _DWORD *a3, char *__s)
{
  size_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v19;

  v8 = strlen(__s);
  v9 = *a3;
  v10 = (char *)*a2;
  v11 = strlen(*a2);
  if (v8 >= v9 - v11)
  {
    if ((v8 - v9 + v11) <= 0x80)
      v12 = 128;
    else
      v12 = v8 - v9 + v11;
    v13 = heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)v10, (v9 + v12 + 1));
    if (!v13)
    {
      log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v14, v15, v16, v17, v19);
      return 2687508490;
    }
    v10 = (char *)v13;
    *a2 = (const char *)v13;
    *a3 += v12;
  }
  if (*v10)
    strcat(v10, __s);
  else
    strcpy(v10, __s);
  return 0;
}

uint64_t posparser_setFeature(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5, unsigned int a6, int a7)
{
  uint64_t result;
  size_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  uint64_t v25;
  const char *v26;
  size_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  unsigned __int16 v32;
  unsigned __int16 v33;
  unsigned int v34;
  unint64_t v35;
  char *v36;
  unsigned int v37;
  unsigned __int16 v38;

  v38 = 0;
  result = posparser_isFeatureRequired(a1, a3, &v38, a6, a7);
  if ((_DWORD)result)
  {
    if (!*a5)
    {
      result = 0;
      **(_WORD **)(a4 + 8 * v38) = 61;
      return result;
    }
    v14 = strlen(a5);
    v15 = v38;
    if (v14 <= 0x40)
    {
      v16 = *(char **)(a4 + 8 * v38);
    }
    else
    {
      v16 = (char *)heap_Realloc(*(uint64_t **)(a2 + 8), *(_QWORD *)(a4 + 8 * v38), (v14 + 1));
      if (!v16)
      {
        log_OutPublic(*(_QWORD *)(a2 + 32), (uint64_t)"POSPARSER", 68000, 0, v17, v18, v19, v20, v37);
        return 2687508490;
      }
      *(_QWORD *)(a4 + 8 * v15) = v16;
    }
    strcpy(v16, a5);
    if (a7)
      return 0;
    v21 = *(_DWORD *)(a1 + 1336);
    if (!v21)
      return 0;
    v22 = *(char **)(a4 + 8 * v15);
    v23 = strlen(g_posparser_FeatureNames[a3]);
    v24 = 0;
    v25 = *(_QWORD *)(a1 + 1328);
    v26 = *(const char **)(*(_QWORD *)(a1 + 1312) + 8 * v15);
    v27 = v23;
    while (1)
    {
      v28 = v24;
      if (!strncmp(*(const char **)(v25 + 16 * v24), v26, v27))
        break;
      v24 = v28 + 1;
      if (v21 <= (unsigned __int16)(v28 + 1))
        return 0;
    }
    v29 = *(char **)(v25 + 16 * v28 + 8);
    v30 = strstr(v29, v22);
    if (v30)
    {
      v31 = v30;
      v32 = strlen(v22);
      v33 = strlen(v29);
      v34 = v33;
      v35 = (unint64_t)&v29[v33];
      while (v31 != v29 || v34 != v32 && (v34 <= v32 + 1 || v29[v32] != 32))
      {
        if (v31 > v29)
        {
          v36 = &v31[v32];
          if (v35 > (unint64_t)(v36 + 1) && *v36 == 32)
          {
            result = 0;
            if ((char *)v35 == v36 || *(v31 - 1) == 32)
              return result;
          }
          else if ((char *)v35 == v36)
          {
            return 0;
          }
        }
        v31 = strstr(&v31[v32], v22);
        if (!v31)
          goto LABEL_30;
      }
      return 0;
    }
LABEL_30:
    result = 0;
    *(_WORD *)v22 = 61;
  }
  return result;
}

uint64_t posparser_initFeatureVector(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;

  if (!a3)
    return 0;
  v5 = a3;
  while (1)
  {
    v6 = (_WORD *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 65);
    *a2 = v6;
    if (!v6)
      break;
    *v6 = 61;
    ++a2;
    if (!--v5)
      return 0;
  }
  log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v7, v8, v9, v10, v12);
  return 2687508490;
}

uint64_t posparser_getIgtreeBrkStrs(uint64_t a1, char *a2, char *a3, unint64_t a4)
{
  uint64_t result;
  int v9[2];

  *(_QWORD *)v9 = 0;
  result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"langcode", v9);
  if ((result & 0x80000000) == 0)
  {
    result = brokeraux_ComposeBrokerString(a1, "diacritizerOOVPOS_igtree", 1, 1, *(char **)v9, 0, 0, a2, a4);
    if ((result & 0x80000000) == 0)
      return brokeraux_ComposeBrokerString(a1, "diacritizerKNOWNPOS_igtree", 1, 1, *(char **)v9, 0, 0, a3, a4);
  }
  return result;
}

uint64_t getPosparserIGTreesAndDict(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t *a8, uint64_t *a9, _DWORD *a10, uint64_t a11, _DWORD *a12)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t IgtreeBrkStrs;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v50;
  int v51;
  char v54;
  unsigned __int16 v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59[2];
  char v60[256];
  char v61[256];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v58 = 0;
  *(_QWORD *)v59 = 0;
  v57 = 0;
  v56 = 0;
  v54 = 0;
  *a7 = 0;
  *a8 = 0;
  *a9 = 0;
  *a10 = 0;
  *a12 = 0;
  if ((paramc_ParamGetInt(*(_QWORD *)(a1 + 40), (uint64_t)"araparsergetfv", &v57) & 0x80000000) == 0 && v57 == 1)
    *a10 = 1;
  v55 = -1;
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t *, unsigned __int16 *, char *))(a6 + 96))(a4, a5, "fecfg", "araparsermwspan", &v56, &v55, &v54);
  if ((v18 & 0x80000000) != 0)
    goto LABEL_28;
  v51 = v55;
  if (v55)
    *a12 = 1;
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(a6 + 72))(a4, a5, a11, (char *)&v58 + 4);
  if ((v19 & 0x80000000) != 0)
    goto LABEL_33;
  if (!HIDWORD(v58))
  {
    __strcpy_chk();
    __strcat_chk();
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t *))(a6 + 72))(a4, a5, v61, &v58);
    v19 = v20;
    if ((v20 & 0x80000000) != 0 || !(_DWORD)v58)
    {
      if ((v20 & 0x80000000) == 0)
        return v19;
      goto LABEL_33;
    }
  }
  *a7 = 1;
  if (*a10 == 1)
  {
    *a9 = 0;
    *a8 = 0;
    *a7 = 1;
LABEL_13:
    *a12 = 1;
    return v19;
  }
  IgtreeBrkStrs = posparser_getIgtreeBrkStrs(a1, v61, v60, 0x100uLL);
  if ((IgtreeBrkStrs & 0x80000000) != 0)
  {
    v19 = IgtreeBrkStrs;
    goto LABEL_33;
  }
  if ((ssftriff_reader_ObjOpen(a2, a3, 2, v60, "IGTR", 1031, (uint64_t *)v59) & 0x80000000) != 0)
  {
    v19 = 2687508480;
    *a9 = 0;
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"POSPARSER", 68005, "%s%s", v22, v23, v24, v25, "treename:");
    goto LABEL_33;
  }
  v26 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 1600);
  *a9 = (uint64_t)v26;
  if (!v26)
    goto LABEL_38;
  v18 = igtree_Init(a2, a3, *(uint64_t *)v59, v26);
  if ((v18 & 0x80000000) != 0)
    goto LABEL_28;
  v18 = ssftriff_reader_ObjClose(*(_QWORD **)v59, v31, v32, v33, v34, v35, v36, v37);
  if ((v18 & 0x80000000) != 0)
    goto LABEL_28;
  if ((ssftriff_reader_ObjOpen(a2, a3, 2, v61, "IGTR", 1031, (uint64_t *)v59) & 0x80000000) != 0)
  {
    v19 = 2687508480;
    *a8 = 0;
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"POSPARSER", 68005, "%s%s", v38, v39, v40, v41, "treename:");
    goto LABEL_33;
  }
  v26 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 1600);
  *a8 = (uint64_t)v26;
  if (!v26)
  {
LABEL_38:
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"POSPARSER", 68000, v26, v27, v28, v29, v30, v50);
    v19 = 2687508490;
    goto LABEL_33;
  }
  v18 = igtree_Init(a2, a3, *(uint64_t *)v59, v26);
  if ((v18 & 0x80000000) != 0)
  {
LABEL_28:
    v19 = v18;
    goto LABEL_33;
  }
  v19 = ssftriff_reader_ObjClose(*(_QWORD **)v59, v42, v43, v44, v45, v46, v47, v48);
  if ((v19 & 0x80000000) != 0)
  {
LABEL_33:
    if (*a8)
    {
      heap_Free(*(_QWORD **)(a1 + 8), *a8);
      *a8 = 0;
    }
    if (*a9)
    {
      heap_Free(*(_QWORD **)(a1 + 8), *a9);
      *a9 = 0;
    }
    return v19;
  }
  if (v51 || HIDWORD(v58) == 1 || (_DWORD)v58 == 1)
    goto LABEL_13;
  return v19;
}

uint64_t freePosparserIGTrees(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;

  v11 = *a2;
  if (v11)
  {
    v12 = igtree_Deinit(a1, v11, (uint64_t)a3, a4, a5, a6, a7, a8);
    if ((v12 & 0x80000000) != 0)
      return v12;
    heap_Free(*(_QWORD **)(a1 + 8), *a2);
    *a2 = 0;
  }
  else
  {
    v12 = 0;
  }
  if (*a3)
  {
    v12 = igtree_Deinit(a1, *a3, (uint64_t)a3, a4, a5, a6, a7, a8);
    if ((v12 & 0x80000000) == 0)
    {
      heap_Free(*(_QWORD **)(a1 + 8), *a3);
      *a3 = 0;
    }
  }
  return v12;
}

uint64_t posparser_doPatternMatching(uint64_t a1, char *__dst, uint64_t *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t *v9;
  uint64_t v11;
  unsigned int v12;
  unsigned __int16 v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  const char **v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int16 *v26;
  unsigned int v27;
  unsigned __int16 *v28;
  unint64_t v29;
  unsigned int v30;
  unsigned __int8 v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  char *v36;
  unsigned __int16 v37;
  unint64_t v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned __int16 v48;
  char *v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int16 v58;
  uint64_t result;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  char *v69;
  const char *v70;
  BOOL v71;
  int v72;
  int v73;
  char *v74;
  unsigned int v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  _BYTE *v91;
  uint64_t v92;
  unsigned __int16 *v93;
  unsigned __int16 v94;
  int v95;
  char *v96;
  char *v97;
  unint64_t v98;
  int v99;
  BOOL v101;
  int v102;
  int v103;
  char *v104;
  const char *v105;
  int v106;
  int v108;
  int v109;
  int v110;
  unsigned int v111;
  int v112;
  uint64_t v113;
  unsigned __int16 v114;
  unsigned __int16 v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  const char *v125;
  const char **v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _BYTE *v141;
  char *v142;
  const char *v143;
  char *v144;
  char *v145;
  char *v146;
  size_t v147;
  size_t v148;
  size_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  size_t v157;
  size_t v158;
  size_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  unint64_t v169;
  int v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  unsigned __int16 *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned __int16 *v180;
  unint64_t v181;
  uint64_t v182;
  size_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  unint64_t v189;
  char *v190;
  char *v191;
  unsigned int v192;
  int v193;
  int v194;
  unsigned int v195;
  uint64_t v196;
  unsigned __int16 *v197;
  unsigned __int8 *v198;
  int v199;
  int v200;
  int v201;
  int v202;
  unsigned int v204;
  unsigned int v205;
  unint64_t v206;
  unsigned __int16 *v207;
  int v208;
  uint64_t v209;
  unint64_t v210;
  unsigned int v211;
  unsigned __int16 *v212;
  unint64_t v214;
  int v215;
  uint64_t *v216;
  uint64_t v217;
  char *__s;
  uint64_t *v219;
  char v220[4];
  size_t v221;
  uint64_t v222;
  size_t v223;
  uint64_t v224;
  unsigned __int16 v225;
  char *v226;
  char v227[32];
  uint64_t v228;

  v228 = *MEMORY[0x1E0C80C00];
  v223 = 0;
  v224 = 0;
  v221 = 0;
  v222 = 0;
  if (!a5)
    return 0;
  v8 = a5;
  v9 = a3;
  v11 = 0;
  v12 = 0;
  v206 = 0;
  v13 = 0;
  v211 = 0;
  v226 = 0;
  v225 = 0;
  v14 = "%d decomposition(s) left after invalidation step";
  do
  {
    v15 = v13;
    v16 = a4 + 104 * v13;
    v18 = *(unsigned __int16 *)(v16 + 32);
    v17 = (unsigned __int16 *)(v16 + 32);
    if (v18)
    {
      v185 = v11;
      v19 = a4;
      log_OutText(*(_QWORD *)(*v9 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"word %d not sent to pattern matching since found in dict", a6, a7, a8, v185);
      a4 = v19;
      LODWORD(v15) = *(unsigned __int16 *)(v19 + 104 * v13 + 72);
      v13 = *(_WORD *)(v19 + 104 * v13 + 72);
      goto LABEL_11;
    }
    if (*(_DWORD *)(a4 + 104 * v13 + 88)
      || *(_DWORD *)(a4 + 104 * v13 + 80)
      || *(_DWORD *)(a4 + 104 * v13 + 84)
      || *(_DWORD *)(a4 + 104 * v13 + 92)
      || *(_DWORD *)(a4 + 104 * v13 + 12)
      || *(_WORD *)(a4 + 104 * v13 + 74))
    {
      goto LABEL_11;
    }
    v212 = v17;
    v195 = v8;
    v196 = a4;
    if (*((_DWORD *)v9 + 62))
    {
      v20 = a4 + 104 * v13;
      v22 = *(_QWORD *)(v20 + 96);
      v21 = (const char **)(v20 + 96);
      strncpy(__dst, (const char *)(a1 + *((unsigned __int16 *)v21 - 44)), *((unsigned __int16 *)v21 - 43) - (unint64_t)*((unsigned __int16 *)v21 - 44));
      __dst[*((unsigned __int16 *)v21 - 43) - *((unsigned __int16 *)v21 - 44)] = 0;
      if (v22)
      {
        v23 = posparser_ExtractPunctuation(a3, __dst, (char **)&v224, &v223, (_BYTE **)&v222, &v221);
        if ((v23 & 0x80000000) != 0)
        {
          v211 = v23;
          v9 = a3;
          break;
        }
        strcpy(__dst, *v21);
      }
      v9 = a3;
    }
    else
    {
      v24 = a4 + 104 * v13;
      v27 = *(unsigned __int16 *)(v24 + 8);
      v26 = (unsigned __int16 *)(v24 + 8);
      v25 = v27;
      v28 = v26 + 1;
      v207 = v26 + 1;
      v29 = 0;
      if (v27 < v26[1])
      {
        v197 = v26;
        do
        {
          v30 = *((unsigned __int16 *)v9 + 104);
          if (v12 >= v30)
          {
            v31 = 0;
          }
          else
          {
            v31 = 0;
            v32 = v9[25];
            v33 = v12;
            v214 = v25;
            do
            {
              v34 = *(unsigned __int16 *)(v32 + 6 * v33);
              if (v34 > *v28)
                break;
              v35 = v33;
              if (v25 == v34)
              {
                if (*((unsigned __int16 *)a3 + 49) > (unsigned __int16)v29)
                {
                  v36 = __dst;
                  v37 = 0;
                  while (1)
                  {
                    v32 = a3[25];
                    if (strlen((const char *)(v32 + 6 * v35 + 2)) <= v37)
                      break;
                    v38 = (v29 + 1);
                    v36[(unsigned __int16)v29] = *(_BYTE *)(v32 + 6 * v35 + v37++ + 2);
                    v39 = v37 + (unsigned __int16)(v29 + 1);
                    v29 = v38;
                    if (v39 >= *((unsigned __int16 *)a3 + 49))
                    {
                      v32 = a3[25];
                      v29 = v38;
                      break;
                    }
                  }
                  v28 = v207;
                  a4 = v196;
                  v26 = v197;
                  v30 = *((unsigned __int16 *)a3 + 104);
                  __dst = v36;
                  v14 = "%d decomposition(s) left after invalidation step";
                  v25 = v214;
                }
                v31 = *(_BYTE *)(v32 + 6 * v35 + 2);
              }
              else if (*v26 >= v34)
              {
                v12 = v33;
              }
              v33 = v35 + 1;
            }
            while (v35 + 1 < v30);
          }
          v40 = *(unsigned __int8 *)(a1 + v25);
          v9 = a3;
          if (v40 != 65 || (v41 = v31 - 66, v41 > 0x16) || ((1 << v41) & 0x400081) == 0 || !*((_DWORD *)a3 + 38))
          {
            if (*((unsigned __int16 *)a3 + 49) > (unsigned __int16)v29)
            {
              __dst[(unsigned __int16)v29] = v40;
              v29 = (v29 + 1);
            }
          }
          ++v25;
        }
        while (v25 < *v28);
        LODWORD(v25) = (unsigned __int16)v25;
      }
      v42 = *((unsigned __int16 *)v9 + 104);
      v43 = v12;
      v44 = v29;
      v45 = v29;
      v8 = v195;
      v204 = v12;
      v215 = v25;
      if (v12 < v42)
      {
        while (1)
        {
          v46 = *(unsigned __int16 *)(a3[25] + 6 * v43);
          if (v46 > *v28)
            break;
          v47 = v43;
          if (v46 == (_DWORD)v25 && *((unsigned __int16 *)a3 + 49) > (unsigned __int16)v44)
          {
            v48 = 0;
            while (1)
            {
              v49 = __dst;
              v50 = a3[25];
              if (strlen((const char *)(v50 + 6 * v47 + 2)) <= v48)
                break;
              v51 = *(_BYTE *)(v50 + 6 * v47 + v48 + 2);
              v52 = (v44 + 1);
              __dst = v49;
              v49[(unsigned __int16)v44] = v51;
              v53 = ++v48 + (unsigned __int16)(v44 + 1);
              v44 = v52;
              if (v53 >= *((unsigned __int16 *)a3 + 49))
                goto LABEL_55;
            }
            v52 = v44;
            __dst = v49;
LABEL_55:
            v42 = *((unsigned __int16 *)a3 + 104);
            v44 = v52;
            v12 = v204;
            a4 = v196;
            v14 = "%d decomposition(s) left after invalidation step";
            LODWORD(v25) = v215;
            v28 = v207;
          }
          v43 = v47 + 1;
          v45 = v44;
          v8 = v195;
          if (v43 >= v42)
            goto LABEL_59;
        }
        v45 = v44;
      }
LABEL_59:
      v9 = a3;
      v206 = v45;
      if (*((unsigned __int16 *)a3 + 49) == (unsigned __int16)v45)
        goto LABEL_13;
      __dst[(unsigned __int16)v45] = 0;
    }
    log_OutText(*(_QWORD *)(*v9 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"word %d (%s) sent to pattern matching", a6, a7, a8, v11);
    v216 = (uint64_t *)(v196 + 104 * v13 + 24);
    v54 = 1;
    v205 = v12;
    do
    {
      strcpy(v227, "diac_decomp_");
      LH_itoa(v54, v220, 0xAu);
      __strcat_chk();
      log_OutText(*(_QWORD *)(*v9 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"%s L1: %s", v55, v56, v57, (uint64_t)v227);
      v58 = strlen(__dst);
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *, _QWORD))(v9[7] + 120))(v9[5], v9[6], 0, __dst, v58);
      if ((result & 0x80000000) != 0)
        return result;
      if (((*(uint64_t (**)(uint64_t, uint64_t, char *))(v9[7] + 80))(v9[5], v9[6], v227) & 0x80000000) != 0)
      {
        v12 = v205;
        if (v54 != 1)
        {
          v211 = 0;
          a4 = v196;
          break;
        }
        return 0;
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char **, unsigned __int16 *))(v9[7] + 128))(v9[5], v9[6], 0, &v226, &v225);
      v12 = v205;
      if ((result & 0x80000000) != 0)
        return result;
      v192 = v54;
      v211 = result;
      v226[v225] = 0;
      log_OutText(*(_QWORD *)(*v9 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"%s O1: %s", v60, v61, v62, (uint64_t)v227);
      v63 = v226;
      if (!*v226 || !memchr("[/", *v226, 3uLL))
        goto LABEL_180;
      v64 = v225;
      if (!memchr("]/", v63[v225 - 1], 3uLL))
      {
        v9 = a3;
        goto LABEL_180;
      }
      v219 = 0;
      if ((_DWORD)v64)
      {
        v198 = (unsigned __int8 *)&v63[v64];
        v65 = 1;
        v66 = 1;
        do
        {
          v67 = *v63;
          if ((v67 - 44) <= 0x31 && ((1 << (v67 - 44)) & 0x2800000000009) != 0)
          {
            v69 = __dst;
            v70 = v14;
            v71 = v67 == 44;
            if (v67 == 44)
              v72 = 1;
            else
              v72 = (unsigned __int16)v65;
            v66 = (v72 * v66);
            if (v71)
              v73 = v65 + 1;
            else
              v73 = 1;
            v74 = strchr(v63, 58);
            if (v74)
            {
              v63 = v74 - 1;
              do
              {
                v75 = v63[2];
                ++v63;
                v75 -= 44;
                v76 = v75 > 0x31;
                v77 = (1 << v75) & 0x2800000000009;
              }
              while (v76 || v77 == 0);
            }
            v65 = v73;
            v14 = v70;
            __dst = v69;
          }
          ++v63;
        }
        while (v63 < (char *)v198);
      }
      else
      {
        v66 = 1;
        v65 = 1;
      }
      v199 = v66;
      v193 = v65;
      log_OutText(*(_QWORD *)(*a3 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"%d decomposition(s) found", a6, a7, a8, v66);
      v82 = v66;
      v83 = *a3;
      if (v66 > 0x2710)
      {
        log_OutText(*(_QWORD *)(v83 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"More than 10000 decompositions found, invalidated the results of current depes grammar", v79, v80, v81, v186);
        v9 = a3;
        v8 = v195;
        v12 = v205;
        goto LABEL_180;
      }
      v84 = heap_Realloc(*(uint64_t **)(v83 + 8), *v216, 16 * (v66 + *v212));
      v8 = v195;
      v12 = v205;
      if (!v84)
      {
        v184 = *a3;
        goto LABEL_201;
      }
      *v216 = v84;
      v89 = *v212;
      if (v82)
      {
        while (1)
        {
          v90 = (_BYTE *)heap_Alloc(*(_QWORD *)(*a3 + 8), (unsigned __int16)(v223 + v225 + v221));
          *(_QWORD *)(*v216 + 16 * (unsigned __int16)v89 + 8) = v90;
          if (!v90)
            break;
          *v90 = 0;
          v91 = (_BYTE *)heap_Alloc(*(_QWORD *)(*a3 + 8), v225);
          *(_QWORD *)(*v216 + 16 * (unsigned __int16)v89) = v91;
          if (!v91)
          {
            log_OutPublic(*(_QWORD *)(*a3 + 32), (uint64_t)"POSPARSER", 68000, 0, v92, v86, v87, v88, v186);
            heap_Free(*(_QWORD **)(*a3 + 8), *(_QWORD *)(*v216 + 16 * (unsigned __int16)v89 + 8));
            return 2687508490;
          }
          *v91 = 0;
          LOWORD(v89) = v89 + 1;
          v93 = v212;
          if (v199 + *v212 <= (unsigned __int16)v89)
          {
            v89 = *v212;
            v12 = v205;
            goto LABEL_100;
          }
        }
        v184 = *a3;
LABEL_201:
        log_OutPublic(*(_QWORD *)(v184 + 32), (uint64_t)"POSPARSER", 68000, 0, v85, v86, v87, v88, v186);
        return 2687508490;
      }
      v93 = v212;
LABEL_100:
      v94 = v225;
      v190 = __dst;
      if (!v225)
      {
        v119 = __dst;
        LODWORD(v118) = 1;
        v95 = 1;
        v9 = a3;
LABEL_139:
        v120 = v89;
        v121 = v89;
        do
        {
          if ((_WORD)v121)
          {
            v209 = v120;
            v201 = v95;
            v122 = (uint64_t)v119;
            v123 = 0;
            v194 = v121;
            v124 = *v216;
            v125 = *(const char **)(*v216 + 16 * (unsigned __int16)v121);
            v126 = (const char **)(*v216 + 8);
            while (strcmp(v125, *(v126 - 1)))
            {
              ++v123;
              v126 += 2;
              if (v123 >= (unsigned __int16)v121)
              {
                v206 = v123;
                v93 = v212;
                v9 = a3;
                v8 = v195;
                v119 = (char *)v122;
                v12 = v205;
                v95 = v201;
                goto LABEL_153;
              }
            }
            v127 = strcmp(*(const char **)(v124 + 16 * (unsigned __int16)v121 + 8), *v126);
            v9 = a3;
            if (v127)
              log_OutText(*(_QWORD *)(*a3 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"FEATUREVECTOR:DUPLICATE:%s POS %s, different DIA %s vs %s", v128, v129, v130, v122);
            log_OutText(*(_QWORD *)(*a3 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"removing duplicate %d %s,%s", v128, v129, v130, v209);
            v131 = v118 - 1;
            v132 = v118 - 1 + *v212;
            v206 = v121;
            v119 = (char *)v122;
            v12 = v205;
            if (v132 > (unsigned __int16)v121)
            {
              v133 = (unsigned __int16)v121;
              do
              {
                v134 = 16 * (v133 + 1);
                strcpy(*(char **)(*v216 + 16 * (unsigned __int16)v121 + 8), *(const char **)(*v216 + v134 + 8));
                strcpy(*(char **)(*v216 + 16 * (unsigned __int16)v121), *(const char **)(*v216 + v134));
                v121 = (v121 + 1);
                v133 = (unsigned __int16)v121;
                v132 = v131 + *v212;
              }
              while (v132 > (unsigned __int16)v121);
              v206 = v121;
              v9 = a3;
              v119 = v190;
              LODWORD(v121) = v194;
            }
            heap_Free(*(_QWORD **)(*v9 + 8), *(_QWORD *)(*v216 + 16 * v132 + 8));
            heap_Free(*(_QWORD **)(*v9 + 8), *(_QWORD *)(*v216 + 16 * (v131 + *v212)));
            v93 = v212;
            v95 = v201 - 1;
            LODWORD(v121) = v121 - 1;
            v8 = v195;
          }
          else
          {
            LODWORD(v121) = 0;
            v206 = 0;
          }
LABEL_153:
          v121 = (v121 + 1);
          v120 = (unsigned __int16)v121;
          v89 = *v93;
          v118 = (unsigned __int16)v95;
          v135 = v89 + (unsigned __int16)v95;
        }
        while (v135 > (unsigned __int16)v121);
        __dst = v119;
        goto LABEL_156;
      }
      v95 = 1;
      v96 = v226;
      v97 = v226;
      v98 = v206;
      do
      {
        v99 = *v97;
        if ((v99 - 44) <= 0x31 && ((1 << (v99 - 44)) & 0x2800000000009) != 0)
        {
          v101 = v99 == 44;
          if (v99 == 44)
            v98 = v98;
          else
            v98 = 0;
          if (v99 == 44)
            v102 = 1;
          else
            v102 = v193;
          v200 = v102 * v95;
          if (v101)
            v103 = v193 + 1;
          else
            v103 = 1;
          v193 = v103;
          v104 = strchr(v97, 58);
          if (v104)
          {
            *v104 = 0;
            v105 = v104 + 1;
            v93 = v212;
            while (1)
            {
              v106 = v104[1];
              if ((v106 - 44) <= 0x31 && ((1 << (v106 - 44)) & 0x2800000000009) != 0)
                break;
              ++v104;
            }
            v104[1] = 0;
            v108 = *v212;
            v188 = v104;
            v208 = v98;
            if (v106 == 44)
            {
              v109 = v108 + v98;
              v110 = (unsigned __int16)v98 + (unsigned __int16)v200;
              v111 = v110 + v108;
              if (v110 + v108 > (unsigned __int16)(v108 + v98))
              {
                v112 = (unsigned __int16)(v108 + v98);
                do
                {
                  v113 = 16 * (v112 + (unsigned __int16)v200);
                  strcpy(*(char **)(*v216 + v113 + 8), *(const char **)(*v216 + 16 * (unsigned __int16)v109 + 8));
                  strcpy(*(char **)(*v216 + v113), *(const char **)(*v216 + 16 * (unsigned __int16)v109));
                  v93 = v212;
                  v112 = (unsigned __int16)++v109;
                  v108 = *v212;
                  v111 = v110 + v108;
                }
                while (v110 + v108 > (unsigned __int16)v109);
                LOWORD(v98) = v208;
              }
            }
            else
            {
              v110 = (unsigned __int16)v98 + (unsigned __int16)v200;
              v111 = v110 + v108;
            }
            v114 = v108 + v98;
            if (v111 > v114)
            {
              do
              {
                v115 = v114;
                v116 = 16 * v114;
                strcat(*(char **)(*v216 + v116 + 8), v97 + 1);
                v117 = *(char **)(*v216 + v116);
                if (*v117)
                {
                  *(_WORD *)&v117[strlen(*(const char **)(*v216 + v116))] = 43;
                  v117 = *(char **)(*v216 + v116);
                }
                strcat(v117, v105);
                v114 = v115 + 1;
                v93 = v212;
              }
              while (v110 + *v212 > (unsigned __int16)(v115 + 1));
            }
            v95 = v200;
            v98 = (v200 + v208);
            v97 = v188;
            __dst = v190;
            v188[1] = v106;
            v96 = v226;
            v94 = v225;
            v12 = v205;
          }
          else
          {
            v93 = v212;
            v95 = v200;
          }
        }
        ++v97;
      }
      while (v97 < &v96[v94]);
      v206 = v98;
      v89 = *v93;
      v118 = (unsigned __int16)v95;
      if ((_WORD)v95)
      {
        v119 = __dst;
        v9 = a3;
        v8 = v195;
        goto LABEL_139;
      }
      v135 = v89 + (unsigned __int16)v95;
      v95 = 0;
      v9 = a3;
      v8 = v195;
LABEL_156:
      v14 = "%d decomposition(s) left after invalidation step";
      v189 = v206;
      v136 = v89;
      v187 = v15;
      if (v135 <= v89)
        goto LABEL_179;
      do
      {
        v202 = v95;
        v217 = 0;
        __s = 0;
        v137 = 16 * (unsigned __int16)v136;
        v210 = v136;
        log_OutText(*(_QWORD *)(*v9 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"DIA %s", v86, v87, v88, *(_QWORD *)(*v216 + v137 + 8));
        log_OutText(*(_QWORD *)(*v9 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"POS %s", v138, v139, v140, *(_QWORD *)(*v216 + v137));
        if ((ssftmap_IteratorOpen(v9[32], 0, 0, (uint64_t)&v219) & 0x80000000) != 0)
        {
          v12 = v205;
          v15 = v187;
          goto LABEL_172;
        }
        if ((ssftmap_IteratorNext(v219, &v217, &__s) & 0x80000000) != 0)
        {
LABEL_170:
          v15 = v187;
          goto LABEL_171;
        }
        while (1)
        {
          v141 = (_BYTE *)v217;
          v142 = *(char **)(*v216 + v137);
          v143 = (const char *)(v217 + 1);
          v144 = strstr(v142, (const char *)(v217 + 1));
          if (v144)
            break;
LABEL_164:
          if ((ssftmap_IteratorNext(v219, &v217, &__s) & 0x80000000) != 0)
            goto LABEL_169;
        }
        if (*v141 != 70)
        {
          v145 = v144;
          v146 = &v144[strlen(__s)];
          v147 = strlen(v143);
          v148 = strlen(v145);
          memmove(v146, &v145[v147], v148 - v147 + 1);
          v149 = strlen(__s);
          strncpy(v145, __s, v149);
          log_OutText(*(_QWORD *)(*a3 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"PARTIAL MAPPING POS %s", v150, v151, v152, *(_QWORD *)(*v216 + v137));
          v153 = v217;
          v154 = strstr(v145 + 1, (const char *)(v217 + 1));
          if (v154)
          {
            v155 = v154;
            do
            {
              v156 = &v155[strlen(__s)];
              v157 = strlen((const char *)(v153 + 1));
              v158 = strlen(v155);
              memmove(v156, &v155[v157], v158 - v157 + 1);
              v159 = strlen(__s);
              strncpy(v155, __s, v159);
              log_OutText(*(_QWORD *)(*a3 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"PARTIAL MAPPING POS %s", v160, v161, v162, *(_QWORD *)(*v216 + v137));
              v153 = v217;
              v155 = strstr(v155 + 1, (const char *)(v217 + 1));
            }
            while (v155);
          }
          goto LABEL_164;
        }
        strcpy(v142, __s);
        log_OutText(*(_QWORD *)(*a3 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"FULL MAPPING POS %s", v163, v164, v165, *(_QWORD *)(*v216 + v137));
        if (strcmp(__s, "INVALID"))
        {
LABEL_169:
          v8 = v195;
          __dst = v190;
          v14 = "%d decomposition(s) left after invalidation step";
          goto LABEL_170;
        }
        v166 = (v118 - 1);
        v167 = v166 + *v212;
        v168 = v210;
        v169 = v210;
        __dst = v190;
        v14 = "%d decomposition(s) left after invalidation step";
        v15 = v187;
        if (v167 > (unsigned __int16)v210)
        {
          v170 = (unsigned __int16)v210;
          LODWORD(v169) = v210;
          do
          {
            v171 = v166;
            v172 = v169;
            v173 = 16 * (unsigned __int16)v169;
            v174 = 16 * (v170 + 1);
            strcpy(*(char **)(*v216 + v173 + 8), *(const char **)(*v216 + v174 + 8));
            strcpy(*(char **)(*v216 + v173), *(const char **)(*v216 + v174));
            v175 = v172;
            v166 = v171;
            v169 = (v175 + 1);
            v170 = (unsigned __int16)v169;
            v167 = v171 + *v212;
          }
          while (v167 > (unsigned __int16)v169);
          v168 = v210;
        }
        v189 = v169;
        heap_Free(*(_QWORD **)(*a3 + 8), *(_QWORD *)(*v216 + 16 * v167 + 8));
        heap_Free(*(_QWORD **)(*a3 + 8), *(_QWORD *)(*v216 + 16 * (int)(v166 + *v212)));
        --v202;
        LODWORD(v210) = v168 - 1;
        v8 = v195;
LABEL_171:
        ssftmap_IteratorClose((uint64_t)v219);
        v12 = v205;
LABEL_172:
        v136 = (v210 + 1);
        v93 = v212;
        v9 = a3;
        v95 = v202;
        v118 = (unsigned __int16)v202;
        v135 = *v212 + (unsigned __int16)v202;
      }
      while (v135 > (unsigned __int16)(v210 + 1));
      v206 = v189;
LABEL_179:
      *v93 = v135;
      v176 = v93;
      log_OutText(*(_QWORD *)(*v9 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"%d decomposition(s) left after invalidation step", v86, v87, v88, v118);
      log_OutText(*(_QWORD *)(*v9 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"%d decomposition(s) in total", v177, v178, v179, *v176);
LABEL_180:
      a4 = v196;
      v54 = v192 + 1;
    }
    while (v192 != 254);
    v180 = v212;
    if (!*v212 && *v216)
    {
      heap_Free(*(_QWORD **)(*v9 + 8), *v216);
      v180 = v212;
      a4 = v196;
      *v216 = 0;
    }
    if (*((_DWORD *)v9 + 62) == 1 && *(_QWORD *)(a4 + 104 * v15 + 96) && v224 | v222)
    {
      if (*v180)
      {
        v191 = __dst;
        v181 = 0;
        v182 = 8;
        do
        {
          if (v224)
          {
            v183 = strlen(*(const char **)(*v216 + v182)) + 1;
            v12 = v205;
            memmove((void *)(*(_QWORD *)(*v216 + v182) + v223), *(const void **)(*v216 + v182), v183);
            memcpy(*(void **)(*v216 + v182), (const void *)v224, v223);
            v180 = v212;
            a4 = v196;
          }
          if (v222)
          {
            strcat(*(char **)(*v216 + v182), (const char *)v222);
            v180 = v212;
            a4 = v196;
          }
          ++v181;
          v182 += 16;
        }
        while (v181 < *v180);
        v206 = v181;
        v9 = a3;
        __dst = v191;
      }
      else
      {
        v206 = 0;
      }
    }
LABEL_11:
    if (*(_WORD *)(a4 + 104 * v15 + 32))
      *(_WORD *)(a4 + 104 * v15 + 72) = v13;
LABEL_13:
    v11 = ++v13;
  }
  while (v13 < v8);
  if (v224)
    heap_Free(*(_QWORD **)(*v9 + 8), v224);
  if (v222)
    heap_Free(*(_QWORD **)(*v9 + 8), v222);
  return v211;
}

uint64_t posparser_getPosMap(_QWORD *a1)
{
  uint64_t v2;
  unint64_t i;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  unsigned __int16 v9;
  uint64_t v10;
  char v11;

  v11 = 0;
  v10 = 0;
  v9 = 0;
  v2 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, uint64_t *, unsigned __int16 *, char *))(a1[3] + 96))(a1[1], a1[2], "fecfg", "araposmap", &v10, &v9, &v11);
  if ((v2 & 0x80000000) == 0 && v9)
  {
    for (i = 0; i < v9; ++i)
    {
      v4 = *(char **)(v10 + 8 * i);
      v5 = strchr(v4, 124);
      if (v5)
      {
        *v5 = 0;
        v6 = (uint64_t)(v5 + 1);
        v7 = strchr(v5 + 1, 124);
        if (v7)
        {
          *v7 = 0;
          v2 = ssftmap_Insert(a1[32], (uint64_t)v4, v6);
          if ((v2 & 0x80000000) != 0)
            break;
        }
      }
    }
  }
  return v2;
}

uint64_t posparser_loc_getDictCharString(_QWORD *a1, uint64_t a2, char **a3)
{
  uint64_t v5;
  const char *v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;
  __int16 v16;
  char **v17;
  int __c;

  LOBYTE(__c) = 0;
  v17 = 0;
  v16 = -1;
  v5 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t, char ***, __int16 *, int *))(a1[3] + 96))(a1[1], a1[2], "fecfg", a2, &v17, &v16, &__c);
  if ((v5 & 0x80000000) == 0 && v16)
  {
    v6 = *v17;
    v7 = strchr(*v17, __c);
    if (v7)
    {
      *v7 = 0;
      v6 = *v17;
    }
    v8 = strlen(v6);
    v9 = (char *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, (v8 + 1));
    if (v9)
    {
      *a3 = strcpy(v9, *v17);
    }
    else
    {
      log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v10, v11, v12, v13, v15);
      return 2687508490;
    }
  }
  return v5;
}

uint64_t posparser_loc_getPostCorrRule(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  char i;
  char *v9;
  char *v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  int v18;
  unsigned int v20;
  __int16 v21;
  char **v22;
  int __c;

  LOBYTE(__c) = 0;
  v22 = 0;
  v21 = -1;
  *(_DWORD *)a3 = 0;
  v5 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t, char ***, __int16 *, int *))(a1[3] + 96))(a1[1], a1[2], "fecfg", a2, &v22, &v21, &__c);
  if ((v5 & 0x80000000) == 0 && v21)
  {
    v6 = *v22;
    v7 = strchr(*v22, __c);
    if (v7)
      *v7 = 0;
    if (v6)
    {
      for (i = 0; ; ++i)
      {
        v9 = strchr(v6, 95);
        v10 = v9;
        if (v9)
          *v9 = 0;
        v11 = strlen(v6);
        v12 = (char *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, (v11 + 1));
        if (!v12)
          break;
        v17 = v12;
        strcpy(v12, v6);
        switch(i)
        {
          case 0:
            *(_QWORD *)(a3 + 8) = v17;
            *(_WORD *)(a3 + 16) = strlen(v17);
            break;
          case 1:
            *(_QWORD *)(a3 + 24) = v17;
            *(_WORD *)(a3 + 32) = strlen(v17);
            break;
          case 2:
            if (!strcmp(v17, "ENDWORD"))
            {
              v18 = 1;
            }
            else
            {
              if (strcmp(v17, "IFNOTFOLLOWEDBY"))
                goto LABEL_19;
              v18 = 2;
            }
            *(_DWORD *)a3 = v18;
            goto LABEL_19;
          case 3:
            *(_QWORD *)(a3 + 40) = v17;
            *(_WORD *)(a3 + 48) = strlen(v17);
            break;
          default:
LABEL_19:
            heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v17);
            break;
        }
        v6 = v10 + 1;
        if (!v10)
          return v5;
      }
      log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v13, v14, v15, v16, v20);
      return 2687508490;
    }
  }
  return v5;
}

uint64_t posparser_loc_getEmbeddedCharRule(_QWORD *a1, uint64_t a2, char *a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char i;
  char *v8;
  char *v9;
  __int16 v11;
  char **v12;
  int __c;

  LOBYTE(__c) = 0;
  v12 = 0;
  v11 = -1;
  v4 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t, char ***, __int16 *, int *))(a1[3] + 96))(a1[1], a1[2], "fecfg", a2, &v12, &v11, &__c);
  if ((v4 & 0x80000000) == 0 && v11)
  {
    v5 = *v12;
    v6 = strchr(*v12, __c);
    if (v6)
      *v6 = 0;
    if (v5)
    {
      for (i = 0; ; ++i)
      {
        v8 = strchr(v5, 95);
        if (v8)
          *v8 = 0;
        v9 = a3;
        if (!i)
          goto LABEL_12;
        if (i == 1)
          break;
LABEL_13:
        v5 = v8 + 1;
        if (!v8)
          return v4;
      }
      v9 = a3 + 1;
LABEL_12:
      *v9 = *v5;
      goto LABEL_13;
    }
  }
  return v4;
}

size_t posparser_GetHighestPriority(size_t result, _WORD *a2, int a3)
{
  unsigned int v4;
  __int16 v5;
  size_t v7;
  unint64_t v8;
  unsigned __int16 v9;
  const char *v10;
  unsigned __int8 v11;
  uint64_t v12;
  char *v15;

  v4 = (unsigned __int16)*a2;
  if (v4 >= 2)
  {
    v7 = result;
    v8 = 0;
    v5 = 0;
    v9 = 0;
    do
    {
      v10 = *(const char **)(v7 + 8 * v8);
      result = strlen(v10);
      if ((_WORD)result)
      {
        v11 = 0;
        v12 = 0;
        do
        {
          if (v10[v12] == a3)
            ++v11;
          ++v12;
        }
        while (v11 <= 4u && (unsigned __int16)result > (unsigned __int16)v12);
        if (v11 == 5 && (unsigned __int16)result > (unsigned __int16)v12)
        {
          v15 = strchr((char *)&v10[v12], a3);
          if (v15)
          {
            *v15 = 0;
            v10 = *(const char **)(v7 + 8 * v8);
            v4 = (unsigned __int16)*a2;
          }
          result = atoi(&v10[v12]);
          if ((unsigned __int16)result > v9)
          {
            v9 = result;
            v5 = v8;
          }
        }
      }
      ++v8;
    }
    while (v8 < v4);
  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
  return result;
}

uint64_t posparserGrowStr(uint64_t a1, uint64_t *a2, unsigned int a3, _WORD *a4, __int16 a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unsigned int v14;

  if ((unsigned __int16)*a4 >= a3)
    return 0;
  *a4 = a5 + a3;
  v7 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *a2, (unsigned __int16)(a5 + a3) + 2);
  if (v7)
  {
    v12 = v7;
    result = 0;
    *a2 = v12;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v8, v9, v10, v11, v14);
    return 2687508490;
  }
  return result;
}

__n128 posPInsertTOKMarker(uint64_t a1, unsigned __int16 *a2, __n128 *a3)
{
  unint64_t v5;
  unsigned __int32 *v6;
  uint64_t v7;
  unsigned __int32 v8;
  unsigned __int16 v9;
  __n128 *v10;
  __n128 result;

  v5 = *a2;
  if (v5 < 2)
  {
    v9 = 1;
  }
  else
  {
    v6 = (unsigned __int32 *)(a1 + 44);
    v7 = 1;
    while (1)
    {
      v8 = *v6;
      v6 += 8;
      if (a3->n128_u32[3] < v8)
        break;
      if (v5 == ++v7)
      {
        v9 = *a2;
        goto LABEL_8;
      }
    }
    v9 = v7;
  }
LABEL_8:
  v10 = (__n128 *)(a1 + 32 * v9);
  memmove((void *)(a1 + 32 * (v9 + 1)), v10, 32 * (int)(v5 - v9));
  result = a3[1];
  *v10 = *a3;
  v10[1] = result;
  ++*a2;
  return result;
}

uint64_t isMAPPINGXBI2A(uint64_t a1, unsigned __int8 *a2)
{
  if (*(_DWORD *)(a1 + 152) == 1)
    return isCharInStr(a2, "XBI");
  else
    return 0;
}

uint64_t isCharInStr(unsigned __int8 *a1, const char *a2)
{
  unsigned __int16 v4;
  unsigned __int16 v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  unsigned __int16 v9;

  v4 = Utf8_LengthInBytes(a1, 1);
  v5 = strlen(a2);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = 0;
  while (1)
  {
    v8 = Utf8_LengthInBytes((unsigned __int8 *)&a2[v7], 1);
    v9 = v8;
    if (v8 == v4 && !strncmp((const char *)a1, &a2[v7], v8))
      break;
    v7 += v9;
    if (v7 >= v6)
      return 0;
  }
  return 1;
}

uint64_t isDiacritic(uint64_t a1, unsigned __int8 *a2)
{
  const char *v3;

  if (*(_QWORD *)(a1 + 120))
    v3 = *(const char **)(a1 + 120);
  else
    v3 = "^FNKauioR";
  return isCharInStr(a2, v3);
}

uint64_t isSMSPunc(uint64_t a1, unsigned __int8 *a2)
{
  const char *v2;

  v2 = *(const char **)(a1 + 104);
  if (v2)
    return isCharInStr(a2, v2);
  else
    return 0;
}

uint64_t isPunc_0(uint64_t a1, unsigned __int8 *a2)
{
  const char *v2;

  v2 = *(const char **)(a1 + 112);
  if (v2)
    return isCharInStr(a2, v2);
  else
    return 0;
}

BOOL isDigit(unsigned __int8 a1)
{
  return a1 - 48 < 0xA;
}

uint64_t inSMSMode(unsigned int a1, uint64_t a2, unsigned int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _WORD *v8;
  char *v9;
  int v10;
  int v11;
  unint64_t v12;
  int *v13;
  unsigned __int16 v14;
  int v15;
  int v16;

  if (!a3)
    return 0;
  v5 = 0;
  v6 = a3;
  v7 = a2 + 32;
  do
  {
    v8 = (_WORD *)(a2 + 12 + 32 * v5);
    if (a1 < (unsigned __int16)(*v8 - *(_DWORD *)(a2 + 12)))
      break;
    if (*(_DWORD *)(a2 + 32 * v5) == 21
      && (v9 = *(char **)(a2 + 32 * v5 + 24)) != 0
      && !LH_stricmp(v9, "sms"))
    {
      v10 = *(_DWORD *)(a2 + 12);
      v11 = *(_DWORD *)v8 - v10;
      v12 = v5 + 1;
      v13 = (int *)(v7 + 32 * v5);
      while (1)
      {
        v14 = v12;
        if (v12 >= v6)
          break;
        v15 = *v13;
        v13 += 8;
        ++v12;
        if (v15 == 21)
        {
          v16 = *(v13 - 5) - v10;
          goto LABEL_15;
        }
      }
      LOWORD(v16) = *(_WORD *)(a2 + 16);
LABEL_15:
      v5 = v14;
      if (a1 >= (unsigned __int16)v11 && (unsigned __int16)v16 > a1)
        return 1;
    }
    else
    {
      ++v5;
    }
  }
  while (v5 < v6);
  return 0;
}

uint64_t posparserInsertWordMarker(uint64_t a1, uint64_t *a2, _WORD *a3, uint64_t a4, int a5, char *__s, _WORD *a7)
{
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned __int16 v26;
  uint64_t v27;
  unsigned __int16 v28;
  _DWORD *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t result;
  uint64_t v44;
  unsigned int v45;
  uint64_t *v46;
  int v47;
  _WORD *v48;

  v14 = *a2;
  v15 = strlen(__s);
  v19 = (unsigned __int16)*a3;
  v46 = a2;
  if (v19 <= 1)
  {
    LOWORD(v21) = 1;
  }
  else
  {
    v20 = (int *)(v14 + 44);
    v21 = 1;
    while (1)
    {
      v22 = *v20;
      v20 += 8;
      if (v22 - *(_DWORD *)(v14 + 12) > a4)
        break;
      if (v19 == ++v21)
      {
        LOWORD(v21) = *a3;
        break;
      }
    }
  }
  v23 = a4;
  if ((_DWORD)a4)
  {
    v23 = a4;
    v24 = a4;
    do
    {
      if (__s[(v23 - 1)] == 32)
        break;
      v23 = (unsigned __int16)--v24;
    }
    while ((_WORD)v24);
  }
  v47 = a5;
  v48 = a3;
  if (v15 <= a4)
  {
    v26 = a4;
    v25 = a4;
  }
  else
  {
    v25 = a4;
    v26 = a4;
    do
    {
      if (__s[v25 + 1] == 32)
        break;
      v25 = ++v26;
    }
    while (v15 > v26);
  }
  v27 = (unsigned __int16)v21;
  if (v19 < 2)
  {
LABEL_22:
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"Could not resolve references pos (previously logged as Public 68004). Word start pos=%d. Word end pos=%d. This pos=%d", v16, v17, v18, v23);
    v28 = v27 - 1;
  }
  else
  {
    v28 = 1;
    while (*(_DWORD *)(v14 + 32 * v28) != 1
         || *(_DWORD *)(v14 + 32 * v28 + 12) - *(_DWORD *)(v14 + 12) != (_DWORD)v23)
    {
      if (v19 <= ++v28)
        goto LABEL_22;
    }
  }
  *a7 = v28 + 1;
  v29 = (_DWORD *)(v14 + 32 * v28);
  v30 = v29[1];
  v31 = v29[2];
  v32 = v25 - a4;
  if ((_DWORD)a4 == v26)
    v33 = 1;
  else
    v33 = v32;
  v29[2] = a4 - v23;
  v29[4] = a4 - v23;
  v34 = *(_DWORD *)(v14 + 12);
  v35 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), v14, 32 * (unsigned __int16)*v48 + 32);
  if (v35)
  {
    v40 = v35;
    v41 = a4 + v47 + v34;
    v42 = (unsigned __int16)*v48;
    if ((_DWORD)v27 != v42)
      memmove((void *)(v35 + 32 * (v27 + 1)), (const void *)(v35 + 32 * v27), 32 * (v42 - (int)v27));
    result = 0;
    v44 = v40 + 32 * v27;
    *(_DWORD *)v44 = 1;
    *(_DWORD *)(v44 + 4) = v30 - v32 + v31;
    *(_DWORD *)(v44 + 8) = v33;
    *(_DWORD *)(v44 + 12) = v41;
    *(_DWORD *)(v44 + 16) = v32;
    *(_QWORD *)(v44 + 20) = 0;
    *(_DWORD *)(v44 + 28) = 0;
    ++*v48;
    *v46 = v40;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v36, v37, v38, v39, v45);
    return 2687508490;
  }
  return result;
}

uint64_t posparser_applyEmbeddedRules(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  uint64_t i;
  uint64_t v6;
  unsigned __int16 *v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;

  if (a3)
  {
    for (i = 0; i != a3; ++i)
    {
      if (!*(_DWORD *)(a2 + 104 * i + 88)
        && !*(_DWORD *)(a2 + 104 * i + 80)
        && !*(_DWORD *)(a2 + 104 * i + 84)
        && !*(_DWORD *)(a2 + 104 * i + 92)
        && !*(_DWORD *)(a2 + 104 * i + 12))
      {
        v6 = a2 + 104 * i;
        v9 = *(unsigned __int16 *)(v6 + 10);
        v7 = (unsigned __int16 *)(v6 + 10);
        v8 = v9;
        v10 = *(v7 - 1);
        v11 = (unsigned __int16)(v10 + 1);
        v12 = v9 - 1;
        v13 = v11 >= a5 || v11 == 0;
        if (!v13 && v12 > (int)v11)
        {
          v15 = v10 + 1;
          v16 = *(unsigned __int16 *)(a1 + 184);
          v17 = v16;
          do
          {
            if (v17)
            {
              v18 = 0;
              v19 = 0;
              v20 = *(unsigned __int8 *)(a4 + v15);
              do
              {
                v21 = *(_QWORD *)(a1 + 176);
                if (v20 == *(unsigned __int8 *)(v21 + v18))
                {
                  v20 = *(unsigned __int8 *)(v21 + v18 + 1);
                  *(_BYTE *)(a4 + v15) = v20;
                  v16 = *(unsigned __int16 *)(a1 + 184);
                }
                ++v19;
                v18 += 2;
              }
              while (v19 < v16);
              v8 = *v7;
              v17 = v16;
            }
            ++v15;
          }
          while (v15 < a5 && v8 - 1 > (int)v15);
        }
      }
    }
  }
  return 0;
}

uint64_t setPosparserFeatureVector(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned int a7, unsigned int a8)
{
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  __int16 v23;
  __int16 v24;
  unsigned __int16 v25;
  const char *v26;
  unsigned int v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  __int16 v35;
  const char *v36;
  int v37;
  const char *v38;
  const char *v39;
  int v40;
  unsigned __int16 v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  int v50;
  char v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  int v55;
  char v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  const char *v65;
  uint64_t v66;
  int v67;
  const char *v68;
  uint64_t v69;
  int v70;
  const char *v71;
  uint64_t v72;
  int v73;
  const char *v74;
  BOOL v76;
  BOOL v77;
  char v78;
  BOOL v79;
  int v80;
  unsigned int v81;
  int v82;
  __int16 v83;
  unsigned int v84;
  __int16 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v86 = 0;
  v15 = 0;
  if (posparser_isFeatureRequired(a3, 0, &v86, a8, *(_DWORD *)(a1 + 236)) == 1)
  {
    v15 = posparser_setFeature(a3, *(_QWORD *)a1, 0, a5, a2, a8, *(_DWORD *)(a1 + 236));
    if ((v15 & 0x80000000) != 0)
      return v15;
  }
  if (posparser_isFeatureRequired(a3, 1, &v86, a8, *(_DWORD *)(a1 + 236)) == 1)
  {
    if (a4)
    {
      v16 = a6 + 104 * (a4 - 1);
      v17 = *(const char **)(v16 + 40);
      if (!v17 || strcmp(*(const char **)(v16 + 40), "MULTIWORD"))
      {
        v18 = *(_QWORD *)a1;
        v19 = *(_DWORD *)(a1 + 236);
        v20 = a3;
        v21 = a5;
        v22 = v17;
        goto LABEL_19;
      }
      v23 = a4 - 1;
      if ((__int16)(a4 - 1) >= -1)
        v23 = -1;
      v83 = v23;
      v24 = a4;
      while (1)
      {
        v25 = v24 - 1;
        if (((v24 - 1) & 0x8000) != 0)
          break;
        --v24;
        v26 = *(const char **)(a6 + 104 * v25 + 40);
        if (!v26 || strcmp(v26, "MULTIWORD"))
          goto LABEL_17;
      }
      v24 = v83;
LABEL_17:
      v18 = *(_QWORD *)a1;
      v22 = *(const char **)(a6 + 104 * v24 + 40);
      v19 = *(_DWORD *)(a1 + 236);
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = *(_DWORD *)(a1 + 236);
      v22 = "SB";
    }
    v20 = a3;
    v21 = a5;
LABEL_19:
    v15 = posparser_setFeature(v20, v18, 1, v21, v22, a8, v19);
    if ((v15 & 0x80000000) != 0)
      return v15;
  }
  if (posparser_isFeatureRequired(a3, 2, &v86, a8, *(_DWORD *)(a1 + 236)) != 1)
    goto LABEL_35;
  v27 = a4 - 2;
  if (a4 < 2)
  {
    if (a4 != 1)
      goto LABEL_35;
    v30 = *(_QWORD *)a1;
    v31 = *(_DWORD *)(a1 + 236);
    v34 = "SB";
  }
  else
  {
    v28 = a6 + 104 * v27;
    v29 = *(const char **)(v28 + 40);
    if (!v29 || strcmp(*(const char **)(v28 + 40), "MULTIWORD"))
    {
      v30 = *(_QWORD *)a1;
      v31 = *(_DWORD *)(a1 + 236);
      v32 = a3;
      v33 = a5;
      v34 = v29;
      goto LABEL_34;
    }
    v35 = a4 - 2;
    if ((v27 & 0x8000) == 0)
    {
      while (1)
      {
        v36 = *(const char **)(a6 + 104 * (unsigned __int16)v35 + 40);
        if (!v36 || strcmp(v36, "MULTIWORD"))
          break;
        v37 = v35--;
        if (v37 <= 0)
        {
          v35 = -1;
          break;
        }
      }
    }
    v30 = *(_QWORD *)a1;
    v34 = *(const char **)(a6 + 104 * v35 + 40);
    v31 = *(_DWORD *)(a1 + 236);
  }
  v32 = a3;
  v33 = a5;
LABEL_34:
  v15 = posparser_setFeature(v32, v30, 2, v33, v34, a8, v31);
  if ((v15 & 0x80000000) != 0)
    return v15;
LABEL_35:
  if (posparser_isFeatureRequired(a3, 3, &v86, a8, *(_DWORD *)(a1 + 236)) == 1)
  {
    v38 = *(const char **)(a6 + 104 * a4 + 48);
    if (!v38)
      v38 = *(const char **)(a6 + 104 * a4 + 40);
    v15 = posparser_setFeature(a3, *(_QWORD *)a1, 3, a5, v38, a8, *(_DWORD *)(a1 + 236));
    if ((v15 & 0x80000000) != 0)
      return v15;
  }
  v84 = a4 + 1;
  if (a4 + 1 < a7 && posparser_isFeatureRequired(a3, 4, &v86, a8, *(_DWORD *)(a1 + 236)) == 1)
  {
    v39 = *(const char **)(a6 + 104 * v84 + 48);
    if (!v39)
      v39 = *(const char **)(a6 + 104 * v84 + 40);
    v15 = posparser_setFeature(a3, *(_QWORD *)a1, 4, a5, v39, a8, *(_DWORD *)(a1 + 236));
    if ((v15 & 0x80000000) != 0)
      return v15;
  }
  if (posparser_isFeatureRequired(a3, 9, &v86, a8, *(_DWORD *)(a1 + 236)) != 1
    && posparser_isFeatureRequired(a3, 10, &v86, a8, *(_DWORD *)(a1 + 236)) != 1
    && posparser_isFeatureRequired(a3, 11, &v86, a8, *(_DWORD *)(a1 + 236)) != 1
    && posparser_isFeatureRequired(a3, 12, &v86, a8, *(_DWORD *)(a1 + 236)) != 1
    && posparser_isFeatureRequired(a3, 13, &v86, a8, *(_DWORD *)(a1 + 236)) != 1
    && posparser_isFeatureRequired(a3, 14, &v86, a8, *(_DWORD *)(a1 + 236)) != 1
    && posparser_isFeatureRequired(a3, 15, &v86, a8, *(_DWORD *)(a1 + 236)) != 1
    && posparser_isFeatureRequired(a3, 16, &v86, a8, *(_DWORD *)(a1 + 236)) != 1)
  {
    goto LABEL_103;
  }
  v40 = strlen(a2);
  v41 = Utf8_LengthInUtf8chars((unint64_t)a2, v40);
  v42 = posparser_setFeature(a3, *(_QWORD *)a1, 9, a5, "=", a8, *(_DWORD *)(a1 + 236));
  if ((v42 & 0x80000000) != 0)
    return v42;
  v42 = posparser_setFeature(a3, *(_QWORD *)a1, 10, a5, "=", a8, *(_DWORD *)(a1 + 236));
  if ((v42 & 0x80000000) != 0)
    return v42;
  v42 = posparser_setFeature(a3, *(_QWORD *)a1, 11, a5, "=", a8, *(_DWORD *)(a1 + 236));
  if ((v42 & 0x80000000) != 0)
    return v42;
  v42 = posparser_setFeature(a3, *(_QWORD *)a1, 12, a5, "=", a8, *(_DWORD *)(a1 + 236));
  if ((v42 & 0x80000000) != 0)
    return v42;
  v42 = posparser_setFeature(a3, *(_QWORD *)a1, 13, a5, "=", a8, *(_DWORD *)(a1 + 236));
  if ((v42 & 0x80000000) != 0)
    return v42;
  v42 = posparser_setFeature(a3, *(_QWORD *)a1, 14, a5, "=", a8, *(_DWORD *)(a1 + 236));
  if ((v42 & 0x80000000) != 0)
    return v42;
  v42 = posparser_setFeature(a3, *(_QWORD *)a1, 15, a5, "=", a8, *(_DWORD *)(a1 + 236));
  if ((v42 & 0x80000000) != 0)
    return v42;
  v15 = posparser_setFeature(a3, *(_QWORD *)a1, 16, a5, "=", a8, *(_DWORD *)(a1 + 236));
  if ((v15 & 0x80000000) == 0)
  {
    v43 = v41;
    if (v41)
    {
      v44 = 0;
      v45 = 0;
      v76 = v43 != 2;
      v77 = v43 != 3;
      v79 = v43 != 4;
      v80 = v43;
      do
      {
        v81 = v45;
        v82 = v44;
        if (v43 == 1 || v44)
        {
          if (v43 != 2 && v44 == -1)
          {
            v87 = 0;
            v88 = 0;
            utf8_determineUTF8CharLength(a2[v45]);
            __strncpy_chk();
            v15 = posparser_setFeature(a3, *(_QWORD *)a1, 10, a5, (const char *)&v87, a8, *(_DWORD *)(a1 + 236));
            if ((v15 & 0x80000000) != 0)
              return v15;
            v49 = 1;
            v47 = v79;
            v48 = v77;
            goto LABEL_79;
          }
          if (v43 != 3 && v44 == -2)
          {
            v87 = 0;
            v88 = 0;
            utf8_determineUTF8CharLength(a2[v45]);
            __strncpy_chk();
            v15 = posparser_setFeature(a3, *(_QWORD *)a1, 11, a5, (const char *)&v87, a8, *(_DWORD *)(a1 + 236));
            if ((v15 & 0x80000000) != 0)
              return v15;
            v49 = 1;
            v47 = v79;
            goto LABEL_78;
          }
          if (v43 == 4)
          {
            v47 = v79;
            v49 = v76;
            v48 = v77;
            goto LABEL_80;
          }
          v47 = v79;
          v49 = v76;
          v48 = v77;
          if (v82 == -3)
          {
            v87 = 0;
            v88 = 0;
            utf8_determineUTF8CharLength(a2[v45]);
            __strncpy_chk();
            v15 = posparser_setFeature(a3, *(_QWORD *)a1, 12, a5, (const char *)&v87, a8, *(_DWORD *)(a1 + 236));
            if ((v15 & 0x80000000) != 0)
              return v15;
            v47 = 1;
            v49 = 1;
LABEL_78:
            v48 = 1;
LABEL_79:
            v45 = v81;
          }
        }
        else
        {
          v87 = 0;
          v88 = 0;
          utf8_getUTF8Char((uint64_t)a2, 0, &v87);
          v46 = posparser_setFeature(a3, *(_QWORD *)a1, 9, a5, (const char *)&v87, a8, *(_DWORD *)(a1 + 236));
          v45 = v81;
          v15 = v46;
          v47 = v79;
          v49 = v76;
          v48 = v77;
          if ((v46 & 0x80000000) != 0)
            return v15;
        }
LABEL_80:
        v50 = v80 + v82;
        if (v80 != 1 && v50 == 1)
        {
          v87 = 0;
          v88 = 0;
          v78 = v47;
          v51 = v48;
          utf8_getUTF8Char((uint64_t)a2, v81, &v87);
          v52 = posparser_setFeature(a3, *(_QWORD *)a1, 13, a5, (const char *)&v87, a8, *(_DWORD *)(a1 + 236));
          v48 = v51;
          v47 = v78;
          v45 = v81;
          v15 = v52;
          if ((v52 & 0x80000000) != 0)
            return v15;
        }
        v53 = v49 ^ 1;
        if (v50 != 2)
          v53 = 1;
        if ((v53 & 1) != 0)
        {
          v55 = v82;
          v56 = v48 ^ 1;
          if (v80 + v82 != 3)
            v56 = 1;
          if ((v56 & 1) != 0)
          {
            if (v80 + v82 == 4)
              v61 = v47;
            else
              v61 = 0;
            if ((v61 & 1) == 0)
            {
              v62 = v45;
              v54 = v45;
              goto LABEL_99;
            }
            v87 = 0;
            v88 = 0;
            v54 = v45;
            __strcpy_chk();
            v57 = *(_QWORD *)a1;
            v58 = *(_DWORD *)(a1 + 236);
            v59 = a3;
            v60 = 16;
          }
          else
          {
            v87 = 0;
            v88 = 0;
            v54 = v45;
            __strcpy_chk();
            v57 = *(_QWORD *)a1;
            v58 = *(_DWORD *)(a1 + 236);
            v59 = a3;
            v60 = 15;
          }
          v15 = posparser_setFeature(v59, v57, v60, a5, (const char *)&v87, a8, v58);
          if ((v15 & 0x80000000) != 0)
            return v15;
        }
        else
        {
          v87 = 0;
          v88 = 0;
          v54 = v45;
          __strcpy_chk();
          v15 = posparser_setFeature(a3, *(_QWORD *)a1, 14, a5, (const char *)&v87, a8, *(_DWORD *)(a1 + 236));
          v55 = v82;
          if ((v15 & 0x80000000) != 0)
            return v15;
        }
        v62 = v54;
LABEL_99:
        v45 = utf8_determineUTF8CharLength(a2[v62]) + v54;
        v44 = v55 - 1;
        v43 = v80;
      }
      while (v80 + v44);
    }
LABEL_103:
    if (posparser_isFeatureRequired(a3, 5, &v86, a8, *(_DWORD *)(a1 + 236)) != 1
      || (a4
       && *(_DWORD *)(a6 + 104 * (unsigned __int16)(a4 - 1) + 12) != 1
       && !*(_WORD *)(a6 + 104 * (unsigned __int16)(a4 - 1) + 74)
        ? (const char *)(v63 = *(_QWORD *)a1,
                         v65 = *(const char **)(a6 + 104 * (a4 - 1) + 56),
                         v64 = *(_DWORD *)(a1 + 236))
        : (v63 = *(_QWORD *)a1, v64 = *(_DWORD *)(a1 + 236), v65 = "="),
          v15 = posparser_setFeature(a3, v63, 5, a5, v65, a8, v64),
          (v15 & 0x80000000) == 0))
    {
      if (posparser_isFeatureRequired(a3, 6, &v86, a8, *(_DWORD *)(a1 + 236)) != 1
        || (a4 >= 2
         && *(_DWORD *)(a6 + 104 * (unsigned __int16)(a4 - 2) + 12) != 1
         && !*(_WORD *)(a6 + 104 * (unsigned __int16)(a4 - 2) + 74)
          ? (const char *)(v66 = *(_QWORD *)a1,
                           v68 = *(const char **)(a6 + 104 * (a4 - 2) + 56),
                           v67 = *(_DWORD *)(a1 + 236))
          : (v66 = *(_QWORD *)a1, v67 = *(_DWORD *)(a1 + 236), v68 = "="),
            v15 = posparser_setFeature(a3, v66, 6, a5, v68, a8, v67),
            (v15 & 0x80000000) == 0))
      {
        if (posparser_isFeatureRequired(a3, 7, &v86, a8, *(_DWORD *)(a1 + 236)) != 1
          || (v84 < a7
           && *(_DWORD *)(a6 + 104 * (unsigned __int16)(a4 + 1) + 12) != 1
           && !*(_WORD *)(a6 + 104 * (unsigned __int16)(a4 + 1) + 74)
            ? (const char *)(v69 = *(_QWORD *)a1,
                             v71 = *(const char **)(a6 + 104 * v84 + 56),
                             v70 = *(_DWORD *)(a1 + 236))
            : (v69 = *(_QWORD *)a1, v70 = *(_DWORD *)(a1 + 236), v71 = "="),
              v15 = posparser_setFeature(a3, v69, 7, a5, v71, a8, v70),
              (v15 & 0x80000000) == 0))
        {
          if (posparser_isFeatureRequired(a3, 8, &v86, a8, *(_DWORD *)(a1 + 236)) == 1)
          {
            if (a4 + 2 >= a7
              || *(_DWORD *)(a6 + 104 * (unsigned __int16)(a4 + 2) + 12) == 1
              || *(_WORD *)(a6 + 104 * (unsigned __int16)(a4 + 2) + 74))
            {
              v72 = *(_QWORD *)a1;
              v73 = *(_DWORD *)(a1 + 236);
              v74 = "=";
            }
            else
            {
              v72 = *(_QWORD *)a1;
              v74 = *(const char **)(a6 + 104 * (a4 + 2) + 56);
              v73 = *(_DWORD *)(a1 + 236);
            }
            return posparser_setFeature(a3, v72, 8, a5, v74, a8, v73);
          }
        }
      }
    }
  }
  return v15;
}

uint64_t posparser_GetPOSAndDiacritics(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char *a5, unsigned int a6, int a7, uint64_t a8, unsigned __int16 a9, unsigned __int8 a10, _DWORD *a11)
{
  uint64_t v15;
  _WORD *v16;
  unsigned __int16 v17;
  uint64_t i;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  int v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  char *v60;
  char *v61;
  char *v62;
  unsigned int v64;
  __int16 v65;
  unsigned int v66;
  uint64_t v69;
  unsigned int isReconcilable;
  size_t v73;
  char *__s2;
  size_t v75;
  char *v76;
  int v77;
  const char *v78[2];

  v78[0] = 0;
  v77 = 0;
  v75 = 0;
  v76 = 0;
  v73 = 0;
  __s2 = 0;
  *a11 = 0;
  v65 = a6;
  v15 = a4 + 104 * a6;
  *(_WORD *)(v15 + 32) = 0;
  v16 = (_WORD *)(v15 + 32);
  v17 = 0;
  if (a9)
  {
    for (i = 0; i != a9; ++i)
    {
      v19 = *(char **)(a8 + 8 * i);
      while (1)
      {
        v20 = strchr(v19, 32);
        if (!v20)
          break;
        v19 = v20 + 1;
        *v16 = ++v17;
      }
    }
  }
  v21 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 16 * v17);
  v66 = a6;
  v26 = a4 + 104 * a6;
  *(_QWORD *)(v26 + 24) = v21;
  v27 = (uint64_t *)(v26 + 24);
  if (!v21)
  {
LABEL_56:
    v44 = 2687508490;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v22, v23, v24, v25, v64);
    return v44;
  }
  *v16 = 0;
  if (!a9)
  {
    v44 = 0;
LABEL_58:
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), *v27);
    *v27 = 0;
    goto LABEL_59;
  }
  v28 = 0;
  isReconcilable = 0;
  v29 = 0;
  v30 = a5;
  do
  {
    v31 = *(char **)(a8 + 8 * v28);
    v32 = strchr(v31, a10);
    if (v32)
    {
      *v32 = 0;
      v31 = *(char **)(a8 + 8 * v28);
    }
    v69 = v28;
    if (v31)
    {
      v36 = strchr(v31, 32);
      do
      {
        if (v36)
          *v36 = 0;
        if ((v29 & 1) != 0)
        {
          if (*(_DWORD *)(a1 + 248))
          {
            if (!v76 && (v76 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 1)) == 0
              || !__s2 && (__s2 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 1)) == 0)
            {
              v44 = 2687508490;
              log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v39, v40, v41, v42, v64);
              goto LABEL_59;
            }
            v43 = posparser_ExtractPunctuation((_QWORD *)a1, v30, &v76, &v75, &__s2, &v73);
            v44 = v43;
            if ((v43 & 0x80000000) != 0)
              goto LABEL_59;
            isReconcilable = v43;
            v45 = strlen(v31);
            v46 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, (v75 + v45 + v73 + 1));
            *(_QWORD *)(*v27 + 16 * (unsigned __int16)*v16 + 8) = v46;
            if (!v46)
              goto LABEL_56;
            if (v76)
            {
              strcpy(v46, v76);
              v46 = *(char **)(*v27 + 16 * (unsigned __int16)*v16 + 8);
            }
            v30 = a5;
            strcat(v46, v31);
            if (__s2)
              strcat(*(char **)(*v27 + 16 * (unsigned __int16)*v16 + 8), __s2);
            goto LABEL_40;
          }
          v77 = 0;
          if (a2 != 1)
            goto LABEL_38;
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"FOUND \"%s\" in dict as \"%s\" - try reconcile", v33, v34, v35, (uint64_t)v30);
          isReconcilable = posparser_isReconcilable(a1, a3, v31, *(unsigned __int16 *)(a4 + 104 * v66 + 8), *(unsigned __int16 *)(a4 + 104 * (v66 + a7) + 10), &v77, (uint64_t *)v78);
          if ((isReconcilable & 0x80000000) != 0)
            goto LABEL_55;
          if (v77)
          {
            if (v77 == 1 && v78[0])
            {
              posparser_PostProcess(a1, v78);
              v53 = v78[0];
              v54 = strlen(v78[0]);
              v55 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, (v54 + 1));
              *(_QWORD *)(*v27 + 16 * (unsigned __int16)*v16 + 8) = v55;
              if (!v55)
                goto LABEL_56;
              strcpy(v55, v53);
              heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v53);
              v78[0] = 0;
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"word=\"%s\" FOUND in TAG[%d] POS=\"%s\" DIA=\"%s\"(RECONCILED)", v56, v57, v58, (uint64_t)v30);
LABEL_41:
              ++*v16;
              if (!v36)
                goto LABEL_51;
              goto LABEL_42;
            }
LABEL_38:
            v59 = strlen(v31);
            v60 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, (v59 + 1));
            *(_QWORD *)(*v27 + 16 * (unsigned __int16)*v16 + 8) = v60;
            if (!v60)
              goto LABEL_56;
            strcpy(v60, v31);
LABEL_40:
            log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"word=\"%s\" FOUND in TAG[%d] POS=\"%s\" DIA=\"%s\"", v47, v48, v49, (uint64_t)v30);
            goto LABEL_41;
          }
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"FOUND in \"%s\" in dict, but couldnt reconcile with partial diacritics - FAIL ; skip diacritic",
            v50,
            v51,
            v52,
            (uint64_t)v31);
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), *(_QWORD *)(*v27 + 16 * (unsigned __int16)*v16));
          *(_QWORD *)(*v27 + 16 * (unsigned __int16)*v16) = 0;
          if (!v36)
            goto LABEL_51;
        }
        else
        {
          v37 = strlen(v31);
          v38 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, (v37 + 1));
          *(_QWORD *)(*v27 + 16 * (unsigned __int16)*v16) = v38;
          if (!v38)
            goto LABEL_56;
          strcpy(v38, v31);
          if (!v36)
          {
LABEL_51:
            ++v29;
            break;
          }
        }
LABEL_42:
        v61 = strchr(v36 + 1, 32);
        if ((v29 & 1) != 0)
          v62 = 0;
        else
          v62 = v36 + 1;
        if (v61)
          v31 = v36 + 1;
        else
          v31 = v62;
        ++v29;
        v36 = v61;
      }
      while (v31);
    }
    v28 = v69 + 1;
  }
  while (v69 + 1 != a9);
  if (!*v16)
  {
    v44 = isReconcilable;
    goto LABEL_58;
  }
  *(_WORD *)(a4 + 104 * v66 + 72) = a7 + v65;
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"FOUND WORD \"%s\"%d,%d in  POS dict with %d POS tags", v33, v34, v35, (uint64_t)v30);
  *a11 = 1;
LABEL_55:
  v44 = isReconcilable;
LABEL_59:
  if (v76)
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v76);
  if (__s2)
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)__s2);
  return v44;
}

uint64_t posparser_isReconcilable(uint64_t a1, uint64_t a2, char *__s, unsigned int a4, unsigned int a5, _DWORD *a6, uint64_t *a7)
{
  unsigned __int16 v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  const char *v26;
  int v27;
  unsigned __int16 v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int16 *v32;
  unsigned int v33;
  BOOL v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned __int16 *v38;
  unsigned int v39;
  BOOL v40;
  int v41;
  unint64_t v42;
  const char *v43;
  const char *v44;
  const char *v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  int v51;
  int v52;
  uint64_t v53;
  const char *v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  int v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  unsigned __int16 v69;
  int v70;
  const char *v71;
  int v72;
  size_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  size_t v80;
  unsigned int v81;
  unsigned __int16 v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unsigned int v86;
  int v87;
  int v88;
  uint64_t v89;
  char *__s1;
  int __s1a;
  char *__s1b;
  uint64_t *v93;
  _DWORD *v94;
  unint64_t v95;
  unsigned int v97;
  unsigned __int16 v98;
  __int16 v99;
  char *v100;

  v13 = strlen(__s);
  v99 = 3 * v13;
  *a6 = 1;
  v14 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, (unsigned __int16)(3 * v13) + 1);
  v100 = v14;
  if (!v14)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v15, v16, v17, v18, v81);
    return 2687508490;
  }
  v19 = (uint64_t)v14;
  strcpy(v14, __s);
  v98 = v13;
  if (a4 >= a5 || !v13)
    goto LABEL_131;
  v93 = a7;
  v94 = a6;
  v20 = 0;
  v21 = 0;
  v22 = a4;
  v23 = a5;
  v95 = a5;
  while (1)
  {
    if ((unsigned __int16)v20 >= v13)
      goto LABEL_21;
    v24 = (uint64_t)v100;
    v25 = (unsigned __int8 *)(a2 + v22);
    while (1)
    {
      v26 = *(_QWORD *)(a1 + 120) ? *(const char **)(a1 + 120) : "^FNKauioR";
      if (!isCharInStr((unsigned __int8 *)(v24 + (unsigned __int16)v20), v26))
        break;
      v27 = Utf8_LengthInBytes((unsigned __int8 *)(v24 + (unsigned __int16)v20), 1);
LABEL_17:
      v20 += v27;
      if ((unsigned __int16)v20 >= v13)
        goto LABEL_20;
    }
    v28 = Utf8_LengthInBytes(v25, 1);
    if ((unsigned __int16)Utf8_LengthInBytes((unsigned __int8 *)(v24 + (unsigned __int16)v20), 1) == v28
      && !strncmp((const char *)v25, (const char *)(v24 + (unsigned __int16)v20), v28))
    {
      v29 = v21;
      goto LABEL_31;
    }
    if (*(_DWORD *)(a1 + 152) != 1 || *v25 != 65)
    {
      v27 = Utf8_LengthInBytes((unsigned __int8 *)(v24 + (unsigned __int16)v20), 1);
      if ((v27 & 0xFFFE) != 0)
        goto LABEL_17;
      *a6 = 0;
LABEL_20:
      v23 = v95;
      goto LABEL_21;
    }
    v29 = *(unsigned __int16 *)(a1 + 208);
    if (v29 <= (unsigned __int16)v21)
    {
      v29 = v21;
LABEL_34:
      v23 = v95;
      goto LABEL_35;
    }
    v30 = *(_QWORD *)(a1 + 200);
    v31 = (unsigned __int16)v21;
    v32 = (unsigned __int16 *)(v30 + 6 * (unsigned __int16)v21);
    while (1)
    {
      v33 = *v32;
      v32 += 3;
      v34 = v22 == v33;
      if (v22 < v33)
      {
        v29 = v31;
        goto LABEL_34;
      }
      if (v34)
        break;
      ++v31;
      LOWORD(v21) = v21 + 1;
      if (v29 == v31)
        goto LABEL_34;
    }
    v97 = (unsigned __int16)v20;
    if (v29 <= (unsigned __int16)v31)
    {
      v41 = 0;
      v29 = v31;
    }
    else
    {
      v41 = 0;
      v42 = (unsigned __int16)v31;
      v43 = (const char *)(v30 + 6 * (unsigned __int16)v21 + 2);
      while (v22 == *((unsigned __int16 *)v43 - 1))
      {
        v44 = v43 + 6;
        v41 += strlen(v43);
        ++v42;
        v43 = v44;
        if (v42 >= v29)
          goto LABEL_87;
      }
      v29 = v42;
LABEL_87:
      a6 = v94;
    }
    __s1a = v41;
    utf8_GetPreviousValidUtf8Offset(v24 + (unsigned __int16)v20, &v97);
    v60 = v97 >= (unsigned __int16)v20 ? v20 : v97;
    if ((_WORD)v60)
    {
      v61 = 1;
      while (1)
      {
        v62 = *(_QWORD *)(a1 + 120) ? *(const char **)(a1 + 120) : "^FNKauioR";
        if (!isCharInStr((unsigned __int8 *)(v24 + (unsigned __int16)v60), v62))
          break;
        v61 += Utf8_LengthInBytes((unsigned __int8 *)(v24 + (unsigned __int16)v60), 1);
        v97 = (unsigned __int16)v60;
        a6 = v94;
        utf8_GetPreviousValidUtf8Offset(v24 + (unsigned __int16)v60, &v97);
        if (v97 < (unsigned __int16)v60)
          v60 = v97;
        if (!(_WORD)v60)
        {
          v60 = 0;
          break;
        }
      }
    }
    else
    {
      v60 = 0;
      v61 = 1;
    }
    if ((unsigned __int16)__s1a > (unsigned __int16)v61)
      break;
    if ((unsigned __int16)__s1a != (unsigned __int16)v61)
    {
      v29 = v31;
LABEL_31:
      v23 = v95;
      goto LABEL_35;
    }
    if (!(_WORD)__s1a)
      goto LABEL_31;
    v85 = v29;
    v63 = 0;
    v89 = (unsigned __int16)v31;
    v64 = *(_QWORD *)(a1 + 200);
    do
    {
      if (*(_BYTE *)(v64 + 6 * v63 + 2))
      {
        v65 = 0;
        v66 = 0;
        do
        {
          *(_BYTE *)(v24 + (unsigned __int16)v60++) = *(_BYTE *)(v64 + 6 * (v63 + v89) + v65 + 2);
          v65 = (unsigned __int16)++v66;
          v64 = *(_QWORD *)(a1 + 200);
        }
        while (strlen((const char *)(v64 + 6 * v63 + 2)) > (unsigned __int16)v66);
      }
      ++v63;
    }
    while (v63 != (unsigned __int16)__s1a);
    a6 = v94;
    v23 = v95;
    v29 = v85;
LABEL_35:
    if (*a6 == 1)
    {
      v35 = *(unsigned __int16 *)(a1 + 208);
      if (v35 > (unsigned __int16)v29)
      {
        v36 = (unsigned __int16)(v22 + 1);
        v37 = *(_QWORD *)(a1 + 200);
        v21 = (unsigned __int16)v29;
        v38 = (unsigned __int16 *)(v37 + 6 * (unsigned __int16)v29);
        while (1)
        {
          v39 = *v38;
          v38 += 3;
          v40 = v39 == v36;
          if (v39 > v36)
            goto LABEL_21;
          if (v40)
            break;
          ++v21;
          LOWORD(v29) = v29 + 1;
          if (v35 == v21)
          {
            v21 = *(unsigned __int16 *)(a1 + 208);
            goto LABEL_21;
          }
        }
        if (*(_QWORD *)(a1 + 120))
          v45 = *(const char **)(a1 + 120);
        else
          v45 = "^FNKauioR";
        if (!isCharInStr((unsigned __int8 *)(v37 + 6 * (unsigned __int16)v21 + 2), v45))
          goto LABEL_21;
        if (*(unsigned __int16 *)(a1 + 208) <= (unsigned __int16)v21)
        {
          v46 = 0;
          v47 = v21;
        }
        else
        {
          v46 = 0;
          v47 = (unsigned __int16)v21;
          v48 = *(_QWORD *)(a1 + 200);
          v49 = 6 * (unsigned __int16)v29;
          do
          {
            if ((_DWORD)v22 + 1 != *(unsigned __int16 *)(v48 + v49))
              break;
            v50 = *(_QWORD *)(a1 + 120) ? *(const char **)(a1 + 120) : "^FNKauioR";
            if (!isCharInStr((unsigned __int8 *)(v48 + v49 + 2), v50))
              break;
            v48 = *(_QWORD *)(a1 + 200);
            v46 += strlen((const char *)(v48 + v49 + 2));
            ++v47;
            v49 += 6;
          }
          while (v47 < *(unsigned __int16 *)(a1 + 208));
        }
        v51 = (unsigned __int16)v20 + 1;
        v88 = v98;
        if (v98 <= (unsigned __int16)(v20 + 1))
        {
          v52 = 0;
        }
        else
        {
          v52 = 0;
          __s1 = v100;
          v53 = (unsigned __int16)(v20 + 1);
          do
          {
            if (*(_QWORD *)(a1 + 120))
              v54 = *(const char **)(a1 + 120);
            else
              v54 = "^FNKauioR";
            if (!isCharInStr((unsigned __int8 *)&__s1[v53], v54))
              break;
            v52 += Utf8_LengthInBytes((unsigned __int8 *)&__s1[v53++], 1);
          }
          while (v88 != (unsigned __int16)v53);
        }
        if ((unsigned __int16)v52 < (unsigned __int16)v46)
        {
          result = posparser_GrowAndInsert((_QWORD *)a1, (uint64_t *)&v100, v46, v52, (unsigned __int16)(v20 + 1), (unsigned __int16)v21, (unsigned __int16)v47, &v98, &v99);
          if ((result & 0x80000000) != 0)
            return result;
          v20 = v46 + v20 - v52;
LABEL_84:
          v21 = v47;
LABEL_85:
          a6 = v94;
          v23 = v95;
          goto LABEL_21;
        }
        if ((unsigned __int16)v52 != (unsigned __int16)v46)
        {
          if ((unsigned __int16)v52 > (unsigned __int16)v46)
          {
            v67 = 0;
            v68 = 0;
            v69 = v52 - v46;
            v86 = *(unsigned __int16 *)(a1 + 208);
            v83 = (uint64_t)v100;
            while (v67 + (unsigned __int16)v21 < v86)
            {
              v70 = v68;
              __s1b = (char *)(v83 + (v67 + v51));
              v71 = (const char *)(*(_QWORD *)(a1 + 200) + 6 * (v67 + (unsigned __int16)v21) + 2);
              v72 = v67;
              v73 = strlen(v71);
              v74 = v73;
              if (strncmp(__s1b, v71, v73))
              {
                LOWORD(v68) = v70;
                v67 = v72;
                break;
              }
              v68 = v70 + v74;
              v67 = (unsigned __int16)v68;
              if ((unsigned __int16)v68 >= v69)
                break;
            }
            if (v69 != (unsigned __int16)v68)
            {
              v84 = (uint64_t)v100;
              v82 = v69 - v68;
              memmove(&v100[v67 + v51], &v100[v67 + v51 + (unsigned __int16)(v69 - v68)], v88 - (unsigned __int16)(v69 - v68));
              if ((unsigned __int16)(v69 - v68) > (unsigned __int16)v68)
              {
                do
                {
                  v75 = (unsigned __int16)v21 + (unsigned __int16)v68;
                  if (v75 >= *(unsigned __int16 *)(a1 + 208))
                    break;
                  v87 = (unsigned __int16)v68;
                  v76 = *(_QWORD *)(a1 + 200);
                  if (*(_BYTE *)(v76 + 6 * v75 + 2))
                  {
                    v77 = 0;
                    v78 = 0;
                    do
                    {
                      *(_BYTE *)(v84 + (v51 + v87) + (unint64_t)(unsigned __int16)v78) = *(_BYTE *)(v76 + 6 * v75 + v77 + 2);
                      v79 = v78 + 1;
                      v77 = (unsigned __int16)(v78 + 1);
                      v76 = *(_QWORD *)(a1 + 200);
                      v80 = strlen((const char *)(v76 + 6 * v75 + 2));
                      v78 = v79;
                    }
                    while (v80 > (unsigned __int16)v79);
                  }
                  LOWORD(v68) = v87 + 1;
                }
                while ((unsigned __int16)(v87 + 1) < v82);
              }
              v98 = v88 - v82;
              *(_BYTE *)(v84 + (unsigned __int16)(v88 - v82)) = 0;
            }
          }
          goto LABEL_85;
        }
        if ((unsigned __int16)v47 <= (unsigned __int16)v21)
          goto LABEL_84;
        v56 = (uint64_t)v100;
        v21 = (unsigned __int16)v21;
        a6 = v94;
        do
        {
          if (*(unsigned __int16 *)(a1 + 208) < (unsigned __int16)v47)
            break;
          v57 = *(_QWORD *)(a1 + 200);
          if (*(_BYTE *)(v57 + 6 * v21 + 2))
          {
            v58 = 0;
            v59 = 0;
            do
            {
              *(_BYTE *)(v56 + (unsigned __int16)v51++) = *(_BYTE *)(v57 + 6 * v21 + v58 + 2);
              v58 = (unsigned __int16)++v59;
              v57 = *(_QWORD *)(a1 + 200);
            }
            while (strlen((const char *)(v57 + 6 * v21 + 2)) > (unsigned __int16)v59);
          }
          ++v21;
          a6 = v94;
        }
        while (v21 < (unsigned __int16)v47);
        v21 = v47;
        goto LABEL_20;
      }
    }
    v21 = v29;
LABEL_21:
    if (++v22 < v23)
    {
      ++v20;
      v13 = v98;
      if (v98 > (unsigned __int16)v20)
        continue;
    }
    v19 = (uint64_t)v100;
    a7 = v93;
LABEL_131:
    if (!*a6)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v19);
      v19 = 0;
    }
    result = 0;
    *a7 = v19;
    return result;
  }
  result = posparser_GrowAndInsert((_QWORD *)a1, (uint64_t *)&v100, __s1a, v61, (unsigned __int16)v20, (unsigned __int16)v31, (unsigned __int16)v29, &v98, &v99);
  v23 = v95;
  if ((result & 0x80000000) == 0)
  {
    v20 = __s1a + v20 - v61;
    goto LABEL_35;
  }
  return result;
}

uint64_t posparser_PostProcess(uint64_t a1, const char **a2)
{
  _QWORD *v3;
  const char *v4;
  size_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t result;
  const char *v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  char *v33;
  unsigned int v34;
  unsigned __int8 *v35;
  const char *v36;
  int v37;
  int v38;
  BOOL v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v44;
  size_t v45;

  v3 = (_QWORD *)a1;
  if (!*(_WORD *)(a1 + 168))
  {
    if (LH_stricmp("arx", (char *)(a1 + 186)))
      return 0;
    v26 = *a2;
    v27 = strlen(*a2);
    if (!(_WORD)v27)
    {
LABEL_78:
      result = 0;
      *a2 = v26;
      return result;
    }
    v28 = (unsigned __int16)v27;
    v29 = -2;
    v30 = 1;
    v31 = v27;
    while (1)
    {
      v32 = v28;
      if (v30 < v28)
      {
        v33 = (char *)&v26[v30 - 1];
        v34 = *v33;
        if (v34 > 0x68)
        {
          if (v34 == 111)
          {
            if (v26[v30] == 111)
              goto LABEL_67;
          }
          else if (v34 == 105 && v26[v30] == 105)
          {
LABEL_67:
            v35 = (unsigned __int8 *)&v26[v30];
LABEL_68:
            memmove(v33, v35, v29 + v32 + 1);
            goto LABEL_69;
          }
        }
        else if (v34 == 94)
        {
          if (v26[v30] == 94)
            goto LABEL_67;
        }
        else if (v34 == 97 && v26[v30] == 97)
        {
          goto LABEL_67;
        }
      }
      if (v30 + 2 == v32)
      {
        v35 = (unsigned __int8 *)&v26[v30];
        v33 = (char *)&v26[v30 - 1];
        if (*v33 == 70 && *v35 == 65 && v26[v30 + 1] == 70)
          goto LABEL_68;
      }
      if (v30 < v32)
      {
        v36 = &v26[v30];
        if (v26[v30 - 1] == 73 && *v36 == 97)
        {
          if (v30 + 1 < v32 && v26[v30 + 1] == 112)
            goto LABEL_71;
          memmove((void *)&v26[v30 - 1], v36, v29 + v32 + 1);
          v26[v30 - 1] = 73;
LABEL_69:
          --v31;
LABEL_70:
          v26[(unsigned __int16)v31] = 0;
          goto LABEL_71;
        }
      }
      if (v30 + 1 < v32)
      {
        v33 = (char *)&v26[v30 - 1];
        v37 = *v33;
        if (v37 == 82)
        {
          if (v26[v30] != 82 || v26[v30 + 1] != 82)
            goto LABEL_71;
          memmove(v33, &v26[v30 + 1], v29 + v32);
          v31 -= 2;
          goto LABEL_70;
        }
        if (v37 == 97)
        {
          v35 = (unsigned __int8 *)&v26[v30];
          v38 = v26[v30];
          if (v38 == 65)
          {
            v40 = v35[1];
            if (v40 == 97)
            {
              *v35 = 66;
              goto LABEL_71;
            }
            if (v40 != 70)
              goto LABEL_71;
          }
          else if (v38 != 97 || v26[v30 + 1] != 73)
          {
            goto LABEL_71;
          }
          goto LABEL_68;
        }
      }
LABEL_71:
      v28 = (unsigned __int16)v31;
      v39 = v30++ >= (unsigned __int16)v31;
      --v29;
      if (v39)
        goto LABEL_78;
    }
  }
  v4 = *a2;
  v5 = strlen(*a2);
  if (!(_WORD)v5)
  {
LABEL_30:
    result = 0;
    *a2 = v4;
    return result;
  }
  v6 = 0;
  v42 = (unsigned __int16)v5 + 1;
  v44 = v3;
  while (!*((_WORD *)v3 + 84))
  {
LABEL_21:
    if ((unsigned __int16)++v6 >= (unsigned __int16)v5)
      goto LABEL_30;
  }
  v7 = 0;
  v8 = (unsigned __int16)v5;
  v45 = v5;
  v9 = (uint64_t)v4;
  v10 = &v4[(unsigned __int16)v6];
  v11 = v3[20];
  v12 = 56 * *((unsigned __int16 *)v3 + 84);
  while (1)
  {
    v13 = *(unsigned __int16 *)(v11 + v7 + 16);
    v14 = v13 + (unsigned __int16)v6;
    if (v14 > v8 || strncmp(v10, *(const char **)(v11 + v7 + 8), *(unsigned __int16 *)(v11 + v7 + 16)))
      goto LABEL_8;
    v15 = *(_DWORD *)(v11 + v7);
    if (v15 != 1)
      break;
    if (v14 == v8)
      goto LABEL_18;
LABEL_8:
    v7 += 56;
    if (v12 == v7)
    {
      v3 = v44;
      v4 = (const char *)v9;
      v5 = v45;
      goto LABEL_21;
    }
  }
  if (v15 != 2)
  {
    if (!v15)
      goto LABEL_18;
    goto LABEL_8;
  }
  v16 = *(unsigned __int16 *)(v11 + v7 + 48);
  if (v14 + v16 > v8 || !strncmp((const char *)(v9 + v14), *(const char **)(v11 + v7 + 40), v16))
    goto LABEL_8;
LABEL_18:
  v17 = *(unsigned __int16 *)(v11 + v7 + 32);
  if (v13 >= v17)
  {
    v3 = v44;
    v4 = (const char *)v9;
LABEL_24:
    v23 = v13 - v17;
    if (v13 >= v17)
    {
      if (v13 > v17)
      {
        memmove((void *)&v4[(unsigned __int16)v6], &v4[(unsigned __int16)v6 + (unsigned __int16)v23], (int)(v8 - ((unsigned __int16)v6 + (unsigned __int16)v23)));
        memcpy((void *)&v4[(unsigned __int16)v6], *(const void **)(v3[20] + v7 + 24), *(unsigned __int16 *)(v3[20] + v7 + 32));
        v5 = (v45 - v23);
      }
      else
      {
        memcpy((void *)&v4[(unsigned __int16)v6], *(const void **)(v11 + v7 + 24), v17);
        v5 = v45;
      }
    }
    else
    {
      v24 = v17 - v13;
      memmove((void *)&v4[(unsigned __int16)v6 + (unsigned __int16)(v17 - v13)], &v4[(unsigned __int16)v6], (int)(v8 - (unsigned __int16)v6));
      memcpy((void *)&v4[(unsigned __int16)v6], *(const void **)(v3[20] + v7 + 24), *(unsigned __int16 *)(v3[20] + v7 + 32));
      v5 = (v24 + v45);
      v6 += *(unsigned __int16 *)(v3[20] + v7 + 32);
    }
    v4[(unsigned __int16)v5] = 0;
    goto LABEL_21;
  }
  v3 = v44;
  v18 = heap_Realloc(*(uint64_t **)(*v44 + 8), v9, v42 - v13 + v17);
  if (v18)
  {
    v4 = (const char *)v18;
    v11 = v44[20];
    LODWORD(v13) = *(unsigned __int16 *)(v11 + v7 + 16);
    LODWORD(v17) = *(unsigned __int16 *)(v11 + v7 + 32);
    goto LABEL_24;
  }
  log_OutPublic(*(_QWORD *)(*v44 + 32), (uint64_t)"POSPARSER", 68000, 0, v19, v20, v21, v22, v41);
  return 2687508490;
}

uint64_t posparser_Open(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;

  v2 = 2687508487;
  if (a2)
  {
    v5 = (_QWORD *)heap_Calloc(*(_QWORD **)(a1 + 8), 264, 1);
    *a2 = (uint64_t)v5;
    if (v5)
    {
      v2 = 0;
      *v5 = a1;
      *(_QWORD *)(*a2 + 80) = 0;
      v10 = *a2;
      *(_BYTE *)(v10 + 97) = 1;
      *(_WORD *)(v10 + 98) = 1024;
      *(_QWORD *)(v10 + 88) = 0;
      v11 = *a2;
      *(_DWORD *)(v11 + 64) = 0;
      *(_BYTE *)(v11 + 68) = 1;
      *(_BYTE *)(v11 + 72) = 1;
      *(_QWORD *)(v11 + 112) = 0;
      *(_QWORD *)(*a2 + 104) = 0;
      *(_QWORD *)(*a2 + 120) = 0;
      *(_QWORD *)(*a2 + 128) = 0;
      *(_QWORD *)(*a2 + 136) = 0;
      *(_QWORD *)(*a2 + 144) = 0;
      v12 = *a2;
      *(_BYTE *)(v12 + 188) = 120;
      *(_WORD *)(v12 + 186) = 29281;
      *(_BYTE *)(*a2 + 189) = 0;
      v13 = *a2;
      *(_QWORD *)(v13 + 152) = 0x100000001;
      *(_QWORD *)(v13 + 160) = 0;
      v14 = *a2;
      *(_WORD *)(v14 + 168) = 0;
      *(_DWORD *)(v14 + 192) = 1;
      *(_QWORD *)(v14 + 200) = 0;
      v15 = *a2;
      *(_DWORD *)(v15 + 208) = 0;
      *(_QWORD *)(v15 + 176) = 0;
      v16 = *a2;
      *(_WORD *)(v16 + 184) = 0;
      *(_QWORD *)(v16 + 232) = 0;
    }
    else
    {
      log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v6, v7, v8, v9, v18);
      return 2687508490;
    }
  }
  return v2;
}

_QWORD *posparser_Close(_QWORD *result)
{
  if (result)
    return heap_Free(*(_QWORD **)(*result + 8), (uint64_t)result);
  return result;
}

uint64_t posparser_ExtractWords(_DWORD *a1, uint64_t a2, uint64_t a3, const char *a4, unsigned int a5, uint64_t *a6, unsigned __int16 *a7)
{
  unsigned __int16 *v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int v26;
  _BOOL4 v27;
  unsigned __int16 v28;
  unint64_t v29;
  char **v30;
  char *v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned __int16 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unsigned __int16 v48;
  unsigned __int16 v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  _DWORD *v53;
  unsigned __int16 v54;
  uint64_t v55;
  unsigned __int16 *v56;
  uint64_t v57;
  int v58;
  BOOL v59;
  int v60;
  uint64_t v61;
  int *v62;
  int v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  unsigned int v67;
  uint64_t v68;
  int *v69;
  _DWORD *v70;
  _DWORD *v71;
  int *v72;
  int v73;
  int v74;
  int *v75;
  uint64_t v76;
  _DWORD *v77;
  int v78;
  unsigned int v79;
  _DWORD *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int v84;
  int *v85;
  uint64_t v86;
  _DWORD *v87;
  int v88;
  unsigned int v89;
  _DWORD *v90;
  uint64_t v91;
  int v92;
  int *v93;
  uint64_t v94;
  _DWORD *v95;
  int v96;
  unsigned int v97;
  _DWORD *v98;
  uint64_t v99;
  unsigned int v101;
  uint64_t *v102;
  uint64_t v103;
  unint64_t v104;
  unsigned __int16 *v105;
  int v106;
  unsigned int v107;
  unsigned __int16 v108;
  unsigned int v109;
  unint64_t v110;
  unsigned int v111;
  int v112;
  unsigned int v113;
  _DWORD *v114;
  uint64_t v115;
  uint64_t v116;

  v7 = a7;
  *a7 = 0;
  v14 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 104 * a3 + 104);
  if (v14)
  {
    v19 = v14;
    v102 = a6;
    v20 = a3;
    v110 = a3;
    v21 = a3;
    v111 = a3;
    if (a5)
    {
      v22 = 0;
      if (v21 <= 2)
        v23 = 2;
      else
        v23 = v21;
      v104 = v20 - 1;
      v103 = v23 - 1;
      v105 = v7;
      v109 = a5;
      do
      {
        if (a4[(unsigned __int16)v22] == 32)
          ++v22;
        if ((unsigned __int16)v22 < a5)
        {
          v115 = v19;
          if (v21 < 2)
          {
            v112 = 0;
            v27 = 0;
            LOWORD(v25) = 9999;
            v28 = 9999;
          }
          else
          {
            v24 = (unsigned int *)(a2 + 44);
            v25 = 1;
            while (1)
            {
              if (*(v24 - 3) == 34)
              {
                v26 = *v24;
                if (*v24 - *(_DWORD *)(a2 + 12) == (unsigned __int16)v22)
                  break;
              }
              ++v25;
              v24 += 8;
              if (v20 == v25)
              {
                v112 = 0;
                LOWORD(v25) = 9999;
                v106 = 1;
LABEL_24:
                v28 = v25;
                goto LABEL_25;
              }
            }
            v28 = v25;
            while (*(v24 - 3) != 21 || v26 >= *v24)
            {
              ++v28;
              v24 += 8;
              if ((_DWORD)v21 == v28)
                goto LABEL_23;
            }
            if (v28 == 9999)
            {
LABEL_23:
              v106 = 0;
              v112 = 1;
              goto LABEL_24;
            }
            v106 = 0;
            v112 = 1;
LABEL_25:
            v27 = 0;
            v29 = v104;
            v30 = (char **)(a2 + 56);
            do
            {
              if (*((_DWORD *)v30 - 6) == 36
                && *((_DWORD *)v30 - 3) - *(_DWORD *)(a2 + 12) <= (unsigned __int16)v22)
              {
                v31 = *v30;
                v27 = !strstr(*v30, "arw")
                   && !strstr(v31, "arg")
                   && !strstr(v31, "fai")
                   && !strstr(v31, "hei")
                   && strcmp(v31, "normal") != 0;
              }
              v30 += 4;
              --v29;
            }
            while (v29);
            v32 = v103;
            v33 = (_DWORD *)(a2 + 44);
            v21 = v111;
            v7 = v105;
            do
            {
              if (*(v33 - 3) == 1 && *v33 - *(_DWORD *)(a2 + 12) == (unsigned __int16)v22)
              {
                v36 = *v105;
                v46 = *(v33 - 2);
                v35 = *(v33 - 1);
                v37 = v115;
                *(_DWORD *)(v115 + 104 * *v105) = v46;
                v20 = v110;
                goto LABEL_42;
              }
              v33 += 8;
              --v32;
            }
            while (v32);
            v20 = v110;
            if (!v106)
              goto LABEL_41;
          }
          v34 = v21;
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"Could not resolve references pos (previously logged as Public 68004), thispos=%d", v16, v17, v18, (unsigned __int16)v22);
          v21 = v34;
LABEL_41:
          v35 = 0;
          v36 = *v7;
          v37 = v115;
          *(_DWORD *)(v115 + 104 * *v7) = 0;
LABEL_42:
          v38 = v37 + 104 * v36;
          *(_DWORD *)(v38 + 4) = v35;
          *(_WORD *)(v38 + 8) = v22;
          *(_WORD *)(v37 + 104 * *v7 + 74) = 0;
          *(_WORD *)(v37 + 104 * *v7 + 76) = 0;
          *(_WORD *)(v37 + 104 * *v7 + 72) = 9999;
          v39 = *v7;
          *(_DWORD *)(v37 + 104 * *v7 + 88) = v27;
          a5 = v109;
          if (v112)
          {
            *(_WORD *)(v115 + 104 * v39 + 74) = v25;
            v19 = v115;
            *(_WORD *)(v115 + 104 * *v7 + 76) = v28;
            if (*(unsigned __int16 *)(v115 + 104 * *v7 + 74) == *(unsigned __int16 *)(v115 + 104 * *v7 + 76))
            {
              *(_WORD *)(v115 + 104 * *v7 + 10) = *(_DWORD *)(a2 + 16);
              v22 = v109;
            }
            else
            {
              *(_WORD *)(v115 + 104 * *v7 + 10) = *(_WORD *)(a2 + 32 * v28 + 12) - *(_DWORD *)(a2 + 12);
              v22 = *(unsigned __int16 *)(v115 + 104 * *v7 + 10);
            }
          }
          else
          {
            while (1)
            {
              v40 = a4[(unsigned __int16)v22];
              if ((v40 | 0x20) == 0x20)
                break;
              if (v109 < (unsigned __int16)++v22)
              {
                v40 = a4[(unsigned __int16)v22];
                break;
              }
            }
            v19 = v115;
            v41 = v40 ? v22 : v22 + 1;
            *(_WORD *)(v115 + 104 * v39 + 10) = v41;
            v22 = v41 + 1;
          }
          if (*(unsigned __int16 *)(v19 + 104 * *v7 + 8) != *(unsigned __int16 *)(v19 + 104 * *v7 + 10))
          {
            v42 = *v7 + 1;
            *v7 = v42;
            if (v21 < v42)
            {
              v43 = v21;
              v44 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), v19, 104 * v42 + 104);
              if (!v44)
              {
                heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v19);
                goto LABEL_148;
              }
              v45 = v44 + 104 * *v7;
              *(_QWORD *)(v45 + 96) = 0;
              *(_OWORD *)(v45 + 64) = 0u;
              *(_OWORD *)(v45 + 80) = 0u;
              *(_OWORD *)(v45 + 32) = 0u;
              *(_OWORD *)(v45 + 48) = 0u;
              *(_OWORD *)v45 = 0u;
              *(_OWORD *)(v45 + 16) = 0u;
              v19 = v44;
              v21 = v43;
            }
          }
        }
      }
      while (a5 > (unsigned __int16)v22);
    }
    v47 = v21;
    *v102 = v19;
    v48 = strlen(a4);
    v116 = *v7;
    if (*v7)
    {
      v49 = v48;
      v50 = 0;
      v107 = 0;
      v113 = v48;
      v51 = v47;
      v108 = v48;
      while (1)
      {
        v52 = v19 + 104 * v50;
        *(_DWORD *)(v52 + 80) = 1;
        v53 = (_DWORD *)(v52 + 80);
        if (v113 >= *((unsigned __int16 *)v53 - 35))
          v54 = *((_WORD *)v53 - 35);
        else
          v54 = v49;
        v56 = (unsigned __int16 *)(v53 - 18);
        v55 = *((unsigned __int16 *)v53 - 36);
        if (v55 >= v54)
        {
          *(_DWORD *)(v19 + 104 * v50 + 84) = 0;
        }
        else
        {
          v57 = 0;
          v58 = 1;
          do
          {
            if (v58 != 1)
              break;
            if ((a4[v55 + v57] - 48) >= 0xA
              && ((a4[v55 + v57] | 2) == 0x2E ? (v59 = v57 == 0) : (v59 = 1), v59))
            {
              v58 = 0;
              *v53 = 0;
            }
            else
            {
              v58 = 1;
            }
            ++v57;
          }
          while (v54 - v55 != v57);
          v60 = 0;
          v61 = v19 + 104 * v50;
          *(_DWORD *)(v61 + 84) = 0;
          v62 = (int *)(v61 + 84);
          do
          {
            if (v60)
              break;
            if (isPuncClass(a1, (unsigned __int8 *)&a4[v55]))
            {
              v63 = a1[39];
              if (v63 == 1 || !v63 && v55 == *v56)
                *v62 = 1;
            }
            ++v55;
            v60 = *v62;
          }
          while (v54 != v55);
          if (v60 != 1 || a1[62] != 1)
          {
            v20 = v110;
            v51 = v111;
LABEL_96:
            v49 = v108;
            goto LABEL_97;
          }
          if (v54 - *v56 < 2 || !isPuncClass(a1, (unsigned __int8 *)&a4[v54 - 1]))
          {
            v20 = v110;
            v51 = v111;
            goto LABEL_96;
          }
          *v62 = 0;
          v20 = v110;
          v51 = v111;
          v49 = v108;
          if (v54 - *v56 <= 127)
          {
            v64 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 128);
            v65 = v19 + 104 * v50;
            *(_QWORD *)(v65 + 96) = v64;
            v66 = (_QWORD *)(v65 + 96);
            if (!v64)
              goto LABEL_148;
            strncpy(v64, &a4[*v56], v54 - (unint64_t)*v56);
            *(_BYTE *)(*v66 + v54 - (unint64_t)*v56) = 0;
            v67 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, _QWORD, uint64_t))(*((_QWORD *)a1 + 3) + 144))(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2), "normal", *v66, 128);
            v51 = v111;
            v107 = v67;
            v49 = v108;
            if ((v67 & 0x80000000) != 0)
              return v107;
          }
        }
LABEL_97:
        if (++v50 == v116)
          goto LABEL_101;
      }
    }
    v107 = 0;
    v51 = v47;
LABEL_101:
    if (v51)
    {
      v68 = 0;
      v69 = (int *)(a2 + 32);
      v70 = (_DWORD *)(v19 + 12);
      v114 = (_DWORD *)(v19 + 88);
      v71 = (_DWORD *)(v19 + 92);
      do
      {
        v72 = (int *)(a2 + 32 * v68);
        v73 = *v72;
        if (*v72 == 21)
        {
          v82 = (char *)*((_QWORD *)v72 + 3);
          if (v82)
          {
            if (!LH_stricmp(v82, "spell"))
            {
              LOWORD(v92) = strlen(a4);
              v93 = v69;
              v94 = v68;
              while (++v94 < v20)
              {
                v95 = v93 + 8;
                v96 = *v93;
                v93 += 8;
                if (v96 == 21)
                {
                  v92 = *(v95 - 5) - *(_DWORD *)(a2 + 12);
                  break;
                }
              }
              if ((_DWORD)v116)
              {
                v97 = *(_DWORD *)(a2 + 32 * v68 + 12) - *(_DWORD *)(a2 + 12);
                v98 = v71;
                v99 = v116;
                do
                {
                  if (v97 <= *((unsigned __int16 *)v98 - 42)
                    && *((unsigned __int16 *)v98 - 41) <= (unsigned __int16)v92)
                  {
                    *v98 = 1;
                  }
                  v98 += 26;
                  --v99;
                }
                while (v99);
              }
              goto LABEL_145;
            }
            v73 = *v72;
LABEL_121:
            if (v73 == 36)
            {
              v83 = *(char **)(a2 + 32 * v68 + 24);
              if (v83)
              {
                if (!LH_stricmp(v83, "latin"))
                {
                  LOWORD(v84) = strlen(a4);
                  v85 = v69;
                  v86 = v68;
                  while (++v86 < v20)
                  {
                    v87 = v85 + 8;
                    v88 = *v85;
                    v85 += 8;
                    if (v88 == 36)
                    {
                      v84 = *(v87 - 5) - *(_DWORD *)(a2 + 12);
                      break;
                    }
                  }
                  if ((_DWORD)v116)
                  {
                    v89 = *(_DWORD *)(a2 + 32 * v68 + 12) - *(_DWORD *)(a2 + 12);
                    v90 = v114;
                    v91 = v116;
                    do
                    {
                      if (v89 <= *((unsigned __int16 *)v90 - 40)
                        && *((unsigned __int16 *)v90 - 39) <= (unsigned __int16)v84)
                      {
                        *v90 = 1;
                      }
                      v90 += 26;
                      --v91;
                    }
                    while (v91);
                  }
                }
              }
            }
          }
        }
        else
        {
          if (v73 != 7)
            goto LABEL_121;
          if (*(_QWORD *)(a2 + 32 * v68 + 24) && *(_QWORD *)(a2 + 32 * v68 + 24) == 60)
          {
            LOWORD(v74) = strlen(a4);
            v75 = v69;
            v76 = v68;
            while (++v76 < v20)
            {
              v77 = v75 + 8;
              v78 = *v75;
              v75 += 8;
              if (v78 == 7)
              {
                v74 = *(v77 - 5) - *(_DWORD *)(a2 + 12);
                break;
              }
            }
            if ((_DWORD)v116)
            {
              v79 = *(_DWORD *)(a2 + 32 * v68 + 12) - *(_DWORD *)(a2 + 12);
              v80 = v70;
              v81 = v116;
              do
              {
                if (v79 <= *((unsigned __int16 *)v80 - 2)
                  && *((unsigned __int16 *)v80 - 1) <= (unsigned __int16)v74)
                {
                  *v80 = 1;
                }
                v80 += 26;
                --v81;
              }
              while (v81);
            }
          }
        }
LABEL_145:
        ++v68;
        v69 += 8;
      }
      while (v68 != v20);
    }
  }
  else
  {
LABEL_148:
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v15, v16, v17, v18, v101);
    return -1607458806;
  }
  return v107;
}

_QWORD *posparser_FreeWords(_QWORD *result, uint64_t a2, unsigned int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  unsigned __int16 *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  v4 = result;
  if (a3)
  {
    v5 = 0;
    v6 = a3;
    do
    {
      v7 = a2 + 104 * v5;
      v10 = *(unsigned __int16 *)(v7 + 32);
      v9 = (unsigned __int16 *)(v7 + 32);
      v8 = v10;
      if (v10)
      {
        v11 = 0;
        v12 = 0;
        v13 = a2 + 104 * v5;
        v16 = *(_QWORD *)(v13 + 24);
        v15 = (uint64_t *)(v13 + 24);
        v14 = v16;
        do
        {
          if (v14)
          {
            heap_Free(*(_QWORD **)(*v4 + 8), *(_QWORD *)(v14 + v11));
            v17 = (_QWORD *)(*v15 + v11);
            *v17 = 0;
            heap_Free(*(_QWORD **)(*v4 + 8), v17[1]);
            v14 = *v15;
            *(_QWORD *)(*v15 + v11 + 8) = 0;
            v8 = *v9;
          }
          ++v12;
          v11 += 16;
        }
        while (v12 < v8);
        *v9 = 0;
      }
      v18 = a2 + 104 * v5;
      v21 = *(_QWORD *)(v18 + 24);
      v20 = (_QWORD *)(v18 + 24);
      v19 = v21;
      if (v21)
      {
        heap_Free(*(_QWORD **)(*v4 + 8), v19);
        *v20 = 0;
      }
      v24 = *((_QWORD *)v9 - 2);
      v23 = v9 - 8;
      v22 = v24;
      if (v24)
      {
        heap_Free(*(_QWORD **)(*v4 + 8), v22);
        *(_QWORD *)v23 = 0;
      }
      v25 = a2 + 104 * v5;
      v28 = *(_QWORD *)(v25 + 64);
      v27 = (_QWORD *)(v25 + 64);
      v26 = v28;
      if (v28)
      {
        heap_Free(*(_QWORD **)(*v4 + 8), v26);
        *v27 = 0;
      }
      v29 = a2 + 104 * v5;
      v32 = *(_QWORD *)(v29 + 96);
      v31 = (_QWORD *)(v29 + 96);
      v30 = v32;
      if (v32)
      {
        heap_Free(*(_QWORD **)(*v4 + 8), v30);
        *v31 = 0;
      }
      ++v5;
    }
    while (v5 != v6);
  }
  else if (!a2)
  {
    return result;
  }
  return heap_Free(*(_QWORD **)(*v4 + 8), a2);
}

uint64_t posparser_ProcessStart(char *a1)
{
  uint64_t DictCharString;
  const char *v3;
  char *v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 v31;
  char *v32;
  char *v33;
  int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  unsigned __int16 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  int Str;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t EmbeddedCharRule;
  const char *v55;
  char *v56;
  int v57;
  const char *v58;
  char *v59;
  const char *v60;
  char *v61;
  const char *v62;
  char *v63;
  const char *v64;
  char *v65;
  const char *v66;
  char *v67;
  unsigned __int16 v68;
  unsigned int v69;
  const char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const char *v75;
  char *v76;
  unsigned __int16 v77;
  unsigned int v78;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char v84[3];
  char *__src;
  _BYTE __c[11];
  _BYTE v87[32];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  __src = 0;
  DictCharString = paramc_ParamGet(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"langcode", &__src, 0);
  if ((DictCharString & 0x80000000) != 0)
    return DictCharString;
  strncpy(a1 + 186, __src, 3uLL);
  a1[186] = ssft_tolower(a1[186]);
  a1[187] = ssft_tolower(a1[187]);
  *((_WORD *)a1 + 94) = 120;
  a1[97] = 1;
  *(_WORD *)&__c[1] = -1;
  DictCharString = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*((_QWORD *)a1 + 3) + 96))(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2), "fecfg", "araparsermwspan", &__c[3], &__c[1], __c);
  if ((DictCharString & 0x80000000) != 0)
    return DictCharString;
  if (*(unsigned __int16 *)&__c[1] == 1 && *(_QWORD *)&__c[3])
  {
    v3 = **(const char ***)&__c[3];
    v4 = strchr(**(char ***)&__c[3], __c[0]);
    if (v4)
    {
      *v4 = 0;
      v3 = **(const char ***)&__c[3];
    }
    v5 = atoi(v3);
    v6 = (_BYTE)v5 ? v5 : 1;
    a1[97] = v6;
  }
  else
  {
    v6 = a1[97];
  }
  *((_WORD *)a1 + 49) = v6 << 10;
  a1[96] = 0;
  *(_WORD *)&__c[1] = -1;
  DictCharString = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*((_QWORD *)a1 + 3) + 96))(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2), "fecfg", "araparsernumdicts", &__c[3], &__c[1], __c);
  if ((DictCharString & 0x80000000) != 0)
    return DictCharString;
  if (*(_WORD *)&__c[1] && *(_QWORD *)&__c[3])
  {
    v10 = **(const char ***)&__c[3];
    v11 = strchr(**(char ***)&__c[3], __c[0]);
    if (v11)
    {
      *v11 = 0;
      v10 = **(const char ***)&__c[3];
    }
    v12 = atoi(v10);
    a1[96] = v12;
    v13 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, (8 * v12) | 1u);
    *((_QWORD *)a1 + 11) = v13;
    v18 = *(_QWORD *)a1;
    if (!v13)
    {
      EmbeddedCharRule = 2687508490;
LABEL_129:
      log_OutPublic(*(_QWORD *)(v18 + 32), (uint64_t)"POSPARSER", 68000, 0, v14, v15, v16, v17, v83);
      return EmbeddedCharRule;
    }
    v19 = heap_Calloc(*(_QWORD **)(v18 + 8), 1, a1[96] + 1);
    *((_QWORD *)a1 + 10) = v19;
    if (!v19)
      goto LABEL_128;
    if (a1[96])
    {
      v20 = 0;
      do
      {
        *(_BYTE *)(*((_QWORD *)a1 + 10) + v20) = 0;
        *(_QWORD *)(*((_QWORD *)a1 + 11) + 8 * v20++) = 0;
      }
      while (v20 < a1[96]);
    }
    *(_WORD *)&__c[1] = -1;
    if (((*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*((_QWORD *)a1 + 3) + 96))(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2), "fecfg", "araparserdicname", &__c[3], &__c[1], __c) & 0x80000000) != 0|| !*(_WORD *)&__c[1])
    {
      goto LABEL_54;
    }
    if (*(unsigned __int16 *)&__c[1] == 1 && *(_QWORD *)&__c[3])
    {
      v25 = **(char ***)&__c[3];
      v26 = strchr(**(char ***)&__c[3], __c[0]);
      if (v26)
        *v26 = 0;
      v31 = 0;
      if (v25)
      {
        do
        {
          v32 = strchr(v25, 43);
          v33 = v32;
          if (v32)
            *v32 = 0;
          v34 = strlen(v25);
          *(_QWORD *)(*((_QWORD *)a1 + 11) + 8 * v31) = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, (v34 + 1));
          v35 = *(char **)(*((_QWORD *)a1 + 11) + 8 * v31);
          if (!v35)
            goto LABEL_128;
          strcpy(v35, v25);
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"using dict[%d] %s", v36, v37, v38, v31++);
          v25 = v33 + 1;
        }
        while (v33);
      }
      if (v31 != a1[96])
      {
        v47 = *(_QWORD *)(*(_QWORD *)a1 + 32);
        v48 = "numDicts read in=";
        goto LABEL_97;
      }
    }
    *(_WORD *)&__c[1] = -1;
    if (((*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*((_QWORD *)a1 + 3) + 96))(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2), "fecfg", "araparserngramlevel", &__c[3], &__c[1], __c) & 0x80000000) != 0|| !*(_WORD *)&__c[1])
    {
LABEL_54:
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"POSPARSER", 68002, "%s%s", v21, v22, v23, v24, "missing keyword:");
      return 2687508480;
    }
    if (*(unsigned __int16 *)&__c[1] == 1 && *(_QWORD *)&__c[3])
    {
      v39 = **(char ***)&__c[3];
      v40 = strchr(**(char ***)&__c[3], __c[0]);
      if (v40)
        *v40 = 0;
      v41 = 0;
      if (v39)
      {
        do
        {
          v42 = strchr(v39, 43);
          v43 = v42;
          if (v42)
            *v42 = 0;
          *(_BYTE *)(*((_QWORD *)a1 + 10) + v41) = atoi(v39);
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"using ngram levels[%d] %d", v44, v45, v46, v41++);
          v39 = v43 + 1;
        }
        while (v43);
      }
      if (v41 != a1[96])
      {
        v47 = *(_QWORD *)(*(_QWORD *)a1 + 32);
        v48 = "ngramLevels read=";
LABEL_97:
        log_OutPublic(v47, (uint64_t)"POSPARSER", 68003, "%s%d%s%d", v27, v28, v29, v30, v48);
        return 2687508480;
      }
    }
  }
  else
  {
    *((_QWORD *)a1 + 10) = 0;
    *((_QWORD *)a1 + 11) = 0;
    a1[96] = 0;
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"WARNING - No ngram dicts, continuing anyway", v7, v8, v9, v83);
  }
  Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"araparsermode", &__src);
  if ((Str & 0x80000000) == 0 && (Str & 0x1FFF) != 0x14)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"Araparser mode : \"%s\"", v50, v51, v52, (uint64_t)__src);
    *((_DWORD *)a1 + 16) = 0;
    if (!LH_stricmp("dict_plus_ngrams", __src))
    {
      v53 = 0;
      goto LABEL_58;
    }
    if (!LH_stricmp("dict_only", __src))
    {
      v53 = 1;
      goto LABEL_58;
    }
    if (!LH_stricmp("ngrams_only", __src))
    {
      v53 = 2;
LABEL_58:
      *((_DWORD *)a1 + 16) = v53;
    }
  }
  paramc_ParamRelease(*(_QWORD *)(*(_QWORD *)a1 + 40));
  __src = 0;
  DictCharString = posparser_loc_getDictCharString(a1, (uint64_t)"araparserspacedout", (char **)a1 + 14);
  if ((DictCharString & 0x80000000) != 0)
    return DictCharString;
  DictCharString = posparser_loc_getDictCharString(a1, (uint64_t)"araparsersmspunc", (char **)a1 + 13);
  if ((DictCharString & 0x80000000) != 0)
    return DictCharString;
  DictCharString = posparser_loc_getDictCharString(a1, (uint64_t)"araparserpuncclass1", (char **)a1 + 16);
  if ((DictCharString & 0x80000000) != 0)
    return DictCharString;
  DictCharString = posparser_loc_getDictCharString(a1, (uint64_t)"araparserpuncclass2", (char **)a1 + 17);
  if ((DictCharString & 0x80000000) != 0)
    return DictCharString;
  DictCharString = posparser_loc_getDictCharString(a1, (uint64_t)"araparserpuncclass3", (char **)a1 + 18);
  if ((DictCharString & 0x80000000) != 0)
    return DictCharString;
  *((_DWORD *)a1 + 62) = 0;
  *(_WORD *)&__c[1] = -1;
  DictCharString = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*((_QWORD *)a1 + 3) + 96))(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2), "fecfg", "arwpospredictiononly", &__c[3], &__c[1], __c);
  if ((DictCharString & 0x80000000) != 0)
    return DictCharString;
  if (*(_WORD *)&__c[1])
  {
    v55 = **(const char ***)&__c[3];
    v56 = strchr(**(char ***)&__c[3], __c[0]);
    if (v56)
    {
      *v56 = 0;
      v55 = **(const char ***)&__c[3];
    }
    if (!strcmp(v55, "1"))
    {
      *((_DWORD *)a1 + 62) = 1;
      *((_WORD *)a1 + 35) = 1;
      goto LABEL_99;
    }
  }
  v57 = *((_DWORD *)a1 + 62);
  *((_WORD *)a1 + 35) = 1;
  if (v57 == 1)
  {
LABEL_99:
    *(_WORD *)&__c[1] = -1;
    EmbeddedCharRule = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*((_QWORD *)a1 + 3) + 96))(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2), "fecfg", "araparsernumposdicparts", &__c[3], &__c[1], __c);
    if ((EmbeddedCharRule & 0x80000000) == 0 && *(_WORD *)&__c[1])
    {
      v70 = **(const char ***)&__c[3];
      v71 = strchr(**(char ***)&__c[3], __c[0]);
      if (v71)
      {
        *v71 = 0;
        v70 = **(const char ***)&__c[3];
      }
      *((_WORD *)a1 + 35) = atoi(v70);
      if (a1[97])
        a1[97] = 0;
      *((_WORD *)a1 + 49) = 2048;
    }
    return EmbeddedCharRule;
  }
  *(_WORD *)&__c[1] = -1;
  EmbeddedCharRule = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*((_QWORD *)a1 + 3) + 96))(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2), "fecfg", "araparsernumparts", &__c[3], &__c[1], __c);
  if ((EmbeddedCharRule & 0x80000000) != 0 || !*(_WORD *)&__c[1])
    return EmbeddedCharRule;
  v58 = **(const char ***)&__c[3];
  v59 = strchr(**(char ***)&__c[3], __c[0]);
  if (v59)
  {
    *v59 = 0;
    v58 = **(const char ***)&__c[3];
  }
  a1[68] = atoi(v58);
  *(_WORD *)&__c[1] = -1;
  EmbeddedCharRule = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*((_QWORD *)a1 + 3) + 96))(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2), "fecfg", "nrpart_tn", &__c[3], &__c[1], __c);
  if ((EmbeddedCharRule & 0x80000000) != 0 || !*(_WORD *)&__c[1])
    return EmbeddedCharRule;
  v60 = **(const char ***)&__c[3];
  v61 = strchr(**(char ***)&__c[3], __c[0]);
  if (v61)
  {
    *v61 = 0;
    v60 = **(const char ***)&__c[3];
  }
  a1[72] = atoi(v60);
  DictCharString = posparser_loc_getDictCharString(a1, (uint64_t)"araparserdiacriticlist", (char **)a1 + 15);
  if ((DictCharString & 0x80000000) != 0)
    return DictCharString;
  *(_WORD *)&__c[1] = -1;
  DictCharString = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*((_QWORD *)a1 + 3) + 96))(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2), "fecfg", "araparsermapXBI2A", &__c[3], &__c[1], __c);
  if ((DictCharString & 0x80000000) != 0)
    return DictCharString;
  if (*(_WORD *)&__c[1])
  {
    v62 = **(const char ***)&__c[3];
    v63 = strchr(**(char ***)&__c[3], __c[0]);
    if (v63)
    {
      *v63 = 0;
      v62 = **(const char ***)&__c[3];
    }
    if (!atoi(v62))
      *((_DWORD *)a1 + 38) = 0;
  }
  *(_WORD *)&__c[1] = -1;
  DictCharString = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*((_QWORD *)a1 + 3) + 96))(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2), "fecfg", "araparseroldPuncClass", &__c[3], &__c[1], __c);
  if ((DictCharString & 0x80000000) != 0)
    return DictCharString;
  if (*(_WORD *)&__c[1])
  {
    v64 = **(const char ***)&__c[3];
    v65 = strchr(**(char ***)&__c[3], __c[0]);
    if (v65)
    {
      *v65 = 0;
      v64 = **(const char ***)&__c[3];
    }
    if (!atoi(v64))
      *((_DWORD *)a1 + 39) = 0;
  }
  *(_WORD *)&__c[1] = -1;
  DictCharString = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*((_QWORD *)a1 + 3) + 96))(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2), "fecfg", "araparsernumpostcorrrules", &__c[3], &__c[1], __c);
  if ((DictCharString & 0x80000000) != 0)
    return DictCharString;
  if (*(_WORD *)&__c[1])
  {
    v66 = **(const char ***)&__c[3];
    v67 = strchr(**(char ***)&__c[3], __c[0]);
    if (v67)
    {
      *v67 = 0;
      v66 = **(const char ***)&__c[3];
    }
    v68 = atoi(v66);
    v69 = v68;
    *((_WORD *)a1 + 84) = v68;
  }
  else
  {
    v69 = *((unsigned __int16 *)a1 + 84);
  }
  if (v69)
  {
    v72 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, (56 * v69) | 1);
    *((_QWORD *)a1 + 20) = v72;
    if (!v72)
      goto LABEL_128;
    if (*((_WORD *)a1 + 84))
    {
      v73 = 0;
      v74 = 0;
      do
      {
        *(_QWORD *)&v87[24] = 0;
        *(_QWORD *)&v87[18] = 0;
        strcpy(v87, "araparserpostcorr");
        LH_itoa(v74, v84, 0xAu);
        __strcat_chk();
        DictCharString = posparser_loc_getPostCorrRule(a1, (uint64_t)v87, *((_QWORD *)a1 + 20) + v73);
        if ((DictCharString & 0x80000000) != 0)
          return DictCharString;
        ++v74;
        v73 += 56;
      }
      while (v74 < *((unsigned __int16 *)a1 + 84));
    }
  }
  *(_WORD *)&__c[1] = -1;
  EmbeddedCharRule = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*((_QWORD *)a1 + 3) + 96))(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2), "fecfg", "araparsernumecharrewrite", &__c[3], &__c[1], __c);
  if ((EmbeddedCharRule & 0x80000000) == 0)
  {
    if (*(_WORD *)&__c[1])
    {
      v75 = **(const char ***)&__c[3];
      v76 = strchr(**(char ***)&__c[3], __c[0]);
      if (v76)
      {
        *v76 = 0;
        v75 = **(const char ***)&__c[3];
      }
      v77 = atoi(v75);
      v78 = v77;
      *((_WORD *)a1 + 92) = v77;
    }
    else
    {
      v78 = *((unsigned __int16 *)a1 + 92);
    }
    if (v78)
    {
      v80 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, (2 * v78) | 1);
      *((_QWORD *)a1 + 22) = v80;
      if (v80)
      {
        if (*((_WORD *)a1 + 92))
        {
          v81 = 0;
          v82 = 0;
          do
          {
            *(_WORD *)&v87[30] = 0;
            *(_QWORD *)&v87[22] = 0;
            strcpy(v87, "araparserecharrewrite");
            LH_itoa(v82, v84, 0xAu);
            __strcat_chk();
            EmbeddedCharRule = posparser_loc_getEmbeddedCharRule(a1, (uint64_t)v87, (char *)(*((_QWORD *)a1 + 22) + v81));
            if ((EmbeddedCharRule & 0x80000000) != 0)
              break;
            ++v82;
            v81 += 2;
          }
          while (v82 < *((unsigned __int16 *)a1 + 92));
        }
        return EmbeddedCharRule;
      }
LABEL_128:
      EmbeddedCharRule = 2687508490;
      v18 = *(_QWORD *)a1;
      goto LABEL_129;
    }
  }
  return EmbeddedCharRule;
}

uint64_t posparser_Process(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, unsigned int a7, char **a8, uint64_t *a9, _WORD *a10)
{
  _QWORD **v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t POSAndDiacritics;
  int v25;
  uint64_t v26;
  _BOOL4 v27;
  int v28;
  int32x4_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  unsigned __int16 *v33;
  unsigned int v34;
  int v35;
  int32x4_t v36;
  int v37;
  __int16 v38;
  __int16 v39;
  BOOL v40;
  unsigned __int16 v41;
  int32x4_t *v42;
  int32x4_t v43;
  int16x4_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  unsigned int v47;
  uint64_t v48;
  size_t v49;
  unsigned __int16 v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t isReconcilable;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  int v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  int v76;
  char *v77;
  int v78;
  int v79;
  char *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int16 v90;
  unsigned int v91;
  uint64_t v92;
  const char **v93;
  const char *v94;
  unsigned int v95;
  unsigned __int16 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  char *v104;
  unsigned __int16 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int16 *v109;
  unsigned __int16 *v110;
  char *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  _WORD *v116;
  unsigned int v117;
  int v118;
  uint64_t v119;
  const char **v120;
  _QWORD *v121;
  const char **v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  char **v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  unint64_t v132;
  const char *v133;
  unint64_t v134;
  int v135;
  unsigned __int16 v136;
  unsigned int inited;
  _BYTE *v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  unsigned __int16 *v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  _WORD *v152;
  int v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  const char *v162;
  _QWORD *v163;
  const char *v164;
  uint64_t v165;
  int v166;
  unsigned int v167;
  unsigned __int16 *v168;
  int v169;
  BOOL v170;
  int v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  _WORD *v179;
  int v180;
  unsigned __int16 v181;
  unsigned int v182;
  int v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  const char *v187;
  const char **v188;
  const char *v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  int v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  char *v200;
  int v201;
  char *v202;
  char **v203;
  uint64_t *v204;
  _WORD *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unsigned __int16 v216;
  _BYTE *v217;
  unsigned __int16 v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  int v225;
  char *v226;
  uint64_t v227;
  unsigned int v228;
  unsigned __int16 *v229;
  unsigned int v230;
  int v231;
  int v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  int v238;
  uint64_t v239;
  char v240;
  unsigned int v241;
  unint64_t v242;
  int v243;
  int v244;
  unint64_t v245;
  unint64_t v246;
  unsigned __int8 *v247;
  const char *v248;
  uint64_t v249;
  const char *v250;
  unsigned __int8 *v251;
  const char *v252;
  char v253;
  uint64_t v254;
  unsigned int v255;
  int v256;
  unint64_t v257;
  int v258;
  unsigned __int8 *v259;
  unsigned int v260;
  const char *v261;
  unsigned __int8 *v262;
  const char *v263;
  uint64_t v264;
  unint64_t v265;
  const char *v266;
  const char *v267;
  int v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  int v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  char *v279;
  uint64_t v280;
  char v281;
  unsigned __int16 v282;
  unsigned __int16 v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  char *v291;
  char v292;
  uint64_t v293;
  uint64_t v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unsigned __int16 v299;
  char v300;
  unint64_t v301;
  unsigned __int16 v302;
  unsigned __int16 v303;
  unsigned int v304;
  unsigned __int16 v305;
  unsigned __int16 v306;
  BOOL v307;
  unsigned __int16 v308;
  unsigned int v309;
  int v310;
  unint64_t v311;
  unint64_t v312;
  unsigned __int16 v313;
  uint64_t v314;
  char v315;
  unsigned __int16 v316;
  char *v317;
  unsigned int v318;
  uint64_t v319;
  char *v320;
  unsigned __int16 v321;
  uint64_t v322;
  int v323;
  size_t v324;
  unsigned int v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  unsigned __int16 v334;
  int v335;
  unsigned __int16 v336;
  unsigned __int16 v337;
  int v338;
  uint64_t v339;
  uint64_t v340;
  unsigned __int16 *v341;
  __int16 CurrentUtf8Offset;
  unint64_t v343;
  __int16 v344;
  unsigned __int8 *v345;
  int v346;
  int v347;
  const char *PunctClassChar;
  uint64_t v349;
  int v350;
  unsigned int v351;
  unsigned int v352;
  int v355;
  int v356;
  unsigned __int16 v357;
  BOOL v358;
  char *v359;
  signed int v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  __int16 v364;
  int v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  char *v373;
  int v374;
  int v375;
  uint64_t v376;
  int v377;
  int v378;
  __int16 v379;
  uint64_t v380;
  int v381;
  const char *v382;
  unsigned __int8 *v383;
  int v384;
  int v385;
  const char *v386;
  const char **v387;
  const char *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  size_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  char *v398;
  const char *v399;
  int v400;
  int v401;
  uint64_t v402;
  unsigned int v403;
  int v404;
  char *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  char *v410;
  char *v411;
  __int16 v412;
  uint64_t v413;
  char *v414;
  char *v415;
  unsigned __int16 v416;
  unsigned __int16 v417;
  unsigned __int8 *v418;
  unint64_t v419;
  int v420;
  __int16 v421;
  BOOL v422;
  char *v423;
  char *v424;
  __int16 v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  unsigned int v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  __int16 v433;
  int *v434;
  unint64_t v435;
  char v436;
  unsigned __int16 v437;
  const char *v438;
  const char *v439;
  unsigned __int16 v440;
  unsigned __int16 v441;
  unsigned __int16 v442;
  unsigned __int16 v443;
  unsigned __int16 v444;
  unsigned __int16 v445;
  unsigned int v446;
  int v447;
  const char *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  const char *v452;
  __int16 v453;
  __int16 v454;
  int v455;
  const char *v456;
  int v457;
  int v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  char **v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  unsigned __int16 v474;
  uint64_t v475;
  uint64_t i;
  char *v477;
  uint64_t j;
  uint64_t v479;
  _WORD *v480;
  uint64_t v481;
  unsigned int v482;
  __int16 v483;
  int *v484;
  uint64_t v485;
  int v486;
  uint64_t v487;
  _WORD *v488;
  uint64_t v489;
  unsigned int v490;
  __int16 v491;
  int *v492;
  uint64_t v493;
  int v494;
  int v495;
  unsigned __int16 v496;
  _DWORD *v497;
  uint64_t v498;
  uint64_t v499;
  unsigned int v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  __int128 v506;
  uint64_t v507;
  int v508;
  char *v509;
  uint64_t v510;
  int v511;
  int v512;
  __int16 v513;
  unsigned __int16 *v514;
  int v515;
  uint64_t v516;
  unsigned __int16 *v517;
  __int16 v518;
  uint64_t v519;
  char *v520;
  const char *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  int v525;
  int v526;
  uint64_t v527;
  unsigned __int16 *v528;
  int v529;
  uint64_t v530;
  const char *v531;
  const char **v532;
  const char *v533;
  unsigned __int16 v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  const char **v539;
  const char *v540;
  unsigned __int16 v541;
  const char *v542;
  size_t v543;
  size_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  int v548;
  unsigned __int16 v549;
  uint64_t v550;
  _WORD *v551;
  uint64_t v552;
  unsigned int v553;
  char *v554;
  unsigned __int16 v555;
  uint64_t v556;
  unsigned __int16 *v557;
  int v558;
  size_t v559;
  unsigned int v560;
  uint64_t v561;
  _WORD *v562;
  char *v563;
  int v564;
  unsigned int v565;
  uint64_t v566;
  int *v567;
  unsigned int v568;
  int v569;
  size_t v570;
  unsigned int v571;
  uint64_t v572;
  uint64_t v573;
  char *v574;
  char *v575;
  unsigned int *v576;
  uint64_t v577;
  unsigned int v578;
  __int128 v579;
  _WORD *v580;
  uint64_t v581;
  unsigned int v582;
  unsigned int v583;
  char *v584;
  uint64_t v585;
  const char *v586;
  const char **v587;
  const char *v588;
  uint64_t v589;
  int v590;
  int v591;
  int v592;
  char *v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  unsigned int v598;
  unsigned int *v599;
  uint64_t v600;
  char *v601;
  unsigned int v602;
  char *v603;
  _WORD *v604;
  uint64_t v605;
  unsigned int v606;
  unsigned int v607;
  uint64_t v608;
  unsigned __int16 *v609;
  __int16 v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  char *v614;
  const char *v615;
  int v616;
  int v617;
  char *v618;
  __int16 v619;
  uint64_t v620;
  char *v621;
  unsigned __int16 v622;
  char *v623;
  char *v624;
  _DWORD *v625;
  int v626;
  int v627;
  unsigned int v628;
  _DWORD *v629;
  uint64_t v630;
  uint64_t v631;
  unsigned __int16 v632;
  uint64_t v633;
  uint64_t v634;
  char *v635;
  uint64_t v636;
  uint64_t v637;
  int v638;
  int v639;
  char *v640;
  int v641;
  char *v642;
  __int16 v643;
  int *v644;
  int v645;
  int v646;
  uint64_t v647;
  int v648;
  unsigned __int16 v649;
  char *v650;
  uint64_t v651;
  unsigned int v653;
  uint64_t v654;
  unsigned int v655;
  uint64_t v656;
  unsigned int v657;
  unsigned int v658;
  unsigned int v659;
  unsigned __int16 v660;
  uint64_t v661;
  int v662;
  char v663;
  int v664;
  char *v665;
  char v666;
  unsigned __int16 v667;
  int v668;
  unsigned __int16 v669;
  unsigned __int8 *v670;
  unsigned __int16 v671;
  unint64_t v672;
  int v676;
  unsigned int v677;
  uint64_t v678;
  char **v679;
  _WORD *v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  const char *v684;
  char *v685;
  char **v686;
  char *v687;
  char *v688;
  char *v689;
  unsigned __int16 v690;
  uint64_t v691;
  uint64_t v692;
  int v693;
  uint64_t v694;
  int v695;
  _QWORD **v696;
  unsigned __int16 v697;
  __int16 v698;
  int v699;
  unsigned __int16 v700;
  signed int v701;
  int v702;
  unsigned int v703;
  uint64_t *v704;
  int v705;
  int v706;
  unsigned int v707;
  unsigned int v708;
  unsigned int v709;
  char *v710;
  char *v711;
  char *v712;
  unsigned int v713;
  char *v714;
  char *v715;
  unsigned int v716;
  unsigned __int16 v717;
  const char *v718;
  uint64_t v719;
  __int128 v720;
  __int128 v721;
  int __dst;
  char *__dsta;
  char *__dstb;
  unint64_t __dstc;
  char *__dstd;
  uint64_t v727;
  char *v729;
  char *v730;
  char *__s;
  int v732;
  __int16 v733;
  int __c[2];
  unsigned __int8 v735;
  char **v736;
  int v737;
  char v738[8];
  __int16 v739;
  uint64_t v740;
  __int16 v741;
  char *__s1[8];
  uint64_t v743;
  char __src[64];
  char __s2[16];
  __int128 v746;
  _BYTE v747[25];
  uint64_t v748;

  v13 = (_QWORD **)a1;
  v748 = *MEMORY[0x1E0C80C00];
  v14 = *a9;
  v732 = (unsigned __int16)*a10;
  v15 = *a8;
  v16 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, a1[49] + 1);
  if (!v16)
  {
    POSAndDiacritics = 2687508490;
    log_OutPublic((*v13)[4], (uint64_t)"POSPARSER", 68000, 0, v17, v18, v19, v20, v653);
    *a10 = v732;
    *a8 = v15;
    *a9 = v14;
    return POSAndDiacritics;
  }
  v21 = (char *)v16;
  v694 = v14;
  __s = v15;
  v679 = a8;
  v733 = *((_WORD *)v13 + 49);
  v727 = (uint64_t)v13;
  if (a6 == 1)
  {
    *(_QWORD *)__s2 = 0;
    LOWORD(v736) = -1;
    LOBYTE(__c[0]) = 0;
    *(_DWORD *)v738 = 0;
    *(_QWORD *)__src = 0;
    v22 = a5;
    v23 = v14;
  }
  else
  {
    v22 = a5;
    v23 = v14;
    if (*((_DWORD *)v13 + 16) > 1u)
      goto LABEL_263;
    *(_QWORD *)__s2 = 0;
    LOWORD(v736) = -1;
    LOBYTE(__c[0]) = 0;
    if (!a6)
    {
      strcpy((char *)__s1, "tn");
      v25 = *((unsigned __int8 *)v13 + 72);
      goto LABEL_8;
    }
  }
  strcpy((char *)__s1, "isolatedword");
  v25 = 1;
LABEL_8:
  v703 = v25;
  v729 = (char *)v16;
  v691 = a4;
  if (!v22)
    goto LABEL_77;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  POSAndDiacritics = 0;
  v696 = v13 + 30;
  v29.i64[0] = 0x100000001;
  v29.i64[1] = 0x100000001;
  do
  {
    LODWORD(v740) = 0;
    v30 = (unsigned __int16)v28;
    v31 = a4 + 104 * (unsigned __int16)v28;
    v32 = *((unsigned __int8 *)v13 + 97);
    v33 = (unsigned __int16 *)(v31 + 8);
    v680 = (_WORD *)(v31 + 72);
    v686 = (char **)(v31 + 16);
    __dst = v28;
    v716 = (unsigned __int16)v28;
    while (1)
    {
      v34 = v26 + (unsigned __int16)v32;
      if (v34 >= v22)
      {
        v37 = 0;
        v38 = -1;
        goto LABEL_15;
      }
      if (v34 >= v30)
      {
        v35 = 0;
        v36 = 0uLL;
        v41 = v28;
        do
        {
          v42 = (int32x4_t *)(a4 + 104 * v41);
          if (v42[4].i16[5])
            v35 = 1;
          v43 = vceqq_s32(v42[5], v29);
          v36 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v36, (int8x16_t)v43), v43);
          ++v41;
        }
        while (v34 >= v41);
      }
      else
      {
        v35 = 0;
        v36 = 0uLL;
      }
      if (!*((_DWORD *)v13 + 62))
      {
        if (*((_WORD *)v13 + 104))
        {
          v27 = 0;
          v50 = 0;
          do
          {
            if (v27)
              break;
            v51 = *((unsigned __int16 *)v13[25] + 3 * v50);
            if (v51 > *(unsigned __int16 *)(a4 + 104 * v34 + 10))
              break;
            v52 = *v33;
            v27 = v51 >= v52;
            if (v51 < v52)
              ++v50;
          }
          while (*((unsigned __int16 *)v13 + 104) > v50);
        }
        else
        {
          v27 = 0;
        }
      }
      v37 = 0;
      v38 = -1;
      if (v35)
        goto LABEL_15;
      v44 = vmovn_s32(vceqzq_s32(v36));
      if ((v44.i8[0] & 1) == 0 || (v44.i8[2] & 1) == 0 || (v44.i8[4] & 1) == 0 || (v44.i8[6] & 1) == 0)
        goto LABEL_15;
      v45 = a4 + 104 * v34;
      v47 = *(unsigned __int16 *)(v45 + 10);
      v46 = (unsigned __int16 *)(v45 + 10);
      v48 = *v33;
      v49 = v47 - v48;
      if ((int)v49 >= *((unsigned __int16 *)v13 + 49))
      {
        v37 = 0;
        goto LABEL_15;
      }
      strncpy(v729, &__s[v48], v49);
      v729[*v46 - *v33] = 0;
      if (*((_WORD *)v13 + 92))
        posparser_undoEmbeddedRules((uint64_t)v13, v729);
      if (*((_DWORD *)v13 + 58) != 1)
        break;
      if (*((_WORD *)v13 + 35) == 1)
      {
        LOWORD(v736) = -1;
        v64 = ((uint64_t (*)(_QWORD *, _QWORD *, _QWORD **))v13[3][12])(v13[1], v13[2], v696);
      }
      else
      {
        LOWORD(v736) = 0;
        v64 = ((uint64_t (*)(_QWORD *, _QWORD *, _QWORD **))v13[3][19])(v13[1], v13[2], v696);
      }
      POSAndDiacritics = v64;
      v22 = a5;
      v29.i64[0] = 0x100000001;
      v29.i64[1] = 0x100000001;
      if ((v64 & 0x80000000) != 0)
        goto LABEL_172;
      v37 = (unsigned __int16)v736;
      if (!(_WORD)v736)
      {
        v38 = -1;
        v28 = __dst;
        goto LABEL_62;
      }
      POSAndDiacritics = posparser_GetPOSAndDiacritics((uint64_t)v13, v27, (uint64_t)__s, a4, v729, (unsigned __int16)__dst, (unsigned __int16)v32, *(uint64_t *)__s2, (unsigned __int16)v736, __c[0], &v740);
      if ((POSAndDiacritics & 0x80000000) != 0)
        goto LABEL_172;
      v37 = v740;
      if ((_DWORD)v740)
        v38 = 0;
      else
        v38 = -1;
LABEL_60:
      v22 = a5;
      v28 = __dst;
      v29.i64[0] = 0x100000001;
      v29.i64[1] = 0x100000001;
LABEL_62:
      v30 = v716;
LABEL_15:
      v39 = v38 + v32;
      v32 = v39;
      v40 = v39 >= 0;
      if (v39 < 0 || v37)
        goto LABEL_72;
    }
    LOWORD(v736) = 0;
    v53 = ((uint64_t (*)(_QWORD *, _QWORD *, char **, char *, char *, char ***, int *, _QWORD))v13[3][19])(v13[1], v13[2], __s1, v729, __s2, &v736, __c, v703);
    POSAndDiacritics = v53;
    if ((v53 & 0x80000000) != 0)
      goto LABEL_172;
    v37 = (unsigned __int16)v736;
    if (!(_WORD)v736)
    {
      v38 = -1;
      goto LABEL_60;
    }
    v707 = v53;
    posparser_GetHighestPriority(*(size_t *)__s2, &v736, LOBYTE(__c[0]));
    v54 = *(_QWORD *)__s2;
    v55 = (unsigned __int16)v736;
    v56 = strchr(*(char **)(*(_QWORD *)__s2 + 8 * (unsigned __int16)v736), LOBYTE(__c[0]));
    if (v56)
    {
      *v56 = 0;
      v54 = *(_QWORD *)__s2;
      v55 = (unsigned __int16)v736;
    }
    *(_DWORD *)v738 = 0;
    *(_QWORD *)__src = 0;
    if (!v27)
    {
      a4 = v691;
      goto LABEL_69;
    }
    v13 = (_QWORD **)v727;
    log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"FOUND \"%s\" in dict as \"%s\" - try reconcile", v57, v58, v59, (uint64_t)v729);
    isReconcilable = posparser_isReconcilable(v727, (uint64_t)__s, *(char **)(*(_QWORD *)__s2 + 8 * (unsigned __int16)v736), *v33, *v46, v738, (uint64_t *)__src);
    POSAndDiacritics = isReconcilable;
    if ((isReconcilable & 0x80000000) != 0)
      goto LABEL_172;
    if (!*(_DWORD *)v738)
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"FOUND in \"%s\" in dict, but couldnt reconcile with partial diacritics - FAIL", v61, v62, v63, *(_QWORD *)(*(_QWORD *)__s2 + 8 * (unsigned __int16)v736));
      v37 = 0;
      v27 = 1;
      v38 = -1;
      v22 = a5;
      v28 = __dst;
      v29.i64[0] = 0x100000001;
      v29.i64[1] = 0x100000001;
      v30 = v716;
      a4 = v691;
      goto LABEL_15;
    }
    a4 = v691;
    if (*(_DWORD *)v738 != 1 || !*(_QWORD *)__src)
    {
      v707 = isReconcilable;
      v54 = *(_QWORD *)__s2;
      v55 = (unsigned __int16)v736;
LABEL_69:
      v75 = *(const char **)(v54 + 8 * v55);
      v13 = (_QWORD **)v727;
      v76 = strlen(v75);
      v77 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)v727 + 8), 1, (v76 + 1));
      *v686 = v77;
      POSAndDiacritics = v707;
      if (v77)
      {
        strcpy(v77, *(const char **)(*(_QWORD *)__s2 + 8 * (unsigned __int16)v736));
        goto LABEL_71;
      }
LABEL_171:
      POSAndDiacritics = 2687508490;
      log_OutPublic((*v13)[4], (uint64_t)"POSPARSER", 68000, 0, v68, v69, v70, v71, v653);
LABEL_172:
      *a10 = v732;
      v21 = v729;
      *v679 = __s;
      *a9 = v694;
      goto LABEL_839;
    }
    posparser_PostProcess(v727, (const char **)__src);
    v65 = *(const char **)__src;
    v66 = strlen(*(const char **)__src);
    v67 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)v727 + 8), 1, (v66 + 1));
    *v686 = v67;
    if (!v67)
      goto LABEL_171;
    strcpy(v67, v65);
    heap_Free(*(_QWORD **)(*(_QWORD *)v727 + 8), (uint64_t)v65);
    *(_QWORD *)__src = 0;
    v27 = 1;
LABEL_71:
    *v680 = v34;
    log_OutText((*v13)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"FOUND in dict pWordDefs[%d]=\"%s\"", v72, v73, v74, v26);
    v37 = 1;
    LODWORD(v740) = 1;
    v40 = (v32 & 0x8000u) == 0;
    v22 = a5;
    v28 = __dst;
    v29.i64[0] = 0x100000001;
    v29.i64[1] = 0x100000001;
LABEL_72:
    if (v40 && v37 == 1)
      v78 = v32;
    else
      v78 = 0;
    v79 = v28 + v78;
    v28 = v79 + 1;
    v26 = (unsigned __int16)(v79 + 1);
  }
  while (v26 < v22);
  v23 = v694;
  v21 = v729;
  if ((POSAndDiacritics & 0x80000000) != 0)
    goto LABEL_775;
LABEL_77:
  if (*((_DWORD *)v13 + 58) != 1)
    goto LABEL_263;
  v80 = __s;
  v81 = v22;
  v82 = posparser_doPatternMatching((uint64_t)__s, v21, (uint64_t *)v13, a4, v22, v18, v19, v20);
  if ((v82 & 0x80000000) != 0)
  {
    POSAndDiacritics = v82;
    goto LABEL_776;
  }
  __s1[0] = 0;
  *(_QWORD *)__s2 = 0;
  *(_DWORD *)__src = 0;
  log_OutText((*v13)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"posparser_doPOSDisambiguation()", v83, v84, v85, 0);
  if (v81)
  {
    v89 = 0;
    v90 = 0;
    LOWORD(v91) = 0;
    do
    {
      v92 = *(unsigned __int16 *)(a4 + 104 * v89 + 32);
      if (v92 <= (unsigned __int16)v91)
        v91 = (unsigned __int16)v91;
      else
        v91 = *(unsigned __int16 *)(a4 + 104 * v89 + 32);
      if (*(_WORD *)(a4 + 104 * v89 + 32))
      {
        v93 = *(const char ***)(a4 + 104 * v89 + 24);
        do
        {
          v94 = *v93;
          v93 += 2;
          v95 = strlen(v94);
          if (v95 > v90)
            v90 = v95;
          --v92;
        }
        while (v92);
      }
      ++v89;
    }
    while (v89 != v81);
    v96 = v90 + 1;
    if (v91)
    {
      v13 = (_QWORD **)v727;
      v97 = (unsigned __int16)(v90 + 1);
      v98 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v727 + 8), 1, v96 * (unint64_t)v91);
      if (!v98)
      {
        v103 = 0;
        v104 = 0;
        v717 = 17;
        v105 = 17;
        v23 = v694;
        goto LABEL_93;
      }
    }
    else
    {
      v98 = 0;
      v97 = (unsigned __int16)(v90 + 1);
    }
    v107 = 0;
    __dsta = (char *)v98;
    v718 = (const char *)(v98 + v97);
    while (1)
    {
      v108 = a4 + 104 * v107;
      v109 = (unsigned __int16 *)(v108 + 10);
      v110 = (unsigned __int16 *)(v108 + 8);
      v111 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)v727 + 8), 1, *(unsigned __int16 *)(v108 + 10) - (unint64_t)*(unsigned __int16 *)(v108 + 8) + 1);
      *(_QWORD *)(v108 + 56) = v111;
      v113 = (_QWORD *)(v108 + 56);
      if (!v111)
        break;
      strncpy(v111, &__s[*v110], *v109 - (unint64_t)*v110);
      *(_BYTE *)(*v113 - *v110 + *v109) = 0;
      v114 = a4 + 104 * v107;
      v117 = *(unsigned __int16 *)(v114 + 32);
      v116 = (_WORD *)(v114 + 32);
      v115 = v117;
      if (v117)
      {
        v118 = 0;
        v119 = a4 + 104 * v107;
        v122 = *(const char ***)(v119 + 24);
        v121 = (_QWORD *)(v119 + 24);
        v120 = v122;
        v123 = v115;
        do
        {
          v124 = *v120;
          v120 += 2;
          v118 += (unsigned __int16)strlen(v124) + 2;
          --v123;
        }
        while (v123);
        v125 = a4 + 104 * v107;
        *(_QWORD *)(v125 + 48) = 0;
        v126 = (char **)(v125 + 48);
        if (v118)
        {
          v127 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v727 + 8), 1, (v115 + v118 + 1));
          *v126 = (char *)v127;
          if (!v127)
            break;
          if (__dsta)
          {
            if (*v116)
            {
              v128 = 0;
              v129 = 0;
              v130 = __dsta;
              do
              {
                v131 = strcpy(v130, *(const char **)(*v121 + v128));
                ++v129;
                v132 = (unsigned __int16)*v116;
                v128 += 16;
                v130 = &v131[v97];
              }
              while (v129 < v132);
            }
            else
            {
              v132 = 0;
            }
            ssft_qsort((uint64_t)__dsta, v132, v97, (uint64_t (*)(unint64_t, unint64_t))string_cmp_1);
            strcpy(*v126, __dsta);
            if ((unsigned __int16)*v116 >= 2u)
            {
              v133 = v718;
              v134 = 1;
              do
              {
                *(_WORD *)&(*v126)[strlen(*v126)] = 47;
                strcat(*v126, v133);
                ++v134;
                v133 += v97;
              }
              while (v134 < (unsigned __int16)*v116);
            }
          }
        }
      }
      else
      {
        *(_QWORD *)(a4 + 104 * v107 + 48) = 0;
      }
      if (++v107 == v81)
      {
        v708 = 0;
        v135 = 1;
        v13 = (_QWORD **)v727;
        goto LABEL_117;
      }
    }
    v708 = -1607458806;
    v13 = (_QWORD **)v727;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 68000, 0, v112, v86, v87, v88, v654);
    v135 = 0;
LABEL_117:
    v23 = v694;
    v21 = v729;
    if (__dsta)
      heap_Free((_QWORD *)(*v13)[1], (uint64_t)__dsta);
    if (!v135)
    {
      v704 = 0;
      v104 = 0;
      v717 = 17;
      v105 = 17;
      goto LABEL_224;
    }
  }
  if (*((_DWORD *)v13 + 59))
  {
    v136 = 17;
    v105 = 17;
  }
  else
  {
    v136 = *((unsigned __int8 *)v13[28] + 1296) - 1;
    v105 = *((unsigned __int8 *)v13[27] + 1296) - 1;
  }
  log_OutText((*v13)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"FEATUREVECTOR:NEWSENT", v86, v87, v88, v654);
  v104 = (char *)heap_Calloc((_QWORD *)(*v13)[1], 1, 8 * v136);
  v106 = (uint64_t)*v13;
  v717 = v136;
  if (!v104)
  {
    v103 = 0;
    goto LABEL_168;
  }
  inited = posparser_initFeatureVector(v106, v104, v136);
  if ((inited & 0x80000000) != 0)
  {
    v708 = inited;
    v704 = 0;
    goto LABEL_224;
  }
  v103 = (uint64_t *)heap_Calloc((_QWORD *)(*v13)[1], 1, 8 * v105);
  v106 = (uint64_t)*v13;
  if (!v103)
  {
LABEL_168:
    v704 = v103;
    v708 = -1607458806;
    log_OutPublic(*(_QWORD *)(v106 + 32), (uint64_t)"POSPARSER", 68000, 0, v99, v100, v101, v102, v654);
    goto LABEL_224;
  }
  v708 = posparser_initFeatureVector(v106, v103, v105);
  if ((v708 & 0x80000000) != 0)
  {
    v704 = v103;
    goto LABEL_224;
  }
  *(_DWORD *)__src = 128;
  v138 = (_BYTE *)heap_Calloc((_QWORD *)(*v13)[1], 1, 129);
  *(_QWORD *)__s2 = v138;
  if (!v138)
  {
LABEL_93:
    v106 = (uint64_t)*v13;
    goto LABEL_168;
  }
  v139 = (uint64_t)v138;
  *v138 = 0;
  __dstb = v104;
  v700 = v105;
  v704 = v103;
  if (!a5)
    goto LABEL_225;
  v140 = 0;
  do
  {
    v141 = *(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v140 + 72);
    if (v141 != 9999 && v141 != (unsigned __int16)v140)
    {
      if (v141 > (unsigned __int16)v140)
      {
        v142 = v140 + 1;
        do
          *(_QWORD *)(a4 + 104 * (unsigned __int16)v142++ + 40) = "MULTIWORD";
        while (v141 >= (unsigned __int16)v142);
      }
      v140 = v141;
    }
    ++v140;
  }
  while (a5 > (unsigned __int16)v140);
  v143 = 0;
  while (2)
  {
    v144 = (unsigned __int16 *)(a4 + 104 * v143);
    v145 = v144[4];
    v146 = v144[5] - (_DWORD)v145;
    if (v146 > *(unsigned __int16 *)(v727 + 98))
      LOWORD(v146) = *(_WORD *)(v727 + 98);
    v147 = (unsigned __int16)v146;
    strncpy(v21, &__s[v145], (unsigned __int16)v146);
    v21[v147] = 0;
    v153 = v144[16];
    v152 = v144 + 16;
    v151 = v153;
    if (!v153)
    {
      if (*(_DWORD *)(a4 + 104 * v143 + 80) == 1)
      {
        log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"DIGITCLASS  :             : word[%2d] %10s", v148, v149, v150, v143);
        v154 = a4 + 104 * v143;
        v155 = (const char *)&szPOSDIGITCLASS;
      }
      else if (*(_DWORD *)(a4 + 104 * v143 + 84) == 1)
      {
        log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"PUNCTCLASS  :             : word[%2d] %10s", v148, v149, v150, v143);
        v154 = a4 + 104 * v143;
        v155 = "PUNCT";
      }
      else if (*(_DWORD *)(a4 + 104 * v143 + 12) == 1)
      {
        log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"DIACRITIZED :             : word[%2d] %10s", v148, v149, v150, v143);
        v154 = a4 + 104 * v143;
        v155 = "DIACRITIZED";
      }
      else if (*(_DWORD *)(a4 + 104 * v143 + 88) == 1)
      {
        log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"LATIN       :             : word[%2d] %10s", v148, v149, v150, v143);
        v154 = a4 + 104 * v143;
        v155 = "LATIN";
      }
      else if (*(_DWORD *)(a4 + 104 * v143 + 92) == 1)
      {
        log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"SPELLMODE   :             : word[%2d] %10s", v148, v149, v150, v143);
        v154 = a4 + 104 * v143;
        v155 = "SPELLMODE";
      }
      else
      {
        if (!*(_WORD *)(a4 + 104 * v143 + 74))
        {
          v161 = a4 + 104 * v143;
          v164 = *(const char **)(v161 + 40);
          v163 = (_QWORD *)(v161 + 40);
          v162 = v164;
          if (v164 && !strcmp(v162, "MULTIWORD"))
          {
            log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"MULTIWORD   :             : word[%2d] %10s", v148, v149, v150, v143);
          }
          else
          {
            log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"OOV         :             : word[%2d] %10s", v148, v149, v150, v143);
            *v163 = "OOV";
          }
          goto LABEL_161;
        }
        log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"PHONETIC    :             : word[%2d] %10s", v148, v149, v150, v143);
        v154 = a4 + 104 * v143;
        v155 = "PHONETIC";
      }
      *(_QWORD *)(v154 + 40) = v155;
      goto LABEL_161;
    }
    if (v151 == 1)
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"KNOWN       : UNAMBIGUOUS : word[%2d] %10s : POS=%s DIA=%s", v148, v149, v150, v143);
    }
    else
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"KNOWN       : AMBIGUOUS   : word[%2d] %10s : ", v148, v149, v150, v143);
      if (*v152)
      {
        v159 = 0;
        v160 = 0;
        do
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"                                                  POS=%s DIA=%s", v156, v157, v158, *(_QWORD *)(*(_QWORD *)(a4 + 104 * v143 + 24) + v159));
          ++v160;
          v159 += 16;
        }
        while (v160 < (unsigned __int16)*v152);
      }
    }
LABEL_161:
    ++v143;
    v21 = v729;
    if (v143 != a5)
      continue;
    break;
  }
  v165 = 0;
  v166 = 0;
  while (2)
  {
    v167 = (unsigned __int16)v166;
    v168 = (unsigned __int16 *)(a4 + 104 * (unsigned __int16)v166);
    v169 = v168[36];
    v170 = (unsigned __int16)v166 == v169 || v169 == 9999;
    if (v170)
      v171 = v166;
    else
      v171 = v168[36];
    v172 = v168[4];
    v173 = *(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v171 + 10) - (_DWORD)v172;
    if (v173 > *(unsigned __int16 *)(v727 + 98))
      LOWORD(v173) = *(_WORD *)(v727 + 98);
    v174 = (unsigned __int16)v173;
    strncpy(v21, &__s[v172], (unsigned __int16)v173);
    v21[v174] = 0;
    log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"Doing word[%2d] %10s", v175, v176, v177, v165);
    v180 = v168[16];
    v179 = v168 + 16;
    v178 = v180;
    if (v180)
    {
      if (v178 == 1)
      {
        if (*(_DWORD *)(v727 + 236) == 1)
          log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"%d FEATUREVECTOR:UNAMBIGUOUS:0:%s %s", v86, v87, v88, v165);
        v181 = 0;
        goto LABEL_208;
      }
      v13 = (_QWORD **)v727;
      v182 = setPosparserFeatureVector(v727, v21, *(_QWORD *)(v727 + 224), v167, (uint64_t)__dstb, a4, a5, v717);
      v23 = v694;
      if ((v182 & 0x80000000) != 0)
      {
LABEL_221:
        v708 = v182;
      }
      else
      {
        v183 = *(_DWORD *)(v727 + 236);
        if (v183)
        {
          v184 = "DUMMY";
          __s1[0] = "DUMMY";
        }
        else
        {
          v182 = igtree_Process(*(_QWORD *)(v727 + 224), (uint64_t)__dstb, __s1);
          if ((v182 & 0x80000000) != 0)
            goto LABEL_221;
          v184 = __s1[0];
          v183 = *(_DWORD *)(v727 + 236);
        }
        v708 = posparser_DumpFeatureVectorAndResult(*(_QWORD *)v727, "KNOWN", (char **)__dstb, v184, (const char **)__s2, __src, v717, v183, v167, v21);
        if ((v708 & 0x80000000) != 0)
          goto LABEL_222;
        v185 = (unsigned __int16)*v179;
        if (*v179)
        {
          v186 = 0;
          v181 = 0;
          v187 = __s1[0];
          v188 = *(const char ***)(a4 + 104 * v167 + 24);
          do
          {
            v189 = *v188;
            v188 += 2;
            if (!strcmp(v187, v189))
              v181 = v186;
            ++v186;
          }
          while (v185 != v186);
          v21 = v729;
        }
        else
        {
          v181 = 0;
        }
LABEL_208:
        v190 = a4 + 104 * v167;
        v192 = *(_QWORD *)(v190 + 24);
        v191 = (_QWORD *)(v190 + 24);
        v193 = strlen(*(const char **)(v192 + 16 * v181 + 8));
        v194 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)v727 + 8), 1, (v193 + 1));
        *((_QWORD *)v179 - 2) = v194;
        if (!v194)
          goto LABEL_220;
        strcpy(v194, *(const char **)(*v191 + 16 * v181 + 8));
        *(_QWORD *)(a4 + 104 * v167 + 40) = *(_QWORD *)(*v191 + 16 * v181);
LABEL_210:
        v166 = v171 + 1;
        v165 = (unsigned __int16)(v171 + 1);
        if (v165 < a5)
          continue;
        v13 = (_QWORD **)v727;
        v23 = v694;
      }
LABEL_222:
      v104 = __dstb;
      goto LABEL_223;
    }
    break;
  }
  if (*(_DWORD *)(a4 + 104 * v167 + 80)
    || *(_DWORD *)(a4 + 104 * v167 + 84)
    || *(_DWORD *)(a4 + 104 * v167 + 12)
    || *(_DWORD *)(a4 + 104 * v167 + 88)
    || *(_DWORD *)(a4 + 104 * v167 + 92)
    || *(_WORD *)(a4 + 104 * v167 + 74))
  {
    if (*(_DWORD *)(v727 + 236) == 1)
      log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"%d FEATUREVECTOR:DUMMY:0:%s %s", v86, v87, v88, v165);
    goto LABEL_210;
  }
  v708 = setPosparserFeatureVector(v727, v21, *(_QWORD *)(v727 + 216), v167, (uint64_t)v103, a4, a5, v700);
  if ((v708 & 0x80000000) != 0)
    goto LABEL_848;
  v199 = *(_DWORD *)(v727 + 236);
  if (v199)
  {
    v200 = "DUMMY";
    __s1[0] = "DUMMY";
  }
  else
  {
    v708 = igtree_Process(*(_QWORD *)(v727 + 216), (uint64_t)v103, __s1);
    if ((v708 & 0x80000000) != 0)
      goto LABEL_848;
    v200 = __s1[0];
    v199 = *(_DWORD *)(v727 + 236);
  }
  v708 = posparser_DumpFeatureVectorAndResult(*(_QWORD *)v727, "OOV", (char **)v103, v200, (const char **)__s2, __src, v700, v199, v167, v729);
  if ((v708 & 0x80000000) != 0)
  {
LABEL_848:
    v104 = __dstb;
    v13 = (_QWORD **)v727;
    a4 = v691;
    v23 = v694;
    v21 = v729;
LABEL_223:
    v105 = v700;
LABEL_224:
    v700 = v105;
    __dstb = v104;
    v139 = *(_QWORD *)__s2;
    if (*(_QWORD *)__s2)
    {
LABEL_225:
      heap_Free((_QWORD *)(*v13)[1], v139);
      *(_QWORD *)__s2 = 0;
      *(_DWORD *)__src = 0;
    }
    log_OutText((*v13)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"POS Disambiguation results:", v86, v87, v88, 0);
    if (a5)
    {
      v210 = 0;
      v211 = a5;
      v212 = a4 + 56;
      do
      {
        if (*(_WORD *)(v212 - 24))
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"Word[%2d] : %15s : %25s : %s", v207, v208, v209, v210);
        }
        else if (*(_QWORD *)(v212 - 16) && !strcmp(*(const char **)(v212 - 16), "MULTIWORD"))
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"Word[%2d] : %15s : %25s : ", v207, v208, v209, v210);
        }
        else if (*(_DWORD *)(v212 + 24)
               || *(_DWORD *)(v212 + 28)
               || *(_DWORD *)(v212 - 44)
               || *(_DWORD *)(v212 + 32)
               || *(_DWORD *)(v212 + 36)
               || *(_WORD *)(v212 + 18))
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"Word[%2d] : %15s : %25s : NON DICT WORD", v207, v208, v209, v210);
        }
        else
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"Word[%2d] : %15s : %25s : OOV NON DICT WORD", v207, v208, v209, v210);
        }
        ++v210;
        v212 += 104;
      }
      while (a5 != v210);
      v213 = a4 + 48;
      v13 = (_QWORD **)v727;
      v23 = v694;
      do
      {
        if (!*(_DWORD *)(v213 + 32)
          && !*(_DWORD *)(v213 + 36)
          && !*(_DWORD *)(v213 - 36)
          && !*(_DWORD *)(v213 + 40)
          && !*(_DWORD *)(v213 + 44)
          && !*(_WORD *)(v213 + 26)
          && !*(_WORD *)(v213 - 16))
        {
          v214 = *(_QWORD *)(v213 - 8);
          if (!v214 || strcmp(*(const char **)(v213 - 8), "MULTIWORD"))
          {
            heap_Free(*(_QWORD **)(*(_QWORD *)v727 + 8), v214);
            *(_QWORD *)(v213 - 8) = 0;
          }
        }
        v215 = *(_QWORD *)(v213 + 8);
        if (v215)
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)v727 + 8), v215);
          *(_QWORD *)(v213 + 8) = 0;
        }
        if (*(_QWORD *)v213)
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)v727 + 8), *(_QWORD *)v213);
          *(_QWORD *)v213 = 0;
        }
        v213 += 104;
        --v211;
      }
      while (v211);
    }
    if (v704)
    {
      statcomp_freeFeatureVector(*v13, v704, v700);
      heap_Free((_QWORD *)(*v13)[1], (uint64_t)v704);
    }
    POSAndDiacritics = v708;
    if (__dstb)
    {
      statcomp_freeFeatureVector(*v13, (uint64_t *)__dstb, v717);
      heap_Free((_QWORD *)(*v13)[1], (uint64_t)__dstb);
    }
    v22 = a5;
    if ((v708 & 0x80000000) != 0)
      goto LABEL_775;
LABEL_263:
    if ((*((_DWORD *)v13 + 16) | 2) != 2)
      goto LABEL_673;
    v735 = 0;
    v737 = -65536;
    *(_QWORD *)__c = v21;
    v216 = strlen(__s);
    v217 = v13[10];
    if (!v217 || (v736 = 0, !*v217))
    {
      v22 = a5;
      goto LABEL_673;
    }
    v218 = v216;
    bzero(__s1, 0x5A0uLL);
    v746 = 0u;
    memset(v747, 0, sizeof(v747));
    *(_OWORD *)__s2 = 0u;
    v223 = (char *)heap_Calloc((_QWORD *)(*v13)[1], 1, 252);
    if (!v223)
    {
      v224 = 2687508490;
      log_OutPublic((*v13)[4], (uint64_t)"POSPARSER", 68000, 0, v219, v220, v221, v222, v653);
      v227 = 0;
      goto LABEL_664;
    }
    LOWORD(v737) = 0;
    *v21 = 0;
    v701 = v218;
    if (!v218)
    {
      v227 = 0;
      v224 = 0;
      goto LABEL_664;
    }
    v692 = 0;
    LODWORD(v224) = 0;
    v225 = 0;
    v226 = 0;
    v227 = 0;
    v719 = 0;
    v661 = 0;
    v667 = 20;
LABEL_269:
    v741 = 0;
    v740 = 0;
    v705 = v225;
    v709 = v224;
    if (*((_DWORD *)v13 + 48) == 1)
    {
      if (*((_WORD *)v13 + 104))
      {
        v681 = v227;
        v687 = v223;
        v228 = v692 + 1;
        v229 = (unsigned __int16 *)v13[25];
        v230 = *v229;
        if (v230 > (unsigned __int16)v225)
        {
          v231 = 0;
          v232 = 0;
          v233 = 1;
          goto LABEL_328;
        }
        v242 = 0;
        v232 = 0;
        v231 = 0;
        while (2)
        {
          if ((unsigned __int16)v225 != (unsigned __int16)v230
            || *((_DWORD *)v13 + 38) != 1
            || (v243 = isCharInStr((unsigned __int8 *)&v229[3 * v242 + 1], "XBI"), LOWORD(v225) = v705, !v243))
          {
            ++v242;
            v244 = 1;
            goto LABEL_306;
          }
          v244 = 0;
          v245 = v242;
          v246 = v242 + 1;
          if (v246 < *((unsigned __int16 *)v13 + 104) && v228 < v701)
          {
            v247 = (unsigned __int8 *)v13[25];
            if (v228 == *(unsigned __int16 *)&v247[6 * v246])
            {
              if (v13[15])
                v248 = (const char *)v13[15];
              else
                v248 = "^FNKauioR";
              if (isCharInStr(&v247[6 * v246 + 2], v248))
              {
                v249 = 6 * v246 + 6;
                while (1)
                {
                  __strcat_chk();
                  v250 = (const char *)v13[25];
                  v231 += strlen(&v250[v249 - 4]);
                  if (++v246 >= *((unsigned __int16 *)v13 + 104) || v228 != *(unsigned __int16 *)&v250[v249])
                    break;
                  v251 = (unsigned __int8 *)&v250[v249 + 2];
                  if (v13[15])
                    v252 = (const char *)v13[15];
                  else
                    v252 = "^FNKauioR";
                  v232 = 1;
                  v249 += 6;
                  v223 = v687;
                  if (!isCharInStr(v251, v252))
                  {
                    v244 = 0;
                    goto LABEL_315;
                  }
                }
                v244 = 0;
                v232 = 1;
              }
              else
              {
                v244 = 0;
              }
LABEL_315:
              v242 = v245;
              LOWORD(v225) = v705;
LABEL_306:
              v233 = *((unsigned __int16 *)v13 + 104);
              if (v242 >= v233)
                goto LABEL_327;
              v229 = (unsigned __int16 *)v13[25];
              v230 = v229[3 * v242];
              v253 = v244 ^ 1;
              if (v230 > (unsigned __int16)v225)
                v253 = 1;
              if ((v253 & 1) == 0)
                continue;
              v233 = 1;
LABEL_327:
              if (!v244)
              {
                __dstc = v242;
                if (v232 == 1)
                {
                  v237 = 0;
                  v269 = 1;
                  v227 = v681;
LABEL_364:
                  log_OutText((*v13)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM DOING [%d] \"%c\" rewrite+vowel diacritic=\"%s%s\"", v220, v221, v222, v692);
                  v232 = 1;
                  v238 = v269;
                }
                else
                {
                  log_OutText((*v13)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM DOING [%d] \"%c\" rewrite diacritic=\"%s\"", v220, v221, v222, v692);
                  v237 = 0;
                  v238 = 1;
                  v227 = v681;
                }
                goto LABEL_277;
              }
LABEL_328:
              if (v233 && v228 < v701)
              {
                v257 = 0;
                v258 = 0;
                do
                {
                  if (v258)
                    break;
                  v259 = (unsigned __int8 *)v13[25];
                  v260 = *(unsigned __int16 *)&v259[6 * v257];
                  if (v228 < v260)
                    break;
                  if (v228 == v260
                    && (v13[15] ? (v261 = (const char *)v13[15]) : (v261 = "^FNKauioR"),
                        isCharInStr(&v259[6 * v257 + 2], v261)))
                  {
                    if (v257 < *((unsigned __int16 *)v13 + 104)
                      && (v262 = (unsigned __int8 *)v13[25], v228 == *(unsigned __int16 *)&v262[6 * v257]))
                    {
                      v263 = v13[15] ? (const char *)v13[15] : "^FNKauioR";
                      if (isCharInStr(&v262[6 * v257 + 2], v263))
                      {
                        v264 = 6 * v257 + 6;
                        v265 = v257;
                        while (1)
                        {
                          __strcat_chk();
                          v266 = (const char *)v13[25];
                          v231 += strlen(&v266[v264 - 4]);
                          if (++v257 >= *((unsigned __int16 *)v13 + 104) || v228 != *(unsigned __int16 *)&v266[v264])
                            break;
                          if (*(_QWORD *)(v727 + 120))
                            v267 = *(const char **)(v727 + 120);
                          else
                            v267 = "^FNKauioR";
                          v268 = isCharInStr((unsigned __int8 *)&v266[v264 + 2], v267);
                          v258 = 1;
                          v264 += 6;
                          v13 = (_QWORD **)v727;
                          if (!v268)
                            goto LABEL_355;
                        }
                        v258 = 1;
LABEL_355:
                        v223 = v687;
                        v257 = v265;
                      }
                      else
                      {
                        v258 = 0;
                      }
                    }
                    else
                    {
                      v258 = 0;
                    }
                  }
                  else
                  {
                    v258 = 0;
                    ++v257;
                  }
                }
                while (v257 < *((unsigned __int16 *)v13 + 104));
                v227 = v681;
                __dstc = v257;
                if (!v258)
                  goto LABEL_276;
                if (v232 == 1)
                {
                  v269 = 0;
                  v237 = 1;
                  goto LABEL_364;
                }
                log_OutText((*v13)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM DOING [%d] \"%c\" vowel diacritic=\"%s\"", v220, v221, v222, v692);
                v238 = 0;
                v237 = 1;
LABEL_277:
                v239 = v719;
                if ((int)a5 <= (__int16)v719)
                {
                  v240 = 0;
                }
                else
                {
                  while (*(unsigned __int16 *)(a4 + 104 * (__int16)v239 + 8) > (unsigned __int16)v705
                       || *(unsigned __int16 *)(a4 + 104 * (__int16)v239 + 10) <= (unsigned __int16)v705)
                  {
                    v239 = (v239 + 1);
                    if ((int)a5 <= (__int16)v239)
                    {
                      v240 = 0;
                      v239 = v719;
                      goto LABEL_317;
                    }
                  }
                  v241 = (unsigned __int16)v239;
                  if (*(_WORD *)(a4 + 104 * (unsigned __int16)v239 + 72) != 9999
                    && *(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v239 + 8) == (unsigned __int16)v705)
                  {
                    LODWORD(v719) = v239;
                    goto LABEL_320;
                  }
                  v240 = 1;
                }
LABEL_317:
                v719 = v239;
                v241 = (unsigned __int16)v239;
                if (*(_DWORD *)(a4 + 104 * (unsigned __int16)v239 + 12) == 1
                  || *(_WORD *)(a4 + 104 * (unsigned __int16)v239 + 74)
                  || *(_QWORD *)(a4 + 104 * (unsigned __int16)v239 + 16))
                {
LABEL_320:
                  v254 = a4 + 104 * v241;
                  v255 = *(unsigned __int16 *)(v254 + 72);
                  if (v255 == 9999)
                    v255 = v241;
                  v256 = *(unsigned __int16 *)(a4 + 104 * v255 + 10);
                  log_OutText((*v13)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM SKIPPING %d-%d as dict word exists, is vowelled, is phonetic or pre-diacritized", v234, v235, v236, *(unsigned __int16 *)(v254 + 8));
                  v719 = (v719 + 1);
                  **(_BYTE **)__c = 0;
LABEL_323:
                  v23 = v694;
LABEL_324:
                  v226 = (char *)__dstc;
                  v225 = v256 + 1;
                  v224 = v709;
LABEL_325:
                  v692 = (unsigned __int16)v225;
                  if (v701 <= (unsigned __int16)v225)
                    goto LABEL_664;
                  goto LABEL_269;
                }
                if ((v240 & 1) != 0)
                {
                  if ((*(_DWORD *)(a4 + 104 * (unsigned __int16)v239 + 80) == 1
                     || *(_DWORD *)(a4 + 104 * (unsigned __int16)v239 + 84) == 1)
                    && *(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v239 + 8) == (unsigned __int16)v705)
                  {
                    v270 = a4 + 104 * (unsigned __int16)v239;
                    log_OutText((*v13)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM SKIPPING %d-%d as digit/punctuation class", v234, v235, v236, v692);
LABEL_389:
                    v256 = *(unsigned __int16 *)(v270 + 10);
                    goto LABEL_323;
                  }
                  if (*(_DWORD *)(a4 + 104 * (unsigned __int16)v239 + 88) == 1
                    && *(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v239 + 8) == (unsigned __int16)v705)
                  {
                    v270 = a4 + 104 * (unsigned __int16)v239;
                    log_OutText((*v13)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM SKIPPING %d-%d as latin", v234, v235, v236, v692);
                    goto LABEL_389;
                  }
                  if (*(_DWORD *)(a4 + 104 * (unsigned __int16)v239 + 92) == 1
                    && *(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v239 + 8) == (unsigned __int16)v705)
                  {
                    v270 = a4 + 104 * (unsigned __int16)v239;
                    log_OutText((*v13)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM SKIPPING %d-%d as in spell mode", v234, v235, v236, v692);
                    goto LABEL_389;
                  }
                  v664 = v238;
                  v682 = v227;
                  v271 = (unsigned __int16)v705;
                  if (!strncmp(&__s[(unsigned __int16)v705], "§", 2uLL))
                  {
                    v238 = v664;
                    if (*(unsigned __int16 *)(a4 + 104 * v241 + 8) == (unsigned __int16)v705)
                    {
                      log_OutText((*v13)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM SKIPPING %d-%d as phonetic", v234, v235, v236, v692);
                      v256 = *(unsigned __int16 *)(a4 + 104 * v241 + 10);
                      v23 = v694;
                      goto LABEL_324;
                    }
                  }
                  else
                  {
                    v238 = v664;
                  }
                }
                else
                {
                  v682 = v227;
                  v271 = (unsigned __int16)v705;
                }
                v670 = (unsigned __int8 *)&__s[v271];
                if (__s[v271] == 32)
                {
                  log_OutText((*v13)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM SKIPPING space", v234, v235, v236, v656);
                  v23 = v694;
                  v227 = v682;
                  v226 = (char *)__dstc;
                  v224 = v709;
LABEL_654:
                  v225 = v705 + Utf8_LengthInBytes(v670, 1);
                  goto LABEL_325;
                }
                v659 = v241;
                v272 = v238;
                log_OutText((*v13)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM PROCESSING [%d] \"%c\"", v234, v235, v236, v692);
                bzero(v223, 12 * v667 + 12);
                LOWORD(v737) = 0;
                v663 = v272;
                if (v232 == 1)
                  v273 = v272;
                else
                  v273 = 0;
                if (v273 == 1)
                {
                  __strcpy_chk();
                  if ((_WORD)v231)
                  {
                    v277 = (unsigned __int16)v231;
                    v278 = v223 + 1;
                    v279 = (char *)&v740;
                    v280 = (unsigned __int16)v231;
                    do
                    {
                      v281 = *v279++;
                      v278[12 * (unsigned __int16)v737] = v281;
                      ++v278;
                      --v280;
                    }
                    while (v280);
                  }
                  else
                  {
                    v277 = 0;
                  }
                  v227 = v682;
                  v223[12 * (unsigned __int16)v737 + 1 + v277] = 0;
                  *(_WORD *)&v223[12 * (unsigned __int16)v737 + 10] = 20000;
                  log_OutText((*v13)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"(partial dia) ADD SOLUTION \"%s\"(%u)", v274, v275, v276, (uint64_t)&v223[12 * (unsigned __int16)v737]);
                  v660 = 0;
                  v299 = v737 + 1;
                  LOWORD(v737) = v737 + 1;
                  v300 = v663;
LABEL_412:
                  v683 = v227;
                  v688 = v223;
                  if ((v300 & 1) != 0)
                  {
                    if (!v299)
                    {
                      v299 = 0;
                      v671 = 0;
                      v676 = 0;
                      goto LABEL_608;
                    }
                    v301 = 0;
                    v662 = 0;
                    v671 = 0;
                    v676 = 0;
                    do
                    {
                      v710 = &v223[12 * v301];
                      v697 = strlen(v710);
                      if (v697)
                      {
                        v302 = 0;
                        v303 = 0;
                        v304 = (unsigned __int16)strlen((const char *)v13[25] + 6 * __dstc + 2);
                        v665 = &v223[12 * v301 + 10];
                        do
                        {
                          v305 = Utf8_LengthInBytes((unsigned __int8 *)&v710[v303], 1);
                          v306 = Utf8_LengthInBytes((unsigned __int8 *)(*(_QWORD *)(v727 + 200) + 6 * __dstc + v302 + 2), 1);
                          v307 = v306 == v305 && v304 > v302;
                          if (v307)
                          {
                            v308 = v306;
                            if (!strncmp(&v710[v303], (const char *)(*(_QWORD *)(v727 + 200) + 6 * __dstc + v302 + 2), v305))
                            {
                              v309 = *(unsigned __int16 *)v665;
                              if (v309 >= v671)
                                v310 = v301;
                              else
                                v310 = v676;
                              v676 = v310;
                              if (v309 <= v671)
                                LOWORD(v309) = v671;
                              v671 = v309;
                              v302 += v308;
                              v662 = 1;
                            }
                          }
                          v303 += v305;
                        }
                        while (v303 < v697);
                        v299 = v737;
                        v13 = (_QWORD **)v727;
                        v223 = v688;
                      }
                      ++v301;
                    }
                    while (v301 < v299);
                    if (v662)
                    {
LABEL_639:
                      LOWORD(v314) = v676;
                      log_OutText((*v13)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"FORCE NGRAM SOLUTION[%d] \"%s\" %d", v296, v297, v298, (unsigned __int16)v676);
                    }
                    else
                    {
LABEL_608:
                      log_OutText((*v13)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NO SOLUTION CONTAINING DIACRITIC \"%s\" - see if solution with vowel", v296, v297, v298, (uint64_t)v13[25] + 6 * __dstc + 2);
                      if (v299)
                      {
                        v435 = 0;
                        v436 = 1;
                        v437 = v299;
                        while (2)
                        {
                          v666 = v436;
                          while (1)
                          {
                            v438 = v13[15] ? (const char *)v13[15] : "^FNKauioR";
                            v712 = (char *)v438;
                            v669 = strlen(v438);
                            if (v669)
                              break;
LABEL_623:
                            if (++v435 >= v437)
                            {
                              if ((v666 & 1) == 0)
                                goto LABEL_639;
                              goto LABEL_635;
                            }
                          }
                          v439 = &v223[12 * v435];
                          v440 = strlen(v439);
                          v441 = 0;
                          while (1)
                          {
                            v442 = Utf8_LengthInBytes((unsigned __int8 *)&v712[v441], 1);
                            if (v440)
                              break;
LABEL_621:
                            v441 += v442;
                            if (v441 >= v669)
                            {
                              v437 = v737;
                              v13 = (_QWORD **)v727;
                              v223 = v688;
                              goto LABEL_623;
                            }
                          }
                          v443 = 0;
                          while (1)
                          {
                            v444 = Utf8_LengthInBytes((unsigned __int8 *)&v439[v443], 1);
                            v445 = v444;
                            if (v444 == v442 && !strncmp(&v712[v441], &v439[v443], v444))
                              break;
                            v443 += v445;
                            if (v443 >= v440)
                              goto LABEL_621;
                          }
                          v436 = 0;
                          v223 = v688;
                          v446 = *(unsigned __int16 *)&v688[12 * v435 + 10];
                          if (v446 >= v671)
                            v447 = v435;
                          else
                            v447 = v676;
                          v676 = v447;
                          if (v446 <= v671)
                            LOWORD(v446) = v671;
                          v671 = v446;
                          ++v435;
                          v437 = v737;
                          v13 = (_QWORD **)v727;
                          if (v435 < (unsigned __int16)v737)
                            continue;
                          goto LABEL_639;
                        }
                      }
                      v437 = 0;
LABEL_635:
                      v448 = (const char *)v13[25];
                      if (*((_DWORD *)v13 + 38) == 1
                        && (!strcmp(&v448[6 * __dstc + 2], "B") || !strcmp(&v448[6 * __dstc + 2], "X")))
                      {
                        v223[12 * v437] = 65;
                        v223[12 * (unsigned __int16)v737 + 1] = 0;
                      }
                      else
                      {
                        __strcpy_chk();
                      }
                      *(_WORD *)&v223[12 * (unsigned __int16)v737 + 10] = 0;
                      v314 = (unsigned __int16)v737;
                      LOWORD(v737) = v737 + 1;
                      log_OutText((*v13)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"BACKUP NGRAM SOLUTION[%d] \"%s\" %d", v449, v450, v451, v314);
                    }
                  }
                  else if (v299)
                  {
                    v311 = 0;
                    LOWORD(v312) = 0;
                    v313 = 0;
                    LOWORD(v314) = 0;
                    v315 = 1;
LABEL_436:
                    v316 = v312;
                    v317 = &v688[12 * v311];
                    v312 = v311;
                    do
                    {
                      log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM SOLUTION[%d] \"%s\" %d", v296, v297, v298, v312);
                      v318 = *((unsigned __int16 *)v317 + 5);
                      if (v318 == 20000)
                      {
                        v315 = 0;
                        v311 = v312 + 1;
                        v319 = (unsigned __int16)v737;
                        if (v312 + 1 < (unsigned __int16)v737)
                          goto LABEL_436;
                        v316 = v312;
                        goto LABEL_447;
                      }
                      v317 += 12;
                      if (v318 >= v313)
                        LOWORD(v314) = v312;
                      if (v318 > v313)
                        v313 = v318;
                      ++v312;
                      v319 = (unsigned __int16)v737;
                    }
                    while (v312 < (unsigned __int16)v737);
                    if ((v315 & 1) != 0)
                      goto LABEL_642;
LABEL_447:
                    if (!(_DWORD)v319)
                      goto LABEL_454;
                    v320 = v688;
                    v321 = strlen(&v688[12 * v316]);
                    v322 = 0;
                    v323 = 0;
                    v324 = v321;
                    v325 = v321;
                    do
                    {
                      if (!memcmp(v320, &v688[12 * v316], v324) && (unsigned __int16)strlen(v320) > v325)
                      {
                        LOWORD(v314) = v322;
                        v323 = 1;
                      }
                      ++v322;
                      v320 += 12;
                    }
                    while (v319 != v322);
                    if (!v323)
LABEL_454:
                      LOWORD(v314) = v316;
                  }
                  else
                  {
                    LOWORD(v314) = 0;
                  }
LABEL_642:
                  v13 = (_QWORD **)v727;
                  v223 = v688;
                  v452 = &v688[12 * (unsigned __int16)v314];
                  log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM SELECTED SOLUTION[%d] \"%s\" %d", v296, v297, v298, (unsigned __int16)v314);
                  v453 = strlen(*(const char **)__c);
                  v454 = strlen(v452);
                  v369 = posparserGrowStr(v727, (uint64_t *)__c, (unsigned __int16)(v454 + v453 + 1), &v733, 0);
                  if ((v369 & 0x80000000) != 0)
                  {
                    v23 = v694;
                    v227 = v683;
                    goto LABEL_663;
                  }
                  strcat(*(char **)__c, v452);
                  v455 = *(unsigned __int16 *)(a4 + 104 * v659 + 10);
                  v23 = v694;
                  if ((_DWORD)v692 + v660 + 1 == v455)
                  {
                    v456 = *(const char **)__c;
                    v457 = strlen(*(const char **)__c);
                    v458 = v457;
                    v459 = *(unsigned __int16 *)(a4 + 104 * v659 + 8);
                    if (v455 - (_DWORD)v459 != (unsigned __int16)v457
                      || memcmp(*(const void **)__c, &__s[v459], (unsigned __int16)v457))
                    {
                      v463 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v727 + 8), 1, (v458 + 1));
                      v468 = a4 + 104 * v659;
                      *(_QWORD *)(v468 + 64) = v463;
                      v469 = (char **)(v468 + 64);
                      if (!v463)
                      {
                        v224 = 2687508490;
                        log_OutPublic(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 68000, 0, v464, v465, v466, v467, v653);
                        goto LABEL_660;
                      }
                      v470 = posparser_PostProcess(v727, (const char **)__c);
                      v224 = v470;
                      v227 = v683;
                      if ((v470 & 0x80000000) == 0)
                      {
                        v713 = v470;
                        v456 = *(const char **)__c;
                        strcpy(*v469, *(const char **)__c);
                        log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"--> NGRAM WORD SOLUTION \"%s\"", v471, v472, v473, (uint64_t)*v469);
                        goto LABEL_649;
                      }
LABEL_664:
                      v475 = v224;
                      for (i = 8; i != 188; i += 9)
                      {
                        v477 = __s1[i];
                        if (v477)
                        {
                          heap_Free((_QWORD *)(*v13)[1], (uint64_t)v477);
                          __s1[i] = 0;
                        }
                      }
                      if (v227)
                        heap_Free((_QWORD *)(*v13)[1], v227);
                      v80 = __s;
                      POSAndDiacritics = v475;
                      if (v223)
                        heap_Free((_QWORD *)(*v13)[1], (uint64_t)v223);
                      v21 = *(char **)__c;
                      v22 = a5;
                      if ((v475 & 0x80000000) == 0)
                      {
LABEL_673:
                        if (v22)
                        {
                          for (j = 0; j != v22; ++j)
                          {
                            v479 = a4 + 104 * j;
                            v482 = *(unsigned __int16 *)(v479 + 74);
                            v480 = (_WORD *)(v479 + 74);
                            v481 = v482;
                            if (v482)
                            {
                              v483 = 0;
                              v484 = (int *)v23;
                              v485 = v481;
                              do
                              {
                                v486 = *v484;
                                v484 += 8;
                                if (v486 == 1)
                                  ++v483;
                                --v485;
                              }
                              while (v485);
                              *v480 = v481 - v483;
                            }
                            v487 = a4 + 104 * j;
                            v490 = *(unsigned __int16 *)(v487 + 76);
                            v488 = (_WORD *)(v487 + 76);
                            v489 = v490;
                            if (v490)
                            {
                              v491 = 0;
                              v492 = (int *)v23;
                              v493 = v489;
                              do
                              {
                                v494 = *v492;
                                v492 += 8;
                                if (v494 == 1)
                                  ++v491;
                                --v493;
                              }
                              while (v493);
                              *v488 = v489 - v491;
                            }
                          }
                        }
                        if (v732)
                        {
                          v495 = 0;
                          v496 = 0;
                          do
                          {
                            v497 = (_DWORD *)(v23 + 32 * v496);
                            if (*v497 == 1)
                            {
                              v498 = (v495 + 1);
                              if ((unsigned __int16)v732 > v498)
                              {
                                memmove(v497, (const void *)(v23 + 32 * v498), 32 * ((unsigned __int16)v732 - (int)v498));
                                v22 = a5;
                              }
                              --v732;
                            }
                            else
                            {
                              ++v496;
                            }
                            v495 = v496;
                          }
                          while (v496 < (unsigned __int16)v732);
                        }
                        else
                        {
                          v732 = 0;
                        }
                        v678 = v22;
                        if (*((_DWORD *)v13 + 62) == 1)
                          v499 = 32 * (unsigned __int16)v732 + ((unint64_t)v22 << 6) + 32;
                        else
                          v499 = 32 * ((unsigned __int16)v732 + (unint64_t)v22) + 32;
                        v500 = v22;
                        v501 = heap_Realloc((uint64_t *)(*v13)[1], v23, v499);
                        if (v501)
                        {
                          __dstd = (char *)v501;
                          __s1[0] = __s;
                          *(_QWORD *)__s2 = v21;
                          LOWORD(v740) = strlen(__s);
                          if (!v500)
                          {
                            v715 = v21;
                            v615 = __s;
LABEL_781:
                            v616 = strlen(v615);
                            POSAndDiacritics = 0;
                            v614 = __dstd;
                            *((_DWORD *)__dstd + 4) = v616;
                            v204 = a9;
                            v203 = v679;
                            v205 = a10;
                            if (*((_DWORD *)v13 + 62) != 1 || (unsigned __int16)v732 < 2u)
                              goto LABEL_836;
                            v617 = 0;
                            v618 = __dstd + 88;
                            v619 = 2;
                            v620 = 1;
                            do
                            {
                              if (*(_DWORD *)&__dstd[32 * v620] == 59 && *(_DWORD *)&__dstd[32 * v620 + 24] == 5)
                              {
                                if (v620 + 1 >= (unint64_t)(unsigned __int16)v732)
                                  goto LABEL_796;
                                v621 = v618;
                                v622 = v619;
                                while (*((_DWORD *)v621 - 6) != 59 || *(_DWORD *)v621 != 5)
                                {
                                  ++v622;
                                  v621 += 32;
                                  if ((unsigned __int16)v732 == v622)
                                    goto LABEL_796;
                                }
                                if (*(_DWORD *)&__dstd[32 * v622] == 59
                                  && (v623 = &__dstd[32 * v622], *((_DWORD *)v623 + 6) == 5))
                                {
                                  v624 = &__dstd[32 * v620];
                                  v626 = *((_DWORD *)v624 + 4);
                                  v625 = v624 + 16;
                                  v627 = *(v625 - 1);
                                  v628 = *((_DWORD *)v623 + 3);
                                  if (v626 + v627 < v628)
                                    *v625 = v628 - v627;
                                }
                                else
                                {
LABEL_796:
                                  *(_DWORD *)&__dstd[32 * v620 + 16] = *((_DWORD *)__dstd + 3)
                                                                     + v616
                                                                     - *(_DWORD *)&__dstd[32 * v620 + 12];
                                }
                                v617 = 1;
                              }
                              ++v620;
                              ++v619;
                              v618 += 32;
                            }
                            while (v620 != (unsigned __int16)v732);
                            v629 = __dstd + 44;
                            v630 = (unsigned __int16)v732 - 1;
                            do
                            {
                              if (*(v629 - 3) == 59)
                                *v629 -= *((_DWORD *)__dstd + 3);
                              v629 += 8;
                              --v630;
                            }
                            while (v630);
                            if (v617 != 1)
                            {
                              POSAndDiacritics = 0;
                              goto LABEL_836;
                            }
                            *(_WORD *)v738 = 0;
                            LOWORD(v736) = 0;
                            LOWORD(__c[0]) = 0;
                            v737 = 0;
                            *(_DWORD *)__src = 0;
                            v631 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, char *))v13[4][13])(a2, a3, 3, a7, v738);
                            if ((v631 & 0x80000000) != 0)
                            {
LABEL_844:
                              v614 = __dstd;
                            }
                            else
                            {
                              v632 = *(_WORD *)v738;
                              if (!*(_WORD *)v738)
                              {
LABEL_827:
                                v648 = 1;
                                v649 = 1;
                                v614 = __dstd;
                                do
                                {
                                  v650 = &v614[32 * v649];
                                  if (*(_DWORD *)v650 == 59)
                                  {
                                    v651 = (v648 + 1);
                                    if ((unsigned __int16)v732 > v651)
                                    {
                                      memmove(v650, &v614[32 * v651], 32 * ((unsigned __int16)v732 - (int)v651));
                                      v614 = __dstd;
                                    }
                                    LOWORD(v732) = v732 - 1;
                                  }
                                  else
                                  {
                                    ++v649;
                                  }
                                  v648 = v649;
                                }
                                while (v649 < (unsigned __int16)v732);
                                POSAndDiacritics = v631;
                                goto LABEL_836;
                              }
                              LOWORD(v633) = 1;
                              while (1)
                              {
                                v634 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char ***, char *))v13[4][21])(a2, a3, v632, 1, 1, &v736, (char *)&v737 + 2);
                                if ((v634 & 0x80000000) != 0
                                  || (v634 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))v13[4][21])(a2, a3, *(unsigned __int16 *)v738, 2, 1, __c, (char *)&v737 + 2), (v634 & 0x80000000) != 0)|| (v634 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, char *, char *))v13[4][21])(a2, a3, *(unsigned __int16 *)v738, 0, 1, __src, (char *)&v737 + 2), (v634 & 0x80000000) != 0))
                                {
LABEL_843:
                                  v631 = v634;
                                  goto LABEL_844;
                                }
                                if ((unsigned __int16)v633 >= (unsigned __int16)v732)
                                {
                                  v637 = a2;
                                  v636 = a3;
                                }
                                else
                                {
                                  v633 = (unsigned __int16)v633;
                                  v635 = &__dstd[32 * (unsigned __int16)v633];
                                  v637 = a2;
                                  v636 = a3;
                                  while (1)
                                  {
                                    v638 = *(_DWORD *)v635;
                                    v635 += 32;
                                    if (v638 == 59)
                                      break;
                                    if ((unsigned __int16)v732 == ++v633)
                                    {
                                      LOWORD(v633) = v732;
                                      break;
                                    }
                                  }
                                }
                                if (*(_DWORD *)&__dstd[32 * (unsigned __int16)v633] == 59)
                                {
                                  v639 = (unsigned __int16)v736;
                                  v640 = &__dstd[32 * (unsigned __int16)v633];
                                  if (*((_DWORD *)v640 + 1) == (unsigned __int16)v736)
                                  {
                                    v641 = LOWORD(__c[0]);
                                    if (*((_DWORD *)v640 + 2) == LOWORD(__c[0]))
                                    {
                                      v642 = &__dstd[32 * (unsigned __int16)v633];
                                      v645 = *((_DWORD *)v642 + 3);
                                      v644 = (int *)(v642 + 12);
                                      v643 = v645;
                                      if (v645 != (unsigned __int16)v736)
                                      {
                                        LOWORD(v736) = v643;
                                        v634 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char ***, int *))v13[4][20])(v637, v636, *(unsigned __int16 *)v738, 1, 1, &v736, &v737);
                                        if ((v634 & 0x80000000) != 0)
                                          goto LABEL_843;
                                        v641 = LOWORD(__c[0]);
                                        v639 = *v644;
                                        v637 = a2;
                                        v636 = a3;
                                      }
                                      v646 = *(_DWORD *)&__dstd[32 * (unsigned __int16)v633 + 16] + v639;
                                      if (v646 != v641)
                                      {
                                        LOWORD(__c[0]) = v646;
                                        v647 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))v13[4][20])(v637, v636, *(unsigned __int16 *)v738, 2, 1, __c, &v737);
                                        v614 = __dstd;
                                        v637 = a2;
                                        v636 = a3;
                                        if ((v647 & 0x80000000) != 0)
                                          break;
                                      }
                                    }
                                  }
                                }
                                v631 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, char *))v13[4][15])(v637, v636, *(unsigned __int16 *)v738, v738);
                                if ((v631 & 0x80000000) != 0)
                                  goto LABEL_844;
                                LOWORD(v633) = v633 + 1;
                                v632 = *(_WORD *)v738;
                                if (!*(_WORD *)v738)
                                  goto LABEL_827;
                              }
                              v631 = v647;
                            }
                            v80 = __s;
                            POSAndDiacritics = v631;
LABEL_837:
                            v206 = (uint64_t)v614;
                            goto LABEL_838;
                          }
                          v685 = 0;
                          v690 = 0;
                          v507 = 0;
                          LOWORD(v693) = 0;
                          v508 = 0;
                          v509 = __dstd;
                          v730 = v21;
                          while (1)
                          {
                            v510 = a4 + 104 * (unsigned __int16)v508;
                            v511 = *(_DWORD *)(v510 + 4);
                            LODWORD(v506) = *(_DWORD *)v510;
                            v720 = v506;
                            v512 = *(_DWORD *)(v510 + 12);
                            v515 = *(unsigned __int16 *)(v510 + 8);
                            v514 = (unsigned __int16 *)(v510 + 8);
                            v513 = v515;
                            v706 = v511;
                            v702 = *((_DWORD *)v509 + 3);
                            v699 = v515;
                            if (v512 == 1)
                              break;
                            v527 = a4 + 104 * (unsigned __int16)v508;
                            v529 = *(unsigned __int16 *)(v527 + 72);
                            v528 = (unsigned __int16 *)(v527 + 72);
                            if (v529 == 9999)
                            {
                              v530 = a4 + 104 * (unsigned __int16)v508;
                              v533 = *(const char **)(v530 + 64);
                              v532 = (const char **)(v530 + 64);
                              v531 = v533;
                              if (!v533)
                              {
                                v608 = a4 + 104 * (unsigned __int16)v508;
                                v610 = *(_WORD *)(v608 + 10);
                                v609 = (unsigned __int16 *)(v608 + 10);
                                v13 = (_QWORD **)v727;
                                v519 = posparserGrowStr(v727, (uint64_t *)__s2, (unsigned __int16)(v610 - v513), &v733, 0);
                                v520 = *(char **)__s2;
                                if ((v519 & 0x80000000) != 0)
                                {
LABEL_778:
                                  v715 = v520;
                                  v203 = v679;
LABEL_779:
                                  v205 = a10;
                                  v204 = a9;
                                  POSAndDiacritics = v519;
                                  goto LABEL_780;
                                }
                                v521 = __s1[0];
                                strncpy(*(char **)__s2, &__s1[0][*v514], *v609 - (unint64_t)*v514);
                                v520[*v609 - *v514] = 0;
                                log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"PROCESSING word [%d] %d,%d \"%s\"", v611, v612, v613, v507);
                                goto LABEL_707;
                              }
                              v534 = strlen(v531);
                              v13 = (_QWORD **)v727;
                              v519 = posparserGrowStr(v727, (uint64_t *)__s2, v534, &v733, 0);
                              v520 = *(char **)__s2;
                              if ((v519 & 0x80000000) != 0)
                                goto LABEL_778;
                              strcpy(*(char **)__s2, *v532);
                              log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"PROCESSING ngram word [%d] %d,%d \"%s\"", v535, v536, v537, v507);
                              v525 = strlen(v520)
                                   - *(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v508 + 10)
                                   + *v514;
                              posparser_undoEmbeddedRules(v727, v520);
                              v526 = 1;
                              v521 = __s1[0];
                              v690 = v508;
                              LOWORD(v693) = v508;
                            }
                            else
                            {
                              v538 = a4 + 104 * (unsigned __int16)v508;
                              v540 = *(const char **)(v538 + 16);
                              v539 = (const char **)(v538 + 16);
                              v541 = strlen(v540);
                              v519 = posparserGrowStr(v727, (uint64_t *)__s2, v541, &v733, 0);
                              v542 = *(const char **)__s2;
                              if ((v519 & 0x80000000) != 0)
                              {
                                v715 = *(char **)__s2;
                                v203 = v679;
                                v13 = (_QWORD **)v727;
                                goto LABEL_779;
                              }
                              strcpy(*(char **)__s2, *v539);
                              v543 = *(unsigned __int16 *)(a4 + 104 * *v528 + 10);
                              v521 = __s1[0];
                              v544 = strlen(__s1[0]);
                              if (v544 < v543)
                                LOWORD(v543) = v544;
                              log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"PROCESSING dict word [%d-%d] %d,%d \"%s\"", v545, v546, v547, v507);
                              v548 = strlen(v542) - (unsigned __int16)v543;
                              v520 = (char *)v542;
                              v525 = v548 + *v514;
                              v526 = 1;
                              v690 = v508;
                              v693 = *v528;
                              v13 = (_QWORD **)v727;
                              v508 = v693;
                            }
LABEL_716:
                            v549 = v525 + strlen(v521);
                            v519 = posparserGrowStr((uint64_t)v13, (uint64_t *)__s1, v549, &v740, 64);
                            if ((v519 & 0x80000000) != 0)
                              goto LABEL_778;
                            v695 = v508;
                            if (v525 << 16)
                            {
                              v714 = v520;
                              v550 = a4 + 104 * (unsigned __int16)v693;
                              v553 = *(unsigned __int16 *)(v550 + 10);
                              v551 = (_WORD *)(v550 + 10);
                              v552 = v553;
                              v554 = __s1[0];
                              v555 = strlen(__s1[0]);
                              if (v555 > v553)
                                memmove(&__s1[0][v552 + (__int16)v525], &__s1[0][v552], v555 - v552);
                              v556 = a4 + 104 * v690;
                              v558 = *(unsigned __int16 *)(v556 + 8);
                              v557 = (unsigned __int16 *)(v556 + 8);
                              v559 = strlen(v714);
                              memcpy(&v554[v558], v714, v559);
                              v554[v549] = 0;
                              *v551 += v525;
                              v560 = a5;
                              if (a5 > (unsigned __int16)(v693 + 1))
                              {
                                v561 = (unsigned __int16)(v693 + 1) + 1;
                                v562 = (_WORD *)(a4 + 10 + 104 * (unsigned __int16)(v693 + 1));
                                do
                                {
                                  *(v562 - 1) += v525;
                                  *v562 += v525;
                                  v562 += 52;
                                  v170 = a5 == (unsigned __int16)v561++;
                                }
                                while (!v170);
                              }
                              v563 = __dstd;
                              v520 = v714;
                              if ((unsigned __int16)v732 >= 2u)
                              {
                                v564 = *((_DWORD *)__dstd + 3);
                                v565 = *v557;
                                v566 = (unsigned __int16)v732 - 1;
                                v567 = (int *)(__dstd + 44);
                                do
                                {
                                  v568 = (unsigned __int16)(*v567 - v564);
                                  if (v568 >= v565)
                                  {
                                    v569 = *v567 + (__int16)v525;
                                    if (v568 < v552)
                                      v569 = v564 + v565;
                                    *v567 = v569;
                                  }
                                  v567 += 8;
                                  --v566;
                                }
                                while (v566);
                              }
                            }
                            else
                            {
                              v560 = a5;
                              v563 = __dstd;
                              if (v526)
                              {
                                v570 = strlen(v520);
                                memcpy(&__s1[0][*(unsigned __int16 *)(a4 + 104 * v690 + 8)], v520, v570);
                                v563 = __dstd;
                                v560 = a5;
                              }
                            }
                            v571 = v702 + v699;
                            v572 = a4 + 104 * (unsigned __int16)v695;
                            v573 = *(unsigned __int16 *)(v572 + 74);
                            if (*(_WORD *)(v572 + 74))
                            {
                              v574 = &v563[32 * v573];
                              LODWORD(v573) = *((_DWORD *)v574 + 3) - v571;
                              *((_DWORD *)v574 + 3) = v571;
                            }
                            v13 = (_QWORD **)v727;
                            v21 = v730;
                            if (*(_WORD *)(a4 + 104 * (unsigned __int16)v695 + 76))
                            {
                              v575 = &v563[32 * *(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v695 + 76)];
                              *((_DWORD *)v575 + 3) += v573;
                            }
                            if (v706)
                            {
                              if ((unsigned __int16)v732 < 2u)
                              {
                                LOWORD(v577) = 1;
                              }
                              else
                              {
                                v576 = (unsigned int *)(__dstd + 44);
                                v577 = 1;
                                while (1)
                                {
                                  v578 = *v576;
                                  v576 += 8;
                                  if (v571 < v578)
                                    break;
                                  if ((unsigned __int16)v732 == ++v577)
                                  {
                                    LOWORD(v577) = v732;
                                    break;
                                  }
                                }
                              }
                              v579 = v720;
                              DWORD1(v579) = v706;
                              v721 = v579;
                              v580 = (_WORD *)(a4 + 76);
                              v581 = v678;
                              do
                              {
                                v582 = (unsigned __int16)*(v580 - 1);
                                if (v582 >= (unsigned __int16)v577)
                                  *(v580 - 1) = v582 + 1;
                                v583 = (unsigned __int16)*v580;
                                if (v583 >= (unsigned __int16)v577)
                                  *v580 = v583 + 1;
                                v580 += 52;
                                --v581;
                              }
                              while (v581);
                              v584 = &v563[32 * (unsigned __int16)v577];
                              memmove(&v563[32 * (unsigned __int16)v577 + 32], v584, 32 * ((unsigned __int16)v732 - (unsigned __int16)v577));
                              *(_DWORD *)v584 = 1;
                              v506 = v721;
                              *(_QWORD *)(v584 + 4) = v721;
                              *((_DWORD *)v584 + 3) = v571;
                              ++v732;
                              *((_QWORD *)v584 + 2) = 0;
                              *((_QWORD *)v584 + 3) = v685;
                              v560 = a5;
                            }
                            if (*(_DWORD *)(v727 + 248) != 1)
                              goto LABEL_769;
                            v585 = a4 + 104 * (unsigned __int16)v695;
                            v588 = *(const char **)(v585 + 40);
                            v587 = (const char **)(v585 + 40);
                            v586 = v588;
                            v509 = __dstd;
                            if (v588)
                            {
                              v589 = *(_QWORD *)v572;
                              v590 = *((_DWORD *)__dstd + 3);
                              v591 = *(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v695 + 8);
                              v592 = strlen(v586);
                              v593 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)v727 + 8), 1, (v592 + 1));
                              if (!v593)
                              {
                                v715 = v520;
                                POSAndDiacritics = 2687508490;
                                log_OutPublic(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 68000, 0, v594, v595, v596, v597, v658);
                                v204 = a9;
                                v203 = v679;
                                v205 = a10;
LABEL_780:
                                v614 = __dstd;
LABEL_836:
                                v80 = __s1[0];
                                v21 = v715;
                                goto LABEL_837;
                              }
                              v598 = v590 + v591;
                              v685 = v593;
                              strcpy(v593, *v587);
                              if ((unsigned __int16)v732 < 2u)
                              {
                                LOWORD(v600) = 1;
                                v601 = __dstd;
                              }
                              else
                              {
                                v599 = (unsigned int *)(__dstd + 44);
                                v600 = 1;
                                v601 = __dstd;
                                while (1)
                                {
                                  v602 = *v599;
                                  v599 += 8;
                                  if (v598 < v602)
                                    break;
                                  if ((unsigned __int16)v732 == ++v600)
                                  {
                                    LOWORD(v600) = v732;
                                    break;
                                  }
                                }
                              }
                              v603 = &v601[32 * (unsigned __int16)v600];
                              memmove(&v601[32 * (unsigned __int16)v600 + 32], v603, 32 * ((unsigned __int16)v732 - (unsigned __int16)v600));
                              *(_DWORD *)v603 = 58;
                              *(_QWORD *)(v603 + 4) = v589;
                              *((_DWORD *)v603 + 3) = v598;
                              v604 = (_WORD *)(a4 + 76);
                              v605 = v678;
                              *((_QWORD *)v603 + 2) = 0;
                              *((_QWORD *)v603 + 3) = v685;
                              v560 = a5;
                              do
                              {
                                v606 = (unsigned __int16)*(v604 - 1);
                                if (v606 >= (unsigned __int16)v600)
                                  *(v604 - 1) = v606 + 1;
                                v607 = (unsigned __int16)*v604;
                                if (v607 >= (unsigned __int16)v600)
                                  *v604 = v607 + 1;
                                v604 += 52;
                                --v605;
                              }
                              while (v605);
                              ++v732;
LABEL_769:
                              v509 = __dstd;
                            }
                            v508 = v695 + 1;
                            v507 = (unsigned __int16)(v695 + 1);
                            if (v507 >= v560)
                            {
                              v715 = v520;
                              v615 = __s1[0];
                              goto LABEL_781;
                            }
                          }
                          v516 = a4 + 104 * (unsigned __int16)v508;
                          v518 = *(_WORD *)(v516 + 10);
                          v517 = (unsigned __int16 *)(v516 + 10);
                          v519 = posparserGrowStr((uint64_t)v13, (uint64_t *)__s2, (unsigned __int16)(v518 - v513), &v733, 0);
                          v520 = *(char **)__s2;
                          if ((v519 & 0x80000000) != 0)
                            goto LABEL_778;
                          v521 = __s1[0];
                          strncpy(*(char **)__s2, &__s1[0][*v514], *v517 - (unint64_t)*v514);
                          v520[*v517 - *v514] = 0;
                          log_OutText((*v13)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"PROCESSING VOWELLED word [%d] %d,%d \"%s\"", v522, v523, v524, v507);
LABEL_707:
                          v525 = 0;
                          v526 = 0;
                          goto LABEL_716;
                        }
                        POSAndDiacritics = 2687508490;
                        log_OutPublic((*v13)[4], (uint64_t)"POSPARSER", 68000, 0, v502, v503, v504, v505, v653);
LABEL_775:
                        v206 = v23;
                        v204 = a9;
                        v203 = v679;
                        v205 = a10;
                        v80 = __s;
                        goto LABEL_838;
                      }
LABEL_776:
                      v206 = v23;
                      v204 = a9;
                      v203 = v679;
                      v205 = a10;
                      goto LABEL_838;
                    }
                    log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"--> NGRAM WORD SOLUTION \"%s\" (unchanged)", v460, v461, v462, (uint64_t)v456);
                    v713 = 0;
                    v227 = v683;
LABEL_649:
                    v719 = (v719 + 1);
                    *v456 = 0;
                    v226 = (char *)__dstc;
                    v474 = v705;
                    v224 = v713;
                  }
                  else
                  {
                    v224 = 0;
                    v227 = v683;
                    v226 = (char *)__dstc;
                    v474 = v705;
                  }
                  if (*v670 == 32
                    && *(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v719 + 8) > v474)
                  {
                    **(_BYTE **)__c = 0;
                  }
                  goto LABEL_654;
                }
                v282 = Utf8_LengthInBytes(v670, 1);
                v283 = v282;
                if (v237)
                {
                  if ((v282 & 0xFFFE) != 0)
                    v284 = v282;
                  else
                    v284 = 1;
                  __strncpy_chk();
                  if ((_WORD)v231)
                  {
                    v288 = (unsigned __int16)v231;
                    v289 = v283;
                    if ((v283 & 0xFFFE) == 0)
                      v289 = 1;
                    v290 = &v223[v289];
                    v291 = (char *)&v740;
                    do
                    {
                      v292 = *v291++;
                      v290[12 * (unsigned __int16)v737] = v292;
                      ++v290;
                      --v288;
                    }
                    while (v288);
                  }
                  v223[12 * (unsigned __int16)v737 + v284 + (unsigned __int16)v231] = 0;
                  *(_WORD *)&v223[12 * (unsigned __int16)v737 + 10] = 20000;
                  v293 = (*v13)[4];
                  v294 = (uint64_t)&v223[12 * (unsigned __int16)v737];
                }
                else
                {
                  if (v282)
                    LOWORD(v284) = v282;
                  else
                    LOWORD(v284) = 1;
                  __strncpy_chk();
                  v223[12 * (unsigned __int16)v737 + (unsigned __int16)v284] = 0;
                  v295 = &v223[12 * (unsigned __int16)v737 + 10];
                  if (!v272)
                  {
                    *(_WORD *)v295 = 0;
                    log_OutText((*v13)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"(dia) ADD SOLUTION \"%s\"(%u)", v285, v286, v287, (uint64_t)&v223[12 * (unsigned __int16)v737]);
                    goto LABEL_456;
                  }
                  *(_WORD *)v295 = 20000;
                  v293 = (*v13)[4];
                  v294 = (uint64_t)&v223[12 * (unsigned __int16)v737];
                }
                log_OutText(v293, (uint64_t)"POSPARSER", 5, 0, (uint64_t)"(partial dia) ADD SOLUTION \"%s\"(%u)", v285, v286, v287, v294);
LABEL_456:
                v227 = v682;
                v326 = 0;
                v660 = v284 - 1;
                LOWORD(v737) = v737 + 1;
                v327 = (unint64_t)__s;
                v300 = v663;
                while (1)
                {
                  if (v326 >= *((unsigned __int8 *)v13 + 96))
                    goto LABEL_606;
                  v328 = (*v13)[4];
                  if (v326)
                    log_OutText(v328, (uint64_t)"POSPARSER", 5, 0, (uint64_t)"!!BACKING OFF TO DICT %d=\"%s\"", v296, v297, v298, v326);
                  else
                    log_OutText(v328, (uint64_t)"POSPARSER", 5, 0, (uint64_t)"!!USING DICT %d=\"%s\"", v296, v297, v298, 0);
                  v329 = *((unsigned __int8 *)v13[10] + v326);
                  if (!*((_BYTE *)v13[10] + v326))
                  {
                    v668 = 0;
                    goto LABEL_605;
                  }
                  v668 = 0;
                  v672 = v326;
                  do
                  {
                    v711 = (char *)v329;
                    v684 = (const char *)v227;
                    v689 = v223;
                    v746 = 0u;
                    memset(v747, 0, sizeof(v747));
                    *(_OWORD *)__s2 = 0u;
                    __memset_chk();
                    LOWORD(v333) = v705;
                    if ((v705 & 0x8000) != 0)
                    {
                      LOWORD(v335) = 0;
                      v334 = 0;
                      goto LABEL_490;
                    }
                    v334 = 0;
                    v335 = 0;
                    v336 = v719;
                    v337 = (unsigned __int16)v711;
                    do
                    {
                      v338 = v337--;
                      v339 = (v338 - 1);
                      while (1)
                      {
                        if ((v336 & 0x8000) != 0)
                        {
LABEL_480:
                          CurrentUtf8Offset = utf8_GetCurrentUtf8Offset(v327, (unsigned __int16)v333);
                          v343 = v327;
                          v344 = CurrentUtf8Offset;
                          v345 = (unsigned __int8 *)(v343 + CurrentUtf8Offset);
                          v346 = Utf8_LengthInBytes(v345, 1);
                          if ((v346 & 0xFFFE) != 0)
                          {
                            v347 = v346;
                            __strcpy_chk();
                            insertStringPart(__src, __s2, (const char *)v345, v337, (unsigned __int16)v347);
                            v335 = v335 + v347 - 1;
                          }
                          else
                          {
                            __s2[v339] = *v345;
                          }
                          LOWORD(v333) = v344;
                          goto LABEL_484;
                        }
                        v340 = v336;
                        v341 = (unsigned __int16 *)(a4 + 10 + 104 * v336);
                        while (*(v341 - 1) > (unsigned __int16)v333
                             || *v341 <= (unsigned __int16)v333)
                        {
                          v341 -= 52;
                          v307 = v340-- <= 0;
                          if (v307)
                            goto LABEL_480;
                        }
                        v336 = v340;
                        if (*(_DWORD *)(a4 + 104 * (unsigned __int16)v340 + 80) != 1)
                          break;
                        if (*(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v340 + 8) == (unsigned __int16)v333)
                        {
                          PunctClassChar = "α";
                          goto LABEL_488;
                        }
LABEL_478:
                        LOWORD(v333) = v333 - 1;
                        if ((v333 & 0x8000) != 0)
                          goto LABEL_490;
                      }
                      if (*(_DWORD *)(a4 + 104 * (unsigned __int16)v340 + 84) != 1)
                        goto LABEL_480;
                      if (*(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v340 + 8) != (unsigned __int16)v333)
                        goto LABEL_478;
                      PunctClassChar = (const char *)getPunctClassChar(v727, *(char *)(v327 + (__int16)v333));
LABEL_488:
                      __strcpy_chk();
                      insertString(__src, __s2, PunctClassChar, v337);
                      ++v335;
LABEL_484:
                      ++v334;
                      v327 = (unint64_t)__s;
                      if (!v337)
                        break;
                      v333 = (__int16)(v333 - 1);
                    }
                    while ((v333 & 0x80000000) == 0);
LABEL_490:
                    v349 = 0;
                    v13 = (_QWORD **)v727;
                    v227 = (uint64_t)v684;
                    v223 = v689;
                    do
                    {
                      if (__s2[v349] != 64)
                        break;
                      ++v349;
                    }
                    while (v349 != 14);
                    v350 = (unsigned __int16)v349 + v334;
                    v326 = v672;
                    v351 = *(unsigned __int8 *)(*(_QWORD *)(v727 + 80) + v672);
                    v352 = (unsigned __int16)v349 + 1;
                    if (v350 != (_DWORD)v711 || v350 == v351 || v352 >= v351)
                    {
                      log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM IGNORING szUnVoweledNgramStr = \"%s\"", v330, v331, v332, (uint64_t)__s2);
                      goto LABEL_602;
                    }
                    v355 = Utf8_LengthInBytes(v670, 1);
                    v356 = v705 + v355;
                    v357 = v351 - (_WORD)v711;
                    v358 = v351 == (_DWORD)v711 || v701 <= (__int16)(v705 + v355);
                    v359 = __s;
                    v360 = a5;
                    if (v358)
                      goto LABEL_507;
                    v374 = 0;
                    v375 = 0;
                    v698 = v335 + (_WORD)v711;
                    v677 = v357;
                    v376 = v719;
                    v377 = (_DWORD)v711 + (unsigned __int16)v335;
                    while (v701 > (__int16)v356)
                    {
                      v378 = (__int16)v356;
                      v379 = v698 + v374;
                      while (2)
                      {
                        if (v360 <= (__int16)v376)
                          goto LABEL_535;
                        v380 = v376;
                        while (*(unsigned __int16 *)(a4 + 104 * (__int16)v380 + 8) > (unsigned __int16)v356
                             || *(unsigned __int16 *)(a4 + 104 * (__int16)v380 + 10) <= (unsigned __int16)v356)
                        {
                          v380 = (v380 + 1);
                          if (v360 <= (__int16)v380)
                            goto LABEL_535;
                        }
                        if (*(_DWORD *)(a4 + 104 * (unsigned __int16)v380 + 80) == 1)
                        {
                          if (v378 == *(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v380 + 8))
                          {
                            __strcpy_chk();
                            v381 = (unsigned __int16)(v375 + v379);
                            v382 = "α";
LABEL_543:
                            insertString(__src, __s2, v382, v381);
                            v360 = a5;
                            ++v375;
                            v376 = v380;
                            goto LABEL_539;
                          }
LABEL_532:
                          v378 = (__int16)++v356;
                          v376 = v380;
                          if (v701 <= (__int16)v356)
                            goto LABEL_507;
                          continue;
                        }
                        break;
                      }
                      if (*(_DWORD *)(a4 + 104 * (unsigned __int16)v380 + 84) == 1)
                      {
                        if (v378 == *(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v380 + 8))
                        {
                          v386 = (const char *)getPunctClassChar(v727, v359[(__int16)v356]);
                          __strcpy_chk();
                          v381 = (unsigned __int16)(v375 + v379);
                          v382 = v386;
                          v359 = __s;
                          goto LABEL_543;
                        }
                        goto LABEL_532;
                      }
                      v376 = v380;
LABEL_535:
                      v383 = (unsigned __int8 *)&v359[(__int16)v356];
                      v384 = Utf8_LengthInBytes(v383, 1);
                      if ((v384 & 0xFFFE) != 0)
                      {
                        v385 = v384;
                        __strcpy_chk();
                        insertStringPart(__src, __s2, (const char *)v383, (unsigned __int16)(v375 + v379), (unsigned __int16)v385);
                        v375 += v385 - 1;
                        v356 += v385 - 1;
                      }
                      else
                      {
                        __s2[(v377 + v374) + (unint64_t)(unsigned __int16)v375] = *v383;
                      }
                      v359 = __s;
                      v360 = a5;
LABEL_539:
                      if (++v374 < v677 && v701 > (__int16)++v356)
                        continue;
                      break;
                    }
LABEL_507:
                    if (__s2[0] == 32)
                    {
                      __strcpy_chk();
                      insertString(__src, __s2, "Φ", 0);
                    }
                    v13 = (_QWORD **)v727;
                    v23 = v694;
                    v227 = (uint64_t)v684;
                    v223 = v689;
                    if (__s2[strlen(__s2) - 1] == 32)
                    {
                      __strcpy_chk();
                      v364 = strlen(__s2);
                      insertString(__src, __s2, "Φ", (unsigned __int16)(v364 - 1));
                    }
                    log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM useLetterNum = %d szUnVoweledNgramStr = \"%s\"", v361, v362, v363, (uint64_t)v711);
                    if (!(_WORD)v661)
                    {
LABEL_515:
                      HIWORD(v737) = -1;
                      v369 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char *, char ***, char *, unsigned __int8 *, _QWORD))(*(_QWORD *)(v727 + 24) + 152))(*(_QWORD *)(v727 + 8), *(_QWORD *)(v727 + 16), *(_QWORD *)(*(_QWORD *)(v727 + 88) + 8 * v672), __s2, &v736, (char *)&v737 + 2, &v735, *(unsigned __int8 *)(v727 + 68));
                      if ((v369 & 0x80000000) == 0)
                      {
                        if (!HIWORD(v737))
                        {
                          HIWORD(v737) = 1;
                          log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM DICT LOOKUP \"%s\" FAILS", v370, v371, v372, (uint64_t)__s2);
                          v373 = "FAIL_DICT_LOOKUP";
                          goto LABEL_555;
                        }
                        v373 = *v736;
                        log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM DICT LOOKUP \"%s\" SUCCEEDS \"%s\"", v370, v371, v372, (uint64_t)__s2);
                        v326 = v672;
                        if (v373)
                          goto LABEL_555;
                        goto LABEL_602;
                      }
LABEL_663:
                      v224 = v369;
                      goto LABEL_664;
                    }
                    v365 = (unsigned __int16)v661;
                    while (strcmp((const char *)&__s1[9 * (v365 - 1)], __s2))
                    {
                      if (!(_WORD)--v365)
                        goto LABEL_515;
                    }
                    v387 = (const char **)&__s1[9 * (v365 - 1) + 8];
                    log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM FOUND \"%s\" in cache, cachedDictStr = \"%s\"", v366, v367, v368, (uint64_t)__s2);
                    v388 = *v387;
                    if (!strcmp(*v387, "FAIL_DICT_LOOKUP"))
                    {
                      HIWORD(v737) = 0;
                      log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM DICT LOOKUP \"%s\" FAILS (CACHED)", v389, v390, v391, (uint64_t)__s2);
                      goto LABEL_601;
                    }
                    if (!v684)
                    {
                      v400 = strlen(v388);
                      v398 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)v727 + 8), 1, (v400 + 1));
                      v227 = (uint64_t)v398;
                      if (v398)
                      {
                        v399 = *v387;
                        goto LABEL_554;
                      }
LABEL_661:
                      v224 = 2687508490;
                      log_OutPublic(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 68000, 0, v394, v395, v396, v397, v657);
                      goto LABEL_664;
                    }
                    v392 = strlen(v388);
                    if (v392 <= strlen(v684))
                      goto LABEL_549;
                    v393 = heap_Realloc(*(uint64_t **)(*(_QWORD *)v727 + 8), (uint64_t)v684, (v392 + 1));
                    if (!v393)
                      goto LABEL_661;
                    v388 = *v387;
                    v227 = v393;
LABEL_549:
                    v398 = (char *)v227;
                    v399 = v388;
LABEL_554:
                    strcpy(v398, v399);
                    v373 = (char *)v227;
LABEL_555:
                    v683 = v227;
                    v401 = v668;
                    if (strcmp(v373, "FAIL_DICT_LOOKUP"))
                      v401 = 1;
                    if (!HIWORD(v737))
                    {
                      v402 = v661;
                      goto LABEL_566;
                    }
                    v402 = v661;
                    v403 = (unsigned __int16)v737;
                    if ((unsigned __int16)v661 >= 0x14u && (unsigned __int16)v737 <= 4u)
                    {
                      heap_Free(*(_QWORD **)(*(_QWORD *)v727 + 8), v743);
                      v743 = 0;
                      __memmove_chk();
                      v402 = (v661 - 1);
                    }
                    if ((unsigned __int16)v402 <= 0x13u && v403 <= 4)
                    {
                      __strcpy_chk();
                      v404 = strlen(v373);
                      v405 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)v727 + 8), 1, (v404 + 1));
                      __s1[9 * (unsigned __int16)v402 + 8] = v405;
                      if (v405)
                      {
                        strcpy(v405, v373);
                        v402 = (v402 + 1);
                        goto LABEL_566;
                      }
LABEL_659:
                      v224 = 2687508490;
                      v13 = (_QWORD **)v727;
                      log_OutPublic(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 68000, 0, v406, v407, v408, v409, v657);
                      v23 = v694;
LABEL_660:
                      v227 = v683;
                      goto LABEL_664;
                    }
LABEL_566:
                    v661 = v402;
                    v668 = v401;
                    if (v373 != "FAIL_DICT_LOOKUP")
                    {
                      v410 = strchr(v373, v735);
                      if (v410)
                      {
                        v411 = v410;
                        *v410 = 0;
                        v412 = atoi(v373);
                        do
                        {
                          if (v411[1] == v735)
                            break;
                          v413 = (uint64_t)v223;
                          v414 = strchr(v411 + 1, v735);
                          v415 = v414;
                          if (v414)
                            *v414 = 0;
                          v416 = strlen(v411 + 1);
                          v417 = 0;
                          if ((_WORD)v711 == 1)
                          {
                            v418 = v670;
                          }
                          else
                          {
                            v418 = v670;
                            if (v416)
                            {
                              v419 = 1;
                              v420 = (_DWORD)v711 - 1;
                              do
                              {
                                v420 -= v411[v419] == 59;
                                v421 = v419 + 1;
                                if ((_WORD)v420)
                                  v422 = v419 >= v416;
                                else
                                  v422 = 1;
                                ++v419;
                              }
                              while (!v422);
                              v417 = v421 - 1;
                            }
                          }
                          v423 = &v411[v417 + 1];
                          v424 = strchr(v423, 59);
                          if (v424)
                            *v424 = 0;
                          v739 = 0;
                          *(_QWORD *)v738 = 0;
                          v425 = Utf8_LengthInBytes(v418, 1);
                          if (!strncmp(v423, "√", 3uLL))
                          {
                            __strcpy_chk();
                          }
                          else
                          {
                            if ((v425 & 0xFFFE) == 0)
                              v425 = 1;
                            __strncpy_chk();
                            v660 = v425 - 1;
                            __strcat_chk();
                          }
                          log_OutText(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"ADD SOLUTION \"%s\"(%u)", v426, v427, v428, (uint64_t)v738);
                          v429 = (unsigned __int16)v737;
                          if ((_WORD)v737)
                          {
                            v430 = 0;
                            v431 = 12 * (unsigned __int16)v737;
                            while (strcmp((const char *)(v413 + v430), v738))
                            {
                              v430 += 12;
                              if (v431 == v430)
                                goto LABEL_593;
                            }
                            v434 = (int *)(v413 + v430 + 10);
                            v433 = v412;
                            v223 = (char *)v413;
                          }
                          else
                          {
LABEL_593:
                            if (v429 <= v667)
                            {
                              v223 = (char *)v413;
                            }
                            else
                            {
                              v223 = (char *)v413;
                              v432 = heap_Realloc(*(uint64_t **)(*(_QWORD *)v727 + 8), v413, 12 * (unsigned __int16)(v667 + 10) + 12);
                              if (!v432)
                                goto LABEL_659;
                              v667 += 10;
                              v223 = (char *)v432;
                            }
                            __strcpy_chk();
                            *(_WORD *)&v223[12 * (unsigned __int16)v737 + 10] = v412;
                            v433 = 1;
                            v434 = &v737;
                          }
                          *(_WORD *)v434 += v433;
                          v411 = v415;
                        }
                        while (v415);
                      }
                    }
                    v13 = (_QWORD **)v727;
                    v227 = v683;
LABEL_601:
                    v326 = v672;
LABEL_602:
                    v329 = ((_DWORD)v711 - 1);
                    v327 = (unint64_t)__s;
                  }
                  while ((_WORD)v711 != 1);
LABEL_605:
                  ++v326;
                  v300 = v663;
                  if (v668)
                  {
LABEL_606:
                    v299 = v737;
                    goto LABEL_412;
                  }
                }
              }
              __dstc = 0;
              v227 = v681;
LABEL_276:
              log_OutText((*v13)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM DOING [%d] \"%c\"", v220, v221, v222, v692);
              v237 = 0;
              v238 = 0;
              goto LABEL_277;
            }
            v244 = 0;
          }
          break;
        }
        v242 = v245;
        goto LABEL_306;
      }
      __dstc = 0;
    }
    else
    {
      __dstc = (unint64_t)v226;
    }
    LOWORD(v231) = 0;
    v232 = 0;
    goto LABEL_276;
  }
  v201 = strlen(__s1[0]);
  v202 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)v727 + 8), 1, (v201 + 1));
  a4 = v691;
  *(_QWORD *)(v691 + 104 * v167 + 40) = v202;
  v21 = v729;
  if (v202)
  {
    strcpy(v202, __s1[0]);
    goto LABEL_210;
  }
LABEL_220:
  POSAndDiacritics = 2687508490;
  v13 = (_QWORD **)v727;
  log_OutPublic(*(_QWORD *)(*(_QWORD *)v727 + 32), (uint64_t)"POSPARSER", 68000, 0, v195, v196, v197, v198, v655);
  v204 = a9;
  v203 = v679;
  v205 = a10;
  v80 = __s;
  v206 = v694;
LABEL_838:
  *v205 = v732;
  *v203 = v80;
  *v204 = v206;
  if (v21)
LABEL_839:
    heap_Free((_QWORD *)(*v13)[1], (uint64_t)v21);
  return POSAndDiacritics;
}

_QWORD *posparser_ProcessEnd(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = result;
  v2 = *((unsigned __int8 *)result + 96);
  if (*((_BYTE *)result + 96))
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(v1[11] + 8 * v3);
      if (v4)
      {
        result = heap_Free(*(_QWORD **)(*v1 + 8), v4);
        *(_QWORD *)(v1[11] + 8 * v3) = 0;
        v2 = *((unsigned __int8 *)v1 + 96);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  v5 = v1[11];
  if (v5)
  {
    result = heap_Free(*(_QWORD **)(*v1 + 8), v5);
    v1[11] = 0;
  }
  v6 = v1[10];
  if (v6)
  {
    result = heap_Free(*(_QWORD **)(*v1 + 8), v6);
    v1[10] = 0;
  }
  v7 = v1[14];
  if (v7)
  {
    result = heap_Free(*(_QWORD **)(*v1 + 8), v7);
    v1[14] = 0;
  }
  v8 = v1[13];
  if (v8)
  {
    result = heap_Free(*(_QWORD **)(*v1 + 8), v8);
    v1[13] = 0;
  }
  v9 = v1[15];
  if (v9)
  {
    result = heap_Free(*(_QWORD **)(*v1 + 8), v9);
    v1[15] = 0;
  }
  v10 = v1[16];
  if (v10)
  {
    result = heap_Free(*(_QWORD **)(*v1 + 8), v10);
    v1[16] = 0;
  }
  v11 = v1[17];
  if (v11)
  {
    result = heap_Free(*(_QWORD **)(*v1 + 8), v11);
    v1[17] = 0;
  }
  v12 = v1[18];
  if (v12)
  {
    result = heap_Free(*(_QWORD **)(*v1 + 8), v12);
    v1[18] = 0;
  }
  v13 = v1[20];
  if (*((_WORD *)v1 + 84))
  {
    v14 = 0;
    v15 = 0;
    do
    {
      heap_Free(*(_QWORD **)(*v1 + 8), *(_QWORD *)(v13 + v14 + 8));
      v16 = v1[20] + v14;
      *(_QWORD *)(v16 + 8) = 0;
      heap_Free(*(_QWORD **)(*v1 + 8), *(_QWORD *)(v16 + 24));
      v13 = v1[20];
      *(_QWORD *)(v13 + v14 + 24) = 0;
      if (*(_QWORD *)(v13 + v14 + 40))
      {
        heap_Free(*(_QWORD **)(*v1 + 8), *(_QWORD *)(v13 + v14 + 40));
        v13 = v1[20];
        *(_QWORD *)(v13 + v14 + 40) = 0;
      }
      ++v15;
      v14 += 56;
    }
    while (v15 < *((unsigned __int16 *)v1 + 84));
    *((_WORD *)v1 + 84) = 0;
  }
  else
  {
    *((_WORD *)v1 + 84) = 0;
    if (!v13)
      goto LABEL_30;
  }
  result = heap_Free(*(_QWORD **)(*v1 + 8), v13);
  v1[20] = 0;
LABEL_30:
  v17 = v1[22];
  if (v17)
  {
    result = heap_Free(*(_QWORD **)(*v1 + 8), v17);
    v1[22] = 0;
  }
  *((_WORD *)v1 + 92) = 0;
  return result;
}

uint64_t posparser_GrowAndInsert(_QWORD *a1, uint64_t *a2, __int16 a3, __int16 a4, unsigned int a5, int a6, unsigned int a7, unsigned __int16 *a8, _WORD *a9)
{
  uint64_t v11;
  uint64_t v15;
  unsigned __int16 v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t result;
  unsigned __int16 v28;
  unsigned int v29;
  unsigned __int16 v30;
  uint64_t *v31;

  LODWORD(v11) = a6;
  v15 = *a2;
  v16 = a3 - a4;
  v17 = *a8;
  v18 = (unsigned __int16)*a9;
  if (v17 + (unsigned __int16)(a3 - a4) <= v18)
  {
    v31 = a2;
  }
  else
  {
    *a9 = v18 + 10;
    v19 = heap_Realloc(*(uint64_t **)(*a1 + 8), v15, (unsigned __int16)(v18 + 10) + 1);
    if (!v19)
    {
      log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v20, v21, v22, v23, v29);
      return 2687508490;
    }
    v15 = v19;
    v31 = a2;
    v17 = *a8;
  }
  v30 = v16;
  memmove((void *)(v15 + a5 + v16), (const void *)(v15 + a5), (int)(v17 - a5));
  if (v11 < a7)
  {
    v11 = v11;
    v24 = a1[25];
    do
    {
      if (*(_BYTE *)(v24 + 6 * v11 + 2))
      {
        v25 = 0;
        v26 = 0;
        do
        {
          *(_BYTE *)(v15 + (unsigned __int16)a5++) = *(_BYTE *)(v24 + 6 * v11 + v25 + 2);
          v25 = (unsigned __int16)++v26;
          v24 = a1[25];
        }
        while (strlen((const char *)(v24 + 6 * v11 + 2)) > (unsigned __int16)v26);
      }
      ++v11;
    }
    while (v11 != a7);
  }
  result = 0;
  v28 = *a8 + v30;
  *a8 = v28;
  *(_BYTE *)(v15 + v28) = 0;
  *v31 = v15;
  return result;
}

BOOL isPuncClass(_QWORD *a1, unsigned __int8 *a2)
{
  const char *v4;
  const char *v5;
  const char *v6;

  v4 = (const char *)a1[16];
  if (!v4)
    v4 = ".!?";
  if (isCharInStr(a2, v4))
    return 1;
  v5 = (const char *)a1[17];
  if (!v5)
    v5 = ",:;";
  if (isCharInStr(a2, v5))
    return 1;
  v6 = (const char *)a1[18];
  if (!v6)
    v6 = (const char *)&puncClass3;
  return isCharInStr(a2, v6) != 0;
}

size_t posparser_undoEmbeddedRules(uint64_t a1, char *__s)
{
  size_t result;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;

  result = strlen(__s);
  if ((unsigned __int16)result >= 3u)
  {
    v5 = *(unsigned __int16 *)(a1 + 184);
    v6 = 1;
    v7 = v5;
    do
    {
      if (v7)
      {
        v8 = 0;
        v9 = 0;
        v10 = __s[v6];
        do
        {
          v11 = *(_QWORD *)(a1 + 176);
          if (v10 == *(unsigned __int8 *)(v11 + v8 + 1))
          {
            v10 = *(unsigned __int8 *)(v11 + v8);
            __s[v6] = v10;
            v5 = *(unsigned __int16 *)(a1 + 184);
          }
          ++v9;
          v8 += 2;
          v7 = v5;
        }
        while (v9 < v5);
      }
      ++v6;
    }
    while (v6 != (unsigned __int16)result - 1);
  }
  return result;
}

char *insertString(char *__src, char *__dst, const char *a3, int a4)
{
  char *v8;
  size_t v9;
  char *v10;

  strcpy(__dst, __src);
  v8 = &__dst[a4];
  v9 = strlen(a3);
  strncpy(v8, a3, v9);
  v10 = &v8[strlen(a3)];
  return strcpy(v10, &__src[a4 + 1]);
}

void *getPunctClassChar(uint64_t a1, int __c)
{
  char *v4;
  char *v6;

  v4 = *(char **)(a1 + 128);
  if (v4)
  {
    if (strchr(v4, __c))
      return &PUNCCLASS1CHAR;
  }
  else if (memchr(".!?", __c, 4uLL))
  {
    return &PUNCCLASS1CHAR;
  }
  v6 = *(char **)(a1 + 136);
  if (v6)
  {
    if (strchr(v6, __c))
      return &PUNCCLASS2CHAR;
  }
  else if (memchr(",:;", __c, 4uLL))
  {
    return &PUNCCLASS2CHAR;
  }
  return &PUNCCLASS3CHAR;
}

char *insertStringPart(char *__src, char *__dst, const char *a3, int a4, unsigned int a5)
{
  char *v10;

  strcpy(__dst, __src);
  v10 = &strncpy(&__dst[a4], a3, a5)[a5];
  return strcpy(v10, &__src[a4 + 1]);
}

_QWORD *sparray_free(uint64_t a1, uint64_t *a2)
{
  return kh_destroy_32(a2);
}

uint64_t sparray_get(uint64_t a1, int a2)
{
  unsigned int _32;

  _32 = kh_get_32(a1, a2);
  if (_32 == *(_DWORD *)(a1 + 8))
    return 0;
  else
    return *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * _32);
}

uint64_t sparray_set(uint64_t result, int a2, int a3)
{
  uint64_t v4;
  int v5;

  if (a3)
  {
    v4 = result;
    v5 = 0;
    result = kh_put_32(result, a2, &v5);
    if (v5 == 1)
      *(_DWORD *)(*(_QWORD *)(v4 + 40) + 4 * result) = a3;
  }
  return result;
}

uint64_t qrk_new(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = heap_Alloc(*(_QWORD *)(a1 + 8), 32);
  if (v4)
  {
    v5 = v4;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_DWORD *)(v4 + 24) = 128;
    v6 = heap_Calloc(*(_QWORD **)(a1 + 8), 8, 128);
    result = 0;
    *(_QWORD *)(v5 + 8) = v6;
    *a2 = v5;
    if (v6)
      return result;
    v8 = *(_QWORD *)(v5 + 8);
    if (v8)
      heap_Free(*(_QWORD **)(a1 + 8), v8);
    heap_Free(*(_QWORD **)(a1 + 8), v5);
  }
  *a2 = 0;
  return 2585796618;
}

_QWORD *qrk_free()
{
  _QWORD *result;
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  result = (_QWORD *)MEMORY[0x1E0C80A78]();
  v46 = *MEMORY[0x1E0C80C00];
  if (v1)
  {
    v3 = v2;
    v4 = v1;
    v5 = result;
    v6 = *(_QWORD *)v1;
    if (*(_QWORD *)v1 && *(_DWORD *)(v1 + 20))
    {
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v30 = 0u;
      v45 = 0;
      v29 = 0u;
      v28 = 0u;
      v27 = 0u;
      v26 = 0u;
      v25 = 0u;
      v24 = 0u;
      v23 = 0u;
      v22 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v7 = 1;
      v13 = v6;
      do
      {
        v8 = v7 - 1;
        v9 = *(&v13 + v8);
        if ((v9 & 1) != 0)
        {
          if (!v3)
          {
            v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
            heap_Free((_QWORD *)v5[1], *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 8));
            v11 = (_QWORD *)v5[1];
            v9 = v12;
            goto LABEL_10;
          }
        }
        else
        {
          v10 = *(_QWORD *)(v9 + 8);
          *(&v13 + v8) = *(_QWORD *)v9;
          LODWORD(v8) = v7 + 1;
          *(&v13 + v7) = v10;
          if (!v3)
          {
            v11 = (_QWORD *)v5[1];
LABEL_10:
            heap_Free(v11, v9);
          }
        }
        v7 = v8;
      }
      while ((_DWORD)v8);
    }
    if (v3)
    {
      heap_Free((_QWORD *)v5[1], *(_QWORD *)v4);
      heap_Free((_QWORD *)v5[1], **(_QWORD **)(v4 + 8));
    }
    heap_Free((_QWORD *)v5[1], *(_QWORD *)(v4 + 8));
    return heap_Free((_QWORD *)v5[1], v4);
  }
  return result;
}

uint64_t qrk_str2id(uint64_t a1, uint64_t *a2, char *__s, unsigned int *a4, unsigned int a5)
{
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unsigned int v20;
  int v21;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;

  if (!a5)
    a5 = strlen(__s);
  v9 = a5;
  if (*((_DWORD *)a2 + 5))
  {
    for (i = *a2; (i & 1) == 0; i = *(_QWORD *)(i + ((((*(unsigned __int8 *)(i + 20) | v12) + 1) >> 5) & 8)))
    {
      v11 = *(unsigned int *)(i + 16);
      if (v11 >= a5)
        v12 = 0;
      else
        v12 = __s[v11];
    }
    v13 = (unsigned int *)(i & 0xFFFFFFFFFFFFFFFELL);
    v14 = *(_QWORD *)((i & 0xFFFFFFFFFFFFFFFELL) + 8);
    if (a5)
    {
      v15 = 0;
      while (__s[v15] == *(_BYTE *)(v14 + v15))
      {
        if (a5 == ++v15)
        {
          LODWORD(v15) = a5;
          goto LABEL_20;
        }
      }
    }
    else
    {
      LODWORD(v15) = 0;
    }
    if ((_DWORD)v15 == a5)
    {
LABEL_20:
      v21 = *(unsigned __int8 *)(v14 + a5);
      if (!*(_BYTE *)(v14 + a5))
      {
        v20 = *v13;
        goto LABEL_25;
      }
    }
    else
    {
      v21 = *(unsigned __int8 *)(v14 + v15) ^ __s[v15];
    }
    if (*((_DWORD *)a2 + 4) == 1)
    {
LABEL_24:
      v20 = -1;
      goto LABEL_25;
    }
    do
    {
      v23 = v21;
      v21 &= v21 - 1;
    }
    while ((_BYTE)v21);
    v16 = 2585796618;
    v24 = *(_BYTE *)(v14 + v15);
    v25 = heap_Alloc(*(_QWORD *)(a1 + 8), 24);
    if (v25)
    {
      v39 = v25;
      v26 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
      if (v26)
      {
        v27 = v26;
        v28 = (void *)heap_Alloc(*(_QWORD *)(a1 + 8), (v9 + 1));
        *(_QWORD *)(v27 + 8) = v28;
        if (v28)
        {
          v29 = v24 | ~v23;
          v30 = ~v23;
          v31 = (v29 + 1) >> 8;
          memcpy(v28, __s, (v9 + 1));
          *(_BYTE *)(*(_QWORD *)(v27 + 8) + v9) = 0;
          v20 = *((_DWORD *)a2 + 5);
          v32 = *((_DWORD *)a2 + 6);
          *((_DWORD *)a2 + 5) = v20 + 1;
          *(_DWORD *)v27 = v20;
          v33 = v39;
          *(_DWORD *)(v39 + 16) = v15;
          *(_BYTE *)(v39 + 20) = v30;
          *(_QWORD *)(v39 + 8 * (v31 ^ 1)) = v27 | 1;
          if (v20 == v32)
          {
            v34 = v20 + (v20 >> 1);
            *((_DWORD *)a2 + 6) = v34;
            v35 = heap_Realloc(*(uint64_t **)(a1 + 8), a2[1], 8 * v34);
            if (!v35)
              return v16;
            a2[1] = v35;
            v20 = *(_DWORD *)v27;
            v33 = v39;
          }
          else
          {
            v35 = a2[1];
          }
          *(_QWORD *)(v35 + 8 * v20) = v27;
          while (1)
          {
            v36 = *a2;
            if ((*a2 & 1) != 0)
              break;
            v37 = *(_DWORD *)(v36 + 16);
            if (v37 > v15 || v37 == (_DWORD)v15 && *(unsigned __int8 *)(v36 + 20) > v30)
              break;
            if (v37 >= v9)
              v38 = 0;
            else
              v38 = __s[v37];
            a2 = (uint64_t *)(v36 + ((((*(unsigned __int8 *)(v36 + 20) | v38) + 1) >> 5) & 8));
          }
          *(_QWORD *)(v33 + 8 * v31) = v36;
          *a2 = v33;
          goto LABEL_25;
        }
      }
    }
  }
  else
  {
    if (*((_DWORD *)a2 + 4) == 1)
      goto LABEL_24;
    v16 = 2585796618;
    v17 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
    if (v17)
    {
      v18 = v17;
      v19 = (void *)heap_Alloc(*(_QWORD *)(a1 + 8), (v9 + 1));
      *(_QWORD *)(v18 + 8) = v19;
      if (v19)
      {
        memcpy(v19, __s, (v9 + 1));
        v20 = 0;
        *(_BYTE *)(*(_QWORD *)(v18 + 8) + v9) = 0;
        *(_DWORD *)v18 = 0;
        *a2 = v18 | 1;
        *(_QWORD *)a2[1] = v18;
        *((_DWORD *)a2 + 5) = 1;
LABEL_25:
        v16 = 0;
        *a4 = v20;
      }
    }
  }
  return v16;
}

uint64_t qrk_id2str(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(_DWORD *)(a2 + 20) <= a3)
    wapiti_fatal(*(_QWORD *)(a1 + 32), (uint64_t)"invalid identifier");
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * a3) + 8);
}

uint64_t qrk_lock(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = a2;
  return v2;
}

uint64_t popcount(unsigned int a1)
{
  unsigned int v1;

  v1 = (((((a1 >> 1) & 0x5555) + (a1 & 0x5555)) >> 2) & 0x33333333)
     + ((((a1 >> 1) & 0x5555) + (a1 & 0x5555)) & 0x33333333);
  return ((((v1 >> 4) & 0xFFFFFF0F) + (v1 & 0xF0F0F0F)) & 0xF) + ((((v1 >> 4) & 0xFFFFFF0F) + (v1 & 0xF0F0F0F)) >> 8);
}

uint64_t qp_new(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = heap_Alloc(*(_QWORD *)(a1 + 8), 32);
  if (v4)
  {
    v5 = v4;
    *(_QWORD *)v4 = 0;
    *(_OWORD *)(v4 + 16) = xmmword_1DEC666E0;
    v6 = heap_Calloc(*(_QWORD **)(a1 + 8), 8, 128);
    *(_QWORD *)(v5 + 8) = v6;
    *a2 = v5;
    if (v6)
      return 0;
    v8 = *(_QWORD *)(v5 + 8);
    if (v8)
      heap_Free(*(_QWORD **)(a1 + 8), v8);
    heap_Free(*(_QWORD **)(a1 + 8), v5);
  }
  *a2 = 0;
  return 2585796618;
}

_DWORD *twigoffmax(_DWORD *result, _DWORD *a2, uint64_t a3, int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v4 = (((*(_DWORD *)(a3 + 8) & (a4 - 1)) >> 1) & 0x5555) + (*(_DWORD *)(a3 + 8) & (a4 - 1) & 0x5555);
  v5 = (((((v4 >> 2) & 0x33333333) + (v4 & 0x33333333)) >> 4) & 0xFFFFFF0F)
     + ((((v4 >> 2) & 0x33333333) + (v4 & 0x33333333)) & 0xF0F0F0F);
  *result = (v5 & 0xF) + (v5 >> 8);
  v6 = (((((*(_DWORD *)(a3 + 8) >> 1) & 0x5555) + (*(_DWORD *)(a3 + 8) & 0x5555u)) >> 2) & 0x33333333)
     + ((((*(_DWORD *)(a3 + 8) >> 1) & 0x5555) + (*(_DWORD *)(a3 + 8) & 0x5555)) & 0x33333333);
  *a2 = ((((v6 >> 4) & 0xFFFFFF0F) + (v6 & 0xF0F0F0F)) & 0xF) + ((((v6 >> 4) & 0xFFFFFF0F) + (v6 & 0xF0F0F0F)) >> 8);
  return result;
}

_QWORD *qp_free(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;

  if (a2)
  {
    v3 = result;
    v4 = *(uint64_t **)a2;
    if (v4)
    {
      if (!*v4 || (heap_Free((_QWORD *)result[1], *v4), (v4 = *(uint64_t **)a2) != 0))
        heap_Free((_QWORD *)v3[1], (uint64_t)v4);
    }
    v5 = *(uint64_t **)(a2 + 8);
    if (v5)
    {
      heap_Free((_QWORD *)v3[1], *v5);
      heap_Free((_QWORD *)v3[1], *(_QWORD *)(a2 + 8));
    }
    return heap_Free((_QWORD *)v3[1], a2);
  }
  return result;
}

uint64_t qp_str2id(uint64_t a1, uint64_t a2, char *__s, int *a4, unsigned int a5)
{
  unsigned int v5;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  _BYTE *v22;
  int v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v41;
  const char *v42;
  size_t v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  BOOL v59;
  _QWORD *v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  int v85;
  _QWORD *v86;
  uint64_t v87;

  v5 = a5;
  if (!a5)
    v5 = strlen(__s);
  v10 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
    if (*(_DWORD *)(a2 + 16) != 1)
    {
      v26 = 2585796618;
      v27 = heap_Calloc(*(_QWORD **)(a1 + 8), *(unsigned int *)(a2 + 24), 8);
      *(_QWORD *)(a2 + 8) = v27;
      if (v27)
      {
        v28 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
        if (v28)
        {
          v29 = v28;
          v30 = (void *)heap_Alloc(*(_QWORD *)(a1 + 8), v5 + 1);
          *(_QWORD *)(v29 + 8) = v30;
          if (v30)
          {
            memcpy(v30, __s, v5 + 1);
            v26 = 0;
            *(_BYTE *)(*(_QWORD *)(v29 + 8) + v5) = 0;
            *(_DWORD *)v29 = 0;
            *(_QWORD *)a2 = v29 | 1;
            **(_QWORD **)(a2 + 8) = v29;
            *(_DWORD *)(a2 + 20) = 1;
            *a4 = 0;
          }
        }
      }
      return v26;
    }
    goto LABEL_31;
  }
  for (; (v10 & 1) == 0; v10 = *(_QWORD *)(*(_QWORD *)v10 + 8 * v18))
  {
    v11 = *(unsigned int *)(v10 + 12);
    if (v11 >= v5)
    {
      v13 = *(_DWORD *)(v10 + 8);
      v15 = 1;
    }
    else
    {
      v12 = __s[v11];
      v13 = *(_DWORD *)(v10 + 8);
      if ((v13 & 0x10000) != 0)
        v14 = 2;
      else
        v14 = 1;
      v15 = 1 << ((((v14 + 254) ^ 0xF) & v12) >> (8 - 4 * v14));
    }
    if (((unsigned __int16)v15 & (unsigned __int16)v13) != 0)
    {
      v16 = (((v13 & (v15 - 1)) >> 1) & 0x5555) + (v13 & (v15 - 1) & 0x5555);
      v17 = (((((v16 >> 2) & 0x33333333) + (v16 & 0x33333333)) >> 4) & 0xFFFFFF0F)
          + ((((v16 >> 2) & 0x33333333) + (v16 & 0x33333333)) & 0xF0F0F0F);
      v18 = (v17 & 0xF) + (v17 >> 8);
    }
    else
    {
      v18 = 0;
    }
  }
  v19 = v10 & 0xFFFFFFFFFFFFFFFELL;
  if (!v5)
  {
LABEL_26:
    if (!*(_BYTE *)(*(_QWORD *)(v19 + 8) + v5))
    {
      v26 = 0;
      v31 = *(_DWORD *)v19;
      goto LABEL_39;
    }
    if (*(_DWORD *)(a2 + 16) != 1)
    {
      v25 = 0;
      LODWORD(v21) = v5;
      goto LABEL_32;
    }
LABEL_31:
    v26 = 0;
    v31 = -1;
LABEL_39:
    *a4 = v31;
    return v26;
  }
  v20 = *(_BYTE **)(v19 + 8);
  if (*__s == *v20)
  {
    v21 = 0;
    v22 = v20 + 1;
    do
    {
      if (v5 - 1 == v21)
        goto LABEL_26;
      v23 = __s[v21 + 1];
      v24 = v22[v21++];
    }
    while (v23 == v24);
    v25 = v21 < v5;
  }
  else
  {
    LODWORD(v21) = 0;
    v25 = 1;
  }
  if (*(_DWORD *)(a2 + 16) == 1)
    goto LABEL_31;
LABEL_32:
  v26 = 2585796618;
  v32 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
  if (!v32)
    return v26;
  v33 = v32;
  v34 = heap_Calloc(*(_QWORD **)(a1 + 8), 3, 8);
  if (!v34)
    return v26;
  v86 = (_QWORD *)v34;
  v35 = (void *)heap_Alloc(*(_QWORD *)(a1 + 8), v5 + 1);
  *(_QWORD *)(v33 + 8) = v35;
  if (!v35)
    goto LABEL_41;
  memcpy(v35, __s, v5 + 1);
  *(_BYTE *)(*(_QWORD *)(v33 + 8) + v5) = 0;
  v36 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = v36 + 1;
  *(_DWORD *)v33 = v36;
  *a4 = v36;
  v37 = *(_DWORD *)v33;
  if (*(_DWORD *)v33 == *(_DWORD *)(a2 + 24))
  {
    v38 = v37 + (v37 >> 1);
    *(_DWORD *)(a2 + 24) = v38;
    v39 = heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)(a2 + 8), 8 * v38);
    if (v39)
    {
      *(_QWORD *)(a2 + 8) = v39;
      v37 = *(_DWORD *)v33;
      goto LABEL_44;
    }
LABEL_41:
    v26 = 0;
    goto LABEL_42;
  }
  v39 = *(_QWORD *)(a2 + 8);
LABEL_44:
  *(_QWORD *)(v39 + 8 * v37) = v33;
  if (v25)
  {
    v42 = *(const char **)(v19 + 8);
    v43 = strlen(v42);
    v44 = __s[v21];
    if (v43 <= v21)
    {
      v46 = 1;
      v85 = 1 << (__s[v21] >> 4);
      v45 = v42[v21];
    }
    else
    {
      v45 = v42[v21];
      if ((v45 ^ v44) >= 0x10)
        v46 = 1;
      else
        v46 = 2;
      v85 = 1 << ((((v46 + 254) ^ 0xF) & v44) >> (8 - 4 * v46));
    }
  }
  else
  {
    v45 = *(unsigned __int8 *)(*(_QWORD *)(v19 + 8) + v21);
    v85 = 1;
    v46 = 1;
  }
  v47 = v33 | 1;
  *v86 = v33 | 1;
  v48 = *(_QWORD *)a2;
  v86[2] = 0;
  v49 = 0;
  if ((v48 & 1) != 0)
  {
LABEL_72:
    v57 = v45;
    v58 = 0;
    v86[1] = v48;
    v59 = 1;
    do
    {
      v60 = *(_QWORD **)(a1 + 8);
      if (v59)
      {
        v58 = heap_Calloc(v60, 1, 16);
        if (!v58)
          return v26;
      }
      else
      {
        heap_Free(v60, v58);
        v58 = 0;
      }
      v59 = v58 == 0;
    }
    while (!v58 || (v58 & 1) != 0);
    v41 = (uint64_t)v86;
    v84 = v86[2];
    v61 = 1 << ((((v46 + 254) ^ 0xF) & v57) >> (8 - 4 * v46));
    if (!v57)
      v61 = 1;
    v62 = ((v46 << 16) - 0x10000) | v85;
    *(_DWORD *)(v58 + 8) = v61 | v62;
    *(_DWORD *)(v58 + 12) = v21;
    v63 = v85 - 1;
    v64 = ((((v61 | v62) & v63) >> 1) & 0x5555) + ((v61 | v62) & v63 & 0x5555);
    v65 = (((((v64 >> 2) & 0x33333333) + (v64 & 0x33333333)) >> 4) & 0xFFFFFF0F)
        + ((((v64 >> 2) & 0x33333333) + (v64 & 0x33333333)) & 0xF0F0F0F);
    v66 = (v65 & 0xF) + (v65 >> 8) + 1;
    v67 = v61 - 1;
    v68 = (((v67 & v62) >> 1) & 0x5555) + (v67 & v62 & 0x5555);
    v69 = (((((v68 >> 2) & 0x33333333) + (v68 & 0x33333333)) >> 4) & 0xFFFFFF0F)
        + ((((v68 >> 2) & 0x33333333) + (v68 & 0x33333333)) & 0xF0F0F0F);
    v70 = (v69 & 0xF) + (v69 >> 8);
    if (v66 <= v70 + 1)
      v71 = v70 + 1;
    else
      v71 = v66;
    if (v71 <= 2)
      v72 = 2;
    else
      v72 = v71;
    v73 = heap_Calloc(*(_QWORD **)(a1 + 8), v72, 8);
    *(_QWORD *)v58 = v73;
    if (v73)
    {
      v26 = 0;
      v74 = *(_DWORD *)(v58 + 8);
      v75 = (((v74 & v63) >> 1) & 0x5555) + (v74 & v63 & 0x5555);
      v76 = (((((v75 >> 2) & 0x33333333) + (v75 & 0x33333333)) >> 4) & 0xFFFFFF0F)
          + ((((v75 >> 2) & 0x33333333) + (v75 & 0x33333333)) & 0xF0F0F0F);
      *(_QWORD *)(v73 + 8 * ((v76 & 0xF) + (v76 >> 8))) = *v86;
      v77 = (((v74 & v67) >> 1) & 0x5555) + (v74 & v67 & 0x5555);
      v78 = (((((v77 >> 2) & 0x33333333) + (v77 & 0x33333333)) >> 4) & 0xFFFFFF0F)
          + ((((v77 >> 2) & 0x33333333) + (v77 & 0x33333333)) & 0xF0F0F0F);
      *(_QWORD *)(*(_QWORD *)v58 + 8 * ((v78 & 0xF) + (v78 >> 8))) = v86[1];
      v79 = (uint64_t *)(v84 + 8 * v49);
      if (!v84)
        v79 = (uint64_t *)a2;
      *v79 = v58;
    }
    goto LABEL_91;
  }
  while (1)
  {
    v50 = *(unsigned int *)(v48 + 12);
    if (v50 >= v5)
    {
      v52 = 1;
    }
    else
    {
      if ((*(_BYTE *)(v48 + 10) & 1) != 0)
        v51 = 2;
      else
        v51 = 1;
      v52 = 1 << ((((v51 + 254) ^ 0xF) & __s[v50]) >> (8 - 4 * v51));
    }
    if ((_DWORD)v50 != (_DWORD)v21)
    {
      if (v50 > v21)
        goto LABEL_72;
      v53 = *(_DWORD *)(v48 + 8);
      goto LABEL_68;
    }
    v53 = *(_DWORD *)(v48 + 8);
    v54 = (v53 & 0x10000) != 0 ? 2 : 1;
    if (v46 == v54)
      break;
    if (v46 < v54)
      goto LABEL_72;
LABEL_68:
    v86[2] = *(_QWORD *)v48;
    if (((unsigned __int16)v52 & (unsigned __int16)v53) != 0)
    {
      v55 = (((v53 & (v52 - 1)) >> 1) & 0x5555) + (v53 & (v52 - 1) & 0x5555);
      v56 = (((((v55 >> 2) & 0x33333333) + (v55 & 0x33333333)) >> 4) & 0xFFFFFF0F)
          + ((((v55 >> 2) & 0x33333333) + (v55 & 0x33333333)) & 0xF0F0F0F);
      v49 = (v56 & 0xF) + (v56 >> 8);
    }
    else
    {
      v49 = 0;
    }
    v48 = *(_QWORD *)(*(_QWORD *)v48 + 8 * v49);
    if ((v48 & 1) != 0)
      goto LABEL_72;
  }
  v87 = 0;
  twigoffmax((_DWORD *)&v87 + 1, &v87, v48, v85);
  v80 = v87;
  v81 = heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)v48, 8 * (v87 + 1));
  if (v81)
  {
    v82 = v81;
    v83 = (uint64_t *)(v81 + 8 * HIDWORD(v87));
    memmove(v83 + 1, v83, 8 * (v80 - HIDWORD(v87)));
    v26 = 0;
    *v83 = v47;
    *(_QWORD *)v48 = v82;
    *(_DWORD *)(v48 + 8) |= v85;
  }
LABEL_42:
  v41 = (uint64_t)v86;
LABEL_91:
  heap_Free(*(_QWORD **)(a1 + 8), v41);
  return v26;
}

uint64_t rdr_new(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 64);
  if (v6)
  {
    v7 = v6;
    *(_QWORD *)v6 = a1;
    *(_DWORD *)(v6 + 8) = a2;
    *(_QWORD *)(v6 + 32) = 0;
    v8 = (uint64_t *)(v6 + 40);
    *(_QWORD *)(v6 + 20) = 0;
    *(_QWORD *)(v6 + 12) = 0;
    v9 = qrk_new(a1, (uint64_t *)(v6 + 40));
    if ((v9 & 0x80000000) != 0)
    {
      v10 = v9;
    }
    else
    {
      v10 = qrk_new(a1, (uint64_t *)(v7 + 48));
      if ((v10 & 0x80000000) == 0)
      {
        *(_QWORD *)(v7 + 56) = 0;
LABEL_16:
        *a3 = v7;
        return v10;
      }
    }
    v11 = *v8;
    if (*v8)
    {
      if (*(_QWORD *)(v11 + 8))
      {
        heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(v11 + 8));
        v11 = *v8;
      }
      heap_Free(*(_QWORD **)(a1 + 8), v11);
    }
    v12 = *(_QWORD *)(v7 + 48);
    if (v12)
    {
      if (*(_QWORD *)(v12 + 8))
      {
        heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(v12 + 8));
        v12 = *(_QWORD *)(v7 + 48);
      }
      heap_Free(*(_QWORD **)(a1 + 8), v12);
    }
    heap_Free(*(_QWORD **)(a1 + 8), v7);
    v7 = 0;
    goto LABEL_16;
  }
  return 2585796618;
}

uint64_t rdr_new_qp(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 64);
  if (v6)
  {
    v7 = v6;
    *(_QWORD *)v6 = a1;
    *(_DWORD *)(v6 + 8) = a2;
    *(_QWORD *)(v6 + 32) = 0;
    v8 = (uint64_t *)(v6 + 40);
    *(_QWORD *)(v6 + 20) = 0;
    *(_QWORD *)(v6 + 12) = 0;
    v9 = qp_new(a1, (uint64_t *)(v6 + 40));
    if ((v9 & 0x80000000) != 0)
    {
      v10 = v9;
    }
    else
    {
      v10 = qp_new(a1, (uint64_t *)(v7 + 48));
      if ((v10 & 0x80000000) == 0)
      {
        *(_QWORD *)(v7 + 56) = 0;
LABEL_16:
        *a3 = v7;
        return v10;
      }
    }
    v11 = *v8;
    if (*v8)
    {
      if (*(_QWORD *)(v11 + 8))
      {
        heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(v11 + 8));
        v11 = *v8;
      }
      heap_Free(*(_QWORD **)(a1 + 8), v11);
    }
    v12 = *(_QWORD *)(v7 + 48);
    if (v12)
    {
      if (*(_QWORD *)(v12 + 8))
      {
        heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(v12 + 8));
        v12 = *(_QWORD *)(v7 + 48);
      }
      heap_Free(*(_QWORD **)(a1 + 8), v12);
    }
    heap_Free(*(_QWORD **)(a1 + 8), v7);
    v7 = 0;
    goto LABEL_16;
  }
  return 2585796618;
}

_QWORD *rdr_free(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    if (*(_DWORD *)(a1 + 24))
    {
      v4 = 0;
      do
        pat_free((_QWORD *)v2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v4++));
      while (v4 < *(unsigned int *)(a1 + 24));
      v3 = *(_QWORD *)(a1 + 32);
    }
    heap_Free(*(_QWORD **)(v2 + 8), v3);
  }
  qrk_free();
  qrk_free();
  wapiti_rules_unload(v2, *(_QWORD *)(a1 + 56));
  return heap_Free(*(_QWORD **)(v2 + 8), a1);
}

_QWORD *rdr_free_qp(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    if (*(_DWORD *)(a1 + 24))
    {
      v4 = 0;
      do
        pat_free((_QWORD *)v2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v4++));
      while (v4 < *(unsigned int *)(a1 + 24));
      v3 = *(_QWORD *)(a1 + 32);
    }
    heap_Free(*(_QWORD **)(v2 + 8), v3);
  }
  qp_free((_QWORD *)v2, *(_QWORD *)(a1 + 40));
  qp_free((_QWORD *)v2, *(_QWORD *)(a1 + 48));
  wapiti_rules_unload(v2, *(_QWORD *)(a1 + 56));
  return heap_Free(*(_QWORD **)(v2 + 8), a1);
}

_QWORD *rdr_freeraw(uint64_t a1, unsigned int *a2)
{
  unint64_t v4;

  if (*a2)
  {
    v4 = 0;
    do
      heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v4++));
    while (v4 < *a2);
  }
  heap_Free(*(_QWORD **)(a1 + 8), *((_QWORD *)a2 + 1));
  return heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)a2);
}

_QWORD *rdr_freeseq(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 8));
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
    heap_Free(*(_QWORD **)(a1 + 8), v4);
  return heap_Free(*(_QWORD **)(a1 + 8), a2);
}

_QWORD *rdr_freedat(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_DWORD *)(a2 + 8))
  {
    v4 = 0;
    do
      rdr_freeseq(a1, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v4++));
    while (v4 < *(unsigned int *)(a2 + 8));
  }
  heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 16));
  return heap_Free(*(_QWORD **)(a1 + 8), a2);
}

uint64_t rdr_readraw(uint64_t *a1, _QWORD *a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = 2585796618;
  if (!a4)
    return 2585796615;
  v7 = *a1;
  *a4 = 0;
  if (*a2 && *(_BYTE *)*a2)
  {
    v9 = heap_Alloc(*(_QWORD *)(v7 + 8), 16);
    if (v9)
    {
      v10 = heap_Calloc(*(_QWORD **)(v7 + 8), a3, 8);
      *(_QWORD *)(v9 + 8) = v10;
      if (!v10)
        goto LABEL_34;
      if (!a3)
      {
        v19 = v10;
        v4 = 0;
LABEL_33:
        heap_Free(*(_QWORD **)(v7 + 8), v19);
        goto LABEL_34;
      }
      v11 = 0;
      v12 = MEMORY[0x1E0C80978];
      while (2)
      {
        v13 = (const char *)a2[v11];
        if (v13)
        {
          v14 = (int)strlen((const char *)a2[v11]) - 1;
          do
          {
            if (v14 == -1)
              goto LABEL_17;
            v15 = v13[v14];
            if (v13[v14] < 0)
              v16 = __maskrune(v15, 0x4000uLL);
            else
              v16 = *(_DWORD *)(v12 + 4 * v15 + 60) & 0x4000;
            --v14;
          }
          while (v16);
          *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v11) = heap_Calloc(*(_QWORD **)(v7 + 8), 1, (v14 + 3));
          v17 = *(char **)(*(_QWORD *)(v9 + 8) + 8 * v11);
          if (v17)
          {
            strncpy(v17, v13, (v14 + 2));
LABEL_17:
            if (++v11 != a3)
              continue;
            v11 = a3;
            break;
          }
          if (v11)
            goto LABEL_35;
LABEL_27:
          if (*(_QWORD *)(v9 + 8))
          {
            v20 = 0;
            do
            {
              v21 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v20);
              if (v21)
                heap_Free(*(_QWORD **)(v7 + 8), v21);
              ++v20;
            }
            while (a3 != v20);
            v19 = *(_QWORD *)(v9 + 8);
            goto LABEL_33;
          }
LABEL_34:
          heap_Free(*(_QWORD **)(v7 + 8), v9);
          v9 = 0;
          goto LABEL_35;
        }
        break;
      }
      if (!v11)
      {
        v4 = 0;
        goto LABEL_27;
      }
      v18 = heap_Realloc(*(uint64_t **)(v7 + 8), *(_QWORD *)(v9 + 8), 8 * v11);
      *(_QWORD *)(v9 + 8) = v18;
      if (!v18)
        goto LABEL_34;
      v4 = 0;
      *(_DWORD *)v9 = v11;
    }
LABEL_35:
    *a4 = v9;
    return v4;
  }
  return 0;
}

uint64_t rdr_raw2seq(uint64_t *a1, unsigned int *a2, int a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  size_t v22;
  char *v23;
  const char *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  char *v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _DWORD *v72;
  char *v73;
  _DWORD *v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  unsigned int *v83;
  uint64_t *v84;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  _DWORD *v89;
  _DWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  unsigned int v97;
  char *__s;

  v4 = 2585796618;
  if (!a4)
    return 2585796615;
  v5 = a4;
  v9 = *a2;
  v10 = *a1;
  *a4 = 0;
  v11 = heap_Alloc(*(_QWORD *)(v10 + 8), 8 * v9 + 32);
  if (!v11)
  {
    v38 = 0;
    goto LABEL_133;
  }
  v12 = (unsigned int *)v11;
  v96 = (uint64_t)a1;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  v13 = (uint64_t *)(v11 + 8);
  v14 = heap_Calloc(*(_QWORD **)(v10 + 8), v9, 4);
  v13[1] = v14;
  if (!v14)
  {
    v38 = 0;
    goto LABEL_130;
  }
  *v13 = 0;
  if (a3 == 1)
  {
    v15 = heap_Calloc(*(_QWORD **)(v10 + 8), v9, 8);
    *v13 = v15;
    if (!v15)
    {
      v38 = 0;
      goto LABEL_121;
    }
  }
  v94 = v5;
  v95 = v13;
  if ((_DWORD)v9)
  {
    v16 = 0;
    v17 = MEMORY[0x1E0C80978];
    while (1)
    {
      v18 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v16);
      if (!v18)
        break;
      v19 = v18 - 1;
      do
      {
        v20 = *(unsigned __int8 *)(v19 + 1);
        if (*(char *)(v19 + 1) < 0)
          v21 = __maskrune(v20, 0x4000uLL);
        else
          v21 = *(_DWORD *)(v17 + 4 * v20 + 60) & 0x4000;
        ++v19;
      }
      while (v21);
      v22 = strlen((const char *)v19) + 1;
      v23 = (char *)heap_Alloc(*(_QWORD *)(v10 + 8), v22);
      if (!v23)
        break;
      v24 = v23;
      memcpy(v23, (const void *)v19, v22);
      v25 = strlen(v24);
      v26 = heap_Alloc(*(_QWORD *)(v10 + 8), 8 * ((v25 >> 1) + 1));
      if (!v26)
        break;
      v27 = (_QWORD *)v26;
      if (!*v24)
      {
        v28 = 0;
        goto LABEL_35;
      }
      v28 = 0;
LABEL_18:
      v27[v28++] = v24;
      v29 = *(unsigned __int8 *)v24;
      if (*v24)
      {
        do
        {
          if ((v29 & 0x80) != 0)
          {
            if (__maskrune(v29, 0x4000uLL))
            {
LABEL_25:
              if (*v24)
              {
                *v24 = 0;
                while (1)
                {
                  v32 = *(unsigned __int8 *)++v24;
                  v31 = v32;
                  if (!v32)
                    break;
                  if ((v31 & 0x80) != 0)
                  {
                    if (!__maskrune(v31, 0x4000uLL))
                    {
LABEL_32:
                      if (*v24)
                        goto LABEL_18;
                      goto LABEL_35;
                    }
                  }
                  else if ((*(_DWORD *)(v17 + 4 * v31 + 60) & 0x4000) == 0)
                  {
                    goto LABEL_32;
                  }
                }
              }
              break;
            }
          }
          else if ((*(_DWORD *)(v17 + 4 * v29 + 60) & 0x4000) != 0)
          {
            goto LABEL_25;
          }
          v30 = *(unsigned __int8 *)++v24;
          v29 = v30;
        }
        while (v30);
      }
LABEL_35:
      v33 = (void *)heap_Alloc(*(_QWORD *)(v10 + 8), 8 * v28);
      *(_QWORD *)&v12[2 * v16 + 6] = v33;
      if (!v33)
        break;
      *(_DWORD *)(*((_QWORD *)v12 + 2) + 4 * v16) = v28;
      memcpy(v33, v27, 8 * v28);
      heap_Free(*(_QWORD **)(v10 + 8), (uint64_t)v27);
      if (++v16 == v9)
        goto LABEL_37;
    }
LABEL_119:
    v38 = 0;
    goto LABEL_120;
  }
LABEL_37:
  *v12 = v9;
  v34 = *(_QWORD *)(v96 + 56);
  if (v34)
  {
    v35 = wapiti_rules_apply(v10, v34, v12);
    if ((v35 & 0x80000000) != 0)
    {
      v38 = 0;
LABEL_75:
      v4 = v35;
      goto LABEL_120;
    }
  }
  v36 = *(_QWORD *)v96;
  v37 = *v12;
  if (!*(_DWORD *)(v96 + 24))
  {
    if (*(_DWORD *)(v96 + 8))
    {
      v60 = **((_DWORD **)v12 + 2);
    }
    else if ((_DWORD)v37)
    {
      v61 = 0;
      v60 = 0;
      v62 = *((_QWORD *)v12 + 2);
      v92 = *v12;
      do
      {
        if (*(_DWORD *)(v62 + 4 * v61))
        {
          v63 = 0;
          do
          {
            v64 = **(char **)(*(_QWORD *)&v12[2 * v61 + 6] + 8 * v63);
            if (v64 == 42)
            {
              v60 += 2;
            }
            else if (v64 == 98 || v64 == 117)
            {
              ++v60;
            }
            else
            {
              wapiti_fatal(*(_QWORD *)(v36 + 32), (uint64_t)"invalid feature: %s");
              v62 = *((_QWORD *)v12 + 2);
            }
            ++v63;
          }
          while (v63 < *(unsigned int *)(v62 + 4 * v61));
        }
        ++v61;
        v37 = v92;
      }
      while (v61 != v92);
    }
    else
    {
      v60 = 0;
    }
    v65 = v36;
    v38 = heap_Alloc(*(_QWORD *)(v36 + 8), 32 * v37 + 56);
    if (v38)
    {
      v66 = heap_Alloc(*(_QWORD *)(v36 + 8), 4 * v60);
      *(_QWORD *)(v38 + 8) = v66;
      v13 = v95;
      if (v66)
      {
        *(_DWORD *)v38 = v37;
        *(_QWORD *)(v38 + 16) = 0;
        if ((_DWORD)v37)
        {
          v67 = (_DWORD *)v66;
          v68 = 0;
          v4 = 0;
          v69 = *((_QWORD *)v12 + 2);
          v93 = v37;
          v86 = v65;
          do
          {
            v70 = v38 + 32 * v68;
            *(_QWORD *)(v70 + 24) = 0xFFFFFFFFLL;
            *(_QWORD *)(v70 + 40) = v67;
            if (*(_DWORD *)(v69 + 4 * v68))
            {
              v71 = 0;
              v72 = (_DWORD *)(v70 + 28);
              do
              {
                LODWORD(__s) = 0;
                v73 = *(char **)(*(_QWORD *)&v12[2 * v68 + 6] + 8 * v71);
                if (*(_DWORD *)(v96 + 8) || *v73 != 98)
                {
                  v4 = rdr_mapobs(v96, v73, (unsigned int *)&__s);
                  if ((v4 & 0x80000000) != 0)
                    goto LABEL_119;
                  if ((_DWORD)__s != -1)
                  {
                    *v67++ = (_DWORD)__s;
                    ++*v72;
                  }
                }
                ++v71;
                v69 = *((_QWORD *)v12 + 2);
              }
              while (v71 < *(unsigned int *)(v69 + 4 * v68));
              v13 = v95;
              v70 = v38 + 32 * v68;
              v37 = v93;
              v65 = v86;
            }
            *(_DWORD *)(v70 + 32) = 0;
            v74 = (_DWORD *)(v70 + 32);
            if (!*(_DWORD *)(v96 + 8))
            {
              *(_QWORD *)(v38 + 32 * v68 + 48) = v67;
              if (*(_DWORD *)(v69 + 4 * v68))
              {
                v90 = v74;
                v75 = 0;
                do
                {
                  LODWORD(__s) = 0;
                  v76 = *(char **)(*(_QWORD *)&v12[2 * v68 + 6] + 8 * v75);
                  if (*v76 != 117)
                  {
                    v4 = rdr_mapobs(v96, v76, (unsigned int *)&__s);
                    if ((v4 & 0x80000000) != 0)
                      goto LABEL_119;
                    if ((_DWORD)__s != -1)
                    {
                      *v67++ = (_DWORD)__s;
                      ++*v90;
                    }
                  }
                  ++v75;
                  v69 = *((_QWORD *)v12 + 2);
                }
                while (v75 < *(unsigned int *)(v69 + 4 * v68));
                v13 = v95;
                v65 = v86;
              }
            }
            ++v68;
          }
          while (v68 != v37);
          if (!*v13)
            goto LABEL_137;
          v77 = 0;
          while (1)
          {
            v78 = *(char **)(*v95 + v77);
            LODWORD(__s) = 0;
            v4 = qrk_str2id(v65, *(uint64_t **)(v96 + 40), v78, (unsigned int *)&__s, 0);
            if ((v4 & 0x80000000) != 0)
              goto LABEL_119;
            *(_DWORD *)(v38 + 4 * v77 + 24) = (_DWORD)__s;
            v77 += 8;
            if (8 * v37 == v77)
              goto LABEL_120;
          }
        }
LABEL_136:
        v4 = 0;
        goto LABEL_137;
      }
LABEL_135:
      v38 = 0;
      goto LABEL_137;
    }
LABEL_120:
    v5 = v94;
    v13 = v95;
    goto LABEL_121;
  }
  v38 = heap_Alloc(*(_QWORD *)(v36 + 8), 32 * v37 + 56);
  if (!v38)
    goto LABEL_120;
  v39 = heap_Alloc(*(_QWORD *)(v36 + 8), 4 * v37 * (unint64_t)(*(_DWORD *)(v96 + 16) + *(_DWORD *)(v96 + 12)));
  *(_QWORD *)(v38 + 8) = v39;
  v13 = v95;
  if (!v39)
  {
    heap_Free(*(_QWORD **)(v36 + 8), v38);
    goto LABEL_135;
  }
  *(_DWORD *)v38 = v37;
  *(_QWORD *)(v38 + 16) = 0;
  if (!(_DWORD)v37)
    goto LABEL_136;
  v40 = 0;
  v41 = 4 * *(unsigned int *)(v96 + 12);
  v42 = v41 + 4 * *(unsigned int *)(v96 + 16);
  do
  {
    v43 = v38 + v40;
    *(_DWORD *)(v43 + 24) = -1;
    *(_QWORD *)(v43 + 40) = v39;
    *(_QWORD *)(v43 + 48) = v39 + v41;
    v40 += 32;
    v39 += v42;
  }
  while (32 * v37 != v40);
  v44 = 0;
  v4 = 0;
  LODWORD(v45) = *(_DWORD *)(v96 + 24);
  v91 = v37;
  do
  {
    v46 = v38 + 32 * v44;
    *(_DWORD *)(v46 + 32) = 0;
    v47 = (_DWORD *)(v46 + 32);
    *(_DWORD *)(v46 + 28) = 0;
    v89 = (_DWORD *)(v46 + 28);
    if ((_DWORD)v45)
    {
      v48 = 0;
      v87 = (uint64_t *)(v46 + 40);
      v88 = (uint64_t *)(v46 + 48);
      v49 = v96;
      while (1)
      {
        __s = 0;
        v97 = 0;
        v35 = pat_exec(v36, *(_QWORD *)(*(_QWORD *)(v49 + 32) + 8 * v48), (uint64_t)v12, v44, (uint64_t *)&__s);
        if ((v35 & 0x80000000) != 0)
          goto LABEL_75;
        v4 = rdr_mapobs(v49, __s, &v97);
        if ((v4 & 0x80000000) != 0)
          goto LABEL_120;
        v50 = v97;
        if (v97 != -1)
          break;
        v55 = *(_QWORD **)(v36 + 8);
        v51 = __s;
LABEL_60:
        heap_Free(v55, (uint64_t)v51);
        ++v48;
        v49 = v96;
        v45 = *(unsigned int *)(v96 + 24);
        if (v48 >= v45)
        {
          v37 = v91;
          goto LABEL_62;
        }
      }
      v51 = __s;
      v52 = *__s;
      switch(v52)
      {
        case '*':
          v56 = *v87;
          v57 = *v89;
          *v89 = v57 + 1;
          *(_DWORD *)(v56 + 4 * v57) = v50;
          v50 = v97;
          break;
        case 'b':
          break;
        case 'u':
          v53 = *v87;
          v54 = (*v89)++;
LABEL_58:
          *(_DWORD *)(v53 + 4 * v54) = v50;
          goto LABEL_59;
        default:
LABEL_59:
          v55 = *(_QWORD **)(v36 + 8);
          goto LABEL_60;
      }
      v53 = *v88;
      v54 = (*v47)++;
      goto LABEL_58;
    }
LABEL_62:
    ++v44;
  }
  while (v44 != v37);
  v13 = v95;
  if (*v95)
  {
    v58 = 0;
    do
    {
      v59 = *(char **)(*v95 + v58);
      LODWORD(__s) = 0;
      v4 = qrk_str2id(v36, *(uint64_t **)(v96 + 40), v59, (unsigned int *)&__s, 0);
      if ((v4 & 0x80000000) != 0)
        break;
      *(_DWORD *)(v38 + 4 * v58 + 24) = (_DWORD)__s;
      v58 += 8;
    }
    while (8 * v37 != v58);
    goto LABEL_120;
  }
LABEL_137:
  v5 = v94;
LABEL_121:
  v79 = *((_QWORD *)v12 + 2);
  if (v79)
  {
    if ((_DWORD)v9)
    {
      v80 = v13;
      v81 = v5;
      v82 = 0;
      v83 = v12 + 6;
      do
      {
        if (*(_DWORD *)(*((_QWORD *)v12 + 2) + 4 * v82))
        {
          v84 = *(uint64_t **)&v83[2 * v82];
          if (v84)
          {
            heap_Free(*(_QWORD **)(v10 + 8), *v84);
            heap_Free(*(_QWORD **)(v10 + 8), *(_QWORD *)&v83[2 * v82]);
          }
        }
        ++v82;
      }
      while (v9 != v82);
      v79 = *((_QWORD *)v12 + 2);
      v5 = v81;
      v13 = v80;
    }
    heap_Free(*(_QWORD **)(v10 + 8), v79);
  }
LABEL_130:
  if (*v13)
    heap_Free(*(_QWORD **)(v10 + 8), *v13);
  heap_Free(*(_QWORD **)(v10 + 8), (uint64_t)v12);
LABEL_133:
  *v5 = v38;
  return v4;
}

uint64_t rdr_raw2seq_qp(uint64_t a1, unsigned int *a2, int a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  size_t v22;
  char *v23;
  const char *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  char *v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t *v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  unint64_t v78;
  _DWORD *v79;
  char *v80;
  _DWORD *v81;
  _DWORD *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  _DWORD *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  char *__s;

  v4 = 2585796618;
  if (!a4)
    return 2585796615;
  v5 = a4;
  v9 = *a2;
  v10 = *(_QWORD *)a1;
  *a4 = 0;
  v11 = heap_Alloc(*(_QWORD *)(v10 + 8), 8 * v9 + 32);
  if (!v11)
  {
    v39 = 0;
LABEL_103:
    *v5 = v39;
    return v4;
  }
  v12 = (unsigned int *)v11;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  v13 = (uint64_t *)(v11 + 8);
  v95 = v9;
  v14 = heap_Calloc(*(_QWORD **)(v10 + 8), v9, 4);
  v13[1] = v14;
  if (!v14)
  {
    v39 = 0;
LABEL_100:
    if (*v13)
      heap_Free(*(_QWORD **)(v10 + 8), *v13);
    heap_Free(*(_QWORD **)(v10 + 8), (uint64_t)v12);
    goto LABEL_103;
  }
  *v13 = 0;
  if (a3 == 1)
  {
    v15 = heap_Calloc(*(_QWORD **)(v10 + 8), v9, 8);
    *v13 = v15;
    if (!v15)
    {
      v39 = 0;
      goto LABEL_91;
    }
  }
  v92 = v5;
  v93 = v13;
  if ((_DWORD)v9)
  {
    v16 = 0;
    v17 = MEMORY[0x1E0C80978];
    do
    {
      v18 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v16);
      if (!v18)
        break;
      v19 = v18 - 1;
      do
      {
        v20 = *(unsigned __int8 *)(v19 + 1);
        if (*(char *)(v19 + 1) < 0)
          v21 = __maskrune(v20, 0x4000uLL);
        else
          v21 = *(_DWORD *)(v17 + 4 * v20 + 60) & 0x4000;
        ++v19;
      }
      while (v21);
      v22 = strlen((const char *)v19) + 1;
      v23 = (char *)heap_Alloc(*(_QWORD *)(v10 + 8), v22);
      if (!v23)
        break;
      v24 = v23;
      memcpy(v23, (const void *)v19, v22);
      v25 = strlen(v24);
      v26 = heap_Alloc(*(_QWORD *)(v10 + 8), 8 * ((v25 >> 1) + 1));
      if (!v26)
        break;
      v27 = (_QWORD *)v26;
      if (!*v24)
      {
        v28 = 0;
        goto LABEL_35;
      }
      v28 = 0;
LABEL_18:
      v27[v28++] = v24;
      v29 = *(unsigned __int8 *)v24;
      if (*v24)
      {
        do
        {
          if ((v29 & 0x80) != 0)
          {
            if (__maskrune(v29, 0x4000uLL))
            {
LABEL_25:
              if (*v24)
              {
                *v24 = 0;
                while (1)
                {
                  v32 = *(unsigned __int8 *)++v24;
                  v31 = v32;
                  if (!v32)
                    break;
                  if ((v31 & 0x80) != 0)
                  {
                    if (!__maskrune(v31, 0x4000uLL))
                    {
LABEL_32:
                      if (*v24)
                        goto LABEL_18;
                      goto LABEL_35;
                    }
                  }
                  else if ((*(_DWORD *)(v17 + 4 * v31 + 60) & 0x4000) == 0)
                  {
                    goto LABEL_32;
                  }
                }
              }
              break;
            }
          }
          else if ((*(_DWORD *)(v17 + 4 * v29 + 60) & 0x4000) != 0)
          {
            goto LABEL_25;
          }
          v30 = *(unsigned __int8 *)++v24;
          v29 = v30;
        }
        while (v30);
      }
LABEL_35:
      v33 = (void *)heap_Alloc(*(_QWORD *)(v10 + 8), 8 * v28);
      *(_QWORD *)&v12[2 * v16 + 6] = v33;
      if (!v33)
        break;
      *(_DWORD *)(*((_QWORD *)v12 + 2) + 4 * v16) = v28;
      memcpy(v33, v27, 8 * v28);
      heap_Free(*(_QWORD **)(v10 + 8), (uint64_t)v27);
      ++v16;
    }
    while (v16 != v95);
  }
  *v12 = v95;
  v34 = *(_QWORD *)(a1 + 56);
  if (v34)
  {
    v35 = wapiti_rules_apply(v10, v34, v12);
    if ((v35 & 0x80000000) != 0)
    {
      v39 = 0;
      v4 = v35;
LABEL_90:
      v5 = v92;
      v13 = v93;
LABEL_91:
      v67 = *((_QWORD *)v12 + 2);
      if (v67)
      {
        if ((_DWORD)v95)
        {
          v68 = 0;
          v69 = v12 + 6;
          do
          {
            if (*(_DWORD *)(*((_QWORD *)v12 + 2) + 4 * v68))
            {
              v70 = *(uint64_t **)&v69[2 * v68];
              if (v70)
              {
                heap_Free(*(_QWORD **)(v10 + 8), *v70);
                heap_Free(*(_QWORD **)(v10 + 8), *(_QWORD *)&v69[2 * v68]);
              }
            }
            ++v68;
          }
          while (v95 != v68);
          v67 = *((_QWORD *)v12 + 2);
        }
        heap_Free(*(_QWORD **)(v10 + 8), v67);
      }
      goto LABEL_100;
    }
  }
  v36 = *(_QWORD *)a1;
  v37 = *v12;
  v94 = v37;
  if (!*(_DWORD *)(a1 + 24))
  {
    if (*(_DWORD *)(a1 + 8))
    {
      v62 = **((_DWORD **)v12 + 2);
    }
    else if ((_DWORD)v37)
    {
      v63 = 0;
      v62 = 0;
      v64 = *((_QWORD *)v12 + 2);
      do
      {
        if (*(_DWORD *)(v64 + 4 * v63))
        {
          v65 = 0;
          do
          {
            v66 = **(char **)(*(_QWORD *)&v12[2 * v63 + 6] + 8 * v65);
            if (v66 == 42)
            {
              v62 += 2;
            }
            else if (v66 == 98 || v66 == 117)
            {
              ++v62;
            }
            else
            {
              wapiti_fatal(*(_QWORD *)(v36 + 32), (uint64_t)"invalid feature: %s");
              v64 = *((_QWORD *)v12 + 2);
            }
            ++v65;
          }
          while (v65 < *(unsigned int *)(v64 + 4 * v63));
        }
        ++v63;
        v37 = v94;
      }
      while (v63 != v94);
    }
    else
    {
      v62 = 0;
    }
    v72 = heap_Alloc(*(_QWORD *)(v36 + 8), 32 * v37 + 56);
    if (!v72)
      return v4;
    v39 = v72;
    v73 = heap_Alloc(*(_QWORD *)(v36 + 8), 4 * v62);
    *(_QWORD *)(v39 + 8) = v73;
    v5 = v92;
    v13 = v93;
    if (!v73)
      return v4;
    *(_DWORD *)v39 = v94;
    *(_QWORD *)(v39 + 16) = 0;
    if (!(_DWORD)v94)
      goto LABEL_136;
    v74 = 0;
    v75 = *((_QWORD *)v12 + 2);
    v88 = v39;
    do
    {
      v76 = v39 + 32 * v74;
      *(_QWORD *)(v76 + 24) = 0xFFFFFFFFLL;
      *(_QWORD *)(v76 + 40) = v73;
      if (*(_DWORD *)(v75 + 4 * v74))
      {
        v77 = (_DWORD *)v73;
        v78 = 0;
        v90 = v76;
        v79 = (_DWORD *)(v76 + 28);
        do
        {
          LODWORD(__s) = 0;
          v80 = *(char **)(*(_QWORD *)&v12[2 * v74 + 6] + 8 * v78);
          if (*(_DWORD *)(a1 + 8) || *v80 != 98)
          {
            v51 = rdr_mapobs_qp(a1, v80, (int *)&__s);
            if ((v51 & 0x80000000) != 0)
              return v51;
            if ((_DWORD)__s != -1)
            {
              *v77++ = (_DWORD)__s;
              ++*v79;
            }
          }
          ++v78;
          v75 = *((_QWORD *)v12 + 2);
        }
        while (v78 < *(unsigned int *)(v75 + 4 * v74));
        v5 = v92;
        v13 = v93;
        v73 = (uint64_t)v77;
        v39 = v88;
        v76 = v90;
      }
      *(_DWORD *)(v76 + 32) = 0;
      v81 = (_DWORD *)(v76 + 32);
      if (!*(_DWORD *)(a1 + 8))
      {
        *(_QWORD *)(v39 + 32 * v74 + 48) = v73;
        if (*(_DWORD *)(v75 + 4 * v74))
        {
          v91 = v81;
          v82 = (_DWORD *)v73;
          v83 = 0;
          do
          {
            LODWORD(__s) = 0;
            v84 = *(char **)(*(_QWORD *)&v12[2 * v74 + 6] + 8 * v83);
            if (*v84 != 117)
            {
              v51 = rdr_mapobs_qp(a1, v84, (int *)&__s);
              if ((v51 & 0x80000000) != 0)
                return v51;
              if ((_DWORD)__s != -1)
              {
                *v82++ = (_DWORD)__s;
                ++*v91;
              }
            }
            ++v83;
            v75 = *((_QWORD *)v12 + 2);
          }
          while (v83 < *(unsigned int *)(v75 + 4 * v74));
          v5 = v92;
          v73 = (uint64_t)v82;
          v39 = v88;
        }
      }
      ++v74;
    }
    while (v74 != v94);
    if (*v13)
    {
      v85 = 0;
      do
      {
        v86 = *(char **)(*v13 + v85);
        LODWORD(__s) = 0;
        v4 = qp_str2id(v36, *(_QWORD *)(a1 + 40), v86, (int *)&__s, 0);
        if ((v4 & 0x80000000) != 0)
          return v4;
        *(_DWORD *)(v39 + 4 * v85 + 24) = (_DWORD)__s;
        v85 += 8;
      }
      while (8 * v94 != v85);
    }
    else
    {
LABEL_136:
      v4 = 0;
    }
    goto LABEL_91;
  }
  v38 = heap_Alloc(*(_QWORD *)(v36 + 8), 32 * v37 + 56);
  if (!v38)
    return v4;
  v39 = v38;
  v40 = heap_Alloc(*(_QWORD *)(v36 + 8), 4 * v37 * (unint64_t)(*(_DWORD *)(a1 + 16) + *(_DWORD *)(a1 + 12)));
  *(_QWORD *)(v39 + 8) = v40;
  if (!v40)
  {
    heap_Free(*(_QWORD **)(v36 + 8), v39);
    return v4;
  }
  *(_DWORD *)v39 = v37;
  *(_QWORD *)(v39 + 16) = 0;
  if (!(_DWORD)v37)
  {
    v4 = 0;
    goto LABEL_90;
  }
  v41 = 0;
  v42 = 4 * *(unsigned int *)(a1 + 12);
  v43 = v42 + 4 * *(unsigned int *)(a1 + 16);
  v13 = v93;
  do
  {
    v44 = v39 + v41;
    *(_DWORD *)(v44 + 24) = -1;
    *(_QWORD *)(v44 + 40) = v40;
    *(_QWORD *)(v44 + 48) = v40 + v42;
    v41 += 32;
    v40 += v43;
  }
  while (32 * v37 != v41);
  v45 = 0;
  v4 = 0;
  LODWORD(v46) = *(_DWORD *)(a1 + 24);
  do
  {
    v47 = v39 + 32 * v45;
    *(_DWORD *)(v47 + 32) = 0;
    v48 = (_DWORD *)(v47 + 32);
    *(_DWORD *)(v47 + 28) = 0;
    v49 = (_DWORD *)(v47 + 28);
    if ((_DWORD)v46)
    {
      v50 = 0;
      v87 = (uint64_t *)(v47 + 40);
      v89 = (uint64_t *)(v47 + 48);
      while (1)
      {
        __s = 0;
        v96 = 0;
        v51 = pat_exec(v36, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v50), (uint64_t)v12, v45, (uint64_t *)&__s);
        if ((v51 & 0x80000000) != 0)
          return v51;
        v4 = rdr_mapobs_qp(a1, __s, &v96);
        if ((v4 & 0x80000000) != 0)
          return v4;
        v52 = v96;
        if (v96 != -1)
          break;
        v57 = *(_QWORD **)(v36 + 8);
        v53 = __s;
LABEL_60:
        heap_Free(v57, (uint64_t)v53);
        ++v50;
        v46 = *(unsigned int *)(a1 + 24);
        if (v50 >= v46)
        {
          v13 = v93;
          goto LABEL_62;
        }
      }
      v53 = __s;
      v54 = *__s;
      switch(v54)
      {
        case '*':
          v58 = *v87;
          v59 = *v49;
          *v49 = v59 + 1;
          *(_DWORD *)(v58 + 4 * v59) = v52;
          v52 = v96;
          break;
        case 'b':
          break;
        case 'u':
          v55 = *v87;
          v56 = (*v49)++;
LABEL_58:
          *(_DWORD *)(v55 + 4 * v56) = v52;
          goto LABEL_59;
        default:
LABEL_59:
          v57 = *(_QWORD **)(v36 + 8);
          goto LABEL_60;
      }
      v55 = *v89;
      v56 = (*v48)++;
      goto LABEL_58;
    }
LABEL_62:
    ++v45;
  }
  while (v45 != v94);
  if (!*v13)
  {
    v5 = v92;
    if ((v4 & 0x80000000) != 0)
      return v4;
    goto LABEL_91;
  }
  v60 = 0;
  v5 = v92;
  while (1)
  {
    v61 = *(char **)(*v13 + v60);
    LODWORD(__s) = 0;
    v4 = qp_str2id(v36, *(_QWORD *)(a1 + 40), v61, (int *)&__s, 0);
    if ((v4 & 0x80000000) != 0)
      return v4;
    *(_DWORD *)(v39 + 4 * v60 + 24) = (_DWORD)__s;
    v60 += 8;
    if (8 * v94 == v60)
      goto LABEL_91;
  }
}

uint64_t rdr_mapobs(uint64_t a1, char *__s, unsigned int *a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unsigned int v12;

  v6 = *(_QWORD *)a1;
  if (!*(_DWORD *)(a1 + 8))
    return qrk_str2id(*(_QWORD *)a1, *(uint64_t **)(a1 + 48), __s, a3, 0);
  v7 = strlen(__s);
  v8 = (char *)heap_Alloc(*(_QWORD *)(v6 + 8), (v7 + 2));
  if (!v8)
    return 2585796618;
  v9 = v8;
  v12 = 0;
  *v8 = 117;
  strcpy(v8 + 1, __s);
  v10 = qrk_str2id(v6, *(uint64_t **)(a1 + 48), v9, &v12, 0);
  if ((v10 & 0x80000000) == 0)
  {
    heap_Free(*(_QWORD **)(v6 + 8), (uint64_t)v9);
    *a3 = v12;
  }
  return v10;
}

uint64_t rdr_mapobs_qp(uint64_t a1, char *__s, int *a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v12;

  v6 = *(_QWORD *)a1;
  if (!*(_DWORD *)(a1 + 8))
    return qp_str2id(*(_QWORD *)a1, *(_QWORD *)(a1 + 48), __s, a3, 0);
  v7 = strlen(__s);
  v8 = (char *)heap_Alloc(*(_QWORD *)(v6 + 8), (v7 + 2));
  if (!v8)
    return 2585796618;
  v9 = v8;
  v12 = 0;
  *v8 = 117;
  strcpy(v8 + 1, __s);
  v10 = qp_str2id(v6, *(_QWORD *)(a1 + 48), v9, &v12, 0);
  if ((v10 & 0x80000000) == 0)
  {
    heap_Free(*(_QWORD **)(v6 + 8), (uint64_t)v9);
    *a3 = v12;
  }
  return v10;
}

uint64_t mdl_new(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v4 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 32904);
  if (v4)
  {
    v5 = (_QWORD *)v4;
    result = 0;
    *v5 = *(_QWORD *)a1;
    v5[14] = a1;
  }
  else
  {
    result = 2585796618;
    if (!a2)
      return result;
    v5 = 0;
  }
  *a2 = v5;
  return result;
}

_QWORD *mdl_free(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *a1;
  heap_Free(*(_QWORD **)(*a1 + 8), a1[7]);
  heap_Free(*(_QWORD **)(v5 + 8), a1[8]);
  heap_Free(*(_QWORD **)(v5 + 8), a1[9]);
  v6 = a1[10];
  if (v6)
    xvm_free(v5, v6);
  v7 = a1[11];
  if (a3 == 1)
  {
    if (v7)
      heap_Free(*(_QWORD **)(v5 + 8), v7);
  }
  else if (v7)
  {
    xvm_free_sparse(v5);
  }
  v8 = a1[12];
  if (v8)
    rdr_freedat(v5, v8);
  v9 = a1[13];
  if (v9)
    rdr_freedat(v5, v9);
  v10 = a1[14];
  if (v10)
    rdr_free(v10);
  v11 = a1[15];
  if (v11)
    heap_Free(*(_QWORD **)(v5 + 8), v11);
  return heap_Free(*(_QWORD **)(v5 + 8), (uint64_t)a1);
}

_QWORD *mdl_free_qp(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  heap_Free(*(_QWORD **)(*a1 + 8), a1[7]);
  heap_Free(*(_QWORD **)(v4 + 8), a1[8]);
  heap_Free(*(_QWORD **)(v4 + 8), a1[9]);
  v5 = a1[10];
  if (v5)
    xvm_free(v4, v5);
  v6 = a1[11];
  if (a2 == 1)
  {
    if (v6)
      heap_Free(*(_QWORD **)(v4 + 8), v6);
  }
  else if (v6)
  {
    xvm_free_sparse(v4);
  }
  v7 = a1[12];
  if (v7)
    rdr_freedat(v4, v7);
  v8 = a1[13];
  if (v8)
    rdr_freedat(v4, v8);
  v9 = a1[14];
  if (v9)
    rdr_free_qp(v9);
  v10 = a1[15];
  if (v10)
    heap_Free(*(_QWORD **)(v4 + 8), v10);
  return heap_Free(*(_QWORD **)(v4 + 8), (uint64_t)a1);
}

uint64_t mdl_sync(uint64_t a1)
{
  uint64_t v2;
  int started;
  unsigned int v4;
  unsigned int v5;
  int v6;
  BOOL v7;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v30;

  v2 = *(_QWORD *)a1;
  started = kbsymtab_PhonStartId(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 40));
  v4 = kbsymtab_PhonStartId(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 48));
  v5 = v4;
  v6 = *(_DWORD *)(a1 + 44);
  if (v6 == started && *(_DWORD *)(a1 + 48) == v4)
    return 0;
  if (started)
    v7 = v4 == 0;
  else
    v7 = 1;
  if (v7)
  {
    wapiti_fatal(*(_QWORD *)(v2 + 32), (uint64_t)"cannot synchronize an empty model");
    v6 = *(_DWORD *)(a1 + 44);
  }
  if (v6 == started || v6 == 0)
  {
    v10 = *(_DWORD *)(a1 + 48);
    v9 = *(_DWORD *)(a1 + 52);
  }
  else
  {
    wapiti_warning(*(_QWORD *)(v2 + 32), (uint64_t)"labels count changed, discarding the model");
    heap_Free(*(_QWORD **)(v2 + 8), *(_QWORD *)(a1 + 56));
    *(_QWORD *)(a1 + 56) = 0;
    heap_Free(*(_QWORD **)(v2 + 8), *(_QWORD *)(a1 + 64));
    *(_QWORD *)(a1 + 64) = 0;
    heap_Free(*(_QWORD **)(v2 + 8), *(_QWORD *)(a1 + 72));
    *(_QWORD *)(a1 + 72) = 0;
    v11 = *(_QWORD *)(a1 + 80);
    if (v11)
    {
      xvm_free(v2, v11);
      v9 = 0;
      v10 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
  }
  *(_DWORD *)(a1 + 44) = started;
  *(_DWORD *)(a1 + 48) = v5;
  v12 = heap_Realloc(*(uint64_t **)(v2 + 8), *(_QWORD *)(a1 + 56), v5);
  *(_QWORD *)(a1 + 56) = v12;
  v13 = heap_Realloc(*(uint64_t **)(v2 + 8), *(_QWORD *)(a1 + 64), 4 * v5);
  *(_QWORD *)(a1 + 64) = v13;
  v14 = heap_Realloc(*(uint64_t **)(v2 + 8), *(_QWORD *)(a1 + 72), 4 * v5);
  v15 = v14;
  *(_QWORD *)(a1 + 72) = v14;
  if (v12)
    v16 = v13 == 0;
  else
    v16 = 1;
  if (!v16 && v14 != 0)
  {
    v30 = v9;
    v20 = v5 - v10;
    if (v5 > v10)
    {
      v21 = v10;
      while (1)
      {
        v22 = *(char *)qrk_id2str(v2, *(_QWORD *)(*(_QWORD *)(a1 + 112) + 48), v21);
        if (v22 == 42)
          break;
        if (v22 == 117)
        {
          v23 = 1;
          goto LABEL_41;
        }
        if (v22 == 98)
        {
          *(_BYTE *)(v12 + v21) = 2;
LABEL_45:
          *(_DWORD *)(v15 + 4 * v21) = v9;
          v9 += started * started;
          goto LABEL_46;
        }
        v24 = *(_BYTE *)(v12 + v21);
        if ((v24 & 1) != 0)
          goto LABEL_43;
LABEL_44:
        if ((v24 & 2) != 0)
          goto LABEL_45;
LABEL_46:
        ++v21;
        if (!--v20)
          goto LABEL_47;
      }
      v23 = 3;
LABEL_41:
      *(_BYTE *)(v12 + v21) = v23;
LABEL_43:
      *(_DWORD *)(v13 + 4 * v21) = v9;
      v9 += started;
      v24 = *(_BYTE *)(v12 + v21);
      goto LABEL_44;
    }
LABEL_47:
    *(_DWORD *)(a1 + 52) = v9;
    v25 = xvm_new(v2, v9);
    v26 = v25;
    if (v30)
    {
      if (v25)
      {
        v27 = 0;
        v28 = *(_QWORD *)(a1 + 80);
        do
        {
          *(_DWORD *)(v25 + v27) = *(_DWORD *)(v28 + v27);
          v27 += 4;
        }
        while (4 * v30 != v27);
        xvm_free(v2, v28);
        *(_QWORD *)(a1 + 80) = v26;
        goto LABEL_53;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 80) = v25;
      if (v25)
      {
LABEL_53:
        if (v30 < v9)
          bzero((void *)(v26 + 4 * v30), 4 * (v9 + ~v30) + 4);
        qrk_lock(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 40), 1);
        qrk_lock(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 48), 1);
        return 0;
      }
    }
LABEL_56:
    heap_Free(*(_QWORD **)(v2 + 8), v12);
    *(_QWORD *)(a1 + 56) = 0;
    if (!v13)
      goto LABEL_29;
    goto LABEL_28;
  }
  if (v12)
    goto LABEL_56;
  if (v13)
  {
LABEL_28:
    heap_Free(*(_QWORD **)(v2 + 8), v13);
    *(_QWORD *)(a1 + 64) = 0;
  }
LABEL_29:
  if (v15)
  {
    heap_Free(*(_QWORD **)(v2 + 8), v15);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v18 = 2585796618;
  v19 = *(_QWORD *)(a1 + 80);
  if (v19)
  {
    xvm_free(v2, v19);
    *(_QWORD *)(a1 + 80) = 0;
  }
  return v18;
}

uint64_t mdl_sync_sparse(uint64_t a1)
{
  uint64_t v2;
  int started;
  unsigned int v4;
  unsigned int v5;
  int v6;
  BOOL v7;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int i;
  int v27;
  int v29;

  v2 = *(_QWORD *)a1;
  started = kbsymtab_PhonStartId(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 40));
  v4 = kbsymtab_PhonStartId(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 48));
  v5 = v4;
  v6 = *(_DWORD *)(a1 + 44);
  if (v6 == started && *(_DWORD *)(a1 + 48) == v4)
    return 0;
  if (started)
    v7 = v4 == 0;
  else
    v7 = 1;
  if (v7)
  {
    wapiti_fatal(*(_QWORD *)(v2 + 32), (uint64_t)"cannot synchronize an empty model");
    v6 = *(_DWORD *)(a1 + 44);
  }
  if (v6 == started || v6 == 0)
  {
    v10 = *(_DWORD *)(a1 + 48);
    v9 = *(unsigned int *)(a1 + 52);
  }
  else
  {
    wapiti_warning(*(_QWORD *)(v2 + 32), (uint64_t)"labels count changed, discarding the model");
    heap_Free(*(_QWORD **)(v2 + 8), *(_QWORD *)(a1 + 56));
    *(_QWORD *)(a1 + 56) = 0;
    heap_Free(*(_QWORD **)(v2 + 8), *(_QWORD *)(a1 + 64));
    *(_QWORD *)(a1 + 64) = 0;
    heap_Free(*(_QWORD **)(v2 + 8), *(_QWORD *)(a1 + 72));
    *(_QWORD *)(a1 + 72) = 0;
    if (*(_QWORD *)(a1 + 88))
    {
      xvm_free_sparse(v2);
      v9 = 0;
      v10 = 0;
      *(_QWORD *)(a1 + 88) = 0;
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
  }
  *(_DWORD *)(a1 + 44) = started;
  *(_DWORD *)(a1 + 48) = v5;
  v11 = heap_Realloc(*(uint64_t **)(v2 + 8), *(_QWORD *)(a1 + 56), v5);
  *(_QWORD *)(a1 + 56) = v11;
  v12 = heap_Realloc(*(uint64_t **)(v2 + 8), *(_QWORD *)(a1 + 64), 4 * v5);
  *(_QWORD *)(a1 + 64) = v12;
  v13 = heap_Realloc(*(uint64_t **)(v2 + 8), *(_QWORD *)(a1 + 72), 4 * v5);
  v14 = v13;
  *(_QWORD *)(a1 + 72) = v13;
  if (v11)
    v15 = v12 == 0;
  else
    v15 = 1;
  if (!v15 && v13 != 0)
  {
    v29 = v9;
    v19 = v5 - v10;
    if (v5 > v10)
    {
      v9 = v9;
      v20 = v10;
      while (1)
      {
        v21 = *(char *)qrk_id2str(v2, *(_QWORD *)(*(_QWORD *)(a1 + 112) + 48), v20);
        if (v21 == 42)
          break;
        if (v21 == 117)
        {
          v22 = 1;
          goto LABEL_41;
        }
        if (v21 == 98)
        {
          *(_BYTE *)(v11 + v20) = 2;
LABEL_45:
          *(_DWORD *)(v14 + 4 * v20) = v9;
          v9 = (v9 + started * started);
          goto LABEL_46;
        }
        v23 = *(_BYTE *)(v11 + v20);
        if ((v23 & 1) != 0)
          goto LABEL_43;
LABEL_44:
        if ((v23 & 2) != 0)
          goto LABEL_45;
LABEL_46:
        ++v20;
        if (!--v19)
          goto LABEL_47;
      }
      v22 = 3;
LABEL_41:
      *(_BYTE *)(v11 + v20) = v22;
LABEL_43:
      *(_DWORD *)(v12 + 4 * v20) = v9;
      v9 = (v9 + started);
      v23 = *(_BYTE *)(v11 + v20);
      goto LABEL_44;
    }
LABEL_47:
    *(_DWORD *)(a1 + 52) = v9;
    v24 = sparray_init(v2, v9);
    v25 = v24;
    if (v29)
    {
      if (v24)
      {
        for (i = 0; i != v29; ++i)
        {
          v27 = sparray_get(*(_QWORD *)(a1 + 88), i);
          sparray_set(v25, i, v27);
        }
        sparray_free(v2, *(uint64_t **)(a1 + 88));
        *(_QWORD *)(a1 + 88) = v25;
        goto LABEL_53;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 88) = v24;
      if (v24)
      {
LABEL_53:
        qrk_lock(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 40), 1);
        qrk_lock(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 48), 1);
        return 0;
      }
    }
LABEL_54:
    heap_Free(*(_QWORD **)(v2 + 8), v11);
    *(_QWORD *)(a1 + 56) = 0;
    if (!v12)
      goto LABEL_29;
    goto LABEL_28;
  }
  if (v11)
    goto LABEL_54;
  if (v12)
  {
LABEL_28:
    heap_Free(*(_QWORD **)(v2 + 8), v12);
    *(_QWORD *)(a1 + 64) = 0;
  }
LABEL_29:
  if (v14)
  {
    heap_Free(*(_QWORD **)(v2 + 8), v14);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v17 = 2585796618;
  v18 = *(uint64_t **)(a1 + 88);
  if (v18)
  {
    sparray_free(v2, v18);
    *(_QWORD *)(a1 + 88) = 0;
  }
  return v17;
}

uint64_t pat_comp(uint64_t a1, _BYTE *a2, _QWORD *a3)
{
  uint64_t v5;
  int v6;
  int i;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  unsigned int v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _BYTE *v18;
  int v19;
  uint64_t v20;
  __darwin_ct_rune_t v21;
  char v22;
  __darwin_ct_rune_t v23;
  int v24;
  _BOOL4 v27;
  _QWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  unsigned int v31;
  void *v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  void *v39;
  _QWORD *v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  size_t v45;
  uint64_t v46;

  v5 = a1;
  v6 = 0;
  for (i = 0; a2[i] == 37; ++i)
  {
    ++v6;
LABEL_6:
    ;
  }
  if (a2[i])
    goto LABEL_6;
  v8 = 2585796618;
  v9 = (_QWORD *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 32 * ((2 * v6) | 1u) + 48);
  v10 = v9;
  if (!v9)
    goto LABEL_54;
  v41 = a3;
  *v9 = a2;
  if (!*a2)
  {
    v12 = 0;
    v43 = 0;
LABEL_52:
    v8 = 0;
    *((_DWORD *)v10 + 2) = v43;
    *((_DWORD *)v10 + 3) = v12;
    a3 = v41;
    goto LABEL_54;
  }
  v11 = 0;
  v43 = 0;
  v12 = 0;
  v13 = a2;
  v42 = v5;
  while (2)
  {
    v14 = v12;
    v15 = v10;
    v16 = &v10[4 * v12];
    v16[3] = 0;
    v17 = v16 + 3;
    v18 = v17 - 1;
    v19 = *v13;
    if (v19 != 37)
    {
      v31 = 0;
      if (v19)
      {
        do
        {
          if (v19 == 37)
            break;
          v19 = a2[++v31 + v11];
        }
        while (a2[v31 + v11]);
      }
      *v18 = 115;
      v10 = v15;
      HIDWORD(v15[4 * v12 + 2]) = 0;
      v32 = (void *)heap_Alloc(*(_QWORD *)(v5 + 8), v31 + 1);
      *v17 = v32;
      if (!v32)
        goto LABEL_53;
      memcpy(v32, &a2[v11], v31);
      *(_BYTE *)(*v17 + (int)v31) = 0;
      v11 += v31;
LABEL_49:
      ++v12;
      v13 = &a2[v11];
      if (!*v13)
        goto LABEL_52;
      continue;
    }
    break;
  }
  v44 = v12;
  v45 = 0;
  v46 = 0;
  v20 = (v11 + 1);
  v21 = __tolower((char)a2[v20]);
  v22 = v21;
  v23 = v21 << 24;
  v24 = (char)v21;
  if (v21 << 24 != 1828716544 && v23 != 1946157056 && v23 != 2013265920)
    wapiti_fatal(*(_QWORD *)(v42 + 32), (uint64_t)"unknown command type: '%c'");
  *v18 = v22;
  v27 = v24 != (char)a2[v20];
  v10 = v15;
  v28 = &v15[4 * v14];
  *((_DWORD *)v28 + 8) = 0;
  v29 = v28 + 4;
  *(v29 - 3) = v27;
  v30 = (v11 + 2);
  if (wapiti_scanf_pat_len(&a2[v30], "[@", (int *)&v46, (int *)&v46 + 1, &v45) == 2)
  {
    *v29 = 1;
    v5 = v42;
    v12 = v44;
  }
  else
  {
    v5 = v42;
    v12 = v44;
    if (wapiti_scanf_pat_len(&a2[v30], "[", (int *)&v46, (int *)&v46 + 1, &v45) != 2)
      wapiti_fatal(*(_QWORD *)(v42 + 32), (uint64_t)"invalid pattern: %s");
  }
  *(_QWORD *)((char *)&v15[4 * v14 + 4] + 4) = v46;
  v33 = v43;
  if (v43 <= HIDWORD(v46))
    v33 = HIDWORD(v46);
  v43 = v33;
  v34 = v30 + v45;
  if (v23 != 1946157056 && v23 != 1828716544)
  {
LABEL_46:
    if (a2[v34] != 93)
      wapiti_fatal(*(_QWORD *)(v5 + 32), (uint64_t)"missing end of pattern: %s");
    v11 = v34 + 1;
    goto LABEL_49;
  }
  if (a2[v34] != 44 && a2[v34 + 1] != 34)
    wapiti_fatal(*(_QWORD *)(v5 + 32), (uint64_t)"missing arg in pattern: %s");
  v35 = v34 + 2;
  v36 = v35;
  while (2)
  {
    v37 = a2[v36];
    if (v37 == 92)
    {
      if (a2[v36 + 1])
        ++v36;
LABEL_42:
      ++v36;
      continue;
    }
    break;
  }
  if (a2[v36])
  {
    if (v37 == 34)
      goto LABEL_44;
    goto LABEL_42;
  }
  wapiti_fatal(*(_QWORD *)(v5 + 32), (uint64_t)"unended argument: %s");
LABEL_44:
  v38 = v36 - (uint64_t)v35;
  v39 = (void *)heap_Alloc(*(_QWORD *)(v5 + 8), (v38 + 1));
  *v17 = v39;
  if (v39)
  {
    memcpy(v39, &a2[v35], v38);
    *(_BYTE *)(*v17 + v38) = 0;
    v34 = v36 + 1;
    v12 = v44;
    goto LABEL_46;
  }
LABEL_53:
  a3 = v41;
  v8 = 2585796618;
LABEL_54:
  *a3 = v10;
  return v8;
}

uint64_t pat_exec(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v5;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const char *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char **v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t *v37;
  unsigned int v38;

  v5 = 2585796615;
  if (a5)
  {
    v11 = *(_DWORD *)a3;
    *a5 = 0;
    v12 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
    if (v12)
    {
      v13 = v12;
      v37 = a5;
      LODWORD(v14) = *(_DWORD *)(a2 + 12);
      if ((_DWORD)v14)
      {
        v15 = 0;
        v16 = 0;
        LODWORD(v17) = 16;
        do
        {
          v18 = a2 + 32 * v15;
          v38 = 0;
          v19 = *(unsigned __int8 *)(v18 + 16);
          if (v19 == 115)
          {
            v20 = *(const char **)(v18 + 24);
            v21 = strlen(v20);
          }
          else
          {
            v25 = *(_DWORD *)(v18 + 36);
            if (v25 >= 0)
              v26 = -1;
            else
              v26 = v11;
            if (*(_DWORD *)(v18 + 32))
              v27 = v26;
            else
              v27 = a4;
            v28 = (v27 + v25);
            if ((int)v28 < 0)
            {
              if ((int)v28 <= -5)
                v31 = -5;
              else
                v31 = v28;
              v30 = &bval[~v31];
            }
            else if ((int)v28 >= v11)
            {
              if ((int)v28 - v11 >= 4)
                v32 = 4;
              else
                v32 = v28 - v11;
              v30 = &eval[v32];
            }
            else
            {
              v29 = *(unsigned int *)(v18 + 40);
              if (v29 >= *(_DWORD *)(*(_QWORD *)(a3 + 16) + 4 * v28))
              {
                wapiti_fatal(*(_QWORD *)(a1 + 32), (uint64_t)"missing tokens, cannot apply pattern");
                heap_Free(*(_QWORD **)(a1 + 8), v13);
                return 2585796615;
              }
              v30 = (char **)(*(_QWORD *)(a3 + 8 * v28 + 24) + 8 * v29);
            }
            v20 = *v30;
            if (v19 == 109)
            {
              v33 = rex_match(a1, *(unsigned __int8 **)(a2 + 32 * v15 + 24), *v30, (int *)&v38);
              if (v33 == -1)
              {
                v21 = 0;
                v38 = 0;
              }
              else
              {
                v21 = v38;
              }
              v20 += v33;
              goto LABEL_8;
            }
            if (v19 != 116)
            {
              if (v19 == 120)
              {
                v21 = strlen(*v30);
                v38 = v21;
              }
              else
              {
                v21 = 0;
              }
              goto LABEL_8;
            }
            v34 = rex_match(a1, *(unsigned __int8 **)(a2 + 32 * v15 + 24), *v30, (int *)&v38);
            if (v34 == -1)
              v20 = "false";
            else
              v20 = "true";
            if (v34 == -1)
              v21 = 5;
            else
              v21 = 4;
          }
          v38 = v21;
LABEL_8:
          if (v21 + v16 >= (int)v17 - 1)
          {
            do
              v17 = v17 + (v17 >> 1);
            while (v21 + v16 >= (int)v17 - 1);
            v22 = heap_Realloc(*(uint64_t **)(a1 + 8), v13, v17);
            if (!v22)
              goto LABEL_54;
            v23 = v22;
            v21 = v38;
            v13 = v23;
          }
          memcpy((void *)(v13 + v16), v20, v21);
          LODWORD(v14) = v38 + v16;
          if (*(_DWORD *)(a2 + 32 * v15 + 20) && v16 < v14)
          {
            v24 = v16;
            do
            {
              *(_BYTE *)(v13 + v24) = __tolower(*(char *)(v13 + v24));
              ++v24;
              v14 = v38 + v16;
            }
            while (v24 < v14);
          }
          ++v15;
          v16 = v14;
        }
        while (v15 < *(unsigned int *)(a2 + 12));
      }
      *(_BYTE *)(v13 + v14) = 0;
      v35 = heap_Realloc(*(uint64_t **)(a1 + 8), v13, (v14 + 1));
      if (v35)
      {
        v5 = 0;
      }
      else
      {
LABEL_54:
        heap_Free(*(_QWORD **)(a1 + 8), v13);
        v35 = 0;
        v5 = 2585796618;
      }
      *v37 = v35;
    }
    else
    {
      return 2585796618;
    }
  }
  return v5;
}

uint64_t rex_match(uint64_t a1, unsigned __int8 *a2, _BYTE *a3, int *a4)
{
  uint64_t i;
  _BYTE *v9;

  if (*a2 == 94)
  {
    *a4 = 0;
    if (rex_matchme(a1, a2 + 1, a3, a4))
      return 0;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    for (i = 0; ; ++i)
    {
      *a4 = 0;
      v9 = &a3[i];
      if (rex_matchme(a1, a2, &a3[i], a4))
        break;
      if (!*v9)
        return 0xFFFFFFFFLL;
    }
  }
  return i;
}

_QWORD *pat_free(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  if (a2)
  {
    v3 = result;
    if (*(_DWORD *)(a2 + 12))
    {
      v4 = 0;
      v5 = (uint64_t *)(a2 + 24);
      do
      {
        v6 = *v5;
        v5 += 4;
        heap_Free((_QWORD *)v3[1], v6);
        ++v4;
      }
      while (v4 < *(unsigned int *)(a2 + 12));
    }
    heap_Free((_QWORD *)v3[1], *(_QWORD *)a2);
    return heap_Free((_QWORD *)v3[1], a2);
  }
  return result;
}

uint64_t rex_matchme(uint64_t a1, unsigned __int8 *a2, _BYTE *a3, int *a4)
{
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t result;
  int v14;

LABEL_1:
  while (2)
  {
    v8 = a2;
    while (1)
    {
      v9 = *v8;
      if (v9 == 36)
      {
        a2 = v8 + 1;
        v11 = v8[1];
        if (!v8[1])
          return *a3 == 0;
        v10 = (uint64_t)v8;
      }
      else
      {
        if (!*v8)
          return 1;
        v10 = (uint64_t)(v9 == 92 ? v8 + 1 : v8);
        if (v9 == 63 || v9 == 42)
          wapiti_fatal(*(_QWORD *)(a1 + 32), (uint64_t)"unescaped * or ? in regexp: %s");
        a2 = (unsigned __int8 *)(v10 + 1);
        v11 = *(unsigned __int8 *)(v10 + 1);
      }
      if (v11 != 63)
        break;
      a2 = (unsigned __int8 *)(v10 + 2);
      v12 = rex_matchit(v8, a3);
      v8 = (unsigned __int8 *)(v10 + 2);
      if (v12)
      {
        ++*a4;
        if (!rex_matchme(a1, v10 + 2, a3 + 1, a4))
        {
          --*a4;
          goto LABEL_1;
        }
        return 1;
      }
    }
    if (v11 == 42)
    {
      while (1)
      {
        v14 = *a4;
        if (rex_matchme(a1, v10 + 2, a3, a4))
          break;
        *a4 = v14 + 1;
        result = rex_matchit(v8, a3++);
        if (!(_DWORD)result)
          return result;
      }
      return 1;
    }
    ++*a4;
    result = rex_matchit(v8, a3++);
    if ((_DWORD)result)
      continue;
    return result;
  }
}

  v149 = (_OWORD *)((char *)a2 - 24);
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = (uint64_t)a2 - v7;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v7) >> 3);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        v58 = *((unsigned __int8 *)a2 - 1);
        if ((v58 & 0x80u) != 0)
          v58 = *((_QWORD *)a2 - 2);
        v59 = *(unsigned __int8 *)(v7 + 23);
        if ((v59 & 0x80u) != 0)
          v59 = *(_QWORD *)(v7 + 8);
        if (v58 > v59)
        {
          v165 = *(_QWORD *)(v7 + 16);
          v157 = *(_OWORD *)v7;
          v60 = *v149;
          *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 - 1);
          *(_OWORD *)v7 = v60;
          *((_QWORD *)a2 - 1) = v165;
          *v149 = v157;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((__int128 *)v7, (__int128 *)(v7 + 24), v149);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(v7, v7 + 24, v7 + 48, (uint64_t)v149);
        return;
      case 5:
        v61 = (__int128 *)(v7 + 24);
        v62 = (__int128 *)(v7 + 48);
        v63 = (__int128 *)(v7 + 72);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(v7, v7 + 24, v7 + 48, v7 + 72);
        v64 = *((unsigned __int8 *)a2 - 1);
        if ((v64 & 0x80u) != 0)
          v64 = *((_QWORD *)a2 - 2);
        v65 = *(unsigned __int8 *)(v7 + 95);
        if ((v65 & 0x80u) != 0)
          v65 = *(_QWORD *)(v7 + 80);
        if (v64 > v65)
        {
          v66 = *v63;
          v67 = *(_QWORD *)(v7 + 88);
          v68 = *((_QWORD *)a2 - 1);
          *v63 = *v149;
          *(_QWORD *)(v7 + 88) = v68;
          *((_QWORD *)a2 - 1) = v67;
          *v149 = v66;
          v69 = *(unsigned __int8 *)(v7 + 95);
          if ((v69 & 0x80u) != 0)
            v69 = *(_QWORD *)(v7 + 80);
          v70 = *(unsigned __int8 *)(v7 + 71);
          if ((v70 & 0x80u) != 0)
            v70 = *(_QWORD *)(v7 + 56);
          if (v69 > v70)
          {
            v71 = *(_QWORD *)(v7 + 64);
            v72 = *v62;
            *v62 = *v63;
            *(_QWORD *)(v7 + 64) = *(_QWORD *)(v7 + 88);
            *v63 = v72;
            *(_QWORD *)(v7 + 88) = v71;
            v73 = *(unsigned __int8 *)(v7 + 71);
            if ((v73 & 0x80u) != 0)
              v73 = *(_QWORD *)(v7 + 56);
            v74 = *(unsigned __int8 *)(v7 + 47);
            if ((v74 & 0x80u) != 0)
              v74 = *(_QWORD *)(v7 + 32);
            if (v73 > v74)
            {
              v75 = *(_QWORD *)(v7 + 40);
              v76 = *v61;
              *v61 = *v62;
              *(_QWORD *)(v7 + 40) = *(_QWORD *)(v7 + 64);
              *v62 = v76;
              *(_QWORD *)(v7 + 64) = v75;
              v77 = *(unsigned __int8 *)(v7 + 47);
              if ((v77 & 0x80u) != 0)
                v77 = *(_QWORD *)(v7 + 32);
              v78 = *(unsigned __int8 *)(v7 + 23);
              if ((v78 & 0x80u) != 0)
                v78 = *(_QWORD *)(v7 + 8);
              if (v77 > v78)
              {
                v166 = *(_QWORD *)(v7 + 16);
                v158 = *(_OWORD *)v7;
                *(_OWORD *)v7 = *v61;
                *(_QWORD *)(v7 + 16) = *(_QWORD *)(v7 + 40);
                *v61 = v158;
                *(_QWORD *)(v7 + 40) = v166;
              }
            }
          }
        }
        return;
      default:
        if (v8 <= 575)
        {
          v79 = (_QWORD *)(v7 + 24);
          v81 = (_OWORD *)v7 == a2 || v79 == (_QWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v81)
            {
              v82 = 0;
              v83 = (_QWORD *)v7;
              do
              {
                v84 = v79;
                v85 = *((unsigned __int8 *)v83 + 47);
                v86 = v85;
                v87 = v83[4];
                if ((v85 & 0x80u) != 0)
                  v85 = v83[4];
                v88 = *((unsigned __int8 *)v83 + 23);
                if ((v88 & 0x80u) != 0)
                  v88 = v83[1];
                if (v85 > v88)
                {
                  v89 = *v84;
                  *(_DWORD *)v159 = *((_DWORD *)v83 + 10);
                  *(_DWORD *)&v159[3] = *(_DWORD *)((char *)v83 + 43);
                  v84[1] = 0;
                  v84[2] = 0;
                  *v84 = 0;
                  v90 = v82;
                  while (1)
                  {
                    v91 = v7 + v90;
                    *(_OWORD *)(v91 + 24) = *(_OWORD *)(v7 + v90);
                    *(_QWORD *)(v91 + 40) = *(_QWORD *)(v7 + v90 + 16);
                    *(_BYTE *)(v91 + 23) = 0;
                    *(_BYTE *)v91 = 0;
                    if (!v90)
                      break;
                    v92 = *(unsigned __int8 *)(v91 - 1);
                    v93 = *(_QWORD *)(v91 - 16);
                    if ((v92 & 0x80u) == 0)
                      v93 = v92;
                    v90 -= 24;
                    if (v85 <= v93)
                    {
                      v94 = v7 + v90 + 24;
                      goto LABEL_143;
                    }
                  }
                  v94 = v7;
LABEL_143:
                  *(_QWORD *)v94 = v89;
                  *(_QWORD *)(v94 + 8) = v87;
                  *(_DWORD *)(v94 + 16) = *(_DWORD *)v159;
                  *(_DWORD *)(v94 + 19) = *(_DWORD *)&v159[3];
                  *(_BYTE *)(v94 + 23) = v86;
                }
                v79 = v84 + 3;
                v82 += 24;
                v83 = v84;
              }
              while (v84 + 3 != (_QWORD *)a2);
            }
          }
          else if (!v81)
          {
            do
            {
              v140 = v79;
              v141 = *(unsigned __int8 *)(a1 + 47);
              v142 = v141;
              v143 = *(_QWORD *)(a1 + 32);
              if ((v141 & 0x80u) != 0)
                v141 = *(_QWORD *)(a1 + 32);
              v144 = *(unsigned __int8 *)(a1 + 23);
              if ((v144 & 0x80u) != 0)
                v144 = *(_QWORD *)(a1 + 8);
              if (v141 > v144)
              {
                v145 = *v140;
                *(_DWORD *)v162 = *(_DWORD *)(a1 + 40);
                *(_DWORD *)&v162[3] = *(_DWORD *)(a1 + 43);
                v140[1] = 0;
                v140[2] = 0;
                *v140 = 0;
                v146 = v140;
                do
                {
                  *(_OWORD *)v146 = *(_OWORD *)(v146 - 3);
                  v146[2] = *(v146 - 1);
                  *((_BYTE *)v146 - 1) = 0;
                  *((_BYTE *)v146 - 24) = 0;
                  v147 = *((unsigned __int8 *)v146 - 25);
                  v148 = *(v146 - 5);
                  v146 -= 3;
                  if ((v147 & 0x80u) != 0)
                    v147 = v148;
                }
                while (v141 > v147);
                *v146 = v145;
                v146[1] = v143;
                *(_DWORD *)((char *)v146 + 19) = *(_DWORD *)&v162[3];
                *((_DWORD *)v146 + 4) = *(_DWORD *)v162;
                *((_BYTE *)v146 + 23) = v142;
              }
              v79 = v140 + 3;
              a1 = (uint64_t)v140;
            }
            while (v140 + 3 != (_QWORD *)a2);
          }
          return;
        }
        if (!a3)
        {
          if ((_OWORD *)v7 != a2)
          {
            v95 = (unint64_t)(v9 - 2) >> 1;
            v96 = v95;
            do
            {
              v97 = v96;
              if (v95 >= v96)
              {
                v98 = (2 * v96) | 1;
                v99 = v7 + 24 * v98;
                if (2 * v97 + 2 < v9)
                {
                  v100 = *(unsigned __int8 *)(v99 + 23);
                  if ((v100 & 0x80u) != 0)
                    v100 = *(_QWORD *)(v99 + 8);
                  v101 = *(unsigned __int8 *)(v99 + 47);
                  if ((v101 & 0x80u) != 0)
                    v101 = *(_QWORD *)(v99 + 32);
                  v99 += 24 * (v100 > v101);
                  if (v100 > v101)
                    v98 = 2 * v97 + 2;
                }
                v102 = v7 + 24 * v97;
                if (*(char *)(v99 + 23) >= 0)
                  v103 = *(unsigned __int8 *)(v99 + 23);
                else
                  v103 = *(_QWORD *)(v99 + 8);
                v104 = *(unsigned __int8 *)(v102 + 23);
                v105 = v104;
                v106 = *(_QWORD *)(v102 + 8);
                if ((v104 & 0x80u) != 0)
                  v104 = *(_QWORD *)(v102 + 8);
                if (v103 <= v104)
                {
                  v107 = *(_QWORD *)v102;
                  *(_DWORD *)&v160[3] = *(_DWORD *)(v102 + 19);
                  *(_DWORD *)v160 = *(_DWORD *)(v102 + 16);
                  *(_QWORD *)(v102 + 8) = 0;
                  *(_QWORD *)(v102 + 16) = 0;
                  *(_QWORD *)v102 = 0;
                  do
                  {
                    v108 = v102;
                    v102 = v99;
                    v109 = *(_OWORD *)v99;
                    *(_QWORD *)(v108 + 16) = *(_QWORD *)(v99 + 16);
                    *(_OWORD *)v108 = v109;
                    *(_BYTE *)(v99 + 23) = 0;
                    *(_BYTE *)v99 = 0;
                    if (v95 < v98)
                      break;
                    v110 = (2 * v98) | 1;
                    v99 = v7 + 24 * v110;
                    v111 = 2 * v98 + 2;
                    if (v111 < v9)
                    {
                      v112 = *(unsigned __int8 *)(v99 + 23);
                      if ((v112 & 0x80u) != 0)
                        v112 = *(_QWORD *)(v99 + 8);
                      v113 = *(unsigned __int8 *)(v99 + 47);
                      if ((v113 & 0x80u) != 0)
                        v113 = *(_QWORD *)(v99 + 32);
                      v99 += 24 * (v112 > v113);
                      if (v112 > v113)
                        v110 = v111;
                    }
                    v114 = *(char *)(v99 + 23) >= 0 ? *(unsigned __int8 *)(v99 + 23) : *(_QWORD *)(v99 + 8);
                    v98 = v110;
                  }
                  while (v114 <= v104);
                  *(_QWORD *)v102 = v107;
                  *(_QWORD *)(v102 + 8) = v106;
                  *(_DWORD *)(v102 + 16) = *(_DWORD *)v160;
                  *(_DWORD *)(v102 + 19) = *(_DWORD *)&v160[3];
                  *(_BYTE *)(v102 + 23) = v105;
                }
              }
              v96 = v97 - 1;
            }
            while (v97);
            v115 = v8 / 0x18uLL;
            v151 = (_QWORD *)(v7 + 8);
            do
            {
              v116 = 0;
              v117 = a2;
              v118 = *(_QWORD *)a1;
              *(_QWORD *)v161 = *v151;
              *(_QWORD *)&v161[7] = *(_QWORD *)((char *)v151 + 7);
              v119 = *(_BYTE *)(a1 + 23);
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              v120 = a1;
              do
              {
                v121 = v120 + 24 * v116 + 24;
                v122 = 2 * v116;
                v116 = (2 * v116) | 1;
                v123 = v122 + 2;
                if (v122 + 2 < v115)
                {
                  v124 = *(unsigned __int8 *)(v121 + 23);
                  if ((v124 & 0x80u) != 0)
                    v124 = *(_QWORD *)(v121 + 8);
                  v125 = *(unsigned __int8 *)(v121 + 47);
                  if ((v125 & 0x80u) != 0)
                    v125 = *(_QWORD *)(v121 + 32);
                  v121 += 24 * (v124 > v125);
                  if (v124 > v125)
                    v116 = v123;
                }
                if (*(char *)(v120 + 23) < 0)
                  operator delete(*(void **)v120);
                v126 = *(_OWORD *)v121;
                *(_QWORD *)(v120 + 16) = *(_QWORD *)(v121 + 16);
                *(_OWORD *)v120 = v126;
                *(_BYTE *)(v121 + 23) = 0;
                *(_BYTE *)v121 = 0;
                v120 = v121;
              }
              while (v116 <= (uint64_t)((unint64_t)(v115 - 2) >> 1));
              a2 = (_OWORD *)((char *)a2 - 24);
              if ((_OWORD *)v121 == (_OWORD *)((char *)v117 - 24))
              {
                *(_QWORD *)v121 = v118;
                *(_QWORD *)(v121 + 8) = *(_QWORD *)v161;
                *(_QWORD *)(v121 + 15) = *(_QWORD *)&v161[7];
                *(_BYTE *)(v121 + 23) = v119;
              }
              else
              {
                v127 = *a2;
                *(_QWORD *)(v121 + 16) = *((_QWORD *)v117 - 1);
                *(_OWORD *)v121 = v127;
                *((_QWORD *)v117 - 3) = v118;
                *(_QWORD *)((char *)v117 - 9) = *(_QWORD *)&v161[7];
                *((_QWORD *)v117 - 2) = *(_QWORD *)v161;
                *((_BYTE *)v117 - 1) = v119;
                v128 = v121 - a1 + 24;
                if (v128 >= 25)
                {
                  v129 = (v128 / 0x18uLL - 2) >> 1;
                  v130 = a1 + 24 * v129;
                  if (*(char *)(v130 + 23) >= 0)
                    v131 = *(unsigned __int8 *)(v130 + 23);
                  else
                    v131 = *(_QWORD *)(v130 + 8);
                  v132 = *(unsigned __int8 *)(v121 + 23);
                  v133 = v132;
                  v134 = *(_QWORD *)(v121 + 8);
                  if ((v132 & 0x80u) != 0)
                    v132 = *(_QWORD *)(v121 + 8);
                  if (v131 > v132)
                  {
                    v135 = *(_QWORD *)v121;
                    *(_DWORD *)&v154[3] = *(_DWORD *)(v121 + 19);
                    *(_DWORD *)v154 = *(_DWORD *)(v121 + 16);
                    *(_QWORD *)(v121 + 8) = 0;
                    *(_QWORD *)(v121 + 16) = 0;
                    *(_QWORD *)v121 = 0;
                    do
                    {
                      v136 = v121;
                      v121 = v130;
                      v137 = *(_OWORD *)v130;
                      *(_QWORD *)(v136 + 16) = *(_QWORD *)(v130 + 16);
                      *(_OWORD *)v136 = v137;
                      *(_BYTE *)(v130 + 23) = 0;
                      *(_BYTE *)v130 = 0;
                      if (!v129)
                        break;
                      v129 = (v129 - 1) >> 1;
                      v130 = a1 + 24 * v129;
                      v138 = *(unsigned __int8 *)(v130 + 23);
                      if ((v138 & 0x80u) != 0)
                        v138 = *(_QWORD *)(v130 + 8);
                    }
                    while (v138 > v132);
                    *(_QWORD *)v121 = v135;
                    *(_QWORD *)(v121 + 8) = v134;
                    *(_DWORD *)(v121 + 16) = *(_DWORD *)v154;
                    *(_DWORD *)(v121 + 19) = *(_DWORD *)&v154[3];
                    *(_BYTE *)(v121 + 23) = v133;
                  }
                }
              }
            }
            while (v115-- > 2);
          }
          return;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = v7 + 24 * ((unint64_t)v9 >> 1);
        if ((unint64_t)v8 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((__int128 *)(a1 + 24 * v10), (__int128 *)a1, v149);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((__int128 *)a1, (__int128 *)(a1 + 24 * v10), v149);
          v12 = 3 * v10;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((__int128 *)(a1 + 24), (__int128 *)(a1 + 8 * v12 - 24), a2 - 3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((__int128 *)(a1 + 48), (__int128 *)(a1 + 24 + 8 * v12), (_OWORD *)((char *)a2 - 72));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((__int128 *)(a1 + 8 * v12 - 24), (__int128 *)v11, (__int128 *)(a1 + 24 + 8 * v12));
          v163 = *(_QWORD *)(a1 + 16);
          v155 = *(_OWORD *)a1;
          v13 = *(_QWORD *)(v11 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v11;
          *(_QWORD *)(a1 + 16) = v13;
          *(_QWORD *)(v11 + 16) = v163;
          *(_OWORD *)v11 = v155;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = *(_QWORD *)(a1 - 16);
          if (*(char *)(a1 - 1) >= 0)
            v17 = *(unsigned __int8 *)(a1 - 1);
          v15 = *(unsigned __int8 *)(a1 + 23);
          v16 = v15;
          v14 = *(_QWORD *)(a1 + 8);
          if ((v15 & 0x80u) == 0)
            v18 = *(unsigned __int8 *)(a1 + 23);
          else
            v18 = *(_QWORD *)(a1 + 8);
          if (v17 > v18)
            goto LABEL_16;
          v41 = *(_QWORD *)a1;
          *(_DWORD *)v153 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)&v153[3] = *(_DWORD *)(a1 + 19);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v42 = *((unsigned __int8 *)a2 - 1);
          if ((v42 & 0x80u) != 0)
            v42 = *((_QWORD *)a2 - 2);
          if (v18 <= v42)
          {
            v46 = a1 + 24;
            do
            {
              v7 = v46;
              if (v46 >= (unint64_t)a2)
                break;
              v47 = *(char *)(v46 + 23) >= 0 ? *(unsigned __int8 *)(v46 + 23) : *(_QWORD *)(v46 + 8);
              v46 += 24;
            }
            while (v18 <= v47);
          }
          else
          {
            v43 = a1;
            do
            {
              v7 = v43 + 24;
              v44 = *(unsigned __int8 *)(v43 + 47);
              v45 = *(_QWORD *)(v43 + 32);
              if ((v44 & 0x80u) != 0)
                v44 = v45;
              v43 = v7;
            }
            while (v18 <= v44);
          }
          v48 = a2;
          if (v7 < (unint64_t)a2)
          {
            v49 = a2;
            do
            {
              v48 = (__int128 *)((char *)v49 - 24);
              v50 = *((unsigned __int8 *)v49 - 1);
              v51 = *((_QWORD *)v49 - 2);
              if ((v50 & 0x80u) != 0)
                v50 = v51;
              v49 = v48;
            }
            while (v18 > v50);
          }
          while (v7 < (unint64_t)v48)
          {
            v164 = *(_QWORD *)(v7 + 16);
            v156 = *(_OWORD *)v7;
            v52 = *v48;
            *(_QWORD *)(v7 + 16) = *((_QWORD *)v48 + 2);
            *(_OWORD *)v7 = v52;
            *((_QWORD *)v48 + 2) = v164;
            *v48 = v156;
            do
            {
              v53 = *(unsigned __int8 *)(v7 + 47);
              v54 = *(_QWORD *)(v7 + 32);
              v7 += 24;
              if ((v53 & 0x80u) != 0)
                v53 = v54;
            }
            while (v18 <= v53);
            do
            {
              v55 = *((unsigned __int8 *)v48 - 1);
              v56 = *((_QWORD *)v48 - 2);
              v48 = (__int128 *)((char *)v48 - 24);
              if ((v55 & 0x80u) != 0)
                v55 = v56;
            }
            while (v18 > v55);
          }
          if (v7 - 24 == a1)
          {
            if (*(char *)(v7 - 1) < 0)
              operator delete(*(void **)a1);
          }
          else
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v57 = *(_OWORD *)(v7 - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 - 8);
            *(_OWORD *)a1 = v57;
            *(_BYTE *)(v7 - 1) = 0;
          }
          a4 = 0;
          *(_QWORD *)(v7 - 24) = v41;
          *(_QWORD *)(v7 - 16) = v14;
          *(_DWORD *)(v7 - 5) = *(_DWORD *)&v153[3];
          *(_DWORD *)(v7 - 8) = *(_DWORD *)v153;
          *(_BYTE *)(v7 - 1) = v16;
          continue;
        }
        v14 = *(_QWORD *)(a1 + 8);
        v15 = *(unsigned __int8 *)(a1 + 23);
        v16 = *(_BYTE *)(a1 + 23);
LABEL_16:
        v19 = *(_QWORD *)a1;
        *(_DWORD *)v152 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)&v152[3] = *(_DWORD *)(a1 + 19);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        if (v16 >= 0)
          v20 = v15;
        else
          v20 = v14;
        v21 = a1;
        do
        {
          v22 = v21;
          v21 += 24;
          v23 = *(unsigned __int8 *)(v22 + 47);
          if ((v23 & 0x80u) != 0)
            v23 = *(_QWORD *)(v22 + 32);
        }
        while (v23 > v20);
        v24 = a2;
        if (v22 == a1)
        {
          v28 = a2;
          while (v21 < (unint64_t)v28)
          {
            v25 = (_OWORD *)((char *)v28 - 24);
            v29 = *((unsigned __int8 *)v28 - 1);
            v30 = *((_QWORD *)v28 - 2);
            if ((v29 & 0x80u) != 0)
              v29 = v30;
            v28 = v25;
            if (v29 > v20)
              goto LABEL_35;
          }
          v25 = v28;
        }
        else
        {
          do
          {
            v25 = (_OWORD *)((char *)v24 - 24);
            v26 = *((unsigned __int8 *)v24 - 1);
            v27 = *((_QWORD *)v24 - 2);
            if ((v26 & 0x80u) != 0)
              v26 = v27;
            v24 = v25;
          }
          while (v26 <= v20);
        }
LABEL_35:
        v7 = v21;
        if (v21 < (unint64_t)v25)
        {
          v31 = (unint64_t)v25;
          do
          {
            v32 = *(_OWORD *)v7;
            v33 = *(_QWORD *)(v7 + 16);
            v34 = *(_QWORD *)(v31 + 16);
            *(_OWORD *)v7 = *(_OWORD *)v31;
            *(_QWORD *)(v7 + 16) = v34;
            *(_QWORD *)(v31 + 16) = v33;
            *(_OWORD *)v31 = v32;
            do
            {
              v35 = *(unsigned __int8 *)(v7 + 47);
              v36 = *(_QWORD *)(v7 + 32);
              v7 += 24;
              if ((v35 & 0x80u) != 0)
                v35 = v36;
            }
            while (v35 > v20);
            do
            {
              v37 = *(unsigned __int8 *)(v31 - 1);
              v38 = *(_QWORD *)(v31 - 16);
              v31 -= 24;
              if ((v37 & 0x80u) != 0)
                v37 = v38;
            }
            while (v37 <= v20);
          }
          while (v7 < v31);
        }
        if (v7 - 24 == a1)
        {
          if (*(char *)(v7 - 1) < 0)
            operator delete(*(void **)a1);
        }
        else
        {
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v39 = *(_OWORD *)(v7 - 24);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 - 8);
          *(_OWORD *)a1 = v39;
          *(_BYTE *)(v7 - 1) = 0;
        }
        *(_QWORD *)(v7 - 24) = v19;
        *(_QWORD *)(v7 - 16) = v14;
        *(_DWORD *)(v7 - 5) = *(_DWORD *)&v152[3];
        *(_DWORD *)(v7 - 8) = *(_DWORD *)v152;
        *(_BYTE *)(v7 - 1) = v16;
        if (v21 < (unint64_t)v25)
        {
LABEL_54:
          std::__introsort<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*,false>(a1, v7 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v40 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(a1, v7 - 24);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(v7, (uint64_t)a2))
        {
          if (v40)
            continue;
          goto LABEL_54;
        }
        a2 = (_OWORD *)(v7 - 24);
        if (!v40)
          goto LABEL_1;
        return;
    }
  }
}

  v149 = (_OWORD *)((char *)a2 - 24);
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = (uint64_t)a2 - v7;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v7) >> 3);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        v58 = *((unsigned __int8 *)a2 - 1);
        if ((v58 & 0x80u) != 0)
          v58 = *((_QWORD *)a2 - 2);
        v59 = *(unsigned __int8 *)(v7 + 23);
        if ((v59 & 0x80u) != 0)
          v59 = *(_QWORD *)(v7 + 8);
        if (v58 > v59)
        {
          v165 = *(_QWORD *)(v7 + 16);
          v157 = *(_OWORD *)v7;
          v60 = *v149;
          *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 - 1);
          *(_OWORD *)v7 = v60;
          *((_QWORD *)a2 - 1) = v165;
          *v149 = v157;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((__int128 *)v7, (__int128 *)(v7 + 24), v149);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(v7, v7 + 24, v7 + 48, (uint64_t)v149);
        return;
      case 5:
        v61 = (__int128 *)(v7 + 24);
        v62 = (__int128 *)(v7 + 48);
        v63 = (__int128 *)(v7 + 72);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(v7, v7 + 24, v7 + 48, v7 + 72);
        v64 = *((unsigned __int8 *)a2 - 1);
        if ((v64 & 0x80u) != 0)
          v64 = *((_QWORD *)a2 - 2);
        v65 = *(unsigned __int8 *)(v7 + 95);
        if ((v65 & 0x80u) != 0)
          v65 = *(_QWORD *)(v7 + 80);
        if (v64 > v65)
        {
          v66 = *v63;
          v67 = *(_QWORD *)(v7 + 88);
          v68 = *((_QWORD *)a2 - 1);
          *v63 = *v149;
          *(_QWORD *)(v7 + 88) = v68;
          *((_QWORD *)a2 - 1) = v67;
          *v149 = v66;
          v69 = *(unsigned __int8 *)(v7 + 95);
          if ((v69 & 0x80u) != 0)
            v69 = *(_QWORD *)(v7 + 80);
          v70 = *(unsigned __int8 *)(v7 + 71);
          if ((v70 & 0x80u) != 0)
            v70 = *(_QWORD *)(v7 + 56);
          if (v69 > v70)
          {
            v71 = *(_QWORD *)(v7 + 64);
            v72 = *v62;
            *v62 = *v63;
            *(_QWORD *)(v7 + 64) = *(_QWORD *)(v7 + 88);
            *v63 = v72;
            *(_QWORD *)(v7 + 88) = v71;
            v73 = *(unsigned __int8 *)(v7 + 71);
            if ((v73 & 0x80u) != 0)
              v73 = *(_QWORD *)(v7 + 56);
            v74 = *(unsigned __int8 *)(v7 + 47);
            if ((v74 & 0x80u) != 0)
              v74 = *(_QWORD *)(v7 + 32);
            if (v73 > v74)
            {
              v75 = *(_QWORD *)(v7 + 40);
              v76 = *v61;
              *v61 = *v62;
              *(_QWORD *)(v7 + 40) = *(_QWORD *)(v7 + 64);
              *v62 = v76;
              *(_QWORD *)(v7 + 64) = v75;
              v77 = *(unsigned __int8 *)(v7 + 47);
              if ((v77 & 0x80u) != 0)
                v77 = *(_QWORD *)(v7 + 32);
              v78 = *(unsigned __int8 *)(v7 + 23);
              if ((v78 & 0x80u) != 0)
                v78 = *(_QWORD *)(v7 + 8);
              if (v77 > v78)
              {
                v166 = *(_QWORD *)(v7 + 16);
                v158 = *(_OWORD *)v7;
                *(_OWORD *)v7 = *v61;
                *(_QWORD *)(v7 + 16) = *(_QWORD *)(v7 + 40);
                *v61 = v158;
                *(_QWORD *)(v7 + 40) = v166;
              }
            }
          }
        }
        return;
      default:
        if (v8 <= 575)
        {
          v79 = (_QWORD *)(v7 + 24);
          v81 = (_OWORD *)v7 == a2 || v79 == (_QWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v81)
            {
              v82 = 0;
              v83 = (_QWORD *)v7;
              do
              {
                v84 = v79;
                v85 = *((unsigned __int8 *)v83 + 47);
                v86 = v85;
                v87 = v83[4];
                if ((v85 & 0x80u) != 0)
                  v85 = v83[4];
                v88 = *((unsigned __int8 *)v83 + 23);
                if ((v88 & 0x80u) != 0)
                  v88 = v83[1];
                if (v85 > v88)
                {
                  v89 = *v84;
                  *(_DWORD *)v159 = *((_DWORD *)v83 + 10);
                  *(_DWORD *)&v159[3] = *(_DWORD *)((char *)v83 + 43);
                  v84[1] = 0;
                  v84[2] = 0;
                  *v84 = 0;
                  v90 = v82;
                  while (1)
                  {
                    v91 = v7 + v90;
                    *(_OWORD *)(v91 + 24) = *(_OWORD *)(v7 + v90);
                    *(_QWORD *)(v91 + 40) = *(_QWORD *)(v7 + v90 + 16);
                    *(_BYTE *)(v91 + 23) = 0;
                    *(_BYTE *)v91 = 0;
                    if (!v90)
                      break;
                    v92 = *(unsigned __int8 *)(v91 - 1);
                    v93 = *(_QWORD *)(v91 - 16);
                    if ((v92 & 0x80u) == 0)
                      v93 = v92;
                    v90 -= 24;
                    if (v85 <= v93)
                    {
                      v94 = v7 + v90 + 24;
                      goto LABEL_143;
                    }
                  }
                  v94 = v7;
LABEL_143:
                  *(_QWORD *)v94 = v89;
                  *(_QWORD *)(v94 + 8) = v87;
                  *(_DWORD *)(v94 + 16) = *(_DWORD *)v159;
                  *(_DWORD *)(v94 + 19) = *(_DWORD *)&v159[3];
                  *(_BYTE *)(v94 + 23) = v86;
                }
                v79 = v84 + 3;
                v82 += 24;
                v83 = v84;
              }
              while (v84 + 3 != (_QWORD *)a2);
            }
          }
          else if (!v81)
          {
            do
            {
              v140 = v79;
              v141 = *(unsigned __int8 *)(a1 + 47);
              v142 = v141;
              v143 = *(_QWORD *)(a1 + 32);
              if ((v141 & 0x80u) != 0)
                v141 = *(_QWORD *)(a1 + 32);
              v144 = *(unsigned __int8 *)(a1 + 23);
              if ((v144 & 0x80u) != 0)
                v144 = *(_QWORD *)(a1 + 8);
              if (v141 > v144)
              {
                v145 = *v140;
                *(_DWORD *)v162 = *(_DWORD *)(a1 + 40);
                *(_DWORD *)&v162[3] = *(_DWORD *)(a1 + 43);
                v140[1] = 0;
                v140[2] = 0;
                *v140 = 0;
                v146 = v140;
                do
                {
                  *(_OWORD *)v146 = *(_OWORD *)(v146 - 3);
                  v146[2] = *(v146 - 1);
                  *((_BYTE *)v146 - 1) = 0;
                  *((_BYTE *)v146 - 24) = 0;
                  v147 = *((unsigned __int8 *)v146 - 25);
                  v148 = *(v146 - 5);
                  v146 -= 3;
                  if ((v147 & 0x80u) != 0)
                    v147 = v148;
                }
                while (v141 > v147);
                *v146 = v145;
                v146[1] = v143;
                *(_DWORD *)((char *)v146 + 19) = *(_DWORD *)&v162[3];
                *((_DWORD *)v146 + 4) = *(_DWORD *)v162;
                *((_BYTE *)v146 + 23) = v142;
              }
              v79 = v140 + 3;
              a1 = (uint64_t)v140;
            }
            while (v140 + 3 != (_QWORD *)a2);
          }
          return;
        }
        if (!a3)
        {
          if ((_OWORD *)v7 != a2)
          {
            v95 = (unint64_t)(v9 - 2) >> 1;
            v96 = v95;
            do
            {
              v97 = v96;
              if (v95 >= v96)
              {
                v98 = (2 * v96) | 1;
                v99 = v7 + 24 * v98;
                if (2 * v97 + 2 < v9)
                {
                  v100 = *(unsigned __int8 *)(v99 + 23);
                  if ((v100 & 0x80u) != 0)
                    v100 = *(_QWORD *)(v99 + 8);
                  v101 = *(unsigned __int8 *)(v99 + 47);
                  if ((v101 & 0x80u) != 0)
                    v101 = *(_QWORD *)(v99 + 32);
                  v99 += 24 * (v100 > v101);
                  if (v100 > v101)
                    v98 = 2 * v97 + 2;
                }
                v102 = v7 + 24 * v97;
                if (*(char *)(v99 + 23) >= 0)
                  v103 = *(unsigned __int8 *)(v99 + 23);
                else
                  v103 = *(_QWORD *)(v99 + 8);
                v104 = *(unsigned __int8 *)(v102 + 23);
                v105 = v104;
                v106 = *(_QWORD *)(v102 + 8);
                if ((v104 & 0x80u) != 0)
                  v104 = *(_QWORD *)(v102 + 8);
                if (v103 <= v104)
                {
                  v107 = *(_QWORD *)v102;
                  *(_DWORD *)&v160[3] = *(_DWORD *)(v102 + 19);
                  *(_DWORD *)v160 = *(_DWORD *)(v102 + 16);
                  *(_QWORD *)(v102 + 8) = 0;
                  *(_QWORD *)(v102 + 16) = 0;
                  *(_QWORD *)v102 = 0;
                  do
                  {
                    v108 = v102;
                    v102 = v99;
                    v109 = *(_OWORD *)v99;
                    *(_QWORD *)(v108 + 16) = *(_QWORD *)(v99 + 16);
                    *(_OWORD *)v108 = v109;
                    *(_BYTE *)(v99 + 23) = 0;
                    *(_BYTE *)v99 = 0;
                    if (v95 < v98)
                      break;
                    v110 = (2 * v98) | 1;
                    v99 = v7 + 24 * v110;
                    v111 = 2 * v98 + 2;
                    if (v111 < v9)
                    {
                      v112 = *(unsigned __int8 *)(v99 + 23);
                      if ((v112 & 0x80u) != 0)
                        v112 = *(_QWORD *)(v99 + 8);
                      v113 = *(unsigned __int8 *)(v99 + 47);
                      if ((v113 & 0x80u) != 0)
                        v113 = *(_QWORD *)(v99 + 32);
                      v99 += 24 * (v112 > v113);
                      if (v112 > v113)
                        v110 = v111;
                    }
                    v114 = *(char *)(v99 + 23) >= 0 ? *(unsigned __int8 *)(v99 + 23) : *(_QWORD *)(v99 + 8);
                    v98 = v110;
                  }
                  while (v114 <= v104);
                  *(_QWORD *)v102 = v107;
                  *(_QWORD *)(v102 + 8) = v106;
                  *(_DWORD *)(v102 + 16) = *(_DWORD *)v160;
                  *(_DWORD *)(v102 + 19) = *(_DWORD *)&v160[3];
                  *(_BYTE *)(v102 + 23) = v105;
                }
              }
              v96 = v97 - 1;
            }
            while (v97);
            v115 = v8 / 0x18uLL;
            v151 = (_QWORD *)(v7 + 8);
            do
            {
              v116 = 0;
              v117 = a2;
              v118 = *(_QWORD *)a1;
              *(_QWORD *)v161 = *v151;
              *(_QWORD *)&v161[7] = *(_QWORD *)((char *)v151 + 7);
              v119 = *(_BYTE *)(a1 + 23);
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              v120 = a1;
              do
              {
                v121 = v120 + 24 * v116 + 24;
                v122 = 2 * v116;
                v116 = (2 * v116) | 1;
                v123 = v122 + 2;
                if (v122 + 2 < v115)
                {
                  v124 = *(unsigned __int8 *)(v121 + 23);
                  if ((v124 & 0x80u) != 0)
                    v124 = *(_QWORD *)(v121 + 8);
                  v125 = *(unsigned __int8 *)(v121 + 47);
                  if ((v125 & 0x80u) != 0)
                    v125 = *(_QWORD *)(v121 + 32);
                  v121 += 24 * (v124 > v125);
                  if (v124 > v125)
                    v116 = v123;
                }
                if (*(char *)(v120 + 23) < 0)
                  operator delete(*(void **)v120);
                v126 = *(_OWORD *)v121;
                *(_QWORD *)(v120 + 16) = *(_QWORD *)(v121 + 16);
                *(_OWORD *)v120 = v126;
                *(_BYTE *)(v121 + 23) = 0;
                *(_BYTE *)v121 = 0;
                v120 = v121;
              }
              while (v116 <= (uint64_t)((unint64_t)(v115 - 2) >> 1));
              a2 = (_OWORD *)((char *)a2 - 24);
              if ((_OWORD *)v121 == (_OWORD *)((char *)v117 - 24))
              {
                *(_QWORD *)v121 = v118;
                *(_QWORD *)(v121 + 8) = *(_QWORD *)v161;
                *(_QWORD *)(v121 + 15) = *(_QWORD *)&v161[7];
                *(_BYTE *)(v121 + 23) = v119;
              }
              else
              {
                v127 = *a2;
                *(_QWORD *)(v121 + 16) = *((_QWORD *)v117 - 1);
                *(_OWORD *)v121 = v127;
                *((_QWORD *)v117 - 3) = v118;
                *(_QWORD *)((char *)v117 - 9) = *(_QWORD *)&v161[7];
                *((_QWORD *)v117 - 2) = *(_QWORD *)v161;
                *((_BYTE *)v117 - 1) = v119;
                v128 = v121 - a1 + 24;
                if (v128 >= 25)
                {
                  v129 = (v128 / 0x18uLL - 2) >> 1;
                  v130 = a1 + 24 * v129;
                  if (*(char *)(v130 + 23) >= 0)
                    v131 = *(unsigned __int8 *)(v130 + 23);
                  else
                    v131 = *(_QWORD *)(v130 + 8);
                  v132 = *(unsigned __int8 *)(v121 + 23);
                  v133 = v132;
                  v134 = *(_QWORD *)(v121 + 8);
                  if ((v132 & 0x80u) != 0)
                    v132 = *(_QWORD *)(v121 + 8);
                  if (v131 > v132)
                  {
                    v135 = *(_QWORD *)v121;
                    *(_DWORD *)&v154[3] = *(_DWORD *)(v121 + 19);
                    *(_DWORD *)v154 = *(_DWORD *)(v121 + 16);
                    *(_QWORD *)(v121 + 8) = 0;
                    *(_QWORD *)(v121 + 16) = 0;
                    *(_QWORD *)v121 = 0;
                    do
                    {
                      v136 = v121;
                      v121 = v130;
                      v137 = *(_OWORD *)v130;
                      *(_QWORD *)(v136 + 16) = *(_QWORD *)(v130 + 16);
                      *(_OWORD *)v136 = v137;
                      *(_BYTE *)(v130 + 23) = 0;
                      *(_BYTE *)v130 = 0;
                      if (!v129)
                        break;
                      v129 = (v129 - 1) >> 1;
                      v130 = a1 + 24 * v129;
                      v138 = *(unsigned __int8 *)(v130 + 23);
                      if ((v138 & 0x80u) != 0)
                        v138 = *(_QWORD *)(v130 + 8);
                    }
                    while (v138 > v132);
                    *(_QWORD *)v121 = v135;
                    *(_QWORD *)(v121 + 8) = v134;
                    *(_DWORD *)(v121 + 16) = *(_DWORD *)v154;
                    *(_DWORD *)(v121 + 19) = *(_DWORD *)&v154[3];
                    *(_BYTE *)(v121 + 23) = v133;
                  }
                }
              }
            }
            while (v115-- > 2);
          }
          return;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = v7 + 24 * ((unint64_t)v9 >> 1);
        if ((unint64_t)v8 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((__int128 *)(a1 + 24 * v10), (__int128 *)a1, v149);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((__int128 *)a1, (__int128 *)(a1 + 24 * v10), v149);
          v12 = 3 * v10;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((__int128 *)(a1 + 24), (__int128 *)(a1 + 8 * v12 - 24), a2 - 3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((__int128 *)(a1 + 48), (__int128 *)(a1 + 24 + 8 * v12), (_OWORD *)((char *)a2 - 72));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((__int128 *)(a1 + 8 * v12 - 24), (__int128 *)v11, (__int128 *)(a1 + 24 + 8 * v12));
          v163 = *(_QWORD *)(a1 + 16);
          v155 = *(_OWORD *)a1;
          v13 = *(_QWORD *)(v11 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v11;
          *(_QWORD *)(a1 + 16) = v13;
          *(_QWORD *)(v11 + 16) = v163;
          *(_OWORD *)v11 = v155;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = *(_QWORD *)(a1 - 16);
          if (*(char *)(a1 - 1) >= 0)
            v17 = *(unsigned __int8 *)(a1 - 1);
          v15 = *(unsigned __int8 *)(a1 + 23);
          v16 = v15;
          v14 = *(_QWORD *)(a1 + 8);
          if ((v15 & 0x80u) == 0)
            v18 = *(unsigned __int8 *)(a1 + 23);
          else
            v18 = *(_QWORD *)(a1 + 8);
          if (v17 > v18)
            goto LABEL_16;
          v41 = *(_QWORD *)a1;
          *(_DWORD *)v153 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)&v153[3] = *(_DWORD *)(a1 + 19);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v42 = *((unsigned __int8 *)a2 - 1);
          if ((v42 & 0x80u) != 0)
            v42 = *((_QWORD *)a2 - 2);
          if (v18 <= v42)
          {
            v46 = a1 + 24;
            do
            {
              v7 = v46;
              if (v46 >= (unint64_t)a2)
                break;
              v47 = *(char *)(v46 + 23) >= 0 ? *(unsigned __int8 *)(v46 + 23) : *(_QWORD *)(v46 + 8);
              v46 += 24;
            }
            while (v18 <= v47);
          }
          else
          {
            v43 = a1;
            do
            {
              v7 = v43 + 24;
              v44 = *(unsigned __int8 *)(v43 + 47);
              v45 = *(_QWORD *)(v43 + 32);
              if ((v44 & 0x80u) != 0)
                v44 = v45;
              v43 = v7;
            }
            while (v18 <= v44);
          }
          v48 = a2;
          if (v7 < (unint64_t)a2)
          {
            v49 = a2;
            do
            {
              v48 = (__int128 *)((char *)v49 - 24);
              v50 = *((unsigned __int8 *)v49 - 1);
              v51 = *((_QWORD *)v49 - 2);
              if ((v50 & 0x80u) != 0)
                v50 = v51;
              v49 = v48;
            }
            while (v18 > v50);
          }
          while (v7 < (unint64_t)v48)
          {
            v164 = *(_QWORD *)(v7 + 16);
            v156 = *(_OWORD *)v7;
            v52 = *v48;
            *(_QWORD *)(v7 + 16) = *((_QWORD *)v48 + 2);
            *(_OWORD *)v7 = v52;
            *((_QWORD *)v48 + 2) = v164;
            *v48 = v156;
            do
            {
              v53 = *(unsigned __int8 *)(v7 + 47);
              v54 = *(_QWORD *)(v7 + 32);
              v7 += 24;
              if ((v53 & 0x80u) != 0)
                v53 = v54;
            }
            while (v18 <= v53);
            do
            {
              v55 = *((unsigned __int8 *)v48 - 1);
              v56 = *((_QWORD *)v48 - 2);
              v48 = (__int128 *)((char *)v48 - 24);
              if ((v55 & 0x80u) != 0)
                v55 = v56;
            }
            while (v18 > v55);
          }
          if (v7 - 24 == a1)
          {
            if (*(char *)(v7 - 1) < 0)
              operator delete(*(void **)a1);
          }
          else
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v57 = *(_OWORD *)(v7 - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 - 8);
            *(_OWORD *)a1 = v57;
            *(_BYTE *)(v7 - 1) = 0;
          }
          a4 = 0;
          *(_QWORD *)(v7 - 24) = v41;
          *(_QWORD *)(v7 - 16) = v14;
          *(_DWORD *)(v7 - 5) = *(_DWORD *)&v153[3];
          *(_DWORD *)(v7 - 8) = *(_DWORD *)v153;
          *(_BYTE *)(v7 - 1) = v16;
          continue;
        }
        v14 = *(_QWORD *)(a1 + 8);
        v15 = *(unsigned __int8 *)(a1 + 23);
        v16 = *(_BYTE *)(a1 + 23);
LABEL_16:
        v19 = *(_QWORD *)a1;
        *(_DWORD *)v152 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)&v152[3] = *(_DWORD *)(a1 + 19);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        if (v16 >= 0)
          v20 = v15;
        else
          v20 = v14;
        v21 = a1;
        do
        {
          v22 = v21;
          v21 += 24;
          v23 = *(unsigned __int8 *)(v22 + 47);
          if ((v23 & 0x80u) != 0)
            v23 = *(_QWORD *)(v22 + 32);
        }
        while (v23 > v20);
        v24 = a2;
        if (v22 == a1)
        {
          v28 = a2;
          while (v21 < (unint64_t)v28)
          {
            v25 = (_OWORD *)((char *)v28 - 24);
            v29 = *((unsigned __int8 *)v28 - 1);
            v30 = *((_QWORD *)v28 - 2);
            if ((v29 & 0x80u) != 0)
              v29 = v30;
            v28 = v25;
            if (v29 > v20)
              goto LABEL_35;
          }
          v25 = v28;
        }
        else
        {
          do
          {
            v25 = (_OWORD *)((char *)v24 - 24);
            v26 = *((unsigned __int8 *)v24 - 1);
            v27 = *((_QWORD *)v24 - 2);
            if ((v26 & 0x80u) != 0)
              v26 = v27;
            v24 = v25;
          }
          while (v26 <= v20);
        }
LABEL_35:
        v7 = v21;
        if (v21 < (unint64_t)v25)
        {
          v31 = (unint64_t)v25;
          do
          {
            v32 = *(_OWORD *)v7;
            v33 = *(_QWORD *)(v7 + 16);
            v34 = *(_QWORD *)(v31 + 16);
            *(_OWORD *)v7 = *(_OWORD *)v31;
            *(_QWORD *)(v7 + 16) = v34;
            *(_QWORD *)(v31 + 16) = v33;
            *(_OWORD *)v31 = v32;
            do
            {
              v35 = *(unsigned __int8 *)(v7 + 47);
              v36 = *(_QWORD *)(v7 + 32);
              v7 += 24;
              if ((v35 & 0x80u) != 0)
                v35 = v36;
            }
            while (v35 > v20);
            do
            {
              v37 = *(unsigned __int8 *)(v31 - 1);
              v38 = *(_QWORD *)(v31 - 16);
              v31 -= 24;
              if ((v37 & 0x80u) != 0)
                v37 = v38;
            }
            while (v37 <= v20);
          }
          while (v7 < v31);
        }
        if (v7 - 24 == a1)
        {
          if (*(char *)(v7 - 1) < 0)
            operator delete(*(void **)a1);
        }
        else
        {
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v39 = *(_OWORD *)(v7 - 24);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 - 8);
          *(_OWORD *)a1 = v39;
          *(_BYTE *)(v7 - 1) = 0;
        }
        *(_QWORD *)(v7 - 24) = v19;
        *(_QWORD *)(v7 - 16) = v14;
        *(_DWORD *)(v7 - 5) = *(_DWORD *)&v152[3];
        *(_DWORD *)(v7 - 8) = *(_DWORD *)v152;
        *(_BYTE *)(v7 - 1) = v16;
        if (v21 < (unint64_t)v25)
        {
LABEL_54:
          std::__introsort<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::string const&,std::string const&)::$_0 &,std::string*,false>(a1, v7 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v40 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::string const&,std::string const&)::$_0 &,std::string*>(a1, v7 - 24);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::string const&,std::string const&)::$_0 &,std::string*>(v7, (uint64_t)a2))
        {
          if (v40)
            continue;
          goto LABEL_54;
        }
        a2 = (_OWORD *)(v7 - 24);
        if (!v40)
          goto LABEL_1;
        return;
    }
  }
}

  if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2)
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2) & 1) == 0)
      {
        do
        {
          v6 = *(_DWORD *)(a1 + 28);
          v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
          v8 = (unsigned int *)(v7 + 4);
          if (v6)
            v8 = (unsigned int *)v7;
          if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v8) & 1) != 0)
            break;
          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
        }
        while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2));
      }
    }
    while (1)
    {
      while (1)
      {
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) != 0)
          goto LABEL_1;
        v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
        v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
        v11 = *(_DWORD *)(a1 + 28);
        v12 = v11 == 0;
        v13 = (uint64_t *)(v11 ? v10 : v9);
        v14 = *v13;
        v15 = v13[1];
        v16 = (uint64_t *)(v12 ? v10 : v9);
        v18 = *v16;
        v17 = v16[1];
        v19 = *(_QWORD *)(a1 + 16);
        v20 = *(_BYTE **)(v19 + 136);
        if ((_DWORD)v18 != -1)
          break;
        if (!v20[33])
        {
          v21 = v20[34] ^ 1;
          goto LABEL_23;
        }
      }
      if (HIDWORD(v14) && (HIDWORD(v14) != -1 || v20[32] != 1))
      {
        v21 = 0;
LABEL_23:
        v25 = __PAIR64__(HIDWORD(v17), HIDWORD(v15));
        v26 = v21;
        *(_DWORD *)(a1 + 68) = v14;
        *(_DWORD *)(a1 + 72) = HIDWORD(v18);
        v22 = NAN;
        if (*(float *)&v15 != -INFINITY && *(float *)&v17 != -INFINITY)
        {
          v22 = INFINITY;
          if (*(float *)&v17 != INFINITY && *(float *)&v15 != INFINITY)
            v22 = *(float *)&v15 + *(float *)&v17;
        }
        *(float *)(a1 + 76) = v22;
        *(_DWORD *)(a1 + 80) = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(_QWORD **)(v19 + 176), (uint64_t *)&v25);
        return 1;
      }
    }
  }
  return 0;
}

  if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2)
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2) & 1) == 0)
      {
        do
        {
          v6 = *(_DWORD *)(a1 + 28);
          v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
          v8 = (unsigned int *)(v7 + 4);
          if (v6)
            v8 = (unsigned int *)v7;
          if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v8) & 1) != 0)
            break;
          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
        }
        while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2));
      }
    }
    while (1)
    {
      while (1)
      {
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) != 0)
          goto LABEL_1;
        v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
        v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
        v11 = *(_DWORD *)(a1 + 28);
        v12 = v11 == 0;
        v13 = (uint64_t *)(v11 ? v10 : v9);
        v14 = *v13;
        v15 = v13[1];
        v16 = (uint64_t *)(v12 ? v10 : v9);
        v18 = *v16;
        v17 = v16[1];
        v19 = *(_QWORD *)(a1 + 16);
        v20 = *(unsigned __int8 **)(v19 + 136);
        if (HIDWORD(v14) == -1)
          break;
        if ((_DWORD)v18 == -1)
        {
          LODWORD(v20) = v20[32];
          if (!(_DWORD)v20)
            goto LABEL_24;
        }
        else if (HIDWORD(v14))
        {
          LOBYTE(v20) = 0;
LABEL_24:
          v24 = __PAIR64__(HIDWORD(v17), HIDWORD(v15));
          v25 = (char)v20;
          *(_DWORD *)(a1 + 68) = v14;
          *(_DWORD *)(a1 + 72) = HIDWORD(v18);
          v21 = NAN;
          if (*(float *)&v15 != -INFINITY && *(float *)&v17 != -INFINITY)
          {
            v21 = INFINITY;
            if (*(float *)&v17 != INFINITY && *(float *)&v15 != INFINITY)
              v21 = *(float *)&v15 + *(float *)&v17;
          }
          *(float *)(a1 + 76) = v21;
          *(_DWORD *)(a1 + 80) = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(_QWORD **)(v19 + 176), (uint64_t *)&v24);
          return 1;
        }
      }
      if (!v20[33])
      {
        LOBYTE(v20) = v20[34] ^ 1;
        goto LABEL_24;
      }
    }
  }
  return 0;
}

uint64_t rex_matchit(unsigned __int8 *a1, _BYTE *a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;

  result = (char)*a2;
  if (*a2)
  {
    v4 = *a1;
    if (v4 == 46)
    {
      return 1;
    }
    else
    {
      v5 = *a2;
      if (v4 == 92)
      {
        v6 = (char)a1[1];
        if (v6 > 96)
        {
          switch(v6)
          {
            case 'l':
              if ((*a2 & 0x80) == 0)
              {
                v9 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * result + 60) & 0x1000;
                goto LABEL_55;
              }
              v12 = 4096;
              goto LABEL_54;
            case 'm':
            case 'n':
            case 'o':
            case 'q':
            case 'r':
            case 't':
            case 'v':
              return v6 == *a2;
            case 'p':
              if ((*a2 & 0x80) == 0)
              {
                v9 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * result + 60) & 0x2000;
                goto LABEL_55;
              }
              v12 = 0x2000;
              goto LABEL_54;
            case 's':
              if ((*a2 & 0x80) == 0)
              {
                v9 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v5 + 60) & 0x4000;
                goto LABEL_55;
              }
              LODWORD(result) = *a2;
              v12 = 0x4000;
              goto LABEL_54;
            case 'u':
              if ((*a2 & 0x80) == 0)
              {
                v9 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * result + 60) & 0x8000;
                goto LABEL_55;
              }
              v12 = 0x8000;
              goto LABEL_54;
            case 'w':
              if ((*a2 & 0x80) == 0)
              {
                v9 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * result + 60) & 0x500;
                goto LABEL_55;
              }
              v12 = 1280;
              goto LABEL_54;
            default:
              if (v6 == 100)
              {
                v10 = (result - 48) >= 0xA;
                return !v10;
              }
              if (v6 != 97)
                return v6 == *a2;
              if ((result & 0x80000000) != 0)
              {
                v12 = 256;
LABEL_54:
                v9 = __maskrune(result, v12);
              }
              else
              {
                v9 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * result + 60) & 0x100;
              }
LABEL_55:
              result = v9 != 0;
              break;
          }
        }
        else
        {
          switch(v6)
          {
            case 'L':
              if ((*a2 & 0x80) == 0)
              {
                v7 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * result + 60) & 0x1000;
                return v7 == 0;
              }
              v11 = 4096;
              goto LABEL_57;
            case 'M':
            case 'N':
            case 'O':
            case 'Q':
            case 'R':
            case 'T':
            case 'V':
              return v6 == *a2;
            case 'P':
              if ((*a2 & 0x80) == 0)
              {
                v7 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * result + 60) & 0x2000;
                return v7 == 0;
              }
              v11 = 0x2000;
              goto LABEL_57;
            case 'S':
              if ((result & 0x80000000) == 0)
              {
                v7 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v5 + 60) & 0x4000;
                return v7 == 0;
              }
              LODWORD(result) = *a2;
              v11 = 0x4000;
              goto LABEL_57;
            case 'U':
              if ((*a2 & 0x80) == 0)
              {
                v7 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * result + 60) & 0x8000;
                return v7 == 0;
              }
              v11 = 0x8000;
              goto LABEL_57;
            case 'W':
              if ((*a2 & 0x80) == 0)
              {
                v7 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * result + 60) & 0x500;
                return v7 == 0;
              }
              v11 = 1280;
              goto LABEL_57;
            default:
              if (v6 == 65)
              {
                if ((*a2 & 0x80) != 0)
                {
                  v11 = 256;
LABEL_57:
                  v7 = __maskrune(result, v11);
                }
                else
                {
                  v7 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * result + 60) & 0x100;
                }
                return v7 == 0;
              }
              if (v6 != 68)
                return v6 == *a2;
              v10 = __CFADD__(result - 58, 10);
              break;
          }
          return !v10;
        }
      }
      else
      {
        return v4 == (_DWORD)v5;
      }
    }
  }
  return result;
}

uint64_t wapiti_fatal(uint64_t a1, uint64_t a2)
{
  return log_VOutText(a1, (uint64_t)&modInfoCRF, 0, 0, a2);
}

uint64_t wapiti_warning(uint64_t a1, uint64_t a2)
{
  return log_VOutText(a1, (uint64_t)&modInfoCRF, 1, 0, a2);
}

uint64_t wapiti_info(uint64_t a1, uint64_t a2)
{
  return log_VOutText(a1, (uint64_t)&modInfoCRF, 5, 0, a2);
}

uint64_t wapiti_ns_readline(uint64_t a1, const char *a2, _DWORD *a3)
{
  uint64_t result;
  int v6;
  uint64_t v7;

  v7 = 0;
  v6 = 0;
  if (!wapiti_scanf_fmt_prefix_len(a2, ":", &v6, &v7))
    wapiti_fatal(*(_QWORD *)(a1 + 32), (uint64_t)"cannot read from chars");
  result = v7;
  *a3 = v6;
  return result;
}

uint64_t wapiti_scanf_fmt_prefix_len(const char *a1, char *__s, int *a3, _QWORD *a4)
{
  size_t v8;
  size_t v9;
  size_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  _OWORD v15[6];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v8 = strlen(__s);
  v9 = strlen(a1);
  if (v9 <= v8)
    return 0;
  v10 = 0;
  v16 = 0;
  v11 = 1;
  memset(v15, 0, sizeof(v15));
  do
  {
    v12 = a1[v10];
    if ((v12 - 48) >= 0xA && v12 != 45)
    {
      if (!v10)
        return 0;
      goto LABEL_10;
    }
    *((_BYTE *)v15 + v10++) = v12;
    v11 = v10 < v9;
  }
  while (v9 != v10);
  v10 = v9;
  if (!v9)
    return 0;
LABEL_10:
  *a3 = atoi((const char *)v15);
  if (v8 != 0 && v11)
  {
    v13 = 0;
    while (a1[v10 + v13] == __s[v13])
    {
      if (++v13 >= v8)
        goto LABEL_17;
    }
    return 0;
  }
  v13 = 0;
LABEL_17:
  *a4 = v13 + v10;
  return 1;
}

uint64_t wapiti_scanf_fmt_1(const char *a1, char *__s, int *a3)
{
  char *v4;
  size_t v6;
  size_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  _OWORD v17[6];
  int v18;
  uint64_t v19;

  v4 = __s;
  v19 = *MEMORY[0x1E0C80C00];
  v6 = strlen(__s);
  v7 = strlen(a1);
  v8 = v7 - v6;
  if (v7 <= v6)
    return 0;
  if (!v6)
  {
LABEL_6:
    v14 = 0;
    v18 = 0;
    memset(v17, 0, sizeof(v17));
    while (1)
    {
      v15 = a1[v6 + v14];
      if ((v15 - 48) >= 0xA && v15 != 45)
        break;
      *((_BYTE *)v17 + v14++) = v15;
      if (v8 == v14)
      {
        if (!v8)
          return 0;
LABEL_12:
        *a3 = atoi((const char *)v17);
        return 1;
      }
    }
    if (!v14)
      return 0;
    goto LABEL_12;
  }
  v9 = a1;
  v10 = v6;
  while (1)
  {
    v12 = *(unsigned __int8 *)v9++;
    v11 = v12;
    v13 = *v4++;
    if (v11 != v13)
      return 0;
    if (!--v10)
      goto LABEL_6;
  }
}

uint64_t wapiti_scanf_fmt_2(const char *a1, char *__s, int *a3, int *a4)
{
  char *v6;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  const char *v12;
  size_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  size_t v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;

  v6 = __s;
  v30 = *MEMORY[0x1E0C80C00];
  v8 = strlen(__s);
  v9 = strlen(a1);
  v10 = v9 - v8;
  if (v9 <= v8)
    return 0;
  v11 = v9;
  if (v8)
  {
    v12 = a1;
    v13 = v8;
    do
    {
      v15 = *(unsigned __int8 *)v12++;
      v14 = v15;
      v16 = *v6++;
      if (v14 != v16)
        return 0;
    }
    while (--v13);
  }
  v17 = 0;
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  do
  {
    v18 = a1[v8 + v17];
    if ((v18 - 48) >= 0xA && v18 != 45)
    {
      v19 = v8 + v17 + 1;
      if (!v17)
        return 0;
      goto LABEL_14;
    }
    *((_BYTE *)&v23 + v17++) = v18;
  }
  while (v10 != v17);
  v19 = v9;
  if (!v10)
    return 0;
LABEL_14:
  *a3 = atoi((const char *)&v23);
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0;
  if (v11 <= v19)
    return 1;
  v21 = 0;
  while (1)
  {
    v22 = a1[v19 + v21];
    if ((v22 - 48) >= 0xA && v22 != 45)
      break;
    *((_BYTE *)&v23 + v21++) = v22;
    if (v11 - v19 == v21)
    {
      v21 = v11 - v19;
      break;
    }
  }
  if (!v21)
    return 1;
  *a4 = atoi((const char *)&v23);
  return 2;
}

uint64_t wapiti_scanf_fmt_3(const char *a1, char *__s, int *a3, int *a4, int *a5)
{
  char *v8;
  size_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  const char *v14;
  size_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  size_t v23;
  int v24;
  unint64_t v25;
  size_t v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35;

  v8 = __s;
  v35 = *MEMORY[0x1E0C80C00];
  v10 = strlen(__s);
  v11 = strlen(a1);
  v12 = v11 - v10;
  if (v11 <= v10)
    return 0;
  v13 = v11;
  if (v10)
  {
    v14 = a1;
    v15 = v10;
    do
    {
      v17 = *(unsigned __int8 *)v14++;
      v16 = v17;
      v18 = *v8++;
      if (v16 != v18)
        return 0;
    }
    while (--v15);
  }
  v19 = 0;
  v34 = 0;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  do
  {
    v20 = a1[v10 + v19];
    if ((v20 - 48) >= 0xA && v20 != 45)
    {
      v21 = v10 + v19 + 1;
      if (!v19)
        return 0;
      goto LABEL_14;
    }
    *((_BYTE *)&v28 + v19++) = v20;
  }
  while (v12 != v19);
  v21 = v11;
  if (!v12)
    return 0;
LABEL_14:
  *a3 = atoi((const char *)&v28);
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0;
  if (v13 <= v21)
    return 1;
  v23 = 0;
  while (1)
  {
    v24 = a1[v21 + v23];
    if ((v24 - 48) >= 0xA && v24 != 45)
      break;
    *((_BYTE *)&v28 + v23++) = v24;
    if (v13 - v21 == v23)
    {
      v23 = v13 - v21;
      v25 = v13;
      goto LABEL_21;
    }
  }
  v25 = v21 + v23 + 1;
LABEL_21:
  if (!v23)
    return 1;
  *a4 = atoi((const char *)&v28);
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0;
  if (v13 <= v25)
    return 2;
  v26 = 0;
  while (1)
  {
    v27 = a1[v25 + v26];
    if ((v27 - 48) >= 0xA && v27 != 45)
      break;
    *((_BYTE *)&v28 + v26++) = v27;
    if (v13 - v25 == v26)
    {
      v26 = v13 - v25;
      break;
    }
  }
  if (!v26)
    return 2;
  *a5 = atoi((const char *)&v28);
  return 3;
}

uint64_t wapiti_scanf_fmt_pair(const char *a1, char *__s, int *a3, int *a4)
{
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  size_t v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v8 = strlen(__s);
  v9 = strlen(a1);
  if (v9 <= v8)
    return 0;
  v10 = v9;
  v11 = 0;
  v25 = 0;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v12 = 1;
  v19 = 0u;
  v20 = 0u;
  do
  {
    v13 = a1[v11];
    if ((v13 - 48) >= 0xA && v13 != 45)
    {
      if (!v11)
        return 0;
      goto LABEL_10;
    }
    *((_BYTE *)&v19 + v11++) = v13;
    v12 = v11 < v9;
  }
  while (v9 != v11);
  v11 = v9;
  if (!v9)
    return 0;
LABEL_10:
  *a3 = atoi((const char *)&v19);
  if (v8 != 0 && v12)
  {
    v14 = 0;
    while (a1[v11 + v14] == __s[v14])
    {
      if (++v14 >= v8)
        goto LABEL_17;
    }
    return 0;
  }
  v14 = 0;
LABEL_17:
  v16 = v14 + v11;
  v25 = 0;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  if (v16 >= v10)
    return 1;
  v17 = 0;
  do
  {
    v18 = a1[v16 + v17];
    if ((v18 - 48) >= 0xA && v18 != 45)
      break;
    *((_BYTE *)&v19 + v17++) = v18;
  }
  while (v16 + v17 < v10);
  if (!v17)
    return 1;
  *a4 = atoi((const char *)&v19);
  return 2;
}

uint64_t wapiti_scanf_pat_len(const char *a1, char *__s, int *a3, int *a4, size_t *a5)
{
  char *v8;
  size_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  const char *v14;
  size_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  size_t v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;

  v8 = __s;
  v32 = *MEMORY[0x1E0C80C00];
  v10 = strlen(__s);
  v11 = strlen(a1);
  v12 = v11 - v10;
  if (v11 <= v10)
    return 0;
  v13 = v11;
  if (v10)
  {
    v14 = a1;
    v15 = v10;
    do
    {
      v17 = *(unsigned __int8 *)v14++;
      v16 = v17;
      v18 = *v8++;
      if (v16 != v18)
        return 0;
    }
    while (--v15);
  }
  v19 = 0;
  v31 = 0;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  do
  {
    v20 = a1[v10 + v19];
    if ((v20 - 48) >= 0xA && v20 != 45)
    {
      v21 = v10 + v19 + 1;
      if (!v19)
        return 0;
      goto LABEL_14;
    }
    *((_BYTE *)&v25 + v19++) = v20;
  }
  while (v12 != v19);
  v21 = v11;
  if (!v12)
    return 0;
LABEL_14:
  *a3 = atoi((const char *)&v25);
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0;
  if (v13 <= v21)
    return 1;
  v23 = 0;
  while (1)
  {
    v24 = a1[v21 + v23];
    if ((v24 - 48) >= 0xA && v24 != 45)
      break;
    *((_BYTE *)&v25 + v23++) = v24;
    if (v13 - v21 == v23)
    {
      v23 = v13 - v21;
      goto LABEL_21;
    }
  }
  v13 = v21 + v23;
LABEL_21:
  if (!v23)
    return 1;
  *a4 = atoi((const char *)&v25);
  *a5 = v13;
  return 2;
}

uint64_t tag_label(uint64_t a1, _QWORD *a2, unsigned int a3, uint64_t *a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  BOOL v55;
  char v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  int v66;
  int v67;
  unsigned int *v68;
  _DWORD *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int *v73;
  _DWORD *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  signed int v81;
  int v82;
  int v83;
  int v84;
  signed int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  int *v100;
  _DWORD *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t i;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t j;
  unsigned int k;
  unsigned int v130;
  unsigned int v131;
  int v132;
  int v133;
  unsigned int v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  const char *v139;
  uint64_t m;
  const char *v141;
  int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  char *v146;
  uint64_t v147;
  const char *v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v157;
  int v158;
  _DWORD *v159;
  _DWORD *v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t *v169;
  char *v170;
  uint64_t v171;
  int v172;
  int v173;
  uint64_t v174;
  int v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  _DWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  unsigned int *v187;
  unsigned int *v188[2];

  v8 = *(_QWORD *)a1;
  v9 = *(unsigned int *)(a1 + 24);
  v187 = 0;
  v188[0] = 0;
  v10 = 2585796618;
  v186 = 0;
  if (!a4)
  {
    v10 = 2585796615;
    if (a5)
      *a5 = 0;
    return v10;
  }
  v11 = a4;
  v183 = v9;
  *a4 = 0;
  if (!a5)
    return 2585796615;
  v15 = a1;
  *a5 = 0;
  v16 = *(uint64_t **)(a1 + 112);
  if (*(_DWORD *)(a1 + 36))
  {
    v17 = rdr_readraw(v16, a2, a3, (uint64_t *)v188);
    if ((v17 & 0x80000000) == 0)
    {
      if (v188[0])
      {
        v18 = rdr_raw2seq_qp((uint64_t)v16, v188[0], *(_DWORD *)(v15 + 12) | (*(_QWORD *)(*(_QWORD *)(v15 + 112) + 56) != 0), (uint64_t *)&v187);
        if ((v18 & 0x80000000) == 0)
          goto LABEL_7;
LABEL_21:
        LODWORD(v26) = 0;
        v10 = v18;
        goto LABEL_244;
      }
      return 2585796615;
    }
    return v17;
  }
  v17 = rdr_readraw(v16, a2, a3, (uint64_t *)v188);
  if ((v17 & 0x80000000) != 0)
    return v17;
  if (!v188[0])
    return 2585796615;
  v18 = rdr_raw2seq(v16, v188[0], *(_DWORD *)(v15 + 12) | (*(_QWORD *)(*(_QWORD *)(v15 + 112) + 56) != 0), (uint64_t *)&v187);
  if ((v18 & 0x80000000) != 0)
    goto LABEL_21;
LABEL_7:
  v169 = v11;
  v170 = (char *)*v187;
  v19 = v183;
  v185 = v8;
  v20 = heap_Alloc(*(_QWORD *)(v8 + 8), 4 * v183 * (unint64_t)v170);
  v21 = heap_Alloc(*(_QWORD *)(v8 + 8), 4 * v183 * (unint64_t)v170);
  v22 = heap_Alloc(*(_QWORD *)(v8 + 8), 4 * v183);
  v23 = v22;
  v177 = v20;
  v171 = v21;
  if (v20)
    v24 = v21 == 0;
  else
    v24 = 1;
  if (v24 || v22 == 0)
  {
    v11 = v169;
    LODWORD(v26) = (_DWORD)v170;
    goto LABEL_238;
  }
  v159 = a5;
  v160 = (_DWORD *)v22;
  v184 = v15;
  if (a6 && a7)
  {
    v27 = *(unsigned int *)(v15 + 44);
    v28 = heap_Calloc(*(_QWORD **)(v8 + 8), 1, 4 * v27 * a3);
    *((_QWORD *)v187 + 2) = v28;
    if (!v28)
    {
      v11 = v169;
      LODWORD(v26) = (_DWORD)v170;
      v23 = (uint64_t)v160;
      goto LABEL_239;
    }
    if (*(_DWORD *)(v15 + 36))
    {
      if (a3)
      {
        v29 = 0;
        v30 = 0;
        do
        {
          if (*(_DWORD *)(a7 + 4 * v30))
          {
            v31 = 0;
            v32 = 0;
            do
            {
              qp_str2id(v8, *(_QWORD *)(*(_QWORD *)(v184 + 112) + 40), *(char **)(*(_QWORD *)(a6 + 8 * v30) + 8 * v31), &v186, 0);
              if (v186 != -1)
              {
                *(_DWORD *)(*((_QWORD *)v187 + 2) + 4 * (v186 + v27 * v30)) = 1;
                ++v32;
              }
              ++v31;
            }
            while (v31 < *(unsigned int *)(a7 + 4 * v30));
          }
          else
          {
            v32 = 0;
          }
          v19 = v183;
          if (!v32 && (_DWORD)v27)
          {
            v33 = *((_QWORD *)v187 + 2);
            v34 = v27;
            v35 = v29;
            do
            {
              *(_DWORD *)(v33 + 4 * v35++) = 1;
              --v34;
            }
            while (v34);
          }
          ++v30;
          v29 += v27;
          v15 = v184;
        }
        while (v30 != a3);
      }
    }
    else if (a3)
    {
      v36 = 0;
      v37 = 0;
      do
      {
        if (*(_DWORD *)(a7 + 4 * v37))
        {
          v38 = 0;
          v39 = 0;
          do
          {
            qrk_str2id(v8, *(uint64_t **)(*(_QWORD *)(v184 + 112) + 40), *(char **)(*(_QWORD *)(a6 + 8 * v37) + 8 * v38), (unsigned int *)&v186, 0);
            if (v186 != -1)
            {
              *(_DWORD *)(*((_QWORD *)v187 + 2) + 4 * (v186 + v27 * v37)) = 1;
              ++v39;
            }
            ++v38;
          }
          while (v38 < *(unsigned int *)(a7 + 4 * v37));
        }
        else
        {
          v39 = 0;
        }
        v19 = v183;
        if (!v39 && (_DWORD)v27)
        {
          v40 = *((_QWORD *)v187 + 2);
          v41 = v27;
          v42 = v36;
          do
          {
            *(_DWORD *)(v40 + 4 * v42++) = 1;
            --v41;
          }
          while (v41);
        }
        ++v37;
        v36 += v27;
        v15 = v184;
      }
      while (v37 != a3);
    }
  }
  v43 = v187;
  v44 = *(_QWORD *)v15;
  v45 = *(unsigned int *)(v15 + 44);
  v46 = *v187;
  v47 = (unsigned int *)xvm_new(*(_QWORD *)v15, (int)v45 * (int)v45 * (int)v46);
  v48 = *(_QWORD *)(v44 + 8);
  if ((_DWORD)v19 != 1)
  {
    v59 = heap_Alloc(v48, 4 * v183 * v45 * v46);
    v60 = heap_Alloc(*(_QWORD *)(v44 + 8), 4 * v45 * (unint64_t)v19);
    v61 = heap_Alloc(*(_QWORD *)(v44 + 8), 4 * v45 * (unint64_t)v19);
    v62 = v61;
    if (v47)
      v63 = v59 == 0;
    else
      v63 = 1;
    if (v63 || v60 == 0 || v61 == 0)
    {
      v66 = 0;
      v10 = 2585796618;
      v11 = v169;
      v8 = v185;
      goto LABEL_198;
    }
    v182 = (_DWORD *)v61;
    v168 = v46;
    v180 = *(_DWORD *)(v15 + 40);
    if (v180 == 1)
    {
      tag_memmsc(v15, v43, v47);
      v67 = 1;
    }
    else
    {
      tag_expsc(v15, v43, (uint64_t)v47);
      v67 = 0;
    }
    v91 = v177;
    v92 = v171;
    if (*(_QWORD *)(*(_QWORD *)(v15 + 112) + 56))
      tag_forced(v15, v43, (uint64_t)v47, v67);
    v93 = v160;
    v94 = v168;
    if ((_DWORD)v45)
    {
      v95 = 0;
      v96 = 0;
      if (v19 <= 1)
        v97 = 1;
      else
        v97 = v19;
      do
      {
        *(_DWORD *)(v60 + 4 * v95) = v47[v96];
        if (v19 >= 2)
        {
          v98 = 1;
          do
            *(_DWORD *)(v60 + 4 * (v95 + v98++)) = 0x80000000;
          while ((_DWORD)v19 != v98);
        }
        ++v96;
        v95 += v97;
      }
      while (v96 != v45);
    }
    if (v168 >= 2)
    {
      v99 = (v45 * v19);
      v161 = v99;
      v162 = 4 * v99;
      v158 = 1;
      v157 = v45 * v19;
      v166 = v44;
      while (1)
      {
        v100 = (int *)v60;
        v101 = v182;
        v102 = v99;
        if ((_DWORD)v99)
        {
          do
          {
            v103 = *v100++;
            *v101++ = v103;
            --v102;
          }
          while (v102);
        }
        if ((_DWORD)v45)
          break;
LABEL_160:
        v157 += v99;
        v94 = v168;
        ++v158;
        v15 = v184;
        v91 = v177;
        v92 = v171;
        v93 = v160;
        if (v158 == v168)
          goto LABEL_161;
      }
      v179 = 0;
      v164 = v158 * v45;
      v176 = v157;
      while (1)
      {
        v104 = heap_Alloc(*(_QWORD *)(v44 + 8), v162);
        if (!v104)
          break;
        v105 = v104;
        v106 = 0;
        v107 = 0;
        v108 = v45;
        do
        {
          v109 = v108;
          while (!(_DWORD)v19)
          {
            if (!--v109)
            {
              v118 = 0;
              v119 = (unsigned int *)v59;
              goto LABEL_146;
            }
          }
          v110 = v19;
          v111 = 0;
          v174 = v106;
          v112 = (v179 + (v164 + v106) * v45);
          v172 = v107 + v110;
          do
          {
            v113 = (v107 + v111);
            v114 = v182[v113];
            *(_DWORD *)(v105 + 4 * v113) = v114;
            v115 = v47[v112];
            if (v180 == 1)
              v116 = fix16_mul(v114, v115);
            else
              v116 = fix16_add(v114, v115);
            *(_DWORD *)(v105 + 4 * v113) = v116;
            ++v111;
          }
          while ((_DWORD)v183 != v111);
          v106 = v174 + 1;
          --v108;
          v107 = v172;
          v19 = v183;
          v44 = v166;
          v99 = v161;
        }
        while (v174 + 1 != v45);
        v117 = 0;
        v119 = (unsigned int *)(v59 + 4 * ((v164 + v179) * v183));
        do
        {
          *(_DWORD *)(v59 + 4 * v176 + 4 * v117) = v117;
          ++v117;
        }
        while (v183 != v117);
        v118 = v183 * v179;
LABEL_146:
        v120 = v19;
        if (v99 > v19)
        {
          do
          {
            if (v19 < 2)
            {
              v121 = 0;
            }
            else
            {
              v121 = 0;
              for (i = 1; i != v19; ++i)
              {
                if (*(_DWORD *)(v105 + 4 * v119[i]) < *(_DWORD *)(v105 + 4 * v119[v121]))
                  v121 = i;
              }
            }
            if (*(_DWORD *)(v105 + 4 * v120) > *(_DWORD *)(v105 + 4 * v119[v121]))
              v119[v121] = v120;
            ++v120;
          }
          while (v120 != v99);
        }
        v123 = v19;
        if ((_DWORD)v19)
        {
          do
          {
            v124 = *v119++;
            *(_DWORD *)(v60 + 4 * v118++) = *(_DWORD *)(v105 + 4 * v124);
            --v123;
          }
          while (v123);
        }
        heap_Free(*(_QWORD **)(v44 + 8), v105);
        v176 += v19;
        if (++v179 == v45)
          goto LABEL_160;
      }
      v66 = 0;
      v10 = 2585796618;
      v11 = v169;
      v15 = v184;
      v8 = v185;
LABEL_197:
      v62 = (uint64_t)v182;
LABEL_198:
      if (v62)
        heap_Free(*(_QWORD **)(v44 + 8), v62);
      if (v60)
        heap_Free(*(_QWORD **)(v44 + 8), v60);
      if (v59)
        heap_Free(*(_QWORD **)(v44 + 8), v59);
      if (v47)
        xvm_free(v44, (uint64_t)v47);
      v26 = v170;
      v23 = (uint64_t)v160;
      if (!v66)
        goto LABEL_238;
      goto LABEL_207;
    }
LABEL_161:
    if (!(_DWORD)v19)
      goto LABEL_177;
    v125 = 0;
    v126 = (v45 * v19);
LABEL_163:
    if (v126 < 2)
    {
      v127 = 0;
    }
    else
    {
      v127 = 0;
      for (j = 1; j != v126; ++j)
      {
        if (*(_DWORD *)(v60 + 4 * j) > *(_DWORD *)(v60 + 4 * v127))
          v127 = j;
      }
    }
    v93[v125] = *(_DWORD *)(v60 + 4 * v127);
    *(_DWORD *)(v60 + 4 * v127) = 0x80000000;
    for (k = v94; ; v127 = *(_DWORD *)(v59 + 4 * (v127 + k * (_DWORD)v45 * (_DWORD)v19)))
    {
      if (k == 1)
      {
        k = 0;
        v130 = 0;
      }
      else
      {
        if (!k)
        {
          if (++v125 == v19)
          {
LABEL_177:
            v10 = 0;
            v66 = 1;
            v11 = v169;
            v8 = v185;
            goto LABEL_197;
          }
          goto LABEL_163;
        }
        v130 = *(_DWORD *)(v59 + 4 * (v127 + --k * (_DWORD)v126)) / v19;
      }
      v131 = v125 + k * v19;
      *(_DWORD *)(v91 + 4 * v131) = v127 / v19;
      *(_DWORD *)(v92 + 4 * v131) = v47[v127 / v19 + (v130 + k * (_DWORD)v45) * (_DWORD)v45];
    }
  }
  v49 = heap_Alloc(v48, 4 * v45 * v46);
  v50 = heap_Alloc(*(_QWORD *)(v44 + 8), 4 * v45);
  v51 = heap_Alloc(*(_QWORD *)(v44 + 8), 4 * v45);
  v52 = v51;
  if (v47)
    v53 = v49 == 0;
  else
    v53 = 1;
  v55 = v53 || v50 == 0 || v51 == 0;
  v56 = v55;
  v163 = v56;
  v10 = 2585796618;
  if (v55)
    goto LABEL_186;
  v167 = v46;
  v57 = *(_DWORD *)(v184 + 40);
  if (v57 == 1)
  {
    tag_memmsc(v184, v43, v47);
    v58 = 1;
  }
  else
  {
    tag_expsc(v184, v43, (uint64_t)v47);
    v58 = 0;
  }
  if (*(_QWORD *)(*(_QWORD *)(v184 + 112) + 56))
    tag_forced(v184, v43, (uint64_t)v47, v58);
  v165 = v44;
  if ((_DWORD)v45)
  {
    v68 = v47;
    v69 = (_DWORD *)v50;
    v70 = v45;
    do
    {
      v71 = *v68++;
      *v69++ = v71;
      --v70;
    }
    while (v70);
  }
  v72 = v167;
  if (v167 >= 2)
  {
    v175 = 1;
    v173 = v45 * v45;
    v178 = v50;
    v181 = v49;
    do
    {
      v73 = (int *)v50;
      v74 = (_DWORD *)v52;
      v75 = v45;
      if ((_DWORD)v45)
      {
        do
        {
          v76 = *v73++;
          *v74++ = v76;
          --v75;
        }
        while (v75);
        v77 = 0;
        v78 = v173;
        do
        {
          v79 = 0;
          v80 = 0;
          v81 = 0x80000000;
          v82 = v78;
          do
          {
            v83 = *(_DWORD *)(v52 + 4 * v79);
            v84 = v47[v82];
            if (v57 == 1)
              v85 = fix16_mul(v83, v84);
            else
              v85 = fix16_add(v83, v84);
            if (v85 > v81)
            {
              v81 = v85;
              v80 = v79;
            }
            ++v79;
            v82 += v45;
          }
          while (v45 != v79);
          v50 = v178;
          *(_DWORD *)(v181 + 4 * (v175 * v45 + v77)) = v80;
          v49 = v181;
          *(_DWORD *)(v178 + 4 * v77++) = v81;
          ++v78;
        }
        while (v77 != v45);
      }
      v173 += v45 * v45;
      v72 = v167;
      ++v175;
    }
    while (v175 != (_DWORD)v167);
  }
  if (v45 < 2)
  {
    v86 = 0;
    v19 = v183;
    v88 = v177;
    v89 = v171;
    v90 = v160;
    v44 = v165;
  }
  else
  {
    v86 = 0;
    v87 = 1;
    v19 = v183;
    v88 = v177;
    v89 = v171;
    v90 = v160;
    v44 = v165;
    do
    {
      if (*(_DWORD *)(v50 + 4 * v87) > *(_DWORD *)(v50 + 4 * v86))
        v86 = v87;
      ++v87;
    }
    while (v45 != v87);
  }
  *v90 = *(_DWORD *)(v50 + 4 * v86);
  while (1)
  {
    v132 = v72 - 1;
    if ((_DWORD)v72 != 1)
      break;
    v133 = 0;
    v72 = 0;
    v134 = 0;
LABEL_184:
    *(_DWORD *)(v88 + 4 * v72) = v86;
    *(_DWORD *)(v89 + 4 * v72) = v47[v86 + (v134 + v133) * (_DWORD)v45];
    v86 = v134;
  }
  if ((_DWORD)v72)
  {
    v133 = v132 * v45;
    v134 = *(_DWORD *)(v49 + 4 * (v132 * (_DWORD)v45 + v86));
    v72 = (v72 - 1);
    goto LABEL_184;
  }
  v10 = v72;
LABEL_186:
  if (v52)
    heap_Free(*(_QWORD **)(v44 + 8), v52);
  v11 = v169;
  v8 = v185;
  if (v50)
    heap_Free(*(_QWORD **)(v44 + 8), v50);
  v15 = v184;
  if (v49)
    heap_Free(*(_QWORD **)(v44 + 8), v49);
  if (v47)
    xvm_free(v44, (uint64_t)v47);
  v26 = v170;
  v23 = (uint64_t)v160;
  if ((v163 & 1) != 0)
    goto LABEL_238;
LABEL_207:
  v135 = heap_Calloc(*(_QWORD **)(v8 + 8), 8, (uint64_t)v26);
  *v11 = v135;
  if (!v135)
  {
LABEL_235:
    v10 = 2585796618;
    goto LABEL_237;
  }
  if (!(_DWORD)v26)
  {
LABEL_234:
    v10 = 0;
    *v159 = (_DWORD)v26;
    goto LABEL_237;
  }
  v136 = 0;
  v137 = (3 * v19 + 1);
  while (2)
  {
    v138 = (char *)heap_Alloc(*(_QWORD *)(v8 + 8), v137);
    if (!v138)
      goto LABEL_235;
    v139 = v138;
    *v138 = 0;
    if (*(_DWORD *)(v15 + 36))
    {
      if ((_DWORD)v19)
      {
        for (m = 0; m != v19; ++m)
        {
          v141 = (const char *)qrk_id2str(v185, *(_QWORD *)(*(_QWORD *)(v15 + 112) + 40), *(_DWORD *)(v177 + 4 * (v19 * (_DWORD)v136 + m)));
          v142 = strlen(v139);
          v143 = strlen(v141);
          v144 = 3 * v19 + 1;
          do
          {
            v145 = v144;
            v144 *= 2;
          }
          while (v145 < v142 + v143 + 2);
          if (v145 <= v137)
          {
            v26 = (char *)v139;
          }
          else
          {
            v26 = (char *)heap_Realloc(*(uint64_t **)(v185 + 8), (uint64_t)v139, v145);
            if (!v26)
              goto LABEL_236;
          }
          v146 = strncat(v26, v141, v143);
          *(_WORD *)&v26[strlen(v146)] = 32;
          v139 = v26;
          v15 = v184;
        }
LABEL_233:
        v11 = v169;
        *(_QWORD *)(*v169 + 8 * (_QWORD)v136++) = v26;
        LODWORD(v26) = (_DWORD)v170;
        v8 = v185;
        if (v136 == v170)
          goto LABEL_234;
        continue;
      }
LABEL_232:
      v26 = v138;
      goto LABEL_233;
    }
    break;
  }
  if (!(_DWORD)v19)
    goto LABEL_232;
  v147 = 0;
  while (2)
  {
    v148 = (const char *)qrk_id2str(v185, *(_QWORD *)(*(_QWORD *)(v15 + 112) + 40), *(_DWORD *)(v177 + 4 * (v19 * (_DWORD)v136 + v147)));
    v149 = strlen(v139);
    v150 = strlen(v148);
    v151 = 3 * v19 + 1;
    do
    {
      v152 = v151;
      v151 *= 2;
    }
    while (v152 < v149 + v150 + 2);
    if (v152 <= v137)
    {
      v26 = (char *)v139;
LABEL_230:
      v153 = strncat(v26, v148, v150);
      *(_WORD *)&v26[strlen(v153)] = 32;
      ++v147;
      v139 = v26;
      v15 = v184;
      if (v147 == v19)
        goto LABEL_233;
      continue;
    }
    break;
  }
  v26 = (char *)heap_Realloc(*(uint64_t **)(v185 + 8), (uint64_t)v139, v152);
  if (v26)
    goto LABEL_230;
LABEL_236:
  v8 = v185;
  heap_Free(*(_QWORD **)(v185 + 8), (uint64_t)v139);
  v10 = 2585796618;
  v11 = v169;
  LODWORD(v26) = (_DWORD)v170;
LABEL_237:
  v23 = (uint64_t)v160;
LABEL_238:
  if (v23)
LABEL_239:
    heap_Free(*(_QWORD **)(v8 + 8), v23);
  if (v171)
    heap_Free(*(_QWORD **)(v8 + 8), v171);
  if (v177)
    heap_Free(*(_QWORD **)(v8 + 8), v177);
LABEL_244:
  if (v187)
    rdr_freeseq(v8, (uint64_t)v187);
  if (v188[0])
    rdr_freeraw(v8, v188[0]);
  if ((v10 & 0x80000000) == 0)
    return 0;
  v154 = *v11;
  if (*v11)
  {
    if ((_DWORD)v26)
    {
      v155 = 0;
      do
      {
        heap_Free(*(_QWORD **)(v8 + 8), *(_QWORD *)(*v11 + v155));
        v155 += 8;
      }
      while (8 * v26 != v155);
      v154 = *v11;
    }
    heap_Free(*(_QWORD **)(v8 + 8), v154);
    *v11 = 0;
  }
  return v10;
}

uint64_t tag_label_sparse(uint64_t a1, _QWORD *a2, unsigned int a3, uint64_t *a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  BOOL v55;
  char v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  int v66;
  int v67;
  unsigned int *v68;
  _DWORD *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int *v73;
  _DWORD *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  signed int v81;
  int v82;
  int v83;
  int v84;
  signed int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  int *v100;
  _DWORD *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t i;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t j;
  unsigned int k;
  unsigned int v130;
  unsigned int v131;
  int v132;
  int v133;
  unsigned int v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  const char *v139;
  uint64_t m;
  const char *v141;
  int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  char *v146;
  uint64_t v147;
  const char *v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v157;
  int v158;
  _DWORD *v159;
  _DWORD *v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t *v169;
  char *v170;
  uint64_t v171;
  int v172;
  int v173;
  uint64_t v174;
  int v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  _DWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  unsigned int *v187;
  unsigned int *v188[2];

  v8 = *(_QWORD *)a1;
  v9 = *(unsigned int *)(a1 + 24);
  v187 = 0;
  v188[0] = 0;
  v10 = 2585796618;
  v186 = 0;
  if (!a4)
  {
    v10 = 2585796615;
    if (a5)
      *a5 = 0;
    return v10;
  }
  v11 = a4;
  v183 = v9;
  *a4 = 0;
  if (!a5)
    return 2585796615;
  v15 = a1;
  *a5 = 0;
  v16 = *(uint64_t **)(a1 + 112);
  if (*(_DWORD *)(a1 + 36))
  {
    v17 = rdr_readraw(v16, a2, a3, (uint64_t *)v188);
    if ((v17 & 0x80000000) == 0)
    {
      if (v188[0])
      {
        v18 = rdr_raw2seq_qp((uint64_t)v16, v188[0], *(_DWORD *)(v15 + 12) | (*(_QWORD *)(*(_QWORD *)(v15 + 112) + 56) != 0), (uint64_t *)&v187);
        if ((v18 & 0x80000000) == 0)
          goto LABEL_7;
LABEL_21:
        LODWORD(v26) = 0;
        v10 = v18;
        goto LABEL_244;
      }
      return 2585796615;
    }
    return v17;
  }
  v17 = rdr_readraw(v16, a2, a3, (uint64_t *)v188);
  if ((v17 & 0x80000000) != 0)
    return v17;
  if (!v188[0])
    return 2585796615;
  v18 = rdr_raw2seq(v16, v188[0], *(_DWORD *)(v15 + 12) | (*(_QWORD *)(*(_QWORD *)(v15 + 112) + 56) != 0), (uint64_t *)&v187);
  if ((v18 & 0x80000000) != 0)
    goto LABEL_21;
LABEL_7:
  v169 = v11;
  v170 = (char *)*v187;
  v19 = v183;
  v185 = v8;
  v20 = heap_Alloc(*(_QWORD *)(v8 + 8), 4 * v183 * (unint64_t)v170);
  v21 = heap_Alloc(*(_QWORD *)(v8 + 8), 4 * v183 * (unint64_t)v170);
  v22 = heap_Alloc(*(_QWORD *)(v8 + 8), 4 * v183);
  v23 = v22;
  v177 = v20;
  v171 = v21;
  if (v20)
    v24 = v21 == 0;
  else
    v24 = 1;
  if (v24 || v22 == 0)
  {
    v11 = v169;
    LODWORD(v26) = (_DWORD)v170;
    goto LABEL_238;
  }
  v159 = a5;
  v160 = (_DWORD *)v22;
  v184 = v15;
  if (a6 && a7)
  {
    v27 = *(unsigned int *)(v15 + 44);
    v28 = heap_Calloc(*(_QWORD **)(v8 + 8), 1, 4 * v27 * a3);
    *((_QWORD *)v187 + 2) = v28;
    if (!v28)
    {
      v11 = v169;
      LODWORD(v26) = (_DWORD)v170;
      v23 = (uint64_t)v160;
      goto LABEL_239;
    }
    if (*(_DWORD *)(v15 + 36))
    {
      if (a3)
      {
        v29 = 0;
        v30 = 0;
        do
        {
          if (*(_DWORD *)(a7 + 4 * v30))
          {
            v31 = 0;
            v32 = 0;
            do
            {
              qp_str2id(v8, *(_QWORD *)(*(_QWORD *)(v184 + 112) + 40), *(char **)(*(_QWORD *)(a6 + 8 * v30) + 8 * v31), &v186, 0);
              if (v186 != -1)
              {
                *(_DWORD *)(*((_QWORD *)v187 + 2) + 4 * (v186 + v27 * v30)) = 1;
                ++v32;
              }
              ++v31;
            }
            while (v31 < *(unsigned int *)(a7 + 4 * v30));
          }
          else
          {
            v32 = 0;
          }
          v19 = v183;
          if (!v32 && (_DWORD)v27)
          {
            v33 = *((_QWORD *)v187 + 2);
            v34 = v27;
            v35 = v29;
            do
            {
              *(_DWORD *)(v33 + 4 * v35++) = 1;
              --v34;
            }
            while (v34);
          }
          ++v30;
          v29 += v27;
          v15 = v184;
        }
        while (v30 != a3);
      }
    }
    else if (a3)
    {
      v36 = 0;
      v37 = 0;
      do
      {
        if (*(_DWORD *)(a7 + 4 * v37))
        {
          v38 = 0;
          v39 = 0;
          do
          {
            qrk_str2id(v8, *(uint64_t **)(*(_QWORD *)(v184 + 112) + 40), *(char **)(*(_QWORD *)(a6 + 8 * v37) + 8 * v38), (unsigned int *)&v186, 0);
            if (v186 != -1)
            {
              *(_DWORD *)(*((_QWORD *)v187 + 2) + 4 * (v186 + v27 * v37)) = 1;
              ++v39;
            }
            ++v38;
          }
          while (v38 < *(unsigned int *)(a7 + 4 * v37));
        }
        else
        {
          v39 = 0;
        }
        v19 = v183;
        if (!v39 && (_DWORD)v27)
        {
          v40 = *((_QWORD *)v187 + 2);
          v41 = v27;
          v42 = v36;
          do
          {
            *(_DWORD *)(v40 + 4 * v42++) = 1;
            --v41;
          }
          while (v41);
        }
        ++v37;
        v36 += v27;
        v15 = v184;
      }
      while (v37 != a3);
    }
  }
  v43 = v187;
  v44 = *(_QWORD *)v15;
  v45 = *(unsigned int *)(v15 + 44);
  v46 = *v187;
  v47 = (unsigned int *)xvm_new(*(_QWORD *)v15, (int)v45 * (int)v45 * (int)v46);
  v48 = *(_QWORD *)(v44 + 8);
  if ((_DWORD)v19 != 1)
  {
    v59 = heap_Alloc(v48, 4 * v183 * v45 * v46);
    v60 = heap_Alloc(*(_QWORD *)(v44 + 8), 4 * v45 * (unint64_t)v19);
    v61 = heap_Alloc(*(_QWORD *)(v44 + 8), 4 * v45 * (unint64_t)v19);
    v62 = v61;
    if (v47)
      v63 = v59 == 0;
    else
      v63 = 1;
    if (v63 || v60 == 0 || v61 == 0)
    {
      v66 = 0;
      v10 = 2585796618;
      v11 = v169;
      v8 = v185;
      goto LABEL_198;
    }
    v182 = (_DWORD *)v61;
    v168 = v46;
    v180 = *(_DWORD *)(v15 + 40);
    if (v180 == 1)
    {
      tag_memmsc_sparse(v15, v43, v47);
      v67 = 1;
    }
    else
    {
      tag_expsc_sparse(v15, v43, (uint64_t)v47);
      v67 = 0;
    }
    v91 = v177;
    v92 = v171;
    if (*(_QWORD *)(*(_QWORD *)(v15 + 112) + 56))
      tag_forced(v15, v43, (uint64_t)v47, v67);
    v93 = v160;
    v94 = v168;
    if ((_DWORD)v45)
    {
      v95 = 0;
      v96 = 0;
      if (v19 <= 1)
        v97 = 1;
      else
        v97 = v19;
      do
      {
        *(_DWORD *)(v60 + 4 * v95) = v47[v96];
        if (v19 >= 2)
        {
          v98 = 1;
          do
            *(_DWORD *)(v60 + 4 * (v95 + v98++)) = 0x80000000;
          while ((_DWORD)v19 != v98);
        }
        ++v96;
        v95 += v97;
      }
      while (v96 != v45);
    }
    if (v168 >= 2)
    {
      v99 = (v45 * v19);
      v161 = v99;
      v162 = 4 * v99;
      v158 = 1;
      v157 = v45 * v19;
      v166 = v44;
      while (1)
      {
        v100 = (int *)v60;
        v101 = v182;
        v102 = v99;
        if ((_DWORD)v99)
        {
          do
          {
            v103 = *v100++;
            *v101++ = v103;
            --v102;
          }
          while (v102);
        }
        if ((_DWORD)v45)
          break;
LABEL_160:
        v157 += v99;
        v94 = v168;
        ++v158;
        v15 = v184;
        v91 = v177;
        v92 = v171;
        v93 = v160;
        if (v158 == v168)
          goto LABEL_161;
      }
      v179 = 0;
      v164 = v158 * v45;
      v176 = v157;
      while (1)
      {
        v104 = heap_Alloc(*(_QWORD *)(v44 + 8), v162);
        if (!v104)
          break;
        v105 = v104;
        v106 = 0;
        v107 = 0;
        v108 = v45;
        do
        {
          v109 = v108;
          while (!(_DWORD)v19)
          {
            if (!--v109)
            {
              v118 = 0;
              v119 = (unsigned int *)v59;
              goto LABEL_146;
            }
          }
          v110 = v19;
          v111 = 0;
          v174 = v106;
          v112 = (v179 + (v164 + v106) * v45);
          v172 = v107 + v110;
          do
          {
            v113 = (v107 + v111);
            v114 = v182[v113];
            *(_DWORD *)(v105 + 4 * v113) = v114;
            v115 = v47[v112];
            if (v180 == 1)
              v116 = fix16_mul(v114, v115);
            else
              v116 = fix16_add(v114, v115);
            *(_DWORD *)(v105 + 4 * v113) = v116;
            ++v111;
          }
          while ((_DWORD)v183 != v111);
          v106 = v174 + 1;
          --v108;
          v107 = v172;
          v19 = v183;
          v44 = v166;
          v99 = v161;
        }
        while (v174 + 1 != v45);
        v117 = 0;
        v119 = (unsigned int *)(v59 + 4 * ((v164 + v179) * v183));
        do
        {
          *(_DWORD *)(v59 + 4 * v176 + 4 * v117) = v117;
          ++v117;
        }
        while (v183 != v117);
        v118 = v183 * v179;
LABEL_146:
        v120 = v19;
        if (v99 > v19)
        {
          do
          {
            if (v19 < 2)
            {
              v121 = 0;
            }
            else
            {
              v121 = 0;
              for (i = 1; i != v19; ++i)
              {
                if (*(_DWORD *)(v105 + 4 * v119[i]) < *(_DWORD *)(v105 + 4 * v119[v121]))
                  v121 = i;
              }
            }
            if (*(_DWORD *)(v105 + 4 * v120) > *(_DWORD *)(v105 + 4 * v119[v121]))
              v119[v121] = v120;
            ++v120;
          }
          while (v120 != v99);
        }
        v123 = v19;
        if ((_DWORD)v19)
        {
          do
          {
            v124 = *v119++;
            *(_DWORD *)(v60 + 4 * v118++) = *(_DWORD *)(v105 + 4 * v124);
            --v123;
          }
          while (v123);
        }
        heap_Free(*(_QWORD **)(v44 + 8), v105);
        v176 += v19;
        if (++v179 == v45)
          goto LABEL_160;
      }
      v66 = 0;
      v10 = 2585796618;
      v11 = v169;
      v15 = v184;
      v8 = v185;
LABEL_197:
      v62 = (uint64_t)v182;
LABEL_198:
      if (v62)
        heap_Free(*(_QWORD **)(v44 + 8), v62);
      if (v60)
        heap_Free(*(_QWORD **)(v44 + 8), v60);
      if (v59)
        heap_Free(*(_QWORD **)(v44 + 8), v59);
      if (v47)
        xvm_free(v44, (uint64_t)v47);
      v26 = v170;
      v23 = (uint64_t)v160;
      if (!v66)
        goto LABEL_238;
      goto LABEL_207;
    }
LABEL_161:
    if (!(_DWORD)v19)
      goto LABEL_177;
    v125 = 0;
    v126 = (v45 * v19);
LABEL_163:
    if (v126 < 2)
    {
      v127 = 0;
    }
    else
    {
      v127 = 0;
      for (j = 1; j != v126; ++j)
      {
        if (*(_DWORD *)(v60 + 4 * j) > *(_DWORD *)(v60 + 4 * v127))
          v127 = j;
      }
    }
    v93[v125] = *(_DWORD *)(v60 + 4 * v127);
    *(_DWORD *)(v60 + 4 * v127) = 0x80000000;
    for (k = v94; ; v127 = *(_DWORD *)(v59 + 4 * (v127 + k * (_DWORD)v45 * (_DWORD)v19)))
    {
      if (k == 1)
      {
        k = 0;
        v130 = 0;
      }
      else
      {
        if (!k)
        {
          if (++v125 == v19)
          {
LABEL_177:
            v10 = 0;
            v66 = 1;
            v11 = v169;
            v8 = v185;
            goto LABEL_197;
          }
          goto LABEL_163;
        }
        v130 = *(_DWORD *)(v59 + 4 * (v127 + --k * (_DWORD)v126)) / v19;
      }
      v131 = v125 + k * v19;
      *(_DWORD *)(v91 + 4 * v131) = v127 / v19;
      *(_DWORD *)(v92 + 4 * v131) = v47[v127 / v19 + (v130 + k * (_DWORD)v45) * (_DWORD)v45];
    }
  }
  v49 = heap_Alloc(v48, 4 * v45 * v46);
  v50 = heap_Alloc(*(_QWORD *)(v44 + 8), 4 * v45);
  v51 = heap_Alloc(*(_QWORD *)(v44 + 8), 4 * v45);
  v52 = v51;
  if (v47)
    v53 = v49 == 0;
  else
    v53 = 1;
  v55 = v53 || v50 == 0 || v51 == 0;
  v56 = v55;
  v163 = v56;
  v10 = 2585796618;
  if (v55)
    goto LABEL_186;
  v167 = v46;
  v57 = *(_DWORD *)(v184 + 40);
  if (v57 == 1)
  {
    tag_memmsc_sparse(v184, v43, v47);
    v58 = 1;
  }
  else
  {
    tag_expsc_sparse(v184, v43, (uint64_t)v47);
    v58 = 0;
  }
  if (*(_QWORD *)(*(_QWORD *)(v184 + 112) + 56))
    tag_forced(v184, v43, (uint64_t)v47, v58);
  v165 = v44;
  if ((_DWORD)v45)
  {
    v68 = v47;
    v69 = (_DWORD *)v50;
    v70 = v45;
    do
    {
      v71 = *v68++;
      *v69++ = v71;
      --v70;
    }
    while (v70);
  }
  v72 = v167;
  if (v167 >= 2)
  {
    v175 = 1;
    v173 = v45 * v45;
    v178 = v50;
    v181 = v49;
    do
    {
      v73 = (int *)v50;
      v74 = (_DWORD *)v52;
      v75 = v45;
      if ((_DWORD)v45)
      {
        do
        {
          v76 = *v73++;
          *v74++ = v76;
          --v75;
        }
        while (v75);
        v77 = 0;
        v78 = v173;
        do
        {
          v79 = 0;
          v80 = 0;
          v81 = 0x80000000;
          v82 = v78;
          do
          {
            v83 = *(_DWORD *)(v52 + 4 * v79);
            v84 = v47[v82];
            if (v57 == 1)
              v85 = fix16_mul(v83, v84);
            else
              v85 = fix16_add(v83, v84);
            if (v85 > v81)
            {
              v81 = v85;
              v80 = v79;
            }
            ++v79;
            v82 += v45;
          }
          while (v45 != v79);
          v50 = v178;
          *(_DWORD *)(v181 + 4 * (v175 * v45 + v77)) = v80;
          v49 = v181;
          *(_DWORD *)(v178 + 4 * v77++) = v81;
          ++v78;
        }
        while (v77 != v45);
      }
      v173 += v45 * v45;
      v72 = v167;
      ++v175;
    }
    while (v175 != (_DWORD)v167);
  }
  if (v45 < 2)
  {
    v86 = 0;
    v19 = v183;
    v88 = v177;
    v89 = v171;
    v90 = v160;
    v44 = v165;
  }
  else
  {
    v86 = 0;
    v87 = 1;
    v19 = v183;
    v88 = v177;
    v89 = v171;
    v90 = v160;
    v44 = v165;
    do
    {
      if (*(_DWORD *)(v50 + 4 * v87) > *(_DWORD *)(v50 + 4 * v86))
        v86 = v87;
      ++v87;
    }
    while (v45 != v87);
  }
  *v90 = *(_DWORD *)(v50 + 4 * v86);
  while (1)
  {
    v132 = v72 - 1;
    if ((_DWORD)v72 != 1)
      break;
    v133 = 0;
    v72 = 0;
    v134 = 0;
LABEL_184:
    *(_DWORD *)(v88 + 4 * v72) = v86;
    *(_DWORD *)(v89 + 4 * v72) = v47[v86 + (v134 + v133) * (_DWORD)v45];
    v86 = v134;
  }
  if ((_DWORD)v72)
  {
    v133 = v132 * v45;
    v134 = *(_DWORD *)(v49 + 4 * (v132 * (_DWORD)v45 + v86));
    v72 = (v72 - 1);
    goto LABEL_184;
  }
  v10 = v72;
LABEL_186:
  if (v52)
    heap_Free(*(_QWORD **)(v44 + 8), v52);
  v11 = v169;
  v8 = v185;
  if (v50)
    heap_Free(*(_QWORD **)(v44 + 8), v50);
  v15 = v184;
  if (v49)
    heap_Free(*(_QWORD **)(v44 + 8), v49);
  if (v47)
    xvm_free(v44, (uint64_t)v47);
  v26 = v170;
  v23 = (uint64_t)v160;
  if ((v163 & 1) != 0)
    goto LABEL_238;
LABEL_207:
  v135 = heap_Calloc(*(_QWORD **)(v8 + 8), 8, (uint64_t)v26);
  *v11 = v135;
  if (!v135)
  {
LABEL_235:
    v10 = 2585796618;
    goto LABEL_237;
  }
  if (!(_DWORD)v26)
  {
LABEL_234:
    v10 = 0;
    *v159 = (_DWORD)v26;
    goto LABEL_237;
  }
  v136 = 0;
  v137 = (3 * v19 + 1);
  while (2)
  {
    v138 = (char *)heap_Alloc(*(_QWORD *)(v8 + 8), v137);
    if (!v138)
      goto LABEL_235;
    v139 = v138;
    *v138 = 0;
    if (*(_DWORD *)(v15 + 36))
    {
      if ((_DWORD)v19)
      {
        for (m = 0; m != v19; ++m)
        {
          v141 = (const char *)qrk_id2str(v185, *(_QWORD *)(*(_QWORD *)(v15 + 112) + 40), *(_DWORD *)(v177 + 4 * (v19 * (_DWORD)v136 + m)));
          v142 = strlen(v139);
          v143 = strlen(v141);
          v144 = 3 * v19 + 1;
          do
          {
            v145 = v144;
            v144 *= 2;
          }
          while (v145 < v142 + v143 + 2);
          if (v145 <= v137)
          {
            v26 = (char *)v139;
          }
          else
          {
            v26 = (char *)heap_Realloc(*(uint64_t **)(v185 + 8), (uint64_t)v139, v145);
            if (!v26)
              goto LABEL_236;
          }
          v146 = strncat(v26, v141, v143);
          *(_WORD *)&v26[strlen(v146)] = 32;
          v139 = v26;
          v15 = v184;
        }
LABEL_233:
        v11 = v169;
        *(_QWORD *)(*v169 + 8 * (_QWORD)v136++) = v26;
        LODWORD(v26) = (_DWORD)v170;
        v8 = v185;
        if (v136 == v170)
          goto LABEL_234;
        continue;
      }
LABEL_232:
      v26 = v138;
      goto LABEL_233;
    }
    break;
  }
  if (!(_DWORD)v19)
    goto LABEL_232;
  v147 = 0;
  while (2)
  {
    v148 = (const char *)qrk_id2str(v185, *(_QWORD *)(*(_QWORD *)(v15 + 112) + 40), *(_DWORD *)(v177 + 4 * (v19 * (_DWORD)v136 + v147)));
    v149 = strlen(v139);
    v150 = strlen(v148);
    v151 = 3 * v19 + 1;
    do
    {
      v152 = v151;
      v151 *= 2;
    }
    while (v152 < v149 + v150 + 2);
    if (v152 <= v137)
    {
      v26 = (char *)v139;
LABEL_230:
      v153 = strncat(v26, v148, v150);
      *(_WORD *)&v26[strlen(v153)] = 32;
      ++v147;
      v139 = v26;
      v15 = v184;
      if (v147 == v19)
        goto LABEL_233;
      continue;
    }
    break;
  }
  v26 = (char *)heap_Realloc(*(uint64_t **)(v185 + 8), (uint64_t)v139, v152);
  if (v26)
    goto LABEL_230;
LABEL_236:
  v8 = v185;
  heap_Free(*(_QWORD **)(v185 + 8), (uint64_t)v139);
  v10 = 2585796618;
  v11 = v169;
  LODWORD(v26) = (_DWORD)v170;
LABEL_237:
  v23 = (uint64_t)v160;
LABEL_238:
  if (v23)
LABEL_239:
    heap_Free(*(_QWORD **)(v8 + 8), v23);
  if (v171)
    heap_Free(*(_QWORD **)(v8 + 8), v171);
  if (v177)
    heap_Free(*(_QWORD **)(v8 + 8), v177);
LABEL_244:
  if (v187)
    rdr_freeseq(v8, (uint64_t)v187);
  if (v188[0])
    rdr_freeraw(v8, v188[0]);
  if ((v10 & 0x80000000) == 0)
    return 0;
  v154 = *v11;
  if (*v11)
  {
    if ((_DWORD)v26)
    {
      v155 = 0;
      do
      {
        heap_Free(*(_QWORD **)(v8 + 8), *(_QWORD *)(*v11 + v155));
        v155 += 8;
      }
      while (8 * v26 != v155);
      v154 = *v11;
    }
    heap_Free(*(_QWORD **)(v8 + 8), v154);
    *v11 = 0;
  }
  return v10;
}

uint64_t tag_memmsc(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t i;
  unsigned int v14;

  v4 = *(unsigned int *)(a1 + 44);
  v5 = *a2;
  tag_expsc(a1, a2, (uint64_t)a3);
  result = xvm_expma((uint64_t)a3, a3, 0, v4 * v4 * v5);
  v14 = v5;
  if (v5)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      if ((_DWORD)v4)
      {
        v9 = 0;
        v10 = v7;
        do
        {
          v11 = 0;
          v12 = 0;
          do
            v12 = fix16_add(v12, a3[(v10 + v11++)]);
          while (v4 != v11);
          for (i = 0; i != v4; ++i)
          {
            result = fix16_div(a3[(v10 + i)], v12);
            a3[(v10 + i)] = result;
          }
          ++v9;
          v10 += v4;
        }
        while (v9 != (_DWORD)v4);
      }
      ++v8;
      v7 += v4 * v4;
    }
    while (v8 != v14);
  }
  return result;
}

uint64_t tag_expsc(uint64_t result, unsigned int *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t i;
  uint64_t v41;
  _BYTE v42[12];
  uint64_t v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int **v47;
  uint64_t v48;
  unsigned int **v49;
  int v50;
  unsigned int *v51;

  v4 = *(_QWORD *)(result + 80);
  v48 = result;
  v5 = *(unsigned int *)(result + 44);
  v6 = *((_QWORD *)a2 + 2);
  v41 = *a2;
  if (v6)
    v7 = *a2 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      if ((_DWORD)v5)
      {
        v10 = 0;
        v11 = v8;
        do
        {
          v12 = v5;
          v13 = v11;
          do
          {
            *(_DWORD *)(a3 + 4 * v13) = 0x80000000;
            v13 += v5;
            --v12;
          }
          while (v12);
          ++v10;
          ++v11;
        }
        while (v10 != (_DWORD)v5);
      }
      ++v9;
      v8 += v5 * v5;
    }
    while (v9 != (_DWORD)v41);
  }
  if ((_DWORD)v41)
  {
    v44 = 0;
    *(_DWORD *)&v42[8] = 0;
    *(_QWORD *)v42 = (v5 * v5);
    do
    {
      if ((_DWORD)v5)
      {
        v14 = 0;
        v15 = &a2[8 * *(_QWORD *)&v42[4]];
        v46 = v15 + 6;
        v16 = v15 + 7;
        v49 = (unsigned int **)(v15 + 10);
        v17 = v44;
        do
        {
          if (!v6
            || *(_DWORD *)(v6 + 4 * (v5 * *(_DWORD *)&v42[4] + v14))
            || ((v18 = *v46, (_DWORD)v18 != -1) ? (v19 = v14 == v18) : (v19 = 0), v19))
          {
            v20 = *v16;
            if ((_DWORD)v20)
            {
              LODWORD(result) = 0;
              v21 = *v49;
              v22 = *(_QWORD *)(v48 + 64);
              do
              {
                v23 = *v21++;
                result = fix16_add(result, *(_DWORD *)(v4 + 4 * (*(_DWORD *)(v22 + 4 * v23) + v14)));
                --v20;
              }
              while (v20);
            }
            else
            {
              result = 0;
            }
            v24 = v5;
            v25 = v17;
            do
            {
              *(_DWORD *)(a3 + 4 * v25) = result;
              v25 += v5;
              --v24;
            }
            while (v24);
          }
          ++v14;
          ++v17;
        }
        while (v14 != v5);
      }
      v44 += *(_DWORD *)v42;
      ++*(_QWORD *)&v42[4];
    }
    while (*(_QWORD *)&v42[4] != v41);
    if (v41 >= 2)
    {
      for (i = 1; i != v41; ++i)
      {
        if ((_DWORD)v5)
        {
          v26 = 0;
          v27 = 0;
          v45 = &a2[8 * i + 6];
          v50 = v5 * i;
          v28 = &a2[8 * i];
          v51 = v28 + 8;
          v47 = (unsigned int **)(v28 + 12);
          do
          {
            v43 = v26;
            if (!v6 || *(_DWORD *)(v6 + 4 * (v5 * (i - 1) + v26)) || a2[8 * i - 2] != -1 && v26 == *v45)
            {
              v29 = 0;
              v30 = (v50 + v26) * v5;
              do
              {
                if (!v6
                  || *(_DWORD *)(v6 + 4 * (v50 + v29))
                  || ((v31 = *v45, (_DWORD)v31 != -1) ? (v32 = v29 == v31) : (v32 = 0), v32))
                {
                  v33 = v6;
                  v34 = *v51;
                  if ((_DWORD)v34)
                  {
                    v35 = 0;
                    v36 = *v47;
                    v37 = *(_QWORD *)(v48 + 72);
                    do
                    {
                      v38 = *v36++;
                      v35 = fix16_add(v35, *(_DWORD *)(v4 + 4 * (*(_DWORD *)(v37 + 4 * v38) + v27)));
                      --v34;
                    }
                    while (v34);
                  }
                  else
                  {
                    v35 = 0;
                  }
                  result = fix16_add(*(_DWORD *)(a3 + 4 * (v30 + v29)), v35);
                  *(_DWORD *)(a3 + 4 * (v30 + v29)) = result;
                  v6 = v33;
                }
                ++v29;
                ++v27;
              }
              while (v29 != v5);
            }
            v26 = v43 + 1;
          }
          while (v43 + 1 != v5);
        }
      }
    }
  }
  return result;
}

uint64_t tag_forced(uint64_t result, unsigned int *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;

  v4 = *(unsigned int *)(result + 44);
  v5 = *a2;
  v6 = (a4 == 0) << 31;
  if ((_DWORD)v5)
  {
    v7 = 0;
    v8 = 0;
    v9 = v4 * v4;
    v10 = v4 * v4;
    do
    {
      v11 = a2[8 * v8 + 6];
      if (v11 != -1)
      {
        if (v8 && (_DWORD)v4)
        {
          v12 = 0;
          LODWORD(result) = v7;
          do
          {
            if (v12 != v11)
            {
              v13 = v4;
              v14 = result;
              do
              {
                *(_DWORD *)(a3 + 4 * v14) = v6;
                v14 += v4;
                --v13;
              }
              while (v13);
            }
            ++v12;
            result = (result + 1);
          }
          while (v12 != (_DWORD)v4);
        }
        if (v8 != (_DWORD)v5 - 1 && (_DWORD)v4)
        {
          v15 = 0;
          LODWORD(result) = v10;
          do
          {
            if (v15 != v11)
            {
              v16 = v4;
              v17 = result;
              do
              {
                *(_DWORD *)(a3 + 4 * v17++) = v6;
                --v16;
              }
              while (v16);
            }
            ++v15;
            result = (result + v4);
          }
          while (v15 != (_DWORD)v4);
        }
      }
      ++v8;
      v7 += v9;
      v10 += v9;
    }
    while (v8 != v5);
  }
  v18 = a2[6];
  if (v18 != -1 && (_DWORD)v4 != 0)
  {
    v20 = 0;
    do
    {
      if (v18 != v20)
      {
        v21 = v4;
        v22 = v20;
        do
        {
          *(_DWORD *)(a3 + 4 * v22) = v6;
          v22 += v4;
          --v21;
        }
        while (v21);
      }
      ++v20;
    }
    while (v20 != (_DWORD)v4);
  }
  return result;
}

uint64_t tag_memmsc_sparse(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t i;
  unsigned int v14;

  v4 = *(unsigned int *)(a1 + 44);
  v5 = *a2;
  tag_expsc_sparse(a1, a2, (uint64_t)a3);
  result = xvm_expma((uint64_t)a3, a3, 0, v4 * v4 * v5);
  v14 = v5;
  if (v5)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      if ((_DWORD)v4)
      {
        v9 = 0;
        v10 = v7;
        do
        {
          v11 = 0;
          v12 = 0;
          do
            v12 = fix16_add(v12, a3[(v10 + v11++)]);
          while (v4 != v11);
          for (i = 0; i != v4; ++i)
          {
            result = fix16_div(a3[(v10 + i)], v12);
            a3[(v10 + i)] = result;
          }
          ++v9;
          v10 += v4;
        }
        while (v9 != (_DWORD)v4);
      }
      ++v8;
      v7 += v4 * v4;
    }
    while (v8 != v14);
  }
  return result;
}

uint64_t tag_expsc_sparse(uint64_t result, unsigned int *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  _DWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int *v33;
  _DWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  int v44;
  int v45;
  uint64_t i;
  uint64_t v47;
  int v48;
  unsigned int *v49;
  unsigned int *v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  int v57;
  unsigned int *v58;

  v4 = result;
  v5 = *(_QWORD *)(result + 88);
  v6 = *(unsigned int *)(result + 44);
  v47 = *a2;
  if (*((_QWORD *)a2 + 2))
    v7 = *a2 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      if ((_DWORD)v6)
      {
        v10 = 0;
        v11 = v8;
        do
        {
          v12 = v6;
          v13 = v11;
          do
          {
            *(_DWORD *)(a3 + 4 * v13) = 0x80000000;
            v13 += v6;
            --v12;
          }
          while (v12);
          ++v10;
          ++v11;
        }
        while (v10 != (_DWORD)v6);
      }
      ++v9;
      v8 += v6 * v6;
    }
    while (v9 != (_DWORD)v47);
  }
  if ((_DWORD)v47)
  {
    v48 = 0;
    v14 = 0;
    v15 = -(int)v6;
    v58 = a2;
    do
    {
      if ((_DWORD)v6)
      {
        v16 = 0;
        v17 = &a2[8 * v14 + 6];
        v18 = &a2[8 * v14];
        v19 = v18 + 7;
        v20 = v18 + 10;
        v21 = v48;
        v50 = &a2[8 * (v14 - 1) + 6];
        v52 = v17;
        v54 = v15;
        do
        {
          v22 = *((_QWORD *)a2 + 2);
          if (!v22
            || *(_DWORD *)(v22 + 4 * (v6 * v14 + v16))
            || ((v23 = *v17, (_DWORD)v23 != -1) ? (v24 = v16 == v23) : (v24 = 0), v24))
          {
            v56 = v21;
            if (*v19)
            {
              v25 = 0;
              v26 = 0;
              do
              {
                v27 = sparray_get(v5, *(_DWORD *)(*(_QWORD *)(v4 + 64) + 4 * *(unsigned int *)(*v20 + 4 * v25)) + (int)v16);
                result = fix16_add(v26, v27);
                v26 = result;
                ++v25;
              }
              while (v25 < *v19);
            }
            else
            {
              v26 = 0;
            }
            v28 = 0;
            v21 = v56;
            v29 = v56;
            a2 = v58;
            v17 = v52;
            v15 = v54;
            do
            {
              if (!v14
                || (v30 = *((_QWORD *)v58 + 2)) == 0
                || *(_DWORD *)(v30 + 4 * (v54 + v28))
                || *v50 != -1 && v28 == *v52)
              {
                *(_DWORD *)(a3 + 4 * v29) = v26;
              }
              ++v28;
              v29 += v6;
            }
            while (v6 != v28);
          }
          ++v16;
          ++v21;
        }
        while (v16 != v6);
      }
      ++v14;
      v48 += v6 * v6;
      v15 += v6;
    }
    while (v14 != v47);
    if (v47 >= 2)
    {
      for (i = 1; i != v47; ++i)
      {
        if ((_DWORD)v6)
        {
          v31 = 0;
          v32 = 0;
          v53 = &a2[8 * i + 6];
          v55 = v6 * i;
          v33 = &a2[8 * i];
          v34 = v33 + 8;
          v35 = v33 + 12;
          v49 = &a2[8 * i - 2];
          do
          {
            v36 = *((_QWORD *)a2 + 2);
            v51 = v31;
            if (!v36
              || *(_DWORD *)(v36 + 4 * (v6 * (i - 1) + v31))
              || ((v37 = *v49, (_DWORD)v37 != -1) ? (v38 = v31 == v37) : (v38 = 0), v38))
            {
              v39 = 0;
              v57 = (v55 + v31) * v6;
              do
              {
                v40 = *((_QWORD *)a2 + 2);
                if (!v40
                  || *(_DWORD *)(v40 + 4 * (v55 + v39))
                  || ((v41 = *v53, (_DWORD)v41 != -1) ? (v42 = v39 == v41) : (v42 = 0), v42))
                {
                  if (*v34)
                  {
                    v43 = 0;
                    v44 = 0;
                    do
                    {
                      v45 = sparray_get(v5, *(_DWORD *)(*(_QWORD *)(v4 + 72) + 4 * *(unsigned int *)(*v35 + 4 * v43)) + v32);
                      v44 = fix16_add(v44, v45);
                      ++v43;
                    }
                    while (v43 < *v34);
                  }
                  else
                  {
                    v44 = 0;
                  }
                  result = fix16_add(*(_DWORD *)(a3 + 4 * (v57 + v39)), v44);
                  *(_DWORD *)(a3 + 4 * (v57 + v39)) = result;
                  a2 = v58;
                }
                ++v39;
                ++v32;
              }
              while (v39 != v6);
            }
            else
            {
              v32 += v6;
            }
            v31 = v51 + 1;
          }
          while (v51 + 1 != v6);
        }
      }
    }
  }
  return result;
}

_QWORD *kh_init_32(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 48);
  if (result)
    *result = a1;
  return result;
}

_QWORD *kh_destroy_32(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  heap_Free(*(_QWORD **)(*a1 + 8), a1[4]);
  heap_Free(*(_QWORD **)(v2 + 8), a1[3]);
  heap_Free(*(_QWORD **)(v2 + 8), a1[5]);
  return heap_Free(*(_QWORD **)(v2 + 8), (uint64_t)a1);
}

uint64_t kh_get_32(uint64_t a1, int a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;

  result = *(unsigned int *)(a1 + 8);
  if ((_DWORD)result)
  {
    v4 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
    v6 = (result - 1) & (v5 ^ HIWORD(v5));
    v7 = 1;
    v8 = v6;
    while (1)
    {
      v9 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * (v8 >> 4)) >> (2 * (v8 & 0xF));
      if ((v9 & 2) != 0 || (v9 & 1) == 0 && *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v8) == a2)
        break;
      v8 = (v8 + v7++) & (result - 1);
      if (v8 == v6)
        return result;
    }
    if ((v9 & 3) != 0)
      return result;
    else
      return v8;
  }
  return result;
}

uint64_t kh_resize_32(uint64_t *a1, int a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  char v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t result;

  v2 = (a2 - 1) | ((a2 - 1) >> 1) | (((a2 - 1) | ((a2 - 1) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  v4 = v3 | HIWORD(v3);
  if ((v4 + 1) > 4)
    v5 = v4 + 1;
  else
    v5 = 4;
  v6 = 3 * v5 + 2;
  if (*((_DWORD *)a1 + 3) >= v6)
    return 0;
  v8 = *a1;
  v9 = *(_QWORD *)(*a1 + 8);
  if (v5 >= 0x10)
    v10 = (v5 >> 2) & 0x3FFFFFFC;
  else
    v10 = 4;
  v11 = (void *)heap_Alloc(v9, v10);
  if (!v11)
    return 0xFFFFFFFFLL;
  v12 = (uint64_t)v11;
  memset(v11, 170, v10);
  v13 = *((_DWORD *)a1 + 2);
  if (v13 < v5)
  {
    v14 = heap_Realloc(*(uint64_t **)(v8 + 8), a1[4], 4 * v5);
    if (v14)
    {
      a1[4] = v14;
      v15 = heap_Realloc(*(uint64_t **)(v8 + 8), a1[5], 4 * v5);
      if (v15)
      {
        a1[5] = v15;
        v13 = *((_DWORD *)a1 + 2);
        goto LABEL_13;
      }
    }
    heap_Free(*(_QWORD **)(v8 + 8), v12);
    return 0xFFFFFFFFLL;
  }
LABEL_13:
  if (v13)
  {
    v16 = 0;
    v17 = a1[3];
    v18 = v5 - 1;
    do
    {
      v19 = v16 >> 4;
      v20 = *(_DWORD *)(v17 + 4 * v19);
      if (((v20 >> (2 * (v16 & 0xF))) & 3) == 0)
      {
        v21 = a1[4];
        v22 = a1[5];
        v23 = *(_DWORD *)(v21 + 4 * v16);
        v24 = *(_DWORD *)(v22 + 4 * v16);
        *(_DWORD *)(v17 + 4 * v19) = v20 | (1 << (2 * (v16 & 0xF)));
        while (1)
        {
          v25 = 9 * ((v23 + ~(v23 << 15)) ^ ((v23 + ~(v23 << 15)) >> 10));
          v26 = (v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11);
          v27 = (v26 ^ HIWORD(v26)) & v18;
          v28 = v27 >> 4;
          v29 = *(_DWORD *)(v12 + 4 * v28);
          v30 = 2 * (v27 & 0xF);
          v31 = 2 << v30;
          if (((2 << v30) & v29) == 0)
          {
            v32 = 1;
            do
            {
              v27 = (v27 + v32) & v18;
              v28 = v27 >> 4;
              v29 = *(_DWORD *)(v12 + 4 * v28);
              v30 = 2 * (v27 & 0xF);
              v31 = 2 << v30;
              ++v32;
            }
            while (((2 << v30) & v29) == 0);
          }
          *(_DWORD *)(v12 + 4 * v28) = v29 & ~v31;
          if (v27 >= *((_DWORD *)a1 + 2) || ((*(_DWORD *)(v17 + 4 * v28) >> v30) & 3) != 0)
            break;
          v33 = *(_DWORD *)(v21 + 4 * v27);
          *(_DWORD *)(v21 + 4 * v27) = v23;
          v34 = *(_DWORD *)(v22 + 4 * v27);
          *(_DWORD *)(v22 + 4 * v27) = v24;
          *(_DWORD *)(v17 + 4 * v28) |= 1 << v30;
          v23 = v33;
          v24 = v34;
        }
        *(_DWORD *)(v21 + 4 * v27) = v23;
        *(_DWORD *)(v22 + 4 * v27) = v24;
        v13 = *((_DWORD *)a1 + 2);
      }
      ++v16;
    }
    while (v16 != v13);
    if (v13 > v5)
    {
      a1[4] = heap_Realloc(*(uint64_t **)(v8 + 8), a1[4], 4 * v5);
      a1[5] = heap_Realloc(*(uint64_t **)(v8 + 8), a1[5], 4 * v5);
    }
  }
  heap_Free(*(_QWORD **)(v8 + 8), a1[3]);
  result = 0;
  a1[3] = v12;
  *((_DWORD *)a1 + 2) = v5;
  *((_DWORD *)a1 + 4) = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 5) = v6;
  return result;
}

uint64_t kh_put_32(uint64_t a1, int a2, int *a3)
{
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  unsigned int v15;
  int v16;
  _BOOL4 v17;
  uint64_t v19;
  char v20;
  int v21;
  int v22;

  if (*(_DWORD *)(a1 + 16) >= *(_DWORD *)(a1 + 20))
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = v6 <= *(_DWORD *)(a1 + 12) >> 1 ? v6 + 1 : v6 - 1;
    if ((kh_resize_32((uint64_t *)a1, v7) & 0x80000000) != 0)
    {
      *a3 = -1;
      return *(unsigned int *)(a1 + 8);
    }
  }
  v8 = *(_DWORD *)(a1 + 8);
  v9 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v10 = (v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11);
  v11 = (v8 - 1) & (v10 ^ HIWORD(v10));
  v12 = *(_QWORD *)(a1 + 24);
  if (((*(_DWORD *)(v12 + 4 * (v11 >> 4)) >> (2 * (v11 & 0xF))) & 2) != 0)
  {
    result = v11;
  }
  else
  {
    v14 = 1;
    v15 = v11;
    LODWORD(result) = *(_DWORD *)(a1 + 8);
    do
    {
      v16 = *(_DWORD *)(v12 + 4 * (v15 >> 4)) >> (2 * (v15 & 0xF));
      if ((v16 & 2) != 0 || (v16 & 1) == 0 && *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v15) == a2)
      {
        v17 = ((*(_DWORD *)(v12 + 4 * (v15 >> 4)) >> (2 * (v15 & 0xF))) & 2) == 0;
        goto LABEL_20;
      }
      if ((v16 & 1) != 0)
        result = v15;
      else
        result = result;
      v15 = (v15 + v14++) & (v8 - 1);
    }
    while (v15 != (_DWORD)v11);
    if ((_DWORD)result != v8)
      goto LABEL_26;
    v17 = 1;
    LODWORD(result) = *(_DWORD *)(a1 + 8);
    v15 = v11;
LABEL_20:
    if ((_DWORD)result == v8 || v17)
      result = v15;
    else
      result = result;
  }
LABEL_26:
  v19 = result >> 4;
  v20 = 2 * (result & 0xF);
  v21 = *(_DWORD *)(v12 + 4 * v19) >> v20;
  if ((v21 & 2) != 0)
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * result) = a2;
    *(_DWORD *)(v12 + 4 * v19) &= ~(3 << v20);
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x400000004);
    v22 = 1;
  }
  else
  {
    if ((v21 & 1) == 0)
    {
      *a3 = 0;
      return result;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * result) = a2;
    *(_DWORD *)(v12 + 4 * v19) &= ~(3 << v20);
    *(_DWORD *)(a1 + 12) += 4;
    v22 = 2;
  }
  *a3 = v22;
  return result;
}

uint64_t xvm_new(uint64_t a1, unsigned int a2)
{
  return heap_Alloc(*(_QWORD *)(a1 + 8), 4 * a2);
}

_QWORD *xvm_free(uint64_t a1, uint64_t a2)
{
  return heap_Free(*(_QWORD **)(a1 + 8), a2);
}

uint64_t xvm_expma(uint64_t result, unsigned int *a2, int a3, unsigned int a4)
{
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;

  if (a4)
  {
    v6 = (_DWORD *)result;
    v7 = a4;
    do
    {
      v8 = *a2++;
      v9 = fix16_exp(v8);
      result = fix16_sub(v9, a3);
      *v6++ = result;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t _parse_one_rule(uint64_t a1, char *__s1, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  const char *v13;
  int v14;
  char *v15;
  int v16;
  uint64_t v17;
  char *v18;
  int v19;
  char *v20;
  char *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  _BOOL4 v28;
  char *v29;
  char *v30;
  int v31;
  int v32;
  const char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v37;
  unsigned int v38;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(unsigned int *)(a3 + 8);
  v8 = (_DWORD *)(v6 + 16 * v7);
  while (1)
  {
    v9 = *__s1;
    if (v9 != 32)
      break;
    ++__s1;
  }
  if (!*__s1 || v9 == 35)
    return 0;
  v10 = 2585796618;
  v11 = strstr(__s1, ")-->");
  if (v11 && (v12 = v11, strlen(v11) >= 5))
  {
    v13 = v12 + 4;
    v14 = strlen(v13);
    v15 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, (v14 + 1));
    *(_QWORD *)(v6 + 16 * v7 + 8) = v15;
    if (!v15)
      return v10;
    strcpy(v15, v13);
  }
  else
  {
    wapiti_info(*(_QWORD *)(a1 + 32), (uint64_t)"invalid rule label: %s");
  }
  v16 = strlen(__s1);
  v17 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, (v16 + 2));
  if (v17)
  {
    v18 = (char *)v17;
    v37 = v7;
    v19 = 0;
    v38 = 0;
    *v8 = 0;
    v20 = __s1;
    do
    {
      if (!strstr(v20, ")^") && !strstr(v20, ")-->"))
        break;
      *v8 = ++v19;
      v21 = strstr(v20, ")^");
      v20 = v21 + 2;
    }
    while (v21);
    v22 = *(_DWORD *)(a3 + 32);
    v23 = *(_DWORD *)(a3 + 36);
    if (v22 + 4 * v19 <= v23)
    {
LABEL_19:
      *(_DWORD *)(v6 + 16 * v37 + 4) = v22;
      while (1)
      {
        v25 = strstr(__s1, ")^");
        if (!v25)
        {
          v25 = strstr(__s1, ")-->");
          if (!v25)
            break;
        }
        *v25 = 0;
        v26 = strchr(__s1, 40);
        if (!v26)
        {
          wapiti_info(*(_QWORD *)(a1 + 32), (uint64_t)"invalid feature id: %s");
          break;
        }
        *v26 = 0;
        v27 = *__s1;
        v28 = v27 == 33;
        if (v27 == 33)
          v29 = __s1 + 1;
        else
          v29 = __s1;
        v30 = strchr(v29, 95);
        if (v30)
        {
          *v30 = 0;
          v31 = atoi(v29);
          v29 += strlen(v29) + 1;
        }
        else
        {
          wapiti_info(*(_QWORD *)(a1 + 32), (uint64_t)"invalid offset: %s");
          v31 = 0;
        }
        v32 = atoi(v29);
        v33 = &v29[strlen(v29) + 1];
        *(_WORD *)v18 = 124;
        v34 = strcat(v18, v33);
        *(_WORD *)&v18[strlen(v34)] = 124;
        if ((qrk_str2id(a1, *(uint64_t **)a3, v18, &v38, 0) & 0x80000000) != 0)
          goto LABEL_33;
        v35 = *(_QWORD *)(a3 + 24);
        *(_DWORD *)(v35 + 4 * *(unsigned int *)(a3 + 32)) = v28;
        *(_DWORD *)(v35 + 4 * (*(_DWORD *)(a3 + 32) + 1)) = v31;
        *(_DWORD *)(v35 + 4 * (*(_DWORD *)(a3 + 32) + 2)) = v32;
        *(_DWORD *)(v35 + 4 * (*(_DWORD *)(a3 + 32) + 3)) = v38;
        *(_DWORD *)(a3 + 32) += 4;
        __s1 = (char *)&v33[strlen(v33) + 2];
      }
      ++*(_DWORD *)(a3 + 8);
LABEL_33:
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v18);
      return 0;
    }
    v24 = heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)(a3 + 24), 4 * (v19 + v23 + 50));
    if (v24)
    {
      v22 = *(_DWORD *)(a3 + 32);
      *(_DWORD *)(a3 + 36) += *v8 + 50;
      *(_QWORD *)(a3 + 24) = v24;
      goto LABEL_19;
    }
  }
  return v10;
}

uint64_t wapiti_rules_load(uint64_t a1, const char *a2, unsigned int a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  char *v14;
  const char *v15;
  size_t v16;

  wapiti_info(*(_QWORD *)(a1 + 32), (uint64_t)"Load wapiti forcing rules...");
  result = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 40);
  if (result)
  {
    v9 = result;
    if (!a3 || strncmp(a2, "Rule_Number: ", 0xDuLL) || (v10 = atoi(a2 + 13), v11 = strlen(a2), !v10))
    {
LABEL_4:
      result = 0;
      *a4 = v9;
      return result;
    }
    v12 = v11;
    if ((qrk_new(a1, (uint64_t *)v9) & 0x80000000) != 0)
      return 0;
    v13 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 16 * v10);
    *(_QWORD *)(v9 + 16) = v13;
    if (!v13)
      return 2585796618;
    result = heap_Calloc(*(_QWORD **)(a1 + 8), 300, 4);
    *(_QWORD *)(v9 + 24) = result;
    if (result)
    {
      *(_DWORD *)(v9 + 36) = 300;
      *(_DWORD *)(v9 + 8) = 0;
      if ((uint64_t)(v12 + 1) < a3)
      {
        v14 = (char *)&a2[v12 + 1];
        v15 = &a2[a3];
        do
        {
          v16 = strlen(v14);
          _parse_one_rule(a1, v14, v9);
          v14 += v16 + 1;
        }
        while (v14 < v15);
      }
      goto LABEL_4;
    }
  }
  return result;
}

uint64_t _apply_one_rule(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, char *a6)
{
  int v10;
  int i;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *__s1;

  if (!*(_DWORD *)a3)
    return *(_QWORD *)(a3 + 8);
  v10 = 0;
  for (i = 3; ; i += 4)
  {
    v12 = a2[3];
    v13 = i + *(_DWORD *)(a3 + 4);
    v14 = *(_DWORD *)(v12 + 4 * (v13 - 3));
    v15 = *(_DWORD *)(v12 + 4 * (v13 - 2));
    v16 = (v15 + a5);
    if (v15 + a5 < 0
      || (int)v16 >= *(_DWORD *)a4
      || (v17 = *(unsigned int *)(v12 + 4 * (v13 - 1)),
          v17 >= *(_DWORD *)(*(_QWORD *)(a4 + 16) + 4 * v16)))
    {
      v19 = 0;
    }
    else
    {
      __s1 = (char *)qrk_id2str(a1, *a2, *(_DWORD *)(v12 + 4 * v13));
      *(_WORD *)a6 = 124;
      v18 = strcat(a6, *(const char **)(*(_QWORD *)(a4 + 8 * v16 + 24) + 8 * v17));
      *(_WORD *)&a6[strlen(v18)] = 124;
      v19 = strstr(__s1, a6);
    }
    if (!v14 && v19 == 0)
      break;
    if (v14 == 1 && v19 != 0)
      break;
    if (++v10 >= *(_DWORD *)a3)
      return *(_QWORD *)(a3 + 8);
  }
  return 0;
}

uint64_t wapiti_rules_apply(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  const char **v10;
  const char *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  wapiti_info(*(_QWORD *)(a1 + 32), (uint64_t)"Apply wapiti forcing rules...");
  v6 = *a3;
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *(unsigned int *)(*((_QWORD *)a3 + 2) + 4 * v7);
      if ((_DWORD)v9)
      {
        v10 = *(const char ***)&a3[2 * v7 + 6];
        do
        {
          v11 = *v10++;
          v12 = strlen(v11);
          if (v8 <= v12)
            v8 = v12;
          --v9;
        }
        while (v9);
      }
      ++v7;
    }
    while (v7 != v6);
  }
  else
  {
    v8 = 0;
  }
  v13 = 2585796618;
  v14 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, v8 + 10);
  if (v14)
  {
    v15 = (char *)v14;
    if (*((_QWORD *)a3 + 1)
      || (v16 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 8 * *a3), (*((_QWORD *)a3 + 1) = v16) != 0))
    {
      if (*a3)
      {
        v17 = 0;
        LODWORD(v18) = *(_DWORD *)(a2 + 8);
        while (!(_DWORD)v18)
        {
          v21 = *((_QWORD *)a3 + 1);
          if (!*(_QWORD *)(v21 + 8 * v17))
            goto LABEL_26;
LABEL_23:
          if (++v17 >= (unint64_t)*a3)
            goto LABEL_27;
        }
        v19 = 0;
        v20 = 1;
        do
        {
          *(_QWORD *)(*((_QWORD *)a3 + 1) + 8 * v17) = _apply_one_rule(a1, (uint64_t *)a2, *(_QWORD *)(a2 + 16) + v19, (uint64_t)a3, v17, v15);
          v21 = *((_QWORD *)a3 + 1);
          v22 = *(_QWORD *)(v21 + 8 * v17);
          v18 = *(unsigned int *)(a2 + 8);
          v19 += 16;
        }
        while (v20++ < v18 && v22 == 0);
        if (v22)
          goto LABEL_23;
LABEL_26:
        *(_QWORD *)(v21 + 8 * v17) = &byte_1DEBD87CE;
        goto LABEL_23;
      }
LABEL_27:
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v15);
      return 0;
    }
  }
  return v13;
}

uint64_t wapiti_rules_unload(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;

  if (a2)
  {
    wapiti_info(*(_QWORD *)(a1 + 32), (uint64_t)"Unload wapiti forcing rules...");
    if (*(_DWORD *)(a2 + 8) && *(_QWORD *)(a2 + 16))
    {
      v4 = 0;
      v5 = 8;
      do
      {
        heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 16) + v5));
        ++v4;
        v5 += 16;
      }
      while (v4 < *(unsigned int *)(a2 + 8));
      heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 16));
      heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 24));
    }
    if (*(_QWORD *)a2)
      qrk_free();
    heap_Free(*(_QWORD **)(a1 + 8), a2);
  }
  return 0;
}

uint64_t crf_Init_ReadOnly_ReferenceCnt(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, _QWORD *a5, int a6, uint64_t a7, uint64_t a8, __int16 a9, char a10, uint64_t a11)
{
  uint64_t result;
  uint64_t ObjcForThisApi;
  uint64_t v20;
  _QWORD v21[5];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = 0;
  v26 = 0;
  v23 = 0;
  v24 = 0;
  v21[4] = 0;
  v22 = 0;
  result = InitRsrcFunction(a1, a2, &v26);
  if ((result & 0x80000000) == 0)
  {
    result = InitRsrcFunction(a3, a4, &v25);
    if ((result & 0x80000000) == 0)
    {
      v21[0] = a1;
      v21[1] = a2;
      v21[2] = a3;
      v21[3] = a4;
      __strcpy_chk();
      LODWORD(v22) = a6;
      BYTE6(v22) = a10;
      WORD2(v22) = a9;
      v23 = a11;
      ObjcForThisApi = getObjcForThisApi(v26, v25);
      result = objc_GetAddRefCountedObject(ObjcForThisApi, a7, (uint64_t (*)(_QWORD, _QWORD, uint64_t, __int128 *, uint64_t))crf_ObjcLoad, (void (*)(_QWORD, _QWORD, __int128 *))crf_ObjcClose, (uint64_t)v21, &v24);
      if ((result & 0x80000000) != 0)
        v20 = 0;
      else
        v20 = *(_QWORD *)(v24 + 32);
      *a5 = v20;
    }
  }
  return result;
}

uint64_t crf_ObjcLoad(_WORD *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *, _QWORD, int *);
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE __dst[408];
  const void *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;

  v23 = 0;
  v24 = 0;
  result = InitRsrcFunction(a1, a2, &v23);
  if ((result & 0x80000000) == 0)
  {
    result = InitRsrcFunction(*(_WORD **)(a5 + 16), *(_QWORD *)(a5 + 24), &v24);
    if ((result & 0x80000000) == 0)
    {
      memcpy(__dst, v23, sizeof(__dst));
      *(_OWORD *)&__dst[32] = *(_OWORD *)(v24 + 32);
      v11 = *(unsigned int *)(a5 + 40);
      v12 = *(uint64_t (**)(_BYTE *, _QWORD, int *))(a5 + 48);
      v13 = *(unsigned __int16 *)(a5 + 44) | (*(unsigned __int8 *)(a5 + 46) << 16);
      v26 = 0;
      result = ssftriff_reader_ObjOpen(a1, a2, v11, a3, (char *)(a5 + 32), v13, (uint64_t *)&v26);
      if ((result & 0x80000000) == 0)
      {
        v14 = heap_Calloc(*(_QWORD **)&__dst[8], 1, 344);
        *(_QWORD *)(a4 + 32) = v14;
        if (v14)
        {
          result = crf_Init(a1, a2, (uint64_t)v26, v14);
          if ((result & 0x80000000) != 0)
            return result;
          strcpy((char *)(*(_QWORD *)(a4 + 32) + 84), a3);
          if (v12)
          {
            v25 = 1;
            result = v12(__dst, *(_QWORD *)(a4 + 32), &v25);
            if ((result & 0x80000000) != 0)
              return result;
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 24) + 24) = v25;
          }
          return ssftriff_reader_ObjClose(v26, v15, v16, v17, v18, v19, v20, v21);
        }
        else
        {
          return 2585796618;
        }
      }
    }
  }
  return result;
}

uint64_t crf_ObjcClose(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  result = InitRsrcFunction(a1, a2, &v14);
  if ((result & 0x80000000) == 0)
  {
    v12 = *(_QWORD *)(a3 + 32);
    if (v12)
    {
      v13 = v14;
      crf_Deinit(v12, v5, v6, v7, v8, v9, v10, v11);
      heap_Free(*(_QWORD **)(v13 + 8), v12);
    }
    return 0;
  }
  return result;
}

uint64_t crf_Deinit_ReadOnly_DereferenceCnt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjcForThisApi;

  ObjcForThisApi = getObjcForThisApi(a1, a2);
  return objc_ReleaseObject(ObjcForThisApi, a3 + 84);
}

uint64_t crf_Init(_WORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  int Chunk;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t StringZ;
  char *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  char *v36;
  char *v37;
  __darwin_ct_rune_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  uint64_t j;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  _QWORD *v75;
  char *v76;
  uint64_t v77;
  _QWORD *v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  uint64_t i;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unsigned int v96;
  char *v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  _DWORD *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  unsigned int v117;
  char *v118;
  char *v119;
  char *v120;
  __darwin_ct_rune_t v121;
  uint64_t v122;
  unsigned int v123;
  char *v124;
  uint64_t *v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  const char *v137;
  unsigned int v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  char *v146;
  char *v147;
  __darwin_ct_rune_t v148;
  unsigned int v149;
  uint64_t v150;
  char *v151;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  char *v166;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char *v186;
  char *v187;
  int v188;
  unint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  char *v198;
  char *v199;
  unint64_t v200;
  char *v201;
  unsigned int v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int v209;
  uint64_t v210;
  unsigned int v211;
  uint64_t v212;
  int v213;
  unsigned __int8 v214;
  size_t v215;
  uint64_t v216;
  size_t __n;
  uint64_t v218;
  int v219[2];
  char *__s;
  int v221;
  const void *__dst[15];

  __dst[13] = *(const void **)MEMORY[0x1E0C80C00];
  v211 = 0;
  v210 = 0;
  *(_DWORD *)(a4 + 68) = 0;
  Chunk = ssftriff_reader_FindChunk(a3, "FAST", 2 * (*(_DWORD *)(a4 + 72) != 0), &v211, &v210);
  if (Chunk < 0)
  {
    LODWORD(v10) = Chunk;
    if ((Chunk & 0x1FFF) == 0xA)
      goto LABEL_9;
  }
  else
  {
    *(_DWORD *)(a4 + 68) = 1;
    v9 = ssftriff_reader_CloseChunk(a3);
    if ((v9 & 0x80000000) != 0)
      return v9;
  }
  *(_DWORD *)(a4 + 80) = 0;
  v11 = ssftriff_reader_FindChunk(a3, "QPTR", 2 * (*(_DWORD *)(a4 + 72) != 0), &v211, &v210);
  if (v11 < 0)
  {
    LODWORD(v10) = v11;
    if ((v11 & 0x1FFF) != 0xA)
      goto LABEL_12;
LABEL_9:
    v12 = ssftriff_reader_CloseChunk(a3);
    if (v12 >= 0)
      return v10;
    else
      return v12;
  }
  *(_DWORD *)(a4 + 80) = 1;
  v9 = ssftriff_reader_CloseChunk(a3);
  if ((v9 & 0x80000000) != 0)
    return v9;
LABEL_12:
  if (!*(_DWORD *)(a4 + 68))
  {
    v213 = 0;
    __dst[0] = 0;
    v221 = 0;
    BYTE4(v212) = 0;
    LODWORD(v212) = 0;
    *(_QWORD *)v219 = 0;
    __s = 0;
    v218 = 0;
    HIDWORD(__n) = 0;
    inited = InitRsrcFunction(a1, a2, &__s);
    if ((inited & 0x80000000) != 0)
      goto LABEL_332;
    wapiti_info(*((_QWORD *)__s + 4), (uint64_t)"CRF COMP Init...");
    inited = rdr_new((uint64_t)__s, 0, (uint64_t *)v219);
    if ((inited & 0x80000000) != 0)
      goto LABEL_332;
    inited = mdl_new(*(uint64_t *)v219, &v218);
    if ((inited & 0x80000000) != 0)
      goto LABEL_332;
    v98 = v218;
    *(_OWORD *)(v218 + 8) = opt_defaults;
    *(_OWORD *)(v98 + 24) = unk_1DEC6675C;
    v99 = ssftriff_reader_OpenChunk(a3, &v212, (unsigned int *)&v213, __dst, v17, v18, v19, v20);
    v100 = 0;
    if ((v99 & 0x80000000) != 0)
    {
LABEL_188:
      if ((v99 & 0x1FFF) == 0x14)
        v10 = 0;
      else
        v10 = v99;
      wapiti_info(*((_QWORD *)__s + 4), (uint64_t)"OBS Count from model:%I32u, OBSW count:%d");
      goto LABEL_339;
    }
    v10 = 2585796618;
    while (1)
    {
      v101 = heap_Alloc(*((_QWORD *)__s + 1), 100);
      if (!v101)
        goto LABEL_339;
      v102 = v101;
      if (!(v212 ^ 0x5453494C | BYTE4(v212)))
        break;
      if (!(v212 ^ 0x41524150 | BYTE4(v212)))
      {
        v103 = _crf_parse_params((uint64_t)__s, __dst[0], v213, a4);
        if ((v103 & 0x80000000) != 0)
          goto LABEL_337;
        goto LABEL_187;
      }
      if (!(v212 ^ 0x454C5552 | BYTE4(v212)))
      {
        v103 = wapiti_rules_load((uint64_t)__s, (const char *)__dst[0], v213, (uint64_t *)(*(_QWORD *)(v218 + 112) + 56));
        if ((v103 & 0x80000000) != 0)
          goto LABEL_337;
        goto LABEL_187;
      }
      if (!(v212 ^ 0x53525053 | BYTE4(v212)))
      {
        *(_DWORD *)(v218 + 32) = 1;
        v104 = *((_QWORD *)__s + 4);
        v105 = "sparse theta ENABLED";
        goto LABEL_132;
      }
      LODWORD(__n) = 0;
      wapiti_info(*((_QWORD *)__s + 4), (uint64_t)"ChunkID:%s, cChunk:%d");
      if (!(v212 ^ 0x5753424F | BYTE4(v212)))
      {
        if (*(_DWORD *)(v218 + 32))
        {
          v103 = mdl_sync_sparse(v218);
          if ((v103 & 0x80000000) != 0)
            goto LABEL_337;
        }
        else
        {
          v103 = mdl_sync(v218);
          if ((v103 & 0x80000000) != 0)
          {
LABEL_337:
            v10 = v103;
LABEL_339:
            v204 = v218;
            goto LABEL_352;
          }
        }
      }
      *(_DWORD *)(v102 + 96) = 0;
      *(_OWORD *)(v102 + 64) = 0u;
      *(_OWORD *)(v102 + 80) = 0u;
      *(_OWORD *)(v102 + 32) = 0u;
      *(_OWORD *)(v102 + 48) = 0u;
      *(_OWORD *)v102 = 0u;
      *(_OWORD *)(v102 + 16) = 0u;
      v106 = v213;
      if (v213)
      {
        v209 = 0;
        v107 = 0;
        do
        {
          v216 = 0;
          v221 = 100;
          ssftriff_reader_ReadStringZ(a3, (uint64_t)__dst[0], v106, v107, (_BYTE *)v102, (unsigned int *)&v221);
          if (v212 ^ 0x45444F4D | BYTE4(v212))
          {
            if (v212 ^ 0x52454452 | BYTE4(v212))
            {
              if (v212 ^ 0x4C4B5251 | BYTE4(v212))
              {
                if (v212 ^ 0x4F4B5251 | BYTE4(v212))
                {
                  if (!(v212 ^ 0x5753424F | BYTE4(v212)))
                  {
                    v215 = 0;
                    if (wapiti_scanf_fmt_pair((const char *)v102, "=", (int *)&v215 + 1, (int *)&v215) != 2)
                      wapiti_fatal(*((_QWORD *)__s + 4), (uint64_t)"Bad format of OBSW chunk");
                    if (*(_DWORD *)(v218 + 32))
                      sparray_set(*(_QWORD *)(v218 + 88), SHIDWORD(v215), v215);
                    else
                      *(_DWORD *)(*(_QWORD *)(v218 + 80) + 4 * HIDWORD(v215)) = v215;
                    v100 = (v100 + 1);
                  }
                  goto LABEL_186;
                }
                v122 = *(_QWORD *)(v218 + 112);
                if (wapiti_scanf_fmt_1((const char *)v102, "#qrk#", (int *)&v216 + 1) != 1)
                {
                  HIDWORD(v215) = 0;
                  v123 = wapiti_ns_readline((uint64_t)__s, (const char *)v102, (_DWORD *)&v215 + 1);
                  v124 = __s;
                  v125 = *(uint64_t **)(v122 + 48);
LABEL_172:
                  v103 = qrk_str2id((uint64_t)v124, v125, (char *)(v102 + v123), (unsigned int *)&__n, HIDWORD(v215));
                  if ((v103 & 0x80000000) != 0)
                    goto LABEL_337;
                  goto LABEL_186;
                }
                v114 = *((_QWORD *)__s + 4);
                v115 = "Quark O Size:%d";
              }
              else
              {
                v113 = *(_QWORD *)(v218 + 112);
                if (wapiti_scanf_fmt_1((const char *)v102, "#qrk#", (int *)&v216 + 1) != 1)
                {
                  HIDWORD(v215) = 0;
                  v123 = wapiti_ns_readline((uint64_t)__s, (const char *)v102, (_DWORD *)&v215 + 1);
                  v124 = __s;
                  v125 = *(uint64_t **)(v113 + 40);
                  goto LABEL_172;
                }
                v114 = *((_QWORD *)__s + 4);
                v115 = "Quark L Size:%d";
              }
              wapiti_info(v114, (uint64_t)v115);
            }
            else
            {
              v108 = *(_QWORD *)(v218 + 112);
              v109 = (_DWORD *)(v108 + 24);
              if (wapiti_scanf_fmt_3((const char *)v102, "#rdr#", (int *)(v108 + 24), (int *)(v108 + 20), (int *)(v108 + 8)) == 3)
              {
                *(_DWORD *)(v108 + 12) = 0;
                *(_DWORD *)(v108 + 16) = 0;
                v110 = *(unsigned int *)(v108 + 24);
                if ((_DWORD)v110)
                {
                  v111 = heap_Calloc(*((_QWORD **)__s + 1), 8, v110);
                  *(_QWORD *)(v108 + 32) = v111;
                  if (!v111)
                    goto LABEL_339;
                }
                v112 = 0;
              }
              else if (*v109)
              {
                v116 = v100;
                HIDWORD(v215) = 0;
                v117 = wapiti_ns_readline((uint64_t)__s, (const char *)v102, (_DWORD *)&v215 + 1);
                v118 = (char *)heap_Alloc(*((_QWORD *)__s + 1), (HIDWORD(v215) + 1));
                if (!v118)
                  goto LABEL_339;
                v119 = v118;
                v120 = strncpy(v118, (const char *)(v102 + v117), HIDWORD(v215));
                v120[HIDWORD(v215)] = 0;
                v103 = pat_comp((uint64_t)__s, v119, (_QWORD *)(*(_QWORD *)(v108 + 32) + 8 * v209));
                if ((v103 & 0x80000000) != 0)
                  goto LABEL_337;
                v121 = __tolower(*v119);
                if (v121 == 42)
                {
                  *(int32x2_t *)(v108 + 12) = vadd_s32(*(int32x2_t *)(v108 + 12), (int32x2_t)0x100000001);
                  v100 = v116;
                }
                else
                {
                  v100 = v116;
                  if (v121 == 98)
                  {
                    ++*(_DWORD *)(v108 + 16);
                  }
                  else if (v121 == 117)
                  {
                    ++*(_DWORD *)(v108 + 12);
                  }
                }
                v112 = v209 + 1;
              }
              else
              {
                v112 = v209;
              }
              if (v112 == *v109)
                v126 = 0;
              else
                v126 = v112;
              if (*v109)
                v112 = v126;
              v209 = v112;
            }
          }
          else if (wapiti_scanf_fmt_2((const char *)v102, "#mdl#", (int *)&v216, (int *)&__n + 1) == 2)
          {
            *(_DWORD *)(v218 + 40) = v216;
          }
          else
          {
            if (wapiti_scanf_fmt_1((const char *)v102, "#mdl#", (int *)&__n + 1) != 1)
            {
              wapiti_fatal(*((_QWORD *)__s + 4), (uint64_t)"crf riff data error, mode chunk format error");
              v10 = 2585796626;
              goto LABEL_339;
            }
            *(_DWORD *)(v218 + 40) = 0;
          }
LABEL_186:
          v107 += v221;
          *(_OWORD *)v102 = 0u;
          *(_OWORD *)(v102 + 16) = 0u;
          *(_OWORD *)(v102 + 32) = 0u;
          *(_OWORD *)(v102 + 48) = 0u;
          *(_OWORD *)(v102 + 64) = 0u;
          *(_OWORD *)(v102 + 80) = 0u;
          *(_DWORD *)(v102 + 96) = 0;
          v106 = v213;
        }
        while (v107 < v213);
      }
LABEL_187:
      heap_Free(*((_QWORD **)__s + 1), v102);
      ssftriff_reader_CloseChunk(a3);
      v99 = ssftriff_reader_OpenChunk(a3, &v212, (unsigned int *)&v213, __dst, v127, v128, v129, v130);
      if ((v99 & 0x80000000) != 0)
        goto LABEL_188;
    }
    v104 = *((_QWORD *)__s + 4);
    v105 = "ChunkID:%s, cChunk:%d, pChunk:%s";
LABEL_132:
    wapiti_info(v104, (uint64_t)v105);
    goto LABEL_187;
  }
  if (!*(_DWORD *)(a4 + 80))
  {
    v221 = 0;
    *(_QWORD *)v219 = 0;
    __s = 0;
    __n = 0;
    v218 = 0;
    v214 = 0;
    v213 = 0;
    v212 = 0;
    inited = InitRsrcFunction(a1, a2, v219);
    if ((inited & 0x80000000) == 0)
    {
      inited = rdr_new(*(uint64_t *)v219, 0, &v218);
      if ((inited & 0x80000000) == 0)
      {
        inited = mdl_new(v218, &v212);
        if ((inited & 0x80000000) == 0)
        {
          v131 = v212;
          *(_OWORD *)(v212 + 8) = opt_defaults;
          *(_OWORD *)(v131 + 24) = unk_1DEC6675C;
          while (1)
          {
            v22 = ssftriff_reader_OpenChunk(a3, &v213, (unsigned int *)&v221, &__s, v17, v18, v19, v20);
            if ((v22 & 0x80000000) != 0)
            {
LABEL_334:
              if ((v22 & 0x1FFF) == 0x14)
                v10 = 0;
              else
                v10 = v22;
              goto LABEL_351;
            }
            if (!(v213 ^ 0x41524150 | v214))
            {
              StringZ = _crf_parse_params(*(uint64_t *)v219, __s, v221, a4);
              if ((StringZ & 0x80000000) != 0)
                goto LABEL_350;
              goto LABEL_223;
            }
            if (!(v213 ^ 0x454C5552 | v214))
            {
              StringZ = wapiti_rules_load(*(uint64_t *)v219, __s, v221, (uint64_t *)(*(_QWORD *)(v212 + 112) + 56));
              if ((StringZ & 0x80000000) != 0)
                goto LABEL_350;
              goto LABEL_223;
            }
            if (!(v213 ^ 0x53525053 | v214))
              break;
            if (!(v213 ^ 0x52545051 | v214))
            {
              *(_DWORD *)(v212 + 36) = 1;
              v136 = *(_QWORD *)(*(_QWORD *)v219 + 32);
              v137 = "QP-Tree ENABLED";
              goto LABEL_222;
            }
            if (!(v213 ^ 0x45444F4D | v214))
            {
              if (v221)
                *(_DWORD *)(v212 + 40) = *(_DWORD *)__s;
              goto LABEL_223;
            }
            if (v213 ^ 0x52454452 | v214)
            {
              if (v213 ^ 0x4C4B5251 | v214)
              {
                if (!(v213 ^ 0x4C59454B | v214) || !(v213 ^ 0x4C46454C | v214))
                {
                  LODWORD(__n) = 0;
                  if (v213 == 76)
                  {
                    v149 = *(_DWORD *)__s;
                    LODWORD(__n) = *(_DWORD *)__s;
                  }
                  else
                  {
                    v149 = 0;
                    if (v213 == 75)
                    {
                      v150 = v221;
                      if (v221)
                      {
                        v149 = 0;
                        v151 = __s;
                        do
                        {
                          if (!*v151++)
                            LODWORD(__n) = ++v149;
                          --v150;
                        }
                        while (v150);
                      }
                      else
                      {
                        v149 = 0;
                      }
                    }
                  }
                  v10 = 2585796618;
                  v179 = heap_Realloc(*(uint64_t **)(*(_QWORD *)v219 + 8), *(_QWORD *)(*(_QWORD *)(v218 + 40) + 8), 8 * v149);
                  if (!v179)
                    goto LABEL_351;
                  v180 = v179;
                  v181 = __n;
                  *(_DWORD *)(*(_QWORD *)(v218 + 40) + 24) = __n;
                  v182 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v219 + 8), v181, 16);
                  if (!v182)
                    goto LABEL_344;
                  v183 = v182;
                  v184 = ssftriff_reader_DetachChunkData(a3, (uint64_t *)a4, &__s, v16, v17, v18, v19, v20);
                  if ((v184 & 0x80001FFF) == 0x8000000A)
                  {
                    v10 = v184;
LABEL_344:
                    v207 = *(_QWORD *)(v218 + 40);
LABEL_345:
                    *(_QWORD *)(v207 + 8) = v180;
                    goto LABEL_351;
                  }
                  if (v213 == 75)
                  {
                    v188 = __n;
                    if ((_DWORD)__n)
                    {
                      v189 = 0;
                      v190 = __s;
                      do
                      {
                        *(_DWORD *)v183 = v189;
                        *(_QWORD *)(v183 + 8) = v190;
                        *(_QWORD *)(v180 + 8 * v189) = v183;
                        v190 += strlen(v190) + 1;
                        ++v189;
                        v188 = __n;
                        v183 += 16;
                      }
                      while (v189 < __n);
                    }
                  }
                  else if (v213 == 76)
                  {
                    if ((_DWORD)__n)
                    {
                      v185 = 0;
                      v186 = __s + 4;
                      v187 = &__s[__n + 4];
                      do
                      {
                        *(_DWORD *)v183 = v185;
                        *(_QWORD *)(v183 + 8) = v187;
                        *(_QWORD *)(v180 + 8 * v185) = v183;
                        v187 += v186[v185++] + 1;
                        v183 += 16;
                      }
                      while (v185 < __n);
                      v188 = __n;
                    }
                    else
                    {
                      v188 = 0;
                    }
                  }
                  else
                  {
                    v188 = __n;
                  }
                  v191 = *(_QWORD *)(v218 + 40);
                  goto LABEL_302;
                }
                if (v213 ^ 0x4F4B5251 | v214)
                {
                  if (!(v213 ^ 0x4F59454B | v214) || !(v213 ^ 0x4F46454C | v214))
                  {
                    LODWORD(__n) = 0;
                    if (v213 == 76)
                    {
                      v164 = *(_DWORD *)__s;
                      LODWORD(__n) = *(_DWORD *)__s;
                    }
                    else
                    {
                      v164 = 0;
                      if (v213 == 75)
                      {
                        v165 = v221;
                        if (v221)
                        {
                          v164 = 0;
                          v166 = __s;
                          do
                          {
                            if (!*v166++)
                              LODWORD(__n) = ++v164;
                            --v165;
                          }
                          while (v165);
                        }
                        else
                        {
                          v164 = 0;
                        }
                      }
                    }
                    v10 = 2585796618;
                    v192 = heap_Realloc(*(uint64_t **)(*(_QWORD *)v219 + 8), *(_QWORD *)(*(_QWORD *)(v218 + 48) + 8), 8 * v164);
                    if (!v192)
                      goto LABEL_351;
                    v180 = v192;
                    v193 = __n;
                    *(_DWORD *)(*(_QWORD *)(v218 + 48) + 24) = __n;
                    v194 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v219 + 8), v193, 16);
                    if (!v194)
                      goto LABEL_357;
                    v195 = v194;
                    v196 = ssftriff_reader_DetachChunkData(a3, (uint64_t *)(a4 + 8), &__s, v16, v17, v18, v19, v20);
                    if ((v196 & 0x80001FFF) == 0x8000000A)
                    {
                      v10 = v196;
LABEL_357:
                      v207 = *(_QWORD *)(v218 + 48);
                      goto LABEL_345;
                    }
                    if (v213 == 75)
                    {
                      v188 = __n;
                      if ((_DWORD)__n)
                      {
                        v200 = 0;
                        v201 = __s;
                        do
                        {
                          *(_DWORD *)v195 = v200;
                          *(_QWORD *)(v195 + 8) = v201;
                          *(_QWORD *)(v180 + 8 * v200) = v195;
                          v201 += strlen(v201) + 1;
                          ++v200;
                          v188 = __n;
                          v195 += 16;
                        }
                        while (v200 < __n);
                      }
                    }
                    else if (v213 == 76)
                    {
                      if ((_DWORD)__n)
                      {
                        v197 = 0;
                        v198 = __s + 4;
                        v199 = &__s[__n + 4];
                        do
                        {
                          *(_DWORD *)v195 = v197;
                          *(_QWORD *)(v195 + 8) = v199;
                          *(_QWORD *)(v180 + 8 * v197) = v195;
                          v199 += v198[v197++] + 1;
                          v195 += 16;
                        }
                        while (v197 < __n);
                        v188 = __n;
                      }
                      else
                      {
                        v188 = 0;
                      }
                    }
                    else
                    {
                      v188 = __n;
                    }
                    v191 = *(_QWORD *)(v218 + 48);
LABEL_302:
                    *(_QWORD *)(v191 + 8) = v180;
                    *(_DWORD *)(v191 + 20) = v188;
                    goto LABEL_223;
                  }
                  if (v213 ^ 0x5753424F | v214)
                  {
                    if (!(v213 ^ 0x4657424F | v214))
                    {
                      *(_DWORD *)(a4 + 76) = 1;
                      StringZ = mdl_sync_sparse(v212);
                      if ((StringZ & 0x80000000) != 0)
                        goto LABEL_350;
                      StringZ = ssftriff_reader_DetachChunkData(a3, (uint64_t *)(a4 + 16), &__s, v16, v17, v18, v19, v20);
                      if ((StringZ & 0x80001FFF) == 0x8000000A)
                        goto LABEL_350;
                      v132 = __s;
                      v133 = *(_DWORD *)__s;
                      v134 = *(_QWORD *)(v212 + 88);
                      *(_DWORD *)(v134 + 8) = *(_DWORD *)__s;
                      *(_DWORD *)(v134 + 12) = *((_DWORD *)v132 + 1);
                      *(_DWORD *)(v134 + 16) = *((_DWORD *)v132 + 2);
                      *(_DWORD *)(v134 + 20) = *((_DWORD *)v132 + 3);
                      v135 = (v133 >> 4) + 4;
                      if (v133 < 0x10)
                        v135 = 5;
                      *(_QWORD *)(v134 + 24) = v132 + 16;
                      *(_QWORD *)(v134 + 32) = &v132[4 * v135];
                      *(_QWORD *)(v134 + 40) = &v132[4 * v135 + 4 * v133];
                    }
                  }
                  else
                  {
                    if (*(_DWORD *)(v212 + 32))
                    {
                      StringZ = mdl_sync_sparse(v212);
                      if ((StringZ & 0x80000000) != 0)
                        goto LABEL_350;
                    }
                    else
                    {
                      StringZ = mdl_sync(v212);
                      if ((StringZ & 0x80000000) != 0)
                        goto LABEL_350;
                    }
                    LODWORD(__n) = v221 >> 2;
                    if (v221 >= 4)
                    {
                      v202 = 0;
                      v203 = __s;
                      do
                      {
                        if (*(_DWORD *)(v212 + 32))
                          sparray_set(*(_QWORD *)(v212 + 88), *(_DWORD *)&v203[4 * v202], *(_DWORD *)&v203[4 * v202 + 4]);
                        else
                          *(_DWORD *)(*(_QWORD *)(v212 + 80) + 4 * *(unsigned int *)&v203[4 * v202]) = *(_DWORD *)&v203[4 * v202 + 4];
                        v202 += 2;
                      }
                      while (v202 < __n);
                    }
                  }
                }
                else
                {
                  LODWORD(__n) = v221 >> 4;
                  v168 = heap_Alloc(*(_QWORD *)(*(_QWORD *)v219 + 8), 24 * ((unint64_t)v221 >> 4));
                  if (!v168)
                  {
LABEL_342:
                    v10 = 2585796618;
                    goto LABEL_351;
                  }
                  **(_QWORD **)(v218 + 48) = v168;
                  v169 = **(_QWORD **)(v218 + 48);
                  v170 = __n;
                  LODWORD(__n) = v221 >> 2;
                  if (v221 >= 4)
                  {
                    v171 = 0;
                    v172 = v169 + 24 * v170;
                    v173 = __s;
                    v174 = v172 - 8;
                    do
                    {
                      v175 = *(_DWORD *)&v173[4 * v171];
                      if ((v175 & 0x80000000) != 0)
                        v176 = v172 + 24 * (int)v175;
                      else
                        v176 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v218 + 48) + 8) + 8 * v175) | 1;
                      *(_QWORD *)(v174 - 16) = v176;
                      v177 = *(_DWORD *)&v173[4 * v171 + 4];
                      if ((v177 & 0x80000000) != 0)
                        v178 = v172 + 24 * (int)v177;
                      else
                        v178 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v218 + 48) + 8) + 8 * v177) | 1;
                      *(_QWORD *)(v174 - 8) = v178;
                      *(_DWORD *)v174 = *(_DWORD *)&v173[4 * v171 + 8];
                      *(_BYTE *)(v174 + 4) = *(_DWORD *)&v173[4 * v171 + 12];
                      v171 += 4;
                      v174 -= 24;
                    }
                    while (v171 < __n);
                  }
                }
              }
              else
              {
                LODWORD(__n) = v221 >> 4;
                v153 = heap_Alloc(*(_QWORD *)(*(_QWORD *)v219 + 8), 24 * ((unint64_t)v221 >> 4));
                if (!v153)
                  goto LABEL_342;
                **(_QWORD **)(v218 + 40) = v153;
                v154 = **(_QWORD **)(v218 + 40);
                v155 = __n;
                LODWORD(__n) = v221 >> 2;
                if (v221 >= 4)
                {
                  v156 = 0;
                  v157 = v154 + 24 * v155;
                  v158 = __s;
                  v159 = v157 - 8;
                  do
                  {
                    v160 = *(_DWORD *)&v158[4 * v156];
                    if ((v160 & 0x80000000) != 0)
                      v161 = v157 + 24 * (int)v160;
                    else
                      v161 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v218 + 40) + 8) + 8 * v160) | 1;
                    *(_QWORD *)(v159 - 16) = v161;
                    v162 = *(_DWORD *)&v158[4 * v156 + 4];
                    if ((v162 & 0x80000000) != 0)
                      v163 = v157 + 24 * (int)v162;
                    else
                      v163 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v218 + 40) + 8) + 8 * v162) | 1;
                    *(_QWORD *)(v159 - 8) = v163;
                    *(_DWORD *)v159 = *(_DWORD *)&v158[4 * v156 + 8];
                    *(_BYTE *)(v159 + 4) = *(_DWORD *)&v158[4 * v156 + 12];
                    v156 += 4;
                    v159 -= 24;
                  }
                  while (v156 < __n);
                }
              }
            }
            else
            {
              v138 = v221;
              if (v221)
              {
                v10 = 2585796618;
                v139 = __s;
                v140 = *(_QWORD *)(v212 + 112);
                v218 = v140;
                v141 = *(unsigned int *)__s;
                *(_DWORD *)(v140 + 24) = v141;
                *(_DWORD *)(v140 + 20) = *((_DWORD *)v139 + 1);
                *(_QWORD *)(v140 + 8) = *((unsigned int *)v139 + 2);
                *(_DWORD *)(v140 + 16) = 0;
                if ((_DWORD)v141)
                {
                  v142 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v219 + 8), v141, 8);
                  *(_QWORD *)(v218 + 32) = v142;
                  if (!v142)
                    goto LABEL_351;
                  v138 = v221;
                }
                if (v138 >= 0xD)
                {
                  v143 = 0;
                  v144 = 12;
                  do
                  {
                    HIDWORD(__n) = 100;
                    StringZ = ssftriff_reader_ReadStringZ(a3, (uint64_t)__s, v138, v144, __dst, (unsigned int *)&__n + 1);
                    if ((StringZ & 0x80000000) != 0)
                      goto LABEL_350;
                    if (*(_DWORD *)(v218 + 24))
                    {
                      v145 = wapiti_ns_readline(*(uint64_t *)v219, (const char *)__dst, &__n);
                      v146 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)v219 + 8), (__n + 1));
                      if (!v146)
                        goto LABEL_351;
                      v147 = v146;
                      *v146 = 0;
                      strncat(v146, (const char *)__dst + v145, __n);
                      StringZ = pat_comp(*(uint64_t *)v219, v147, (_QWORD *)(*(_QWORD *)(v218 + 32) + 8 * v143));
                      if ((StringZ & 0x80000000) != 0)
                        goto LABEL_350;
                      v148 = __tolower(*v147);
                      switch(v148)
                      {
                        case '*':
                          *(int32x2_t *)(v218 + 12) = vadd_s32(*(int32x2_t *)(v218 + 12), (int32x2_t)0x100000001);
                          break;
                        case 'b':
                          ++*(_DWORD *)(v218 + 16);
                          break;
                        case 'u':
                          ++*(_DWORD *)(v218 + 12);
                          break;
                      }
                      ++v143;
                    }
                    v144 += HIDWORD(__n);
                    v138 = v221;
                  }
                  while (v144 < v221);
                }
              }
            }
LABEL_223:
            StringZ = ssftriff_reader_CloseChunk(a3);
            if ((StringZ & 0x80000000) != 0)
              goto LABEL_350;
          }
          *(_DWORD *)(v212 + 32) = 1;
          v136 = *(_QWORD *)(*(_QWORD *)v219 + 32);
          v137 = "sparse theta ENABLED";
LABEL_222:
          wapiti_info(v136, (uint64_t)v137);
          goto LABEL_223;
        }
      }
    }
LABEL_332:
    v10 = inited;
    if ((inited & 0x80000000) != 0)
      goto LABEL_353;
    return v10;
  }
  v221 = 0;
  *(_QWORD *)v219 = 0;
  __s = 0;
  __n = 0;
  v218 = 0;
  v214 = 0;
  v213 = 0;
  v212 = 0;
  inited = InitRsrcFunction(a1, a2, v219);
  if ((inited & 0x80000000) != 0)
    goto LABEL_332;
  inited = rdr_new_qp(*(uint64_t *)v219, 0, &v218);
  if ((inited & 0x80000000) != 0)
    goto LABEL_332;
  inited = mdl_new(v218, &v212);
  if ((inited & 0x80000000) != 0)
    goto LABEL_332;
  v21 = v212;
  *(_OWORD *)(v212 + 24) = unk_1DEC6675C;
  v10 = 2585796618;
  *(_OWORD *)(v21 + 8) = opt_defaults;
  *(_DWORD *)(v21 + 36) = 1;
  while (1)
  {
    v22 = ssftriff_reader_OpenChunk(a3, &v213, (unsigned int *)&v221, &__s, v17, v18, v19, v20);
    if ((v22 & 0x80000000) != 0)
      goto LABEL_334;
    if (!(v213 ^ 0x41524150 | v214))
    {
      StringZ = _crf_parse_params(*(uint64_t *)v219, __s, v221, a4);
      if ((StringZ & 0x80000000) != 0)
        goto LABEL_350;
      goto LABEL_107;
    }
    if (!(v213 ^ 0x454C5552 | v214))
    {
      StringZ = wapiti_rules_load(*(uint64_t *)v219, __s, v221, (uint64_t *)(*(_QWORD *)(v212 + 112) + 56));
      if ((StringZ & 0x80000000) != 0)
        goto LABEL_350;
      goto LABEL_107;
    }
    if (!(v213 ^ 0x53525053 | v214))
    {
      *(_DWORD *)(v212 + 32) = 1;
      wapiti_info(*(_QWORD *)(*(_QWORD *)v219 + 32), (uint64_t)"sparse theta ENABLED");
      goto LABEL_107;
    }
    if (!(v213 ^ 0x45444F4D | v214))
    {
      if (v221)
        *(_DWORD *)(v212 + 40) = *(_DWORD *)__s;
      goto LABEL_107;
    }
    if (!(v213 ^ 0x52454452 | v214))
      break;
    if (v213 ^ 0x4C4B5251 | v214)
    {
      if (!(v213 ^ 0x4C46454C | v214))
      {
        v56 = *((_DWORD *)__s + 1);
        LODWORD(__n) = *(_DWORD *)__s;
        v57 = __n;
        v58 = *(_QWORD *)(v218 + 40);
        *(_DWORD *)(v58 + 28) = v56;
        v59 = heap_Realloc(*(uint64_t **)(*(_QWORD *)v219 + 8), *(_QWORD *)(v58 + 8), 8 * v57);
        if (!v59)
          goto LABEL_351;
        v60 = v59;
        v61 = __n;
        *(_DWORD *)(*(_QWORD *)(v218 + 40) + 24) = __n;
        v62 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v219 + 8), v61, 16);
        if (!v62)
        {
          v205 = *(_QWORD *)(v218 + 40);
LABEL_347:
          *(_QWORD *)(v205 + 8) = v60;
          goto LABEL_351;
        }
        v63 = v62;
        StringZ = ssftriff_reader_DetachChunkData(a3, (uint64_t *)a4, &__s, v16, v17, v18, v19, v20);
        if ((StringZ & 0x80001FFF) == 0x8000000A)
        {
          v206 = *(_QWORD *)(v218 + 40);
LABEL_349:
          *(_QWORD *)(v206 + 8) = v60;
          goto LABEL_350;
        }
        if ((_DWORD)__n)
        {
          v64 = 0;
          v65 = __s + 8;
          v66 = &__s[__n + 8];
          do
          {
            *(_DWORD *)v63 = v64;
            *(_QWORD *)(v63 + 8) = v66;
            *(_QWORD *)(v60 + 8 * v64) = v63;
            v66 += v65[v64++] + 1;
            v67 = __n;
            v63 += 16;
          }
          while (v64 < __n);
        }
        else
        {
          v67 = 0;
        }
        v95 = *(_QWORD *)(v218 + 40);
        goto LABEL_106;
      }
      if (v213 ^ 0x4F4B5251 | v214)
      {
        if (!(v213 ^ 0x4F46454C | v214))
        {
          v85 = *((_DWORD *)__s + 1);
          LODWORD(__n) = *(_DWORD *)__s;
          v86 = __n;
          v87 = *(_QWORD *)(v218 + 48);
          *(_DWORD *)(v87 + 28) = v85;
          v88 = heap_Realloc(*(uint64_t **)(*(_QWORD *)v219 + 8), *(_QWORD *)(v87 + 8), 8 * v86);
          if (!v88)
            goto LABEL_351;
          v60 = v88;
          v89 = __n;
          *(_DWORD *)(*(_QWORD *)(v218 + 48) + 24) = __n;
          v90 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v219 + 8), v89, 16);
          if (!v90)
          {
            v205 = *(_QWORD *)(v218 + 48);
            goto LABEL_347;
          }
          v91 = v90;
          StringZ = ssftriff_reader_DetachChunkData(a3, (uint64_t *)(a4 + 8), &__s, v16, v17, v18, v19, v20);
          if ((StringZ & 0x80001FFF) == 0x8000000A)
          {
            v206 = *(_QWORD *)(v218 + 48);
            goto LABEL_349;
          }
          if ((_DWORD)__n)
          {
            v92 = 0;
            v93 = __s + 8;
            v94 = &__s[__n + 8];
            do
            {
              *(_DWORD *)v91 = v92;
              *(_QWORD *)(v91 + 8) = v94;
              *(_QWORD *)(v60 + 8 * v92) = v91;
              v94 += v93[v92++] + 1;
              v67 = __n;
              v91 += 16;
            }
            while (v92 < __n);
          }
          else
          {
            v67 = 0;
          }
          v95 = *(_QWORD *)(v218 + 48);
LABEL_106:
          *(_QWORD *)(v95 + 8) = v60;
          *(_DWORD *)(v95 + 20) = v67;
          goto LABEL_107;
        }
        if (v213 ^ 0x5753424F | v214)
        {
          if (!(v213 ^ 0x4657424F | v214))
          {
            *(_DWORD *)(a4 + 76) = 1;
            StringZ = mdl_sync_sparse(v212);
            if ((StringZ & 0x80000000) != 0)
              goto LABEL_350;
            StringZ = ssftriff_reader_DetachChunkData(a3, (uint64_t *)(a4 + 16), &__s, v16, v17, v18, v19, v20);
            if ((StringZ & 0x80001FFF) == 0x8000000A)
              goto LABEL_350;
            v24 = __s;
            v25 = *(_DWORD *)__s;
            v26 = *(_QWORD *)(v212 + 88);
            *(_DWORD *)(v26 + 8) = *(_DWORD *)__s;
            *(_DWORD *)(v26 + 12) = *((_DWORD *)v24 + 1);
            *(_DWORD *)(v26 + 16) = *((_DWORD *)v24 + 2);
            *(_DWORD *)(v26 + 20) = *((_DWORD *)v24 + 3);
            v27 = (v25 >> 4) + 4;
            if (v25 < 0x10)
              v27 = 5;
            *(_QWORD *)(v26 + 24) = v24 + 16;
            *(_QWORD *)(v26 + 32) = &v24[4 * v27];
            *(_QWORD *)(v26 + 40) = &v24[4 * v27 + 4 * v25];
          }
        }
        else
        {
          if (*(_DWORD *)(v212 + 32))
          {
            StringZ = mdl_sync_sparse(v212);
            if ((StringZ & 0x80000000) != 0)
              goto LABEL_350;
          }
          else
          {
            StringZ = mdl_sync(v212);
            if ((StringZ & 0x80000000) != 0)
              goto LABEL_350;
          }
          LODWORD(__n) = v221 >> 2;
          if (v221 >= 4)
          {
            v96 = 0;
            v97 = __s;
            do
            {
              if (*(_DWORD *)(v212 + 32))
                sparray_set(*(_QWORD *)(v212 + 88), *(_DWORD *)&v97[4 * v96], *(_DWORD *)&v97[4 * v96 + 4]);
              else
                *(_DWORD *)(*(_QWORD *)(v212 + 80) + 4 * *(unsigned int *)&v97[4 * v96]) = *(_DWORD *)&v97[4 * v96 + 4];
              v96 += 2;
            }
            while (v96 < __n);
          }
        }
      }
      else
      {
        v68 = *(unsigned int *)(*(_QWORD *)(v218 + 48) + 28);
        v69 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v219 + 8), v68, 16);
        if (!v69)
          goto LABEL_351;
        **(_QWORD **)(v218 + 48) = v69;
        v70 = **(_QWORD **)(v218 + 48);
        v71 = (v221 >> 2) - 2 * (_DWORD)v68;
        v72 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v219 + 8), v71, 8);
        if (!v72)
          goto LABEL_351;
        ***(_QWORD ***)(v218 + 48) = v72;
        v73 = ***(_QWORD ***)(v218 + 48);
        LODWORD(__n) = v221 >> 2;
        if (v221 >= 4)
        {
          v74 = 0;
          v75 = (_QWORD *)(v70 + 16 * v68);
          v76 = __s;
          v77 = v73 + 8 * v71;
          v78 = v75;
          do
          {
            v79 = *(_DWORD *)&v76[4 * v74];
            *((_DWORD *)v78 - 2) = v79;
            *((_DWORD *)v78 - 1) = *(_DWORD *)&v76[4 * (v74 + 1)];
            v80 = popcount(v79);
            v77 -= 8 * v80;
            *(v78 - 2) = v77;
            v78 -= 2;
            v81 = v74 + 2;
            if (v80)
            {
              for (i = 0; i != v80; *(_QWORD *)(*v78 + 8 * i++) = v84)
              {
                v83 = *(int *)&v76[4 * (v81 + i)];
                if ((v83 & 0x80000000) != 0)
                  v84 = (uint64_t)&v75[2 * v83];
                else
                  v84 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v218 + 48) + 8) + 8 * v83) | 1;
              }
            }
            v74 = v80 + v81;
          }
          while (v80 + v81 < __n);
        }
      }
    }
    else
    {
      v39 = *(unsigned int *)(*(_QWORD *)(v218 + 40) + 28);
      v40 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v219 + 8), v39, 16);
      if (!v40)
        goto LABEL_351;
      **(_QWORD **)(v218 + 40) = v40;
      v41 = **(_QWORD **)(v218 + 40);
      v42 = (v221 >> 2) - 2 * (_DWORD)v39;
      v43 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v219 + 8), v42, 8);
      if (!v43)
        goto LABEL_351;
      ***(_QWORD ***)(v218 + 40) = v43;
      v44 = ***(_QWORD ***)(v218 + 40);
      LODWORD(__n) = v221 >> 2;
      if (v221 >= 4)
      {
        v45 = 0;
        v46 = (_QWORD *)(v41 + 16 * v39);
        v47 = __s;
        v48 = v44 + 8 * v42;
        v49 = v46;
        do
        {
          v50 = *(_DWORD *)&v47[4 * v45];
          *((_DWORD *)v49 - 2) = v50;
          *((_DWORD *)v49 - 1) = *(_DWORD *)&v47[4 * (v45 + 1)];
          v51 = popcount(v50);
          v48 -= 8 * v51;
          *(v49 - 2) = v48;
          v49 -= 2;
          v52 = v45 + 2;
          if (v51)
          {
            for (j = 0; j != v51; *(_QWORD *)(*v49 + 8 * j++) = v55)
            {
              v54 = *(int *)&v47[4 * (v52 + j)];
              if ((v54 & 0x80000000) != 0)
                v55 = (uint64_t)&v46[2 * v54];
              else
                v55 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v218 + 40) + 8) + 8 * v54) | 1;
            }
          }
          v45 = v51 + v52;
        }
        while (v51 + v52 < __n);
      }
    }
LABEL_107:
    StringZ = ssftriff_reader_CloseChunk(a3);
    if ((StringZ & 0x80000000) != 0)
      goto LABEL_350;
  }
  v28 = v221;
  if (!v221)
    goto LABEL_107;
  v29 = __s;
  v30 = *(_QWORD *)(v212 + 112);
  v218 = v30;
  v31 = *(unsigned int *)__s;
  *(_DWORD *)(v30 + 24) = v31;
  *(_DWORD *)(v30 + 20) = *((_DWORD *)v29 + 1);
  *(_QWORD *)(v30 + 8) = *((unsigned int *)v29 + 2);
  *(_DWORD *)(v30 + 16) = 0;
  if ((_DWORD)v31)
  {
    v32 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v219 + 8), v31, 8);
    *(_QWORD *)(v218 + 32) = v32;
    if (!v32)
      goto LABEL_351;
    v28 = v221;
  }
  if (v28 < 0xD)
    goto LABEL_107;
  v33 = 0;
  v34 = 12;
  while (1)
  {
    HIDWORD(__n) = 100;
    StringZ = ssftriff_reader_ReadStringZ(a3, (uint64_t)__s, v28, v34, __dst, (unsigned int *)&__n + 1);
    if ((StringZ & 0x80000000) != 0)
      break;
    if (*(_DWORD *)(v218 + 24))
    {
      v35 = wapiti_ns_readline(*(uint64_t *)v219, (const char *)__dst, &__n);
      v36 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)v219 + 8), (__n + 1));
      if (!v36)
        goto LABEL_351;
      v37 = v36;
      *v36 = 0;
      strncat(v36, (const char *)__dst + v35, __n);
      StringZ = pat_comp(*(uint64_t *)v219, v37, (_QWORD *)(*(_QWORD *)(v218 + 32) + 8 * v33));
      if ((StringZ & 0x80000000) != 0)
        break;
      v38 = __tolower(*v37);
      switch(v38)
      {
        case '*':
          *(int32x2_t *)(v218 + 12) = vadd_s32(*(int32x2_t *)(v218 + 12), (int32x2_t)0x100000001);
          break;
        case 'b':
          ++*(_DWORD *)(v218 + 16);
          break;
        case 'u':
          ++*(_DWORD *)(v218 + 12);
          break;
      }
      ++v33;
    }
    v34 += HIDWORD(__n);
    v28 = v221;
    if (v34 >= v221)
      goto LABEL_107;
  }
LABEL_350:
  v10 = StringZ;
LABEL_351:
  v204 = v212;
LABEL_352:
  *(_QWORD *)(a4 + 24) = v204;
  if ((v10 & 0x80000000) != 0)
  {
LABEL_353:
    crf_Deinit(a4, v14, v15, v16, v17, v18, v19, v20);
    v9 = ssftriff_reader_CloseChunk(a3);
    if ((v9 & 0x80000000) != 0)
      return v9;
  }
  return v10;
}

uint64_t crf_Deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1)
  {
    v9 = *(uint64_t **)(a1 + 24);
    if (v9)
    {
      v10 = *v9;
      if (*(_DWORD *)(a1 + 68))
      {
        ssftriff_reader_ReleaseChunkData(*(_QWORD **)a1, a2, a3, a4, a5, a6, a7, a8);
        ssftriff_reader_ReleaseChunkData(*(_QWORD **)(a1 + 8), v11, v12, v13, v14, v15, v16, v17);
      }
      if (*(_DWORD *)(a1 + 76))
        ssftriff_reader_ReleaseChunkData(*(_QWORD **)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(a1 + 80))
        mdl_free_qp(v9, *(_DWORD *)(a1 + 76));
      else
        mdl_free(v9, *(unsigned int *)(a1 + 68), *(_DWORD *)(a1 + 76));
      *(_QWORD *)(a1 + 24) = 0;
      v18 = *(_QWORD *)(a1 + 32);
      if (v18)
      {
        heap_Free(*(_QWORD **)(v10 + 8), v18);
        *(_QWORD *)(a1 + 32) = 0;
      }
      v19 = *(_QWORD *)(a1 + 48);
      if (v19)
      {
        heap_Free(*(_QWORD **)(v10 + 8), v19);
        *(_QWORD *)(a1 + 48) = 0;
      }
      v20 = *(_QWORD *)(a1 + 56);
      if (v20)
      {
        heap_Free(*(_QWORD **)(v10 + 8), v20);
        *(_QWORD *)(a1 + 56) = 0;
      }
    }
  }
  return 0;
}

uint64_t crf_Process_Constrained(uint64_t a1, _QWORD *a2, unsigned int a3, uint64_t *a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  v7 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(v7 + 32))
    return tag_label_sparse(v7, a2, a3, a4, a5, a6, a7);
  else
    return tag_label(v7, a2, a3, a4, a5, a6, a7);
}

uint64_t crf_Process(uint64_t a1, _QWORD *a2, unsigned int a3, uint64_t *a4, _DWORD *a5)
{
  return crf_Process_Constrained(a1, a2, a3, a4, a5, 0, 0);
}

uint64_t _crf_parse_params(uint64_t a1, const void *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  const char **v9;
  size_t v10;
  char *v11;
  const char *v12;
  const char *v13;
  int v14;
  const char *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const char *v20;
  size_t v21;

  v8 = 2585796618;
  v9 = (const char **)(a4 + 48);
  v10 = a3;
  v11 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)(a4 + 48), a3);
  if (v11)
  {
    v12 = v11;
    memcpy(v11, a2, v10);
    v12[a3 - 1] = 0;
    *(_QWORD *)(a4 + 48) = v12;
    v13 = &v12[v10];
    *(_DWORD *)(a4 + 40) = 0;
    v14 = 0;
    if (a3)
    {
      v15 = v12;
      do
      {
        if (!*v15)
          *(_DWORD *)(a4 + 40) = ++v14;
        ++v15;
      }
      while (v15 < v13);
    }
    v16 = (v14 + 1) >> 1;
    *(_DWORD *)(a4 + 40) = v16;
    v17 = heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)(a4 + 32), 16 * v16);
    if (!v17)
    {
      *(_DWORD *)(a4 + 40) = 0;
      heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(a4 + 48));
LABEL_17:
      *v9 = 0;
      return v8;
    }
    v8 = 0;
    *(_QWORD *)(a4 + 32) = v17;
    v18 = *(unsigned int *)(a4 + 40);
    if ((_DWORD)v18 && a3)
    {
      v9 = (const char **)(v17 + 8);
      v19 = 1;
      while (1)
      {
        *(v9 - 1) = v12;
        v20 = &v12[strlen(v12) + 1];
        if (v20 >= v13)
          break;
        *v9 = v20;
        v9 += 2;
        v21 = strlen(v20);
        v8 = 0;
        if (v19 < v18)
        {
          v12 = &v20[v21 + 1];
          ++v19;
          if (v12 < v13)
            continue;
        }
        return v8;
      }
      v8 = 0;
      goto LABEL_17;
    }
  }
  return v8;
}

char *hlp_NLUStrAddI(char *__s, char *a2)
{
  char *v4;
  unsigned int v5;
  char *result;

  if (*__s)
    *(_WORD *)&__s[strlen(__s)] = 59;
  v4 = &__s[strlen(__s)];
  v5 = hlp_NLUStrLength(a2);
  result = strncat(v4, a2, v5);
  *v4 = 73;
  return result;
}

char *hlp_NLUStrLength(char *a1)
{
  char *result;

  result = strchr(a1, 59);
  if (result)
    LOWORD(result) = (_WORD)result - (_WORD)a1;
  else
    LOWORD(result) = strlen(a1);
  return (char *)(unsigned __int16)result;
}

char *hlp_NLUStrSearchI(char *a1, char *a2)
{
  unsigned int v4;
  unsigned int v5;
  const char *v6;
  size_t v7;
  char *result;

  v4 = hlp_NLUStrLength(a2);
  if (!a1)
    return 0;
  v5 = v4;
  v6 = a2 + 1;
  v7 = v4 - 1;
  while (v5 != hlp_NLUStrLength(a1) || strncmp(v6, a1 + 1, v7))
  {
    result = strchr(a1, 59);
    a1 = result + 1;
    if (!result)
      return result;
  }
  return (char *)1;
}

char *hlp_NLUStrNext(char *a1)
{
  char *v1;

  v1 = strchr(a1, 59);
  if (v1)
    return v1 + 1;
  else
    return 0;
}

char *hlp_NLUStrRemoveI(const char *a1, char *a2)
{
  char *result;
  int v5;
  const char *v6;
  size_t v7;
  char *v8;

  result = hlp_NLUStrLength(a2);
  if (a1)
  {
    v5 = (int)result;
    v6 = a2 + 1;
    v7 = result - 1;
    v8 = (char *)a1;
    while (v5 != hlp_NLUStrLength(v8) || strncmp(v6, v8 + 1, v7))
    {
      result = strchr(v8, 59);
      v8 = result + 1;
      if (!result)
        return result;
    }
    hlp_NLUStrStrip(v8);
    return hlp_NLUStrJoin(a1, &byte_1DEBD87CE);
  }
  return result;
}

char *hlp_NLUStrStrip(char *a1)
{
  char *v1;
  char *v2;
  const void *v3;
  size_t v4;

  v1 = a1;
  v2 = strchr(a1, 59);
  if (v2)
  {
    v3 = v2 + 1;
    v4 = strlen(v2 + 1);
    memmove(v1, v3, v4 + 1);
  }
  else
  {
    *v1 = 0;
    return 0;
  }
  return v1;
}

char *hlp_NLUStrJoin(const char *a1, const char *a2)
{
  char *v4;
  int v5;
  int v6;

  v4 = (char *)&a1[strlen(a1)];
  if (*a1)
  {
    v5 = *(unsigned __int8 *)a2;
    v6 = strcmp(v4 - 1, ";");
    if (v5)
    {
      if (v6)
        *(_WORD *)v4++ = 59;
    }
    else if (!v6)
    {
      --v4;
    }
  }
  return strcpy(v4, a2);
}

char *hlp_NLUStrKeyLen(char *a1)
{
  char *v2;
  char *result;

  v2 = strchr(a1, 59);
  result = strchr(a1, 58);
  if (!result)
  {
    if (!v2)
    {
      LOWORD(result) = strlen(a1);
      return (char *)(unsigned __int16)result;
    }
    goto LABEL_6;
  }
  if (v2 && v2 < result)
  {
LABEL_6:
    LOWORD(result) = (_WORD)v2 - (_WORD)a1;
    return (char *)(unsigned __int16)result;
  }
  LOWORD(result) = (_WORD)result - (_WORD)a1;
  return (char *)(unsigned __int16)result;
}

unsigned __int8 *hlp_NLUStrKeyValue(char *a1)
{
  char *v1;
  unsigned __int8 *v2;
  int v3;

  v1 = &a1[hlp_NLUStrKeyLen(a1)];
  v3 = *v1;
  v2 = (unsigned __int8 *)(v1 + 1);
  if (v3 == 58)
    return v2;
  else
    return 0;
}

char *hlp_NLUStrValueLen(char *a1)
{
  if (a1)
    return hlp_NLUStrKeyLen(a1);
  return a1;
}

char *hlp_NLUStrFind(char *a1, char *__s, uint64_t *a3, unsigned __int16 *a4)
{
  char *v7;
  unsigned __int16 v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  unsigned __int16 v13;

  if (a1)
  {
    v7 = a1;
    v8 = strlen(__s);
    while (hlp_NLUStrKeyLen(v7) != v8 || strncmp(__s, v7, v8))
    {
      v9 = strchr(v7, 59);
      v7 = v9 + 1;
      if (!v9)
        goto LABEL_6;
    }
    v10 = v7[v8];
    v11 = v10 == 58;
    if (v10 == 58)
      v12 = (uint64_t)&v7[v8 + 1];
    else
      v12 = 0;
    *a3 = v12;
    if (v11)
      v13 = (unsigned __int16)hlp_NLUStrKeyLen(&v7[v8 + 1]);
    else
      v13 = 0;
    *a4 = v13;
  }
  else
  {
LABEL_6:
    v7 = 0;
    *a4 = 0;
    *a3 = 0;
  }
  return v7;
}

uint64_t hlp_NLUStrExist(char *a1, char *__s)
{
  unsigned __int16 v4;
  unsigned __int16 v5;
  size_t v6;
  uint64_t result;
  char *v8;

  v4 = strlen(__s);
  if (!a1)
    return 1;
  v5 = v4;
  v6 = v4;
  while (1)
  {
    if (hlp_NLUStrKeyLen(a1) == v5)
    {
      result = strncmp(__s, a1, v6);
      if (!(_DWORD)result)
        break;
    }
    v8 = strchr(a1, 59);
    a1 = v8 + 1;
    if (!v8)
      return 1;
  }
  return result;
}

uint64_t hlp_NLUStrRemoveKeyVal(char *a1, const char *a2)
{
  char *v3;
  unsigned int v4;
  char *v5;
  const void *v6;
  size_t v7;
  char *v8;

  if (a1)
  {
    v3 = a1;
    while (1)
    {
      v4 = hlp_NLUStrKeyLen(v3);
      if (strlen(a2) != v4 || strncmp(a2, v3, v4))
        goto LABEL_8;
      v5 = strchr(v3, 59);
      if (v5)
      {
        v6 = v5 + 1;
        v7 = strlen(v5 + 1);
        memmove(v3, v6, v7);
        v3[v7] = 0;
      }
      else
      {
        *v3 = 0;
LABEL_8:
        v8 = strchr(v3, 59);
        v3 = v8 + 1;
        if (!v8)
          return 0;
      }
    }
  }
  return 0;
}

uint64_t hlp_NLUStrRemoveRangeKey(unsigned __int8 *a1, const char *a2, const char *a3)
{
  unsigned __int8 *v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  size_t v10;
  unsigned __int8 *v11;
  char *v12;
  int v13;
  unsigned int v14;
  char *v15;
  const void *v16;
  size_t v17;
  char *v18;

  if (a1)
  {
    v5 = a1;
    while (1)
    {
      while (hlp_NLUStrKeyLen((char *)v5) < 2)
        ;
      v6 = *v5 - 69;
      v7 = v6 > 0xE;
      v8 = (1 << v6) & 0x4011;
      if (v7 || v8 == 0)
        goto LABEL_20;
      if (v5[1] != 95)
        goto LABEL_20;
      v10 = strlen(a2);
      if (strncmp((const char *)v5 + 2, a2, v10))
        goto LABEL_20;
      v11 = &v5[hlp_NLUStrKeyLen((char *)v5)];
      v13 = *v11;
      v12 = (char *)(v11 + 1);
      if (v13 == 58)
      {
        if (!a3)
          goto LABEL_20;
        v14 = hlp_NLUStrLength(v12);
        if (strlen(a3) != v14 || strncmp(a3, v12, v14))
          goto LABEL_20;
      }
      else if (a3 && *a3)
      {
        goto LABEL_20;
      }
      v15 = strchr((char *)v5, 59);
      if (v15)
      {
        v16 = v15 + 1;
        v17 = strlen(v15 + 1);
        memmove(v5, v16, v17);
        v5[v17] = 0;
      }
      else
      {
        *v5 = 0;
LABEL_20:
        v18 = strchr((char *)v5, 59);
        v5 = (unsigned __int8 *)(v18 + 1);
        if (!v18)
          return 0;
      }
    }
  }
  return 0;
}

uint64_t hlp_NLUStrAppendKeyVal(char *a1, const char *a2, const char *a3)
{
  int v6;

  v6 = (unsigned __int16)strlen(a1);
  if (v6 && a1[v6 - 1] != 59)
    *(_WORD *)&a1[strlen(a1)] = 59;
  strcat(a1, a2);
  if (a3 && *a3)
  {
    *(_WORD *)&a1[strlen(a1)] = 58;
    strcat(a1, a3);
  }
  return 0;
}

char *hlp_NLUStrSet(char *a1, char *a2, char *__s)
{
  unsigned __int16 v6;
  char *v7;
  char *v8;
  size_t v9;
  char *v10;
  const char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  size_t v16;
  unsigned __int16 v18;
  char *v19;

  v19 = 0;
  v18 = 0;
  v6 = strlen(__s);
  v7 = hlp_NLUStrFind(a1, a2, (uint64_t *)&v19, &v18);
  if (v7)
  {
    v8 = v7;
    v9 = v18;
    if (v18 != v6)
    {
      v13 = (uint64_t)v19;
      if (v18 || v19)
      {
        v16 = strlen(&v19[v18]);
        memmove(&v19[v6], &v19[v18], v16 + 1);
        v10 = (char *)v13;
        v11 = __s;
        v9 = v6;
      }
      else
      {
        v14 = &v7[hlp_NLUStrKeyLen(v7)];
        v15 = strlen(v14);
        memmove(&v14[v6 + 1], v14, v15 + 1);
        *v14 = 58;
        v10 = v14 + 1;
        v11 = __s;
        v9 = v6;
      }
      goto LABEL_12;
    }
    if (v18)
    {
      v10 = v19;
      v11 = __s;
LABEL_12:
      strncpy(v10, v11, v9);
    }
  }
  else
  {
    v12 = hlp_NLUStrJoin(a1, a2);
    v8 = v12;
    if (__s && v6)
    {
      *(_WORD *)&v12[strlen(v12)] = 58;
      strcat(v8, __s);
    }
  }
  return v8;
}

char *hlp_NLUStrAppend(char *a1, char *a2, char *a3, const char *a4)
{
  char *v8;
  char *v9;
  char *v10;
  size_t v11;
  size_t v12;
  size_t v13;
  unsigned __int16 v15;
  uint64_t v16;

  v16 = 0;
  v15 = 0;
  v8 = hlp_NLUStrFind(a1, a2, &v16, &v15);
  if (!v8 || !v15)
    return hlp_NLUStrSet(a1, a2, a3);
  v9 = v8;
  v10 = (char *)(v16 + v15);
  v11 = (unsigned __int16)strlen(a4);
  v12 = (unsigned __int16)strlen(a3);
  v13 = strlen(v10);
  memmove(&v10[v11 + v12], v10, v13 + 1);
  strncpy(v10, a4, v11);
  strncpy(&v10[v11], a3, v12);
  return v9;
}

char *hlp_NLUStrOverride(char *a1, char *a2, int a3)
{
  char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char *v9;
  char v11[128];
  char v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v5 = a2;
    do
    {
      v6 = hlp_NLUStrKeyLen(v5);
      v7 = v5[v6];
      if (v7 == 58)
      {
        v8 = hlp_NLUStrKeyLen(&v5[v6 + 1]);
        __strncpy_chk();
        v12[v6] = 0;
        __strncpy_chk();
      }
      else
      {
        __strncpy_chk();
        v8 = 0;
        v12[v6] = 0;
      }
      v11[v8] = 0;
      if (v12[1] == 95)
      {
        hlp_NLUStrJoin(a1, v12);
        if (v7 == 58)
        {
          *(_WORD *)&a1[strlen(a1)] = 58;
          strcat(a1, v11);
        }
      }
      else if (!a3 || *(_DWORD *)v12 == 4476482)
      {
        hlp_NLUStrSet(a1, v12, v11);
      }
      v9 = strchr(v5, 59);
      v5 = v9 + 1;
    }
    while (v9);
  }
  return a1;
}

uint64_t hlp_dynstr_add(uint64_t a1, uint64_t a2, const char *a3, int a4)
{
  uint64_t v8;
  char *v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v19;

  v8 = 2601525248;
  v9 = *(char **)a2;
  v10 = strlen(*(const char **)a2);
  v11 = strlen(a3);
  v12 = *(unsigned __int16 *)(a2 + 8);
  if (v10 + v11 + 2 >= v12)
  {
    v13 = heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)v9, v11 + v12 + *(unsigned __int16 *)(a2 + 10));
    if (!v13)
    {
      log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"GLOBALBEADAPT", 66000, 0, v14, v15, v16, v17, v19);
      return 2601525258;
    }
    v9 = (char *)v13;
    *(_QWORD *)a2 = v13;
    *(_WORD *)(a2 + 8) += v11 + *(_WORD *)(a2 + 10);
  }
  if (a4 == 1)
  {
    strcat(v9, a3);
    return 0;
  }
  if (a4 == 2)
  {
    strcpy(v9, a3);
    return 0;
  }
  return v8;
}

uint64_t hlp_dynstr_init(uint64_t a1, uint64_t a2, unsigned int a3, __int16 a4)
{
  __int16 v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t result;
  unsigned int v15;

  v5 = a3;
  v8 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, a3);
  *(_QWORD *)a2 = v8;
  if (v8)
  {
    v13 = (_BYTE *)v8;
    result = 0;
    *(_WORD *)(a2 + 8) = v5;
    *(_WORD *)(a2 + 10) = a4;
    *v13 = 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"GLOBALBEADAPT", 66000, 0, v9, v10, v11, v12, v15);
    return 2601525258;
  }
  return result;
}

uint64_t globalbeadapt_OutputMorphemesToLingDBAsWords(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *__s, unsigned __int8 *a6, const char *a7, _DWORD *a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  const char *v26;
  unsigned __int8 *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int16 v30;
  uint64_t v31;
  unsigned __int16 v32;
  __int16 v34;
  char v35;
  unsigned __int16 v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  BOOL v43;
  const char *i;
  unsigned int v45;
  BOOL v47;
  char v48;
  __int16 v49;
  char *v50;
  uint64_t v51;
  __int16 v52;
  __int16 v53;
  unsigned int v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  char *v61[2];
  const char *v62[2];
  char *v63[2];
  int v64;
  char *__sa;
  const char *v66;
  char *v67;
  int v68;
  unsigned __int16 v69;
  int v70;
  int v71;

  v67 = 0;
  __sa = 0;
  v66 = 0;
  v19 = strlen(__s);
  *a8 = 0;
  v63[0] = 0;
  v63[1] = 0;
  v62[0] = 0;
  v62[1] = 0;
  v20 = a6 - 1;
  v61[0] = 0;
  v61[1] = 0;
  do
  {
    v22 = *++v20;
    v21 = v22;
  }
  while (v22 == 32);
  v23 = 0;
  v70 = 0;
  v71 = 0;
  v69 = 0;
  v68 = 0;
  v64 = 0;
  while (v21 == 32)
  {
    --v20;
    do
    {
      v24 = *++v20;
      v21 = v24;
    }
    while (v24 == 32);
    ++v23;
    a6 = v20;
LABEL_10:
    if (v21)
      ++v20;
    v21 = *v20;
  }
  if (v21)
    goto LABEL_10;
  v25 = v20 != a6;
  v26 = a7;
  v27 = (unsigned __int8 *)a7;
  while (1)
  {
    v28 = *(unsigned __int8 *)v26;
    if (v28 <= 0x22)
      break;
    if (v28 != 35)
    {
      if (v28 != 47)
        goto LABEL_27;
      if (v26[1] == 84)
      {
        v28 = 47;
        goto LABEL_27;
      }
    }
LABEL_19:
    LOWORD(v21) = v21 + 1;
    while (1)
    {
      if (v28 != 32 && v28 != 35)
      {
        if (v28 != 47)
          goto LABEL_26;
        if (v26[1] == 84)
          break;
      }
      v29 = *(unsigned __int8 *)++v26;
      v28 = v29;
    }
    v28 = 47;
LABEL_26:
    v27 = (unsigned __int8 *)v26;
LABEL_27:
    if (v28)
      ++v26;
  }
  if (v28 == 32)
    goto LABEL_19;
  if (*v26)
    goto LABEL_27;
  v30 = v23 + v25;
  if (v26 != (const char *)v27)
    LOWORD(v21) = v21 + 1;
  if (v30 == (unsigned __int16)v21)
  {
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[1] + 104))(a2, a3, 2, a4, (char *)&v71 + 2);
    if ((v31 & 0x80000000) != 0)
      goto LABEL_131;
    v31 = hlp_dynstr_init(*a1, (uint64_t)v63, 0x20u, 16);
    if ((v31 & 0x80000000) != 0)
      goto LABEL_131;
    v31 = hlp_dynstr_init(*a1, (uint64_t)v62, 0x20u, 16);
    if ((v31 & 0x80000000) != 0)
      goto LABEL_131;
    v31 = hlp_dynstr_init(*a1, (uint64_t)v61, 0x20u, 16);
    if ((v31 & 0x80000000) != 0)
      goto LABEL_131;
    v64 = 0;
    v32 = HIWORD(v71);
    if (HIWORD(v71))
    {
      while (1)
      {
        v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(a1[1] + 168))(a2, a3, v32, 0, 1, &v68, &v71);
        if ((v31 & 0x80000000) != 0)
          break;
        if ((v68 - 9) >= 6 && v68 != 4)
          goto LABEL_98;
        v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(a1[1] + 168))(a2, a3, HIWORD(v71), 1, 1, &v70, &v71);
        if ((v31 & 0x80000000) != 0)
          break;
        v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(a1[1] + 168))(a2, a3, HIWORD(v71), 2, 1, &v69, &v71);
        if ((v31 & 0x80000000) != 0)
          break;
        if ((v34 = v70) == 0
          || __s[(unsigned __int16)v70 - 1] == 32
          || (unsigned __int16)v70 >= 2u
          && __s[(unsigned __int16)v70 - 1] == 95
          && memchr(":;,", __s[(unsigned __int16)v70 - 2], 4uLL)
          || v68 == 11
          || (v68 - 12) <= 2)
        {
          HIWORD(v64) = v34;
          v35 = 1;
        }
        else
        {
          v35 = 0;
        }
        if ((v36 = v69, v19 <= v69)
          || (v37 = __s[v69], v37 == 32)
          || v37 == 95 && memchr(":;,", __s[v69 - 1], 4uLL)
          || v68 == 11
          || (v68 - 12) <= 2)
        {
          LOWORD(v64) = v36;
          v38 = 1;
        }
        else
        {
          v38 = 0;
        }
        v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(a1[1] + 176))(a2, a3, HIWORD(v71), 3, &v67, &v71);
        if ((v31 & 0x80000000) != 0)
          break;
        v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, int *))(a1[1] + 176))(a2, a3, HIWORD(v71), 5, &v66, &v71);
        if ((v31 & 0x80000000) != 0)
          break;
        v31 = hlp_dynstr_add(*a1, (uint64_t)v63, v66, 1);
        if ((v31 & 0x80000000) != 0)
          break;
        v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(a1[1] + 176))(a2, a3, HIWORD(v71), 14, &__sa, &v71);
        if ((v31 & 0x80000000) != 0)
          break;
        if ((_WORD)v71)
        {
          hlp_NLUStrRemoveKeyVal(__sa, "POS");
          if (!hlp_NLUStrExist(__sa, "PHR"))
            hlp_NLUStrRemoveKeyVal(__sa, "PHR");
          v31 = hlp_dynstr_add(*a1, (uint64_t)v62, __sa, 1);
          if ((v31 & 0x80000000) != 0)
            break;
          if (*__sa)
          {
            if (__sa[strlen(__sa) - 1] != 59)
            {
              v31 = hlp_dynstr_add(*a1, (uint64_t)v62, ";", 1);
              if ((v31 & 0x80000000) != 0)
                break;
            }
          }
        }
        if (*v67)
        {
          if (strstr(v67, "-*"))
          {
            v42 = strchr(&__s[(unsigned __int16)v70], 45);
            if (v42)
            {
              if (v42 < &__s[v69])
              {
                do
                {
                  *v42 = 95;
                  v42 = strchr(v42 + 1, 45);
                  if (v42)
                    v43 = v42 >= &__s[v69];
                  else
                    v43 = 1;
                }
                while (!v43);
              }
            }
          }
          if (v38)
          {
            i = a7;
            if ((v68 - 15) >= 0xFFFFFFFC)
            {
              while (1)
              {
                v45 = *(unsigned __int8 *)i;
                v47 = v45 > 0x23 || ((1 << v45) & 0x900800001) == 0;
                if (!v47 || v45 == 95)
                  break;
                ++i;
              }
            }
            else
            {
              for (i = a7; ; ++i)
              {
                v45 = *(unsigned __int8 *)i;
                if (v45 <= 0x23 && ((1 << v45) & 0x900000001) != 0)
                  break;
              }
            }
            if (v45)
              *i++ = 0;
            if (*a7 == 45)
              ++a7;
            log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"GLOBALBEADAPT", 5, 0, (uint64_t)"write joined word %d,%d POS=%s PHON=%s", v39, v40, v41, HIWORD(v64));
            if ((v35 & 1) == 0)
            {
              v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(a1[1] + 160))(a2, a3, HIWORD(v71), 0, 1, &v68, (char *)&v70 + 2);
              if ((v31 & 0x80000000) != 0)
                break;
              v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(a1[1] + 160))(a2, a3, HIWORD(v71), 1, 1, (char *)&v64 + 2, (char *)&v70 + 2);
              if ((v31 & 0x80000000) != 0)
                break;
              v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(a1[1] + 160))(a2, a3, HIWORD(v71), 2, 1, &v64, (char *)&v70 + 2);
              if ((v31 & 0x80000000) != 0)
                break;
              v49 = strlen(v63[0]);
              v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, char *))(a1[1] + 160))(a2, a3, HIWORD(v71), 5, (unsigned __int16)(v49 + 1), v63[0], (char *)&v70 + 2);
              if ((v31 & 0x80000000) != 0)
                break;
            }
            v31 = hlp_dynstr_add(*a1, (uint64_t)v61, v62[0], 1);
            if ((v31 & 0x80000000) != 0)
              break;
            v31 = hlp_dynstr_add(*a1, (uint64_t)v61, "POS:", 1);
            if ((v31 & 0x80000000) != 0)
              break;
            v50 = v63[0];
            v51 = hlp_dynstr_add(*a1, (uint64_t)v61, v63[0], 1);
            if ((v51 & 0x80000000) != 0)
            {
              v59 = v51;
              if (v50)
                goto LABEL_133;
              goto LABEL_134;
            }
            v52 = strlen(v61[0]);
            v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, char *))(a1[1] + 160))(a2, a3, HIWORD(v71), 14, (unsigned __int16)(v52 + 1), v61[0], (char *)&v70 + 2);
            if ((v31 & 0x80000000) != 0)
              break;
            v53 = strlen(a7);
            v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, const char *, char *))(a1[1] + 160))(a2, a3, HIWORD(v71), 3, (unsigned __int16)(v53 + 1), a7, (char *)&v70 + 2);
            if ((v31 & 0x80000000) != 0)
              break;
            while (1)
            {
              v54 = *(unsigned __int8 *)i;
              v55 = v54 > 0x2F;
              v56 = (1 << v54) & 0x800900000000;
              if (v55 || v56 == 0)
                break;
              ++i;
            }
            v31 = hlp_dynstr_add(*a1, (uint64_t)v63, &byte_1DEBD87CE, 2);
            if ((v31 & 0x80000000) != 0)
              break;
            v31 = hlp_dynstr_add(*a1, (uint64_t)v62, &byte_1DEBD87CE, 2);
            if ((v31 & 0x80000000) != 0)
              break;
            v31 = hlp_dynstr_add(*a1, (uint64_t)v61, &byte_1DEBD87CE, 2);
            if ((v31 & 0x80000000) != 0)
              break;
            v48 = 1;
            a7 = i;
          }
          else
          {
            v48 = 0;
          }
        }
        else
        {
LABEL_98:
          v48 = 1;
        }
        v58 = HIWORD(v71);
        v59 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(a1[1] + 120))(a2, a3, HIWORD(v71), (char *)&v71 + 2);
        if ((v59 & 0x80000000) == 0)
        {
          if ((v48 & 1) != 0
            || (v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1[1] + 192))(a2, a3, v58),
                (v59 & 0x80000000) == 0))
          {
            v32 = HIWORD(v71);
            if (HIWORD(v71))
              continue;
          }
        }
        goto LABEL_132;
      }
LABEL_131:
      v59 = v31;
    }
    else
    {
      v59 = 0;
    }
LABEL_132:
    v50 = v63[0];
    if (v63[0])
LABEL_133:
      heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v50);
LABEL_134:
    if (v62[0])
      heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v62[0]);
    if (v61[0])
      heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v61[0]);
  }
  else
  {
    *a8 = 1;
    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"GLOBALBEADAPT", 5, 0, (uint64_t)"Could not align morphemes into words, word count in L2=%d, not equal to word count in O1=%d", v16, v17, v18, v30);
    return 0;
  }
  return v59;
}

uint64_t globalbeadapt_SetFEBOOLKeyword(_QWORD *a1, uint64_t a2, _DWORD *a3, int a4)
{
  const char *v6;
  char *v7;
  _BYTE __c[11];

  memset(__c, 0, sizeof(__c));
  *a3 = a4;
  if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t, _BYTE *, _BYTE *, _BYTE *))(a1[7] + 96))(a1[5], a1[6], "fecfg", a2, &__c[3], &__c[1], __c) & 0x80000000) == 0&& *(unsigned __int16 *)&__c[1] == 1&& *(_QWORD *)&__c[3] != 0)
  {
    v6 = **(const char ***)&__c[3];
    v7 = strchr(**(char ***)&__c[3], __c[0]);
    if (v7)
    {
      *v7 = 0;
      v6 = **(const char ***)&__c[3];
    }
    if (!strcmp(v6, "1"))
      *a3 = 1;
    if (!strcmp(v6, "0"))
      *a3 = 0;
  }
  return 0;
}

uint64_t globalbeadapt_OutputToLingDB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t result;
  unsigned __int16 v12;
  char *v14;
  BOOL v15;
  const char *i;
  int v17;
  _BOOL4 v18;
  unsigned __int16 v19;
  unsigned __int16 v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v25;
  char *__s1;
  int v27;
  unsigned __int16 v28;
  int v29;
  int v30;

  v29 = 0;
  v30 = 0;
  v28 = 0;
  v27 = 0;
  __s1 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)(a1 + 8) + 104))(a2, a3, 2, a4, (char *)&v30 + 2);
  if ((result & 0x80000000) == 0)
  {
    v12 = HIWORD(v30);
    if (HIWORD(v30))
    {
      while (1)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(*(_QWORD *)(a1 + 8) + 168))(a2, a3, v12, 0, 1, &v27, &v30);
        if ((result & 0x80000000) != 0)
          break;
        if ((v27 - 9) >= 6 && v27 != 4)
          goto LABEL_26;
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a1 + 8)
                                                                                              + 176))(a2, a3, HIWORD(v30), 3, &__s1, &v30);
        if ((result & 0x80000000) != 0)
          return result;
        if (*__s1)
        {
          if (strstr(__s1, "-*"))
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a1 + 8) + 168))(a2, a3, HIWORD(v30), 1, 1, &v29, &v30);
            if ((result & 0x80000000) != 0)
              return result;
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(*(_QWORD *)(a1 + 8) + 168))(a2, a3, HIWORD(v30), 2, 1, &v28, &v30);
            if ((result & 0x80000000) != 0)
              return result;
            v14 = strchr((char *)(a5 + (unsigned __int16)v29), 45);
            if (v14 && (unint64_t)v14 < a5 + (unint64_t)v28)
            {
              do
              {
                *v14 = 95;
                v14 = strchr(v14 + 1, 45);
                if (v14)
                  v15 = (unint64_t)v14 >= a5 + (unint64_t)v28;
                else
                  v15 = 1;
              }
              while (!v15);
            }
          }
          for (i = a6; ; ++i)
          {
            v17 = *(unsigned __int8 *)i;
            if (!*i)
              break;
            if (v17 == 32 || v17 == 35)
            {
              *i++ = 0;
              break;
            }
          }
          if (*(_DWORD *)(a1 + 88))
            v18 = strcmp(a6, "_") == 0;
          else
            v18 = 0;
          if (*a6 == 45)
            ++a6;
          v19 = strlen(a6);
          if (a6[(unsigned __int16)(v19 + 1) - 1] == 45)
            v20 = v19;
          else
            v20 = v19 + 1;
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, const char *, char *))(*(_QWORD *)(a1 + 8) + 160))(a2, a3, HIWORD(v30), 3, v20, a6, (char *)&v29 + 2);
          if ((result & 0x80000000) != 0)
            return result;
          while (1)
          {
            v21 = *(unsigned __int8 *)i;
            v22 = v21 > 0x2F;
            v23 = (1 << v21) & 0x800900000000;
            if (v22 || v23 == 0)
              break;
            ++i;
          }
          a6 = i;
        }
        else
        {
LABEL_26:
          v18 = 0;
        }
        v25 = HIWORD(v30);
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 8) + 120))(a2, a3, HIWORD(v30), (char *)&v30 + 2);
        if ((result & 0x80000000) == 0)
        {
          if (!v18
            || (result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 192))(a2, a3, v25), (result & 0x80000000) == 0))
          {
            v12 = HIWORD(v30);
            if (HIWORD(v30))
              continue;
          }
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t globalbeadapt_SetupDepesInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  uint64_t v12;
  size_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t BacktransPOS;
  int v20;
  BOOL v21;
  unsigned __int16 v22;
  char v23;
  uint64_t v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL4 v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned __int16 i;
  uint64_t v51;
  uint64_t v52;
  const char **v53;
  const char *v54;
  unsigned __int16 v55;
  unsigned __int16 v56;
  uint64_t v57;
  _BOOL4 v58;
  unsigned __int8 *v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  __int16 v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int16 v92;
  __int16 PreviousUtf8Offset;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  char *v126;
  int v127;
  int v128;
  int v129;
  __int16 v130;
  char *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  unsigned __int16 v139;
  int v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  BOOL v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  const char *v169;
  unsigned __int16 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  int v175;
  unsigned int v177;
  int v178;
  int v179;
  uint64_t v180;
  int v181;
  uint64_t *v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  unsigned int v192;
  int v193;
  int v194;
  __int16 __s;
  __int16 v196;
  unsigned int v197;
  unsigned __int16 v198;
  int v199;
  int v200;
  char v201[2];
  __int16 v202;
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  char *__s1;
  char v208[2];
  char *v209;
  char *v210;
  char *p_s;
  int v212;
  int v213;
  int v214;
  uint64_t v215;
  char v216;
  __int16 v217;
  char **v218;
  unsigned __int16 v219;
  const char *v220;
  char *v221;
  int v222;
  _DWORD v223[8];
  char v224[8];
  char __b[8];
  _BYTE v226[8];
  uint64_t v227;

  v8 = a6;
  v11 = a3;
  v12 = a2;
  v227 = *MEMORY[0x1E0C80C00];
  __s1 = 0;
  v204 = 0;
  v199 = 0;
  v200 = 0;
  v197 = 0;
  v14 = *(unsigned __int16 *)(a1 + 106);
  if (*(_WORD *)(a1 + 106))
  {
    bzero(v226, v14);
    memset(__b, 32, v14);
    memset(v224, 126, v14);
    memset_pattern16(v223, &unk_1DEC660C0, 4 * v14);
  }
  v226[*(unsigned __int16 *)(a1 + 224)] = 126;
  v15 = (uint64_t *)(a1 + 96);
  v226[*(unsigned __int16 *)(a1 + 226)] = 126;
  if (*(_DWORD *)(a1 + 256) == 1)
    v226[*(unsigned __int16 *)(a1 + 228)] = 126;
  v226[*(unsigned __int16 *)(a1 + 238)] = 126;
  if (*(_DWORD *)(a1 + 248))
  {
    v16 = *(unsigned __int16 *)(a1 + 240);
    v226[v16] = 126;
    v223[v16] = 0;
  }
  v215 = 0;
  v213 = 0;
  v214 = 0;
  v212 = 0;
  v210 = 0;
  p_s = 0;
  v209 = 0;
  v205 = 0;
  v206 = 0;
  v203 = 0;
  v198 = 0;
  v196 = 0;
  com_depes_StartWritingToLayers(a1 + 96, a2, a3, a4, a5, a6, a7, a8);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t *, int *))(*(_QWORD *)(a1 + 8) + 176))(v12, v11, a4, 0, &v215, &v214);
  if ((v17 & 0x80000000) != 0)
    return v17;
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)(a1 + 8) + 104))(v12, v11, 2, a4, (char *)&v214 + 2);
  if ((v17 & 0x80000000) != 0)
    return v17;
  v186 = a5;
  v188 = 0;
  v189 = 0;
  LOWORD(v187) = 0;
  v18 = 0;
  v193 = 1;
  v194 = 0;
  v190 = 126;
  v192 = 0xFFFF;
  while (1)
  {
    if (!HIWORD(v214))
    {
      v150 = *(unsigned __int16 *)(a1 + 2 * *(unsigned __int16 *)(a1 + 224) + 208);
      if (*(_DWORD *)(a1 + 248))
        v151 = v193 == 0;
      else
        v151 = 0;
      if (v151)
      {
        if (v204)
        {
          hlp_AddTnTag(a1, (unsigned __int16)v188, v204, (uint64_t)v224);
        }
        else if ((_WORD)v194)
        {
          v175 = 0;
          do
          {
            BacktransPOS = com_depes_AddToLayerGen(v15, *(unsigned __int16 *)(a1 + 240), " ", 1, 0);
            if ((BacktransPOS & 0x80000000) != 0)
              goto LABEL_271;
          }
          while ((unsigned __int16)++v175 < (unsigned __int16)v194);
        }
      }
      if (HIDWORD(v188))
      {
        BacktransPOS = com_depes_AddToLayer(v15, *(unsigned __int16 *)(a1 + 224), "◄");
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
        BacktransPOS = com_depes_AddToLayer(v15, *(unsigned __int16 *)(a1 + 224), "/+");
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
        BacktransPOS = com_depes_FillToMaxLayerSet((uint64_t)v15, (uint64_t)v223, (uint64_t)__b, v152, v153, v154, v155, v156);
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
      }
      if ((_DWORD)v189)
      {
        BacktransPOS = com_depes_AddToLayer(v15, *(unsigned __int16 *)(a1 + 224), "↕");
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
        BacktransPOS = com_depes_AddToLayer(v15, *(unsigned __int16 *)(a1 + 224), "►");
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
        BacktransPOS = com_depes_FillToMaxLayerSet((uint64_t)v15, (uint64_t)v223, (uint64_t)__b, v157, v158, v159, v160, v161);
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
      }
      if (!*(_DWORD *)(a1 + 248)
        || v204
        || (v162 = *(unsigned __int16 *)(a1 + 2 * *(unsigned __int16 *)(a1 + 224) + 208) - v150) == 0)
      {
LABEL_254:
        v149 = hlp_ConvertOrthographyLayer(a1);
        if ((v149 & 0x80000000) == 0 && *(_WORD *)(a1 + 106))
        {
          v167 = 14;
          do
          {
            if (*(_QWORD *)(a1 + 8 * v167))
            {
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"GLOBALBEADAPT", 5, 0, (uint64_t)"%s L%d: %s", v164, v165, v166, v186);
              v168 = *(_QWORD *)(a1 + 32);
              v169 = *(const char **)(a1 + 8 * v167);
              v170 = strlen(v169);
              v171 = *(_QWORD *)(a1 + 16);
              v172 = *(_QWORD *)(a1 + 24);
              v173 = v167 - 14 >= (unint64_t)*(unsigned __int16 *)(a1 + 104)
                   ? (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, const char *, _QWORD))(v168 + 136))(v171, v172, (unsigned __int16)(v167 - 14), v169, v170): (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, const char *, _QWORD))(v168 + 120))(v171, v172, (unsigned __int16)(v167 - 14), v169, v170);
              v149 = v173;
              if ((v173 & 0x80000000) != 0)
                break;
            }
            v174 = v167 - 13;
            ++v167;
          }
          while (v174 < *(unsigned __int16 *)(a1 + 106));
        }
        goto LABEL_272;
      }
      v163 = 0;
      while (1)
      {
        BacktransPOS = com_depes_AddToLayerGen(v15, *(unsigned __int16 *)(a1 + 240), " ", 1, 0);
        if ((BacktransPOS & 0x80000000) != 0)
          break;
        if ((unsigned __int16)++v163 >= (unsigned __int16)v162)
          goto LABEL_254;
      }
LABEL_271:
      v149 = BacktransPOS;
      goto LABEL_272;
    }
    BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 168))(v12, v11);
    if ((BacktransPOS & 0x80000000) != 0)
      goto LABEL_271;
    v20 = v212;
    if (v212 == 15)
    {
      BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(*(_QWORD *)(a1 + 8) + 168))(v12, v11, HIWORD(v214), 7, 1, &v198, &v214);
      if ((BacktransPOS & 0x80000000) != 0)
        goto LABEL_271;
      v192 = v198;
      v20 = v212;
    }
    v21 = (v20 - 9) < 6 || v20 == 4;
    if (!v21)
      goto LABEL_197;
    BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 8) + 168))(v12, v11, HIWORD(v214), 1, 1, (char *)&v213 + 2, &v214);
    if ((BacktransPOS & 0x80000000) != 0)
      goto LABEL_271;
    BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a1 + 8) + 168))(v12, v11, HIWORD(v214), 2, 1, &v213, &v214);
    if ((BacktransPOS & 0x80000000) != 0)
      goto LABEL_271;
    HIDWORD(v189) = (unsigned __int16)v213;
    BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a1 + 8)
                                                                                                + 176))(v12, v11, HIWORD(v214), 5, &p_s, &v214);
    if ((BacktransPOS & 0x80000000) != 0)
      goto LABEL_271;
    if (*(_DWORD *)(a1 + 88))
    {
      BacktransPOS = com_mosynt_GetBacktransPOS(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), p_s, &__s);
      if ((BacktransPOS & 0x80000000) != 0)
        goto LABEL_271;
      p_s = (char *)&__s;
      v22 = strlen((const char *)&__s);
      BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, __int16 *, __int16 *))(*(_QWORD *)(a1 + 8) + 160))(v12, v11, HIWORD(v214), 5, v22, &__s, &v196);
      if ((BacktransPOS & 0x80000000) != 0)
        goto LABEL_271;
    }
    BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a1 + 8)
                                                                                                + 176))(v12, v11, HIWORD(v214), 6, &v210, &v214);
    if ((BacktransPOS & 0x80000000) != 0)
      goto LABEL_271;
    if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(*(_QWORD *)(a1 + 8) + 184))(v12, v11, HIWORD(v214), 10, &v199) & 0x80000000) != 0|| (unsigned __int16)v199 != 1)
    {
      v205 = &byte_1DEBD87CE;
    }
    else
    {
      BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a1 + 8)
                                                                                                  + 176))(v12, v11, HIWORD(v214), 10, &v205, &v214);
      if ((BacktransPOS & 0x80000000) != 0)
        goto LABEL_271;
    }
    strcpy(v208, "~");
    if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(*(_QWORD *)(a1 + 8) + 184))(v12, v11, HIWORD(v214), 9, &v199) & 0x80000000) == 0&& (unsigned __int16)v199 == 1)
    {
      BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a1 + 8)
                                                                                                  + 176))(v12, v11, HIWORD(v214), 9, &v209, &v214);
      if ((BacktransPOS & 0x80000000) != 0)
        goto LABEL_271;
      if (*v209)
        v208[0] = *v209;
    }
    v202 = 0;
    if (*(_DWORD *)(a1 + 88) || *(_DWORD *)(a1 + 264))
    {
      BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a1 + 8)
                                                                                                  + 176))(v12, v11, HIWORD(v214), 13, &v203, &v214);
      if ((BacktransPOS & 0x80000000) != 0)
        goto LABEL_271;
      v23 = *v203;
      if (!*v203)
        v23 = 48;
      LOBYTE(v202) = v23;
    }
    v24 = HIWORD(v214);
    v222 = 0;
    v220 = 0;
    v221 = 0;
    v219 = 0;
    v218 = 0;
    v216 = 0;
    strcpy(v201, "~");
    if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char *))(*(_QWORD *)(a1 + 8) + 184))(v12, v11, HIWORD(v214), 14, (char *)&v222 + 2) & 0x80000000) != 0|| HIWORD(v222) != 1)
    {
      goto LABEL_57;
    }
    BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, int *))(*(_QWORD *)(a1 + 8)
                                                                                                 + 176))(v12, v11, v24, 14, &v221, &v222);
    if ((BacktransPOS & 0x80000000) != 0)
      goto LABEL_271;
    if (!hlp_NLUStrFind(v221, "S_CLASS", (uint64_t *)&v220, &v219)
      && !hlp_NLUStrFind(v221, "I_CLASS", (uint64_t *)&v220, &v219)
      && !hlp_NLUStrFind(v221, "E_CLASS", (uint64_t *)&v220, &v219))
    {
      goto LABEL_57;
    }
    if (!*(_DWORD *)(a1 + 252))
    {
      v201[0] = *v220;
      goto LABEL_57;
    }
    v25 = strlen(v220);
    v26 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), (v25 + 10));
    if (!v26)
      break;
    v31 = (uint64_t)v26;
    strcpy(v26, "docclass_");
    strncat(v26, v220, v219);
    v217 = 0;
    v32 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t, char ***, __int16 *, char *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "fecfg", v31, &v218, &v217, &v216);
    if ((v32 & 0x80000000) != 0)
    {
      v149 = v32;
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v31);
      goto LABEL_272;
    }
    if (v217 == 1 && v218)
      v201[0] = **v218;
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v31);
LABEL_57:
    BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a1 + 8)
                                                                                                + 176))(v12, v11, HIWORD(v214), 3, &__s1, &v214);
    if ((BacktransPOS & 0x80000000) != 0)
      goto LABEL_271;
    v33 = __s1;
    if (!v8)
      goto LABEL_113;
    v34 = strlen(__s1);
    if (4 * v34 - 125 >= 0xFFFFFFFFFFFFFF7FLL)
      v35 = 128;
    else
      v35 = (4 * v34 + 4);
    v36 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), v18, v35);
    if (!v36)
    {
      v149 = 2601525258;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"GLOBALBEADAPT", 66000, 0, v37, v38, v39, v40, v177);
      return v149;
    }
    v33 = (char *)v36;
    v41 = __s1;
    if (strstr(__s1, "\\TQ\\"))
      *(_DWORD *)(a1 + 268) = 1;
    v42 = v190;
    if (v212 == 11)
    {
      v184 = v12;
      goto LABEL_69;
    }
    if (v212 == 13)
    {
      v184 = v12;
      v42 = 126;
LABEL_69:
      v43 = (unsigned __int16)strlen(v41);
      if (v43)
      {
        v181 = v35;
        v44 = 0;
        v45 = 0;
        v46 = 1;
        v47 = v42;
        v183 = v8;
        while (1)
        {
          v48 = v41[v44];
          if (v45)
          {
            v45 = v48 != 92;
          }
          else
          {
            if (v48 == 92)
            {
              v49 = v41[v44 + 1];
              if (v49 == 47)
              {
                v47 = 126;
                if (v46 == 1)
                  v42 = 126;
                v45 = 1;
                goto LABEL_81;
              }
              if (v49 == 84)
              {
                for (i = 1; ; ++i)
                {
                  v51 = (_DWORD)v44 + 1 + i;
                  if (!v41[v51])
                  {
                    v45 = 1;
                    goto LABEL_98;
                  }
                  if (v41[v51] == 92)
                    break;
                }
                v182 = v15;
                v41[v51] = 0;
                v52 = *(unsigned __int16 *)(a1 + 284);
                if (*(_WORD *)(a1 + 284))
                {
                  v178 = v47;
                  v179 = v46;
                  v191 = v42;
                  v180 = v11;
                  v53 = *(const char ***)(a1 + 288);
                  while (1)
                  {
                    v54 = *v53;
                    if (*v53)
                    {
                      if (strlen(*v53) >= 4 && strstr((char *)v54 + 3, &v41[v44 + 1]))
                        break;
                    }
                    ++v53;
                    if (!--v52)
                    {
                      v11 = v180;
                      v42 = v191;
                      v47 = v178;
                      v46 = v179;
                      goto LABEL_97;
                    }
                  }
                  v47 = *(unsigned __int8 *)v54;
                  v46 = v179;
                  v42 = v191;
                  if (v179 == 1)
                    v42 = *(unsigned __int8 *)v54;
                  v11 = v180;
                }
LABEL_97:
                v41[v51] = 92;
                v45 = 1;
                v15 = v182;
LABEL_98:
                v8 = v183;
                goto LABEL_81;
              }
            }
            v45 = 0;
            v46 = 0;
          }
LABEL_81:
          if (++v44 == v43)
          {
            v41 = __s1;
            LODWORD(v35) = v181;
            goto LABEL_100;
          }
        }
      }
      v47 = v42;
LABEL_100:
      v208[0] = v42;
      v42 = v47;
      v12 = v184;
    }
    v55 = strlen(v41);
    v56 = 0;
    v57 = v55;
    if (v55)
    {
      v58 = 0;
      v59 = (unsigned __int8 *)(v41 + 1);
      do
      {
        v60 = *(v59 - 1);
        if (v58)
        {
          v58 = v60 != 92;
        }
        else if (v60 != 92 || (v61 = *v59, v58 = 1, v61 != 47) && v61 != 84)
        {
          v58 = 0;
          v62 = v56++;
          v33[v62] = v60;
        }
        ++v59;
        --v57;
      }
      while (v57);
    }
    v33[v56] = 0;
    strcpy(__s1, v33);
    v63 = strlen(__s1);
    v64 = utf8_DepesToUtf8((uint64_t)__s1, v63 + 1, 0, (uint64_t)v33, v35, &v197, 0);
    if ((v64 & 0x80000000) != 0
      || (v190 = v42,
          v65 = strlen(v33),
          v64 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, int *))(*(_QWORD *)(a1 + 8) + 160))(v12, v11, HIWORD(v214), 3, (unsigned __int16)(v65 + 1), v33, &v214), (v64 & 0x80000000) != 0))
    {
      v149 = v64;
      goto LABEL_273;
    }
    __s1 = v33;
    v18 = (uint64_t)v33;
LABEL_113:
    if (*v33)
    {
      if (*(_DWORD *)(a1 + 248) && !v193)
      {
        if (v204 && HIWORD(v213) != (unsigned __int16)v200)
        {
          if (HIWORD(v213) > HIWORD(v200))
          {
            hlp_AddTnTag(a1, (unsigned __int16)v188, v204, (uint64_t)v224);
            v204 = 0;
          }
        }
        else if ((_WORD)v194)
        {
          v66 = 0;
          do
          {
            BacktransPOS = com_depes_AddToLayer(v15, *(unsigned __int16 *)(a1 + 240), " ");
            if ((BacktransPOS & 0x80000000) != 0)
              goto LABEL_271;
          }
          while ((unsigned __int16)++v66 < (unsigned __int16)v194);
        }
      }
      v67 = v12;
      v68 = v11;
      v69 = *(unsigned __int16 *)(a1 + 224);
      v70 = *(unsigned __int16 *)(a1 + 2 * v69 + 208);
      v71 = v212;
      if (v212 != 10 && HIDWORD(v188) != 0)
      {
        BacktransPOS = com_depes_AddToLayer(v15, v69, "◄");
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
        BacktransPOS = com_depes_AddToLayer(v15, *(unsigned __int16 *)(a1 + 224), "/+");
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
        BacktransPOS = com_depes_FillToMaxLayerSet((uint64_t)v15, (uint64_t)v223, (uint64_t)__b, v73, v74, v75, v76, v77);
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
        HIDWORD(v188) = 0;
        v71 = v212;
      }
      if (v71 != 11 && (_DWORD)v189)
      {
        BacktransPOS = com_depes_AddToLayer(v15, *(unsigned __int16 *)(a1 + 224), "↕");
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
        BacktransPOS = com_depes_AddToLayer(v15, *(unsigned __int16 *)(a1 + 224), "►");
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
        BacktransPOS = com_depes_FillToMaxLayerSet((uint64_t)v15, (uint64_t)v223, (uint64_t)__b, v78, v79, v80, v81, v82);
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
        LODWORD(v189) = 0;
      }
      if (!v193 && ((__int16)v192 & 0x80000000) == 0)
      {
        v83 = v192 > 1 ? " /" : " #";
        BacktransPOS = com_depes_AddToLayer(v15, *(unsigned __int16 *)(a1 + 224), v83);
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
        BacktransPOS = com_depes_FillToMaxLayerSet((uint64_t)v15, (uint64_t)v223, (uint64_t)__b, v84, v85, v86, v87, v88);
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
      }
      LOWORD(v199) = 0;
      if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(*(_QWORD *)(a1 + 8) + 184))(v67, v68, HIWORD(v214), 8, &v199) & 0x80000000) == 0&& (unsigned __int16)v199 == 1)
      {
        BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 8) + 168))(v67, v68, HIWORD(v214), 8, 1, (char *)&v199 + 2, &v214);
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
      }
      if (!v193)
      {
        v92 = HIWORD(v213);
        if (*(_BYTE *)(v215 + HIWORD(v213) - 1))
        {
          PreviousUtf8Offset = utf8_GetPreviousUtf8Offset(v215, HIWORD(v213));
          BacktransPOS = com_depes_AddToLayerN(v15, *(unsigned __int16 *)(a1 + 226), (char *)(v215 + HIWORD(v213) - (unsigned __int16)(v92 - PreviousUtf8Offset)), (unsigned __int16)(v92 - PreviousUtf8Offset));
          if ((BacktransPOS & 0x80000000) != 0)
            goto LABEL_271;
        }
        else
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"GLOBALBEADAPT", 5, 0, (uint64_t)"unexpected empty orthography when filling depes layer (frompos: %d, topos: %d", v89, v90, v91, HIWORD(v213));
          BacktransPOS = com_depes_AddToLayerGen(v15, *(unsigned __int16 *)(a1 + 224), " ", 1, 0);
          if ((BacktransPOS & 0x80000000) != 0)
            goto LABEL_271;
        }
        BacktransPOS = com_depes_FillToMaxLayerSet((uint64_t)v15, (uint64_t)v223, (uint64_t)__b, v94, v95, v96, v97, v98);
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
      }
      v99 = v212;
      if (v212 == 10 && !HIDWORD(v188))
      {
        BacktransPOS = com_depes_AddToLayer(v15, *(unsigned __int16 *)(a1 + 224), "◄");
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
        BacktransPOS = com_depes_AddToLayer(v15, *(unsigned __int16 *)(a1 + 224), "/+");
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
        BacktransPOS = com_depes_FillToMaxLayerSet((uint64_t)v15, (uint64_t)v223, (uint64_t)__b, v100, v101, v102, v103, v104);
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
        HIDWORD(v188) = 1;
        v99 = v212;
      }
      if (v99 == 13)
      {
        BacktransPOS = com_depes_AddToLayer(v15, *(unsigned __int16 *)(a1 + 224), "►");
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
        BacktransPOS = com_depes_AddToLayer(v15, *(unsigned __int16 *)(a1 + 224), "↕");
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
        BacktransPOS = com_depes_FillToMaxLayerSet((uint64_t)v15, (uint64_t)v223, (uint64_t)__b, v105, v106, v107, v108, v109);
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
        LODWORD(v189) = 1;
      }
      v110 = *(unsigned __int16 *)(a1 + 224);
      v187 = *(unsigned __int16 *)(a1 + 2 * v110 + 208);
      v111 = __s1;
      v112 = strstr(__s1, "▲");
      v206 = v112;
      if (v112)
      {
        *v112 = 0;
        LODWORD(v110) = *(unsigned __int16 *)(a1 + 224);
        v111 = __s1;
      }
      BacktransPOS = com_depes_AddToLayer(v15, v110, v111);
      if ((BacktransPOS & 0x80000000) != 0)
        goto LABEL_271;
      BacktransPOS = com_depes_AddToLayerN(v15, *(unsigned __int16 *)(a1 + 226), (char *)(v215 + HIWORD(v213)), (unsigned __int16)v213 - HIWORD(v213));
      if ((BacktransPOS & 0x80000000) != 0)
        goto LABEL_271;
      v113 = *(unsigned __int16 *)(a1 + 228);
      if (*(_DWORD *)(a1 + 256) == 1)
      {
        BacktransPOS = com_depes_AddToLayer(v15, v113, p_s);
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
      }
      else
      {
        BacktransPOS = com_depes_AddToLayerN(v15, v113, p_s, 1);
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
      }
      BacktransPOS = com_depes_AddToLayerN(v15, *(unsigned __int16 *)(a1 + 230), v210, 1);
      if ((BacktransPOS & 0x80000000) != 0)
        goto LABEL_271;
      BacktransPOS = com_depes_AddToLayerGen(v15, *(unsigned __int16 *)(a1 + 232), v208, 1, v208[0] != 126);
      if ((BacktransPOS & 0x80000000) != 0)
        goto LABEL_271;
      BacktransPOS = com_depes_AddToLayerN(v15, *(unsigned __int16 *)(a1 + 234), (char *)&v202, 1);
      if ((BacktransPOS & 0x80000000) != 0)
        goto LABEL_271;
      BacktransPOS = com_depes_AddToLayerGen(v15, *(unsigned __int16 *)(a1 + 236), v201, 1, 0);
      if ((BacktransPOS & 0x80000000) != 0)
        goto LABEL_271;
      BacktransPOS = com_depes_AddToLayer(v15, *(unsigned __int16 *)(a1 + 238), v205);
      if ((BacktransPOS & 0x80000000) != 0)
        goto LABEL_271;
      BacktransPOS = com_depes_FillToMaxLayerSet((uint64_t)v15, (uint64_t)v223, (uint64_t)v226, v114, v115, v116, v117, v118);
      if ((BacktransPOS & 0x80000000) != 0)
        goto LABEL_271;
      v119 = v206;
      if (v206)
      {
        v206[2] = -78;
        *(_WORD *)v119 = -26910;
        BacktransPOS = com_depes_AddToLayer(v15, *(unsigned __int16 *)(a1 + 224), v206);
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
        BacktransPOS = com_depes_FillToMaxLayerSet((uint64_t)v15, (uint64_t)v223, (uint64_t)v226, v120, v121, v122, v123, v124);
        if ((BacktransPOS & 0x80000000) != 0)
          goto LABEL_271;
      }
      v194 = *(unsigned __int16 *)(a1 + 2 * *(unsigned __int16 *)(a1 + 224) + 208) - v187;
      if (!*(_DWORD *)(a1 + 248))
      {
        v193 = 0;
LABEL_196:
        v192 = 0xFFFF;
        v11 = v68;
        v12 = v67;
        goto LABEL_197;
      }
      v125 = v187 - v70;
      v126 = v204;
      if (v204 && HIWORD(v213) != (unsigned __int16)v200)
      {
        v193 = 0;
        LODWORD(v188) = v125 + v188 + v194;
        goto LABEL_196;
      }
      v21 = v187 == v70;
      v11 = v68;
      v12 = v67;
      if (!v21)
      {
        v127 = 0;
        while (1)
        {
          BacktransPOS = com_depes_AddToLayerGen(v15, *(unsigned __int16 *)(a1 + 240), " ", 1, 0);
          if ((BacktransPOS & 0x80000000) != 0)
            goto LABEL_271;
          if ((unsigned __int16)++v127 >= (unsigned __int16)v125)
          {
            v126 = v204;
            break;
          }
        }
      }
      v21 = v126 == 0;
      v128 = v188;
      if (!v21)
        v128 = v194;
      LODWORD(v188) = v128;
      v192 = 0xFFFF;
      v193 = 0;
    }
LABEL_197:
    v129 = v212;
    if (v212 == 7 && !(_DWORD)v189)
    {
      BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 8) + 168))(v12, v11, HIWORD(v214), 1, 1, (char *)&v213 + 2, &v214);
      if ((BacktransPOS & 0x80000000) != 0)
        goto LABEL_271;
      BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a1 + 8)
                                                                                                  + 176))(v12, v11, HIWORD(v214), 4, &v206, &v214);
      if ((BacktransPOS & 0x80000000) != 0)
        goto LABEL_271;
      v130 = (__int16)__s1;
      if (__s1)
      {
        v131 = strchr(__s1, 42);
        if (HIDWORD(v189) - 1 > HIWORD(v213))
        {
          v132 = (unint64_t)v131;
          if (v131)
          {
            if (!strchr(v131 + 1, 42))
            {
              v138 = (unsigned __int16)(v130 - v132 - v187 + *(_WORD *)(a1 + 2 * *(unsigned __int16 *)(a1 + 224) + 208));
              v139 = Utf8_LengthInUtf8chars(v132, v138);
              BacktransPOS = com_depes_InsertBeforeEnd(v15, *(unsigned __int16 *)(a1 + 224), "▲", v138);
              if ((BacktransPOS & 0x80000000) == 0)
              {
                BacktransPOS = com_depes_InsertBeforeEnd(v15, *(unsigned __int16 *)(a1 + 224), v206, v138);
                if ((BacktransPOS & 0x80000000) == 0)
                {
                  BacktransPOS = com_depes_InsertBeforeEnd(v15, *(unsigned __int16 *)(a1 + 224), "▼", v138);
                  if ((BacktransPOS & 0x80000000) == 0)
                  {
                    v185 = v12;
                    v140 = 0;
                    v141 = v139;
                    LOWORD(v142) = *(_WORD *)(a1 + 238);
                    do
                    {
                      v143 = *(unsigned __int16 *)(a1 + 228);
                      if (v143 < (unsigned __int16)v142)
                      {
                        do
                        {
                          BacktransPOS = com_depes_InsertBeforeEnd(v15, (unsigned __int16)v143, " ", v141);
                          if ((BacktransPOS & 0x80000000) != 0)
                            goto LABEL_271;
                          LOWORD(v143) = v143 + 1;
                          v142 = *(unsigned __int16 *)(a1 + 238);
                        }
                        while (v142 > (unsigned __int16)v143);
                      }
                      ++v140;
                    }
                    while ((unsigned __int16)strlen(v206) + 2 > (unsigned __int16)v140);
                    BacktransPOS = com_depes_FillToMaxLayerSet((uint64_t)v15, (uint64_t)v223, (uint64_t)__b, v144, v145, v146, v147, v148);
                    v12 = v185;
                    if ((BacktransPOS & 0x80000000) == 0)
                      goto LABEL_209;
                  }
                }
              }
              goto LABEL_271;
            }
          }
        }
      }
      BacktransPOS = com_depes_AddToLayer(v15, *(unsigned __int16 *)(a1 + 224), "▲");
      if ((BacktransPOS & 0x80000000) != 0)
        goto LABEL_271;
      BacktransPOS = com_depes_AddToLayer(v15, *(unsigned __int16 *)(a1 + 224), v206);
      if ((BacktransPOS & 0x80000000) != 0)
        goto LABEL_271;
      BacktransPOS = com_depes_AddToLayer(v15, *(unsigned __int16 *)(a1 + 224), "▼");
      if ((BacktransPOS & 0x80000000) != 0)
        goto LABEL_271;
      BacktransPOS = com_depes_FillToMaxLayerSet((uint64_t)v15, (uint64_t)v223, (uint64_t)__b, v133, v134, v135, v136, v137);
      if ((BacktransPOS & 0x80000000) != 0)
        goto LABEL_271;
LABEL_209:
      if (v204)
        LODWORD(v188) = v188 + strlen(v206);
      v194 += strlen(v206);
      v129 = v212;
    }
    if (v129 != 6)
      goto LABEL_279;
    BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a1 + 8) + 168))(v12, v11, HIWORD(v214), 1, 1, &v200, &v214);
    if ((BacktransPOS & 0x80000000) == 0)
    {
      if (*(_DWORD *)(a1 + 248) && v204 && (unsigned __int16)v200 > HIWORD(v200))
      {
        hlp_AddTnTag(a1, (unsigned __int16)v188, v204, (uint64_t)v224);
        v194 = 0;
        v204 = 0;
      }
      BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a1 + 8)
                                                                                                  + 176))(v12, v11, HIWORD(v214), 4, &v204, &v214);
      if ((BacktransPOS & 0x80000000) == 0)
      {
        BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 8) + 168))(v12, v11, HIWORD(v214), 2, 1, (char *)&v200 + 2, &v214);
        LODWORD(v188) = v194;
        if ((BacktransPOS & 0x80000000) == 0)
        {
LABEL_279:
          BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 8) + 120))(v12, v11, HIWORD(v214), (char *)&v214 + 2);
          if ((BacktransPOS & 0x80000000) == 0)
            continue;
        }
      }
    }
    goto LABEL_271;
  }
  v149 = 2601525258;
  log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"GLOBALBEADAPT", 66000, 0, v27, v28, v29, v30, v177);
LABEL_272:
  v33 = (char *)v18;
  if (v18)
LABEL_273:
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v33);
  return v149;
}

uint64_t hlp_AddTnTag(uint64_t a1, unsigned int a2, char *__s, uint64_t a4)
{
  size_t v8;
  uint64_t result;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = 2 * strlen(__s) - 2;
  result = com_depes_AddToLayer((uint64_t *)(a1 + 96), *(unsigned __int16 *)(a1 + 240), "X");
  if (v8 >= a2)
  {
    if ((result & 0x80000000) == 0)
    {
      v13 = strlen(__s);
      result = com_depes_AddToLayerN((uint64_t *)(a1 + 96), *(unsigned __int16 *)(a1 + 240), __s + 1, v13 - 2);
      if ((result & 0x80000000) == 0)
      {
        result = com_depes_AddToLayer((uint64_t *)(a1 + 96), *(unsigned __int16 *)(a1 + 240), "Y");
        if ((result & 0x80000000) == 0)
        {
          v14 = strlen(__s);
          result = com_depes_AddToLayerN((uint64_t *)(a1 + 96), *(unsigned __int16 *)(a1 + 240), __s + 1, v14 - 2);
          if ((result & 0x80000000) == 0)
            return com_depes_FillToMaxAllLayers(a1 + 96, a4, v15, v16, v17, v18, v19, v20);
        }
      }
    }
  }
  else if ((result & 0x80000000) == 0)
  {
    v10 = strlen(__s);
    result = com_depes_AddToLayerN((uint64_t *)(a1 + 96), *(unsigned __int16 *)(a1 + 240), __s + 1, v10 - 2);
    if ((result & 0x80000000) == 0)
    {
      v11 = 2 * strlen(__s) - 2;
      if ((v11 & 0xFFFEu) >= a2)
      {
LABEL_7:
        result = com_depes_AddToLayer((uint64_t *)(a1 + 96), *(unsigned __int16 *)(a1 + 240), "Y");
        if ((result & 0x80000000) == 0)
        {
          v12 = strlen(__s) - 2;
          return com_depes_AddToLayerN((uint64_t *)(a1 + 96), *(unsigned __int16 *)(a1 + 240), __s + 1, v12);
        }
      }
      else
      {
        while (1)
        {
          result = com_depes_AddToLayerGen((uint64_t *)(a1 + 96), *(unsigned __int16 *)(a1 + 240), "~", 1, 0);
          if ((result & 0x80000000) != 0)
            break;
          if (a2 <= (unsigned __int16)++v11)
            goto LABEL_7;
        }
      }
    }
  }
  return result;
}

uint64_t hlp_ConvertOrthographyLayer(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;

  v2 = *(unsigned __int16 *)(a1 + 2 * *(unsigned __int16 *)(a1 + 226) + 176);
  if (v2 >= 0x3FFF)
    v3 = -1;
  else
    v3 = 4 * v2;
  v4 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), v3);
  if (v4)
  {
    v9 = v4;
    strcpy(v4, *(const char **)(a1 + 8 * *(unsigned __int16 *)(a1 + 226) + 112));
    v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(a1 + 56) + 104))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "normal", v9, v2);
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8);
    if ((v10 & 0x80000000) != 0)
    {
      heap_Free(v11, (uint64_t)v9);
    }
    else
    {
      v12 = a1 + 96;
      heap_Free(v11, *(_QWORD *)(a1 + 112 + 8 * *(unsigned __int16 *)(a1 + 226)));
      v13 = *(unsigned __int16 *)(a1 + 226);
      *(_QWORD *)(a1 + 112 + 8 * v13) = v9;
      *(_WORD *)(v12 + 2 * v13 + 80) = v3;
      *(_WORD *)(v12 + 2 * *(unsigned __int16 *)(a1 + 226) + 96) = strlen(v9);
    }
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"GLOBALBEADAPT", 66000, 0, v5, v6, v7, v8, v15);
    return 2601525258;
  }
  return v10;
}

uint64_t globalbeadapt_DoPostprocessing(_QWORD *a1, const char *a2, char **a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  int v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  unint64_t v15;
  unsigned __int16 v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned __int16 v45;
  __int16 v46;
  uint64_t v47;
  unsigned __int16 v48;
  BOOL v49;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  char *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t inserted;
  uint64_t v67;
  int v68;
  char *v69;
  int v70;
  uint64_t v71;
  unsigned __int16 v72;
  unsigned int v73;
  __int16 v74;
  unsigned __int16 v75;
  __int16 v76;
  unsigned __int16 v77;
  unsigned __int16 v78;
  unsigned __int16 v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unsigned int v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unsigned __int16 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  char **v102;
  int v103;
  char *v104;
  char *v105;
  int v106;
  uint64_t v107;
  int v108;
  unsigned __int16 v109;
  unsigned __int16 v110;
  char *__s;
  unsigned int v112;
  unsigned __int16 v113;
  char *v114;
  unsigned int v115;
  __int128 v116;
  char __s2[16];
  int v118;
  char v119;

  v7 = (uint64_t)a1;
  v114 = 0;
  v113 = 0;
  v112 = 0;
  __s = 0;
  v8 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char **, unsigned __int16 *))(a1[4] + 128))(a1[2], a1[3], 0, &v114, &v113);
  if ((v8 & 0x80000000) != 0)
    goto LABEL_101;
  v114[v113] = 0;
  v9 = v113;
  if (*a2 == 63 && !v113)
    goto LABEL_101;
  if (a4)
  {
    v8 = utf8_Utf8ToDepes((uint64_t)v114, v113, 0, (uint64_t)v114, v113, &v112, 0);
    v9 = v112;
    v113 = v112;
  }
  if ((_WORD)v9)
  {
    v10 = 0;
    do
    {
      v11 = (unsigned __int16)v10;
      v12 = v114[(unsigned __int16)v10];
      if (v12 == 126)
      {
        if ((unsigned __int16)v10 < (unsigned __int16)v9)
        {
          do
          {
            v114[v11] = v114[v11 + 1];
            v9 = v113;
            ++v11;
          }
          while (v11 < v113);
        }
        v113 = --v9;
        --v10;
      }
      else if (v12 == 30)
      {
        if ((unsigned __int16)v10 >= (unsigned __int16)v9)
        {
          v14 = 1;
        }
        else
        {
          v13 = v9 - v10 + 1;
          v14 = 1;
          while (v114[v11] != 31)
          {
            ++v11;
            ++v14;
            if ((unsigned __int16)v9 == v11)
            {
              v10 = v9;
              v14 = v13;
              goto LABEL_20;
            }
          }
          v10 = v11;
        }
LABEL_20:
        if ((unsigned __int16)(v10 - v14 + 1) < (unsigned __int16)v9)
        {
          v15 = (unsigned __int16)(v10 - v14 + 1);
          do
          {
            v114[v15] = v114[v15 + v14];
            ++v15;
            v9 = v113;
          }
          while (v15 < v113);
        }
        v9 -= v14;
        v113 = v9;
        v10 -= v14;
      }
      ++v10;
    }
    while ((unsigned __int16)v10 < (unsigned __int16)v9);
  }
  else
  {
    LOWORD(v9) = 0;
  }
  v114[(unsigned __int16)v9] = 0;
  v16 = v113;
  if (*(_DWORD *)(v7 + 260) && v113)
  {
    v17 = 0;
    do
    {
      if (v114[v17] == 173)
      {
        v114[v17] = 126;
        v16 = v113;
      }
      ++v17;
    }
    while (v17 < v16);
  }
  v18 = 0;
  if (!a4 || *(_DWORD *)(v7 + 280) != 1)
    goto LABEL_102;
  if ((v19 = v114, a2[strlen(a2) - 1] != 63)
    && !strstr(*(char **)(v7 + 8 * *(unsigned __int16 *)(v7 + 224) + 112), "*?")
    && !*(_DWORD *)(v7 + 268)
    || strstr(v19, "\\TQ\\"))
  {
LABEL_101:
    v18 = 0;
    goto LABEL_102;
  }
  if (*(_DWORD *)(v7 + 272) == 1)
  {
    if (*(_DWORD *)(v7 + 276) == 1)
      v20 = 23;
    else
      v20 = 0;
    v103 = v20;
  }
  else
  {
    v103 = 0;
  }
  v21 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v7 + 8), 10, 16);
  if (!v21)
  {
LABEL_100:
    v8 = 2601525258;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)v7 + 32), (uint64_t)"GLOBALBEADAPT", 66000, 0, v22, v23, v24, v25, v101);
    goto LABEL_101;
  }
  v26 = v21;
  __s2[4] = 0;
  *(_DWORD *)__s2 = 0;
  if (v16)
    v27 = v16 - 1;
  else
    v27 = 0;
  if (v16 >= 2u)
  {
    while (v19[v27] == 32)
    {
      if (!--v27)
        goto LABEL_89;
    }
  }
  if (!v27)
    goto LABEL_89;
  v104 = (char *)v7;
  v105 = v19;
  v102 = a3;
  v28 = 0;
  v108 = 0;
  v110 = 0;
  v29 = v27;
  v30 = (uint64_t)&v19[v27 - 5];
  v31 = 10;
  do
  {
    v32 = v31;
    if (v29 >= 5 && !strncmp(&v19[(v29 - 1)], "A\\", 2uLL))
    {
      v44 = 0;
      while (1)
      {
        if (v29 + v44 == 5)
          goto LABEL_54;
        if (!strncmp((const char *)(v30 + v44), "\\/T", 3uLL))
          break;
        if (--v44 == -4)
          goto LABEL_54;
      }
      v37 = v28;
      __s2[4] = 0;
      *(_DWORD *)__s2 = 0;
      __strncat_chk();
      v106 = 0;
      v36 = 0;
      v35 = 4;
      v110 = 1 - v44;
      goto LABEL_86;
    }
LABEL_54:
    if (v29 >= (unsigned __int16)(v110 + 3)
      && !strncmp(&v19[(int)(v29 - (unsigned __int16)(v110 + 3))], "\\T", 2uLL)
      && !strncmp(&v19[(int)(v29 - (unsigned __int16)(v110 + 1))], __s2, v110)
      && !strncmp(&v19[(int)v29 - 1], "A\\", 2uLL))
    {
      v37 = v28;
      v36 = 0;
      v35 = 3;
      v106 = 1;
LABEL_86:
      LODWORD(v31) = v32;
      goto LABEL_63;
    }
    v33 = v19[v29];
    v31 = v32;
    if (v33 == 32)
      goto LABEL_62;
    if (v33 == 45)
    {
      v106 = 0;
      v34 = v28;
      v35 = 0;
      v36 = 0;
      v37 = (v34 + 1);
    }
    else
    {
      if (v103 == v33)
      {
LABEL_62:
        v106 = 0;
        v36 = 0;
        v37 = (v28 + 1);
        v35 = 1;
        goto LABEL_63;
      }
      if (v33 != 35 && (v33 != 47 || v19[(v29 - 1)] == 92))
      {
        v43 = 0;
        goto LABEL_70;
      }
      v37 = v28;
      v106 = 0;
      v36 = 1;
      v35 = 2;
    }
LABEL_63:
    if ((unsigned __int16)v108 >= (unsigned __int16)v31)
    {
      v7 = (uint64_t)v104;
      v39 = heap_Realloc(*(uint64_t **)(*(_QWORD *)v104 + 8), v26, 32 * (v31 & 0x7FFF));
      if (!v39)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)v104 + 8), v26);
        a3 = v102;
        goto LABEL_100;
      }
      v38 = v108;
      v32 = (2 * v31);
      v26 = v39;
    }
    else
    {
      v38 = v108;
    }
    v40 = v26;
    v41 = v38;
    v42 = v26 + 16 * (unsigned __int16)v38;
    *(_DWORD *)v42 = v35;
    *(_BYTE *)(v42 + 8) = 0;
    *(_DWORD *)(v42 + 4) = 0;
    __strncat_chk();
    *(_WORD *)(v42 + 10) = v110;
    *(_WORD *)(v42 + 12) = v29;
    v108 = v41 + 1;
    if (v106)
    {
      v110 = 0;
      __s2[4] = 0;
      *(_DWORD *)__s2 = 0;
    }
    v26 = v40;
    v19 = v105;
    v28 = v37;
    v31 = v32;
    v43 = v36;
LABEL_70:
    if (!(_WORD)--v29)
      break;
    if ((unsigned __int16)v28 > 2u)
      break;
    --v30;
  }
  while (!v43);
  v45 = v28;
  v46 = v108;
  if (v27 <= (unsigned __int16)v29 || (_WORD)v108)
  {
    a3 = v102;
    v7 = (uint64_t)v104;
    if ((_WORD)v108)
      goto LABEL_94;
LABEL_89:
    v8 = 0;
    v18 = 0;
    goto LABEL_188;
  }
  *(_QWORD *)v26 = 1;
  *(_BYTE *)(v26 + 8) = 0;
  *(_WORD *)(v26 + 10) = 0;
  *(_WORD *)(v26 + 12) = v29;
  v46 = 1;
  a3 = v102;
  v7 = (uint64_t)v104;
LABEL_94:
  v47 = v26;
  v48 = v46 - 1;
  v109 = v46;
  if (!(_WORD)v29 && v45 <= 2u && !v43)
  {
    v51 = 0;
    if (*(_DWORD *)(v47 + 16 * (unsigned __int16)(v46 - 1)) != 3)
      *(_WORD *)(v47 + 16 * (unsigned __int16)(v46 - 1) + 12) = 0;
    goto LABEL_134;
  }
  if (v46 == 1)
  {
    v48 = 0;
    v49 = 1;
  }
  else
  {
    while (1)
    {
      v49 = *(_DWORD *)(v47 + 16 * v48) == 2;
      if (*(_DWORD *)(v47 + 16 * v48) != 2)
        break;
      if (!--v48)
      {
        v48 = 0;
        break;
      }
    }
  }
  v52 = v48;
  v53 = *(_DWORD *)(v47 + 16 * v48);
  if (!v53)
  {
LABEL_116:
    v54 = v47 + 16 * v52;
    v51 = *(unsigned __int16 *)(v54 + 12) + 1;
    goto LABEL_117;
  }
  if (v53 != 1)
  {
    v51 = *(unsigned __int16 *)(v47 + 16 * v48 + 12);
    goto LABEL_134;
  }
  if (v49)
  {
    v48 = 0;
    goto LABEL_116;
  }
  v55 = v48 - 1;
  v56 = *(_DWORD *)(v47 + 16 * v55);
  if (v56 != 1)
  {
    if (v56 == 3)
    {
      LODWORD(v57) = *(unsigned __int16 *)(v47 + 16 * v48 + 12);
      if (*(unsigned __int16 *)(v47 + 16 * v55 + 12) - (_DWORD)v57 == *(unsigned __int16 *)(v47 + 16 * v55 + 10) + 4)
      {
        v51 = *(unsigned __int16 *)(v47 + 16 * (unsigned __int16)v55 + 12)
            - *(unsigned __int16 *)(v47 + 16 * (unsigned __int16)v55 + 10)
            - 3;
        goto LABEL_133;
      }
    }
    else if (v56 == 4)
    {
      v57 = *(unsigned __int16 *)(v47 + 16 * v48 + 12);
      if (*(unsigned __int16 *)(v47 + 16 * v55 + 12) - v57 == strlen((const char *)(v47 + 16 * v55 + 4)) + 5)
      {
        v51 = *(unsigned __int16 *)(v47 + 16 * (unsigned __int16)v55 + 12)
            - *(unsigned __int16 *)(v47 + 16 * (unsigned __int16)v55 + 10)
            - 4;
LABEL_133:
        --v48;
        goto LABEL_134;
      }
    }
    else
    {
      LODWORD(v57) = *(unsigned __int16 *)(v47 + 16 * v48 + 12);
    }
    v54 = v47 + 16 * v48;
    v51 = v57 + 1;
LABEL_117:
    *(_WORD *)(v54 + 12) = v51;
    goto LABEL_134;
  }
  if (v48)
  {
    while (*(_DWORD *)(v47 + 16 * (v48 - 1)) == 1
         && *(unsigned __int16 *)(v47 + 16 * (v48 - 1) + 12)
          - *(unsigned __int16 *)(v47 + 16 * v48 + 12) == 1)
    {
      if (!--v48)
        goto LABEL_129;
    }
  }
  else
  {
LABEL_129:
    v48 = 0;
  }
  v58 = v47 + 16 * v48;
  v59 = *(unsigned __int16 *)(v58 + 12);
  v51 = v59 + 1;
  *(_WORD *)(v58 + 12) = v59 + 1;
LABEL_134:
  v60 = v114;
  v61 = v113;
  v115 = v113;
  if (!v113)
    goto LABEL_179;
  __s = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)v7 + 8), v113, 1);
  if (__s)
  {
    v62 = ~v48 | 0xFFFF0000;
    v63 = v62 + v109;
    if ((int)(v62 + v109) >= 0 && v109 > (unsigned __int16)(v62 + v109))
    {
      v101 = v51;
      v64 = 0;
      v107 = 16 * (v62 + v109);
      v65 = v47 - 16 * v63 + 16 * v109;
      while (1)
      {
        v116 = 0uLL;
        *(_OWORD *)__s2 = *(_OWORD *)(v65 + v64 - 16);
        if (!v64)
          break;
        if (*(_DWORD *)__s2 == 4)
        {
          inserted = hlp_insert_question_Tag(v7, (const char **)&__s, &v115, 3, &__s2[4]);
          if ((inserted & 0x80000000) != 0)
            goto LABEL_192;
          if (v63 + 1 >= (unint64_t)v109)
          {
            if ((int)(v61 - 1) > *(unsigned __int16 *)&__s2[12])
            {
              v119 = 0;
              v118 = 0;
              v69 = (char *)&v118;
              v67 = v7;
              v68 = 0;
              goto LABEL_162;
            }
          }
          else
          {
            v116 = *(_OWORD *)(v65 + v64 - 32);
            if (v116 <= 1 && !BYTE4(v116))
            {
              v67 = v7;
              v68 = 0;
              v69 = (char *)&v116 + 4;
              goto LABEL_162;
            }
          }
        }
        else if (*(_DWORD *)__s2 == 3)
        {
          if (v107 != v64)
          {
            v116 = *(_OWORD *)(v65 + v64);
            if (v116 <= 1 && !BYTE4(v116))
            {
              inserted = hlp_insert_question_Tag(v7, (const char **)&__s, &v115, 1, (char *)&v116 + 4);
              if ((inserted & 0x80000000) != 0)
              {
LABEL_192:
                v8 = inserted;
                goto LABEL_186;
              }
            }
          }
LABEL_150:
          v67 = v7;
          v68 = 2;
          goto LABEL_161;
        }
LABEL_163:
        v70 = *(_DWORD *)(v65 + v64 - 16);
        v71 = v65 + v64;
        v72 = *(_WORD *)(v65 + v64 - 4);
        if (v63 >= v109 - 1)
        {
          if (v70 == 4)
            ++v72;
          v80 = v72;
          v82 = v7;
          v83 = (uint64_t)v60;
          v81 = v61;
        }
        else
        {
          v73 = *(_DWORD *)(v71 - 32);
          v74 = *(_WORD *)(v71 - 22);
          v75 = *(_WORD *)(v71 - 20);
          if ((v70 - 3) < 2)
            ++v72;
          v76 = v75 - v74;
          v77 = v75 - v74 - 5;
          v78 = v76 - 4;
          if (v73 != 3)
            v78 = v75;
          if (v73 == 4)
            v78 = v77;
          v79 = v75 - 1;
          if (v73 <= 1)
            v78 = v79;
          v80 = v72;
          v81 = v78;
          v82 = v7;
          v83 = (uint64_t)v60;
        }
        v84 = hlp_insert_phonemes(v82, (const char **)&__s, &v115, v83, v80, v81);
        v8 = v84;
        if ((v84 & 0x80000000) == 0)
        {
          ++v63;
          v64 -= 16;
          if (v109 != (unsigned __int16)v63)
            continue;
        }
        a3 = v102;
        if ((v84 & 0x80000000) == 0)
          goto LABEL_179;
        v18 = 0;
        goto LABEL_187;
      }
      if (__s2[4])
      {
        if (*(_DWORD *)__s2 == 4)
        {
          v67 = v7;
          v68 = 5;
        }
        else
        {
          if (*(_DWORD *)__s2 == 3)
            goto LABEL_150;
          v67 = v7;
          v68 = 4;
        }
      }
      else
      {
        v67 = v7;
        v68 = 0;
      }
LABEL_161:
      v69 = &__s2[4];
LABEL_162:
      v8 = hlp_insert_question_Tag(v67, (const char **)&__s, &v115, v68, v69);
      if ((v8 & 0x80000000) != 0)
        goto LABEL_186;
      goto LABEL_163;
    }
LABEL_179:
    v85 = __s;
    v86 = strlen(__s);
    v87 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)v7 + 8), v86 + (unsigned __int16)v51 + 1, 1);
    v18 = (uint64_t)v87;
    v26 = v47;
    if (v87)
    {
      v92 = strncat(v87, v114, (unsigned __int16)v51);
      strncat(v92, v85, v86);
      v93 = v51 + v86;
      v100 = com_depes_PrepareLayersForLen((uint64_t *)(v7 + 96), v93, v94, v95, v96, v97, v98, v99);
      if ((v100 & 0x80000000) == 0)
      {
        v100 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v7 + 32) + 120))(*(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), 0, v18, (unsigned __int16)(v93 + 1));
        if ((v100 & 0x80000000) == 0)
          v100 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char **, unsigned __int16 *))(*(_QWORD *)(v7 + 32)
                                                                                                + 128))(*(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), 0, &v114, &v113);
      }
      v8 = v100;
    }
    else
    {
      v8 = 2601525258;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)v7 + 32), (uint64_t)"GLOBALBEADAPT", 66000, 0, v88, v89, v90, v91, v101);
    }
  }
  else
  {
    v8 = 2601525258;
LABEL_186:
    v18 = 0;
    a3 = v102;
LABEL_187:
    v26 = v47;
  }
LABEL_188:
  heap_Free(*(_QWORD **)(*(_QWORD *)v7 + 8), v26);
LABEL_102:
  if (__s)
    heap_Free(*(_QWORD **)(*(_QWORD *)v7 + 8), (uint64_t)__s);
  if (v18)
    heap_Free(*(_QWORD **)(*(_QWORD *)v7 + 8), v18);
  *a3 = v114;
  return v8;
}

uint64_t globalbeadapt_SplitWordRecordsWithSpecialChar(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  unsigned __int16 v23;
  char *v24;
  size_t v25;
  unsigned __int16 v26;
  char *v27;
  const char *v28;
  unsigned __int16 v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unsigned int v39;
  int v40;
  unsigned __int16 v41;
  __int16 v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  char *v49;
  char *v50;
  char *v51;
  unint64_t v52;
  int v53;
  unsigned __int16 v54;
  __int16 v55;
  __int16 v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  __int16 v63;
  __int16 v64;
  __int16 v65;
  char *v66;
  char *v67;
  __int16 v68;
  __int16 v69;
  __int16 v70;
  __int16 v71;
  __int16 v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v77)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, const char *, int *);
  __int16 v78;
  unsigned int v79;
  unsigned int v80;
  unsigned __int16 v81;
  char *v82;
  char v83[6];
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  char *__s1;
  char *v93;
  int v94[2];
  char *v95;
  char *v96;
  char *__s;
  char *v98;
  int v99;
  unsigned int v100;
  _WORD v101[5];

  v101[0] = 0;
  v99 = 0;
  v100 = 0;
  v98 = 0;
  v96 = 0;
  __s = 0;
  *(_QWORD *)v94 = 0;
  v95 = 0;
  __s1 = 0;
  v93 = 0;
  v90 = 0;
  v91 = 0;
  v88 = 0;
  v89 = 0;
  __strcpy_chk();
  __strcat_chk();
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v12 = hlp_dynstr_init(*a1, (uint64_t)&v84, 0x20u, 16);
  if ((v12 & 0x80000000) != 0
    || (v12 = hlp_dynstr_init(*a1, (uint64_t)&v86, 0x20u, 16), (v12 & 0x80000000) != 0)
    || (v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _WORD *))(a1[1] + 104))(a2, a3, 2, a4, v101), (v12 & 0x80000000) != 0))
  {
    v75 = v12;
    v18 = 0;
    goto LABEL_125;
  }
  v80 = a4;
  v81 = strlen(a5) + 1;
  v13 = heap_Alloc(*(_QWORD *)(*a1 + 8), v81);
  if (!v13)
  {
    v75 = 2601525258;
    log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"GLOBALBEADAPT", 66000, 0, v14, v15, v16, v17, v79);
    return v75;
  }
  v18 = (char *)v13;
  while (1)
  {
    v19 = a1[1];
    if (!v101[0])
    {
      v77 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, const char *, int *))(v19 + 160);
      v78 = strlen(a5);
      v20 = v77(a2, a3, v80, 0, (unsigned __int16)(v78 + 1), a5, &v99);
LABEL_134:
      v75 = v20;
      goto LABEL_125;
    }
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 168))(a2, a3);
    if ((v20 & 0x80000000) != 0)
      goto LABEL_134;
    if (v100 <= 0xA && ((1 << v100) & 0x610) != 0)
      break;
LABEL_122:
    v75 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _WORD *))(a1[1] + 120))(a2, a3, v101[0], v101);
    if ((v75 & 0x80000000) != 0)
      goto LABEL_125;
  }
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(a1[1] + 168))(a2, a3, v101[0], 1, 1, (char *)&v91 + 2, (char *)&v99 + 2);
  if ((v20 & 0x80000000) != 0)
    goto LABEL_134;
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(a1[1] + 168))(a2, a3, v101[0], 2, 1, &v91, (char *)&v99 + 2);
  if ((v20 & 0x80000000) != 0)
    goto LABEL_134;
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, v101[0], 3, &v98, (char *)&v99 + 2);
  if ((v20 & 0x80000000) != 0)
    goto LABEL_134;
  v22 = v98;
  if (v98)
  {
    v23 = 0;
    do
    {
      ++v23;
      v24 = strchr(v22, 23);
      v22 = v24 + 1;
    }
    while (v24);
  }
  else
  {
    v23 = 0;
  }
  v96 = (char *)&a5[HIWORD(v91)];
  __s = 0;
  v25 = (unsigned __int16)(v91 - HIWORD(v91));
  strncpy(v18, v96, v25);
  v26 = 0;
  v18[v25] = 0;
  v27 = v18;
  do
  {
    __s = v27;
    ++v26;
    hlp_SearchMorph(a6, v83, &__s);
    v27 = __s + 1;
  }
  while (__s);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, v101[0], 5, &v95, (char *)&v99 + 2);
  if ((v20 & 0x80000000) != 0)
    goto LABEL_134;
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(a1[1] + 168))(a2, a3, v101[0], 7, 1, (char *)&v90 + 2, (char *)&v99 + 2);
  if ((v20 & 0x80000000) != 0)
    goto LABEL_134;
  HIWORD(v89) = 0;
  *(_QWORD *)v94 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char *))(a1[1] + 184))(a2, a3, v101[0], 14, (char *)&v89 + 2) & 0x80000000) == 0&& HIWORD(v89) == 1)
  {
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *, char *))(a1[1] + 176))(a2, a3, v101[0], 14, v94, (char *)&v99 + 2);
    if ((v20 & 0x80000000) != 0)
      goto LABEL_134;
  }
  HIWORD(v89) = 0;
  v93 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char *))(a1[1] + 184))(a2, a3, v101[0], 9, (char *)&v89 + 2) & 0x80000000) == 0&& HIWORD(v89) == 1)
  {
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, v101[0], 9, &v93, (char *)&v99 + 2);
    if ((v20 & 0x80000000) != 0)
      goto LABEL_134;
  }
  LOWORD(v89) = 0;
  LOWORD(v90) = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a1[1] + 184))(a2, a3, v101[0], 8, &v89) & 0x80000000) == 0
    && (unsigned __int16)v89 == 1)
  {
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(a1[1] + 168))(a2, a3, v101[0], 8, 1, &v90, (char *)&v99 + 2);
    if ((v20 & 0x80000000) != 0)
      goto LABEL_134;
  }
  HIWORD(v88) = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char *))(a1[1] + 184))(a2, a3, v101[0], 13, (char *)&v88 + 2) & 0x80000000) == 0&& HIWORD(v88) == 1)
  {
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, v101[0], 13, &__s1, (char *)&v99 + 2);
    if ((v20 & 0x80000000) != 0)
      goto LABEL_134;
  }
  if (v23 < 2u || v26 < v23)
  {
    v35 = (unsigned __int16)v91;
LABEL_114:
    if (HIWORD(v91) <= 1u)
      v74 = 1;
    else
      v74 = HIWORD(v91);
    if (v74 < v35)
    {
      do
      {
        if (a5[v74] == 95 && !memchr(";:,", a5[v74 - 1], 4uLL))
          a5[v74] = 45;
        ++v74;
      }
      while (v35 != (unsigned __int16)v74);
    }
    goto LABEL_122;
  }
  if (*(_QWORD *)v94)
  {
    v20 = hlp_dynstr_add(*a1, (uint64_t)&v84, *(const char **)v94, 2);
    if ((v20 & 0x80000000) != 0)
      goto LABEL_134;
    v20 = hlp_dynstr_add(*a1, (uint64_t)&v86, *(const char **)v94, 2);
    if ((v20 & 0x80000000) != 0)
      goto LABEL_134;
    if (!hlp_NLUStrExist(*(char **)v94, "S_PUNC"))
    {
      hlp_NLUStrRemoveKeyVal(v86, "S_PUNC");
      hlp_NLUStrRemoveKeyVal(v84, "S_PUNC");
    }
    if (!hlp_NLUStrExist(*(char **)v94, "PUNC"))
    {
      hlp_NLUStrRemoveKeyVal(*(char **)v94, "PUNC");
      hlp_NLUStrRemoveKeyVal(v86, "PUNC");
    }
    if (!hlp_NLUStrExist(*(char **)v94, "BNDSHAPE"))
    {
      hlp_NLUStrRemoveKeyVal(*(char **)v94, "BNDSHAPE");
      hlp_NLUStrRemoveKeyVal(v86, "BNDSHAPE");
    }
    if (!hlp_NLUStrExist(*(char **)v94, "E_PUNC"))
    {
      hlp_NLUStrRemoveKeyVal(*(char **)v94, "E_PUNC");
      hlp_NLUStrRemoveKeyVal(v86, "E_PUNC");
    }
  }
  v28 = v98;
  v29 = strlen(v98) + 1;
  if (v81 >= v29)
  {
LABEL_53:
    v36 = strcpy(v18, v28);
    v37 = strchr(v36, 23);
    __s = v37;
    if (v37)
    {
      *v37 = 0;
      __s = v37 + 1;
    }
    v38 = HIWORD(v91);
    v96 = (char *)&a5[HIWORD(v91)];
    v39 = a5[(unsigned __int16)v91];
    a5[(unsigned __int16)v91] = 0;
    v40 = hlp_SearchMorph(a6, v83, &v96);
    v41 = (_WORD)v96 - (_WORD)a5;
    LOWORD(v91) = (_WORD)v96 - (_WORD)a5;
    if (v40 && v38 < v41)
    {
      do
      {
        if (a5[v38] == 95)
          a5[v38] = 45;
        ++v38;
      }
      while (v38 < v41);
    }
    HIWORD(v91) = v41 + 1;
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(a1[1] + 160))(a2, a3, v101[0], 2, 1, &v91, &v99);
    if ((v20 & 0x80000000) != 0)
      goto LABEL_134;
    v79 = v39;
    v42 = strlen(v18);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, int *))(a1[1] + 160))(a2, a3, v101[0], 3, (unsigned __int16)(v42 + 1), v18, &v99);
    if ((v20 & 0x80000000) != 0)
      goto LABEL_134;
    if ((unsigned __int16)v89 == 1)
    {
      v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(a1[1] + 160))(a2, a3, v101[0], 8, 1, &v88, &v99);
      if ((v20 & 0x80000000) != 0)
        goto LABEL_134;
    }
    if (HIWORD(v88) == 1)
    {
      v43 = __s1;
      if (!strcmp(__s1, "0"))
      {
        v47 = (unsigned __int16)(strlen(v43) + 1);
        v44 = a2;
        v45 = a3;
        v46 = v101[0];
        v48 = v43;
      }
      else
      {
        v44 = a2;
        v45 = a3;
        v46 = v101[0];
        v47 = 2;
        v48 = "1";
      }
      v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, int *))(a1[1] + 160))(v44, v45, v46, 13, v47, v48, &v99);
      if ((v20 & 0x80000000) != 0)
        goto LABEL_134;
    }
    v49 = __s;
    v50 = strchr(__s, 23);
    if (v50)
    {
      v51 = v50;
      v82 = v86;
      do
      {
        *v51 = 0;
        v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _WORD *))(a1[1] + 80))(a2, a3, v101[0], v101);
        if ((v20 & 0x80000000) != 0)
          goto LABEL_134;
        v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, int *))(a1[1] + 160))(a2, a3, v101[0], 0, 1, &v100, &v99);
        if ((v20 & 0x80000000) != 0)
          goto LABEL_134;
        v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(a1[1] + 160))(a2, a3, v101[0], 1, 1, (char *)&v91 + 2, &v99);
        if ((v20 & 0x80000000) != 0)
          goto LABEL_134;
        v52 = HIWORD(v91);
        v96 = (char *)&a5[HIWORD(v91)];
        v53 = hlp_SearchMorph(a6, v83, &v96);
        v54 = (_WORD)v96 - (_WORD)a5;
        LOWORD(v91) = (_WORD)v96 - (_WORD)a5;
        if (v53 && v52 < v54)
        {
          do
          {
            if (a5[v52] == 95)
              a5[v52] = 45;
            ++v52;
          }
          while (v52 < v54);
        }
        HIWORD(v91) = v54 + 1;
        v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(a1[1] + 160))(a2, a3, v101[0], 2, 1, &v91, &v99);
        if ((v20 & 0x80000000) != 0)
          goto LABEL_134;
        v55 = strlen(v49);
        v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, int *))(a1[1] + 160))(a2, a3, v101[0], 3, (unsigned __int16)(v55 + 1), v49, &v99);
        if ((v20 & 0x80000000) != 0)
          goto LABEL_134;
        v56 = strlen(v95);
        v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, int *))(a1[1] + 160))(a2, a3, v101[0], 5, (unsigned __int16)(v56 + 1), v95, &v99);
        if ((v20 & 0x80000000) != 0)
          goto LABEL_134;
        v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(a1[1] + 160))(a2, a3, v101[0], 7, 1, (char *)&v90 + 2, &v99);
        if ((v20 & 0x80000000) != 0)
          goto LABEL_134;
        if ((unsigned __int16)v89 == 1)
        {
          v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(a1[1] + 160))(a2, a3, v101[0], 8, 1, &v88, &v99);
          if ((v20 & 0x80000000) != 0)
            goto LABEL_134;
        }
        if (HIWORD(v88) == 1)
        {
          v57 = __s1;
          if (!strcmp(__s1, "0"))
          {
            v61 = (unsigned __int16)(strlen(v57) + 1);
            v58 = a2;
            v59 = a3;
            v60 = v101[0];
            v62 = v57;
          }
          else
          {
            v58 = a2;
            v59 = a3;
            v60 = v101[0];
            v61 = 2;
            v62 = "1";
          }
          v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, int *))(a1[1] + 160))(v58, v59, v60, 13, v61, v62, &v99);
          if ((v20 & 0x80000000) != 0)
            goto LABEL_134;
        }
        if (v82)
        {
          v63 = strlen(v82);
          v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, int *))(a1[1] + 160))(a2, a3, v101[0], 14, (unsigned __int16)(v63 + 1), v82, &v99);
          if ((v20 & 0x80000000) != 0)
            goto LABEL_134;
        }
        if (v93)
        {
          v64 = strlen(v93);
          v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, int *))(a1[1] + 160))(a2, a3, v101[0], 9, (unsigned __int16)(v64 + 1), v93, &v99);
          if ((v20 & 0x80000000) != 0)
            goto LABEL_134;
        }
        v49 = v51 + 1;
        __s = v51 + 1;
        v51 = strchr(v51 + 1, 23);
      }
      while (v51);
    }
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _WORD *))(a1[1] + 80))(a2, a3, v101[0], v101);
    if ((v20 & 0x80000000) != 0)
      goto LABEL_134;
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, int *))(a1[1] + 160))(a2, a3, v101[0], 0, 1, &v100, &v99);
    if ((v20 & 0x80000000) != 0)
      goto LABEL_134;
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(a1[1] + 160))(a2, a3, v101[0], 1, 1, (char *)&v91 + 2, &v99);
    if ((v20 & 0x80000000) != 0)
      goto LABEL_134;
    v65 = HIWORD(v91);
    v66 = (char *)&a5[HIWORD(v91)];
    v96 = v66;
    v67 = strchr(v66, 32);
    v68 = v67 ? (unsigned __int16)v67 - (unsigned __int16)a5 : v65 + strlen(v66);
    LOWORD(v91) = v68;
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(a1[1] + 160))(a2, a3, v101[0], 2, 1, &v91, &v99);
    if ((v20 & 0x80000000) != 0)
      goto LABEL_134;
    v69 = strlen(v49);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, int *))(a1[1] + 160))(a2, a3, v101[0], 3, (unsigned __int16)(v69 + 1), v49, &v99);
    if ((v20 & 0x80000000) != 0)
      goto LABEL_134;
    v70 = strlen(v95);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, int *))(a1[1] + 160))(a2, a3, v101[0], 5, (unsigned __int16)(v70 + 1), v95, &v99);
    if ((v20 & 0x80000000) != 0)
      goto LABEL_134;
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(a1[1] + 160))(a2, a3, v101[0], 7, 1, (char *)&v90 + 2, &v99);
    if ((v20 & 0x80000000) != 0)
      goto LABEL_134;
    if ((unsigned __int16)v89 == 1)
    {
      v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(a1[1] + 160))(a2, a3, v101[0], 8, 1, &v90, &v99);
      if ((v20 & 0x80000000) != 0)
        goto LABEL_134;
    }
    if (HIWORD(v88) == 1)
    {
      v71 = strlen(__s1);
      v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, int *))(a1[1] + 160))(a2, a3, v101[0], 13, (unsigned __int16)(v71 + 1), __s1, &v99);
      if ((v20 & 0x80000000) != 0)
        goto LABEL_134;
    }
    if (v84)
    {
      v72 = strlen(v84);
      v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, int *))(a1[1] + 160))(a2, a3, v101[0], 14, (unsigned __int16)(v72 + 1), v84, &v99);
      if ((v20 & 0x80000000) != 0)
        goto LABEL_134;
    }
    if (v93)
    {
      v73 = strlen(v93);
      v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, int *))(a1[1] + 160))(a2, a3, v101[0], 9, (unsigned __int16)(v73 + 1), v93, &v99);
      if ((v20 & 0x80000000) != 0)
        goto LABEL_134;
    }
    v35 = (unsigned __int16)v91;
    a5[(unsigned __int16)v91] = v79;
    goto LABEL_114;
  }
  v30 = (char *)heap_Realloc(*(uint64_t **)(*a1 + 8), (uint64_t)v18, v29);
  __s = v30;
  if (v30)
  {
    v28 = v98;
    v18 = v30;
    v81 = v29;
    goto LABEL_53;
  }
  v75 = 2601525258;
  log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"GLOBALBEADAPT", 66000, 0, v31, v32, v33, v34, v79);
LABEL_125:
  if (v84)
  {
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v84);
    v84 = 0;
  }
  LODWORD(v85) = 0;
  if (v86)
  {
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v86);
    v86 = 0;
  }
  LODWORD(v87) = 0;
  if (v18)
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v18);
  return v75;
}

uint64_t hlp_SearchMorph(const char *a1, const char *a2, char **a3)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = *a3;
  if (*a1 && (v6 = strstr(*a3, a2)) != 0)
  {
    v7 = &v6[strlen(a1)];
    v8 = 1;
  }
  else
  {
    v7 = strchr(v4, 95);
    v8 = 0;
  }
  *a3 = v7;
  return v8;
}

uint64_t globalbeadapt_RemoveSpecialChar(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned __int16 v8;
  unsigned __int16 v9;
  char *v10;
  uint64_t v11;
  char *v13;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  unsigned __int16 v23;
  __int16 v24;
  unsigned int v26;
  char *__s;
  int v28;
  unsigned int v29;
  unsigned __int16 v30;

  v30 = 0;
  v28 = 0;
  v29 = 0;
  __s = 0;
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(a1[1] + 104))(a2, a3, 2, a4, &v30);
  if ((v7 & 0x80000000) == 0)
  {
    v8 = v30;
    if (v30)
    {
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, char *))(a1[1] + 168))(a2, a3, v8, 0, 1, &v29, (char *)&v28 + 2);
        if ((v11 & 0x80000000) != 0)
          break;
        if (v29 <= 0xA && ((1 << v29) & 0x610) != 0)
        {
          v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, v30, 3, &__s, (char *)&v28 + 2);
          if ((v11 & 0x80000000) != 0)
            break;
          v13 = __s;
          v14 = strlen(__s) + 1;
          if (v9 < v14)
          {
            v15 = heap_Realloc(*(uint64_t **)(*a1 + 8), (uint64_t)v10, v14);
            if (!v15)
            {
              log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"GLOBALBEADAPT", 66000, 0, v16, v17, v18, v19, v26);
              v7 = 2601525258;
              if (!v10)
                return v7;
LABEL_22:
              heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v10);
              return v7;
            }
            v13 = __s;
            v10 = (char *)v15;
            v9 = v14;
          }
          v20 = strcpy(v10, v13);
          v21 = strchr(v20, 23);
          if (v21)
          {
            v22 = v21;
            do
            {
              v23 = strlen(v22);
              memmove(v22, v22 + 1, v23);
              v22 = strchr(v22, 23);
            }
            while (v22);
          }
          v24 = strlen(v10);
          v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, int *))(a1[1] + 160))(a2, a3, v30, 3, (unsigned __int16)(v24 + 1), v10, &v28);
          if ((v11 & 0x80000000) != 0)
            break;
        }
        v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1[1] + 120))(a2, a3, v30, &v30);
        if ((v7 & 0x80000000) == 0)
        {
          v8 = v30;
          if (v30)
            continue;
        }
        goto LABEL_21;
      }
      v7 = v11;
LABEL_21:
      if (!v10)
        return v7;
      goto LABEL_22;
    }
  }
  return v7;
}

_QWORD *globalbeadapt_DeInit_SpecialSymbolsFromPhonmap(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;

  v1 = result;
  v2 = *((unsigned __int16 *)result + 142);
  if (*((_WORD *)result + 142) && result[36])
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(v1[36] + 8 * v3);
      if (v4)
      {
        heap_Free(*(_QWORD **)(*v1 + 8), v4);
        v2 = *((unsigned __int16 *)v1 + 142);
      }
      ++v3;
    }
    while (v3 < v2);
    result = heap_Free(*(_QWORD **)(*v1 + 8), v1[36]);
  }
  *((_WORD *)v1 + 142) = 0;
  v1[36] = 0;
  return result;
}

uint64_t globalbeadapt_Init_SpecialSymbolsFromPhonmap(uint64_t a1)
{
  uint64_t Str;
  uint64_t NullHandle;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char *v25;
  unsigned __int16 v26;

  v26 = 0;
  v25 = 0;
  globalbeadapt_DeInit_SpecialSymbolsFromPhonmap((_QWORD *)a1);
  Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"langcode", &v25);
  if ((Str & 0x80000000) != 0)
    goto LABEL_30;
  if (!*(_QWORD *)(a1 + 80))
    return Str;
  NullHandle = safeh_GetNullHandle();
  if (safeh_HandlesEqual(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), NullHandle, v4))
    return Str;
  v26 = 0;
  v5 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, unsigned __int16 *, _QWORD))(*(_QWORD *)(a1 + 80) + 144))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), a1 + 284, &v26, 0);
  if ((v5 & 0x80000000) != 0)
  {
    Str = v5;
LABEL_30:
    globalbeadapt_DeInit_SpecialSymbolsFromPhonmap((_QWORD *)a1);
    return Str;
  }
  v6 = heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), v26 + 1);
  if (!v6)
  {
    Str = 2601525258;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"GLOBALBEADAPT", 64000, 0, v7, v8, v9, v10, v25);
    goto LABEL_30;
  }
  v11 = (char *)v6;
  Str = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, unsigned __int16 *, uint64_t))(*(_QWORD *)(a1 + 80) + 144))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), a1 + 284, &v26, v6);
  if ((Str & 0x80000000) == 0)
  {
    v12 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), *(unsigned __int16 *)(a1 + 284), 8);
    *(_QWORD *)(a1 + 288) = v12;
    if (v12)
    {
      if (*v11)
      {
        v17 = 0;
        v18 = v11;
        while (v17 < *(unsigned __int16 *)(a1 + 284))
        {
          v19 = strchr(v18, 44);
          v20 = v19;
          if (v19)
            *v19 = 0;
          if (strlen(v18) != 3)
          {
            Str = 2601525248;
            break;
          }
          v26 = 0;
          v21 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, const char *, unsigned __int16 *, _QWORD, char *))(*(_QWORD *)(a1 + 80) + 152))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), 2, "alphabet", &v26, 0, v18);
          if ((v21 & 0x80000000) != 0)
          {
            v22 = 0;
            Str = 0;
            v26 = 0;
          }
          else
          {
            Str = v21;
            v22 = v26;
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v17) = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, v22 + 4);
          if (!*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v17))
            goto LABEL_28;
          if (LH_stricmp(v25, v18))
            v23 = __tolower(*v18);
          else
            v23 = 126;
          **(_BYTE **)(*(_QWORD *)(a1 + 288) + 8 * v17) = v23;
          strcpy((char *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v17) + 1), ": ");
          if (!v26
            || (Str = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, const char *, unsigned __int16 *, uint64_t, char *))(*(_QWORD *)(a1 + 80) + 152))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), 2, "alphabet", &v26, *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v17) + 3, v18), (Str & 0x80000000) == 0))
          {
            if (v20)
            {
              v18 = v20 + 1;
              ++v17;
              if (*v11)
                continue;
            }
          }
          break;
        }
      }
    }
    else
    {
LABEL_28:
      Str = 2601525258;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"GLOBALBEADAPT", 64000, 0, v13, v14, v15, v16, v25);
    }
  }
  heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v11);
  if ((Str & 0x80000000) != 0)
    goto LABEL_30;
  return Str;
}

uint64_t hlp_insert_question_Tag(uint64_t a1, const char **a2, unsigned int *a3, int a4, char *__s)
{
  char *v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v19;
  char __sa[20];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  strlen(__s);
  __sa[0] = 0;
  switch(a4)
  {
    case 0:
    case 1:
      break;
    case 2:
    case 3:
      __strncat_chk();
      goto LABEL_5;
    case 4:
      __strncat_chk();
      __strncat_chk();
      __strncat_chk();
LABEL_5:
      __strncat_chk();
      break;
    default:
      __strncat_chk();
      __strncat_chk();
      break;
  }
  __strncat_chk();
  v9 = (char *)*a2;
  v10 = strlen(*a2);
  v11 = strlen(__sa);
  v12 = v11 + v10;
  if (v12 < *a3
    || (v13 = 2 * v12 * *a3,
        *a3 = v13,
        v9 = (char *)heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), (uint64_t)v9, v13),
        (*a2 = v9) != 0))
  {
    strncat(v9, __sa, v11);
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"GLOBALBEADAPT", 66000, 0, v14, v15, v16, v17, v19);
    return 2601525258;
  }
}

uint64_t hlp_insert_phonemes(uint64_t a1, const char **a2, unsigned int *a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  unsigned int v6;
  __int16 v7;
  unsigned __int16 v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v7 = a6 - a5;
  if (a6 < a5)
    return 0;
  v14 = v7 + 1;
  v15 = (char *)*a2;
  v16 = (unsigned __int16)strlen(*a2) + (unsigned __int16)(v7 + 1);
  if (v16 < *a3
    || (v17 = 2 * v16 * *a3,
        *a3 = v17,
        v15 = (char *)heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), (uint64_t)v15, v17),
        (*a2 = v15) != 0))
  {
    strncat(v15, (const char *)(a4 + a5), v14);
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"GLOBALBEADAPT", 66000, 0, v18, v19, v20, v21, v6);
    return 2601525258;
  }
}

BOOL marker_IsReadoutControlDefaultArg(int a1, unsigned int a2, uint64_t a3, int a4)
{
  _BOOL8 result;
  const char *v6;
  const char *MarkerArgStr;

  result = 0;
  if (a1 > 30)
  {
    if (a1 != 31)
    {
      if (a1 != 36)
        return result;
      goto LABEL_7;
    }
    return a2 == a4;
  }
  else
  {
    if (a1 != 7)
    {
      if (a1 != 21)
        return result;
LABEL_7:
      if (!a3)
        return 0;
      v6 = (const char *)(a3 + a2);
      MarkerArgStr = marker_getMarkerArgStr(1u);
      return strcmp(v6, MarkerArgStr) == 0;
    }
    return a2 == 15;
  }
}

unint64_t marker_GetArgOfLastOfType(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  uint64_t v5;
  int v6;
  unint64_t result;
  _BOOL4 v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = a1 + ((unint64_t)a2 << 6);
  v6 = *(_DWORD *)(v5 + 20);
  result = *(_QWORD *)(v5 + 40);
  if (v6 == 7)
  {
    v8 = result == 43;
    if (a3 > (unsigned __int16)(a2 + 1))
    {
      v9 = (unsigned __int16)(a2 + 1);
      v10 = (_DWORD *)(a1 + (v9 << 6) + 20);
      v11 = v9 + 1;
      do
      {
        if (*v10 == 7)
        {
          v12 = v10[5];
          v13 = !v8;
          if (v8)
            v14 = result & 0xFFFFFFFF00000000 | 0xF;
          else
            v14 = result;
          v15 = v13;
          if ((_DWORD)v12 == 43)
            result = v14;
          else
            result = result & 0xFFFFFFFF00000000 | v12;
          if ((_DWORD)v12 == 43)
            v8 = v15;
          else
            v8 = 0;
          if (a4 == 1)
            *v10 = 999;
        }
        v10 += 16;
        v13 = a3 == (unsigned __int16)v11++;
      }
      while (!v13);
    }
    if (v8)
      return result & 0xFFFFFFFF00000000 | 0xF;
  }
  else if (a3 > (unsigned __int16)(a2 + 1))
  {
    v16 = (unsigned __int16)(a2 + 1);
    v17 = a1 + (v16 << 6) + 20;
    v18 = v16 + 1;
    do
    {
      if (*(_DWORD *)v17 == v6)
      {
        result = *(_QWORD *)(v17 + 20);
        if (a4 == 1)
          *(_DWORD *)v17 = 999;
      }
      v17 += 64;
      v13 = a3 == (unsigned __int16)v18++;
    }
    while (!v13);
  }
  return result;
}

uint64_t marker_CheckForEmptyMarkers(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7)
{
  unint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  unsigned __int16 v15;
  uint64_t v16;
  _DWORD *v17;
  unsigned int v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;

  if (a4 >= 2)
  {
    v12 = a7;
    v13 = a6;
    v14 = (_DWORD *)(a5 + 28);
    v15 = 1;
    while (1)
    {
      v16 = v15;
      v17 = (_DWORD *)(a3 + ((unint64_t)v15 << 6));
      v18 = v17[5];
      if (v18 != 999 && v18 != 0x4000)
      {
        if (*v17 == 1)
        {
          if (!a6)
          {
            v19 = v18 > 0x24 || ((1 << v18) & 0x1080200080) == 0;
            if (!v19
              && !marker_IsReadoutControlDefaultArg(v18, *(_QWORD *)(a3 + ((unint64_t)v15 << 6) + 40), a1, a2)
              && *v17 != 1)
            {
              return 0;
            }
          }
        }
        else
        {
          if (!a6)
            goto LABEL_21;
          v20 = 0;
          v21 = a3 + (v16 << 6);
          v22 = (_DWORD *)(v21 + 24);
          v23 = (_DWORD *)(v21 + 28);
          v24 = v14;
          while (v20 <= v12 || v18 != *(v24 - 2) || *v22 != *(v24 - 1) || *v23 != *v24)
          {
            ++v20;
            v24 += 16;
            if (v20 >= v13)
              goto LABEL_21;
          }
          if (!*(v24 - 7))
          {
LABEL_21:
            v25 = 0;
            if (v18 > 0x24 || ((1 << v18) & 0x1080200080) == 0)
              return v25;
            if (!marker_IsReadoutControlDefaultArg(v18, *(_QWORD *)(a3 + (v16 << 6) + 40), a1, a2))
              return 0;
          }
        }
      }
      v15 = v16 + 1;
      if (a4 <= (unsigned __int16)(v16 + 1))
        return 1;
    }
  }
  return 1;
}

uint64_t marker_TraceTxt(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v25 = 0;
  if (!a3)
    return 0;
  v14 = datac_RequestBlock(a5, a6, 1u, &v25);
  if ((v14 & 0x80000000) == 0)
  {
    v15 = *(unsigned __int16 *)(v25 + 16);
    if (!*(_WORD *)(v25 + 16))
    {
      v16 = *(_QWORD *)(a4 + 32);
      v17 = "(Txt) (%s) (tag=%d) len=%d (EMPTY TXT)";
      goto LABEL_8;
    }
    if (v15 >= 0x400)
    {
      v16 = *(_QWORD *)(a4 + 32);
      v17 = "(Txt) (%s) (tag=%d) len=%d (TXT TOO LONG)";
LABEL_8:
      log_OutText(v16, a2, 5, 0, (uint64_t)v17, v11, v12, v13, a7);
      return v14;
    }
    v18 = (char *)heap_Calloc(*(_QWORD **)(a4 + 8), 1, v15 + 2);
    if (v18)
    {
      v19 = (uint64_t)v18;
      v20 = strncpy(v18, *(const char **)(v25 + 8), *(unsigned __int16 *)(v25 + 16));
      v20[*(unsigned __int16 *)(v25 + 16)] = 0;
      log_OutText(*(_QWORD *)(a4 + 32), a2, 5, 0, (uint64_t)"(Txt) (%s) (tag=%d) len=%d (UTF8) \"%s\"", v21, v22, v23, a7);
      heap_Free(*(_QWORD **)(a4 + 8), v19);
    }
    else
    {
      return (a1 << 20) | 0x8000200A;
    }
  }
  return v14;
}

uint64_t marker_TraceMrk(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int16 a10)
{
  int v10;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  unsigned int v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned __int16 v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 v32;
  size_t v33;
  unsigned __int16 v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v45;
  char *__s;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51[32];
  uint64_t v52;

  v47 = a8;
  v52 = *MEMORY[0x1E0C80C00];
  v50 = 0;
  if (!a3)
    return 0;
  v10 = a6;
  v15 = a9;
  log_OutText(*(_QWORD *)(a4 + 32), a2, 5, 0, (uint64_t)"(Mrk) (%s) (tag=%d)", a6, a7, a8, a7);
  if (a9)
  {
    v16 = 0;
    v48 = 0;
    v17 = a10;
    if (!a10)
      return v16;
  }
  else
  {
    v16 = datac_RequestBlock(a5, v10, 1u, &v50);
    v48 = *(_QWORD *)(v50 + 8);
    v17 = *(unsigned __int16 *)(v50 + 16);
    if (!*(_WORD *)(v50 + 16))
      return v16;
  }
  v45 = a1;
  v18 = 0;
  __s = 0;
  v49 = v17;
  do
  {
    if (v15)
    {
      v51[0] = 0;
      v19 = v15 + (v18 << 6);
      v20 = *(const char **)(v19 + 40);
      v21 = *(_DWORD *)(v19 + 20);
      if (v21 == 32)
      {
        if ((_DWORD)v20 == 1)
          v22 = 49;
        else
          v22 = 48;
        *(_WORD *)v51 = v22;
        v21 = 32;
LABEL_28:
        marker_getString(v21);
        goto LABEL_29;
      }
    }
    else
    {
      v23 = v48 + (v18 << 6);
      v25 = *(_DWORD *)(v23 + 20);
      v24 = v23 + 20;
      v21 = v25;
      v20 = *(const char **)(v24 + 20);
      if (*(_QWORD *)(v24 + 28))
      {
        v26 = strlen(*(const char **)(v24 + 28));
        if ((v26 & 0xFFE0) != 0)
        {
          strcpy(v51, "EXTSTR TOO LONG");
        }
        else
        {
          v27 = v26;
          __strncpy_chk();
          v51[v27] = 0;
        }
      }
      else
      {
        v51[0] = 0;
      }
      if (*(_DWORD *)v24 == 32)
      {
        if (*(_DWORD *)(v24 + 20) == 1)
          v28 = 49;
        else
          v28 = 48;
        *(_WORD *)v51 = v28;
      }
    }
    if (v21 != 7)
      goto LABEL_28;
    if ((_DWORD)v20 == 43)
    {
      v21 = 7;
    }
    else
    {
      v36 = 0;
      while (UTOIMARKER2STRING[v36] != (_DWORD)v20)
      {
        v36 += 4;
        if (v36 == 76)
        {
          v21 = 7;
          goto LABEL_29;
        }
      }
      v21 = 7;
    }
LABEL_29:
    if (marker_hasNonConstCharPtrArg(v21)
      && v21 <= 0x27
      && ((1 << v21) & 0xB400200000) != 0
      && v47 == 1
      && v20)
    {
      v32 = strlen(v20);
      v33 = v32;
      if (v32 >= 0x401uLL)
        v34 = 1024;
      else
        v34 = v32;
      if (__s)
      {
        if (strlen(__s) >= v34)
        {
          v35 = __s;
        }
        else
        {
          v35 = (char *)heap_Realloc(*(uint64_t **)(a4 + 8), (uint64_t)__s, v34 + 1);
          if (!v35)
            return (v45 << 20) | 0x8000200A;
        }
      }
      else
      {
        v35 = (char *)heap_Calloc(*(_QWORD **)(a4 + 8), 1, v34 + 1);
        if (!v35)
          return (v45 << 20) | 0x8000200A;
      }
      __s = v35;
      if (v33 > 0x400)
        strcpy(v35, "ARGSTR TOO LONG");
      else
        strncpy(v35, v20, v33)[v33] = 0;
    }
    v37 = *(_QWORD *)(a4 + 32);
    v15 = a9;
    if (a9)
    {
      log_OutText(v37, a2, 5, 0, (uint64_t)"[%d] Markers %s[type=%5d %s]  Ref (%u,%u) Cur(%u,%u) %s Ext=%d %s", v29, v30, v31, v18);
    }
    else
    {
      v38 = v48 + (v18 << 6);
      log_OutText(v37, a2, 5, 0, (uint64_t)"[%d] Markers %s[type=%5d %s]  Ref (%u,%u) Cur(%u,%u) %s Ext=%d %s", v29, v30, v31, v18);
      if (*(_WORD *)(v38 + 16))
      {
        v42 = 0;
        v43 = 0;
        do
        {
          log_OutText(*(_QWORD *)(a4 + 32), a2, 5, 0, (uint64_t)"[UTOI] Offsets[%d] %u,%u", v39, v40, v41, v43++);
          v42 += 8;
        }
        while (v43 < *(unsigned __int16 *)(v38 + 16));
      }
    }
    ++v18;
  }
  while (v18 != v49);
  v16 = v16;
  if (__s)
    heap_Free(*(_QWORD **)(a4 + 8), (uint64_t)__s);
  return v16;
}

uint64_t marker_loc_FilterSyncMarkers(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  __int128 *v3;
  unint64_t v4;
  unsigned __int16 v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v1 = *(unsigned __int16 *)(a1 + 16);
  if (v1 < 2)
  {
    v5 = 1;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 8);
    v3 = (__int128 *)(v2 + 64);
    v4 = 1;
    v5 = 1;
    do
    {
      if (*((_DWORD *)v3 + 5) != 0x4000)
      {
        v6 = (_OWORD *)(v2 + ((unint64_t)v5 << 6));
        v7 = *v3;
        v8 = v3[1];
        v9 = v3[3];
        v6[2] = v3[2];
        v6[3] = v9;
        *v6 = v7;
        v6[1] = v8;
        ++v5;
        v1 = *(unsigned __int16 *)(a1 + 16);
      }
      ++v4;
      v3 += 4;
    }
    while (v4 < v1);
  }
  *(_WORD *)(a1 + 16) = v5;
  return 0;
}

uint64_t ppParam_ClearReadOutParameters(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = 0;
  while (1)
  {
    result = paramc_ParamRemove(*(_QWORD *)(a1 + 40), *(_QWORD *)((char *)&aTAG2PARAM + v2 + 8));
    if ((result & 0x80000000) != 0 && (result & 0x1FFF) != 0x14)
      break;
    v2 += 16;
    if (v2 == 64)
      return 0;
  }
  return result;
}

uint64_t ppParam_ClearSequencerParameters(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = 0;
  while (1)
  {
    result = paramc_ParamRemove(*(_QWORD *)(a1 + 40), (uint64_t)off_1EA93FDC8[v2]);
    if ((result & 0x80000000) != 0 && (result & 0x1FFF) != 0x14)
      break;
    if (++v2 == 3)
      return 0;
  }
  return result;
}

uint64_t ppParam_ClearAllPPParameters(uint64_t a1)
{
  uint64_t result;

  result = ppParam_ClearReadOutParameters(a1);
  if ((result & 0x80000000) == 0)
    return ppParam_ClearSequencerParameters(a1);
  return result;
}

uint64_t datac_ObjOpen(_WORD *a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  uint64_t v12;

  v12 = 0;
  if (!a3 || (InitRsrcFunction(a1, a2, &v12) & 0x80000000) != 0)
  {
    v11 = -2147475449;
  }
  else
  {
    *a3 = 0;
    v8 = heap_Alloc(*(_QWORD *)(v12 + 8), 40);
    if (v8)
    {
      v9 = v8;
      result = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_OWORD *)v9 = 0u;
      *(_OWORD *)(v9 + 16) = 0u;
      *(_QWORD *)v9 = a1;
      *(_QWORD *)(v9 + 8) = a2;
      *(_DWORD *)(v9 + 32) = a4;
      *a3 = v9;
      return result;
    }
    v11 = -2147475446;
  }
  return v11 | (a4 << 20);
}

uint64_t datac_ObjClose(uint64_t a1)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  if (!a1)
    return 2368741383;
  if ((InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v8) & 0x80000000) != 0)
    return (*(_DWORD *)(a1 + 32) << 20) | 0x80002007;
  v2 = *(unsigned __int16 *)(a1 + 16);
  if (*(_WORD *)(a1 + 16))
  {
    v3 = 0;
    v4 = 16;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + v4);
      if (v5)
      {
        heap_Free(*(_QWORD **)(v8 + 8), v5);
        v2 = *(unsigned __int16 *)(a1 + 16);
      }
      ++v3;
      v4 += 32;
    }
    while (v3 < v2);
  }
  v6 = *(_QWORD *)(a1 + 24);
  if (v6)
    heap_Free(*(_QWORD **)(v8 + 8), v6);
  heap_Free(*(_QWORD **)(v8 + 8), a1);
  return 0;
}

double datac_RegisterBlock(uint64_t a1, int a2, int a3, int a4)
{
  __int16 v4;
  __int16 v6;
  double result;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = 0;
  if (a1)
  {
    v4 = a3;
    if (a3)
    {
      v6 = a4;
      if (a4)
      {
        if ((InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v17) & 0x80000000) == 0)
        {
          v9 = *(_QWORD *)(a1 + 24);
          if (*(_WORD *)(a1 + 16))
          {
            v10 = (unsigned __int16 *)(v9 + 8);
            v11 = *(unsigned __int16 *)(a1 + 16);
            while (1)
            {
              v12 = *v10;
              v10 += 16;
              if (v12 == a2)
                break;
              if (!--v11)
                goto LABEL_13;
            }
          }
          else
          {
            if (v9)
LABEL_13:
              v13 = heap_Realloc(*(uint64_t **)(v17 + 8), v9, 32 * *(unsigned __int16 *)(a1 + 16) + 32);
            else
              v13 = heap_Alloc(*(_QWORD *)(v17 + 8), 32);
            if (v13)
            {
              *(_QWORD *)(a1 + 24) = v13;
              v14 = *(_WORD *)(a1 + 16) + 1;
              *(_WORD *)(a1 + 16) = v14;
              v15 = v13 + 32 * v14;
              result = 0.0;
              *(_OWORD *)(v15 - 32) = 0u;
              *(_OWORD *)(v15 - 16) = 0u;
              v16 = *(_QWORD *)(a1 + 24) + 32 * *(unsigned __int16 *)(a1 + 16);
              *(_WORD *)(v16 - 24) = a2;
              *(_WORD *)(v16 - 22) = v4;
              *(_WORD *)(v16 - 32) = v6;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t datac_RequestBlock(uint64_t a1, int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t result;
  unsigned int v13;
  int v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = 0;
  if (!a1)
    return 2368741383;
  if (!a3 || !a4 || (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v18) & 0x80000000) != 0)
    goto LABEL_13;
  *a4 = 0;
  v8 = *(unsigned __int16 *)(a1 + 16);
  if (!*(_WORD *)(a1 + 16))
  {
LABEL_9:
    v10 = *(_DWORD *)(a1 + 32);
    v11 = -2147475436;
    return v11 | (v10 << 20);
  }
  v9 = *(_QWORD *)(a1 + 24) + 16;
  while (*(unsigned __int16 *)(v9 - 8) != a2)
  {
    v9 += 32;
    if (!--v8)
      goto LABEL_9;
  }
  if (*(unsigned __int16 *)(v9 + 10) < a3)
  {
    v13 = *(unsigned __int16 *)(v9 - 16);
    if (((v13 + a3) & 0x10000) != 0)
    {
LABEL_13:
      v10 = *(_DWORD *)(a1 + 32);
      v11 = -2147475449;
      return v11 | (v10 << 20);
    }
    v14 = v13 + v13 * (a3 / v13);
    v15 = *(uint64_t **)(v18 + 8);
    v16 = *(unsigned __int16 *)(v9 - 6) * (unint64_t)(unsigned __int16)v14;
    if (*(_QWORD *)v9)
      v17 = heap_Realloc(v15, *(_QWORD *)v9, v16 + 1);
    else
      v17 = heap_Alloc((uint64_t)v15, v16 + 1);
    if (!v17)
    {
      v10 = *(_DWORD *)(a1 + 32);
      v11 = -2147475446;
      return v11 | (v10 << 20);
    }
    if (*(_QWORD *)v9 != v17)
      *(_QWORD *)v9 = v17;
    bzero((void *)(v17 + *(unsigned __int16 *)(v9 - 6) * *(unsigned __int16 *)(v9 + 8)), ((unsigned __int16)v14 - *(unsigned __int16 *)(v9 + 8)) * (unint64_t)*(unsigned __int16 *)(v9 - 6));
    *(_WORD *)(v9 + 10) = v14;
  }
  result = 0;
  *a4 = v9 - 8;
  return result;
}

uint64_t bed_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;

  v18 = 0;
  if (!a3 || !a5 || (InitRsrcFunction(a1, a2, &v18) & 0x80000000) != 0)
  {
    v16 = -2147475449;
    return v16 | (a6 << 20);
  }
  *a5 = 0;
  v12 = heap_Alloc(*(_QWORD *)(v18 + 8), 40);
  if (!v12)
  {
    v16 = -2147475446;
    return v16 | (a6 << 20);
  }
  v13 = v12;
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)v12 = a1;
  *(_QWORD *)(v12 + 8) = a2;
  *(_QWORD *)(v12 + 16) = a3;
  *(_DWORD *)(v12 + 36) = a6;
  v14 = datac_RequestBlock(a3, a4, 1u, (_QWORD *)(v12 + 24));
  if ((v14 & 0x80000000) != 0)
  {
    v15 = v14;
    bed_ObjClose(v13);
  }
  else
  {
    v15 = 0;
    *a5 = v13;
  }
  return v15;
}

uint64_t bed_ObjClose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;

  v1 = 2368741383;
  v4 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v4) & 0x80000000) == 0)
  {
    heap_Free(*(_QWORD **)(v4 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t bed_Goto(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  uint64_t result;
  int v5;

  if (!a1)
    return 2368741383;
  v3 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 24) + 16);
  if ((a2 & 0x80000000) != 0)
  {
    v5 = v3 + a2;
    if (v5 >= 0)
    {
      result = 0;
      *(_WORD *)(a1 + 32) = v5;
      return result;
    }
  }
  else if (v3 >= a2)
  {
    result = 0;
    *(_WORD *)(a1 + 32) = a2;
    return result;
  }
  return (*(_DWORD *)(a1 + 36) << 20) | 0x8000200F;
}

uint64_t bed_GoForward(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v10;
  int v11;

  result = 2368741383;
  if (a1 && a2)
  {
    v6 = *(_QWORD *)(a1 + 24);
    v7 = *(unsigned __int16 *)(a1 + 32);
    v8 = *(unsigned __int16 *)(v6 + 16);
    if (v7 < v8)
    {
      v10 = *(_QWORD *)(v6 + 8) + *(unsigned __int16 *)(v6 + 2) * (unint64_t)*(unsigned __int16 *)(a1 + 32);
      do
      {
        v11 = a2(a3, v10);
        LOWORD(v7) = *(_WORD *)(a1 + 32);
        v8 = *(unsigned __int16 *)(v6 + 16);
        if (v11)
          break;
        LOWORD(v7) = v7 + 1;
        *(_WORD *)(a1 + 32) = v7;
        v10 += *(unsigned __int16 *)(v6 + 2);
      }
      while (v8 > (unsigned __int16)v7);
    }
    if (v8 <= (unsigned __int16)v7)
      return (*(_DWORD *)(a1 + 36) << 20) | 0x80002014;
    else
      return 0;
  }
  return result;
}

uint64_t bed_GoBackward(uint64_t a1, unsigned int (*a2)(uint64_t, unint64_t), uint64_t a3)
{
  int v5;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  __int16 v11;

  if (!a1)
    return 2368741383;
  v5 = -2147475449;
  if (a2)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(unsigned __int16 *)(a1 + 32);
    v9 = *(unsigned __int16 *)(v7 + 16);
    if (v8 >= v9)
    {
      LOWORD(v8) = v9 - 1;
      *(_WORD *)(a1 + 32) = v9 - 1;
    }
    v10 = *(_QWORD *)(v7 + 8) + *(unsigned __int16 *)(v7 + 2) * (unint64_t)(unsigned __int16)v8;
    if ((_WORD)v8)
    {
      while (!a2(a3, v10))
      {
        v11 = *(_WORD *)(a1 + 32) - 1;
        *(_WORD *)(a1 + 32) = v11;
        v10 -= *(unsigned __int16 *)(v7 + 2);
        if (!v11)
          goto LABEL_11;
      }
      if (*(_WORD *)(a1 + 32))
        return 0;
    }
LABEL_11:
    if (a2(a3, v10))
      return 0;
    v5 = -2147475436;
  }
  return v5 | (*(_DWORD *)(a1 + 36) << 20);
}

uint64_t bed_FindForward(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t), uint64_t a3, _WORD *a4)
{
  int v6;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v12;
  int v13;

  if (!a1)
    return 2368741383;
  v6 = -2147475449;
  if (a2 && a4)
  {
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(unsigned __int16 *)(a1 + 32);
    *a4 = v9;
    v10 = *(unsigned __int16 *)(v8 + 16);
    if (v9 < v10)
    {
      v12 = *(_QWORD *)(v8 + 8) + *(unsigned __int16 *)(v8 + 2) * (unint64_t)v9;
      while (1)
      {
        v13 = a2(a3, v12);
        LOWORD(v9) = *a4;
        if (v13)
          break;
        LOWORD(v9) = v9 + 1;
        *a4 = v9;
        v12 += *(unsigned __int16 *)(v8 + 2);
        v10 = *(unsigned __int16 *)(v8 + 16);
        if (v10 <= (unsigned __int16)v9)
          goto LABEL_11;
      }
      v10 = *(unsigned __int16 *)(v8 + 16);
    }
LABEL_11:
    if (v10 > (unsigned __int16)v9)
      return 0;
    v6 = -2147475436;
  }
  return v6 | (*(_DWORD *)(a1 + 36) << 20);
}

uint64_t bed_FindBackward(uint64_t a1, unsigned int (*a2)(uint64_t, unint64_t), uint64_t a3, _WORD *a4)
{
  int v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int16 v12;

  if (!a1)
    return 2368741383;
  v6 = -2147475449;
  if (a2 && a4)
  {
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(unsigned __int16 *)(a1 + 32);
    *a4 = v10;
    v11 = *(_QWORD *)(v9 + 8) + *(unsigned __int16 *)(v9 + 2) * (unint64_t)v10;
    if (v10)
    {
      while (!a2(a3, v11))
      {
        v12 = *a4 - 1;
        *a4 = v12;
        v11 -= *(unsigned __int16 *)(v9 + 2);
        if (!v12)
          goto LABEL_10;
      }
      if (*a4)
        return 0;
    }
LABEL_10:
    if (a2(a3, v11))
      return 0;
    v6 = -2147475436;
  }
  return v6 | (*(_DWORD *)(a1 + 36) << 20);
}

uint64_t bed_GetcElem(uint64_t a1, _WORD *a2)
{
  uint64_t result;

  if (!a1)
    return 2368741383;
  if (!a2)
    return (*(_DWORD *)(a1 + 36) << 20) | 0x80002007;
  result = 0;
  *a2 = *(_WORD *)(*(_QWORD *)(a1 + 24) + 16);
  return result;
}

uint64_t bed_GetiElem(uint64_t a1, _WORD *a2)
{
  unsigned int v2;
  uint64_t result;

  if (!a1)
    return 2368741383;
  if (!a2)
    return (*(_DWORD *)(a1 + 36) << 20) | 0x80002007;
  v2 = *(unsigned __int16 *)(a1 + 32);
  if (v2 >= *(unsigned __int16 *)(*(_QWORD *)(a1 + 24) + 16))
    return (*(_DWORD *)(a1 + 36) << 20) | 0x8000200F;
  result = 0;
  *a2 = v2;
  return result;
}

uint64_t bed_GetpElem(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;

  if (!a1)
    return 2368741383;
  if (!a3)
    return (*(_DWORD *)(a1 + 36) << 20) | 0x80002007;
  if (a2 == 0xFFFF)
    a2 = *(unsigned __int16 *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 24);
  if (a2 >= *(unsigned __int16 *)(v3 + 16))
    return (*(_DWORD *)(a1 + 36) << 20) | 0x8000200F;
  result = 0;
  *a3 = *(_QWORD *)(v3 + 8) + *(unsigned __int16 *)(v3 + 2) * (unint64_t)a2;
  return result;
}

uint64_t bed_GetpBlock(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!a1)
    return 2368741383;
  if (!a2)
    return (*(_DWORD *)(a1 + 36) << 20) | 0x80002007;
  result = 0;
  *a2 = *(_QWORD *)(a1 + 24);
  return result;
}

uint64_t bed_IsCursorAtEnd(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  if (!a1)
    return 2368741383;
  if (!a2)
    return (*(_DWORD *)(a1 + 36) << 20) | 0x80002007;
  result = 0;
  *a2 = *(unsigned __int16 *)(a1 + 32) >= *(unsigned __int16 *)(*(_QWORD *)(a1 + 24) + 16);
  return result;
}

uint64_t bed_Insert(uint64_t a1, void *__src, int a3)
{
  unsigned __int16 **v6;
  unsigned __int16 *v7;
  unsigned int v8;
  uint64_t result;
  unsigned int v10;

  if (!a1)
    return 2368741383;
  if (!__src)
    return (*(_DWORD *)(a1 + 36) << 20) | 0x80002007;
  if (!a3)
    return 0;
  v6 = (unsigned __int16 **)(a1 + 24);
  v7 = *(unsigned __int16 **)(a1 + 24);
  v8 = v7[8];
  if (v8 + a3 > v7[9])
  {
    result = datac_RequestBlock(*(_QWORD *)(a1 + 16), *v7, (unsigned __int16)(v8 + a3), (_QWORD *)(a1 + 24));
    if ((result & 0x80000000) != 0)
      return result;
    v7 = *v6;
    v8 = (*v6)[8];
  }
  v10 = *(unsigned __int16 *)(a1 + 32);
  if (v10 < v8)
  {
    memmove((void *)(*((_QWORD *)v7 + 1) + (v10 + a3) * v7[1]), (const void *)(*((_QWORD *)v7 + 1) + v7[1] * v10), v7[1] * (uint64_t)(int)(v8 - v10));
    v10 = *(unsigned __int16 *)(a1 + 32);
  }
  memmove((void *)(*((_QWORD *)v7 + 1) + v7[1] * v10), __src, v7[1] * a3);
  result = 0;
  v7[8] += a3;
  *(_WORD *)(a1 + 32) += a3;
  return result;
}

uint64_t bed_Remove(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned __int16 v7;
  BOOL v8;
  int v9;
  unsigned __int16 v10;
  int v11;
  unsigned int v12;
  uint64_t result;
  unsigned int v14;

  if (!a1)
    return 2368741383;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned __int16 *)(v5 + 16);
  v7 = v6 - a2;
  if (v6 <= a2)
    return (*(_DWORD *)(a1 + 36) << 20) | 0x8000200F;
  if (!a3)
    return 0;
  v8 = v6 >= a3 + a2;
  v9 = (unsigned __int16)(v6 - (a3 + a2));
  if (v8)
    v10 = a3;
  else
    v10 = v7;
  if (v8)
    v11 = v9;
  else
    v11 = 0;
  v12 = a2 + v10;
  memmove((void *)(*(_QWORD *)(v5 + 8) + *(unsigned __int16 *)(v5 + 2) * a2), (const void *)(*(_QWORD *)(v5 + 8) + v12 * *(unsigned __int16 *)(v5 + 2)), v11 * *(unsigned __int16 *)(v5 + 2));
  result = 0;
  *(_WORD *)(v5 + 16) -= v10;
  v14 = *(unsigned __int16 *)(a1 + 32);
  if (v14 > a2)
  {
    result = 0;
    if (v12 <= v14)
      *(_WORD *)(a1 + 32) = v14 - v10;
    else
      *(_WORD *)(a1 + 32) = a2;
  }
  return result;
}

uint64_t isEsc(uint64_t a1, char *a2, unsigned int a3, int a4, _WORD *a5)
{
  int v7;
  uint64_t result;
  BOOL v9;
  int v10;
  _QWORD v11[3];
  int v12;

  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v7 = exePattern("esc", a1, a2, a3, a4, 0x2000, &v12, (uint64_t)v11, &v10, 0x3E7u);
  result = 0;
  if ((v7 & 0x80000000) == 0)
  {
    if (v12)
      v9 = LODWORD(v11[0]) == a4;
    else
      v9 = 0;
    if (v9)
    {
      *a5 = WORD2(v11[0]) - a4;
      return 1;
    }
  }
  return result;
}

uint64_t exePattern(const char *a1, uint64_t a2, char *a3, unsigned int a4, int a5, uint64_t a6, _DWORD *a7, uint64_t a8, _DWORD *a9, unsigned __int16 a10)
{
  unsigned int v12;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  int v22;
  __int128 v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  const char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;

  v12 = a6;
  v66 = *MEMORY[0x1E0C80C00];
  log_OutText(*(_QWORD *)(*(_QWORD *)a2 + 32), (uint64_t)"PP", 4, 0, (uint64_t)"exePattern for pattern: %s", a6, (uint64_t)a7, a8, (uint64_t)a1);
  *a7 = 0;
  v18 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
  if (a10 == 999)
  {
    v19 = *(unsigned __int16 *)(v18 + 48);
    if (!*(_WORD *)(v18 + 48))
      return 0;
    for (i = *(_QWORD *)(v18 + 56); strcmp(*(const char **)(i + 16), a1); i += 24)
    {
      if (!--v19)
        return 0;
    }
  }
  else
  {
    i = *(_QWORD *)(v18 + 40) + 24 * a10 + 8;
  }
  v21 = *(_QWORD *)i;
  if (!*(_QWORD *)i)
    return 0;
  if (*(unsigned __int16 *)(a2 + 48) >= a4)
    v22 = a4;
  else
    v22 = *(unsigned __int16 *)(a2 + 48);
  *(_QWORD *)&v23 = -1;
  *((_QWORD *)&v23 + 1) = -1;
  v41 = v23;
  v42 = v23;
  v43 = v23;
  v44 = v23;
  v45 = v23;
  v46 = v23;
  v47 = v23;
  v48 = v23;
  v49 = v23;
  v50 = v23;
  v51 = v23;
  v52 = v23;
  v53 = v23;
  v54 = v23;
  v55 = v23;
  v56 = v23;
  v57 = v23;
  v58 = v23;
  v59 = v23;
  v60 = v23;
  v61 = v23;
  v62 = v23;
  v63 = v23;
  v64 = v23;
  v65 = v23;
  v24 = nuance_pcre_exec(*(_QWORD **)(a2 + 24), *(_QWORD *)(a2 + 32), v21, 0, a3, v22, a5, v12, &v41, 100);
  if ((v24 & 0x80000000) != 0)
  {
    v30 = nuance_pcre_ErrorToLhError(v24);
    v29 = v30;
    if (v30 >> 20 != 2213)
      return v29;
    v35 = v30 & 0x1FFF;
    switch(v35)
    {
      case 10:
        v37 = *(_QWORD *)(*(_QWORD *)a2 + 32);
        v38 = 11002;
        v39 = 0;
        break;
      case 7778:
        return v29;
      case 20:
        return 0;
      default:
        v37 = *(_QWORD *)(*(_QWORD *)a2 + 32);
        v40 = "lhError";
        v39 = "%s%x";
        v38 = 11027;
        break;
    }
    log_OutPublic(v37, (uint64_t)"PP", v38, v39, v31, v32, v33, v34, v40);
    return v29;
  }
  if (!v24)
    return 0;
  *(_OWORD *)a8 = v41;
  v26 = v42;
  v25 = DWORD1(v42);
  *(_DWORD *)(a8 + 16) = v42;
  *(_DWORD *)(a8 + 20) = v25;
  if (v26 == -1 && v25 == -1)
  {
    v27 = DWORD2(v42);
    if (DWORD2(v42) != -1)
    {
      v28 = HIDWORD(v42);
      if (HIDWORD(v42) != -1)
      {
        *a9 = 1;
        *(_DWORD *)(a8 + 16) = v27;
        *(_DWORD *)(a8 + 20) = v28;
      }
    }
  }
  v29 = 0;
  *a7 = 1;
  return v29;
}

uint64_t isEscOrPartialEsc(uint64_t a1, char *a2, unsigned int a3, int a4, _WORD *a5)
{
  int v7;
  uint64_t result;
  int v9;
  int v10;
  _QWORD v11[3];
  int v12;

  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v7 = exePattern("esc", a1, a2, a3, a4, 40960, &v12, (uint64_t)v11, &v10, 0x3E7u);
  if ((v7 & 0x1FFF) == 0x1E62)
    return 2;
  v9 = v7;
  result = 0;
  if ((v9 & 0x80000000) == 0 && v12 && LODWORD(v11[0]) == a4)
  {
    *a5 = WORD2(v11[0]) - a4;
    return 1;
  }
  return result;
}

uint64_t escseqm_str2enumMapping(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1[1];
  v3 = *(_QWORD *)(v2 + 8);
  if (!*(_WORD *)(v3 + 64))
    return 0;
  v6 = 0;
  v7 = *(_QWORD *)(a2 + 8);
  while (1)
  {
    v8 = *(_QWORD *)(v3 + 72);
    if (*(_DWORD *)(v7 + 20) == *(_DWORD *)(v8 + 16 * v6))
      break;
LABEL_10:
    ++v6;
    v3 = *(_QWORD *)(v2 + 8);
    if (v6 >= *(unsigned __int16 *)(v3 + 64))
      return 0;
  }
  v9 = v8 + 16 * v6;
  v10 = *(const char **)(v7 + 40);
  if (!*(_WORD *)(v9 + 4))
  {
LABEL_9:
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v10);
    *(_QWORD *)(*(_QWORD *)(a2 + 8) + 40) = 0;
    v7 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(v7 + 20) = 0;
    v2 = a1[1];
    goto LABEL_10;
  }
  v11 = 0;
  v12 = (_QWORD *)(v9 + 8);
  v13 = 16 * *(unsigned __int16 *)(v9 + 4);
  while (!v10 || strcmp(*(const char **)(*v12 + v11), v10))
  {
    v11 += 16;
    if (v13 == v11)
      goto LABEL_9;
  }
  heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v10);
  *(_QWORD *)(*(_QWORD *)(a2 + 8) + 40) = 0;
  *(_DWORD *)(*(_QWORD *)(a2 + 8) + 40) = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 8) + 72)
                                                                            + 16 * v6
                                                                            + 8)
                                                                + v11
                                                                + 8);
  return 0;
}

uint64_t escseqm_get_token(_QWORD *a1, char *a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int *v25;
  int v26;
  _DWORD *v27;
  unsigned int v28;
  int v29;
  _BOOL4 v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  unsigned int v34;
  const char *v35;
  _DWORD *v36;
  unsigned int v37;
  int v38;
  int v39;
  char *v40;
  unsigned int v41;
  BOOL v42;
  uint64_t v43;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  int v52;
  _DWORD *v53;
  uint64_t v54;
  int v55;
  char *v56;
  unsigned int v57;
  int v58;
  int v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  int v71;
  unsigned int v72;
  int *v73;
  int v74;
  uint64_t v75;
  char *v77;
  int v78;
  unsigned int v79;
  _DWORD *v80;
  int v81;
  uint64_t v82;
  int v83;
  unsigned int v84[4];
  __int128 v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  _QWORD v94[3];
  int v95[3];

  v87 = 0;
  v88 = 0;
  v85 = 0uLL;
  v86 = 0;
  *a5 = 0;
  v10 = exePattern("esc", (uint64_t)a1, a2, a3, 0, 0, &v88, (uint64_t)&v85, &v87, 0x3E7u);
  if ((v10 & 0x80000000) != 0 || !v88)
    return v10;
  v12 = v85;
  v11 = DWORD1(v85);
  v13 = exePattern("enhancedescseq", (uint64_t)a1, a2, a3, SDWORD1(v85), 16, &v88, (uint64_t)&v85, &v87, 0x3E7u);
  if ((v13 & 0x80000000) != 0)
    return v13;
  if (v88 != 1)
  {
    v10 = exePattern("esctoi", (uint64_t)a1, a2, a3, v11, 16, &v88, (uint64_t)&v85, &v87, 0x3E7u);
    if ((v10 & 0x80000000) != 0 || v88 != 1)
      return v10;
    v31 = *(_QWORD *)(a4 + 8);
    v32 = DWORD1(v85);
    *(_DWORD *)(v31 + 20) = 7;
    *(_DWORD *)(v31 + 24) = v12;
    *(_DWORD *)(v31 + 28) = v32 - v12;
    *(_DWORD *)(v31 + 32) = v12;
    *(_DWORD *)(v31 + 36) = v12;
    if (*(_WORD *)(*(_QWORD *)(a1[1] + 8) + 64))
    {
      *(_QWORD *)(v31 + 40) = 0;
      if (*((_QWORD *)&v85 + 1) != -1)
      {
        v33 = *(_QWORD **)(*a1 + 8);
        v34 = a2[SDWORD2(v85)];
        if (v34 <= 0x5D)
        {
          if (v34 == 43)
          {
            v35 = (const char *)&unk_1DEC6689C;
            goto LABEL_78;
          }
          if (v34 == 62)
          {
            v35 = (const char *)&unk_1DEC668A0;
            goto LABEL_78;
          }
        }
        else
        {
          switch(v34)
          {
            case '^':
              v35 = "diacritized";
              goto LABEL_78;
            case 'h':
              v35 = "hil";
              goto LABEL_78;
            case 'j':
              v35 = "jeita";
LABEL_78:
              v55 = strlen(v35);
              *(_QWORD *)(*(_QWORD *)(a4 + 8) + 40) = heap_Calloc(v33, 1, (v55 + 1));
              v56 = *(char **)(*(_QWORD *)(a4 + 8) + 40);
              if (!v56)
                return 2147491850;
              strcpy(v56, v35);
              goto LABEL_80;
          }
        }
        v31 = *(_QWORD *)(a4 + 8);
LABEL_83:
        *(_DWORD *)(v31 + 20) = 0;
        return v10;
      }
    }
    else
    {
      v45 = a2[SDWORD2(v85)];
      if (v45 <= 0x5D)
      {
        if (v45 != 43)
        {
          if (v45 != 62)
            goto LABEL_83;
          v45 = 16;
        }
      }
      else
      {
        switch(v45)
        {
          case '^':
            v45 = 60;
            break;
          case 'h':
            v45 = 108;
            break;
          case 'j':
            break;
          default:
            goto LABEL_83;
        }
      }
      *(_DWORD *)(v31 + 40) = v45;
    }
LABEL_80:
    *a5 = 2;
    return v10;
  }
  v81 = v12;
  v80 = a5;
  v83 = DWORD1(v85);
  *(_QWORD *)v84 = v86;
  v91 = 0;
  v89 = 0;
  v90 = 0;
  v14 = DWORD2(v85);
  v15 = HIDWORD(v85);
  v82 = a4;
  *(_DWORD *)(*(_QWORD *)(a4 + 8) + 20) = 0;
  v16 = a1[1];
  v17 = *(_QWORD *)(v16 + 8);
  if (*(_WORD *)(v17 + 4))
  {
    v18 = 0;
    v19 = 0;
    v20 = (v15 - v14);
    v21 = (uint64_t)&a2[v14];
    while (1)
    {
      v22 = *(_QWORD *)(v17 + 8);
      if (strlen(*(const char **)(v22 + v18)) == v20 && *(_DWORD *)(v22 + v18 + 8) == 1)
      {
        v23 = LH_strnicmp(*(_QWORD *)(v22 + v18), v21, v20);
        v16 = a1[1];
        if (!v23)
          break;
      }
      ++v19;
      v17 = *(_QWORD *)(v16 + 8);
      v18 += 24;
      if (v19 >= *(unsigned __int16 *)(v17 + 4))
        goto LABEL_11;
    }
    v46 = *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8) + v18;
    v47 = *(_QWORD *)(v82 + 8);
    *(_DWORD *)(v47 + 20) = *(_DWORD *)(v46 + 12);
    *(_DWORD *)v82 = 0;
    v48 = *(_DWORD *)(v46 + 16);
    if (v48 != 9999)
    {
      *(_DWORD *)(v47 + 40) = v48;
      *(_DWORD *)v82 = 1;
    }
  }
LABEL_11:
  v24 = v82;
  v25 = *(int **)(v82 + 8);
  v25[6] = v12;
  v25[7] = v83 - v12;
  v25[8] = v12;
  v25[9] = v12;
  v26 = v25[5];
  if (v26 == 32)
  {
    if (getTrueEnd((uint64_t)a1, a2, a3, v84[0], &v84[1], 32, &v89))
    {
      v27 = *(_DWORD **)(v82 + 8);
      v28 = v84[1];
      v29 = v84[1] - v12 + 1;
      v27[6] = v12;
      v27[7] = v29;
      v27[8] = v12;
      v27[9] = v12;
      *v80 = 2;
      v10 = 0;
      if (v84[0] == v28)
      {
        v30 = *((_DWORD *)a1 + 14) == 0;
        *((_DWORD *)a1 + 14) = v30;
        *(_DWORD *)(*(_QWORD *)(v82 + 8) + 40) = v30;
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(v82 + 8) + 20) = 0;
      }
      goto LABEL_59;
    }
LABEL_54:
    v10 = 0;
    goto LABEL_59;
  }
  v36 = v80;
  if (v84[0] == v84[1])
  {
    if (v26 == 2)
    {
LABEL_26:
      v25[10] = 0;
      setDefaultArgIfAny((uint64_t)a1, v82);
LABEL_27:
      v10 = 0;
      goto LABEL_58;
    }
    v49 = *(_QWORD *)(a1[1] + 8);
    v50 = *(unsigned __int16 *)(v49 + 16);
    if (*(_WORD *)(v49 + 16))
    {
      v51 = *(int **)(v49 + 24);
      do
      {
        v52 = *v51;
        v51 += 3;
        if (v52 == v26)
          goto LABEL_26;
      }
      while (--v50);
    }
    if (!marker_hasNonConstCharPtrArg(v25[5]))
      goto LABEL_27;
    v13 = checkForDefaultArgs(a1, v82, &v91);
    *v80 = 2;
    if ((v13 & 0x80000000) == 0)
      goto LABEL_54;
    return v13;
  }
  v92 = 0;
  if (!getTrueEnd((uint64_t)a1, a2, a3, v84[0], &v84[1], v26, &v92))
  {
    v38 = 0;
    v91 = 0;
    v90 = 1;
    goto LABEL_56;
  }
  v37 = v84[1];
  v38 = v84[1] + 1;
  if (!v84[1])
    goto LABEL_36;
  v39 = 0;
  v40 = a2 - 1;
  while (1)
  {
    v41 = v40[v84[1]];
    v42 = v41 > 0x20;
    v43 = (1 << v41) & 0x100002600;
    if (v42 || v43 == 0)
      break;
    --v40;
    if (v84[1] == ++v39)
      goto LABEL_36;
  }
  v57 = v84[1] - v39;
  if (v84[1] - v39 <= v84[0])
  {
LABEL_36:
    if (marker_hasNonConstCharPtrArg(*(_DWORD *)(*(_QWORD *)(v82 + 8) + 20))
      || !*(_DWORD *)(*(_QWORD *)(v82 + 8) + 20))
    {
      v10 = checkForDefaultArgs(a1, v82, &v91);
      goto LABEL_38;
    }
    v91 = setDefaultArgIfAny((uint64_t)a1, v82);
    if (!v91)
      v91 = *(_DWORD *)(*(_QWORD *)(v82 + 8) + 20) == 13;
    goto LABEL_56;
  }
  v58 = *(_DWORD *)(*(_QWORD *)(v82 + 8) + 20);
  v59 = v92;
  if (v58 == 26 && v92 != 0)
  {
    v13 = parseStringArg((uint64_t)a1, v82, (uint64_t)a2, v84[0], v92, &v91, 0);
    if ((v13 & 0x80000000) != 0)
      return v13;
    v10 = parseStringArg((uint64_t)a1, v82, (uint64_t)a2, v59 + 1, v37 - v39, &v91, 1);
    goto LABEL_100;
  }
  v61 = *(_QWORD *)(a1[1] + 8);
  v62 = *(unsigned __int16 *)(v61 + 32);
  if (!*(_WORD *)(v61 + 32))
  {
LABEL_94:
    v12 = v81;
    if (marker_hasNonConstCharPtrArg(v58))
    {
LABEL_95:
      v13 = parseStringArg((uint64_t)a1, v82, (uint64_t)a2, v84[0], v37 - v39, &v91, 0);
      if ((v13 & 0x80000000) != 0)
        return v13;
      v66 = *(_QWORD *)(v82 + 8);
      if (!*(_DWORD *)(v66 + 20))
      {
        heap_Free(*(_QWORD **)(*a1 + 8), *(_QWORD *)(v66 + 40));
        *(_QWORD *)(*(_QWORD *)(v82 + 8) + 40) = 0;
      }
      goto LABEL_56;
    }
    v67 = *(_DWORD *)(*(_QWORD *)(v82 + 8) + 20);
    if (v67 == 2)
      goto LABEL_112;
    if (!v67)
      goto LABEL_95;
    v68 = *(_QWORD *)(a1[1] + 8);
    v69 = *(unsigned __int16 *)(v68 + 16);
    if (*(_WORD *)(v68 + 16))
    {
      v70 = *(int **)(v68 + 24);
      while (1)
      {
        v71 = *v70;
        v70 += 3;
        if (v71 == v67)
          break;
        if (!--v69)
          goto LABEL_111;
      }
LABEL_112:
      parseNumericArg((size_t)a1, v82, (uint64_t)a2, v84[0], v37 - v39, &v91, &v90);
      goto LABEL_56;
    }
LABEL_111:
    v91 = v67 == 13;
    v90 = 0;
    v36 = v80;
    v24 = v82;
    v12 = v81;
LABEL_56:
    v10 = 0;
    goto LABEL_57;
  }
  v63 = 0;
  v64 = *(_QWORD *)(v61 + 40);
  v65 = 16;
  while (*(_DWORD *)(v64 + v65 - 16) != v58)
  {
    ++v63;
    v65 += 24;
    if (v62 == v63)
      goto LABEL_94;
  }
  v95[0] = 0;
  memset(v94, 0, sizeof(v94));
  v10 = exePattern("dummy", (uint64_t)a1, &a2[v84[0]], (unsigned __int16)(LOWORD(v84[1]) - LOWORD(v84[0]) - v39), 0, 16, v95, (uint64_t)v94, &v93, v63);
  if ((v10 & 0x80000000) == 0)
  {
    v77 = &a2[v84[0]];
    if (v95[0] != 1)
      goto LABEL_120;
    if (v37 + LODWORD(v94[0]) - v84[0] - HIDWORD(v94[0]) == v39)
    {
      v91 = 1;
      v78 = v57;
      v79 = v84[0];
      goto LABEL_123;
    }
    if (*(_DWORD *)(*(_QWORD *)(v82 + 8) + 20) == 7
      && (v78 = HIDWORD(v94[0]) - LODWORD(v94[0]) + v84[0], v78 + 1 < v57)
      && (v72 = v78 + 1, utf8_BelongsToSet(8u, v77, HIDWORD(v94[0]), HIDWORD(v94[0]) + 1)))
    {
      do
      {
        if (!utf8_BelongsToSet(0, a2, v72, v72 + 1))
          break;
        v72 += utf8_determineUTF8CharLength(a2[v72]);
      }
      while (v72 < v57);
      v79 = v72;
      if (v37 - v72 != v39)
      {
        v73 = &v91;
LABEL_122:
        *v73 = 1;
        if (!v91)
        {
          if (*(_DWORD *)v82 == 1)
          {
            v91 = 1;
            v90 = 0;
          }
          goto LABEL_139;
        }
LABEL_123:
        v74 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 8) + 40) + v65);
        if (v74 == 1)
        {
          v13 = parseStringArg((uint64_t)a1, v82, (uint64_t)a2, v84[0], v78, &v91, 0);
          v10 = 0;
          if ((v13 & 0x80000000) != 0)
            return v13;
        }
        else if (!v74)
        {
          *(_DWORD *)(*(_QWORD *)(v82 + 8) + 40) = *v77;
        }
        if (v84[0] != v79 && v37 - v78 != v39)
        {
          v13 = parseStringArg((uint64_t)a1, v82, (uint64_t)a2, v79, v37 - v39, &v91, 1);
          if ((v13 & 0x80000000) != 0)
            return v13;
          v10 = 0;
        }
        if (!v91 && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 8) + 40) + v65) == 1)
        {
          v75 = *(_QWORD *)(*(_QWORD *)(v82 + 8) + 40);
          if (v75)
          {
            heap_Free(*(_QWORD **)(*a1 + 8), v75);
            v24 = v82;
            *(_QWORD *)(*(_QWORD *)(v82 + 8) + 40) = 0;
            v36 = v80;
LABEL_100:
            v12 = v81;
LABEL_38:
            if ((v10 & 0x80000000) != 0)
              return v10;
LABEL_57:
            v53 = *(_DWORD **)(v24 + 8);
            v53[6] = v12;
            v53[7] = v38 - v12;
            v53[8] = v12;
            v53[9] = v12;
            if (!v91)
            {
              v53[5] = 0;
              if (v90)
              {
LABEL_59:
                v54 = *(_QWORD *)(v24 + 8);
                if (*(_DWORD *)(v54 + 20) == 2)
                  *(_DWORD *)(v54 + 20) = 3;
                return v10;
              }
            }
LABEL_58:
            *v36 = 2;
            goto LABEL_59;
          }
        }
LABEL_139:
        v36 = v80;
        v24 = v82;
        goto LABEL_100;
      }
      v79 = v37 - v39;
    }
    else
    {
LABEL_120:
      v78 = v57;
      v79 = v84[0];
    }
    v91 = 0;
    v73 = &v90;
    goto LABEL_122;
  }
  return v10;
}

uint64_t escseqm_ClassOpen(_WORD *a1, int a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t inited;
  uint64_t v8;
  uint64_t *v9;
  int UInt;
  unsigned __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  unsigned __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  const char **v28;
  const char *v29;
  char *v30;
  const char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  size_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char *__s2;
  int v55;
  const char *v56;

  v3 = 2147491850;
  v53 = 0;
  v52 = 0;
  if (!a3)
    return 2147491847;
  v50 = 0;
  v51 = 0;
  inited = InitRsrcFunction(a1, a2, &v53);
  if ((inited & 0x80000000) != 0)
    return inited;
  v8 = heap_Calloc(*(_QWORD **)(v53 + 8), 1, 16);
  if (v8)
  {
    v9 = (uint64_t *)v8;
    UInt = paramc_ParamGetUInt(*(_QWORD *)(v53 + 40), (uint64_t)"ppmaxpcreframeblocks", (unsigned int *)&v52);
    v11 = v52;
    v12 = paramc_ParamGetUInt(*(_QWORD *)(v53 + 40), (uint64_t)"ppnumframesinblock", (unsigned int *)&v52);
    v13 = v52;
    v14 = nuance_pcre_ObjOpen(a1, a2, (uint64_t)&v50);
    if ((v14 & 0x80000000) != 0)
    {
      v3 = v14;
    }
    else
    {
      if (v12 < 0)
        v15 = 50;
      else
        v15 = v13;
      if (UInt < 0)
        v16 = 30;
      else
        v16 = v11;
      v17 = nuance_pcre_Init(v50, v51, v16, v15);
      v18 = v17;
      if ((v17 & 0x80000000) != 0)
      {
        v3 = v17;
      }
      else
      {
        *v9 = v53;
        v19 = heap_Calloc(*(_QWORD **)(v53 + 8), 1, 96);
        v9[1] = v19;
        if (v19)
        {
          v20 = v19;
          v47 = v9;
          v21 = v53;
          v23 = v50;
          v22 = v51;
          v56 = 0;
          v55 = 0;
          __s2 = 0;
          paramc_ParamGetStr(*(_QWORD *)(v53 + 40), (uint64_t)"__NUAN_alternative_esc_seq__", &__s2);
          *(_WORD *)(v20 + 4) = 34;
          v24 = (void *)heap_Calloc(*(_QWORD **)(v21 + 8), 1, 816);
          *(_QWORD *)(v20 + 8) = v24;
          if (v24)
          {
            memcpy(v24, &g_pEscMappings, 0x330uLL);
            *(_WORD *)(v20 + 16) = 9;
            v25 = (_OWORD *)heap_Calloc(*(_QWORD **)(v21 + 8), 9, 12);
            *(_QWORD *)(v20 + 24) = v25;
            if (v25)
            {
              v25[4] = xmmword_1DEC6684C;
              v25[5] = unk_1DEC6685C;
              *(_OWORD *)((char *)v25 + 92) = unk_1DEC66868;
              *v25 = g_pEscNumericArgs;
              v25[1] = unk_1DEC6681C;
              v25[2] = xmmword_1DEC6682C;
              v25[3] = unk_1DEC6683C;
              *(_WORD *)(v20 + 48) = 6;
              v26 = heap_Calloc(*(_QWORD **)(v21 + 8), 6, 24);
              *(_QWORD *)(v20 + 56) = v26;
              if (v26)
              {
                v27 = 0;
                v28 = (const char **)&off_1EA940118;
                v48 = v20;
                do
                {
                  v29 = *(v28 - 1);
                  *(_QWORD *)(*(_QWORD *)(v20 + 56) + v27 + 16) = v29;
                  v30 = __s2;
                  if (__s2 && *__s2 && !strcmp(v29, "esc"))
                  {
                    v49 = *(_QWORD **)(v21 + 8);
                    v31 = *v28;
                    v32 = v22;
                    v33 = v23;
                    v34 = v21;
                    v35 = strlen(*v28);
                    v36 = v35 + strlen(v30);
                    v21 = v34;
                    v23 = v33;
                    v22 = v32;
                    v20 = v48;
                    v37 = (char *)heap_Calloc(v49, 1, v36 + 2);
                    if (!v37)
                      goto LABEL_36;
                    v38 = v37;
                    strcpy(v37, v31);
                    v38[strlen(v31) - 1] = 0;
                    *(_WORD *)&v38[strlen(v38)] = 124;
                    v39 = strcat(v38, __s2);
                    *(_WORD *)&v38[strlen(v39)] = 41;
                    *(_QWORD *)(*(_QWORD *)(v48 + 56) + v27) = nuance_pcre_compile((uint64_t)v23, v22, v38, 2048, &v56, &v55, 0);
                    heap_Free(*(_QWORD **)(v21 + 8), (uint64_t)v38);
                  }
                  else
                  {
                    *(_QWORD *)(*(_QWORD *)(v20 + 56) + v27) = nuance_pcre_compile((uint64_t)v23, v22, (char *)*v28, 2048, &v56, &v55, 0);
                  }
                  v27 += 24;
                  v28 += 2;
                }
                while (v27 != 144);
                *(_WORD *)(v20 + 32) = 3;
                v40 = heap_Calloc(*(_QWORD **)(v21 + 8), 3, 24);
                *(_QWORD *)(v20 + 40) = v40;
                if (v40)
                {
                  v41 = 0;
                  v42 = *(_QWORD *)(v20 + 56);
                  v43 = v40 + 8;
                  do
                  {
                    *(_DWORD *)(v43 + 8) = 1;
                    *(_DWORD *)(v43 - 8) = *(_DWORD *)&g_pEscValidations[v41];
                    *(_QWORD *)v43 = *(_QWORD *)(v42 + 24 * g_pEscValidations[v41 + 4]);
                    v43 += 24;
                    v41 += 12;
                  }
                  while (v41 != 36);
                  *(_WORD *)(v20 + 64) = 2;
                  v44 = (_OWORD *)heap_Calloc(*(_QWORD **)(v21 + 8), 1, 32);
                  *(_QWORD *)(v20 + 72) = v44;
                  if (v44)
                  {
                    *v44 = g_escStr2EnumMappings;
                    v44[1] = unk_1EA940180;
                    *(_WORD *)(v20 + 80) = 5;
                    v45 = heap_Calloc(*(_QWORD **)(v21 + 8), 1, 120);
                    *(_QWORD *)(v20 + 88) = v45;
                    if (v45)
                    {
                      *(_OWORD *)(v45 + 64) = xmmword_1EA9401D0;
                      *(_OWORD *)(v45 + 80) = unk_1EA9401E0;
                      *(_OWORD *)(v45 + 96) = xmmword_1EA9401F0;
                      *(_QWORD *)(v45 + 112) = &g_escStr2StrMappings_mkEnumList_moderate;
                      *(_OWORD *)v45 = g_escStr2StrMappings;
                      *(_OWORD *)(v45 + 16) = *(_OWORD *)&off_1EA9401A0;
                      *(_OWORD *)(v45 + 32) = xmmword_1EA9401B0;
                      *(_OWORD *)(v45 + 48) = *(_OWORD *)&off_1EA9401C0;
                      *(_DWORD *)v20 = 1;
                      *a3 = v47;
LABEL_38:
                      nuance_pcre_DeInit(v50, v51);
                      nuance_pcre_ObjClose((uint64_t)v50, v51);
                      return v18;
                    }
                  }
                }
              }
            }
          }
LABEL_36:
          v3 = 2147491850;
        }
      }
    }
    escseqm_ClassClose(*a3);
    v18 = v3;
    goto LABEL_38;
  }
  return 10;
}

uint64_t escseqm_ClassClose(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1)
    return 7;
  v3 = *a1;
  v2 = a1[1];
  if (*(_DWORD *)v2 != 1)
    goto LABEL_24;
  v4 = *(_QWORD *)(v2 + 8);
  if (v4)
  {
    heap_Free(*(_QWORD **)(v3 + 8), v4);
    *(_QWORD *)(v2 + 8) = 0;
    *(_WORD *)(v2 + 4) = 0;
  }
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    heap_Free(*(_QWORD **)(v3 + 8), v5);
    *(_QWORD *)(v2 + 24) = 0;
    *(_WORD *)(v2 + 16) = 0;
  }
  v6 = *(_QWORD *)(v2 + 56);
  if (v6)
  {
    v7 = *(unsigned __int16 *)(v2 + 48);
    if (*(_WORD *)(v2 + 48))
    {
      v8 = 0;
      v9 = 0;
      do
      {
        if (*(_QWORD *)(v6 + v8))
        {
          heap_Free(*(_QWORD **)(v3 + 8), *(_QWORD *)(v6 + v8));
          v6 = *(_QWORD *)(v2 + 56);
          v7 = *(unsigned __int16 *)(v2 + 48);
        }
        v10 = (_QWORD *)(v6 + v8);
        *v10 = 0;
        v10[2] = 0;
        ++v9;
        v8 += 24;
      }
      while (v9 < v7);
    }
    heap_Free(*(_QWORD **)(v3 + 8), v6);
    *(_QWORD *)(v2 + 56) = 0;
  }
  v11 = *(_QWORD *)(v2 + 40);
  if (v11)
  {
    v12 = *(unsigned __int16 *)(v2 + 32);
    if (*(_WORD *)(v2 + 32))
    {
      v13 = (_QWORD *)(v11 + 8);
      do
      {
        *v13 = 0;
        v13 += 3;
        --v12;
      }
      while (v12);
    }
    heap_Free(*(_QWORD **)(v3 + 8), v11);
    *(_QWORD *)(v2 + 40) = 0;
  }
  v14 = *(_QWORD *)(v2 + 72);
  if (v14)
  {
    heap_Free(*(_QWORD **)(v3 + 8), v14);
    *(_QWORD *)(v2 + 72) = 0;
  }
  v15 = *(_QWORD *)(v2 + 88);
  if (v15)
    heap_Free(*(_QWORD **)(v3 + 8), v15);
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  v2 = a1[1];
  if (v2)
LABEL_24:
    heap_Free(*(_QWORD **)(v3 + 8), v2);
  heap_Free(*(_QWORD **)(v3 + 8), (uint64_t)a1);
  return 0;
}

uint64_t escseqm_ObjOpen(uint64_t a1, _WORD *a2, int a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char *v17;
  unsigned int v18;
  uint64_t v19;

  v19 = 0;
  v18 = 0;
  v17 = 0;
  v6 = 2147491847;
  if (a1)
  {
    if (a6)
    {
      inited = InitRsrcFunction(a2, a3, &v19);
      if ((inited & 0x80000000) == 0)
      {
        v12 = inited;
        *a6 = 0;
        v13 = heap_Calloc(*(_QWORD **)(v19 + 8), 1, 64);
        if (v13)
        {
          v14 = v13;
          *(_QWORD *)v13 = v19;
          *(_DWORD *)(v13 + 52) = 0;
          if (paramc_ParamGetStr(*(_QWORD *)(v19 + 40), (uint64_t)"processingtnplus", &v17))
            v15 = 1;
          else
            v15 = v17 == 0;
          if (!v15 && !LH_stricmp(v17, "yes"))
            *(_DWORD *)(v14 + 52) = 1;
          *(_DWORD *)(v14 + 56) = 0;
          *(_QWORD *)(v14 + 24) = a4;
          *(_QWORD *)(v14 + 32) = a5;
          *(_QWORD *)(v14 + 8) = a1;
          *(_QWORD *)(v14 + 16) = 0;
          *(_QWORD *)(v14 + 40) = *(_QWORD *)(a1 + 8);
          *(_WORD *)(v14 + 48) = 1024;
          if ((paramc_ParamGetUInt(*(_QWORD *)(v19 + 40), (uint64_t)"ppescseqmaxlength", &v18) & 0x80000000) == 0)
            *(_WORD *)(v14 + 48) = v18 + 32;
          *a6 = v14;
          return v12;
        }
        else
        {
          return 2147491850;
        }
      }
    }
  }
  return v6;
}

uint64_t escseqm_ObjClose(uint64_t *a1)
{
  uint64_t v1;

  if (!a1)
    return 2147491847;
  v1 = *a1;
  a1[5] = 0;
  heap_Free(*(_QWORD **)(v1 + 8), (uint64_t)a1);
  return 0;
}

uint64_t escseqm_ProcessStart(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 2147491847;
  result = 0;
  *(_DWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t escseqm_GetDefaults(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int hasNonConstCharPtrArg;
  _QWORD v11[2];
  int v12;

  v2 = 2147491847;
  v12 = 0;
  if (a1)
  {
    v5 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 2561);
    if (!v5)
      return 2147491850;
    v6 = v5;
    v11[0] = 0;
    v7 = v5 + 64;
    v8 = 1;
    while (1)
    {
      *(_DWORD *)(v7 + 20) = v8;
      v11[1] = v7;
      *(_DWORD *)v7 = 1;
      *(_QWORD *)(v7 + 8) = 0;
      if ((unsigned __int16)v8 <= 0xDu && ((1 << v8) & 0x2314) != 0)
        goto LABEL_6;
      hasNonConstCharPtrArg = marker_hasNonConstCharPtrArg(v8);
      checkForDefaultArgs(a1, (uint64_t)v11, &v12);
      if (hasNonConstCharPtrArg)
        break;
      if (v12)
      {
        if (*(_WORD *)(*(_QWORD *)(a1[1] + 8) + 64))
          escseqm_str2enumMapping(a1, (uint64_t)v11);
        goto LABEL_7;
      }
      *(_DWORD *)(v7 + 20) = v8;
      if (!setDefaultArgIfAny((uint64_t)a1, (uint64_t)v11))
        goto LABEL_6;
LABEL_7:
      ++v8;
      v7 += 64;
      if (v8 == 40)
      {
        v2 = 0;
        *a2 = v6;
        return v2;
      }
    }
    if (v12)
      goto LABEL_7;
LABEL_6:
    *(_DWORD *)(v7 + 20) = 0;
    goto LABEL_7;
  }
  return v2;
}

uint64_t checkForDefaultArgs(_QWORD *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  char *v16;
  uint64_t result;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v22;
  const char *MarkerArgStr;
  int v24;
  char *v25;
  const char *v26;
  uint64_t v27;

  *a3 = 0;
  v6 = *(_QWORD *)(a1[1] + 8);
  v7 = *(unsigned __int16 *)(v6 + 80);
  if (*(_WORD *)(v6 + 80))
  {
    v8 = 0;
    v9 = *(_QWORD *)(v6 + 88);
    while (1)
    {
      v10 = *(unsigned __int16 *)(v9 + 24 * v8 + 8);
      if (*(_WORD *)(v9 + 24 * v8 + 8))
        break;
LABEL_7:
      if (++v8 == v7)
      {
        v13 = *(_QWORD *)(a2 + 8);
        goto LABEL_18;
      }
    }
    v11 = *(unsigned __int16 **)(v9 + 24 * v8 + 16);
    while (1)
    {
      v12 = *v11++;
      if (*(_DWORD *)(*(_QWORD *)(a2 + 8) + 20) == v12)
        break;
      if (!--v10)
        goto LABEL_7;
    }
    v14 = *(_QWORD **)(*a1 + 8);
    v15 = strlen(*(const char **)(v9 + 24 * v8));
    *(_QWORD *)(*(_QWORD *)(a2 + 8) + 40) = heap_Calloc(v14, 1, (v15 + 1));
    v16 = *(char **)(*(_QWORD *)(a2 + 8) + 40);
    if (v16)
    {
      strcpy(v16, *(const char **)(*(_QWORD *)(*(_QWORD *)(a1[1] + 8) + 88) + 24 * v8));
      result = 0;
      *a3 = 1;
      return result;
    }
    return 2147491850;
  }
  v13 = *(_QWORD *)(a2 + 8);
  v18 = *(_DWORD *)(v13 + 20);
  v19 = v18 > 0x24;
  v20 = (1 << v18) & 0x1000201000;
  if (!v19 && v20 != 0)
  {
    v22 = *(_QWORD **)(*a1 + 8);
    MarkerArgStr = marker_getMarkerArgStr(1u);
    v24 = strlen(MarkerArgStr);
    *(_QWORD *)(*(_QWORD *)(a2 + 8) + 40) = heap_Calloc(v22, 1, (v24 + 1));
    v25 = *(char **)(*(_QWORD *)(a2 + 8) + 40);
    if (v25)
    {
      v26 = marker_getMarkerArgStr(1u);
      strcpy(v25, v26);
      result = 0;
      *a3 = 1;
      return result;
    }
    return 2147491850;
  }
LABEL_18:
  v27 = *(_QWORD *)(v13 + 40);
  if (v27)
  {
    heap_Free(*(_QWORD **)(*a1 + 8), v27);
    *(_QWORD *)(*(_QWORD *)(a2 + 8) + 40) = 0;
  }
  result = 0;
  *(_DWORD *)(*(_QWORD *)(a2 + 8) + 20) = 0;
  return result;
}

uint64_t setDefaultArgIfAny(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t result;
  BOOL v8;
  int v9;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = *(unsigned __int16 *)(v2 + 4);
  if (!*(_WORD *)(v2 + 4))
  {
LABEL_6:
    result = 0;
LABEL_7:
    *(_DWORD *)a2 = result;
    return result;
  }
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_DWORD *)(v4 + 20);
  v6 = (int *)(*(_QWORD *)(v2 + 8) + 16);
  while (v5 != *(v6 - 1) || *(v6 - 2) != 1)
  {
    v6 += 6;
    if (!--v3)
      goto LABEL_6;
  }
  if (*v6 != 9999)
  {
    if (*(_DWORD *)(a1 + 52))
      v8 = v5 == 8;
    else
      v8 = 0;
    if (v8)
      v9 = 29999;
    else
      v9 = *v6;
    *(_DWORD *)(v4 + 40) = v9;
    result = 1;
    goto LABEL_7;
  }
  return 0;
}

uint64_t escseqm_Match(_QWORD *a1, char *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  unsigned int v10;
  _QWORD v11[2];
  int v12;

  if (!a1 || !a2 || !a3 || !a4)
    return 2147491847;
  if (!**(_DWORD **)(a1[1] + 8))
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"PP", 1805, 0, a5, a6, a7, a8, v10);
    return 2147491847;
  }
  v12 = 0;
  v11[0] = 0;
  v11[1] = a4;
  result = escseqm_get_token(a1, a2, a3, (uint64_t)v11, &v12);
  if ((result & 0x1FFF) != 0xA)
  {
    if (v12 == 2)
    {
      if (*(_WORD *)(*(_QWORD *)(a1[1] + 8) + 64))
        escseqm_str2enumMapping(a1, (uint64_t)v11);
      return 0;
    }
    else
    {
      return 2147491840;
    }
  }
  return result;
}

uint64_t getTrueEnd(uint64_t a1, char *a2, unsigned int a3, int a4, unsigned int *a5, int a6, _DWORD *a7)
{
  uint64_t result;
  int v10;
  int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  BOOL v17;
  char v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  char v23;
  char v24;
  int v25;
  BOOL v26;
  char v29;
  int v30;
  __int16 v31;

  result = 0;
  *a7 = 0;
  if (a3 > (unsigned __int16)a4)
  {
    v10 = a4;
    v13 = 0;
    v14 = 0;
    v15 = (unsigned __int16)a4;
    v16 = a6 == 29;
    v17 = a6 != 26;
    if (a6 == 26)
      v16 = 1;
    if (a6 == 7)
      v17 = 0;
    v29 = v17;
    v30 = 0;
    v18 = a6 == 7 || v16;
    while (1)
    {
      if (!a2[(unsigned __int16)v10])
        return 0;
      v19 = isEsc(a1, a2, (unsigned __int16)(a3 - v10), v15, &v31);
      v20 = a2[(unsigned __int16)v10];
      if (v19)
      {
        if (v20 != 92)
          return 0;
      }
      else if (v20 != 92)
      {
        LODWORD(v21) = v15 + 1;
        goto LABEL_32;
      }
      v21 = v15 + 1;
      if (v21 < a3 && ((v22 = a2[v21], v22 == 92) || v22 == 34))
      {
        v23 = v29;
        if (v14 != 1)
          v23 = 1;
        if (a6 != 29 && (v23 & 1) != 0)
        {
LABEL_53:
          *a5 = v15;
          return 1;
        }
      }
      else
      {
        if (v14 == 1)
          v24 = v18;
        else
          v24 = 0;
        if ((v24 & 1) == 0)
          goto LABEL_53;
      }
      if (v21 < a3)
      {
        v25 = a2[v21];
        if (v25 == 92 || v25 == 34)
        {
          ++v10;
          goto LABEL_51;
        }
      }
      v20 = 92;
LABEL_32:
      if (a6 != 26 && a6 != 7 || v20 != 34)
        goto LABEL_51;
      if (v14 == 1)
      {
        if (v30 | v13)
        {
          v14 = 0;
          if (v13)
            v26 = 0;
          else
            v26 = v30 == 1;
          if (v26)
            v13 = 1;
          goto LABEL_51;
        }
        v14 = 0;
        v13 = 0;
        if (a2[v21] == 58)
          *a7 = v21;
      }
      else
      {
        if (v30 != 1)
        {
          v14 = 1;
          goto LABEL_51;
        }
        result = 0;
        if (a6 != 26 || v13 == 1)
          return result;
        v14 = 1;
      }
      v30 = 1;
LABEL_51:
      v15 = (unsigned __int16)++v10;
      if ((unsigned __int16)v10 >= a3)
        return 0;
    }
  }
  return result;
}

uint64_t parseStringArg(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, _DWORD *a6, int a7)
{
  size_t v13;
  char *v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int16 v19;
  char *v20;
  int v21;
  uint64_t v22;
  int v23;
  size_t v24;
  uint64_t v25;
  char **v26;
  uint64_t result;

  v13 = a5 - a4;
  v14 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, (v13 + 1));
  if (!v14)
    return 2147491850;
  v15 = v14;
  v16 = (unsigned __int16)v13;
  memcpy(v14, (const void *)(a3 + a4), v13);
  if ((_WORD)v13)
  {
    v17 = 0;
    v18 = 0;
    v19 = v13;
    do
    {
      if (v18)
      {
        v20 = &v15[(v18 - 1)];
        if (*v20 == 92)
        {
          v21 = v15[v18];
          if (v21 == 92 || v21 == 34)
          {
            memmove(v20, &v15[v18], v17 + v16);
            v15[v16 - 1] = 0;
            --v19;
          }
        }
      }
      ++v18;
      v16 = v19;
      --v17;
    }
    while (v18 < v19);
  }
  if (a7 == 1 || (v22 = *(_QWORD *)(a2 + 8), *(_DWORD *)(v22 + 20) == 26))
  {
    if (utf8_BelongsToSet(7u, v15, 0, v13))
    {
      v23 = strlen(v15);
      if (utf8_BelongsToSet(7u, v15, v23 - 1, v13))
      {
        v24 = strlen(v15);
        if (v24 != 1)
        {
          v25 = (unsigned __int16)v24;
          memmove(v15, v15 + 1, (unsigned __int16)v24 - 1);
          v15[v25 - 2] = 0;
        }
      }
    }
    if (a7 == 1)
    {
      v26 = (char **)(*(_QWORD *)(a2 + 8) + 48);
      if (!*v15)
      {
        *v26 = 0;
        *a6 = 0;
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v15);
        return 0;
      }
      goto LABEL_22;
    }
    v22 = *(_QWORD *)(a2 + 8);
  }
  v26 = (char **)(v22 + 40);
LABEL_22:
  result = 0;
  *v26 = v15;
  *a6 = 1;
  return result;
}

size_t parseNumericArg(size_t result, uint64_t a2, uint64_t a3, unsigned int a4, int a5, _DWORD *a6, _DWORD *a7)
{
  _DWORD *v7;
  unint64_t v8;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  char __s[16];
  uint64_t v26;

  v7 = a7;
  v26 = *MEMORY[0x1E0C80C00];
  *a7 = 0;
  *a6 = 0;
  v8 = a5 - a4;
  if (v8 <= 0xA && a3)
  {
    v11 = result;
    v12 = 0;
    v13 = a3 + a4;
    memset(__s, 0, 11);
    do
    {
      v14 = *(unsigned __int8 *)(v13 + v12);
      __s[v12] = v14;
      result = strlen(__s);
      if (v14)
      {
        v15 = result;
        result = utf8_BelongsToSet(6u, __s, v12, result);
        if ((_DWORD)result)
        {
          result = utf8_BelongsToSet(0, __s, v12, v15);
          if (!(_DWORD)result)
            goto LABEL_7;
        }
      }
      goto LABEL_21;
LABEL_7:
      if (v12 + 1 >= v8)
        break;
      if (v12 > 8)
        break;
    }
    while (__s[v12++]);
    v17 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 20);
    if (v17 == 2)
    {
      v18 = v13;
      v19 = v8;
      v20 = 0;
      v21 = 1;
LABEL_20:
      result = escseqm_ReadU32InRange(v18, v19, v20, v21);
      *(_DWORD *)(*(_QWORD *)(a2 + 8) + 40) = result;
      v7 = a6;
      goto LABEL_21;
    }
    v22 = *(_QWORD *)(*(_QWORD *)(v11 + 8) + 8);
    v23 = *(unsigned __int16 *)(v22 + 16);
    if (*(_WORD *)(v22 + 16))
    {
      v24 = (unsigned int *)(*(_QWORD *)(v22 + 24) + 8);
      while (*(v24 - 2) != v17)
      {
        v24 += 3;
        if (!--v23)
          goto LABEL_16;
      }
      v20 = *(v24 - 1);
      v21 = *v24;
      v18 = v13;
      v19 = v8;
      goto LABEL_20;
    }
LABEL_16:
    if (*(_DWORD *)a2 == 1)
      v7 = a6;
  }
LABEL_21:
  *v7 = 1;
  return result;
}

uint64_t escseqm_ReadU32InRange(uint64_t a1, int a2, unsigned int a3, unsigned int a4)
{
  int64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v10;
  unsigned int v11;
  char *v13;
  char __str[16];
  uint64_t v15;

  v6 = 0;
  v15 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)&__str[7] = 0;
  v13 = 0;
  *(_QWORD *)__str = 0;
  do
  {
    v7 = v6;
    v8 = *(unsigned __int8 *)(a1 + v6);
    __str[v6++] = v8;
    if (v7 > 8)
      break;
  }
  while (v8 && v6 < a2);
  __str[v6] = 0;
  v10 = strtoul(__str, &v13, 10);
  if (v10 >= a4)
    v11 = a4;
  else
    v11 = v10;
  if (v10 >= a3)
    return v11;
  else
    return a3;
}

uint64_t escseqs_ClassOpen(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v6 = 2147491847;
  v11 = 0;
  if ((InitRsrcFunction(a1, a2, &v11) & 0x80000000) == 0)
  {
    v7 = heap_Calloc(*(_QWORD **)(v11 + 8), 1, 32);
    if (v7)
    {
      v8 = v7;
      v9 = v11;
      *(_QWORD *)(v7 + 8) = a2;
      *(_QWORD *)(v7 + 16) = v9;
      *(_QWORD *)v7 = a1;
      v6 = escseqm_ClassOpen(a1, a2, (uint64_t **)(v7 + 24));
      if ((v6 & 0x80000000) != 0)
        heap_Free(*(_QWORD **)(v11 + 8), v8);
      else
        *a3 = v8;
    }
    else
    {
      return 2147491850;
    }
  }
  return v6;
}

uint64_t escseqs_ClassClose(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (!a1)
    return 2147491847;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = escseqm_ClassClose(*(uint64_t **)(a1 + 24));
  if ((v3 & 0x80000000) == 0)
    heap_Free(*(_QWORD **)(v2 + 8), a1);
  return v3;
}

uint64_t escseqs_ObjOpen(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v29;
  uint64_t *v30;

  v29 = 0;
  v30 = 0;
  v6 = 2147491847;
  if (a6 && (InitRsrcFunction(a2, a3, &v30) & 0x80000000) == 0)
  {
    *a6 = 0;
    v13 = heap_Alloc(v30[1], 96);
    if (!v13)
      return 2147491850;
    v14 = v13;
    *(_OWORD *)(v13 + 80) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_OWORD *)v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 64) = 0u;
    *(_QWORD *)(v13 + 72) = a1;
    *(_QWORD *)v13 = a2;
    *(_QWORD *)(v13 + 8) = a3;
    v15 = escseqm_ObjOpen(*(_QWORD *)(a1 + 24), a2, a3, a4, a5, (uint64_t *)(v13 + 64));
    if ((v15 & 0x80000000) != 0)
    {
      v20 = v15;
      heap_Free((_QWORD *)v30[1], v14);
      return v20;
    }
    if ((objc_GetObject(v30[6], (uint64_t)"AUDIOFETCHER", &v29) & 0x80000000) == 0)
    {
      v16 = v29;
      if (*(_BYTE *)v29 != 1 || (v17 = *(_QWORD *)(v29 + 8)) == 0)
      {
        v21 = v30[6];
        v22 = "AUDIOFETCHER";
LABEL_18:
        objc_ReleaseObject(v21, (uint64_t)v22);
        log_OutPublic(v30[4], (uint64_t)&modESCPP, 2574, 0, v23, v24, v25, v26, v29);
        v27 = escseqs_ObjClose(v14);
        if (v27 < 0)
          return v27;
        else
          return 2147491853;
      }
      *(_QWORD *)(v14 + 32) = v17;
      *(_OWORD *)(v14 + 16) = *(_OWORD *)(v16 + 16);
    }
    if ((objc_GetObject(v30[6], (uint64_t)"LANGCODECONVERTER", &v29) & 0x80000000) != 0)
    {
LABEL_13:
      v6 = 0;
      *a6 = v14;
      return v6;
    }
    v18 = v29;
    if (*(_BYTE *)v29 == 1)
    {
      v19 = *(_QWORD *)(v29 + 8);
      if (v19)
      {
        *(_QWORD *)(v14 + 56) = v19;
        *(_OWORD *)(v14 + 40) = *(_OWORD *)(v18 + 16);
        goto LABEL_13;
      }
    }
    v21 = v30[6];
    v22 = "LANGCODECONVERTER";
    goto LABEL_18;
  }
  return v6;
}

uint64_t escseqs_ObjClose(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v5;

  v1 = 2147491847;
  v5 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v5) & 0x80000000) == 0)
  {
    v3 = *(uint64_t **)(a1 + 64);
    if (v3)
      escseqm_ObjClose(v3);
    if (*(_QWORD *)(a1 + 56))
      objc_ReleaseObject(*(_QWORD *)(v5 + 48), (uint64_t)"LANGCODECONVERTER");
    if (*(_QWORD *)(a1 + 32))
      objc_ReleaseObject(*(_QWORD *)(v5 + 48), (uint64_t)"AUDIOFETCHER");
    heap_Free(*(_QWORD **)(v5 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t escseqs_SetMarkerSyncPos(uint64_t a1, int a2)
{
  if (!a1)
    return 2147491847;
  *(_DWORD *)(a1 + 80) = a2;
  *(_DWORD *)(a1 + 84) = a2;
  *(_DWORD *)(a1 + 92) = 1;
  return escseqm_ProcessStart(*(_QWORD *)(a1 + 64));
}

uint64_t escseqs_SetReset(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 2147491847;
  result = 0;
  *(_QWORD *)(a1 + 88) = 0x100000000;
  return result;
}

uint64_t escseqs_GetPosInOut(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  *a2 = *(_DWORD *)(result + 80);
  *a3 = *(_DWORD *)(result + 84);
  return result;
}

uint64_t escseqs_SetPosInOut(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(result + 80) = a2;
  *(_DWORD *)(result + 84) = a3;
  return result;
}

uint64_t escseqs_ProcessStart(uint64_t a1, _DWORD *a2)
{
  uint64_t Defaults;
  uint64_t v5;
  uint64_t i;
  int v7;
  uint64_t v8;
  unsigned int v10;
  char *__s1;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  Defaults = 2147491847;
  __s1 = 0;
  v10 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v12) & 0x80000000) == 0)
  {
    if ((paramc_ParamGetStr(*(_QWORD *)(v12 + 40), (uint64_t)"component_stop_not_reset", &__s1) & 0x80000000) == 0
      && __s1
      && !strcmp(__s1, "yes"))
    {
      paramc_ParamSetStr(*(_QWORD *)(v12 + 40), (uint64_t)"component_stop_not_reset", &byte_1DEBD87CE);
    }
    else if ((paramc_ParamGetUInt(*(_QWORD *)(v12 + 40), (uint64_t)"pipelineswitchexecuting", &v10) & 0x80000000) != 0
           || !v10)
    {
      *(_QWORD *)(a1 + 80) = 0;
      *(_DWORD *)(a1 + 92) = 0;
    }
    paramc_ParamSetUInt(*(_QWORD *)(v12 + 40), (uint64_t)"pipelineswitchexecuting", 0);
    v5 = escseqm_ProcessStart(*(_QWORD *)(a1 + 64));
    if ((v5 & 0x80000000) != 0)
    {
      Defaults = v5;
    }
    else
    {
      Defaults = escseqm_GetDefaults(*(_QWORD **)(a1 + 64), &v13);
      if ((Defaults & 0x80000000) == 0)
      {
        for (i = 104; i != 2600; i += 64)
        {
          v7 = *(_DWORD *)(v13 + i - 20);
          if (v7 == 31)
            *a2 = *(_DWORD *)(v13 + i);
          if (marker_hasNonConstCharPtrArg(v7))
          {
            v8 = *(_QWORD *)(v13 + i);
            if (v8)
            {
              heap_Free(*(_QWORD **)(v12 + 8), v8);
              *(_QWORD *)(v13 + i) = 0;
            }
          }
        }
      }
    }
    if (v13)
      heap_Free(*(_QWORD **)(v12 + 8), v13);
  }
  return Defaults;
}

uint64_t escseqs_Process(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t appended;
  char *v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t UInt;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t Str;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  _BOOL4 v33;
  unsigned int v34;
  char *v35;
  uint64_t v36;
  int v38;
  int v39;
  char *v40;
  unsigned int v41;
  char *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  unsigned __int8 *v50;
  int v51;
  unsigned __int8 *v52;
  int v53;
  unsigned int i;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  unint64_t v59;
  BOOL v60;
  int v61;
  unsigned __int8 *v62;
  __int16 v63;
  int v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  char *v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  char v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  char v83;
  int v84;
  const float *v85;
  int32x4_t v86;
  int v88;
  int v89;
  int v90;
  unsigned __int16 v91;
  uint64_t v92;
  uint64_t (*v93)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, __int128 *);
  uint64_t NullHandle;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t inserted;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  int v112;
  uint64_t v113;
  _DWORD *v114;
  int v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int16 v119;
  int *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  int v125;
  _BOOL4 v126;
  unsigned __int16 v127;
  int v128;
  uint64_t v129;
  _DWORD *v130;
  int v131;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  BOOL v136;
  int v137;
  unsigned __int16 v138;
  unsigned int v139;
  unsigned int v140;
  int v141;
  _BOOL4 v142;
  int v143;
  char *v144;
  int v145;
  int v146;
  int v147;
  unint64_t v148;
  uint64_t v149;
  int v150;
  int v151;
  int v152;
  _BOOL4 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  unsigned __int8 *v158;
  char *__s;
  char *__s1;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  unsigned __int16 v175[8];

  v173 = 0;
  v174 = 0;
  v2 = 2147491847;
  __s = 0;
  __s1 = 0;
  v158 = 0;
  v169 = 0u;
  v170 = 0u;
  v171 = 0u;
  v172 = 0u;
  v165 = 0u;
  v166 = 0x200000000uLL;
  v167 = 0u;
  v168 = 0u;
  LODWORD(v165) = 1;
  DWORD2(v168) = 0;
  *(_QWORD *)&v167 = 0;
  v164 = 0u;
  v161 = 0u;
  v162 = 0x2400000000uLL;
  DWORD2(v164) = 0;
  v163 = 0uLL;
  if (!a1 || !a2 || (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v174) & 0x80000000) != 0)
    return v2;
  appended = datac_RequestBlock(a2, 1000, 1u, &v173);
  if ((appended & 0x80000000) != 0)
    return appended;
  v6 = *(char **)(v173 + 8);
  if (!v6)
    return v2;
  if (*(_WORD *)(v173 + 2) != 1)
    return 2147491865;
  LODWORD(v169) = 0;
  LOWORD(v170) = 0;
  *((_QWORD *)&v169 + 1) = 0;
  v7 = *(_DWORD *)(a1 + 80);
  v8 = *(_DWORD *)(a1 + 84);
  DWORD1(v170) = 0x4000;
  *((_QWORD *)&v170 + 1) = v7;
  LODWORD(v171) = v8;
  *(_QWORD *)((char *)&v171 + 4) = 0;
  DWORD2(v172) = 0;
  *(_QWORD *)&v172 = 0;
  appended = escseqs_AppendOutMarker(a2, &v169);
  if ((appended & 0x80000000) != 0)
    return appended;
  if ((paramc_ParamGetStr(*(_QWORD *)(v174 + 40), (uint64_t)"textanalysison", &__s1) & 0x80000000) == 0)
  {
    if (__s1)
    {
      if (*__s1)
      {
        v9 = strcmp(__s1, "yes");
        if (!(DWORD2(v170) | v9))
        {
          v35 = (char *)heap_Calloc(*(_QWORD **)(v174 + 8), 1, 12);
          if (!v35)
            return 2147491850;
          v36 = (uint64_t)v35;
          strcpy(v35, "ins_unknown");
          *((_QWORD *)&v162 + 1) = 0;
          *(_QWORD *)&v163 = 0;
          *((_QWORD *)&v163 + 1) = v35;
          appended = escseqs_AppendOutMarker(a2, &v161);
          if ((appended & 0x80000000) != 0)
            return appended;
          heap_Free(*(_QWORD **)(v174 + 8), v36);
        }
      }
    }
  }
  *(_QWORD *)&v154 = 0;
  *(_QWORD *)v175 = 0;
  appended = datac_RequestBlock(a2, 1011, 1u, &v154);
  if ((appended & 0x80000000) != 0)
    return appended;
  appended = datac_RequestBlock(a2, 1012, 1u, v175);
  if ((appended & 0x80000000) != 0)
    return appended;
  if (*(_DWORD *)(a1 + 92) == 1)
  {
    v10 = 0;
    LODWORD(v154) = 0;
    *(_DWORD *)(a1 + 92) = 0;
    do
    {
      v11 = aTAG2PARAM_0[v10];
      if ((int)v11 > 30)
      {
        if ((_DWORD)v11 != 36)
        {
          if ((_DWORD)v11 != 31)
            goto LABEL_32;
LABEL_22:
          UInt = paramc_ParamGetUInt(*(_QWORD *)(v174 + 40), *(_QWORD *)&aTAG2PARAM_0[v10 + 2], (unsigned int *)&v154);
          if ((UInt & 0x1FFF) != 0x14)
          {
            v16 = UInt;
            if ((UInt & 0x80000000) != 0)
              goto LABEL_281;
            log_OutText(*(_QWORD *)(v174 + 32), (uint64_t)&modESCPP, 4, 0, (uint64_t)"[ESCSEQS] GET PARAM marker:%d param=%s val=%d", v13, v14, v15, v11);
            LODWORD(v169) = 1;
            v17 = *(_DWORD *)(a1 + 80);
            v18 = *(_DWORD *)(a1 + 84);
            DWORD1(v170) = v11;
            *((_QWORD *)&v170 + 1) = v17;
            *(_QWORD *)&v171 = v18;
            DWORD2(v171) = v154;
            DWORD2(v172) = 0;
            *(_QWORD *)&v172 = 0;
            v19 = escseqs_AppendOutMarker(a2, &v169);
            if ((v19 & 0x80000000) != 0)
              goto LABEL_280;
          }
          goto LABEL_32;
        }
      }
      else
      {
        if ((_DWORD)v11 == 7)
          goto LABEL_22;
        if ((_DWORD)v11 != 21)
          goto LABEL_32;
      }
      Str = paramc_ParamGetStr(*(_QWORD *)(v174 + 40), *(_QWORD *)&aTAG2PARAM_0[v10 + 2], &__s);
      if ((Str & 0x1FFF) != 0x14)
      {
        v16 = Str;
        if ((Str & 0x80000000) != 0)
          goto LABEL_281;
        log_OutText(*(_QWORD *)(v174 + 32), (uint64_t)&modESCPP, 4, 0, (uint64_t)"[ESCSEQS] GET PARAM marker:%d param=%s val=%s", v21, v22, v23, v11);
        v24 = (unsigned __int16)strlen(__s);
        v25 = (char *)heap_Calloc(*(_QWORD **)(v174 + 8), 1, v24 + 1);
        if (!v25)
          return 2147491850;
        v26 = (uint64_t)v25;
        v27 = strncpy(v25, __s, v24);
        v27[v24] = 0;
        LODWORD(v169) = 1;
        v28 = *(_DWORD *)(a1 + 80);
        v29 = *(_DWORD *)(a1 + 84);
        DWORD1(v170) = v11;
        *((_QWORD *)&v170 + 1) = v28;
        *(_QWORD *)&v171 = v29;
        *((_QWORD *)&v171 + 1) = v27;
        v30 = escseqs_AppendOutMarker(a2, &v169);
        if ((v30 & 0x80000000) != 0)
        {
          v16 = v30;
          heap_Free(*(_QWORD **)(v174 + 8), v26);
          goto LABEL_281;
        }
        heap_Free(*(_QWORD **)(v174 + 8), v26);
      }
      paramc_ParamRelease(*(_QWORD *)(v174 + 40));
      __s = 0;
LABEL_32:
      v10 += 4;
    }
    while (v10 != 16);
  }
  v31 = (unint64_t)&v6[*(unsigned __int16 *)(v173 + 16)];
  v32 = v6;
  if (*(_DWORD *)(a1 + 88))
  {
    v32 = v6;
    if (*(_WORD *)(v173 + 16))
    {
      v33 = 0;
      v32 = v6;
      while (1)
      {
        v34 = *v32;
        if (!v33 && v34 == 92)
          break;
        if (v34 == 34)
          v33 = !v33;
        v32 += utf8_determineUTF8CharLength(v34);
        if ((unint64_t)(v32 + 1) > v31)
          goto LABEL_49;
      }
      v32 += utf8_determineUTF8CharLength(0x5Cu);
      *(_DWORD *)(a1 + 88) = 0;
    }
  }
LABEL_49:
  DWORD1(v170) = 0;
  v38 = *(unsigned __int16 *)(v173 + 16);
  v153 = 1;
  if ((paramc_ParamGetStr(*(_QWORD *)(v174 + 40), (uint64_t)"clcpppipelinemode", &v158) & 0x80000000) == 0 && v158)
    v153 = *v158 == 0;
  v148 = v31;
  if ((unint64_t)&v32[utf8_determineUTF8CharLength(*v32)] > v31)
  {
    LOWORD(v39) = 0;
LABEL_54:
    v40 = v32;
    goto LABEL_250;
  }
  v141 = 0;
  v142 = 0;
  v39 = 0;
  while (1)
  {
    if (v38 != *(unsigned __int16 *)(v173 + 16))
      goto LABEL_54;
    v150 = v39;
    v151 = v38;
    v175[0] = 0;
    v41 = utf8_determineUTF8CharLength(*v32);
    if (v41)
    {
      v40 = v32;
      while (1)
      {
        v42 = &v40[v41];
        if ((unint64_t)v42 > v31
          || isEsc(*(_QWORD *)(a1 + 64), v40, (unsigned __int16)(v31 - (_WORD)v40), 0, v175))
        {
          v42 = v40;
          goto LABEL_69;
        }
        LOWORD(v154) = 0;
        if (v153
          && isEscOrPartialEsc(*(_QWORD *)(a1 + 64), v40, (unsigned __int16)(v31 - (_WORD)v40), 0, &v154) == 2)
        {
          goto LABEL_248;
        }
        if ((unint64_t)v42 >= v31)
          break;
        v41 = utf8_determineUTF8CharLength(*v42);
        v40 = v42;
        if (!v41)
          goto LABEL_69;
      }
      v41 = 0;
    }
    else
    {
      v42 = v32;
    }
LABEL_69:
    v175[0] = 0;
    v149 = v31 - (_QWORD)v42;
    v43 = isEsc(*(_QWORD *)(a1 + 64), v42, (unsigned __int16)(v31 - (_WORD)v42), 0, v175);
    v48 = !v175[0] || v43 == 0;
    v49 = v48 ? 0 : v175[0] - 1;
    if (!v41 || (unint64_t)&v42[v41 + v49] > v31)
      break;
    v50 = (unsigned __int8 *)&v42[v49 + 1];
    v39 = v150;
    if ((unint64_t)v50 < v31)
    {
      v51 = *v50;
      v52 = (unsigned __int8 *)&v42[v49 + 2];
      if (v51 == 47)
      {
        v53 = v50[1];
        if ((v53 - 43) <= 0x3F && ((1 << (v53 - 43)) & 0xA008000000080001) != 0)
        {
          for (i = v50[1]; (unint64_t)&v52[utf8_determineUTF8CharLength(i) + 2] <= v31; i = *v52)
          {
            v56 = *v52;
            if (v56 == 47)
            {
              v57 = v52[1] - 43;
              v58 = v57 > 0x3F;
              v59 = (1 << v57) & 0xA008000000080001;
              v60 = v58 || v59 == 0;
              if (!v60 && v42[2] == v53)
                break;
            }
            v52 += utf8_determineUTF8CharLength(v56);
          }
          v142 = v53 != 0;
          if ((unint64_t)(v52 + 1) <= v31)
          {
            v39 = v150;
          }
          else
          {
            v39 = v150;
            if (!*(_DWORD *)(v173 + 20))
              v151 = (unsigned __int16)((_WORD)v42 - (_WORD)v6);
          }
          v61 = v151;
LABEL_179:
          if (!v61)
            return 2147491849;
          goto LABEL_180;
        }
      }
      else if (v51 == 92)
      {
        while ((unint64_t)(v52 + 1) <= v31
             && utf8_BelongsToSet(0, v52, 0, *(unsigned __int16 *)(v173 + 16)))
          v52 += utf8_determineUTF8CharLength(*v52);
        v62 = v52;
        if ((unint64_t)&v52[utf8_determineUTF8CharLength(*v52) + 1] <= v31)
        {
          v62 = v52;
          do
          {
            if (utf8_BelongsToSet(0, v62, 0, *(unsigned __int16 *)(v173 + 16)))
              break;
            v67 = *v62;
            if (v67 == 61)
              break;
            if (v67 == 92)
              break;
            v62 += utf8_determineUTF8CharLength(v67);
          }
          while ((unint64_t)&v62[utf8_determineUTF8CharLength(*v62) + 1] <= v31);
        }
        WORD2(v154) = 0;
        LODWORD(v154) = 0;
        v63 = (_WORD)v62 - (_WORD)v52;
        if ((unsigned __int16)((_WORD)v62 - (_WORD)v52) > 6uLL)
          v63 = 6;
        v144 = v6;
        if (v63)
        {
          __strncpy_chk();
          if (LH_stricmp((char *)&v154, "audio"))
          {
            if (LH_stricmp((char *)&v154, "mrk"))
            {
              v64 = LH_stricmp((char *)&v154, "toi");
              v65 = 0;
              v147 = 0;
              v66 = v64 == 0;
              goto LABEL_119;
            }
            v65 = 0;
            v66 = 0;
            v143 = 0;
            v145 = 1;
            v147 = 1;
LABEL_122:
            v68 = (char *)(v62 + 1);
            if ((unint64_t)(v62 + 1) > v31)
            {
LABEL_123:
              v6 = v144;
              if (!*(_DWORD *)(v173 + 20))
                v151 = (unsigned __int16)((_WORD)v42 - (_WORD)v144);
LABEL_175:
              v39 = v150;
              v61 = v151;
              v83 = v145 ^ 1;
              if (v151)
                v83 = 1;
              if ((v83 & 1) == 0)
              {
                v61 = 0;
                *(_DWORD *)(a1 + 88) = 1;
                goto LABEL_180;
              }
              goto LABEL_179;
            }
            v69 = 0;
            v70 = 0;
            v146 = v65;
            while (2)
            {
              v71 = *v62;
              if (!(_DWORD)v70 && v71 == 92)
              {
                v72 = v143;
                if ((_DWORD)v66)
                  v72 = 0;
                if ((v145 & v72 & 1) != 0
                  || ((_DWORD)v66 == 1 ? (v73 = 1) : (v73 = v65),
                      v69 == 1
                   && v147 | v73
                   && ((unint64_t)v68 >= v31 || (v74 = *v68, v74 != 92) && v74 != 34)))
                {
                  v6 = v144;
                  goto LABEL_175;
                }
              }
              if (v71 == 34)
                v75 = v65;
              else
                v75 = 0;
              if ((v75 & 1) != 0)
              {
                v70 = (_DWORD)v70 != 1;
                v71 = 34;
                if (!v69)
                  goto LABEL_169;
LABEL_158:
                if ((_DWORD)v70 == 1)
                  v80 = v65;
                else
                  v80 = 0;
                if (((v147 | v80) & 1) == 0 && (_DWORD)v66 != 1)
                {
                  v77 = v70;
                  v78 = v66;
                  v69 = 1;
                  goto LABEL_170;
                }
                v69 = 1;
                if (v71 == 92 && (unint64_t)v68 < v31)
                {
                  v81 = *v68;
                  if (v81 == 34 || v81 == 92)
                  {
                    v82 = 2;
                    goto LABEL_171;
                  }
                  v77 = v70;
                  v78 = v66;
                  v71 = 92;
                }
                else
                {
LABEL_169:
                  v77 = v70;
                  v78 = v66;
                }
              }
              else
              {
                if (v69)
                  goto LABEL_158;
                if (v71 == 61)
                {
                  v139 = v70;
                  v140 = v66;
                  if ((unint64_t)(v68 + 1) <= v31)
                  {
                    v76 = v68;
                    do
                    {
                      if (!utf8_BelongsToSet(0, v76, 0, *(unsigned __int16 *)(v173 + 16)))
                        break;
                      v76 += utf8_determineUTF8CharLength(*v76);
                    }
                    while ((unint64_t)(v76 + 1) <= v31);
                    v71 = *v62;
                  }
                  else
                  {
                    v71 = 61;
                    v76 = v68;
                  }
                  v79 = strncmp(v76, "orth", 4uLL);
                  v70 = v139;
                  if (v79)
                    v66 = v140;
                  else
                    v66 = 0;
                  v65 = v146;
                  goto LABEL_158;
                }
                v77 = v70;
                v78 = v66;
                v69 = 0;
              }
LABEL_170:
              v82 = utf8_determineUTF8CharLength(v71);
              v66 = v78;
              v65 = v146;
              v70 = v77;
              v31 = v148;
LABEL_171:
              v62 += v82;
              v68 = (char *)(v62 + 1);
              if ((unint64_t)(v62 + 1) > v31)
                goto LABEL_123;
              continue;
            }
          }
          v145 = 0;
          v66 = 0;
          v147 = 0;
          v65 = 1;
        }
        else
        {
          v65 = 0;
          v66 = 0;
          v147 = 0;
LABEL_119:
          v145 = 1;
        }
        v143 = 1;
        goto LABEL_122;
      }
      v39 = v150;
      if (v149 > 11)
        goto LABEL_98;
    }
    if (*(_DWORD *)(v173 + 20))
    {
LABEL_98:
      v61 = v38;
      goto LABEL_180;
    }
    v61 = (unsigned __int16)((_WORD)v42 - (_WORD)v6);
LABEL_180:
    v152 = v61;
    if (v61 != *(unsigned __int16 *)(v173 + 16))
    {
      v40 = v42;
      goto LABEL_250;
    }
    if ((_WORD)v42 != (_WORD)v32)
    {
      v19 = escseqs_AppendOutText(a2, v32, (unsigned __int16)((_WORD)v42 - (_WORD)v32));
      if ((v19 & 0x80000000) != 0)
        goto LABEL_280;
      v39 += (_DWORD)v42 - (_DWORD)v32;
    }
    *((_QWORD *)&v171 + 1) = 0;
    v16 = escseqm_Match(*(_QWORD **)(a1 + 64), v42, (unsigned __int16)v149, (uint64_t)&v169, v44, v45, v46, v47);
    if ((v16 & 0x1FFF) == 0xA)
      goto LABEL_281;
    v84 = DWORD1(v170);
    if (DWORD1(v170) == 36)
    {
      v16 = escseqs_NormalizeLanguageName(a1, (uint64_t)&v169);
      if ((v16 & 0x80000000) != 0)
        goto LABEL_281;
      v84 = DWORD1(v170);
    }
    if ((_QWORD)v172)
    {
      v85 = (const float *)&v171 + 2;
      v86 = (int32x4_t)vld1q_dup_f32(v85);
      if ((vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vceqq_s32(v86, (int32x4_t)xmmword_1DEC668D0), (int8x16_t)xmmword_1DEC444C0)) & 0xF) == 0&& v84 != 26)
      {
        heap_Free(*(_QWORD **)(v174 + 8), v172);
        *(_QWORD *)&v172 = 0;
        DWORD2(v172) = 0;
LABEL_195:
        v19 = escseqs_AppendOutText(a2, v42, 1u);
        if ((v19 & 0x80000000) != 0)
          goto LABEL_280;
        ++v39;
        v32 = v42 + 1;
        goto LABEL_197;
      }
    }
    if ((_DWORD)v16)
      goto LABEL_195;
    if (marker_hasNonConstCharPtrArg(v84) && !*((_QWORD *)&v171 + 1))
    {
      LOWORD(v170) = 0;
      *((_QWORD *)&v169 + 1) = 0;
      DWORD1(v170) = 0x4000;
      DWORD2(v171) = 0;
      goto LABEL_225;
    }
    v88 = DWORD1(v170);
    if (!(_QWORD)v172 || DWORD1(v170) == 26)
    {
      if ((_QWORD)v172 && DWORD1(v170) == 26)
      {
        v90 = v39;
        v91 = strlen((const char *)v172);
        *(_QWORD *)&v154 = 0;
        v92 = *((_QWORD *)&v171 + 1);
        v93 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, __int128 *))(*(_QWORD *)(a1 + 32) + 64);
        NullHandle = safeh_GetNullHandle();
        if ((v93(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v92, 0, NullHandle, v95, &v154) & 0x80000000) != 0)
        {
          log_OutText(*(_QWORD *)(v174 + 32), (uint64_t)&modESCPP, 4, 0, (uint64_t)"[ESCSEQS] Invalid audio file, file=%s, Putting alternate text in text stream: \"%s\" ", v96, v97, v98, *((uint64_t *)&v171 + 1));
          v19 = escseqs_AppendOutText(a2, (const void *)v172, v91);
          if ((v19 & 0x80000000) != 0)
            goto LABEL_280;
          DWORD1(v170) = 0;
          heap_Free(*(_QWORD **)(v174 + 8), *((uint64_t *)&v171 + 1));
          *((_QWORD *)&v171 + 1) = 0;
        }
        heap_Free(*(_QWORD **)(v174 + 8), v172);
        *(_QWORD *)&v172 = 0;
        v88 = DWORD1(v170);
        v39 = v90;
      }
      goto LABEL_223;
    }
    if (SDWORD2(v171) > 70)
    {
      if (DWORD2(v171) == 71)
      {
        DWORD2(v171) = 43;
LABEL_222:
        DWORD2(v172) = 0;
        goto LABEL_223;
      }
      if (DWORD2(v171) == 72)
      {
        v89 = 4;
        goto LABEL_219;
      }
    }
    else
    {
      if (DWORD2(v171) == 43)
      {
        v89 = 1;
        goto LABEL_219;
      }
      if (DWORD2(v171) == 70)
      {
        v89 = 2;
LABEL_219:
        DWORD2(v172) = v89;
        DWORD2(v171) = 43;
        goto LABEL_223;
      }
    }
    DWORD2(v171) = 43;
    if (DWORD2(v172) == 3)
      goto LABEL_222;
LABEL_223:
    if (v88)
      goto LABEL_226;
    LOWORD(v170) = 0;
    *((_QWORD *)&v169 + 1) = 0;
    DWORD1(v170) = 999;
LABEL_225:
    DWORD2(v172) = 0;
    *(_QWORD *)&v172 = 0;
LABEL_226:
    v99 = *(_DWORD *)(a1 + 80);
    v100 = *(_DWORD *)(a1 + 84);
    LODWORD(v169) = 0;
    DWORD2(v170) = v99 + (_DWORD)v42 - (_DWORD)v6;
    LODWORD(v171) = v100 + (unsigned __int16)v39;
    if (v142
      || ((DWORD2(v171) - 15) > 0x39 || ((1 << (BYTE8(v171) - 15)) & 0x280200010000003) == 0)
      && (DWORD2(v171) - 106) >= 3)
    {
      v16 = escseqs_AppendOutMarker(a2, &v169);
    }
    else
    {
      if (v141 == DWORD2(v171))
        DWORD1(v170) = 999;
      v16 = escseqs_AppendOutMarker(a2, &v169);
      v141 = DWORD2(v171);
    }
    if (marker_hasNonConstCharPtrArg(SDWORD1(v170)) && *((_QWORD *)&v171 + 1))
    {
      heap_Free(*(_QWORD **)(v174 + 8), *((uint64_t *)&v171 + 1));
      *((_QWORD *)&v171 + 1) = 0;
    }
    else
    {
      DWORD2(v171) = 0;
    }
    if ((v16 & 0x80000000) != 0)
      return v16;
    if (DWORD1(v170) == 13)
    {
      inserted = escseqs_InsertDefaultMarkers(a1, a2, (uint64_t)&v169);
      if ((inserted & 0x80000000) != 0)
        return inserted;
    }
    else if (DWORD1(v170) == 4)
    {
      DWORD1(v166) = 2;
      *((_QWORD *)&v166 + 1) = (HIDWORD(v170) + DWORD2(v170));
      LODWORD(v167) = v171;
      *(_QWORD *)((char *)&v167 + 4) = 0x100000000;
      inserted = escseqs_AppendOutMarker(a2, &v165);
      if ((inserted & 0x80000000) != 0)
        return inserted;
    }
    v32 = &v42[HIDWORD(v170)];
    HIDWORD(v170) = 0;
    DWORD1(v170) = 0;
    *(_QWORD *)&v172 = 0;
    DWORD2(v172) = 0;
LABEL_197:
    v40 = v32;
    v38 = v152;
    if ((unint64_t)&v32[utf8_determineUTF8CharLength(*v32)] > v31)
      goto LABEL_250;
  }
  v40 = v42;
LABEL_248:
  LOWORD(v39) = v150;
LABEL_250:
  v19 = escseqs_AppendOutText(a2, v32, (unsigned __int16)((_WORD)v40 - (_WORD)v32));
  if ((v19 & 0x80000000) != 0)
    goto LABEL_280;
  v102 = *(_DWORD *)(v173 + 20);
  *(_QWORD *)&v154 = 0;
  v19 = datac_RequestBlock(a2, 1010, 1u, &v154);
  if ((v19 & 0x80000000) != 0)
    goto LABEL_280;
  *(_DWORD *)(v154 + 20) = v102;
  v19 = escseqs_PutOutMarkerEos(a2, *(_DWORD *)(v173 + 20));
  if ((v19 & 0x80000000) != 0)
    goto LABEL_280;
  if (*(_DWORD *)(v173 + 20))
  {
    v103 = 0;
    v104 = 0;
    *(_DWORD *)(a1 + 92) = 0;
  }
  else
  {
    v103 = *(_DWORD *)(a1 + 80) + (_DWORD)v40 - (_DWORD)v6;
    v104 = *(_DWORD *)(a1 + 84) + (unsigned __int16)(v39 + (_WORD)v40 - (_WORD)v32);
  }
  *(_DWORD *)(a1 + 80) = v103;
  *(_DWORD *)(a1 + 84) = v104;
  *(_QWORD *)&v154 = 0;
  v19 = datac_RequestBlock(a2, 1011, 1u, &v154);
  if ((v19 & 0x80000000) != 0)
    goto LABEL_280;
  v105 = v154;
  v106 = *(unsigned __int16 *)(v154 + 16);
  if (v106 >= 2)
  {
    v107 = *(_QWORD *)(v154 + 8);
    v108 = 1;
    do
    {
      v109 = v107 + ((unint64_t)(unsigned __int16)v108 << 6);
      if (*(_DWORD *)(v109 + 20) == 7)
      {
        v110 = *(_DWORD *)(v109 + 40);
        if (v110 == 60 || v110 == 16)
        {
          if ((unsigned __int16)v106 <= (unsigned __int16)(v108 + 1))
            v112 = (unsigned __int16)(v108 + 1);
          else
            v112 = (unsigned __int16)v106;
          do
          {
            if ((unsigned __int16)++v108 >= (unsigned __int16)v106)
            {
              v108 = v112;
              goto LABEL_273;
            }
            v113 = v107 + ((unint64_t)(unsigned __int16)v108 << 6);
          }
          while (*(_DWORD *)(v113 + 20) != 7);
          v115 = *(_DWORD *)(v113 + 40);
          v114 = (_DWORD *)(v113 + 40);
          if (v110 == v115)
          {
            *v114 = 15;
            v105 = v154;
          }
        }
      }
LABEL_273:
      ++v108;
      v106 = *(unsigned __int16 *)(v105 + 16);
    }
    while (v106 > (unsigned __int16)v108);
  }
  *(_QWORD *)&v154 = 0;
  v19 = datac_RequestBlock(a2, 1011, 1u, &v154);
  if ((v19 & 0x80000000) != 0)
  {
LABEL_280:
    v16 = v19;
  }
  else
  {
    v116 = *(unsigned __int16 *)(v154 + 16);
    if (v116 >= 2)
    {
      v117 = 0;
      v118 = *(_QWORD *)(v154 + 8);
      v119 = 2;
      while (*(_DWORD *)(v118 + v117 + 84) != 0x4000)
      {
        ++v119;
        v117 += 64;
        if ((v116 << 6) - 64 == v117)
          goto LABEL_296;
      }
      if (v116 > v119)
      {
        v120 = (int *)(v118 + v117 + 148);
        while (1)
        {
          v121 = *v120;
          v120 += 16;
          if (v121 != 0x4000)
            break;
          if ((_DWORD)v116 == ++v119)
            goto LABEL_296;
        }
        if (*(_DWORD *)(v118 + ((unint64_t)v119 << 6) + 20) == 0x4000)
        {
          v122 = v119 + 1;
          if ((_DWORD)v122 == (_DWORD)v116)
          {
            *(_WORD *)(v154 + 16) = v116 - 1;
          }
          else
          {
            memmove((void *)(v118 + v117 + 128), (const void *)(v118 + (v122 << 6)), (uint64_t)(int)(v116 - v119) << 6);
            *(_WORD *)(v154 + 16) -= v119;
          }
          LOWORD(v31) = v148;
        }
      }
    }
LABEL_296:
    *(_QWORD *)v175 = 0;
    v16 = datac_RequestBlock(a2, 1011, 1u, v175);
    if ((v16 & 0x80000000) == 0)
    {
      v123 = *(_QWORD *)v175;
      LOWORD(v124) = *(_WORD *)(*(_QWORD *)v175 + 16);
      if ((_WORD)v124)
      {
        v125 = 0;
        v126 = 0;
        v127 = 0;
        v128 = 0;
        v129 = *(_QWORD *)(*(_QWORD *)v175 + 8);
        do
        {
          v130 = (_DWORD *)(v129 + ((unint64_t)(unsigned __int16)v128 << 6));
          v131 = v130[5];
          if (v131 == 7)
          {
            if (v130[10] == 43)
            {
              v126 = !v126;
              v127 = v128;
            }
            else
            {
              v126 = 0;
            }
          }
          else if (v131 == 0x4000 && v126)
          {
            v133 = v129 + ((unint64_t)v127 << 6);
            v134 = v129 + ((unint64_t)(unsigned __int16)v128 << 6);
            *(_DWORD *)(v134 + 24) = *(_DWORD *)(v133 + 24);
            *(_DWORD *)(v134 + 32) = *(_DWORD *)(v133 + 32);
            v154 = *(_OWORD *)v130;
            v155 = *((_OWORD *)v130 + 1);
            v156 = *((_OWORD *)v130 + 2);
            v157 = *((_OWORD *)v130 + 3);
            v135 = (v125 + 1);
            v136 = (unsigned __int16)v124 >= v135;
            v137 = (unsigned __int16)v124 - (_DWORD)v135;
            if (v137 != 0 && v136)
            {
              memmove(v130, (const void *)(v129 + (v135 << 6)), (uint64_t)v137 << 6);
              v123 = *(_QWORD *)v175;
            }
            v138 = *(_WORD *)(v123 + 16) - 1;
            *(_WORD *)(v123 + 16) = v138;
            memmove((void *)(v129 + ((unint64_t)(v127 + 1) << 6)), (const void *)(v129 + ((unint64_t)v127 << 6)), (uint64_t)(v138 - v127) << 6);
            v127 = 0;
            v126 = 0;
            *(_OWORD *)v133 = v154;
            *(_OWORD *)(v133 + 16) = v155;
            *(_OWORD *)(v133 + 32) = v156;
            *(_OWORD *)(v133 + 48) = v157;
            v123 = *(_QWORD *)v175;
            ++*(_WORD *)(*(_QWORD *)v175 + 16);
            ++v128;
          }
          v125 = (unsigned __int16)++v128;
          v124 = *(unsigned __int16 *)(v123 + 16);
        }
        while ((unsigned __int16)v128 < v124);
      }
      memmove(v6, v40, (unsigned __int16)(v31 - (_WORD)v40));
      *(_WORD *)(v173 + 16) = v31 - (_WORD)v40;
    }
  }
LABEL_281:
  if (__s)
    paramc_ParamRelease(*(_QWORD *)(v174 + 40));
  return v16;
}

