uint64_t escseqs_AppendOutMarker(uint64_t a1, __int128 *a2)
{
  uint64_t result;
  int v5;
  unint64_t v6;
  unsigned __int16 v7;
  const char *v8;
  unsigned int v9;
  unsigned int v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  const void *v17;
  unsigned __int16 v18;
  uint64_t v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  v24 = 0;
  if (!a2)
    return 2147491847;
  result = datac_RequestBlock(a1, 1012, 1u, &v24);
  if ((result & 0x80000000) == 0)
  {
    v25 = *a2;
    v5 = *((_DWORD *)a2 + 5);
    v26 = *((_DWORD *)a2 + 4);
    v6 = *((_QWORD *)a2 + 5);
    v21 = a2[3];
    v22 = *(__int128 *)((char *)a2 + 24);
    result = datac_RequestBlock(a1, 1011, 1u, &v24);
    if ((result & 0x80000000) == 0)
    {
      v7 = *(_WORD *)(v24 + 16) + 1;
      if (*(unsigned __int16 *)(v24 + 18) >= v7
        || (result = datac_RequestBlock(a1, 1011, (unsigned __int16)(*(_WORD *)(v24 + 16) + 1), &v24),
            (result & 0x80000000) == 0))
      {
        result = datac_RequestBlock(a1, 1012, 1u, &v23);
        if ((result & 0x80000000) == 0)
        {
          if (marker_hasNonConstCharPtrArg(v5) && v6)
          {
            v8 = *(const char **)(v23 + 8);
            if (v8)
            {
              v9 = 0;
              v10 = *(unsigned __int16 *)(v23 + 16);
              while (v9 < v10)
              {
                v11 = v8;
                if (!strcmp((const char *)v6, v8))
                {
                  v14 = *(_QWORD *)(v24 + 8) + ((unint64_t)*(unsigned __int16 *)(v24 + 16) << 6);
                  *(_OWORD *)v14 = v25;
                  *(_DWORD *)(v14 + 16) = v26;
                  *(_DWORD *)(v14 + 20) = v5;
                  *(_OWORD *)(v14 + 24) = v22;
                  *(_QWORD *)(v14 + 40) = v6 & 0xFFFFFFFF00000000 | v9;
                  *(_OWORD *)(v14 + 48) = v21;
                  v15 = &v24;
                  goto LABEL_28;
                }
                v12 = strlen(v11) + 1;
                v9 += v12;
                v8 = &v11[v12];
                if (!v11)
                  break;
              }
            }
            if (marker_hasNonConstCharPtrArg(*((_DWORD *)a2 + 5)))
            {
              if (*((_QWORD *)a2 + 5))
                v13 = *(unsigned __int16 *)(v23 + 16);
              else
                v13 = 0xFFFFFFFFLL;
              v6 = v6 & 0xFFFFFFFF00000000 | v13;
            }
          }
          v16 = *(_QWORD *)(v24 + 8) + ((unint64_t)*(unsigned __int16 *)(v24 + 16) << 6);
          *(_OWORD *)v16 = v25;
          *(_DWORD *)(v16 + 16) = v26;
          *(_DWORD *)(v16 + 20) = v5;
          *(_OWORD *)(v16 + 24) = v22;
          *(_QWORD *)(v16 + 40) = v6;
          *(_OWORD *)(v16 + 48) = v21;
          *(_WORD *)(v24 + 16) = v7;
          result = marker_hasNonConstCharPtrArg(*((_DWORD *)a2 + 5));
          if ((_DWORD)result)
          {
            v17 = (const void *)*((_QWORD *)a2 + 5);
            if (!v17)
              return 0;
            v18 = strlen(*((const char **)a2 + 5)) + 1;
            v19 = v23;
            v20 = *(unsigned __int16 *)(v23 + 16);
            v7 = v20 + v18;
            if (*(unsigned __int16 *)(v23 + 18) < (unsigned __int16)(v20 + v18))
            {
              result = datac_RequestBlock(a1, 1012, (unsigned __int16)(v20 + v18), &v23);
              if ((result & 0x80000000) != 0)
                return result;
              v19 = v23;
              v20 = *(unsigned __int16 *)(v23 + 16);
              v17 = (const void *)*((_QWORD *)a2 + 5);
            }
            memcpy((void *)(*(_QWORD *)(v19 + 8) + v20), v17, v18);
            v15 = &v23;
LABEL_28:
            result = 0;
            *(_WORD *)(*v15 + 16) = v7;
          }
        }
      }
    }
  }
  return result;
}

uint64_t escseqs_AppendOutText(uint64_t a1, const void *a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  __int16 v9;
  uint64_t v10;

  v10 = 0;
  if (!a2)
    return 2147491847;
  result = datac_RequestBlock(a1, 1010, 1u, &v10);
  if ((result & 0x80000000) != 0)
    return result;
  v7 = v10;
  v8 = *(unsigned __int16 *)(v10 + 16);
  v9 = v8 + a3;
  if (*(unsigned __int16 *)(v10 + 18) < (unsigned __int16)(v8 + a3))
  {
    result = datac_RequestBlock(a1, 1010, (unsigned __int16)(v8 + a3), &v10);
    if ((result & 0x80000000) != 0)
      return result;
    v7 = v10;
    v8 = *(unsigned __int16 *)(v10 + 16);
  }
  memcpy((void *)(*(_QWORD *)(v7 + 8) + v8), a2, a3);
  result = 0;
  *(_WORD *)(v10 + 16) = v9;
  return result;
}

uint64_t escseqs_NormalizeLanguageName(uint64_t a1, uint64_t a2)
{
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  void *v9;
  int v11;
  char *__s2;
  uint64_t v13;

  __s2 = 0;
  v13 = 0;
  v11 = 0;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v13);
  if ((inited & 0x80000000) != 0)
    return 2147491847;
  v5 = *(_QWORD *)(a1 + 56);
  if (!v5)
    return inited;
  v6 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char **, int *))(v5 + 24))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 40), &__s2, &v11);
  if ((v6 & 0x80000000) == 0)
  {
    if (v11)
    {
      v7 = __s2;
      if (__s2)
      {
        if (strcmp(*(const char **)(a2 + 40), __s2) && *v7)
        {
          v8 = strhelper_Strdup(*(_QWORD *)(v13 + 8), v7);
          if (v8)
          {
            v9 = v8;
            heap_Free(*(_QWORD **)(v13 + 8), *(_QWORD *)(a2 + 40));
            *(_QWORD *)(a2 + 40) = v9;
          }
          else
          {
            return 2147491850;
          }
        }
      }
    }
  }
  return v6;
}

uint64_t escseqs_InsertDefaultMarkers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Defaults;
  uint64_t i;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t appended;
  uint64_t j;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  if ((InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v17) & 0x80000000) != 0)
    return 2147491847;
  Defaults = escseqm_GetDefaults(*(_QWORD **)(a1 + 64), &v18);
  if ((Defaults & 0x80000000) == 0)
  {
    for (i = 0; i != 2496; i += 64)
    {
      v8 = *(_DWORD *)(v18 + i + 84);
      if (v8)
      {
        if (!marker_hasNonConstCharPtrArg(v8))
        {
          v9 = v18 + i;
          *(_DWORD *)(v9 + 88) = *(_DWORD *)(a3 + 28) + *(_DWORD *)(a3 + 24);
          *(_DWORD *)(v9 + 100) = 0;
          v10 = *(_QWORD *)(a3 + 32);
          *(_DWORD *)(v9 + 64) = 0;
          v9 += 64;
          *(_QWORD *)(v9 + 32) = v10;
          appended = escseqs_AppendOutMarker(a2, (__int128 *)v9);
          Defaults = 0;
          if ((appended & 0x80000000) != 0)
          {
LABEL_17:
            Defaults = appended;
            goto LABEL_18;
          }
        }
      }
    }
    for (j = 104; j != 2600; j += 64)
    {
      if (marker_hasNonConstCharPtrArg(*(_DWORD *)(v18 + j - 20)))
      {
        v13 = v18 + j;
        *(_DWORD *)(v13 - 16) = *(_DWORD *)(a3 + 28) + *(_DWORD *)(a3 + 24);
        *(_DWORD *)(v13 - 4) = 0;
        v14 = *(_QWORD *)(a3 + 32);
        *(_DWORD *)(v13 - 40) = 0;
        v13 -= 40;
        *(_QWORD *)(v13 + 32) = v14;
        appended = escseqs_AppendOutMarker(a2, (__int128 *)v13);
        if ((appended & 0x80000000) != 0)
          goto LABEL_17;
        v15 = *(_QWORD *)(v18 + j);
        if (v15)
        {
          heap_Free(*(_QWORD **)(v17 + 8), v15);
          Defaults = 0;
          *(_QWORD *)(v18 + j) = 0;
        }
        else
        {
          Defaults = 0;
        }
      }
    }
  }
LABEL_18:
  if (v18)
    heap_Free(*(_QWORD **)(v17 + 8), v18);
  return Defaults;
}

uint64_t escseqs_PutOutMarkerEos(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  result = datac_RequestBlock(a1, 1011, 1u, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(_DWORD *)(v5 + 20) = a2;
    result = datac_RequestBlock(a1, 1012, 1u, &v5);
    if ((result & 0x80000000) == 0)
    {
      result = 0;
      *(_DWORD *)(v5 + 20) = a2;
    }
  }
  return result;
}

uint64_t extdata_LoadData(uint64_t a1, char *a2)
{
  return extdata_LoadSpecificData(a1, a2, 0);
}

uint64_t extdata_LoadSpecificData(uint64_t a1, char *a2, const char *a3)
{
  uint64_t result;
  char *v7;
  size_t v8;
  unint64_t v9;
  size_t v10;
  int v11;
  int v12;
  char __s2[4];
  char *__s;
  _OWORD v15[8];
  char v16[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  __s = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  *(_OWORD *)v16 = 0u;
  v17 = 0u;
  memset(v15, 0, sizeof(v15));
  *(_DWORD *)__s2 = 0;
  if (!a1)
    return 2368741383;
  result = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"langcode", &__s);
  if ((result & 0x80000000) != 0)
    return result;
  v7 = __s;
  if (*__s)
  {
    v8 = 0;
    do
    {
      v9 = v8;
      __s2[v8] = __tolower(v7[v8]);
      ++v8;
      v7 = __s;
      v10 = strlen(__s);
    }
    while (v9 <= 1 && v8 < v10);
  }
  else
  {
    v8 = 0;
  }
  __s2[v8] = 0;
  if (strcmp(v7, __s2))
  {
    result = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"langcode", __s2);
    if ((result & 0x80000000) != 0)
      return result;
    __s = __s2;
  }
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  brokeraux_ComposeBrokerString(*(_QWORD *)(a1 + 16), v16, 1, 1, __s, 0, 0, (char *)v15, 0x80uLL);
  LODWORD(result) = readDataFile(a1, a2, (const char *)v15, a3);
  v11 = result;
  v12 = result & 0x80001FFF;
  if ((result & 0x80001FFF) == 0x8000000A)
    result = result;
  else
    result = 0;
  if (v11 < 0 && v12 != -2147483638)
  {
    v16[strlen(v16) - 4] = 0;
    brokeraux_ComposeBrokerString(*(_QWORD *)(a1 + 16), v16, 1, 1, __s, 0, 0, (char *)v15, 0x80uLL);
    return readDataFile(a1, a2, (const char *)v15, a3);
  }
  return result;
}

uint64_t readDataFile(uint64_t a1, char *a2, const char *a3, const char *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v25;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  char __s2[4];
  char v31;
  _QWORD *v32;

  v32 = 0;
  v31 = 0;
  v29 = 0;
  *(_DWORD *)__s2 = 0;
  v27 = 0;
  v28 = 0;
  result = brk_DataOpenEx(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), (uint64_t)a3, 1, (uint64_t)&v27);
  if ((result & 0x80000000) == 0)
  {
    result = brk_DataClose(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), v27);
    if ((result & 0x80000000) == 0)
    {
      result = ssftriff_reader_ObjOpen(*(_WORD **)a1, *(_QWORD *)(a1 + 8), 0, a3, a2, 1031, (uint64_t *)&v32);
      if ((result & 0x80000000) == 0)
      {
        do
        {
          v16 = ssftriff_reader_OpenChunk((uint64_t)v32, __s2, &v29, &v28, v9, v10, v11, v12);
          if (v16 < 0)
            break;
          v17 = *(unsigned __int16 *)(a1 + 32);
          if (*(_WORD *)(a1 + 32))
          {
            v18 = *(_QWORD *)(a1 + 24);
            while (strcmp(*(const char **)v18, __s2))
            {
              v18 += 32;
              if (!--v17)
                goto LABEL_14;
            }
            if (!a4 || !strcmp(a4, __s2))
            {
              v16 = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD, uint64_t))(v18 + 8))(*(_QWORD *)(v18 + 24), v32, v29, v28);
              if (v16 < 0)
                log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PP_EXTDATA", 1800, "%s%s", v19, v20, v21, v22, "loading_type");
            }
          }
LABEL_14:
          v23 = ssftriff_reader_CloseChunk((uint64_t)v32);
          if (v23 < 0 && v16 > -1)
            v16 = v23;
        }
        while ((v16 & 0x80000000) == 0);
        if ((v16 & 0x1FFF) == 0x14)
          v25 = 0;
        else
          v25 = v16;
        LODWORD(result) = ssftriff_reader_ObjClose(v32, v13, v14, v15, v9, v10, v11, v12);
        if (v25 > -1 && (int)result < 0)
          return result;
        else
          return v25;
      }
    }
  }
  return result;
}

uint64_t extdata_RegisterData(uint64_t a1, __int128 *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;

  if (!a1)
    return 2368741383;
  if (!*(_WORD *)(a1 + 32))
  {
    v8 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, (32 * a3) | 1);
    *(_QWORD *)(a1 + 24) = v8;
    if (v8)
      goto LABEL_7;
    return (*(_DWORD *)(a1 + 36) << 20) | 0x8000200A;
  }
  v6 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 24), (32 * (*(unsigned __int16 *)(a1 + 32) + (unint64_t)a3)) | 1);
  if (!v6)
    return (*(_DWORD *)(a1 + 36) << 20) | 0x8000200A;
  *(_QWORD *)(a1 + 24) = v6;
LABEL_7:
  if (a3)
  {
    v9 = 0;
    do
    {
      v10 = (_OWORD *)(*(_QWORD *)(a1 + 24) + 32 * (v9 + *(unsigned __int16 *)(a1 + 32)));
      v11 = *a2;
      v12 = a2[1];
      a2 += 2;
      *v10 = v11;
      v10[1] = v12;
      ++v9;
    }
    while (a3 != v9);
  }
  result = 0;
  *(_WORD *)(a1 + 32) += a3;
  return result;
}

uint64_t extdata_ObjOpen(_WORD *a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  uint64_t v12;

  v12 = 0;
  if (!a3 || (InitRsrcFunction(a1, a2, &v12) & 0x80000000) != 0)
  {
    v11 = -2147475449;
  }
  else
  {
    *a3 = 0;
    v8 = heap_Alloc(*(_QWORD *)(v12 + 8), 40);
    if (v8)
    {
      v9 = v8;
      result = 0;
      *(_OWORD *)v9 = 0u;
      *(_OWORD *)(v9 + 16) = 0u;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)v9 = a1;
      *(_QWORD *)(v9 + 8) = a2;
      *(_QWORD *)(v9 + 16) = v12;
      *(_WORD *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 36) = a4;
      *a3 = v9;
      return result;
    }
    v11 = -2147475446;
  }
  return v11 | (a4 << 20);
}

uint64_t extdata_UnregisterModule(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  result = 2368741383;
  if (a1)
  {
    if (*(unsigned __int16 *)(a1 + 32) > a2)
    {
      result = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32 * a2 + 24) = 0;
    }
  }
  return result;
}

uint64_t extdata_GetIndex(uint64_t a1, _WORD *a2)
{
  uint64_t result;
  int v4;

  result = 2368741383;
  if (a1)
  {
    if (!a2)
      return result;
    v4 = *(unsigned __int16 *)(a1 + 32);
    LOWORD(a1) = v4 - 1;
    if (v4)
    {
      result = 0;
    }
    else
    {
      LOWORD(a1) = 0;
      result = 2368741383;
    }
  }
  *a2 = a1;
  return result;
}

uint64_t extdata_FreeData(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!a1)
    return 2368741383;
  v2 = *(unsigned __int16 *)(a1 + 32);
  if (*(_WORD *)(a1 + 32))
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(a1 + 24) + v3;
      if (*(_QWORD *)(v5 + 24))
      {
        result = (*(uint64_t (**)(void))(v5 + 16))();
        if ((result & 0x80000000) != 0)
          return result;
        v2 = *(unsigned __int16 *)(a1 + 32);
      }
      ++v4;
      v3 += 32;
    }
    while (v4 < v2);
  }
  heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 24));
  result = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  return result;
}

uint64_t extdata_ObjClose(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  if (!a1)
    return 2368741383;
  v2 = *(_QWORD *)(a1 + 16);
  result = extdata_FreeData(a1);
  if ((result & 0x80000000) == 0)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4)
    {
      heap_Free(*(_QWORD **)(v2 + 8), v4);
      *(_WORD *)(a1 + 32) = 0;
    }
    heap_Free(*(_QWORD **)(v2 + 8), a1);
    return 0;
  }
  return result;
}

uint64_t freeEOSDefs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  if (!*(_WORD *)(a1 + 96))
    return 0;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] free EOS definitions", a6, a7, a8, v20);
  v15 = *(_QWORD *)(a1 + 104);
  if (v15)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v15);
    *(_QWORD *)(a1 + 104) = 0;
  }
  *(_QWORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 96) = 0;
  if (*(_WORD *)(a1 + 128))
  {
    v16 = *(_QWORD *)(a1 + 120);
    if (v16)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v16);
      *(_QWORD *)(a1 + 120) = 0;
    }
    *(_WORD *)(a1 + 128) = 0;
  }
  if (*(_WORD *)(a1 + 144))
  {
    v17 = *(_QWORD *)(a1 + 136);
    if (v17)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v17);
      *(_QWORD *)(a1 + 136) = 0;
    }
    *(_WORD *)(a1 + 144) = 0;
  }
  v18 = *(_QWORD *)(a1 + 152);
  if (v18)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v18);
    *(_QWORD *)(a1 + 152) = 0;
  }
  result = *(_QWORD *)(a1 + 88);
  if (result)
  {
    result = ssftriff_reader_ReleaseChunkData((_QWORD *)result, v18, v9, v10, v11, v12, v13, v14);
    if ((result & 0x80000000) == 0)
      *(_QWORD *)(a1 + 88) = 0;
  }
  return result;
}

uint64_t getEOSDefs(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  _BYTE *v25;
  char v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t i;
  int v39;
  uint64_t v41;
  _DWORD *v42;

  v42 = a4;
  if (*(_WORD *)(a1 + 96))
    return 0;
  v8 = 2369789962;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] get EOS definitions", a6, a7, a8, v41);
  v12 = a4[1] + 8;
  v13 = v12 + *a4;
  v14 = *(unsigned __int16 *)((char *)a4 + v13);
  *(_WORD *)(a1 + 96) = v14;
  v15 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, (8 * v14) | 1);
  *(_QWORD *)(a1 + 104) = v15;
  if (!v15)
    goto LABEL_25;
  v23 = v13 + 2;
  v24 = *(unsigned __int16 *)(a1 + 96);
  if (*(_WORD *)(a1 + 96))
  {
    v25 = (_BYTE *)(v15 + 4);
    do
    {
      v26 = *((_BYTE *)a4 + v23);
      v27 = *(_DWORD *)((char *)a4 + v23 + 2);
      v23 += 6;
      *v25 = v26;
      *((_DWORD *)v25 - 1) = v27;
      v25 += 8;
      --v24;
    }
    while (v24);
  }
  v28 = *(unsigned __int16 *)((char *)a4 + v23);
  *(_WORD *)(a1 + 128) = v28;
  v29 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, (2 * v28) | 1);
  *(_QWORD *)(a1 + 120) = v29;
  if (!v29)
    goto LABEL_25;
  if (*(_WORD *)(a1 + 128))
  {
    v30 = 0;
    do
    {
      v23 += 2;
      *(_WORD *)(*(_QWORD *)(a1 + 120) + 2 * v30++) = *(_WORD *)((char *)a4 + v23);
    }
    while (v30 < *(unsigned __int16 *)(a1 + 128));
  }
  *(_WORD *)(a1 + 144) = 0;
  v31 = *(unsigned __int16 *)((char *)a4 + v23 + 2);
  *(_WORD *)(a1 + 144) = v31;
  v32 = v23 + 4;
  if (v31)
  {
    v33 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, (2 * v31) | 1);
    *(_QWORD *)(a1 + 136) = v33;
    if (v33)
    {
      if (*(_WORD *)(a1 + 144))
      {
        v34 = 0;
        do
        {
          *(_WORD *)(*(_QWORD *)(a1 + 136) + 2 * v34) = *(_WORD *)((char *)a4 + v32);
          v32 += 2;
          ++v34;
        }
        while (v34 < *(unsigned __int16 *)(a1 + 144));
      }
      goto LABEL_16;
    }
LABEL_25:
    freeEOSDefs(a1, v16, v17, v18, v19, v20, v21, v22);
    return v8;
  }
LABEL_16:
  v35 = *(unsigned __int16 *)((char *)a4 + v32);
  v36 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, v35 + 1);
  *(_QWORD *)(a1 + 152) = v36;
  if (!v36)
    goto LABEL_25;
  v37 = v32 + 2;
  if ((_DWORD)v35)
  {
    for (i = 0; i != v35; ++i)
      *(_BYTE *)(*(_QWORD *)(a1 + 152) + i) = *((_BYTE *)a4 + v37 + i);
    v37 += i;
  }
  v39 = *(unsigned __int16 *)((char *)a4 + v37);
  *(_DWORD *)(a1 + 160) = v39;
  if (!v39)
  {
    v8 = 2369789959;
    goto LABEL_25;
  }
  v8 = ssftriff_reader_DetachChunkData(a2, (uint64_t *)(a1 + 88), &v42, v18, v19, v20, v21, v22);
  if ((v8 & 0x80000000) == 0)
    *(_QWORD *)(a1 + 112) = (char *)v42 + v12;
  return v8;
}

uint64_t sparser_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  unsigned __int16 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char *__s1;
  unsigned __int16 v33;
  _BYTE __c[11];
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v35 = 0;
  v36 = 0;
  *(_QWORD *)&__c[3] = 0;
  v6 = 2369789959;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  v33 = 0;
  __s1 = 0;
  if (a5 && (InitRsrcFunction(a1, a2, &v36) & 0x80000000) == 0)
  {
    *a5 = 0;
    v13 = heap_Alloc(*(_QWORD *)(v36 + 8), 192);
    if (!v13)
      return 2369789962;
    v14 = v13;
    *(_OWORD *)v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 64) = 0u;
    *(_OWORD *)(v13 + 80) = 0u;
    *(_OWORD *)(v13 + 160) = 0u;
    *(_OWORD *)(v13 + 176) = 0u;
    *(_OWORD *)(v13 + 128) = 0u;
    *(_OWORD *)(v13 + 144) = 0u;
    *(_OWORD *)(v13 + 96) = 0u;
    *(_OWORD *)(v13 + 112) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_QWORD *)v13 = a1;
    *(_QWORD *)(v13 + 8) = a2;
    v15 = v36;
    *(_QWORD *)(v13 + 16) = v36;
    *(_QWORD *)(v13 + 80) = a6;
    *(_QWORD *)(v13 + 64) = 0;
    *(_WORD *)(v13 + 72) = 0;
    *(_WORD *)(v13 + 184) = 0;
    *(_DWORD *)(v13 + 176) = 0;
    *(_QWORD *)(v13 + 168) = 0;
    *(_DWORD *)(v13 + 188) = 0;
    if ((paramc_ParamGetStr(*(_QWORD *)(v15 + 40), (uint64_t)"mnceosposition", &__s1) & 0x80000000) == 0
      && __s1
      && !strcmp(__s1, "yes"))
    {
      *(_DWORD *)(v14 + 188) = 1;
    }
    *(_QWORD *)(v14 + 160) = 0;
    *(_OWORD *)(v14 + 128) = 0u;
    *(_OWORD *)(v14 + 144) = 0u;
    *(_OWORD *)(v14 + 96) = 0u;
    *(_OWORD *)(v14 + 112) = 0u;
    *(_QWORD *)(v14 + 24) = a3;
    *(_DWORD *)(v14 + 32) = a4;
    *(_QWORD *)(v14 + 88) = 0;
    *(_QWORD *)&v37 = "EOSD";
    *((_QWORD *)&v37 + 1) = getEOSDefs;
    v38 = freeEOSDefs;
    v39 = v14;
    v16 = extdata_RegisterData(a6, &v37, 1u);
    if ((v16 & 0x80000000) == 0)
    {
      extdata_GetIndex(a6, &v33);
      if ((objc_GetObject(*(_QWORD *)(v36 + 48), (uint64_t)"FE_DCTLKP", &v35) & 0x80000000) != 0)
      {
        v18 = *(_QWORD *)(v14 + 40);
        if (!v18)
        {
LABEL_30:
          v6 = 0;
          *a5 = v14;
          return v6;
        }
      }
      else
      {
        v17 = v35;
        v18 = *(_QWORD *)(v35 + 8);
        *(_QWORD *)(v14 + 40) = v18;
        *(_OWORD *)(v14 + 48) = *(_OWORD *)(v17 + 16);
        if (!v18)
          goto LABEL_30;
      }
      *(_WORD *)&__c[1] = -1;
      v16 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(v18 + 96))(*(_QWORD *)(v14 + 48), *(_QWORD *)(v14 + 56), "fecfg", "ppabbrscanback", &__c[3], &__c[1], __c);
      if ((v16 & 0x80000000) == 0)
      {
        if (*(unsigned __int16 *)&__c[1] != 1 || !*(_QWORD *)&__c[3])
          goto LABEL_30;
        v19 = **(char ***)&__c[3];
        v20 = strchr(**(char ***)&__c[3], __c[0]);
        if (v20)
        {
          *v20 = 0;
          v19 = **(char ***)&__c[3];
        }
        *(_WORD *)(v14 + 72) = 1;
        v21 = strchr(v19, 124);
        if (v21)
        {
          v22 = 1;
          do
          {
            *(_WORD *)(v14 + 72) = ++v22;
            v21 = strchr(v21 + 1, 124);
          }
          while (v21);
          v23 = v22 + 1;
        }
        else
        {
          v23 = 2;
        }
        v24 = heap_Calloc(*(_QWORD **)(v36 + 8), 1, v23);
        *(_QWORD *)(v14 + 64) = v24;
        if (v24)
        {
          v25 = **(char ***)&__c[3];
          *(_WORD *)(v14 + 72) = 0;
          if (v25)
          {
            do
            {
              if (*v25 == __c[0])
                break;
              v26 = strchr(v25, 124);
              v27 = v26;
              if (v26)
                *v26 = 0;
              v28 = atoi(v25);
              v29 = *(_QWORD *)(v14 + 64);
              v30 = *(unsigned __int16 *)(v14 + 72);
              *(_WORD *)(v14 + 72) = v30 + 1;
              *(_BYTE *)(v29 + v30) = v28;
              v25 = v27 + 1;
            }
            while (v27);
          }
          goto LABEL_30;
        }
        return 2369789962;
      }
    }
    v6 = v16;
    sparser_ObjClose(v14);
    extdata_UnregisterModule(a6, v33);
  }
  return v6;
}

uint64_t sparser_ObjClose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v1 = 2369789959;
  v5 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v5) & 0x80000000) == 0)
  {
    if (*(_QWORD *)(a1 + 40))
      objc_ReleaseObject(*(_QWORD *)(v5 + 48), (uint64_t)"FE_DCTLKP");
    v3 = *(_QWORD *)(a1 + 64);
    if (v3)
    {
      heap_Free(*(_QWORD **)(v5 + 8), v3);
      *(_QWORD *)(a1 + 64) = 0;
      *(_WORD *)(a1 + 72) = 0;
    }
    heap_Free(*(_QWORD **)(v5 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t sparser_HasTextElementLeft(_WORD **a1, uint64_t a2, _BOOL4 *a3, _WORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned __int16 v30;
  _DWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int NextCharacterBoundary;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v46;
  int v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  char *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v58 = 0;
  v59 = 0;
  v4 = 2369789959;
  v56 = 0;
  v57 = 0;
  v53 = 0;
  v54 = 0;
  v48 = 0u;
  v52 = 0u;
  v47 = 0;
  LODWORD(v48) = 1;
  v49 = 0x200000000uLL;
  v50 = 0;
  DWORD2(v52) = 0;
  v51 = 1;
  if (!a1)
    return v4;
  if (!a2)
    return v4;
  if (!a3)
    return v4;
  v55 = 0;
  if ((InitRsrcFunction(*a1, (int)a1[1], &v59) & 0x80000000) != 0)
    return v4;
  if (!*((_WORD *)a1 + 48))
  {
    log_OutPublic(*(_QWORD *)(v59 + 32), (uint64_t)&modPP_1, 1808, 0, v9, v10, v11, v12, v46);
    return v4;
  }
  if ((datac_RequestBlock(a2, 1010, 1u, &v58) & 0x80000000) != 0)
  {
    v4 = 0;
    *a3 = 0;
    return v4;
  }
  v13 = datac_RequestBlock(a2, 1011, 1u, &v57);
  if ((v13 & 0x80000000) != 0)
    return v13;
  v14 = *(_QWORD *)(v57 + 8);
  v15 = *(unsigned __int16 *)(v57 + 16);
  v13 = datac_RequestBlock(a2, 1012, 1u, &v56);
  if ((v13 & 0x80000000) != 0)
    return v13;
  v13 = bed_ObjOpen(*a1, (uint64_t)a1[1], a2, 1011, &v54, 212);
  if ((v13 & 0x80000000) != 0)
    return v13;
  if ((chars_ScanBlankHead(v58, (unsigned __int16 *)&v55 + 1, v57, &v55, &v47, 1u) & 0x80000000) == 0)
  {
    if (v15 < 2)
    {
      LOWORD(v16) = 0;
    }
    else
    {
      v16 = 0;
      v17 = (_DWORD *)(v14 + 96);
      v18 = v15 - 1;
      v19 = (_DWORD *)(v14 + 96);
      do
      {
        v20 = *v19;
        v19 += 16;
        if (v20 - *(_DWORD *)(v14 + 32) > *(_DWORD *)(v14 + 32)
                                         + *(unsigned __int16 *)(v58 + 2) * HIWORD(v55))
          break;
        v21 = *(v17 - 3);
        if (v21 == 0x4000)
          v22 = v16;
        else
          v22 = v16 + 1;
        if (v21 != 3)
          v16 = v22;
        v17 = v19;
        --v18;
      }
      while (v18);
    }
    if (*((unsigned __int16 *)a1 + 92) <= (unsigned __int16)v16)
    {
      if ((bed_GetpBlock(v54, &v57) & 0x80000000) != 0)
        goto LABEL_68;
      v29 = v58;
      if (v15 >= 2)
      {
        v30 = 0;
        v31 = (_DWORD *)(v14 + 104);
        v32 = 1;
        while (*(v31 - 2) - *(_DWORD *)(v14 + 32) <= *(unsigned __int16 *)(v58 + 2) * HIWORD(v55))
        {
          v33 = *(v31 - 5);
          if (v33 == 3 && *v31 == 1)
            goto LABEL_66;
          if (v33 != 0x4000)
            ++v30;
          if (*((unsigned __int16 *)a1 + 92) == v30)
          {
            if ((bed_Goto(v54, v32) & 0x80000000) == 0)
            {
              DWORD2(v49) = *(v31 - 4);
              LODWORD(v50) = *(v31 - 2);
              if ((sparser_bed_InjectMarker(v54, (unsigned int *)&v48, 0, *((_DWORD *)a1 + 47)) & 0x80000000) == 0)
              {
                log_OutText(*((_QWORD *)a1[2] + 4), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] inserting EOS as number of markers in empty text exceeded, end marker now %u", v42, v43, v44, v32);
                goto LABEL_66;
              }
            }
            goto LABEL_68;
          }
          ++v32;
          v31 += 16;
          if (v15 == v32)
            break;
        }
      }
    }
    else
    {
      if (!(_WORD)v16 && HIWORD(v55) > 0x400u)
      {
        if ((bed_GetpBlock(v54, &v57) & 0x80000000) != 0)
          goto LABEL_68;
        HIWORD(v55) = 1024;
        v23 = *(_DWORD *)(v14 + 32);
        DWORD2(v49) = *(_DWORD *)(v14 + 24);
        LODWORD(v50) = v23;
        if ((_DWORD)v15)
        {
          v24 = 0;
          v25 = (_DWORD *)(v14 + 20);
          v26 = (_DWORD *)(v14 + 20);
          while (1)
          {
            v27 = *v26;
            v26 += 16;
            if (v27 != 0x4000)
              break;
            v28 = v25[3];
            if (v28 - *(_DWORD *)(v14 + 32) > (*(unsigned __int16 *)(v58 + 2) << 10))
              break;
            DWORD2(v49) = v25[1];
            LODWORD(v50) = v28;
            ++v24;
            v25 = v26;
            if (v15 == v24)
              goto LABEL_60;
          }
          v15 = (unsigned __int16)v24;
        }
LABEL_60:
        if ((bed_Goto(v54, v15) & 0x80000000) != 0
          || (sparser_bed_InjectMarker(v54, (unsigned int *)&v48, 0, *((_DWORD *)a1 + 47)) & 0x80000000) != 0)
        {
          goto LABEL_68;
        }
        log_OutText(*((_QWORD *)a1[2] + 4), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] inserting EOS as empty text length exceeded, end marker now %u", v39, v40, v41, v15);
LABEL_66:
        v38 = 1;
        goto LABEL_67;
      }
      v29 = v58;
    }
    if ((chars_ScanBlankHead(v29, (unsigned __int16 *)&v55 + 1, v57, &v55, &v47, 2u) & 0x80000000) == 0)
    {
      v34 = v57;
      v35 = HIWORD(v55);
      sparser_GetReadMode(v14, *(unsigned __int16 *)(v57 + 16), HIWORD(v55), a4);
      v36 = (__int16)*a4;
      switch(v36)
      {
        case 2:
          NextCharacterBoundary = sparser_FindNextCharacterBoundary(v58, v34, v56, v35, 0, a3);
          break;
        case 4:
          NextCharacterBoundary = sparser_FindNextLineBoundary(v58, v34, v56, v35, 0, a3);
          break;
        case 3:
          NextCharacterBoundary = sparser_FindNextWordBoundary(v58, v34, v56, v35, 0, a3);
          break;
        default:
          paramc_ParamGetStr(*(_QWORD *)(v59 + 40), (uint64_t)"extraesctn", &v53);
          NextCharacterBoundary = sparser_FindNextSentenceBoundary(v58, v57, v56, HIWORD(v55), v53, a3);
          break;
      }
      if ((NextCharacterBoundary & 0x80000000) == 0 && !*a3 && *(_DWORD *)(v58 + 20))
      {
        v38 = sparser_ScanDataMarker(v57);
LABEL_67:
        *a3 = v38;
      }
    }
  }
LABEL_68:
  if (v54)
    bed_ObjClose(v54);
  return 0;
}

uint64_t sparser_bed_InjectMarker(uint64_t a1, unsigned int *a2, int a3, int a4)
{
  uint64_t result;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  int v14;
  uint64_t (*v15)(uint64_t, unint64_t);
  unsigned __int16 v16;
  void *__s1;

  result = 2369789959;
  if (a1)
  {
    if (a2)
    {
      result = sparser_bed_MapPosCur(a1, a2[8], a2 + 6);
      if ((result & 0x80000000) == 0)
      {
        v9 = a2 + 7;
        result = sparser_bed_MapPosCur(a1, a2[9] + a2[8], a2 + 7);
        if ((result & 0x80000000) == 0)
        {
          v10 = a2[6];
          if (*v9 >= v10)
            *v9 -= v10;
          if (a3 == 1
            || (a4 != 1
              ? (v15 = (uint64_t (*)(uint64_t, unint64_t))sparser_marker_HasStrictlyGreaterPosCur)
              : (v15 = (uint64_t (*)(uint64_t, unint64_t))sparser_marker_HasGreaterEqualPosCur),
                (result = bed_GoForward(a1, v15, (uint64_t)a2), (result & 0x80000000) == 0) || (result & 0x1FFF) == 0x14))
          {
            __s1 = 0;
            v16 = 0;
            result = bed_GetcElem(a1, &v16);
            if ((result & 0x80000000) == 0)
            {
              result = bed_GetpElem(a1, 0, &__s1);
              if ((result & 0x80000000) == 0)
              {
                v11 = v16;
                if (v16)
                {
                  v12 = __s1;
                  v13 = a2[8];
                  do
                  {
                    if (v12[8] > v13)
                      break;
                    result = memcmp(v12, a2, 0x40uLL);
                    if (!(_DWORD)result)
                      return result;
                    v12 += 16;
                    --v11;
                  }
                  while (v11);
                }
                v14 = bed_Insert(a1, a2, 1);
                return v14 & (v14 >> 31);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sparser_GetReadMode(uint64_t result, unsigned int a2, int a3, _WORD *a4)
{
  unsigned int v4;
  _DWORD *v5;
  uint64_t v6;

  if (a2 >= 2)
  {
    v4 = *(_DWORD *)(result + 32) + a3;
    v5 = (_DWORD *)(result + 104);
    v6 = a2 - 1;
    do
    {
      if (*(v5 - 2) > v4)
        break;
      if (*(v5 - 5) == 20)
        *a4 = *v5;
      v5 += 16;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t sparser_FindNextCharacterBoundary(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, _DWORD *a6)
{
  *a6 = *(unsigned __int16 *)(a1 + 16) > a4;
  return 0;
}

uint64_t sparser_FindNextWordBoundary(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, _BOOL4 *a6)
{
  _BOOL4 v8;
  unsigned __int16 v10;

  if (*(_DWORD *)(a1 + 20))
  {
    v8 = *(unsigned __int16 *)(a1 + 16) > a4;
  }
  else
  {
    v10 = a4;
    chars_ScanNonBlanks(*(_QWORD *)(a1 + 8), &v10, *(unsigned __int16 *)(a1 + 16));
    v8 = v10 < *(unsigned __int16 *)(a1 + 16);
  }
  *a6 = v8;
  return 0;
}

uint64_t sparser_FindNextLineBoundary(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, _BOOL4 *a6)
{
  _BOOL4 v8;
  unsigned __int16 v10;

  if (*(_DWORD *)(a1 + 20))
  {
    v8 = *(unsigned __int16 *)(a1 + 16) > a4;
  }
  else
  {
    v10 = a4;
    chars_ScanForLineEnd(*(_QWORD *)(a1 + 8), &v10, *(unsigned __int16 *)(a1 + 16));
    v8 = v10 < *(unsigned __int16 *)(a1 + 16);
  }
  *a6 = v8;
  return 0;
}

uint64_t sparser_FindNextSentenceBoundary(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, char *a5, _BOOL4 *a6)
{
  _BOOL4 v9;
  uint64_t v13;
  unint64_t v14;
  _BOOL4 v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  int v20;
  __int16 v21;
  char v23[1024];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 20))
  {
    v9 = *(unsigned __int16 *)(a1 + 16) > a4;
    goto LABEL_29;
  }
  v13 = *(_QWORD *)(a2 + 8);
  LODWORD(v14) = *(unsigned __int16 *)(a2 + 16);
  if (a4)
  {
    if (!*(_WORD *)(a2 + 16))
    {
      LODWORD(v16) = 0;
      goto LABEL_28;
    }
    v15 = 0;
    LODWORD(v16) = 0;
    do
    {
      v17 = v13 + ((unint64_t)v16 << 6);
      if (*(_DWORD *)(v17 + 32) > *(_DWORD *)(v13 + 32) + *(unsigned __int16 *)(a1 + 2) * a4)
        break;
      if (a5 && *(_DWORD *)(v17 + 20) == 21)
      {
        __strcpy_chk();
        v15 = strstr(a5, v23) != 0;
        LODWORD(v14) = *(unsigned __int16 *)(a2 + 16);
      }
      LODWORD(v16) = v16 + 1;
    }
    while (v16 < v14);
  }
  else
  {
    LODWORD(v16) = 0;
    v15 = 0;
  }
  if (v16 >= v14)
    goto LABEL_28;
  v16 = v16;
  v18 = (_DWORD *)(v13 + ((unint64_t)v16 << 6));
  while (1)
  {
    v19 = v18[8];
    v20 = *(_DWORD *)(v13 + 32);
    v21 = v19 - v20;
    if (v19 == v20
      || !sparser_marker_IsSentenceBoundary((_BOOL8)v18, (char *)(*(_QWORD *)(a3 + 8) + v18[10])))
    {
      if (a5 && v18[5] == 21)
      {
        __strcpy_chk();
        v15 = strstr(a5, v23) != 0;
      }
      goto LABEL_25;
    }
    if (v15 && v18[5] == 2)
    {
LABEL_21:
      v18[10] = 0;
      goto LABEL_25;
    }
    if (!sparser_IsSuppressedSentenceBoundary(a2, a1, v21))
      break;
    if (v18[5] == 2)
      goto LABEL_21;
LABEL_25:
    ++v16;
    v14 = *(unsigned __int16 *)(a2 + 16);
    v18 += 16;
    if (v16 >= v14)
      goto LABEL_26;
  }
  LODWORD(v14) = *(unsigned __int16 *)(a2 + 16);
LABEL_26:
  LODWORD(v16) = (unsigned __int16)v16;
LABEL_28:
  v9 = v16 < v14;
LABEL_29:
  *a6 = v9;
  return 0;
}

BOOL sparser_ScanDataMarker(_BOOL8 result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  BOOL v5;

  if (result)
  {
    v1 = *(unsigned __int16 *)(result + 16);
    if (*(_WORD *)(result + 16))
    {
      v2 = 0;
      v3 = *(_QWORD *)(result + 8);
      v4 = (_DWORD *)(v3 + 20);
      v5 = 1;
      do
      {
        if (v3)
        {
          if (*v4 <= 0x28u && ((1 << *v4) & 0x10024000100) != 0)
            break;
        }
        v5 = ++v2 < v1;
        v4 += 16;
      }
      while (v1 != v2);
    }
    else
    {
      return 0;
    }
    return v5;
  }
  return result;
}

uint64_t sparser_PreScanTextElement(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unsigned __int16 v13;

  v12 = 0;
  v5 = datac_RequestBlock(a2, 1010, 1u, &v12);
  if ((v5 & 0x80000000) == 0)
  {
    v6 = *(unsigned __int16 *)(v12 + 16);
    if (v6 >= 4)
    {
      v7 = *(_BYTE **)(v12 + 8);
      v13 = 0;
      if (utf8_Utf8CharTo16bit(&v7[(v6 - 2)], (uint64_t)&v13))
      {
        if (v13 <= 0x3Fu && ((1 << v13) & 0x8000400200000000) != 0 || v13 == 65294)
        {
          if (utf8_BelongsToSet(2u, v7, *(unsigned __int16 *)(v12 + 16) - 1, *(unsigned __int16 *)(v12 + 16)))
          {
            log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] text ends in period-space; get more text",
              v8,
              v9,
              v10,
              v12);
            *a3 = 1;
          }
        }
      }
    }
  }
  return v5;
}

uint64_t sparser_ScanTextElement(uint64_t a1, uint64_t a2, int a3, unsigned __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v13;
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t NextOrthRegion;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  unsigned __int16 v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned __int16 *v37;
  _DWORD *v38;
  unint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  BOOL v44;
  BOOL v46;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t matched;
  uint64_t v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  BOOL v65;
  int v66;
  _DWORD *v67;
  int v68;
  __int16 v69;
  unsigned int v70;
  _BOOL4 v71;
  unsigned __int16 v72;
  unsigned int v73;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned __int16 v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90[3];
  unsigned __int16 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _WORD v96[5];

  v88 = 0;
  v89 = 0;
  v8 = 2369789959;
  v86 = 0;
  v84 = 0;
  v85 = 0;
  if (!a1 || !a2)
    return v8;
  if (!*(_WORD *)(a1 + 96))
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_1, 1808, 0, a5, a6, a7, a8, v76);
    return v8;
  }
  datac_RequestBlock(a2, 1012, 1u, &v84);
  v13 = datac_RequestBlock(a2, 1010, 1u, &v89);
  if ((v13 & 0x80000000) != 0)
  {
    if ((v13 & 0x1FFF) == 0x14)
      return 0;
    else
      return v13;
  }
  v14 = *(_WORD *)(v89 + 16);
  v15 = *(_WORD *)(v89 + 2);
  v16 = bed_ObjOpen(*(_WORD **)a1, *(_QWORD *)(a1 + 8), a2, 1011, &v88, 212);
  if ((v16 & 0x80000000) != 0)
    return v16;
  v16 = bed_GetpBlock(v88, &v85);
  if ((v16 & 0x80000000) != 0)
    return v16;
  v17 = *(_DWORD *)(*(_QWORD *)(v85 + 8) + 32);
  v18 = v88;
  *(_QWORD *)v90 = 0;
  v92 = 0u;
  v93 = 0x400000000000uLL;
  v95 = 0u;
  v94 = 0uLL;
  if (!v88)
    goto LABEL_121;
  v19 = bed_Goto(v88, 0);
  if ((v19 & 0x80000000) != 0
    || (v19 = bed_GoForward(v18, (uint64_t (*)(uint64_t, unint64_t))sparser_marker_IsOfSameType, (uint64_t)&v92), (v19 & 0x80000000) != 0)|| (v19 = bed_GetpElem(v18, 0xFFFFu, v90), (v19 & 0x80000000) != 0))
  {
    v8 = v19;
LABEL_121:
    v22 = 0;
    v72 = 0;
    HIWORD(v86) = 0;
    goto LABEL_122;
  }
  v82 = *(_DWORD *)(*(_QWORD *)v90 + 32);
  v20 = *(_DWORD *)(a1 + 168);
  if (v20 < v17)
  {
    *(_DWORD *)(a1 + 168) = v17;
    v20 = v17;
  }
  *(_DWORD *)(a1 + 176) = v20;
  v87 = (v20 - v17) / *(unsigned __int16 *)(v89 + 2);
  v90[0] = v87;
  NextOrthRegion = sparser_FindNextOrthRegion(v89, v88, v90, &v87, &v86);
  v22 = v87;
  if ((NextOrthRegion & 0x80000000) != 0)
  {
    v8 = NextOrthRegion;
  }
  else
  {
    v23 = v90[0];
    if (v87)
    {
      v24 = *(unsigned __int16 *)(v89 + 16);
      if (v87 <= v24)
      {
        HIWORD(v86) = v87 - (v24 == (unsigned __int16)v87);
        chars_BackScanBlanks(*(_QWORD *)(v89 + 8), (_WORD *)&v86 + 1);
        if (!HIWORD(v86))
        {
          v8 = 0;
          goto LABEL_129;
        }
      }
    }
    if (v23 >= v22)
    {
      v8 = 0;
    }
    else
    {
      v25 = 0;
      v80 = a4;
      v77 = v17 + (unsigned __int16)(v15 * v14);
      v78 = v17;
      do
      {
        v79 = v23;
        if ((unsigned __int16)v23 == (unsigned __int16)v22)
          goto LABEL_20;
        v31 = (unsigned __int16)v22;
        v32 = v23;
        do
        {
          if (!v85)
            goto LABEL_136;
          v33 = *(unsigned __int16 *)(v85 + 16);
          if (*(_WORD *)(v85 + 16))
          {
            v34 = 0;
            v35 = *(_QWORD *)(v85 + 8);
            v36 = *(_DWORD *)(v35 + 32);
            v37 = (unsigned __int16 *)(v35 + 40);
            v38 = (_DWORD *)(v35 + 96);
            v39 = 2;
            v40 = v80;
            do
            {
              v41 = *((_DWORD *)v37 - 2) - v36;
              v42 = (unsigned __int16)(*(v37 - 4) - v36);
              if (v42 > v31)
                break;
              if (*((_DWORD *)v37 - 5) == 20)
              {
                v43 = *v37;
                if (v40 == 1)
                {
                  v44 = v43 == 1 || v42 >= v31;
                  if (!v44 && v42 > v32)
                  {
                    v40 = 1;
                    v66 = *((_DWORD *)v37 - 2) - v36;
                    LOWORD(v41) = v32;
LABEL_101:
                    v32 = v66;
                    if (a3)
                      goto LABEL_59;
                    goto LABEL_20;
                  }
                }
                v40 = *v37;
                v46 = v43 != 1 || v42 >= v31;
                if (!v46 && v42 >= v32)
                {
                  if ((unsigned __int16)v34 + 1 < v33)
                  {
                    LOWORD(v66) = v22;
                    v67 = v38;
                    while (1)
                    {
                      v68 = *v67;
                      v67 += 16;
                      v69 = v68 - v36;
                      v70 = (unsigned __int16)(v68 - v36);
                      if (v70 > v31)
                        break;
                      if (*(v38 - 3) == 20)
                      {
                        v71 = v70 < v31 && v70 >= v32;
                        if (v71)
                          LOWORD(v66) = v69;
                      }
                      else
                      {
                        v71 = 0;
                      }
                      if (v39 < v33)
                      {
                        ++v39;
                        v38 = v67;
                        if (!v71)
                          continue;
                      }
                      if (v71)
                        goto LABEL_101;
                      break;
                    }
                  }
LABEL_56:
                  v32 = v22;
                  if (a3)
                    goto LABEL_59;
                  goto LABEL_20;
                }
              }
              v37 += 32;
              ++v34;
              v38 += 16;
              ++v39;
            }
            while (v33 != v34);
            LOWORD(v41) = v32;
            goto LABEL_56;
          }
          LOWORD(v41) = v32;
          v32 = v22;
          v40 = v80;
          if (!a3)
            break;
LABEL_59:
          if ((unsigned __int16)v41 == v32 || v40 != 1)
            break;
          v83 = v89;
          if (!v89 || (v48 = v88) == 0)
          {
            matched = 2369789959;
LABEL_135:
            v8 = matched;
LABEL_136:
            v17 = v78;
            goto LABEL_137;
          }
          v49 = *(unsigned __int16 *)(v89 + 2);
          v50 = bed_Goto(v88, 0xFFFFFFFF);
          if ((v50 & 0x80000000) != 0)
            goto LABEL_133;
          v91 = 0;
          v92 = 0u;
          v93 = 0u;
          v94 = 0u;
          v95 = 0u;
          LODWORD(v94) = v82 + v49 * (unsigned __int16)v41;
          matched = bed_GoBackward(v48, (unsigned int (*)(uint64_t, unint64_t))sparser_marker_HasStrictlySmallerPosCur, (uint64_t)&v92);
          if ((matched & 0x80001FFF) == 0x80000014)
            matched = bed_Goto(v48, 0);
          if ((matched & 0x80000000) != 0)
            goto LABEL_135;
          v50 = bed_GetiElem(v48, &v91);
          if ((v50 & 0x80000000) != 0)
          {
LABEL_133:
            matched = v50;
            goto LABEL_135;
          }
          matched = sparser_MatchSb(a1, 0, 1, v83, v82, v41, v32, v48, v91);
          if ((matched & 0x80000000) != 0)
            goto LABEL_135;
          LOWORD(v81) = v41;
          while (1)
          {
            v52 = v91;
            v53 = *(unsigned __int16 *)(v83 + 2);
            *(_QWORD *)&v92 = 0;
            v96[0] = 0;
            if ((bed_GetcElem(v48, v96) & 0x80000000) != 0 || (bed_GetpElem(v48, 0, &v92) & 0x80000000) != 0)
              break;
            if (v96[0] > v52)
            {
              v54 = (unsigned int *)(v92 + 32 + (v52 << 6));
              while (1)
              {
                v55 = *v54;
                v54 += 16;
                if (v55 > *(_DWORD *)(v92 + 32) + v53 * (unsigned __int16)v81)
                  break;
                if (v96[0] == ++v52)
                  goto LABEL_97;
              }
              LODWORD(v52) = (unsigned __int16)v52;
            }
            if (v52 >= v96[0])
              goto LABEL_97;
            v56 = *(_DWORD *)(v92 + 32);
            v57 = v56 + v53 * v32;
            v58 = v52;
            v59 = (_DWORD *)(v92 + ((unint64_t)v52 << 6) + 20);
            while (v59[3] <= v57)
            {
              if (*v59 <= 0x28u && ((1 << *v59) & 0x10004000080) != 0)
                break;
              ++v58;
              v59 += 16;
              if (v96[0] == v58)
                goto LABEL_97;
            }
            v61 = v92 + ((unint64_t)(unsigned __int16)v58 << 6);
            v62 = *(_DWORD *)(v61 + 32);
            if (v62 > v57
              || ((v63 = *(_DWORD *)(v61 + 20), v28 = v63 > 0x28, v64 = (1 << v63) & 0x10004000080, !v28)
                ? (v65 = v64 == 0)
                : (v65 = 1),
                  v65))
            {
LABEL_97:
              if ((matched & 0x80000000) != 0)
                goto LABEL_135;
              break;
            }
            if (v53)
              v81 = (unsigned __int16)(v62 - v56) / v53;
            matched = sparser_MatchSb(a1, 1, 0, v83, v82, v41, v81, v48, v91);
            if ((matched & 0x80000000) != 0)
              goto LABEL_135;
          }
          v25 = 1;
          v31 = (unsigned __int16)v22;
        }
        while (v32 != (unsigned __int16)v22);
LABEL_20:
        v26 = sparser_FindNextOrthRegion(v89, v88, v90, &v87, &v86);
        if ((v26 & 0x80000000) != 0)
        {
          v22 = v87;
          v8 = v26;
          goto LABEL_136;
        }
        v17 = v78;
        v27 = v87;
        v28 = v87 > (unsigned __int16)v22 && v90[0] > v79;
        if (v28)
          v23 = v90[0];
        else
          v23 = v87;
        v90[0] = v23;
        v29 = *(unsigned __int16 *)(v89 + 2);
        v30 = v78 + v87 * v29 > v77 || v23 >= v87;
        v22 = v87;
      }
      while (!v30);
      if (v25 == 1)
        v8 = sparser_CheckForcedSb(a1, v89, v82, (unsigned __int16)(v29 * v87), v88, (unsigned __int16)v86, v84);
      else
        v8 = 0;
      v22 = v27;
    }
  }
LABEL_137:
  HIWORD(v86) = v22;
  if ((_WORD)v22 && (v75 = *(unsigned __int16 *)(v89 + 16), (unsigned __int16)v22 <= v75))
  {
    if ((unsigned __int16)v22 == v75)
      HIWORD(v86) = v22 - 1;
    chars_BackScanBlanks(*(_QWORD *)(v89 + 8), (_WORD *)&v86 + 1);
    v72 = HIWORD(v86);
  }
  else
  {
    v72 = v22;
  }
LABEL_122:
  if (v22 != v72)
    *(_DWORD *)(a1 + 172) = v17 + *(unsigned __int16 *)(v89 + 2) * v72;
  if (v22 >= 5)
  {
    HIWORD(v86) = v22;
    chars_BackScanNChars(*(_QWORD *)(v89 + 8), (_WORD *)&v86 + 1, 4);
    v73 = v17 + *(unsigned __int16 *)(v89 + 2) * HIWORD(v86);
    goto LABEL_130;
  }
LABEL_129:
  v73 = v17 + v22 * *(unsigned __int16 *)(v89 + 2);
LABEL_130:
  *(_DWORD *)(a1 + 168) = v73;
  if (v88)
    bed_ObjClose(v88);
  return v8;
}

uint64_t sparser_FindNextOrthRegion(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, _WORD *a5)
{
  uint64_t result;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  _BOOL4 v21;
  unsigned int *v22;
  unint64_t v23;
  unsigned int v24;
  int *v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  int *v30;
  unint64_t v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  int *v42;
  int v43;
  uint64_t v44;
  int *v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;

  v51 = 0;
  result = 2369789959;
  if (a1)
  {
    if (a2)
    {
      v10 = *a3;
      v11 = *a4;
      v12 = (unsigned __int16)*a5;
      v13 = *(unsigned __int16 *)(a1 + 16);
      *a3 = v13;
      *a4 = v13;
      result = bed_GetpBlock(a2, &v51);
      if ((result & 0x80000000) == 0)
      {
        v14 = v51;
        v15 = (unsigned __int16)*a5;
        LODWORD(v16) = *(unsigned __int16 *)(v51 + 16);
        if (v15 >= v16)
        {
LABEL_45:
          if (v10 == *a3 && v11 == *a4)
          {
LABEL_47:
            result = 0;
            v50 = *(unsigned __int16 *)(a1 + 16);
            *a3 = v50;
            *a4 = v50;
            return result;
          }
          return 0;
        }
        v17 = *(_QWORD *)(v51 + 8);
        v18 = *(_DWORD *)(v17 + 32);
        if (__CFADD__(v18, v11 * *(unsigned __int16 *)(a1 + 2)))
        {
          v19 = 0;
          v21 = 0;
        }
        else
        {
          v20 = 0;
          v21 = 0;
          v22 = (unsigned int *)(v17 + 96);
          v23 = 1;
          do
          {
            v15 = v20;
            v19 = v23;
            *a5 = v20;
            if (*(v22 - 19) == 7)
            {
              v21 = !v21;
              if (*(v22 - 14) != 43)
                v21 = 0;
            }
            v16 = *(unsigned __int16 *)(v14 + 16);
            if (v23 >= v16)
              break;
            v24 = *v22;
            v22 += 16;
            v20 = (unsigned __int16)v23++;
          }
          while (v24 <= v18 + v11 * *(unsigned __int16 *)(a1 + 2));
        }
        if (v21)
        {
          if (v15 < v16)
          {
            v25 = (int *)(v17 + ((unint64_t)v15 << 6) + 84);
            v26 = v15 + 1;
            do
            {
              v15 = (unsigned __int16)v26;
              *a5 = v26;
              v16 = *(unsigned __int16 *)(v14 + 16);
              if (v26 >= v16)
                break;
              v27 = *v25;
              v25 += 16;
              ++v26;
            }
            while (v27 != 7);
          }
          if (v15 >= v16 || *(_DWORD *)(v17 + ((unint64_t)v15 << 6) + 20) != 7)
            return 0;
        }
        v28 = v15;
        LODWORD(v29) = v16;
        if (v15 < v16)
        {
          v30 = (int *)(v17 + ((unint64_t)v15 << 6) + 84);
          v31 = v15 + 1;
          do
          {
            v15 = (unsigned __int16)v31;
            *a5 = v31;
            v29 = *(unsigned __int16 *)(v14 + 16);
            if (v31 >= v29)
              break;
            v32 = *v30;
            v30 += 16;
            ++v31;
          }
          while (v32 != 7);
        }
        v33 = *(_DWORD *)(v17 + (v28 << 6) + 32);
        v34 = *(_DWORD *)(v17 + 32);
        v35 = v33 - v34;
        v36 = *(unsigned __int16 *)(a1 + 2);
        v37 = v35 / v36;
        if (v15 >= v29)
        {
          if (v37 == *(unsigned __int16 *)(a1 + 16))
          {
LABEL_44:
            *a3 = v37;
            goto LABEL_45;
          }
        }
        else
        {
          v38 = (*(_DWORD *)(v17 + ((unint64_t)v15 << 6) + 32) - v34) / v36;
          if (v37 == v38)
          {
            v39 = (_DWORD *)(v17 + (v19 << 6) + 40);
            v40 = v17 + 84;
            while (1)
            {
              if (*(_DWORD *)(v17 + ((unint64_t)v15 << 6) + 20) == 7 && *v39 == 43)
              {
                v41 = v15 + 1;
                v42 = (int *)(v40 + ((unint64_t)v15 << 6));
                do
                {
                  LOWORD(v15) = v41;
                  *a5 = v41;
                  v29 = *(unsigned __int16 *)(v14 + 16);
                  if (v41 >= v29)
                    break;
                  v43 = *v42;
                  v42 += 16;
                  ++v41;
                }
                while (v43 != 7);
                if (*(_DWORD *)(v17 + ((unint64_t)(unsigned __int16)v15 << 6) + 20) != 7)
                  return 0;
                v15 = (unsigned __int16)v15;
              }
              v44 = v15;
              if (v15 < v29)
              {
                v45 = (int *)(v40 + ((unint64_t)v15 << 6));
                v46 = v15 + 1;
                do
                {
                  v15 = (unsigned __int16)v46;
                  *a5 = v46;
                  v29 = *(unsigned __int16 *)(v14 + 16);
                  if (v46 >= v29)
                    break;
                  v47 = *v45;
                  v45 += 16;
                  ++v46;
                }
                while (v47 != 7);
              }
              v48 = *(unsigned __int16 *)(a1 + 2);
              v37 = (*(_DWORD *)(v17 + (v44 << 6) + 32) - v34) / v48;
              if (v15 >= v29)
                goto LABEL_44;
              v49 = (*(_DWORD *)(v17 + ((unint64_t)v15 << 6) + 32) - v34) / v48;
              if (v37 != v49)
              {
                *a3 = v37;
                *a4 = v49;
                goto LABEL_45;
              }
            }
          }
          *a4 = v38;
        }
        *a3 = v37;
        if (v10 != v37)
          return 0;
        result = 0;
        if (v11 == *a4 && v12 == v15)
          goto LABEL_47;
      }
    }
  }
  return result;
}

uint64_t sparser_CheckForcedSb(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t i;
  uint64_t v12;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int16 v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL4 v55;
  _DWORD *v56;
  unsigned __int16 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int *v63;
  unsigned __int16 v64;
  int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD v92[2];
  __int128 v93;
  __int128 v94;
  unsigned int v95;
  unsigned __int16 v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;

  v98 = 0;
  v7 = 2369789959;
  if (a2)
  {
    i = a5;
    if (a5)
    {
      v12 = a2;
      v99 = 0;
      if ((InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v99) & 0x80000000) == 0)
      {
        v96 = 0;
        sparser_getMaxCharsPerText(v99, (__int16 *)&v96);
        v14 = *(_QWORD *)(v12 + 8);
        v7 = bed_Goto(i, a6);
        if ((v7 & 0x80000000) == 0)
        {
          v97 = 0;
          if (a4)
          {
            v15 = 0;
            v83 = v14;
            v85 = a4 + a3;
            v16 = v96;
            v86 = i;
            v87 = v12;
            v84 = a1;
            v17 = 0;
            while (1)
            {
              *(_QWORD *)&v92[0] = 0;
              v18 = bed_GetpBlock(i, v92);
              if ((v18 & 0x80000000) != 0)
                return v18;
              v89 = v17;
              v88 = a3;
              v19 = *(_QWORD *)(*(_QWORD *)&v92[0] + 8);
              LOWORD(v95) = v15 / *(unsigned __int16 *)(v12 + 2);
              chars_ScanBlanks(*(_QWORD *)(v12 + 8), &v95, *(unsigned __int16 *)(v12 + 16));
              v20 = *(unsigned __int16 *)(v12 + 2);
              v21 = v20 * v95;
              LOWORD(v95) = 0;
              v22 = *(unsigned __int16 *)(*(_QWORD *)&v92[0] + 16);
              v23 = v21;
              if (v21)
              {
                if (!*(_WORD *)(*(_QWORD *)&v92[0] + 16))
                  goto LABEL_28;
                v24 = *(_DWORD *)(v19 + 32);
                v25 = v24 + v23;
                if (!__CFADD__(v24, v23))
                  break;
              }
              v26 = 0;
LABEL_13:
              if (v26 >= v22)
                goto LABEL_28;
              v27 = *(_DWORD *)(v19 + 32);
              v28 = v26;
              v29 = v19 + ((unint64_t)v26 << 6);
              while (*(_DWORD *)(v29 + 32) == v27
                   || !sparser_marker_IsSentenceBoundary(v29, (char *)(*(_QWORD *)(a7 + 8) + *(unsigned int *)(v29 + 40))))
              {
                v29 += 64;
                LOWORD(v95) = ++v28;
                if (v22 == v28)
                  goto LABEL_28;
              }
              v33 = v88;
              if (v27 + v23 <= v88)
                v34 = 0;
              else
                v34 = (unsigned __int16)(v27 + v23 - v88);
              v12 = v87;
              v38 = (unsigned __int16)Utf8_LengthInUtf8chars(*(_QWORD *)(v87 + 8) + v34, *(_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v28 << 6) + 32)- (v34+ v88));
              if (v38 <= v16)
              {
                a3 = *(_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v95 << 6) + 32);
LABEL_35:
                i = v86;
                v17 = v89;
                v7 = 0;
                v97 = a3;
                goto LABEL_73;
              }
LABEL_29:
              v95 = 0;
              v92[0] = 0u;
              v92[1] = 0x200000000uLL;
              v93 = 0u;
              v94 = 0u;
              LODWORD(v92[0]) = 1;
              *(_QWORD *)&v93 = 0;
              DWORD2(v94) = 0;
              DWORD2(v93) = 1;
              log_OutText(*(_QWORD *)(*(_QWORD *)(v84 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] sentence character count %d is greater than max %d", v35, v36, v37, v38);
              v95 = (unsigned __int16)(v16 + v15);
              utf8_GetPreviousValidUtf8Offset(*(_QWORD *)(v12 + 8), &v95);
              v39 = (unsigned __int16)v95;
              v40 = Utf8_LengthInUtf8chars(v83 + v15, (unsigned __int16)v95 - v15);
              if (v39 >= a4)
              {
                i = v86;
              }
              else
              {
                v44 = v40;
                for (i = v86; v16 > (unsigned __int16)v44; ++v44)
                {
                  v39 += utf8_determineUTF8CharLength(*(unsigned __int8 *)(v83 + (unsigned __int16)v39));
                  if (a4 <= (unsigned __int16)v39)
                    break;
                }
              }
              v97 = v33 - v15 + (unsigned __int16)v39;
              log_OutText(*(_QWORD *)(*(_QWORD *)(v84 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] after resetting to %d characters, position=%d", v41, v42, v43, v16);
              eos_BackScanPhraseBoundary(*(char **)(v84 + 152), v83, v15, v33, &v97);
              v48 = v97;
              if (v97 > v85)
              {
                v48 = v85;
                v97 = v85;
              }
              log_OutText(*(_QWORD *)(*(_QWORD *)(v84 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] after scanning back to phrase boundary, position=%d", v45, v46, v47, v48);
              *(_QWORD *)&v93 = v97;
              v7 = bed_GetpBlock(i, &v98);
              v17 = v89;
              if ((v7 & 0x80000000) != 0)
                return v7;
              v52 = *(_QWORD *)(v98 + 8);
              v53 = *(unsigned __int16 *)(v98 + 16);
              if (*(_WORD *)(v98 + 16))
              {
                v54 = 0;
                v55 = 0;
                v56 = (_DWORD *)(v52 + 40);
                do
                {
                  if (*(v56 - 2) > v93)
                    break;
                  if (*(v56 - 5) == 7)
                  {
                    v55 = !v55;
                    v17 = *v56 == 43 ? v54 : v17;
                    if (*v56 != 43)
                      v55 = 0;
                  }
                  v56 += 16;
                  ++v54;
                }
                while (v53 != v54);
                if (v55)
                {
                  v90 = v17;
                  v57 = v17 + 1;
                  log_OutText(*(_QWORD *)(*(_QWORD *)(v84 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] position=%d is in a phoneme region", v49, v50, v51, v97);
                  v61 = *(unsigned __int16 *)(v98 + 16);
                  if (v61 <= v57)
                    goto LABEL_68;
                  v62 = v57;
                  v63 = (int *)(v52 + ((unint64_t)v57 << 6) + 20);
                  v64 = v57;
                  do
                  {
                    v66 = *v63;
                    v63 += 16;
                    v65 = v66;
                    if (v66 == 7)
                      v64 = v62;
                    ++v62;
                  }
                  while (v62 < v61 && v65 != 7);
                  if (v65 != 7)
                  {
LABEL_68:
                    v18 = bed_Goto(i, (unsigned __int16)v90);
                    if ((v18 & 0x80000000) != 0)
                      return v18;
                    v77 = v52 + ((unint64_t)(unsigned __int16)v90 << 6);
                    v78 = *(_DWORD *)(v77 + 24);
                    LODWORD(v93) = *(_DWORD *)(v77 + 32);
                    log_OutText(*(_QWORD *)(*(_QWORD *)(v84 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] didnt find end of phoneme region, hard reset at start of phoneme (marker %d)", v74, v75, v76, (unsigned __int16)v90);
                    v18 = sparser_bed_InjectMarker(i, (unsigned int *)v92, 1, *(_DWORD *)(v84 + 188));
                    if ((v18 & 0x80000000) != 0)
                      return v18;
                    v7 = bed_GetpBlock(i, &v98);
                    if ((v7 & 0x80000000) != 0)
                      return v7;
                    *(_DWORD *)(*(_QWORD *)(v98 + 8) + ((unint64_t)(unsigned __int16)v90 << 6) + 24) = v78;
                    v97 = a4;
                    v33 = v88;
                    v17 = v90;
                    goto LABEL_72;
                  }
                  v67 = v64;
                  v68 = v64;
                  log_OutText(*(_QWORD *)(*(_QWORD *)(v84 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] set forced EOS at end of phoneme region (marker %d)", v58, v59, v60, v64);
                  v97 = *(_DWORD *)(v52 + (v68 << 6) + 32);
                  LODWORD(v93) = v97;
                  v18 = bed_Goto(i, v67);
                  if ((v18 & 0x80000000) != 0)
                    return v18;
                  v18 = sparser_bed_InjectMarker(i, (unsigned int *)v92, 0, *(_DWORD *)(v84 + 188));
                  v7 = 0;
                  v33 = v88;
                  v17 = v90;
                  goto LABEL_66;
                }
              }
              if ((_DWORD)v93 != *(_DWORD *)(v52 + 32))
              {
                do
                  LOWORD(v53) = v53 - 1;
                while ((_WORD)v53
                     && v93 < *(_DWORD *)(v52 + ((unint64_t)(unsigned __int16)v53 << 6) + 36)
                                          + *(_DWORD *)(v52 + ((unint64_t)(unsigned __int16)v53 << 6) + 32));
                v73 = (unsigned __int16)v53;
                log_OutText(*(_QWORD *)(*(_QWORD *)(v84 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] hard reset at position=%d", v49, v50, v51, v93);
                v18 = bed_Goto(i, v73);
                if ((v18 & 0x80000000) != 0)
                  return v18;
                v18 = sparser_bed_InjectMarker(i, (unsigned int *)v92, 0, *(_DWORD *)(v84 + 188));
                v7 = 0;
                v33 = v88;
LABEL_66:
                if ((v18 & 0x80000000) != 0)
                  return v18;
                goto LABEL_72;
              }
              log_OutText(*(_QWORD *)(*(_QWORD *)(v84 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] no hard reset (at start of text)", v49, v50, v51, v81);
LABEL_72:
              log_OutPublic(*(_QWORD *)(v99 + 32), (uint64_t)&modPP_1, 1816, 0, v69, v70, v71, v72, v82);
              a3 = v97;
LABEL_73:
              if (a3 - v33 + v15 <= 0xFFFE)
              {
                v79 = (unsigned __int16)(a3 - v33);
                if (a3 == v33)
                  v79 = 1;
                v15 += v79;
                if (v15 < a4)
                  continue;
              }
              return v7;
            }
            v30 = 0;
            v31 = (unsigned int *)(v19 + 96);
            while (v22 - 1 != v30)
            {
              ++v30;
              v32 = *v31;
              v31 += 16;
              if (v32 > v25)
              {
                v26 = (unsigned __int16)v30;
                LOWORD(v95) = v30;
                goto LABEL_13;
              }
            }
            LOWORD(v95) = *(_WORD *)(*(_QWORD *)&v92[0] + 16);
LABEL_28:
            v12 = v87;
            v38 = (unsigned __int16)Utf8_LengthInUtf8chars(*(_QWORD *)(v87 + 8), *(unsigned __int16 *)(v87 + 16) * v20 - v23);
            v33 = v88;
            if (v38 <= v16)
            {
              a3 = v88 + *(unsigned __int16 *)(v87 + 2) * *(unsigned __int16 *)(v87 + 16);
              goto LABEL_35;
            }
            goto LABEL_29;
          }
        }
      }
    }
  }
  return v7;
}

uint64_t sparser_GetTextElement(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, __int16 *a7, _DWORD *a8, _DWORD *a9, uint64_t a10, _WORD *a11, _WORD *a12)
{
  uint64_t v12;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  _DWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t (*v38)();
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned __int16 v50;
  unsigned int v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v56;
  __int16 v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int16 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int16 v68;
  unint64_t v69;
  const char **v70;
  char **v71;
  int v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  int v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  int *v92;
  unint64_t v93;
  unsigned __int16 v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int ArgOfLastOfType;
  uint64_t v99;
  int v100;
  unint64_t v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  unsigned __int16 v105;
  _DWORD *v106;
  int v107;
  int *v108;
  unsigned __int16 v109;
  int *v110;
  int *v111;
  int v112;
  int v113;
  uint64_t v114;
  int *v115;
  int v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;
  int *v121;
  int v122;
  BOOL v123;
  uint64_t v124;
  __int16 v125;
  unint64_t v126;
  _DWORD *v127;
  _WORD *v128;
  _OWORD *v129;
  uint64_t v130;
  int *v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  _DWORD *v135;
  int v136;
  uint64_t v137;
  int v138;
  int v139;
  uint64_t v140;
  _DWORD *v141;
  unint64_t v142;
  _DWORD *v143;
  int v144;
  unint64_t v145;
  _DWORD *v146;
  int v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t (*v156)();
  uint64_t v157;
  int v158;
  uint64_t v159;
  _DWORD *v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  __int16 v164;
  unsigned __int16 v165;
  int v166;
  __int16 v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;

  v173 = 0;
  v174 = 0;
  v171 = 0;
  v172 = 0;
  v12 = 2369789959;
  v169 = 0;
  v170 = 0;
  v167 = 0;
  v166 = 0;
  if (!a2)
    return v12;
  v168 = 0;
  if ((InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v174) & 0x80000000) != 0)
    return v12;
  *a12 = 0;
  *a11 = 0;
  *a8 = 0;
  if (!*(_WORD *)(a1 + 96))
  {
    v26 = *(_QWORD *)(v174 + 32);
    v27 = 1805;
LABEL_8:
    log_OutPublic(v26, (uint64_t)&modPP_1, v27, 0, v21, v22, v23, v24, v152);
    return v12;
  }
  v25 = datac_RequestBlock(a2, 1010, 1u, &v173);
  if ((v25 & 0x80000000) != 0)
    return v25;
  v163 = (datac_RequestBlock(a2, 1012, 1u, &v171) & 0x80000000) != 0 ? 0 : *(_QWORD *)(v171 + 8);
  v25 = datac_RequestBlock(a2, 1011, 1u, &v172);
  if ((v25 & 0x80000000) != 0)
    return v25;
  v161 = *(_QWORD *)(v172 + 8);
  v28 = *(_WORD *)(v172 + 16);
  v25 = chars_ScanBlankHead(v173, (unsigned __int16 *)&v168, v172, (_WORD *)&v168 + 1, &v166, 0);
  if ((v25 & 0x80000000) != 0)
    return v25;
  v160 = a8;
  if (v166 == 1)
    HIWORD(v168) = v28;
  v32 = v172;
  v33 = *(unsigned __int16 *)(v172 + 16);
  if (v33 >= 2)
  {
    v34 = *(_DWORD *)(v161 + 32) + (unsigned __int16)v168;
    v35 = (_DWORD *)(v161 + 104);
    v36 = v33 - 1;
    do
    {
      if (*(v35 - 2) > v34)
        break;
      if (*(v35 - 5) == 20)
        *a7 = *v35;
      v35 += 16;
      --v36;
    }
    while (v36);
  }
  v37 = *a7 - 2;
  if (v37 > 2)
    v38 = (uint64_t (*)())sparser_GetSentenceLength;
  else
    v38 = off_1EA940338[v37];
  v39 = v173;
  v40 = v171;
  if (v32 && v173 && HIWORD(v168))
  {
    v41 = 0;
    v42 = *(_DWORD **)(v32 + 8);
    v43 = v42;
    while ((v43[5] & 0xFFFFFFFE) != 2 || v43[10] != 1)
    {
      v43 += 16;
      if (-(uint64_t)HIWORD(v168) == --v41)
        goto LABEL_30;
    }
    v52 = -v41;
    v44 = (unsigned __int16)-(__int16)v41;
    if ((_WORD)v41)
    {
      v53 = v42[16 * (unint64_t)~(_DWORD)v41 + 5];
      v123 = v53 > 0x28;
      v54 = (1 << v53) & 0x10024000100;
      if (!v123 && v54 != 0)
      {
        v56 = v43[8] - v42[8] / *(unsigned __int16 *)(v173 + 2);
LABEL_54:
        LOWORD(v168) = v56;
        HIWORD(v168) = v44;
        goto LABEL_32;
      }
    }
    if (HIWORD(v168) > v44)
    {
      while (1)
      {
        v77 = v43[5];
        v123 = v77 > 0x28;
        v78 = (1 << v77) & 0x10024000100;
        if (!v123 && v78 != 0)
          break;
        ++v52;
        v43 += 16;
        if (HIWORD(v168) == (unsigned __int16)v52)
          goto LABEL_30;
      }
      if (HIWORD(v168) > (unsigned __int16)v52)
      {
        v157 = *(_QWORD *)(v171 + 8);
        v159 = v173;
        v155 = v171;
        v156 = v38;
        v153 = *(_QWORD *)(v32 + 8);
        v154 = HIWORD(v168);
        while (!sparser_marker_IsSentenceBoundary((_BOOL8)v43, (char *)(v157 + v43[10])))
        {
          v43 += 16;
          ++v52;
          v40 = v155;
          v39 = v159;
          v38 = v156;
          if (v52 >= v154)
            goto LABEL_30;
        }
        v44 = (unsigned __int16)v52;
        LOWORD(v56) = (unsigned __int16)(*(_DWORD *)(v153 + ((unint64_t)(unsigned __int16)v52 << 6) + 32)
                                       - *(_DWORD *)(v153 + 32))
                    / *(_WORD *)(v159 + 2);
        goto LABEL_54;
      }
    }
  }
LABEL_30:
  v25 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, int *, char *))v38)(v174, v39, v32, v40, &v168, (char *)&v168 + 2);
  if ((v25 & 0x80000000) != 0)
    return v25;
  v44 = HIWORD(v168);
LABEL_32:
  if (v44 < 2)
  {
    v50 = 0;
    LOWORD(v47) = 1;
  }
  else
  {
    v45 = 0;
    v46 = v161 + 64;
    v47 = 1;
    while (1)
    {
      v48 = *(_DWORD *)(v46 + 20);
      v49 = v48 == 0x4000 ? v45 : v45 + 1;
      if (v48 == 22)
        break;
      ++v47;
      v45 = v49 + 1;
      v46 += 64;
      if (v44 == v47)
      {
        v50 = 0;
        LOWORD(v47) = v44;
        goto LABEL_60;
      }
    }
    HIWORD(v168) = v47;
    *a5 = 1;
    if ((unsigned __int16)v49 == (unsigned __int16)v47 && *(_DWORD *)(v46 + 32) == *(_DWORD *)(v161 + 32))
    {
      *a6 = 1;
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] found immediate voice switch", v29, v30, v31, v152);
      v25 = sparser_SetArgAsParamStr(a1, a2, v46, (uint64_t)"pipelineswitchvoice");
      if ((v25 & 0x80000000) != 0)
        return v25;
      HIWORD(v168) = v49 + 1;
    }
    else
    {
      *a6 = 0;
    }
    if (*(unsigned __int16 *)(v172 + 16) <= (unsigned __int16)v47)
      v51 = *(unsigned __int16 *)(v173 + 16);
    else
      v51 = (unsigned __int16)(*(_DWORD *)(v46 + 32) - *(_DWORD *)(v161 + 32))
          / *(unsigned __int16 *)(v173 + 2);
    if (v51 >= *(unsigned __int16 *)(v173 + 16))
      v57 = *(_WORD *)(v173 + 16);
    else
      v57 = v51;
    LOWORD(v168) = v57;
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] found voice switch (marker %d); adjusted text length to %u, set iMEnd to %d, bImmediateVoiceSwi"
               "tch=%d bEndOnVoiceSwitch=%d",
      v29,
      v30,
      v31,
      v47);
    v50 = v47;
  }
LABEL_60:
  if ((unsigned __int16)v168 <= 1u)
    v58 = 1;
  else
    v58 = (unsigned __int16)v168;
  v25 = datac_RequestBlock(a2, 1020, v58, &v170);
  if ((v25 & 0x80000000) != 0)
    return v25;
  v25 = datac_RequestBlock(a2, 1021, (unsigned __int16)(HIWORD(v168) + 1), &v169);
  if ((v25 & 0x80000000) != 0)
    return v25;
  memmove(*(void **)(v170 + 8), *(const void **)(v173 + 8), *(unsigned __int16 *)(v173 + 2) * (unint64_t)(unsigned __int16)v168);
  v59 = (unsigned __int16)v168;
  *(_WORD *)(v170 + 16) = v168;
  v60 = v173;
  v61 = *(_WORD *)(v173 + 16) - v59;
  *(_WORD *)(v173 + 16) = v61;
  memmove(*(void **)(v60 + 8), (const void *)(*(_QWORD *)(v60 + 8) + v59), *(unsigned __int16 *)(v60 + 2) * (unint64_t)v61);
  v62 = v170;
  *a3 = *(unsigned __int16 *)(v170 + 16);
  v63 = v161;
  if (*a5 != 1 || *a6)
    goto LABEL_67;
  v165 = 0;
  v164 = 0;
  v25 = chars_ScanBlankHead(v62, &v165, v169, &v164, &v166, 0);
  if ((v25 & 0x80000000) != 0)
    return v25;
  if (v165 != *(unsigned __int16 *)(v170 + 16))
    goto LABEL_67;
  if (HIWORD(v168) < 2uLL)
  {
LABEL_96:
    *a6 = 1;
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] found immediate voice switch, due to blank text", v80, v81, v82, v152);
    v25 = sparser_SetArgAsParamStr(a1, a2, v161 + ((unint64_t)v50 << 6), (uint64_t)"pipelineswitchvoice");
    if ((v25 & 0x80000000) == 0)
    {
      HIWORD(v168) = v47 + 1;
      goto LABEL_67;
    }
    return v25;
  }
  v83 = (unsigned int *)(v161 + 84);
  v84 = 1;
  while (1)
  {
    v85 = *v83;
    v83 += 16;
    v86 = (1 << v85) & 0x1080200084;
    if (v85 > 0x24 || v86 == 0)
      break;
    if (++v84 >= (unint64_t)HIWORD(v168))
      goto LABEL_96;
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] blank text, but non-eos marker found - continue with sentence", v80, v81, v82, v152);
  HIWORD(v168) = v47;
  *a5 = 0;
LABEL_67:
  memmove(*(void **)(v169 + 8), *(const void **)(v172 + 8), (unint64_t)HIWORD(v168) << 6);
  v67 = v169;
  v68 = HIWORD(v168);
  if (HIWORD(v168))
  {
    v69 = 0;
    v70 = (const char **)(v161 + 48);
    v71 = (char **)(*(_QWORD *)(v169 + 8) + 48);
    do
    {
      if (*v70)
      {
        v72 = (unsigned __int16)strlen(*v70);
        if (v72)
        {
          v73 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, (v72 + 1));
          *v71 = v73;
          if (!v73)
            return 2369789962;
          strcpy(v73, *v70);
          heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)*v70);
          *v70 = 0;
          v68 = HIWORD(v168);
        }
      }
      ++v69;
      v70 += 8;
      v71 += 8;
    }
    while (v69 < v68);
    v67 = v169;
    v63 = v161;
  }
  *(_WORD *)(v67 + 16) = v68;
  v74 = v173;
  if (*(_DWORD *)(v173 + 20))
  {
    v75 = v172;
    if (*(_WORD *)(v173 + 16))
    {
      v76 = 0;
    }
    else
    {
      v76 = *(_DWORD *)(v172 + 20);
      if (v76)
        v76 = *(unsigned __int16 *)(v172 + 16) == v68;
    }
  }
  else
  {
    v76 = 0;
    v75 = v172;
  }
  v88 = *(_DWORD *)(v63 + ((unint64_t)v68 << 6) + 24);
  *(_DWORD *)(v170 + 20) = v76;
  *(_DWORD *)(v67 + 20) = v76;
  if (*(unsigned __int16 *)(v75 + 16) <= v68)
  {
    v89 = *(unsigned __int16 *)(v74 + 2) * (unsigned __int16)v168;
    v90 = *(_DWORD *)(v63 + 32) + v89;
    goto LABEL_104;
  }
  v89 = *(unsigned __int16 *)(v74 + 2) * (unsigned __int16)v168;
  v90 = v89 + *(_DWORD *)(v63 + 32);
  v91 = *(_DWORD *)(v63 + ((unint64_t)v68 << 6) + 32);
  if (v90 < v91)
  {
LABEL_104:
    *(_DWORD *)(v63 + 24) += v89;
    *(_DWORD *)(v63 + 32) = v90;
    v158 = 1;
    goto LABEL_105;
  }
  v158 = 0;
  *(_DWORD *)(v63 + 24) = v88;
  *(_DWORD *)(v63 + 32) = v91;
LABEL_105:
  v162 = v88;
  if (v68 < 2u)
  {
    v94 = 1;
  }
  else
  {
    v92 = (int *)(v63 + 84);
    v93 = 1;
    v94 = 1;
    do
    {
      v95 = *v92;
      if (*v92 != 2)
      {
        *a4 += v92[2];
        v123 = v95 > 0x24;
        v96 = (1 << v95) & 0x1080200080;
        if (!v123 && v96 != 0)
        {
          ArgOfLastOfType = marker_GetArgOfLastOfType(v63, (unsigned __int16)v93, v68, 1);
          v99 = v63;
          v100 = *v92;
          if (!sparser_marker_IsReadOutControlDefaultArg(*v92, ArgOfLastOfType, v163, *(_DWORD *)(a1 + 180)))
          {
            v101 = v99 + ((unint64_t)v94 << 6);
            v102 = *(_DWORD *)(v99 + 24);
            *(_DWORD *)(v101 + 20) = v100;
            *(_DWORD *)(v101 + 24) = v102;
            v103 = *(_DWORD *)(v99 + 32);
            *(_DWORD *)(v101 + 28) = 0;
            *(_QWORD *)(v101 + 32) = v103;
            *(_DWORD *)(v101 + 40) = ArgOfLastOfType;
            *(_DWORD *)v101 = 1;
            ++v94;
          }
          v63 = v99;
        }
      }
      ++v93;
      v68 = HIWORD(v168);
      v92 += 16;
    }
    while (v93 < HIWORD(v168));
  }
  if (v94 >= v68)
  {
    v106 = v160;
    v107 = v162;
  }
  else
  {
    v104 = v172;
    v105 = *(_WORD *)(v172 + 16) + v94 - v68;
    *(_WORD *)(v172 + 16) = v105;
    v106 = v160;
    v107 = v162;
    if (v105 >= 2u)
    {
      memmove((void *)(*(_QWORD *)(v104 + 8) + ((unint64_t)v94 << 6)), (const void *)(*(_QWORD *)(v104 + 8) + ((unint64_t)v68 << 6)), (v105 - (unint64_t)v94) << 6);
      v68 = HIWORD(v168);
    }
  }
  v108 = *(int **)(v169 + 8);
  v109 = v68 - 1;
  if ((unsigned __int16)(v68 - 1) >= 2u)
  {
    v109 = v68 - 1;
    v110 = &v108[16 * (unint64_t)(unsigned __int16)(v68 - 1)];
    v111 = v110;
    while (1)
    {
      v113 = *v111;
      v111 -= 16;
      v112 = v113;
      if (v113 != 1 && (v112 || v110[5] != 0x4000))
        break;
      --v109;
      v110 = v111;
      if ((v109 & 0xFFFE) == 0)
      {
        v109 = 1;
        break;
      }
    }
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] end marker is pMrk[%d] (iMEnd=%d)", v64, v65, v66, v109);
  v114 = HIWORD(v168);
  if (HIWORD(v168))
  {
    v115 = v108;
    do
    {
      v116 = *v115;
      v115 += 16;
      if (!v116)
        ++*a11;
      --v114;
    }
    while (v114);
  }
  v117 = v108[6];
  v118 = v107 - v117;
  v119 = (unsigned __int16)v168;
  v120 = v173;
  v121 = &v108[16 * (unint64_t)v109];
  v122 = v108[8]
       - v117
       + v121[6]
       + *(unsigned __int16 *)(v173 + 2) * (unsigned __int16)v168
       + v121[7]
       - (v121[8]
        + v121[9]);
  if (v107 - v117 < 0 && v122 < 0)
  {
    v26 = *(_QWORD *)(v174 + 32);
    v27 = 1902;
    goto LABEL_8;
  }
  v123 = v107 != v117 && v122 < 0;
  if (!v123)
    v118 = v108[8]
         - v117
         + v121[6]
         + *(unsigned __int16 *)(v173 + 2) * (unsigned __int16)v168
         + v121[7]
         - (v121[8]
          + v121[9]);
  v108[7] = v118;
  v108[9] = *(unsigned __int16 *)(v120 + 2) * v119;
  LOWORD(v168) = 0;
  v124 = v169;
  v125 = *(_WORD *)(v169 + 16);
  if (!v125)
  {
    v128 = a12;
    goto LABEL_165;
  }
  v126 = 0;
  v127 = v108 + 5;
  v128 = a12;
  do
  {
    v129 = v127 - 5;
    if (*v127 == 3)
    {
      if (v127[5] && v127[3] - v108[8] >= v108[9])
        goto LABEL_157;
    }
    else if ((*v127 & 0xFFFFFFFE) == 2)
    {
      goto LABEL_157;
    }
    v130 = (unsigned __int16)v168;
    v131 = &v108[16 * (unint64_t)(unsigned __int16)v168];
    v132 = *(_OWORD *)(v127 + 3);
    v133 = *(_OWORD *)(v127 + 7);
    v134 = *(_OWORD *)(v127 - 1);
    *(_OWORD *)v131 = *v129;
    *((_OWORD *)v131 + 1) = v134;
    *((_OWORD *)v131 + 2) = v132;
    *((_OWORD *)v131 + 3) = v133;
    v135 = v131 + 5;
    v136 = v131[5];
    if (v136 == 3 && !v131[10] || *v127 == 3 && v127[3] - v108[8] < v108[9])
    {
      *v135 = 999;
      v108[16 * v130 + 10] = 0;
    }
    else if (v136 == 3)
    {
      *v135 = 2;
    }
    LOWORD(v168) = v130 + 1;
LABEL_157:
    if (v127[3] <= v108[8] && *v127 != 0x4000 && !*(_DWORD *)v129)
    {
      *v160 += v127[2];
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] [2] add pMrk[%d].lenRef (tag=%d) to posRefOffset(%d) %d,%d %d,%d", v22, v23, v24, v126);
    }
    ++v126;
    v124 = v169;
    v127 += 16;
  }
  while (v126 < *(unsigned __int16 *)(v169 + 16));
  v125 = v168;
  v106 = v160;
LABEL_165:
  *(_WORD *)(v124 + 16) = v125;
  v25 = sparser_TrimBlankHead(a1, a2, v106, v128, &v167, a9, a10);
  if ((v25 & 0x80000000) != 0)
    return v25;
  v25 = datac_RequestBlock(a2, 1021, 1u, &v169);
  if ((v25 & 0x80000000) != 0)
    return v25;
  v137 = *(_QWORD *)(v169 + 8);
  v138 = *(_DWORD *)(v137 + 24);
  v139 = *(_DWORD *)(v137 + 28);
  v25 = datac_RequestBlock(a2, 1011, 1u, &v172);
  if ((v25 & 0x80000000) != 0)
    return v25;
  if (!v158)
    return 0;
  v140 = v172;
  v141 = *(_DWORD **)(v172 + 8);
  v141[6] = v139 + v138;
  v142 = *(unsigned __int16 *)(v140 + 16);
  if (v142 < 2)
    return 0;
  v143 = v141 + 24;
  v144 = v141[8];
  v145 = v142 - 1;
  v146 = v143;
  do
  {
    v147 = *v146;
    v146 += 16;
    if (v147 == v144)
    {
      v148 = *(v143 - 3);
      v123 = v148 > 0x24;
      v149 = (1 << v148) & 0x1080200080;
      if (!v123 && v149 != 0)
        *(v143 - 2) = v139 + v138;
    }
    v12 = 0;
    v143 = v146;
    --v145;
  }
  while (v145);
  return v12;
}

uint64_t sparser_GetCharacterLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, _WORD *a6)
{
  uint64_t v8;
  uint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;

  v8 = *a5;
  if (v8 >= *(unsigned __int16 *)(a2 + 16))
  {
    LOWORD(v13) = *(_WORD *)(a3 + 16);
  }
  else
  {
    v11 = *(_QWORD *)(a3 + 8);
    v12 = *a5 + utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v8));
    *a5 = v12;
    v13 = (unsigned __int16)*a6;
    v14 = *(unsigned __int16 *)(a3 + 16);
    if (v13 < v14)
    {
      v15 = *(_DWORD *)(v11 + 32) + *(unsigned __int16 *)(a2 + 2) * v12;
      v16 = (unsigned int *)(v11 + 32 + (v13 << 6));
      while (1)
      {
        v17 = *v16;
        v16 += 16;
        if (v17 >= v15)
          break;
        if (v14 == ++v13)
        {
          LOWORD(v13) = *(_WORD *)(a3 + 16);
          break;
        }
      }
    }
  }
  *a6 = v13;
  return 0;
}

uint64_t sparser_GetWordLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, unsigned __int16 *a6)
{
  uint64_t v11;
  int v12;
  unsigned __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int16 v20;
  unsigned int v22;
  uint64_t v24;
  unsigned __int16 v25;
  uint64_t v26;
  _BOOL4 v27;
  _DWORD *v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v37;
  unsigned int v38;
  unsigned __int16 v39;

  v11 = *(_QWORD *)(a3 + 8);
  v39 = 0;
  v12 = *a5;
  chars_ScanNonBlanks(*(_QWORD *)(a2 + 8), a5, *(unsigned __int16 *)(a2 + 16));
  sparser_getMaxCharsPerText(a1, (__int16 *)&v39);
  v13 = Utf8_LengthInUtf8chars(*(_QWORD *)(a2 + 8), *a5);
  v18 = v39;
  if (v39 >= v13)
  {
    v20 = *a5;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)&modPP_1, 1814, 0, v14, v15, v16, v17, v37);
    *a5 = v18;
    v38 = v18;
    utf8_GetPreviousValidUtf8Offset(*(_QWORD *)(a2 + 8), &v38);
    if (v38)
      --v38;
    utf8_GetPreviousValidUtf8Offset(*(_QWORD *)(a2 + 8), &v38);
    v19 = (unsigned __int16)v38;
    *a5 = v38;
    v20 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v19));
    *a5 = v20;
    if (*(unsigned __int16 *)(a2 + 16) > v20 && v18 >= 2)
    {
      v22 = 1;
      do
      {
        v20 = *a5 + utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v20));
        *a5 = v20;
        ++v22;
      }
      while (*(unsigned __int16 *)(a2 + 16) > v20 && v22 < v18);
    }
  }
  v24 = *(unsigned __int16 *)(a3 + 16);
  if (v12 == v20)
  {
LABEL_18:
    v25 = v24;
  }
  else
  {
    if (*(_WORD *)(a3 + 16))
    {
      v26 = 0;
      v27 = 0;
      v25 = 0;
      v28 = (_DWORD *)(v11 + 40);
      do
      {
        if (v27 || *(v28 - 2) - *(_DWORD *)(v11 + 32) >= v20)
          break;
        if (*(v28 - 5) == 7)
        {
          v27 = *v28 == 43;
          if (*v28 == 43)
            v25 = v26;
        }
        else
        {
          v27 = 0;
        }
        v28 += 16;
        ++v26;
      }
      while (v24 != v26);
      if (v27)
      {
        v29 = v11 + ((unint64_t)v25 << 6);
        v30 = *(_DWORD *)(v11 + 32);
        if (*(_WORD *)(v29 + 32) != (_WORD)v30 || *(_DWORD *)(v29 + 20) != 7)
        {
          *a5 = *(_WORD *)(v29 + 32) - v30;
          goto LABEL_42;
        }
        while (1)
        {
          v31 = v25++;
          if (v24 <= v25)
            break;
          v32 = v11 + ((unint64_t)v25 << 6);
          if (*(_DWORD *)(v32 + 20) == 7)
          {
            *a5 = *(_DWORD *)(v32 + 32) - v30;
            *a6 = v31 + 2;
            LODWORD(v24) = *(unsigned __int16 *)(a3 + 16);
            break;
          }
        }
      }
    }
    v33 = *a6;
    v25 = *a6;
    if (v33 < v24)
    {
      v34 = (unsigned int *)(v11 + 32 + (v33 << 6));
      while (1)
      {
        v35 = *v34;
        v34 += 16;
        if (v35 >= *(_DWORD *)(v11 + 32) + *(unsigned __int16 *)(a2 + 2) * *a5)
          break;
        if (v24 == ++v33)
          goto LABEL_18;
      }
      v25 = v33;
    }
  }
LABEL_42:
  *a6 = v25;
  return 0;
}

uint64_t sparser_GetLineLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, _WORD *a6)
{
  uint64_t v11;
  int v12;
  unsigned __int16 v13;
  unsigned int v14;
  _WORD *v15;
  unsigned int v16;
  int v17;
  unsigned __int16 v18;
  unsigned int v19;
  unsigned __int16 i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  uint64_t v26;
  _BOOL4 v27;
  unsigned __int16 v28;
  _DWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  _DWORD *v36;
  unsigned int v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  unsigned int v42;
  unsigned int v43;
  _WORD *v44;
  unsigned int v46;
  unsigned __int16 v47;

  v11 = *(_QWORD *)(a3 + 8);
  v47 = 0;
  v12 = *a5;
  chars_ScanForLineEnd(*(_QWORD *)(a2 + 8), a5, *(unsigned __int16 *)(a2 + 16));
  sparser_getMaxCharsPerText(a1, (__int16 *)&v47);
  v13 = Utf8_LengthInUtf8chars(*(_QWORD *)(a2 + 8), *a5);
  v14 = v47;
  if (v47 < v13)
  {
    v15 = a6;
    *a5 = v47;
    v16 = v14;
    if (v14 == *(unsigned __int16 *)(a2 + 16))
    {
      *a5 = v14 - 1;
      v16 = (unsigned __int16)(v14 - 1);
    }
    v46 = v16;
    utf8_GetPreviousValidUtf8Offset(*(_QWORD *)(a2 + 8), &v46);
    v17 = (unsigned __int16)v46;
    *a5 = v46;
    v18 = Utf8_LengthInUtf8chars(*(_QWORD *)(a2 + 8), v17);
    v19 = *a5;
    if (v19 < *(unsigned __int16 *)(a2 + 16))
    {
      for (i = v18; v14 > i; ++i)
      {
        LOWORD(v19) = *a5
                    + utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + (unsigned __int16)v19));
        *a5 = v19;
        if (*(unsigned __int16 *)(a2 + 16) <= (unsigned __int16)v19)
          break;
      }
    }
    chars_BackScanToBlank(*(_QWORD *)(a2 + 8), a5);
    v25 = *a5;
    if (!*a5)
    {
      *a5 = v19;
      v25 = v19;
    }
    a6 = v15;
    if (*(_WORD *)(a3 + 16))
    {
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = (_DWORD *)(v11 + 40);
      do
      {
        if (*(v29 - 2) - *(_DWORD *)(v11 + 32) > v25)
          break;
        if (*(v29 - 5) == 7)
        {
          v27 = !v27;
          if (*v29 == 43)
            v28 = v26;
          else
            v27 = 0;
        }
        v29 += 16;
        ++v26;
      }
      while (*(unsigned __int16 *)(a3 + 16) != v26);
      if (v27)
        *a5 = *(_WORD *)(v11 + ((unint64_t)v28 << 6) + 32) - *(_WORD *)(v11 + 32);
    }
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)&modPP_1, 1815, 0, v21, v22, v23, v24, v42);
  }
  v30 = *a5;
  if (v12 == v30)
  {
    LOWORD(v31) = *(_WORD *)(a3 + 16);
  }
  else
  {
    v31 = (unsigned __int16)*a6;
    v32 = *(unsigned __int16 *)(a3 + 16);
    if (v31 < v32)
    {
      v44 = a6;
      v33 = *(_DWORD *)(v11 + 32);
      v43 = *(unsigned __int16 *)(a2 + 2);
      v34 = v43 * v30;
      v35 = v43 * v30 + v33;
      v36 = (_DWORD *)(v11 + (v31 << 6));
      while (1)
      {
        v37 = v36[8];
        if (v37 >= v35)
          break;
        if (v34 >= (unsigned __int16)(v37 - v33))
        {
          v38 = v36[10];
          if (sparser_marker_IsSentenceBoundary((_BOOL8)v36, (char *)(*(_QWORD *)(a4 + 8) + v38)))
          {
            v39 = (_DWORD)v38 == 1 && (v36[5] & 0xFFFFFFFE) == 2;
            v40 = v39;
            if (v37 != v33 && !v40)
            {
              *a5 = (unsigned __int16)(v37 - v33) / v43;
              break;
            }
          }
        }
        ++v31;
        v36 += 16;
        if (v32 == v31)
        {
          LOWORD(v31) = v32;
          break;
        }
      }
      a6 = v44;
    }
  }
  *a6 = v31;
  return 0;
}

uint64_t sparser_GetSentenceLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _WORD *a5, unsigned __int16 *a6)
{
  _WORD *v6;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int IsSuppressedSentenceBoundary;
  __int16 v20;

  v6 = a6;
  v11 = *(_QWORD *)(a3 + 8);
  v12 = *a6;
  v13 = *(unsigned __int16 *)(a3 + 16);
  if (v12 < v13)
  {
    v14 = *(_DWORD *)(v11 + 32);
    v15 = *(unsigned __int16 *)(a2 + 2) * (unsigned __int16)*a5;
    v16 = v11 + (v12 << 6);
    while (v15 >= (unsigned __int16)(*(_WORD *)(v16 + 32) - v14)
         || !sparser_marker_IsSentenceBoundary(v16, (char *)(*(_QWORD *)(a4 + 8) + *(unsigned int *)(v16 + 40))))
    {
      v16 += 64;
      LOWORD(v12) = v12 + 1;
      if (v13 == (unsigned __int16)v12)
      {
        LOWORD(v12) = v13;
        v6 = a6;
        goto LABEL_17;
      }
    }
    LODWORD(v12) = (unsigned __int16)v12;
    v6 = a6;
  }
  if (v12 < v13)
  {
    v12 = v12;
    v17 = v11 + ((unint64_t)v12 << 6);
    do
    {
      v18 = *(_DWORD *)(v17 + 32) - *(_DWORD *)(v11 + 32);
      if (*(unsigned __int16 *)(a2 + 2) * (unsigned __int16)*a5 < (unsigned __int16)(*(_WORD *)(v17 + 32)
                                                                                                  - *(_WORD *)(v11 + 32))
        && sparser_marker_IsSentenceBoundary(v17, (char *)(*(_QWORD *)(a4 + 8) + *(unsigned int *)(v17 + 40))))
      {
        IsSuppressedSentenceBoundary = sparser_IsSuppressedSentenceBoundary(a3, a2, v18);
        v13 = *(unsigned __int16 *)(a3 + 16);
        if (!IsSuppressedSentenceBoundary)
          break;
      }
      v17 += 64;
      ++v12;
    }
    while (v12 < v13);
    LODWORD(v12) = (unsigned __int16)v12;
  }
  if (v12 >= v13)
LABEL_17:
    v20 = *(_WORD *)(a2 + 16);
  else
    v20 = (unsigned __int16)(*(_DWORD *)(v11 + ((unint64_t)v12 << 6) + 32) - *(_DWORD *)(v11 + 32))
        / *(_WORD *)(a2 + 2);
  *a5 = v20;
  *v6 = v12;
  return 0;
}

uint64_t sparser_SetArgAsParamStr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  size_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v7 = 2369789959;
  v15 = 0;
  v16 = 0;
  if ((InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v16) & 0x80000000) == 0
    && (datac_RequestBlock(a2, 1012, 1u, &v15) & 0x80000000) == 0)
  {
    v8 = (unsigned __int16)strlen((const char *)(*(_QWORD *)(v15 + 8) + *(unsigned int *)(a3 + 40)));
    v9 = (char *)heap_Calloc(*(_QWORD **)(v16 + 8), 1, v8 + 1);
    if (v9)
    {
      v10 = v9;
      strncpy(v9, (const char *)(*(_QWORD *)(v15 + 8) + *(unsigned int *)(a3 + 40)), v8)[v8] = 0;
      v7 = paramc_ParamSetStr(*(_QWORD *)(v16 + 40), a4, v10);
      if ((v7 & 0x80000000) == 0)
        log_OutText(*(_QWORD *)(v16 + 32), (uint64_t)&modPP_1, 4, 0, (uint64_t)"[SPARSER] SET PARAM marker:%d param=%s val=%s", v11, v12, v13, *(unsigned int *)(a3 + 20));
      heap_Free(*(_QWORD **)(v16 + 8), (uint64_t)v10);
    }
    else
    {
      return 2369789962;
    }
  }
  return v7;
}

BOOL sparser_marker_IsReadOutControlDefaultArg(int a1, unsigned int a2, uint64_t a3, int a4)
{
  _BOOL8 result;

  result = 0;
  if (a1 > 30)
  {
    if (a1 != 31)
    {
      if (a1 != 36)
        return result;
      return a3 && strcmp((const char *)(a3 + a2), "normal") == 0;
    }
    return a2 == a4;
  }
  else
  {
    if (a1 != 7)
    {
      if (a1 != 21)
        return result;
      return a3 && strcmp((const char *)(a3 + a2), "normal") == 0;
    }
    return a2 == 15;
  }
}

uint64_t sparser_TrimBlankHead(uint64_t a1, uint64_t a2, _DWORD *a3, _WORD *a4, _WORD *a5, _DWORD *a6, uint64_t a7)
{
  uint64_t v7;
  _WORD *v9;
  _WORD *v10;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned __int16 v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  int v32;
  int v33;
  unsigned int v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  _DWORD *v38;
  unint64_t i;
  unsigned __int16 v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned __int16 v49;
  _DWORD *v50;
  unsigned __int16 v51;
  unsigned int v52;
  BOOL v54;
  int v55;
  _OWORD *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _DWORD *v75;
  int v76;
  _DWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _WORD *v80;
  _DWORD *v81;
  uint64_t v82;
  _DWORD *v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  unsigned __int16 v94;
  __int128 *v95;
  unsigned int v96;
  unsigned int v97;
  __int128 *v98;
  unsigned int v99;
  uint64_t v100;
  unsigned int v101;
  _DWORD *v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  BOOL v106;
  unsigned int v107;
  _DWORD *v108;
  _WORD *v109;
  _DWORD *v110;
  _DWORD *v111;
  int v112;
  uint64_t v113;
  _DWORD *v114;
  uint64_t v115;
  int v116;
  int v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;

  v7 = a7;
  v9 = a5;
  v10 = a4;
  v122 = 0;
  v123 = 0;
  v120 = 0u;
  v121 = 0u;
  v118 = 0u;
  v119 = 0u;
  v116 = 0;
  v117 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  *(_DWORD *)(a7 + 20) = 0;
  result = datac_RequestBlock(a2, 1020, 1u, &v123);
  if ((result & 0x80000000) != 0)
    return result;
  result = datac_RequestBlock(a2, 1021, 1u, &v122);
  if ((result & 0x80000000) != 0)
    return result;
  result = chars_ScanBlankHead(v123, (unsigned __int16 *)&v117 + 1, v122, &v117, &v116, 0);
  if ((result & 0x80000000) != 0)
    return result;
  result = datac_RequestBlock(a2, 1021, 1u, &v122);
  if ((result & 0x80000000) != 0)
    return result;
  v114 = a3;
  v115 = a1;
  v18 = *(_DWORD **)(v122 + 8);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] got %d (byte) blanks, but do they bisect markers?", v15, v16, v17, *(unsigned __int16 *)(v123 + 2) * HIWORD(v117));
  if (v116)
  {
    v22 = 1;
  }
  else
  {
    v40 = 0;
    v112 = v18[8];
    v111 = v18 + 8;
    v41 = v122;
    v22 = 1;
    do
    {
      v42 = *(unsigned __int16 *)(v41 + 16);
      if (v40 >= v42)
        break;
      v43 = v18[16 * (unint64_t)v40 + 5];
      v44 = v43 > 0x24 || ((1 << v43) & 0x1080300080) == 0;
      if (v44
        || v18[16 * (unint64_t)v40]
        || (v45 = v18[16 * (unint64_t)v40 + 8],
            v46 = v18[8],
            v47 = *(unsigned __int16 *)(v123 + 2),
            v48 = v47 * HIWORD(v117),
            v45 >= v48 + v46))
      {
        v55 = 0;
      }
      else
      {
        if (v42 <= (unsigned __int16)(v40 + 1))
        {
          v113 = v40;
          v51 = v40;
        }
        else
        {
          v49 = v40 + 1;
          v50 = &v111[16 * (unint64_t)(unsigned __int16)(v40 + 1)];
          v51 = v40;
          do
          {
            v52 = *(v50 - 3);
            if (v52 <= 0x24 && ((1 << v52) & 0x1080300080) != 0)
            {
              v54 = v52 == v43 && *(v50 - 8) == 0;
              if (v54 && *v50 < v48 + v46)
                v51 = v49;
            }
            ++v49;
            v50 += 16;
          }
          while (v42 != v49);
          v113 = v51;
          v45 = v18[16 * (unint64_t)v51 + 8];
        }
        if (v45 < v46 || (v45 - v46) / v47 >= HIWORD(v117))
        {
          if (v18[16 * (unint64_t)v40 + 6] - v18[6] == v48)
          {
            log_OutText(*(_QWORD *)(*(_QWORD *)(v115 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] reset to reference region at marker %d", v19, v20, v21, v40);
            v22 = 0;
            v84 = *(unsigned __int16 *)(v123 + 2) * HIWORD(v117);
            v85 = v18[7] - v84;
            v18[6] += v84;
            v18[7] = v85;
            LOWORD(v117) = v40;
            v41 = v122;
          }
        }
        else
        {
          v56 = &v18[16 * v113];
          v109 = v9;
          v110 = v56 + 2;
          LOWORD(v117) = v51;
          v57 = v56[3];
          v59 = *v56;
          v58 = v56[1];
          *(_OWORD *)(v7 + 32) = v56[2];
          *(_OWORD *)(v7 + 48) = v57;
          *(_OWORD *)v7 = v59;
          *(_OWORD *)(v7 + 16) = v58;
          log_OutText(*(_QWORD *)(*(_QWORD *)(v115 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] hard reference reset at marker %d", v19, v20, v21, v51);
          log_OutText(*(_QWORD *)(*(_QWORD *)(v115 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] reset to reference region at marker %d", v60, v61, v62, v51);
          v63 = &v18[16 * v113];
          v64 = v63[6];
          v63 += 6;
          v65 = (v64 - v18[6]);
          *a6 = v65;
          log_OutText(*(_QWORD *)(*(_QWORD *)(v115 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] set refReset(%d) due to readout control marker %d", v66, v67, v68, v65);
          v69 = v18[7] - *v63 + v18[6];
          v18[6] = *v63;
          v18[7] = v69;
          v108 = v63;
          v70 = v63[1]
              + (HIWORD(v117) - (*v110 - v18[8]) / *(unsigned __int16 *)(v123 + 2))
              * *(unsigned __int16 *)(v123 + 2);
          *v114 = v70;
          log_OutText(*(_QWORD *)(*(_QWORD *)(v115 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] set posRefOffset(%d) due to readout control marker %d", v71, v72, v73, v70);
          v41 = v122;
          if (*(unsigned __int16 *)(v122 + 16) > (unsigned __int16)(v51 + 1))
          {
            v74 = (unsigned __int16)(v51 + 1);
            v75 = &v111[16 * v74];
            v76 = v112;
            v77 = v108;
            do
            {
              if ((*(v75 - 3) == 999 || !*(v75 - 8))
                && *v75 <= v76 + *(unsigned __int16 *)(v123 + 2) * HIWORD(v117)
                && *(v75 - 2) >= *v77)
              {
                v78 = (*v114 + *(v75 - 1));
                *v114 = v78;
                v79 = v7;
                v80 = v10;
                v81 = v77;
                log_OutText(*(_QWORD *)(*(_QWORD *)(v115 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] set posRefOffset(%d) due to marker %d", v19, v20, v21, v78);
                v77 = v81;
                v10 = v80;
                v7 = v79;
                v76 = v112;
                v41 = v122;
              }
              ++v74;
              v75 += 16;
            }
            while (v74 < *(unsigned __int16 *)(v41 + 16));
          }
          if (v51 < 2u)
          {
            v22 = 0;
            v9 = v109;
          }
          else
          {
            v82 = v113 - 1;
            v83 = v18 + 21;
            v9 = v109;
            do
            {
              if (*v83 == 999)
                *v83 = 0x4000;
              v83 += 16;
              --v82;
            }
            while (v82);
            v22 = 0;
          }
        }
        v40 = *(_WORD *)(v41 + 16);
        v55 = v116;
      }
      ++v40;
    }
    while (!v55);
  }
  v23 = HIWORD(v117);
  if (!HIWORD(v117) && !*(_DWORD *)(v7 + 20))
    return 0;
  v24 = v22;
  v25 = v123;
  v26 = *(_WORD *)(v123 + 16) - HIWORD(v117);
  *(_WORD *)(v123 + 16) = v26;
  memmove(*(void **)(v25 + 8), (const void *)(*(_QWORD *)(v25 + 8) + v23), *(unsigned __int16 *)(v25 + 2) * (unint64_t)v26);
  result = datac_RequestBlock(a2, 1021, (unsigned __int16)(*(_WORD *)(v122 + 16) + 1), &v122);
  if ((result & 0x80000000) != 0)
    return result;
  v27 = v122;
  v28 = *(__int128 **)(v122 + 8);
  v29 = (unsigned __int16)v117;
  if ((unsigned __int16)v117 == 1)
  {
    v30 = v28[1];
    v118 = *v28;
    v119 = v30;
    v31 = v28[3];
    v120 = v28[2];
    v121 = v31;
    *((_DWORD *)v28 + 7) = 0;
    *((_DWORD *)v28 + 9) = 0;
  }
  v32 = *((_DWORD *)v28 + 8);
  v33 = *((_DWORD *)v28 + 6);
  v34 = v32
      - v33
      + *((_DWORD *)&v28[4 * v29 - 2] - 2)
      + *((_DWORD *)&v28[4 * v29 - 2] - 1)
      + *(unsigned __int16 *)(v123 + 2) * HIWORD(v117)
      - (LODWORD(v28[4 * v29 - 2])
       + *((_DWORD *)&v28[4 * v29 - 1] - 3));
  if ((_DWORD)v29 == 1)
  {
    v35 = v119;
    *v28 = v118;
    v28[1] = v35;
    v36 = v121;
    v28[2] = v120;
    v28[3] = v36;
  }
  v37 = *(unsigned __int16 *)(v27 + 16);
  if (v37 < 2)
  {
    LOWORD(i) = 1;
  }
  else
  {
    v38 = (_DWORD *)v28 + 25;
    for (i = 1; i < v37; ++i)
    {
      if (v32 != *(v38 - 1))
        break;
      if (*v38)
        break;
      if (v33 != *(v38 - 3))
        break;
      if (v34 <= *(v38 - 2))
        break;
      v38 += 16;
    }
  }
  LOWORD(v117) = i;
  memmove(&v28[4 * (unint64_t)(unsigned __int16)i + 4], &v28[4 * (unint64_t)(unsigned __int16)i], (v37 - (unsigned __int16)i) << 6);
  v89 = &v28[4 * (unint64_t)(unsigned __int16)v117];
  *(_QWORD *)v89 = 0;
  *((_QWORD *)v89 + 1) = 0;
  *((_QWORD *)v89 + 2) = 0x400000000000;
  *((_DWORD *)v89 + 6) = v33;
  *((_DWORD *)v89 + 7) = v34;
  *((_DWORD *)v89 + 8) = v32;
  *(_QWORD *)((char *)v89 + 36) = 0;
  *(_QWORD *)((char *)v89 + 52) = 0;
  *(_QWORD *)((char *)v89 + 44) = 0;
  *((_DWORD *)v89 + 15) = 0;
  v90 = v122;
  v91 = v123;
  ++*(_WORD *)(v122 + 16);
  v92 = HIWORD(v117);
  *v10 = *(_WORD *)(v91 + 2) * HIWORD(v117);
  if (v24 == 1)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)(v115 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] add blanks (%d) to posRefOffset(%d)", v86, v87, v88, *(unsigned __int16 *)(v91 + 2) * v92);
    v92 = HIWORD(v117);
    v91 = v123;
    *v114 += *(unsigned __int16 *)(v123 + 2) * HIWORD(v117);
    v90 = v122;
  }
  if (*(_DWORD *)(v7 + 20))
  {
    v93 = *(unsigned __int16 *)(v90 + 16);
  }
  else
  {
    LOWORD(v117) = 1;
    if (*(unsigned __int16 *)(v90 + 16) < 2u)
      goto LABEL_90;
    v94 = 1;
    do
    {
      v95 = &v28[4 * (unint64_t)v94];
      v96 = *((_DWORD *)v95 + 8);
      v97 = *((_DWORD *)v28 + 8);
      if (v96 > v97
        && v96 <= v97 + *(unsigned __int16 *)(v123 + 2) * HIWORD(v117)
        && DWORD1(v28[4 * (unint64_t)v94 + 1]) != 0x4000
        && !*(_DWORD *)v95)
      {
        log_OutText(*(_QWORD *)(*(_QWORD *)(v115 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] adjust posRefOffset(%d) by %d for leading esc sequences (marker tag=%d %d,%d,%d,%d)", v86, v87, v88, *v114);
        v94 = v117;
        v98 = &v28[4 * (unint64_t)(unsigned __int16)v117];
        *v114 += *((_DWORD *)v98 + 7);
        *v9 += *((_WORD *)v98 + 14);
        v90 = v122;
      }
      LOWORD(v117) = ++v94;
      v93 = *(unsigned __int16 *)(v90 + 16);
    }
    while (v93 > v94);
    v92 = HIWORD(v117);
    v91 = v123;
  }
  if (v93 > 1)
  {
    v99 = *(unsigned __int16 *)(v91 + 2) * v92;
    v100 = v93;
    v101 = *((_DWORD *)v28 + 8);
    v102 = v28 + 6;
    v103 = v100 - 1;
    do
    {
      if (*v102 >= v99 + v101)
        v104 = *v102 - v99;
      else
        v104 = v101;
      *v102 = v104;
      v102 += 16;
      --v103;
    }
    while (v103);
    goto LABEL_91;
  }
LABEL_90:
  v99 = *(unsigned __int16 *)(v91 + 2) * v92;
LABEL_91:
  result = 0;
  v105 = *((_DWORD *)v28 + 9);
  v106 = v105 >= v99;
  v107 = v105 - v99;
  if (!v106)
    v107 = 0;
  *((_DWORD *)v28 + 9) = v107;
  return result;
}

uint64_t sparser_ProcessStart(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t UInt;
  uint64_t result;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  v12 = 0;
  v11 = 0;
  if ((InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v12) & 0x80000000) != 0)
    return 2369789959;
  *(_DWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 180) = a2;
  *(_WORD *)(a1 + 184) = 200;
  UInt = paramc_ParamGetUInt(*(_QWORD *)(v12 + 40), (uint64_t)"ppmaxmarkersinemptytext", &v11);
  result = 0;
  if ((UInt & 0x1FFF) != 0x14)
  {
    if ((UInt & 0x80000000) == 0)
    {
      if (v11 - 1 > 0xFFFD)
        log_OutPublic(*(_QWORD *)(v12 + 32), (uint64_t)&modPP_1, 1820, 0, v4, v5, v6, v7, v10);
      else
        *(_WORD *)(a1 + 184) = v11;
    }
    return UInt;
  }
  return result;
}

uint64_t sparser_GetScanPosition(uint64_t a1)
{
  return *(unsigned int *)(a1 + 168);
}

uint64_t sparser_bed_MapPosCur(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t result;
  unsigned int v7;
  _DWORD *v8;
  _DWORD *v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v13;
  unsigned __int16 v14;
  uint64_t v15;

  v15 = 0;
  if (!a3)
    return 2369789959;
  v14 = 0;
  *a3 = a2;
  LODWORD(result) = bed_GetpElem(a1, 0, &v15);
  if ((result & 0x80000000) != 0)
  {
    if ((result & 0x1FFF) == 0xF)
      return 0;
    else
      return result;
  }
  else
  {
    result = bed_GetcElem(a1, &v14);
    if ((result & 0x80000000) == 0)
    {
      if (!v14)
        return 0;
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = (_DWORD *)(v15 + ((unint64_t)v7 << 6));
        v10 = v9[8];
        if (v10 > a2)
          break;
        v11 = *v9 == 1 && v7 == 0;
        if (v11 || *v9 == 0)
        {
          v13 = *(_DWORD *)(v15 + ((unint64_t)v7 << 6) + 36) + v10;
          if (v13 <= a2 && (!v8 || v8[9] + v8[8] <= v13))
            v8 = (_DWORD *)(v15 + ((unint64_t)v7 << 6));
        }
        ++v7;
      }
      while (v7 < v14);
      if (v8)
      {
        result = 0;
        *a3 += v8[7] + v8[6] - (v8[8] + v8[9]);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

BOOL sparser_marker_HasGreaterEqualPosCur(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = 0;
  if (a1)
  {
    if (a2)
      return *(_DWORD *)(a1 + 32) <= *(_DWORD *)(a2 + 32);
  }
  return result;
}

BOOL sparser_marker_HasStrictlyGreaterPosCur(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = 0;
  if (a1)
  {
    if (a2)
      return *(_DWORD *)(a1 + 32) < *(_DWORD *)(a2 + 32);
  }
  return result;
}

BOOL sparser_marker_IsSentenceBoundary(_BOOL8 result, char *__s1)
{
  int v2;
  BOOL v3;

  if (result)
  {
    v2 = *(_DWORD *)(result + 20);
    if ((v2 & 0xFFFFFFFE) == 2 && *(_DWORD *)(result + 40) == 1)
      return 1;
    v3 = v2 == 12 || v2 == 20;
    return v3 || v2 == 36 && !strcmp(__s1, "vceunkn") || v2 == 200;
  }
  return result;
}

uint64_t sparser_IsSuppressedSentenceBoundary(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t result;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  __int16 v13;
  __int16 v14;

  result = 0;
  if (a1 && a2)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_WORD *)(a2 + 2);
    v14 = a3;
    chars_BackScanNChars(*(_QWORD *)(a2 + 8), &v14, 1);
    chars_BackScanBlanksX(*(_QWORD *)(a2 + 8), &v14, (unsigned __int16)(*(_WORD *)(a2 + 16) * v7));
    chars_ScanNChars(*(_QWORD *)(a2 + 8), (unsigned __int16)(*(_WORD *)(a2 + 16) * v7), &v14, 1);
    v13 = v14;
    chars_ScanBlanks(*(_QWORD *)(a2 + 8), &v13, (unsigned __int16)(*(_WORD *)(a2 + 16) * v7));
    v8 = *(unsigned __int16 *)(a1 + 16) + 1;
    v9 = (_DWORD *)(v6 + 40);
    while (--v8)
    {
      v10 = (unsigned __int16)(*(v9 - 2) - *(_DWORD *)(v6 + 32));
      if (v10 > (unsigned __int16)(v13 * v7))
        break;
      if (*(v9 - 5) == 3)
      {
        if (*v9)
          v11 = 0;
        else
          v11 = v10 >= (unsigned __int16)(v14 * v7);
        v12 = v11;
      }
      else
      {
        v12 = 0;
      }
      v9 += 16;
      if (v12)
        return 1;
    }
    return 0;
  }
  return result;
}

BOOL sparser_marker_IsOfSameType(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = 0;
  if (a1)
  {
    if (a2)
      return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
  }
  return result;
}

uint64_t sparser_MatchSb(uint64_t a1, int a2, int a3, uint64_t a4, int a5, __int16 a6, __int16 a7, uint64_t a8, unsigned __int16 a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int16 v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  __int16 v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 v39;
  _BOOL4 v40;
  int *v41;
  int v42;
  _DWORD *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  unsigned __int16 v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  _BOOL4 v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int LogLevel;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int IsNonFinalAbbr;
  uint64_t v72;
  int v73;
  unsigned int v76;
  unsigned int v78;
  int v79;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int16 v85;
  _OWORD v86[2];
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  unsigned __int16 v91;
  unsigned int v92;
  unsigned __int16 v93;
  unsigned __int16 v94;
  int v95;
  int v96;
  _DWORD v97[17];
  _BYTE v98[64];
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v90 = 0;
  v86[0] = 0u;
  v89 = 0u;
  LODWORD(v86[0]) = 1;
  v86[1] = 0x200000000uLL;
  v87 = 0;
  DWORD2(v89) = 0;
  v88 = 1;
  v12 = 136;
  if (!a2)
    v12 = 120;
  v13 = 144;
  if (!a2)
    v13 = 128;
  v14 = *(unsigned __int16 *)(a1 + v13);
  v83 = *(_QWORD *)(a1 + v12);
  v15 = *(char **)(a4 + 8);
  v16 = *(_WORD *)(a4 + 2);
  v78 = bed_GetpBlock(a8, &v90);
  if ((v78 & 0x80000000) == 0 && (_DWORD)v14)
  {
    v17 = 0;
    v85 = v16 * a7;
    v82 = (unsigned __int16)(v16 * a7);
    v81 = v14;
    v79 = a5;
    do
    {
      v78 = bed_Goto(a8, a9);
      if ((v78 & 0x80000000) != 0)
        return v78;
      v84 = *(_QWORD *)(a1 + 112)
          + *(unsigned int *)(*(_QWORD *)(a1 + 104) + 8 * *(unsigned __int16 *)(v83 + 2 * v17));
      LOWORD(v18) = *(_WORD *)(a4 + 2) * a6;
      v19 = a3;
      while ((unsigned __int16)v18 < v85
           && (nuance_pcre_exec(*(_QWORD **)(a1 + 24), *(_QWORD *)(a1 + 32), v84, 0, v15, v82, (unsigned __int16)v18, 0, &v95, 30) & 0x80000000) == 0)
      {
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] regex %d matched at pos %u (iSb=%d) %s %d : (of %d)", v20, v21, v22, *(unsigned __int16 *)(v83 + 2 * v17));
        v26 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 104) + 8 * *(unsigned __int16 *)(v83 + 2 * v17) + 4);
        if (v26 > 0xFD)
        {
          v29 = 0;
          LOWORD(v18) = v96;
          if (v26 == 255)
            v28 = v96 + a5;
          else
            v28 = v95 + a5;
          LODWORD(v87) = v28;
        }
        else
        {
          v27 = *(&v95 + 2 * v26);
          LOWORD(v28) = v27 + a5;
          LODWORD(v87) = v27 + a5;
          v18 = *(&v95 + ((2 * v26) | 1u));
          v29 = v18 - v27;
        }
        HIDWORD(v87) = v29;
        if (!v15)
          goto LABEL_66;
        v30 = v28 - a5;
        v31 = (unsigned __int16)(v28 - a5);
        if (v31 >= v85)
          goto LABEL_66;
        v32 = v90;
        v93 = v28 - a5;
        if (!*(_QWORD *)(a1 + 40))
          goto LABEL_29;
        chars_BackScanNChars((uint64_t)v15, &v93, 1);
        chars_BackScanBlanksX((uint64_t)v15, &v93, v85);
        if (!v93)
          goto LABEL_29;
        v94 = 0;
        if (!utf8_Utf8CharTo16bit((unsigned __int8 *)&v15[v93], (uint64_t)&v94)
          || v94 != 65294 && v94 != 46)
        {
          goto LABEL_29;
        }
        v92 = v93;
        v33 = *(unsigned __int8 **)(a1 + 64);
        v34 = *(unsigned __int16 *)(a1 + 72);
        if (*(_DWORD *)(a1 + 160) == 1)
          chars_BackScanNonBlanks((uint64_t)v15, &v92, v33, v34);
        else
          chars_BackScan2NonBlanksNonChinese((uint64_t)v15, &v92, v33, v34);
        v35 = v92;
        v36 = v93 - v92;
        if (v36 > 0x3E)
          goto LABEL_29;
        v57 = v36 + 1;
        v73 = v93;
        __memcpy_chk();
        v76 = v57;
        v98[v57] = 0;
        LogLevel = log_GetLogLevel(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32));
        if (sparser_IsNonFinalAbbr((_QWORD *)a1, (uint64_t)v98, v35, (v73 + 1), LogLevel, v59, v60, v61))
        {
          a5 = v79;
          v19 = a3;
          goto LABEL_66;
        }
        v91 = v93 - v92 + 1;
        chars_BackScanNChars((uint64_t)v98, &v91, 1);
        v97[0] = 6105691;
        if (v91)
        {
          do
          {
            chars_BackScanNChars((uint64_t)v98, &v91, 1);
            v62 = v91;
            v63 = v76 - v91;
            __memcpy_chk();
            *((_BYTE *)v97 + v63 + 3) = 0;
            v64 = v92 + v62;
            v65 = v93 + 1;
            v66 = log_GetLogLevel(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32));
            IsNonFinalAbbr = sparser_IsNonFinalAbbr((_QWORD *)a1, (uint64_t)v97, v64, v65, v66, v67, v68, v69);
          }
          while (v91 && !IsNonFinalAbbr);
          a5 = v79;
          v19 = a3;
          if (IsNonFinalAbbr)
            goto LABEL_66;
        }
        else
        {
LABEL_29:
          a5 = v79;
          v19 = a3;
        }
        v37 = *(_QWORD *)(v32 + 8);
        v38 = *(unsigned __int16 *)(v32 + 16);
        if (!*(_WORD *)(v32 + 16))
        {
          v48 = 0;
          goto LABEL_48;
        }
        v39 = 0;
        v40 = 0;
        v41 = (int *)(v37 + 32);
        v42 = *(_DWORD *)(v37 + 32);
        v43 = (_DWORD *)(v37 + 40);
        v44 = *(unsigned __int16 *)(v32 + 16);
        do
        {
          if (*(v43 - 2) - v42 > v31)
            break;
          v45 = *(v43 - 5);
          if (v45 == 32)
          {
            v39 = *v43 == 1;
          }
          else if (v45 == 7)
          {
            v40 = !v40;
            if (*v43 != 43)
              v40 = 0;
          }
          v43 += 16;
          --v44;
        }
        while (v44);
        if (!v40 && !v39)
        {
          v46 = 0;
          while (1)
          {
            v47 = *v41;
            v41 += 16;
            if (v47 - v42 >= v31)
              break;
            if (v38 == ++v46)
            {
              v48 = *(_WORD *)(v32 + 16);
              goto LABEL_48;
            }
          }
          v48 = v46;
LABEL_48:
          if (v48 <= v38)
            v49 = *(unsigned __int16 *)(v32 + 16);
          else
            v49 = v48;
          v50 = (unsigned int *)(v37 + ((unint64_t)v48 << 6) + 20);
          v51 = v49 - v48;
          while (v51 && v50[3] - *(_DWORD *)(v37 + 32) < (unsigned __int16)(v30 + v29))
          {
            v52 = *v50;
            v50 += 16;
            v53 = (1 << v52) & 0x10004000080;
            v55 = v52 <= 0x28 && v53 != 0;
            --v51;
            if (v55)
              goto LABEL_66;
          }
          v56 = sparser_bed_InjectMarker(a8, (unsigned int *)v86, 0, *(_DWORD *)(a1 + 188));
          v78 = 0;
          if ((v56 & 0x80000000) != 0)
            return v56;
          goto LABEL_67;
        }
LABEL_66:
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] EOS insertion blocked (may be in Phon/Multiword, or non-final abbreviation preceeds the boundary)", v23, v24, v25, v72);
LABEL_67:
        v14 = v81;
        if (!v19)
          break;
      }
      ++v17;
    }
    while (v17 != v14);
  }
  return v78;
}

BOOL sparser_marker_HasStrictlySmallerPosCur(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = 0;
  if (a1)
  {
    if (a2)
      return *(_DWORD *)(a1 + 32) > *(_DWORD *)(a2 + 32);
  }
  return result;
}

uint64_t sparser_IsNonFinalAbbr(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  __int16 v17;
  uint64_t v18;
  char v19[8];

  strcpy(v19, "is not");
  v18 = 0;
  if (a5 >= 5)
    log_OutText(*(_QWORD *)(a1[2] + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] checking if \"%s\" is a Non Final Abbr at pos %lu,%lu", a6, a7, a8, a2);
  v16 = 0;
  v17 = -1;
  if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t, uint64_t *, __int16 *, char *))(a1[5] + 96))(a1[6], a1[7], "neosnbs", a2, &v18, &v17, &v16) & 0x80000000) != 0)return 0;
  if (v17 == 1)
  {
    strcpy(v19, "is");
    v14 = 1;
  }
  else
  {
    v14 = 0;
  }
  if (a5 >= 5)
    log_OutText(*(_QWORD *)(a1[2] + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] \"%s\" %s a Non Final Abbr at pos %lu,%lu", v11, v12, v13, a2);
  return v14;
}

uint64_t sparser_getMaxCharsPerText(uint64_t a1, __int16 *a2)
{
  uint64_t result;
  __int16 v4;
  __int16 v5;
  unsigned int v6;

  result = *(_QWORD *)(a1 + 40);
  if (!result
    || (v6 = 0, result = paramc_ParamGetInt(result, (uint64_t)"maxinputlength", (int *)&v6), (result & 0x80000000) != 0))
  {
    v5 = 750;
  }
  else
  {
    if (v6 >= 0x2710)
      v4 = 10000;
    else
      v4 = v6;
    if ((int)v6 >= 1)
      v5 = v4;
    else
      v5 = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t chars_ScanBlankHead(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _WORD *a4, _DWORD *a5, unsigned int a6)
{
  uint64_t result;
  unsigned __int8 *v13;
  uint64_t v14;
  _BYTE *i;
  uint64_t v16;
  unsigned __int16 v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  int v21;
  int v22;
  unsigned int v23;

  result = 2369789959;
  if (a2 && a1 && a5 && (a3 || !a4))
  {
    *a5 = 0;
    if (a6 <= 1)
    {
      v13 = *(unsigned __int8 **)(a1 + 8);
      LODWORD(v14) = *(unsigned __int16 *)(a1 + 16);
      if (*(_WORD *)(a1 + 16))
      {
        for (i = *(_BYTE **)(a1 + 8); ; i = v13)
        {
          if (!utf8_BelongsToSet(2u, i, 0, v14))
          {
            LOWORD(v16) = (_WORD)v13;
            v13 = *(unsigned __int8 **)(a1 + 8);
            goto LABEL_15;
          }
          v13 += (unsigned __int16)utf8_determineUTF8CharLength(*v13);
          v14 = *(unsigned __int16 *)(a1 + 16);
          if ((uint64_t)&v13[-*(_QWORD *)(a1 + 8)] >= v14)
            break;
        }
        LOWORD(v16) = (_WORD)v13;
        v13 = *(unsigned __int8 **)(a1 + 8);
      }
      else
      {
        v16 = *(_QWORD *)(a1 + 8);
      }
LABEL_15:
      v17 = v16 - (_WORD)v13;
      *a2 = v17;
      if (*(unsigned __int16 *)(a1 + 16) == v17)
        *a5 = 1;
    }
    result = 0;
    if (a4 && (a6 & 0xFFFFFFFD) == 0)
    {
      *a4 = 0;
      if (*a2 && *(_WORD *)(a3 + 16))
      {
        v18 = 0;
        v19 = *(_QWORD *)(a3 + 8);
        v22 = *(_DWORD *)(v19 + 32);
        v20 = (unsigned int *)(v19 + 32);
        v21 = v22;
        while (1)
        {
          v23 = *v20;
          v20 += 16;
          if (v23 >= v21 + *(unsigned __int16 *)(a1 + 2) * *a2)
            break;
          result = 0;
          *a4 = ++v18;
          if (v18 >= *(unsigned __int16 *)(a3 + 16))
            return result;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t chars_ScanBlanks(uint64_t result, _WORD *a2, unsigned int a3)
{
  unsigned int v5;
  _BYTE *v6;

  if (result)
  {
    if (a2)
    {
      v5 = (unsigned __int16)*a2;
      if (v5 < a3)
      {
        v6 = (_BYTE *)result;
        do
        {
          result = utf8_BelongsToSet(2u, v6, (unsigned __int16)v5, a3);
          if (!(_DWORD)result)
            break;
          result = utf8_determineUTF8CharLength(v6[(unsigned __int16)*a2]);
          LOWORD(v5) = *a2 + result;
          *a2 = v5;
        }
        while (a3 > (unsigned __int16)v5);
      }
    }
  }
  return result;
}

uint64_t chars_ScanNonBlanks(uint64_t result, _WORD *a2, unsigned int a3)
{
  unsigned int v5;
  _BYTE *v6;

  if (result)
  {
    if (a2)
    {
      v5 = (unsigned __int16)*a2;
      if (v5 < a3)
      {
        v6 = (_BYTE *)result;
        do
        {
          result = utf8_BelongsToSet(2u, v6, (unsigned __int16)v5, a3);
          if ((_DWORD)result)
            break;
          result = utf8_determineUTF8CharLength(v6[(unsigned __int16)*a2]);
          LOWORD(v5) = *a2 + result;
          *a2 = v5;
        }
        while (a3 > (unsigned __int16)v5);
      }
    }
  }
  return result;
}

uint64_t chars_ScanForLineEnd(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v3;

  if (result)
  {
    if (a2)
    {
      v3 = (unsigned __int16)*a2;
      if (v3 < a3)
      {
        do
        {
          if (*(_BYTE *)(result + v3) == 10)
            break;
          *a2 = ++v3;
        }
        while (a3 != v3);
      }
    }
  }
  return result;
}

uint64_t chars_BackScanBlanks(uint64_t result, _WORD *a2)
{
  unsigned int v3;
  _BYTE *v4;
  __int16 v5;
  unsigned int v6;

  if (result && a2)
  {
    v3 = (unsigned __int16)*a2;
    v6 = v3;
    if (v3)
    {
      v4 = (_BYTE *)result;
      while (1)
      {
        result = utf8_BelongsToSet(2u, v4, v3, (unsigned __int16)*a2);
        v5 = v6;
        if (!(_DWORD)result)
          break;
        if (v6)
          --v6;
        result = utf8_GetPreviousValidUtf8Offset((uint64_t)v4, &v6);
        v3 = v6;
        if (!v6)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      v5 = 0;
    }
    *a2 = v5;
  }
  return result;
}

uint64_t chars_BackScanBlanksX(uint64_t result, _WORD *a2, unsigned int a3)
{
  unsigned int v5;
  _BYTE *v6;
  __int16 v7;
  unsigned int v8;

  if (result && a2)
  {
    v5 = (unsigned __int16)*a2;
    v8 = v5;
    if (v5)
    {
      v6 = (_BYTE *)result;
      while (1)
      {
        result = utf8_BelongsToSet(2u, v6, v5, a3);
        v7 = v8;
        if (!(_DWORD)result)
          break;
        --v8;
        result = utf8_GetPreviousValidUtf8Offset((uint64_t)v6, &v8);
        v5 = v8;
        if (!v8)
          goto LABEL_7;
      }
    }
    else
    {
LABEL_7:
      v7 = 0;
    }
    *a2 = v7;
  }
  return result;
}

uint64_t chars_BackScanToBlank(uint64_t result, _WORD *a2)
{
  unsigned int v3;
  _BYTE *v4;
  __int16 v5;
  unsigned int v6;

  if (result && a2)
  {
    v3 = (unsigned __int16)*a2;
    v6 = v3;
    if (v3)
    {
      v4 = (_BYTE *)result;
      while (1)
      {
        result = utf8_BelongsToSet(2u, v4, v3, (unsigned __int16)*a2);
        v5 = v6;
        if ((_DWORD)result)
          break;
        if (v6)
          --v6;
        result = utf8_GetPreviousValidUtf8Offset((uint64_t)v4, &v6);
        v3 = v6;
        if (!v6)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      v5 = 0;
    }
    *a2 = v5;
  }
  return result;
}

uint64_t chars_ScanNChars(uint64_t result, uint64_t a2, _WORD *a3, int a4)
{
  int v5;
  uint64_t v7;
  _BYTE *v8;

  if (result && a3)
  {
    v5 = a4;
    v7 = (unsigned __int16)*a3;
    if (a4)
    {
      v8 = (_BYTE *)result;
      do
      {
        result = utf8_GetNextUtf8OffsetLimit(v8, v7, a2);
        v7 = result;
        --v5;
      }
      while ((_WORD)v5);
    }
    *a3 = v7;
  }
  return result;
}

uint64_t chars_BackScanNChars(uint64_t result, _WORD *a2, int a3)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;

  if (result && a2)
  {
    v4 = a3;
    v5 = (unsigned __int16)*a2;
    if (a3 && *a2)
    {
      v6 = result;
      do
      {
        v7 = v5 - 1;
        result = utf8_GetPreviousValidUtf8Offset(v6, &v7);
        --v4;
        v5 = v7;
      }
      while ((_WORD)v4 && v7);
    }
    *a2 = v5;
  }
  return result;
}

uint64_t chars_BackScanNonBlanks(uint64_t result, unsigned int *a2, unsigned __int8 *a3, unsigned int a4)
{
  unsigned int v6;
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  _BOOL4 v16;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  _BOOL4 v22;
  unsigned int v24;

  if (result && a2)
  {
    v6 = *a2;
    v24 = v6;
    if (!v6)
      goto LABEL_36;
    v8 = (_BYTE *)result;
    v9 = a4;
    while (1)
    {
      result = utf8_BelongsToSet(2u, v8, v6, *a2);
      v6 = v24;
      if ((_DWORD)result)
      {
LABEL_20:
        v10 = *a2;
        goto LABEL_21;
      }
      if (a4)
        break;
LABEL_19:
      --v24;
      result = utf8_GetPreviousValidUtf8Offset((uint64_t)v8, &v24);
      v6 = v24;
      if (!v24)
        goto LABEL_20;
    }
    v10 = *a2;
    v11 = a3;
    v12 = v9;
    while (1)
    {
      v14 = *v11++;
      v13 = v14;
      v15 = v24 == v10 && v13 == 46;
      v16 = v15;
      if (v13 == v8[v24] && !v16)
        break;
      if (!--v12)
        goto LABEL_19;
    }
LABEL_21:
    if (v6 >= v10)
      goto LABEL_36;
    v18 = utf8_BelongsToSet(2u, v8, v6, v10);
    v6 = v24;
    result = v8[v24];
    if (!v18)
    {
      if (!a4)
        goto LABEL_36;
      while (1)
      {
        v20 = *a3++;
        v19 = v20;
        v21 = v24 == *a2 && v19 == 46;
        v22 = v21;
        if (v19 == (_DWORD)result && !v22)
          break;
        if (!--v9)
          goto LABEL_36;
      }
    }
    result = utf8_determineUTF8CharLength(result);
    v6 = v24 + result;
LABEL_36:
    *a2 = v6;
  }
  return result;
}

uint64_t chars_BackScan2NonBlanksNonChinese(uint64_t result, unsigned int *a2, unsigned __int8 *a3, unsigned int a4)
{
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  int v13;
  BOOL v14;
  _BOOL4 v15;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  BOOL v22;
  _BOOL4 v23;
  unsigned int v25;

  if (result && a2)
  {
    v7 = (_BYTE *)result;
    v8 = *a2;
    v25 = v8;
    if (v8)
    {
      v9 = v8;
      while (!a4)
      {
LABEL_18:
        result = utf8_BelongsToSet(2u, v7, v9, *a2);
        v9 = v25;
        if (!(_DWORD)result)
        {
          result = utf8_BelongsToSet(0x20u, v7, v25, *a2);
          v9 = v25;
          if (!(_DWORD)result)
          {
            --v25;
            result = utf8_GetPreviousValidUtf8Offset((uint64_t)v7, &v25);
            v9 = v25;
            if (v25)
              continue;
          }
        }
        goto LABEL_23;
      }
      v10 = a3;
      v11 = a4;
      while (1)
      {
        v13 = *v10++;
        v12 = v13;
        v14 = v9 == v8 && v12 == 46;
        v15 = v14;
        if (v12 == v7[v9] && !v15)
          break;
        if (!--v11)
          goto LABEL_18;
      }
    }
    else
    {
      v9 = 0;
    }
LABEL_23:
    if (v9 >= *a2)
      goto LABEL_26;
    v17 = utf8_BelongsToSet(2u, v7, v9, *a2);
    v9 = v25;
    if (!v17)
    {
      v18 = *a2;
      if (a4)
      {
        v19 = a4;
        while (1)
        {
          v21 = *a3++;
          v20 = v21;
          v22 = v25 == v18 && v20 == 46;
          v23 = v22;
          if (v20 == v7[v25] && !v23)
            break;
          if (!--v19)
            goto LABEL_41;
        }
      }
      else
      {
LABEL_41:
        result = utf8_BelongsToSet(0x20u, v7, v25, v18);
        v9 = v25;
        if (!(_DWORD)result)
          goto LABEL_26;
      }
    }
    result = utf8_determineUTF8CharLength(v7[v9]);
    v9 = v25 + result;
LABEL_26:
    *a2 = v9;
  }
  return result;
}

char *chars_BackScanPhraseBoundary(char *result, _BYTE *a2, _WORD *a3)
{
  char *v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  char *v11;
  __int16 v12;
  uint64_t v13;
  char *v14;
  unsigned int v15;

  if (a2 && a3)
  {
    v5 = result;
    v6 = (unsigned __int16)*a3;
    v15 = v6;
    if (!v6)
      goto LABEL_15;
    while (1)
    {
      v7 = utf8_BelongsToSet(2u, a2, v6, (unsigned __int16)*a3);
      v8 = v15;
      if (!v7)
        break;
      if (v15)
        --v15;
      utf8_GetPreviousValidUtf8Offset((uint64_t)a2, &v15);
      v6 = v15;
      if (!v15)
        goto LABEL_15;
    }
    if (v15)
    {
      while (1)
      {
        v9 = utf8_BelongsToSet(2u, a2, v8, (unsigned __int16)*a3);
        v10 = v15;
        if (v9)
          break;
        v11 = utf8_strchr(v5, &a2[v15]);
        v10 = v15;
        if (v11)
          break;
        if (v15)
          --v15;
        utf8_GetPreviousValidUtf8Offset((uint64_t)a2, &v15);
        v8 = v15;
        if (!v15)
          goto LABEL_15;
      }
    }
    else
    {
LABEL_15:
      v10 = 0;
    }
    result = utf8_strchr(v5, &a2[v10]);
    v12 = v15;
    if (!result)
    {
      if (v15)
      {
        v13 = v15;
        do
        {
          v14 = utf8_strchr(v5, &a2[v13]);
          LODWORD(v13) = v15;
          if (v14)
            break;
          if (v15)
            --v15;
          utf8_GetPreviousValidUtf8Offset((uint64_t)a2, &v15);
          v13 = v15;
        }
        while (v15);
      }
      else
      {
        LODWORD(v13) = 0;
      }
      result = utf8_strchr(v5, &a2[v13]);
      if (result)
        v12 = v15;
    }
    *a3 = v12;
  }
  return result;
}

char *eos_BackScanPhraseBoundary(char *result, uint64_t a2, unsigned int a3, unsigned int a4, _WORD *a5)
{
  _BYTE *v7;
  unsigned int v8;
  unsigned __int16 v9;

  if (a2 && a5 && *(_DWORD *)a5 > a4)
  {
    v9 = *a5 - a4;
    v7 = (_BYTE *)(a2 + a3);
    result = chars_BackScanPhraseBoundary(result, v7, &v9);
    if (v9)
    {
      v8 = v9 + a4;
      result = (char *)utf8_determineUTF8CharLength(v7[v9]);
      *(_DWORD *)a5 = v8 + (_DWORD)result;
    }
  }
  return result;
}

uint64_t tolhp_ObjOpen(_WORD *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16[8];
  char v17[8];
  char v18[8];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = 2370838535;
  v14 = 0;
  v15 = 0;
  if (a3 && (InitRsrcFunction(a1, a2, &v15) & 0x80000000) == 0)
  {
    *a3 = 0;
    v7 = heap_Alloc(*(_QWORD *)(v15 + 8), 40);
    if (!v7)
      return 2370838538;
    v8 = (uint64_t *)v7;
    *(_QWORD *)(v7 + 32) = 0;
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_QWORD *)v7 = a1;
    *(_QWORD *)(v7 + 8) = a2;
    if (!v15)
      goto LABEL_10;
    v9 = paramc_ParamGet(*(_QWORD *)(v15 + 40), (uint64_t)"langcode", &v14, 0);
    v3 = v9 & (v9 >> 31);
    if ((v9 & (v9 >> 31)) < 0)
      goto LABEL_10;
    strcpy(v18, "nts_");
    __strcat_chk();
    v10 = dct_ObjOpen(v18, a1, a2, v8 + 2);
    if ((v10 & 0x80000000) != 0)
    {
      v3 = v10;
      if ((v10 & 0x1FFF) != 1)
        goto LABEL_10;
    }
    strcpy(v17, "sxm_");
    __strcat_chk();
    v11 = dct_ObjOpen(v17, a1, a2, v8 + 3);
    if ((v11 & 0x80000000) != 0)
    {
      v3 = v11;
      if ((v11 & 0x1FFF) != 1)
        goto LABEL_10;
    }
    strcpy(v16, "ipa_");
    __strcat_chk();
    v13 = dct_ObjOpen(v16, a1, a2, v8 + 4);
    v3 = v13;
    if ((v13 & 0x80000000) != 0)
    {
      if ((v13 & 0x1FFF) != 1)
      {
LABEL_10:
        tolhp_ObjClose((uint64_t)v8);
        return v3;
      }
      v3 = 0;
    }
    *a3 = v8;
  }
  return v3;
}

uint64_t tolhp_ObjClose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;

  v1 = 2370838535;
  v4 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v4) & 0x80000000) == 0)
  {
    dct_ObjClose(*(_QWORD *)(a1 + 32));
    dct_ObjClose(*(_QWORD *)(a1 + 24));
    dct_ObjClose(*(_QWORD *)(a1 + 16));
    heap_Free(*(_QWORD **)(v4 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t tolhp_ResetDcts(uint64_t a1)
{
  uint64_t result;

  result = tolhp_ResetDct((_WORD **)a1, (uint64_t)"nts_", (uint64_t *)(a1 + 16));
  if ((result & 0x80000000) == 0)
    return tolhp_ResetDct((_WORD **)a1, (uint64_t)"sxm_", (uint64_t *)(a1 + 24));
  return result;
}

uint64_t tolhp_ResetDct(_WORD **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  char v11[8];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = 2370838528;
  v9 = 0;
  v10 = 0;
  if (!a1)
    return 2370838535;
  if ((InitRsrcFunction(*a1, (int)a1[1], &v9) & 0x80000000) != 0)
    return 2370838535;
  if (v9)
  {
    v6 = paramc_ParamGet(*(_QWORD *)(v9 + 40), (uint64_t)"langcode", &v10, 0);
    if ((v6 & (v6 >> 31)) >= 0)
    {
      __strcpy_chk();
      __strcat_chk();
      if (*a3)
        v7 = dct_ObjReopen((_QWORD *)*a3, v11);
      else
        v7 = dct_ObjOpen(v11, *a1, (int)a1[1], a3);
      if ((v7 & 0x80001FFF) == 0x80000001)
        return 0;
      else
        return v7;
    }
  }
  return v3;
}

uint64_t tolhp_RewritePhonTextInLhp(_WORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  int v16;
  uint64_t v17;
  const char *MarkerArgStr;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  unsigned int v30;
  _BYTE *v31;
  __int16 v32;
  unsigned int v33;
  int v34;
  int v35;
  size_t v36;
  void *v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  unsigned __int16 v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  _DWORD *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v52;
  uint64_t *v53;
  uint64_t *v54;
  unsigned __int16 v55;
  uint64_t v56;
  uint64_t (*v57)();
  unsigned __int16 v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  char __dst[8];
  __int16 v67;
  unsigned __int16 v68;
  unsigned __int16 v69;
  __int16 v70;
  char *__src;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[3];

  v78[1] = *MEMORY[0x1E0C80C00];
  v61 = 0;
  v62 = 0;
  v2 = 2370838535;
  v60 = 0;
  if (a1 && a2)
  {
    v5 = bed_ObjOpen(*a1, (uint64_t)a1[1], a2, 1020, &v62, 213);
    if ((v5 & 0x80000000) != 0
      || (v5 = bed_ObjOpen(*a1, (uint64_t)a1[1], a2, 1021, &v61, 213), (v5 & 0x80000000) != 0)
      || (v5 = datac_RequestBlock(a2, 1012, 1u, &v60), (v5 & 0x80000000) != 0))
    {
      v2 = v5;
    }
    else
    {
      if (v60)
        v6 = *(_QWORD *)(v60 + 8);
      else
        v6 = 0;
      v8 = v61;
      v7 = v62;
      v73 = 0;
      v72 = 0x2400000007;
      v64 = 0;
      if (!v62 || !v61)
      {
        v11 = 2370838535;
        goto LABEL_113;
      }
      v9 = bed_Goto(v61, 0);
      if ((v9 & 0x80000000) != 0)
      {
LABEL_112:
        v11 = v9;
        goto LABEL_113;
      }
      v10 = bed_GoForward(v8, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v72);
      if ((v10 & 0x1FFF) == 0x14)
      {
LABEL_14:
        v11 = 0;
        goto LABEL_113;
      }
      v11 = v10;
      if ((v10 & 0x80000000) == 0)
      {
        v11 = bed_GetpElem(v8, 0xFFFFu, &v64);
        if ((v11 & 0x80000000) == 0)
        {
          v12 = v64;
          if (v64)
          {
            v13 = (uint64_t *)(a1 + 2);
            v14 = (uint64_t *)(a1 + 3);
            v59 = (uint64_t *)(a1 + 4);
            while (1)
            {
              v63 = 1;
              if (*(_DWORD *)(v12 + 20) == 7)
              {
                v75 = 0;
                v74 = 0x3E700000007;
                v77 = 0;
                v78[0] = 0;
                v69 = 0;
                v68 = 0;
                v67 = 1;
                v76 = 0;
                *(_QWORD *)__dst = 0;
                v65 = 0;
                v9 = bed_GetpElem(v8, 0, v78);
                if ((v9 & 0x80000000) != 0)
                  goto LABEL_112;
                v9 = bed_GetpElem(v8, 0xFFFFu, &v77);
                if ((v9 & 0x80000000) != 0)
                  goto LABEL_112;
                v9 = bed_GetiElem(v8, &v69);
                if ((v9 & 0x80000000) != 0)
                  goto LABEL_112;
                v9 = bed_GetcElem(v8, &v68);
                if ((v9 & 0x80000000) != 0)
                  goto LABEL_112;
                if (v77 && *(_DWORD *)(v77 + 20) == 7)
                {
                  v15 = *(_DWORD *)(v77 + 40);
                  if (v15 == 43)
                  {
                    if (*(_QWORD *)(v77 + 48))
                    {
                      v16 = *(_DWORD *)(v77 + 56);
                      if ((v16 - 2) < 3)
                      {
                        v15 = v16 + 68;
LABEL_45:
                        v67 = 1;
                        bed_GoForward(v8, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v67);
                        v22 = bed_GoForward(v8, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v74);
                        if ((v22 & 0x1FFF) == 0x14)
                        {
                          v76 = 0;
                        }
                        else
                        {
                          v11 = v22;
                          if ((v22 & 0x80000000) != 0)
                            break;
                          v9 = bed_GetpElem(v8, 0xFFFFu, &v76);
                          if ((v9 & 0x80000000) != 0)
                            goto LABEL_112;
                        }
                        v9 = bed_GetpElem(v7, 0, __dst);
                        if ((v9 & 0x80000000) != 0)
                          goto LABEL_112;
                        v9 = bed_GetcElem(v7, &v65);
                        if ((v9 & 0x80000000) != 0)
                          goto LABEL_112;
                        v23 = *(_DWORD *)(v77 + 32);
                        v24 = v23 - *(_DWORD *)(v78[0] + 32);
                        if (v76)
                          v25 = *(_DWORD *)(v76 + 32) - v23;
                        else
                          LOWORD(v25) = v65 - v24;
                        v58 = v25;
                        v28 = *(_QWORD *)__dst;
                        __src = 0;
                        v70 = 0;
                        if (!*(_QWORD *)__dst
                          || (InitRsrcFunction(*a1, (int)a1[1], &__src) & 0x80000000) != 0
                          || (v15 - 70) > 2)
                        {
                          goto LABEL_120;
                        }
                        v55 = v24;
                        v56 = (unsigned __int16)v24;
                        v29 = (_BYTE *)(v28 + (unsigned __int16)v24);
                        v57 = off_1EA940350[v15 - 70];
                        v30 = 0;
                        if (v58)
                        {
                          while (utf8_BelongsToSet(0, v29, v30, v58))
                          {
                            if (v58 == ++v30)
                            {
                              LOWORD(v30) = v58;
                              break;
                            }
                          }
                        }
                        v31 = &v29[(unsigned __int16)v30];
                        v32 = v58 - v30;
                        v33 = (unsigned __int16)(v58 - v30);
                        v54 = v13;
                        if (v33)
                        {
                          v52 = v32;
                          v53 = v14;
                          v34 = 0;
                          while (utf8_BelongsToSet(0, v31, v33 - 1 + v34, v33))
                          {
                            if (-v33 == --v34)
                            {
                              v32 = v52;
                              LOWORD(v35) = v52;
                              v14 = v53;
                              goto LABEL_82;
                            }
                          }
                          v35 = -v34;
                          v14 = v53;
                          v32 = v52;
                        }
                        else
                        {
                          LOWORD(v35) = 0;
                        }
LABEL_82:
                        v36 = (unsigned __int16)(v32 - v35);
                        v37 = (void *)heap_Alloc(*((_QWORD *)__src + 1), v36 + 1);
                        if (!v37)
                        {
                          v2 = 2370838538;
LABEL_120:
                          v11 = v2;
                          break;
                        }
                        v38 = (uint64_t)v37;
                        memcpy(v37, v31, v36);
                        *(_BYTE *)(v38 + v36) = 0;
                        v11 = ((uint64_t (*)(_WORD **, uint64_t, _QWORD, __int16 *))v57)(a1, v38, 0, &v70);
                        if ((v11 & 0x80000000) != 0 || !v70)
                        {
                          v40 = v14;
                        }
                        else
                        {
                          v39 = (char *)heap_Alloc(*((_QWORD *)__src + 1), (unsigned __int16)++v70);
                          if (!v39)
                          {
                            v40 = v14;
                            v41 = 0;
                            v11 = 2370838538;
                            goto LABEL_90;
                          }
                          v40 = v14;
                          v11 = ((uint64_t (*)(_WORD **, uint64_t, char *, __int16 *))v57)(a1, v38, v39, &v70);
                          if ((v11 & 0x80000000) == 0)
                          {
                            v41 = Utf8_Utf8NbrOfSymbols(v39) - 1;
LABEL_90:
                            heap_Free(*((_QWORD **)__src + 1), v38);
                            if ((v11 & 0x80000000) != 0)
                              break;
                            v9 = bed_Remove(v7, v55, v58);
                            if ((v9 & 0x80000000) != 0)
                              goto LABEL_112;
                            if (v41)
                            {
                              v9 = bed_Goto(v7, v56);
                              if ((v9 & 0x80000000) != 0)
                                goto LABEL_112;
                              v9 = bed_Insert(v7, v39, v41);
                              if ((v9 & 0x80000000) != 0)
                                goto LABEL_112;
                            }
                            if (v39)
                            {
                              v9 = tolhp_lhp_ObjClose((uint64_t)a1, (uint64_t)v39);
                              if ((v9 & 0x80000000) != 0)
                                goto LABEL_112;
                            }
                            v42 = v41;
                            v43 = v41 - v58;
                            *(_DWORD *)(v78[0] + 36) += v43;
                            *(_DWORD *)(v77 + 40) = 43;
                            v9 = bed_Goto(v8, v69);
                            if ((v9 & 0x80000000) != 0)
                              goto LABEL_112;
                            v44 = v68;
                            v45 = v69 + 1;
                            v14 = v40;
                            v13 = v54;
                            if (v68 > (unsigned __int16)(v69 + 1))
                            {
                              v46 = v78[0];
                              v47 = (_DWORD *)(v77 + 100);
                              do
                              {
                                v48 = *(v47 - 1);
                                v49 = *(unsigned int *)(v46 + 32);
                                if (v49 + v56 <= v48)
                                {
                                  if (v49 + (unint64_t)(v56 + v58) <= v48)
                                  {
                                    *(v47 - 1) = v48 + v43;
                                  }
                                  else
                                  {
                                    *(v47 - 1) = v49 + v56;
                                    if (*(v47 - 4) == 1)
                                      *v47 = v42;
                                  }
                                }
                                ++v45;
                                v47 += 16;
                              }
                              while (v44 > (unsigned __int16)v45);
                            }
                            goto LABEL_106;
                          }
                        }
                        v39 = 0;
                        v41 = 0;
                        goto LABEL_90;
                      }
                    }
                  }
                  else if ((v15 - 73) >= 0xFFFFFFFD)
                  {
                    goto LABEL_45;
                  }
                }
              }
              else if (v6)
              {
                __dst[0] = 0;
                v17 = v6 + *(unsigned int *)(v12 + 40);
                MarkerArgStr = marker_getMarkerArgStr(1u);
                if (!strcmp((const char *)v17, MarkerArgStr))
                {
                  v74 = 0;
                  __src = 0;
                  if ((InitRsrcFunction(*a1, (int)a1[1], &v74) & 0x80000000) == 0)
                  {
                    if (v74)
                    {
                      v20 = paramc_ParamGet(*(_QWORD *)(v74 + 40), (uint64_t)"langcode", &__src, 0);
                      if ((v20 & (v20 >> 31)) >= 0)
                      {
                        strncpy(__dst, __src, 4uLL);
LABEL_42:
                        strcpy((char *)v78, "nts_");
                        __strcat_chk();
                        v21 = *v13
                            ? dct_ObjReopen((_QWORD *)*v13, (const char *)v78)
                            : dct_ObjOpen((const char *)v78, *a1, (int)a1[1], v13);
                        v11 = v21;
                        if ((v21 & 0x80000000) != 0 && (v21 & 0x1FFF) != 1)
                          break;
                        strcpy((char *)&v77, "sxm_");
                        __strcat_chk();
                        v26 = *v14
                            ? dct_ObjReopen((_QWORD *)*v14, (const char *)&v77)
                            : dct_ObjOpen((const char *)&v77, *a1, (int)a1[1], v14);
                        v11 = v26;
                        if ((v26 & 0x80000000) != 0 && (v26 & 0x1FFF) != 1)
                          break;
                        strcpy((char *)&v76, "ipa_");
                        __strcat_chk();
                        v27 = *v59
                            ? dct_ObjReopen((_QWORD *)*v59, (const char *)&v76)
                            : dct_ObjOpen((const char *)&v76, *a1, (int)a1[1], v59);
                        v11 = v27;
                        if ((v27 & 0x80000000) != 0 && (v27 & 0x1FFF) != 1)
                          break;
                      }
                    }
                  }
                }
                else
                {
                  v19 = 0;
                  while (*(_BYTE *)(v17 + v19))
                  {
                    __dst[v19] = *(_BYTE *)(v17 + v19);
                    if (++v19 == 3)
                    {
                      if (*(_BYTE *)(v17 + 3))
                        break;
                      __dst[3] = 0;
                      goto LABEL_42;
                    }
                  }
                }
              }
LABEL_106:
              v63 = 1;
              bed_GoForward(v8, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v63);
              v50 = bed_GoForward(v8, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v72);
              if ((v50 & 0x1FFF) == 0x14)
                goto LABEL_14;
              v11 = v50;
              if ((v50 & 0x80000000) == 0)
              {
                v11 = bed_GetpElem(v8, 0xFFFFu, &v64);
                if ((v11 & 0x80000000) == 0)
                {
                  v12 = v64;
                  if (v64)
                    continue;
                }
              }
              break;
            }
          }
        }
      }
LABEL_113:
      v2 = v11;
    }
    if (v61)
      bed_ObjClose(v61);
    if (v62)
      bed_ObjClose(v62);
  }
  return v2;
}

uint64_t tolhp_lhp_ObjClose(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = 0;
  if ((InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v4) & 0x80000000) != 0)
    return 2370838535;
  heap_Free(*(_QWORD **)(v4 + 8), a2);
  return 0;
}

uint64_t tolhp_RewriteNts(uint64_t a1, char *a2, char *a3, _WORD *a4)
{
  if (a1)
    return tolhp_Rewrite(*(_QWORD **)(a1 + 16), a2, a3, a4);
  else
    return 2370838535;
}

uint64_t tolhp_RewriteSxms(uint64_t a1, char *a2, char *a3, _WORD *a4)
{
  if (a1)
    return tolhp_Rewrite(*(_QWORD **)(a1 + 24), a2, a3, a4);
  else
    return 2370838535;
}

uint64_t tolhp_RewriteIpa(uint64_t a1, char *a2, char *a3, _WORD *a4)
{
  if (a1)
    return tolhp_Rewrite(*(_QWORD **)(a1 + 32), a2, a3, a4);
  else
    return 2370838535;
}

uint64_t tolhp_Rewrite(_QWORD *a1, char *__s, char *a3, _WORD *a4)
{
  unsigned __int16 v8;
  uint64_t result;
  int v10;
  char *i;
  int v12;
  int LongestMatch;
  int v14;
  size_t v15;
  char *__sa;

  if (a3)
    *a3 = 0;
  else
    *a4 = 0;
  v8 = strlen(__s);
  result = 0;
  if (a1)
  {
    v10 = v8;
    if (v8)
    {
      if (__s)
      {
        for (i = __s; ; ++i)
        {
          if (*i == 32)
          {
            *i = 17;
          }
          else if (!*i)
          {
            break;
          }
        }
      }
      v12 = 0;
      while (1)
      {
        __sa = 0;
        LongestMatch = dct_FindLongestMatch(a1, &__s[v12], &__sa);
        if (LongestMatch < 1)
        {
          result = 0;
          *a4 = 0;
          return result;
        }
        v14 = LongestMatch;
        v15 = strlen(__sa);
        if (a3)
        {
          if (v15 + strlen(a3) + 1 > (unsigned __int16)*a4)
            return 2370838537;
          strcat(a3, __sa);
        }
        else
        {
          *a4 += v15;
        }
        v12 += v14;
        if (v12 >= v10)
          return 0;
      }
    }
  }
  return result;
}

uint64_t dct_ObjOpen(const char *a1, _WORD *a2, int a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  uint64_t Object;
  uint64_t v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v17 = 0;
  v4 = 2370838535;
  if (!a4)
    return 2370838535;
  v16 = 0;
  if ((InitRsrcFunction(a2, a3, &v17) & 0x80000000) != 0)
    return 2370838535;
  *a4 = 0;
  v7 = heap_Alloc(*(_QWORD *)(v17 + 8), 40);
  v8 = 2370838538;
  if (v7)
  {
    v9 = v7;
    *(_QWORD *)(v7 + 32) = 0;
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_QWORD *)v7 = v17;
    v10 = strlen(a1);
    v11 = (char *)heap_Alloc(*(_QWORD *)(v17 + 8), (v10 + 1));
    *(_QWORD *)(v9 + 8) = v11;
    if (!v11)
      goto LABEL_13;
    strcpy(v11, a1);
    v18 = 0;
    if (*(_QWORD *)v9)
    {
      Object = objc_GetObject(*(_QWORD *)(*(_QWORD *)v9 + 48), (uint64_t)"FE_DCTLKP", &v18);
      if ((Object & 0x80000000) == 0)
      {
        v13 = v18;
        v14 = *(_QWORD *)(v18 + 8);
        *(_QWORD *)(v9 + 16) = v14;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)(v13 + 16);
        v8 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, int *))(v14 + 72))(*(_QWORD *)(v9 + 24), *(_QWORD *)(v9 + 32), a1, &v16);
        if ((v8 & 0x80000000) == 0)
        {
          if (v16)
          {
            *a4 = v9;
            return v8;
          }
          v8 = 2370838529;
        }
LABEL_13:
        dct_ObjClose(v9);
        return v8;
      }
      v4 = Object;
    }
    v8 = v4;
    goto LABEL_13;
  }
  return v8;
}

uint64_t dct_ObjClose(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = 2370838535;
  if (a1)
  {
    v3 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      if (*(_QWORD *)(a1 + 16))
      {
        objc_ReleaseObject(*(_QWORD *)(v3 + 48), (uint64_t)"FE_DCTLKP");
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_DWORD *)(a1 + 32) = 0;
        v3 = *(_QWORD *)a1;
      }
      v4 = *(_QWORD *)(a1 + 8);
      if (v4)
      {
        heap_Free(*(_QWORD **)(v3 + 8), v4);
        v3 = *(_QWORD *)a1;
      }
      heap_Free(*(_QWORD **)(v3 + 8), a1);
      return 0;
    }
  }
  return result;
}

uint64_t dct_ObjReopen(_QWORD *a1, const char *a2)
{
  uint64_t v2;
  char *v5;
  size_t v6;
  size_t v7;
  uint64_t v8;

  v2 = 2370838535;
  if (a1 && a2)
  {
    v5 = (char *)a1[1];
    v6 = strlen(v5);
    v7 = strlen(a2);
    if (v6 < v7)
    {
      v8 = heap_Realloc(*(uint64_t **)(*a1 + 8), (uint64_t)v5, (v7 + 1));
      if (!v8)
        return 2370838538;
      v5 = (char *)v8;
      a1[1] = v8;
    }
    strcpy(v5, a2);
    return 0;
  }
  return v2;
}

uint64_t dct_FindLongestMatch(_QWORD *a1, char *__s, _QWORD *a3)
{
  uint64_t result;
  unsigned __int16 v6;
  unsigned __int16 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  _QWORD *v14;
  char v15;
  _BYTE v16[11];
  uint64_t v17;

  result = 0;
  v17 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  v14 = 0;
  v13 = 0;
  v12 = 0;
  if (a1 && __s && a3)
  {
    *a3 = 0;
    v6 = strlen(__s);
    if (v6)
    {
      if (v6 <= 0xAu)
        v7 = v6;
      else
        v7 = 10;
      v8 = v7;
      v9 = v7;
      __memmove_chk();
      if (v8)
      {
        v10 = v9;
        while (1)
        {
          v16[v10] = 0;
          v13 = 1;
          if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _BYTE *, _QWORD **, __int16 *, char *))(a1[2] + 96))(a1[3], a1[4], a1[1], v16, &v14, &v13, &v15) & 0x80000000) != 0)break;
          v11 = v10 - 1;
          if ((_DWORD)v10 != 1)
          {
            --v10;
            if (!v13)
              continue;
          }
          if (!v13)
            break;
LABEL_20:
          *a3 = *v14;
          return (v11 + 1);
        }
      }
      if ((paramc_ParamGetStr(*(_QWORD *)(*a1 + 40), (uint64_t)"clcpppipelinemode", &v12) & 0x80000000) == 0)
      {
        __memmove_chk();
        if ((_DWORD)v9)
        {
          while (1)
          {
            v16[v9] = 0;
            v13 = 0;
            if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _BYTE *, _QWORD **, __int16 *, char *))(a1[2] + 96))(a1[3], a1[4], a1[1], v16, &v14, &v13, &v15) & 0x80000000) != 0)break;
            v11 = v9 - 1;
            if (v9 >= 2)
            {
              --v9;
              if (!v13)
                continue;
            }
            if (!v13)
              return 0;
            goto LABEL_20;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t textpar_AllTextProcessed(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 0;
  if (!a1)
    return 1;
  v1 = 1;
  if ((datac_RequestBlock(*(_QWORD *)(a1 + 16), 1010, 1u, &v3) & 0x80000000) == 0)
    return *(unsigned int *)(v3 + 20);
  return v1;
}

uint64_t textpar_ClearOutputDataContainers(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (!a1)
    return 2368741383;
  v2 = datac_RequestBlock(a1[2], 1011, 1u, &v7);
  if ((v2 & 0x80000000) == 0)
  {
    v3 = v7;
    if (*(unsigned __int16 *)(v7 + 16) >= 2u)
    {
      v4 = (uint64_t *)(*(_QWORD *)(v7 + 8) + 112);
      v5 = 1;
      do
      {
        if (*v4)
        {
          heap_Free(*(_QWORD **)(*a1 + 8), *v4);
          *v4 = 0;
          v3 = v7;
        }
        ++v5;
        v4 += 8;
      }
      while (v5 < *(unsigned __int16 *)(v3 + 16));
    }
    *(_WORD *)(v3 + 16) = 0;
  }
  return v2;
}

uint64_t textpar_WriteTextAndMarkers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;

  v28 = 0;
  v29 = 0;
  v5 = 2368741376;
  if (!a1)
    return 2368741383;
  v30 = 0;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)(a1 + 24) + 136))(a2, a3, &v30);
  if ((v11 & 0x80000000) != 0)
    return v11;
  marker_TraceMrk(211, (uint64_t)"PP_TEXT_PARSER", *(_DWORD *)(a1 + 112), *(_QWORD *)a1, *(_QWORD *)(a1 + 16), 1011, (uint64_t)"start textpar_WriteTextAndMarkers()", 0, 0, 0);
  marker_TraceTxt(211, (uint64_t)"PP_TEXT_PARSER", *(_DWORD *)(a1 + 112), *(_QWORD *)a1, *(_QWORD *)(a1 + 16), 1010, (uint64_t)"start textpar_WriteTextAndMarkers()");
  v11 = datac_RequestBlock(*(_QWORD *)(a1 + 16), 1010, 1u, &v29);
  if ((v11 & 0x80000000) != 0)
    return v11;
  v12 = *(unsigned __int16 *)(v29 + 16);
  if (*(_WORD *)(v29 + 16))
  {
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 24) + 104))(a2, a3, *(_QWORD *)(v29 + 8), *(unsigned __int16 *)(v29 + 2) * v12);
    if ((v11 & 0x80000000) != 0)
      return v11;
    *(_WORD *)(v29 + 16) = 0;
  }
  if ((datac_RequestBlock(*(_QWORD *)(a1 + 16), 1012, 1u, &v29) & 0x80000000) != 0)
    v13 = 0;
  else
    v13 = *(_QWORD *)(v29 + 8);
  v11 = datac_RequestBlock(*(_QWORD *)(a1 + 16), 1011, 1u, &v28);
  if ((v11 & 0x80000000) != 0)
    return v11;
  v14 = *(unsigned __int16 *)(v28 + 16);
  if (*(_WORD *)(v28 + 16))
  {
    v15 = *(_QWORD *)(v28 + 8);
    if (*(_DWORD *)(v15 + 20) == 0x4000)
    {
      if (v12)
      {
        v16 = 0;
        v30 = *(_DWORD *)(v15 + 32) - v30;
      }
      else
      {
        v16 = marker_CheckForEmptyMarkers(v13, *(_DWORD *)(a1 + 76), v15, v14, 0, 0, 0);
        v14 = *(unsigned __int16 *)(v28 + 16);
        v30 = *(_DWORD *)(v15 + 32) - v30;
        if (!v14)
        {
          LODWORD(v24) = 0;
          goto LABEL_36;
        }
      }
      v27 = v16;
      v17 = v14;
      v18 = (_DWORD *)(v15 + 32);
      do
      {
        *v18 -= v30;
        v18 += 16;
        --v17;
      }
      while (v17);
      v19 = 0;
      v20 = (_QWORD *)(v15 + 40);
      do
      {
        if (marker_hasNonConstCharPtrArg(*((_DWORD *)v20 - 5)))
        {
          v21 = *(unsigned int *)v20;
          if (v13)
            v22 = v21 == 0xFFFFFFFFLL;
          else
            v22 = 1;
          v23 = v13 + v21;
          if (v22)
            v23 = 0;
          *v20 = v23;
        }
        v20 += 8;
        ++v19;
        v24 = *(unsigned __int16 *)(v28 + 16);
      }
      while (v19 < v24);
      if (v12)
        goto LABEL_37;
      if ((_DWORD)v24 == 1)
      {
        if (v27 == 1 || *(_DWORD *)(v15 + 20) == 0x4000)
          goto LABEL_38;
        LODWORD(v24) = 1;
LABEL_37:
        marker_TraceMrk(211, (uint64_t)"PP_TEXT_PARSER", *(_DWORD *)(a1 + 112), *(_QWORD *)a1, *(_QWORD *)(a1 + 16), 1011, (uint64_t)"at end()", 1, v15, v24);
        v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 24) + 104))(a4, a5, v15, ((_DWORD)v24 << 6));
        if ((v11 & 0x80000000) == 0)
          goto LABEL_38;
        return v11;
      }
      v16 = v27;
LABEL_36:
      if (v16 == 1)
      {
LABEL_38:
        v25 = textpar_ClearOutputDataContainers((uint64_t *)a1);
        return v25 & (v25 >> 31);
      }
      goto LABEL_37;
    }
  }
  return v5;
}

uint64_t textpar_CheckForEOF(_QWORD *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result;
  int v6;
  int v7;
  BOOL v8;
  uint64_t v9;

  v9 = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t *))(a1[3] + 144))(a1[4], a1[5], (char *)&v9 + 4, &v9);
  if ((result & 0x80000000) == 0)
  {
    v6 = v9;
    v7 = HIDWORD(v9);
    if (a2 && a3)
    {
      *a2 = HIDWORD(v9);
      *a3 = v6;
    }
    if (v7)
      v8 = 1;
    else
      v8 = v6 == 0;
    if (v8)
      return result;
    else
      return 2368741399;
  }
  return result;
}

uint64_t textpar_ClassOpen(_WORD *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;

  v9 = 0;
  if ((InitRsrcFunction(a1, a2, &v9) & 0x80000000) != 0)
    return 2368741383;
  v6 = (uint64_t *)heap_Calloc(*(_QWORD **)(v9 + 8), 1, 16);
  if (!v6)
    return 10;
  *v6 = v9;
  *a3 = v6;
  v7 = escseqs_ClassOpen(a1, a2, v6 + 1);
  if ((v7 & 0x80000000) != 0)
    textpar_ClassClose(*a3);
  return v7;
}

uint64_t textpar_ClassClose(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  if (!a1)
    return 2368741383;
  v2 = *a1;
  v3 = escseqs_ClassClose(a1[1]);
  if ((v3 & 0x80000000) == 0)
    heap_Free(*(_QWORD **)(v2 + 8), (uint64_t)a1);
  return v3;
}

uint64_t textpar_ObjOpen(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t **a5, int a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unsigned __int16 v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  __int128 v23;
  uint64_t v24;

  v24 = 0;
  v22 = 0;
  v6 = 2368741383;
  if (a1)
  {
    if (a5)
    {
      v23 = 0uLL;
      if ((InitRsrcFunction(a2, a3, &v24) & 0x80000000) == 0)
      {
        *a5 = 0;
        v13 = heap_Alloc(*(_QWORD *)(v24 + 8), 120);
        if (v13)
        {
          v14 = (uint64_t *)v13;
          *(_OWORD *)v13 = 0u;
          *(_OWORD *)(v13 + 16) = 0u;
          *(_OWORD *)(v13 + 64) = 0u;
          *(_OWORD *)(v13 + 80) = 0u;
          *(_QWORD *)(v13 + 112) = 0;
          *(_OWORD *)(v13 + 96) = 0u;
          *(_OWORD *)(v13 + 32) = 0u;
          *(_OWORD *)(v13 + 48) = 0u;
          *(_QWORD *)v13 = v24;
          *(_QWORD *)(v13 + 8) = a1;
          *(_QWORD *)(v13 + 24) = a4;
          *(_QWORD *)(v13 + 88) = 0;
          v15 = (uint64_t *)(v13 + 88);
          *(_DWORD *)(v13 + 76) = 0;
          *(_DWORD *)(v13 + 116) = a6;
          if ((int)paramc_ParamGetUInt(*(_QWORD *)(v24 + 40), (uint64_t)"ppmaxpcreframeblocks", (unsigned int *)&v22) < 0)
            v16 = 30;
          else
            v16 = v22;
          if ((int)paramc_ParamGetUInt(*(_QWORD *)(v24 + 40), (uint64_t)"ppnumframesinblock", (unsigned int *)&v22) < 0)
            v17 = 50;
          else
            v17 = v22;
          v18 = extdata_ObjOpen(a2, a3, v15, 211);
          if ((v18 & 0x80000000) != 0
            || (v14[12] = 0,
                *((_DWORD *)v14 + 26) = 0,
                v18 = nuance_pcre_ObjOpen(a2, a3, (uint64_t)&v23),
                (v18 & 0x80000000) != 0)
            || (v18 = nuance_pcre_Init((_QWORD *)v23, SDWORD2(v23), v16, v17), (v18 & 0x80000000) != 0)
            || (*((_OWORD *)v14 + 6) = v23,
                v18 = escseqs_ObjOpen(*(_QWORD *)(v14[1] + 8), a2, a3, v14[12], v14[13], v14 + 10),
                (v18 & 0x80000000) != 0)
            || (v18 = datac_ObjOpen(a2, a3, v14 + 2, 211), (v18 & 0x80000000) != 0))
          {
            v6 = v18;
          }
          else
          {
            v19 = 0;
            while (1)
            {
              datac_RegisterBlock(v14[2], (unsigned __int16)aMETA[v19], (unsigned __int16)aMETA[v19 + 1], (unsigned __int16)aMETA[v19 + 2]);
              v6 = v20;
              if ((v20 & 0x80000000) != 0)
                break;
              v19 += 3;
              if (v19 == 12)
              {
                *a5 = v14;
                return v6;
              }
            }
          }
          textpar_ObjClose(v14);
        }
        else
        {
          return 2368741386;
        }
      }
    }
  }
  return v6;
}

uint64_t textpar_ObjClose(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t NullHandle;
  int v7;

  v2 = *a1;
  v3 = a1[2];
  if (v3)
  {
    datac_ObjClose(v3);
    a1[2] = 0;
  }
  v4 = a1[11];
  if (v4)
  {
    extdata_ObjClose(v4);
    a1[11] = 0;
  }
  v5 = a1[10];
  if (v5)
    escseqs_ObjClose(v5);
  NullHandle = safeh_GetNullHandle();
  if (!safeh_HandlesEqual(a1[12], a1[13], NullHandle, v7))
  {
    nuance_pcre_DeInit((_QWORD *)a1[12], a1[13]);
    nuance_pcre_ObjClose(a1[12], a1[13]);
    a1[12] = 0;
    *((_DWORD *)a1 + 26) = 0;
  }
  ppParam_ClearAllPPParameters(v2);
  heap_Free(*(_QWORD **)(v2 + 8), (uint64_t)a1);
  return 0;
}

uint64_t textpar_ObjReopen(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *__s1;
  uint64_t v11;
  uint64_t v12;

  v3 = 2368741383;
  v12 = 0;
  __s1 = 0;
  if (a3)
  {
    v11 = 0;
    if ((InitRsrcFunction(a1, a2, &v12) & 0x80000000) == 0)
    {
      v7 = v12;
      *a3 = v12;
      if ((paramc_ParamGetStr(*(_QWORD *)(v7 + 40), (uint64_t)"component_stop_not_reset", &__s1) & 0x80000000) == 0
        && __s1
        && !strcmp(__s1, "yes"))
      {
        escseqs_SetPosInOut(a3[10], 0, 0);
        paramc_ParamSetStr(*(_QWORD *)(v12 + 40), (uint64_t)"component_stop_not_reset", &byte_1DEBD87CE);
      }
      v8 = extdata_FreeData(a3[11]);
      if ((v8 & 0x80000000) != 0
        || (escseqs_GetPosInOut(a3[10], (_DWORD *)&v11 + 1, &v11), a3[10])
        && (v8 = escseqs_ObjClose(a3[10]), (v8 & 0x80000000) != 0))
      {
        v3 = v8;
      }
      else
      {
        v3 = escseqs_ObjOpen(*(_QWORD *)(a3[1] + 8), a1, a2, a3[12], a3[13], a3 + 10);
        if ((v3 & 0x80000000) == 0)
        {
          escseqs_SetPosInOut(a3[10], SHIDWORD(v11), v11);
          return v3;
        }
      }
      textpar_ObjClose(a3);
    }
  }
  return v3;
}

uint64_t textpar_ProcessStart(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = 0;
  if (!a1)
    return 2368741383;
  *(_QWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 40) = a3;
  *(_DWORD *)(a1 + 112) = log_GetLogLevel(*(_QWORD *)(*(_QWORD *)a1 + 32)) > 4;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  result = escseqs_ProcessStart(*(_QWORD *)(a1 + 80), (_DWORD *)(a1 + 76));
  if ((result & 0x80000000) == 0)
  {
    result = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"ppspellpausevalue", *(_DWORD *)(a1 + 76));
    if ((result & 0x80000000) == 0)
    {
      v5 = 0;
      while (1)
      {
        result = datac_RequestBlock(*(_QWORD *)(a1 + 16), (unsigned __int16)aMETA[v5], 1u, &v7);
        if ((result & 0x80000000) != 0)
          break;
        v5 += 3;
        v6 = v7;
        *(_WORD *)(v7 + 16) = 0;
        *(_DWORD *)(v6 + 20) = 0;
        if (v5 == 12)
          return 0;
      }
    }
  }
  return result;
}

uint64_t textpar_Process(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t j;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t UInt;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  _DWORD *v34;
  const char *v35;
  const char *v36;
  const char *v37;
  const char *v38;
  unsigned __int16 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  size_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  size_t __n;
  uint64_t v60;

  if (a1)
  {
    if (!*(_DWORD *)(a1 + 116)
      || (*(_QWORD *)(a1 + 56) = 0,
          *(_QWORD *)(a1 + 64) = 0,
          *(_DWORD *)(a1 + 72) = 0,
          v2 = escseqs_ProcessStart(*(_QWORD *)(a1 + 80), (_DWORD *)(a1 + 76)),
          (v2 & 0x80000000) == 0))
    {
      v60 = 0;
      if (*(_DWORD *)(a1 + 56))
      {
        for (i = 0; i != 3; ++i)
        {
          v4 = datac_RequestBlock(*(_QWORD *)(a1 + 16), (unsigned __int16)aTAG[i], 1u, &v60);
          if (i != 2 && (v4 & 0x80000000) == 0)
            *(_WORD *)(v60 + 16) = 0;
        }
        goto LABEL_23;
      }
      v2 = datac_RequestBlock(*(_QWORD *)(a1 + 16), 1011, 1u, &v60);
      if ((v2 & 0x80000000) == 0)
      {
        v6 = v60;
        if (*(unsigned __int16 *)(v60 + 16) >= 2u)
        {
          v7 = (uint64_t *)(*(_QWORD *)(v60 + 8) + 112);
          v8 = 1;
          do
          {
            if (*v7)
            {
              heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), *v7);
              *v7 = 0;
              v6 = v60;
            }
            ++v8;
            v7 += 8;
          }
          while (v8 < *(unsigned __int16 *)(v6 + 16));
        }
        for (j = 0; j != 4; ++j)
        {
          v10 = datac_RequestBlock(*(_QWORD *)(a1 + 16), (unsigned __int16)aAllTAG[j], 1u, &v60);
          if (j != 3 && (v10 & 0x80000000) == 0)
            *(_WORD *)(v60 + 16) = 0;
        }
LABEL_23:
        v2 = textpar_CheckForEOF((_QWORD *)a1, 0, 0);
        if ((v2 & 0x80000000) == 0)
        {
          v14 = (_DWORD *)(a1 + 60);
          v15 = "entering textpar_loc_GetTextBlock(bBlockHasBeenRead=%d,bBlockMoreTextRequest=%d,bMoreTextRequest=%d)";
          v16 = "AFTER textpar_loc_GetTextBlock";
          v17 = "BEFORE escseqs_Process TEXTPAR_OUT_MRK_BLOCK";
          v18 = "BEFORE escseqs_Process TEXTPAR_OUT_TXT_BLOCK";
          while (1)
          {
            v60 = 0;
            log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_TEXT_PARSER", 5, 0, (uint64_t)v15, v11, v12, v13, *(unsigned int *)(a1 + 56));
            if (!*(_DWORD *)(a1 + 56) || !*(_DWORD *)(a1 + 72) && *(_DWORD *)(a1 + 68) == 1)
            {
              __n = 0;
              v19 = *(_DWORD *)(a1 + 60);
              v2 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _DWORD *))(*(_QWORD *)(a1 + 24) + 88))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a1 + 48, v14);
              if ((v2 & 0x80000000) != 0)
                return v2;
              *(_DWORD *)(a1 + 56) = 1;
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_TEXT_PARSER", 5, 0, (uint64_t)"pfReadDirectStart returns cTextBytesInStream %u bytes", v20, v21, v22, *(unsigned int *)(a1 + 60));
              UInt = paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"ppresetlen", (unsigned int *)&__n);
              if ((UInt & 0x1FFF) == 0x14)
              {
                v27 = 0;
                LODWORD(__n) = 0;
              }
              else
              {
                v5 = UInt;
                if ((UInt & 0x80000000) != 0)
                  return v5;
                v27 = __n;
              }
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_TEXT_PARSER", 5, 0, (uint64_t)"SSFT_PARAMC_PP_RESETLEN len is %u bytes", v24, v25, v26, v27);
              if ((_DWORD)__n)
              {
                v2 = (*(uint64_t (**)(_QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 24) + 136))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), (char *)&__n + 4);
                if ((v2 & 0x80000000) != 0)
                  return v2;
                log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_TEXT_PARSER", 5, 0, (uint64_t)"pfGetPosition is %u bytes - sync marker position", v28, v29, v30, HIDWORD(__n));
                if (!*(_DWORD *)(a1 + 68))
                {
                  v2 = escseqs_SetMarkerSyncPos(*(_QWORD *)(a1 + 80), SHIDWORD(__n));
                  if ((v2 & 0x80000000) != 0)
                    return v2;
                }
              }
              else
              {
                v2 = escseqs_SetReset(*(_QWORD *)(a1 + 80));
                if ((v2 & 0x80000000) != 0)
                  return v2;
              }
              if (*(_DWORD *)(a1 + 68) == 1 && v19 && v19 == *v14)
                *(_DWORD *)(a1 + 72) = 1;
              else
                *(_DWORD *)(a1 + 68) = 0;
            }
            v2 = datac_RequestBlock(*(_QWORD *)(a1 + 16), 1000, 1u, &v60);
            if ((v2 & 0x80000000) != 0)
              return v2;
            v31 = *v14;
            if (*(_DWORD *)(v60 + 20))
              break;
            v32 = *(_DWORD *)(a1 + 64);
            v33 = v31 - v32;
            if (v31 == v32)
            {
              if (!*(_DWORD *)(a1 + 72) && !*(_DWORD *)(a1 + 68))
              {
                *(_DWORD *)(a1 + 68) = 1;
                if (!v31)
                  return 2368743424;
                if (!*(_DWORD *)(a1 + 116))
                  return 2368743424;
                v2 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 24) + 96))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
                if ((v2 & 0x80000000) == 0)
                  return 2368743424;
                return v2;
              }
              *(_DWORD *)(v60 + 20) = 1;
            }
            else
            {
              v34 = v14;
              v35 = v18;
              v36 = v15;
              v37 = v17;
              v38 = v16;
              if (*(_DWORD *)(a1 + 116))
                v39 = v31 - v32;
              else
                v39 = 128;
              v2 = datac_RequestBlock(*(_QWORD *)(a1 + 16), 1000, v39, &v60);
              if ((v2 & 0x80000000) != 0)
                return v2;
              v40 = v60;
              if (*(_WORD *)(v60 + 16))
              {
                v2 = datac_RequestBlock(*(_QWORD *)(a1 + 16), 1000, (unsigned __int16)(*(_WORD *)(v60 + 16) + v39), &v60);
                if ((v2 & 0x80000000) != 0)
                  return v2;
                v40 = v60;
              }
              v41 = *(_QWORD *)(v40 + 8);
              if (v33 <= v39)
              {
                HIDWORD(__n) = v33;
              }
              else
              {
                HIDWORD(__n) = v39;
                utf8_GetPreviousValidUtf8Offset(*(_QWORD *)(a1 + 48) + *(unsigned int *)(a1 + 64), (unsigned int *)&__n + 1);
                log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_TEXT_PARSER", 5, 0, (uint64_t)"adjust bytes read to align with character boundary (IN=%d, OUT=%d)", v42, v43, v44, v39);
                v40 = v60;
                v33 = HIDWORD(__n);
              }
              v16 = v38;
              v17 = v37;
              v15 = v36;
              v18 = v35;
              v14 = v34;
              memcpy((void *)(v41 + *(unsigned __int16 *)(v40 + 16)), (const void *)(*(_QWORD *)(a1 + 48) + *(unsigned int *)(a1 + 64)), v33);
              if (!utf8_CheckValid(v41 + *(unsigned __int16 *)(v60 + 16), v33))
              {
                log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_TEXT_PARSER", 1933, "%s%s", v45, v46, v47, v48, "Invalid UTF-8 character sequence discovered");
                return 2368741637;
              }
              v49 = WORD2(__n);
              *(_DWORD *)(a1 + 64) += HIDWORD(__n);
              *(_WORD *)(v60 + 16) += v49;
            }
            if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(*(_QWORD *)a1 + 32)) && !*(_DWORD *)(a1 + 68))
              log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)a1 + 32), 32, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
                *(_QWORD *)(a1 + 48),
                *(unsigned int *)(a1 + 60));
            if (*(_DWORD *)(a1 + 116) == 1)
            {
              *(_BYTE *)(*(_QWORD *)(a1 + 48) + *(unsigned int *)(a1 + 64)) = 0;
              v2 = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"rettt_rewritten_text", *(char **)(a1 + 48));
              if ((v2 & 0x80000000) != 0)
                return v2;
            }
            marker_TraceTxt(211, (uint64_t)"PP_TEXT_PARSER", *(_DWORD *)(a1 + 112), *(_QWORD *)a1, *(_QWORD *)(a1 + 16), 1000, (uint64_t)v16);
            marker_TraceMrk(211, (uint64_t)"PP_TEXT_PARSER", *(_DWORD *)(a1 + 112), *(_QWORD *)a1, *(_QWORD *)(a1 + 16), 1011, (uint64_t)v17, 0, 0, 0);
            marker_TraceTxt(211, (uint64_t)"PP_TEXT_PARSER", *(_DWORD *)(a1 + 112), *(_QWORD *)a1, *(_QWORD *)(a1 + 16), 1010, (uint64_t)v18);
            v5 = escseqs_Process(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 16));
            marker_TraceMrk(211, (uint64_t)"PP_TEXT_PARSER", *(_DWORD *)(a1 + 112), *(_QWORD *)a1, *(_QWORD *)(a1 + 16), 1011, (uint64_t)"AFTER escseqs_Process TEXTPAR_OUT_MRK_BLOCK", 0, 0, 0);
            marker_TraceTxt(211, (uint64_t)"PP_TEXT_PARSER", *(_DWORD *)(a1 + 112), *(_QWORD *)a1, *(_QWORD *)(a1 + 16), 1010, (uint64_t)"AFTER escseqs_Process TEXTPAR_OUT_TXT_BLOCK");
            if ((v5 & 0x1FFF) != 9)
            {
              if ((v5 & 0x80000000) != 0)
                return v5;
              v60 = 0;
              v2 = datac_RequestBlock(*(_QWORD *)(a1 + 16), 1010, 1u, &v60);
              if ((v2 & 0x80000000) == 0)
              {
                if (*(_WORD *)(v60 + 16) && *(_DWORD *)(a1 + 112) == 1)
                {
                  if (*(unsigned __int16 *)(v60 + 16) >= 0x400u)
                    v50 = 1024;
                  else
                    v50 = *(unsigned __int16 *)(v60 + 16);
                  v51 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, (v50 + 1));
                  if (!v51)
                    return 2368741386;
                  v52 = (uint64_t)v51;
                  strncpy(v51, *(const char **)(v60 + 8), v50)[v50] = 0;
                  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_TEXT_PARSER", 5, 0, (uint64_t)"(Txt) (text processed) (tag=%d) len=%d (UTF8 *) \"%s\"", v53, v54, v55, 1010);
                  heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v52);
                }
                v56 = *(_QWORD *)(a1 + 16);
                v60 = 0;
                v2 = datac_RequestBlock(v56, 1011, 1u, &v60);
                if ((v2 & 0x80000000) == 0)
                {
                  v2 = marker_loc_FilterSyncMarkers(v60);
                  if ((v2 & 0x80000000) == 0)
                  {
                    if (!*(_DWORD *)(a1 + 116))
                      return 0;
                    v2 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 24) + 96))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 60));
                    if ((v2 & 0x80000000) == 0)
                      return 0;
                  }
                }
              }
              return v2;
            }
          }
          if (!v31
            || (v2 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 24) + 96))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)), (v2 & 0x80000000) == 0))
          {
            v57 = ppParam_ClearAllPPParameters(*(_QWORD *)a1);
            if (v57 < 0)
              return v57;
            else
              return 2368741399;
          }
        }
      }
    }
    return v2;
  }
  return 2368741383;
}

uint64_t pp_text_parser_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2368741377;
  result = 0;
  *a2 = &IPPTextParser;
  return result;
}

uint64_t pp_text_parser_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = 2368741383;
  v11 = 0;
  if (a3)
  {
    inited = InitRsrcFunction(a1, a2, &v11);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
      v8 = heap_Calloc(*(_QWORD **)(v11 + 8), 1, 16);
      if (v8)
      {
        v9 = v8;
        *(_QWORD *)v8 = v11;
        v3 = textpar_ClassOpen(a1, a2, (uint64_t **)(v8 + 8));
        if ((v3 & 0x80000000) != 0)
        {
          pp_text_parser_ClassClose(*(_QWORD *)a3, *(_QWORD *)(a3 + 8));
        }
        else
        {
          *(_QWORD *)a3 = v9;
          *(_DWORD *)(a3 + 8) = 29953;
        }
      }
      else
      {
        return 2368741386;
      }
    }
  }
  return v3;
}

uint64_t pp_text_parser_ClassClose(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = safeh_HandleCheck(a1, a2, 29953, 16);
  if ((v3 & 0x80000000) != 0)
    return v3;
  v4 = *(_QWORD *)a1;
  v5 = textpar_ClassClose(*(uint64_t **)(a1 + 8));
  if ((v5 & 0x80000000) == 0)
  {
    heap_Free(*(_QWORD **)(v4 + 8), a1);
    safeh_GetNullHandle();
  }
  return v5;
}

uint64_t pp_text_parser_ObjOpen(uint64_t a1, int a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Object;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _QWORD *v23;

  v22 = 0;
  v23 = 0;
  v5 = 2368741383;
  v21 = 0;
  if (a5 && a1)
  {
    v10 = safeh_HandleCheck(a1, a2, 29953, 16);
    if ((v10 & 0x80000000) != 0)
    {
      return v10;
    }
    else if ((InitRsrcFunction(a3, a4, &v23) & 0x80000000) == 0)
    {
      v14 = v23;
      v15 = v23[4];
      if (v15)
      {
        log_OutText(v15, (uint64_t)"PP_TEXT_PARSER", 4, 0, (uint64_t)"Entering pp_text_parser_ObjOpen", v11, v12, v13, v20);
        v14 = v23;
      }
      *(_QWORD *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      v16 = heap_Alloc(v14[1], 96);
      if (v16)
      {
        v17 = v16;
        *(_OWORD *)v16 = 0u;
        *(_OWORD *)(v16 + 16) = 0u;
        *(_OWORD *)(v16 + 64) = 0u;
        *(_OWORD *)(v16 + 80) = 0u;
        *(_OWORD *)(v16 + 32) = 0u;
        *(_OWORD *)(v16 + 48) = 0u;
        *(_QWORD *)v16 = a3;
        *(_QWORD *)(v16 + 8) = a4;
        *(_DWORD *)(v16 + 88) = 0;
        *(_QWORD *)(v16 + 16) = a1;
        Object = objc_GetObject(v23[6], (uint64_t)"SYNTHSTREAM", &v22);
        if ((Object & 0x80000000) != 0)
          goto LABEL_17;
        *(_QWORD *)(v17 + 24) = *(_QWORD *)(v22 + 8);
        *(_DWORD *)(v17 + 88) = 0;
        if ((paramc_ParamGetStr(v23[5], (uint64_t)"clcpppipelinemode", &v21) & 0x80000000) == 0 && v21 && *v21)
          *(_DWORD *)(v17 + 88) = 1;
        Object = textpar_ObjOpen(*(_QWORD *)(a1 + 8), a3, a4, *(_QWORD *)(v17 + 24), (uint64_t **)(v17 + 80), *(_DWORD *)(v17 + 88));
        if ((Object & 0x80000000) != 0)
        {
LABEL_17:
          v5 = Object;
          pp_text_parser_ObjClose(v17, 24357);
        }
        else
        {
          v5 = 0;
          *(_QWORD *)a5 = v17;
          *(_QWORD *)(a5 + 8) = 24357;
        }
      }
      else
      {
        return 2368741386;
      }
    }
  }
  return v5;
}

uint64_t pp_text_parser_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v3 = 2368741383;
  v12 = 0;
  if ((safeh_HandleCheck(a1, a2, 24357, 96) & 0x80000000) != 0)
    return 2368741384;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v12) & 0x80000000) == 0)
  {
    v7 = *(_QWORD *)(v12 + 32);
    if (v7)
      log_OutText(v7, (uint64_t)"PP_TEXT_PARSER", 4, 0, (uint64_t)"Entering pp_text_parser_ObjClose", v4, v5, v6, v11);
    v8 = *(uint64_t **)(a1 + 80);
    if (v8)
      textpar_ObjClose(v8);
    v9 = v12;
    if (*(_QWORD *)(a1 + 24))
    {
      objc_ReleaseObject(*(_QWORD *)(v12 + 48), (uint64_t)"SYNTHSTREAM");
      v9 = v12;
    }
    heap_Free(*(_QWORD **)(v9 + 8), a1);
    return 0;
  }
  return v3;
}

uint64_t pp_text_parser_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v12;
  uint64_t v13;

  v3 = 2368741383;
  v13 = 0;
  if ((safeh_HandleCheck(a1, a2, 24357, 96) & 0x80000000) != 0)
    return 2368741384;
  if (a1)
  {
    inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v13);
    if ((inited & 0x80000000) == 0)
    {
      v8 = inited;
      v9 = *(_QWORD *)(v13 + 32);
      if (v9)
        log_OutText(v9, (uint64_t)"PP_TEXT_PARSER", 4, 0, (uint64_t)"Entering pp_text_parser_ObjReopen", v5, v6, v7, v12);
      v10 = *(uint64_t **)(a1 + 80);
      if (v10)
      {
        v3 = textpar_ObjReopen(*(_WORD **)a1, *(_QWORD *)(a1 + 8), v10);
        if ((v3 & 0x80000000) != 0)
          *(_QWORD *)(a1 + 80) = 0;
      }
      else
      {
        return v8;
      }
    }
  }
  return v3;
}

uint64_t pp_text_parser_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;

  v35 = 0;
  v7 = 2368741383;
  if ((safeh_HandleCheck(a1, a2, 24357, 96) & 0x80000000) != 0)
    return 2368741384;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v35) & 0x80000000) == 0)
  {
    v11 = *(_QWORD *)(v35 + 32);
    if (v11)
      log_OutText(v11, (uint64_t)"PP_TEXT_PARSER", 4, 0, (uint64_t)"Entering pp_text_parser_ProcessStart", v8, v9, v10, v33);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a3, a4, 211, "text/plain;charset=utf-8",
            0,
            0,
            a1 + 32);
    if ((v12 & 0x80000000) != 0)
    {
      v27 = v12;
      v34 = 0;
      if ((paramc_ParamGetStr(*(_QWORD *)(v35 + 40), (uint64_t)"inputmimetype", &v34) & 0x80000000) == 0 && v34 && *v34)
      {
        log_OutPublic(*(_QWORD *)(v35 + 32), (uint64_t)"PP_TEXT_PARSER", 1903, "%s%s", v28, v29, v30, v31, "mimeContentType");
        return 2368741643;
      }
      else
      {
        log_OutPublic(*(_QWORD *)(v35 + 32), (uint64_t)"PP_TEXT_PARSER", 1900, 0, v28, v29, v30, v31, v33);
        return v27;
      }
    }
    else
    {
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a3, a4, 211, "text/plain;charset=utf-8",
              0,
              2,
              a1 + 48);
      if ((v13 & 0x80000000) != 0)
      {
        v7 = v13;
        log_OutPublic(*(_QWORD *)(v35 + 32), (uint64_t)"PP_TEXT_PARSER", 1901, "%s%s", v14, v15, v16, v17, "mimeType");
      }
      else
      {
        v18 = *(_QWORD *)(a1 + 24);
        v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t))(v18 + 64);
        v20 = (*(uint64_t (**)(void))(v18 + 168))();
        v21 = v19(a3, a4, 211, "application/x-realspeak-int-markers-pp;version=4.0", v20, 1, a1 + 64);
        if ((v21 & 0x80000000) != 0)
        {
          v7 = v21;
          log_OutPublic(*(_QWORD *)(v35 + 32), (uint64_t)"PP_TEXT_PARSER", 1902, 0, v22, v23, v24, v25, v33);
        }
        else
        {
          v26 = textpar_ProcessStart(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
          return v26 & (v26 >> 31);
        }
      }
    }
  }
  return v7;
}

uint64_t pp_text_parser_Process(_WORD **a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;

  v7 = 2368741383;
  v24 = 0;
  v23 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 24357, 96) & 0x80000000) != 0)
    return 2368741384;
  if (a1)
  {
    if (!a1[4])
      return 2368741393;
    v22 = 0;
    if ((InitRsrcFunction(*a1, (int)a1[1], &v24) & 0x80000000) == 0)
    {
      v11 = *(_QWORD *)(v24 + 32);
      if (v11)
        log_OutText(v11, (uint64_t)"PP_TEXT_PARSER", 4, 0, (uint64_t)"Entering pp_text_parser_Process", v8, v9, v10, v21);
      *a5 = 2;
      v12 = textpar_Process((uint64_t)a1[10]);
      v7 = v12;
      if ((v12 & 0x80000000) == 0)
      {
        v16 = (uint64_t)a1[6];
        if (!v16
          || (v7 = textpar_WriteTextAndMarkers((uint64_t)a1[10], v16, (uint64_t)a1[7], (uint64_t)a1[8], (uint64_t)a1[9]),
              (v7 & 0x80000000) == 0))
        {
          if (*((_DWORD *)a1 + 22) || textpar_AllTextProcessed((uint64_t)a1[10]))
          {
            *a5 = 1;
            if (!*((_DWORD *)a1 + 22))
            {
              v17 = pp_text_parser_loc_CloseOutStreams(a1);
              if ((v17 & 0x80000000) != 0)
                return v17;
              v7 = 0;
            }
          }
        }
        goto LABEL_30;
      }
      if ((v12 & 0x1FFF) != 0x800)
      {
        if ((v12 & 0x1FFF) != 0x17)
        {
          if (!*((_DWORD *)a1 + 22))
            pp_text_parser_loc_CloseOutStreams(a1);
          *a5 = 1;
          goto LABEL_30;
        }
        *a5 = 1;
        v18 = pp_text_parser_loc_CloseOutStreams(a1);
        goto LABEL_20;
      }
      *a5 = 0;
      textpar_CheckForEOF(a1[10], &v22, &v23);
      if (v23)
      {
        *a5 = 1;
        v18 = pp_text_parser_loc_CloseOutStreams(a1);
        if ((v18 & 0x80000000) != 0)
        {
LABEL_20:
          v7 = v18;
          goto LABEL_30;
        }
        LODWORD(v7) = 0;
      }
      if (*((_DWORD *)a1 + 22))
        v7 = v7;
      else
        v7 = 0;
LABEL_30:
      v19 = *(_QWORD *)(v24 + 32);
      if (v19)
        log_OutText(v19, (uint64_t)"PP_TEXT_PARSER", 4, 0, (uint64_t)"Leaving pp_text_parser_Process peResults=%d fRet=%d", v13, v14, v15, *a5);
    }
  }
  return v7;
}

uint64_t pp_text_parser_ProcessStop(_WORD **a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  kaldi::nnet1::Component *v7;
  uint64_t IsUpdatable;
  _WORD *v9;
  uint64_t v11;
  uint64_t v12;

  v3 = 2368741383;
  v12 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 24357, 96) & 0x80000000) != 0)
    return 2368741384;
  if (a1 && (InitRsrcFunction(*a1, (int)a1[1], &v12) & 0x80000000) == 0)
  {
    v7 = *(kaldi::nnet1::Component **)(v12 + 32);
    if (v7)
      v7 = (kaldi::nnet1::Component *)log_OutText((uint64_t)v7, (uint64_t)"PP_TEXT_PARSER", 4, 0, (uint64_t)"Entering pp_text_parser_ProcessStop", v4, v5, v6, v11);
    IsUpdatable = kaldi::nnet1::Component::IsUpdatable(v7);
    if ((IsUpdatable & 0x80000000) != 0)
      return IsUpdatable;
    IsUpdatable = pp_text_parser_loc_CloseOutStreams(a1);
    if ((IsUpdatable & 0x80000000) != 0)
      return IsUpdatable;
    v9 = a1[4];
    if (!v9)
      return 0;
    IsUpdatable = (*((uint64_t (**)(_WORD *, _WORD *))a1[3] + 9))(v9, a1[5]);
    if ((IsUpdatable & 0x80000000) != 0)
    {
      return IsUpdatable;
    }
    else
    {
      v3 = 0;
      a1[4] = 0;
      *((_DWORD *)a1 + 10) = 0;
    }
  }
  return v3;
}

uint64_t pp_text_parser_loc_CloseOutStreams(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = a1[8];
  if (v2)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD))(a1[3] + 72))(v2, a1[9]);
    if ((result & 0x80000000) != 0)
      return result;
    a1[8] = 0;
    *((_DWORD *)a1 + 18) = 0;
  }
  result = a1[6];
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD))(a1[3] + 72))(result, a1[7]);
    if ((result & 0x80000000) == 0)
    {
      result = 0;
      a1[6] = 0;
      *((_DWORD *)a1 + 14) = 0;
    }
  }
  return result;
}

uint64_t sentpar_clearReadOutParameters(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = 0;
  while (1)
  {
    result = paramc_ParamRemove(*(_QWORD *)(a1 + 40), *(_QWORD *)((char *)&aSENTPARTAG2PARAM + v2 + 8));
    if ((result & 0x80000000) != 0 && (result & 0x1FFF) != 0x14)
      break;
    v2 += 16;
    if (v2 == 64)
      return 0;
  }
  return result;
}

uint64_t sentpar_clearPersistentParameters(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = 0;
  while (1)
  {
    result = paramc_ParamRemove(*(_QWORD *)(a1 + 40), (uint64_t)off_1EA9403A8[v2]);
    if ((result & 0x80000000) != 0 && (result & 0x1FFF) != 0x14)
      break;
    if (++v2 == 5)
      return 0;
  }
  return result;
}

uint64_t sentpar_clearAllParameters(uint64_t a1)
{
  uint64_t result;

  result = sentpar_clearReadOutParameters(a1);
  if ((result & 0x80000000) == 0)
    return sentpar_clearPersistentParameters(a1);
  return result;
}

uint64_t sentpar_loc_SetReadoutMarkersAsParameters(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t i;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t *v14;
  unsigned int ArgOfLastOfType;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  size_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *j;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  v33 = 0;
  v34[0] = 0;
  v34[1] = 0;
  if ((datac_RequestBlock(*((_QWORD *)a1 + 1), 1012, 1u, &v33) & 0x80000000) != 0)
    return 2369789959;
  v32 = *(_QWORD *)(v33 + 8);
  v2 = datac_RequestBlock(*((_QWORD *)a1 + 1), 1021, 1u, &v33);
  if ((v2 & 0x80000000) == 0)
  {
    v3 = v33;
    LODWORD(v4) = *(unsigned __int16 *)(v33 + 16);
    if (v4 >= 2)
    {
      v5 = *(_QWORD *)(v33 + 8);
      for (i = 1; i < v4; ++i)
      {
        v7 = v5 + (i << 6);
        v10 = *(_DWORD *)(v7 + 20);
        v9 = (int *)(v7 + 20);
        v8 = v10;
        v11 = (1 << v10) & 0x1080200080;
        if (v10 > 0x24 || v11 == 0)
          goto LABEL_30;
        v13 = 0;
        v14 = (uint64_t *)&off_1EA9403D8;
        while (*((_DWORD *)v14 - 2) != (_DWORD)v8)
        {
          v13 += 4;
          v14 += 2;
          if (v13 == 16)
            goto LABEL_30;
        }
        if (*(_DWORD *)((char *)v34 + v13))
          goto LABEL_30;
        ArgOfLastOfType = marker_GetArgOfLastOfType(v5, (unsigned __int16)i, (unsigned __int16)v4, 0);
        if (marker_IsReadoutControlDefaultArg(*v9, ArgOfLastOfType, v32, a1[47]))
        {
          v16 = paramc_ParamRemove(*(_QWORD *)(*(_QWORD *)a1 + 40), *v14);
          v2 = 0;
          if ((v16 & 0x80000000) != 0 && (v16 & 0x1FFF) != 0x14)
            return v16;
          goto LABEL_29;
        }
        v17 = *v9;
        if (*v9 > 30)
        {
          if (v17 == 36)
          {
LABEL_26:
            v21 = (const char *)(v32 + ArgOfLastOfType);
            v22 = (unsigned __int16)strlen(v21);
            v23 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, v22 + 1);
            if (!v23)
              return 2369789962;
            v24 = v23;
            strncpy(v23, v21, v22)[v22] = 0;
            v2 = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), *v14, v24);
            v28 = *(_QWORD *)a1;
            if ((v2 & 0x80000000) != 0)
            {
              heap_Free(*(_QWORD **)(v28 + 8), (uint64_t)v24);
              return v2;
            }
            log_OutText(*(_QWORD *)(v28 + 32), (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"SET PARAM marker:%d param=%s val=%s", v25, v26, v27, v8);
            heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v24);
            goto LABEL_29;
          }
          if (v17 == 31)
          {
LABEL_24:
            v2 = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)a1 + 40), *v14, ArgOfLastOfType);
            if ((v2 & 0x80000000) != 0)
              return v2;
            log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"SET PARAM marker:%d param=%s val=%u", v18, v19, v20, v8);
          }
        }
        else
        {
          if (v17 == 7)
            goto LABEL_24;
          if (v17 == 21)
            goto LABEL_26;
        }
LABEL_29:
        *(_DWORD *)((char *)v34 + v13) = 1;
        v3 = v33;
LABEL_30:
        v4 = *(unsigned __int16 *)(v3 + 16);
      }
    }
    v29 = 0;
    for (j = (uint64_t *)&off_1EA9403D8; ; j += 2)
    {
      if (!*(_DWORD *)((char *)v34 + v29))
      {
        v16 = paramc_ParamRemove(*(_QWORD *)(*(_QWORD *)a1 + 40), *j);
        v2 = 0;
        if ((v16 & 0x80000000) != 0 && (v16 & 0x1FFF) != 0x14)
          break;
      }
      v29 += 4;
      if (v29 == 16)
        return v2;
    }
    return v16;
  }
  return v2;
}

uint64_t sentpar_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int16 v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v20;

  v20 = 0;
  v19 = 0;
  v5 = 2369789959;
  if (a4 && (InitRsrcFunction(a1, a2, &v20) & 0x80000000) == 0)
  {
    *a4 = 0;
    v11 = heap_Alloc(*(_QWORD *)(v20 + 8), 248);
    if (v11)
    {
      v12 = v11;
      *(_QWORD *)(v11 + 240) = 0;
      *(_OWORD *)(v11 + 192) = 0u;
      *(_OWORD *)(v11 + 208) = 0u;
      *(_OWORD *)(v11 + 160) = 0u;
      *(_OWORD *)(v11 + 176) = 0u;
      *(_OWORD *)(v11 + 128) = 0u;
      *(_OWORD *)(v11 + 144) = 0u;
      *(_OWORD *)(v11 + 96) = 0u;
      *(_OWORD *)(v11 + 112) = 0u;
      *(_OWORD *)(v11 + 64) = 0u;
      *(_OWORD *)(v11 + 80) = 0u;
      *(_OWORD *)(v11 + 32) = 0u;
      *(_OWORD *)(v11 + 48) = 0u;
      *(_OWORD *)v11 = 0u;
      *(_OWORD *)(v11 + 16) = 0u;
      *(_OWORD *)(v11 + 224) = 0u;
      v13 = (uint64_t *)(v11 + 224);
      *(_QWORD *)v11 = v20;
      *(_QWORD *)(v11 + 16) = a3;
      *(_QWORD *)(v11 + 224) = 0;
      *(_DWORD *)(v11 + 192) = 0;
      *(_WORD *)(v11 + 196) = 0;
      *(_DWORD *)(v11 + 240) = a5;
      *(_OWORD *)(v11 + 136) = 0u;
      *(_OWORD *)(v11 + 120) = 0u;
      *(_OWORD *)(v11 + 152) = 0u;
      *(_OWORD *)(v11 + 168) = 0u;
      *(_DWORD *)(v11 + 140) = 0;
      if ((int)paramc_ParamGetUInt(*(_QWORD *)(v20 + 40), (uint64_t)"ppmaxpcreframeblocks", (unsigned int *)&v19) < 0)
        v14 = 30;
      else
        v14 = v19;
      if ((int)paramc_ParamGetUInt(*(_QWORD *)(v20 + 40), (uint64_t)"ppnumframesinblock", (unsigned int *)&v19) < 0)
        v15 = 50;
      else
        v15 = v19;
      v16 = extdata_ObjOpen(a1, a2, v13, 212);
      if ((v16 & 0x80000000) == 0)
      {
        *(_QWORD *)(v12 + 208) = 0;
        *(_DWORD *)(v12 + 216) = 0;
        v16 = nuance_pcre_ObjOpen(a1, a2, v12 + 208);
        if ((v16 & 0x80000000) == 0)
        {
          v16 = nuance_pcre_Init(*(_QWORD **)(v12 + 208), *(_QWORD *)(v12 + 216), v14, v15);
          if ((v16 & 0x80000000) == 0)
          {
            v16 = sentpar_loc_OpenParts(a1, a2, (uint64_t *)v12);
            if ((v16 & 0x80000000) == 0)
            {
              v16 = datac_ObjOpen(a1, a2, (uint64_t *)(v12 + 8), 212);
              if ((v16 & 0x80000000) == 0)
              {
                v17 = 0;
                while (1)
                {
                  datac_RegisterBlock(*(_QWORD *)(v12 + 8), (unsigned __int16)aMETA_0[v17], (unsigned __int16)aMETA_0[v17 + 1], (unsigned __int16)aMETA_0[v17 + 2]);
                  if ((v16 & 0x80000000) != 0)
                    break;
                  v17 += 3;
                  if (v17 == 18)
                  {
                    *a4 = v12;
                    return sentpar_clearAllParameters(v20);
                  }
                }
              }
            }
          }
        }
      }
      v5 = v16;
      sentpar_ObjClose(a1, a2, (_QWORD *)v12);
    }
    else
    {
      return 2369789962;
    }
  }
  return v5;
}

uint64_t sentpar_ObjClose(_WORD *a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t NullHandle;
  int v9;
  uint64_t v11;

  v3 = 2369789959;
  v11 = 0;
  if (a3 && (InitRsrcFunction(a1, a2, &v11) & 0x80000000) == 0)
  {
    v5 = a3[1];
    if (v5)
      datac_ObjClose(v5);
    v6 = a3[28];
    if (v6)
    {
      extdata_ObjClose(v6);
      a3[28] = 0;
    }
    v7 = a3[25];
    if (v7)
      sparser_ObjClose(v7);
    NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a3[26], a3[27], NullHandle, v9))
    {
      nuance_pcre_DeInit((_QWORD *)a3[26], a3[27]);
      nuance_pcre_ObjClose(a3[26], a3[27]);
    }
    sentpar_clearAllParameters(v11);
    heap_Free(*(_QWORD **)(v11 + 8), (uint64_t)a3);
    return 0;
  }
  return v3;
}

uint64_t sentpar_loc_OpenParts(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;

  result = extdata_LoadSpecificData(a3[28], "PPSE", "BRKD");
  if ((result & 0x80000000) == 0)
  {
    result = sparser_ObjOpen(a1, a2, a3[26], a3[27], a3 + 25, a3[28]);
    if ((result & 0x80000000) == 0)
      return extdata_LoadData(a3[28], "PPSE");
  }
  return result;
}

uint64_t sentpar_ObjReopen(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *__s1;
  uint64_t v13;

  v3 = 2369789959;
  __s1 = 0;
  v13 = 0;
  if (a3)
  {
    inited = InitRsrcFunction(a1, a2, &v13);
    if ((inited & 0x80000000) == 0)
    {
      v8 = inited;
      if ((paramc_ParamGetStr(*(_QWORD *)(v13 + 40), (uint64_t)"pipelineswitchcomponent", &__s1) & 0x80000000) != 0
        || !__s1
        || (v3 = v8, !strcmp(__s1, "pp/sent_parser")))
      {
        v9 = extdata_FreeData(a3[28]);
        if ((v9 & 0x80000000) != 0 || (v10 = a3[25]) != 0 && (v9 = sparser_ObjClose(v10), (v9 & 0x80000000) != 0))
        {
          v3 = v9;
LABEL_12:
          sentpar_ObjClose(a1, a2, a3);
          return v3;
        }
        v3 = sentpar_loc_OpenParts(a1, a2, a3);
        if ((v3 & 0x80000000) != 0)
          goto LABEL_12;
      }
    }
  }
  return v3;
}

uint64_t sentpar_ProcessStart(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  _BOOL4 v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  v14 = 0;
  if (!a2)
    return 2369789959;
  *(_QWORD *)(a2 + 24) = a3;
  *(_DWORD *)(a2 + 32) = a4;
  *(_QWORD *)(a2 + 40) = a5;
  *(_DWORD *)(a2 + 48) = a6;
  paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)a2 + 40), (uint64_t)"finalsentencefound", 0);
  v9 = (int)paramc_ParamGetInt(*(_QWORD *)(a1 + 40), (uint64_t)"eosdetection", (int *)&v16 + 1) < 0 || HIDWORD(v16) != 0;
  *(_DWORD *)(a2 + 232) = v9;
  if ((paramc_ParamGet(*(_QWORD *)(a1 + 40), (uint64_t)"readmode", &v14, 0) & 0x80000000) == 0)
    *(_WORD *)(a2 + 196) = *v14 - 48;
  *(_DWORD *)(a2 + 236) = log_GetLogLevel(*(_QWORD *)(a1 + 32)) > 4;
  *(_DWORD *)(a2 + 184) = 0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_DWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 112) = 0;
  *(_DWORD *)(a2 + 192) = 1024;
  if ((paramc_ParamGetUInt(*(_QWORD *)(a1 + 40), (uint64_t)"ppreaddirectsize", (unsigned int *)&v16) & 0x80000000) == 0
    && v16 >= 0x100)
  {
    *(_DWORD *)(a2 + 192) = v16;
  }
  if ((paramc_ParamGetUInt(*(_QWORD *)(a1 + 40), (uint64_t)"ppspellpausevalue", (unsigned int *)(a2 + 188)) & 0x80000000) != 0)
    *(_DWORD *)(a2 + 188) = 0;
  v10 = 0;
  while (1)
  {
    result = datac_RequestBlock(*(_QWORD *)(a2 + 8), (unsigned __int16)aMETA_0[v10], 1u, &v15);
    if ((result & 0x80000000) != 0)
      break;
    v10 += 3;
    v12 = v15;
    *(_WORD *)(v15 + 16) = 0;
    *(_DWORD *)(v12 + 20) = 0;
    if (v10 == 18)
    {
      v13 = sparser_ProcessStart(*(_QWORD *)(a2 + 200), *(_DWORD *)(a2 + 188));
      return v13 & (v13 >> 31);
    }
  }
  return result;
}

uint64_t sentpar_ProcessEnd(uint64_t a1, _WORD *a2, int a3)
{
  int v4;
  uint64_t v6;
  char *__s1;
  uint64_t v8;

  __s1 = 0;
  v8 = 0;
  v6 = 0;
  if ((InitRsrcFunction(a2, a3, &v8) & 0x80000000) != 0)
    return 2369789959;
  if ((paramc_ParamGetStr(*(_QWORD *)(v8 + 40), (uint64_t)"pipelineswitchcomponent", &__s1) & 0x80000000) == 0
    && __s1
    && strcmp(__s1, "pp/sent_parser"))
  {
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_DWORD *)(a1 + 140) = 0;
  }
  if ((paramc_ParamGetStr(*(_QWORD *)(v8 + 40), (uint64_t)"component_stop", &v6) & 0x80000000) == 0 && v6)
  {
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_DWORD *)(a1 + 140) = 0;
    paramc_ParamSetStr(*(_QWORD *)(v8 + 40), (uint64_t)"component_stop", &byte_1DEBD87CE);
  }
  if (!__s1)
  {
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_DWORD *)(a1 + 140) = 0;
  }
  v4 = sentpar_loc_PrepareDataContainers((uint64_t *)a1, 0);
  return v4 & (v4 >> 31);
}

uint64_t sentpar_loc_PrepareDataContainers(uint64_t *a1, int a2)
{
  uint64_t i;
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t j;
  int v13;
  uint64_t v14;

  v14 = 0;
  if (a2)
  {
    for (i = 0; i != 3; ++i)
    {
      v4 = datac_RequestBlock(a1[1], (unsigned __int16)aTAG_0[i], 1u, &v14);
      if (i != 2 && (v4 & 0x80000000) == 0)
        *(_WORD *)(v14 + 16) = 0;
    }
    return 0;
  }
  result = datac_RequestBlock(a1[1], 1011, 1u, &v14);
  if ((result & 0x80000000) == 0)
  {
    v6 = v14;
    if (*(unsigned __int16 *)(v14 + 16) >= 2u)
    {
      v7 = (uint64_t *)(*(_QWORD *)(v14 + 8) + 112);
      v8 = 1;
      do
      {
        if (*v7)
        {
          heap_Free(*(_QWORD **)(*a1 + 8), *v7);
          *v7 = 0;
          v6 = v14;
        }
        ++v8;
        v7 += 8;
      }
      while (v8 < *(unsigned __int16 *)(v6 + 16));
    }
    result = datac_RequestBlock(a1[1], 1021, 1u, &v14);
    if ((result & 0x80000000) == 0)
    {
      v9 = v14;
      if (*(unsigned __int16 *)(v14 + 16) >= 2u)
      {
        v10 = (uint64_t *)(*(_QWORD *)(v14 + 8) + 112);
        v11 = 1;
        do
        {
          if (*v10)
          {
            heap_Free(*(_QWORD **)(*a1 + 8), *v10);
            *v10 = 0;
            v9 = v14;
          }
          ++v11;
          v10 += 8;
        }
        while (v11 < *(unsigned __int16 *)(v9 + 16));
      }
      for (j = 0; j != 5; ++j)
      {
        v13 = datac_RequestBlock(a1[1], (unsigned __int16)aAllTAG_0[j], 1u, &v14);
        if (j != 2 && (v13 & 0x80000000) == 0)
          *(_WORD *)(v14 + 16) = 0;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sentpar_Process(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  uint64_t InputStreams;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t UInt;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t Str;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  __int16 v49;
  size_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  BOOL v55;
  signed int v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  unsigned __int16 v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _DWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _DWORD *v129;
  int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  int v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  const char *v150;
  unsigned int v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  v147 = 1;
  v146 = 0;
  v145 = 0;
  v144 = 0;
  v138 = 0;
  v139 = 0;
  v137 = 0;
  v136 = 0;
  if (!a1)
    return 2369789959;
  v142 = 0u;
  v143 = 0u;
  v140 = 0u;
  v141 = 0u;
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"entering sentpar_Process()", a6, a7, a8, v122);
  DWORD1(v141) = 0;
  if (*(_DWORD *)(a1 + 240))
  {
    v12 = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 84) = 0;
    *(_QWORD *)(a1 + 76) = 0;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 64);
  }
  InputStreams = sentpar_loc_PrepareDataContainers((uint64_t *)a1, v12);
  if ((InputStreams & 0x80000000) != 0)
    return InputStreams;
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"entering sentpar_loc_GetTextBlockAndMarkers(bHaveReadInputStreams=%d,bBlockMoreInputRequest=%d,bMoreInputRequest=%d)", v15, v16, v17, *(unsigned int *)(a1 + 64));
  if (!*(_DWORD *)(a1 + 64) || !*(_DWORD *)(a1 + 88) && *(_DWORD *)(a1 + 84) == 1)
  {
    InputStreams = sentpar_loc_ReadInputStreams(a1);
    if ((InputStreams & 0x80000000) != 0)
      return InputStreams;
    *(_DWORD *)(a1 + 64) = 1;
    goto LABEL_12;
  }
  *(_QWORD *)&v152 = 0;
  InputStreams = datac_RequestBlock(*(_QWORD *)(a1 + 8), 1010, 1u, &v152);
  if ((InputStreams & 0x80000000) != 0)
    return InputStreams;
  if (*(_DWORD *)(v152 + 20))
  {
    if (*(_DWORD *)(a1 + 68))
    {
      InputStreams = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 16) + 96))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
      if ((InputStreams & 0x80000000) != 0)
        return InputStreams;
    }
    if (*(_DWORD *)(a1 + 104))
    {
      InputStreams = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 16) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
      if ((InputStreams & 0x80000000) != 0)
        return InputStreams;
    }
    InputStreams = sentpar_clearAllParameters(*(_QWORD *)a1);
    if ((InputStreams & 0x80000000) != 0)
      return InputStreams;
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"sentpar_loc_CheckIfAllDataProcessed(return TTSEG_PROCESSING_COMP_RESULTS_FULL)", v70, v71, v72, v123);
    return 2369789975;
  }
  v73 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v73 == *(_DWORD *)(a1 + 76))
  {
    v74 = *(_DWORD *)(a1 + 104);
    if (v74 == *(_DWORD *)(a1 + 108))
    {
      if (*(_DWORD *)(a1 + 88) || *(_DWORD *)(a1 + 84))
      {
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"FINISHED PROCESSING INPUT STREAM", v33, v34, v35, v123);
        v32 = sentpar_loc_FlushStreamsAndReturn(a1, a3, a4);
        goto LABEL_14;
      }
      *(_DWORD *)(a1 + 84) = 1;
      if (*(_DWORD *)(a1 + 240))
      {
        if (!(_DWORD)v73)
        {
LABEL_102:
          if (v74)
          {
            InputStreams = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 16) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
            if ((InputStreams & 0x80000000) != 0)
              return InputStreams;
          }
          goto LABEL_104;
        }
        InputStreams = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 16) + 96))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v73);
        if ((InputStreams & 0x80000000) != 0)
          return InputStreams;
        if (*(_DWORD *)(a1 + 240))
        {
          v74 = *(_DWORD *)(a1 + 104);
          goto LABEL_102;
        }
      }
LABEL_104:
      v76 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      v77 = "issue more text request (cTextBytesAvailable==0)- TTSEG_PROCESSING_COMP_RESULTS_NONE_NEED_MORE_INPUT";
      goto LABEL_126;
    }
  }
  InputStreams = sentpar_loc_ReadInputStreams(a1);
  if ((InputStreams & 0x80000000) != 0)
    return InputStreams;
LABEL_12:
  InputStreams = sentpar_loc_SetUpTextBlock(a1, v18, v19, v20, v21, v22, v23, v24);
  if ((InputStreams & 0x80000000) != 0)
    return InputStreams;
  v32 = sentpar_loc_SetUpMarkerBlocks(a1, v25, v26, v27, v28, v29, v30, v31);
LABEL_14:
  v13 = v32;
  if ((v32 & 0x80000000) != 0)
    return v13;
  if (!*(_DWORD *)(a1 + 240) && !*(_DWORD *)(a1 + 88))
  {
    v75 = *(_DWORD *)(a1 + 68);
    if (v75 <= 0x1FF && v75 > *(_DWORD *)(a1 + 72))
    {
      *(_DWORD *)(a1 + 64) = 0;
      *(_DWORD *)(a1 + 84) = 1;
      *(_DWORD *)(a1 + 72) = v75;
      v76 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      v77 = "issue more text request as text block received is less than SENTPAR_BLOCK_SIZE  - TTSEG_PROCESSING_COMP_RESU"
            "LTS_NONE_NEED_MORE_INPUT";
LABEL_126:
      log_OutText(v76, (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)v77, v33, v34, v35, v123);
      return 2369792000;
    }
  }
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 68);
  v151 = 0;
  v152 = 0uLL;
  v150 = 0;
  v148 = 0;
  v149 = 0;
  InputStreams = datac_RequestBlock(*(_QWORD *)(a1 + 8), 1011, 1u, &v149);
  if ((InputStreams & 0x80000000) != 0)
    return InputStreams;
  v134 = *(_QWORD *)(v149 + 8);
  v13 = datac_RequestBlock(*(_QWORD *)(a1 + 8), 1012, 1u, &v148);
  if ((v13 & 0x80000000) != 0)
    return v13;
  if (!*(_DWORD *)(a1 + 240))
  {
    v128 = a4;
    v129 = a2;
    v36 = 0;
    v132 = 0;
    v133 = 0;
    v131 = 0;
    v37 = 0;
    v38 = 0;
    v130 = *(unsigned __int16 *)(v148 + 16);
    while (1)
    {
      v39 = aSENTPARTAG2PARAM_0[v36];
      if ((int)v39 > 30)
      {
        if ((_DWORD)v39 == 36)
          goto LABEL_29;
        if ((_DWORD)v39 != 31)
          goto LABEL_53;
      }
      else if ((_DWORD)v39 != 7)
      {
        if ((_DWORD)v39 != 21)
          goto LABEL_53;
LABEL_29:
        v135 = v37;
        Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), *(_QWORD *)&aSENTPARTAG2PARAM_0[v36 + 2], &v150);
        v48 = Str & 0x1FFF;
        if (v48 == 20)
        {
          v13 = 0;
        }
        else
        {
          v13 = Str;
          if ((Str & 0x80000000) != 0)
            goto LABEL_54;
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"GET PARAM marker:%d param=%s val=%s", v45, v46, v47, v39);
          v50 = (unsigned __int16)strlen(v150);
          v51 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, v50 + 1);
          if (!v51)
            return 2369789962;
          v38 = v51;
          strncpy(v51, v150, v50)[v50] = 0;
          if (*(_WORD *)(v149 + 16))
          {
            LODWORD(v133) = *(_DWORD *)(v134 + 32);
            HIDWORD(v133) = *(_DWORD *)(v134 + 24);
          }
          else
          {
            v133 = 0;
          }
          v132 = v39 | 0x100000000;
        }
        paramc_ParamRelease(*(_QWORD *)(*(_QWORD *)a1 + 40));
        v150 = 0;
        if (v48 != 20)
        {
          v49 = *(_WORD *)(v149 + 16);
          LODWORD(v39) = v132;
          LODWORD(v37) = v135;
          goto LABEL_44;
        }
        goto LABEL_52;
      }
      UInt = paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)a1 + 40), *(_QWORD *)&aSENTPARTAG2PARAM_0[v36 + 2], &v151);
      if ((UInt & 0x1FFF) != 0x14)
      {
        v13 = UInt;
        if ((UInt & 0x80000000) != 0)
          goto LABEL_54;
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"GET PARAM marker:%d param=%s val=%d", v41, v42, v43, v39);
        v49 = *(_WORD *)(v149 + 16);
        if (v49)
        {
          LODWORD(v133) = *(_DWORD *)(v134 + 32);
          HIDWORD(v133) = *(_DWORD *)(v134 + 24);
        }
        else
        {
          v133 = 0;
        }
        HIDWORD(v132) = 1;
        v131 = v151;
LABEL_44:
        v13 = datac_RequestBlock(*(_QWORD *)(a1 + 8), 1011, (unsigned __int16)(v49 + 1), &v149);
        if ((v13 & 0x80000000) != 0)
          goto LABEL_54;
        v52 = (v37 + 1);
        v53 = *(_QWORD *)(v149 + 8);
        v54 = *(unsigned __int16 *)(v149 + 16);
        v55 = v54 >= (unsigned __int16)v52;
        v56 = v54 - (unsigned __int16)v52;
        v134 = v53;
        v135 = v52;
        if (v56 != 0 && v55)
        {
          memmove((void *)(v53 + ((unint64_t)((unsigned __int16)v52 + 1) << 6)), (const void *)(v53 + ((unint64_t)(unsigned __int16)v52 << 6)), (uint64_t)v56 << 6);
          v53 = v134;
        }
        v57 = v53 + ((unint64_t)(unsigned __int16)v52 << 6);
        *(_DWORD *)v57 = HIDWORD(v132);
        *(_OWORD *)(v57 + 4) = v152;
        *(_DWORD *)(v57 + 20) = v39;
        *(_DWORD *)(v57 + 24) = HIDWORD(v133);
        *(_DWORD *)(v57 + 28) = 0;
        *(_DWORD *)(v57 + 32) = v133;
        *(_DWORD *)(v57 + 36) = 0;
        *(_DWORD *)(v57 + 40) = v131;
        *(_DWORD *)(v57 + 44) = 0;
        *(_QWORD *)(v57 + 48) = 0;
        *(_QWORD *)(v57 + 56) = 0;
        ++*(_WORD *)(v149 + 16);
        if (v38)
        {
          v58 = strlen(v38);
          v13 = datac_RequestBlock(*(_QWORD *)(a1 + 8), 1012, (unsigned __int16)(v58 + *(_WORD *)(v148 + 16) + 1), &v148);
          if ((v13 & 0x80000000) != 0)
          {
            a4 = v128;
            a2 = v129;
LABEL_55:
            heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v38);
            break;
          }
          v59 = *(_QWORD *)(v148 + 8);
          *(_DWORD *)(v134 + ((unint64_t)(unsigned __int16)v52 << 6) + 40) = (unsigned __int16)v130;
          v60 = strlen(v38);
          memcpy((void *)(v59 + (unsigned __int16)v130), v38, v60);
          *(_BYTE *)(v59 + (unsigned __int16)strlen(v38) + (unint64_t)(unsigned __int16)v130) = 0;
          v61 = v130 + strlen(v38);
          v130 = v61 + 1;
          *(_WORD *)(v148 + 16) = v61 + 1;
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v38);
          v38 = 0;
        }
        LODWORD(v132) = v39;
LABEL_52:
        v37 = v135;
        goto LABEL_53;
      }
      v13 = 0;
LABEL_53:
      v36 += 4;
      if (v36 == 16)
      {
LABEL_54:
        a4 = v128;
        a2 = v129;
        if (!v38)
          break;
        goto LABEL_55;
      }
    }
  }
  if (v150)
    paramc_ParamRelease(*(_QWORD *)(*(_QWORD *)a1 + 40));
  if ((v13 & 0x80000000) != 0)
    return v13;
  *(_QWORD *)&v152 = 0;
  InputStreams = datac_RequestBlock(*(_QWORD *)(a1 + 8), 1039, 1u, &v152);
  if ((InputStreams & 0x80000000) != 0)
    return InputStreams;
  v65 = *(unsigned __int16 *)(v152 + 16);
  if (*(_WORD *)(v152 + 16))
  {
    v66 = *(_QWORD *)(v152 + 8);
    LODWORD(v67) = *(_DWORD *)(v66 + ((unint64_t)(v65 - 1) << 6) + 32);
    if (*(_DWORD *)(a1 + 184) > v67)
      LODWORD(v67) = *(_DWORD *)(a1 + 184);
    v68 = (_DWORD *)(v66 + 36);
    do
    {
      v69 = *(v68 - 1);
      if (*v68 + v69 <= v67)
        v67 = v67;
      else
        v67 = v69;
      v68 += 16;
      --v65;
    }
    while (v65);
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"sentpar_loc_GetStartScanPos -> %d", v62, v63, v64, v67);
  }
  else
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"sentpar_loc_GetStartScanPos -> %d", v62, v63, v64, *(unsigned int *)(a1 + 184));
  }
  marker_TraceTxt(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), 1010, (uint64_t)"BEFORE sparser_ScanTextElement");
  marker_TraceMrk(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), 1011, (uint64_t)"BEFORE sparser_ScanTextElement", 0, 0, 0);
  if (*(_DWORD *)(a1 + 64) != 1 || *(_DWORD *)(a1 + 88) != 1 || *(_DWORD *)(a1 + 84) != 1)
  {
    InputStreams = sparser_PreScanTextElement(*(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 8), &v136);
    if ((InputStreams & 0x80000000) != 0)
      return InputStreams;
    if (v136 == 1 && !*(_DWORD *)(a1 + 240))
    {
      *(_DWORD *)(a1 + 64) = 0;
      *(_DWORD *)(a1 + 84) = 1;
      v76 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      v77 = "issue more text request - TTSEG_PROCESSING_COMP_RESULTS_NONE_NEED_MORE_INPUT";
      goto LABEL_126;
    }
  }
  InputStreams = sparser_ScanTextElement(*(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 232), *(_WORD *)(a1 + 196), v78, v33, v34, v35);
  if ((InputStreams & 0x80000000) != 0)
    return InputStreams;
  *(_DWORD *)(a1 + 184) = sparser_GetScanPosition(*(_QWORD *)(a1 + 200));
  if (*(_DWORD *)(a1 + 240))
  {
    v82 = 1;
    v147 = 1;
  }
  else
  {
    InputStreams = sparser_HasTextElementLeft(*(_WORD ***)(a1 + 200), *(_QWORD *)(a1 + 8), (_BOOL4 *)&v147, (_WORD *)(a1 + 196));
    if ((InputStreams & 0x80000000) != 0)
      return InputStreams;
    v82 = v147;
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"AFTER sparser_HasTextElementLeft bTextRemaining=%d pSentPar->startScanPos=%d", v79, v80, v81, v82);
  if (!v147)
  {
    v13 = sentpar_loc_Check2IssueMoreInputRequest(a1, &v138, v83, v84, v85, v86, v87, v88);
    if (v138 == 1)
    {
      LODWORD(v152) = 0;
      if ((paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"disablefinalsentencesilence", (unsigned int *)&v152) & 0x80000000) == 0&& (_DWORD)v152 == 1)
      {
        paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"finalsentencefound", 1u);
      }
    }
    if ((v13 & 0x80000000) != 0)
      return v13;
  }
  marker_TraceTxt(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), 1010, (uint64_t)"BEFORE sparser_GetTextElement");
  v89 = a2;
  marker_TraceMrk(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), 1011, (uint64_t)"BEFORE sparser_GetTextElement", 0, 0, 0);
  InputStreams = sparser_GetTextElement(*(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 8), (_DWORD *)&v146 + 1, &v146, &v145, a2, (__int16 *)(a1 + 196), (_DWORD *)&v144 + 1, &v144, (uint64_t)&v140, (_WORD *)&v139 + 1, &v139);
  if ((InputStreams & 0x80000000) != 0)
    return InputStreams;
  if (*(_DWORD *)(a1 + 236) == 1)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"AFTER sparser_GetTextElement", v90, v91, v92, v124);
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"currentReadMode = %d, *bImmediateVoiceSwitch=%d, bEndOnVoiceSwitch=%d", v93, v94, v95, *(__int16 *)(a1 + 196));
    v96 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v97 = HIDWORD(v144);
    marker_getString(SDWORD1(v141));
    log_OutText(v96, (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"posRefOffset=%d, refReset=%d, pRefResetMrk.tag=%s, numBlanksTrimmed=%d u32AdjustedEscLen=%d", v98, v99, v100, v97);
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"inputMarkersConsumed=%d", v101, v102, v103, HIWORD(v139));
  }
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(*(_QWORD *)a1 + 32)))
    log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)a1 + 32), 33, 0, v104, v105, v106, v107, v108, v124);
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"In Blocks", v106, v107, v108, v124);
  marker_TraceTxt(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), 1010, (uint64_t)"AFTER sparser_GetTextElement");
  marker_TraceMrk(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), 1011, (uint64_t)"AFTER sparser_GetTextElement", 0, 0, 0);
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"Out Blocks", v109, v110, v111, v125);
  marker_TraceTxt(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), 1020, (uint64_t)"AFTER sparser_GetTextElement");
  marker_TraceMrk(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), 1021, (uint64_t)"AFTER sparser_GetTextElement (out marker)", 0, 0, 0);
  v112 = v145;
  if (*v89 != 1 && v145 != 1)
  {
    InputStreams = sentpar_loc_CheckForEmptyOutput(a1, (_DWORD *)&v137 + 1, &v137);
    if ((InputStreams & 0x80000000) == 0)
    {
      if (v138 == 1 && v137 == 0x100000001)
      {
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"bThereIsNoMoreInput && bEmptyText && bEmptyMarkers - flush and return", v113, v114, v115, v126);
        return sentpar_loc_FlushStreamsAndReturn(a1, a3, a4);
      }
      v112 = v145;
      goto LABEL_129;
    }
    return InputStreams;
  }
LABEL_129:
  v116 = *(_DWORD *)(a1 + 236);
  v152 = v140;
  v153 = v141;
  v154 = v142;
  v155 = v143;
  InputStreams = sentpar_loc_UpdateTextAndMrkReadPosition((uint64_t *)a1, v146, v116, v112, HIWORD(v139), (unsigned __int16)v139, HIDWORD(v144), v144, &v152);
  if ((InputStreams & 0x80000000) != 0)
    return InputStreams;
  v152 = v140;
  v153 = v141;
  v154 = v142;
  v155 = v143;
  v13 = sentpar_loc_SavePersistentData(a1, HIDWORD(v144), v144, (unsigned int *)&v152);
  if ((v13 & 0x80000000) == 0)
  {
    if (*v89 == 1)
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"bImmediateVoiceSwitch - immediate return", v117, v118, v119, v127);
    }
    else
    {
      if (v145 == 1)
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"bEndOnVoiceSwitch - continue processing", v117, v118, v119, v127);
      v121 = sentpar_loc_FilterSyncMarkers(*(_QWORD *)(a1 + 8));
      return v121 & (v121 >> 31);
    }
  }
  return v13;
}

uint64_t sentpar_loc_Check2IssueMoreInputRequest(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  const char *v19;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v8 = a2;
  v28 = 0;
  v29 = 0;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  *a2 = 0;
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"entering sentpar_loc_Check2IssueMoreInputRequest()", a6, a7, a8, v22);
  v10 = datac_RequestBlock(*(_QWORD *)(a1 + 8), 1010, 1u, &v29);
  if ((v10 & 0x80000000) != 0)
    return v10;
  v10 = datac_RequestBlock(*(_QWORD *)(a1 + 8), 1011, 1u, &v28);
  if ((v10 & 0x80000000) != 0)
    return v10;
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 16) + 136))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), (char *)&v27 + 4);
  if ((v10 & 0x80000000) != 0)
    return v10;
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, char *, char *))(*(_QWORD *)(a1 + 16) + 144))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), (char *)&v26 + 4, (char *)&v25 + 4);
  if ((v10 & 0x80000000) != 0)
    return v10;
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *))(*(_QWORD *)(a1 + 16) + 136))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), &v27);
  if ((v10 & 0x80000000) != 0)
    return v10;
  v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, uint64_t *))(*(_QWORD *)(a1 + 16) + 144))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), &v26, &v25);
  if ((v14 & 0x80000000) == 0)
  {
    if (HIDWORD(v25) == 1 && !HIDWORD(v26) && (_DWORD)v25 == 1 && !(_DWORD)v26)
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"no text and markers : return TTSEG_PROCESSING_COMP_RESULTS_FULL", v11, v12, v13, v23);
      v14 = 2369789975;
    }
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"have bytes in input stream, issue more text request?", v11, v12, v13, v23);
    if (HIDWORD(v26))
    {
      v18 = (_DWORD *)(a1 + 84);
      if (*(_DWORD *)(a1 + 84) == 1)
      {
        v19 = "already issued more text request - there is no more input";
LABEL_20:
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)v19, v15, v16, v17, v24);
        v21 = "leaving sentpar_loc_Check2IssueMoreInputRequest() - continue processing";
LABEL_25:
        *v8 = 1;
        goto LABEL_26;
      }
      v14 = 2369792000;
      *(_DWORD *)(a1 + 64) = 0;
      v21 = "[1]issue more text request - TTSEG_PROCESSING_COMP_RESULTS_NONE_NEED_MORE_INPUT";
    }
    else
    {
      if (!(_DWORD)v26)
      {
        v21 = "leaving sentpar_loc_Check2IssueMoreInputRequest() - continue processing";
LABEL_26:
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)v21, v15, v16, v17, v24);
        return v14;
      }
      v18 = (_DWORD *)(a1 + 84);
      if (*(_DWORD *)(a1 + 84) == 1)
      {
        v19 = "already issued more text request - still have some markers - return there is no more input";
        goto LABEL_20;
      }
      v14 = 2369792000;
      *(_DWORD *)(a1 + 64) = 0;
      v21 = "[2]issue more text request - TTSEG_PROCESSING_COMP_RESULTS_NONE_NEED_MORE_INPUT";
    }
    v8 = v18;
    goto LABEL_25;
  }
  return v14;
}

uint64_t sentpar_loc_CheckForEmptyOutput(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;

  v7 = 0;
  *a2 = 0;
  *a3 = 0;
  result = datac_RequestBlock(*(_QWORD *)(a1 + 8), 1020, 1u, &v7);
  if ((result & 0x80000000) == 0)
  {
    if (!*(_WORD *)(v7 + 16))
      *a2 = 1;
    result = datac_RequestBlock(*(_QWORD *)(a1 + 8), 1021, 1u, &v7);
    if ((result & 0x80000000) == 0 && !*(_WORD *)(v7 + 16))
      *a3 = 1;
  }
  return result;
}

uint64_t sentpar_loc_FlushStreamsAndReturn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  _OWORD *v24;
  unsigned __int16 *v25;
  unint64_t v26;
  unsigned __int16 v27;
  _DWORD *v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;

  v6 = *(_DWORD *)(a1 + 68);
  v7 = *(_DWORD *)(a1 + 76);
  if (v6 != v7)
  {
    v8 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 16) + 96))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), (v6 - v7));
    if ((v8 & 0x80000000) != 0)
      return v8;
    *(_DWORD *)(a1 + 68) = 0;
    *(_DWORD *)(a1 + 76) = 0;
  }
  v9 = 2369789975;
  if (*(_DWORD *)(a1 + 104) == *(_DWORD *)(a1 + 108))
    return v9;
  v40 = 0;
  v8 = datac_RequestBlock(*(_QWORD *)(a1 + 8), 1021, 1u, &v40);
  if ((v8 & 0x80000000) != 0)
    return v8;
  v10 = *(unsigned __int16 *)(v40 + 16);
  if (!*(_WORD *)(v40 + 16))
  {
    v13 = 0;
    goto LABEL_44;
  }
  v11 = *(_QWORD *)(v40 + 8);
  v39 = 0;
  v12 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, (v10 << 6) | 1);
  if (!v12)
    return 2369789962;
  v13 = (_DWORD *)v12;
  v14 = datac_RequestBlock(*(_QWORD *)(a1 + 8), 1012, 1u, &v39);
  if ((v14 & 0x80000000) != 0)
    goto LABEL_38;
  v15 = v40;
  if (!*(_WORD *)(v40 + 16))
    goto LABEL_42;
  v16 = 0;
  v17 = *(_QWORD *)(v39 + 8);
  v18 = (_QWORD *)(v11 + 40);
  do
  {
    if (marker_hasNonConstCharPtrArg(*((_DWORD *)v18 - 5)))
    {
      v19 = *(unsigned int *)v18;
      if ((_DWORD)v19 == -1)
        v20 = 0;
      else
        v20 = v17 + v19;
      *v18 = v20;
    }
    v18 += 8;
    ++v16;
    v15 = v40;
  }
  while (v16 < *(unsigned __int16 *)(v40 + 16));
  if (!*(_WORD *)(v40 + 16))
  {
LABEL_42:
    v25 = (unsigned __int16 *)(v15 + 16);
LABEL_43:
    *v25 = 0;
    goto LABEL_44;
  }
  v21 = 0;
  v22 = 0;
  do
  {
    v23 = &v13[v21 / 4];
    *(_OWORD *)(v23 + 5) = *(_OWORD *)(v11 + v21 + 20);
    v23[9] = *(_DWORD *)(v11 + v21 + 36);
    *((_QWORD *)v23 + 5) = *(_QWORD *)(v11 + v21 + 40);
    ++v22;
    v24 = (_OWORD *)*(unsigned __int16 *)(v40 + 16);
    v21 += 64;
  }
  while (v22 < (unint64_t)v24);
  v25 = (unsigned __int16 *)(v40 + 16);
  if (!*(_WORD *)(v40 + 16))
    goto LABEL_43;
  v26 = 0;
  v27 = 0;
  v28 = v13;
  do
  {
    if (v26)
    {
      v29 = v28[5];
      if (v29 == 0x4000)
        goto LABEL_28;
    }
    else
    {
      v29 = v13[5];
    }
    if (v29 != 3)
    {
      v24 = &v13[16 * (unint64_t)v27];
      v30 = *(_OWORD *)v28;
      v31 = *((_OWORD *)v28 + 1);
      v32 = *((_OWORD *)v28 + 3);
      v24[2] = *((_OWORD *)v28 + 2);
      v24[3] = v32;
      *v24 = v30;
      v24[1] = v31;
      ++v27;
      LOWORD(v24) = *v25;
    }
LABEL_28:
    ++v26;
    v28 += 16;
  }
  while (v26 < (unsigned __int16)v24);
  *v25 = v27;
  if (v27 >= 2u)
  {
    v33 = 0;
    v34 = 0;
    v35 = v13[9];
    do
    {
      v36 = v13[v33 / 4 + 21];
      if (v36 != 999 && v36 != 0x4000 && v13[v33 / 4 + 16] != 1)
        v34 = 1;
      v13[v33 / 4 + 24] = v35 + v13[8];
      v33 += 64;
    }
    while (((unint64_t)v27 << 6) - 64 != v33);
    if (v34 == 1)
    {
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, _QWORD))(*(_QWORD *)(a1 + 16) + 104))(a2, a3, v13, v27 << 6);
      if ((v14 & 0x80000000) != 0)
      {
LABEL_38:
        v9 = v14;
        goto LABEL_46;
      }
    }
  }
LABEL_44:
  v37 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 16) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), (*(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 108)));
  if ((v37 & 0x80000000) != 0)
  {
    v9 = v37;
    if (v13)
LABEL_46:
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v13);
  }
  else
  {
    *(_QWORD *)(a1 + 104) = 0;
    if (v13)
      goto LABEL_46;
  }
  return v9;
}

uint64_t sentpar_loc_UpdateTextAndMrkReadPosition(uint64_t *a1, int a2, int a3, int a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, _OWORD *a9)
{
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  size_t v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  size_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  char *__src;
  unsigned int v75;
  int v76;
  _OWORD v77[4];
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v9 = a8;
  v10 = a7;
  v11 = a6;
  v80 = 0;
  v81 = 0;
  v78 = 0;
  v79 = 0;
  log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"entering sentpar_loc_UpdateTextAndMrkReadPosition", a6, a7, a8, v65);
  v17 = datac_RequestBlock(a1[1], 1020, 1u, &v80);
  if ((v17 & 0x80000000) != 0)
    return v17;
  v18 = *(unsigned __int16 *)(v80 + 16);
  v17 = datac_RequestBlock(a1[1], 1020, 1u, &v81);
  if ((v17 & 0x80000000) != 0)
    return v17;
  __src = *(char **)(v81 + 8);
  v75 = *(unsigned __int16 *)(v81 + 16);
  v17 = datac_RequestBlock(a1[1], 1011, 1u, &v79);
  if ((v17 & 0x80000000) != 0)
    return v17;
  v22 = datac_RequestBlock(a1[1], 1039, 1u, &v78);
  if ((v22 & 0x80000000) == 0)
  {
    v67 = a4;
    v70 = v10;
    v71 = v9;
    v72 = a3;
    v73 = a5;
    v68 = v18;
    v69 = v11;
    if (*(_WORD *)(v79 + 16))
    {
      v23 = 0;
      v76 = 0;
      v24 = *(_QWORD *)(v79 + 8);
      v25 = v78;
      v26 = *(_QWORD *)(v78 + 8);
      do
      {
        v27 = (__int128 *)(v24 + (v23 << 6));
        if (*(_DWORD *)v27 == 1 && *((_DWORD *)v27 + 5) == 2)
        {
          v28 = 0;
          v29 = *(unsigned __int16 *)(v25 + 16);
          while (1)
          {
            v30 = v28 + 64;
            if ((v29 << 6) + 64 == v28 + 64)
              break;
            v31 = memcmp((const void *)(v24 + (v23 << 6)), (const void *)(v26 + v28), 0x40uLL);
            v28 = v30;
            if (!v31)
              goto LABEL_25;
          }
          v22 = datac_RequestBlock(a1[1], 1039, (unsigned __int16)(v29 + 1), &v78);
          if ((v22 & 0x80000000) != 0)
            return v22;
          v26 = *(_QWORD *)(v78 + 8);
          v32 = *(unsigned __int16 *)(v78 + 16);
          if (*(_WORD *)(v78 + 16))
          {
            v33 = 0;
            v34 = (_DWORD *)(v26 + 64);
            v35 = v32 << 6;
            while (*(v34 - 8) < *(_DWORD *)(v24 + (v23 << 6) + 32))
            {
              ++v33;
              v34 += 16;
              v35 -= 64;
              if (!v35)
                goto LABEL_22;
            }
            v76 = (unsigned __int16)v33;
            if ((_DWORD)v32 == (unsigned __int16)v33)
            {
              LODWORD(v32) = (unsigned __int16)v33;
LABEL_22:
              v76 = v32;
              goto LABEL_23;
            }
            memcpy(v34, v34 - 16, v35);
          }
          else
          {
            LODWORD(v32) = v76;
LABEL_23:
            v33 = v32;
          }
          v36 = (_OWORD *)(v26 + (v33 << 6));
          v37 = *v27;
          v38 = v27[1];
          v39 = v27[3];
          v36[2] = v27[2];
          v36[3] = v39;
          *v36 = v37;
          v36[1] = v38;
          v25 = v78;
          ++*(_WORD *)(v78 + 16);
        }
LABEL_25:
        ++v23;
      }
      while (v23 < *(unsigned __int16 *)(v79 + 16));
    }
    if (v72 == 1 && v75)
    {
      if (v75 >= 0x400)
        v41 = 1024;
      else
        v41 = v75;
      v42 = (char *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, (v41 + 1));
      if (!v42)
        return 2369789962;
      v43 = (uint64_t)v42;
      strncpy(v42, __src, v41)[v41] = 0;
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"(Txt) (text processed) (tag=%d) len=%d (UTF8 *) \"%s\"", v44, v45, v46, 1011);
      heap_Free(*(_QWORD **)(*a1 + 8), v43);
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"(Mrk) (%d markers processed)", v47, v48, v49, v73);
    }
    v50 = *(unsigned __int16 *)(v81 + 2);
    v51 = (v69 + v50 * v68);
    if ((_DWORD)v51)
    {
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"consume TXT Stream cTextBytesRead=%d", v19, v20, v21, (v69 + v50 * v68));
      v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1[2] + 96))(a1[3], a1[4], v51);
      if ((v22 & 0x80000000) != 0)
        return v22;
      v52 = v69 + (v68 + a2) * v50 + *((_DWORD *)a1 + 20);
      *((_DWORD *)a1 + 19) += v51;
      *((_DWORD *)a1 + 20) = v52;
    }
    if (!v73)
      goto LABEL_46;
    v53 = v73 << 6;
    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"MRK Stream cMarkerBytesProcessed=%d", v19, v20, v21, v53);
    if (*((_DWORD *)a1 + 27) >= 0x40u)
    {
      v57 = 0;
      v58 = 0;
      do
      {
        log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"CONSUMED pInMrk[%d].tag %d %d,%d %d,%d", v54, v55, v56, v57);
        v57 = (unsigned __int16)++v58;
      }
      while ((unsigned __int16)v58 < *((_DWORD *)a1 + 27) >> 6);
    }
    v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1[2] + 96))(a1[5], a1[6], v53);
    if ((v22 & 0x80000000) == 0)
    {
      *(uint64_t *)((char *)a1 + 108) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)a1 + 108), vdup_n_s32(v53));
LABEL_46:
      if (v67 == 1 || *((_DWORD *)a1 + 20) > *((_DWORD *)a1 + 48))
      {
        v59 = a9[1];
        v77[0] = *a9;
        v77[1] = v59;
        v60 = a9[3];
        v77[2] = a9[2];
        v77[3] = v60;
        v22 = sentpar_loc_SavePersistentData((uint64_t)a1, v70, v71, (unsigned int *)v77);
        if ((v22 & 0x80000000) == 0)
        {
          if (v67 == 1)
          {
            v64 = "!! bEndOnVoiceSwitch - RESET";
          }
          else
          {
            v64 = "!! cSTREAMTextBytesProcessed %d > pSentPar->cReadDirectSize %d - RESET";
            v66 = *((unsigned int *)a1 + 20);
          }
          log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)v64, v61, v62, v63, v66);
          *((_DWORD *)a1 + 46) = 0;
          a1[7] = 0;
          a1[8] = 0;
          *(uint64_t *)((char *)a1 + 84) = 0;
          *(uint64_t *)((char *)a1 + 76) = 0;
          a1[12] = 0;
          a1[13] = 0;
          *((_DWORD *)a1 + 28) = 0;
        }
      }
    }
  }
  return v22;
}

uint64_t sentpar_loc_SavePersistentData(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v21;

  v21 = 0;
  v8 = sentpar_loc_SetReadoutMarkersAsParameters((int *)a1);
  if ((v8 & 0x80000000) != 0)
    return v8;
  v8 = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"pp_sentpar_posrefoffset", a2);
  if ((v8 & 0x80000000) != 0)
    return v8;
  v8 = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"pp_sentpar_refreset", a3);
  if ((v8 & 0x80000000) != 0)
    return v8;
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if (a3)
  {
    v8 = paramc_ParamSetUInt(v9, (uint64_t)"pp_sentpar_refreset_mrk_tag", a4[5]);
    if ((v8 & 0x80000000) != 0)
      return v8;
    v8 = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"pp_sentpar_refreset_mrk_posref", a4[6]);
    if ((v8 & 0x80000000) != 0)
      return v8;
    v10 = *(_QWORD *)(*(_QWORD *)a1 + 40);
    v11 = a4[7];
  }
  else
  {
    v8 = paramc_ParamSetUInt(v9, (uint64_t)"pp_sentpar_refreset_mrk_tag", 0);
    if ((v8 & 0x80000000) != 0)
      return v8;
    v8 = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"pp_sentpar_refreset_mrk_posref", 0);
    if ((v8 & 0x80000000) != 0)
      return v8;
    v10 = *(_QWORD *)(*(_QWORD *)a1 + 40);
    v11 = 0;
  }
  v8 = paramc_ParamSetUInt(v10, (uint64_t)"pp_sentpar_refreset_mrk_lenref", v11);
  if ((v8 & 0x80000000) != 0)
    return v8;
  v15 = datac_RequestBlock(*(_QWORD *)(a1 + 8), 1011, 1u, &v21);
  if ((v15 & 0x80000000) == 0 && *(_WORD *)(v21 + 16))
  {
    v16 = *(__int128 **)(v21 + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    *(_OWORD *)(a1 + 168) = v16[3];
    *(_OWORD *)(a1 + 152) = v19;
    *(_OWORD *)(a1 + 136) = v18;
    *(_OWORD *)(a1 + 120) = v17;
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"STORE lastOutSyncMrk %d,%d %d,%d", v12, v13, v14, *(unsigned int *)(a1 + 144));
  }
  return v15;
}

uint64_t sentpar_loc_FilterSyncMarkers(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  v2 = 0;
  result = datac_RequestBlock(a1, 1021, 1u, &v2);
  if ((result & 0x80000000) == 0)
    return marker_loc_FilterSyncMarkers(v2);
  return result;
}

uint64_t sentpar_WriteTextAndMarkers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t Object;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;

  v31 = 0;
  v32 = 0;
  v5 = 2369789952;
  if (!a1)
    return 2369789959;
  v33 = 0;
  Object = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)(a1 + 16) + 136))(a2, a3, &v33);
  if ((Object & 0x80000000) != 0)
    return Object;
  marker_TraceMrk(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), 1021, (uint64_t)"start sentpar_WriteTextAndMarkers()", 0, 0, 0);
  marker_TraceTxt(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), 1020, (uint64_t)"start sentpar_WriteTextAndMarkers()");
  Object = datac_RequestBlock(*(_QWORD *)(a1 + 8), 1020, 1u, &v32);
  if ((Object & 0x80000000) != 0)
    return Object;
  v12 = *(unsigned __int16 *)(v32 + 16);
  if (!*(_WORD *)(v32 + 16))
    goto LABEL_11;
  Object = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 16) + 104))(a2, a3, *(_QWORD *)(v32 + 8), *(unsigned __int16 *)(v32 + 2) * v12);
  if ((Object & 0x80000000) != 0)
    return Object;
  if (!*(_DWORD *)(a1 + 240))
  {
    v30 = 0;
    Object = objc_GetObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"CHARCOUNT", &v30);
    if ((Object & 0x80000000) == 0)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v30[1] + 56))(v30[2], v30[3], *(_QWORD *)(v32 + 8), *(unsigned __int16 *)(v32 + 2) * *(unsigned __int16 *)(v32 + 16));
      objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"CHARCOUNT");
      goto LABEL_9;
    }
    return Object;
  }
LABEL_9:
  *(_WORD *)(v32 + 16) = 0;
LABEL_11:
  if ((datac_RequestBlock(*(_QWORD *)(a1 + 8), 1012, 1u, &v32) & 0x80000000) != 0)
    v13 = 0;
  else
    v13 = *(_QWORD *)(v32 + 8);
  Object = datac_RequestBlock(*(_QWORD *)(a1 + 8), 1021, 1u, &v31);
  if ((Object & 0x80000000) != 0)
    return Object;
  v14 = *(unsigned __int16 *)(v31 + 16);
  if (!*(_WORD *)(v31 + 16))
    return v5;
  v15 = *(_QWORD *)(v31 + 8);
  if (*(_DWORD *)(v15 + 20) != 0x4000)
    return v5;
  if (v12)
  {
    v16 = 0;
    v33 = *(_DWORD *)(v15 + 32) - v33;
LABEL_22:
    v18 = v14;
    v19 = (_DWORD *)(v15 + 32);
    do
    {
      *v19 -= v33;
      v19 += 16;
      --v18;
    }
    while (v18);
    v20 = 0;
    v21 = (_QWORD *)(v15 + 40);
    do
    {
      if (marker_hasNonConstCharPtrArg(*((_DWORD *)v21 - 5)))
      {
        v22 = *(unsigned int *)v21;
        if (v13)
          v23 = v22 == 0xFFFFFFFFLL;
        else
          v23 = 1;
        v24 = v13 + v22;
        if (v23)
          v24 = 0;
        *v21 = v24;
      }
      v21 += 8;
      ++v20;
    }
    while (v20 < *(unsigned __int16 *)(v31 + 16));
    goto LABEL_34;
  }
  v16 = marker_CheckForEmptyMarkers(v13, *(_DWORD *)(a1 + 188), v15, v14, *(_QWORD *)(a1 + 96), (unsigned __int16)(*(_DWORD *)(a1 + 104) >> 6), (unsigned __int16)(*(_DWORD *)(a1 + 108) >> 6));
  v14 = *(unsigned __int16 *)(v31 + 16);
  v33 = *(_DWORD *)(v15 + 32) - v33;
  if (v14)
    goto LABEL_22;
LABEL_34:
  marker_TraceMrk(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), 1011, (uint64_t)"at end(internal only)", 0, 0, 0);
  marker_TraceMrk(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), 1021, (uint64_t)"at end()", 1, 0, 0);
  v25 = v31;
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"entering sentpar_loc_writeMarkersToOutputStream(bNoSignificantMarkers=%d bTextOut=%d)", v26, v27, v28, v16);
  v29 = *(unsigned __int16 *)(v25 + 16);
  if (!v12)
  {
    if (v29 == 1)
    {
      if ((_DWORD)v16 == 1 || *(_DWORD *)(v15 + 20) == 0x4000)
        return 0;
      LOWORD(v29) = 1;
    }
    else if ((_DWORD)v16 == 1)
    {
      return 0;
    }
  }
  marker_TraceMrk(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), 1021, (uint64_t)"markers output()", 1, v15, v29);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 16) + 104))(a4, a5, v15, *(unsigned __int16 *)(v25 + 16) << 6);
  if ((v5 & 0x80000000) == 0)
    return 0;
  return v5;
}

uint64_t sentpar_IsTextElementAtEos(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 0;
  if (!a1)
    return 1;
  v1 = 1;
  if ((datac_RequestBlock(*(_QWORD *)(a1 + 8), 1020, 1u, &v3) & 0x80000000) == 0)
    return *(unsigned int *)(v3 + 20);
  return v1;
}

uint64_t sentpar_ResetMarkerBlocks(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v11;

  v11 = 0;
  if (!a1)
    return 2369789959;
  v2 = datac_RequestBlock(a1[1], 1021, 1u, &v11);
  if ((v2 & 0x80000000) != 0)
    return v2;
  v3 = v11;
  if (*(unsigned __int16 *)(v11 + 16) >= 2u)
  {
    v4 = (uint64_t *)(*(_QWORD *)(v11 + 8) + 112);
    v5 = 1;
    do
    {
      if (*v4)
      {
        heap_Free(*(_QWORD **)(*a1 + 8), *v4);
        *v4 = 0;
        v3 = v11;
      }
      ++v5;
      v4 += 8;
    }
    while (v5 < *(unsigned __int16 *)(v3 + 16));
  }
  *(_WORD *)(v3 + 16) = 0;
  v6 = datac_RequestBlock(a1[1], 1011, 1u, &v11);
  if ((v6 & 0x80000000) == 0)
  {
    v7 = v11;
    if (*(unsigned __int16 *)(v11 + 16) >= 2u)
    {
      v8 = (uint64_t *)(*(_QWORD *)(v11 + 8) + 112);
      v9 = 1;
      do
      {
        if (*v8)
        {
          heap_Free(*(_QWORD **)(*a1 + 8), *v8);
          *v8 = 0;
          v7 = v11;
        }
        ++v9;
        v8 += 8;
      }
      while (v9 < *(unsigned __int16 *)(v7 + 16));
    }
    *(_WORD *)(v7 + 16) = 0;
  }
  return v6;
}

uint64_t sentpar_loc_ReadInputStreams(uint64_t a1)
{
  _DWORD *v2;
  int v3;
  _DWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = (_DWORD *)(a1 + 104);
  v3 = *(_DWORD *)(a1 + 104);
  v4 = (_DWORD *)(a1 + 68);
  v5 = *(_DWORD *)(a1 + 68);
  v6 = *(_DWORD *)(a1 + 76);
  v31 = 0;
  v32 = 0;
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, char *, char *))(*(_QWORD *)(a1 + 16) + 144))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), (char *)&v32 + 4, (char *)&v31 + 4);
  if ((v7 & 0x80000000) != 0)
    return v7;
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, uint64_t *))(*(_QWORD *)(a1 + 16) + 144))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), &v32, &v31);
  if ((v7 & 0x80000000) != 0)
    return v7;
  if (*(_DWORD *)(a1 + 236) == 1)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"sentpar_loc_ReadInputStreams()", v8, v9, v10, v30);
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"TXT State fTxtEos=%d cTxtBytesRemaining=%d", v11, v12, v13, HIDWORD(v31));
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"MRK State fMrkEos=%d cMrkBytesRemaining=%d", v14, v15, v16, v31);
  }
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _DWORD *))(*(_QWORD *)(a1 + 16) + 88))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), a1 + 56, v4);
  if ((v7 & 0x80000000) != 0)
    return v7;
  *(_DWORD *)(a1 + 76) = 0;
  v20 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _DWORD *))(*(_QWORD *)(a1 + 16) + 88))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a1 + 96, v2);
  if ((v20 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 108) = 0;
    if (*(_DWORD *)(a1 + 236) == 1)
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"After stream reads", v17, v18, v19, v30);
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"TXT cTextBytesInStream=%d  (%u characters)", v21, v22, v23, *(unsigned int *)(a1 + 68));
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"TXT cMarkerBytesInStream=%d (%u markers)", v24, v25, v26, *(unsigned int *)(a1 + 104));
    }
    if (*(_DWORD *)(a1 + 84) == 1)
    {
      if (v31 == 0x100000001)
      {
        v27 = *(_QWORD *)(*(_QWORD *)a1 + 32);
        v28 = "!![1](fTxtEos==1) && (fMrkEos==1) && (bBlockMoreInputRequest) - NO MORE TEXT SO BLOCK REQUESTS";
      }
      else
      {
        if (v5 == v6 || v5 - v6 != *v4 || v3 && v3 != *v2)
        {
          *(_DWORD *)(a1 + 84) = 0;
          return v20;
        }
        v27 = *(_QWORD *)(*(_QWORD *)a1 + 32);
        v28 = "!![2](bBlockMoreInputRequest) - NO MORE TEXT & MARKERS SO BLOCK REQUESTS";
      }
      log_OutText(v27, (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)v28, v17, v18, v19, v30);
      *(_DWORD *)(a1 + 88) = 1;
    }
  }
  return v20;
}

uint64_t sentpar_loc_SetUpTextBlock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[1024];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v32 = 0;
  v9 = *(_DWORD *)(a1 + 68) - *(_DWORD *)(a1 + 76);
  if (*(_DWORD *)(a1 + 236) == 1)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"sentpar_loc_SetUpTextBlock()", a6, a7, a8, (uint64_t)v30);
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"Input Stream State :", v10, v11, v12, v31);
    v13 = (unsigned __int16)v9;
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"cTextBytesAvailable=%d cTextBytesInStream=%d cTextBytesRead=%d", v14, v15, v16, (unsigned __int16)v9);
  }
  else
  {
    v13 = (unsigned __int16)(*(_WORD *)(a1 + 68) - *(_WORD *)(a1 + 76));
  }
  v17 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v18 = datac_RequestBlock(v17, 1010, (unsigned __int16)v9, &v32);
    if ((v18 & 0x80000000) == 0)
    {
      memcpy(*(void **)(v32 + 8), (const void *)(*(_QWORD *)(a1 + 56) + *(unsigned int *)(a1 + 76)), v13);
      *(_WORD *)(v32 + 16) = v9;
      if (*(_DWORD *)(a1 + 68) < 0x400u)
      {
        __strncpy_chk();
        v33[*(unsigned int *)(a1 + 68)] = 0;
        v22 = *(_QWORD *)(*(_QWORD *)a1 + 32);
        v23 = "Input TXT Stream -%s-";
        v30 = v33;
      }
      else
      {
        v22 = *(_QWORD *)(*(_QWORD *)a1 + 32);
        v23 = "Input TXT Stream > PP_MAX_LOG_MESSAGE, skip trace";
      }
      log_OutText(v22, (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)v23, v19, v20, v21, (uint64_t)v30);
      if (*(unsigned __int16 *)(v32 + 16) < 0x400uLL)
      {
        __strncpy_chk();
        v33[*(unsigned __int16 *)(v32 + 16)] = 0;
        v27 = *(_QWORD *)(*(_QWORD *)a1 + 32);
        v28 = "Input TXT        -%s-";
        v30 = v33;
      }
      else
      {
        v27 = *(_QWORD *)(*(_QWORD *)a1 + 32);
        v28 = "Input TXT > PP_MAX_LOG_MESSAGE, skip trace";
      }
      goto LABEL_14;
    }
  }
  else
  {
    v18 = datac_RequestBlock(v17, 1010, 1u, &v32);
    if ((v18 & 0x80000000) == 0)
    {
      *(_WORD *)(v32 + 16) = 0;
      v27 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      v28 = "Empty text block";
LABEL_14:
      log_OutText(v27, (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)v28, v24, v25, v26, (uint64_t)v30);
    }
  }
  return v18;
}

uint64_t sentpar_loc_SetUpMarkerBlocks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int16 v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  unsigned __int16 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  int hasNonConstCharPtrArg;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  __int16 v55;
  const char *v56;
  int v57;
  char *v58;
  int v59;
  uint64_t v60;
  _DWORD *v61;
  uint64_t v62;
  unsigned __int16 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  _OWORD *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  unsigned __int16 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int16 v92;
  _BOOL4 v93;
  uint64_t v94;
  int *v95;
  unsigned int v96;
  unsigned int v97;
  _DWORD *v98;
  int v99;
  int v100;
  _OWORD *v101;
  __int128 *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int16 v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE v115[32];
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v113 = 0;
  v114 = 0;
  v9 = *(unsigned int *)(a1 + 104);
  v10 = *(unsigned int *)(a1 + 108);
  v112 = 0;
  v11 = v9 - v10;
  v12 = (unsigned __int16)(v9 - v10) >> 6;
  if (*(_DWORD *)(a1 + 236) == 1)
  {
    v110 = v9 - v10;
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"sentpar_loc_SetUpMarkerBlocks()", a6, a7, a8, v107);
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"Input Stream State :", v13, v14, v15, v108);
    v16 = (unsigned __int16)(v9 >> 6);
    v111 = v12;
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"numMarkersAvailable=%d numMarkersInStream=%d numMarkersInStreamRead=%d", v17, v18, v19, v12);
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"Markers in Input Stream", v20, v21, v22, v109);
    if ((_DWORD)v16)
    {
      v26 = 0;
      v27 = 0;
      do
      {
        v28 = *(_QWORD *)(a1 + 96);
        if (*(_QWORD *)(v28 + v26 + 48))
        {
          v29 = strlen(*(const char **)(v28 + v26 + 48));
          if ((v29 & 0xFFE0) != 0)
            v30 = 31;
          else
            v30 = v29;
          __strncpy_chk();
          v115[v30] = 0;
        }
        else
        {
          v115[0] = 0;
        }
        v31 = &byte_1DEBD87CE;
        if ((unsigned __int16)(v10 >> 6) > v27)
          v31 = "(CONSUMED)";
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"%spInMrk[%d] %d %d,%d %d,%d INT=%d Ext=%d %s", v23, v24, v25, (uint64_t)v31);
        ++v27;
        v26 += 64;
      }
      while (v16 << 6 != v26);
    }
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"lastOutSyncMrk %d,%d %d,%d", v23, v24, v25, *(unsigned int *)(a1 + 144));
    LODWORD(v12) = v111;
    v11 = v110;
  }
  if (v11 <= 0x3Fu)
  {
    if (!*(_DWORD *)(a1 + 140))
    {
      v67 = 2369792000;
      if (!*(_DWORD *)(a1 + 240))
        log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 1931, 0, a5, a6, a7, a8, v107);
      return v67;
    }
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"no markers - use lastOutSyncMrk", a6, a7, a8, v107);
    v32 = datac_RequestBlock(*(_QWORD *)(a1 + 8), 1011, 0x40u, &v114);
    if ((v32 & 0x80000000) == 0)
    {
      v33 = v114;
      v34 = *(_QWORD *)(v114 + 8);
      v35 = *(_OWORD *)(a1 + 168);
      v37 = *(_OWORD *)(a1 + 120);
      v36 = *(_OWORD *)(a1 + 136);
      *(_OWORD *)(v34 + 32) = *(_OWORD *)(a1 + 152);
      *(_OWORD *)(v34 + 48) = v35;
      *(_OWORD *)v34 = v37;
      *(_OWORD *)(v34 + 16) = v36;
      *(_DWORD *)v34 = 1;
      *(_WORD *)(v33 + 16) = 1;
      goto LABEL_53;
    }
    return v32;
  }
  v32 = datac_RequestBlock(*(_QWORD *)(a1 + 8), 1011, v11 & 0xFFC0, &v114);
  if ((v32 & 0x80000000) != 0)
    return v32;
  v38 = 0;
  v39 = 0;
  v34 = *(_QWORD *)(v114 + 8);
  v40 = (unsigned __int16)(v10 >> 6);
  if (v12 <= 1)
    v41 = 1;
  else
    v41 = v12;
  v42 = v40 << 6;
  do
  {
    v43 = (_OWORD *)(v34 + v38);
    v44 = (_OWORD *)(*(_QWORD *)(a1 + 96) + v42 + v38);
    v45 = v44[2];
    v46 = v44[3];
    v47 = v44[1];
    *v43 = *v44;
    v43[1] = v47;
    v43[2] = v45;
    v43[3] = v46;
    *(_DWORD *)v43 = 0;
    hasNonConstCharPtrArg = marker_hasNonConstCharPtrArg(*(_DWORD *)(v34 + v38 + 20));
    v53 = *(_QWORD *)(a1 + 96) + v42 + v38;
    if (hasNonConstCharPtrArg)
    {
      v54 = *(const char **)(v53 + 40);
      if (v54)
      {
        v55 = strlen(v54);
        LODWORD(v54) = 0;
        v39 += v55 + 1;
      }
    }
    else
    {
      LODWORD(v54) = *(_DWORD *)(v53 + 40);
    }
    *(_DWORD *)(v34 + v38 + 40) = (_DWORD)v54;
    v56 = *(const char **)(*(_QWORD *)(a1 + 96) + v42 + v38 + 48);
    if (v56)
    {
      v57 = (unsigned __int16)strlen(v56);
      if (v57)
      {
        v58 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, (v57 + 1));
        *(_QWORD *)(v34 + v38 + 48) = v58;
        if (!v58)
          return 2369789962;
        strcpy(v58, *(const char **)(*(_QWORD *)(a1 + 96) + v42 + v38 + 48));
      }
    }
    v38 += 64;
  }
  while ((unint64_t)v41 << 6 != v38);
  *(_WORD *)(v114 + 16) = v12;
  if (v39)
  {
    v32 = datac_RequestBlock(*(_QWORD *)(a1 + 8), 1012, v39, &v113);
    if ((v32 & 0x80000000) != 0)
      return v32;
    v59 = 0;
    v60 = *(_QWORD *)(v113 + 8);
    v61 = (_DWORD *)(v34 + 40);
    v62 = (v40 << 6) | 0x28;
    do
    {
      if (marker_hasNonConstCharPtrArg(*(v61 - 5)) && *(_QWORD *)(*(_QWORD *)(a1 + 96) + v62))
      {
        *v61 = (unsigned __int16)v59;
        v63 = strlen(*(const char **)(*(_QWORD *)(a1 + 96) + v62));
        memcpy((void *)(v60 + (unsigned __int16)v59), *(const void **)(*(_QWORD *)(a1 + 96) + v62), v63);
        *(_BYTE *)(v60
                 + (unsigned __int16)strlen(*(const char **)(*(_QWORD *)(a1 + 96) + v62))
                 + (unint64_t)(unsigned __int16)v59) = 0;
        v59 += strlen(*(const char **)(*(_QWORD *)(a1 + 96) + v62)) + 1;
      }
      v61 += 16;
      v62 += 64;
      --v41;
    }
    while (v41);
    *(_WORD *)(v113 + 16) = v59;
  }
  if (*(_DWORD *)(v34 + 20) == 0x4000)
  {
    if (*(_DWORD *)(a1 + 140))
    {
      if (*(unsigned __int16 *)(v114 + 16) >= 2u && *(_DWORD *)(v34 + 96) < *(_DWORD *)(a1 + 152))
        log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 1932, "%s%d%s%d", v49, v50, v51, v52, "pMrk[1].posCur");
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"First Input Stream is a SYNC marker, but update using lastOutSyncMrk", v50, v51, v52, v107);
      v65 = *(_OWORD *)(a1 + 152);
      v64 = *(_OWORD *)(a1 + 168);
      v66 = *(_OWORD *)(a1 + 136);
      *(_OWORD *)v34 = *(_OWORD *)(a1 + 120);
      *(_OWORD *)(v34 + 16) = v66;
      *(_OWORD *)(v34 + 32) = v65;
      *(_OWORD *)(v34 + 48) = v64;
      *(_DWORD *)v34 = 0;
      *(_DWORD *)(v34 + 28) = 0;
      *(_DWORD *)(v34 + 36) = 0;
      *(_QWORD *)(v34 + 40) = 0;
    }
  }
  else
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"First Input Stream is not a SYNC marker, so clone it an make it a SYNC marker", v50, v51, v52, v107);
    memmove((void *)(v34 + 64), (const void *)v34, (unint64_t)*(unsigned __int16 *)(v114 + 16) << 6);
    v68 = (_OWORD *)(a1 + 120);
    if (!*(_DWORD *)(a1 + 140))
      v68 = (_OWORD *)(v34 + 64);
    v70 = v68[2];
    v69 = v68[3];
    v71 = v68[1];
    *(_OWORD *)v34 = *v68;
    *(_OWORD *)(v34 + 16) = v71;
    *(_OWORD *)(v34 + 32) = v70;
    *(_OWORD *)(v34 + 48) = v69;
    *(_DWORD *)(v34 + 20) = 0x4000;
    *(_DWORD *)v34 = 1;
    *(_DWORD *)(v34 + 28) = 0;
    *(_DWORD *)(v34 + 36) = 0;
    *(_QWORD *)(v34 + 40) = 0;
    ++*(_WORD *)(v114 + 16);
  }
LABEL_53:
  v67 = datac_RequestBlock(*(_QWORD *)(a1 + 8), 1039, 1u, &v112);
  if ((v67 & 0x80000000) == 0)
  {
    v75 = *(_QWORD *)(v112 + 8);
    v76 = *(unsigned __int16 *)(v112 + 16);
    if (*(_WORD *)(v112 + 16))
    {
      v77 = 0;
      v78 = 0;
      v79 = 0;
      v80 = 32;
      do
      {
        if (*(_DWORD *)(v75 + v80) < *(_DWORD *)(v34 + 32))
        {
          v79 = v77;
          v78 = 1;
        }
        ++v77;
        v80 += 64;
      }
      while (v76 != v77);
      if (v78 == 1)
      {
        v81 = v79 + 1;
        LODWORD(v76) = v76 - v81;
        if ((_DWORD)v76)
        {
          memmove(*(void **)(v112 + 8), (const void *)(v75 + (v81 << 6)), (uint64_t)(int)v76 << 6);
          LOWORD(v76) = *(_WORD *)(v112 + 16) - v81;
          *(_WORD *)(v112 + 16) = v76;
        }
        else
        {
          *(_WORD *)(v112 + 16) = 0;
        }
      }
    }
    if (*(_DWORD *)(a1 + 236) == 1)
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"Persistent Markers", v72, v73, v74, v107);
      if (!*(_WORD *)(v112 + 16))
        return v67;
      v85 = 0;
      v86 = v75 + 36;
      do
      {
        v86 += 64;
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"pPersistMrk[%d] %d %d,%d %d,%d", v82, v83, v84, v85++);
        v76 = *(unsigned __int16 *)(v112 + 16);
      }
      while (v85 < v76);
    }
    if ((_WORD)v76)
    {
      v67 = datac_RequestBlock(*(_QWORD *)(a1 + 8), 1011, (unsigned __int16)((*(_WORD *)(v114 + 16) + v76) & 0x3FF) << 6, &v114);
      if ((v67 & 0x80000000) == 0)
      {
        if (*(_WORD *)(v112 + 16))
        {
          v87 = 0;
          v88 = v114;
          v89 = *(_QWORD *)(v114 + 8);
          do
          {
            v90 = *(unsigned __int16 *)(v88 + 16);
            if (v90)
            {
              v91 = 0;
              v92 = 0;
              v93 = 0;
              v94 = v75 + (v87 << 6);
              v97 = *(_DWORD *)(v94 + 32);
              v95 = (int *)(v94 + 32);
              v96 = v97;
              v98 = (_DWORD *)(v89 + 40);
              while (v96 >= *(v98 - 2))
              {
                if (*(v98 - 5) == 7)
                {
                  v93 = !v93;
                  if (*v98 == 43)
                    v92 = v91;
                  else
                    v93 = 0;
                }
                v98 += 16;
                if (v90 == ++v91)
                {
                  LOWORD(v91) = v90;
                  break;
                }
              }
              if (v93)
              {
                v99 = *v95;
                v100 = *(_DWORD *)(v89 + ((unint64_t)v92 << 6) + 32);
                if ((_DWORD)v90 - 1 != v92)
                  v92 = v90;
                if (v99 != v100)
                  v92 = v91;
                if ((_DWORD)v90 == (unsigned __int16)v91)
                  LOWORD(v91) = v92;
              }
            }
            else
            {
              LOWORD(v91) = 0;
            }
            if ((_DWORD)v90 == (unsigned __int16)v91)
            {
              v101 = (_OWORD *)(v89 + (v90 << 6));
            }
            else
            {
              v101 = (_OWORD *)(v89 + ((unint64_t)(unsigned __int16)v91 << 6));
              memmove((void *)(v89 + ((unint64_t)((unsigned __int16)v91 + 1) << 6)), v101, (uint64_t)(int)(v90 - (unsigned __int16)v91) << 6);
            }
            v102 = (__int128 *)(v75 + (v87 << 6));
            v103 = *v102;
            v104 = v102[1];
            v105 = v102[3];
            v101[2] = v102[2];
            v101[3] = v105;
            *v101 = v103;
            v101[1] = v104;
            v88 = v114;
            ++*(_WORD *)(v114 + 16);
            ++v87;
          }
          while (v87 < *(unsigned __int16 *)(v112 + 16));
        }
      }
    }
  }
  return v67;
}

uint64_t pp_sent_parser_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2369789953;
  result = 0;
  *a2 = &IPPSentPar;
  return result;
}

uint64_t pp_sent_parser_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Object;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _QWORD *v21;

  v20 = 0;
  v21 = 0;
  v5 = 2369789959;
  v19 = 0;
  if (a5 && (InitRsrcFunction(a3, a4, &v21) & 0x80000000) == 0)
  {
    v12 = v21;
    v13 = v21[4];
    if (v13)
    {
      log_OutText(v13, (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"Entering pp_sent_parser_ObjOpen", v9, v10, v11, v18);
      v12 = v21;
    }
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    v14 = heap_Alloc(v12[1], 104);
    if (v14)
    {
      v15 = v14;
      *(_QWORD *)(v14 + 96) = 0;
      *(_OWORD *)(v14 + 64) = 0u;
      *(_OWORD *)(v14 + 80) = 0u;
      *(_OWORD *)(v14 + 32) = 0u;
      *(_OWORD *)(v14 + 48) = 0u;
      *(_OWORD *)v14 = 0u;
      *(_OWORD *)(v14 + 16) = 0u;
      *(_QWORD *)v14 = a3;
      *(_QWORD *)(v14 + 8) = a4;
      Object = objc_GetObject(v21[6], (uint64_t)"SYNTHSTREAM", &v20);
      if ((Object & 0x80000000) != 0)
        goto LABEL_14;
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(v20 + 8);
      *(_DWORD *)(v15 + 96) = 0;
      if ((paramc_ParamGetStr(v21[5], (uint64_t)"clcpppipelinemode", &v19) & 0x80000000) == 0 && v19 && *v19)
        *(_DWORD *)(v15 + 96) = 1;
      Object = sentpar_ObjOpen(a3, a4, *(_QWORD *)(v15 + 16), (uint64_t *)(v15 + 88), *(_DWORD *)(v15 + 96));
      if ((Object & 0x80000000) != 0)
      {
LABEL_14:
        v5 = Object;
        pp_sent_parser_ObjClose((_WORD **)v15, 17557);
      }
      else
      {
        v5 = 0;
        *(_QWORD *)a5 = v15;
        *(_QWORD *)(a5 + 8) = 17557;
      }
    }
    else
    {
      return 2369789962;
    }
  }
  return v5;
}

uint64_t pp_sent_parser_ObjClose(_WORD **a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v3 = 2369789959;
  v12 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 17557, 104) & 0x80000000) != 0)
    return 2369789960;
  if (a1 && (InitRsrcFunction(*a1, (int)a1[1], &v12) & 0x80000000) == 0)
  {
    v7 = *(_QWORD *)(v12 + 32);
    if (v7)
      log_OutText(v7, (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"Entering pp_sent_parser_ObjClose", v4, v5, v6, v11);
    v8 = a1[11];
    if (v8)
      sentpar_ObjClose(*a1, (int)a1[1], v8);
    v9 = v12;
    if (a1[2])
    {
      objc_ReleaseObject(*(_QWORD *)(v12 + 48), (uint64_t)"SYNTHSTREAM");
      v9 = v12;
    }
    heap_Free(*(_QWORD **)(v9 + 8), (uint64_t)a1);
    return 0;
  }
  return v3;
}

uint64_t pp_sent_parser_ObjReopen(_WORD **a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;

  v3 = 2369789959;
  v11 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 17557, 104) & 0x80000000) != 0)
    return 2369789960;
  if (a1 && (InitRsrcFunction(*a1, (int)a1[1], &v11) & 0x80000000) == 0)
  {
    v7 = *(_QWORD *)(v11 + 32);
    if (v7)
      log_OutText(v7, (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"Entering pp_sent_parser_ObjReopen", v4, v5, v6, v10);
    v8 = (uint64_t *)a1[11];
    if (v8)
      sentpar_ObjReopen(*a1, (uint64_t)a1[1], v8);
    return 0;
  }
  return v3;
}

uint64_t pp_sent_parser_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;

  v33 = 0;
  v7 = 2369789959;
  if ((safeh_HandleCheck(a1, a2, 17557, 104) & 0x80000000) != 0)
    return 2369789960;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v33) & 0x80000000) == 0)
  {
    v11 = *(_QWORD *)(v33 + 32);
    if (v11)
      log_OutText(v11, (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"Entering pp_sent_parser_ProcessStart", v8, v9, v10, v32);
    v12 = 0;
    v13 = 1;
    do
    {
      v14 = v13;
      v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 16)
                                                                                                  + 64))(a3, a4, 212, szOUTPUT_STREAMS[v12], 0, 0, a1 + 16 * v12 + 24);
      if ((v15 & 0x80000000) != 0)
        goto LABEL_17;
      v13 = 0;
      v12 = 1;
    }
    while ((v14 & 1) != 0);
    v16 = 0;
    v17 = 0;
    while (1)
    {
      v18 = *(_QWORD *)(a1 + 16);
      v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t))(v18 + 64);
      if ((v16 & 1) != 0)
        break;
      v16 = 1;
      v15 = v19(a3, a4, 212, szOUTPUT_STREAMS[v17], 0, 1, a1 + 16 * v17 + 56);
      v17 = 1;
      if ((v15 & 0x80000000) != 0)
        goto LABEL_17;
    }
    v20 = (*(uint64_t (**)(void))(v18 + 168))();
    v15 = v19(a3, a4, 212, "application/x-realspeak-int-markers-pp;version=4.0", v20, 1, a1 + 72);
    if ((v15 & 0x80000000) != 0)
    {
LABEL_17:
      v7 = v15;
      goto LABEL_18;
    }
    v7 = sentpar_ProcessStart(v33, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    if ((v7 & 0x80000000) == 0)
      return v7;
LABEL_18:
    v21 = 0;
    v22 = 1;
    do
    {
      v23 = v22;
      v24 = a1 + 16 * v21;
      v25 = *(_QWORD *)(v24 + 24);
      if (v25)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 16) + 72))(v25, *(_QWORD *)(v24 + 32));
        *(_QWORD *)(v24 + 24) = 0;
        *(_DWORD *)(v24 + 32) = 0;
      }
      v22 = 0;
      v21 = 1;
    }
    while ((v23 & 1) != 0);
    v26 = 0;
    v27 = 1;
    do
    {
      v28 = v27;
      v29 = a1 + 16 * v26;
      v30 = *(_QWORD *)(v29 + 56);
      if (v30)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 16) + 72))(v30, *(_QWORD *)(v29 + 64));
        *(_QWORD *)(v29 + 56) = 0;
        *(_DWORD *)(v29 + 64) = 0;
      }
      v27 = 0;
      v26 = 1;
    }
    while ((v28 & 1) != 0);
  }
  return v7;
}

uint64_t pp_sent_parser_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v7 = 2369789959;
  v23 = 0;
  v22 = 0;
  if ((safeh_HandleCheck(a1, a2, 17557, 104) & 0x80000000) != 0)
    return 2369789960;
  if (a1)
  {
    if (!*(_QWORD *)(a1 + 24))
      return 2369789969;
    if ((InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v23) & 0x80000000) == 0)
    {
      v12 = *(_QWORD *)(v23 + 32);
      if (v12)
        log_OutText(v12, (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"Entering pp_sent_parser_Process", v9, v10, v11, v21);
      *a5 = 2;
      v13 = sentpar_Process(*(_QWORD *)(a1 + 88), &v22, *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v8, v9, v10, v11);
      if ((v13 & 0x80000000) == 0)
      {
        if (v22 == 1)
        {
          v7 = paramc_ParamSetStr(*(_QWORD *)(v23 + 40), (uint64_t)"ppmarkersetlang", "normal");
          *a5 = 3;
          v17 = *(_QWORD *)(v23 + 32);
          if (v17)
            log_OutText(v17, (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"Immediate Voice Switch!", v14, v15, v16, v21);
          goto LABEL_27;
        }
        v18 = sentpar_WriteTextAndMarkers(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
        if ((v18 & 0x80000000) != 0)
          goto LABEL_22;
        v7 = sentpar_ResetMarkerBlocks(*(uint64_t **)(a1 + 88));
        if ((v7 & 0x80000000) != 0
          || !*(_DWORD *)(a1 + 96) && !sentpar_IsTextElementAtEos(*(_QWORD *)(a1 + 88)))
        {
          goto LABEL_27;
        }
        *a5 = 1;
        if (*(_DWORD *)(a1 + 96))
          goto LABEL_27;
LABEL_21:
        v18 = pp_sent_parser_loc_CloseOutStreams(a1);
LABEL_22:
        v7 = v18;
        goto LABEL_27;
      }
      v7 = v13;
      if ((v13 & 0x1FFF) == 0x800)
      {
        if (!*(_DWORD *)(a1 + 96))
        {
          *a5 = 0;
          if (*(_DWORD *)(a1 + 96))
            v7 = v13;
          else
            v7 = 0;
LABEL_27:
          v19 = *(_QWORD *)(v23 + 32);
          if (v19)
            log_OutText(v19, (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"Leaving pp_sent_parser_Process peResults=%d fRet=%d", v14, v15, v16, *a5);
          return v7;
        }
        v7 = 0;
      }
      else
      {
        if ((v13 & 0x1FFF) == 0x17)
        {
          *a5 = 1;
          goto LABEL_21;
        }
        pp_sent_parser_loc_CloseOutStreams(a1);
      }
      *a5 = 1;
      goto LABEL_27;
    }
  }
  return v7;
}

uint64_t pp_sent_parser_ProcessStop(_WORD **a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  _WORD **v12;
  _WORD *v13;
  int v14;
  uint64_t v16;
  uint64_t v17;

  v3 = 2369789959;
  v17 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 17557, 104) & 0x80000000) != 0)
    return 2369789960;
  if (a1 && (InitRsrcFunction(*a1, (int)a1[1], &v17) & 0x80000000) == 0)
  {
    v7 = *(_QWORD *)(v17 + 32);
    if (v7)
      log_OutText(v7, (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"Entering pp_sent_parser_ProcessStop", v4, v5, v6, v16);
    v8 = sentpar_ProcessEnd((uint64_t)a1[11], *a1, (int)a1[1]);
    if ((v8 & 0x80000000) != 0)
      return v8;
    v8 = pp_sent_parser_loc_CloseOutStreams((uint64_t)a1);
    if ((v8 & 0x80000000) != 0)
    {
      return v8;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      do
      {
        while (1)
        {
          v11 = v10;
          v12 = &a1[2 * v9];
          v13 = v12[3];
          if (v13)
            break;
          v10 = 0;
          v9 = 1;
          if ((v11 & 1) == 0)
            return 0;
        }
        v14 = (*((uint64_t (**)(_WORD *, _WORD *))a1[2] + 9))(v13, v12[4]);
        v10 = 0;
        v12[3] = 0;
        *((_DWORD *)v12 + 8) = 0;
        v9 = 1;
      }
      while ((v11 & (v14 >= 0)) != 0);
      if (v14 < 0)
        return v14;
      else
        return 0;
    }
  }
  return v3;
}

uint64_t pp_sent_parser_loc_CloseOutStreams(uint64_t a1)
{
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = 0;
  v3 = 1;
  do
  {
    while (1)
    {
      v4 = v3;
      v5 = a1 + 16 * v2;
      v6 = *(_QWORD *)(v5 + 56);
      if (v6)
        break;
      v3 = 0;
      v2 = 1;
      if ((v4 & 1) == 0)
        return 0;
    }
    LODWORD(result) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 16) + 72))(v6, *(_QWORD *)(v5 + 64));
    v3 = 0;
    *(_QWORD *)(v5 + 56) = 0;
    *(_DWORD *)(v5 + 64) = 0;
    v2 = 1;
  }
  while ((((int)result >= 0) & v4) != 0);
  if ((int)result < 0)
    return result;
  else
    return 0;
}

uint64_t pp_word_parser_ResourceTypes(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v5;

  v5 = 2370838535;
  if ((safeh_HandleCheck(a1, a2, 87327, 104) & 0x80000000) != 0)
    return 2370838536;
  if (a1)
    return wordpar_ResourceTypes(*(_QWORD *)(a1 + 88), a3);
  return v5;
}

uint64_t pp_word_parser_ResourceUnload(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = 2370838535;
  if ((safeh_HandleCheck(a1, a2, 87327, 104) & 0x80000000) != 0)
    return 2370838536;
  if (a1)
    return wordpar_ResourceUnload(*(_QWORD *)(a1 + 88), a3, a4);
  return v7;
}

uint64_t pp_word_parser_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2370838529;
  result = 0;
  *a2 = &IPPWordParser;
  return result;
}

uint64_t pp_word_parser_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Object;
  uint64_t v17;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _QWORD *v22;

  v21 = 0;
  v22 = 0;
  v5 = 2370838535;
  v20 = 0;
  if (a5 && (InitRsrcFunction(a3, a4, &v22) & 0x80000000) == 0)
  {
    v12 = v22;
    v13 = v22[4];
    if (v13)
    {
      log_OutText(v13, (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Entering pp_word_parser_ObjOpen", v9, v10, v11, v19);
      v12 = v22;
    }
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    v14 = heap_Alloc(v12[1], 104);
    if (v14)
    {
      v15 = v14;
      *(_QWORD *)(v14 + 96) = 0;
      *(_OWORD *)(v14 + 64) = 0u;
      *(_OWORD *)(v14 + 80) = 0u;
      *(_OWORD *)(v14 + 32) = 0u;
      *(_OWORD *)(v14 + 48) = 0u;
      *(_OWORD *)v14 = 0u;
      *(_OWORD *)(v14 + 16) = 0u;
      *(_QWORD *)v14 = a3;
      *(_QWORD *)(v14 + 8) = a4;
      *(_DWORD *)(v14 + 96) = 0;
      if ((paramc_ParamGetStr(v22[5], (uint64_t)"clcpppipelinemode", &v20) & 0x80000000) == 0 && v20 && *v20)
        *(_DWORD *)(v15 + 96) = 1;
      Object = objc_GetObject(v22[6], (uint64_t)"SYNTHSTREAM", &v21);
      if ((Object & 0x80000000) != 0
        || (v17 = *(_QWORD *)(v21 + 8),
            *(_QWORD *)(v15 + 16) = v17,
            Object = wordpar_ObjOpen(a3, a4, v17, (uint64_t *)(v15 + 88), *(_DWORD *)(v15 + 96)),
            (Object & 0x80000000) != 0))
      {
        v5 = Object;
        pp_word_parser_ObjClose(v15, 87327);
      }
      else
      {
        v5 = 0;
        *(_QWORD *)a5 = v15;
        *(_QWORD *)(a5 + 8) = 87327;
      }
    }
    else
    {
      return 2370838538;
    }
  }
  return v5;
}

uint64_t pp_word_parser_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v3 = 2370838535;
  v12 = 0;
  if ((safeh_HandleCheck(a1, a2, 87327, 104) & 0x80000000) != 0)
    return 2370838536;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v12) & 0x80000000) == 0)
  {
    v7 = *(_QWORD *)(v12 + 32);
    if (v7)
      log_OutText(v7, (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Entering pp_word_parser_ObjClose", v4, v5, v6, v11);
    v8 = *(_QWORD *)(a1 + 88);
    if (v8)
      wordpar_ObjClose(v8);
    v9 = v12;
    if (*(_QWORD *)(a1 + 16))
    {
      objc_ReleaseObject(*(_QWORD *)(v12 + 48), (uint64_t)"SYNTHSTREAM");
      v9 = v12;
    }
    heap_Free(*(_QWORD **)(v9 + 8), a1);
    return 0;
  }
  return v3;
}

uint64_t pp_word_parser_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _WORD **v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v3 = 2370838535;
  v12 = 0;
  if ((safeh_HandleCheck(a1, a2, 87327, 104) & 0x80000000) != 0)
    return 2370838536;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v12) & 0x80000000) == 0)
  {
    v7 = *(_QWORD *)(v12 + 32);
    if (v7)
      log_OutText(v7, (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Entering pp_word_parser_ObjReopen", v4, v5, v6, v11);
    v8 = *(_WORD ***)(a1 + 88);
    if (v8 && (v9 = wordpar_ObjReopen(v8), (v9 & 0x80001FFF) == 0x8000000A))
    {
      v3 = v9;
      *(_QWORD *)(a1 + 88) = 0;
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t pp_word_parser_ResourceLoad(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v19;
  uint64_t v20;

  v20 = 0;
  v13 = 2370838535;
  if ((safeh_HandleCheck(a1, a2, 87327, 104) & 0x80000000) != 0)
    return 2370838536;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v20) & 0x80000000) == 0)
  {
    if (a3 && a7)
    {
      if (a4)
      {
        if (a5 || !(_DWORD)a6)
          return wordpar_ResourceLoad(*(_QWORD *)(a1 + 88), a3, a4, a5, a6, a7);
      }
      else if (a5 && (_DWORD)a6)
      {
        return wordpar_ResourceLoad(*(_QWORD *)(a1 + 88), a3, a4, a5, a6, a7);
      }
    }
    log_OutPublic(*(_QWORD *)(v20 + 32), (uint64_t)"PP_WORD_PARSER", 1923, 0, v14, v15, v16, v17, v19);
  }
  return v13;
}

uint64_t pp_word_parser_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t WParserType;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  int v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v32 = 0;
  v7 = 2370838535;
  if ((safeh_HandleCheck(a1, a2, 87327, 104) & 0x80000000) != 0)
    return 2370838536;
  if (a1)
  {
    HIDWORD(v31) = 0;
    if ((InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v32) & 0x80000000) == 0)
    {
      v11 = *(_QWORD *)(v32 + 32);
      if (v11)
        log_OutText(v11, (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Entering pp_word_parser_ProcessStart", v8, v9, v10, v31);
      WParserType = wordpar_GetWParserType(*(_QWORD *)(a1 + 88), (_DWORD *)&v31 + 1);
      if ((WParserType & 0x80000000) != 0)
      {
        return WParserType;
      }
      else
      {
        v13 = 0;
        v14 = 1;
        while (1)
        {
          v15 = v14;
          if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a3, a4, 213, szINPUT_STREAMS[v13], 0, 0, a1 + 16 * v13 + 24) & 0x80000000) != 0)break;
          v14 = 0;
          v13 = 1;
          if ((v15 & 1) == 0)
          {
            if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a3, a4, 213, "text/plain;charset=utf-8",
                    0,
                    1,
                    a1 + 56) & 0x80000000) == 0)
            {
              v16 = *(_QWORD *)(a1 + 16);
              v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t))(v16 + 64);
              v18 = (*(uint64_t (**)(void))(v16 + 152))();
              if ((v17(a3, a4, 213, "application/x-realspeak-markers-pp;version=4.0", v18, 1, a1 + 72) & 0x80000000) == 0)
              {
                v19 = wordpar_ProcessStart(*(_QWORD *)(a1 + 88));
                return v19 & (v19 >> 31);
              }
            }
            break;
          }
        }
        v20 = 0;
        v21 = 1;
        do
        {
          v22 = v21;
          v23 = a1 + 16 * v20;
          v24 = *(_QWORD *)(v23 + 24);
          if (v24)
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 16) + 72))(v24, *(_QWORD *)(v23 + 32));
            *(_QWORD *)(v23 + 24) = 0;
            *(_DWORD *)(v23 + 32) = 0;
          }
          v21 = 0;
          v20 = 1;
        }
        while ((v22 & 1) != 0);
        v25 = 0;
        v26 = 1;
        do
        {
          v27 = v26;
          v28 = a1 + 16 * v25;
          v29 = *(_QWORD *)(v28 + 56);
          if (v29)
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 16) + 72))(v29, *(_QWORD *)(v28 + 64));
            *(_QWORD *)(v28 + 56) = 0;
            *(_DWORD *)(v28 + 64) = 0;
          }
          v26 = 0;
          v25 = 1;
        }
        while ((v27 & 1) != 0);
        return 0;
      }
    }
  }
  return v7;
}

uint64_t pp_word_parser_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char **v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int Str;
  BOOL v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;

  v7 = 2370838535;
  v44 = 0;
  if ((safeh_HandleCheck(a1, a2, 87327, 104) & 0x80000000) != 0)
    return 2370838536;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v44) & 0x80000000) == 0)
  {
    v11 = v44;
    v12 = *(_QWORD *)(v44 + 32);
    if (v12)
    {
      log_OutText(v12, (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Entering pp_word_parser_Process", v8, v9, v10, v40);
      v11 = v44;
    }
    *a5 = 1;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v43 = 0;
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, void **, char *))(*(_QWORD *)(a1 + 16) + 88))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), &v48, (char *)&v47 + 4);
    if ((v13 & 0x80000000) != 0)
      return v13;
    v14 = HIDWORD(v47);
    v7 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, uint64_t *))(*(_QWORD *)(a1 + 16) + 144))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), &v47, &v46);
    if ((v7 & 0x80000000) != 0)
      return v7;
    if (v47)
    {
      if ((_DWORD)v47)
      {
        v13 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, char *))(*(_QWORD *)(a1 + 16) + 88))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), &v43, (char *)&v46 + 4);
        if ((v13 & 0x80000000) != 0)
          return v13;
        v23 = HIDWORD(v46);
        v7 = wordpar_LoadFromStreamData(*(_QWORD *)(a1 + 88), v48, HIDWORD(v47), v43, HIDWORD(v46));
        LODWORD(v18) = 0;
LABEL_19:
        if ((v7 & 0x80000000) != 0)
          return v7;
        v24 = v43;
        v25 = v44;
        v48 = 0;
        if ((v23 & 0x3FFFC0) != 0)
        {
          v41 = v23;
          v42 = v14;
          v26 = 0;
          v7 = 0;
          v27 = (unsigned __int16)(v23 >> 6);
          while (1)
          {
            while (1)
            {
              v28 = v24 + (v26 << 6);
              if (*(_DWORD *)(v28 + 20) == 200)
                break;
LABEL_34:
              if (++v26 == v27)
              {
                v23 = v41;
                v14 = v42;
                if ((v7 & 0x80000000) != 0)
                  return v7;
LABEL_50:
                if ((_DWORD)v18)
                {
                  LODWORD(v7) = 0;
                  v36 = 0;
                  goto LABEL_52;
                }
                v38 = wordpar_Process(*(_QWORD *)(a1 + 88));
                if ((v38 & 0x1FFF) == 0xA)
                  v7 = v7;
                else
                  v7 = v38;
                if ((v7 & 0x80000000) != 0)
                {
                  if ((v7 & 0x1FFF) == 0x800)
                  {
                    *a5 = 0;
                    if (*(_DWORD *)(a1 + 96))
                      return v7;
                    else
                      return 0;
                  }
                  if ((v7 & 0x1FFF) != 0x17)
                  {
                    pp_sent_parser_loc_CloseOutStreams(a1);
                    *a5 = 1;
                    return v7;
                  }
                  *a5 = 1;
                  v13 = pp_sent_parser_loc_CloseOutStreams(a1);
                  if ((v13 & 0x80000000) == 0)
                    return 0;
                }
                else
                {
                  v36 = v38;
                  if ((v38 & 0x1FFF) == 0xA
                    || (v13 = wordpar_WriteTextAndMarkers(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80)), (v13 & 0x80000000) == 0))
                  {
                    v13 = wordpar_ResetData(*(_QWORD *)(a1 + 88));
                    if ((v13 & 0x80000000) == 0)
                    {
                      v13 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 16) + 96))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v14);
                      if ((v13 & 0x80000000) == 0)
                      {
                        v7 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 16) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v23);
                        if ((v7 & 0x80000000) == 0)
                        {
LABEL_52:
                          v37 = *(_QWORD *)(v44 + 32);
                          if (v37)
                            log_OutText(v37, (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Leaving pp_word_parser_Process", v15, v16, v17, v40);
                          if ((v36 & 0x1FFF) == 0xA)
                            return v36;
                          else
                            return v7;
                        }
                        return v7;
                      }
                    }
                  }
                }
                return v13;
              }
            }
            v31 = *(char **)(v28 + 40);
            v30 = (char **)(v28 + 40);
            v29 = v31;
            if (v31 && *v29 && LH_stricmp(v29, "unset"))
            {
              if (LH_stricmp(*v30, "reset"))
              {
                v32 = *v30;
              }
              else
              {
                Str = paramc_ParamGetStr(*(_QWORD *)(v25 + 40), (uint64_t)"shortfragmentforceclm_value_pipeline", &v48);
                if (v48)
                  v35 = Str < 0;
                else
                  v35 = 1;
                if (v35)
                  v32 = &byte_1DEBD87CE;
                else
                  v32 = (char *)v48;
              }
            }
            else
            {
              v32 = &byte_1DEBD87CE;
            }
            v33 = paramc_ParamSetStr(*(_QWORD *)(v25 + 40), (uint64_t)"shortfragmentforceclm", v32);
            v7 = v33;
            if ((v33 & 0x80000000) == 0)
            {
              log_OutText(*(_QWORD *)(v25 + 32), (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Parameter markup \"\\!\\%s=%s\\\" => set \"%s=%s\"", v15, v16, v17, (uint64_t)"shortfragmentforceclm");
              goto LABEL_34;
            }
            if ((v33 & 0x1FFF) != 0xF)
              goto LABEL_34;
            log_OutText(*(_QWORD *)(v25 + 32), (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Parameter markup \"\\!\\%s=%s\\\" => set \"%s=%s\" : failed, invalid parameter value", v15, v16, v17, (uint64_t)"shortfragmentforceclm");
            v7 = 0;
            if (++v26 == v27)
            {
              LODWORD(v7) = 0;
              v23 = v41;
              v14 = v42;
              goto LABEL_50;
            }
          }
        }
LABEL_49:
        LODWORD(v7) = 0;
        goto LABEL_50;
      }
      LODWORD(v18) = 0;
    }
    else
    {
      if ((_DWORD)v46)
      {
        v18 = 0;
        v19 = 1;
        do
        {
          v20 = v19;
          v21 = a1 + 16 * v18;
          v22 = *(_QWORD *)(v21 + 56);
          if (v22)
          {
            v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 16) + 72))(v22, *(_QWORD *)(v21 + 64));
            *(_QWORD *)(v21 + 56) = 0;
            *(_DWORD *)(v21 + 64) = 0;
          }
          v19 = 0;
          v18 = 1;
        }
        while ((v20 & 1) != 0);
        v23 = 0;
        goto LABEL_19;
      }
      v45 = 0;
      if ((paramc_ParamGetStr(*(_QWORD *)(v11 + 40), (uint64_t)"clcpppipelinemode", &v45) & 0x80000000) != 0
        || !v45
        || !*v45)
      {
        *a5 = 0;
      }
      LODWORD(v18) = 1;
    }
    v23 = 0;
    goto LABEL_49;
  }
  return v7;
}

uint64_t pp_word_parser_ProcessStop(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  uint64_t v17;

  v3 = 2370838535;
  v17 = 0;
  if ((safeh_HandleCheck(a1, a2, 87327, 104) & 0x80000000) != 0)
    return 2370838536;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v17) & 0x80000000) == 0)
  {
    v7 = *(_QWORD *)(v17 + 32);
    if (v7)
      log_OutText(v7, (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Entering pp_word_parser_ProcessStop", v4, v5, v6, v16);
    v8 = wordpar_ProcessEnd(*(_QWORD *)(a1 + 88));
    if ((v8 & 0x80000000) != 0)
      return v8;
    v8 = pp_sent_parser_loc_CloseOutStreams(a1);
    if ((v8 & 0x80000000) != 0)
    {
      return v8;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      do
      {
        while (1)
        {
          v11 = v10;
          v12 = a1 + 16 * v9;
          v13 = *(_QWORD *)(v12 + 24);
          if (v13)
            break;
          v10 = 0;
          v9 = 1;
          if ((v11 & 1) == 0)
            return 0;
        }
        v14 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 16) + 72))(v13, *(_QWORD *)(v12 + 32));
        v10 = 0;
        *(_QWORD *)(v12 + 24) = 0;
        *(_DWORD *)(v12 + 32) = 0;
        v9 = 1;
      }
      while ((v11 & (v14 >= 0)) != 0);
      if (v14 < 0)
        return v14;
      else
        return 0;
    }
  }
  return v3;
}

uint64_t wordpar_freeBRKDefs(uint64_t a1)
{
  uint64_t inited;
  uint64_t v3;
  uint64_t v5;

  if (!*(_QWORD *)(a1 + 152))
    return 0;
  v5 = 0;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v5);
  if ((inited & 0x80000000) != 0)
    return 2370838535;
  v3 = inited;
  heap_Free(*(_QWORD **)(v5 + 8), *(_QWORD *)(a1 + 152));
  *(_QWORD *)(a1 + 152) = 0;
  return v3;
}

uint64_t wordpar_getBRKDefs(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int16 *a4)
{
  uint64_t v4;
  _BYTE *v10;
  unsigned int StringZ;
  uint64_t v12;
  int v13;

  v12 = 0;
  if (*(_QWORD *)(a1 + 152))
    return 0;
  v4 = 2370838535;
  if ((InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v12) & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 164) = *a4;
    v13 = *(_DWORD *)(a4 + 1) + 1;
    v10 = (_BYTE *)heap_Calloc(*(_QWORD **)(v12 + 8), 1, v13);
    *(_QWORD *)(a1 + 152) = v10;
    if (v10)
    {
      StringZ = ssftriff_reader_ReadStringZ(a2, (uint64_t)a4, a3, *(_DWORD *)(a4 + 3) + 10, v10, (unsigned int *)&v13);
      if ((StringZ & 0x80000000) == 0)
      {
        if (*(_QWORD *)(a1 + 152))
          return StringZ;
        else
          return 2370838535;
      }
    }
    else
    {
      wordpar_freeBRKDefs(a1);
      return 2370838538;
    }
  }
  return v4;
}

uint64_t wordpar_loc_nonasian_WriteTextAndMarkers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t inserted;
  unsigned __int16 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _DWORD *v22;
  int v23;
  unint64_t v24;
  _DWORD *v25;
  _QWORD *v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  int *v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  char *v36;
  unsigned int v37;
  unsigned int v38;
  char v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  BOOL v43;
  unsigned int i;
  unsigned int v45;
  char *v46;
  unsigned __int16 v47;
  unsigned __int16 v48;
  uint64_t v49;
  unsigned int v50;
  unsigned __int16 v51;
  unsigned __int16 v52;
  unsigned __int16 v53;
  unsigned __int16 v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  const char *v58;
  unsigned int v59;
  unsigned int v60;
  __int16 v61;
  unsigned __int16 v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  unsigned __int16 v66;
  unsigned __int16 v67;
  unsigned __int16 v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  __int16 v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  size_t v77;
  char *v78;
  char *v79;
  unsigned __int16 v80;
  unsigned __int16 PreviousUtf8Offset;
  unsigned int v82;
  unint64_t v83;
  uint64_t v84;
  unsigned __int16 v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  BOOL v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  unint64_t v93;
  unsigned int *v94;
  _DWORD *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned __int16 j;
  unint64_t v100;
  unsigned int v101;
  unint64_t v102;
  _DWORD *v103;
  _DWORD *v104;
  unint64_t v105;
  int v106;
  int v107;
  uint64_t v108;
  unint64_t v109;
  _OWORD *v110;
  __int128 v111;
  __int128 v112;
  _OWORD *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  const char *v125;
  int v126;
  const char *MarkerArgStr;
  uint64_t v128;
  __int16 v129;
  const char *v130;
  unsigned __int16 v131;
  uint64_t v132;
  char *v133;
  const char *v134;
  const char *v135;
  uint64_t v136;
  unsigned __int16 v137;
  uint64_t v138;
  _DWORD *v139;
  uint64_t v140;
  unsigned int v141;
  unsigned __int16 v142;
  unint64_t v143;
  int v144;
  int v145;
  unsigned int *v146;
  unsigned int *v147;
  char v148;
  uint64_t v149;
  char v150;
  int v151;
  unsigned int v152;
  unsigned __int16 v153;
  unsigned __int16 v154;
  unsigned int v155;
  char *v156;
  char *v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unsigned int *v161;
  uint64_t v162;
  unsigned int v163;
  BOOL v164;
  unsigned int *v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  unsigned __int16 v170;
  __int16 v171;
  unint64_t v172;
  int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned __int16 v176;
  __int16 v177;
  int v178;
  _DWORD *v179;
  unsigned int v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t *v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  _DWORD *v192;
  unint64_t v193;
  unint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  _DWORD *v198;
  uint64_t v199;
  _DWORD *v200;
  int v201;
  int v202;
  uint64_t v203;
  int v204;
  _DWORD *v206;
  unsigned __int16 v207;
  int v208;
  uint64_t v209;
  unsigned __int16 v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  char *__src;
  uint64_t v215;
  _DWORD *v216;
  int v217;
  uint64_t v218;
  unsigned __int16 v219;
  uint64_t v220;
  uint64_t v221;
  __int16 v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  unsigned __int16 v226;
  unsigned __int16 v227;
  unsigned int v228;
  uint64_t v229;
  unsigned int *v230;
  char *v231;
  size_t v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD v238[2];

  v233 = 0;
  v234 = 0;
  v5 = 2370838528;
  if (!a1)
    return 2370838535;
  v10 = a1;
  v235 = 0;
  inserted = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)(a1 + 32) + 136))(a2, a3, &v235);
  if ((inserted & 0x80000000) != 0)
    return inserted;
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(v10 + 168), *(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24), 1021, (uint64_t)"start wordpar_WriteTextAndMarkers()", 0, 0, 0);
  marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(v10 + 168), *(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24), 1020, (uint64_t)"start wordpar_WriteTextAndMarkers()");
  v237 = 0;
  v238[0] = 0;
  v236 = 0;
  v12 = strlen((const char *)(v10 + 180));
  inserted = datac_RequestBlock(*(_QWORD *)(v10 + 24), 1020, 1u, v238);
  if ((inserted & 0x80000000) != 0)
    return inserted;
  v231 = *(char **)(v238[0] + 8);
  inserted = datac_RequestBlock(*(_QWORD *)(v10 + 24), 1021, 1u, &v237);
  if ((inserted & 0x80000000) != 0)
    return inserted;
  v13 = *(_QWORD *)(v237 + 8);
  inserted = datac_RequestBlock(*(_QWORD *)(v10 + 24), 1012, 1u, &v236);
  if ((inserted & 0x80000000) != 0)
    return inserted;
  v211 = a2;
  v212 = a3;
  v209 = a4;
  v215 = a5;
  v14 = v237;
  v15 = *(unsigned __int16 *)(v237 + 16);
  if (v15 >= 2)
  {
    v16 = 0;
    v207 = v12;
    v232 = v12;
    v17 = 1;
    v208 = -1;
    v18 = 1;
    v224 = v10;
    v210 = v12;
    v19 = v13;
    __src = (char *)(v10 + 180);
    while (1)
    {
      v20 = v19 + ((unint64_t)(unsigned __int16)v17 << 6);
      v23 = *(_DWORD *)(v20 + 20);
      v22 = (_DWORD *)(v20 + 20);
      v21 = v23;
      if (v23 == 21)
      {
        v16 = v17;
        goto LABEL_264;
      }
      if (v21 == 7)
      {
        v24 = v19 + ((unint64_t)(unsigned __int16)v17 << 6);
        v25 = (_DWORD *)(v24 + 40);
        if (*(_DWORD *)(v24 + 40) == 43)
        {
          v28 = *(char **)(v24 + 48);
          v26 = (_QWORD *)(v24 + 48);
          v27 = v28;
          if (v28)
            break;
        }
      }
LABEL_264:
      v17 = (v17 + 1);
      v18 = (unsigned __int16)v17;
      v15 = *(unsigned __int16 *)(v14 + 16);
      if ((unsigned __int16)v17 >= v15)
        goto LABEL_268;
    }
    v29 = *(_DWORD *)(v19 + 32);
    LODWORD(v30) = v18 + 1;
    if ((unsigned __int16)v15 > (unsigned __int16)(v18 + 1))
    {
      v30 = (unsigned __int16)(v18 + 1);
      v31 = (int *)(v19 + (v30 << 6) + 20);
      while (1)
      {
        v32 = *v31;
        v31 += 16;
        if (v32 == 7)
          break;
        if ((unsigned __int16)v15 == ++v30)
          goto LABEL_19;
      }
    }
    if ((unsigned __int16)v30 == (unsigned __int16)v15)
    {
LABEL_19:
      v223 = *(_DWORD *)(v19 + 36);
    }
    else
    {
      v223 = *(_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v30 << 6) + 32) - v29;
      v15 = v30;
    }
    v218 = (v18 + 1);
    v33 = *(_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v17 << 6) + 32) - v29;
    v228 = v15;
    v229 = (unsigned __int16)(*(_WORD *)(v19 + ((unint64_t)(unsigned __int16)v17 << 6) + 32) - v29);
    v220 = v16;
    v221 = (unsigned __int16)v17;
    v225 = v19;
    v213 = v18;
    v219 = v33;
    v216 = (_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v17 << 6) + 56);
    if (!*v216)
      goto LABEL_62;
    v34 = v223 - v33;
    *v26 = 0;
    v35 = (unsigned __int16)(v223 - v33);
    if ((_WORD)v223 == (_WORD)v33)
      goto LABEL_62;
    v36 = &v231[v229];
    v37 = 0;
    while (utf8_BelongsToSet(0, v36, v37, (unsigned __int16)v34))
    {
      if (v35 == ++v37)
      {
        v37 = v34;
        break;
      }
    }
    if ((_WORD)v34 == 1)
    {
LABEL_31:
      LOWORD(v34) = 1;
    }
    else
    {
      v38 = (unsigned __int16)(v34 - 1);
      while (utf8_BelongsToSet(0, v36, v38, v35))
      {
        LOWORD(v34) = v34 - 1;
        if (!(_WORD)--v38)
          goto LABEL_31;
      }
    }
    if ((unsigned __int16)v37 >= (unsigned __int16)v34)
      goto LABEL_62;
    v206 = v25;
    v226 = 0;
    v39 = 95;
    v40 = v37;
    do
    {
      v41 = v36[(unsigned __int16)v40];
      if (v41 == 35 || v41 == 95)
      {
        if (v39 != 35 && v39 != 95)
          ++v226;
      }
      else
      {
        v89 = v41 == 92;
        v42 = (unsigned __int16)v40 + 1;
        v43 = !v89 || v42 >= (unsigned __int16)v34;
        if (!v43 && v36[v42] == 84)
        {
          for (i = v40 + 2;
                (unsigned __int16)i < (unsigned __int16)v34;
                i += utf8_determineUTF8CharLength(v45))
          {
            v45 = v36[(unsigned __int16)i];
            if (v45 == 92)
              break;
          }
          if (v36[(unsigned __int16)i] == 92)
            v40 = i;
          v10 = v224;
        }
      }
      if (!utf8_BelongsToSet(0, v36, (unsigned __int16)v40, v35))
        v39 = v36[(unsigned __int16)v40];
      ++v40;
    }
    while ((unsigned __int16)v40 < (unsigned __int16)v34);
    if (v39 == 35)
    {
      v46 = v231;
    }
    else
    {
      v46 = v231;
      if (v39 != 95)
        ++v226;
    }
    if (v226)
    {
      v47 = v37 + v219;
      v48 = v34 - v37;
      v49 = v236;
      v50 = *(unsigned __int16 *)(v236 + 16);
      v51 = v48 + v50 + 1;
      if (*(unsigned __int16 *)(v236 + 18) >= v51)
      {
        v52 = v226;
      }
      else
      {
        inserted = datac_RequestBlock(*(_QWORD *)(v10 + 24), 1012, (unsigned __int16)(v48 + v50 + 1), &v236);
        v52 = v226;
        if ((inserted & 0x80000000) != 0)
          return inserted;
        v49 = v236;
        v50 = *(unsigned __int16 *)(v236 + 16);
      }
      strncpy((char *)(*(_QWORD *)(v49 + 8) + *(unsigned __int16 *)(v49 + 2) * (unint64_t)v50), &v46[v47], v48)[v48] = 0;
      *v22 = 34;
      *v206 = *(unsigned __int16 *)(v236 + 16);
      *(_WORD *)(v236 + 16) = v51;
    }
    else
    {
LABEL_62:
      v52 = 0;
    }
    v53 = strlen(v27);
    v54 = v53;
    v55 = v53;
    if (v53)
    {
      v56 = 0;
      v57 = v53;
      while (utf8_BelongsToSet(1u, v27, v56, v55) == 1)
      {
        if (v57 == (_DWORD)++v56)
        {
          LOWORD(v56) = v54;
          if (!v54)
            goto LABEL_97;
          goto LABEL_72;
        }
      }
      if (!(_WORD)v56)
        goto LABEL_73;
      if (!utf8_BelongsToSet(1u, v27, v56, v55))
        memmove(v27, &v27[v56], v54 - v56);
LABEL_72:
      v54 -= v56;
      v27[v54] = 0;
    }
LABEL_73:
    v58 = v231;
    v59 = v54;
    if (!v54)
    {
      v54 = 0;
      v62 = 0;
      goto LABEL_99;
    }
    if (v54 != 1)
    {
      v60 = (unsigned __int16)(v54 - 1) + 1;
      while (utf8_BelongsToSet(1u, v27, v60 - 1, v54) == 1)
      {
        v61 = v60-- - 2;
        if (!v61)
          goto LABEL_83;
      }
      if (v54 != v60 && !utf8_BelongsToSet(1u, v27, v60 - 1, v54))
      {
        v27[v60] = 0;
        v54 = strlen(v27);
      }
LABEL_83:
      if (!v54)
      {
LABEL_97:
        v54 = 0;
        v59 = 0;
        v62 = 0;
LABEL_98:
        v58 = v231;
LABEL_99:
        v66 = 0;
        v227 = v52;
        if (v52 && *v216)
        {
          v67 = v62;
          if (v62 == v52)
          {
            v66 = 0;
            v68 = 0;
            v222 = 0;
          }
          else if (v62 >= v52)
          {
            v136 = *(_QWORD *)(v10 + 24);
            v137 = *(_WORD *)(v237 + 16) + 1;
            *(_WORD *)(v237 + 16) = v137;
            inserted = datac_RequestBlock(v136, 1021, v137, &v237);
            if ((inserted & 0x80000000) != 0)
              return inserted;
            v138 = *(_QWORD *)(v237 + 8);
            v225 = v138;
            v139 = (_DWORD *)(v138 + ((unint64_t)(unsigned __int16)v218 << 6));
            memmove((void *)(v138 + ((unint64_t)((unsigned __int16)v218 + 1) << 6)), v139, (uint64_t)(*(unsigned __int16 *)(v237 + 16) - v213) << 6);
            v140 = v236;
            v141 = *(unsigned __int16 *)(v236 + 16);
            v142 = v141 + strlen(v27) + 1;
            if (*(unsigned __int16 *)(v236 + 18) < v142)
            {
              inserted = datac_RequestBlock(*(_QWORD *)(v224 + 24), 1012, v142, &v236);
              if ((inserted & 0x80000000) != 0)
                return inserted;
              v140 = v236;
              v141 = *(unsigned __int16 *)(v236 + 16);
            }
            v222 = v62 - v52;
            ++v228;
            strcpy((char *)(*(_QWORD *)(v140 + 8) + *(unsigned __int16 *)(v140 + 2) * (unint64_t)v141), v27);
            v139[10] = *(unsigned __int16 *)(v236 + 16);
            *(_WORD *)(v236 + 16) = v142;
            v143 = v225 + ((unint64_t)(unsigned __int16)v17 << 6);
            v144 = *(_DWORD *)(v143 + 24);
            v139[5] = 100;
            v139[6] = v144;
            v139[8] = *(_DWORD *)(v143 + 32) + 1;
            *v139 = 1;
            v145 = strlen(v27);
            v66 = 0;
            v68 = 0;
            v139[7] = v145;
            v10 = v224;
            v58 = v231;
          }
          else
          {
            v222 = 0;
            v68 = v52 - v62;
            v66 = (v52 - v67) * v207;
          }
        }
        else
        {
          v68 = 0;
          v222 = 0;
        }
        v69 = v59 + v66;
        v70 = (unsigned __int16)v223 - (_DWORD)v229;
        LOWORD(v71) = v69 - (v223 - v229);
        v217 = v69;
        if (v69 <= v70)
        {
          v74 = v70 - v69;
          v71 = -v74;
          memmove((void *)&v58[(unsigned __int16)v223 - (unsigned __int16)v74], &v58[(unsigned __int16)v223], *(unsigned __int16 *)(v238[0] + 16) - (unint64_t)(unsigned __int16)v223);
          v72 = v238[0];
          v73 = *(_WORD *)(v238[0] + 16) - v74;
LABEL_108:
          *(_WORD *)(v72 + 16) = v73;
          strncpy((char *)&v58[v229], v27, v54);
          v231 = (char *)v58;
          v75 = strlen(v58);
          v76 = v68;
          v77 = v232;
          if (v68)
          {
            v78 = (char *)&v58[v59 + v229];
            do
            {
              v79 = strncpy(v78, __src, v77);
              v77 = v232;
              v78 = &v79[v232];
              --v76;
            }
            while (v76);
          }
          heap_Free(*(_QWORD **)(*(_QWORD *)(v10 + 16) + 8), (uint64_t)v27);
          if (v222)
          {
            v80 = v219;
            PreviousUtf8Offset = v59 + v219 + v68 * v210;
            while (--PreviousUtf8Offset)
            {
              if (*(unsigned __int16 *)(v238[0] + 16) <= PreviousUtf8Offset
                || utf8_BelongsToSet(1u, v231, PreviousUtf8Offset, v75) != 1)
              {
                while (1)
                {
                  v82 = *(unsigned __int16 *)(v238[0] + 16);
                  if (PreviousUtf8Offset >= v82)
                    break;
                  if (utf8_BelongsToSet(1u, v231, PreviousUtf8Offset, v75))
                  {
                    v82 = *(unsigned __int16 *)(v238[0] + 16);
                    break;
                  }
                  PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)v231, PreviousUtf8Offset);
                  if (!PreviousUtf8Offset)
                    goto LABEL_140;
                }
                if (v82 > PreviousUtf8Offset)
                {
                  do
                  {
                    while (*(unsigned __int16 *)(v238[0] + 16) > PreviousUtf8Offset
                         && utf8_BelongsToSet(1u, v231, PreviousUtf8Offset, v75) == 1)
                    {
                      v231[PreviousUtf8Offset--] = 45;
                      if (!PreviousUtf8Offset)
                        goto LABEL_140;
                    }
                    --v222;
                    while (1)
                    {
                      v88 = *(unsigned __int16 *)(v238[0] + 16);
                      if (PreviousUtf8Offset >= v88)
                        break;
                      if (utf8_BelongsToSet(1u, v231, PreviousUtf8Offset, v75))
                      {
                        v88 = *(unsigned __int16 *)(v238[0] + 16);
                        break;
                      }
                      PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)v231, PreviousUtf8Offset);
                      if (!PreviousUtf8Offset)
                        goto LABEL_140;
                    }
                    v89 = v88 <= PreviousUtf8Offset || v222 == 0;
                  }
                  while (!v89);
                }
                break;
              }
            }
LABEL_140:
            v83 = *(unsigned __int16 *)(v237 + 16);
            if (v83 < 2)
            {
              v84 = v225;
              v85 = v228;
              v86 = (unsigned __int16)v17;
              v87 = v218;
            }
            else
            {
              v84 = v225;
              v90 = *(_DWORD *)(v225 + 32);
              v85 = v228;
              v91 = v90 + v229;
              v92 = v90 + (unsigned __int16)v223;
              v93 = v83 - 1;
              v94 = (unsigned int *)(v225 + 96);
              v86 = (unsigned __int16)v17;
              v87 = v218;
              do
              {
                if (*v94 > v91 && *v94 < v92)
                  *v94 = v91;
                v94 += 16;
                --v93;
              }
              while (v93);
            }
          }
          else
          {
            v83 = *(unsigned __int16 *)(v237 + 16);
            v84 = v225;
            v85 = v228;
            v86 = (unsigned __int16)v17;
            v87 = v218;
            v80 = v219;
          }
          *(_DWORD *)(v84 + 36) = *(unsigned __int16 *)(v238[0] + 16);
          wordpar_loc_adjustMarkerPositions(v83, v225, (unsigned __int16)v87, v80, (unsigned __int16)v223, (__int16)v71);
          v19 = v225;
          v96 = (_DWORD *)(v225 + (v86 << 6));
          if (!v227 || !v96[14])
          {
            v14 = v237;
            v102 = *(unsigned __int16 *)(v237 + 16);
            v16 = v220;
            if (v102 < 2)
            {
              v5 = 2370838528;
            }
            else
            {
              v103 = (_DWORD *)(v225 + (v86 << 6) + 32);
              v104 = (_DWORD *)(v225 + 100);
              v105 = v102 - 1;
              v5 = 2370838528;
              while (*(v104 - 4) != 1 || *(v104 - 1) != *v103)
              {
                v104 += 16;
                if (!--v105)
                  goto LABEL_168;
              }
              if (*(v104 - 4) == 1)
              {
                v168 = *(unsigned __int16 *)(v225 + 36);
                v169 = (unsigned __int16)(*((_WORD *)v104 - 2) - *(_DWORD *)(v225 + 32));
                if (v169 >= v168)
                {
                  v170 = 0;
                }
                else
                {
                  v170 = 0;
                  do
                  {
                    if (utf8_BelongsToSet(0, v231, v169, v75))
                      break;
                    v171 = utf8_determineUTF8CharLength(v231[v169]);
                    v170 += v171;
                    v169 = (unsigned __int16)(v171 + v169);
                  }
                  while (v169 < v168);
                  v14 = v237;
                  LODWORD(v102) = *(unsigned __int16 *)(v237 + 16);
                  v19 = v225;
                }
                *v104 = v170;
                v5 = 2370838528;
                v87 = v218;
              }
            }
LABEL_168:
            if ((_DWORD)v87 != (_DWORD)v102)
            {
              memmove(v96, (const void *)(v19 + (v87 << 6)), (uint64_t)((int)v102 - v213) << 6);
              v19 = v225;
              v14 = v237;
              LOWORD(v102) = *(_WORD *)(v237 + 16);
            }
            *(_WORD *)(v14 + 16) = v102 - 1;
            goto LABEL_263;
          }
          v97 = v217 + v229 + *(_DWORD *)(v225 + 32);
          v14 = v237;
          v98 = *(unsigned __int16 *)(v237 + 16);
          for (j = 1; v98 > j; ++j)
          {
            v100 = v225 + ((unint64_t)j << 6);
            v101 = *(_DWORD *)(v100 + 32);
            if (v101 == v97 && *(_DWORD *)(v100 + 20) == 21)
            {
              v108 = v85;
LABEL_195:
              v146 = (unsigned int *)(v19 + (v108 << 6) + 32);
              v230 = (unsigned int *)(v19 + (v221 << 6) + 32);
              v147 = (unsigned int *)(v19 + 96);
              v148 = 1;
              v149 = v19;
              while (2)
              {
                v150 = v148;
                v151 = *(_DWORD *)(v19 + 32);
                if ((v150 & 1) != 0)
                {
                  v152 = *v230;
                  v153 = *v230 - v151;
                  if (v153 && v231[v153 - 1] != 32)
                  {
                    v154 = *(_WORD *)(v237 + 16) + 1;
                    LOWORD(v155) = *(_WORD *)(v238[0] + 16);
                    goto LABEL_205;
                  }
LABEL_222:
                  v148 = 0;
                  if ((v150 & 1) == 0)
                    goto LABEL_223;
                  continue;
                }
                break;
              }
              v152 = *v146;
              v153 = *v146 - v151;
              if (v153)
              {
                v155 = *(unsigned __int16 *)(v238[0] + 16);
                if (v153 < v155 && v231[v153] != 32 && v231[v153 - 1] != 32)
                {
                  v154 = v228;
LABEL_205:
                  inserted = datac_RequestBlock(*(_QWORD *)(v224 + 24), 1020, (unsigned __int16)(v155 + 1), v238);
                  if ((inserted & 0x80000000) != 0)
                    return inserted;
                  v156 = *(char **)(v238[0] + 8);
                  v231 = v156;
                  v157 = &v156[v153];
                  memmove(&v156[v153 + 1], v157, *(unsigned __int16 *)(v238[0] + 16) - (unint64_t)v153);
                  *v157 = 32;
                  ++*(_WORD *)(v238[0] + 16);
                  v14 = v237;
                  v158 = *(unsigned __int16 *)(v237 + 16);
                  v19 = v149;
                  if (v158 < 2)
                  {
LABEL_221:
                    ++*(_DWORD *)(v149 + 36);
                    goto LABEL_222;
                  }
                  v159 = v158 - 1;
                  v160 = v154 - 1;
                  v161 = v147;
                  v162 = 1;
                  while (2)
                  {
                    if ((v150 & 1) != 0)
                    {
                      v163 = *v161;
                      if (*v161 >= v152)
                      {
                        v164 = v163 == v152 && *(v161 - 3) == 21;
                        v165 = v161;
                        if (!v164)
LABEL_219:
                          *v165 = v163 + 1;
                      }
                    }
                    else if (v160)
                    {
                      v163 = *v161;
                      if (*v161 >= v152)
                      {
                        v165 = (unsigned int *)(v149 + (v162 << 6) + 32);
                        goto LABEL_219;
                      }
                    }
                    ++v162;
                    v161 += 16;
                    --v160;
                    if (!--v159)
                      goto LABEL_221;
                    continue;
                  }
                }
              }
LABEL_223:
              if (*(_DWORD *)(v19 + (v221 << 6) + 20) == 34)
              {
                v14 = v237;
                v166 = *(unsigned __int16 *)(v237 + 16);
                LODWORD(v17) = v228;
                v10 = v224;
                v16 = v220;
                if (v166 <= (unsigned __int16)v228)
                  goto LABEL_262;
                if (*(_DWORD *)(v19 + (v108 << 6) + 20) != 21)
                  goto LABEL_261;
                v167 = 1;
                if (v166 >= 2)
                {
                  while (*(v147 - 3) != 1 || *v147 != *v230)
                  {
                    ++v167;
                    v147 += 16;
                    if (v166 == v167)
                    {
                      LODWORD(v167) = *(unsigned __int16 *)(v237 + 16);
                      break;
                    }
                  }
                }
                v172 = v19 + ((unint64_t)(unsigned __int16)v167 << 6);
                v5 = 2370838528;
                if (*(_DWORD *)(v172 + 20) == 1 && (v173 = *(_DWORD *)(v172 + 32), v173 == *v230))
                {
                  v174 = *(unsigned __int16 *)(v19 + 36);
                  v175 = (unsigned __int16)(v173 - *(_WORD *)(v19 + 32));
                  if (v175 >= v174)
                  {
                    v176 = 0;
                  }
                  else
                  {
                    v176 = 0;
                    do
                    {
                      if (utf8_BelongsToSet(0, v231, v175, v75))
                        break;
                      v177 = utf8_determineUTF8CharLength(v231[v175]);
                      v176 += v177;
                      v175 = (unsigned __int16)(v177 + v175);
                    }
                    while (v175 < v174);
                    v14 = v237;
                    LODWORD(v166) = *(unsigned __int16 *)(v237 + 16);
                    v19 = v149;
                  }
                  *(_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v167 << 6) + 36) = v176;
                  v178 = v167 + 1;
                  if (v166 > (unsigned __int16)(v167 + 1))
                  {
                    v5 = 2370838528;
                    do
                    {
                      v179 = (_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v178 << 6));
                      if (v179[5] == 1
                        && (v180 = v179[8], v180 >= *v230)
                        && v180 < *(_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v228 << 6) + 32))
                      {
                        v181 = (unsigned __int16)v178 + 1;
                        if ((_DWORD)v181 != (unsigned __int16)v166)
                        {
                          memmove(v179, (const void *)(v19 + (v181 << 6)), (uint64_t)((unsigned __int16)v166 - (unsigned __int16)v178) << 6);
                          v19 = v149;
                          v14 = v237;
                        }
                        --*(_WORD *)(v14 + 16);
                        --v228;
                      }
                      else
                      {
                        LODWORD(v167) = v178;
                      }
                      v178 = v167 + 1;
                      LODWORD(v166) = *(unsigned __int16 *)(v14 + 16);
                    }
                    while (v166 > (unsigned __int16)(v167 + 1));
                    goto LABEL_260;
                  }
LABEL_261:
                  LODWORD(v17) = v228;
LABEL_262:
                  v5 = 2370838528;
                }
                else
                {
LABEL_260:
                  LODWORD(v17) = v228;
                }
              }
              else
              {
                LODWORD(v17) = v228;
                v10 = v224;
                v5 = 2370838528;
                v16 = v220;
              }
LABEL_263:
              LODWORD(v17) = v17 - 1;
              goto LABEL_264;
            }
            if (v101 > v97)
              break;
          }
          inserted = datac_RequestBlock(*(_QWORD *)(v10 + 24), 1021, (unsigned __int16)(v98 + 1), &v237);
          if ((inserted & 0x80000000) == 0)
          {
            v19 = *(_QWORD *)(v237 + 8);
            v106 = v85;
            v107 = *(unsigned __int16 *)(v237 + 16);
            if (v85 == v107)
            {
              v108 = v85;
              v109 = v19 + ((unint64_t)v85 << 6);
              v110 = (_OWORD *)(v19 + ((uint64_t)(v85 - 1) << 6));
              v111 = v110[1];
              *(_OWORD *)v109 = *v110;
              *(_OWORD *)(v109 + 16) = v111;
              v112 = v110[3];
              *(_OWORD *)(v109 + 32) = v110[2];
              *(_OWORD *)(v109 + 48) = v112;
              *(_DWORD *)(v109 + 24) += *(_DWORD *)(v109 + 28);
            }
            else
            {
              v113 = (_OWORD *)(v19 + ((unint64_t)(v85 + 1) << 6));
              v108 = v85;
              v114 = (_OWORD *)(v19 + ((unint64_t)v85 << 6));
              v115 = *(_QWORD *)(v237 + 8);
              memmove(v113, v114, (uint64_t)(v107 - v106) << 6);
              v19 = v115;
              v116 = v113[1];
              *v114 = *v113;
              v114[1] = v116;
              v117 = v113[3];
              v114[2] = v113[2];
              v114[3] = v117;
            }
            v118 = v19 + (v108 << 6);
            v120 = *(_QWORD *)(v118 + 48);
            v119 = (_QWORD *)(v118 + 48);
            *((_DWORD *)v119 - 7) = 21;
            *((_DWORD *)v119 - 4) = v97;
            *((_DWORD *)v119 - 3) = 0;
            *((_DWORD *)v119 - 5) = 0;
            if (v120)
              *v119 = 0;
            if ((_WORD)v220)
            {
              v121 = *(_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v220 << 6) + 40);
LABEL_188:
              *(_DWORD *)(v19 + (v108 << 6) + 40) = v121;
              v14 = v237;
              ++*(_WORD *)(v237 + 16);
              goto LABEL_195;
            }
            v121 = v208;
            if (v208 != -1)
              goto LABEL_188;
            v122 = v19;
            v123 = v236;
            v124 = *(const char **)(v236 + 8);
            if (v124)
            {
              v121 = 0;
              while (1)
              {
                v125 = v124;
                v123 = v236;
                if (v121 >= *(unsigned __int16 *)(v236 + 16))
                  break;
                v126 = strlen(v124);
                MarkerArgStr = marker_getMarkerArgStr(1u);
                if (!strcmp(v125, MarkerArgStr))
                  goto LABEL_187;
                v128 = (v126 + 1);
                v121 += v128;
                v124 = &v125[v128];
                if (!v125)
                {
                  v123 = v236;
                  break;
                }
              }
            }
            v129 = *(_WORD *)(v123 + 16);
            v130 = marker_getMarkerArgStr(1u);
            v131 = v129 + strlen(v130) + 1;
            v132 = v236;
            if (*(unsigned __int16 *)(v236 + 18) >= v131)
            {
LABEL_186:
              v133 = (char *)(*(_QWORD *)(v132 + 8)
                            + *(unsigned __int16 *)(v132 + 2) * (unint64_t)*(unsigned __int16 *)(v132 + 16));
              v134 = marker_getMarkerArgStr(1u);
              strcpy(v133, v134);
              v135 = marker_getMarkerArgStr(1u);
              v133[strlen(v135)] = 0;
              v121 = *(unsigned __int16 *)(v236 + 16);
              *(_WORD *)(v236 + 16) = v131;
LABEL_187:
              v208 = v121;
              v19 = v122;
              goto LABEL_188;
            }
            inserted = datac_RequestBlock(*(_QWORD *)(v10 + 24), 1012, v131, &v236);
            if ((inserted & 0x80000000) == 0)
            {
              v132 = v236;
              goto LABEL_186;
            }
          }
          return inserted;
        }
        inserted = datac_RequestBlock(*(_QWORD *)(v10 + 24), 1020, (unsigned __int16)(*(_WORD *)(v238[0] + 16) + v71), v238);
        if ((inserted & 0x80000000) == 0)
        {
          v58 = *(const char **)(v238[0] + 8);
          memmove((void *)&v58[(unsigned __int16)v223 + (unsigned __int16)v71], &v58[(unsigned __int16)v223], *(unsigned __int16 *)(v238[0] + 16) - (unint64_t)(unsigned __int16)v223);
          v72 = v238[0];
          v73 = *(_WORD *)(v238[0] + 16) + v71;
          goto LABEL_108;
        }
        return inserted;
      }
      v59 = v54;
    }
    v63 = 0;
    LOWORD(v64) = 0;
    v62 = *v27 != 0;
    do
    {
      if (!v27[(unsigned __int16)v64])
        break;
      v65 = utf8_BelongsToSet(1u, v27, v63, v59);
      if ((unsigned __int16)v64 < v54 && v65 == 1)
      {
        v64 = (unsigned __int16)v64;
        while (utf8_BelongsToSet(1u, v27, v64, v59) == 1)
        {
          if (v59 == ++v64)
          {
            LOWORD(v64) = v54;
            goto LABEL_95;
          }
        }
        if (v27[(unsigned __int16)v64])
          ++v62;
      }
LABEL_95:
      LOWORD(v64) = v64 + 1;
      v63 = (unsigned __int16)v64;
    }
    while ((unsigned __int16)v64 < v54);
    goto LABEL_98;
  }
  v19 = v13;
LABEL_268:
  if (v15)
  {
    v182 = 0;
    v183 = (uint64_t *)(v19 + 48);
    do
    {
      if (*v183)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)(v10 + 16) + 8), *v183);
        *v183 = 0;
        v14 = v237;
      }
      ++v182;
      v183 += 8;
    }
    while (v182 < *(unsigned __int16 *)(v14 + 16));
  }
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(v10 + 168), *(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24), 1021, (uint64_t)"after wordpar_loc_nonasian_HandleExtendedToi()", 0, 0, 0);
  marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(v10 + 168), *(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24), 1020, (uint64_t)"after wordpar_loc_nonasian_HandleExtendedToi()");
  inserted = datac_RequestBlock(*(_QWORD *)(v10 + 24), 1020, 1u, &v234);
  if ((inserted & 0x80000000) != 0)
    return inserted;
  if (*(_WORD *)(v234 + 16))
  {
    inserted = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v10 + 32) + 104))(v211, v212, *(_QWORD *)(v234 + 8), *(unsigned __int16 *)(v234 + 2) * *(unsigned __int16 *)(v234 + 16));
    if ((inserted & 0x80000000) != 0)
      return inserted;
    if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 32)))
      log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 32), 34, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
        *(_QWORD *)(v234 + 8),
        *(unsigned __int16 *)(v234 + 2) * *(unsigned __int16 *)(v234 + 16));
    *(_WORD *)(v234 + 16) = 0;
    v184 = 1;
  }
  else
  {
    if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 32)))
      log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 32), 34, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
        0,
        0);
    v184 = 0;
  }
  if ((datac_RequestBlock(*(_QWORD *)(v10 + 24), 1012, 1u, &v234) & 0x80000000) != 0)
    v185 = 0;
  else
    v185 = *(_QWORD *)(v234 + 8);
  inserted = datac_RequestBlock(*(_QWORD *)(v10 + 24), 1021, 1u, &v233);
  if ((inserted & 0x80000000) != 0)
    return inserted;
  v189 = v233;
  v190 = *(unsigned __int16 *)(v233 + 16);
  if (*(_WORD *)(v233 + 16))
  {
    v191 = *(_QWORD *)(v233 + 8);
    if (*(_DWORD *)(v191 + 20) == 0x4000)
    {
      v192 = (_DWORD *)(v191 + 32);
      v235 = *(_DWORD *)(v191 + 32) - v235;
      v193 = v190;
      do
      {
        *v192 -= v235;
        v192 += 16;
        --v193;
      }
      while (v193);
      if (v185)
      {
        v194 = 0;
        v195 = (_QWORD *)(v191 + 40);
        do
        {
          if (marker_hasNonConstCharPtrArg(*((_DWORD *)v195 - 5)))
          {
            v196 = *(unsigned int *)v195;
            if ((_DWORD)v196 == -1)
              v197 = 0;
            else
              v197 = v185 + v196;
            *v195 = v197;
          }
          v195 += 8;
          ++v194;
          v189 = v233;
          v190 = *(unsigned __int16 *)(v233 + 16);
        }
        while (v194 < v190);
      }
      if (v190 >= 3)
      {
        v198 = (_DWORD *)(v191 + 164);
        v199 = 1;
        do
        {
          v200 = (_DWORD *)(v191 + (v199 << 6));
          if (v200[5] == 1)
          {
            v201 = v200[7];
            v202 = v200[9];
            if (v201 != v202 && (*(_DWORD *)(v191 + (v199 << 6) + 32) + v202) > *(v198 - 1) && !*v198)
            {
              log_OutText(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 1, 0, (uint64_t)"SEVERE: found control sequence embedded in a word (word marker pos %d, length %d; escape marker pos %d)",
                v186,
                v187,
                v188,
                *(unsigned int *)(v191 + (v199 << 6) + 24));
              v189 = v233;
            }
          }
          ++v199;
          v198 += 16;
        }
        while (*(unsigned __int16 *)(v189 + 16) - 1 > (unsigned __int16)v199);
      }
      marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(v10 + 168), *(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24), 1021, (uint64_t)"before wordpar_loc_MarkerPostProcessing()", 1, 0, 0);
      inserted = wordpar_loc_MarkerPostProcessing(*(_QWORD *)(v10 + 24), v233);
      if ((inserted & 0x80000000) != 0)
        return inserted;
      marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(v10 + 168), *(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24), 1021, (uint64_t)"before wordpar_loc_InsertNLUMarkers()", 1, 0, 0);
      inserted = wordpar_loc_InsertNLUMarkers(v10, v233);
      if ((inserted & 0x80000000) != 0)
        return inserted;
      v203 = *(_QWORD *)(v233 + 8);
      marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(v10 + 168), *(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24), 1021, (uint64_t)"at end()", 1, 0, 0);
      v204 = wordpar_loc_writeMarkersToOutputStream(v10, v209, v215, v203, v233, v184);
      return v204 & (v204 >> 31);
    }
  }
  return v5;
}

uint64_t wordpar_loc_MarkerPostProcessing(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  uint64_t v4;
  unint64_t v5;
  unsigned __int16 v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  __int128 *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _BOOL4 v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  unsigned int v33;
  int v34;
  _BOOL4 v35;
  uint64_t result;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v41 = a2;
  LODWORD(v2) = *(unsigned __int16 *)(a2 + 16);
  if (v2 <= 1)
  {
    result = 0;
    *(_WORD *)(a2 + 16) = 1;
    return result;
  }
  v4 = *(_QWORD *)(a2 + 8);
  v5 = 1;
  v6 = 2;
  v7 = 148;
  LOWORD(v8) = 1;
  do
  {
    v9 = (unsigned __int16)v2;
    v10 = v6;
    if ((unsigned __int16)v2 > v6)
      v10 = (unsigned __int16)v2;
    v11 = v7;
    v12 = v5;
    while (++v12 < (unsigned __int16)v2)
    {
      v13 = *(_DWORD *)(v4 + v11);
      v11 += 64;
      if (v13 != 999)
      {
        v10 = v12;
        break;
      }
    }
    v14 = (__int128 *)(v4 + (v5 << 6));
    v15 = *((_DWORD *)v14 + 8);
    v16 = *((_DWORD *)v14 + 5);
    if (v15 != *(_DWORD *)(v4 + 32))
      goto LABEL_21;
    if (v16 == 21)
    {
      if (v12 >= (unsigned __int16)v2)
        goto LABEL_22;
      v17 = v4 + ((unint64_t)v10 << 6);
      if (*(_DWORD *)(v17 + 32) != v15 || *(_DWORD *)(v17 + 20) != 21)
        goto LABEL_22;
      goto LABEL_23;
    }
    if (v12 < (unsigned __int16)v2 && v16 == 7)
    {
      v18 = v4 + ((unint64_t)v10 << 6);
      if (*(_DWORD *)(v18 + 32) != v15 || *(_DWORD *)(v18 + 20) != 7)
        goto LABEL_22;
    }
    else
    {
LABEL_21:
      if (v16 && v16 != 999)
      {
LABEL_22:
        v19 = (unsigned __int16)v8;
        LOWORD(v8) = v8 + 1;
        v2 = (_OWORD *)(v4 + (v19 << 6));
        v20 = *v14;
        v21 = v14[1];
        v22 = v14[3];
        v2[2] = v14[2];
        v2[3] = v22;
        *v2 = v20;
        v2[1] = v21;
        v9 = *(unsigned __int16 *)(a2 + 16);
        LOWORD(v2) = *(_WORD *)(a2 + 16);
      }
    }
LABEL_23:
    ++v5;
    ++v6;
    v7 += 64;
  }
  while (v5 < v9);
  *(_WORD *)(a2 + 16) = v8;
  if ((unsigned __int16)v8 >= 2u)
  {
    v23 = 0;
    v24 = 0;
    v25 = -1;
    v26 = 1;
    do
    {
      v27 = v4 + v23;
      v28 = *(_DWORD *)(v4 + v23 + 84);
      if (v28 != 36 && v28 != 7)
        goto LABEL_45;
      v30 = *(_DWORD *)(v27 + 96);
      v31 = *(_DWORD *)(v4 + 36) + *(_DWORD *)(v4 + 32);
      if (*(_DWORD *)(v27 + 100) + v30 > v31)
      {
        v32 = v31 >= v30;
        v33 = v31 - v30;
        if (!v32)
        {
          v33 = 0;
          *(_DWORD *)(v27 + 96) = v31;
        }
        *(_DWORD *)(v27 + 100) = v33;
      }
      if (v28 == 7)
      {
        v34 = *(_DWORD *)(v4 + v23 + 104);
        v35 = !v24 && v34 == 43;
        if (v34 == 43 || !v24)
        {
          v24 = v35;
        }
        else if (v34 == 15)
        {
          v24 = 0;
        }
        else
        {
          result = datac_RequestBlock(a1, 1021, (unsigned __int16)(v8 + 1), &v41);
          if ((result & 0x80000000) != 0)
            return result;
          v4 = *(_QWORD *)(v41 + 8);
          v38 = v4 + v23;
          memmove((void *)(v4 + v23 + 128), (const void *)(v4 + v23 + 64), (uint64_t)(v25 + *(unsigned __int16 *)(v41 + 16)) << 6);
          v24 = 0;
          v39 = *(_OWORD *)(v4 + v23 + 144);
          *(_OWORD *)(v38 + 64) = *(_OWORD *)(v38 + 128);
          *(_OWORD *)(v38 + 80) = v39;
          v40 = *(_OWORD *)(v4 + v23 + 176);
          *(_OWORD *)(v38 + 96) = *(_OWORD *)(v38 + 160);
          *(_OWORD *)(v38 + 112) = v40;
          *(_DWORD *)(v38 + 104) = 15;
          a2 = v41;
          ++*(_WORD *)(v41 + 16);
        }
      }
      else
      {
LABEL_45:
        v24 = v24;
      }
      ++v26;
      v8 = *(unsigned __int16 *)(a2 + 16);
      --v25;
      v23 += 64;
    }
    while (v26 < v8);
  }
  return 0;
}

uint64_t wordpar_loc_InsertNLUMarkers(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned __int16 v7;
  int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  const char *v12;
  int v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  const char *v18;
  const char **v19;
  char *v20;
  char *v21;
  unsigned __int16 v22;
  uint64_t v23;
  unsigned int v24;
  unsigned __int16 v25;
  char *v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  const char **v36;
  const char *v37;
  __int16 v38;
  unsigned __int16 v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;

  v2 = a2;
  v46 = 0;
  v47 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a2 + 8);
  result = datac_RequestBlock(v3, 1013, 1u, &v46);
  if ((result & 0x80000000) == 0)
  {
    v6 = *(unsigned __int16 *)(v2 + 16);
    if (v6 >= 2)
    {
      v7 = 0;
      v8 = 1;
      v9 = 1;
      do
      {
        v10 = *(_DWORD *)(v4 + (v9 << 6) + 20);
        if (v10 > 55)
        {
          if (v10 == 56)
          {
            v12 = "E_";
            if (v7)
              goto LABEL_23;
            v7 = 0;
            goto LABEL_43;
          }
          if (v10 != 57)
          {
LABEL_7:
            v11 = v10 != 54 || v7 == 0;
            v12 = "BND:";
            if (!v11)
            {
LABEL_23:
              LOWORD(v14) = v8 + 1;
              LOWORD(v15) = v7;
LABEL_36:
              result = datac_RequestBlock(v3, 1021, (unsigned __int16)(*(_WORD *)(v2 + 16) + 1), &v47);
              if ((result & 0x80000000) != 0)
                return result;
              v4 = *(_QWORD *)(v47 + 8);
              v27 = (unsigned __int16)v15;
              v28 = (_OWORD *)(v4 + ((unint64_t)(unsigned __int16)v15 << 6));
              memmove((void *)(v4 + ((unint64_t)((unsigned __int16)v15 + 1) << 6)), v28, (uint64_t)(*(unsigned __int16 *)(v47 + 16) - (unsigned __int16)v15) << 6);
              if ((unsigned __int16)v15 > (unsigned __int16)v14)
              {
                v29 = (__int128 *)(v4 + ((unint64_t)(unsigned __int16)v14 << 6));
                v30 = *v29;
                v31 = v29[1];
                v32 = v29[3];
                v28[2] = v29[2];
                v28[3] = v32;
                *v28 = v30;
                v28[1] = v31;
              }
              *(_DWORD *)v28 = 1;
              *((_DWORD *)v28 + 5) = 51;
              v33 = v46;
              v34 = *(unsigned __int16 *)(v46 + 16);
              v35 = v4 + ((unint64_t)(unsigned __int16)v14 << 6);
              v37 = *(const char **)(v35 + 40);
              v36 = (const char **)(v35 + 40);
              v38 = strlen(v37);
              v39 = v34 + strlen(v12) + v38 + 1;
              if (*(unsigned __int16 *)(v46 + 18) < v39)
              {
                result = datac_RequestBlock(*(_QWORD *)(a1 + 24), 1013, v39, &v46);
                if ((result & 0x80000000) != 0)
                  return result;
                v33 = v46;
                v34 = *(unsigned __int16 *)(v46 + 16);
              }
              v40 = strcpy((char *)(*(_QWORD *)(v33 + 8) + *(unsigned __int16 *)(v33 + 2) * (unint64_t)v34), v12);
              strcat(v40, *v36);
              *(_DWORD *)(v4 + (v27 << 6) + 40) = *(unsigned __int16 *)(v46 + 16);
              *(_WORD *)(v46 + 16) = v39;
              v2 = v47;
              ++*(_WORD *)(v47 + 16);
              ++v8;
              goto LABEL_43;
            }
            goto LABEL_43;
          }
        }
        else
        {
          if (v10 == 1)
          {
            v7 = v8;
            goto LABEL_43;
          }
          if (v10 != 55)
            goto LABEL_7;
        }
        if (v10 != 57 || v7 == 0)
        {
          v14 = v8;
        }
        else
        {
          result = datac_RequestBlock(v3, 1021, (unsigned __int16)(v6 + 1), &v47);
          if ((result & 0x80000000) != 0)
            return result;
          v4 = *(_QWORD *)(v47 + 8);
          v16 = (_DWORD *)(v4 + ((unint64_t)v7 << 6));
          memmove((void *)(v4 + ((unint64_t)(v7 + 1) << 6)), v16, (uint64_t)(*(unsigned __int16 *)(v47 + 16) - v7) << 6);
          *v16 = 1;
          v16[5] = 51;
          v17 = v4 + (v9 << 6);
          v20 = *(char **)(v17 + 104);
          v19 = (const char **)(v17 + 104);
          v18 = v20;
          v21 = strchr(v20, 58);
          if (v21)
            v22 = (_WORD)v21 - (_WORD)v18;
          else
            v22 = strlen(v18);
          v23 = v46;
          v24 = *(unsigned __int16 *)(v46 + 16);
          v25 = v22 + v24 + 3;
          if (*(unsigned __int16 *)(v46 + 18) < v25)
          {
            result = datac_RequestBlock(*(_QWORD *)(a1 + 24), 1013, (unsigned __int16)(v22 + v24 + 3), &v46);
            if ((result & 0x80000000) != 0)
              return result;
            v23 = v46;
            v24 = *(unsigned __int16 *)(v46 + 16);
          }
          v26 = (char *)(*(_QWORD *)(v23 + 8) + *(unsigned __int16 *)(v23 + 2) * (unint64_t)v24);
          strcpy(v26, "R_");
          strncat(v26, *v19, v22);
          *(_DWORD *)(v4 + ((unint64_t)v7 << 6) + 40) = *(unsigned __int16 *)(v46 + 16);
          v2 = v47;
          *(_WORD *)(v46 + 16) = v25;
          ++*(_WORD *)(v2 + 16);
          v14 = v8 + 1;
        }
        v15 = (unsigned __int16)v14 + 1;
        if ((v15 & 0x10000) == 0)
        {
          v12 = "S_";
          v8 = v14;
          goto LABEL_36;
        }
        v8 = 0xFFFF;
LABEL_43:
        v9 = (unsigned __int16)++v8;
        v6 = *(unsigned __int16 *)(v2 + 16);
      }
      while (v6 > (unsigned __int16)v8);
    }
    if (v6)
    {
      v41 = 0;
      v42 = (_QWORD *)(v4 + 40);
      do
      {
        if (*((_DWORD *)v42 - 5) == 51 && *((_DWORD *)v42 - 10))
        {
          v43 = *(unsigned int *)v42;
          if ((_DWORD)v43 == -1)
            v44 = 0;
          else
            v44 = *(_QWORD *)(v46 + 8) + v43;
          *v42 = v44;
          v2 = v47;
        }
        ++v41;
        v42 += 8;
      }
      while (v41 < *(unsigned __int16 *)(v2 + 16));
    }
    return 0;
  }
  return result;
}

uint64_t wordpar_loc_writeMarkersToOutputStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;

  v11 = *(unsigned __int16 *)(a5 + 16);
  if (!a6 && v11 == 1)
  {
    if (*(_DWORD *)(a4 + 20) == 0x4000)
      return 0;
    v11 = 1;
  }
  v13 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, (32 * v11) | 1);
  if (!v13)
    return 2370838538;
  v14 = v13;
  if (*(_WORD *)(a5 + 16))
  {
    v15 = 0;
    v16 = (_QWORD *)(v13 + 24);
    v17 = (_QWORD *)(a4 + 40);
    do
    {
      *(_OWORD *)(v16 - 3) = *(_OWORD *)((char *)v17 - 20);
      *((_DWORD *)v16 - 2) = *((_DWORD *)v17 - 1);
      v18 = *v17;
      v17 += 8;
      *v16 = v18;
      v16 += 4;
      ++v15;
      v19 = *(unsigned __int16 *)(a5 + 16);
    }
    while (v15 < v19);
  }
  else
  {
    LOWORD(v19) = 0;
  }
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"at end()", 1, a4, v19);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 104))(a2, a3, v14, 32 * *(unsigned __int16 *)(a5 + 16));
  if ((v12 & 0x80000000) == 0 && log_HasTraceTuningDataSubscriber(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32)))
    log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), 34, (uint64_t)&byte_1DEBD87CE, (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
      v14,
      32 * *(unsigned __int16 *)(a5 + 16));
  heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v14);
  return v12;
}

uint64_t wordpar_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v21 = 0;
  v22 = 0;
  v5 = 2370838535;
  if (a4 && (InitRsrcFunction(a1, a2, &v22) & 0x80000000) == 0)
  {
    *a4 = 0;
    v11 = heap_Alloc(*(_QWORD *)(v22 + 8), 200);
    if (!v11)
      return 2370838538;
    v12 = v11;
    *(_OWORD *)v11 = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_QWORD *)(v11 + 192) = 0;
    *(_OWORD *)(v11 + 160) = 0u;
    *(_OWORD *)(v11 + 176) = 0u;
    *(_OWORD *)(v11 + 128) = 0u;
    *(_OWORD *)(v11 + 144) = 0u;
    *(_OWORD *)(v11 + 96) = 0u;
    *(_OWORD *)(v11 + 112) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_OWORD *)(v11 + 80) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_QWORD *)v11 = a1;
    *(_QWORD *)(v11 + 8) = a2;
    v13 = v22;
    *(_QWORD *)(v11 + 16) = v22;
    *(_QWORD *)(v11 + 32) = a3;
    *(_DWORD *)(v11 + 164) = 0;
    *(_QWORD *)(v11 + 72) = 0;
    v14 = (uint64_t *)(v11 + 72);
    *(_QWORD *)(v11 + 152) = 0;
    *(_WORD *)(v11 + 176) = 30;
    if ((paramc_ParamGetUInt(*(_QWORD *)(v13 + 40), (uint64_t)"ppmaxpcreframeblocks", (unsigned int *)&v21 + 1) & 0x80000000) == 0)
      *(_WORD *)(v12 + 176) = WORD2(v21);
    *(_WORD *)(v12 + 178) = 50;
    if ((paramc_ParamGetUInt(*(_QWORD *)(v22 + 40), (uint64_t)"ppnumframesinblock", (unsigned int *)&v21 + 1) & 0x80000000) == 0)
      *(_WORD *)(v12 + 178) = WORD2(v21);
    *(_QWORD *)(v12 + 128) = 0;
    *(_QWORD *)(v12 + 80) = 0;
    *(_QWORD *)(v12 + 88) = 0;
    *(_DWORD *)(v12 + 96) = 0;
    *(_QWORD *)(v12 + 104) = 0;
    *(_QWORD *)(v12 + 112) = 0;
    *(_DWORD *)(v12 + 120) = 0;
    *(_QWORD *)(v12 + 136) = safeh_GetNullHandle();
    *(_QWORD *)(v12 + 144) = v15;
    v16 = extdata_ObjOpen(a1, a2, v14, 213);
    if ((v16 & 0x80000000) != 0)
      goto LABEL_17;
    *(_QWORD *)(v12 + 56) = 0;
    *(_DWORD *)(v12 + 64) = 0;
    v16 = nuance_pcre_ObjOpen(a1, a2, v12 + 56);
    if ((v16 & 0x80000000) != 0)
      goto LABEL_17;
    v16 = nuance_pcre_Init(*(_QWORD **)(v12 + 56), *(_QWORD *)(v12 + 64), *(unsigned __int16 *)(v12 + 176), *(_WORD *)(v12 + 178));
    if ((v16 & 0x80000000) != 0)
      goto LABEL_17;
    v17 = wordpar_loc_OpenParts((_WORD **)v12, &v21);
    if ((v17 & 0x80000000) != 0)
    {
      v5 = v17;
      if ((_DWORD)v21)
        return v5;
      goto LABEL_18;
    }
    *(_DWORD *)(v12 + 172) = a5;
    v16 = datac_ObjOpen(a1, a2, (uint64_t *)(v12 + 24), 213);
    if ((v16 & 0x80000000) != 0)
    {
LABEL_17:
      v5 = v16;
    }
    else
    {
      v18 = 0;
      while (1)
      {
        datac_RegisterBlock(*(_QWORD *)(v12 + 24), (unsigned __int16)aMETA_1[v18], (unsigned __int16)aMETA_1[v18 + 1], (unsigned __int16)aMETA_1[v18 + 2]);
        v5 = v19;
        if ((v19 & 0x80000000) != 0)
          break;
        v18 += 3;
        if (v18 == 15)
        {
          *a4 = v12;
          return v5;
        }
      }
    }
LABEL_18:
    wordpar_ObjClose(v12);
  }
  return v5;
}

uint64_t wordpar_ObjClose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t NullHandle;
  int v6;
  uint64_t v8;

  v1 = 2370838535;
  v8 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v8) & 0x80000000) == 0)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
      datac_ObjClose(v3);
    v4 = *(_QWORD *)(a1 + 72);
    if (v4)
    {
      extdata_ObjClose(v4);
      *(_QWORD *)(a1 + 72) = 0;
    }
    wordpar_loc_CloseParts(a1);
    NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), NullHandle, v6))
    {
      nuance_pcre_DeInit(*(_QWORD **)(a1 + 56), *(_QWORD *)(a1 + 64));
      nuance_pcre_ObjClose(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
    }
    heap_Free(*(_QWORD **)(v8 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t wordpar_loc_OpenParts(_WORD **a1, _DWORD *a2)
{
  uint64_t SpecificData;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  int v10;
  uint64_t v11;
  uint64_t Object;
  uint64_t v13;
  _WORD **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  int Str;
  _BOOL4 v22;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t (*v28)(uint64_t);
  _WORD **v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v27 = "BRKD";
  *((_QWORD *)&v27 + 1) = wordpar_getBRKDefs;
  v28 = wordpar_freeBRKDefs;
  v29 = a1;
  SpecificData = extdata_RegisterData((uint64_t)a1[9], &v27, 1u);
  if ((SpecificData & 0x80000000) != 0)
    return SpecificData;
  SpecificData = extdata_LoadSpecificData((uint64_t)a1[9], "PPWO", "BRKD");
  if ((SpecificData & 0x80000000) != 0)
    return SpecificData;
  v25 = 0;
  v26 = 0;
  if ((InitRsrcFunction(*a1, (int)a1[1], &v26) & 0x80000000) != 0)
    return 2370838535;
  v9 = (const char *)a1[19];
  if (v9)
  {
    v27 = 0uLL;
    if ((int)strlen(v9) >= 1)
    {
      v10 = 0;
      do
      {
        v9[(unsigned __int16)v10] = __tolower(v9[(unsigned __int16)v10]);
        ++v10;
        v9 = (const char *)a1[19];
      }
      while ((int)strlen(v9) > (unsigned __int16)v10);
    }
    if ((brk_InterfaceQueryEx(*((_QWORD *)a1[2] + 3), (uint64_t)v9, 1, 1, (uint64_t)&v27, (uint64_t)(a1 + 16)) & 0x80000000) == 0)
    {
      SpecificData = (*((uint64_t (**)(_QWORD, _QWORD, _QWORD, _WORD *, _WORD **))a1[16] + 4))(v27, *((_QWORD *)&v27 + 1), *a1, a1[1], a1 + 17);
      if ((SpecificData & 0x80000000) != 0)
        return SpecificData;
    }
  }
  else
  {
    log_OutPublic(*((_QWORD *)a1[2] + 4), (uint64_t)"PP_WORD_PARSER", 1811, 0, v5, v6, v7, v8, v24);
  }
  if (*((_DWORD *)a1 + 41))
  {
    Object = objc_GetObject(*(_QWORD *)(v26 + 48), (uint64_t)"FE_UDWL", &v25);
    if ((Object & 0x80000000) != 0)
    {
      v11 = Object;
LABEL_33:
      *a2 = 1;
      wordpar_ObjClose((uint64_t)a1);
      return v11;
    }
    v13 = v25;
    a1[13] = *(_WORD **)(v25 + 8);
    v14 = a1 + 13;
    *((_OWORD *)a1 + 7) = *(_OWORD *)(v13 + 16);
    v15 = objc_GetObject(*(_QWORD *)(v26 + 48), (uint64_t)"FE_DCTLKP", &v25);
    if ((v15 & 0x80000000) != 0)
    {
      v11 = v15;
      v19 = "FE_UDWL";
LABEL_32:
      objc_ReleaseObject(*(_QWORD *)(v26 + 48), (uint64_t)v19);
      *v14 = 0;
      v14[1] = 0;
      *((_DWORD *)v14 + 4) = 0;
      goto LABEL_33;
    }
    v16 = v25;
    v17 = *(_QWORD *)(v25 + 8);
    a1[10] = (_WORD *)v17;
    *(_OWORD *)(a1 + 11) = *(_OWORD *)(v16 + 16);
    v18 = wparser_ObjOpen2(*a1, (uint64_t)a1[1], (uint64_t)a1[7], (int)a1[8], (uint64_t *)a1 + 5, (uint64_t)a1[13], (uint64_t)a1[14], (uint64_t)a1[15], v17, (uint64_t)a1[11], (uint64_t)a1[12], (uint64_t)a1[9], (uint64_t)a1[16], (uint64_t)a1[17], (uint64_t)a1[18]);
    if ((v18 & 0x80000000) != 0)
    {
      v11 = v18;
      if (*v14)
      {
        objc_ReleaseObject(*(_QWORD *)(v26 + 48), (uint64_t)"FE_UDWL");
        *v14 = 0;
        a1[14] = 0;
        *((_DWORD *)a1 + 30) = 0;
      }
      if (!a1[10])
        goto LABEL_33;
      v19 = "FE_DCTLKP";
      v14 = a1 + 10;
      goto LABEL_32;
    }
  }
  else
  {
    safeh_GetNullHandle();
    SpecificData = wparser_ObjOpen1(*a1, (uint64_t)a1[1], a1 + 5);
    if ((SpecificData & 0x80000000) != 0)
      return SpecificData;
  }
  SpecificData = extdata_LoadData((uint64_t)a1[9], "PPWO");
  if ((SpecificData & 0x80000000) != 0)
    return SpecificData;
  v11 = tolhp_ObjOpen(*a1, (uint64_t)a1[1], (uint64_t **)a1 + 6);
  if ((v11 & 0x80000000) == 0)
  {
    v20 = *((_QWORD *)a1[2] + 5);
    *(_QWORD *)&v27 = 0;
    Str = paramc_ParamGetStr(v20, (uint64_t)"is_teng", &v27);
    v22 = 0;
    if ((Str & 0x80000000) == 0 && (_QWORD)v27)
    {
      if (*(_BYTE *)v27)
        v22 = memchr("yYtT1", *(char *)v27, 6uLL) != 0;
      else
        v22 = 0;
    }
    *((_DWORD *)a1 + 49) = v22;
  }
  return v11;
}

uint64_t wordpar_ObjReopen(_WORD **a1)
{
  uint64_t v1;
  uint64_t v3;
  int v5;
  uint64_t v6;

  v1 = 2370838535;
  v6 = 0;
  v5 = 0;
  if (a1 && (InitRsrcFunction(*a1, (int)a1[1], &v6) & 0x80000000) == 0)
  {
    v3 = extdata_FreeData((uint64_t)a1[9]);
    if ((v3 & 0x80000000) != 0 || (v3 = wordpar_loc_CloseParts((uint64_t)a1), (v3 & 0x80000000) != 0))
    {
      v1 = v3;
    }
    else
    {
      v1 = wordpar_loc_OpenParts(a1, &v5);
      if ((v1 & 0x80000000) == 0 || v5)
        return v1;
    }
    wordpar_ObjClose((uint64_t)a1);
  }
  return v1;
}

uint64_t wordpar_loc_CloseParts(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = tolhp_ObjClose(*(_QWORD *)(a1 + 48));
  if ((v2 & 0x80000000) != 0)
    return v2;
  v3 = *(_QWORD *)(a1 + 40);
  if (*(_DWORD *)(a1 + 164))
  {
    if (v3)
    {
      v4 = wparser_ObjClose2(v3);
      goto LABEL_8;
    }
  }
  else if (v3)
  {
    v4 = wparser_ObjClose1(v3);
LABEL_8:
    v5 = v4;
    if ((v4 & 0x80000000) != 0)
      return v5;
  }
  v6 = wordpar_freeBRKDefs(a1);
  v7 = *(_QWORD *)(a1 + 128);
  if (v7
    && (v6 = (*(uint64_t (**)(_QWORD, _QWORD))(v7 + 40))(*(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144)),
        (v8 = *(_QWORD *)(a1 + 128)) != 0))
  {
    v5 = brk_InterfaceRelease(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), v8);
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = safeh_GetNullHandle();
    *(_QWORD *)(a1 + 144) = v9;
  }
  else
  {
    v5 = v6;
  }
  if (*(_DWORD *)(a1 + 164))
  {
    if (*(_QWORD *)(a1 + 104))
    {
      objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), (uint64_t)"FE_UDWL");
      *(_QWORD *)(a1 + 104) = 0;
      *(_QWORD *)(a1 + 112) = 0;
      *(_DWORD *)(a1 + 120) = 0;
    }
    if (*(_QWORD *)(a1 + 80))
    {
      objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), (uint64_t)"FE_DCTLKP");
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 88) = 0;
      *(_DWORD *)(a1 + 96) = 0;
    }
  }
  return v5;
}

uint64_t wordpar_ProcessStart(uint64_t a1)
{
  uint64_t v1;
  _BOOL4 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v1 = 2370838535;
  v8 = 0;
  v9 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v9) & 0x80000000) == 0)
  {
    v3 = log_GetLogLevel(*(_QWORD *)(v9 + 32)) > 4;
    *(_WORD *)(a1 + 180) = 32;
    *(_DWORD *)(a1 + 168) = v3;
    __strcat_chk();
    v4 = 0;
    while (1)
    {
      v5 = datac_RequestBlock(*(_QWORD *)(a1 + 24), (unsigned __int16)aMETA_1[v4], 1u, &v8);
      if ((v5 & 0x80000000) != 0)
        break;
      v4 += 3;
      v6 = v8;
      *(_WORD *)(v8 + 16) = 0;
      *(_DWORD *)(v6 + 20) = 0;
      if (v4 == 15)
      {
        v5 = tolhp_ResetDcts(*(_QWORD *)(a1 + 48));
        if ((v5 & 0x80000000) == 0)
        {
          if (!*(_DWORD *)(a1 + 164))
            return 0;
          v5 = wparser_ProcessStart(*(_QWORD *)(a1 + 40));
          if ((v5 & 0x80000000) == 0)
            return 0;
        }
        return v5;
      }
    }
    return v5;
  }
  return v1;
}

uint64_t wordpar_ProcessEnd(uint64_t a1)
{
  if (!a1)
    return 2370838535;
  if (*(_DWORD *)(a1 + 164))
    return wparser_ProcessEnd(*(_QWORD **)(a1 + 40));
  return 0;
}

uint64_t wordpar_LoadFromStreamData(uint64_t a1, const void *a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned __int16 v18;
  _OWORD *v19;
  const char **v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  const char *v25;
  __int16 v26;
  int v27;
  char *v28;
  uint64_t v29;
  int *v30;
  const char **v31;
  int *v32;
  int v33;
  unsigned __int16 v34;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v38 = 0;
  v39 = 0;
  v37 = 0;
  v10 = *(_QWORD *)(a1 + 24);
  if (a3)
    v11 = a3;
  else
    v11 = 1;
  v12 = datac_RequestBlock(v10, 1020, v11, &v38);
  if ((v12 & 0x80000000) != 0)
    return v12;
  if (a2)
    memcpy(*(void **)(v38 + 8), a2, a3);
  *(_WORD *)(v38 + 16) = a3;
  v13 = datac_RequestBlock(*(_QWORD *)(a1 + 24), 1021, (unsigned __int16)a5 & 0xFFC0, &v39);
  if ((v13 & 0x80000000) == 0)
  {
    v14 = a5 >> 6;
    v15 = v39;
    v16 = *(_DWORD **)(v39 + 8);
    v17 = (unsigned __int16)(a5 >> 6);
    if (!(unsigned __int16)(a5 >> 6))
      goto LABEL_27;
    v18 = 0;
    v36 = *(_DWORD **)(v39 + 8);
    v19 = v16 + 12;
    v20 = (const char **)(a4 + 48);
    v21 = (unsigned __int16)(a5 >> 6);
    do
    {
      v22 = *(_OWORD *)v20;
      v23 = *((_OWORD *)v20 - 3);
      v24 = *((_OWORD *)v20 - 2);
      *(v19 - 1) = *((_OWORD *)v20 - 1);
      *v19 = v22;
      *(v19 - 3) = v23;
      *(v19 - 2) = v24;
      if (marker_hasNonConstCharPtrArg(*((_DWORD *)v19 - 7)))
      {
        v25 = *(v20 - 1);
        if (v25)
        {
          v26 = strlen(v25);
          LODWORD(v25) = 0;
          v18 += v26 + 1;
        }
      }
      else
      {
        LODWORD(v25) = *((_DWORD *)v20 - 2);
      }
      *((_DWORD *)v19 - 2) = (_DWORD)v25;
      if (*v20)
      {
        v27 = (unsigned __int16)strlen(*v20);
        if (v27)
        {
          v28 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, (v27 + 1));
          *(_QWORD *)v19 = v28;
          if (!v28)
            return 2370838538;
          strcpy(v28, *v20);
        }
      }
      v19 += 4;
      v20 += 8;
      --v21;
    }
    while (v21);
    *(_WORD *)(v39 + 16) = v14;
    v16 = v36;
    if (!v18)
      goto LABEL_28;
    v13 = datac_RequestBlock(*(_QWORD *)(a1 + 24), 1012, v18, &v37);
    if ((v13 & 0x80000000) == 0)
    {
      LOWORD(v14) = 0;
      v29 = *(_QWORD *)(v37 + 8);
      v30 = v36 + 5;
      v31 = (const char **)(a4 + 40);
      v32 = v36 + 5;
      do
      {
        v33 = *v32;
        v32 += 16;
        if (marker_hasNonConstCharPtrArg(v33) && *v31)
        {
          v34 = strlen(*v31);
          v30[5] = (unsigned __int16)v14;
          memcpy((void *)(v29 + (unsigned __int16)v14), *v31, v34);
          *(_BYTE *)(v29 + v34 + (unint64_t)(unsigned __int16)v14) = 0;
          LOWORD(v14) = v14 + v34 + 1;
        }
        v31 += 8;
        v30 = v32;
        --v17;
      }
      while (v17);
      v16 = v36;
      v15 = v37;
LABEL_27:
      *(_WORD *)(v15 + 16) = v14;
LABEL_28:
      if (v16[5] == 0x4000 && !v16[6] && !v16[7] && !wordpar_loc_existingSentParParams(a1))
      {
        v16[7] = a3;
        v16[9] = a3;
      }
    }
  }
  return v13;
}

BOOL wordpar_loc_existingSentParParams(uint64_t a1)
{
  unsigned int v2;

  v2 = 0;
  return (paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"pp_sentpar_posrefoffset", &v2) & 0x1FFF) == 0;
}

uint64_t wordpar_ResetData(uint64_t a1)
{
  uint64_t i;
  uint64_t result;
  uint64_t v4;

  v4 = 0;
  if (!a1)
    return 2370838535;
  for (i = 0; i != 4; ++i)
  {
    result = datac_RequestBlock(*(_QWORD *)(a1 + 24), (unsigned __int16)aTAG_1[i], 1u, &v4);
    if (i != 2 && (result & 0x80000000) == 0)
      *(_WORD *)(v4 + 16) = 0;
  }
  return result;
}

uint64_t wordpar_Process(uint64_t a1)
{
  uint64_t UInt;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t inserted;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned __int16 v26;
  int *v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  BOOL v31;
  char v32;
  int v33;
  _DWORD *v34;
  _DWORD *v35;
  int v36;
  _DWORD *v37;
  unsigned int v38;
  _DWORD *v39;
  int v40;
  unsigned int v41;
  int v43;
  uint64_t v44;
  uint64_t v46;
  unsigned int v47;
  _OWORD v48[4];
  uint64_t v49;
  uint64_t v50;

  v49 = 0;
  if (!a1)
    return 2370838535;
  memset(v48, 0, sizeof(v48));
  LODWORD(v50) = 0;
  UInt = paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"pp_sentpar_posrefoffset", (unsigned int *)&v49 + 1);
  if ((UInt & 0x1FFF) == 0x14)
  {
    HIDWORD(v49) = 0;
  }
  else
  {
    v3 = UInt;
    if ((UInt & 0x80000000) != 0)
      return v3;
  }
  v4 = paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"pp_sentpar_refreset", (unsigned int *)&v49);
  if ((v4 & 0x1FFF) == 0x14)
  {
    LODWORD(v49) = 0;
  }
  else
  {
    v3 = v4;
    if ((v4 & 0x80000000) != 0)
      return v3;
  }
  v5 = paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"pp_sentpar_refreset_mrk_tag", (unsigned int *)&v50);
  if ((v5 & 0x1FFF) == 0x14)
  {
    v6 = 0;
  }
  else
  {
    v3 = v5;
    if ((v5 & 0x80000000) != 0)
      return v3;
    v6 = v50;
  }
  DWORD1(v48[1]) = v6;
  v7 = paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"pp_sentpar_refreset_mrk_posref", (unsigned int *)&v48[1] + 2);
  if ((v7 & 0x1FFF) == 0x14)
  {
    DWORD2(v48[1]) = 0;
  }
  else
  {
    v3 = v7;
    if ((v7 & 0x80000000) != 0)
      return v3;
  }
  v8 = paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"pp_sentpar_refreset_mrk_lenref", (unsigned int *)&v48[1] + 3);
  if ((v8 & 0x1FFF) == 0x14)
  {
    HIDWORD(v48[1]) = 0;
  }
  else
  {
    v3 = v8;
    if ((v8 & 0x80000000) != 0)
      return v3;
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"(from sentpar) posRefOffset=%d,refReset=%d pRefResetMrk->tag %d posRef %d lenRef %d", v9, v10, v11, HIDWORD(v49));
  if (!*(_DWORD *)(a1 + 164))
  {
    inserted = wparser_ScanWords(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 24), SHIDWORD(v49), v49);
    if ((inserted & 0x80000000) != 0)
      return inserted;
    v12 = 0;
LABEL_31:
    marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1020, (uint64_t)"BEFORE wordpar_loc_nonasian_PreProcessExtendedTOIWords");
    marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"BEFORE wordpar_loc_nonasian_PreProcessExtendedTOIWords", 0, 0, 0);
    v15 = *(_QWORD *)(a1 + 24);
    v50 = 0;
    inserted = datac_RequestBlock(v15, 1021, 1u, &v50);
    if ((inserted & 0x80000000) == 0)
    {
      v16 = v50;
      v17 = *(unsigned __int16 *)(v50 + 16);
      if (v17 > 1)
      {
        v18 = *(_QWORD *)(v50 + 8);
        v19 = v18 + 20;
        v20 = 1;
        do
        {
          while (1)
          {
            v21 = v18 + ((unint64_t)(unsigned __int16)v20 << 6);
            if (*(_DWORD *)(v21 + 20) == 7 && *(_DWORD *)(v21 + 40) >= 0x46u)
              break;
            ++v20;
LABEL_43:
            if ((unsigned __int16)v17 <= (unsigned __int16)v20)
              goto LABEL_79;
          }
          v22 = *(_DWORD *)(v18 + ((unint64_t)(unsigned __int16)v20 << 6) + 32);
          if ((unsigned __int16)v17 <= (unsigned __int16)(v20 + 1))
            v23 = (unsigned __int16)(v20 + 1);
          else
            v23 = (unsigned __int16)v17;
          while ((unsigned __int16)v17 > (unsigned __int16)++v20)
          {
            if (*(_DWORD *)(v18 + ((unint64_t)(unsigned __int16)v20 << 6) + 20) == 7)
              goto LABEL_46;
          }
          v20 = v23;
LABEL_46:
          if ((unsigned __int16)v17 == (unsigned __int16)v20)
            v24 = (unsigned __int16)(*(_DWORD *)(v18 + 36) + *(_WORD *)(v18 + 32));
          else
            v24 = *(_DWORD *)(v18 + ((unint64_t)(unsigned __int16)v20 << 6) + 32);
          if ((unsigned __int16)v17 < 2u)
            goto LABEL_43;
          v25 = 0;
          v26 = 0;
          v27 = (int *)(v18 + 84);
          v28 = 1;
          do
          {
            v29 = v27[3];
            if (v29 > v24)
              break;
            v30 = *v27;
            v27 += 16;
            v31 = v30 == 1 && v29 >= v22;
            v32 = v31;
            v33 = v32 & (v29 < v24);
            if (v33)
              v25 = v28;
            if ((v33 & (v26 == 0)) != 0)
              v26 = v28;
            ++v28;
          }
          while ((unsigned __int16)v17 != v28);
          if (!v26 || !(_WORD)v25 || v26 == (unsigned __int16)v25)
            goto LABEL_43;
          v47 = v12;
          v34 = (_DWORD *)(v18 + ((unint64_t)(unsigned __int16)v25 << 6));
          v35 = (_DWORD *)(v18 + ((unint64_t)v26 << 6));
          v35[9] = v34[9] + v34[8] - v35[8];
          v35[7] = v34[7] + v34[6] - v35[6];
          v46 = v19;
          if ((unsigned __int16)v25 > v26)
          {
            v36 = (unsigned __int16)v25 - 1;
            v37 = (_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v25 << 6));
            v38 = ~v25 | 0xFFFF0000;
            v39 = v37;
            do
            {
              v40 = *v39;
              v39 -= 16;
              if (v40 == 1)
              {
                v41 = v37[3];
                if (v41 >= v22 && v41 < v24)
                {
                  v43 = *(unsigned __int16 *)(v16 + 16);
                  if (v36 + 2 != v43)
                  {
                    memmove(v37 - 5, (const void *)(v18 + ((unint64_t)(v36 + 2) << 6)), (uint64_t)(int)(v38 + v43) << 6);
                    v16 = v50;
                  }
                  --*(_WORD *)(v16 + 16);
                }
              }
              v31 = v26 >= (unsigned __int16)v36--;
              ++v38;
              v37 = v39;
            }
            while (!v31);
          }
          v17 = *(unsigned __int16 *)(v16 + 16);
          v12 = v47;
          v19 = v46;
        }
        while (v17 > (unsigned __int16)v20);
      }
LABEL_79:
      marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1020, (uint64_t)"BEFORE tolhp_RewritePhonTextInLhp");
      marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"BEFORE tolhp_RewritePhonTextInLhp", 0, 0, 0);
      inserted = tolhp_RewritePhonTextInLhp(*(_WORD ***)(a1 + 48), *(_QWORD *)(a1 + 24));
      if ((inserted & 0x80000000) == 0)
      {
        marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1020, (uint64_t)"AFTER tolhp_RewritePhonTextInLhp");
        marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"AFTER tolhp_RewritePhonTextInLhp", 0, 0, 0);
        if (!*(_DWORD *)(a1 + 164)
          || (inserted = wparser_insertRegionTags(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 24)),
              (inserted & 0x80000000) == 0))
        {
          v44 = *(_QWORD *)(a1 + 24);
          v50 = 0;
          inserted = datac_RequestBlock(v44, 1021, 1u, &v50);
          if ((inserted & 0x80000000) == 0)
          {
            inserted = marker_loc_FilterSyncMarkers(v50);
            if ((inserted & 0x80000000) == 0)
            {
              if ((v12 & 0x1FFF) == 0xA)
                return v12;
              else
                return 0;
            }
          }
        }
      }
    }
    return inserted;
  }
  v50 = 0;
  if ((datac_RequestBlock(*(_QWORD *)(a1 + 24), 1012, 1u, &v50) & 0x80000000) == 0)
    *(_WORD *)(a1 + 160) = *(_WORD *)(v50 + 16);
  v3 = wordpar_loc_AlignInputMarkers(a1);
  if ((v3 & 0x80000000) == 0)
  {
    marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"AFTER wordpar_loc_AlignInputMarkers", 0, 0, 0);
    v12 = 0;
    if (!*(_DWORD *)(a1 + 196))
    {
      v13 = wparser_NormalizeWords(*(unsigned __int16 **)(a1 + 40), *(_QWORD *)(a1 + 24), SHIDWORD(v49), v49, v48);
      v12 = v13;
      if ((v13 & 0x1FFF) == 0xA)
        v3 = v3;
      else
        v3 = v13;
    }
    marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"AFTER wparser_NormalizeWords", 0, 0, 0);
    if ((v3 & 0x80000000) == 0)
      goto LABEL_31;
  }
  return v3;
}

uint64_t wordpar_loc_AlignInputMarkers(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v16 = 0;
  v1 = datac_RequestBlock(*(_QWORD *)(a1 + 24), 1021, 1u, &v16);
  if ((v1 & 0x80000000) != 0)
    return v1;
  v2 = 2370838528;
  v3 = *(unsigned __int16 *)(v16 + 16);
  if (*(_WORD *)(v16 + 16))
  {
    v4 = *(_QWORD *)(v16 + 8);
    if (*(_DWORD *)(v4 + 20) == 0x4000)
    {
      if (v3 >= 2)
      {
        v5 = 1;
        do
        {
          v6 = v5 + 1;
          if (v6 >= v3
            || (v7 = (_OWORD *)(v4 + (v6 << 6)),
                v8 = (_OWORD *)(v4 + ((unint64_t)v5 << 6)),
                *((_DWORD *)v7 + 8) >= *((_DWORD *)v8 + 8)))
          {
            ++v5;
          }
          else
          {
            v5 = 0;
            v9 = *v7;
            v10 = v7[1];
            v11 = v7[2];
            v12 = v7[3];
            v13 = v8[1];
            *v7 = *v8;
            v7[1] = v13;
            v14 = v8[3];
            v7[2] = v8[2];
            v7[3] = v14;
            v17 = v9;
            v18 = v10;
            v19 = v11;
            v20 = v12;
            *v8 = v9;
            v8[1] = v10;
            v8[2] = v11;
            v8[3] = v12;
          }
        }
        while (v5 < v3);
      }
      return v1;
    }
  }
  return v2;
}

uint64_t wordpar_ResourceLoad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = 2370838529;
  if (!a1)
    return 2370838535;
  if (*(_DWORD *)(a1 + 164))
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 104)
                                                                                                  + 64))(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), a2, a3, a4, a5, a6);
  return result;
}

uint64_t wordpar_ResourceTypes(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t v7;

  v2 = 2370838535;
  v7 = 0;
  if (a1)
  {
    inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v7);
    if ((inited & 0x80000000) == 0)
    {
      if (*(_DWORD *)(a1 + 164))
        return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *))(*(_QWORD *)(a1 + 104) + 56))(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), a2);
      *a2 = 0;
      return inited;
    }
  }
  return v2;
}

uint64_t wordpar_ResourceUnload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  result = 2370838536;
  if (!a1)
    return 2370838535;
  if (*(_DWORD *)(a1 + 164))
  {
    v5 = *(_QWORD *)(a1 + 104);
    if (v5)
      return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v5 + 72))(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), a2, a3);
  }
  return result;
}

uint64_t wordpar_WriteTextAndMarkers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  int v17;
  char *v18;
  const char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t i;
  _DWORD *v29;
  int v30;
  _DWORD *v31;
  uint64_t v32;
  _WORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  _DWORD *v39;
  uint64_t j;
  int v41;
  BOOL v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  unsigned int v49;
  _DWORD *v50;
  unint64_t v51;
  _DWORD *v52;
  _DWORD *v53;
  int v54;
  _DWORD *v55;
  unsigned int v56;
  unint64_t v57;
  _DWORD *v58;
  unsigned int *v59;
  int v60;
  uint64_t v61;
  _DWORD *v62;
  unsigned int v63;
  uint64_t v65;
  uint64_t k;
  _DWORD *v67;
  _DWORD *v68;
  int *v69;
  unsigned int v70;
  _DWORD *v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  _DWORD *v78;
  _OWORD *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  int v83;
  _DWORD *v84;
  int v85;
  int v86;
  _DWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _OWORD *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  int v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _DWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _DWORD *v105;
  unsigned int *v106;
  _DWORD *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  char *v111;
  unsigned __int16 v112;
  int v113;
  const char *MarkerArgStr;
  int v115;
  uint64_t inserted;
  char *v117;
  const char *v118;
  const char *v119;
  unsigned int v120;
  const char *v121;
  unsigned __int16 v122;
  char *v123;
  uint64_t v124;
  char *v125;
  const char *v126;
  const char *v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  _DWORD *v159;
  uint64_t v160;
  unsigned int v161;
  _DWORD *v162;
  uint64_t v163;
  unsigned int v164;
  BOOL v165;
  unsigned __int16 v166;
  int v167;
  uint64_t v168;
  _DWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  char *v175;
  _DWORD *v176;
  int v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  unsigned int v184;
  uint64_t v185;
  unsigned __int16 v186;
  unsigned int v187;
  unsigned __int16 v188;
  char *v189;
  unsigned int v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  unsigned int v201;
  unsigned int v202;
  uint64_t v203;
  BOOL v204;
  uint64_t v205;
  uint64_t v206;
  unsigned int m;
  unsigned int v208;
  unsigned int v209;
  char *v210;
  unsigned int v211;
  unsigned __int16 v212;
  char *v213;
  char *v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  const char *v221;
  unsigned int v222;
  unsigned int v223;
  int v224;
  uint64_t v225;
  const void *v226;
  unsigned __int16 v227;
  int v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  int v234;
  char *v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  unsigned int v239;
  unint64_t v240;
  uint64_t v241;
  unsigned int v242;
  char *v243;
  _DWORD *v244;
  int v245;
  unsigned int v246;
  uint64_t v247;
  unsigned int v248;
  unsigned int v249;
  unint64_t v250;
  uint64_t v251;
  char *v252;
  _BOOL4 v253;
  int v254;
  unsigned int *v255;
  unsigned int *v256;
  uint64_t v257;
  unsigned int v258;
  int v259;
  unsigned int v260;
  uint64_t v262;
  uint64_t v263;
  unsigned int *v264;
  uint64_t v265;
  unsigned int *v266;
  int v267;
  unsigned int v268;
  unint64_t v269;
  unsigned int *v270;
  unsigned int v271;
  unsigned int v272;
  int LastPosRef;
  _DWORD *v274;
  uint64_t v275;
  unsigned int *v276;
  unint64_t v277;
  _DWORD *v278;
  int v279;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  _DWORD *v285;
  uint64_t v286;
  unint64_t v287;
  char *v288;
  unint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  const char *v296;
  unsigned int v297;
  const char *v298;
  unsigned int v299;
  uint64_t v300;
  char *v301;
  char *v302;
  int v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  char *v310;
  unint64_t n;
  int v312;
  const char *v313;
  int v314;
  int v315;
  int v316;
  unsigned int v317;
  uint64_t v318;
  char *v319;
  char *v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  unsigned int v327;
  uint64_t v328;
  char *v329;
  char *v330;
  int v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  unsigned int v338;
  uint64_t v339;
  unsigned __int16 v340;
  char *v341;
  unsigned __int16 v342;
  char *v343;
  _DWORD *v344;
  uint64_t v345;
  char *v346;
  _DWORD *v347;
  char *v348;
  uint64_t v349;
  char *v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  uint64_t v357;
  int v358;
  char *v359;
  _BOOL4 isMarkerUnknown;
  unsigned __int16 v361;
  unsigned __int16 v362;
  char *v363;
  const char *v364;
  const char *v365;
  char *v366;
  int v367;
  int v368;
  unint64_t v369;
  char *v370;
  uint64_t v371;
  unsigned int v372;
  unint64_t v373;
  const char *v374;
  char *v375;
  const char *v376;
  const char *v377;
  const char **v378;
  unint64_t v379;
  const char *v380;
  const char *v381;
  const char *v382;
  const char *v383;
  uint64_t v384;
  int v385;
  int v386;
  unint64_t v387;
  char *v388;
  const char *v389;
  const char *v390;
  const char *v391;
  const char *v392;
  const char *v393;
  const char *v394;
  const char *v395;
  _BOOL4 v396;
  const char *v397;
  const char *v398;
  const char *v399;
  unsigned __int16 v400;
  uint64_t v401;
  unsigned __int16 v402;
  uint64_t v403;
  char *v404;
  const char *v405;
  const char *v406;
  uint64_t v407;
  _BOOL4 v408;
  char *v409;
  const char *v410;
  const char *v411;
  int v412;
  uint64_t v413;
  char *v414;
  int v415;
  int v416;
  char *v417;
  unsigned int v418;
  unsigned int v419;
  unsigned int v420;
  char *v422;
  int v423;
  char *v424;
  unsigned int v425;
  unsigned int v426;
  unsigned int v427;
  uint64_t v429;
  unsigned int v430;
  unsigned __int16 v431;
  uint64_t v432;
  char *v433;
  unsigned __int16 v434;
  char *v435;
  char *v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  unint64_t v440;
  uint64_t v441;
  int v442;
  char *v443;
  uint64_t v444;
  uint64_t v445;
  char *v446;
  int v447;
  char *v448;
  uint64_t v449;
  int v450;
  unsigned int v451;
  BOOL v452;
  uint64_t v453;
  int v455;
  uint64_t v456;
  uint64_t v457;
  void *v458;
  _BYTE *v459;
  char *v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unsigned __int16 v464;
  uint64_t v465;
  unsigned int v466;
  uint64_t v467;
  uint64_t v468;
  unint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  _DWORD *v473;
  __int16 v474;
  int v475;
  int v476;
  unsigned int v477;
  int v478;
  BOOL v479;
  BOOL v480;
  uint64_t v481;
  uint64_t v482;
  int v483;
  uint64_t v484;
  uint64_t v485;
  _BYTE *v486;
  uint64_t v487;
  uint64_t v488;
  _DWORD *v489;
  uint64_t v490;
  unsigned int v491;
  unint64_t v492;
  int v493;
  unsigned int v494;
  unsigned int *v495;
  unsigned int v496;
  uint64_t v497;
  _DWORD *v498;
  int v499;
  unsigned int v500;
  uint64_t v501;
  unint64_t v502;
  unsigned int *v503;
  unsigned __int16 v504;
  unsigned int *v505;
  unsigned int v506;
  uint64_t v507;
  _OWORD *v508;
  __int128 *v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  unsigned int v513;
  unsigned int v514;
  unsigned int v515;
  int v516;
  unsigned int v517;
  uint64_t v518;
  char **v519;
  const char *v520;
  const char *v521;
  int v522;
  const char *v523;
  int v524;
  const char *v525;
  int v526;
  const char *v527;
  int v528;
  const char *v529;
  int v530;
  const char *v531;
  const char *v532;
  int v533;
  unsigned int v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  unsigned int v538;
  unsigned int v539;
  int v540;
  uint64_t v541;
  uint64_t v542;
  unint64_t v543;
  uint64_t v544;
  uint64_t *v545;
  int v546;
  int v547;
  uint64_t v548;
  int *v549;
  int v550;
  unsigned __int16 v551;
  unsigned __int16 v552;
  int v553;
  int v554;
  unsigned __int16 v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  size_t v562;
  int v563;
  int v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  __int16 v572;
  unsigned int v573;
  unsigned int v574;
  unsigned int v575;
  int v576;
  size_t v577;
  unsigned __int16 v578;
  _DWORD *v579;
  const char *v580;
  char *__dst;
  int __dsta;
  unsigned int v583;
  _DWORD *v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  char *v591;
  char *v592;
  char *v593;
  char *v594;
  char *v595;
  char *v596;
  char *v597;
  char *v598;
  char *v599;
  char *v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  unsigned int v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  int v610;
  unsigned int v611;
  uint64_t v612;
  unsigned __int16 v613;
  __int16 v614;
  uint64_t v615;
  uint64_t v616;
  int v617;
  int v618;
  char *v619;
  int v620;
  unint64_t v621;
  char *v622;
  uint64_t v623;
  uint64_t v624;
  unsigned __int16 v625;
  char *v626;
  int v627;
  char *v628;
  unsigned int v629;
  char *v630;
  char *__s;
  char *__sa;
  char *__sb;
  char *__sc;
  const char *v635;
  char *__s1;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  int v640;
  __int128 v641;
  __int128 v642;
  __int128 v643;
  __int128 v644;
  char *v645;
  __int16 v646;
  char v647;
  char *v648[2];

  if (!*(_DWORD *)(a1 + 164))
    return wordpar_loc_nonasian_WriteTextAndMarkers(a1, a2, a3, a4, a5);
  v638 = 0;
  v639 = 0;
  v637 = 0;
  v635 = 0;
  __s1 = 0;
  v640 = 0;
  if ((GetCfgParamVal(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 80), (uint64_t)"felid_act_lid", &__s1) & 0x80000000) == 0)*(_DWORD *)(a1 + 188) = strcmp(__s1, "yes") == 0;
  if ((GetCfgParamVal(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 80), (uint64_t)"felid_remove_internal_lang", &__s1) & 0x80000000) == 0)*(_DWORD *)(a1 + 192) = strcmp(__s1, "yes") == 0;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)(a1 + 32) + 136))(a2, a3, &v640);
  if ((v10 & 0x80000000) != 0)
    return v10;
  v11 = (datac_RequestBlock(*(_QWORD *)(a1 + 24), 1012, 1u, &v638) & 0x80000000) != 0 ? 0 : *(_QWORD *)(v638 + 8);
  v10 = datac_RequestBlock(*(_QWORD *)(a1 + 24), 1021, 1u, &v637);
  if ((v10 & 0x80000000) != 0)
    return v10;
  v13 = 2370838528;
  v14 = *(unsigned __int16 *)(v637 + 16);
  if (!*(_WORD *)(v637 + 16))
    return v13;
  v15 = *(_DWORD **)(v637 + 8);
  if (v15[5] != 0x4000)
    return v13;
  if (!*(_DWORD *)(a1 + 196))
  {
    v16 = v15 + 8;
    v17 = v640 - v15[8];
    do
    {
      *v16 += v17;
      v16 += 16;
      --v14;
    }
    while (v14);
  }
  marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1020, (uint64_t)"start wordpar_WriteTextAndMarkers()");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"start wordpar_WriteTextAndMarkers()", 0, 0, 0);
  v10 = datac_RequestBlock(*(_QWORD *)(a1 + 24), 1020, 1u, &v639);
  if ((v10 & 0x80000000) != 0)
    return v10;
  v18 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, *(unsigned __int16 *)(v639 + 16) + 1);
  if (!v18)
    return 2370838538;
  v19 = v18;
  v20 = strncpy(v18, *(const char **)(v639 + 8), *(unsigned __int16 *)(v639 + 16));
  v20[*(unsigned __int16 *)(v639 + 16)] = 0;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"L0:%s", v21, v22, v23, (uint64_t)v19);
  v24 = wordpar_loc_AlignInputMarkers(a1);
  if ((v24 & 0x80000000) != 0)
  {
    v65 = v24;
    goto LABEL_525;
  }
  v606 = v11;
  v602 = a2;
  v603 = a3;
  v605 = -1924128768;
  v604 = a4;
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"out wordpar_loc_AlignInputMarkers()", 0, 0, 0);
  v25 = v637;
  __s = (char *)v19;
  v625 = strlen(v19);
  v26 = *(unsigned __int16 *)(v637 + 16);
  if (v26 < 2)
    goto LABEL_132;
  v27 = *(_QWORD *)(a1 + 16);
  for (i = 1; i < v26; ++i)
  {
    v29 = &v15[16 * i];
    if (v29[5] == 7)
    {
      v30 = v29[10];
      if ((v30 - 15) <= 1)
      {
        v31 = &v15[16 * i];
        v33 = v31 + 4;
        v32 = *((unsigned __int16 *)v31 + 8);
        v34 = *((_QWORD *)v31 + 1);
        if (*((_WORD *)v31 + 8))
        {
          v35 = 0;
          v36 = v31 + 8;
          v37 = v31 + 6;
          do
          {
            if (!*(_DWORD *)(v34 + 8 * v35))
            {
              if (v26 >= 2)
              {
                v38 = *v36;
                v39 = v15 + 21;
                for (j = 1; j != v26; ++j)
                {
                  if (v39[3] > v38)
                    break;
                  if (*v39 == 998)
                  {
                    v41 = v39[1];
                    if (v41 == *v37)
                    {
                      v42 = v39[5] != v30 || j + 1 >= (unint64_t)v26;
                      if (!v42 && v39[16] == 41)
                      {
                        v43 = *(_DWORD *)(v34 + 8 * v35 + 4) + v41;
                        if (v15[7] + v15[6] < v43)
                          v43 = v15[7] + v15[6];
                        v44 = v39[2];
                        v39[17] = v43;
                        v39[18] = v44;
                        *v39 = 0;
                      }
                    }
                  }
                  v39 += 16;
                }
              }
              v45 = *(_DWORD *)(v34 + 8 * v35 + 4) + *v37;
              if (v15[7] + v15[6] < v45)
                v45 = v15[7] + v15[6];
              *v37 = v45;
            }
            ++v35;
          }
          while (v35 != v32);
LABEL_49:
          heap_Free(*(_QWORD **)(v27 + 8), v34);
          *((_QWORD *)v33 - 1) = 0;
          *v33 = 0;
          v26 = *(unsigned __int16 *)(v25 + 16);
          continue;
        }
        if (v34)
          goto LABEL_49;
        if (v26 >= 2)
        {
          v46 = 0;
          v47 = &v15[16 * i];
          v48 = v47 + 6;
          v49 = v47[8];
          v50 = v15 + 23;
          v51 = 1;
          do
          {
            v52 = &v15[16 * v51];
            if (v52[8] > v49)
              break;
            v54 = v52[5];
            v53 = v52 + 5;
            if (v54 == 998)
            {
              v55 = &v15[16 * v51];
              v56 = v55[6];
              if (v56 == *v48 && v55[10] == v30)
              {
                v57 = v51 + 1;
                if (v51 + 1 < v26 && (v58 = &v15[16 * v57], v58[5] == 41) && (v60 = v58[6], v59 = v58 + 6, v60 == v56))
                {
                  *v59 = v56;
                  v15[16 * v57 + 7] = v15[16 * v51 + 7];
                  *v53 = 0;
                }
                else if (v51 >= 2)
                {
                  v61 = v46;
                  v62 = v50;
                  while (1)
                  {
                    if (*(v62 - 2) == 41)
                    {
                      v63 = *(v62 - 1);
                      if (v63 < v56)
                        goto LABEL_68;
                      if (v63 == v56)
                        break;
                    }
                    v62 -= 16;
                    if (!(unint64_t)((unsigned __int16)v61-- & 0xFFFE))
                      goto LABEL_68;
                  }
                  *(v62 - 1) = v56;
                  *v62 = v15[16 * v51 + 7];
                  *v53 = 0;
                  break;
                }
              }
            }
LABEL_68:
            ++v51;
            v50 += 16;
            ++v46;
          }
          while (v26 != (unsigned __int16)v51);
        }
      }
    }
  }
  if (v26 < 2)
    goto LABEL_132;
  for (k = 1; k != v26; ++k)
  {
    v67 = &v15[16 * k];
    if (v67[5] == 998)
    {
      v68 = v67 + 6;
      v69 = v67 + 7;
      v70 = v67[8];
      v71 = v15 + 21;
      v72 = 1;
      while (1)
      {
        v73 = v71[3];
        if (v73 > v70)
          goto LABEL_83;
        if (*v71 == 41 && v71[1] == *v68)
          break;
        ++v72;
        v71 += 16;
        if (v26 == v72)
          goto LABEL_83;
      }
      v74 = *v69;
      v71[2] = *v69;
      if ((int)v72 + 1 < v26 && v71[16] == 39 && v71[19] == v73)
      {
        v75 = v72 + 1;
LABEL_93:
        v15[16 * v75 + 7] = v74;
        continue;
      }
      if ((v72 & 0xFFFE) != 0 && *(v71 - 16) == 39 && *(v71 - 13) == v73)
      {
        v75 = v72 - 1;
        goto LABEL_93;
      }
    }
LABEL_83:
    ;
  }
  v76 = 1;
  v77 = 1;
  v615 = v27;
  while (2)
  {
    v78 = &v15[16 * v76];
    if (v78[5] != 7)
    {
LABEL_95:
      v79 = &v15[16 * (unint64_t)(unsigned __int16)v77];
      v80 = *(_OWORD *)v78;
      v81 = *((_OWORD *)v78 + 1);
      v82 = *((_OWORD *)v78 + 3);
      v79[2] = *((_OWORD *)v78 + 2);
      v79[3] = v82;
      *v79 = v80;
      v79[1] = v81;
      ++v77;
      goto LABEL_96;
    }
    v83 = v78[10];
    if (v83 != 43)
    {
      if ((v83 - 15) <= 1)
        goto LABEL_95;
      goto LABEL_112;
    }
    v84 = &v15[16 * v76];
    if (!v84[9])
    {
      v98 = *((_QWORD *)v84 + 6);
      v97 = v84 + 12;
      v96 = v98;
      if (v98)
      {
        heap_Free(*(_QWORD **)(v27 + 8), v96);
        *v97 = 0;
      }
LABEL_112:
      v99 = &v15[16 * v76];
      v102 = *((_QWORD *)v99 + 1);
      v101 = v99 + 2;
      v100 = v102;
      if (v102)
      {
        heap_Free(*(_QWORD **)(v27 + 8), v100);
        *v101 = 0;
        LOWORD(v15[16 * v76 + 4]) = 0;
      }
      goto LABEL_96;
    }
    v85 = v84[8] - v15[8];
    if (v625 > (unsigned __int16)(*((_WORD *)v84 + 16) - *((_WORD *)v15 + 16) - 3))
    {
      v86 = (unsigned __int16)(v85 - 3);
      if (!strncmp(&__s[(unsigned __int16)(v85 - 3)], szPHONMARKER_BEG, 3uLL))
      {
        v87 = &v15[16 * v76];
        v90 = *((_QWORD *)v87 + 1);
        v89 = v87 + 2;
        v88 = v90;
        if (v90)
        {
          heap_Free(*(_QWORD **)(v615 + 8), v88);
          *v89 = 0;
          LOWORD(v15[16 * v76 + 4]) = 0;
        }
        v91 = &v15[16 * (unint64_t)(unsigned __int16)v77];
        v92 = *(_OWORD *)v78;
        v93 = *((_OWORD *)v78 + 1);
        v94 = *((_OWORD *)v78 + 3);
        v91[2] = *((_OWORD *)v78 + 2);
        v91[3] = v94;
        *v91 = v92;
        v91[1] = v93;
        *((_DWORD *)v91 + 8) = v15[8] + (unsigned __int16)v85;
        while (1)
        {
          LOWORD(v85) = v85 + 1;
          v95 = __s[(unsigned __int16)v85];
          if ((unsigned __int16)v85 >= v625)
            break;
          if (v95 == 31)
            goto LABEL_115;
        }
        if (v95 != 31)
          goto LABEL_116;
LABEL_115:
        v15[16 * (unint64_t)(unsigned __int16)v77 + 9] = (unsigned __int16)v85 - v86 - 3;
LABEL_116:
        ++v77;
      }
      v27 = v615;
    }
LABEL_96:
    if (++v76 < (unint64_t)*(unsigned __int16 *)(v25 + 16))
      continue;
    break;
  }
  *(_WORD *)(v25 + 16) = v77;
  if ((unsigned __int16)v77 < 2u)
  {
LABEL_132:
    *(_WORD *)(v25 + 16) = 1;
    goto LABEL_133;
  }
  v103 = 0;
  v104 = 1;
  do
  {
    v105 = &v15[16 * v104];
    if (v105[5] != 7 || v105[10] != 43)
    {
      v106 = v105 + 8;
      v107 = v15 + 26;
      v108 = (unsigned __int16)v77 - 1;
      v109 = v103;
      while (1)
      {
        if (v109)
        {
          if (*(v107 - 5) == 7 && *v107 == 43)
          {
            v110 = *(v107 - 2);
            if (*v106 >= v110 && *v106 < *(v107 - 1) + v110)
              break;
          }
        }
        --v109;
        v107 += 16;
        if (!--v108)
          goto LABEL_129;
      }
      *v106 = v110;
    }
LABEL_129:
    ++v104;
    ++v103;
  }
  while (v104 != (unsigned __int16)v77);
  *(_WORD *)(v25 + 16) = v77;
  LOWORD(v277) = 1;
  do
  {
    v277 = (unsigned __int16)v277;
    v278 = &v15[16 * (unint64_t)(unsigned __int16)v277];
    while (1)
    {
      v279 = v278[5];
      if (v279 == 998 || v279 == 0)
        break;
      ++v277;
      v278 += 16;
      if (v277 >= (unsigned __int16)v77)
        goto LABEL_133;
    }
    v281 = (unsigned __int16)v277 + 1;
    if ((unsigned __int16)v77 > v281)
    {
      memmove(v278, &v15[16 * v281], (uint64_t)((unsigned __int16)v77 - (int)v281) << 6);
      LOWORD(v77) = *(_WORD *)(v25 + 16);
    }
    LOWORD(v77) = v77 - 1;
    *(_WORD *)(v25 + 16) = v77;
  }
  while ((unsigned __int16)v77 > (unsigned __int16)v277);
LABEL_133:
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"out wordpar_loc_asian_ProcessWparserMarkers()", 0, 0, 0);
  v111 = (char *)v638;
  *(_QWORD *)&v641 = v637;
  v648[0] = (char *)v638;
  v112 = strlen((const char *)(a1 + 180));
  v647 = 0;
  v646 = 30;
  v645 = 0;
  v113 = *(unsigned __int16 *)(v638 + 16);
  MarkerArgStr = marker_getMarkerArgStr(2u);
  v115 = v113 + strlen(MarkerArgStr) + 1;
  if (*((unsigned __int16 *)v111 + 9) < (unsigned __int16)v115)
  {
    inserted = datac_RequestBlock(*(_QWORD *)(a1 + 24), 1012, (unsigned __int16)v115, v648);
    v19 = __s;
    if ((inserted & 0x80000000) != 0)
      goto LABEL_524;
    v111 = v648[0];
  }
  v117 = (char *)(*((_QWORD *)v111 + 1)
                + *((unsigned __int16 *)v111 + 1) * (unint64_t)*((unsigned __int16 *)v111 + 8));
  v118 = marker_getMarkerArgStr(2u);
  strcpy(v117, v118);
  v119 = marker_getMarkerArgStr(2u);
  v117[strlen(v119)] = 0;
  v120 = *((unsigned __int16 *)v648[0] + 8);
  *((_WORD *)v648[0] + 8) = v115;
  v121 = marker_getMarkerArgStr(1u);
  v122 = v115 + strlen(v121) + 1;
  v123 = v648[0];
  if (*((unsigned __int16 *)v648[0] + 9) < v122)
  {
    v124 = datac_RequestBlock(*(_QWORD *)(a1 + 24), 1012, v122, v648);
    if ((v124 & 0x80000000) != 0)
    {
      v65 = v124;
LABEL_282:
      v19 = __s;
      goto LABEL_525;
    }
    v123 = v648[0];
  }
  v601 = a5;
  v125 = (char *)(*((_QWORD *)v123 + 1)
                + *((unsigned __int16 *)v123 + 1) * (unint64_t)*((unsigned __int16 *)v123 + 8));
  v126 = marker_getMarkerArgStr(1u);
  strcpy(v125, v126);
  v127 = marker_getMarkerArgStr(1u);
  v125[strlen(v127)] = 0;
  v128 = *((unsigned __int16 *)v648[0] + 8);
  *((_WORD *)v648[0] + 8) = v122;
  HIBYTE(v646) = 76;
  strlen(__s);
  v19 = __s;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v129, v130, v131, (uint64_t)"before wordpar_loc_asian_deleteStrAddMarker(\"\\x1eL\")");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_deleteStrAddMarker(\"\\x1eL\")", 0, 0, 0);
  inserted = wordpar_loc_asian_deleteStrAddMarker(*(_QWORD *)(a1 + 24), __s, (const char *)&v646, v641, v120);
  if ((inserted & 0x80000000) != 0
    || (HIBYTE(v646) = 68,
        strlen(__s),
        v19 = __s,
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v132, v133, v134, (uint64_t)"before wordpar_loc_asian_deleteStrAddMarker(\"\\x1eD\")"), marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_deleteStrAddMarker(\"\\x1eD\")", 0, 0,
          0),
        inserted = wordpar_loc_asian_deleteStrAddMarker(*(_QWORD *)(a1 + 24), __s, (const char *)&v646, v641, v120),
        (inserted & 0x80000000) != 0))
  {
LABEL_524:
    v65 = inserted;
    goto LABEL_525;
  }
  strlen(__s);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v135, v136, v137, (uint64_t)"before wordpar_loc_asian_deleteStrAddMarker(\"\\x1eP\")");
  v19 = __s;
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_deleteStrAddMarker(\"\\x1eP\")", 0, 0, 0);
  HIBYTE(v646) = 80;
  v138 = wordpar_loc_asian_deleteStrAddMarker(*(_QWORD *)(a1 + 24), __s, (const char *)&v646, v641, v128);
  v65 = v138;
  if ((v138 & 0x80000000) != 0)
    goto LABEL_525;
  v583 = v138;
  strlen(__s);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v139, v140, v141, (uint64_t)"before wordpar_loc_asian_deleteStr(pBMarker, pStr, szPHONMARKER_BEG)");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_deleteStr(pBMarker, pStr, szPHONMARKER_BEG)", 0, 0, 0);
  wordpar_loc_asian_deleteStr(v641, __s, szPHONMARKER_BEG);
  strlen(__s);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v142, v143, v144, (uint64_t)"before wordpar_loc_asian_deleteStr(pBMarker, pStr, szWORD_END)");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_deleteStr(pBMarker, pStr, szWORD_END)", 0, 0, 0);
  wordpar_loc_asian_deleteStr(v641, __s, szWORD_END);
  strlen(__s);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v145, v146, v147, (uint64_t)"before wordpar_loc_asian_replaceStrWithStr(szWORD_BEG, \"\"), initial only");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_replaceStrWithStr(szWORD_BEG, \"\"), initial only", 0, 0, 0);
  wordpar_loc_asian_replaceStrWithStr(v641, __s, &byte_1DEBD87CE, 1);
  strlen(__s);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v148, v149, v150, (uint64_t)"before wordpar_loc_asian_replaceStrWithStr(szWORD_BEG, \" \")");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_replaceStrWithStr(szWORD_BEG, \" \")", 0, 0, 0);
  wordpar_loc_asian_replaceStrWithStr(v641, __s, " ", 0);
  strlen(__s);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v151, v152, v153, (uint64_t)"before wordpar_loc_asian_deleteStr(pBMarker, pStr, szMARKER_END)");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_deleteStr(pBMarker, pStr, szMARKER_END)", 0, 0, 0);
  wordpar_loc_asian_deleteStr(v641, __s, szMARKER_END);
  strlen(__s);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v154, v155, v156, (uint64_t)"after wordpar_loc_asian_deleteStr(pBMarker, pStr, szMARKER_END)");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"after wordpar_loc_asian_deleteStr(pBMarker, pStr, szMARKER_END)", 0, 0, 0);
  v157 = 0;
  v158 = v641;
  v159 = *(_DWORD **)(v641 + 8);
  v160 = *(unsigned __int16 *)(v641 + 16);
  if (v160 >= 2)
  {
    v157 = 0;
    v161 = v159[8];
    v162 = v159 + 26;
    v163 = v160 - 2;
    do
    {
      v164 = *(v162 - 2);
      if (v164 == v161 && *(v162 - 5) == 7 && *v162 == 43)
        v157 = 1;
      v162 += 16;
      v165 = v164 > v161 || v163-- == 0;
    }
    while (!v165);
  }
  v19 = __s;
  v166 = strlen(__s);
  if ((v166 & 0xFFFE) != 0 && *__s == 32 && !v157)
  {
    memmove(__s, __s + 1, v166);
    v158 = v641;
    v159 = *(_DWORD **)(v641 + 8);
    v160 = *(unsigned __int16 *)(v641 + 16);
    if (v160 >= 2)
    {
      v167 = v159[8];
      v168 = v160 - 1;
      v169 = v159 + 24;
      do
      {
        if (*v169 != v167)
          --*v169;
        v169 += 16;
        --v168;
      }
      while (v168);
    }
    --v159[9];
  }
  if (v160 < 2)
  {
    v626 = __s;
    goto LABEL_295;
  }
  v575 = v128;
  v170 = 0;
  v171 = -2;
  v172 = 3;
  v173 = 160;
  v174 = 1;
  v626 = __s;
  v611 = v112;
  v577 = v112;
  while (2)
  {
    v175 = (char *)&v159[16 * v174];
    v177 = *((_DWORD *)v175 + 5);
    v176 = v175 + 20;
    if (v177 != 7 || v159[16 * v174 + 10] != 43)
      goto LABEL_218;
    v579 = v176;
    __dst = (char *)&v159[16 * v174];
    v585 = v173;
    v587 = v172;
    v178 = strlen(v626);
    v621 = v174;
    v183 = *((_DWORD *)__dst + 8);
    v184 = v159[8];
    v42 = v183 >= v184;
    v185 = v183 - v184;
    if (!v42 || (v186 = v178, v187 = *((_DWORD *)__dst + 9), v188 = v187 - 1, v187 - 1 >= v178))
    {
      v384 = *((_QWORD *)__dst + 6);
      if (v384)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v384);
        *((_QWORD *)__dst + 6) = 0;
      }
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 1922, 0, v179, v180, v181, v182, v573);
      v282 = v606;
      goto LABEL_306;
    }
    v589 = v171;
    v591 = (char *)v159;
    v616 = v170;
    __sa = (char *)v19;
    v189 = &v626[v185];
    v190 = (unsigned __int16)*((_DWORD *)__dst + 9);
    v191 = 0;
    if ((unsigned __int16)*((_DWORD *)__dst + 9))
    {
      while (utf8_BelongsToSet(0, v189, v191, (unsigned __int16)v187))
      {
        if (v190 == ++v191)
        {
          v191 = v187;
          break;
        }
      }
      if ((_WORD)v187 == 1)
      {
        LOWORD(v187) = 1;
        v196 = v621;
        goto LABEL_180;
      }
    }
    else
    {
      v188 = -1;
    }
    v197 = v188;
    v196 = v621;
    while (utf8_BelongsToSet(0, v189, v197, v190))
    {
      LOWORD(v187) = v187 - 1;
      if (!(_WORD)--v197)
      {
        LOWORD(v187) = 1;
        break;
      }
    }
LABEL_180:
    v198 = (unsigned __int16)v187;
    if ((unsigned __int16)v187 <= (unsigned __int16)v191)
      goto LABEL_213;
    v199 = 0;
    v200 = 95;
    v201 = v191;
    v578 = v186;
    while (2)
    {
      v202 = v189[(unsigned __int16)v201];
      if (v202 <= 0x5B)
      {
        if (v202 == 35)
          goto LABEL_194;
        if (v202 == 18)
          break;
      }
      else
      {
        if (v202 != 95)
        {
          v165 = v202 == 92;
          v203 = (unsigned __int16)v201 + 1;
          v204 = !v165 || v203 >= v198;
          if (!v204 && v189[v203] == 84)
          {
            v205 = v198;
            v206 = v199;
            for (m = v201 + 2;
                  (unsigned __int16)m < (unsigned __int16)v187;
                  m += utf8_determineUTF8CharLength(v208))
            {
              v208 = v189[(unsigned __int16)m];
              if (v208 == 92)
                break;
            }
            if (v189[(unsigned __int16)m] == 92)
              v201 = m;
            v199 = v206;
            v198 = v205;
          }
          goto LABEL_202;
        }
LABEL_194:
        if (v200 != 35 && v200 != 95)
          v199 = (v199 + 1);
      }
LABEL_202:
      if (!utf8_BelongsToSet(0, v189, (unsigned __int16)v201, v190))
        v200 = v189[(unsigned __int16)v201];
      if ((unsigned __int16)++v201 < (unsigned __int16)v187)
        continue;
      break;
    }
    if (v200 == 35)
    {
      v196 = v621;
    }
    else
    {
      v196 = v621;
      if (v200 != 95)
        LOWORD(v199) = v199 + 1;
    }
    v209 = (unsigned __int16)v199;
    if (!(_WORD)v199)
    {
LABEL_213:
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 1818, 0, v192, v193, v194, v195, v573);
      v159 = v591;
      v214 = &v591[64 * v196];
      v217 = *((_QWORD *)v214 + 6);
      v216 = v214 + 48;
      v215 = v217;
      if (v217)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v215);
        *v216 = 0;
      }
      v170 = v616;
      v174 = v621;
      v158 = v641;
      v218 = *(unsigned __int16 *)(v641 + 16);
      v19 = __sa;
      v171 = v589;
      if (v621 + 1 != v218)
      {
        memmove(__dst, &v591[64 * v621 + 64], (uint64_t)((int)v218 - (int)v621) << 6);
        v158 = v641;
        LOWORD(v218) = *(_WORD *)(v641 + 16);
      }
      v173 = v585;
      v172 = v587;
      *(_WORD *)(v158 + 16) = v218 - 1;
      goto LABEL_218;
    }
    *v579 = 34;
    v210 = v648[0];
    v211 = *((unsigned __int16 *)v648[0] + 8);
    v212 = v187 - v191 + v211 + 1;
    if (*((unsigned __int16 *)v648[0] + 9) < v212)
    {
      inserted = datac_RequestBlock(*(_QWORD *)(a1 + 24), 1012, (unsigned __int16)(v187 - v191 + v211 + 1), v648);
      v19 = __sa;
      if ((inserted & 0x80000000) == 0)
      {
        v213 = *(char **)(v641 + 8);
        v210 = v648[0];
        v211 = *((unsigned __int16 *)v648[0] + 8);
        goto LABEL_221;
      }
      goto LABEL_524;
    }
    v19 = __sa;
    v213 = v591;
LABEL_221:
    v219 = &v213[64 * v196];
    v584 = v219 + 32;
    v592 = v213;
    v220 = (*((_DWORD *)v219 + 8) - *((_DWORD *)v213 + 8));
    v221 = v626;
    strncpy((char *)(*((_QWORD *)v210 + 1) + *((unsigned __int16 *)v210 + 1) * (unint64_t)v211), &v626[v220 + (unsigned __int16)v191], (unsigned __int16)(v187 - v191))[(unsigned __int16)v187 - (unsigned __int16)v191] = 0;
    v222 = *((unsigned __int16 *)v219 + 18);
    __sb = v219 + 36;
    *((_DWORD *)v219 + 10) = *((unsigned __int16 *)v648[0] + 8);
    *((_WORD *)v648[0] + 8) = v212;
    __dsta = v611 * v209;
    v223 = v611 * v209 - v222;
    if (v611 * v209 <= v222)
    {
      v225 = (uint64_t)v19;
      v226 = (const void *)(a1 + 180);
      v227 = v578;
    }
    else
    {
      v224 = strlen(v626);
      v225 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v626, v223 + v224 + 1);
      v221 = (const char *)v225;
      v226 = (const void *)(a1 + 180);
      v227 = v578;
      if (!v225)
      {
        v65 = 2370838538;
        goto LABEL_525;
      }
    }
    v580 = (const char *)v225;
    if (v220 >= *((_DWORD *)v592 + 9))
    {
      v576 = 0;
    }
    else
    {
      v576 = *(unsigned __int16 *)__sb;
      memmove((void *)&v221[v220], &v221[(v576 + v220)], v227 - (v576 + (_DWORD)v220) + 1);
    }
    v228 = 0;
    v229 = (char *)&v221[v220 + v611];
    v230 = (char *)&v221[v220];
    v626 = (char *)v221;
    do
    {
      v231 = (unsigned __int16)strlen(v221);
      memmove(v229, v230, (v231 - v220));
      v232 = v231 + v611;
      v221 = v626;
      v626[v232] = 0;
      memmove(v230, v226, v577);
      ++v228;
    }
    while (v209 > (unsigned __int16)v228);
    v233 = *(unsigned __int16 *)(v641 + 16);
    v234 = v589;
    if (v621 + 1 < v233)
    {
      v235 = &v592[v585];
      v236 = v587;
      do
      {
        if (*(_DWORD *)v235 > *v584)
          *(_DWORD *)v235 += __dsta - v576;
        v165 = (_DWORD)v233 == (unsigned __int16)v236++;
        v235 += 64;
      }
      while (!v165);
    }
    v237 = 0;
    v238 = 0;
    *(_DWORD *)__sb = 0;
    if (v209 <= 1)
      v239 = 1;
    else
      v239 = v209;
    v240 = (unint64_t)v239 << 6;
    do
    {
      v241 = datac_RequestBlock(*(_QWORD *)(a1 + 24), 1021, (unsigned __int16)(v233 + 1), &v641);
      v242 = v241;
      if ((v241 & 0x80000000) != 0)
      {
        v19 = v580;
        v65 = v241;
        goto LABEL_525;
      }
      v159 = *(_DWORD **)(v641 + 8);
      memmove((char *)v159 + v616 + v238 + 192, (char *)v159 + v616 + v238 + 128, (uint64_t)(v234 + *(unsigned __int16 *)(v641 + 16)) << 6);
      v233 = *(_QWORD *)(v641 + 8) + v616 + v238;
      *(_DWORD *)(v233 + 128) = 1;
      *(_DWORD *)(v233 + 148) = 1;
      v243 = (char *)&v159[16 * v621];
      *(_QWORD *)(v233 + 152) = *((_QWORD *)v243 + 3);
      v245 = *((_DWORD *)v243 + 8);
      v244 = v243 + 32;
      *(_DWORD *)(v233 + 160) = v237 + v245;
      *(_QWORD *)(v233 + 164) = v611;
      *(_WORD *)(v233 + 144) = 0;
      *(_QWORD *)(v233 + 136) = 0;
      *(_QWORD *)(v233 + 176) = 0;
      v158 = v641;
      v246 = *(unsigned __int16 *)(v641 + 16);
      LOWORD(v233) = v246 + 1;
      *(_WORD *)(v641 + 16) = v246 + 1;
      v238 += 64;
      v237 += v611;
      --v234;
    }
    while (v240 != v238);
    v247 = 0;
    v248 = *v244 + __dsta;
    v249 = (unsigned __int16)(v246 + 1);
    if ((((_WORD)v246 + 1) & 0xFFFE) == 0)
      v249 = 1;
    v250 = (unint64_t)v249 << 6;
    v583 = v242;
    while (1)
    {
      v251 = v247 + 64;
      if (v250 == v247 + 64)
        break;
      v252 = (char *)v159 + v247;
      v253 = v248 == *((_DWORD *)v252 + 24) && *((_DWORD *)v252 + 21) == 21;
      v247 = v251;
      if (v253)
        goto LABEL_276;
    }
    if ((unsigned __int16)(v246 + 1) < 2u)
    {
      v255 = v159;
      LOWORD(v257) = 1;
      v258 = v575;
    }
    else
    {
      v254 = v159[8];
      v255 = v159;
      v256 = v159 + 26;
      v257 = 1;
      v258 = v575;
      while (1)
      {
        v259 = *(v256 - 5);
        if (v259 == 21)
          v258 = *v256;
        v260 = *(v256 - 2) - v254;
        if (v248 <= v260 && (v259 == 7 || v248 != v260))
          break;
        ++v257;
        v256 += 16;
        if ((unsigned __int16)(v246 + 1) == v257)
          goto LABEL_265;
      }
    }
    v262 = (unsigned __int16)v257;
    if ((unsigned __int16)v257 != (unsigned __int16)v233)
    {
      v268 = v255[8];
      if (v262 < (unsigned __int16)v233)
      {
        v269 = v262 + 1;
        v270 = &v255[16 * v262 + 5];
        while (v248 == v270[3] - v268)
        {
          v272 = *v270;
          v270 += 16;
          v271 = v272;
          if (v269 < (unsigned __int16)(v246 + 1))
          {
            ++v269;
            if (v271 != 21)
              continue;
          }
          if (v271 != 21)
            break;
          v19 = v580;
          v159 = v255;
          goto LABEL_279;
        }
      }
      LastPosRef = wordpar_loc_asian_getLastPosRef(v255, (unsigned __int16)(v246 + 1), v248 - v268, v262, 0);
      v583 = datac_RequestBlock(*(_QWORD *)(a1 + 24), 1021, (unsigned __int16)(v246 + 2), &v641);
      if ((v583 & 0x80000000) != 0)
      {
        v19 = v580;
        goto LABEL_650;
      }
      v274 = *(_DWORD **)(v641 + 8);
      memmove(&v274[16 * (unint64_t)(v262 + 1)], &v274[16 * v262], (uint64_t)(*(unsigned __int16 *)(v641 + 16) - (int)v262) << 6);
      v275 = *(_QWORD *)(v641 + 8) + (v262 << 6);
      *(_DWORD *)v275 = 1;
      *(_DWORD *)(v275 + 20) = 21;
      *(_DWORD *)(v275 + 24) = LastPosRef;
      *(_DWORD *)(v275 + 28) = 0;
      *(_DWORD *)(v275 + 32) = v248;
      *(_WORD *)(v275 + 16) = 0;
      *(_QWORD *)(v275 + 8) = 0;
      *(_DWORD *)(v275 + 36) = 0;
      *(_DWORD *)(v275 + 40) = v258;
      v159 = v274;
      *(_QWORD *)(v275 + 48) = 0;
      v158 = v641;
      ++*(_WORD *)(v641 + 16);
LABEL_276:
      v19 = v580;
      goto LABEL_279;
    }
LABEL_265:
    v263 = datac_RequestBlock(*(_QWORD *)(a1 + 24), 1021, (unsigned __int16)(v246 + 2), &v641);
    v65 = v263;
    if ((v263 & 0x80000000) != 0)
    {
      v19 = v580;
      goto LABEL_525;
    }
    v264 = *(unsigned int **)(v641 + 8);
    v265 = *(unsigned __int16 *)(v641 + 16);
    v266 = &v264[16 * v265];
    *v266 = 1;
    v266[5] = 21;
    v583 = v263;
    if (v246)
      v267 = wordpar_loc_asian_getLastPosRef(v264, v265, v248 - v264[8], v246, 0);
    else
      v267 = v264[7] + v264[6];
    v276 = &v264[16 * v265];
    v276[6] = v267;
    v276[7] = 0;
    v276[8] = v248;
    v276[9] = 0;
    *((_WORD *)v276 + 8) = 0;
    *((_QWORD *)v276 + 1) = 0;
    v276[10] = v258;
    *((_QWORD *)v276 + 6) = 0;
    v158 = v641;
    ++*(_WORD *)(v641 + 16);
    v19 = v580;
    v159 = v264;
LABEL_279:
    v170 = v616;
    v174 = v621;
    v172 = v587;
    v171 = v589;
    v173 = v585;
LABEL_218:
    ++v174;
    ++v172;
    v173 += 64;
    v170 += 64;
    --v171;
    if (v174 < *(unsigned __int16 *)(v158 + 16))
      continue;
    break;
  }
LABEL_295:
  v159[9] = strlen(v626);
  v282 = v606;
  v65 = v583;
  if (*(_DWORD *)(a1 + 188)
    || (paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"langcode", &v645) & 0x80000000) == 0
    && (!LH_stricmp(v645, "MNC")
     || !LH_stricmp(v645, "MNT")
     || !LH_stricmp(v645, "SIC")))
  {
    marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"in wordpar_loc_asian_TranslateMarkup() before remove conflict internal LANG marker", 0, 0, 0);
    v283 = v641;
    LODWORD(v284) = *(unsigned __int16 *)(v641 + 16);
    if (v284 >= 2)
    {
      v285 = v159 + 16;
      v286 = -1;
      v287 = 1;
      do
      {
        if (*(v285 - 11) == 36 && v285[5] == 36 && *(v285 - 8) == v285[8] && !*v285)
        {
          memmove(v285 - 16, v285, (v286 + v284) << 6);
          v283 = v641;
          --*(_WORD *)(v641 + 16);
        }
        ++v287;
        v284 = *(unsigned __int16 *)(v283 + 16);
        --v286;
        v285 += 16;
      }
      while (v287 < v284);
    }
    marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"in wordpar_loc_asian_TranslateMarkup() after remove conflict internal LANG marker", 0, 0, 0);
  }
  if ((v583 & 0x80000000) != 0)
    goto LABEL_525;
LABEL_306:
  if ((datac_RequestBlock(*(_QWORD *)(a1 + 24), 1012, 1u, &v638) & 0x80000000) == 0)
    v282 = *(_QWORD *)(v638 + 8);
  v288 = *(char **)(v637 + 8);
  if (v282 && *(_WORD *)(v637 + 16))
  {
    v289 = 0;
    v290 = v288 + 40;
    do
    {
      if (marker_hasNonConstCharPtrArg(*((_DWORD *)v290 - 5)))
      {
        v291 = *(unsigned int *)v290;
        if ((_DWORD)v291 == -1)
          v292 = 0;
        else
          v292 = v282 + v291;
        *v290 = v292;
      }
      ++v289;
      v290 += 8;
    }
    while (v289 < *(unsigned __int16 *)(v637 + 16));
  }
  __s = (char *)v19;
  marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1020, (uint64_t)"before wordpar_loc_asian_PostProcessMarkers()");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_PostProcessMarkers()", 1, 0, 0);
  v293 = *(_QWORD *)(a1 + 16);
  v294 = *(_DWORD *)(a1 + 188);
  v295 = v637;
  v296 = marker_getMarkerArgStr(1u);
  v648[0] = 0;
  v297 = *(unsigned __int16 *)(v295 + 16);
  if (v297 >= 2)
  {
    v298 = v296;
    v299 = 1;
    do
    {
      v300 = v299 + 1;
      if (v300 < v297)
      {
        v301 = &v288[64 * (unint64_t)v299];
        v302 = &v288[64 * v300];
        if (*((_DWORD *)v301 + 8) == *((_DWORD *)v302 + 8))
        {
          v303 = *((_DWORD *)v301 + 5);
          if (v303 != 36 && v303 != 0x4000 && *(_DWORD *)&v288[64 * v300 + 20] == 36)
          {
            v641 = *(_OWORD *)v302;
            v304 = v641;
            v642 = *((_OWORD *)v302 + 1);
            v305 = v642;
            v643 = *((_OWORD *)v302 + 2);
            v306 = v643;
            v644 = *((_OWORD *)v302 + 3);
            v307 = v644;
            v308 = *((_OWORD *)v301 + 1);
            *(_OWORD *)v302 = *(_OWORD *)v301;
            *((_OWORD *)v302 + 1) = v308;
            v309 = *((_OWORD *)v301 + 3);
            *((_OWORD *)v302 + 2) = *((_OWORD *)v301 + 2);
            *((_OWORD *)v302 + 3) = v309;
            *(_OWORD *)v301 = v304;
            *((_OWORD *)v301 + 1) = v305;
            *((_OWORD *)v301 + 2) = v306;
            *((_OWORD *)v301 + 3) = v307;
            v297 = *(unsigned __int16 *)(v295 + 16);
            LODWORD(v300) = 1;
          }
        }
      }
      v299 = v300;
    }
    while (v300 < v297);
    if (v297 >= 2)
    {
      v310 = v288 + 84;
      for (n = 1; n < v297; ++n)
      {
        v312 = *(_DWORD *)v310;
        if (*(_DWORD *)v310 == 41)
        {
          v313 = marker_getMarkerArgStr(1u);
          if (!strcmp(v298, v313))
          {
            v314 = *((_DWORD *)v310 + 3);
            v315 = *((_DWORD *)v288 + 8);
            if (v314 != v315 && __s[v314 + ~v315] == 32)
              *((_DWORD *)v310 + 3) = v314 + 1;
          }
          *(_DWORD *)v310 = 1;
          v297 = *(unsigned __int16 *)(v295 + 16);
        }
        else if (v312 == 39)
        {
          v316 = *((_DWORD *)v310 + 3);
          if (v316 != *((_DWORD *)v288 + 8))
            *((_DWORD *)v310 + 3) = v316 + 1;
          *(_DWORD *)v310 = 37;
        }
        else if (v312 == 36)
        {
          v298 = *(const char **)(v310 + 20);
        }
        v310 += 64;
      }
      if (v297 >= 2)
      {
        v317 = 1;
        do
        {
          v318 = v317 + 1;
          if (v318 >= v297
            || (v319 = &v288[64 * v318],
                v320 = &v288[64 * (unint64_t)v317],
                *((_DWORD *)v319 + 8) >= *((_DWORD *)v320 + 8)))
          {
            ++v317;
          }
          else
          {
            v317 = 0;
            v641 = *(_OWORD *)v319;
            v321 = v641;
            v642 = *((_OWORD *)v319 + 1);
            v322 = v642;
            v643 = *((_OWORD *)v319 + 2);
            v323 = v643;
            v644 = *((_OWORD *)v319 + 3);
            v324 = v644;
            v325 = *((_OWORD *)v320 + 1);
            *(_OWORD *)v319 = *(_OWORD *)v320;
            *((_OWORD *)v319 + 1) = v325;
            v326 = *((_OWORD *)v320 + 3);
            *((_OWORD *)v319 + 2) = *((_OWORD *)v320 + 2);
            *((_OWORD *)v319 + 3) = v326;
            *(_OWORD *)v320 = v321;
            *((_OWORD *)v320 + 1) = v322;
            *((_OWORD *)v320 + 2) = v323;
            *((_OWORD *)v320 + 3) = v324;
            v297 = *(unsigned __int16 *)(v295 + 16);
          }
        }
        while (v317 < v297);
        if (v297 >= 2)
        {
          v327 = 1;
          do
          {
            v328 = v327 + 1;
            if (v328 < v297)
            {
              v329 = &v288[64 * (unint64_t)v327];
              v330 = &v288[64 * v328];
              if (*((_DWORD *)v329 + 8) == *((_DWORD *)v330 + 8))
              {
                v331 = *((_DWORD *)v329 + 5);
                if (v331 != 36 && v331 != 0x4000 && *(_DWORD *)&v288[64 * v328 + 20] == 36)
                {
                  v641 = *(_OWORD *)v330;
                  v332 = v641;
                  v642 = *((_OWORD *)v330 + 1);
                  v333 = v642;
                  v643 = *((_OWORD *)v330 + 2);
                  v334 = v643;
                  v644 = *((_OWORD *)v330 + 3);
                  v335 = v644;
                  v336 = *((_OWORD *)v329 + 1);
                  *(_OWORD *)v330 = *(_OWORD *)v329;
                  *((_OWORD *)v330 + 1) = v336;
                  v337 = *((_OWORD *)v329 + 3);
                  *((_OWORD *)v330 + 2) = *((_OWORD *)v329 + 2);
                  *((_OWORD *)v330 + 3) = v337;
                  *(_OWORD *)v329 = v332;
                  *((_OWORD *)v329 + 1) = v333;
                  *((_OWORD *)v329 + 2) = v334;
                  *((_OWORD *)v329 + 3) = v335;
                  v297 = *(unsigned __int16 *)(v295 + 16);
                  LODWORD(v328) = 1;
                }
              }
            }
            v327 = v328;
          }
          while (v328 < v297);
        }
      }
    }
  }
  if (!v294
    && ((paramc_ParamGetStr(*(_QWORD *)(v293 + 40), (uint64_t)"langcode", v648) & 0x80000000) != 0
     || LH_stricmp(v648[0], "MNC")
     && LH_stricmp(v648[0], "MNT")
     && LH_stricmp(v648[0], "SIC")))
  {
    if (*(unsigned __int16 *)(v295 + 16) < 2u)
    {
      v338 = 1;
    }
    else
    {
      v378 = (const char **)(v288 + 104);
      v379 = 1;
      do
      {
        if (*((_DWORD *)v378 - 5) == 36)
        {
          v380 = *v378;
          v381 = marker_getMarkerArgStr(9u);
          if (!strcmp(v380, v381) || (v382 = *v378, v383 = marker_getMarkerArgStr(0xAu), !strcmp(v382, v383)))
            *((_DWORD *)v378 - 5) = 999;
        }
        ++v379;
        v378 += 8;
      }
      while (v379 < *(unsigned __int16 *)(v295 + 16));
      v338 = (unsigned __int16)v379;
    }
    *(_WORD *)(v295 + 16) = v338;
  }
  else
  {
    v338 = *(unsigned __int16 *)(v295 + 16);
  }
  if (v338 >= 2)
  {
    v339 = 1;
    v340 = 1;
    while (1)
    {
      v341 = &v288[64 * v339];
      if (*((_DWORD *)v341 + 5) != 36)
        goto LABEL_374;
      v342 = v339 - 1;
      if (v339 == 1)
        break;
      v343 = &v288[64 * v339];
      v344 = v343 + 32;
      while (1)
      {
        v345 = v342;
        v346 = &v288[64 * (unint64_t)v342];
        v347 = v346 + 20;
        if (*((_DWORD *)v346 + 5) == 36)
          break;
        v342 = v345 - 1;
        if ((_WORD)v345 == 1)
          goto LABEL_375;
      }
      if (!strcmp(*((const char **)v343 + 5), *((const char **)v346 + 5)))
        break;
      v348 = &v288[64 * v345];
      if (*v344 != *((_DWORD *)v348 + 8))
        break;
      if (*(_DWORD *)v348 && (*(_DWORD *)v348 != 1 || *v344 != *((_DWORD *)v288 + 8)))
      {
        v354 = *(_OWORD *)v341;
        v355 = *((_OWORD *)v341 + 1);
        v356 = *((_OWORD *)v341 + 3);
        *((_OWORD *)v348 + 2) = *((_OWORD *)v341 + 2);
        *((_OWORD *)v348 + 3) = v356;
        *(_OWORD *)v348 = v354;
        *((_OWORD *)v348 + 1) = v355;
        goto LABEL_377;
      }
      if (!*(_DWORD *)v341)
      {
        *v347 = 999;
LABEL_374:
        v349 = v340;
LABEL_376:
        v350 = &v288[64 * v349];
        v351 = *(_OWORD *)v341;
        v352 = *((_OWORD *)v341 + 1);
        v353 = *((_OWORD *)v341 + 3);
        *((_OWORD *)v350 + 2) = *((_OWORD *)v341 + 2);
        *((_OWORD *)v350 + 3) = v353;
        *(_OWORD *)v350 = v351;
        *((_OWORD *)v350 + 1) = v352;
        ++v340;
      }
LABEL_377:
      if (++v339 >= (unint64_t)*(unsigned __int16 *)(v295 + 16))
        goto LABEL_381;
    }
LABEL_375:
    v349 = v340;
    goto LABEL_376;
  }
  v340 = 1;
LABEL_381:
  *(_WORD *)(v295 + 16) = v340;
  marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1020, (uint64_t)"before wordpar_loc_asian_deleteMarkerForUnknown()");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_deleteMarkerForUnknown()", 0, 0, 0);
  v357 = v637;
  if (*(_WORD *)(v637 + 16))
  {
    v358 = 0;
    do
    {
      v359 = &v288[64 * (unint64_t)(unsigned __int16)v358];
      v641 = *(_OWORD *)v359;
      v642 = *((_OWORD *)v359 + 1);
      v643 = *((_OWORD *)v359 + 2);
      v644 = *((_OWORD *)v359 + 3);
      isMarkerUnknown = wordpar_loc_asian_isMarkerUnknown((uint64_t)&v641);
      v361 = *(_WORD *)(v357 + 16);
      if (isMarkerUnknown)
      {
        if (!*(_WORD *)(v357 + 16))
          goto LABEL_406;
        v362 = 0;
        do
        {
          v363 = &v288[64 * (unint64_t)v362];
          if (*((_DWORD *)v363 + 5) == 36
            && (v364 = (const char *)*((_QWORD *)v363 + 5), v365 = marker_getMarkerArgStr(9u), strcmp(v364, v365))
            && *(_DWORD *)v363 == 1
            && (v366 = &v288[64 * (unint64_t)(unsigned __int16)v358],
                *((_DWORD *)v366 + 8) == *(_DWORD *)&v288[64 * (unint64_t)v362 + 32]))
          {
            memmove(v366, &v288[64 * (unint64_t)((unsigned __int16)v358 + 1)], (uint64_t)(*(unsigned __int16 *)(v357 + 16) - (unsigned __int16)v358) << 6);
            v361 = *(_WORD *)(v357 + 16) - 1;
            *(_WORD *)(v357 + 16) = v361;
            v358 -= (unsigned __int16)v358 >= v362;
          }
          else
          {
            ++v362;
            v361 = *(_WORD *)(v357 + 16);
          }
        }
        while (v362 < v361);
      }
      ++v358;
    }
    while ((unsigned __int16)v358 < v361);
    if (v361)
    {
      v367 = 0;
      v368 = 0;
      v369 = 0;
      do
      {
        v370 = &v288[64 * v369];
        if (*((_DWORD *)v370 + 5) != 36)
          goto LABEL_404;
        v641 = *(_OWORD *)v370;
        v642 = *((_OWORD *)v370 + 1);
        v643 = *((_OWORD *)v370 + 2);
        v644 = *((_OWORD *)v370 + 3);
        if (wordpar_loc_asian_isMarkerUnknown((uint64_t)&v641))
        {
          ++v369;
        }
        else
        {
          if (!*(_DWORD *)v370)
          {
            v368 = 0;
LABEL_404:
            ++v369;
            goto LABEL_405;
          }
          if (!v368)
            goto LABEL_404;
          memmove(&v288[64 * v369], &v288[64 * (unint64_t)(v367 + 1)], (uint64_t)(*(unsigned __int16 *)(v357 + 16) - v367) << 6);
          --*(_WORD *)(v357 + 16);
        }
        v368 = 1;
LABEL_405:
        v367 = (unsigned __int16)v369;
      }
      while (v369 < *(unsigned __int16 *)(v357 + 16));
    }
  }
LABEL_406:
  if (*(_DWORD *)(a1 + 192))
  {
    marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1020, (uint64_t)"before wordpar_loc_asian_deleteConflictingLangMarker()");
    marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_deleteConflictingLangMarker()", 0, 0, 0);
    if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"langcode", &v635) & 0x80000000) == 0)
    {
      v371 = v637;
      v372 = *(unsigned __int16 *)(v637 + 16);
      if (*(_WORD *)(v637 + 16))
      {
        v373 = 0;
        v374 = v635;
        v375 = v288 + 20;
        while (*(_DWORD *)v375 != 36)
        {
LABEL_413:
          ++v373;
          v375 += 64;
          if (v373 >= v372)
          {
            v627 = 0;
            v373 = 0;
            v617 = 0;
            goto LABEL_439;
          }
        }
        v376 = *(const char **)(v375 + 20);
        v377 = marker_getMarkerArgStr(0xBu);
        if (strcmp(v376, v377))
        {
          v372 = *(unsigned __int16 *)(v371 + 16);
          goto LABEL_413;
        }
        v617 = *((_DWORD *)v375 - 5);
        v372 = *(unsigned __int16 *)(v371 + 16);
        v627 = 1;
LABEL_439:
        if (v372)
        {
          v385 = 0;
          v386 = 0;
          v387 = 0;
          v622 = &v288[64 * v373];
          while (1)
          {
            v388 = &v288[64 * v387];
            if (*((_DWORD *)v388 + 5) != 36)
              goto LABEL_454;
            v389 = (const char *)*((_QWORD *)v388 + 5);
            v390 = marker_getMarkerArgStr(1u);
            if (!strcmp(v389, v390))
              break;
            if (!strcmp(v389, v374))
              break;
            v391 = marker_getMarkerArgStr(2u);
            if (!strcmp(v389, v391))
              break;
            ++v387;
            v386 = 1;
LABEL_455:
            v385 = (unsigned __int16)v387;
            if (v387 >= *(unsigned __int16 *)(v371 + 16))
              goto LABEL_464;
          }
          if (*(_DWORD *)v388)
          {
            if (v386)
            {
              v392 = v374;
              if (!v627
                || *((_DWORD *)v622 + 5) == 36
                && *((_DWORD *)v388 + 5) == 36
                && ((v393 = (const char *)*((_QWORD *)v622 + 5),
                     v394 = (const char *)*((_QWORD *)v388 + 5),
                     v395 = marker_getMarkerArgStr(0xBu),
                     !strcmp(v393, v395))
                  ? (v397 = marker_getMarkerArgStr(2u), v396 = strcmp(v394, v397) == 0)
                  : (v396 = 0),
                    (v398 = marker_getMarkerArgStr(0xBu), !strcmp(v393, v398))
                 && (v399 = marker_getMarkerArgStr(1u), !(strcmp(v394, v399) | v617))
                 || v396))
              {
                ++v387;
              }
              else
              {
                memmove(&v288[64 * v387], &v288[64 * (unint64_t)(v385 + 1)], (uint64_t)(*(unsigned __int16 *)(v371 + 16) - v385) << 6);
                --*(_WORD *)(v371 + 16);
              }
              v386 = 1;
              v374 = v392;
              goto LABEL_455;
            }
          }
          else
          {
            v386 = 0;
          }
LABEL_454:
          ++v387;
          goto LABEL_455;
        }
      }
    }
  }
LABEL_464:
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"before wparser_InsertWordMarkers()", 0, 0, 0);
  v19 = __s;
  inserted = wparser_InsertWordMarkers(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 24), __s, (_WORD *)(v637 + 16));
  if ((inserted & 0x80000000) != 0)
    goto LABEL_524;
  v400 = 1;
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_RemoveBlankLatinRegions()", 1, 0, 0);
  v401 = v637;
  if (*(unsigned __int16 *)(v637 + 16) < 2u)
    goto LABEL_527;
  v402 = 1;
  v628 = (char *)v637;
  while (2)
  {
    v403 = v402;
    v404 = &v288[64 * (unint64_t)v402];
    if (*((_DWORD *)v404 + 5) != 36)
      goto LABEL_509;
    v405 = (const char *)*((_QWORD *)v404 + 5);
    if (!v405)
      goto LABEL_509;
    v406 = marker_getMarkerArgStr(2u);
    if (strcmp(v405, v406))
      goto LABEL_509;
    if (*(unsigned __int16 *)(v401 + 16) <= (unsigned __int16)(v402 + 1))
    {
LABEL_496:
      v424 = &v288[64 * v403];
      v425 = (unsigned __int16)(*((_WORD *)v424 + 16) - *((_DWORD *)v288 + 8));
      if (v425 >= *((_DWORD *)v288 + 9))
        goto LABEL_503;
      do
      {
        v426 = __s[v425];
        v427 = (v426 < 0x21) & (0x100002600uLL >> v426);
        v425 = (unsigned __int16)(utf8_determineUTF8CharLength(v426) + v425);
      }
      while (v427 == 1 && v425 < *((_DWORD *)v288 + 9));
      if (v427)
      {
LABEL_503:
        if (*(_DWORD *)v424 == 1)
        {
          v429 = v402 + 1;
          v401 = (uint64_t)v628;
          v430 = *((unsigned __int16 *)v628 + 8);
          if (v429 < v430)
          {
            memmove(&v288[64 * v403], &v288[64 * v429], (uint64_t)(int)(v430 + ~v402) << 6);
            LOWORD(v430) = *((_WORD *)v628 + 8);
          }
          v431 = v430 - 1;
          *((_WORD *)v628 + 8) = v430 - 1;
          goto LABEL_510;
        }
        *(_DWORD *)&v288[64 * v403 + 20] = 999;
      }
      v401 = (uint64_t)v628;
      goto LABEL_509;
    }
    v407 = (unsigned __int16)(v402 + 1);
    v408 = 1;
    while (2)
    {
      v409 = &v288[64 * v407];
      if (*((_DWORD *)v409 + 5) == 36)
      {
        v410 = (const char *)*((_QWORD *)v409 + 5);
        if (v410)
        {
          v411 = marker_getMarkerArgStr(2u);
          v408 = strcmp(v410, v411) == 0;
          v412 = 1;
          goto LABEL_476;
        }
        v412 = 1;
LABEL_479:
        v413 = v402;
        v414 = &v288[64 * (unint64_t)v402];
        v415 = *((_DWORD *)v414 + 8);
        v416 = *((_DWORD *)v288 + 8);
        v417 = &v288[64 * v407 + 32];
        v418 = (unsigned __int16)(v415 - v416);
        if (v418 >= *(_DWORD *)v417 - v416)
        {
LABEL_488:
          v422 = &v288[64 * v407];
          v423 = *((_DWORD *)v422 + 7) + *((_DWORD *)v414 + 7);
          *((_DWORD *)v422 + 6) = *((_DWORD *)v414 + 6);
          *((_DWORD *)v422 + 7) = v423;
          *(_DWORD *)v417 = v415;
          *((_DWORD *)v422 + 9) += *((_DWORD *)v414 + 9);
          if (*(_DWORD *)v414 == 1)
          {
            v401 = (uint64_t)v628;
            memmove(v414, &v288[64 * (unint64_t)(v402 + 1)], (uint64_t)(*((unsigned __int16 *)v628 + 8) + ~v402) << 6);
            v408 = 0;
            --*((_WORD *)v628 + 8);
            v402 = v407;
          }
          else
          {
            v408 = 0;
            *(_DWORD *)&v288[64 * v413 + 20] = 999;
            v402 = v407;
            v401 = (uint64_t)v628;
          }
        }
        else
        {
          v618 = v412;
          do
          {
            v419 = __s[v418];
            v420 = (v419 < 0x21) & (0x100002600uLL >> v419);
            v418 = (unsigned __int16)(utf8_determineUTF8CharLength(v419) + v418);
          }
          while (v420 == 1 && v418 < *(_DWORD *)v417 - *((_DWORD *)v288 + 8));
          if (v420)
          {
            v415 = *((_DWORD *)v414 + 8);
            v412 = v618;
            v413 = v402;
            goto LABEL_488;
          }
          v408 = 0;
          v401 = (uint64_t)v628;
          v412 = v618;
        }
      }
      else
      {
        v412 = 0;
LABEL_476:
        if (!v408)
          goto LABEL_479;
      }
      if (!v412 && ++v407 < (unint64_t)*(unsigned __int16 *)(v401 + 16))
        continue;
      break;
    }
    if (!v412)
    {
      v403 = v402;
      goto LABEL_496;
    }
LABEL_509:
    v431 = *(_WORD *)(v401 + 16);
LABEL_510:
    if (++v402 < v431)
      continue;
    break;
  }
  if (v431 >= 2u)
  {
    v432 = 1;
    v400 = 1;
    while (1)
    {
      v433 = &v288[64 * v432];
      if (*((_DWORD *)v433 + 5) == 36)
      {
        v434 = v432 - 1;
        if (v432 != 1)
        {
          while (1)
          {
            v435 = &v288[64 * (unint64_t)v434];
            if (*((_DWORD *)v435 + 5) == 36)
              break;
            if (!--v434)
              goto LABEL_519;
          }
          if (!strcmp(*(const char **)&v288[64 * v432 + 40], *((const char **)v435 + 5)))
          {
            if (*(_DWORD *)v433)
              goto LABEL_520;
            *((_DWORD *)v433 + 5) = 999;
          }
        }
      }
LABEL_519:
      v436 = &v288[64 * (unint64_t)v400];
      v437 = *(_OWORD *)v433;
      v438 = *((_OWORD *)v433 + 1);
      v439 = *((_OWORD *)v433 + 3);
      *((_OWORD *)v436 + 2) = *((_OWORD *)v433 + 2);
      *((_OWORD *)v436 + 3) = v439;
      *(_OWORD *)v436 = v437;
      *((_OWORD *)v436 + 1) = v438;
      ++v400;
      v431 = *(_WORD *)(v401 + 16);
LABEL_520:
      if (++v432 >= (unint64_t)v431)
        goto LABEL_527;
    }
  }
  v400 = 1;
LABEL_527:
  *(_WORD *)(v401 + 16) = v400;
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_InsertSpaceAfterPhoneticMarkers()", 1, 0, 0);
  v440 = *(unsigned __int16 *)(v637 + 16);
  v623 = *(_QWORD *)(a1 + 16);
  if (v440 < 2)
  {
    v19 = __s;
    marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), v623, *(_QWORD *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_InsertSpaceBeforeTNMarkers()", 1, 0, 0);
  }
  else
  {
    v441 = (uint64_t)__s;
    v442 = strlen(__s);
    v443 = v288 + 160;
    v444 = 2;
    v445 = 1;
    v598 = v288;
    do
    {
      v612 = v444;
      v619 = v443;
      v607 = v445 + 1;
      if (v445 + 1 < v440 && *(_DWORD *)&v288[64 * v445 + 20] == 34)
      {
        v446 = v443;
        while (1)
        {
          v447 = *(_DWORD *)&v288[64 * v444 + 20];
          if (v447 == 21)
          {
            v448 = &v288[64 * v444 + 32];
            v449 = (unsigned __int16)(*(_DWORD *)v448 - *((_DWORD *)v288 + 8));
            v450 = (unsigned __int16)v442 - (_DWORD)v449;
            if ((unsigned __int16)v442 <= v449)
              break;
            v451 = *(unsigned __int8 *)(v441 + v449);
            v452 = v451 > 0x20;
            v453 = (1 << v451) & 0x100002600;
            if (!v452 && v453 != 0)
              break;
            v455 = v442;
            v456 = heap_Realloc(*(uint64_t **)(v623 + 8), v441, (unsigned __int16)v442 + 2);
            if (!v456)
            {
LABEL_620:
              v65 = 2370838538;
              goto LABEL_282;
            }
            v441 = v456;
            v457 = v456;
            v458 = (void *)(v456 + (v449 + 1));
            v459 = (_BYTE *)(v457 + v449);
            memmove(v458, v459, v450);
            *v459 = 32;
            v442 = v455 + 1;
            *(_BYTE *)(v457 + (unsigned __int16)(v455 + 1)) = 0;
            v460 = v446;
            v461 = v444;
            v288 = v598;
            do
            {
              if (*(_DWORD *)v448 < *(_DWORD *)v460)
                ++*(_DWORD *)v460;
              ++v461;
              v460 += 64;
            }
            while (v461 < v440);
            ++*((_DWORD *)v598 + 9);
            v447 = 21;
          }
          if (++v444 < v440)
          {
            v446 += 64;
            if (v447 != 21)
              continue;
          }
          break;
        }
      }
      v444 = v612 + 1;
      v443 = v619 + 64;
      v445 = v607;
    }
    while (v607 != v440);
    v19 = (const char *)v441;
    marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_InsertSpaceBeforeTNMarkers()", 1, 0, 0);
  }
  v462 = *(_QWORD *)(a1 + 16);
  v463 = *(_QWORD *)(a1 + 24);
  v464 = strlen(v19);
  *(_QWORD *)&v641 = 0;
  v465 = datac_RequestBlock(v463, 1021, 1u, &v641);
  v65 = v465;
  if ((v465 & 0x80000000) != 0)
    goto LABEL_525;
  v466 = *(unsigned __int16 *)(v641 + 16);
  if (!*(_WORD *)(v641 + 16) || (v467 = *(_QWORD *)(v641 + 8), *(_DWORD *)(v467 + 20) != 0x4000))
  {
    v65 = 2370838528;
    goto LABEL_525;
  }
  if (v466 <= 1)
  {
    v600 = (char *)v19;
  }
  else
  {
    v613 = v464;
    v624 = v463;
    v586 = v462;
    v583 = v465;
    v468 = 0;
    v469 = 1;
    v470 = 96;
    __s = (char *)v19;
    v471 = (uint64_t)v19;
    do
    {
      v472 = v467 + (v469 << 6);
      v475 = *(_DWORD *)(v472 + 32);
      v473 = (_DWORD *)(v472 + 32);
      v474 = v475;
      v476 = *(_DWORD *)(v467 + 32);
      LOWORD(v477) = v475 - v476;
      v478 = *(v473 - 3);
      if (v478 == 7)
      {
        v477 = (unsigned __int16)v477;
        v479 = *(_DWORD *)(v467 + (v469 << 6) + 40) == 16;
      }
      else
      {
        v479 = v478 == 21;
        v477 = (unsigned __int16)v477;
      }
      v480 = !v479 || v477 == 0;
      if (!v480 && *(_BYTE *)(v471 + v477 - 1) != 32 && *(_BYTE *)(v471 + v477) != 32)
      {
        v588 = v468;
        v590 = v470;
        v629 = v477;
        v481 = v477;
        v482 = v468;
        do
        {
          if (!v482)
            break;
          v483 = *(_DWORD *)(v467 + v482 + 20);
          if (v483 == 34)
            goto LABEL_616;
          v482 -= 64;
        }
        while (v483 != 21);
        v608 = v467;
        v484 = heap_Realloc(*(uint64_t **)(v586 + 8), v471, v613 + 2);
        if (v484)
          v471 = v484;
        v599 = (char *)v471;
        if (!v484)
          goto LABEL_620;
        v485 = v484;
        v486 = (_BYTE *)(v484 + v481);
        memmove((void *)(v484 + v629 + 1), v486, (int)(v613 - v629));
        v620 = 0;
        *v486 = 32;
        *(_BYTE *)(v485 + (unsigned __int16)(v613 + 1)) = 0;
        if ((unsigned __int16)(v613 + 1) > (unsigned __int16)(v629 + 1))
        {
          v487 = 0;
          do
          {
            if (*(_BYTE *)(v471 + (unsigned __int16)(v629 + 1) + v487) == 32)
              break;
            ++v487;
          }
          while ((unsigned __int16)(v613 - v474 + v476) != (unsigned __int16)v487);
          v620 = v487;
        }
        if (v469 < (unsigned __int16)v466)
        {
          v488 = (unsigned __int16)v466;
          v489 = (_DWORD *)(v608 + v590);
          do
          {
            if (*v489 >= *v473)
              ++*v489;
            --v488;
            v489 += 16;
          }
          while (v469 != v488);
        }
        v467 = v608;
        ++*(_DWORD *)(v608 + 36);
        v490 = 1;
        v491 = v629;
        do
        {
          if ((unsigned __int16)v490 >= (unsigned __int16)v466)
            break;
          v492 = (unsigned __int16)v490;
          v493 = *(_DWORD *)(v467 + ((unint64_t)(unsigned __int16)v490 << 6) + 20);
          while (1)
          {
            if (v493 != 1)
              goto LABEL_614;
            v494 = *(_DWORD *)(v467 + 32) + v491;
            v495 = (unsigned int *)(v467 + 32 + (v492 << 6));
            v496 = *v495;
            if (v494 <= *v495)
              goto LABEL_614;
            v497 = v467 + (v492 << 6);
            v499 = *(_DWORD *)(v497 + 36);
            v498 = (_DWORD *)(v497 + 36);
            v500 = v499 + v496 - v494;
            if (v499 + v496 <= v494)
              break;
            v501 = v490;
            v502 = (unsigned __int16)v490;
            if ((unsigned __int16)v490 >= (unsigned __int16)v466)
              goto LABEL_592;
            v503 = (unsigned int *)(v467 + ((unint64_t)(unsigned __int16)v490 << 6) + 32);
            v504 = v490;
            while (*(v503 - 3) != 21 || *v503 <= v496)
            {
              ++v504;
              v503 += 16;
              if ((unsigned __int16)v466 == v504)
                goto LABEL_592;
            }
            if (!v504)
              goto LABEL_592;
            v518 = v467 + ((unint64_t)v504 << 6);
            v520 = *(const char **)(v518 + 40);
            v519 = (char **)(v518 + 40);
            v609 = v467;
            v521 = marker_getMarkerArgStr(3u);
            v522 = strcmp(v520, v521);
            v467 = v609;
            if (!v522)
              goto LABEL_612;
            v593 = *v519;
            v523 = marker_getMarkerArgStr(4u);
            v524 = strncmp(v593, v523, 6uLL);
            v467 = v609;
            if (!v524)
              goto LABEL_612;
            v594 = *v519;
            v525 = marker_getMarkerArgStr(6u);
            v526 = strcmp(v594, v525);
            v467 = v609;
            if (!v526)
              goto LABEL_612;
            v595 = *v519;
            v527 = marker_getMarkerArgStr(7u);
            v528 = strcmp(v595, v527);
            v467 = v609;
            if (!v528)
              goto LABEL_612;
            v596 = *v519;
            v529 = marker_getMarkerArgStr(8u);
            v530 = strcmp(v596, v529);
            v467 = v609;
            if (!v530)
              goto LABEL_612;
            v531 = *v519;
            v532 = marker_getMarkerArgStr(5u);
            v533 = strcmp(v531, v532);
            v467 = v609;
            if (v533)
            {
LABEL_592:
              v490 = v501;
              if (v469 > v502)
              {
                v505 = (unsigned int *)(v467 + (v502 << 6) + 32);
                while (1)
                {
                  v506 = *v505;
                  v505 += 16;
                  if (v506 >= *(_DWORD *)(v467 + (v469 << 6) + 32))
                    break;
                  if (v469 == ++v502)
                  {
                    v502 = v469;
                    break;
                  }
                }
                v490 = v502;
              }
              v583 = datac_RequestBlock(v624, 1021, (unsigned __int16)(*(_WORD *)(v641 + 16) + 1), &v641);
              if ((v583 & 0x80000000) != 0)
              {
                v19 = __s;
LABEL_650:
                v65 = v583;
                goto LABEL_525;
              }
              v507 = *(_QWORD *)(v641 + 8);
              v502 = (unsigned __int16)v490;
              v508 = (_OWORD *)(v507 + ((unint64_t)(unsigned __int16)v490 << 6));
              memmove((void *)(v507 + ((unint64_t)((unsigned __int16)v490 + 1) << 6)), v508, (uint64_t)((unsigned __int16)v466 - (unsigned __int16)v490) << 6);
              v467 = v507;
              v509 = (__int128 *)(v507 + (v492 << 6));
              v510 = *v509;
              v511 = v509[1];
              v512 = v509[3];
              v508[2] = v509[2];
              v508[3] = v512;
              *v508 = v510;
              v508[1] = v511;
              LOWORD(v466) = *(_WORD *)(v641 + 16) + 1;
              *(_WORD *)(v641 + 16) = v466;
              v513 = *((_DWORD *)v509 + 9);
              v42 = v513 >= v500;
              v514 = v513 - v500;
              if (!v42)
                v514 = 0;
              *((_DWORD *)v509 + 9) = v514;
              v516 = *((_DWORD *)v509 + 6);
              v515 = *((_DWORD *)v509 + 7);
              v42 = v515 >= v500;
              v517 = v515 - v500;
              if (!v42)
                v517 = 0;
              *((_DWORD *)v509 + 7) = v517;
              *((_DWORD *)v508 + 8) = *(_DWORD *)(v507 + ((v469 + 1) << 6) + 32);
              *((_DWORD *)v508 + 9) = v620;
              *((_DWORD *)v508 + 6) = v516 + v517;
              *((_DWORD *)v508 + 7) = v500;
              v491 = v629;
            }
            else
            {
LABEL_612:
              v491 = v629;
              *v498 = *(_DWORD *)(v467 + 32) + v629 - *v495;
              v490 = v501;
            }
            v493 = *(_DWORD *)(v467 + (v502 << 6) + 20);
            v492 = v502;
          }
          v491 = v629;
LABEL_614:
          v534 = *(_DWORD *)(v467 + ((unint64_t)(unsigned __int16)(v490 + 1) << 6) + 32);
          v490 = (v490 + 1);
        }
        while (v534 <= *(_DWORD *)(v467 + 32) + v491);
        ++v613;
        v471 = (uint64_t)v599;
LABEL_616:
        v468 = v588;
        v470 = v590;
      }
      ++v469;
      v468 += 64;
      v470 += 64;
    }
    while (v469 < (unsigned __int16)v466);
    v600 = (char *)v471;
    v19 = (const char *)v471;
    v65 = v583;
    if ((v583 & 0x80000000) != 0)
      goto LABEL_525;
  }
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_HandleExtendedToi()", 0, 0, 0);
  v535 = v637;
  v536 = *(_QWORD *)(a1 + 24);
  v630 = *(char **)(a1 + 16);
  *(_QWORD *)&v641 = 0;
  v537 = *(_QWORD *)(v637 + 8);
  v538 = datac_RequestBlock(v536, 1012, 1u, &v641);
  if ((v538 & 0x80000000) != 0)
  {
    v605 = v538;
    goto LABEL_655;
  }
  __sc = (char *)v535;
  v539 = *(unsigned __int16 *)(v535 + 16);
  if (v539 < 2)
  {
LABEL_642:
    marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_MarkerPostProcessing()", 1, 0, 0);
    v557 = wordpar_loc_MarkerPostProcessing(*(_QWORD *)(a1 + 24), v637);
    if ((v557 & 0x80000000) == 0)
    {
      marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_InsertNLUMarkers()", 1, 0, 0);
      v557 = wordpar_loc_InsertNLUMarkers(a1, v637);
      if ((v557 & 0x80000000) == 0)
      {
        v561 = *(_QWORD *)(v637 + 8);
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Write2DB) \"%s\"", v558, v559, v560, (uint64_t)v600);
        marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1021, (uint64_t)"at end()", 1, 0, 0);
        v562 = strlen(v600);
        if (!v562)
        {
          if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32)))
            log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), 34, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=depes",
              0,
              0);
          v564 = 0;
          goto LABEL_660;
        }
        v557 = (*(uint64_t (**)(uint64_t, uint64_t, char *, _QWORD))(*(_QWORD *)(a1 + 32) + 104))(v602, v603, v600, (v562 + 1));
        if ((v557 & 0x80000000) == 0)
        {
          if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32)))
          {
            v563 = strlen(v600);
            log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), 34, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=depes",
              (uint64_t)v600,
              (v563 + 1));
          }
          v564 = 1;
LABEL_660:
          *(_WORD *)(v639 + 16) = 0;
          v65 = wordpar_loc_writeMarkersToOutputStream(a1, v604, v601, v561, v637, v564);
          if ((v65 & 0x80000000) == 0)
          {
            if (*(_WORD *)(a1 + 160))
            {
              v569 = *(_QWORD *)(v638 + 8);
              if (v569)
              {
                v570 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), v569, *(unsigned __int16 *)(v638 + 2) * (unint64_t)*(unsigned __int16 *)(a1 + 160));
                if (v570)
                {
                  v571 = v638;
                  *(_QWORD *)(v638 + 8) = v570;
                  v572 = *(_WORD *)(a1 + 160);
                  *(_WORD *)(v571 + 16) = v572;
                  *(_WORD *)(v571 + 18) = v572;
                }
                else
                {
                  v65 = 2370838538;
                }
              }
            }
          }
          goto LABEL_653;
        }
      }
    }
    v65 = v557;
LABEL_653:
    v19 = v600;
    goto LABEL_525;
  }
  v540 = 1;
  LOWORD(v541) = 1;
  while (1)
  {
    v542 = (unsigned __int16)v541;
    v543 = v537 + ((unint64_t)(unsigned __int16)v541 << 6);
    if (*(_DWORD *)(v543 + 20) == 34)
    {
      v545 = (uint64_t *)(v543 + 48);
      v544 = *(_QWORD *)(v543 + 48);
      if (v544)
        break;
    }
LABEL_641:
    LOWORD(v541) = v541 + 1;
    v540 = (unsigned __int16)v541;
    if ((unsigned __int16)v541 >= (unsigned __int16)v539)
      goto LABEL_642;
  }
  v546 = *(_DWORD *)(v537 + ((unint64_t)(unsigned __int16)v541 << 6) + 32);
  v547 = *(_DWORD *)(v537 + 32);
  v548 = (v540 + 1);
  LOWORD(v541) = v540 + 1;
  if ((unsigned __int16)v539 > (unsigned __int16)(v540 + 1))
  {
    v541 = (unsigned __int16)(v540 + 1);
    v549 = (int *)(v537 + 20 + (v541 << 6));
    while (1)
    {
      v550 = *v549;
      v549 += 16;
      if (v550 == 21)
        break;
      if ((unsigned __int16)v539 == ++v541)
        goto LABEL_654;
    }
  }
  if ((unsigned __int16)v541 != (unsigned __int16)v539)
  {
    if (*(_DWORD *)(v537 + (v542 << 6) + 56))
    {
      heap_Free(*((_QWORD **)v630 + 1), v544);
      *v545 = 0;
      LOWORD(v539) = *((_WORD *)__sc + 8);
    }
    else
    {
      v551 = v546 - v547;
      v614 = v546 - v547;
      v597 = (char *)(v537 + ((unint64_t)(unsigned __int16)v541 << 6));
      v610 = *((_DWORD *)v597 + 8) - v547;
      v552 = strlen(v600);
      memmove(&v600[v551], &v600[(unsigned __int16)v610], v552 - (unsigned __int16)v610 + 1);
      v553 = strlen(v600);
      *(_DWORD *)(v537 + 36) = v553;
      wordpar_loc_adjustMarkerPositions(*((unsigned __int16 *)__sc + 8), v537, 1u, (unsigned __int16)v610, (unsigned __int16)v553, (__int16)(v614 - v610));
      heap_Free(*((_QWORD **)v630 + 1), *v545);
      *v545 = 0;
      v554 = *((unsigned __int16 *)__sc + 8);
      if ((_DWORD)v548 != v554)
      {
        memmove((void *)v543, (const void *)(v537 + (v548 << 6)), (uint64_t)(v554 - v540) << 6);
        LOWORD(v554) = *((_WORD *)__sc + 8);
      }
      v555 = v554 - 1;
      *((_WORD *)__sc + 8) = v555;
      v556 = (unsigned __int16)v541 + 1;
      if ((_DWORD)v556 != v555)
      {
        memmove(v597, (const void *)(v537 + (v556 << 6)), (uint64_t)(v555 - (unsigned __int16)v541) << 6);
        v555 = *((_WORD *)__sc + 8);
      }
      LOWORD(v539) = v555 - 1;
      *((_WORD *)__sc + 8) = v539;
    }
    goto LABEL_641;
  }
LABEL_654:
  heap_Free(*((_QWORD **)v630 + 1), v544);
  *v545 = 0;
  log_OutPublic(*((_QWORD *)v630 + 4), (uint64_t)"PP_WORD_PARSER", 1929, 0, v565, v566, v567, v568, v574);
LABEL_655:
  v19 = v600;
  v65 = v605;
LABEL_525:
  heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v19);
  return v65;
}

uint64_t wordpar_GetWParserType(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  if (!a1)
    return 2370838535;
  result = 0;
  *a2 = *(_DWORD *)(a1 + 164);
  return result;
}

uint64_t wordpar_loc_adjustMarkerPositions(uint64_t result, uint64_t a2, unsigned int a3, int a4, int a5, int a6)
{
  _DWORD *v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v12;

  if (a3 < result)
  {
    v6 = (_DWORD *)(a2 + ((unint64_t)a3 << 6) + 36);
    v7 = result - (unint64_t)a3;
    do
    {
      v8 = *(v6 - 1);
      v9 = *(_DWORD *)(a2 + 32);
      v10 = v9 + a5;
      if (v8 <= v9 + a4 || v8 >= v10)
      {
        if (v8 >= v10)
        {
          *(v6 - 1) = v8 + a6;
        }
        else if (*(v6 - 4) == 1)
        {
          v12 = *v6 + v8;
          if (v12 > *(_DWORD *)(a2 + 36) + v9 && v12 != -a6)
            *v6 += a6;
        }
      }
      else
      {
        *(v6 - 1) = v9 + a4;
      }
      v6 += 16;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t GetCfgParamVal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5)
{
  uint64_t v6;
  char *v7;
  char *v8;
  char **v10;
  unsigned __int8 __c;
  __int16 __c_1;

  *a5 = "no";
  __c_1 = -1;
  __c = 0;
  v10 = 0;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, char ***, __int16 *, unsigned __int8 *))(a3 + 96))(a1, a2, "fecfg", a4, &v10, &__c_1, &__c);
  if ((v6 & 0x80000000) == 0 && __c_1)
  {
    v7 = *v10;
    v8 = strchr(*v10, __c);
    if (v8)
    {
      *v8 = 0;
      v7 = *v10;
    }
    *a5 = v7;
  }
  return v6;
}

uint64_t wordpar_loc_asian_deleteStrAddMarker(uint64_t a1, char *__s, const char *a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  unsigned __int16 v8;
  unsigned __int16 v9;
  unsigned __int16 v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned __int16 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int *v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  int v31;
  int v32;
  unsigned __int16 v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  uint64_t v38;
  unsigned int v39;
  _DWORD *v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unsigned int v47;
  int LastPosRef;
  unsigned __int16 v49;
  unsigned int *__src;
  unsigned int *__srca;
  unsigned int v53;
  unsigned __int16 v54;
  unsigned __int16 v56;
  uint64_t v57;

  v5 = a4;
  v57 = a4;
  v8 = strlen(__s);
  v56 = v8;
  v9 = strlen(a3);
  v10 = v9;
  v11 = *(unsigned int **)(v5 + 8);
  if (v8)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = v9;
    v53 = v8;
    v16 = v8;
    v49 = v8;
    v54 = v9;
    do
    {
      if (!__s[(unsigned __int16)v12])
        break;
      if (__s[(unsigned __int16)v12] != *a3)
        goto LABEL_19;
      v17 = v12;
      if (!v15)
        goto LABEL_12;
      v18 = 0;
      LODWORD(v17) = v12;
      do
      {
        v19 = __s[(unsigned __int16)v17];
        v20 = a3[v18];
        v17 = (v17 + 1);
        ++v18;
      }
      while (v19 == v20 && v15 > (unsigned __int16)v18);
      if (v19 == v20)
      {
LABEL_12:
        v22 = v11;
        v23 = v13;
        v24 = datac_RequestBlock(a1, 1021, (unsigned __int16)(*(_WORD *)(v5 + 16) + 1), &v57);
        v14 = v24;
        if ((v24 & 0x80000000) != 0)
          goto LABEL_46;
        v5 = v57;
        v11 = *(unsigned int **)(v57 + 8);
        v25 = v23;
        v26 = (unsigned __int16)(v12 - v23 * v10);
        v27 = *(unsigned __int16 *)(v57 + 16);
        v28 = &v11[16 * v27];
        v29 = v11[8];
        if (v27 != 1 && (unsigned __int16)(*(v28 - 8) - v29) > v26)
        {
          if (v27 < 2)
          {
            LOWORD(v27) = 0;
          }
          else if (v26 >= (unsigned __int16)(*((_WORD *)v11 + 48) - v29))
          {
            v33 = 1;
            while (v27 > ++v33)
            {
              v34 = v33;
              if (v26 < (unsigned __int16)(LOWORD(v11[16 * (unint64_t)v33 + 8]) - v29))
              {
                v47 = v24;
                v32 = v33;
                goto LABEL_30;
              }
            }
            v16 = v49;
          }
          else
          {
            v47 = v24;
            v32 = 1;
            v33 = 1;
            v34 = 1;
LABEL_30:
            __srca = &v11[16 * v34];
            v37 = *(unsigned int **)(v57 + 8);
            LastPosRef = wordpar_loc_asian_getLastPosRef(v11, v27, v26, v33, 1);
            memmove(&v37[16 * (unint64_t)(v32 + 1)], __srca, (uint64_t)((int)v27 - v32) << 6);
            v11 = v37;
            v38 = *(_QWORD *)(v57 + 8) + (v34 << 6);
            *(_DWORD *)v38 = 1;
            *(_DWORD *)(v38 + 20) = 36;
            *(_DWORD *)(v38 + 24) = LastPosRef;
            *(_DWORD *)(v38 + 28) = 0;
            v39 = v37[8] + v26;
            *(_WORD *)(v38 + 16) = 0;
            *(_QWORD *)(v38 + 8) = 0;
            *(_DWORD *)(v38 + 36) = 0;
            *(_DWORD *)(v38 + 40) = a5;
            *(_QWORD *)(v38 + 48) = 0;
            *(_DWORD *)(v38 + 32) = v39;
            v40 = (_DWORD *)(v38 + 32);
            v5 = v57;
            LOWORD(v27) = *(_WORD *)(v57 + 16);
            if ((_WORD)v27)
            {
              v41 = (unsigned __int16)(v27 + 1) <= 2u ? 2 : (unsigned __int16)(v27 + 1);
              v42 = v11 + 24;
              v43 = v41 - 1;
              v16 = v49;
              v25 = v23;
              do
              {
                if (*v42 > *v40)
                  *v42 -= v15;
                v42 += 16;
                --v43;
              }
              while (v43);
              v14 = v47;
            }
            else
            {
              v16 = v49;
              v14 = v47;
              v25 = v23;
            }
          }
        }
        else
        {
          v28[5] = 36;
          *v28 = 1;
          if ((_DWORD)v27 == 1)
          {
            v31 = v11[7] + v11[6];
          }
          else
          {
            v35 = v24;
            __src = v11;
            v31 = wordpar_loc_asian_getLastPosRef(v11, v27, v26, (unsigned __int16)(v27 - 1), 1);
            v11 = __src;
            v25 = v23;
            v14 = v35;
          }
          v36 = &v11[16 * v27];
          v36[6] = v31;
          v36[7] = 0;
          v36[8] = v29 + v26;
          v36[9] = 0;
          *((_WORD *)v36 + 8) = 0;
          *((_QWORD *)v36 + 1) = 0;
          v36[10] = a5;
          *((_QWORD *)v36 + 6) = 0;
          v5 = v57;
          LOWORD(v27) = *(_WORD *)(v57 + 16);
        }
        *(_WORD *)(v5 + 16) = v27 + 1;
        v11[9] = v53;
        v13 = v25 + 1;
        v10 = v54;
      }
      else
      {
LABEL_19:
        v17 = (v12 + 1);
      }
      v12 = v17;
    }
    while ((unsigned __int16)v17 < v16);
  }
  else
  {
    v14 = 0;
  }
  v22 = v11;
  v44 = (unsigned __int8 *)a3;
  v45 = v14;
  wordpar_loc_asian_adjustText(__s, v44, v10, &v56);
  v14 = v45;
  v16 = v56;
LABEL_46:
  v22[9] = v16;
  return v14;
}

_BYTE *wordpar_loc_asian_deleteStr(uint64_t a1, char *__s, char *a3)
{
  unsigned __int16 v6;
  unsigned __int16 v7;
  int *v8;
  int v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int *v21;
  int v22;
  _BYTE *result;
  unsigned __int16 v24;

  v6 = strlen(__s);
  v24 = v6;
  v7 = strlen(a3);
  v8 = *(int **)(a1 + 8);
  if (v6)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      if (!__s[(unsigned __int16)v10])
        break;
      if (__s[(unsigned __int16)v10] == *a3)
      {
        if (!v7)
        {
          v13 = v10;
LABEL_14:
          v17 = *(unsigned __int16 *)(a1 + 16);
          if (v17 >= 2)
          {
            v18 = v9 - v7 * v11;
            v19 = v17 - 1;
            v20 = 1;
            v21 = v8 + 24;
            while (v18 >= (unsigned __int16)(LOWORD(v8[16 * (unint64_t)v20 + 8]) - v8[8]))
            {
              ++v20;
              v21 += 16;
              --v19;
              if (v20 >= v17)
                goto LABEL_23;
            }
            if (v20 < v17)
            {
              do
              {
                v22 = *v21 - v7;
                if (v7 > (unsigned __int16)(*(_WORD *)v21 - v8[8]))
                  v22 = v8[8];
                *v21 = v22;
                v21 += 16;
                --v19;
              }
              while (v19);
            }
          }
LABEL_23:
          ++v11;
          goto LABEL_24;
        }
        v12 = 0;
        LODWORD(v13) = v10;
        do
        {
          v14 = __s[(unsigned __int16)v13];
          v15 = a3[v12];
          v13 = (v13 + 1);
          ++v12;
        }
        while (v14 == v15 && v7 > (unsigned __int16)v12);
        if (v14 == v15)
          goto LABEL_14;
      }
      v13 = (v10 + 1);
LABEL_24:
      v9 = (unsigned __int16)v13;
      v10 = v13;
    }
    while ((unsigned __int16)v13 < v6);
  }
  result = wordpar_loc_asian_adjustText(__s, (unsigned __int8 *)a3, v7, &v24);
  v8[9] = v24;
  return result;
}

uint64_t wordpar_loc_asian_replaceStrWithStr(uint64_t a1, char *__s, const char *a3, int a4)
{
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  char *v14;
  unsigned __int16 v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int *v19;
  int v20;
  int v21;
  unsigned __int16 v22;
  _DWORD *v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;

  result = strlen(__s);
  v26 = a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (unsigned __int16)result;
  if ((_WORD)result)
  {
    result = strlen(a3);
    v11 = 0;
    v12 = 0;
    v13 = (__int16)(result - 1);
    v25 = (unsigned __int16)result;
    do
    {
      v14 = &__s[(unsigned __int16)v11];
      if (!*v14 || a4 == 1 && (_WORD)v11)
        break;
      if (*v14 == 16)
      {
        v15 = v13 + strlen(__s);
        memmove(&__s[v13 + 1 + v11], &__s[v11 + 1], v10 - v11);
        result = (uint64_t)memcpy(&__s[(unsigned __int16)v11], a3, v25);
        __s[v15] = 0;
        v16 = *(unsigned __int16 *)(v26 + 16);
        if (v16 >= 2)
        {
          v17 = 1;
          while (1)
          {
            v18 = (unsigned __int16)v17;
            v19 = (int *)(v9 + 32 + ((unint64_t)(unsigned __int16)v17 << 6));
            v20 = *v19;
            v21 = *v19 - *(_DWORD *)(v9 + 32);
            if ((_WORD)v11 && (unsigned __int16)v11 == (unsigned __int16)(*(_WORD *)v19 - *(_WORD *)(v9 + 32)))
            {
              do
              {
                if (*(_DWORD *)(v9 + (v18 << 6) + 20) != 36)
                  break;
                *v19 = v20 + 1;
                v18 = (unsigned __int16)++v17;
                v19 = (int *)(v9 + 32 + ((unint64_t)(unsigned __int16)v17 << 6));
                v20 = *v19;
                LOWORD(v21) = *v19 - *(_DWORD *)(v9 + 32);
              }
              while ((unsigned __int16)v11 == (unsigned __int16)v21);
            }
            if (v11 < (unsigned __int16)v21)
              break;
            if (v16 <= (unsigned __int16)++v17)
              goto LABEL_19;
          }
          if (v16 > (unsigned __int16)v17)
          {
            v22 = v17;
            v23 = (_DWORD *)(v9 + 32 + ((unint64_t)(unsigned __int16)v17 << 6));
            v24 = v16 - v22;
            do
            {
              *v23 += v13;
              v23 += 16;
              --v24;
            }
            while (v24);
          }
        }
LABEL_19:
        v10 = v15;
        ++v12;
      }
      ++v11;
    }
    while (v10 > (unsigned __int16)v11);
  }
  *(_DWORD *)(v9 + 36) = v10;
  return result;
}

uint64_t wordpar_loc_asian_getLastPosRef(unsigned int *a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned __int16 v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  BOOL v17;

  v5 = a1[6];
  if (a2 >= a4)
    v6 = a4;
  else
    v6 = a2;
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = a1[8];
    if (a2 <= 1)
      v9 = 1;
    else
      v9 = a2;
    v10 = (v9 - 1);
    v11 = v9 - 1;
    v12 = a1 + 24;
    v13 = a1[8];
    while (a3 > (unsigned __int16)(v13 - v8))
    {
      if (v10 == v7)
        goto LABEL_15;
      v13 = *v12;
      if (a3 <= (unsigned __int16)(*v12 - v8))
        break;
      ++v7;
      v12 += 16;
      if (v6 == v7)
      {
        v11 = v6;
        goto LABEL_15;
      }
    }
    v11 = v7;
LABEL_15:
    if (v11)
    {
      v14 = v11;
      if (a5 == 1
        && ((v15 = &a1[16 * (unint64_t)v11], v16 = v15[5], v16 != 41) ? (v17 = v16 == 1) : (v17 = 1), v17))
      {
        return v15[6];
      }
      else
      {
        return a1[16 * v14 + 7] + a1[16 * v14 + 6];
      }
    }
  }
  return v5;
}

_BYTE *wordpar_loc_asian_adjustText(_BYTE *result, unsigned __int8 *a2, unsigned int a3, unsigned __int16 *a4)
{
  unsigned __int16 v4;
  _BYTE *v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;

  v4 = *a4;
  if (*a4)
  {
    v8 = result;
    v9 = 0;
    v10 = 0;
    v11 = a3;
    do
    {
      result = &v8[(unsigned __int16)v10];
      if (!*result)
        return result;
      if (*result == *a2)
      {
        if (!a3)
        {
          v13 = v10;
LABEL_15:
          result = memmove(result, &v8[v9 + a3], (int)(v4 - (v9 + a3) + 1));
          v4 = *a4 - a3;
          *a4 = v4;
          v10 = v13 - a3;
          goto LABEL_16;
        }
        v12 = 0;
        v13 = v10;
        do
        {
          v14 = v8[(unsigned __int16)v13];
          v15 = a2[v12];
          ++v13;
          ++v12;
        }
        while (v14 == v15 && v12 < v11);
        if (v14 == v15)
          goto LABEL_15;
      }
      ++v10;
LABEL_16:
      v9 = (unsigned __int16)v10;
    }
    while ((unsigned __int16)v10 < v4);
  }
  return result;
}

BOOL wordpar_loc_asian_isMarkerUnknown(uint64_t a1)
{
  const char *v1;
  const char *MarkerArgStr;

  if (*(_DWORD *)(a1 + 20) != 36)
    return 0;
  v1 = *(const char **)(a1 + 40);
  MarkerArgStr = marker_getMarkerArgStr(9u);
  return strcmp(v1, MarkerArgStr) == 0;
}

BOOL bed_marker_IsOfType(int *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  v2 = 0;
  if (a1 && a2)
  {
    v3 = *a1;
    v4 = *(_DWORD *)(a2 + 20);
    if (*a1)
    {
      v5 = 0;
      while (v4 != v3)
      {
        v3 = a1[(unsigned __int16)++v5];
        if (!v3)
          return v4 == v3;
      }
      v3 = *(_DWORD *)(a2 + 20);
    }
    return v4 == v3;
  }
  return v2;
}

BOOL bed_marker_IsToiOfType(int *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  v2 = 0;
  if (a1 && a2)
  {
    if (*(_DWORD *)(a2 + 20) == 7)
    {
      v3 = *a1;
      v4 = *(_DWORD *)(a2 + 40);
      if (*a1)
      {
        v5 = 0;
        while (v4 != v3)
        {
          v3 = a1[(unsigned __int16)++v5];
          if (!v3)
            return v4 == v3;
        }
        v3 = *(_DWORD *)(a2 + 40);
      }
      return v4 == v3;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

BOOL bed_marker_IsToiNotOfType(int *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  v2 = 0;
  if (a1 && a2)
  {
    if (*(_DWORD *)(a2 + 20) == 7)
    {
      v3 = *a1;
      v4 = *(_DWORD *)(a2 + 40);
      if (*a1)
      {
        v5 = 0;
        while (v4 != v3)
        {
          v3 = a1[(unsigned __int16)++v5];
          if (!v3)
            return v4 != v3;
        }
        v3 = *(_DWORD *)(a2 + 40);
      }
      return v4 != v3;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t bed_marker_IsAt(_WORD *a1, uint64_t a2)
{
  uint64_t result;

  result = 0;
  if (a1 && a2)
  {
    if (*a1)
    {
      result = 0;
      --*a1;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t bed_marker_MapPosCur(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int16 v12;
  _DWORD *v13;

  v13 = 0;
  result = 2370838535;
  if (a1 && a3)
  {
    v12 = 0;
    *a3 = a2;
    LODWORD(result) = bed_GetpElem(a1, 0, &v13);
    if ((result & 0x80000000) != 0)
    {
      if ((result & 0x1FFF) == 0xF)
        return 0;
      else
        return result;
    }
    else
    {
      result = bed_GetcElem(a1, &v12);
      if ((result & 0x80000000) == 0)
      {
        v7 = v12;
        if (!v12)
          return 0;
        v8 = 0;
        v9 = v13;
        do
        {
          v10 = v9[8];
          if (v10 > a2)
            break;
          if (!*v9)
          {
            v11 = v9[9] + v10;
            if (v11 <= a2 && (!v8 || v8[9] + v8[8] <= v11 && v8[7] + v8[6] <= (v9[7] + v9[6])))
              v8 = v9;
          }
          v9 += 16;
          --v7;
        }
        while (v7);
        if (v8)
        {
          result = 0;
          *a3 += v8[7] + v8[6] - (v8[8] + v8[9]);
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t bed_marker_InjectFixedRefMarker(uint64_t a1, void *a2)
{
  uint64_t result;
  int v5;

  result = 2370838535;
  if (a1)
  {
    if (a2)
    {
      result = bed_GoForward(a1, (uint64_t (*)(uint64_t, unint64_t))bed_marker_HasGreaterOrEqualPosCur, (uint64_t)a2);
      if ((result & 0x80000000) == 0 || (result & 0x1FFF) == 0x14)
      {
        v5 = bed_Insert(a1, a2, 1);
        return v5 & (v5 >> 31);
      }
    }
  }
  return result;
}

BOOL bed_marker_HasGreaterOrEqualPosCur(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;

  result = 0;
  if (a1 && a2)
  {
    v4 = *(_DWORD *)(a1 + 32);
    v5 = *(_DWORD *)(a2 + 32);
    v6 = v4 > v5;
    if (v4 == v5)
      v6 = *(_DWORD *)(a1 + 36) > *(_DWORD *)(a2 + 36);
    return !v6;
  }
  return result;
}

uint64_t freeMERDefs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  if (*(_WORD *)(a1 + 88))
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_2, 5, 0, (uint64_t)"[WPARSER] free MER definitions", a6, a7, a8, v13);
    v9 = *(_QWORD *)(a1 + 96);
    if (v9)
    {
      if (*(_WORD *)(a1 + 88))
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if (*(_QWORD *)(v9 + v10 + 16))
          {
            heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(v9 + v10 + 16));
            v9 = *(_QWORD *)(a1 + 96);
            *(_QWORD *)(v9 + v10 + 16) = 0;
          }
          if (*(_QWORD *)(v9 + v10 + 32))
          {
            heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(v9 + v10 + 32));
            v9 = *(_QWORD *)(a1 + 96);
            *(_QWORD *)(v9 + v10 + 32) = 0;
          }
          if (*(_QWORD *)(v9 + v10 + 48))
          {
            heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(v9 + v10 + 48));
            v9 = *(_QWORD *)(a1 + 96);
            *(_QWORD *)(v9 + v10 + 48) = 0;
          }
          ++v11;
          v10 += 64;
        }
        while (v11 < *(unsigned __int16 *)(a1 + 88));
      }
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v9);
      *(_QWORD *)(a1 + 96) = 0;
    }
    *(_WORD *)(a1 + 88) = 0;
  }
  return 0;
}

uint64_t getMERDefs(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  __int16 v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;

  if (*(_WORD *)(a1 + 88))
    freeMERDefs(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_2, 5, 0, (uint64_t)"[WPARSER] get MER definitions", a6, a7, a8, v33);
  v10 = *a4;
  *(_WORD *)(a1 + 88) = v10;
  v11 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, (v10 << 6) | 1);
  *(_QWORD *)(a1 + 96) = v11;
  if (v11)
  {
    if (!*(_WORD *)(a1 + 88))
      return 0;
    v19 = 0;
    v20 = 1;
    while (1)
    {
      v21 = 0;
      v22 = (_DWORD *)(*(_QWORD *)(a1 + 96) + (v19 << 6));
      *v22 = a4[v20];
      v22[1] = a4[v20 + 1];
      v23 = a4[v20 + 2];
      v20 += 3;
      v22[14] = v23;
      while (1)
      {
        v24 = a4[v20++];
        if (v24)
        {
          v25 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, (4 * v24) | 1);
          if (!v25)
            goto LABEL_23;
          v26 = 0;
          do
          {
            v27 = a4[v20++];
            *(_DWORD *)(v25 + v26) = v27;
            v26 += 4;
          }
          while (4 * v24 != v26);
        }
        else
        {
          v25 = 0;
        }
        if (v21)
          break;
        v30 = *(_QWORD *)(a1 + 96) + (v19 << 6);
        *(_WORD *)(v30 + 8) = v24;
        v29 = (uint64_t *)(v30 + 16);
LABEL_17:
        *v29 = v25;
        ++v21;
      }
      if (v21 == 1)
        break;
      if (v21 == 2)
      {
        v31 = *(_QWORD *)(a1 + 96) + (v19 << 6);
        *(_WORD *)(v31 + 40) = v24;
        *(_QWORD *)(v31 + 48) = v25;
      }
      result = 0;
      if (++v19 >= (unint64_t)*(unsigned __int16 *)(a1 + 88))
        return result;
    }
    v28 = *(_QWORD *)(a1 + 96) + (v19 << 6);
    *(_WORD *)(v28 + 24) = v24;
    v29 = (uint64_t *)(v28 + 32);
    goto LABEL_17;
  }
  *(_WORD *)(a1 + 88) = 0;
LABEL_23:
  freeMERDefs(a1, v12, v13, v14, v15, v16, v17, v18);
  return 2370838538;
}

uint64_t freeSYMDefs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  if (!*(_WORD *)(a1 + 64))
    return 0;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_2, 5, 0, (uint64_t)"[WPARSER] free SYM definitions", a6, a7, a8, v17);
  v15 = *(_QWORD *)(a1 + 72);
  if (v15)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v15);
  *(_WORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    result = ssftriff_reader_ReleaseChunkData((_QWORD *)result, v15, v9, v10, v11, v12, v13, v14);
    if ((result & 0x80000000) == 0)
      *(_QWORD *)(a1 + 40) = 0;
  }
  return result;
}

uint64_t getSYMDefs(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _DWORD *v25;
  int v26;
  int v27;
  uint64_t v28;
  _DWORD *v29;

  v29 = a4;
  if (*(_WORD *)(a1 + 64))
    return 0;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_2, 5, 0, (uint64_t)"[WPARSER] get SYM definitions", a6, a7, a8, v28);
  v12 = a4[1] + 8;
  v13 = v12 + *a4;
  v14 = *(unsigned __int16 *)((char *)a4 + v13);
  *(_WORD *)(a1 + 64) = v14;
  v15 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, (8 * v14) | 1);
  *(_QWORD *)(a1 + 72) = v15;
  if (v15)
  {
    v23 = *(unsigned __int16 *)(a1 + 64);
    if (*(_WORD *)(a1 + 64))
    {
      v24 = v13 + 2;
      v25 = (_DWORD *)(v15 + 4);
      do
      {
        v26 = *(unsigned __int16 *)((char *)a4 + v24);
        v27 = *(_DWORD *)((char *)a4 + v24 + 2);
        v24 += 6;
        *(v25 - 1) = v27;
        *v25 = v26;
        v25 += 2;
        --v23;
      }
      while (v23);
    }
    result = ssftriff_reader_DetachChunkData(a2, (uint64_t *)(a1 + 40), &v29, v18, v19, v20, v21, v22);
    if ((result & 0x80000000) == 0)
      *(_QWORD *)(a1 + 80) = (char *)v29 + v12;
  }
  else
  {
    freeSYMDefs(a1, v16, v17, v18, v19, v20, v21, v22);
    return 2370838538;
  }
  return result;
}

uint64_t wparser_ObjOpen2(_WORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v32;
  uint64_t v33;
  __int128 v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  const char *v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t, unsigned __int16 *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v15 = 2370838535;
  v33 = 0;
  v32 = 0;
  if (a5 && (InitRsrcFunction(a1, a2, &v33) & 0x80000000) == 0)
  {
    *a5 = 0;
    v24 = heap_Alloc(*(_QWORD *)(v33 + 8), 144);
    if (v24)
    {
      v25 = v24;
      *(_OWORD *)v24 = 0u;
      *(_OWORD *)(v24 + 16) = 0u;
      *(_OWORD *)(v24 + 64) = 0u;
      *(_OWORD *)(v24 + 80) = 0u;
      *(_OWORD *)(v24 + 112) = 0u;
      *(_OWORD *)(v24 + 128) = 0u;
      *(_OWORD *)(v24 + 96) = 0u;
      *(_OWORD *)(v24 + 32) = 0u;
      *(_OWORD *)(v24 + 48) = 0u;
      *(_QWORD *)v24 = a1;
      *(_QWORD *)(v24 + 8) = a2;
      v26 = v33;
      *(_QWORD *)(v24 + 16) = v33;
      *(_QWORD *)(v24 + 80) = 0;
      *(_QWORD *)(v24 + 88) = 0;
      *(_QWORD *)(v24 + 64) = 0;
      *(_QWORD *)(v24 + 72) = 0;
      *(_QWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = a3;
      *(_DWORD *)(v24 + 56) = a4;
      *(_QWORD *)(v24 + 32) = a12;
      *(_QWORD *)(v24 + 96) = 0;
      *(_QWORD *)(v24 + 104) = a6;
      *(_QWORD *)(v24 + 112) = a7;
      *(_QWORD *)(v24 + 120) = a8;
      *(_QWORD *)(v24 + 128) = 0;
      *(_WORD *)(v24 + 138) = 512;
      if ((paramc_ParamGetUInt(*(_QWORD *)(v26 + 40), (uint64_t)"udctmaxlookuplen", &v32) & 0x80000000) == 0)
        *(_WORD *)(v25 + 138) = v32;
      *(_WORD *)(v25 + 136) = 512;
      if ((paramc_ParamGetUInt(*(_QWORD *)(v33 + 40), (uint64_t)"udctmaxdictretlen", &v32) & 0x80000000) == 0)
        *(_WORD *)(v25 + 136) = v32;
      *(_WORD *)(v25 + 140) = 1;
      if ((paramc_ParamGetUInt(*(_QWORD *)(v33 + 40), (uint64_t)"numberoutputtranscriptions", &v32) & 0x80000000) != 0)
      {
        v28 = *(_WORD *)(v25 + 140);
      }
      else
      {
        v28 = v32;
        *(_WORD *)(v25 + 140) = v32;
      }
      HIDWORD(v29) = *(_DWORD *)(v25 + 136);
      LODWORD(v29) = HIDWORD(v29);
      v30 = utoin_ObjOpen(a1, a2, (uint64_t *)(v25 + 24), a6, a7, a8, a9, v27, a10, a11, a13, a14, a15, SHIWORD(v29), (v29 >> 16) >> 16, v28);
      if ((v30 & 0x80000000) != 0)
        goto LABEL_15;
      *(_QWORD *)&v34 = "SYMD";
      *((_QWORD *)&v34 + 1) = getSYMDefs;
      v35 = freeSYMDefs;
      v36 = v25;
      v37 = "MERR";
      v38 = getMERDefs;
      v39 = freeMERDefs;
      v40 = v25;
      v30 = extdata_RegisterData(a12, &v34, 2u);
      if ((v30 & 0x80000000) != 0)
      {
LABEL_15:
        v15 = v30;
        wparser_ObjClose2(v25);
      }
      else
      {
        v15 = 0;
        *a5 = v25;
      }
    }
    else
    {
      return 2370838538;
    }
  }
  return v15;
}

uint64_t wparser_ObjClose2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v1 = 2370838535;
  v5 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v5) & 0x80000000) == 0)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
      utoin_ObjClose(v3);
    heap_Free(*(_QWORD **)(v5 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t wparser_ProcessStart(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v10;
  uint64_t v11;

  v1 = 2370838535;
  v11 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v11) & 0x80000000) == 0)
  {
    if (*(_WORD *)(a1 + 64))
    {
      v7 = paramc_ParamGet(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"langcode", (_QWORD *)(a1 + 128), 0);
      if ((v7 & 0x80000000) != 0)
      {
        return v7;
      }
      else
      {
        v8 = utoin_ProcessStart(*(_QWORD *)(a1 + 24));
        return v8 & (v8 >> 31);
      }
    }
    else
    {
      log_OutPublic(*(_QWORD *)(v11 + 32), (uint64_t)&modPP_2, 1810, 0, v3, v4, v5, v6, v10);
    }
  }
  return v1;
}

uint64_t wparser_ProcessEnd(_QWORD *a1)
{
  int v2;

  if (!a1)
    return 2370838535;
  if (a1[16])
    paramc_ParamRelease(*(_QWORD *)(a1[2] + 40));
  v2 = utoin_ProcessEnd(a1[3]);
  return v2 & (v2 >> 31);
}

uint64_t wparser_NormalizeWords(unsigned __int16 *a1, uint64_t a2, int a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _DWORD *v17;
  unsigned int v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  BOOL v35;
  unsigned __int16 v36;
  _DWORD *v37;
  uint64_t v38;
  _DWORD *v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  BOOL v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL4 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v71 = 0;
  v72 = 0;
  v5 = 2370838535;
  v70 = 0;
  if (!a1 || !a2 || (InitRsrcFunction(*(_WORD **)a1, *((_QWORD *)a1 + 1), &v71) & 0x80000000) != 0)
    return v5;
  v14 = datac_RequestBlock(a2, 1020, 1u, &v72);
  if ((v14 & 0x80000000) != 0)
    return v14;
  if (!*(_WORD *)(v72 + 16))
  {
    log_OutText(*(_QWORD *)(*((_QWORD *)a1 + 2) + 32), (uint64_t)&modPP_2, 5, 0, (uint64_t)"[SEQ] wparser : no text to process", v11, v12, v13, v69);
    return v14;
  }
  v15 = bed_ObjOpen(*(_WORD **)a1, *((_QWORD *)a1 + 1), a2, 1021, &v70, 213);
  if ((v15 & 0x80000000) != 0)
    return v15;
  v73 = 0;
  v16 = datac_RequestBlock(a2, 1021, 1u, &v73);
  if ((v16 & 0x80000000) != 0)
  {
    v28 = v16;
    LOWORD(v25) = 0;
    goto LABEL_23;
  }
  v17 = *(_DWORD **)(v73 + 8);
  v18 = *(unsigned __int16 *)(v73 + 16);
  if (v18 < 2)
    goto LABEL_39;
  v19 = v17 + 26;
  v20 = *(unsigned __int16 *)(v73 + 16);
LABEL_10:
  v21 = v19;
  v22 = 1;
  do
  {
    if (*(v21 - 5) == 999 && *(v21 - 2) == v17[8] && !*v21)
    {
      v23 = (unsigned __int16)v22 + 1;
      if (v23 < v20)
      {
        v24 = v19;
        memmove(v21 - 10, &v17[16 * v23], (uint64_t)(int)(v20 - (unsigned __int16)v22) << 6);
        v19 = v24;
      }
      LOWORD(v25) = 0;
      v26 = 0;
      v27 = 0;
      --v20;
      v18 = 1;
      if ((v20 & 0xFFFE) == 0)
      {
LABEL_59:
        *(_WORD *)(v73 + 16) = v18;
        v54 = v17[6] + a3;
        v55 = v17[7] - a3;
        v17[6] = v54;
        v17[7] = v55;
        if (v27)
        {
          v56 = v17 + 38;
          v57 = 1;
          v58 = 3;
          do
          {
            if (v17[16 * v57 + 5] != 0x4000 && !v17[16 * v57] && v17[16 * v57 + 6] > v54)
            {
              if (v57 + 1 < (unint64_t)v18)
              {
                v59 = v58;
                v60 = v56;
                do
                {
                  if (!*(v60 - 6))
                    *v60 -= v17[16 * v57 + 7];
                  v60 += 16;
                  v35 = v18 == (unsigned __int16)v59++;
                }
                while (!v35);
              }
              v17[16 * v57 + 7] = 0;
            }
            ++v57;
            v56 += 16;
            ++v58;
          }
          while (v57 != v18);
        }
        v61 = v26;
        v62 = *((_QWORD *)a1 + 13);
        v63 = log_GetLogLevel(*(_QWORD *)(*((_QWORD *)a1 + 2) + 32)) > 4;
        v64 = utois_ScanRegions(v62, *((_QWORD *)a1 + 14), *((_QWORD *)a1 + 15), v63, *(_WORD **)a1, *((_QWORD *)a1 + 1), a2, a1 + 32, *((_QWORD **)a1 + 6), *((_QWORD *)a1 + 7), *((char **)a1 + 16), *((_DWORD *)a1 + 34), HIWORD(*((_DWORD *)a1 + 34)), a1[70]);
        v5 = v64;
        if ((v64 & 0x80000000) != 0 && (v64 & 0x1FFF) != 0xA)
          return v5;
        v15 = utoin_NormalizeRegions(*((_WORD ***)a1 + 3), a2, a1 + 44);
        if ((v15 & 0x80000000) == 0)
        {
          v67 = wparser_loc_ReSyncOut((uint64_t)a1, a2, a3, a4, v61, (unsigned __int16)v25, v65, v66);
          v29 = v61;
          v28 = v67;
          goto LABEL_76;
        }
        return v15;
      }
      goto LABEL_10;
    }
    ++v22;
    v21 += 16;
  }
  while (v20 != v22);
  v18 = (unsigned __int16)v20;
  if ((unsigned __int16)v20 < 2u)
  {
LABEL_39:
    LOWORD(v25) = 0;
    v26 = 0;
    v27 = 0;
    goto LABEL_59;
  }
  LOWORD(v25) = 0;
  v30 = (unsigned __int16)v20 - 1;
  v31 = v17 + 16;
  do
  {
    v32 = v31[5];
    if (v32 != 0x4000 && !*v31
      || v31[6] == v17[6]
      && ((v33 = v32 > 0x24, v34 = (1 << v32) & 0x1080200080, !v33) ? (v35 = v34 == 0) : (v35 = 1), !v35 && *v31 == 1))
    {
      LOWORD(v25) = v25 + 1;
    }
    v31 += 16;
    --v30;
  }
  while (v30);
  if (!(_WORD)v25)
  {
    v26 = 0;
    goto LABEL_41;
  }
  v26 = heap_Calloc(*(_QWORD **)(*((_QWORD *)a1 + 2) + 8), 1, ((unint64_t)(unsigned __int16)v25 << 6) | 1);
  if (v26)
  {
LABEL_41:
    v25 = 0;
    v36 = 0;
    v37 = v17 + 23;
    v38 = (unsigned __int16)v20 - 1;
    while (1)
    {
      v39 = v37 - 7;
      v40 = *(v37 - 2);
      if (v40 == 0x4000 || *v39)
      {
        v41 = *(v37 - 1);
        if (v41 != v17[6])
          goto LABEL_57;
        v33 = v40 > 0x24;
        v42 = (1 << v40) & 0x1080200080;
        v43 = v33 || v42 == 0;
        if (v43 || *v39 != 1)
          goto LABEL_57;
        *(v37 - 1) = v41 + a3;
        v44 = (_OWORD *)(v26 + ((unint64_t)v36 << 6));
        v45 = *(_OWORD *)v39;
        v46 = *(_OWORD *)(v37 - 3);
        v47 = *(_OWORD *)(v37 + 5);
        v44[2] = *(_OWORD *)(v37 + 1);
        v44[3] = v47;
        *v44 = v45;
        v44[1] = v46;
        ++v25;
      }
      else
      {
        v48 = (_OWORD *)(v26 + ((unint64_t)v36 << 6));
        v49 = *(_OWORD *)v39;
        v50 = *(_OWORD *)(v37 - 3);
        v51 = *(_OWORD *)(v37 + 5);
        v48[2] = *(_OWORD *)(v37 + 1);
        v48[3] = v51;
        *v48 = v49;
        v48[1] = v50;
        ++v25;
        v52 = a5[5];
        if (v52)
        {
          if (v52 == *(v37 - 2))
          {
            v53 = a5[6];
            if (v53 == *(v37 - 1) && a5[7] == *v37)
              *(_QWORD *)(v37 - 1) = (v53 + a3);
          }
        }
      }
      v36 = v25;
LABEL_57:
      v37 += 16;
      if (!--v38)
      {
        v27 = 1;
        goto LABEL_59;
      }
    }
  }
  v28 = -1924128758;
LABEL_23:
  v29 = 0;
  LODWORD(v5) = 0;
LABEL_76:
  if ((_WORD)v25)
    heap_Free(*(_QWORD **)(*((_QWORD *)a1 + 2) + 8), v29);
  if (v70)
    bed_ObjClose(v70);
  if ((v5 & 0x1FFF) == 0xA)
    return v5;
  else
    return v28;
}

uint64_t wparser_loc_ReSyncOut(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v10;
  uint64_t result;
  _DWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int *v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  int v26;
  __int16 v28;
  _DWORD *v29;
  BOOL v30;
  uint64_t v31;
  int *v32;
  int v33;
  __int16 v34;
  _DWORD *v35;
  unint64_t v36;
  _WORD *v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t i;
  _DWORD *v45;
  int v46;
  unint64_t v47;
  unsigned int *v48;
  unsigned int *v49;
  uint64_t v50;
  int v51;
  unsigned int *v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  unsigned __int16 v56;
  _DWORD *v57;
  unsigned __int16 v58;
  _DWORD *v59;
  _DWORD *v60;
  _DWORD *v61;
  _DWORD *v62;
  unsigned int v63;
  int *v64;
  _DWORD *v65;
  unint64_t j;
  unsigned int v67;
  int v68;
  unsigned int v69;
  int v70;
  int v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  _DWORD *v75;
  _DWORD *v76;
  _DWORD *v77;
  _DWORD *v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  int v82;
  _DWORD *v83;
  _DWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v8 = a6;
  v10 = a4;
  v86 = 0;
  v87 = 0;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_2, 5, 0, (uint64_t)"[WPARSER] ReSyncOut(refReset=%d posRefOffset=%d)", a6, a7, a8, a4);
  result = datac_RequestBlock(a2, 1021, 1u, &v86);
  if ((result & 0x80000000) != 0)
    return result;
  v15 = *(_DWORD **)(v86 + 8);
  v16 = *(unsigned __int16 *)(v86 + 16);
  v17 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, (2 * v16) | 1);
  if (!v17)
    return 2370838538;
  v18 = v17;
  if (!(_DWORD)v16)
    goto LABEL_53;
  v19 = 0;
  v20 = 0;
  do
  {
    v21 = &v15[16 * v19];
    v22 = v21[5];
    v23 = v22 > 0x24 || ((1 << v22) & 0x1080200080) == 0;
    if (v23 && v22 != 999)
    {
      if (*v21)
        v30 = 1;
      else
        v30 = v20 >= v8;
      if (v30)
      {
LABEL_36:
        v34 = 0;
        goto LABEL_37;
      }
      goto LABEL_32;
    }
    v24 = *v21;
    if (!v24)
    {
      if (v20 >= v8)
        goto LABEL_36;
LABEL_32:
      v31 = v20;
      v32 = (int *)(a5 + 20 + ((unint64_t)v20 << 6));
      while (v22 != 999)
      {
        v33 = *v32;
        v32 += 16;
        if (v33 == v22)
          break;
        if (v8 == ++v31)
          goto LABEL_36;
      }
      ++v20;
      v34 = v31 + 1;
      goto LABEL_37;
    }
    if (v22 == 999 || v24 != 1)
      goto LABEL_36;
    v26 = v15[16 * v19 + 6];
    if (v26 != v15[6] || v20 >= v8)
      goto LABEL_36;
    v28 = v20;
    v29 = (_DWORD *)(a5 + 24 + ((unint64_t)v20 << 6));
    while (*(v29 - 1) != v22 || *v29 != v26)
    {
      v29 += 16;
      if (v8 == (unsigned __int16)++v28)
        goto LABEL_36;
    }
    ++v20;
    v34 = v28 + 1;
LABEL_37:
    *(_WORD *)(v18 + 2 * v19++) = v34;
  }
  while (v19 != v16);
  v35 = v15 + 7;
  v36 = v16;
  v37 = (_WORD *)v18;
  do
  {
    v38 = *(v35 - 2);
    v39 = v38 > 0x24 || ((1 << v38) & 0x1080200080) == 0;
    if (!v39 || v38 == 999 || !*(v35 - 7))
    {
      v40 = (unsigned __int16)*v37;
      if (*v37)
      {
        v41 = *(_DWORD *)(a5 + ((unint64_t)(v40 - 1) << 6) + 24);
        *(v35 - 1) = v41;
        *v35 = *(_DWORD *)(a5 + (v40 << 6) - 36);
        if (v41 == v15[6] && v15[7] + v41 >= (v41 - a3))
          *(v35 - 1) = v41 - a3;
      }
    }
    v35 += 16;
    ++v37;
    --v36;
  }
  while (v36);
LABEL_53:
  v42 = v15[7] + v10 + a3;
  v15[6] -= v10 + a3;
  v15[7] = v42;
  if (v16 >= 2)
  {
    v43 = v15[8];
    for (i = 1; i != v16; ++i)
    {
      v45 = &v15[16 * i];
      if (v45[8] != v43 || v45[6] > (v10 + a3 + v15[6]))
      {
        v46 = v45[5];
        if (v46 == 999 || v46 != 0x4000 && !*v45)
        {
          LOWORD(v47) = 0;
          v48 = &v15[16 * i + 6];
          v49 = &v15[16 * (unint64_t)(unsigned __int16)(v16 - 1) + 6];
          v50 = (unsigned __int16)(v16 - 1);
          do
          {
            if (i != v50 && *(v49 - 1) != 0x4000 && *v49 >= *v48)
              LOWORD(v47) = v50;
            --v50;
            v49 -= 16;
          }
          while ((_WORD)v50);
          v51 = v15[16 * i + 7];
          if (v51)
          {
            if (v16 > (unsigned __int16)v47)
            {
              v47 = (unsigned __int16)v47;
              v52 = &v15[16 * (unint64_t)(unsigned __int16)v47 + 6];
              do
              {
                if (i != v47 && *(v52 - 1) != 999 && *(v52 - 6) == 1 && *v52 >= *v48)
                {
                  v53 = *v52 + v51;
                  if (v15[6] + v42 < v53)
                    break;
                  *v52 = v53;
                }
                ++v47;
                v52 += 16;
              }
              while (v47 < v16);
            }
          }
        }
      }
    }
    v54 = 1;
    while (2)
    {
      v55 = v54 + 1;
      if (v15[16 * v54 + 5] == 41)
      {
        v56 = v54 + 1;
        if (v55 < v16)
        {
          v57 = &v15[16 * v55];
          if (v57[5] == 39 && v57[8] == v15[16 * v54 + 8])
          {
            v58 = v54 + 1;
            goto LABEL_92;
          }
        }
        if (v54 >= 2 && (v59 = &v15[16 * v54 - 16], v59[5] == 39))
        {
          if (v59[8] == v15[16 * v54 + 8])
            v58 = v54 - 1;
          else
            v58 = 0;
        }
        else
        {
          v58 = 0;
        }
        if (v55 >= v16 || (v60 = &v15[16 * v55], v60[5] != 14) || v60[8] != v15[16 * v54 + 8])
        {
LABEL_92:
          if (v54 >= 2 && (v61 = &v15[16 * v54 - 16], v61[5] == 14))
          {
            if (v61[8] == v15[16 * v54 + 8])
              v56 = v54 - 1;
            else
              v56 = 0;
          }
          else
          {
            v56 = 0;
          }
        }
        v62 = &v15[16 * v54];
        v63 = v62[6];
        v64 = v62 + 7;
        v65 = v15 + 23;
        for (j = 1; j != v16; ++j)
        {
          v67 = *(v65 - 1);
          v68 = *v64;
          v69 = *v64 + v63;
          if (v67 > v69)
            break;
          if (j > v54)
          {
            if (v67)
            {
              if (!*(v65 - 7))
              {
                v70 = *(v65 - 2);
                if (v70 != 7 && v70 != 0x4000 && v67 >= v63 && v67 < v69)
                {
                  v71 = *v65 + v68;
                  if (v71 + v63 <= v15[7] + v15[6])
                  {
                    *v64 = v71;
                    v68 = v71;
                  }
                  if (v58)
                    v15[16 * (unint64_t)v58 + 7] = v68;
                  if (v56)
                    v15[16 * (unint64_t)v56 + 7] = *v64;
                }
              }
            }
          }
          v65 += 16;
        }
      }
      ++v54;
      if (v55 == v16)
        break;
      continue;
    }
  }
  result = datac_RequestBlock(a2, 1020, 1u, &v87);
  if ((result & 0x80000000) == 0)
  {
    if (v16 >= 2)
    {
      v72 = 1;
      v73 = 1;
      do
      {
        v74 = (unsigned __int16)v73;
        v75 = &v15[16 * (unint64_t)(unsigned __int16)v73];
        if (v75[5] == 7 && v75[10] == 43)
        {
          if (v16 > (unsigned __int16)(v72 + 1))
          {
            v76 = &v15[16 * (unint64_t)(unsigned __int16)v73];
            v77 = v76 + 8;
            v78 = v76 + 9;
            v79 = (unsigned __int16)(v72 + 1);
            v80 = (uint64_t)&v15[16 * v79 + 5];
            v81 = (int *)v80;
            while (1)
            {
              v82 = *v81;
              v81 += 16;
              if (v82 == 999 && *(_DWORD *)(v80 + 12) == *v78 + *v77)
                break;
              LODWORD(v79) = v79 + 1;
              v80 = (uint64_t)v81;
              if ((_DWORD)v16 == (unsigned __int16)v79)
                goto LABEL_126;
            }
            if ((_WORD)v79)
            {
              v15[16 * (unint64_t)(unsigned __int16)v73 + 7] = v15[16 * (unint64_t)(unsigned __int16)v79
                                                                        + 7]
                                                                    + v15[16 * (unint64_t)(unsigned __int16)v79
                                                                        + 6]
                                                                    - v15[16 * (unint64_t)(unsigned __int16)v73
                                                                        + 6];
              goto LABEL_130;
            }
          }
LABEL_126:
          v83 = &v15[16 * (unint64_t)(unsigned __int16)v73];
          if (*(unsigned __int16 *)(v87 + 16) + (unint64_t)v15[8] == v83[9] + v83[8])
          {
            v83[7] = v15[7] + v15[6] - v83[6];
            if ((datac_RequestBlock(a2, 1021, (unsigned __int16)(*(_WORD *)(v86 + 16) + 1), &v86) & 0x80000000) != 0)
              break;
            v15 = *(_DWORD **)(v86 + 8);
            v84 = &v15[16 * v74];
            memmove(&v15[16 * (unint64_t)(v72 + 1)], v84, (uint64_t)(int)(*(unsigned __int16 *)(v86 + 16) - v72) << 6);
            v85 = *(_QWORD *)(v86 + 8) + (v74 << 6);
            *(_DWORD *)(v85 + 84) = 7;
            *(_DWORD *)(v85 + 104) = 15;
            *(_DWORD *)(v85 + 64) = 1;
            *(_DWORD *)(v85 + 88) = v84[6];
            *(_DWORD *)(v85 + 92) = 0;
            *(_DWORD *)(v85 + 96) = v84[9] + v84[8];
            *(_DWORD *)(v85 + 100) = 0;
            *(_WORD *)(v85 + 80) = 0;
            *(_QWORD *)(v85 + 72) = 0;
            *(_QWORD *)(v85 + 112) = 0;
            ++*(_WORD *)(v86 + 16);
            LODWORD(v79) = v16;
            goto LABEL_130;
          }
        }
        LODWORD(v79) = v73;
LABEL_130:
        v73 = v79 + 1;
        v72 = (unsigned __int16)(v79 + 1);
      }
      while (v72 < v16);
    }
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v18);
    return 0;
  }
  return result;
}

uint64_t wparser_insertRegionTags(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
    return utoin_InsertRegions(*(_WORD ***)(a1 + 24), a2);
  else
    return 2370838535;
}

uint64_t wparser_InsertWordMarkers(uint64_t a1, uint64_t a2, char *__s, _WORD *a4)
{
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  int v30;
  unsigned int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int PreviousUtf8Offset;
  unsigned int i;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned __int16 v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unsigned __int16 v55;
  uint64_t v57;
  int v58;
  unsigned __int16 v59;
  uint64_t v60;
  _OWORD *v61;
  unsigned int v62;
  __int128 *v63;
  unsigned int v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  unsigned __int16 v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  unsigned __int16 v77;
  uint64_t v78;
  _DWORD *v79;
  uint64_t v80;
  unsigned int v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  unsigned __int16 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 *v92;
  uint64_t v93[3];

  v92 = 0;
  v93[0] = 0;
  v87 = 0;
  v86 = 0;
  v8 = strlen(__s);
  v9 = bed_ObjOpen(*(_WORD **)a1, *(_QWORD *)(a1 + 8), a2, 1021, v93, 213);
  if ((v9 & 0x80000000) != 0)
    return v9;
  v10 = bed_GetpElem(v93[0], 0, &v92);
  if ((v10 & 0x80000000) != 0)
    goto LABEL_52;
  v12 = v92;
  v11 = v93[0];
  v13 = v92[1];
  v88 = *v92;
  v89 = v13;
  v14 = v92[3];
  v90 = v92[2];
  v91 = v14;
  *((_DWORD *)v92 + 7) = 0;
  *((_DWORD *)v12 + 9) = 0;
  v10 = bed_GetpElem(v11, 0, &v92);
  if ((v10 & 0x80000000) != 0)
    goto LABEL_52;
  v15 = v89;
  v17 = v92;
  v16 = v93[0];
  *v92 = v88;
  v17[1] = v15;
  v18 = v91;
  v17[2] = v90;
  v17[3] = v18;
  v10 = bed_GetcElem(v16, &v86);
  if ((v10 & 0x80000000) != 0)
  {
LABEL_52:
    v19 = v10;
    goto LABEL_53;
  }
  v19 = bed_GetpElem(v93[0], 0, &v87);
  if ((v19 & 0x80000000) == 0)
  {
    LOWORD(v20) = v86;
    if (v86 < 2u)
      goto LABEL_83;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v21 = 84;
    v22 = v87;
    v23 = 1;
    while (1)
    {
      v81 = 0;
      v81 = *(_DWORD *)(v22 + (v23 << 6) + 32) - *(_DWORD *)(v22 + 32);
      utf8_GetPreviousValidUtf8Offset((uint64_t)__s, &v81);
      v22 = v87;
      v24 = v81;
      v25 = v87 + (v23 << 6);
      *(_DWORD *)(v25 + 32) = v81 + *(_DWORD *)(v87 + 32);
      v26 = *(_DWORD *)(v25 + 20);
      v27 = v26 > 0x39;
      v28 = (1 << v26) & 0x3C8002000004002;
      if (v27 || v28 == 0)
        goto LABEL_49;
      v81 = v24;
      v30 = utf8_BelongsToSet(5u, __s, v24, v8);
      v31 = v81;
      if (v30)
      {
        while (v31 < v8 && utf8_BelongsToSet(5u, __s, v31, v8))
        {
          v32 = utf8_determineUTF8CharLength(__s[v81]);
          *(_DWORD *)(v87 + (v23 << 6) + 32) += v32;
          v31 = v81 + v32;
          v81 += v32;
        }
      }
      else if (v81 < *(_DWORD *)(v87 + 36))
      {
        v33 = v23;
        while (1)
        {
          v34 = v33;
          if (!v33)
            break;
          --v33;
          v35 = *(_DWORD *)(v87 + ((unint64_t)(unsigned __int16)(v34 - 1) << 6) + 20);
          v27 = v35 > 0x39;
          v36 = (1 << v35) & 0x3C8010124021140;
          if (!v27 && v36 != 0)
            goto LABEL_23;
        }
        LOWORD(v33) = -1;
LABEL_23:
        PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)__s, v81);
        if (PreviousUtf8Offset != -1)
        {
          for (i = PreviousUtf8Offset; i != -1; i = utf8_GetPreviousUtf8Offset((uint64_t)__s, i))
          {
            v40 = utf8_BelongsToSet(5u, __s, i, v8);
            if (!v34)
              break;
            if (v40)
              break;
            if (i <= *(_DWORD *)(v87 + ((unint64_t)(unsigned __int16)v33 << 6) + 32))
              break;
            *(_DWORD *)(v87 + (v23 << 6) + 32) += i - v81;
            v81 = i;
          }
        }
      }
      v22 = v87;
      v41 = v87 + (v23 << 6);
      v42 = *(_DWORD *)(v41 + 32);
      v43 = *(_DWORD *)(v87 + 32);
      v44 = v42 - v43;
      v81 = v42 - v43;
      if (*(_DWORD *)(v41 + 20) != 1)
        goto LABEL_49;
      if (v44 < v8)
      {
        v45 = v42 - v43;
        do
        {
          if (utf8_BelongsToSet(5u, __s, v45, v8))
            break;
          v45 = v81 + utf8_determineUTF8CharLength(__s[v81]);
          v81 = v45;
        }
        while (v45 < v8);
        v22 = v87;
      }
      if (v23 >= v86)
        goto LABEL_47;
      v46 = (unsigned int *)(v22 + v21);
      v47 = v23;
      v48 = (unsigned int *)(v22 + v21);
      while (1)
      {
        v49 = *v48;
        v48 += 16;
        v50 = (1 << v49) & 0x3C8010124221140;
        if (v49 <= 0x39 && v50 != 0)
        {
          v52 = v46[3];
          v53 = *(_DWORD *)(v22 + (v23 << 6) + 32);
          if (v52 > v53)
            break;
        }
        ++v47;
        v46 = v48;
        if (v86 == v47)
          goto LABEL_47;
      }
      if (v47)
      {
        v54 = v81 - v44;
        if (v81 - v44 + v53 > *(_DWORD *)(v22 + ((unint64_t)v47 << 6) + 32))
          goto LABEL_49;
      }
      else
      {
LABEL_47:
        v54 = v81 - v44;
      }
      *(_DWORD *)(v22 + (v23 << 6) + 36) = v54;
LABEL_49:
      ++v23;
      v55 = v86;
      v21 += 64;
      if (v23 >= v86)
      {
        if (v86 < 2u)
        {
          LOWORD(v20) = v86;
        }
        else
        {
          v57 = v87;
          v58 = 1;
          v20 = v86;
          v59 = 1;
          do
          {
            if (*(_DWORD *)(v57 + ((unint64_t)v59 << 6) + 20) != 0x4000
              && (v60 = (v58 + 1), v60 < v55)
              && ((v61 = (_OWORD *)(v57 + (v60 << 6)),
                   v62 = *((_DWORD *)v61 + 8),
                   v63 = (__int128 *)(v57 + ((unint64_t)v59 << 6)),
                   v64 = *((_DWORD *)v63 + 8),
                   v62 < v64)
               || v62 == v64
               && (v63 = (__int128 *)(v57 + ((unint64_t)v59 << 6)),
                   *(_DWORD *)(v57 + (v60 << 6) + 36) < *((_DWORD *)v63 + 9))))
            {
              v59 = 0;
              v65 = v61[2];
              v66 = v61[3];
              v67 = v63[3];
              v69 = *v63;
              v68 = v63[1];
              v61[2] = v63[2];
              v61[3] = v67;
              v70 = *v61;
              v71 = v61[1];
              *v61 = v69;
              v61[1] = v68;
              v82 = v70;
              v83 = v71;
              v84 = v65;
              v85 = v66;
              *v63 = v70;
              v63[1] = v71;
              v72 = v85;
              v63[2] = v84;
              v63[3] = v72;
            }
            else
            {
              ++v59;
            }
            v58 = v59;
            v55 = v20;
          }
          while (v59 < v20);
          if (v20 >= 2)
          {
            v73 = 1;
LABEL_69:
            v74 = v87;
            do
            {
              v75 = v87 + ((unint64_t)v73 << 6);
              if (*(_DWORD *)(v75 + 20) == 1)
              {
                v76 = (_DWORD *)(v75 + 32);
                v77 = v73;
                while (++v77 < (unsigned __int16)v20)
                {
                  v78 = v87 + ((unint64_t)v77 << 6);
                  if (*(_DWORD *)(v78 + 32) != *v76)
                    break;
                  if (*(_DWORD *)(v78 + 20) == 1)
                  {
                    v79 = (_DWORD *)(v87 + ((unint64_t)v77 << 6));
                    *(_DWORD *)(v87 + ((unint64_t)v73 << 6) + 28) = v79[7]
                                                                         + v79[6]
                                                                         - *(_DWORD *)(v87
                                                                                     + ((unint64_t)v73 << 6)
                                                                                     + 24);
                    v80 = v77 + 1;
                    if ((unsigned __int16)v20 > v80)
                    {
                      memmove(v79, (const void *)(v74 + (v80 << 6)), (uint64_t)((unsigned __int16)v20 - (int)v80) << 6);
                      LOWORD(v20) = v86;
                    }
                    LOWORD(v20) = v20 - 1;
                    v86 = v20;
                    if (v73 < (unsigned __int16)v20)
                      goto LABEL_69;
                    goto LABEL_83;
                  }
                }
              }
              ++v73;
            }
            while (v73 < (unsigned __int16)v20);
          }
        }
LABEL_83:
        *a4 = v20;
        break;
      }
    }
  }
LABEL_53:
  if (v93[0])
    bed_ObjClose(v93[0]);
  return v19;
}

uint64_t utoin_LookUpUdctWord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, __int16 a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  unsigned __int16 v13;
  BOOL v14;
  char *v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  int v21;
  uint64_t v22;

  v22 = 0;
  v21 = 1;
  if (!a4)
    return 2370838535;
  v9 = 0;
  *(_DWORD *)(a4 + 12) = 0;
  v10 = *(unsigned __int16 *)(a4 + 8);
  if (v10 <= a6)
  {
    *(_BYTE *)(*(_QWORD *)a4 + v10) = 0;
    *(_WORD *)(a4 + 24) = a7;
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, const char *, int *, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD))(a1 + 128))(a2, a3, a5, *(_QWORD *)a4, 0, "normal", &v21, *(_QWORD *)(a4 + 16), a4 + 24, a8, 0, &v22, 0, 0);
    v9 = 0;
    if (!v11)
    {
      v12 = *(char **)(a4 + 16);
      v13 = strlen(v12);
      *(_WORD *)(a4 + 24) = v13;
      if (!v12[v13 - 1])
        *(_WORD *)(a4 + 24) = --v13;
      if (v21 == 4)
      {
        if (v13 >= 7u
          && (*(_WORD *)v12 == 12049 ? (v14 = v12[2] == 62) : (v14 = 0),
              v14
           && ((v15 = &v12[v13], v16 = *(unsigned __int16 *)(v15 - 3), v17 = *(v15 - 1), v16 == 12049)
             ? (v18 = v17 == 62)
             : (v18 = 0),
               v18)))
        {
          memmove(v12, v12 + 2, v13 - 4);
          *(_BYTE *)(*(unsigned __int16 *)(a4 + 24) + *(_QWORD *)(a4 + 16) - 4) = 0;
          v19 = 16;
          **(_BYTE **)(a4 + 16) = 16;
          *(_BYTE *)(*(unsigned __int16 *)(a4 + 24) + *(_QWORD *)(a4 + 16) - 5) = 17;
          *(_WORD *)(a4 + 24) -= 4;
        }
        else
        {
          v19 = 2;
        }
      }
      else
      {
        v19 = 43;
      }
      v9 = 0;
      *(_DWORD *)(a4 + 12) = v19;
    }
  }
  return v9;
}

uint64_t utoin_ReplaceWord(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, char *a7)
{
  uint64_t v7;
  uint64_t TNArgStr;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  _DWORD **v25;
  unsigned int v26;
  __int128 *v27;
  unsigned int v28;
  __int128 *v29;
  unsigned int v30;
  _DWORD *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  _DWORD *v38;
  unsigned int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  BOOL v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;
  _DWORD *i;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  char __s[4];
  int v66[2];
  __int128 v67;
  __int128 v68;
  _OWORD v69[2];
  __int128 v70;
  __int128 v71;
  _OWORD v72[2];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _BYTE v78[32];
  __int128 v79;
  int v80;
  _DWORD *v81;
  _QWORD v82[3];

  v81 = 0;
  v82[0] = 0;
  *(_QWORD *)v66 = 0;
  v7 = 2370838535;
  v77 = MarkerUDCTREF;
  *(_OWORD *)v78 = unk_1DEC66C68;
  *(_OWORD *)&v78[16] = xmmword_1DEC66C78;
  v79 = unk_1DEC66C88;
  v73 = MarkerSetTypeOfInput;
  v74 = unk_1DEC66CA8;
  v75 = xmmword_1DEC66CB8;
  v76 = unk_1DEC66CC8;
  memset(v72, 0, sizeof(v72));
  v70 = MarkerSetLang;
  v71 = unk_1DEC66CE8;
  memset(v69, 0, sizeof(v69));
  v67 = MarkerSetNLU;
  v68 = unk_1DEC66D28;
  if (!a1 || !a2 || !a4)
    return v7;
  v80 = 0;
  TNArgStr = bed_GetpElem(a2, 0, v82);
  if ((TNArgStr & 0x80000000) != 0)
    return TNArgStr;
  v16 = *(unsigned int *)(v82[0] + 32);
  TNArgStr = bed_GetpElem(a2, 0xFFFFu, &v81);
  if ((TNArgStr & 0x80000000) != 0)
    return TNArgStr;
  if (a5 == 1 && v81[5] != 7)
    return v7;
  TNArgStr = datac_RequestBlock(a6, 1012, 1u, v66);
  if ((TNArgStr & 0x80000000) != 0)
    return TNArgStr;
  v64 = v16;
  v17 = v81[8];
  v18 = a3;
  v19 = *(_DWORD *)(v82[0] + 32);
  v61 = v81[6];
  v62 = a5;
  v58 = v81[7];
  v59 = v81[9];
  v20 = v18;
  v60 = *(unsigned __int16 *)(a4 + 8);
  TNArgStr = bed_Remove(a1, v18, v60);
  if ((TNArgStr & 0x80000000) != 0)
    return TNArgStr;
  v21 = v17 - v19;
  if (*(_WORD *)(a4 + 24))
  {
    v22 = v20;
    TNArgStr = bed_Goto(a1, v20);
    if ((TNArgStr & 0x80000000) != 0)
      return TNArgStr;
    TNArgStr = bed_Insert(a1, *(void **)(a4 + 16), *(unsigned __int16 *)(a4 + 24));
    if ((TNArgStr & 0x80000000) != 0)
      return TNArgStr;
    v23 = v21;
    if (*(unsigned __int16 *)(a4 + 8) + v20 >= v81[9] + v21)
    {
      v56 = v81[8];
      v57 = 1;
    }
    else
    {
      v56 = 0;
      v57 = 0;
    }
  }
  else
  {
    v23 = v21;
    v56 = 0;
    v57 = 0;
    v22 = v20;
  }
  v24 = v62;
  v25 = (_DWORD **)v82;
  if (v62 == 1)
    v25 = &v81;
  (*v25)[9] = (*v25)[9] + *(unsigned __int16 *)(a4 + 24) - *(unsigned __int16 *)(a4 + 8);
  TNArgStr = bed_GetiElem(a2, &v80);
  if ((TNArgStr & 0x80000000) != 0)
    return TNArgStr;
  v63 = v22 - v23;
  if (a7)
  {
    DWORD1(v71) = 36;
    TNArgStr = addOrGetTNArgStr(*(uint64_t *)v66, a7, (unsigned int *)v72 + 2, a6);
    if ((TNArgStr & 0x80000000) != 0)
      return TNArgStr;
    v26 = v81[8];
    if (v26 - v64 < v22)
    {
      *((_QWORD *)&v71 + 1) = (v63 + v61);
      *(_QWORD *)&v72[0] = v64 + v22;
      TNArgStr = bed_Goto(a2, 1u);
      if ((TNArgStr & 0x80000000) != 0)
        return TNArgStr;
      v27 = &v70;
      goto LABEL_29;
    }
    *((_QWORD *)&v71 + 1) = v81[6];
    *(_QWORD *)&v72[0] = v26;
    TNArgStr = bed_Goto(a2, 1u);
    if ((TNArgStr & 0x80000000) != 0)
      return TNArgStr;
    v29 = &v70;
LABEL_36:
    TNArgStr = bed_marker_InjectFixedRefMarker(a2, v29);
    if ((TNArgStr & 0x80000000) != 0)
      return TNArgStr;
    TNArgStr = bed_Goto(a2, (unsigned __int16)v80 + 1);
    if ((TNArgStr & 0x80000000) != 0)
      return TNArgStr;
    LOWORD(v80) = v80 + 1;
    v81 += 16;
    goto LABEL_39;
  }
  strcpy(__s, "BND");
  DWORD1(v68) = 51;
  TNArgStr = addOrGetTNArgStr(*(uint64_t *)v66, __s, (unsigned int *)v69 + 2, a6);
  if ((TNArgStr & 0x80000000) != 0)
    return TNArgStr;
  v28 = v81[8];
  if (v28 - v64 >= v22)
  {
    *((_QWORD *)&v68 + 1) = v81[6];
    *(_QWORD *)&v69[0] = v28;
    TNArgStr = bed_Goto(a2, 1u);
    if ((TNArgStr & 0x80000000) != 0)
      return TNArgStr;
    v29 = &v67;
    goto LABEL_36;
  }
  *((_QWORD *)&v68 + 1) = (v63 + v61);
  *(_QWORD *)&v69[0] = v64 + v22;
  TNArgStr = bed_Goto(a2, 1u);
  if ((TNArgStr & 0x80000000) != 0)
    return TNArgStr;
  v27 = &v67;
LABEL_29:
  TNArgStr = bed_marker_InjectFixedRefMarker(a2, v27);
  if ((TNArgStr & 0x80000000) != 0)
    return TNArgStr;
  TNArgStr = bed_Goto(a2, (unsigned __int16)v80);
  if ((TNArgStr & 0x80000000) != 0)
    return TNArgStr;
LABEL_39:
  TNArgStr = bed_GetcElem(a2, (_WORD *)&v80 + 1);
  if ((TNArgStr & 0x80000000) != 0)
    return TNArgStr;
  v30 = HIWORD(v80);
  v31 = v81 + 16;
  v32 = (unsigned __int16)v80 + 1;
  if (HIWORD(v80) > (unsigned __int16)(v80 + 1))
  {
    v33 = v64 + v22;
    do
    {
      v34 = v31[8];
      if (v33 <= v34)
      {
        v35 = *(unsigned __int16 *)(a4 + 8);
        v36 = v64 + v22;
        if (v33 + v35 <= v34)
          v36 = v34 - v35 + *(unsigned __int16 *)(a4 + 24);
        v31[8] = v36;
      }
      v31 += 16;
      ++v32;
    }
    while (v30 > (unsigned __int16)v32);
    LOWORD(v32) = v30;
  }
  v81 = v31;
  LOWORD(v80) = v32;
  if (!v24)
    return 0;
  TNArgStr = bed_GetpElem(a2, 0xFFFFu, &v81);
  if ((TNArgStr & 0x80000000) != 0)
    return TNArgStr;
  v37 = *(unsigned __int16 *)(a4 + 24);
  v38 = v81;
  if (*(_WORD *)(a4 + 24))
  {
    v39 = v81[10];
    v40 = *(_DWORD *)(a4 + 12);
    if (v39 != v40)
    {
      v41 = v81[8];
      if (v41 - (int)v64 >= v22)
      {
        v47 = *(unsigned __int16 *)(a4 + 8);
        v81[7] = v47;
        v38[9] = v37;
        v38[10] = v40;
        if (*(_DWORD *)(a4 + 12) == 16)
        {
          *(_DWORD *)&v78[8] = v38[6];
          *(_DWORD *)&v78[12] = v47;
          *(_DWORD *)&v78[16] = v41;
          *(_DWORD *)&v78[20] = v37;
LABEL_63:
          *(_DWORD *)&v78[24] = 16;
          TNArgStr = bed_marker_InjectFixedRefMarker(a2, &v77);
          if ((TNArgStr & 0x80000000) != 0)
            return TNArgStr;
        }
      }
      else
      {
        v81[9] = v64 + v22 - v41;
        TNArgStr = bed_marker_MapPosCur(a2, v64 + v22, v38 + 7);
        if ((TNArgStr & 0x80000000) != 0)
          return TNArgStr;
        v81[7] -= v81[6];
        v42 = *(_DWORD *)(a4 + 12);
        v43 = v60;
        if (v42 == 16)
          v43 = 0;
        DWORD2(v74) = v63 + v61;
        HIDWORD(v74) = v43;
        v44 = *(unsigned __int16 *)(a4 + 24);
        LODWORD(v75) = v64 + v22;
        *(_QWORD *)((char *)&v75 + 4) = __PAIR64__(v42, v44);
        TNArgStr = bed_marker_InjectFixedRefMarker(a2, &v73);
        if ((TNArgStr & 0x80000000) != 0)
          return TNArgStr;
        if (*(_DWORD *)(a4 + 12) == 16)
        {
          *(_DWORD *)&v78[8] = v63 + v61;
          *(_DWORD *)&v78[12] = v60;
          v45 = *(unsigned __int16 *)(a4 + 24);
          *(_DWORD *)&v78[16] = v64 + v22;
          *(_DWORD *)&v78[20] = v45;
          goto LABEL_63;
        }
      }
      v48 = *(unsigned __int16 *)(a4 + 8) + v22;
      v49 = v23 + v59 >= v48;
      v50 = v23 + v59 - v48;
      if (v50 == 0 || !v49)
      {
        v51 = v64 + v22;
LABEL_67:
        if (v57)
          v52 = v56;
        else
          v52 = v51 + *(unsigned __int16 *)(a4 + 24);
        LOWORD(v80) = 0;
        TNArgStr = bed_GetpElem(a2, 0, &v81);
        if ((TNArgStr & 0x80000000) != 0)
          return TNArgStr;
        TNArgStr = bed_GetcElem(a2, (_WORD *)&v80 + 1);
        if ((TNArgStr & 0x80000000) != 0)
          return TNArgStr;
        v53 = (unsigned __int16)v80;
        if ((unsigned __int16)v80 < HIWORD(v80))
        {
          for (i = v81 + 16; *(i - 11) != 7 || *(i - 6) != v39 || *(i - 8) != v52; i += 16)
          {
            v7 = 0;
            v81 = i;
            LOWORD(v80) = ++v53;
            if (v53 >= HIWORD(v80))
              return v7;
          }
          TNArgStr = bed_Goto(a2, v53);
          if ((TNArgStr & 0x80000000) != 0)
            return TNArgStr;
        }
        return 0;
      }
      DWORD2(v74) = v63 + v60 + v61;
      HIDWORD(v74) = v58 - (v63 + v60);
      v51 = v64 + v22;
      LODWORD(v75) = v51 + *(unsigned __int16 *)(a4 + 24);
      *(_QWORD *)((char *)&v75 + 4) = __PAIR64__(v39, v50);
      TNArgStr = bed_marker_InjectFixedRefMarker(a2, &v73);
      if ((TNArgStr & 0x80000000) == 0)
        goto LABEL_67;
      return TNArgStr;
    }
  }
  else
  {
    v39 = *(_DWORD *)(a4 + 12);
  }
  *(_OWORD *)&v78[8] = *(_OWORD *)(v81 + 6);
  *(_DWORD *)&v78[24] = v39;
  v46 = bed_marker_InjectFixedRefMarker(a2, &v77);
  return v46 & (v46 >> 31);
}

uint64_t addOrGetTNArgStr(uint64_t a1, char *__s, unsigned int *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int v10;
  unsigned int v11;
  const char *v12;
  uint64_t v13;
  unsigned __int16 v14;
  __int16 v15;
  uint64_t v17;

  v4 = 2370838535;
  v17 = a1;
  if (a1)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (v6)
    {
      v10 = *(unsigned __int16 *)(a1 + 16);
      if (!*(_WORD *)(a1 + 16))
      {
LABEL_7:
        *a3 = v10;
        v14 = strlen(__s) + 1;
        v15 = v14 + v10;
        if (*(unsigned __int16 *)(a1 + 18) >= (unsigned __int16)(v14 + v10))
        {
          v4 = 0;
        }
        else
        {
          v4 = datac_RequestBlock(a4, 1012, (unsigned __int16)(v14 + v10), &v17);
          if ((v4 & 0x80000000) != 0)
            return v4;
          v6 = *(_QWORD *)(v17 + 8);
          v10 = *(unsigned __int16 *)(v17 + 16);
        }
        memcpy((void *)(v6 + v10), __s, v14);
        *(_WORD *)(v17 + 16) = v15;
        return v4;
      }
      v11 = 0;
      v12 = *(const char **)(a1 + 8);
      while (strcmp(__s, v12))
      {
        v13 = strlen(v12) + 1;
        v11 += v13;
        v12 += v13;
        if (v11 >= v10)
          goto LABEL_7;
      }
      v4 = 0;
      *a3 = v11;
    }
  }
  return v4;
}

uint64_t utoin_IncrReplaceCurrentRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result;
  int v10;
  int v11;
  int v12;
  unsigned __int16 v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  unsigned __int16 v32;
  void *__src;
  int v34;
  uint64_t v35;
  uint64_t v36;

  v35 = 0;
  v36 = 0;
  result = 2370838535;
  __src = 0;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        v34 = 0;
        v32 = 0;
        result = bed_GetpElem(a2, 0, &v36);
        if ((result & 0x80000000) == 0)
        {
          result = bed_GetpElem(a2, 0xFFFFu, &v35);
          if ((result & 0x80000000) == 0)
          {
            v10 = *(_DWORD *)(v35 + 32);
            v11 = *(_DWORD *)(v36 + 32);
            v12 = *(unsigned __int16 *)(v35 + 36);
            result = bed_GetcElem(a3, (_WORD *)&v34 + 1);
            if ((result & 0x80000000) == 0)
            {
              v13 = v10 - v11;
              if (HIWORD(v34))
              {
                result = bed_GetpElem(a3, 0, &__src);
                if ((result & 0x80000000) != 0)
                  return result;
                result = bed_Remove(a1, v13, v12);
                if ((result & 0x80000000) != 0)
                  return result;
                result = bed_Goto(a1, v13);
                if ((result & 0x80000000) != 0)
                  return result;
                result = bed_Insert(a1, __src, HIWORD(v34));
                if ((result & 0x80000000) != 0)
                  return result;
                v14 = HIWORD(v34);
                v15 = a3;
                v16 = 0;
              }
              else
              {
                v16 = v13;
                v15 = a1;
                v14 = v12;
              }
              result = bed_Remove(v15, v16, v14);
              if ((result & 0x80000000) == 0)
              {
                v17 = v35;
                *(_DWORD *)(v35 + 36) = HIWORD(v34);
                v18 = *(_DWORD *)(v17 + 32);
                result = bed_GetiElem(a2, &v32);
                if ((result & 0x80000000) == 0)
                {
                  result = bed_GetcElem(a2, &v34);
                  if ((result & 0x80000000) == 0)
                  {
                    v19 = (unsigned __int16)v34;
                    v20 = v35;
                    v21 = v32 + 1;
                    v32 = v21;
                    if ((unsigned __int16)v34 > (unsigned __int16)v21)
                    {
                      v22 = v36;
                      v23 = HIWORD(v34);
                      while (1)
                      {
                        v24 = *(_DWORD *)(v20 + 96);
                        v25 = *(_DWORD *)(v22 + 32) + v13;
                        if (v24 >= v25 + v12)
                          break;
                        if (a5 && *((_DWORD *)a5 + 4) == 1 && *((_WORD *)a5 + 4) && *((_DWORD *)a5 + 3) != 1)
                        {
                          v27 = *a5;
                          v28 = 12 * *((unsigned __int16 *)a5 + 4);
                          while (1)
                          {
                            v29 = *(unsigned __int16 *)(v27 + v28 - 12);
                            if (v24 >= v18 + v29)
                              break;
                            v28 -= 12;
                            if (!v28)
                              goto LABEL_28;
                          }
                          v30 = v24 - v29;
                          if (*(_DWORD *)(v20 + 84) != 99)
                            v30 = v18;
                          v31 = v30 + *(unsigned __int16 *)(v27 + v28 - 4);
                          *(_DWORD *)(v20 + 96) = v31;
                          if (v31 == *(_DWORD *)(v22 + 32))
                            goto LABEL_28;
                          v26 = v31 + 1;
                          goto LABEL_27;
                        }
                        *(_DWORD *)(v20 + 96) = v25;
                        if (v25 != *(_DWORD *)(v22 + 32))
                        {
                          v26 = v25 + 1;
LABEL_27:
                          *(_DWORD *)(v20 + 96) = v26;
                        }
LABEL_28:
                        v20 += 64;
                        v32 = ++v21;
                        if (v19 <= (unsigned __int16)v21)
                          return result;
                      }
                      v26 = v24 - v12 + v23;
                      goto LABEL_27;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t utoin_ObjOpen(_WORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, __int16 a14, __int16 a15, __int16 a16)
{
  uint64_t v16;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t fecfg_fewordseg_param;
  const char *v34;
  char *v35;
  unsigned __int16 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  char *v41;
  char *v42;
  const char *v43;
  char *v44;
  _BOOL8 v45;
  uint64_t v46;
  uint64_t v47;
  char i;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  char v55[3];
  _BYTE v56[8];
  __int16 v57;
  char v58[8];
  char v59[9];
  unsigned __int8 __c;
  __int16 __c_1;
  char **__c_3;
  int v63;
  uint64_t v64;
  char v65[16];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v16 = 2370838528;
  __c_3 = 0;
  __c_1 = 0;
  __c = 0;
  strcpy(v59, "xlit23");
  v64 = 0;
  strcpy(v65, "cpextensions");
  strcpy(v58, "win936");
  *(_WORD *)&v56[1] = -1;
  if (!a3)
    return 2370838535;
  v63 = 0;
  v56[0] = 0;
  if ((InitRsrcFunction(a1, a2, &v64) & 0x80000000) != 0)
    return 2370838535;
  *a3 = 0;
  v24 = heap_Alloc(*(_QWORD *)(v64 + 8), 184);
  if (v24)
  {
    v29 = v24;
    *(_OWORD *)v24 = 0u;
    *(_OWORD *)(v24 + 16) = 0u;
    *(_OWORD *)(v24 + 48) = 0u;
    *(_OWORD *)(v24 + 64) = 0u;
    *(_OWORD *)(v24 + 144) = 0u;
    *(_OWORD *)(v24 + 160) = 0u;
    *(_OWORD *)(v24 + 112) = 0u;
    *(_OWORD *)(v24 + 128) = 0u;
    *(_QWORD *)(v24 + 176) = 0;
    *(_OWORD *)(v24 + 80) = 0u;
    *(_OWORD *)(v24 + 96) = 0u;
    *(_OWORD *)(v24 + 32) = 0u;
    *(_QWORD *)v24 = a1;
    *(_QWORD *)(v24 + 8) = a2;
    v30 = v64;
    *(_QWORD *)(v24 + 16) = v64;
    *(_QWORD *)(v24 + 24) = 0;
    *(_QWORD *)(v24 + 32) = a7;
    *(_QWORD *)(v24 + 40) = a9;
    *(_QWORD *)(v24 + 48) = a10;
    *(_WORD *)(v24 + 56) = 0;
    *(_DWORD *)(v24 + 60) = 0;
    *(_DWORD *)(v24 + 72) = 0;
    *(_DWORD *)(v24 + 172) = 0;
    *(_DWORD *)(v24 + 144) = 0;
    *(_DWORD *)(v24 + 164) = 0;
    *(_QWORD *)(v24 + 136) = 0;
    *(_QWORD *)(v24 + 148) = 0x100000001;
    *(_QWORD *)(v24 + 80) = a4;
    *(_QWORD *)(v24 + 88) = a5;
    *(_QWORD *)(v24 + 96) = a6;
    *(_QWORD *)(v24 + 104) = a11;
    *(_QWORD *)(v24 + 112) = a12;
    *(_QWORD *)(v24 + 120) = a13;
    *(_WORD *)(v24 + 128) = a14;
    *(_WORD *)(v24 + 130) = a15;
    *(_WORD *)(v24 + 132) = a16;
    *(_DWORD *)(v24 + 176) = 0;
    *(_DWORD *)(v24 + 168) = 0;
    if (!a11)
    {
      v37 = *(_QWORD *)(v30 + 32);
      v38 = 1806;
      goto LABEL_36;
    }
    __c_1 = 0;
    if (((*(uint64_t (**)(void))(a7 + 96))() & 0x80000000) != 0 || !__c_1)
    {
      v37 = *(_QWORD *)(v64 + 32);
      v38 = 1801;
      goto LABEL_36;
    }
    if (__c_1 == 1 && __c_3)
    {
      v31 = strchr(*__c_3, __c);
      if (v31)
        *v31 = 0;
      __strcpy_chk();
    }
    __c_1 = 0;
    if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(a7 + 96))(*(_QWORD *)(v29 + 40), *(_QWORD *)(v29 + 48), "fecfg", "translitdef", &__c_3, &__c_1, &__c) & 0x80000000) != 0|| !__c_1)
    {
      v37 = *(_QWORD *)(v64 + 32);
      v38 = 1803;
      goto LABEL_36;
    }
    if (__c_1 == 1 && __c_3)
    {
      v32 = strchr(*__c_3, __c);
      if (v32)
        *v32 = 0;
      __strcpy_chk();
    }
    __c_1 = -1;
    fecfg_fewordseg_param = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(a7 + 96))(*(_QWORD *)(v29 + 40), *(_QWORD *)(v29 + 48), "fecfg", "backtrans", &__c_3, &__c_1, &__c);
    if ((fecfg_fewordseg_param & 0x80000000) == 0)
    {
      *(_DWORD *)(v29 + 64) = __c_1 != 0;
      fecfg_fewordseg_param = read_fecfg_fewordseg_param(a7, v29, (_DWORD *)(v29 + 164), (uint64_t)"fewordseg_wpcrf");
      if ((fecfg_fewordseg_param & 0x80000000) == 0)
      {
        fecfg_fewordseg_param = read_fecfg_fewordseg_param(a7, v29, (_DWORD *)(v29 + 164), (uint64_t)"fewordseg_bypasshexcode");
        if ((fecfg_fewordseg_param & 0x80000000) == 0)
        {
          fecfg_fewordseg_param = read_fecfg_fewordseg_param(a7, v29, (_DWORD *)(v29 + 172), (uint64_t)"fewordseg_skipCollapseIdenticalRegion");
          if ((fecfg_fewordseg_param & 0x80000000) == 0)
          {
            fecfg_fewordseg_param = read_fecfg_fewordseg_param(a7, v29, (_DWORD *)(v29 + 176), (uint64_t)"fewordseg_extra_split_marker");
            if ((fecfg_fewordseg_param & 0x80000000) == 0)
            {
              if (!*(_DWORD *)(v29 + 64))
              {
                v57 = 0;
                strcpy(&v56[3], "word");
                v40 = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE *, int *))(a7 + 72))(*(_QWORD *)(v29 + 40), *(_QWORD *)(v29 + 48), &v56[3], &v63);
                if ((v40 & 0x80000000) == 0)
                {
                  if (v63)
                  {
                    v36 = 1;
LABEL_44:
                    *(_WORD *)(v29 + 56) = v36;
                    *(_DWORD *)(v29 + 60) = 0;
                    *(_WORD *)&v56[1] = -1;
                    (*(void (**)(_QWORD, _QWORD, const char *, const char *, char ***, _BYTE *, _BYTE *))(a7 + 96))(*(_QWORD *)(v29 + 40), *(_QWORD *)(v29 + 48), "fecfg", "versioninfo", &__c_3, &v56[1], v56);
                    if (*(_WORD *)&v56[1])
                    {
                      v41 = *__c_3;
                      v42 = strchr(*__c_3, v56[0]);
                      if (v42)
                      {
                        *v42 = 0;
                        v41 = *__c_3;
                      }
                      *(_DWORD *)(v29 + 60) = hasCharDic(v41);
                    }
                    *(_WORD *)&v56[1] = -1;
                    (*(void (**)(_QWORD, _QWORD, const char *, const char *, char ***, _BYTE *, _BYTE *))(a7 + 96))(*(_QWORD *)(v29 + 40), *(_QWORD *)(v29 + 48), "fecfg", "useppdomains", &__c_3, &v56[1], v56);
                    if (*(_WORD *)&v56[1])
                    {
                      v43 = *__c_3;
                      v44 = strchr(*__c_3, v56[0]);
                      if (v44)
                      {
                        *v44 = 0;
                        v43 = *__c_3;
                      }
                      v45 = strcmp(v43, "1") == 0;
                    }
                    else
                    {
                      v45 = 0;
                    }
                    v46 = (*(uint64_t (**)(_QWORD, _QWORD, char *, int *))(a7 + 72))(*(_QWORD *)(v29 + 40), *(_QWORD *)(v29 + 48), v65, &v63);
                    if ((v46 & 0x80000000) != 0)
                    {
                      v16 = v46;
                      goto LABEL_37;
                    }
                    if (!v63)
                      v65[0] = 0;
                    v47 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, char *, char *, _BOOL8, char *))(*(_QWORD *)(v29 + 104) + 56))(*(_QWORD *)(v29 + 112), *(_QWORD *)(v29 + 120), v29 + 32, v59, v58, v45, v65);
                    if ((v47 & 0x80000000) == 0)
                    {
                      v16 = 0;
                      *a3 = v29;
                      return v16;
                    }
                    v16 = v47;
                    v37 = *(_QWORD *)(v64 + 32);
                    v38 = 1807;
LABEL_36:
                    log_OutPublic(v37, (uint64_t)&modPP_3, v38, 0, v25, v26, v27, v28, v54);
LABEL_37:
                    heap_Free(*(_QWORD **)(v64 + 8), v29);
                    return v16;
                  }
                  v36 = 0;
                  v57 = 0;
                  for (i = 1; ; i = 0)
                  {
                    strcpy(&v56[3], "word");
                    LH_itoa(v36, v55, 0xAu);
                    __strcat_chk();
                    v40 = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE *, int *))(a7 + 72))(*(_QWORD *)(v29 + 40), *(_QWORD *)(v29 + 48), &v56[3], &v63);
                    if ((v40 & 0x80000000) != 0)
                      break;
                    if (!v63)
                    {
                      if ((i & 1) == 0)
                        goto LABEL_44;
                      heap_Free(*(_QWORD **)(v64 + 8), v29);
                      log_OutPublic(*(_QWORD *)(v64 + 32), (uint64_t)&modPP_3, 1809, 0, v50, v51, v52, v53, v54);
                      return 2370838794;
                    }
                    ++v36;
                  }
                }
                v49 = v40;
                heap_Free(*(_QWORD **)(v64 + 8), v29);
                return v49;
              }
              *(_WORD *)&v56[1] = -1;
              fecfg_fewordseg_param = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, _BYTE *, _BYTE *))(a7 + 96))(*(_QWORD *)(v29 + 40), *(_QWORD *)(v29 + 48), "fecfg", "nrpart_g2p", &__c_3, &v56[1], v56);
              if ((fecfg_fewordseg_param & 0x80000000) == 0)
              {
                if (*(_WORD *)&v56[1])
                {
                  v34 = *__c_3;
                  v35 = strchr(*__c_3, v56[0]);
                  if (v35)
                  {
                    *v35 = 0;
                    v34 = *__c_3;
                  }
                  v36 = atoi(v34);
                }
                else
                {
                  v36 = 0;
                }
                goto LABEL_44;
              }
            }
          }
        }
      }
    }
    return fecfg_fewordseg_param;
  }
  return 2370838538;
}

uint64_t read_fecfg_fewordseg_param(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v5;
  const char *v7;
  char *v8;
  __int16 v10;
  _BYTE __c[9];

  memset(__c, 0, sizeof(__c));
  v10 = -1;
  v5 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t, _BYTE *, __int16 *, _BYTE *))(a1 + 96))(*(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), "fecfg", a4, &__c[1], &v10, __c);
  if ((v5 & 0x80000000) == 0 && v10 == 1 && *(_QWORD *)&__c[1] != 0)
  {
    v7 = **(const char ***)&__c[1];
    v8 = strchr(**(char ***)&__c[1], __c[0]);
    if (v8)
    {
      *v8 = 0;
      v7 = **(const char ***)&__c[1];
    }
    if (!strcmp(v7, "yes"))
      *a3 = 1;
  }
  return v5;
}

BOOL hasCharDic(char *a1)
{
  int v1;
  BOOL v2;
  unsigned int v3;
  _BOOL8 result;
  int v5;
  char *v8;
  char *__endptr;

  v8 = 0;
  __endptr = a1;
  v1 = strtol(a1, &v8, 10);
  v2 = v1 < 1 || v8 == 0;
  if (v2 || *v8 != 46)
    return 0;
  v3 = strtol(v8 + 1, &__endptr, 10);
  result = 0;
  if ((v3 & 0x80000000) != 0 || !__endptr)
    return result;
  if (*__endptr != 46)
    return 0;
  v5 = strtol(__endptr + 1, &v8, 10);
  result = 0;
  if (v5 < 0 || !v8)
    return result;
  if (*v8 != 46 && *v8)
    return 0;
  return v1 > 4 && v3 > 1 && v5 != 0;
}

uint64_t utoin_ObjClose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = 2370838535;
  v6 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v6) & 0x80000000) == 0)
  {
    v3 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 104) + 88))(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120));
    if ((v3 & 0x80000000) != 0)
    {
      return v3;
    }
    else
    {
      v4 = *(_QWORD *)(a1 + 136);
      if (v4)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v4);
        *(_QWORD *)(a1 + 136) = 0;
        *(_WORD *)(a1 + 146) = 0;
      }
      heap_Free(*(_QWORD **)(v6 + 8), a1);
      return 0;
    }
  }
  return v1;
}

uint64_t utoin_ProcessStart(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  int v6;

  v1 = 2370838535;
  v6 = 0;
  if (a1)
  {
    *(_DWORD *)(a1 + 72) = log_GetLogLevel(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32)) > 4;
    v3 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 104) + 96))(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120));
    if ((v3 & 0x80000000) != 0)
      return v3;
    if ((paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"asianasciispaceudctlookup", &v6) & 0x80000000) == 0
      && v6 == 1)
    {
      *(_DWORD *)(a1 + 168) = 1;
    }
    v3 = paramc_ParamGet(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"langcode", (_QWORD *)(a1 + 24), 0);
    if ((v3 & 0x80000000) != 0)
    {
      return v3;
    }
    else
    {
      *(_WORD *)(a1 + 160) = 2;
      if (*(_WORD *)(a1 + 146))
      {
        return 0;
      }
      else
      {
        v5 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 120);
        *(_QWORD *)(a1 + 136) = v5;
        if (v5)
        {
          v1 = 0;
          *(_WORD *)(a1 + 146) = 10;
        }
        else
        {
          return 2370838538;
        }
      }
    }
  }
  return v1;
}

uint64_t utoin_ProcessEnd(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (!a1)
    return 2370838535;
  v2 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 104) + 104))(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120));
  if ((v2 & 0x80000000) == 0)
  {
    if (*(_QWORD *)(a1 + 24))
      paramc_ParamRelease(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40));
    v3 = *(_QWORD *)(a1 + 136);
    if (v3)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v3);
      *(_QWORD *)(a1 + 136) = 0;
      *(_WORD *)(a1 + 146) = 0;
    }
  }
  return v2;
}

uint64_t utoin_NormalizeRegions(_WORD **a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Backward;
  uint64_t Forward;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  int v36;
  _DWORD *v37;
  uint64_t v38;
  int v39;
  unsigned __int16 v40;
  unsigned __int16 v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  int *v57;
  uint64_t v58;
  int v59;
  unsigned __int16 v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _WORD *v64;
  _WORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  int *v85;
  unint64_t v86;
  _WORD *v87;
  unsigned int v88;
  _DWORD *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int16 v97;
  int v98;
  __int16 v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103[3];

  v103[1] = *MEMORY[0x1E0C80C00];
  v3 = 2370838535;
  v94 = 0;
  v95 = 0;
  if (!a1 || !a2)
    return 2370838535;
  v7 = bed_ObjOpen(*a1, (uint64_t)a1[1], a2, 1020, &v95, 213);
  if ((v7 & 0x80000000) != 0)
    goto LABEL_176;
  v7 = bed_ObjOpen(*a1, (uint64_t)a1[1], a2, 1021, &v94, 213);
  if ((v7 & 0x80000000) != 0)
    goto LABEL_176;
  UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v95, v94, (uint64_t)"BEFORE utoin_RemoveNativeBlanks");
  v8 = (uint64_t)a1[2];
  v10 = v94;
  v9 = v95;
  v103[0] = 2;
  v101 = xmmword_1DEC66D9C;
  v102 = 8;
  if (!v95 || !v94)
    goto LABEL_127;
  v7 = bed_Goto(v95, 0);
  if ((v7 & 0x80000000) != 0)
    goto LABEL_176;
  v7 = bed_Goto(v10, 0);
  if ((v7 & 0x80000000) != 0)
    goto LABEL_176;
  LOWORD(v100) = 0;
  LOWORD(v96) = 0;
  v11 = bed_GoForward(v10, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiOfType, (uint64_t)v103);
  v12 = v11;
  if ((v11 & 0x80000000) != 0 && (v11 & 0x1FFF) != 0x14)
    goto LABEL_177;
  while ((v12 & 0x80000000) == 0)
  {
    Backward = bed_FindBackward(v10, (unsigned int (*)(uint64_t, unint64_t))bed_marker_IsToiNotOfType, (uint64_t)&v101, &v100);
    if ((Backward & 0x1FFF) == 0x14)
    {
      LOWORD(v100) = -1;
    }
    else
    {
      v12 = Backward;
      if ((Backward & 0x80000000) != 0)
        goto LABEL_177;
    }
    Forward = bed_FindForward(v10, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiNotOfType, (uint64_t)&v101, &v96);
    if ((Forward & 0x1FFF) == 0x14)
    {
      v7 = bed_GetcElem(v10, &v96);
      if ((v7 & 0x80000000) != 0)
        goto LABEL_176;
    }
    else
    {
      v12 = Forward;
      if ((Forward & 0x80000000) != 0)
        goto LABEL_177;
    }
    if ((unsigned __int16)v100 != 0xFFFF)
    {
      v7 = bed_Goto(v10, (unsigned __int16)v100);
      if ((v7 & 0x80000000) != 0)
        goto LABEL_176;
    }
    v7 = utoin_RemoveBlankRegions(v8, v10, (unsigned __int16)v96, v9);
    if ((v7 & 0x80000000) != 0)
      goto LABEL_176;
    v15 = bed_GoForward(v10, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiOfType, (uint64_t)v103);
    v12 = v15;
    if ((v15 & 0x80000000) != 0 && (v15 & 0x1FFF) != 0x14)
      goto LABEL_177;
  }
  UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v95, v94, (uint64_t)"BEFORE utoin_MergeRegions");
  v87 = a1[2];
  v16 = v94;
  *(_QWORD *)&v101 = 0;
  if (v95)
    v17 = v94 == 0;
  else
    v17 = 1;
  if (v17)
    goto LABEL_171;
  LOWORD(v103[0]) = 0;
  v18 = bed_GetpElem(v94, 0, &v101);
  if ((v18 & 0x80000000) != 0)
    goto LABEL_170;
  v18 = bed_GetcElem(v16, v103);
  if ((v18 & 0x80000000) != 0)
    goto LABEL_170;
  v21 = *a3;
  if (*a3)
  {
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *((_QWORD *)a3 + 1) + (v22 << 6);
      v25 = *(_DWORD *)v24;
      v26 = *(_DWORD *)(v24 + 4);
      v27 = *(unsigned __int16 *)(v24 + 8);
      v28 = *(int **)(v24 + 16);
      v29 = *(unsigned __int16 *)(v24 + 24);
      v30 = *(_DWORD **)(v24 + 32);
      v31 = *(unsigned __int16 *)(v24 + 40);
      v32 = *(int **)(v24 + 48);
      v33 = *(unsigned int *)(v24 + 56);
      if ((_DWORD)v33 == 1)
        break;
      if (LOWORD(v103[0]) < 2u)
        goto LABEL_46;
      v37 = (_DWORD *)(v101 + 104);
      v35 = 1;
      do
      {
        if (*(v37 - 5) == 7 && *v37 == v25)
          goto LABEL_47;
        ++v35;
        v37 += 16;
      }
      while (LOWORD(v103[0]) != v35);
LABEL_98:
      v23 = ++v22;
      if (v22 >= v21)
        goto LABEL_99;
    }
    if (LOWORD(v103[0]) < 2u)
    {
LABEL_46:
      LODWORD(v38) = 1;
    }
    else
    {
      v34 = (int *)(v101 + 84);
      v35 = 1;
      while (1)
      {
        v36 = *v34;
        v34 += 16;
        if (v36 == 7)
          break;
        if (LOWORD(v103[0]) == ++v35)
          goto LABEL_98;
      }
LABEL_47:
      LODWORD(v38) = v35;
    }
    if (LOWORD(v103[0]) <= (unsigned __int16)v38)
      goto LABEL_98;
    v85 = v32;
    v86 = v22;
    v39 = 0;
    v40 = 0;
    v41 = v103[0];
    v93 = v25;
    v92 = v23;
    v91 = v26;
    v89 = v30;
    v90 = v29;
    v88 = v33;
    while (1)
    {
      if ((_DWORD)v27)
      {
        v42 = 0;
        do
        {
          v40 = v38;
          if ((unsigned __int16)(v38 - 1) > (unsigned __int16)v39)
          {
            v43 = (unsigned __int16)(v38 - 1);
            v40 = v38;
            do
            {
              v44 = v101 + (v43 << 6);
              if (*(_DWORD *)(v44 + 20) == 7)
              {
                v45 = *(_DWORD *)(v44 + 40);
                v46 = v28;
                v47 = v27;
                while (1)
                {
                  v48 = *v46++;
                  if (v48 == v45)
                    break;
                  if (!--v47)
                    goto LABEL_61;
                }
                v40 = v43;
              }
              --v43;
            }
            while ((unsigned __int16)v39 < (unsigned __int16)v43);
          }
LABEL_61:
          ++v42;
        }
        while (v42 < v27);
      }
      if ((_DWORD)v29)
      {
        if ((unsigned __int16)(v38 + 1) < v41)
        {
          v49 = (unsigned __int16)(v38 + 1);
          v39 = v38;
          do
          {
            v50 = v101 + (v49 << 6);
            if (*(_DWORD *)(v50 + 20) == 7)
            {
              v51 = *(_DWORD *)(v50 + 40);
              v52 = v30;
              v53 = v29;
              while (1)
              {
                v54 = *v52++;
                if (v54 == v51)
                  break;
                if (!--v53)
                  goto LABEL_80;
              }
              v39 = v49;
            }
            ++v49;
          }
          while (v41 != (unsigned __int16)v49);
          goto LABEL_80;
        }
      }
      else
      {
        if (!(_DWORD)v31)
          goto LABEL_80;
        v39 = v38 + 1;
        if ((unsigned __int16)(v38 + 1) < v41)
        {
          v55 = v101 + ((unint64_t)(unsigned __int16)(v38 + 1) << 6);
          if (*(_DWORD *)(v55 + 20) != 7)
          {
            while (1)
              ;
          }
          v56 = *(_DWORD *)(v55 + 40);
          v57 = v85;
          v58 = v31;
          do
          {
            v59 = *v57++;
            if (v59 == v56)
              goto LABEL_80;
          }
          while (--v58);
        }
      }
      v39 = v38;
LABEL_80:
      if (v40 != (unsigned __int16)v39)
      {
        log_OutText(*((_QWORD *)v87 + 4), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOI] (applying mergeRule %d between markers %u and %u)", v19, v33, v20, v23);
        v33 = v88;
        v30 = v89;
        v29 = v90;
        v26 = v91;
        v25 = v93;
        v23 = v92;
      }
      if (v40 < (unsigned __int16)v39)
      {
        v60 = v40;
        do
        {
          if (*(_DWORD *)(v101 + ((unint64_t)v60 << 6) + 20) == 7
            && (v26 == 3 || *(_DWORD *)(v101 + ((unint64_t)v60 << 6) + 40) != 1))
          {
            *(_DWORD *)(v101 + ((unint64_t)v60 << 6) + 40) = v26;
          }
          ++v60;
        }
        while (v60 <= (unsigned __int16)v39);
      }
      if ((_DWORD)v33 != 1)
      {
        v41 = v103[0];
        LODWORD(v38) = v39 + 1;
        if (LOWORD(v103[0]) > (unsigned __int16)(v39 + 1))
        {
          v38 = (unsigned __int16)(v39 + 1);
          v61 = (_DWORD *)(v101 + (v38 << 6) + 40);
          while (*(v61 - 5) != 7 || *v61 != v25)
          {
            ++v38;
            v61 += 16;
            if (LOWORD(v103[0]) == v38)
              goto LABEL_97;
          }
        }
        if (LOWORD(v103[0]) > (unsigned __int16)v38)
          continue;
      }
LABEL_97:
      v21 = *a3;
      v22 = v86;
      goto LABEL_98;
    }
  }
LABEL_99:
  if (*((_DWORD *)a1 + 43) != 1)
  {
    UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v95, v94, (uint64_t)"BEFORE utoin_CollapseIdenticalRegions");
    v7 = utoin_CollapseIdenticalRegions((uint64_t)a1, v95, v94);
    if ((v7 & 0x80000000) != 0)
      goto LABEL_176;
  }
  UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v95, v94, (uint64_t)"BEFORE utoin_LookUpWords");
  v63 = v94;
  v62 = v95;
  *(_QWORD *)&v101 = 7;
  v103[0] = 0;
  v100 = 0;
  v98 = 0;
  if (!v95 || !v94)
  {
LABEL_127:
    v12 = 2370838535;
    goto LABEL_177;
  }
  v64 = a1[10];
  if (!v64)
    goto LABEL_137;
  v65 = a1[2];
  v99 = 0;
  v7 = (*((uint64_t (**)(_WORD *, _WORD *, int *))v64 + 15))(a1[11], a1[12], &v98);
  if ((v7 & 0x80000000) != 0)
    goto LABEL_176;
  if (!v98)
    goto LABEL_137;
  if (log_HasTraceTuningDataSubscriber(*((_QWORD *)v65 + 4)))
  {
    v97 = 0;
    v96 = 0;
    bed_GetpElem(v62, 0, &v96);
    v7 = bed_GetcElem(v62, &v97);
    if ((v7 & 0x80000000) != 0)
      goto LABEL_176;
    log_OutTraceTuningDataBinary(*((_QWORD *)v65 + 4), 105, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-16",
      v96,
      v97);
  }
  v66 = bed_GetcElem(v62, &v99);
  if ((v66 & 0x80000000) == 0)
  {
    v67 = datac_RequestBlock(a2, 1029, (unsigned __int16)(v99 + 1), &v100);
    if ((v67 & 0x80000000) != 0)
    {
      v12 = v67;
      if ((v67 & 0x1FFF) == 0x14)
      {
LABEL_137:
        v72 = (uint64_t)a1[2];
        v74 = v94;
        v73 = v95;
        if (*((_DWORD *)a1 + 43) == 1)
          goto LABEL_140;
        UTOITrace(*((_DWORD *)a1 + 18), v72, v95, v94, (uint64_t)"BEFORE utoin_CollapseIdenticalRegions (second)");
        v7 = utoin_CollapseIdenticalRegions((uint64_t)a1, v95, v94);
        if ((v7 & 0x80000000) == 0)
        {
          v72 = (uint64_t)a1[2];
          v74 = v94;
          v73 = v95;
LABEL_140:
          UTOITrace(*((_DWORD *)a1 + 18), v72, v73, v74, (uint64_t)"BEFORE utoin_RemoveBlanksAtRegionBoundary");
          v75 = (uint64_t)a1[2];
          v77 = v94;
          v76 = v95;
          v103[0] = 1;
          v101 = xmmword_1DEC66E38;
          LODWORD(v102) = 0;
          v100 = 0;
          if (!v95 || !v94)
            goto LABEL_171;
          v18 = bed_Goto(v95, 0);
          if ((v18 & 0x80000000) == 0)
          {
            v18 = bed_Goto(v77, 0);
            if ((v18 & 0x80000000) == 0)
            {
              LOWORD(v96) = 0;
              LOWORD(v98) = 0;
              v78 = bed_GoForward(v77, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiOfType, (uint64_t)v103);
              v3 = v78;
              if ((v78 & 0x80000000) == 0 || (v78 & 0x1FFF) == 0x14)
              {
                while ((v3 & 0x80000000) == 0)
                {
                  v79 = bed_FindBackward(v77, (unsigned int (*)(uint64_t, unint64_t))bed_marker_IsToiNotOfType, (uint64_t)&v101, &v96);
                  if ((v79 & 0x1FFF) == 0x14)
                  {
                    LOWORD(v96) = -1;
                  }
                  else
                  {
                    v3 = v79;
                    if ((v79 & 0x80000000) != 0)
                      goto LABEL_171;
                  }
                  v80 = bed_FindForward(v77, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiNotOfType, (uint64_t)&v101, &v98);
                  if ((v80 & 0x1FFF) == 0x14)
                  {
                    LOWORD(v98) = -1;
                  }
                  else
                  {
                    v3 = v80;
                    if ((v80 & 0x80000000) != 0)
                      goto LABEL_171;
                  }
                  if ((unsigned __int16)v96 == 0xFFFF)
                  {
                    v81 = 0;
                  }
                  else
                  {
                    v18 = bed_GetpElem(v77, (unsigned __int16)v96, &v100);
                    if ((v18 & 0x80000000) != 0)
                      goto LABEL_170;
                    v81 = *(_DWORD *)(v100 + 40);
                  }
                  if ((unsigned __int16)v98 == 0xFFFF)
                    goto LABEL_164;
                  v18 = bed_GetpElem(v77, (unsigned __int16)v98, &v100);
                  if ((v18 & 0x80000000) != 0)
                    goto LABEL_170;
                  if (!v81 || (v82 = *(_DWORD *)(v100 + 40)) == 0 || v81 == v82 || v82 == 14 || v82 == 44)
                  {
LABEL_164:
                    LOWORD(v96) = 1;
                    bed_GoForward(v77, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v96);
                  }
                  else
                  {
                    v18 = bed_Goto(v77, (unsigned __int16)v96);
                    if ((v18 & 0x80000000) != 0)
                      goto LABEL_170;
                    v18 = utoin_RemoveBlankRegions(v75, v77, (unsigned __int16)v98, v76);
                    if ((v18 & 0x80000000) != 0)
                      goto LABEL_170;
                  }
                  v83 = bed_GoForward(v77, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiOfType, (uint64_t)v103);
                  v3 = v83;
                  if ((v83 & 0x80000000) != 0 && (v83 & 0x1FFF) != 0x14)
                    goto LABEL_171;
                }
                UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v95, v94, (uint64_t)"BEFORE utoin_MarkSingleLatinForSpell");
                v7 = utoin_MarkSingleLatinForSpell(v94, v95, a2);
                if ((v7 & 0x80000000) == 0)
                {
                  UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v95, v94, (uint64_t)"BEFORE utoin_SplitRegionOnWordSeparatingMarkers");
                  v7 = utoin_SplitRegionOnWordSeparatingMarkers(v94, *((_DWORD *)a1 + 44));
                  if ((v7 & 0x80000000) == 0)
                  {
                    UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v95, v94, (uint64_t)"BEFORE utoin_Normalize");
                    v12 = utoin_Normalize((uint64_t)a1, v95, v94, a2);
                    if ((v12 & 0x80000000) == 0)
                      UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v95, v94, (uint64_t)"END utoin_NormalizeRegions()");
                    goto LABEL_177;
                  }
                }
                goto LABEL_176;
              }
              goto LABEL_171;
            }
          }
LABEL_170:
          v3 = v18;
LABEL_171:
          v12 = v3;
          goto LABEL_177;
        }
LABEL_176:
        v12 = v7;
        goto LABEL_177;
      }
      goto LABEL_177;
    }
    v66 = bed_ObjOpen(*a1, (uint64_t)a1[1], a2, 1029, v103, 213);
    if ((v66 & 0x80000000) == 0)
    {
      v66 = bed_Goto(v62, 0);
      if ((v66 & 0x80000000) == 0)
      {
        v66 = bed_Goto(v63, 0);
        if ((v66 & 0x80000000) == 0)
        {
          v68 = bed_GoForward(v63, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v101);
          v12 = v68;
          v69 = v68 & 0x1FFF;
          if ((v68 & 0x80000000) != 0 && v69 != 20)
            goto LABEL_129;
          if ((v68 & 0x80000000) != 0)
          {
LABEL_123:
            if (v69 == 20)
              v12 = 0;
            else
              v12 = v12;
            goto LABEL_129;
          }
          while (1)
          {
            v96 = 0;
            v97 = 0;
            v66 = bed_GetpElem(v63, 0xFFFFu, &v96);
            if ((v66 & 0x80000000) != 0)
              break;
            v70 = *(_DWORD *)(v96 + 40) - 2;
            if (v70 <= 4)
            {
              v66 = ((uint64_t (*)(_WORD **, uint64_t, uint64_t, uint64_t, uint64_t))off_1EA940440[v70])(a1, v62, v63, v103[0], a2);
              if ((v66 & 0x80000000) != 0)
                break;
            }
            v97 = 1;
            bed_GoForward(v63, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v97);
            v71 = bed_GoForward(v63, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v101);
            v12 = v71;
            v69 = v71 & 0x1FFF;
            if ((v71 & 0x80000000) != 0 && v69 != 20)
              goto LABEL_129;
            if ((v71 & 0x80000000) != 0)
              goto LABEL_123;
          }
        }
      }
    }
  }
  v12 = v66;
LABEL_129:
  if (!log_HasTraceTuningDataSubscriber(*((_QWORD *)v65 + 4)))
    goto LABEL_132;
  v97 = 0;
  v96 = 0;
  bed_GetpElem(v62, 0, &v96);
  v12 = bed_GetcElem(v62, &v97);
  if ((v12 & 0x80000000) == 0)
  {
    log_OutTraceTuningDataBinary(*((_QWORD *)v65 + 4), 106, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-16",
      v96,
      v97);
LABEL_132:
    if (v103[0])
      bed_ObjClose(v103[0]);
    if ((v12 & 0x80000000) != 0)
      goto LABEL_177;
    goto LABEL_137;
  }
LABEL_177:
  if (v94)
    bed_ObjClose(v94);
  if (v95)
    bed_ObjClose(v95);
  return v12;
}

uint64_t utoin_CollapseIdenticalRegions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  int v38;
  int v39;
  _DWORD *v40;
  int v41;
  unsigned __int16 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  _WORD *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v70;
  uint64_t v71;
  int v72;
  __int128 *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  unsigned __int16 v78;
  int v79;
  unint64_t v80;
  _BOOL4 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  unsigned __int16 v87;
  uint64_t v88;

  v88 = 0;
  v83 = MarkerIntWord;
  v84 = unk_1DEC66DC8;
  v85 = xmmword_1DEC66DD8;
  v86 = unk_1DEC66DE8;
  result = 2370838535;
  if (a2)
  {
    if (a3)
    {
      v87 = 0;
      result = bed_GetpElem(a3, 0, &v88);
      if ((result & 0x80000000) == 0)
      {
        result = bed_GetcElem(a3, &v87);
        if ((result & 0x80000000) == 0)
        {
          v6 = v87;
          if (v87)
          {
            v7 = 0;
            v8 = 0;
            v9 = 0;
            v77 = a3;
            while (1)
            {
              v10 = v88;
              if ((unsigned __int16)v6 <= (unsigned __int16)(v8 + 1))
                v11 = (unsigned __int16)(v8 + 1);
              else
                v11 = (unsigned __int16)v6;
              while (1)
              {
                v12 = v88 + ((unint64_t)(unsigned __int16)v8 << 6);
                if (*(_DWORD *)(v12 + 20) == 7)
                  break;
                v8 = (v8 + 1);
                if ((unsigned __int16)v8 >= (unsigned __int16)v6)
                {
                  v8 = v11;
                  goto LABEL_14;
                }
              }
              v7 = *(_DWORD *)(v12 + 40);
              v9 = v8;
LABEL_14:
              v82 = (unsigned __int16)v9;
              v13 = v88 + ((unint64_t)(unsigned __int16)v9 << 6);
              if (*(_DWORD *)(v13 + 20) == 7
                && *(_DWORD *)(v13 + 40) == 43
                && *(_DWORD *)(v88 + ((unint64_t)(unsigned __int16)v9 << 6) + 56))
              {
                v8 = (v8 + 1);
                goto LABEL_108;
              }
              v14 = v8;
              if ((unsigned __int16)v8 < (unsigned __int16)v6)
              {
                v15 = (unsigned __int16)v8;
                v16 = v88 + ((unint64_t)(unsigned __int16)v8 << 6) + 20;
                v17 = (int *)v16;
                while (1)
                {
                  v18 = *v17;
                  v17 += 16;
                  if (v18 != 7 || v7 != *(_DWORD *)(v16 + 20))
                    break;
                  ++v15;
                  v16 = (unint64_t)v17;
                  if ((unsigned __int16)v6 == v15)
                  {
                    LODWORD(v15) = v6;
                    break;
                  }
                }
                v14 = v8;
                if ((unsigned __int16)v15 != (unsigned __int16)v8)
                {
                  v19 = (v15 - 1);
                  v14 = v19;
                  if ((unsigned __int16)v19 > (unsigned __int16)v8)
                  {
                    v20 = v9;
                    v21 = (unsigned __int16)v19;
                    v22 = v88 + ((unint64_t)(unsigned __int16)v19 << 6) + 20;
                    v23 = (int *)v22;
                    while (1)
                    {
                      v24 = *v23;
                      v23 -= 16;
                      if (v24 == 7 && v7 == *(_DWORD *)(v22 + 20))
                        break;
                      --v21;
                      v22 = (unint64_t)v23;
                      if ((unsigned __int16)v8 >= (unsigned __int16)v21)
                      {
                        v14 = v8;
                        goto LABEL_32;
                      }
                    }
                    v14 = v21;
LABEL_32:
                    v9 = v20;
                  }
                }
              }
              if (v7 == 43)
              {
                v25 = v88 + ((unint64_t)(unsigned __int16)v14 << 6);
                if (*(_DWORD *)(v25 + 20) == 7 && *(_DWORD *)(v25 + 40) == 43 && *(_DWORD *)(a1 + 168) == 1)
                {
                  v8 = (v8 + 1);
                  v7 = 43;
                  goto LABEL_108;
                }
              }
              if ((unsigned __int16)v14 == (unsigned __int16)v8
                || (unsigned __int16)v14 >= (unsigned __int16)v6)
              {
                goto LABEL_110;
              }
              v26 = v88 + (v82 << 6);
              if (*(_DWORD *)(v26 + 40) == 16)
              {
                if ((unsigned __int16)v9 >= 2u
                  && (v27 = v88 + ((unint64_t)((unsigned __int16)v9 - 1) << 6),
                      *(_DWORD *)(v27 + 20) == 998))
                {
                  if (*(_DWORD *)(v27 + 32) == *(_DWORD *)(v88 + (v82 << 6) + 32))
                    v28 = v9 - 1;
                  else
                    v28 = 0;
                }
                else
                {
                  v28 = 0;
                }
                v30 = (unsigned __int16)v9 + 1;
                if (v30 < (unsigned __int16)v6)
                {
                  v31 = v88 + (v30 << 6);
                  if (*(_DWORD *)(v31 + 20) == 998 && *(_DWORD *)(v31 + 32) == *(_DWORD *)(v88 + (v82 << 6) + 32))
                    v28 = v9 + 1;
                }
                if ((unsigned __int16)v14 >= 2u
                  && (v32 = (unsigned __int16)v14 - 1, v33 = v88 + (v32 << 6),
                                                                     *(_DWORD *)(v33 + 20) == 998))
                {
                  if (*(_DWORD *)(v33 + 32) != *(_DWORD *)(v88 + ((unint64_t)(unsigned __int16)v14 << 6) + 32))
                    LOWORD(v32) = 0;
                }
                else
                {
                  LOWORD(v32) = 0;
                }
                v34 = (unsigned __int16)v6;
                v35 = (unsigned __int16)v14 + 1;
                if (v35 < v34)
                {
                  v36 = v88 + (v35 << 6);
                  if (*(_DWORD *)(v36 + 20) == 998
                    && *(_DWORD *)(v36 + 32) == *(_DWORD *)(v88 + ((unint64_t)(unsigned __int16)v14 << 6) + 32))
                  {
                    LOWORD(v32) = v14 + 1;
                  }
                }
                if ((_WORD)v32)
                  v29 = v28 != 0;
                else
                  v29 = 0;
              }
              else
              {
                v29 = 0;
                v28 = 0;
              }
              v37 = (_DWORD *)(v88 + ((unint64_t)(unsigned __int16)v14 << 6));
              v38 = v37[8];
              v39 = *(_DWORD *)(v26 + 32);
              v79 = v7;
              v78 = v28;
              v81 = v29;
              if (!*v37 && v38 == v39)
              {
                *(_QWORD *)(v88 + (v82 << 6) + 24) = *(_QWORD *)(v88
                                                               + ((unint64_t)(unsigned __int16)v14 << 6)
                                                               + 24);
                v39 = v38;
              }
              v80 = (unsigned __int16)v14;
              v40 = (_DWORD *)(v10 + (v82 << 6));
              v40[9] = v38 - v39 + v37[9];
              v40[7] = v37[6] - v40[6] + v37[7];
              v41 = (unsigned __int16)v9;
              v42 = v9;
              if ((unsigned __int16)v9 <= (unsigned __int16)v14)
              {
                do
                {
                  v43 = v42;
                  if (v41 == v42)
                    goto LABEL_77;
                  v44 = v88;
                  v45 = v88 + ((unint64_t)v42 << 6);
                  v48 = *(unsigned __int16 *)(v45 + 16);
                  v47 = (_WORD *)(v45 + 16);
                  v46 = v48;
                  if (!v48)
                    goto LABEL_77;
                  v49 = v14;
                  v50 = v9;
                  v51 = a1;
                  v52 = *(_QWORD *)(a1 + 16);
                  v53 = *(unsigned __int16 *)(v88 + (v82 << 6) + 16);
                  result = growOffsets(v52, v88 + (v82 << 6), v46);
                  if ((result & 0x80000000) != 0)
                    return result;
                  v54 = (unsigned __int16)*v47;
                  v55 = v44 + (v43 << 6);
                  v58 = *(_QWORD *)(v55 + 8);
                  v57 = (_QWORD *)(v55 + 8);
                  v56 = v58;
                  if (*v47)
                  {
                    v59 = (_QWORD *)(*(_QWORD *)(v44 + (v82 << 6) + 8) + 8 * v53);
                    v60 = (uint64_t *)v56;
                    a1 = v51;
                    v9 = v50;
                    v14 = v49;
                    do
                    {
                      v61 = *v60++;
                      *v59++ = v61;
                      --v54;
                    }
                    while (v54);
                  }
                  else
                  {
                    a1 = v51;
                    v9 = v50;
                    v14 = v49;
                    if (!v56)
                      goto LABEL_77;
                  }
                  v62 = *(_QWORD **)(v52 + 8);
                  v63 = v57;
                  heap_Free(v62, v56);
                  *v63 = 0;
                  *v47 = 0;
LABEL_77:
                  if ((_DWORD)v43 != (unsigned __int16)v9)
                  {
                    v64 = *(_QWORD *)(v88 + (v43 << 6) + 48);
                    if (v64)
                    {
                      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v64);
                      *(_QWORD *)(v88 + (v43 << 6) + 48) = 0;
                    }
                  }
                  v42 = v43 + 1;
                }
                while ((unsigned __int16)(v43 + 1) <= (unsigned __int16)v14);
              }
              v65 = v80;
              if ((unsigned __int16)v14 > (unsigned __int16)v8)
                break;
LABEL_102:
              if (!v81)
              {
                v6 = v87;
                v7 = v79;
LABEL_110:
                result = 0;
                v8 = (v8 + 1);
                goto LABEL_111;
              }
              v73 = (__int128 *)(v88 + ((unint64_t)v78 << 6));
              v74 = v73[2];
              v75 = v73[3];
              v76 = v73[1];
              v83 = *v73;
              v84 = v76;
              v85 = v74;
              v86 = v75;
              DWORD1(v84) = 41;
              result = bed_Goto(v77, v78 + 1);
              if ((result & 0x80000000) != 0)
                return result;
              result = bed_marker_InjectFixedRefMarker(v77, &v83);
              if ((result & 0x80000000) != 0)
                return result;
              result = bed_GetpElem(v77, 0, &v88);
              if ((result & 0x80000000) != 0)
                return result;
              result = bed_GetcElem(v77, &v87);
              if ((result & 0x80000000) != 0)
                return result;
              v6 = v87;
              v7 = v79;
LABEL_108:
              result = 0;
LABEL_111:
              if ((unsigned __int16)v8 >= (unsigned __int16)v6)
                return result;
            }
            v66 = v80 << 6;
            while (1)
            {
              v67 = v88 + v66;
              v68 = *(_DWORD *)(v88 + v66 + 20);
              if (v68 == 7 && v81)
                break;
              if (v68 == 0x4000)
                goto LABEL_98;
              if (v68 == 7)
                goto LABEL_96;
LABEL_101:
              --v65;
              v66 -= 64;
              if ((unsigned __int16)v8 >= (unsigned __int16)v65)
                goto LABEL_102;
            }
            if (v65 >= 2
              && (v70 = v88 + ((unint64_t)(v65 - 1) << 6), *(_DWORD *)(v70 + 20) == 998)
              && *(_DWORD *)(v70 + 32) == *(_DWORD *)(v88 + v66 + 32)
              || (int)v65 + 1 < v87
              && (v71 = v88 + ((unint64_t)(v65 + 1) << 6), *(_DWORD *)(v71 + 20) == 998)
              && *(_DWORD *)(v71 + 32) == *(_DWORD *)(v88 + v66 + 32))
            {
              *(_DWORD *)(v67 + 20) = 41;
              goto LABEL_101;
            }
LABEL_96:
            v72 = *(_DWORD *)(v88 + v66);
            if (v72)
            {
              if (v72 == 1)
              {
LABEL_98:
                result = bed_Remove(v77, (unsigned __int16)v65, 1);
                if ((result & 0x80000000) != 0)
                  return result;
                --v87;
                goto LABEL_101;
              }
            }
            else
            {
              *(_DWORD *)(v67 + 20) = 999;
            }
            goto LABEL_101;
          }
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t utoin_MarkSingleLatinForSpell(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  const char *MarkerArgStr;
  __int16 v13;
  _DWORD *v14;
  unint64_t v15;
  _DWORD *v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned __int16 v26;
  int v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  int v39;
  int v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[2];
  uint64_t v47;
  _DWORD *v48;
  unsigned __int16 v49;
  _QWORD v50[2];

  v50[1] = *MEMORY[0x1E0C80C00];
  v49 = 0;
  v48 = 0;
  v47 = 0;
  v43 = 0;
  v42 = 0;
  v44 = MarkerUndef;
  v45 = unk_1DEC66E60;
  memset(v46, 0, sizeof(v46));
  result = bed_GetcElem(a2, &v42);
  if ((result & 0x80000000) != 0)
    return result;
  if (!v42)
    return result;
  result = datac_RequestBlock(a3, 1012, 1u, &v47);
  if ((result & 0x80000000) != 0)
    return result;
  result = bed_GetcElem(a1, &v49);
  if ((result & 0x80000000) != 0)
    return result;
  result = bed_GetpElem(a1, 0, &v48);
  if ((result & 0x80000000) != 0)
    return result;
  result = bed_GetpElem(a2, 0, &v43);
  if ((result & 0x80000000) != 0)
    return result;
  if (v49 < 2u)
    return 0;
  v7 = 1;
  v8 = v48;
  v9 = 21;
  v10 = 1;
  while (1)
  {
    v11 = v8[v9];
    if (v11 != 21)
      break;
    v10 = v47;
    if (v47)
    {
      MarkerArgStr = marker_getMarkerArgStr(1u);
      v8 = v48;
      if (!strcmp(MarkerArgStr, (const char *)(*(_QWORD *)(v47 + 8) + v48[v9 + 5])))
      {
        v11 = v8[v9];
        goto LABEL_16;
      }
      v10 = 0;
    }
LABEL_23:
    ++v7;
    v9 += 16;
    if (v7 >= v49)
      return 0;
  }
  if (v10 != 1)
    goto LABEL_23;
LABEL_16:
  if (v11 != 7 || (v8[v9 + 5] - 3) > 5 || (v8[v9 + 4] - 1) > 3)
    goto LABEL_22;
  v50[0] = 0;
  __strncpy_chk();
  *((_BYTE *)v50 + v48[v9 + 4]) = 0;
  v13 = Utf8_Utf8NbrOfSymbols((const char *)v50);
  v8 = v48;
  v10 = 1;
  if (v48[v9] != 7 || (unsigned __int16)(v13 - 1) != 1)
    goto LABEL_23;
  v14 = &v48[v9];
  if ((v48[v9 + 5] - 3) > 5)
  {
LABEL_22:
    v10 = 1;
    goto LABEL_23;
  }
  if ((unsigned __int16)v7 < 2u)
  {
    v17 = 0xFFFF;
  }
  else
  {
    v15 = v7 - 1;
    v16 = v48 + 26;
    v17 = 0xFFFF;
    do
    {
      if (*(v16 - 5) == 7 && *v16 == 1)
        v17 = *(v16 - 2);
      v16 += 16;
      --v15;
    }
    while (v15);
  }
  v18 = v14[1];
  v19 = v14[3];
  v20 = v14[4];
  if (v49 >= 2uLL)
  {
    v21 = 0;
    v22 = v48 + 25;
    v23 = v49 - 1;
    do
    {
      if (v21)
        break;
      v24 = *(v22 - 1);
      if (v24 > v19)
        break;
      if (*(v22 - 4) == 40)
      {
        if (v17 == 0xFFFF && v19 == *v22 + v24 || (v21 = 0, v25 = v48[8], v17 == v25) && v24 >= v25)
          v21 = 1;
      }
      else
      {
        v21 = 0;
      }
      v22 += 16;
      --v23;
    }
    while (v23);
    if (v21 == 1)
      return 0;
  }
  v26 = v7 + 1;
  v27 = 0xFFFF;
  v28 = 0xFFFF;
  if (v49 > (unsigned __int16)(v7 + 1))
  {
    v27 = v20 + v19;
    while (1)
    {
      v29 = v26;
      v30 = &v48[16 * (unint64_t)v26];
      if (v30[8] != v27)
      {
LABEL_53:
        v27 = 0xFFFF;
        v28 = 0xFFFF;
        goto LABEL_54;
      }
      if (v30[5] == 7)
      {
        v31 = &v48[16 * v29];
        if (v31[10] == 1)
          break;
      }
      v26 = v29 + 1;
      if (v49 <= (unsigned __int16)(v29 + 1))
        goto LABEL_53;
    }
    v28 = v31[9];
  }
LABEL_54:
  v32 = v48[8];
  if (v17 != 0xFFFF || (v33 = v14[3], v19 != v32))
  {
    v33 = v17;
    if (v17 != v32)
      return 0;
  }
  v34 = v27 == 0xFFFF ? v20 + v19 : v28 + v27;
  if (v34 != v48[9] + v33)
    return 0;
  v39 = v14[2];
  v40 = v14[3];
  v41 = v14[4];
  v14[5] = 14;
  DWORD1(v45) = 21;
  v35 = v47;
  v36 = (char *)marker_getMarkerArgStr(3u);
  result = addOrGetTNArgStr(v35, v36, (unsigned int *)v46 + 2, a3);
  if ((result & 0x80000000) == 0)
  {
    *((_QWORD *)&v45 + 1) = v18;
    *(_QWORD *)&v46[0] = v48[v9 + 3];
    result = bed_Goto(a1, v7);
    if ((result & 0x80000000) == 0)
    {
      result = bed_marker_InjectFixedRefMarker(a1, &v44);
      if ((result & 0x80000000) == 0)
      {
        DWORD1(v45) = 21;
        v37 = v47;
        v38 = (char *)marker_getMarkerArgStr(1u);
        result = addOrGetTNArgStr(v37, v38, (unsigned int *)v46 + 2, a3);
        if ((result & 0x80000000) == 0)
        {
          *((_QWORD *)&v45 + 1) = v39 + v18;
          *(_QWORD *)&v46[0] = (v41 + v40);
          result = bed_marker_InjectFixedRefMarker(a1, &v44);
          if ((result & 0x80000000) == 0)
            return 0;
        }
      }
    }
  }
  return result;
}

uint64_t utoin_SplitRegionOnWordSeparatingMarkers(uint64_t a1, int a2)
{
  uint64_t result;
  unsigned __int16 v5;
  int v6;
  unsigned int v7;
  unsigned __int16 v8;
  uint64_t v9;
  int i;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  int v18;
  BOOL v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unsigned __int16 v25;

  v25 = 0;
  v24 = 0;
  v20 = MarkerSetTypeOfInput;
  v21 = unk_1DEC66CA8;
  v22 = xmmword_1DEC66CB8;
  v23 = unk_1DEC66CC8;
  result = bed_GetcElem(a1, &v25);
  if ((result & 0x80000000) == 0)
  {
    result = bed_GetpElem(a1, 0, &v24);
    if ((result & 0x80000000) == 0)
    {
      v5 = v25;
      if (v25 >= 2u)
      {
        v6 = 0;
        v7 = 0;
        v8 = 0;
        v9 = v24;
        for (i = 1; (unsigned __int16)i < v5; ++i)
        {
          v11 = v9 + ((unint64_t)(unsigned __int16)i << 6);
          v12 = *(_DWORD *)(v11 + 20);
          if (v12 == 7)
          {
            v7 = *(_DWORD *)(v11 + 24);
            v13 = *(_QWORD *)(v11 + 8);
            if (v13)
              v6 = *(_DWORD *)(v13 + 4);
            else
              v6 = 0;
            v8 = i;
          }
          else if (v8)
          {
            v14 = v12 > 0x39 || ((1 << v12) & 0x3C8010124021140) == 0;
            if (!v14 || a2 == 1 && (v12 <= 0x18 ? (v19 = ((1 << v12) & 0x1050000) == 0) : (v19 = 1), !v19 || v12 == 99))
            {
              v15 = v9 + ((unint64_t)(unsigned __int16)i << 6);
              if (v7 < *(_DWORD *)(v15 + 24) + v6)
              {
                v16 = (_DWORD *)(v9 + ((unint64_t)v8 << 6));
                DWORD2(v22) = v16[10];
                *((_QWORD *)&v21 + 1) = (*(_DWORD *)(v15 + 24) + v6);
                LODWORD(v22) = *(_DWORD *)(v15 + 32);
                DWORD1(v22) = v16[9];
                v17 = *(_DWORD *)(v15 + 32) - v16[8];
                v16[9] = v17;
                DWORD1(v22) -= v17;
                if (DWORD1(v22))
                {
                  v18 = i + 1;
                  result = bed_Goto(a1, (unsigned __int16)(i + 1));
                  if ((result & 0x80000000) != 0)
                    return result;
                  result = bed_marker_InjectFixedRefMarker(a1, &v20);
                  if ((result & 0x80000000) != 0)
                    return result;
                  v9 = v24;
                  v7 = *(_DWORD *)(v24 + ((unint64_t)(unsigned __int16)v18 << 6) + 24) + v6;
                  v5 = ++v25;
                  i = v18;
                  v8 = v18;
                }
              }
            }
          }
          else
          {
            v8 = 0;
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t utoin_Normalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  const char *UTOIMarkerString;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v44;
  __int16 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 *v50;
  unsigned __int16 v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  _QWORD v56[3];

  v56[1] = *MEMORY[0x1E0C80C00];
  v55 = 0;
  v56[0] = 7;
  v52 = 0;
  v53 = 0;
  v4 = 2370838535;
  if (!a2 || !a3)
    return v4;
  v54 = 0;
  v51 = 0;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = bed_GetcElem(a2, &v54);
  if ((v10 & 0x80000000) != 0)
    goto LABEL_70;
  v11 = datac_RequestBlock(a4, 1029, (unsigned __int16)(v54 + 1), &v53);
  if ((v11 & 0x80000000) != 0)
  {
    if ((v11 & 0x1FFF) == 0x14)
      return 0;
    else
      return v11;
  }
  v10 = bed_ObjOpen(*(_WORD **)a1, *(_QWORD *)(a1 + 8), a4, 1029, &v55, 213);
  if ((v10 & 0x80000000) != 0)
    goto LABEL_70;
  v10 = bed_Goto(a2, 0);
  if ((v10 & 0x80000000) != 0)
    goto LABEL_70;
  v10 = bed_Goto(a3, 0);
  if ((v10 & 0x80000000) != 0)
    goto LABEL_70;
  v12 = bed_GoForward(a3, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)v56);
  v4 = v12;
  if ((v12 & 0x80000000) != 0 && (v12 & 0x1FFF) != 0x14)
  {
LABEL_71:
    if (v55)
      bed_ObjClose(v55);
    return v4;
  }
  if ((v12 & 0x80000000) == 0)
  {
    v13 = 0;
    while (2)
    {
      v50 = 0;
      v45 = 0;
      v10 = bed_GetpElem(a3, 0xFFFFu, &v50);
      if ((v10 & 0x80000000) == 0)
      {
        v44 = v13;
        v14 = v50[1];
        v46 = *v50;
        v47 = v14;
        v15 = v50[3];
        v48 = v50[2];
        v49 = v15;
        v16 = *((_DWORD *)v50 + 10);
        v17 = utoin_NormalizeOrthNativeWord;
        switch(v16)
        {
          case 1:
            v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))utoin_MarkWordBoundary;
            goto LABEL_31;
          case 2:
          case 7:
            goto LABEL_31;
          case 3:
          case 4:
          case 15:
          case 16:
            goto LABEL_19;
          case 5:
            v18 = utoin_NormalizeOrthNativeText;
            if ((v44 & 0xFFFFFFEF) == 0)
              v18 = utoin_NormalizeOrthNativeWord;
            v19 = *((_DWORD *)v50 + 9) > 0x60u;
            goto LABEL_28;
          case 6:
          case 8:
            v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))utoin_TranscodeText;
            if ((v44 & 0xFFFFFFEF) == 0)
              v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))utoin_TranscodeWord;
            v19 = *((_DWORD *)v50 + 9) > 0x20u;
LABEL_28:
            if (v19)
              v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))utoin_RemoveRegion;
            else
              v17 = v18;
            goto LABEL_31;
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
            goto LABEL_22;
          case 14:
            goto LABEL_23;
          default:
            v20 = (v16 - 43);
            if (v20 > 0x38)
              goto LABEL_22;
            if (((1 << (v16 - 43)) & 0x38020001) != 0)
            {
LABEL_19:
              v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))utoin_TranscodeText;
            }
            else if (v20 == 1)
            {
LABEL_23:
              v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))utoin_SpellRegion;
            }
            else if (v20 != 56)
            {
LABEL_22:
              v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))utoin_RemoveRegion;
            }
LABEL_31:
            v21 = *(_QWORD *)(v9 + 32);
            UTOIMarkerString = getUTOIMarkerString(v16);
            log_OutText(v21, (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOI] (normalize region %s %u,%u)", v23, v24, v25, (uint64_t)UTOIMarkerString);
            v10 = v17(a1, a2, a3, v55, a4);
            if ((v10 & 0x80000000) != 0)
              goto LABEL_70;
            v10 = bed_Goto(a3, 0);
            if ((v10 & 0x80000000) != 0)
              goto LABEL_70;
            v26 = DWORD2(v47);
            v27 = HIDWORD(v47);
            v28 = v48;
            break;
        }
        while (1)
        {
          v29 = bed_GoForward(a3, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)v56);
          if ((v29 & 0x80000000) != 0)
          {
            v4 = v29;
            if ((v29 & 0x1FFF) != 0x14)
              goto LABEL_71;
          }
          v10 = bed_GetpElem(a3, 0xFFFFu, &v50);
          if ((v10 & 0x80000000) != 0)
            goto LABEL_70;
          if (v26 == *((_DWORD *)v50 + 6)
            && v27 == *((_DWORD *)v50 + 7)
            && v28 == *((_DWORD *)v50 + 8)
            && *((_QWORD *)&v48 + 1) == *((_QWORD *)v50 + 5))
          {
            break;
          }
          v45 = 1;
          bed_GoForward(a3, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v45);
        }
        v30 = *((_DWORD *)v50 + 10);
        v13 = v44;
        if ((v30 - 5) < 4)
        {
LABEL_43:
          v30 = 16;
          if (v44 && v44 != 43)
            goto LABEL_51;
          goto LABEL_50;
        }
        if (v30 == 2)
        {
          v30 = 16;
        }
        else if (v30 == 1)
        {
          goto LABEL_43;
        }
LABEL_50:
        v13 = v30;
LABEL_51:
        v45 = 1;
        bed_GoForward(a3, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v45);
        v31 = bed_GoForward(a3, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)v56);
        v4 = v31;
        if ((v31 & 0x80000000) != 0 && (v31 & 0x1FFF) != 0x14)
          goto LABEL_71;
        if ((v31 & 0x80000000) == 0)
          continue;
        goto LABEL_54;
      }
      break;
    }
LABEL_70:
    v4 = v10;
    goto LABEL_71;
  }
LABEL_54:
  v32 = bed_GetpElem(a3, 0, &v52);
  if ((v32 & 0x80000000) != 0)
    return v32;
  v4 = bed_GetcElem(a3, &v51);
  if ((v4 & 0x80000000) == 0)
  {
    v33 = v51;
    if (v51 >= 2u)
    {
      v34 = 0;
      v35 = 1;
      while (1)
      {
        if (*(_DWORD *)(v52 + v34 + 84) == 7 && !*(_DWORD *)(v52 + v34 + 100))
        {
          v36 = *(_DWORD *)(v52 + v34 + 104);
          v19 = v36 > 7;
          v37 = (1 << v36) & 0xA4;
          if (!v19 && v37 != 0)
          {
            v39 = *(_QWORD *)(v52 + v34 + 72);
            if (v39)
            {
              heap_Free(*(_QWORD **)(v9 + 8), v39);
              *(_QWORD *)(v52 + v34 + 72) = 0;
              *(_WORD *)(v52 + v34 + 80) = 0;
            }
            v4 = bed_Remove(a3, (unsigned __int16)v35, 1);
            if ((v4 & 0x80000000) != 0)
              return v4;
            log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOI] (deleted zero length entry, marker %d)", v40, v41, v42, v35);
            v33 = --v51;
          }
        }
        ++v35;
        v34 += 64;
        if (v35 >= v33)
          goto LABEL_71;
      }
    }
    goto LABEL_71;
  }
  return v4;
}

uint64_t utoin_InsertRegions(_WORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  int *v20;
  _DWORD *v21;
  _DWORD *v22;
  unsigned __int16 v23;
  int v24;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  int v34;
  unsigned __int16 v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unsigned __int16 v48;
  unsigned __int16 v49;
  uint64_t v51;
  uint64_t v52;
  unsigned __int16 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  _WORD __src[8];
  char __s[16];
  _QWORD v60[2];

  v60[1] = *MEMORY[0x1E0C80C00];
  v2 = 2370838535;
  v51 = 0;
  v52 = 0;
  if (!a1 || !a2)
    return v2;
  v5 = bed_ObjOpen(*a1, (uint64_t)a1[1], a2, 1020, &v52, 213);
  if ((v5 & 0x80000000) != 0)
    goto LABEL_86;
  v5 = bed_ObjOpen(*a1, (uint64_t)a1[1], a2, 1021, &v51, 213);
  if ((v5 & 0x80000000) != 0)
    goto LABEL_86;
  UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v52, v51, (uint64_t)"BEFORE utoin_RemoveEmptyPhonemes");
  v6 = a1[2];
  v7 = v51;
  *(_QWORD *)__s = 0;
  if (!v51)
    goto LABEL_87;
  __src[0] = 0;
  v5 = bed_GetpElem(v51, 0, __s);
  if ((v5 & 0x80000000) != 0)
    goto LABEL_86;
  v5 = bed_GetcElem(v7, __src);
  if ((v5 & 0x80000000) != 0)
    goto LABEL_86;
  v11 = __src[0];
  if (__src[0] >= 2u)
  {
    v12 = 1;
    v13 = 2;
    v14 = 160;
    v15 = 1;
    do
    {
      v16 = *(_QWORD *)__s + (v12 << 6);
      if (*(_DWORD *)(v16 + 20) == 7)
      {
        v17 = v12 + 1;
        if (*(_DWORD *)(v16 + 40) == 43 && v17 < v11)
        {
          v19 = *(_QWORD *)__s + (v12 << 6);
          v20 = (int *)(v19 + 32);
          v21 = (_DWORD *)(v19 + 36);
          v22 = (_DWORD *)(*(_QWORD *)__s + v14);
          v23 = v13;
          while (1)
          {
            v24 = *(v22 - 3);
            if (v24 == 999 || v24 == 7)
            {
              v26 = *v20;
              if (*v22 >= *v20 && *v22 < (*v21 + v26))
                break;
            }
            ++v23;
            v22 += 16;
            if (v11 == v23)
              goto LABEL_26;
          }
          if (v23 && *(_DWORD *)(*(_QWORD *)__s + ((unint64_t)v23 << 6) + 32) == v26)
          {
            *v21 = 0;
            log_OutText(*((_QWORD *)v6 + 4), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOIN] zero length phoneme found at marker %d", v8, v9, v10, v15);
            v11 = __src[0];
          }
        }
      }
      else
      {
        v17 = v12 + 1;
      }
LABEL_26:
      ++v13;
      v14 += 64;
      v12 = v17;
      v15 = v17;
    }
    while (v17 < v11);
  }
  UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v52, v51, (uint64_t)"BEFORE utoin_InsertRegionTags");
  v28 = v51;
  v27 = v52;
  v60[0] = 7;
  v57 = 0;
  v55 = 0;
  if (!v52 || !v51)
    goto LABEL_87;
  v5 = bed_Goto(v52, 0);
  if ((v5 & 0x80000000) != 0)
    goto LABEL_86;
  v5 = bed_Goto(v28, 0);
  if ((v5 & 0x80000000) != 0)
    goto LABEL_86;
  v56 = 0;
  v5 = bed_GetpElem(v28, 0, &v57);
  if ((v5 & 0x80000000) != 0)
    goto LABEL_86;
  v5 = bed_GetcElem(v28, (_WORD *)&v56 + 1);
  if ((v5 & 0x80000000) != 0)
    goto LABEL_86;
  v29 = bed_GoForward(v28, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)v60);
  v2 = v29;
  if ((v29 & 0x80000000) != 0 && (v29 & 0x1FFF) != 0x14)
    goto LABEL_87;
  v30 = 0;
  v31 = 0;
  while ((v2 & 0x80000000) == 0)
  {
    v54 = 0;
    v53 = 0;
    v5 = bed_GetpElem(v28, 0xFFFFu, &v54);
    if ((v5 & 0x80000000) != 0)
      goto LABEL_86;
    v5 = bed_GetiElem(v28, &v53);
    if ((v5 & 0x80000000) != 0)
      goto LABEL_86;
    v5 = bed_GetpElem(v28, 0, &v55);
    if ((v5 & 0x80000000) != 0)
      goto LABEL_86;
    v32 = *(_DWORD *)(v54 + 40);
    v33 = v32 != 43 || v31 == 0;
    if (!v33 && *(_DWORD *)(v55 + ((unint64_t)v31 << 6) + 40) == 43)
      v30 = 15;
    v5 = utoin_PutClosingAndOpeningTag(v30, v32, __s);
    if ((v5 & 0x80000000) != 0)
      goto LABEL_86;
    v34 = *(_DWORD *)(v54 + 40);
    if ((v34 - 5) >= 4)
    {
      if (v34 == 2)
      {
        v34 = 16;
LABEL_58:
        v30 = v34;
        goto LABEL_59;
      }
      if (v34 != 1)
        goto LABEL_58;
    }
    v34 = 16;
    if (!v30 || v30 == 43)
      goto LABEL_58;
LABEL_59:
    v35 = strlen(__s);
    if (v35)
    {
      v36 = *(_DWORD *)(v57 + 32);
      v37 = *(_DWORD *)(v54 + 32) - v36;
      LOWORD(v56) = *(_WORD *)(v54 + 32) - v36;
      v5 = bed_Goto(v27, (unsigned __int16)v37);
      if ((v5 & 0x80000000) != 0)
        goto LABEL_86;
      __strcpy_chk();
      v5 = bed_Insert(v27, __src, v35);
      if ((v5 & 0x80000000) != 0)
        goto LABEL_86;
      v5 = bed_GetiElem(v28, &v56);
      if ((v5 & 0x80000000) != 0)
        goto LABEL_86;
      v38 = v54;
      v39 = *(unsigned __int16 *)(v54 + 32);
      v40 = (unsigned __int16)v56;
      v41 = HIWORD(v56);
      if ((unsigned __int16)v56 < HIWORD(v56))
      {
        v42 = v54;
        do
        {
          *(_DWORD *)(v42 + 32) += v35;
          v42 += 64;
          ++v40;
        }
        while (v40 < v41);
        v54 = v42;
      }
      if (v39 > *(_DWORD *)(v57 + 32) && *(_DWORD *)(v38 - 32) == v39)
      {
        v43 = (_DWORD *)(v38 - 44);
        do
        {
          if (*v43 == 36)
            v43[3] = *(_DWORD *)(v38 + 32);
          v44 = *(v43 - 13);
          v43 -= 16;
        }
        while (v44 == v39);
      }
    }
    v31 = v53;
    LOWORD(v56) = 1;
    bed_GoForward(v28, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v56);
    v45 = bed_GoForward(v28, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)v60);
    v2 = v45;
    if ((v45 & 0x80000000) != 0 && (v45 & 0x1FFF) != 0x14)
      goto LABEL_87;
  }
  __s[0] = 0;
  if (v30)
  {
    if ((v30 - 3) > 1)
    {
      v47 = 1;
      v46 = __s;
    }
    else
    {
      __s[0] = 17;
      v46 = &__s[1];
      v47 = 2;
    }
    *v46 = 31;
    __s[v47] = 0;
  }
  v48 = strlen(__s);
  if (!v48
    || (v49 = v48, v5 = bed_GetcElem(v27, &v56), (v5 & 0x80000000) == 0)
    && (v5 = bed_Goto(v27, (unsigned __int16)v56), (v5 & 0x80000000) == 0)
    && (__strcpy_chk(), v5 = bed_Insert(v27, __src, v49), (v5 & 0x80000000) == 0))
  {
    UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v52, v51, (uint64_t)"AFTER utoin_InsertRegionTags");
    v2 = 0;
    goto LABEL_87;
  }
LABEL_86:
  v2 = v5;
LABEL_87:
  if (v51)
    bed_ObjClose(v51);
  if (v52)
    bed_ObjClose(v52);
  return v2;
}

uint64_t utoin_RemoveBlankRegions(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t result;
  unsigned int v9;
  _BOOL4 v10;
  _DWORD *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  v31 = 0;
  v29 = 0;
  v30 = 0;
  v32[0] = 1;
  result = bed_GetpElem(a2, 0, &v30);
  if ((result & 0x80000000) != 0)
    return result;
  result = bed_GetcElem(a2, (_WORD *)&v31 + 1);
  if ((result & 0x80000000) != 0)
    return result;
  result = bed_FindForward(a2, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiOfType, (uint64_t)v32, &v31);
  v9 = (unsigned __int16)v31;
  if ((unsigned __int16)v31 < a3)
  {
    result = bed_GetpElem(a2, (unsigned __int16)v31, &v29);
    if ((result & 0x80000000) != 0)
      return result;
    v10 = 0;
    v9 = (unsigned __int16)v31;
    v11 = (_DWORD *)(v29 + 64);
    do
    {
      if (v10
        || (unint64_t)v11 >= v29
                                  + ((unint64_t)HIWORD(v31) << 6)
                                  - ((unint64_t)(unsigned __int16)v31 << 6))
      {
        break;
      }
      v12 = v11[8];
      v13 = *(_DWORD *)(v29 + 36) + *(_DWORD *)(v29 + 32);
      if (v12 == v13 && v11[5] == 7)
      {
        v14 = v11[10];
        v10 = v14 <= 0x2C && ((1 << v14) & 0x10000001C000) != 0;
      }
      else
      {
        v10 = 0;
      }
      v11 += 16;
    }
    while (v12 <= v13);
    if (v10)
    {
      result = bed_FindForward(a2, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiOfType, (uint64_t)v32, &v31);
      goto LABEL_37;
    }
  }
  if ((result & 0x80000000) != 0 || v9 >= a3)
  {
LABEL_37:
    if ((result & 0x80000000) == 0 || (result & 0x1FFF) == 0x14)
    {
      v28 = bed_Goto(a2, (unsigned __int16)a3);
      return v28 & (v28 >> 31);
    }
    return result;
  }
  while (1)
  {
    result = bed_GetpElem(a2, (unsigned __int16)v9, &v29);
    if ((result & 0x80000000) != 0)
      return result;
    result = bed_Remove(a4, (unsigned __int16)(*(_WORD *)(v29 + 32) - *(_DWORD *)(v30 + 32)), *(unsigned __int16 *)(v29 + 36));
    if ((result & 0x80000000) != 0)
      return result;
    v15 = v29;
    v16 = HIWORD(v31);
    v17 = v31;
    if ((uint64_t)(HIWORD(v31) - (unint64_t)(unsigned __int16)v31) >= 2)
    {
      v18 = v29 + 64;
      v19 = *(_DWORD *)(v29 + 36);
      do
      {
        v20 = *(_DWORD *)(v18 + 32);
        v21 = *(_DWORD *)(v15 + 32);
        v22 = v19 + v21;
        if (v20 == v19 + v21 && *(_DWORD *)(v18 + 20) == 7 && *(_DWORD *)(v18 + 40) != 43)
        {
          *(_DWORD *)(v18 + 24) = *(_DWORD *)(v15 + 24);
          *(_DWORD *)(v18 + 28) += *(_DWORD *)(v15 + 28);
          v23 = v30;
          v24 = *(unsigned __int16 *)(v18 + 16);
          result = growOffsets(a1, v18, 1u);
          if ((result & 0x80000000) != 0)
            return result;
          v25 = (_DWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24);
          *v25 = *(_DWORD *)(v15 + 24) - *(_DWORD *)(v23 + 24);
          v25[1] = *(_DWORD *)(v15 + 28);
          v20 = *(_DWORD *)(v18 + 32);
          v15 = v29;
          v21 = *(_DWORD *)(v29 + 32);
          v19 = *(_DWORD *)(v29 + 36);
          v16 = HIWORD(v31);
          v17 = v31;
          v22 = v19 + v21;
        }
        if (v20 >= v22)
          v26 = v20 - v19;
        else
          v26 = v21;
        *(_DWORD *)(v18 + 32) = v26;
        v18 += 64;
      }
      while (v18 < v15 + (v16 << 6) - ((unint64_t)v17 << 6));
    }
    v27 = *(_QWORD *)(v15 + 8);
    if (v27)
    {
      heap_Free(*(_QWORD **)(a1 + 8), v27);
      *(_QWORD *)(v29 + 8) = 0;
      v17 = v31;
    }
    result = bed_Remove(a2, v17, 1);
    if ((result & 0x80000000) != 0)
      return result;
    --HIWORD(v31);
    LOWORD(a3) = a3 - 1;
    result = bed_FindForward(a2, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiOfType, (uint64_t)v32, &v31);
    if ((result & 0x80000000) == 0)
    {
      LOWORD(v9) = v31;
      if ((unsigned __int16)v31 < (unsigned __int16)a3)
        continue;
    }
    goto LABEL_37;
  }
}

uint64_t growOffsets(uint64_t a1, uint64_t a2, unsigned int a3)
{
  __int16 v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = heap_Realloc(v6, v5, (8 * (*(unsigned __int16 *)(a2 + 16) + (unint64_t)a3)) | 1);
    if (v7)
    {
      v8 = v7;
      result = 0;
      *(_QWORD *)(a2 + 8) = v8;
      *(_WORD *)(a2 + 16) += v3;
      return result;
    }
  }
  else
  {
    v10 = heap_Calloc(v6, a3, 9);
    *(_QWORD *)(a2 + 8) = v10;
    if (v10)
    {
      result = 0;
      *(_WORD *)(a2 + 16) = v3;
      return result;
    }
  }
  return 2370838538;
}

uint64_t utoin_LookUpWordsInNativeRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  _WORD *v10;
  int v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  unsigned __int16 v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unsigned __int16 v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int16 v53;
  int v54;
  int v55;
  unsigned __int16 v56;
  _DWORD *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;

  v59 = 0;
  v60 = 0;
  v57 = 0;
  v58 = 0;
  v55 = 0;
  v54 = 0;
  v53 = 0;
  v49 = MarkerSetTypeOfInput2;
  v50 = unk_1DEC66E08;
  result = 2370838535;
  v51 = xmmword_1DEC66E18;
  v52 = unk_1DEC66E28;
  if (!a1)
    return result;
  if (!a2)
    return result;
  if (!a3)
    return result;
  v56 = 0;
  result = bed_GetpElem(a3, 0, &v57);
  if ((result & 0x80000000) != 0)
    return result;
  result = bed_GetcElem(a3, &v56);
  if ((result & 0x80000000) != 0)
    return result;
  result = bed_GetpElem(a3, 0, &v60);
  if ((result & 0x80000000) != 0)
    return result;
  result = bed_GetpElem(a2, 0, &v59);
  if ((result & 0x80000000) != 0)
    return result;
  result = bed_GetpElem(a3, 0xFFFFu, &v58);
  if ((result & 0x80000000) != 0)
    return result;
  result = bed_GetiElem(a3, (_WORD *)&v55 + 1);
  if ((result & 0x80000000) != 0)
    return result;
  v10 = 0;
  v48 = *(_DWORD *)(v58 + 40);
  v11 = *(_DWORD *)(v58 + 24);
  v12 = *(unsigned __int16 *)(v58 + 16);
  v13 = 1;
  if (*(_DWORD *)(a1 + 168) == 1 && *(_WORD *)(v58 + 16))
  {
    v14 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v12 + 1, 3);
    if (!v14)
      return 2370838538;
    v10 = (_WORD *)v14;
    v15 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v12 + 1, 9);
    result = 2370838538;
    if (!v15)
      return result;
    v16 = 0;
    v17 = *(_QWORD *)(v58 + 8);
    if (v12 <= 1)
      v18 = 1;
    else
      v18 = v12;
    do
    {
      *(_QWORD *)(v15 + v16) = *(_QWORD *)(v17 + v16);
      v16 += 8;
    }
    while (8 * v18 != v16);
    v19 = 0;
    LOWORD(v20) = 0;
    v21 = 0;
    v22 = v58;
    v23 = 4;
    do
    {
      if (!v19)
      {
        v24 = **(_DWORD **)(v22 + 8);
        if (v24 > *(_DWORD *)(v22 + 24))
        {
          v21 += v24;
          v20 = **(_DWORD **)(v22 + 8);
        }
      }
      v25 = v19 + 1;
      if (v19 + 1 >= v12)
      {
        LOWORD(v26) = *(_WORD *)(v22 + 36) - v21;
      }
      else
      {
        v26 = *(_DWORD *)(*(_QWORD *)(v22 + 8) + v23 + 4)
            - (*(_DWORD *)(*(_QWORD *)(v22 + 8) + v23 - 4)
             + *(_DWORD *)(*(_QWORD *)(v22 + 8) + v23));
        v21 += v26;
      }
      v10[v19] = v26;
      v23 += 8;
      ++v19;
    }
    while (v18 != v25);
    v47 = v15;
    if ((_WORD)v20)
    {
      memmove(v10 + 1, v10, 2 * v12);
      v13 = 0;
      *v10 = v20;
      v27 = v12 + 1;
      LODWORD(v12) = (unsigned __int16)(v12 + 1);
      goto LABEL_30;
    }
    v13 = 1;
  }
  else
  {
    v47 = 0;
  }
  v27 = v12;
LABEL_30:
  v28 = v60;
  v29 = *(_DWORD *)(v58 + 32) - *(_DWORD *)(v60 + 32);
  v30 = v29 + *(_DWORD *)(v58 + 36);
  if (*(_DWORD *)(a1 + 168) && v27)
  {
    v43 = v11;
    v44 = v13;
    v31 = 0;
    v45 = v12;
    v46 = v27;
    while (1)
    {
      v32 = (unsigned __int16)v31;
      v33 = (__int16)v10[(unsigned __int16)v31];
      v28 = v60;
      if (v33 < 1)
        break;
      v34 = (unsigned __int16)(v33 + v29);
      if (v34 >= (unsigned __int16)v30)
        v35 = v30;
      else
        v35 = v34;
      if ((utoin_LookUpSubWordsInNativeRegion(a1, a2, a3, a5, v60, (uint64_t)v57, v56, v59, v48, v58, v29, v35, &v55, &v54, &v53) & 0x80000000) != 0)goto LABEL_61;
      LOWORD(v29) = v55 + v35;
      v30 += (unsigned __int16)v55;
      ++v31;
      if (v54 == 1 && v31 < v45)
      {
        v36 = (unsigned __int16)(v29 - v53);
        if ((bed_Goto(a2, v36) & 0x80000000) != 0
          || (bed_Insert(a2, " ", 1) & 0x80000000) != 0
          || (bed_GetpElem(a3, 0, &v57) & 0x80000000) != 0
          || (bed_GetcElem(a3, &v56) & 0x80000000) != 0)
        {
          goto LABEL_61;
        }
        v37 = (uint64_t)v57;
        if (v56 >= 2uLL)
        {
          v38 = v57[8] + (unint64_t)v36;
          v39 = v57 + 24;
          v40 = v56 - 1;
          do
          {
            v41 = *v39;
            if (v38 <= v41)
              *v39 = v41 + 1;
            v39 += 16;
            --v40;
          }
          while (v40);
        }
        ++*(_DWORD *)(v37 + 36);
        if ((bed_Goto(a3, 1u) & 0x80000000) != 0)
          goto LABEL_60;
        DWORD2(v51) = 1;
        if ((v44 & 1) != 0)
        {
          v42 = (uint64_t)v57;
          *((_QWORD *)&v50 + 1) = (*(_DWORD *)(v47 + 8 * v31) + v57[6]);
        }
        else
        {
          *((_QWORD *)&v50 + 1) = (*(_DWORD *)(v47 + 8 * v32) + v43);
          v42 = (uint64_t)v57;
        }
        LODWORD(v51) = *(_DWORD *)(v42 + 32) + v36;
        DWORD1(v51) = 1;
        if ((bed_marker_InjectFixedRefMarker(a3, &v49) & 0x80000000) != 0
          || (bed_GetpElem(a3, 0, &v57) & 0x80000000) != 0
          || (bed_GetcElem(a3, &v56) & 0x80000000) != 0)
        {
          goto LABEL_60;
        }
        LOWORD(v29) = v29 + 1;
        ++v30;
      }
      if (v31 == v46)
      {
        v28 = v60;
        break;
      }
    }
  }
  utoin_LookUpSubWordsInNativeRegion(a1, a2, a3, a5, v28, (uint64_t)v57, v56, v59, v48, v58, v29, v30, &v55, &v54, &v53);
LABEL_60:
  if (v10)
LABEL_61:
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v10);
  if (v47)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v47);
  return 0;
}

uint64_t utoin_LookUpWord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t result;
  int v12;
  int v13;
  size_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unsigned int v23;
  char v24[4];
  uint64_t v25;
  uint64_t v26;
  void *__src;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v30 = 0;
  v31 = 0;
  v6 = 2370838538;
  v29 = 0;
  result = 2370838535;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        v26 = 0;
        __src = 0;
        v28 = 0;
        result = bed_GetpElem(a3, 0, &v31);
        if ((result & 0x80000000) == 0)
        {
          result = bed_GetpElem(a2, 0, &v30);
          if ((result & 0x80000000) == 0)
          {
            result = bed_GetpElem(a3, 0xFFFFu, &v29);
            if ((result & 0x80000000) == 0)
            {
              v12 = *(_DWORD *)(v29 + 32);
              v13 = *(_DWORD *)(v31 + 32);
              v14 = *(unsigned __int16 *)(v29 + 36);
              __src = 0;
              v15 = *(unsigned __int16 *)(a1 + 130);
              if (v14 <= v15)
              {
                LOWORD(v26) = v14;
                v16 = (void *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v15 + 1, 1);
                v25 = (uint64_t)v16;
                if (v16
                  && (memmove(v16, (const void *)(v30 + (unsigned __int16)(v12 - v13)), v14),
                      (__src = (void *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, *(unsigned __int16 *)(a1 + 132)+ *(unsigned __int16 *)(a1 + 132)* (unint64_t)*(unsigned __int16 *)(a1 + 128)+ 1)) != 0))
                {
                  v6 = utoin_LookUpUdctWord(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), (uint64_t)&v25, 1, *(unsigned __int16 *)(a1 + 130), *(_WORD *)(a1 + 128), (uint64_t)v24);
                  if ((v6 & 0x80000000) == 0 && HIDWORD(v26))
                  {
                    if (HIDWORD(v26) == 43 || HIDWORD(v26) == 16)
                      *(_DWORD *)(v29 + 40) = HIDWORD(v26);
                    v21 = bed_Insert(a4, __src, (unsigned __int16)v28);
                    if ((v21 & 0x80000000) == 0)
                    {
                      if (LH_stricmp(*(char **)(a1 + 24), v24))
                        v22 = v24;
                      else
                        v22 = 0;
                      v21 = utoin_ReplaceCurrentRegion(a2, a3, a4, a5, v22);
                    }
                    v6 = v21;
                  }
                }
                else
                {
                  log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_3, 1923, 0, v17, v18, v19, v20, v23);
                }
                if (v25)
                  heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v25);
                if (__src)
                  heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)__src);
                return v6;
              }
              else
              {
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t utoin_LookUpSubWordsInNativeRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int16 a7, char *a8, int a9, uint64_t a10, unsigned __int16 a11, unsigned __int16 a12, _WORD *a13, _DWORD *a14, _WORD *a15)
{
  _WORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  unsigned __int16 v44;
  char v45;
  int v46;
  unsigned int v48;
  int v49;
  size_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  BOOL v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  char v83[4];
  void *__dst;
  size_t __n;
  char *__src;
  size_t v87;
  int v88;
  char *v89;
  __int16 v90;
  uint64_t v91;

  v91 = a6;
  v90 = a7;
  v89 = a8;
  v88 = 0;
  if (!a6)
    return 2370838535;
  v20 = a15;
  __n = 0;
  __src = 0;
  v87 = 0;
  *a14 = 0;
  *a13 = 0;
  *a15 = 0;
  if (a9 != 3)
    goto LABEL_10;
  v22 = *(unsigned int *)(a10 + 32);
  if (!utoin_multiwordInLatinRegion(a6, a7, (_WORD *)&v88 + 1, (unsigned __int16 *)&v88, *(_DWORD *)(a10 + 32), *(_DWORD *)(a10 + 36) + (int)v22))
  {
    if (*(_DWORD *)(a1 + 72) == 1)
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOIN] (no multiword found for latin region %d and %d)", v23, v24, v25, v22);
LABEL_10:
    v27 = 0;
    v28 = 0;
    v82 = 0;
    goto LABEL_11;
  }
  v26 = *(_DWORD *)(a5 + 32);
  v27 = (*(_DWORD *)(a6 + ((unint64_t)HIWORD(v88) << 6) + 32) - v26);
  v28 = *(_DWORD *)(a6 + ((unint64_t)(unsigned __int16)v88 << 6) + 32) - v26;
  if (*(_DWORD *)(a1 + 72) == 1)
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOIN] (multiword found for latin region %d and %d)", v23, v24, v25, *(unsigned int *)(a6 + ((unint64_t)HIWORD(v88) << 6) + 32));
  v82 = 1;
LABEL_11:
  __dst = (void *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *(unsigned __int16 *)(a1 + 130) + 1, 1);
  v34 = *(_QWORD *)(a1 + 16);
  if (__dst)
  {
    __src = (char *)heap_Calloc(*(_QWORD **)(v34 + 8), 1, *(unsigned __int16 *)(a1 + 132)+ *(unsigned __int16 *)(a1 + 132) * (unint64_t)*(unsigned __int16 *)(a1 + 128)+ 1);
    if (!__src)
    {
LABEL_15:
      v34 = *(_QWORD *)(a1 + 16);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 72) == 1)
    {
      v35 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *(unsigned __int16 *)(a1 + 130) + 1, 1);
      if (!v35)
        goto LABEL_15;
    }
    else
    {
      v35 = 0;
    }
    v80 = a2;
    v36 = a12;
    if (a11 >= a12)
      goto LABEL_17;
    v77 = v28;
    v75 = a5;
    v37 = a11;
    v78 = a3;
    v79 = a4;
    while (1)
    {
      if (a9 == 3)
      {
        v38 = strlen(v89);
        v39 = (unsigned __int16)v37;
        v40 = v27;
        if ((unsigned __int16)v37 >= (unsigned __int16)v36)
        {
          v42 = 1;
        }
        else
        {
          do
          {
            v41 = utf8_BelongsToSet(2u, v89, v39, v38);
            v42 = v41 == 1;
            if (v41 != 1)
              break;
            v37 += utf8_determineUTF8CharLength(v89[(unsigned __int16)v37]);
            v39 = (unsigned __int16)v37;
          }
          while ((unsigned __int16)v37 < (unsigned __int16)v36);
        }
        if ((a11 == (unsigned __int16)v37
           || (a11 >= (unsigned __int16)v37 ? (v45 = 1) : (v45 = v42),
               (v45 & 1) == 0 && utf8_BelongsToSet(2u, v89, v39 - 1, v38) == 1))
          && (v44 = v37 + utf8_determineUTF8CharLength(v89[(unsigned __int16)v37]),
              v44 < (unsigned __int16)v36))
        {
          v27 = v40;
          a4 = v79;
          while (1)
          {
            v43 = v44;
            if (utf8_BelongsToSet(2u, v89, v44, v38))
              break;
            v44 = v43 + utf8_determineUTF8CharLength(v89[v43]);
            if (v44 >= (unsigned __int16)v36)
              goto LABEL_49;
          }
          if (!v43)
          {
LABEL_49:
            v43 = v36;
            goto LABEL_50;
          }
          if (utf8_BelongsToSet(2u, v89, v43, v38) != 1)
            v43 = v36;
LABEL_50:
          v20 = a15;
        }
        else
        {
          v43 = v36;
          v20 = a15;
          v27 = v40;
          a4 = v79;
        }
      }
      else
      {
        v43 = v36;
      }
      if (v82 == 1
        && ((unsigned __int16)v43 > (unsigned __int16)v27
         || (unsigned __int16)v37 >= (unsigned __int16)v27))
      {
        if ((unsigned __int16)v37 < (unsigned __int16)v27
          && (unsigned __int16)v43 > (unsigned __int16)v27)
        {
          v48 = v27;
        }
        else
        {
          v48 = v43;
        }
        if ((unsigned __int16)v37 >= (unsigned __int16)v27)
          v43 = v77;
        else
          v43 = v48;
        if ((unsigned __int16)v37 < (unsigned __int16)v27)
        {
          v46 = 0;
        }
        else
        {
          v37 = v27;
          v46 = 1;
        }
      }
      else
      {
        v46 = 0;
      }
      v49 = (unsigned __int16)v43 - (unsigned __int16)v37;
      if (v49 < 1)
        goto LABEL_17;
      if (v49 > (unsigned __int16)*v20)
        *v20 = v43 - v37;
      if (!v89)
        goto LABEL_17;
      v81 = v46;
      if (*(unsigned __int16 *)(a1 + 130) >= (unsigned __int16)(v43 - v37))
        v50 = (unsigned __int16)(v43 - v37);
      else
        v50 = *(unsigned __int16 *)(a1 + 130);
      LOWORD(__n) = v50;
      memmove(__dst, &v89[(unsigned __int16)v37], v50);
      v51 = (unsigned __int16)__n;
      if (*(_DWORD *)(a1 + 72) == 1)
      {
        strncpy(v35, (const char *)__dst, (unsigned __int16)__n);
        v35[(unsigned __int16)__n] = 0;
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOIN] (lookup User Dict for \"%s\")", v52, v53, v54, (uint64_t)v35);
      }
      if ((utoin_LookUpUdctWord(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), (uint64_t)&__dst, a9 == 3, *(unsigned __int16 *)(a1 + 130), *(_WORD *)(a1 + 128), (uint64_t)v83) & 0x80000000) != 0)goto LABEL_17;
      if (a9 == 3)
      {
        v58 = HIDWORD(__n);
      }
      else
      {
        while (1)
        {
          v58 = HIDWORD(__n);
          v59 = (unsigned __int16)__n < 2u || (unsigned __int16)__n > v51;
          if (v59 || HIDWORD(__n) != 0)
            break;
          LOWORD(__n) = utf8_GetPreviousUtf8Offset((uint64_t)__dst, (unsigned __int16)__n);
          if ((utoin_LookUpUdctWord(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), (uint64_t)&__dst, a9 == 3, *(unsigned __int16 *)(a1 + 130), *(_WORD *)(a1 + 128), (uint64_t)v83) & 0x80000000) != 0)goto LABEL_17;
        }
      }
      if (v58 > 15)
      {
        if (v58 == 16)
        {
          if (!LH_stricmp(*(char **)(a1 + 24), "jpj") && HIDWORD(__n) != 2)
          {
LABEL_100:
            if (a9 == 3 && *(_DWORD *)(a1 + 72) == 1)
              log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOIN] (no (valid) User Dict entry found)", v55, v56, v57, v74);
            if (a9 == 3)
              v37 = v43;
            v37 += utf8_determineUTF8CharLength(v89[(unsigned __int16)v37]);
            v20 = a15;
            goto LABEL_116;
          }
        }
        else if (v58 != 43)
        {
          goto LABEL_100;
        }
      }
      else if (v58 == 2)
      {
        if (*__src <= 0x7Eu)
          HIDWORD(__n) = 3;
      }
      else if (v58 != 3)
      {
        goto LABEL_100;
      }
      v76 = v27;
      *a15 = 0;
      *a14 = 1;
      if (*(_DWORD *)(a1 + 72) == 1)
      {
        strncpy(v35, __src, (unsigned __int16)v87);
        v35[(unsigned __int16)v87] = 0;
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOIN] (found User Dict entry \"%s\")", v61, v62, v63, (uint64_t)v35);
      }
      if (LH_stricmp(*(char **)(a1 + 24), v83))
        v64 = v83;
      else
        v64 = 0;
      if ((utoin_ReplaceWord(v80, v78, (unsigned __int16)v37, (uint64_t)&__dst, 1, a4, v64) & 0x80000000) != 0)
        goto LABEL_17;
      if ((bed_GetpElem(v80, 0, &v89) & 0x80000000) != 0)
        goto LABEL_17;
      v65 = a4;
      v66 = (unsigned __int16)v87;
      v67 = (unsigned __int16)__n;
      *a13 = v87 + *a13 - __n;
      if ((bed_GetpElem(v78, 0, &v91) & 0x80000000) != 0 || (bed_GetcElem(v78, &v90) & 0x80000000) != 0)
        goto LABEL_17;
      v37 += v66;
      v36 = v66 + v36 - v67;
      a4 = v65;
      v20 = a15;
      v27 = v76;
LABEL_116:
      if (v81)
      {
        v68 = v91;
        v69 = *(_DWORD *)(v75 + 32);
        if (utoin_multiwordInLatinRegion(v91, v90, (_WORD *)&v88 + 1, (unsigned __int16 *)&v88, v69 + (unsigned __int16)v37, *(_DWORD *)(a10 + 32) + (unsigned __int16)v36))
        {
          v73 = *(unsigned int *)(v68 + ((unint64_t)HIWORD(v88) << 6) + 32);
          v27 = (v73 - v69);
          v77 = *(_DWORD *)(v68 + ((unint64_t)(unsigned __int16)v88 << 6) + 32) - v69;
          if (*(_DWORD *)(a1 + 72) == 1)
            log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOIN] (multiword found for latin region %d and %d)", v70, v71, v72, v73);
          v82 = 1;
        }
        else
        {
          if (*(_DWORD *)(a1 + 72) == 1)
            log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOIN] (no further multiwords found in latin region %d and %d)", v70, v71, v72, v69 + (unsigned __int16)v37);
          v27 = 0;
          v77 = 0;
          v82 = 0;
        }
        a4 = v79;
        v20 = a15;
      }
      if ((unsigned __int16)v37 >= (unsigned __int16)v36)
        goto LABEL_17;
    }
  }
LABEL_16:
  log_OutPublic(*(_QWORD *)(v34 + 32), (uint64_t)&modPP_3, 1923, 0, v30, v31, v32, v33, v74);
  v35 = 0;
LABEL_17:
  if (__dst)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)__dst);
    __dst = 0;
  }
  if (__src)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)__src);
    __src = 0;
  }
  if (v35)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v35);
  return 0;
}

uint64_t utoin_multiwordInLatinRegion(uint64_t a1, unsigned int a2, _WORD *a3, unsigned __int16 *a4, unsigned int a5, unsigned int a6)
{
  uint64_t v6;
  _DWORD *v7;
  __int16 i;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  _DWORD *v13;
  unsigned __int16 v14;
  unsigned int v15;

  if (!a2)
    return 0;
  v6 = 0;
  v7 = (_DWORD *)(a1 + 104);
  for (i = 1; ; ++i)
  {
    v9 = a1 + (v6 << 6);
    if (*(_DWORD *)(v9 + 20) == 32 && *(_DWORD *)(v9 + 40) == 1)
    {
      v10 = *(_DWORD *)(a1 + (v6 << 6) + 32);
      v11 = v10 < a5 || v10 > a6;
      if (!v11 && v6 + 1 < (unint64_t)a2)
        break;
    }
LABEL_21:
    ++v6;
    v7 += 16;
    if (v6 == a2)
      return 0;
  }
  v13 = v7;
  v14 = i;
  while (1)
  {
    if (*(v13 - 5) == 32 && !*v13)
    {
      v15 = *(v13 - 2);
      if (v15 >= v10 && v15 <= a6)
        break;
    }
    ++v14;
    v13 += 16;
    if (a2 == v14)
      goto LABEL_21;
  }
  *a3 = v6;
  *a4 = v14;
  return 1;
}

uint64_t utoin_ReplaceCurrentRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t result;
  int v11;
  int v12;
  unsigned int v13;
  unsigned __int16 v14;
  unsigned int v15;
  unsigned __int16 v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  int v25[2];
  __int128 v26;
  __int128 v27;
  _OWORD v28[2];
  unsigned __int16 v29;
  uint64_t v30;
  void *__src;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v33 = 0;
  v34 = 0;
  v30 = 0;
  __src = 0;
  *(_QWORD *)v25 = 0;
  v26 = MarkerSetLang;
  v27 = unk_1DEC66CE8;
  memset(v28, 0, sizeof(v28));
  if (!a3)
    return 2370838535;
  v32 = 0;
  v29 = 0;
  result = bed_GetpElem(a2, 0, &v34);
  if ((result & 0x80000000) == 0)
  {
    result = bed_GetpElem(a2, 0xFFFFu, &v33);
    if ((result & 0x80000000) == 0)
    {
      v11 = *(_DWORD *)(v33 + 32);
      v12 = *(_DWORD *)(v34 + 32);
      v13 = *(unsigned __int16 *)(v33 + 36);
      if (a4 && a5)
      {
        result = datac_RequestBlock(a4, 1012, 1u, v25);
        if ((result & 0x80000000) != 0)
          return result;
        DWORD1(v27) = 36;
        result = addOrGetTNArgStr(*(uint64_t *)v25, a5, (unsigned int *)v28 + 2, a4);
        if ((result & 0x80000000) != 0)
          return result;
        *((_QWORD *)&v27 + 1) = *(unsigned int *)(v33 + 24);
        *(_QWORD *)&v28[0] = *(unsigned int *)(v33 + 32);
        result = bed_Goto(a2, 1u);
        if ((result & 0x80000000) != 0)
          return result;
        result = bed_marker_InjectFixedRefMarker(a2, &v26);
        if ((result & 0x80000000) != 0)
          return result;
        v33 += 64;
      }
      result = bed_GetcElem(a3, (_WORD *)&v32 + 1);
      if ((result & 0x80000000) != 0)
        return result;
      v14 = v11 - v12;
      if (HIWORD(v32))
      {
        if (v13 >= HIWORD(v32))
          v15 = HIWORD(v32);
        else
          v15 = v13;
        result = bed_GetpElem(a3, 0, &__src);
        if ((result & 0x80000000) != 0)
          return result;
        result = bed_GetpElem(a1, 0, &v30);
        if ((result & 0x80000000) != 0)
          return result;
        v16 = 0;
        if (v15)
        {
          v17 = (unsigned __int8 *)__src + 1;
          v18 = (unsigned __int8 *)(v30 + v14 + 1);
          while (*(v18 - 1) == *((unsigned __int8 *)__src + v16) && *v18 == *v17)
          {
            ++v18;
            ++v16;
            ++v17;
            if (v15 <= v16)
            {
              v16 = v15;
              break;
            }
          }
        }
        result = bed_Remove(a1, v14, v13);
        if ((result & 0x80000000) != 0)
          return result;
        result = bed_Goto(a1, v14);
        if ((result & 0x80000000) != 0)
          return result;
        result = bed_Insert(a1, __src, HIWORD(v32));
        if ((result & 0x80000000) != 0)
          return result;
        result = bed_Remove(a3, 0, HIWORD(v32));
        if ((result & 0x80000000) != 0)
          return result;
      }
      else
      {
        result = bed_Remove(a1, (unsigned __int16)(v11 - v12), v13);
        if ((result & 0x80000000) != 0)
          return result;
        v16 = 0;
      }
      v19 = HIWORD(v32);
      *(_DWORD *)(v33 + 36) = HIWORD(v32);
      result = bed_GetiElem(a2, &v29);
      if ((result & 0x80000000) == 0)
      {
        result = bed_GetcElem(a2, &v32);
        if ((result & 0x80000000) == 0)
        {
          v20 = (unsigned __int16)v32;
          v21 = v29 + 1;
          if ((unsigned __int16)v32 <= (unsigned __int16)(v29 + 1))
          {
            return 0;
          }
          else
          {
            v22 = v34;
            v23 = HIWORD(v32);
            v24 = (_DWORD *)(v33 + 96);
            do
            {
              if (v19 != v13 && *v24 > v14 + v16 + *(_DWORD *)(v22 + 32))
                *v24 = *v24 - v13 + v23;
              result = 0;
              ++v21;
              v24 += 16;
            }
            while (v20 > (unsigned __int16)v21);
          }
        }
      }
    }
  }
  return result;
}

uint64_t utoin_NormalizeOrthNativeWord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return utoin_NormalizeOrthNative(a1, a2, a3, a4, 1, a5);
}

uint64_t utoin_RemoveRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned __int16 v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  result = 2370838535;
  v21 = 0;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a4)
        {
          v20 = 0;
          result = bed_GetpElem(a3, 0, &v23);
          if ((result & 0x80000000) == 0)
          {
            result = bed_GetpElem(a2, 0, &v22);
            if ((result & 0x80000000) == 0)
            {
              result = bed_GetpElem(a3, 0xFFFFu, &v21);
              if ((result & 0x80000000) == 0)
              {
                v8 = *(_DWORD *)(v21 + 32) - *(_DWORD *)(v23 + 32);
                v9 = *(unsigned __int16 *)(v21 + 36);
                result = bed_Remove(a2, v8, v9);
                if ((result & 0x80000000) == 0)
                {
                  *(_DWORD *)(v21 + 36) = 0;
                  result = bed_GetiElem(a3, (_WORD *)&v20 + 1);
                  if ((result & 0x80000000) == 0)
                  {
                    result = bed_GetcElem(a3, &v20);
                    if ((result & 0x80000000) == 0)
                    {
                      v10 = (unsigned __int16)v20;
                      v11 = HIWORD(v20) + 1;
                      if ((unsigned __int16)v20 <= (unsigned __int16)(HIWORD(v20) + 1))
                      {
                        return 0;
                      }
                      else
                      {
                        v12 = v23;
                        v13 = (unsigned int *)(v21 + 100);
                        do
                        {
                          v14 = *(v13 - 1);
                          v15 = *(_DWORD *)(v12 + 32) + v8;
                          if (v14 >= v15 + v9)
                          {
                            *(v13 - 1) = v14 - v9;
                          }
                          else
                          {
                            *(v13 - 1) = v15;
                            v16 = *v13 + v15;
                            v17 = v9 + v8 + *(_DWORD *)(v12 + 32);
                            v18 = v16 >= v17;
                            v19 = v16 - v17;
                            if (v18)
                              *v13 = v19;
                            else
                              *v13 = 0;
                          }
                          result = 0;
                          ++v11;
                          v13 += 16;
                        }
                        while (v10 > (unsigned __int16)v11);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t utoin_NormalizeOrthNativeText(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return utoin_NormalizeOrthNative(a1, a2, a3, a4, 0, a5);
}

uint64_t utoin_TranscodeText(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return utoin_Transcode(a1, a2, a3, a4, 0);
}

uint64_t utoin_TranscodeWord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return utoin_Transcode(a1, a2, a3, a4, 1);
}

uint64_t utoin_MarkWordBoundary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = 2370838535;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a4)
        {
          result = bed_Insert(a4, &szWORD_END_0, 1);
          if ((result & 0x80000000) == 0)
          {
            result = bed_Insert(a4, &szWORD_BEG, 1);
            if ((result & 0x80000000) == 0)
              return utoin_ReplaceCurrentRegion(a2, a3, a4, 0, 0);
          }
        }
      }
    }
  }
  return result;
}

uint64_t utoin_SpellRegion(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  int v13;
  size_t v14;
  void *v15;
  unsigned __int16 v16;
  void *v17;
  uint64_t v18;
  int v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = 0;
  v25 = 0;
  v5 = 2370838535;
  v23 = 0;
  v21 = 0;
  if (a1 && a2 && a3 && a4)
  {
    v22 = 0;
    v11 = a1[2];
    v12 = datac_RequestBlock(a5, 1012, 1u, &v22);
    if ((v12 & 0x80000000) != 0)
      return v12;
    v12 = bed_GetpElem(a3, 0, &v25);
    if ((v12 & 0x80000000) != 0)
      return v12;
    v13 = *(_DWORD *)(v25 + 32);
    v12 = bed_GetpElem(a2, 0, &v24);
    if ((v12 & 0x80000000) != 0)
      return v12;
    v12 = bed_GetpElem(a3, 0xFFFFu, &v23);
    if ((v12 & 0x80000000) != 0)
    {
      return v12;
    }
    else
    {
      v14 = *(unsigned __int16 *)(v23 + 36);
      if (*(_WORD *)(v23 + 36))
      {
        v20 = *(_DWORD *)(v23 + 32);
        v15 = (void *)heap_Alloc(*(_QWORD *)(v11 + 8), (unsigned __int16)(v14 + 1));
        if (v15)
        {
          v16 = v20 - v13;
          v17 = v15;
          bzero(v15, (unsigned __int16)(v14 + 1));
          memmove(v17, (const void *)(v24 + v16), v14);
          v18 = (*(uint64_t (**)(_QWORD, _QWORD, void *, size_t, size_t, uint64_t, uint64_t, uint64_t, __int16, __int16 *, BOOL))(a1[13] + 72))(a1[14], a1[15], v17, v14, v14, a4, a5, v22, 1012, &v21, *(_DWORD *)(v23 + 40) == 44);
          if ((v18 & 0x80000000) == 0)
            v18 = utoin_ReplaceCurrentRegion(a2, a3, a4, 0, 0);
          v5 = v18;
          heap_Free(*(_QWORD **)(v11 + 8), (uint64_t)v17);
        }
        else
        {
          return 2370838538;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return v5;
}

uint64_t utoin_NormalizeOrthNative(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  __int16 v34;
  unsigned __int16 v35;
  int v36;
  unsigned int v37;
  unsigned __int16 v38;
  int v39;
  uint64_t v40;
  int v41;
  size_t v42;
  unsigned __int16 v43;
  unsigned __int16 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  unsigned int v50;
  _BOOL4 v51;
  uint64_t v52;
  unsigned __int16 v53;
  unsigned __int16 v54;
  uint64_t v55;
  __int16 v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  int *v62;
  unsigned int v63;
  unsigned int v64;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  __int16 v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  void *v78;
  int *v79;
  uint64_t v80;
  unsigned int v81;
  int v82;
  __int16 v83;
  int v84;
  int v85;
  uint64_t v86;
  unsigned __int16 v87;
  int v88;
  size_t __len;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  unsigned __int16 v94;
  __int16 v95;
  uint64_t v96;
  unsigned __int16 *v97;
  unsigned __int16 v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108[3];

  v107 = 0;
  v108[0] = 0;
  v106 = 0;
  v105 = 0;
  v104 = 0;
  v99 = 0;
  v98 = 0;
  v96 = 0;
  v97 = 0;
  v100 = MarkerUndef;
  v101 = unk_1DEC66E60;
  v6 = 2370838535;
  v102 = xmmword_1DEC66E70;
  v103 = unk_1DEC66E80;
  if (a1 && a2 && a3 && a4)
  {
    v95 = 0;
    v13 = *(_QWORD *)(a1 + 16);
    if (!*(_DWORD *)(a1 + 164))
    {
      v14 = datac_RequestBlock(a6, 1012, 1u, &v99);
      if ((v14 & 0x80000000) != 0)
        return v14;
    }
    v14 = bed_GetpElem(a3, 0, v108);
    if ((v14 & 0x80000000) != 0)
      return v14;
    v15 = *(_DWORD *)(v108[0] + 32);
    v93 = *(_DWORD *)(v108[0] + 24);
    v14 = bed_GetpElem(a2, 0, &v107);
    if ((v14 & 0x80000000) != 0)
      return v14;
    v14 = bed_GetpElem(a3, 0xFFFFu, &v104);
    if ((v14 & 0x80000000) != 0)
      return v14;
    v92 = v15;
    v90 = v13;
    v91 = a3;
    v17 = *(_DWORD *)(v104 + 32);
    v16 = *(_DWORD *)(v104 + 36);
    v18 = (void *)heap_Alloc(*(_QWORD *)(v13 + 8), (unsigned __int16)(v16 + 1));
    if (!v18)
      return 2370838538;
    v19 = v18;
    __len = (unsigned __int16)v16;
    bzero(v18, (unsigned __int16)(v16 + 1));
    v20 = (unsigned __int16)v16;
    memmove(v19, (const void *)(v107 + (unsigned __int16)(v17 - v92)), (unsigned __int16)v16);
    v21 = v99;
    if (*(_DWORD *)(a1 + 164))
      v88 = 0;
    else
      v88 = *(unsigned __int16 *)(v99 + 16);
    v23 = v90;
    v22 = v91;
    *(_QWORD *)(a1 + 148) = 0x100000001;
    v24 = (*(uint64_t (**)(_QWORD, _QWORD, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16, unsigned __int16 *, int, unsigned __int16 **, uint64_t))(*(_QWORD *)(a1 + 104) + 64))(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), v19, v20, v20, a2, v91, a4, a6, v21, 1012, &v98, a5, &v97, a1 + 136);
    if ((v24 & 0x80000000) != 0)
      goto LABEL_102;
    v6 = bed_GetcElem(a2, &v105);
    if ((v6 & 0x80000000) != 0 || !v105)
      goto LABEL_103;
    v24 = bed_GetpElem(a2, 0, &v106);
    if ((v24 & 0x80000000) != 0)
    {
LABEL_102:
      v6 = v24;
      goto LABEL_103;
    }
    v25 = *(_DWORD *)(v104 + 32);
    v85 = *(_DWORD *)(v104 + 24);
    v14 = bed_GetpElem(v91, 0, &v96);
    if ((v14 & 0x80000000) != 0)
      return v14;
    v26 = bed_GetcElem(v91, &v95);
    v27 = v26;
    if ((v26 & 0x80000000) != 0)
    {
      return v26;
    }
    else
    {
      v78 = v19;
      v28 = *(_QWORD *)(v104 + 8);
      v29 = *(unsigned __int16 *)(v104 + 16);
      if (*(_WORD *)(v104 + 16))
      {
        v30 = *(unsigned __int16 *)(v104 + 16);
        v31 = *(_DWORD **)(v104 + 8);
        do
        {
          *v31 += v93 - v85;
          v31 += 2;
          --v30;
        }
        while (v30);
      }
      v80 = v29;
      v32 = v98;
      v33 = (uint64_t *)(a1 + 136);
      if (v98)
      {
        v34 = 0;
        v35 = v25 - v92;
        v36 = (unsigned __int16)(v25 - v92);
        v37 = v98 + v36;
        v38 = v25 - v92;
        do
        {
          if (*(_BYTE *)(v106 + v38) == 16)
            ++v34;
          ++v38;
        }
        while (v37 > v38);
        v87 = 0;
        v39 = 0;
        v40 = 0;
        v94 = 0;
        v79 = (int *)(v28 + 4);
        v86 = 1;
        v41 = (unsigned __int16)(v25 - v92);
        v42 = __len;
        v82 = v41;
        do
        {
          if (*(_BYTE *)(v106 + v35) != 16)
          {
LABEL_38:
            v45 = v40;
            goto LABEL_96;
          }
          if (v37 <= v35)
          {
LABEL_37:
            if (*(_DWORD *)(a1 + 164))
              goto LABEL_38;
            v46 = v27;
            v47 = v32;
            v48 = v23;
            v49 = v42;
            v44 = strlen((const char *)(*(_QWORD *)(v99 + 8) + (v88 + v94)
                                                             * *(unsigned __int16 *)(v99 + 2)));
            v42 = v49;
            v23 = v48;
            v33 = (uint64_t *)(a1 + 136);
            v22 = v91;
            v32 = v47;
            v27 = v46;
          }
          else
          {
            v43 = v35;
            while (*(_BYTE *)(v106 + v43) != 17)
            {
              if (v37 <= ++v43)
              {
                if (*(_BYTE *)(v106 + v43) != 17)
                  goto LABEL_37;
                break;
              }
            }
            v44 = v43 + ~v35;
          }
          if (!v44)
          {
            v45 = v40;
            v36 = v82;
            goto LABEL_96;
          }
          v50 = *(unsigned __int16 *)(a1 + 144);
          v51 = (unsigned __int16)v40 < v50;
          if ((_WORD)v40 && v50 > (unsigned __int16)v40)
          {
            v52 = *v33;
            while (*(_DWORD *)(v52 + 12 * ((unsigned __int16)v40 - 1) + 4) == 1
                 && *(_DWORD *)(v52 + 12 * (unsigned __int16)v40 + 4) == 1)
            {
              v40 = (v40 + 1);
              if (v50 <= (unsigned __int16)v40)
              {
                v51 = 0;
                goto LABEL_50;
              }
            }
            v51 = 1;
          }
LABEL_50:
          v45 = (v40 + 1);
          if (v50 <= (unsigned __int16)(v40 + 1))
            v53 = v40 + 1;
          else
            v53 = *(_WORD *)(a1 + 144);
          v54 = v40;
          while (v50 > ++v54)
          {
            if (*(_DWORD *)(*v33 + 12 * v54 - 8) != 1 || *(_DWORD *)(*v33 + 12 * v54 + 4) != 1)
              goto LABEL_59;
          }
          v54 = v53;
LABEL_59:
          if (v51)
          {
            v55 = *v33;
            v56 = v42;
            if (v50 != v54)
              v56 = *(_WORD *)(v55 + 12 * v54);
            v57 = *(unsigned __int16 *)(v55 + 12 * (unsigned __int16)v40);
            LOWORD(v55) = v56 - v57;
            v58 = v80;
            goto LABEL_69;
          }
          v58 = v80;
          if (*(_DWORD *)(a1 + 148) == 1)
          {
            if (v34 != 1)
            {
              v57 = 0;
              v45 = v40;
              LOWORD(v55) = v44 / *(_WORD *)(a1 + 160);
              goto LABEL_69;
            }
            v57 = 0;
            LODWORD(v55) = *(_DWORD *)(v104 + 28);
          }
          else
          {
            v57 = 0;
            LOWORD(v55) = 0;
          }
          v45 = v40;
LABEL_69:
          v59 = (unsigned __int16)v55;
          v60 = 0;
          if ((_DWORD)v58)
          {
            v61 = v58;
            v62 = v79;
            do
            {
              v63 = *(v62 - 1);
              if (v63 > (unsigned __int16)v55 + v57 + v39)
                break;
              v64 = v39 + v57;
              if (v63 == v39 + v57)
              {
                v39 += *v62;
                v64 = v39 + v57;
              }
              if (v63 > v64 && v63 <= v64 + (unsigned __int16)v55)
                v60 = *v62;
              v62 += 2;
              --v61;
            }
            while (v61);
          }
          v84 = v60;
          v66 = v85 + v87 + v57 + v39;
          DWORD2(v101) = v66;
          HIDWORD(v101) = (unsigned __int16)v55;
          v81 = v41 + v92;
          LODWORD(v102) = v41 + v92;
          DWORD1(v102) = v44;
          if (*(_DWORD *)(a1 + 164))
          {
            v83 = 0;
          }
          else
          {
            DWORD1(v101) = 39;
            DWORD2(v102) = v88 + v94;
            v83 = strlen((const char *)(*(_QWORD *)(v99 + 8)
                                      + DWORD2(v102) * *(unsigned __int16 *)(v99 + 2)));
            v67 = bed_marker_InjectFixedRefMarker(v22, &v100);
            if ((v67 & 0x80000000) != 0)
            {
              v6 = v67;
LABEL_107:
              v19 = v78;
              goto LABEL_103;
            }
          }
          DWORD1(v101) = 41;
          *((_QWORD *)&v102 + 1) = 0;
          v27 = bed_marker_InjectFixedRefMarker(v22, &v100);
          v71 = v86;
          if ((v27 & 0x80000000) != 0)
            goto LABEL_106;
          if (v97)
          {
            if (*v97 >= (unsigned __int16)v86)
            {
              v72 = v97[(unsigned __int16)v86];
            }
            else
            {
              log_OutText(*(_QWORD *)(v23 + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOI] (missing POS for normalized word %d", v68, v69, v70, (unsigned __int16)v86);
              v72 = 0;
            }
            DWORD1(v101) = 14;
            DWORD2(v101) = v66;
            if (*(_DWORD *)(a1 + 148) == 1)
              v73 = v59;
            else
              v73 = 0;
            v74 = v81;
            if ((_DWORD)v102 == v92)
              v74 = v92;
            HIDWORD(v101) = v59;
            *(_QWORD *)&v102 = v74;
            DWORD2(v102) = v72;
            v27 = bed_marker_InjectFixedRefMarker(v22, &v100);
            if ((v27 & 0x80000000) != 0)
              goto LABEL_106;
            v87 += v73;
            v71 = (v86 + 1);
          }
          v42 = __len;
          v33 = (uint64_t *)(a1 + 136);
          v36 = v82;
          v86 = v71;
          v39 += v84;
          v94 += v83 + 1;
          v32 = v98;
LABEL_96:
          v41 = ++v35;
          v37 = v36 + v32;
          v40 = v45;
        }
        while (v36 + (int)v32 > v35);
      }
      if (*(unsigned __int16 *)(a1 + 146) < 0x15u)
      {
LABEL_106:
        v6 = v27;
        goto LABEL_107;
      }
      v75 = v27;
      v76 = heap_Realloc(*(uint64_t **)(v23 + 8), *v33, 120);
      v6 = 2370838538;
      v19 = v78;
      if (v76)
      {
        *(_QWORD *)(a1 + 136) = v76;
        *(_WORD *)(a1 + 146) = 10;
        v6 = v75;
      }
LABEL_103:
      heap_Free(*(_QWORD **)(v23 + 8), (uint64_t)v19);
      if (v97)
        heap_Free(*(_QWORD **)(v23 + 8), (uint64_t)v97);
    }
  }
  return v6;
}

uint64_t utoin_Transcode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  char *v23;
  unsigned __int16 v24;
  char *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  void *v29;
  size_t v30;
  char *v31;
  unsigned __int16 v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned __int16 v35;
  unsigned int v36;
  _DWORD *v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  int *v47;
  unsigned int v48;
  int v49;
  int v50;
  unsigned __int16 v51;
  unsigned __int16 v52;
  unsigned int v53;
  uint64_t v54;
  unsigned __int16 *v55;
  unsigned __int16 v56;
  unsigned __int16 *v57;
  int v58;
  int v59;
  unsigned __int16 v60;
  int v61;
  uint64_t v62;
  int v63;
  int *v64;
  int v65;
  unsigned int v66;
  BOOL v67;
  unsigned int v68;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  char *__s;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned __int16 v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  unsigned __int16 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v5 = 2370838538;
  v90 = 0;
  v91 = 0;
  v89 = 0;
  v83 = 0;
  v84 = MarkerUndef;
  v85 = unk_1DEC66E60;
  v86 = xmmword_1DEC66E70;
  v87 = unk_1DEC66E80;
  v6 = 2370838535;
  if (a1 && a2 && a3 && a4)
  {
    v82 = 0;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = bed_GetpElem(a3, 0, &v91);
    if ((v13 & 0x80000000) != 0)
      return v13;
    v13 = bed_GetpElem(a2, 0, &v90);
    if ((v13 & 0x80000000) != 0)
      return v13;
    v13 = bed_GetpElem(a3, 0, &v83);
    if ((v13 & 0x80000000) != 0)
      return v13;
    v13 = bed_GetcElem(a3, &v82);
    if ((v13 & 0x80000000) != 0)
      return v13;
    v13 = bed_GetpElem(a3, 0xFFFFu, &v89);
    if ((v13 & 0x80000000) != 0)
    {
      return v13;
    }
    else
    {
      v14 = *(_DWORD *)(v91 + 32);
      v16 = *(_DWORD *)(v89 + 32);
      v15 = *(_DWORD *)(v89 + 36);
      v17 = *(_DWORD *)(v89 + 24);
      v80 = *(_DWORD *)(v89 + 40);
      v18 = *(_QWORD *)(v89 + 8);
      v19 = *(unsigned __int16 *)(v89 + 16);
      if (*(_WORD *)(v89 + 16))
      {
        v20 = *(_DWORD *)(v91 + 24) - v17;
        v21 = *(unsigned __int16 *)(v89 + 16);
        v22 = *(_DWORD **)(v89 + 8);
        do
        {
          *v22 += v20;
          v22 += 2;
          --v21;
        }
        while (v21);
      }
      if ((_WORD)v15)
      {
        v76 = v18;
        v78 = v19;
        v79 = v17;
        v88 = v15 + 1;
        v23 = (char *)heap_Alloc(*(_QWORD *)(v12 + 8), (unsigned __int16)(v15 + 1));
        if (v23)
        {
          v74 = v16;
          v24 = v16 - v14;
          v25 = v23;
          bzero(v23, v88--);
          *(_WORD *)(a1 + 144) = 0;
          *(_QWORD *)(a1 + 148) = 0x100000001;
          v26 = utoin_TranscodeLatinText((_QWORD *)a1, v12, v90 + v24, (unsigned __int16)v15, v25, &v88, a1 + 136, v80);
          if ((v26 & 0x80000000) != 0)
          {
            v41 = (uint64_t)v25;
          }
          else
          {
            __s = v25;
            if (!a5 || (v26 = bed_Insert(a4, &szWORD_BEG, 1), (v26 & 0x80000000) == 0))
            {
              v27 = strlen(v25);
              v28 = heap_Alloc(*(_QWORD *)(v12 + 8), (v27 + 1));
              if (v28)
              {
                v29 = (void *)v28;
                v30 = strlen(v25);
                bzero(v29, v30 + 1);
                v31 = strcpy((char *)v29, v25);
                v32 = strlen(v31);
                v33 = bed_Insert(a4, v29, v32);
                v73 = (uint64_t)v29;
                if ((v33 & 0x80000000) != 0
                  || a5 && (v33 = bed_Insert(a4, &szWORD_END_0, 1), (v33 & 0x80000000) != 0)
                  || (v33 = utoin_ReplaceCurrentRegion(a2, a3, a4, 0, 0), (v33 & 0x80000000) != 0))
                {
LABEL_93:
                  v5 = v33;
                }
                else
                {
                  if (v80 == 16)
                  {
                    v34 = (uint64_t *)(a1 + 136);
                    v35 = 0;
                    if (v82 >= 2uLL)
                    {
                      v36 = v15 + v74;
                      v37 = (_DWORD *)(v83 + 100);
                      v38 = v82 - 1;
                      do
                      {
                        v39 = *(v37 - 1);
                        if (v39 > v36)
                          break;
                        v40 = *(v37 - 4) == 998 && v39 >= v74;
                        if (v40 && *v37 + v39 <= v36)
                          ++v35;
                        v37 += 16;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else
                  {
                    v35 = 0;
                    v34 = (uint64_t *)(a1 + 136);
                  }
                  if (*(_DWORD *)(v89 + 40) != 43)
                  {
                    v42 = *(unsigned __int16 *)(a1 + 144);
                    if (*(_WORD *)(a1 + 144))
                    {
                      v43 = 0;
                      v44 = 0;
                      v45 = 0;
                      v77 = (int *)(v76 + 4);
                      v81 = v35;
                      while ((unsigned __int16)v44 < (unsigned __int16)v42)
                      {
                        v46 = (unsigned __int16)v44;
                        if (*(_DWORD *)(*v34 + 12 * (unsigned __int16)v44 + 4) != 1)
                        {
                          v50 = 1;
                          goto LABEL_54;
                        }
                        v47 = (int *)(*v34 + 12 * (unsigned __int16)v44 + 16);
                        v48 = v74;
                        while ((unsigned __int16)v42 - 1 != v46)
                        {
                          v49 = *v47;
                          v47 += 3;
                          ++v46;
                          if (v49 != 1)
                          {
                            v50 = v46 < (unsigned __int16)v42;
                            goto LABEL_55;
                          }
                        }
                        v50 = 0;
                        v46 = v42;
LABEL_55:
                        v44 = (v46 + 1);
                        v51 = v46 + 1;
                        if ((unsigned __int16)v42 > (unsigned __int16)(v46 + 1))
                          v51 = v42;
                        v52 = v46;
                        while (1)
                        {
                          v53 = ++v52;
                          if (v52 >= (unsigned __int16)v42)
                            break;
                          if (*(_DWORD *)(*v34 + 12 * v52 + 4) != 1)
                            goto LABEL_62;
                        }
                        v52 = v51;
LABEL_62:
                        if (v50)
                        {
                          v54 = *v34;
                          v55 = (unsigned __int16 *)(*v34 + 12 * (unsigned __int16)v46);
                          v50 = v55[4];
                          if (v52 == (unsigned __int16)v42)
                          {
                            v56 = *(_WORD *)(v54 + 12 * (v53 - 1) + 8);
                            v57 = &v88;
                          }
                          else
                          {
                            v57 = (unsigned __int16 *)(v54 + 12 * v53 + 8);
                            v56 = v55[4];
                          }
                          v58 = *v55;
                          v60 = *v57 - v56;
                          v59 = *(unsigned __int16 *)(v54 + 12 * (unsigned __int16)v46 + 2);
                        }
                        else
                        {
                          v58 = 0;
                          v59 = 0;
                          v60 = 0;
                          v44 = v46;
                        }
                        v61 = v60;
                        v62 = v78;
                        if ((_DWORD)v78)
                        {
                          v63 = 0;
                          v64 = v77;
                          v65 = v58 + v60;
                          do
                          {
                            v66 = *(v64 - 1);
                            if (v66)
                              v67 = v66 > v65 + v43;
                            else
                              v67 = 0;
                            if (v67)
                              break;
                            v68 = v43 + v58;
                            if (v66 == v43 + v58)
                            {
                              v43 = *v64;
                              v68 = *v64 + v58;
                            }
                            if (v66 > v68 && v66 <= v68 + v61)
                              v63 = *v64;
                            v64 += 2;
                            --v62;
                          }
                          while (v62);
                        }
                        else
                        {
                          v63 = 0;
                        }
                        DWORD1(v85) = 41;
                        DWORD2(v85) = v79 + v58 + v43;
                        HIDWORD(v85) = v63 + v59;
                        LODWORD(v86) = v48 + v50;
                        DWORD1(v86) = v61;
                        if (v81 <= 1)
                        {
                          v33 = bed_marker_InjectFixedRefMarker(a3, &v84);
                          if ((v33 & 0x80000000) != 0)
                            goto LABEL_93;
                        }
                        v13 = bed_GetpElem(a3, 0, &v83);
                        if ((v13 & 0x80000000) != 0)
                          return v13;
                        v6 = bed_GetcElem(a3, &v82);
                        if ((v6 & 0x80000000) != 0)
                          return v6;
                        v43 += v63;
                        ++v45;
                        v42 = *(unsigned __int16 *)(a1 + 144);
                        v34 = (uint64_t *)(a1 + 136);
                        if (v42 <= (unsigned __int16)v45)
                          goto LABEL_98;
                      }
                      v50 = 0;
                      v46 = v44;
LABEL_54:
                      v48 = v74;
                      goto LABEL_55;
                    }
                  }
                  v6 = 0;
LABEL_98:
                  if (*(unsigned __int16 *)(a1 + 146) >= 0x15u)
                  {
                    v72 = heap_Realloc(*(uint64_t **)(v12 + 8), *v34, 120);
                    v71 = (uint64_t)__s;
                    if (v72)
                    {
                      *(_QWORD *)(a1 + 136) = v72;
                      *(_WORD *)(a1 + 146) = 10;
                      v5 = v6;
                    }
                    goto LABEL_95;
                  }
                  v5 = v6;
                }
                v71 = (uint64_t)__s;
LABEL_95:
                heap_Free(*(_QWORD **)(v12 + 8), v71);
                v41 = v73;
                goto LABEL_96;
              }
              v41 = (uint64_t)v25;
LABEL_96:
              heap_Free(*(_QWORD **)(v12 + 8), v41);
              return v5;
            }
            v41 = (uint64_t)v25;
          }
          v5 = v26;
          goto LABEL_96;
        }
        return 2370838538;
      }
      else
      {
        return 0;
      }
    }
  }
  return v6;
}

uint64_t utoin_TranscodeLatinText(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, _BYTE *a5, unsigned __int16 *a6, uint64_t a7, unsigned int a8)
{
  uint64_t result;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  _BYTE *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned __int16 v27;
  _BOOL4 v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  char v37;
  int v38;
  int v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  BOOL v44;
  unsigned __int16 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  __int16 v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned __int16 *v58;
  unsigned __int8 *v59;

  v59 = 0;
  result = 2370838535;
  if (a3 && a6 && *a6)
  {
    if (a4)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v54 = a1;
      v55 = a3 + 1;
      v58 = a6;
      while (1)
      {
        v18 = (_BYTE *)(a3 + (unsigned __int16)v17);
        v19 = *v18;
        if (v19 - 9 <= 4)
        {
          v20 = v14 + 1;
          if (v20 >= a4 || v19 != 13 || *(_BYTE *)(a3 + v20) != 10)
          {
            v22 = 0;
            a5[(unsigned __int16)v16] = 32;
            goto LABEL_33;
          }
          v21 = 0;
          v22 = 0;
          goto LABEL_34;
        }
        if (((v19 & 0xDF) - 65) < 0x1Au
          || (v19 != 32 ? (v23 = (v19 - 48) >= 0xAu) : (v23 = 0), !v23))
        {
          v22 = 0;
          a5[(unsigned __int16)v16] = v19;
          goto LABEL_33;
        }
        v24 = a8;
        if (a8 <= 0x3C)
        {
          if (((1 << a8) & 0x1000080000000140) != 0)
            goto LABEL_26;
          v24 = a8;
          if (a8 == 16)
          {
            if (v19 == 195 && (*(unsigned __int8 *)(a3 + v14 + 1) | 0x20) == 0xBC)
            {
              v22 = 0;
              a5[(unsigned __int16)v16] = 118;
              ++v17;
              goto LABEL_33;
            }
            goto LABEL_26;
          }
        }
        if (v24 - 70 >= 3)
        {
          v59 = 0;
          v45 = utf8_determineUTF8CharLength(v19);
          if (*v18 == 227
            && (v46 = a3 + v14, *(unsigned __int8 *)(v46 + 1) == 128)
            && *(unsigned __int8 *)(v46 + 2) == 128)
          {
            v59 = (unsigned __int8 *)heap_Alloc(*(_QWORD *)(a2 + 8), 2);
            *(_WORD *)v59 = 32;
          }
          else
          {
            result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, unsigned __int8 **))(v54[13] + 80))(v54[14], v54[15], a3 + (unsigned __int16)v17, v45, &v59);
            if ((result & 0x80000000) != 0)
              return result;
          }
          if (v59)
          {
            a5[(unsigned __int16)v16] = *v59;
            v21 = 1;
          }
          else
          {
            v21 = 0;
          }
          v26 = 1;
          goto LABEL_94;
        }
LABEL_26:
        if ((unsigned __int16)utf8_determineUTF8CharLength(v19) == 1)
        {
          v25 = *v18;
          if (v25 != 255)
          {
            v22 = 0;
LABEL_32:
            a5[(unsigned __int16)v16] = v25;
LABEL_33:
            v21 = 1;
LABEL_34:
            v26 = 1;
            goto LABEL_35;
          }
        }
        if (!strcmp((const char *)(a3 + (unsigned __int16)v17), "§"))
        {
          v22 = 0;
          LOBYTE(v25) = *v18;
          goto LABEL_32;
        }
        v26 = 0;
        v59 = 0;
        v21 = 1;
LABEL_94:
        v22 = 1;
LABEL_35:
        v27 = utf8_determineUTF8CharLength(*a5);
        if ((_WORD)v16)
        {
          v28 = a5[(unsigned __int16)v16] != 32 && !utf8_BelongsToSet(5u, a5, v15, v27);
          v29 = a5[v15 - 1];
          if (v29 == 32)
          {
LABEL_40:
            v30 = 1;
            goto LABEL_48;
          }
          if ((unsigned __int16)v16 >= 3u && a5[v15 - 3] == 227)
          {
            v30 = 0;
            if (a5[v15 - 2] == 128 && v29 == 128)
              goto LABEL_40;
          }
          else
          {
            v30 = 0;
          }
        }
        else
        {
          v30 = 0;
          v28 = 1;
        }
LABEL_48:
        v31 = v21 & v26;
        if (!(_WORD)v16)
          v30 = 1;
        if (v31 == 1 && v28 && v30 && a5[(unsigned __int16)v16] != 17 && *(_DWORD *)(a7 + 16) == 1)
        {
          v32 = *(unsigned __int16 *)(a7 + 8);
          v33 = *(_QWORD *)a7;
          if (v32 >= *(unsigned __int16 *)(a7 + 10))
          {
            v34 = heap_Realloc(*(uint64_t **)(a2 + 8), v33, 12 * *(unsigned __int16 *)(a7 + 10) + 121);
            if (!v34)
              return 2370838538;
            v33 = v34;
            *(_QWORD *)a7 = v34;
            *(_WORD *)(a7 + 10) += 10;
            v32 = *(unsigned __int16 *)(a7 + 8);
          }
          v35 = v33 + 12 * v32;
          *(_WORD *)v35 = v17;
          *(_WORD *)(v35 + 2) = 0;
          *(_DWORD *)(v35 + 4) = 0;
          *(_WORD *)(v35 + 8) = v16;
          *(_WORD *)(a7 + 8) = v32 + 1;
        }
        v36 = v59;
        if (v59)
          v37 = 0;
        else
          v37 = v22;
        if ((v37 & 1) != 0)
        {
          v38 = 0;
        }
        else
        {
          if ((v22 & (v59 != 0)) == 0)
            v36 = (unsigned __int8 *)(a3 + (unsigned __int16)v17);
          v38 = utf8_determineUTF8CharLength(*v36);
          if ((unsigned __int16)v38 >= 2u)
          {
            ++v16;
            if (v59)
              v39 = v22;
            else
              v39 = 0;
            v40 = v59 + 1;
            v41 = (_BYTE *)(v55 + (unsigned __int16)v17);
            v42 = (unsigned __int16)v38 - 1;
            do
            {
              if (v39)
                v43 = v40;
              else
                v43 = v41;
              a5[(unsigned __int16)v16] = *v43;
              if (--v42)
                ++v16;
              ++v40;
              ++v41;
            }
            while (v42);
          }
        }
        if (v22)
          v38 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(a3 + (unsigned __int16)v17));
        if (v59)
        {
          heap_Free(*(_QWORD **)(a2 + 8), (uint64_t)v59);
          v59 = 0;
        }
        v17 += v38;
        v16 += v31;
        v15 = (unsigned __int16)v16;
        a6 = v58;
        v14 = (unsigned __int16)v17;
        v44 = (unsigned __int16)v17 < a4;
        if ((unsigned __int16)v16 >= *v58 || a4 <= (unsigned __int16)v17)
          goto LABEL_96;
      }
    }
    LOWORD(v16) = 0;
    v44 = 0;
LABEL_96:
    a5[(unsigned __int16)v16] = 0;
    v47 = *(unsigned __int16 *)(a7 + 8);
    if (*(_WORD *)(a7 + 8))
    {
      v48 = 0;
      v49 = *(_QWORD *)a7;
      do
      {
        v50 = a4;
        if ((int)v48 + 1 < v47)
          v50 = *(unsigned __int16 *)(v49 + 12 * (v48 + 1));
        if (v50)
        {
          do
          {
            v51 = *(unsigned __int8 *)(a3 + (unsigned __int16)v50 - 1);
            if (v51 > 0x20 || ((1 << v51) & 0x100002600) == 0)
            {
              if ((unsigned __int16)v50 < 3u
                || *(unsigned __int8 *)(a3 + (unsigned __int16)v50 - 3) != 227
                || *(unsigned __int8 *)(a3 + (unsigned __int16)v50 - 2) != 128
                || v51 != 128)
              {
                goto LABEL_113;
              }
              v53 = -3;
            }
            else
            {
              v53 = -1;
            }
            LOWORD(v50) = v50 + v53;
          }
          while ((_WORD)v50);
          LOWORD(v50) = 0;
        }
LABEL_113:
        *(_WORD *)(v49 + 12 * v48 + 2) = v50 - *(_WORD *)(v49 + 12 * v48);
        ++v48;
      }
      while (v48 != v47);
    }
    if (v44)
    {
      return 2370838537;
    }
    else
    {
      result = 0;
      *a6 = v16;
    }
  }
  return result;
}

uint64_t utoin_PutClosingAndOpeningTag(int a1, int a2, _BYTE *a3)
{
  int v3;
  uint64_t result;
  _BYTE *v5;
  unsigned int v6;
  int v7;
  char v8;
  int v9;
  char v10;
  unsigned int v11;

  if (!a3)
    return 2370838535;
  *a3 = 0;
  if ((a2 - 5) < 4)
    goto LABEL_5;
  if (a2 == 2)
  {
    v3 = 16;
    goto LABEL_11;
  }
  if (a2 == 1)
  {
LABEL_5:
    v3 = 16;
    if (a1 && a1 != 43)
      return 0;
  }
  else
  {
    v3 = a2;
  }
LABEL_11:
  if (v3 == a1)
    return 0;
  if ((a1 - 3) >= 2)
  {
    if (!a1)
    {
      v6 = 0;
      goto LABEL_19;
    }
    v6 = 1;
    v5 = a3;
  }
  else
  {
    *a3 = 17;
    v5 = a3 + 1;
    v6 = 2;
  }
  *v5 = 31;
LABEL_19:
  v7 = 2;
  v8 = 80;
  v9 = 1;
  v10 = 30;
  if (a2 <= 4)
  {
    if ((a2 - 3) >= 2)
    {
      if (a2 != 1)
      {
        v11 = v6;
        if (a2 != 2)
          goto LABEL_33;
        goto LABEL_32;
      }
LABEL_21:
      if (a1 != 16)
      {
        v11 = v6;
LABEL_32:
        a3[v11] = v10;
        a3[v6 + v9] = v8;
        v6 += v7;
        goto LABEL_33;
      }
      goto LABEL_33;
    }
    v8 = 16;
    v10 = 76;
LABEL_31:
    a3[v6] = 30;
    v11 = v6 + 1;
    v7 = 3;
    v9 = 2;
    goto LABEL_32;
  }
  if ((a2 - 5) < 4)
    goto LABEL_21;
  v11 = v6;
  if (a2 == 16)
    goto LABEL_32;
  if (a2 == 43)
  {
    v8 = 43;
    v10 = 47;
    goto LABEL_31;
  }
LABEL_33:
  result = 0;
  a3[v6] = 0;
  return result;
}

const char *getUTOIMarkerString(int a1)
{
  const char *result;
  uint64_t v3;

  if (a1 == 43)
    return "UTOI_PHONEMEMARKER";
  v3 = 0;
  result = "UTOI_UNDEF";
  while (UTOIMARKER2STRING_0[v3] != a1)
  {
    v3 += 4;
    if (v3 == 76)
      return result;
  }
  return *(const char **)&UTOIMARKER2STRING_0[v3 + 2];
}

uint64_t UTOITrace(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t i;
  uint64_t v29;
  unsigned __int16 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36;
  _WORD __n[8];
  unsigned __int16 v38;
  char *__src;
  _BYTE v40[32];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v38 = 0;
  __n[0] = 0;
  if (!a1)
    return 0;
  __src = 0;
  *(_QWORD *)&__n[1] = 0;
  v9 = bed_GetcElem(a3, __n);
  if ((v9 & 0x80000000) != 0)
    return v9;
  if (__n[0])
  {
    v9 = bed_GetpElem(a3, 0, &__src);
    if ((v9 & 0x80000000) == 0)
    {
      v13 = (char *)heap_Calloc(*(_QWORD **)(a2 + 8), 1, __n[0] + 1);
      if (!v13)
        return 2370838538;
      v14 = (uint64_t)v13;
      v15 = strncpy(v13, __src, __n[0]);
      v15[__n[0]] = 0;
      v17 = (uint64_t *)(a2 + 32);
      v16 = *(_QWORD *)(a2 + 32);
      goto LABEL_10;
    }
    return v9;
  }
  v14 = 0;
  v17 = (uint64_t *)(a2 + 32);
  v16 = *(_QWORD *)(a2 + 32);
LABEL_10:
  log_OutText(v16, (uint64_t)"PP", 5, 0, (uint64_t)"[UTOI] (%s) len=%d (LH_U8 *) \"%s\"", v10, v11, v12, a5);
  v19 = bed_GetpElem(a4, 0, &__n[1]);
  if ((v19 & 0x80000000) != 0)
  {
    v18 = v19;
  }
  else
  {
    v18 = bed_GetcElem(a4, &v38);
    if ((v18 & 0x80000000) == 0 && v38)
    {
      v36 = v14;
      v23 = 0;
      v24 = *(_QWORD *)&__n[1];
      do
      {
        v25 = v24 + (v23 << 6);
        v26 = *(_DWORD *)(v25 + 20);
        if (v26 == 7)
        {
          v27 = *(_DWORD *)(v25 + 40);
          if (v27 != 43)
          {
            for (i = 0; i != 76; i += 4)
            {
              if (UTOIMARKER2STRING_0[i] == v27)
                break;
            }
          }
        }
        else
        {
          marker_getString(v26);
          v24 = *(_QWORD *)&__n[1];
        }
        v29 = v24 + (v23 << 6);
        if (*(_QWORD *)(v29 + 48))
        {
          v30 = strlen(*(const char **)(v29 + 48));
          if (v30 <= 0x20uLL)
            v31 = v30;
          else
            v31 = 31;
          __strncpy_chk();
          v40[v31] = 0;
          v24 = *(_QWORD *)&__n[1];
        }
        else
        {
          v40[0] = 0;
        }
        if (*(_DWORD *)(v24 + (v23 << 6) + 20) == 32)
        {
          v40[0] = 48;
          if (*(_DWORD *)(v24 + (v23 << 6) + 40) == 1)
            v32 = 49;
          else
            v32 = 48;
          v40[0] = v32;
          v40[1] = 0;
        }
        log_OutText(*v17, (uint64_t)"PP", 5, 0, (uint64_t)"[UTOI] Marker[%d] %s[type=%5d %s]  Ref (%u,%u) Cur(%u,%u) %s", v20, v21, v22, v23);
        v24 = *(_QWORD *)&__n[1];
        if (*(_WORD *)(*(_QWORD *)&__n[1] + (v23 << 6) + 16))
        {
          v33 = 0;
          v34 = 0;
          do
          {
            log_OutText(*v17, (uint64_t)"PP", 5, 0, (uint64_t)"[UTOI] Offsets[%d] %u,%u", v20, v21, v22, v34++);
            v24 = *(_QWORD *)&__n[1];
            v33 += 8;
          }
          while (v34 < *(unsigned __int16 *)(*(_QWORD *)&__n[1] + (v23 << 6) + 16));
        }
        ++v23;
      }
      while (v23 < v38);
      v14 = v36;
    }
  }
  if (v14)
    heap_Free(*(_QWORD **)(a2 + 8), v14);
  return v18;
}

uint64_t UTOISubTrace(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v13;
  uint64_t v14;

  v14 = 0;
  if (!a1)
    return 0;
  v13 = 0;
  v10 = bed_GetcElem(a3, &v13);
  if ((v10 & 0x80000000) == 0)
  {
    if (!v13)
    {
      v11 = *(_QWORD *)(a2 + 32);
      goto LABEL_8;
    }
    v10 = bed_GetpElem(a3, 0, &v14);
    if ((v10 & 0x80000000) == 0)
    {
      v11 = *(_QWORD *)(a2 + 32);
LABEL_8:
      log_OutText(v11, (uint64_t)"PP", 5, 0, (uint64_t)"[UTOI] SUB (%s) len=%d (LH_U8 *) \"%s\"", v7, v8, v9, a4);
    }
  }
  return v10;
}

uint64_t wparser_ObjOpen1(_WORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v9;

  v3 = 2370838535;
  v9 = 0;
  if (a3 && (InitRsrcFunction(a1, a2, &v9) & 0x80000000) == 0)
  {
    *a3 = 0;
    v7 = (_QWORD *)heap_Alloc(*(_QWORD *)(v9 + 8), 16);
    if (v7)
    {
      v3 = 0;
      *v7 = a1;
      v7[1] = a2;
      *a3 = v7;
    }
    else
    {
      return 2370838538;
    }
  }
  return v3;
}

uint64_t wparser_ObjClose1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;

  v1 = 2370838535;
  v4 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v4) & 0x80000000) == 0)
  {
    heap_Free(*(_QWORD **)(v4 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t wparser_ScanWords(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  unsigned int v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int128 *v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  unsigned int v34;
  unint64_t v36;
  unint64_t v37;
  int *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  int *v45;
  int v46;
  unsigned int v47;
  unsigned int v49;
  int v50;
  __int128 *v52;
  uint64_t v53;
  int v55;
  int v56;
  int v57;
  unsigned __int16 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 *v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD v69[2];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v67 = 0;
  v68 = 0;
  v66 = 0;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  LODWORD(v60) = 1;
  DWORD1(v61) = 1;
  v59 = 0;
  v4 = 2370838535;
  v58 = 0;
  if (!a1 || !a2)
    return v4;
  v9 = datac_RequestBlock(a2, 1020, 1u, &v68);
  if ((v9 & 0x80000000) != 0)
  {
    if ((v9 & 0x1FFF) == 0x14)
      return 0;
    else
      return v9;
  }
  if (!*(_WORD *)(v68 + 16))
    return 0;
  v10 = bed_ObjOpen(*(_WORD **)a1, *(_QWORD *)(a1 + 8), a2, 1021, &v67, 213);
  if ((v10 & 0x80000000) == 0)
  {
    v11 = *(_BYTE **)(v68 + 8);
    v12 = *(unsigned __int16 *)(v68 + 16);
    v10 = bed_GetpElem(v67, 0, &v66);
    if ((v10 & 0x80000000) == 0)
    {
      v64 = *v66;
      v65 = *((_QWORD *)v66 + 2);
      v13 = *((_DWORD *)v66 + 6);
      v14 = *((_DWORD *)v66 + 7);
      v15 = *((_DWORD *)v66 + 8);
      v69[0] = *(__int128 *)((char *)v66 + 36);
      *(_OWORD *)((char *)v69 + 12) = v66[3];
      v10 = bed_GetcElem(v67, &v58);
      if ((v10 & 0x80000000) == 0)
      {
        v10 = bed_GetpElem(v67, 0, &v59);
        if ((v10 & 0x80000000) == 0)
        {
          v16 = v58;
          if (v58 < 2u)
          {
            v16 = 1;
          }
          else
          {
            v17 = (int *)(v59 + 96);
            v18 = 1;
            while (1)
            {
              v19 = *v17;
              v17 += 16;
              if (v19 != *(_DWORD *)(v59 + 32))
                break;
              if (v58 == ++v18)
                goto LABEL_20;
            }
            v16 = (unsigned __int16)v18;
          }
LABEL_20:
          v21 = v66;
          v20 = v67;
          *((_DWORD *)v66 + 7) = 0;
          *((_DWORD *)v21 + 9) = 0;
          v10 = bed_Goto(v20, 1u);
          if ((v10 & 0x80000000) == 0)
          {
            v55 = v14;
            v56 = v13;
            if (!v12)
            {
LABEL_81:
              v4 = bed_GetpElem(v67, 0, &v66);
              if ((v4 & 0x80000000) == 0)
              {
                v53 = v65;
                v52 = v66;
                *v66 = v64;
                *((_QWORD *)v52 + 2) = v53;
                *(__int128 *)((char *)v52 + 36) = v69[0];
                v52[3] = *(_OWORD *)((char *)v69 + 12);
                *((_DWORD *)v52 + 7) = v55 + a4;
                *((_DWORD *)v52 + 8) = v15;
                *((_DWORD *)v52 + 6) = v56 - a4;
              }
              goto LABEL_84;
            }
            v22 = 0;
            v23 = 0;
            v57 = v56 + a3;
            v24 = v14 + v56;
            while (1)
            {
              v25 = (unsigned __int16)v23;
              v26 = v23;
              do
              {
                if (!utf8_BelongsToSet(4u, v11, v25, v12))
                  break;
                v26 = v26
                    + utf8_determineUTF8CharLength(v11[(unsigned __int16)v26]);
                v25 = (unsigned __int16)v26;
              }
              while ((unsigned __int16)v26 < v12);
              v23 = v26;
              if (v12 > (unsigned __int16)v26)
              {
                v23 = v26;
                do
                {
                  if (utf8_BelongsToSet(4u, v11, (unsigned __int16)v23, v12))
                    break;
                  v23 = v23
                      + utf8_determineUTF8CharLength(v11[(unsigned __int16)v23]);
                }
                while (v12 > (unsigned __int16)v23);
              }
              if ((unsigned __int16)v26 < (unsigned __int16)v23)
              {
                if (v58 >= 2u)
                {
                  v27 = 0;
                  v28 = 0;
                  v29 = 1;
                  do
                  {
                    v30 = v59 + ((unint64_t)v29 << 6);
                    v31 = *(_DWORD *)(v30 + 32) - *(_DWORD *)(v59 + 32);
                    v32 = v31 < v25 || v31 > (unsigned __int16)v23;
                    if (!v32 && *(_DWORD *)(v30 + 20) == 7)
                    {
                      v33 = *(_DWORD *)(v59 + ((unint64_t)v29 << 6) + 40);
                      if (v33 == 43)
                      {
                        v27 = 1;
                      }
                      else if (v33 == 15)
                      {
                        v28 = v29;
                      }
                    }
                    ++v29;
                  }
                  while (v29 < v58 && v31 <= (unsigned __int16)v23);
                  if (v27 == 1 && v28)
                  {
                    v34 = *(_DWORD *)(v59 + ((unint64_t)v28 << 6) + 32) - *(_DWORD *)(v59 + 32);
                    if ((unsigned __int16)v34 <= v25 || v34 > (unsigned __int16)v23)
                      v23 = v23;
                    else
                      v23 = v34;
                  }
                }
                if ((_WORD)v26 && v16 < v58)
                {
                  v36 = v16;
                  v37 = v59 + 32 + ((unint64_t)v16 << 6);
                  v38 = (int *)v37;
                  do
                  {
                    v39 = *v38;
                    v38 += 16;
                    if (v39 - *(_DWORD *)(v59 + 32) > v25)
                      break;
                    if (*(_DWORD *)(v37 - 12) != 1)
                      v22 += *(_DWORD *)(v37 - 4);
                    ++v36;
                    v37 = (unint64_t)v38;
                  }
                  while (v36 < v58);
                  v16 = (unsigned __int16)v36;
                }
                if (v16 >= v58)
                {
                  v40 = 0;
                  v42 = (unsigned __int16)v23;
                }
                else
                {
                  v40 = 0;
                  v41 = *(_DWORD *)(v59 + 32);
                  v42 = (unsigned __int16)v23;
                  v43 = v59 + 32 + ((unint64_t)v16 << 6);
                  v44 = v58 - (unint64_t)v16;
                  v45 = (int *)v43;
                  do
                  {
                    v46 = *v45;
                    v45 += 16;
                    v47 = v46 - v41;
                    if (v46 - v41 <= v25 || v47 >= (unsigned __int16)v23)
                      break;
                    if (*(_DWORD *)(v43 - 12) != 1)
                      v40 += *(_DWORD *)(v43 - 4);
                    v43 = (unint64_t)v45;
                    --v44;
                  }
                  while (v44);
                }
                LODWORD(v62) = v25 + v15;
                DWORD1(v62) = v42 - v25;
                v49 = v57 + v25 + v22;
                v50 = v40 + v42 - v25;
                if (v50 + v49 > v24 && v24 >= v49)
                  v50 = v24 - v49;
                DWORD2(v61) = v57 + v25 + v22;
                HIDWORD(v61) = v50;
                v10 = bed_marker_InjectFixedRefMarker(v67, &v60);
                if ((v10 & 0x80000000) != 0)
                  break;
                v10 = bed_GetcElem(v67, &v58);
                if ((v10 & 0x80000000) != 0)
                  break;
                v10 = bed_GetpElem(v67, 0, &v59);
                if ((v10 & 0x80000000) != 0)
                  break;
              }
              if (v12 <= (unsigned __int16)v23)
                goto LABEL_81;
            }
          }
        }
      }
    }
  }
  v4 = v10;
LABEL_84:
  if (v67)
    bed_ObjClose(v67);
  return v4;
}

uint64_t utois_ScanRegions(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _WORD *a5, uint64_t a6, uint64_t a7, unsigned __int16 *a8, _QWORD *a9, int a10, char *a11, unsigned __int16 a12, unsigned __int16 a13, unsigned __int16 a14)
{
  uint64_t v14;
  uint64_t v16;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _DWORD *v26;
  _DWORD *v27;
  int v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  unsigned __int16 v34;
  _DWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned __int16 v39;
  _DWORD *v40;
  int v41;
  unsigned __int16 v42;
  unsigned int *v43;
  _DWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int *v47;
  _DWORD *v48;
  int v49;
  _DWORD *v50;
  unsigned int v51;
  unsigned int v52;
  BOOL v53;
  unsigned int v54;
  _DWORD *v55;
  unsigned int *v56;
  int v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  unsigned int *v63;
  unint64_t v64;
  unsigned int v65;
  BOOL v66;
  unsigned int v67;
  unsigned int v68;
  _DWORD *v69;
  int v70;
  int v71;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  int v83;
  int v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  int v90;
  unint64_t v91;
  char *v92;
  unint64_t v93;
  unsigned __int16 v94;
  int v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  int v103;
  char *v104;
  size_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  int v122;
  char *v123;
  char *v124;
  char *i;
  const char *v126;
  const char *MarkerArgStr;
  const char *v128;
  const char *v129;
  const char *v130;
  const char *v131;
  const char *v132;
  const char *v133;
  const char *v134;
  const char *v135;
  int v136;
  int v137;
  const char *v138;
  const char *v139;
  const char *v140;
  const char *v141;
  const char *v142;
  const char *v143;
  const char *v144;
  const char *v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  int IsCursorAtEnd;
  int v155;
  int v156;
  int v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  uint64_t v163;
  unsigned __int16 v164;
  int *v165;
  int v166;
  _DWORD *v167;
  int v168;
  int v170;
  unsigned int v171;
  uint64_t v172;
  unsigned __int16 v173;
  int *v174;
  int v175;
  uint64_t v176;
  int v177;
  __int16 v178;
  int v179;
  uint64_t v180;
  unint64_t v181;
  char *v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t v193;
  unsigned int v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _WORD *v205;
  uint64_t v206;
  unsigned __int16 *v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  _DWORD *v213;
  _DWORD *v214;
  int v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *__src;
  size_t __len;
  char *v223;
  size_t __n;
  __int16 v225;
  int v226;
  __int16 v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  char *v232;
  uint64_t v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;

  v242 = *MEMORY[0x1E0C80C00];
  v219 = 0;
  v220 = 0;
  v14 = 2370838535;
  v218 = 0;
  if (!a7)
    return v14;
  v16 = a7;
  if ((InitRsrcFunction(a5, a6, &v218) & 0x80000000) != 0)
    return v14;
  if ((bed_ObjOpen(a5, a6, v16, 1020, &v220, 213) & 0x80000000) != 0)
    goto LABEL_217;
  if ((bed_ObjOpen(a5, a6, v16, 1021, &v219, 213) & 0x80000000) != 0)
    goto LABEL_217;
  UTOITrace(a4, v218, v220, v219, (uint64_t)"BEFORE utois_ScanTaggedText");
  v23 = v218;
  *(_QWORD *)&v238 = 0;
  if (!v220 || !v219 || (datac_RequestBlock(v16, 1021, 1u, &v238) & 0x80000000) != 0)
    goto LABEL_217;
  v208 = a2;
  v210 = a1;
  v212 = a3;
  v205 = a5;
  v206 = a6;
  v207 = a8;
  v24 = v238;
  v25 = *(unsigned __int16 *)(v238 + 16);
  if (v25 >= 2)
  {
    v217 = v23;
    v215 = a4;
    v26 = *(_DWORD **)(v238 + 8);
    v27 = v26 + 10;
    v28 = 1;
    v29 = 1;
    do
    {
      v30 = &v26[16 * (unint64_t)(unsigned __int16)v29];
      if (v30[5] == 7 && v30[10] == 43 && (unsigned __int16)v25 > (unsigned __int16)(v28 + 1))
      {
        v31 = (unsigned __int16)(v28 + 1);
        v32 = &v27[16 * v31];
        while (*(v32 - 5) != 7)
        {
          LOWORD(v31) = v31 + 1;
          v32 += 16;
          if ((unsigned __int16)v25 == (unsigned __int16)v31)
            goto LABEL_26;
        }
        v33 = v32 - 10;
        if (*v32 == 43 && v26[16 * (unint64_t)(unsigned __int16)v29 + 8] == *(v32 - 2))
        {
          v213 = v27;
          if ((unsigned __int16)v31 >= (unsigned __int16)(v28 + 1))
          {
            v202 = v16;
            v34 = v28 + 1;
            do
            {
              v35 = &v26[16 * (unint64_t)v34];
              v38 = *((_QWORD *)v35 + 6);
              v37 = v35 + 12;
              v36 = v38;
              if (v38)
              {
                heap_Free(*(_QWORD **)(v217 + 8), v36);
                *v37 = 0;
              }
              ++v34;
            }
            while (v34 <= (unsigned __int16)v31);
            v24 = v238;
            v16 = v202;
          }
          memmove(v33, &v26[16 * (unint64_t)((unsigned __int16)v31 + 1)], (uint64_t)(*(unsigned __int16 *)(v24 + 16) - (unsigned __int16)v31) << 6);
          v39 = *(_WORD *)(v238 + 16) - 1;
          *(_WORD *)(v238 + 16) = v39;
          memmove(&v26[16 * (unint64_t)(unsigned __int16)v29], &v26[16 * (unint64_t)(v28 + 1)], (uint64_t)(v39 - v28) << 6);
          v24 = v238;
          LOWORD(v25) = *(_WORD *)(v238 + 16) - 1;
          *(_WORD *)(v238 + 16) = v25;
          --v29;
          v27 = v213;
        }
      }
LABEL_26:
      v28 = (unsigned __int16)++v29;
    }
    while ((unsigned __int16)v29 < (unsigned __int16)v25);
    a4 = v215;
    if ((unsigned __int16)v25 >= 2u)
    {
      v40 = v26 + 6;
      v41 = 1;
      v42 = 1;
      while (1)
      {
        while (1)
        {
          v43 = &v26[16 * (unint64_t)v42];
          v44 = v43 + 5;
          if (v43[5] != 7)
            goto LABEL_79;
          v45 = (v41 + 1);
          if ((unsigned __int16)v25 > (unsigned __int16)(v41 + 1))
            break;
LABEL_34:
          v48 = &v26[16 * (unint64_t)v42];
          v49 = v48[10];
          if (v49 != 15)
          {
            v48[9] = v26[9] + v26[8] - v48[8];
            if (v49 == 43)
            {
              v50 = &v26[16 * (unint64_t)v42];
              v51 = v50[6];
              v52 = v26[7] + v26[6];
              v53 = v52 >= v51;
              v54 = v52 - v51;
              if (v53)
                v50[7] = v54;
            }
            goto LABEL_79;
          }
          v48[9] = 0;
          if (!*v43)
LABEL_36:
            *v44 = 999;
LABEL_79:
          v41 = ++v42;
          if (v42 >= (unsigned __int16)v25)
          {
            a4 = v215;
            goto LABEL_88;
          }
        }
        v46 = (unsigned __int16)(v41 + 1);
        v47 = &v40[16 * v46];
        while (*(v47 - 1) != 7)
        {
          ++v46;
          v47 += 16;
          if ((unsigned __int16)v25 == v46)
            goto LABEL_34;
        }
        v55 = &v26[16 * (unint64_t)v42];
        v58 = v55[10];
        v56 = v55 + 10;
        v57 = v58;
        v59 = v47[4];
        if (v58 == 43)
        {
          if (v59 == 43)
          {
            v60 = *((_QWORD *)v47 + 3);
            if (v60)
            {
              v214 = v40;
              heap_Free(*(_QWORD **)(v217 + 8), v60);
              v40 = v214;
              *((_QWORD *)v47 + 3) = 0;
            }
            v61 = 0;
            *(v47 - 1) = 999;
          }
          else
          {
            if ((unsigned __int16)v25 > (unsigned __int16)v46)
            {
              v63 = v47;
              v64 = v46;
              do
              {
                v65 = *(v63 - 1);
                v66 = v65 > 0x24 || ((1 << v65) & 0x1080200080) == 0;
                if (!v66 || v65 == 999)
                {
                  v67 = *v63 - v26[16 * (unint64_t)v42 + 7];
                  *v63 = v67;
                  if (v64 > (unsigned __int16)v46 && v67 > *v47)
                    *v63 = v67 - v47[1];
                }
                ++v64;
                v63 += 16;
              }
              while (v64 < (unsigned __int16)v25);
            }
            v61 = 0;
          }
          v68 = *v47;
          v69 = &v26[16 * (unint64_t)v42];
          v70 = v69[6];
          goto LABEL_68;
        }
        if (v57 == v59)
          break;
        if (v26[16 * (unint64_t)v42 + 8] != v47[2])
        {
          if (v57 == 15 && !*v43)
            goto LABEL_36;
          v61 = 0;
          v68 = *v47;
          v69 = &v26[16 * (unint64_t)v42];
          v70 = v69[6] + v69[7];
LABEL_68:
          v69[7] = v68 - v70;
LABEL_75:
          if (*v44 == 999)
          {
            if (v61)
              goto LABEL_84;
          }
          else
          {
            v26[16 * (unint64_t)v42 + 9] = v47[2] - v26[16 * (unint64_t)v42 + 8];
            if ((v61 & 1) != 0)
            {
LABEL_84:
              v41 = (unsigned __int16)v46;
              v45 = (unsigned __int16)v46 + 1;
              a4 = v215;
              if (v45 < (unsigned __int16)v25)
              {
                v71 = (unsigned __int16)v25;
                v43 = v47 - 6;
                goto LABEL_86;
              }
              goto LABEL_87;
            }
          }
          goto LABEL_79;
        }
        *v56 = v59;
        if (*(v47 - 6))
          goto LABEL_71;
        v47[4] = v59;
        if (!*v43)
          goto LABEL_36;
        a4 = v215;
        if (v45 < (unsigned __int16)v25)
        {
          v71 = (unsigned __int16)v25;
LABEL_86:
          v72 = v40;
          memmove(v43, &v26[16 * v45], (uint64_t)(v71 - v41) << 6);
          v40 = v72;
        }
LABEL_87:
        LOWORD(v25) = v25 - 1;
        v41 = v42;
        if (v42 >= (unsigned __int16)v25)
          goto LABEL_88;
      }
      if (v57 == 60 || v57 == 16)
      {
        v61 = *(v47 - 6);
        if (v61)
LABEL_71:
          v61 = 1;
        else
          *(v47 - 1) = 999;
      }
      else
      {
        v61 = 0;
      }
      goto LABEL_75;
    }
  }
LABEL_88:
  *(_WORD *)(v238 + 16) = v25;
  UTOITrace(a4, v218, v220, v219, (uint64_t)"BEFORE utois_ScanTextForSpell");
  v73 = v219;
  *(_QWORD *)&v234 = 21;
  __src = 0;
  v232 = 0;
  v230 = 0;
  v238 = MarkerSetTypeOfInput_0;
  v239 = unk_1DEC66F00;
  v240 = xmmword_1DEC66F10;
  v241 = unk_1DEC66F20;
  if (!v220)
    goto LABEL_217;
  if (!v219)
    goto LABEL_217;
  LOWORD(v228) = 0;
  v229 = 0;
  if ((bed_GetcElem(v220, &v228) & 0x80000000) != 0)
    goto LABEL_217;
  if ((datac_RequestBlock(v16, 1012, 1u, &v229) & 0x80000000) != 0)
    goto LABEL_217;
  v74 = *(_QWORD *)(v229 + 8);
  if ((bed_Goto(v73, 0) & 0x80000000) != 0 || (bed_GetpElem(v73, 0, &__src) & 0x80000000) != 0)
    goto LABEL_217;
  v75 = *((_DWORD *)__src + 8);
  v76 = bed_GoForward(v73, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v234);
  if ((v76 & 0x1FFF) != 0x14)
  {
    if (v76 < 0 || (bed_GetpElem(v73, 0xFFFFu, &v232) & 0x80000000) != 0)
      goto LABEL_217;
    for (i = v232; v232; i = v232)
    {
      LOWORD(v233) = 1;
      v126 = (const char *)(v74 + *((unsigned int *)i + 10));
      MarkerArgStr = marker_getMarkerArgStr(3u);
      if (!strcmp(v126, MarkerArgStr))
        goto LABEL_314;
      v128 = (const char *)(v74 + *((unsigned int *)v232 + 10));
      v129 = marker_getMarkerArgStr(4u);
      if (!strncmp(v128, v129, 6uLL)
        || (v130 = (const char *)(v74 + *((unsigned int *)v232 + 10)),
            v131 = marker_getMarkerArgStr(6u),
            !strcmp(v130, v131))
        || (v132 = (const char *)(v74 + *((unsigned int *)v232 + 10)),
            v133 = marker_getMarkerArgStr(7u),
            !strcmp(v132, v133))
        || (v134 = (const char *)(v74 + *((unsigned int *)v232 + 10)),
            v135 = marker_getMarkerArgStr(8u),
            !strcmp(v134, v135)))
      {
LABEL_314:
        v138 = (const char *)(v74 + *((unsigned int *)v232 + 10));
        v139 = marker_getMarkerArgStr(5u);
        if (!strcmp(v138, v139)
          || (v140 = (const char *)(v74 + *((unsigned int *)v232 + 10)),
              v141 = marker_getMarkerArgStr(6u),
              !strcmp(v140, v141))
          || (v142 = (const char *)(v74 + *((unsigned int *)v232 + 10)),
              v143 = marker_getMarkerArgStr(7u),
              !strcmp(v142, v143))
          || (v144 = (const char *)(v74 + *((unsigned int *)v232 + 10)),
              v145 = marker_getMarkerArgStr(8u),
              !strcmp(v144, v145)))
        {
          v137 = 44;
        }
        else
        {
          v137 = 14;
        }
        v136 = 1;
      }
      else
      {
        v136 = 0;
        v137 = 14;
      }
      LOWORD(v233) = 1;
      bed_GoForward(v73, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v233);
      v146 = bed_GoForward(v73, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v234);
      if ((v146 & 0x1FFF) == 0x14)
      {
        v230 = 0;
      }
      else if (v146 < 0 || (bed_GetpElem(v73, 0xFFFFu, &v230) & 0x80000000) != 0)
      {
        goto LABEL_217;
      }
      if (v136)
      {
        v147 = *((_DWORD *)v232 + 8);
        DWORD2(v239) = *((_DWORD *)v232 + 6);
        LODWORD(v240) = v147;
        v148 = v230 ? *(_DWORD *)(v230 + 32) : v75 + (unsigned __int16)v228;
        DWORD1(v240) = v148 - *((_DWORD *)v232 + 8);
        DWORD2(v240) = v137;
        HIDWORD(v239) = DWORD1(v240);
        if (DWORD1(v240))
        {
          if ((bed_marker_InjectFixedRefMarker(v73, &v238) & 0x80000000) != 0)
            goto LABEL_217;
        }
      }
      v149 = bed_GoForward(v73, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v234);
      if ((v149 & 0x1FFF) == 0x14)
        break;
      if (v149 < 0 || (bed_GetpElem(v73, 0xFFFFu, &v232) & 0x80000000) != 0)
        goto LABEL_217;
    }
  }
  UTOITrace(a4, v218, v220, v219, (uint64_t)"BEFORE utois_ScanTextForMWRegions");
  v234 = MarkerUDCTREF_0;
  v235 = unk_1DEC66F40;
  v236 = xmmword_1DEC66F50;
  v78 = v218;
  v77 = v219;
  v79 = v220;
  v232 = 0;
  v229 = 0;
  v230 = 0;
  v228 = 0;
  LODWORD(v233) = 0;
  v239 = unk_1DEC66F00;
  v240 = xmmword_1DEC66F10;
  v241 = unk_1DEC66F20;
  v237 = unk_1DEC66F60;
  v238 = MarkerSetTypeOfInput_0;
  if (!v210)
    goto LABEL_208;
  __len = 0;
  v223 = 0;
  __n = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(v210 + 120))(v208, v212, &v233) & 0x80000000) != 0)
    goto LABEL_217;
  if (!(_DWORD)v233)
    goto LABEL_208;
  v80 = a12 <= a13 ? a13 : a12;
  __src = 0;
  v223 = 0;
  if ((datac_RequestBlock(v16, 1021, 1u, &v230) & 0x80000000) != 0)
    goto LABEL_217;
  v81 = bed_GetpElem(v79, 0, &v228);
  if (v81 < 0)
    goto LABEL_217;
  v82 = *(unsigned __int16 *)(v230 + 16);
  if (!*(_WORD *)(v230 + 16) || *(_DWORD *)(*(_QWORD *)(v230 + 8) + 20) != 0x4000)
    goto LABEL_217;
  v201 = v81;
  v199 = v77;
  v197 = v79;
  v216 = a4;
  v203 = v16;
  v232 = *(char **)(v230 + 8);
  HIWORD(v231) = v82;
  if (v82 < 2)
  {
    v85 = 0;
    goto LABEL_199;
  }
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v196 = v80 + 1;
  v86 = 1;
  v87 = 2;
  v88 = 168;
  while (1)
  {
    v89 = &v232[64 * v86];
    if (*((_DWORD *)v89 + 5) != 32 || *((_DWORD *)v89 + 10) != 1)
      goto LABEL_165;
    v90 = *(_DWORD *)&v232[64 * v86 + 32];
    if (!v83 || v84 != v90)
      break;
    v83 = 1;
LABEL_165:
    ++v86;
    v82 = HIWORD(v231);
    ++v87;
    v88 += 64;
    if (v86 >= HIWORD(v231))
      goto LABEL_199;
  }
  v91 = v82;
  v92 = &v232[v88];
  v93 = v87;
  do
  {
    if (v93 >= v91)
      goto LABEL_122;
    v94 = v93;
    if (*((_DWORD *)v92 - 5) == 32)
      break;
    v95 = *(_DWORD *)v92;
    v92 += 64;
    ++v93;
  }
  while (!v95);
  v96 = v94;
  v97 = &v232[64 * (unint64_t)v94];
  if (*((_DWORD *)v97 + 5) != 32)
  {
LABEL_122:
    v83 = 1;
    v84 = *(_DWORD *)&v232[64 * v86 + 32];
    goto LABEL_165;
  }
  v198 = v88;
  if (*((_DWORD *)v97 + 10) || v90 == *(_DWORD *)&v232[64 * (unint64_t)v94 + 32])
    goto LABEL_164;
  v201 = bed_Goto(v199, v86);
  if (v201 < 0)
    goto LABEL_199;
  v101 = *((_DWORD *)v232 + 8);
  v195 = *(_DWORD *)&v232[64 * v86 + 32] - v101;
  v102 = (unsigned __int16)(*(_WORD *)&v232[64 * v86 + 32] - v101);
  v103 = (unsigned __int16)(*(_WORD *)&v232[64 * v96 + 32] - v101);
  if (v216 == 1)
    log_OutText(*(_QWORD *)(v78 + 32), (uint64_t)&modPP_5, 5, 0, (uint64_t)"[UTOIS] (scan for multiword in dict between text positions %u and %u)", v98, v99, v100, (unsigned __int16)(*(_WORD *)&v232[64 * v86 + 32] - v101));
  LOWORD(__len) = a13;
  if ((int)(v103 - v102) > a13)
    goto LABEL_199;
  LOWORD(__len) = v103 - v102;
  v104 = __src;
  if (__src)
  {
    v105 = (unsigned __int16)(v103 - v102);
  }
  else
  {
    v104 = (char *)heap_Calloc(*(_QWORD **)(v78 + 8), a13 + 1, 1);
    __src = v104;
    if (!v104)
      goto LABEL_311;
    v105 = (unsigned __int16)__len;
  }
  memmove(v104, (const void *)(v228 + v102), v105);
  if (v223 || (v223 = (char *)heap_Calloc(*(_QWORD **)(v78 + 8), 1, a14 + a12 * (unint64_t)a14 + 1)) != 0)
  {
    if (!v229)
    {
      v201 = bed_ObjOpen(v205, v206, v203, 1029, &v229, 213);
      if (v201 < 0)
        goto LABEL_199;
    }
    if (v216 == 1)
    {
      if (!v85)
      {
        v85 = (char *)heap_Calloc(*(_QWORD **)(v78 + 8), v196, 1);
        if (!v85)
          goto LABEL_311;
      }
      strncpy(v85, __src, (unsigned __int16)__len);
      v85[(unsigned __int16)__len] = 0;
      log_OutText(*(_QWORD *)(v78 + 32), (uint64_t)&modPP_5, 5, 0, (uint64_t)"[UTOIS] (lookup User Dict for \"%s\")", v110, v111, v112, (uint64_t)v85);
    }
    v201 = utoin_LookUpUdctWord(v210, v208, v212, (uint64_t)&__src, 1, a13, a12, (uint64_t)&v226);
    if (v201 < 0)
      goto LABEL_199;
    if ((HIDWORD(__len) - 2) >= 2
      && HIDWORD(__len) != 43
      && (HIDWORD(__len) != 16 || !LH_stricmp(a11, "jpj") && HIDWORD(__len) != 2))
    {
      if (v216 == 1)
        log_OutText(*(_QWORD *)(v78 + 32), (uint64_t)&modPP_5, 5, 0, (uint64_t)"[UTOIS] (no (valid) User Dict entry found)", v113, v114, v115, v193);
      goto LABEL_164;
    }
    if (v216 == 1)
    {
      strncpy(v85, v223, (unsigned __int16)__n);
      v85[(unsigned __int16)__n] = 0;
      log_OutText(*(_QWORD *)(v78 + 32), (uint64_t)&modPP_5, 5, 0, (uint64_t)"[UTOIS] (found User Dict entry \"%s\")", v116, v117, v118, (uint64_t)v85);
    }
    if (LH_stricmp(a11, (char *)&v226))
      v119 = (char *)&v226;
    else
      v119 = 0;
    v201 = utoin_ReplaceWord(v197, v199, (unsigned __int16)v195, (uint64_t)&__src, 0, v203, v119);
    if (v201 < 0)
      goto LABEL_199;
    v201 = bed_GetpElem(v197, 0, &v228);
    if (v201 < 0)
      goto LABEL_199;
    if (HIDWORD(__len) == 16)
    {
      v201 = bed_Goto(v199, v86);
      if (v201 < 0)
        goto LABEL_199;
      v123 = &v232[64 * v86];
      DWORD2(v239) = *((_DWORD *)v123 + 6);
      HIDWORD(v239) = (unsigned __int16)__len;
      LODWORD(v240) = *((_DWORD *)v123 + 8);
      DWORD1(v240) = *(_DWORD *)&v232[64 * v96 + 32] - *((_DWORD *)v123 + 8);
      DWORD2(v240) = 16;
      v201 = bed_marker_InjectFixedRefMarker(v199, &v238);
      if (v201 < 0)
        goto LABEL_199;
      v201 = bed_GetpElem(v199, 0, &v232);
      if (v201 < 0)
        goto LABEL_199;
      v201 = bed_GetcElem(v199, (_WORD *)&v231 + 1);
      if (v201 < 0)
        goto LABEL_199;
      v124 = &v232[64 * v86];
      DWORD2(v235) = *((_DWORD *)v124 + 6);
      HIDWORD(v235) = (unsigned __int16)__len;
      LODWORD(v236) = *((_DWORD *)v124 + 8);
      DWORD1(v236) = *(_DWORD *)&v232[64 * v96 + 32] - *((_DWORD *)v124 + 8);
      v122 = 16;
LABEL_161:
      DWORD2(v236) = v122;
      if ((bed_marker_InjectFixedRefMarker(v199, &v234) & 0x80000000) != 0)
        goto LABEL_217;
      v201 = bed_GetpElem(v199, 0, &v232);
      if (v201 < 0)
        goto LABEL_199;
      v201 = bed_GetcElem(v199, (_WORD *)&v231 + 1);
      if (v201 < 0)
        goto LABEL_199;
      goto LABEL_164;
    }
    if (HIDWORD(__len) == 43)
    {
      v201 = bed_Goto(v199, v86);
      if (v201 < 0)
        goto LABEL_199;
      v120 = &v232[64 * v86];
      DWORD2(v239) = *((_DWORD *)v120 + 6);
      HIDWORD(v239) = (unsigned __int16)__len;
      LODWORD(v240) = *((_DWORD *)v120 + 8);
      DWORD1(v240) = (unsigned __int16)__n;
      DWORD2(v240) = 43;
      v201 = bed_marker_InjectFixedRefMarker(v199, &v238);
      if (v201 < 0)
        goto LABEL_199;
      v121 = &v232[64 * v86];
      DWORD2(v235) = *((_DWORD *)v121 + 6);
      HIDWORD(v235) = (unsigned __int16)__len;
      LODWORD(v236) = *((_DWORD *)v121 + 8);
      DWORD1(v236) = (unsigned __int16)__n;
      v122 = 43;
      goto LABEL_161;
    }
LABEL_164:
    v83 = 1;
    v84 = v90;
    v88 = v198;
    goto LABEL_165;
  }
LABEL_311:
  log_OutPublic(*(_QWORD *)(v78 + 32), (uint64_t)&modPP_5, 1923, 0, v106, v107, v108, v109, v193);
  v201 = -1924128758;
LABEL_199:
  if (__src)
    heap_Free(*(_QWORD **)(v78 + 8), (uint64_t)__src);
  if (v223)
    heap_Free(*(_QWORD **)(v78 + 8), (uint64_t)v223);
  if (v85)
    heap_Free(*(_QWORD **)(v78 + 8), (uint64_t)v85);
  if (v229)
    bed_ObjClose(v229);
  v16 = v203;
  a4 = v216;
  if (v201 < 0)
  {
LABEL_217:
    LODWORD(v14) = 0;
    goto LABEL_218;
  }
LABEL_208:
  v150 = a4;
  UTOITrace(a4, v218, v220, v219, (uint64_t)"BEFORE utois_ScanUntaggedText");
  v152 = v219;
  v151 = v220;
  v233 = 7;
  if (!v220 || !v219)
    goto LABEL_307;
  IsCursorAtEnd = bed_Goto(v220, 0);
  if (IsCursorAtEnd < 0
    || (IsCursorAtEnd = bed_Goto(v152, 0), IsCursorAtEnd < 0)
    || (v226 = 0, IsCursorAtEnd = bed_IsCursorAtEnd(v151, &v226), IsCursorAtEnd < 0))
  {
LABEL_306:
    LODWORD(v14) = IsCursorAtEnd;
    goto LABEL_307;
  }
  if (!v226)
  {
    v204 = v16;
    while (1)
    {
      v225 = 0;
      v155 = bed_GoForward(v152, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v233);
      if (v155 < 0)
      {
        LODWORD(v14) = v155;
        if ((v155 & 0x1FFF) != 0x14)
          goto LABEL_307;
      }
      v232 = 0;
      v231 = 0;
      v229 = 0;
      v230 = 0;
      v228 = 0;
      v227 = 0;
      v234 = MarkerSetTypeOfInput_0;
      v235 = unk_1DEC66F00;
      v236 = xmmword_1DEC66F10;
      v237 = unk_1DEC66F20;
      v156 = bed_GetpElem(v152, 0, &v230);
      if (v156 < 0
        || (v157 = *(_DWORD *)(v230 + 24),
            v158 = *(_DWORD *)(v230 + 32),
            v156 = datac_RequestBlock(v16, 1021, 1u, &v228),
            v156 < 0))
      {
        LODWORD(v14) = v156;
        goto LABEL_301;
      }
      v159 = *(_QWORD *)(v228 + 8);
      v160 = *(unsigned __int16 *)(v228 + 16);
      v161 = bed_GetpElem(v152, 0xFFFFu, &v229);
      if ((v161 & 0x1FFF) != 0xF)
        break;
      v162 = bed_GetcElem(v151, &v231);
      if (v162 < 0)
        goto LABEL_299;
      if (!(_DWORD)v160)
        goto LABEL_256;
      v163 = 0;
      v164 = 0;
      v165 = (int *)(v159 + 20);
      do
      {
        v166 = *v165;
        v165 += 16;
        if (v166 == 7)
          v164 = v163;
        ++v163;
      }
      while (v160 != v163);
      if (!v164)
      {
LABEL_256:
        v170 = *(_DWORD *)(v159 + 24);
        goto LABEL_257;
      }
      v167 = (_DWORD *)(v159 + ((unint64_t)v164 << 6));
      v168 = v167[10];
      if (v168 != 44 && v168 != 14)
      {
        v177 = v167[6];
        if (v177 == v157)
        {
          v191 = v159 + ((unint64_t)v164 << 6);
          if (*(_DWORD *)(v191 + 32) == v158)
          {
            v170 = *(_DWORD *)(v191 + 28) + v157;
            goto LABEL_257;
          }
        }
        v176 = v159 + ((unint64_t)v164 << 6);
LABEL_255:
        v170 = *(_DWORD *)(v176 + 28) + v177;
        goto LABEL_257;
      }
      v170 = v167[7] + v167[6];
LABEL_257:
      v211 = v170;
      v162 = bed_GetiElem(v151, (_WORD *)&v231 + 1);
      if (v162 < 0)
        goto LABEL_299;
      LOWORD(v231) = v231 - HIWORD(v231);
      v162 = bed_Goto(v151, HIWORD(v231) + (unsigned __int16)v231);
      if (v162 < 0)
        goto LABEL_299;
      v162 = bed_Insert(v151, &v227, 1);
      if (v162 < 0)
        goto LABEL_299;
      v162 = bed_GetpElem(v151, HIWORD(v231), &v232);
      if (v162 < 0)
        goto LABEL_299;
      v178 = v231;
      if ((_WORD)v231)
      {
        v179 = 0;
        v200 = 0;
        v209 = 0;
        while (!*v207)
        {
LABEL_280:
          v179 += utf8_determineUTF8CharLength(v232[(unsigned __int16)v179]);
LABEL_281:
          v178 = v231;
          if ((unsigned __int16)v231 <= (unsigned __int16)v179)
            goto LABEL_282;
        }
        v180 = 0;
        v181 = 0;
        while (1)
        {
          v182 = v232;
          v183 = (unsigned __int16)v231;
          __src = 0;
          if (!v232
            || (unsigned __int16)v231 <= (unsigned __int16)v179
            || (InitRsrcFunction(v205, v206, &__src) & 0x80000000) != 0)
          {
            LODWORD(v14) = -1924128761;
            goto LABEL_300;
          }
          v184 = nuance_pcre_exec(a9, a10, *((_QWORD *)v207 + 2) + *(unsigned int *)(*((_QWORD *)v207 + 1) + v180), 0, v182, v183, (unsigned __int16)v179, 0x10u, &v238, 30);
          if ((v184 & 0x80000000) == 0)
          {
            if (v184)
            {
              v209 = v238;
              LODWORD(v200) = *(_DWORD *)(*((_QWORD *)v207 + 1) + v180 + 4);
              HIDWORD(v200) = DWORD1(v238) - v238;
            }
LABEL_275:
            LODWORD(v190) = *v207;
LABEL_276:
            if (v190 <= (unsigned __int16)v181)
              goto LABEL_280;
            DWORD2(v235) = v211 + (unsigned __int16)v179;
            HIDWORD(v235) = WORD2(v200);
            LODWORD(v236) = v158 + (unsigned __int16)v209 + HIWORD(v231);
            DWORD1(v236) = WORD2(v200);
            DWORD2(v236) = v200;
            v162 = bed_marker_InjectFixedRefMarker(v152, &v234);
            if ((v162 & 0x80000000) == 0)
            {
              v162 = datac_RequestBlock(v204, 1021, 1u, &v228);
              if ((v162 & 0x80000000) == 0)
              {
                v179 = HIDWORD(v200) + v209;
                goto LABEL_281;
              }
            }
            goto LABEL_299;
          }
          v185 = nuance_pcre_ErrorToLhError(v184);
          if (v185 >> 20 != 2213)
            goto LABEL_275;
          LODWORD(v14) = v185;
          if ((v185 & 0x1FFF) != 0x14)
            break;
          ++v181;
          v190 = *v207;
          v180 += 8;
          if (v181 >= v190)
            goto LABEL_276;
        }
        if ((v185 & 0x1FFF) == 0xA)
        {
          log_OutPublic(*((_QWORD *)__src + 4), (uint64_t)&modPP_5, 11002, 0, v186, v187, v188, v189, v194);
          v178 = v231;
          goto LABEL_290;
        }
        log_OutPublic(*((_QWORD *)__src + 4), (uint64_t)&modPP_5, 11027, "%s%x", v186, v187, v188, v189, "lhError");
        goto LABEL_300;
      }
LABEL_282:
      LODWORD(v14) = 0;
LABEL_290:
      v162 = bed_Remove(v151, (unsigned __int16)(HIWORD(v231) + v178), 1);
      if (v162 < 0)
        goto LABEL_299;
      if (v229)
      {
        v162 = bed_GetpElem(v152, 0xFFFFu, &v229);
        if (v162 < 0)
          goto LABEL_299;
        v192 = (unsigned __int16)(v231 + HIWORD(v231) + *(_WORD *)(v229 + 36));
      }
      else
      {
        v192 = (unsigned __int16)v231 + HIWORD(v231);
      }
      v162 = bed_Goto(v151, v192);
      if ((v162 & 0x80000000) == 0)
      {
        if ((v14 & 0x1FFF) != 0xA)
          LODWORD(v14) = 0;
        goto LABEL_300;
      }
LABEL_299:
      LODWORD(v14) = v162;
LABEL_300:
      v16 = v204;
LABEL_301:
      if ((v14 & 0x80000000) != 0 && (v14 & 0x1FFF) != 0xA)
        goto LABEL_307;
      v225 = 1;
      bed_GoForward(v152, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v225);
      IsCursorAtEnd = bed_IsCursorAtEnd(v151, &v226);
      if (IsCursorAtEnd < 0)
        goto LABEL_306;
      if (v226)
        goto LABEL_215;
    }
    LODWORD(v14) = v161;
    if (v161 < 0)
      goto LABEL_301;
    v171 = *(_DWORD *)(v229 + 32);
    LOWORD(v231) = v171 - v158;
    if (!(_DWORD)v160)
      goto LABEL_256;
    v172 = 0;
    v173 = 0;
    v174 = (int *)(v159 + 20);
    do
    {
      if (v174[3] >= v171)
        break;
      v175 = *v174;
      v174 += 16;
      if (v175 == 7)
        v173 = v172;
      ++v172;
    }
    while (v160 != v172);
    if (!v173)
      goto LABEL_256;
    v176 = v159 + ((unint64_t)v173 << 6);
    v177 = *(_DWORD *)(v176 + 24);
    goto LABEL_255;
  }
  LODWORD(v14) = 0;
LABEL_215:
  if ((v14 & 0x1FFF) != 0xA)
    LODWORD(v14) = 0;
LABEL_307:
  if ((v14 & 0x80000000) == 0 || (v14 & 0x1FFF) == 0xA)
  {
    UTOITrace(v150, v218, v220, v219, (uint64_t)"BEFORE utois_MarkUnknownRegions");
    if ((utois_MarkUnknownRegions(v220, v219) & 0x80000000) == 0)
    {
      UTOITrace(v150, v218, v220, v219, (uint64_t)"BEFORE utois_AlignMarkers");
      utois_AlignMarkers(v16);
    }
  }
LABEL_218:
  if (v219)
    bed_ObjClose(v219);
  if (v220)
    bed_ObjClose(v220);
  if ((v14 & 0x1FFF) == 0xA)
    return v14;
  else
    return 0;
}

uint64_t utois_MarkUnknownRegions(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _DWORD *v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  __int16 v18;
  __int128 v19;
  _BYTE v20[32];
  __int128 v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v24 = 0;
  v25[0] = 7;
  v23 = 0;
  v22 = 0;
  v19 = MarkerSetTypeOfInput_0;
  *(_OWORD *)v20 = unk_1DEC66F00;
  *(_OWORD *)&v20[16] = xmmword_1DEC66F10;
  v21 = unk_1DEC66F20;
  result = 2370838535;
  if (!a1)
    return result;
  if (!a2)
    return result;
  result = bed_Goto(a2, 0);
  if ((result & 0x80000000) != 0)
    return result;
  result = bed_GetpElem(a2, 0, &v24);
  if ((result & 0x80000000) != 0)
    return result;
  result = bed_GoForward(a2, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)v25);
  if ((result & 0x1FFF) != 0x14)
  {
    if ((result & 0x80000000) != 0)
      return result;
    result = bed_GetpElem(a2, 0xFFFFu, &v23);
    if ((result & 0x80000000) != 0)
      return result;
    if (!v23)
      goto LABEL_7;
    v7 = v23[8];
    v8 = v24[8];
    v9 = v24[6];
    v10 = v7 >= v8;
    v11 = v7 - v8;
    if (v11 != 0 && v10)
    {
      *(_DWORD *)&v20[8] = v24[6];
      *(_DWORD *)&v20[12] = v23[6] - v9;
      *(_DWORD *)&v20[16] = v8;
      *(_QWORD *)&v20[20] = v11;
    }
    v5 = v24[9] + v8;
    v6 = v24[7] + v9;
    if (v23[8] > v8)
      goto LABEL_8;
    while (1)
    {
LABEL_20:
      v18 = 1;
      bed_GoForward(a2, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v18);
      result = bed_GoForward(a2, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)v25);
      if ((result & 0x1FFF) == 0x14)
      {
        v12 = 0;
        v22 = 0;
      }
      else
      {
        if ((result & 0x80000000) != 0)
          return result;
        result = bed_GetpElem(a2, 0xFFFFu, &v22);
        if ((result & 0x80000000) != 0)
          return result;
        v12 = v22;
        if (v22)
        {
          v13 = v22[8];
          v14 = v22[6];
          goto LABEL_27;
        }
      }
      v13 = v5;
      v14 = v6;
LABEL_27:
      v15 = v23[9];
      v16 = v15 + v23[8];
      if (v13 > v16)
      {
        v17 = v23[7];
        *(_DWORD *)&v20[8] = v17 + v23[6];
        *(_DWORD *)&v20[12] = v14 - (v17 + v23[6]);
        *(_DWORD *)&v20[16] = v16;
        *(_QWORD *)&v20[20] = v13 - (v15 + v23[8]);
        result = bed_marker_InjectFixedRefMarker(a2, &v19);
        if ((result & 0x80000000) != 0)
          return result;
        if (!v22)
          return 0;
        result = bed_GetpElem(a2, 0xFFFFu, &v22);
        if ((result & 0x80000000) != 0)
          return result;
        v12 = v22;
      }
      result = 0;
      v23 = v12;
      if (!v12)
        return result;
    }
  }
  v23 = 0;
LABEL_7:
  *(_OWORD *)&v20[8] = *(_OWORD *)(v24 + 6);
  *(_DWORD *)&v20[24] = 0;
  v5 = v24[9] + *(_DWORD *)&v20[16];
  v6 = v24[7] + *(_DWORD *)&v20[8];
LABEL_8:
  result = bed_marker_InjectFixedRefMarker(a2, &v19);
  if ((result & 0x80000000) != 0)
    return result;
  if (v23)
  {
    result = bed_GetpElem(a2, 0xFFFFu, &v23);
    if ((result & 0x80000000) != 0)
      return result;
    if (v23)
      goto LABEL_20;
  }
  return 0;
}

uint64_t utois_AlignMarkers(uint64_t a1)
{
  uint64_t result;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v25 = 0;
  result = datac_RequestBlock(a1, 1021, 1u, &v25);
  if ((result & 0x80000000) == 0)
  {
    v2 = *(unsigned __int16 *)(v25 + 16);
    if (*(_WORD *)(v25 + 16))
    {
      v3 = *(_QWORD *)(v25 + 8);
      if (*(_DWORD *)(v3 + 20) == 0x4000 && (_DWORD)v2 != 1)
      {
        v5 = 1;
        do
        {
          v6 = (_DWORD *)(v3 + (v5 << 6));
          if (v6[5] == 7 && v6[10] == 43 && v5 + 1 < v2)
          {
            v8 = v6 + 9;
            v9 = (unsigned __int16)(v5 + 1);
            do
            {
              v10 = v3 + ((unint64_t)v9 << 6);
              v13 = *(_DWORD *)(v10 + 32);
              v11 = (unsigned int *)(v10 + 32);
              v12 = v13;
              v14 = *(_DWORD *)(v3 + (v5 << 6) + 32);
              if (v13 <= v14)
                break;
              if (v12 >= *v8 + v14)
                break;
              *v11 = v14;
              ++v9;
            }
            while (v9 < v2);
          }
          ++v5;
        }
        while (v5 != v2);
        v15 = 1;
        do
        {
          v16 = v15 + 1;
          if (v16 >= v2
            || (v17 = (_OWORD *)(v3 + (v16 << 6)),
                v18 = (_OWORD *)(v3 + ((unint64_t)v15 << 6)),
                *((_DWORD *)v17 + 8) >= *((_DWORD *)v18 + 8)))
          {
            ++v15;
          }
          else
          {
            v15 = 0;
            v19 = *v17;
            v20 = v17[1];
            v21 = v17[2];
            v22 = v17[3];
            v23 = v18[1];
            *v17 = *v18;
            v17[1] = v23;
            v24 = v18[3];
            v17[2] = v18[2];
            v17[3] = v24;
            v26 = v19;
            v27 = v20;
            v28 = v21;
            v29 = v22;
            *v18 = v19;
            v18[1] = v20;
            v18[2] = v21;
            v18[3] = v22;
          }
        }
        while (v15 < v2);
      }
    }
  }
  return result;
}

uint64_t sysdct_char_LookUp(_QWORD *a1, uint64_t a2, void *a3, _WORD *a4, int a5, uint64_t a6, const char *a7)
{
  uint64_t v9;
  const char *v10;
  char *v11;
  char *v12;
  unsigned __int16 v13;
  __int16 v14;
  __int16 v15;
  char *v16;
  char *v17;
  size_t v18;
  unsigned __int16 v19;
  char *v20;
  char *v21;
  size_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  const char *v27;
  char *v28;
  char *v29;
  char *v30;
  int v31;
  _BOOL4 v32;
  size_t v33;
  unsigned int v37;
  char *v39;
  unsigned __int16 v40;
  uint64_t v41;
  int __c;

  LOBYTE(__c) = 0;
  v41 = 0;
  v40 = 0;
  v37 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t, uint64_t *, unsigned __int16 *, int *))(*a1 + 96))(a1[1], a1[2], "char", a2, &v41, &v40, &__c);
  if ((v37 & 0x80000000) != 0 || !v40)
    return v37;
  v9 = 0;
  v10 = "normal";
  while (1)
  {
    v11 = *(char **)(v41 + 8 * v9);
    v12 = strchr(v11, __c);
    v13 = strlen(v11);
    if (v12)
      *v12 = 0;
    v14 = strlen(v11);
    v15 = v14;
    if (v13 <= (unsigned __int16)(v14 + 1))
    {
      v16 = 0;
      v19 = v14 + 1;
    }
    else
    {
      v16 = (char *)(*(_QWORD *)(v41 + 8 * v9) + (unsigned __int16)(v14 + 1));
      v17 = strchr(v16, __c);
      if (v17)
        *v17 = 0;
      v18 = strlen(v16);
      v19 = v18 ? v15 + v18 + 2 : v15 + 2;
    }
    if (v13 <= v19)
    {
      v20 = 0;
    }
    else
    {
      v20 = (char *)(*(_QWORD *)(v41 + 8 * v9) + v19);
      v21 = strchr(v20, __c);
      if (v21)
        *v21 = 0;
      v22 = strlen(v20);
      if (v22)
        v19 += v22 + 1;
      else
        ++v19;
    }
    if (v13 <= v19)
      goto LABEL_35;
    v23 = *(_QWORD *)(v41 + 8 * v9);
    v24 = (char *)(v23 + v19);
    v25 = strchr(v24, __c);
    if (v25)
      *v25 = 0;
    if (v23)
    {
      v39 = v16;
      v26 = a6;
      v27 = v10;
      v28 = (char *)(v23 + v19);
      do
      {
        v29 = strchr(v28, 44);
        v30 = v29;
        if (v29)
          *v29 = 0;
        v31 = strcmp(v28, a7);
        if (v30)
          v28 = v30 + 1;
        else
          v28 = 0;
      }
      while (v30 && v31);
      v32 = v31 == 0;
      if (!v31)
      {
        v32 = 1;
        v10 = v27;
        a6 = v26;
        v16 = v39;
        goto LABEL_39;
      }
      v10 = v27;
      a6 = v26;
      v16 = v39;
      if (*v24)
        goto LABEL_46;
    }
    else
    {
LABEL_35:
      v32 = 0;
    }
    if (strcmp(v10, a7))
      goto LABEL_46;
LABEL_39:
    if (!a5)
      goto LABEL_51;
    if ((_DWORD)a6 == 1)
      break;
    if (!(_DWORD)a6)
      goto LABEL_49;
LABEL_46:
    if (!v32 && ++v9 < (unint64_t)v40)
      continue;
    return v37;
  }
  if (v20 && *v20 != 49 && *v20)
    goto LABEL_46;
LABEL_49:
  if (!v16 || (v33 = strlen(v16)) == 0)
  {
LABEL_51:
    LOWORD(v33) = strlen(v11);
    v16 = v11;
  }
  *a4 = v33;
  memmove(a3, v16, (unsigned __int16)v33 + 1);
  return v37;
}

uint64_t sysdct_wpcrf_LookUp_Chinese(_QWORD *a1, uint64_t a2, int a3, char *a4, char *a5, _BOOL4 *a6)
{
  uint64_t v11;
  uint64_t v12;
  char **v13;
  int v14;
  const char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char **v20;
  int v21;
  const char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  char *v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  _BOOL4 v33;
  char *v34;
  uint64_t v35;
  const char *v36;
  char *v37;
  char *v38;
  int v39;
  unsigned int v40;
  char **v42;
  unsigned __int16 v43;
  unsigned __int8 __c;
  _BYTE __c_1[5];

  __c = 0;
  v42 = 0;
  __memcpy_chk();
  __c_1[a3] = 0;
  v43 = 0;
  v11 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, _BYTE *, char ***, unsigned __int16 *, unsigned __int8 *))(*a1 + 96))(a1[1], a1[2], "wpcrf", __c_1, &v42, &v43, &__c);
  if ((v11 & 0x80000000) == 0)
  {
    v12 = v43;
    if (v43)
    {
      v13 = v42;
      v14 = __c;
      while (1)
      {
        v15 = *v13;
        v16 = strchr(*v13, v14);
        if (v16)
          break;
        ++v13;
        if (!--v12)
          return v11;
      }
      v24 = v16;
      v25 = v16 - v15;
      if (v16 == v15)
      {
        a5 = __c_1;
      }
      else
      {
        if (v25 < 0)
          LODWORD(v25) = (_DWORD)v15 - (_DWORD)v16;
        strncat(a5, v15, v25);
      }
      strcat(a4, a5);
      v26 = v24 + 1;
      v27 = strchr(v24 + 1, __c);
      if (v27)
      {
        v28 = v27;
        v29 = 0;
        v30 = __c;
        do
        {
          *(_WORD *)&a4[strlen(a4)] = 32;
          v31 = (_DWORD)v28 - (_DWORD)v26;
          if (v28 - v26 < 0)
            v31 = (_DWORD)v26 - (_DWORD)v28;
          v32 = v31;
          strncat(a4, v26, v31);
          if (!v29)
          {
            v33 = v32 == 1 && *v26 == 49;
            *a6 = v33;
          }
          v26 = v28 + 1;
          v28 = strchr(v28 + 1, v30);
          --v29;
        }
        while (v28);
      }
    }
    else
    {
      v17 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, unsigned __int16 *, unsigned __int8 *))(*a1 + 96))(a1[1], a1[2], "wpcrf", "NULL", &v42, &v43, &__c);
      v11 = 2370838548;
      if ((v17 & 0x80000000) == 0)
      {
        v18 = v43;
        if (v43)
        {
          v19 = v17;
          v20 = v42;
          v21 = __c;
          while (1)
          {
            v22 = *v20;
            v23 = strchr(*v20, v21);
            if (v23)
              break;
            ++v20;
            if (!--v18)
              return v19;
          }
          v34 = v23;
          v35 = v23 - v22;
          if (v23 == v22)
          {
            a5 = __c_1;
          }
          else
          {
            if (v35 < 0)
              LODWORD(v35) = (_DWORD)v22 - (_DWORD)v23;
            strncat(a5, v22, v35);
          }
          strcat(a4, a5);
          v36 = v34 + 1;
          v37 = strchr(v34 + 1, __c);
          if (v37)
          {
            v38 = v37;
            v39 = __c;
            do
            {
              *(_WORD *)&a4[strlen(a4)] = 32;
              v40 = (_DWORD)v38 - (_DWORD)v36;
              if (v38 - v36 < 0)
                v40 = (_DWORD)v36 - (_DWORD)v38;
              strncat(a4, v36, v40);
              v36 = v38 + 1;
              v38 = strchr(v38 + 1, v39);
            }
            while (v38);
          }
          return v19;
        }
      }
    }
  }
  return v11;
}

uint64_t sysdct_wpdummy_LookUp_Chinese(_QWORD *a1, uint64_t a2, int a3, char *a4, char *a5, _BOOL4 *a6)
{
  uint64_t v11;
  uint64_t v12;
  char **v13;
  int v14;
  const char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char **v20;
  int v21;
  const char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  char *v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  _BOOL4 v33;
  char *v34;
  uint64_t v35;
  const char *v36;
  char *v37;
  char *v38;
  int v39;
  unsigned int v40;
  char **v42;
  unsigned __int16 v43;
  unsigned __int8 __c;
  _BYTE __c_1[5];

  __c = 0;
  v42 = 0;
  __memcpy_chk();
  __c_1[a3] = 0;
  v43 = 0;
  v11 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, _BYTE *, char ***, unsigned __int16 *, unsigned __int8 *))(*a1 + 96))(a1[1], a1[2], "dummymap", __c_1, &v42, &v43, &__c);
  if ((v11 & 0x80000000) == 0)
  {
    v12 = v43;
    if (v43)
    {
      v13 = v42;
      v14 = __c;
      while (1)
      {
        v15 = *v13;
        v16 = strchr(*v13, v14);
        if (v16)
          break;
        ++v13;
        if (!--v12)
          return v11;
      }
      v24 = v16;
      v25 = v16 - v15;
      if (v16 == v15)
      {
        a5 = __c_1;
      }
      else
      {
        if (v25 < 0)
          LODWORD(v25) = (_DWORD)v15 - (_DWORD)v16;
        strncat(a5, v15, v25);
      }
      strcat(a4, a5);
      v26 = v24 + 1;
      v27 = strchr(v24 + 1, __c);
      if (v27)
      {
        v28 = v27;
        v29 = 0;
        v30 = __c;
        do
        {
          *(_WORD *)&a4[strlen(a4)] = 32;
          v31 = (_DWORD)v28 - (_DWORD)v26;
          if (v28 - v26 < 0)
            v31 = (_DWORD)v26 - (_DWORD)v28;
          v32 = v31;
          strncat(a4, v26, v31);
          if (!v29)
          {
            v33 = v32 == 1 && *v26 == 49;
            *a6 = v33;
          }
          v26 = v28 + 1;
          v28 = strchr(v28 + 1, v30);
          --v29;
        }
        while (v28);
      }
    }
    else
    {
      v17 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, unsigned __int16 *, unsigned __int8 *))(*a1 + 96))(a1[1], a1[2], "dummymap", "NULL", &v42, &v43, &__c);
      v11 = 2370838548;
      if ((v17 & 0x80000000) == 0)
      {
        v18 = v43;
        if (v43)
        {
          v19 = v17;
          v20 = v42;
          v21 = __c;
          while (1)
          {
            v22 = *v20;
            v23 = strchr(*v20, v21);
            if (v23)
              break;
            ++v20;
            if (!--v18)
              return v19;
          }
          v34 = v23;
          v35 = v23 - v22;
          if (v23 == v22)
          {
            a5 = __c_1;
          }
          else
          {
            if (v35 < 0)
              LODWORD(v35) = (_DWORD)v22 - (_DWORD)v23;
            strncat(a5, v22, v35);
          }
          strcat(a4, a5);
          v36 = v34 + 1;
          v37 = strchr(v34 + 1, __c);
          if (v37)
          {
            v38 = v37;
            v39 = __c;
            do
            {
              *(_WORD *)&a4[strlen(a4)] = 32;
              v40 = (_DWORD)v38 - (_DWORD)v36;
              if (v38 - v36 < 0)
                v40 = (_DWORD)v36 - (_DWORD)v38;
              strncat(a4, v36, v40);
              v36 = v38 + 1;
              v38 = strchr(v38 + 1, v39);
            }
            while (v38);
          }
          return v19;
        }
      }
    }
  }
  return v11;
}

uint64_t sysdct_char_LookUp_Chinese(_QWORD *a1, unsigned __int8 *a2, void *a3, _WORD *a4, int a5, uint64_t a6, const char *a7)
{
  uint64_t v13;
  _BYTE v15[257];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v13 = (unsigned __int16)utf8_determineUTF8CharLength(*a2);
  __memcpy_chk();
  v15[v13] = 0;
  *a4 = 0;
  return sysdct_char_LookUp(a1, (uint64_t)v15, a3, a4, a5, a6, a7);
}

uint64_t sysdct_char_LookUp_Thai(_QWORD *a1, uint64_t a2, int a3, void *a4, _WORD *a5, int a6, uint64_t a7, const char *a8)
{
  _BYTE v16[257];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  __strcpy_chk();
  v16[a3] = 0;
  *a5 = 0;
  if (!(_DWORD)a7 && a6 == 1 && v16[0] == 32)
    v16[0] = -80;
  return sysdct_char_LookUp(a1, (uint64_t)v16, a4, a5, a6, a7, a8);
}

uint64_t getDictSolution(unsigned int a1, uint64_t a2, int __c, void *a4, unsigned __int16 *a5, const char *a6)
{
  unsigned __int16 *v6;
  int v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  char *v15;
  char *v16;
  int v17;
  char *v18;
  char *v19;
  int v20;
  void *v21;
  uint64_t v22;
  const char *v23;
  unsigned __int16 v24;

  v6 = a5;
  if (!a1)
  {
LABEL_24:
    *v6 = 0;
    return 0;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  do
  {
    v15 = strchr(*(char **)(a2 + 8 * v14), __c);
    if (!v15)
    {
      v13 = 0;
LABEL_26:
      v6 = a5;
      v21 = a4;
LABEL_27:
      v22 = v13;
      goto LABEL_28;
    }
    *v15 = 0;
    v16 = v15 + 1;
    if (!v15[1])
    {
      v17 = strcmp("normal", a6);
      if (!v17)
        v13 = v14;
      if (!v11)
        v12 = v14;
      v11 = 1;
      if (!v17)
        goto LABEL_26;
    }
    do
    {
      v18 = strchr(v16, 44);
      v19 = v18;
      if (v18)
        *v18 = 0;
      v20 = strcmp(v16, a6);
      if (!v20)
        v13 = v14;
      if (v19)
        v16 = v19 + 1;
      else
        v16 = 0;
    }
    while (v19 && v20);
    ++v14;
  }
  while (a1 > v14 && v20);
  v6 = a5;
  v21 = a4;
  if (!v20)
    goto LABEL_27;
  if (v11 != 1)
    goto LABEL_24;
  v22 = v12;
LABEL_28:
  v23 = *(const char **)(a2 + 8 * v22);
  v24 = strlen(v23);
  *v6 = v24;
  memmove(v21, v23, v24 + 1);
  return 0;
}

uint64_t getDictBackTransSolution(_QWORD *a1, const char *a2, unsigned int a3, uint64_t a4, int __c, char *a6, unsigned __int16 *a7, const char *a8)
{
  unsigned __int16 *v8;
  uint64_t v13;
  int v14;
  int v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  char *v20;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  const char *v28;
  unsigned int v29;
  const char *v30;
  unsigned int v31;
  int v32;
  int v33;
  __int16 v34;
  unsigned int v35;
  int v36;
  unsigned __int16 v37;
  size_t v38;
  size_t v39;
  unsigned __int16 v40;
  char *v41;
  size_t v43;
  size_t v44;
  int v46;
  unsigned int v47;
  char *v48;
  uint64_t v50;
  char *__s;
  char **v53;
  unsigned __int8 __ca;
  __int16 __c_1;
  char __c_3[128];
  char v57[128];
  char v58[128];
  uint64_t v59;

  v8 = a7;
  v59 = *MEMORY[0x1E0C80C00];
  __c_1 = 0;
  __ca = 0;
  v53 = 0;
  v58[0] = 0;
  v57[0] = 0;
  if (a3)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v48 = 0;
    __s = 0;
    v16 = 0;
    v17 = 0;
    v50 = a3;
    while (1)
    {
      v18 = *(char **)(a4 + 8 * v13);
      if (v18)
      {
        v19 = 0;
        do
        {
          v20 = strchr(v18, __c);
          if (!v20)
            break;
          *v20 = 0;
          v18 = v20 + 1;
          switch(v19)
          {
            case 1u:
              v16 = v18;
              break;
            case 3u:
              __s = v18;
              break;
            case 7u:
              v48 = v18;
              if (v16)
                goto LABEL_15;
              goto LABEL_46;
          }
        }
        while (v19++ < 7);
      }
      if (v16)
      {
LABEL_15:
        if (!*v16 || strstr(v16, a8))
        {
          if (__s)
          {
            v22 = strchr(__s, 33);
            if (v22)
            {
              v23 = v22;
              *v22 = 0;
              while (1)
              {
                v24 = v23 + 1;
                v25 = strchr(v23 + 1, 92);
                v23 = v25;
                if (v25)
                  *v25 = 0;
                v26 = strchr(v24, 40);
                if (v26)
                  *v26 = 0;
                *a6 = 0;
                strcat(a6, "backtrans_");
                strcat(a6, v24);
                __c_1 = -1;
                __ca = 0;
                v53 = 0;
                v17 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, char ***, __int16 *, unsigned __int8 *))(*a1 + 96))(a1[1], a1[2], "fecfg", a6, &v53, &__c_1, &__ca);
                if ((v17 & 0x80000000) != 0)
                  break;
                if (__c_1)
                {
                  v27 = strchr(*v53, __ca);
                  if (v27)
                    *v27 = 0;
                  __strcat_chk();
                }
                if (!v23)
                  goto LABEL_30;
              }
              *a7 = 0;
              return v17;
            }
LABEL_30:
            __strcat_chk();
          }
          if (*v16)
          {
            v15 = 1;
            if (!strstr(v16, a8))
              goto LABEL_50;
            v28 = v48;
            if (!v48)
              goto LABEL_50;
LABEL_37:
            v47 = atoi(v28);
            v29 = (unsigned __int16)strlen(a2);
            if (v29)
            {
              v46 = v14;
              v30 = a2;
              v31 = 0;
              v32 = 0;
              do
              {
                v33 = v32;
                v34 = utf8_determineUTF8CharLength(v30[v31]);
                v32 = v33 + 1;
                v31 = (unsigned __int16)(v34 + v31);
              }
              while (v31 < v29);
              v35 = v47;
              v36 = (unsigned __int16)v47 >> 1;
              if (((v47 >> 1) & 0x7FFE) == 0)
                v36 = 1;
              if (!(_WORD)v33)
                v35 = v36;
              a2 = v30;
              v14 = v46;
            }
            else
            {
              v35 = v47;
            }
            v14 += v35;
          }
          else
          {
            v28 = v48;
            if (v48)
              goto LABEL_37;
          }
          v15 = 1;
          goto LABEL_50;
        }
        __s = 0;
        v16 = 0;
      }
      else
      {
LABEL_46:
        __s = 0;
      }
LABEL_50:
      if (++v13 == v50)
      {
        if (v15 && (_WORD)v14)
        {
          v37 = v14;
          v38 = strlen(a2);
          v8 = a7;
          v39 = *a7;
          if (v38 + strlen(v58) + 5 < v39)
          {
            __c_3[0] = 0;
            __sprintf_chk(__c_3, 0, 0x80uLL, "%d", v37);
            v40 = strlen(a2);
            *a7 = v40;
            memmove(a6, a2, v40 + 1);
            *(_WORD *)&a6[strlen(a6)] = 92;
            ++*a7;
            strcat(a6, v58);
            *a7 += strlen(v58);
            *(_WORD *)&a6[strlen(a6)] = 92;
            ++*a7;
            strcat(a6, __c_3);
            v41 = __c_3;
LABEL_63:
            *v8 += strlen(v41);
            return v17;
          }
        }
        else
        {
          v8 = a7;
          if (!v15)
            goto LABEL_57;
          v39 = *a7;
        }
        v43 = strlen(a2);
        v44 = strlen(v58);
        if (v43 + v44 + strlen(v57) + 3 >= v39)
          goto LABEL_57;
        *v8 = v43;
        memmove(a6, a2, (unsigned __int16)v43 + 1);
        *(_WORD *)&a6[strlen(a6)] = 92;
        ++*v8;
        strcat(a6, v58);
        *v8 += strlen(v58);
        *(_WORD *)&a6[strlen(a6)] = 92;
        ++*v8;
        strcat(a6, v57);
        v41 = v57;
        goto LABEL_63;
      }
    }
  }
  v17 = 0;
LABEL_57:
  *v8 = 0;
  return v17;
}

uint64_t sysdct_word_LookUp(_QWORD *a1, const char *a2, _BYTE *a3, unsigned __int16 *a4, const char *a5)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  char v13[3];
  unsigned __int16 v14;
  uint64_t v15;
  _BYTE __c[9];

  __c[0] = 0;
  v15 = 0;
  v14 = 0;
  *a3 = 0;
  if (!*((_DWORD *)a1 + 8))
  {
    result = *((unsigned __int16 *)a1 + 12);
    if (!*((_WORD *)a1 + 12))
      return result;
    if ((_DWORD)result == 1)
    {
      strcpy(&__c[1], "word");
      v14 = 0;
      result = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE *, const char *, uint64_t *, unsigned __int16 *, _BYTE *))(*a1 + 96))(a1[1], a1[2], &__c[1], a2, &v15, &v14, __c);
      if ((result & 0x80000000) != 0)
        return result;
      v11 = v14;
      if (!v14)
        return result;
    }
    else
    {
      v12 = 0;
      while (1)
      {
        strcpy(&__c[1], "word");
        LH_itoa(v12, v13, 0xAu);
        __strcat_chk();
        v14 = 0;
        result = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE *, const char *, uint64_t *, unsigned __int16 *, _BYTE *))(*a1 + 96))(a1[1], a1[2], &__c[1], a2, &v15, &v14, __c);
        if ((result & 0x80000000) == 0)
        {
          v11 = v14;
          if (v14)
            break;
        }
        if (++v12 >= *((unsigned __int16 *)a1 + 12))
          return result;
      }
    }
    getDictSolution(v11, v15, __c[0], a3, a4, a5);
    return 0;
  }
  result = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, uint64_t *, unsigned __int16 *, _BYTE *, _QWORD, _QWORD))(*a1 + 240))(a1[1], a1[2], "g2p", a2, &v15, &v14, __c, *((unsigned __int8 *)a1 + 24), 0);
  if ((result & 0x80000000) == 0)
  {
    if (v14)
      return getDictBackTransSolution(a1, a2, v14, v15, __c[0], a3, a4, a5);
  }
  return result;
}

uint64_t sysdct_word_LookUp_Chinese(_QWORD *a1, uint64_t a2, int a3, _BYTE *a4, unsigned __int16 *a5, const char *a6)
{
  char v12[257];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  __memcpy_chk();
  v12[a3] = 0;
  return sysdct_word_LookUp(a1, v12, a4, a5, a6);
}

uint64_t sysdct_word_LookUp_Thai(_QWORD *a1, uint64_t a2, int a3, _BYTE *a4, unsigned __int16 *a5, const char *a6)
{
  char v12[257];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  __strcpy_chk();
  v12[a3] = 0;
  return sysdct_word_LookUp(a1, v12, a4, a5, a6);
}

uint64_t wordm_sysdct_CharLookup_Chinese(_QWORD *a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6, const char *a7)
{
  uint64_t result;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  int v19;
  char v20;
  int v21;
  size_t v22;
  int v23;
  char __s[65];
  unsigned __int16 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  result = 2370838535;
  if (a1 && a2 && a4)
  {
    *(_OWORD *)(a4 + 4) = 0u;
    *(_DWORD *)a4 = 0;
    *(_OWORD *)(a4 + 20) = 0u;
    *(_OWORD *)(a4 + 36) = 0u;
    *(_OWORD *)(a4 + 52) = 0u;
    *(_BYTE *)(a4 + 68) = 0;
    *(_WORD *)(a4 + 70) = 0;
    *(_DWORD *)(a4 + 72) = 0;
    *(_OWORD *)(a4 + 76) = 0u;
    *(_OWORD *)(a4 + 92) = 0u;
    *(_OWORD *)(a4 + 108) = 0u;
    *(_OWORD *)(a4 + 124) = 0u;
    *(_OWORD *)(a4 + 140) = 0u;
    *(_OWORD *)(a4 + 156) = 0u;
    *(_OWORD *)(a4 + 172) = 0u;
    *(_OWORD *)(a4 + 188) = 0u;
    *(_OWORD *)(a4 + 204) = 0u;
    *(_OWORD *)(a4 + 220) = 0u;
    *(_OWORD *)(a4 + 236) = 0u;
    *(_OWORD *)(a4 + 252) = 0u;
    *(_BYTE *)(a4 + 332) = 0;
    *(_OWORD *)(a4 + 268) = 0u;
    *(_OWORD *)(a4 + 284) = 0u;
    *(_OWORD *)(a4 + 300) = 0u;
    *(_OWORD *)(a4 + 316) = 0u;
    if (a3 >= 0x40)
      v14 = 64;
    else
      v14 = a3;
    *(_WORD *)(a4 + 334) = 0;
    __memmove_chk();
    __s[v14] = 0;
    if (v14)
    {
      if (v14 > a5)
        __s[a5] = 0;
      v15 = strlen(__s);
      if (utf8_ToLower(__s, 0, (uint64_t)&v25) == 1
        || utf8_BelongsToSet(0, __s, 0, v15) == 1
        || utf8_BelongsToSet(6u, __s, 0, v15) == 1
        || utf8_BelongsToSet(7u, __s, 0, v15) == 1
        || utf8_BelongsToSet(0xAu, __s, 0, v15) == 1)
      {
        v16 = 3;
      }
      else if (utf8_BelongsToSet(0xCu, __s, 0, v15) == 1)
      {
        v16 = 3;
      }
      else
      {
        v16 = 2;
      }
      *(_DWORD *)a4 = v16;
      v17 = utf8_determineUTF8CharLength(__s[0]);
      memmove((void *)(a4 + 4), __s, v17);
      __s[v17] = 0;
      *(_BYTE *)(a4 + v17 + 4) = 0;
      *(_WORD *)(a4 + 70) = v17;
      v25 = 256;
      if (sysdct_char_LookUp_Chinese(a1, (unsigned __int8 *)__s, (void *)(a4 + 76), &v25, 1, a6, a7)
        || (v18 = v25) == 0)
      {
        result = 0;
        *(_DWORD *)a4 = 0;
      }
      else
      {
        result = 0;
        v19 = *(unsigned __int8 *)(a4 + 76);
        *(_BYTE *)(a4 + 76 + v25) = 0;
        *(_WORD *)(a4 + 334) = v18;
        if (v19 == 35)
        {
          v20 = atoi((const char *)(a4 + 77));
          result = 0;
          *(_BYTE *)(a4 + 76) = v20;
          *(_BYTE *)(a4 + 77) = 0;
          *(_WORD *)(a4 + 334) = 1;
        }
      }
    }
    else
    {
      v21 = 0;
      do
      {
        v22 = (unsigned __int16)v21;
        v23 = a2[(unsigned __int16)v21++];
      }
      while (v23 == 32);
      memmove((void *)(a4 + 4), a2, v22);
      return 0;
    }
  }
  return result;
}

uint64_t wordm_sysdct_CharLookup_Thai(_QWORD *a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6, const char *a7)
{
  uint64_t result;
  unsigned int v14;
  char v15;
  int v16;
  unsigned __int16 v17;
  int v18;
  size_t v19;
  int v20;
  unsigned __int16 v21;
  _BYTE v22[65];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  result = 2370838535;
  if (a1 && a2 && a4)
  {
    *(_OWORD *)(a4 + 4) = 0u;
    *(_DWORD *)a4 = 0;
    *(_OWORD *)(a4 + 20) = 0u;
    *(_OWORD *)(a4 + 36) = 0u;
    *(_OWORD *)(a4 + 52) = 0u;
    *(_BYTE *)(a4 + 68) = 0;
    *(_WORD *)(a4 + 70) = 0;
    *(_DWORD *)(a4 + 72) = 0;
    *(_OWORD *)(a4 + 76) = 0u;
    *(_OWORD *)(a4 + 92) = 0u;
    *(_OWORD *)(a4 + 108) = 0u;
    *(_OWORD *)(a4 + 124) = 0u;
    *(_OWORD *)(a4 + 140) = 0u;
    *(_OWORD *)(a4 + 156) = 0u;
    *(_OWORD *)(a4 + 172) = 0u;
    *(_OWORD *)(a4 + 188) = 0u;
    *(_OWORD *)(a4 + 204) = 0u;
    *(_OWORD *)(a4 + 220) = 0u;
    *(_OWORD *)(a4 + 236) = 0u;
    *(_OWORD *)(a4 + 252) = 0u;
    *(_BYTE *)(a4 + 332) = 0;
    *(_OWORD *)(a4 + 268) = 0u;
    *(_OWORD *)(a4 + 284) = 0u;
    *(_OWORD *)(a4 + 300) = 0u;
    *(_OWORD *)(a4 + 316) = 0u;
    if (a3 >= 0x40)
      v14 = 64;
    else
      v14 = a3;
    *(_WORD *)(a4 + 334) = 0;
    __memmove_chk();
    v22[v14] = 0;
    if (v14)
    {
      if (v14 > a5)
        v22[a5] = 0;
      v15 = v22[0];
      if (v22[0] < 0)
        v16 = 2;
      else
        v16 = 3;
      *(_DWORD *)a4 = v16;
      *(_BYTE *)(a4 + 4) = v15;
      *(_BYTE *)(a4 + 5) = 0;
      *(_WORD *)(a4 + 70) = 1;
      v21 = 256;
      if (sysdct_char_LookUp_Thai(a1, (uint64_t)v22, 1, (void *)(a4 + 76), &v21, 1, a6, a7)
        || (v17 = v21) == 0)
      {
        result = 0;
        *(_DWORD *)a4 = 0;
      }
      else
      {
        result = 0;
        *(_BYTE *)(a4 + v21 + 76) = 0;
        *(_WORD *)(a4 + 334) = v17;
      }
    }
    else
    {
      v18 = 0;
      do
      {
        v19 = (unsigned __int16)v18;
        v20 = a2[(unsigned __int16)v18++];
      }
      while (v20 == 32);
      memmove((void *)(a4 + 4), a2, v19);
      return 0;
    }
  }
  return result;
}

uint64_t wordm_mapt2s(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6;
  unsigned __int8 *v7;
  unsigned __int16 v8;
  uint64_t v9;
  unsigned __int16 v10;
  __int16 v12;
  const void **v13;
  char v14;
  int v15;
  _BYTE v16[10];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 0;
  v6 = 0;
  do
  {
    v7 = (unsigned __int8 *)(a2 + v6);
    v15 = 7549556;
    v14 = 0;
    v13 = 0;
    v12 = 0;
    v8 = utf8_determineUTF8CharLength(*v7);
    __memmove_chk();
    v16[v8] = 0;
    v9 = (*(uint64_t (**)(_QWORD, _QWORD, int *, _BYTE *, const void ***, __int16 *, char *))(*a1 + 96))(a1[1], a1[2], &v15, v16, &v13, &v12, &v14);
    if ((v9 & 0x80000000) == 0)
    {
      if (v12)
      {
        v10 = utf8_determineUTF8CharLength(*(unsigned __int8 *)*v13);
        if (v10 == v8)
          memmove((void *)(a2 + v6), *v13, v10);
      }
    }
    v6 += (unsigned __int16)utf8_determineUTF8CharLength(*v7);
  }
  while (v6 < a3 && (v9 & 0x80000000) == 0);
  return v9;
}

uint64_t GetInDomainSegmentation(uint64_t a1, _QWORD *a2, uint64_t a3, __int16 a4, __int16 a5, __int16 a6, char *__s, uint64_t *a8, __int16 *a9, __int16 a10, int a11, unsigned __int8 a12)
{
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  char *v22;
  const char *v23;
  unsigned __int16 v24;
  unsigned __int16 v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t *v31;
  _OWORD v34[4];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v18 = 2350915594;
  v19 = *a8;
  v20 = *(_QWORD **)(a1 + 8);
  v21 = strlen(__s);
  v22 = (char *)heap_Calloc(v20, 1, (v21 + 1));
  if (!v22)
    return v18;
  v23 = v22;
  v31 = a8;
  strcpy(v22, __s);
  v24 = a5 - a4;
  v25 = a6 - a4;
  if ((unsigned __int16)(a5 - a4) >= (unsigned __int16)(a6 - a4))
  {
    v26 = 0;
    goto LABEL_24;
  }
  v26 = 0;
  while (1)
  {
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v35 = 0u;
    memset(v34, 0, sizeof(v34));
    if (a11 == 1)
    {
      v26 = wordm_sysdct_Lookup_Thai(a2, (char *)(a3 + v24), (uint64_t)v34, 22, v23);
      if ((v26 & 0x80000000) != 0)
        goto LABEL_24;
      if (LODWORD(v34[0]) != 5 && LODWORD(v34[0]) != 2)
        goto LABEL_18;
    }
    else
    {
      if (a11)
        goto LABEL_18;
      v26 = wordm_sysdct_Lookup_Chinese(a2, (unsigned __int8 *)(a3 + v24), (unsigned __int16)(a10 - v24), (uint64_t)v34, a12, v23);
      if ((v26 & 0x80000000) != 0)
        goto LABEL_24;
      if (LODWORD(v34[0]) > 5 || ((1 << SLOBYTE(v34[0])) & 0x34) == 0)
        goto LABEL_18;
    }
    if (*a9)
    {
      v27 = heap_Realloc(*(uint64_t **)(a1 + 8), v19, 340 * (unsigned __int16)*a9 + 341);
      if (!v27)
        goto LABEL_27;
      goto LABEL_17;
    }
    v27 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 341);
    if (!v27)
      break;
LABEL_17:
    *(_WORD *)(v27 + 340 * (unsigned __int16)*a9) = v24;
    __strcpy_chk();
    *(_WORD *)(v27 + 340 * (unsigned __int16)*a9 + 74) = WORD3(v35);
    __strcpy_chk();
    *(_WORD *)(v27 + 340 * (unsigned __int16)*a9 + 338) = HIWORD(v51);
    v28 = *a9;
    v29 = v27 + 340 * (unsigned __int16)*a9;
    *(_DWORD *)(v29 + 4) = v34[0];
    *(_DWORD *)(v29 + 76) = DWORD2(v35);
    *a9 = v28 + 1;
    v19 = v27;
LABEL_18:
    if (WORD3(v35))
      v24 += WORD3(v35);
    else
      v24 = v25;
    if (v24 >= v25)
      goto LABEL_24;
  }
  v19 = 0;
LABEL_27:
  v26 = 2350915594;
LABEL_24:
  heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v23);
  *v31 = v19;
  return v26;
}

uint64_t getDomainSegmentations(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t *a7, __int16 *a8, int a9, unsigned __int8 a10)
{
  char *MarkerArgStr;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  const char *v32;
  unsigned __int16 v33;
  const char *v34;
  __int16 v36;
  uint64_t v37;
  __int16 *v38;
  uint64_t *v39;
  unsigned __int16 v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int16 v46;
  uint64_t v47;

  v47 = 0;
  v46 = 0;
  v44 = 0;
  v45 = 0;
  MarkerArgStr = (char *)marker_getMarkerArgStr(1u);
  v19 = bed_GetpElem(a5, 0, &v44);
  if ((v19 & 0x80000000) != 0)
    return v19;
  v19 = bed_GetpElem(a5, 0xFFFFu, &v45);
  if ((v19 & 0x80000000) != 0)
    return v19;
  v42 = a1;
  v43 = a2;
  v20 = *(_DWORD *)(v45 + 32);
  v21 = *(_DWORD *)(v44 + 32);
  v19 = bed_GetpElem(a5, 0, &v47);
  if ((v19 & 0x80000000) != 0)
    return v19;
  v22 = bed_GetcElem(a5, &v46);
  if ((v22 & 0x80000000) == 0)
  {
    v40 = v20 - v21;
    v23 = v46;
    if (v46)
    {
      v24 = 0;
      v25 = (unsigned int *)(v47 + 40);
      while (*(v25 - 2) <= *(_DWORD *)(v45 + 32))
      {
        if (*(v25 - 5) == 21)
          MarkerArgStr = (char *)(*(_QWORD *)(a6 + 8) + *v25);
        v25 += 16;
        if (v46 == ++v24)
          goto LABEL_24;
      }
      LODWORD(v24) = (unsigned __int16)v24;
    }
    else
    {
      LODWORD(v24) = 0;
    }
    if (v24 >= v46)
    {
LABEL_24:
      v26 = a4 + v40;
      v33 = v40;
    }
    else
    {
      v37 = a3;
      v38 = a8;
      v39 = a7;
      v36 = a4;
      v26 = a4 + v40;
      v27 = v47;
      v28 = v44;
      v29 = (unint64_t)v24 << 6;
      LOWORD(v41) = v40;
      v30 = v24;
      do
      {
        if (v26 < (unsigned __int16)(*(_WORD *)(v27 + v29 + 32) - *(_DWORD *)(v28 + 32)))
          break;
        if (*(_DWORD *)(v27 + v29 + 20) == 21)
        {
          v31 = *(unsigned int *)(v27 + v29 + 40);
          if (strcmp(MarkerArgStr, (const char *)(*(_QWORD *)(a6 + 8) + v31)))
          {
            v32 = marker_getMarkerArgStr(1u);
            if (strcmp(MarkerArgStr, v32))
            {
              v22 = GetInDomainSegmentation(v42, v43, v37, v40, v41, (unsigned __int16)*(_DWORD *)(v47 + v29 + 32) - (unsigned __int16)*(_DWORD *)(v44 + 32), MarkerArgStr, v39, v38, v36, a9, a10);
              if ((v22 & 0x80000000) != 0)
                return v22;
            }
            MarkerArgStr = (char *)(*(_QWORD *)(a6 + 8) + v31);
            v27 = v47;
            v28 = v44;
            v41 = *(_DWORD *)(v47 + v29 + 32) - *(_DWORD *)(v44 + 32);
            v23 = v46;
          }
        }
        ++v30;
        v29 += 64;
      }
      while (v30 < v23);
      a8 = v38;
      a7 = v39;
      a3 = v37;
      LOWORD(a4) = v36;
      v33 = v41;
    }
    if (v26 >= v33)
    {
      v34 = marker_getMarkerArgStr(1u);
      if (strcmp(MarkerArgStr, v34))
        return GetInDomainSegmentation(v42, v43, a3, v40, v33, v26, MarkerArgStr, a7, a8, a4, a9, a10);
    }
  }
  return v22;
}

uint64_t DoTHTLatin(uint64_t a1, _QWORD *a2, unsigned __int8 *a3, unsigned int a4, char **a5)
{
  uint64_t v7;
  int v8;
  char *v9;
  _OWORD v11[21];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  memset(v11, 0, sizeof(v11));
  v7 = wordm_sysdct_CharLookup_Thai(a2, a3, a4, (uint64_t)v11, 0x16u, 0, "normal");
  if (!(_DWORD)v7)
  {
    v8 = strlen((const char *)&v11[4] + 12);
    v9 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), (v8 + 3));
    *a5 = v9;
    if (v9)
      strcpy(v9, (const char *)&v11[4] + 12);
  }
  return v7;
}

uint64_t DoMaxWords(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 a11, _WORD *a12, int a13, uint64_t a14, int a15, unsigned __int8 a16)
{
  uint64_t v20;
  uint64_t v21;
  unsigned int LogLevel;
  _BOOL4 v23;
  uint64_t DomainSegmentations;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int16 v31;
  int v32;
  unsigned __int16 v33;
  unsigned __int16 *v34;
  unsigned int v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  char *v42;
  char *v43;
  unsigned __int16 v44;
  int v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  __int16 v51;
  unsigned int v52;
  _WORD *v53;
  unsigned int NextUtf8Offset;
  unsigned int WCharFromUtf8;
  int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int v74;
  unsigned __int16 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  _BOOL4 v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  __int16 v98;
  int v99;
  _WORD *v100;
  int v104;
  char v105;
  unsigned __int16 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int16 v110;
  _OWORD __dst[21];
  uint64_t v112;

  v20 = a1;
  v21 = a14;
  v112 = *MEMORY[0x1E0C80C00];
  v110 = 0;
  v108 = 0;
  v109 = 0;
  v107 = 0;
  v106 = 0;
  *(_WORD *)(a14 + 8) = 0;
  *(_QWORD *)(v21 + 12) = 0x100000001;
  LogLevel = log_GetLogLevel(*(_QWORD *)(a1 + 32));
  v23 = LogLevel > 4;
  DomainSegmentations = bed_GetpElem(a7, 0xFFFFu, &v109);
  if ((DomainSegmentations & 0x80000000) != 0)
    return DomainSegmentations;
  v99 = a15;
  if ((_DWORD)a5 && (_DWORD)a5 != (unsigned __int16)*(_DWORD *)(v109 + 36))
    *(_DWORD *)(v21 + 16) = 0;
  v28 = a16;
  log_OutText(*(_QWORD *)(v20 + 32), a2, 5, 0, (uint64_t)"[UTOI] (normalizing %d bytes - region length %d %s)", v25, v26, v27, a5);
  UTOITrace(v23, v20, a6, a7, (uint64_t)"START of normalization");
  if (v99 == 1)
  {
    DomainSegmentations = getDomainSegmentations(v20, (_QWORD *)a3, (uint64_t)a4, a5, a7, a10, &v107, (__int16 *)&v106, 0, v28);
    if ((DomainSegmentations & 0x80000000) != 0)
      return DomainSegmentations;
  }
  v97 = v28;
  if ((_DWORD)a5)
  {
    v88 = LogLevel;
    v92 = a2;
    v91 = LogLevel > 4;
    v96 = v21;
    v89 = a6;
    v90 = a7;
    v29 = 0;
    LOWORD(v30) = 0;
    v98 = 0;
    v31 = 0;
    v100 = a12;
    v93 = a11;
    v32 = a13;
    v95 = v20;
    v94 = a13;
    do
    {
      memset(__dst, 0, sizeof(__dst));
      if (v99 == 1 && v106 > (unsigned __int16)v30)
      {
        v33 = 0;
        v30 = (unsigned __int16)v30;
        v34 = (unsigned __int16 *)(v107 + 340 * (unsigned __int16)v30);
        while (1)
        {
          v35 = *v34;
          if (v35 > v31)
            break;
          v34 += 170;
          if (v35 == v31)
            v33 = v30;
          ++v30;
          if (v35 == v31 || v30 >= v106)
          {
            if (v35 != v31)
              break;
            memcpy(__dst, (const void *)(v107 + 340 * v33 + 4), sizeof(__dst));
            goto LABEL_23;
          }
        }
      }
      v40 = wordm_sysdct_Lookup_Chinese((_QWORD *)a3, (unsigned __int8 *)&a4[v31], (unsigned __int16)(a5 - v31), (uint64_t)__dst, v28, "normal");
      if ((v40 & 0x80000000) != 0)
      {
LABEL_79:
        v43 = 0;
LABEL_80:
        v83 = v40;
        goto LABEL_95;
      }
LABEL_23:
      if (LODWORD(__dst[0]) <= 5 && ((1 << SLOBYTE(__dst[0])) & 0x34) != 0)
      {
        if (v32)
        {
          v40 = bed_Insert(a8, &szWORD_BEG_0, 1);
          if ((v40 & 0x80000000) != 0)
            goto LABEL_79;
          ++*v100;
        }
        v41 = (unsigned __int16)(strlen((const char *)&__dst[4] + 12) + 1);
        v42 = (char *)heap_Alloc(*(_QWORD *)(v20 + 8), v41);
        if (!v42)
          return 2350915594;
        v43 = v42;
        bzero(v42, v41);
        strcpy(v43, (const char *)&__dst[4] + 12);
        v44 = strlen((const char *)&__dst[4] + 12);
        v40 = bed_Insert(a8, v43, v44);
        if ((v40 & 0x80000000) != 0)
          goto LABEL_80;
        *v100 += strlen((const char *)&__dst[4] + 12);
        heap_Free(*(_QWORD **)(v20 + 8), (uint64_t)v43);
        if (v32)
        {
          v40 = bed_Insert(a8, &szWORD_END_1, 1);
          if ((v40 & 0x80000000) != 0)
            goto LABEL_79;
          ++*v100;
        }
        v40 = bed_GetcElem(a8, &v110);
        if ((v40 & 0x80000000) != 0)
          goto LABEL_79;
        v45 = *(_DWORD *)(a3 + 32);
        v46 = a10;
        v47 = (char *)&__dst[4] + 6;
        if (v45)
          v47 = (char *)&__dst[20] + 14;
        if (*(unsigned __int16 *)(a10 + 18) < (unsigned __int16)(*(_WORD *)(a10 + 16)
                                                                              + 4 * *(_WORD *)v47
                                                                              + 5))
        {
          v40 = datac_RequestBlock(a9, v93, (unsigned __int16)(*(_WORD *)(a10 + 16) + 4 * *(_WORD *)v47 + 5), &a10);
          if ((v40 & 0x80000000) != 0)
            goto LABEL_79;
          v46 = a10;
          v45 = *(_DWORD *)(a3 + 32);
        }
        v48 = *(_QWORD *)(v46 + 8);
        v49 = *(unsigned __int16 *)(v46 + 16);
        v50 = *(unsigned __int16 *)(v46 + 2);
        v51 = v48 + v50 * v49;
        v105 = 0;
        v104 = 0;
        if (v45)
        {
          v52 = HIWORD(__dst[20]);
          v53 = (_WORD *)(v48 + v50 * (unint64_t)v49);
          if (HIWORD(__dst[20]))
          {
            NextUtf8Offset = 0;
            v53 = (_WORD *)(v48 + v50 * (unint64_t)v49);
            do
            {
              if (*((_BYTE *)&__dst[4] + NextUtf8Offset + 12) == 92)
                break;
              WCharFromUtf8 = utf8_GetWCharFromUtf8((_BYTE *)&__dst[4] + 12, NextUtf8Offset, v52);
              LH_itoa(WCharFromUtf8, (char *)&v104, 0x10u);
              *v53 = HIWORD(v104);
              v53[1] = v104;
              v53 += 2;
              NextUtf8Offset = (unsigned __int16)utf8_GetNextUtf8Offset((char *)&__dst[4] + 12, NextUtf8Offset);
              v52 = HIWORD(__dst[20]);
            }
            while (HIWORD(__dst[20]) > NextUtf8Offset);
          }
        }
        else
        {
          v53 = (_WORD *)(v48 + v50 * (unint64_t)v49);
          if (WORD3(__dst[4]))
          {
            v57 = 0;
            v53 = (_WORD *)(v48 + v50 * (unint64_t)v49);
            do
            {
              v58 = v57 + v29;
              if (v57 + v29 >= a5)
                break;
              v59 = utf8_GetWCharFromUtf8(a4, v57 + v29, a5);
              LH_itoa(v59, (char *)&v104, 0x10u);
              *v53 = HIWORD(v104);
              v53[1] = v104;
              v53 += 2;
              v57 = (unsigned __int16)(utf8_GetNextUtf8Offset(a4, v58) - v29);
            }
            while (v57 < WORD3(__dst[4]));
          }
        }
        v56 = 0;
        *(_BYTE *)v53 = 0;
        *(_WORD *)(a10 + 16) += (_WORD)v53 - v51 + 1;
        v20 = v95;
        v28 = v97;
        v32 = v94;
      }
      else
      {
        log_OutText(*(_QWORD *)(v20 + 32), a2, 5, 0, (uint64_t)"[UTOI] position %d (word.cbOrth=%d) not in dict", v37, v38, v39, v29);
        v56 = 1;
      }
      if (*(_DWORD *)(v96 + 16) == 1)
      {
        v60 = *(unsigned __int16 *)(v96 + 8);
        v61 = *(_QWORD *)v96;
        if (v60 >= *(unsigned __int16 *)(v96 + 10))
        {
          v62 = heap_Realloc(*(uint64_t **)(v20 + 8), v61, 12 * *(unsigned __int16 *)(v96 + 10) + 121);
          if (!v62)
          {
            v43 = 0;
            v83 = 2350915594;
            goto LABEL_95;
          }
          v61 = v62;
          *(_QWORD *)v96 = v62;
          *(_WORD *)(v96 + 10) += 10;
          v60 = *(unsigned __int16 *)(v96 + 8);
        }
        v63 = v60;
        v64 = v61 + 12 * v60;
        *(_WORD *)v64 = v98;
        *(_QWORD *)(v64 + 2) = 0;
        v65 = WORD3(__dst[4]);
        if (v56)
          *(_DWORD *)(v61 + 12 * v63 + 4) = 1;
        v98 += v65;
        *(_WORD *)(v96 + 8) = v63 + 1;
      }
      else
      {
        v65 = WORD3(__dst[4]);
      }
      if (v65)
        v31 += v65;
      else
        v31 = a5;
      v29 = v31;
    }
    while (v31 < a5);
    v66 = bed_GetcElem(a8, &v110);
    if ((v66 & 0x80000000) != 0)
      goto LABEL_82;
    if (v110)
    {
      v23 = v91;
      UTOISubTrace(v91, v20, a8, (uint64_t)"replacement string");
      v21 = v96;
      a6 = v89;
      a7 = v90;
      if (*(_DWORD *)(v96 + 16) != 1)
        goto LABEL_92;
      v66 = bed_GetpElem(a8, 0, &v108);
      if ((v66 & 0x80000000) == 0)
      {
        if (v110)
        {
          v73 = 0;
          v74 = 0;
          v75 = 1;
          v76 = v108;
          do
          {
            if (*(_BYTE *)(v76 + v73) == 16)
            {
              v77 = *(unsigned __int16 *)(v96 + 8);
              if (v74 >= v77)
              {
LABEL_85:
                v81 = v89;
                log_OutText(*(_QWORD *)(v20 + 32), a2, 5, 0, (uint64_t)"[UTOI] cant find non-deleted word to align new word number %d with", v70, v71, v72, v75);
                v82 = 0;
                goto LABEL_86;
              }
              v78 = v74;
              v79 = (int *)(*(_QWORD *)v96 + 12 * v74 + 4);
              while (1)
              {
                v80 = *v79;
                v79 += 3;
                if (v80 != 1)
                  break;
                if (v77 == ++v78)
                  goto LABEL_85;
              }
              *(_WORD *)(*(_QWORD *)v96 + 12 * (unsigned __int16)v78 + 8) = v73;
              ++v75;
              v74 = (unsigned __int16)v78 + 1;
            }
            ++v73;
          }
          while (v73 < v110);
        }
        v81 = v89;
        v82 = 1;
LABEL_86:
        if (v88 >= 5 && *(_WORD *)(v96 + 8))
        {
          v84 = 0;
          v85 = 0;
          do
          {
            log_OutText(*(_QWORD *)(v20 + 32), v92, 5, 0, (uint64_t)"[UTOI] [%d] origWordPos=%d, newPos=%d, bDeleted=%d", v70, v71, v72, v85++);
            v84 += 12;
          }
          while (v85 < *(unsigned __int16 *)(v96 + 8));
        }
        v21 = v96;
        v23 = v91;
        a6 = v81;
        if (v82)
          *(_DWORD *)(v96 + 12) = 0;
        goto LABEL_92;
      }
LABEL_82:
      v83 = v66;
      goto LABEL_94;
    }
    log_OutText(*(_QWORD *)(v20 + 32), a2, 5, 0, (uint64_t)"[UTOI] deleting region, no replacement text found", v67, v68, v69, v87);
    a6 = v89;
    a7 = v90;
    v21 = v96;
    v23 = v91;
  }
LABEL_92:
  v83 = utoin_IncrReplaceCurrentRegion(a6, a7, a8, a5, (uint64_t *)v21);
  if ((v83 & 0x80000000) == 0)
    UTOITrace(v23, v20, a6, a7, (uint64_t)"END of normalization");
LABEL_94:
  v43 = 0;
LABEL_95:
  if (v106)
  {
    heap_Free(*(_QWORD **)(v20 + 8), v107);
    v107 = 0;
  }
  if (v43)
    heap_Free(*(_QWORD **)(v20 + 8), (uint64_t)v43);
  return v83;
}

uint64_t DoSpell(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int a11, unsigned __int8 a12)
{
  uint64_t v16;
  unsigned __int16 i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  char *v23;
  char *v24;
  unsigned __int16 v25;
  _OWORD v29[21];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a5)
    return 0;
  v16 = 0;
  for (i = 0; i < a5; v16 = i)
  {
    memset(v29, 0, sizeof(v29));
    v21 = wordm_sysdct_CharLookup_Chinese(a3, (unsigned __int8 *)(a4 + i), (unsigned __int16)(a5 - i), (uint64_t)v29, a12, a11, "normal");
    if ((v21 & 0x80000000) != 0)
      break;
    if ((LODWORD(v29[0]) - 2) > 3)
    {
      log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] (utoi position %d len %d not in dict", v18, v19, v20, v16);
    }
    else
    {
      v22 = (unsigned __int16)(strlen((const char *)&v29[4] + 12) + 3);
      v23 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), v22);
      if (!v23)
        return 2350915594;
      v24 = v23;
      bzero(v23, v22);
      if (i)
      {
        strcpy(v24, (const char *)&v29[4] + 12);
      }
      else
      {
        *(_WORD *)v24 = 32;
        strcat(v24, (const char *)&v29[4] + 12);
      }
      *(_WORD *)&v24[strlen(v24)] = 32;
      v25 = strlen(v24);
      v21 = bed_Insert(a6, v24, v25);
      if ((v21 & 0x80000000) != 0)
      {
        heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v24);
        return v21;
      }
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v24);
    }
    if (WORD3(v29[4]))
      i += WORD3(v29[4]);
    else
      i = a5;
  }
  return v21;
}

uint64_t DoLatin(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, char **a5)
{
  uint64_t v9;
  int v10;
  char *v11;
  __int16 v13;
  char __s[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;
  unsigned __int8 v31[64];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v13 = 256;
  *(_OWORD *)__s = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0;
  __strncpy_chk();
  v31[a4] = 0;
  v9 = sysdct_char_LookUp_Chinese(a2, v31, __s, &v13, 0, 0, "normal");
  if ((v9 & 0x80000000) == 0)
  {
    if (v13)
    {
      v10 = strlen(__s);
      v11 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, (v10 + 1));
      *a5 = v11;
      if (v11)
        strcpy(v11, __s);
      else
        return 2350915594;
    }
    else
    {
      *a5 = 0;
    }
  }
  return v9;
}

uint64_t wordm_sysdct_Lookup_Chinese(_QWORD *a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, unsigned int a5, const char *a6)
{
  uint64_t result;
  unsigned int v10;
  unsigned int v13;
  int v14;
  unsigned __int16 v16;
  unsigned int v17;
  int v18;
  size_t v19;
  int v20;
  unsigned __int16 v21;
  uint64_t v22;
  char v23;
  unsigned __int16 v24;
  unsigned int v25;
  _OWORD v26[16];
  char v27;
  unsigned __int8 __src[65];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  result = 2370838535;
  if (a1 && a2 && a4)
  {
    v25 = 0;
    memset(v26, 0, sizeof(v26));
    v27 = 0;
    *(_OWORD *)(a4 + 4) = 0u;
    *(_DWORD *)a4 = 0;
    *(_OWORD *)(a4 + 20) = 0u;
    *(_OWORD *)(a4 + 36) = 0u;
    *(_OWORD *)(a4 + 52) = 0u;
    *(_BYTE *)(a4 + 68) = 0;
    *(_WORD *)(a4 + 70) = 0;
    *(_DWORD *)(a4 + 72) = 0;
    *(_OWORD *)(a4 + 76) = 0u;
    *(_OWORD *)(a4 + 92) = 0u;
    *(_OWORD *)(a4 + 108) = 0u;
    *(_OWORD *)(a4 + 124) = 0u;
    *(_OWORD *)(a4 + 140) = 0u;
    *(_OWORD *)(a4 + 156) = 0u;
    *(_OWORD *)(a4 + 172) = 0u;
    *(_OWORD *)(a4 + 188) = 0u;
    *(_OWORD *)(a4 + 204) = 0u;
    *(_OWORD *)(a4 + 220) = 0u;
    *(_OWORD *)(a4 + 236) = 0u;
    *(_OWORD *)(a4 + 252) = 0u;
    *(_BYTE *)(a4 + 332) = 0;
    *(_OWORD *)(a4 + 268) = 0u;
    *(_OWORD *)(a4 + 284) = 0u;
    *(_OWORD *)(a4 + 300) = 0u;
    *(_OWORD *)(a4 + 316) = 0u;
    if (a3 >= 0x40)
      v10 = 64;
    else
      v10 = a3;
    *(_WORD *)(a4 + 334) = 0;
    if (v10 && a5)
    {
      v13 = 0;
      v14 = 0;
      do
      {
        v14 += utf8_determineUTF8CharLength(a2[(unsigned __int16)v14]);
        ++v13;
      }
      while (v10 > (unsigned __int16)v14 && v13 < a5);
      __memmove_chk();
      __src[(unsigned __int16)v14] = 0;
      if ((_WORD)v14)
      {
        *(_DWORD *)a4 = 2;
        v24 = 256;
        v16 = v14;
        while (1)
        {
          result = sysdct_word_LookUp_Chinese(a1, (uint64_t)__src, v16, v26, &v24, a6);
          v17 = v24;
          if ((_DWORD)result || v24 != 256)
            break;
          v25 = (unsigned __int16)(v16 - 1);
          utf8_GetPreviousValidUtf8Offset((uint64_t)__src, &v25);
          v16 = v25;
          v17 = 256;
          v24 = 256;
          if ((unsigned __int16)(v25 - 1) >= (unsigned __int16)v14)
            goto LABEL_28;
        }
        if ((result & 0x80000000) != 0)
          return result;
LABEL_28:
        if ((unsigned __int16)(v16 - 1) < (unsigned __int16)v14)
        {
          *((_BYTE *)v26 + v17) = 0;
          __strcpy_chk();
          *(_DWORD *)(a4 + 72) = 16;
          *(_WORD *)(a4 + 334) = v24;
          __src[v16] = 0;
          __strcpy_chk();
          result = 0;
          *(_WORD *)(a4 + 70) = v16;
          return result;
        }
        v21 = utf8_determineUTF8CharLength(*a2);
        memmove((void *)(a4 + 4), __src, v21);
        *(_BYTE *)(a4 + v21 + 4) = 0;
        *(_WORD *)(a4 + 70) = v21;
        v24 = 256;
        if (sysdct_char_LookUp_Chinese(a1, __src, (void *)(a4 + 76), &v24, 0, 0, a6)
          || (v22 = v24, *(_BYTE *)(a4 + v24 + 76) = 0, *(_WORD *)(a4 + 334) = v22, !v22))
        {
          result = 0;
          *(_DWORD *)a4 = 0;
          return result;
        }
        if (*(_BYTE *)(a4 + 76) == 35 && *(_BYTE *)(a4 + 77))
        {
          v23 = atoi((const char *)(a4 + 77));
          result = 0;
          *(_BYTE *)(a4 + 76) = v23;
          *(_BYTE *)(a4 + 77) = 0;
          *(_WORD *)(a4 + 334) = 1;
          return result;
        }
        return 0;
      }
    }
    else
    {
      __src[0] = 0;
    }
    v18 = 0;
    do
    {
      v19 = (unsigned __int16)v18;
      v20 = a2[(unsigned __int16)v18++];
    }
    while (v20 == 32);
    memmove((void *)(a4 + 4), a2, v19);
    return 0;
  }
  return result;
}

uint64_t wparserDctMaxWords_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2350915585;
  result = 0;
  *a2 = &IWparserImplMaxWords;
  return result;
}

uint64_t wparser_impl_maxwords_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t MaxWordLen;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  MaxWordLen = 2350915591;
  v19 = 0;
  if (a5)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v19);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(_QWORD *)(v19 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjOpen: Begin", v10, v11, v12, v18);
      v13 = (_QWORD *)heap_Calloc(*(_QWORD **)(v19 + 8), 1, 56);
      if (v13)
      {
        *v13 = a3;
        v13[1] = a4;
        v13[2] = v19;
        v13[3] = "WPARSER_IMPL";
        *(_QWORD *)a5 = v13;
        *(_DWORD *)(a5 + 8) = 87652;
        MaxWordLen = wparser_impl_maxwords_loc_GetMaxWordLen((uint64_t)v13);
        log_OutText(*(_QWORD *)(v19 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjOpen: End (%x)", v14, v15, v16, MaxWordLen);
      }
      else
      {
        return 2350915594;
      }
    }
  }
  return MaxWordLen;
}

uint64_t wparser_impl_maxwords_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((v6 & 0x80000000) == 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : Begin", v3, v4, v5, v12);
    heap_Free(*(_QWORD **)(v7 + 8), a1);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : End (%x)", v8, v9, v10, v6);
  }
  return v6;
}

uint64_t wparser_impl_maxwords_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t MaxWordLen;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((v3 & 0x80000000) != 0)
    return v3;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjReopen : Begin", v4, v5, v6, v12);
  MaxWordLen = wparser_impl_maxwords_loc_GetMaxWordLen(a1);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjReopen : End (%x)", v8, v9, v10, MaxWordLen);
  return MaxWordLen;
}

uint64_t wparser_impl_maxwords_Init(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t result;
  int v10;

  v10 = 7549556;
  result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, int *, uint64_t))(*a3 + 72))(a3[1], a3[2], &v10, a1 + 44);
    if ((result & 0x80000000) == 0)
    {
      *(_QWORD *)(a1 + 32) = a3;
      *(_DWORD *)(a1 + 40) = a6;
    }
  }
  return result;
}

uint64_t wparser_impl_maxwords_Normalize(uint64_t a1, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 a11, _WORD *a12, int a13, uint64_t a14, uint64_t a15)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    a3[a5] = 0;
    if (*(_DWORD *)(a1 + 44) != 1)
      return DoMaxWords(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), a3, a5, a6, a7, a8, a9, a10, a11, a12, a13, a15, *(_DWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
    result = wordm_mapt2s(*(_QWORD **)(a1 + 32), (uint64_t)a3, a5);
    if ((result & 0x80000000) == 0)
      return DoMaxWords(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), a3, a5, a6, a7, a8, a9, a10, a11, a12, a13, a15, *(_DWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  }
  return result;
}

uint64_t wparser_impl_maxwords_Spell(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, uint64_t a10, unsigned int a11)
{
  uint64_t result;
  uint64_t v18;

  result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    LOWORD(v18) = a9;
    return DoSpell(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD **)(a1 + 32), a3, a5, a6, a7, a8, v18, a10, a11, *(_BYTE *)(a1 + 48));
  }
  return result;
}

uint64_t wparser_impl_maxwords_Latin(uint64_t a1, int a2, uint64_t a3, int a4, char **a5)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
    return DoLatin(*(_QWORD *)(a1 + 16), *(_QWORD **)(a1 + 32), a3, a4, a5);
  return result;
}

uint64_t wparser_impl_maxwords_End(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 56);
}

uint64_t wparser_impl_maxwords_ProcessStart(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 56);
}

uint64_t wparser_impl_maxwords_ProcessEnd(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 56);
}

uint64_t wparser_impl_maxwords_loc_GetMaxWordLen(uint64_t a1)
{
  uint64_t Str;
  uint64_t v3;
  int v4;
  char *v6;

  v6 = 0;
  Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"maxdctwordlen", &v6);
  if ((Str & 0x80000000) != 0)
  {
    v3 = 0;
    LOBYTE(v4) = 7;
    goto LABEL_5;
  }
  v3 = Str;
  v4 = atoi(v6);
  if ((v4 - 1) <= 0xFE)
  {
LABEL_5:
    *(_BYTE *)(a1 + 48) = v4;
    return v3;
  }
  return 15;
}

uint64_t DoDag(_QWORD *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 a11, _WORD *a12, int a13, uint64_t a14, int a15, unsigned __int8 a16)
{
  _QWORD *v21;
  uint64_t v22;
  unsigned int LogLevel;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned __int16 v35;
  void *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  int v42;
  int v43;
  int v44;
  unsigned __int16 v45;
  unsigned __int16 v46;
  unsigned __int8 *v47;
  int v48;
  unsigned int v49;
  __int16 v50;
  uint64_t v51;
  unsigned __int16 v52;
  uint64_t v53;
  char *v54;
  void *v55;
  uint64_t v56;
  unsigned __int16 v57;
  unsigned __int16 v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *i;
  unsigned int v73;
  int v74;
  uint64_t v75;
  int *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  unsigned __int16 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  int v97;
  const char *v98;
  int v99;
  unsigned __int16 v100;
  int v101;
  int v102;
  unsigned __int16 v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int16 v115;
  unsigned int v116;
  BOOL v117;
  int v118;
  unsigned int v120;
  char *v121;
  size_t v122;
  char *v123;
  char *v124;
  unsigned __int16 v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  _WORD *v129;
  _WORD *v130;
  _WORD *v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  __int16 v135;
  unsigned int v136;
  _WORD *v137;
  unsigned int NextUtf8Offset;
  unsigned int WCharFromUtf8;
  unsigned int v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  __int16 v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unsigned int v157;
  unsigned __int16 v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int *v162;
  int v163;
  int v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182[2];
  uint64_t v183;
  _WORD *v184;
  int v185;
  unsigned int v186;
  _BOOL4 v187;
  unsigned int v188;
  _WORD *v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  int v194;
  _WORD *v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v202;
  __int16 v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unsigned __int16 v207;
  unsigned __int16 v208;
  unsigned int v209;
  char __s[16];
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  char v226;
  uint64_t v227;

  v21 = a1;
  v22 = a14;
  v227 = *MEMORY[0x1E0C80C00];
  v207 = 0;
  v205 = 0;
  v206 = 0;
  v204 = 0;
  v203 = 0;
  *(_WORD *)(a14 + 8) = 0;
  *(_QWORD *)(v22 + 12) = 0x100000001;
  LogLevel = log_GetLogLevel(a1[4]);
  result = bed_GetpElem(a7, 0xFFFFu, &v206);
  if ((result & 0x80000000) != 0)
    return result;
  v196 = a16;
  v28 = a15;
  if ((_DWORD)a5 && (_DWORD)a5 != (unsigned __int16)*(_DWORD *)(v206 + 36))
    *(_DWORD *)(v22 + 16) = 0;
  log_OutText(v21[4], a2, 5, 0, (uint64_t)"[UTOI] (normalizing %d bytes - region length %d %s)", v25, v26, v27, a5);
  UTOITrace(LogLevel > 4, (uint64_t)v21, a6, a7, (uint64_t)"START of normalization");
  if (v28 == 1)
  {
    result = getDomainSegmentations((uint64_t)v21, (_QWORD *)a3, (uint64_t)a4, a5, a7, a10, &v204, &v203, 0, v196);
    if ((result & 0x80000000) != 0)
      return result;
  }
  v186 = LogLevel;
  v187 = LogLevel > 4;
  v188 = -1711267830;
  log_OutText(v21[4], a2, 5, 0, (uint64_t)"[DAG]: Entering", v29, v30, v31, v167);
  v32 = heap_Calloc((_QWORD *)v21[1], 1, 16);
  if (!v32)
    return 2583699466;
  v33 = v32;
  v202 = a2;
  if ((_DWORD)a5)
  {
    v34 = 0;
    v35 = 0;
    do
    {
      ++v35;
      v34 = (unsigned __int16)(utf8_determineUTF8CharLength(a4[v34]) + v34);
    }
    while (v34 < a5);
  }
  else
  {
    v35 = 0;
  }
  *(_DWORD *)(v33 + 8) = v35;
  *(_DWORD *)(v33 + 12) = 13285840;
  v36 = (void *)heap_Calloc((_QWORD *)v21[1], v35 + 1, 24);
  *(_QWORD *)v33 = v36;
  if (!v36)
    return 2583699466;
  if (((v35 + 1) & 0xFFFE) != 0)
    v37 = (unsigned __int16)(v35 + 1);
  else
    v37 = 1;
  bzero(v36, 24 * v37);
  if (!(_DWORD)a5)
  {
LABEL_49:
    log_OutText(v21[4], v202, 5, 0, (uint64_t)"[DAG]: searching the heaviest edge from all possible paths", v38, v39, v40, v168);
    v63 = *(_QWORD *)v33;
    if (!*(_QWORD *)v33)
    {
      dag_free(v21, v33);
      log_OutText(v21[4], v202, 5, 0, (uint64_t)"[DAG]: Failed search the path, some error", v106, v107, v108, v169);
      return 2583699462;
    }
    v181 = v22;
    v183 = a8;
    v192 = a5;
    v176 = a6;
    v178 = a7;
    v64 = *(unsigned int *)(v33 + 8);
    if ((v64 & 0x80000000) == 0)
    {
      v65 = v64 + 1;
      v66 = (_QWORD *)(v63 + 16);
      do
      {
        *v66 = -2147483647;
        v66 += 3;
        --v65;
      }
      while (v65);
    }
    *(_QWORD *)(v63 + 16) = 0xFFFFFFFF00000000;
    log_OutText(v21[4], v202, 5, 0, (uint64_t)"[DAG]: All possible path, <vertex_from: vertex_to>: weight, accumulated weight", v60, v61, v62, v169);
    if ((int)v64 >= 1)
    {
      v70 = 0;
      v71 = *(_QWORD *)v33;
      do
      {
        for (i = *(uint64_t **)(v71 + 24 * v70); i; i = (uint64_t *)*i)
        {
          v73 = *((_DWORD *)i + 3);
          v74 = *((_DWORD *)i + 4) + *(_DWORD *)(v71 + 24 * v70 + 16);
          log_OutText(v21[4], v202, 5, 0, (uint64_t)"<%d: %d>: %d, %d", v67, v68, v69, v70);
          v71 = *(_QWORD *)v33;
          v75 = *(_QWORD *)v33 + 24 * v73;
          v77 = *(_DWORD *)(v75 + 16);
          v76 = (int *)(v75 + 16);
          if (v74 > v77)
          {
            *v76 = v74;
            v78 = v71 + 24 * v73;
            *(_DWORD *)(v78 + 20) = v70;
            *(_QWORD *)(v78 + 8) = i[3];
          }
        }
        ++v70;
      }
      while (v70 != v64);
    }
    v79 = heap_Calloc((_QWORD *)v21[1], 1, 24);
    if (v79)
    {
      v80 = v79;
      v81 = heap_Calloc((_QWORD *)v21[1], (v64 + 2), 4);
      *(_QWORD *)v80 = v81;
      if (v81)
      {
        v82 = heap_Calloc((_QWORD *)v21[1], (v64 + 2), 8);
        *(_QWORD *)(v80 + 8) = v82;
        v86 = *(_DWORD **)v80;
        if (v82)
        {
          *(_WORD *)(v80 + 16) = 0;
          *v86 = v64;
          v87 = v202;
          if ((v64 & 0x80000000) == 0)
          {
            v88 = 0;
            do
            {
              ++v88;
              v89 = *(_QWORD *)v33 + 24 * v64;
              v90 = *(_QWORD *)(v89 + 8);
              LODWORD(v64) = *(_DWORD *)(v89 + 20);
              v86[v88] = v64;
              *(_QWORD *)(*(_QWORD *)(v80 + 8) + 8 * v88) = v90;
            }
            while ((v64 & 0x80000000) == 0);
            *(_WORD *)(v80 + 16) = v88;
          }
          log_OutText(v21[4], v202, 5, 0, (uint64_t)"[DAG]: Leaving", v83, v84, v85, v170);
          v91 = (unsigned __int16)(*(_WORD *)(v80 + 16) - 1);
          v197 = heap_Calloc((_QWORD *)v21[1], v91, 336);
          v179 = v91;
          if (v197)
          {
            if ((_DWORD)v91)
            {
              v92 = 0;
              v93 = 0;
              v199 = v21;
              v173 = v80;
              do
              {
                v94 = v197 + 336 * v92;
                *(_DWORD *)v94 = 2;
                *(_OWORD *)(v94 + 20) = 0u;
                *(_OWORD *)(v94 + 36) = 0u;
                *(_OWORD *)(v94 + 52) = 0u;
                *(_BYTE *)(v94 + 68) = 0;
                *(_DWORD *)(v94 + 72) = 16;
                *(_OWORD *)(v94 + 92) = 0u;
                *(_OWORD *)(v94 + 108) = 0u;
                *(_OWORD *)(v94 + 124) = 0u;
                *(_OWORD *)(v94 + 140) = 0u;
                *(_OWORD *)(v94 + 156) = 0u;
                *(_OWORD *)(v94 + 172) = 0u;
                *(_OWORD *)(v94 + 188) = 0u;
                *(_OWORD *)(v94 + 204) = 0u;
                *(_OWORD *)(v94 + 220) = 0u;
                *(_OWORD *)(v94 + 236) = 0u;
                *(_OWORD *)(v94 + 252) = 0u;
                *(_BYTE *)(v94 + 332) = 0;
                v184 = (_WORD *)(v94 + 334);
                *(_OWORD *)(v94 + 4) = 0u;
                v95 = (void *)(v94 + 4);
                *(_WORD *)(v94 + 334) = 0;
                *(_WORD *)(v94 + 70) = 0;
                v189 = (_WORD *)(v94 + 70);
                *(_OWORD *)(v94 + 76) = 0u;
                v96 = (const char *)(v94 + 76);
                *(_OWORD *)(v94 + 268) = 0u;
                *(_OWORD *)(v94 + 284) = 0u;
                *(_OWORD *)(v94 + 300) = 0u;
                *(_OWORD *)(v94 + 316) = 0u;
                v97 = *(_DWORD *)(*(_QWORD *)v80 + 4 * (v91 - v92 - 1))
                    - *(_DWORD *)(*(_QWORD *)v80 + 4 * (v91 - v92));
                v194 = v93;
                v98 = &a4[(unsigned __int16)v93];
                v99 = strlen(v98);
                v100 = 0;
                v101 = 0;
                while (1)
                {
                  v102 = v100;
                  if (v100 >= (unsigned __int16)v99)
                    break;
                  v103 = utf8_determineUTF8CharLength(v98[v100]);
                  v100 = v102 + v103;
                  if (v97 == (unsigned __int16)++v101)
                  {
                    v104 = v102 + v103;
                    if ((_WORD)v102 + v103)
                      goto LABEL_75;
                    break;
                  }
                }
                v104 = v99;
LABEL_75:
                *v189 = v104;
                memcpy(v95, v98, (unsigned __int16)v104);
                *(_BYTE *)((unsigned __int16)*v189 + v197 + 336 * v92 + 5) = 0;
                v80 = v173;
                v91 = v179;
                v105 = (v179 - v92);
                if (*(_QWORD *)(*(_QWORD *)(v173 + 8) + 8 * v105))
                {
                  __strcat_chk();
                  *v184 = strlen(v96) + 1;
                  v21 = v199;
                  heap_Free((_QWORD *)v199[1], *(_QWORD *)(*(_QWORD *)(v173 + 8) + 8 * v105));
                }
                else
                {
                  __strcpy_chk();
                  *v184 = *v189 + 1;
                  v21 = v199;
                }
                v93 = v104 + v194;
                ++v92;
              }
              while (v92 != v179);
              v188 = 0;
              v87 = v202;
            }
            else
            {
              v188 = 0;
            }
          }
          heap_Free((_QWORD *)v21[1], *(_QWORD *)v80);
          heap_Free((_QWORD *)v21[1], *(_QWORD *)(v80 + 8));
          heap_Free((_QWORD *)v21[1], v80);
          dag_free(v21, v33);
          result = v188;
          if (!v197)
            return result;
          if ((_DWORD)v91)
          {
            v113 = 0;
            v114 = 0;
            v174 = 0;
            v115 = 0;
            v195 = a12;
            v172 = a11;
            v185 = a13;
            do
            {
              v190 = -1944051702;
              v116 = *(_DWORD *)(v197 + 336 * v113);
              v117 = v116 > 5;
              v118 = (1 << v116) & 0x34;
              if (v117 || v118 == 0)
              {
                log_OutText(v21[4], v87, 5, 0, (uint64_t)"[UTOI] position %d (word.cbOrth=%d) not in dict", v110, v111, v112, v114);
                v174 = 1;
              }
              else
              {
                if (v185)
                {
                  v120 = bed_Insert(v183, &szWORD_BEG_1, 1);
                  if ((v120 & 0x80000000) != 0)
                    goto LABEL_150;
                  ++*v195;
                }
                v121 = (char *)(v197 + 336 * v113 + 76);
                v122 = (unsigned __int16)(strlen(v121) + 1);
                v123 = (char *)heap_Alloc(v21[1], v122);
                if (!v123)
                  return 2350915594;
                v124 = v123;
                bzero(v123, v122);
                strcpy(v124, v121);
                v125 = strlen(v121);
                v120 = bed_Insert(v183, v124, v125);
                if ((v120 & 0x80000000) != 0)
                  goto LABEL_151;
                *v195 += strlen(v121);
                heap_Free((_QWORD *)v21[1], (uint64_t)v124);
                if (v185)
                {
                  v120 = bed_Insert(v183, &szWORD_END_2, 1);
                  if ((v120 & 0x80000000) != 0)
                    goto LABEL_150;
                  ++*v195;
                }
                v120 = bed_GetcElem(v183, &v207);
                if ((v120 & 0x80000000) != 0)
                {
LABEL_150:
                  v124 = 0;
LABEL_151:
                  v190 = v120;
                  goto LABEL_165;
                }
                v126 = *(_DWORD *)(a3 + 32);
                v127 = a10;
                v128 = v197 + 336 * v113;
                v129 = (_WORD *)(v128 + 70);
                v130 = (_WORD *)(v128 + 334);
                if (v126)
                  v131 = (_WORD *)(v128 + 334);
                else
                  v131 = (_WORD *)(v128 + 70);
                if (*(unsigned __int16 *)(a10 + 18) < (unsigned __int16)(*(_WORD *)(a10 + 16)
                                                                                      + 4 * *v131
                                                                                      + 5))
                {
                  v120 = datac_RequestBlock(a9, v172, (unsigned __int16)(*(_WORD *)(a10 + 16) + 4 * *v131 + 5), &a10);
                  if ((v120 & 0x80000000) != 0)
                    goto LABEL_150;
                  v127 = a10;
                  v126 = *(_DWORD *)(a3 + 32);
                }
                v132 = *(_QWORD *)(v127 + 8);
                v133 = *(unsigned __int16 *)(v127 + 16);
                v134 = *(unsigned __int16 *)(v127 + 2);
                v135 = v132 + v134 * v133;
                __s[4] = 0;
                *(_DWORD *)__s = 0;
                if (v126)
                {
                  v136 = (unsigned __int16)*v130;
                  v137 = (_WORD *)(v132 + v134 * (unint64_t)v133);
                  if (*v130)
                  {
                    NextUtf8Offset = 0;
                    v137 = (_WORD *)(v132 + v134 * (unint64_t)v133);
                    do
                    {
                      if (!*(_BYTE *)(v197 + 336 * v113 + NextUtf8Offset + 76))
                        break;
                      WCharFromUtf8 = utf8_GetWCharFromUtf8(v121, NextUtf8Offset, v136);
                      LH_itoa(WCharFromUtf8, __s, 0x10u);
                      *v137 = *(_WORD *)&__s[2];
                      v137[1] = *(_WORD *)__s;
                      v137 += 2;
                      NextUtf8Offset = (unsigned __int16)utf8_GetNextUtf8Offset(v121, NextUtf8Offset);
                      v136 = (unsigned __int16)*v130;
                    }
                    while (v136 > NextUtf8Offset);
                  }
                }
                else
                {
                  v137 = (_WORD *)(v132 + v134 * (unint64_t)v133);
                  if (*v129)
                  {
                    v140 = 0;
                    v137 = (_WORD *)(v132 + v134 * (unint64_t)v133);
                    do
                    {
                      v141 = v140 + v114;
                      if (v140 + v114 >= v192)
                        break;
                      v142 = utf8_GetWCharFromUtf8(a4, v140 + v114, v192);
                      LH_itoa(v142, __s, 0x10u);
                      *v137 = *(_WORD *)&__s[2];
                      v137[1] = *(_WORD *)__s;
                      v137 += 2;
                      v140 = (unsigned __int16)(utf8_GetNextUtf8Offset(a4, v141) - v114);
                    }
                    while (v140 < (unsigned __int16)*v129);
                  }
                }
                *(_BYTE *)v137 = 0;
                *(_WORD *)(a10 + 16) += (_WORD)v137 - v135 + 1;
                v87 = v202;
                v91 = v179;
              }
              if (*(_DWORD *)(v181 + 16) == 1)
              {
                v143 = *(unsigned __int16 *)(v181 + 8);
                v144 = *(_QWORD *)v181;
                if (v143 >= *(unsigned __int16 *)(v181 + 10))
                {
                  v145 = heap_Realloc((uint64_t *)v21[1], v144, 12 * *(unsigned __int16 *)(v181 + 10) + 121);
                  if (!v145)
                    goto LABEL_164;
                  v144 = v145;
                  *(_QWORD *)v181 = v145;
                  *(_WORD *)(v181 + 10) += 10;
                  v143 = *(unsigned __int16 *)(v181 + 8);
                }
                v146 = v143;
                v147 = v144 + 12 * v143;
                *(_WORD *)v147 = v115;
                *(_QWORD *)(v147 + 2) = 0;
                v148 = *(_WORD *)(v197 + 336 * v113 + 70);
                if (v174 == 1)
                  *(_DWORD *)(v144 + 12 * v146 + 4) = 1;
                v115 += v148;
                *(_WORD *)(v181 + 8) = v146 + 1;
              }
              v114 = ++v113;
            }
            while (v113 != v91);
          }
          if (!(_DWORD)v192)
            goto LABEL_162;
          v149 = bed_GetcElem(v183, &v207);
          if ((v149 & 0x80000000) != 0)
            goto LABEL_152;
          if (v207)
          {
            UTOISubTrace(v187, (uint64_t)v21, v183, (uint64_t)"replacement string");
            if (*(_DWORD *)(v181 + 16) == 1)
            {
              v149 = bed_GetpElem(v183, 0, &v205);
              if ((v149 & 0x80000000) == 0)
              {
                if (v207)
                {
                  v156 = 0;
                  v157 = 0;
                  v158 = 1;
                  v159 = v205;
                  do
                  {
                    if (*(_BYTE *)(v159 + v156) == 16)
                    {
                      v160 = *(unsigned __int16 *)(v181 + 8);
                      if (v157 >= v160)
                      {
LABEL_155:
                        log_OutText(v21[4], v87, 5, 0, (uint64_t)"[UTOI] cant find non-deleted word to align new word number %d with", v153, v154, v155, v158);
                        v164 = 0;
                        goto LABEL_156;
                      }
                      v161 = v157;
                      v162 = (int *)(*(_QWORD *)v181 + 12 * v157 + 4);
                      while (1)
                      {
                        v163 = *v162;
                        v162 += 3;
                        if (v163 != 1)
                          break;
                        if (v160 == ++v161)
                          goto LABEL_155;
                      }
                      *(_WORD *)(*(_QWORD *)v181 + 12 * (unsigned __int16)v161 + 8) = v156;
                      ++v158;
                      v157 = (unsigned __int16)v161 + 1;
                    }
                    ++v156;
                  }
                  while (v156 < v207);
                }
                v164 = 1;
LABEL_156:
                if (v186 >= 5 && *(_WORD *)(v181 + 8))
                {
                  v165 = 0;
                  v166 = 0;
                  do
                  {
                    log_OutText(v21[4], v202, 5, 0, (uint64_t)"[UTOI] [%d] origWordPos=%d, newPos=%d, bDeleted=%d", v153, v154, v155, v166++);
                    v165 += 12;
                  }
                  while (v166 < *(unsigned __int16 *)(v181 + 8));
                }
                if (v164)
                  *(_DWORD *)(v181 + 12) = 0;
                goto LABEL_162;
              }
LABEL_152:
              v190 = v149;
              goto LABEL_164;
            }
          }
          else
          {
            log_OutText(v21[4], v87, 5, 0, (uint64_t)"[UTOI] deleting region, no replacement text found", v150, v151, v152, v171);
          }
LABEL_162:
          v190 = utoin_IncrReplaceCurrentRegion(v176, v178, v183, v192, (uint64_t *)v181);
          if ((v190 & 0x80000000) == 0)
            UTOITrace(v187, (uint64_t)v21, v176, v178, (uint64_t)"END of normalization");
LABEL_164:
          v124 = 0;
LABEL_165:
          if (v203)
          {
            heap_Free((_QWORD *)v21[1], v204);
            v204 = 0;
          }
          if (v124)
            heap_Free((_QWORD *)v21[1], (uint64_t)v124);
          heap_Free((_QWORD *)v21[1], v197);
          return v190;
        }
        if (v86)
        {
          heap_Free((_QWORD *)v21[1], (uint64_t)v86);
          *(_QWORD *)v80 = 0;
        }
      }
      v109 = *(_QWORD *)(v80 + 8);
      if (v109)
      {
        heap_Free((_QWORD *)v21[1], v109);
        *(_QWORD *)(v80 + 8) = 0;
      }
      heap_Free((_QWORD *)v21[1], v80);
    }
    return 2583699466;
  }
  v180 = v22;
  *(_QWORD *)v182 = a8;
  v175 = a6;
  v177 = a7;
  v41 = 0;
  v42 = 0;
  v43 = v196;
  v198 = (uint64_t)v21;
  v191 = a5;
  do
  {
    v44 = a5;
    v45 = 0;
    v46 = 0;
    v47 = (unsigned __int8 *)&a4[(unsigned __int16)v42];
    v193 = v42;
    v48 = v44 - (unsigned __int16)v42;
    v49 = (unsigned __int16)(v44 - v42);
    while (v45 < v49)
    {
      v45 += utf8_determineUTF8CharLength(v47[v45]);
      if (v43 == ++v46)
      {
        v46 = v43;
        if (v45)
          goto LABEL_24;
        break;
      }
    }
    v45 = v48;
LABEL_24:
    v209 = 0;
    v226 = 0;
    v224 = 0u;
    v225 = 0u;
    v222 = 0u;
    v223 = 0u;
    v220 = 0u;
    v221 = 0u;
    v218 = 0u;
    v219 = 0u;
    v216 = 0u;
    v217 = 0u;
    v214 = 0u;
    v215 = 0u;
    v212 = 0u;
    v213 = 0u;
    *(_OWORD *)__s = 0u;
    v211 = 0u;
    v208 = 256;
    if (!v45 || v48 < v45)
      goto LABEL_172;
    v50 = 0;
    v51 = 1;
    v52 = v45;
    do
    {
      v53 = sysdct_word_LookUp_Chinese((_QWORD *)a3, (uint64_t)v47, v52, __s, &v208, &byte_1DEBD87CE);
      if ((v53 & 0x80000000) != 0)
        return v53;
      if (v208 != 256)
      {
        v54 = strrchr(__s, 92);
        if (v54)
          v51 = (atoi(v54 + 1) + 1);
        if (v46)
        {
          dag_insert_edge_0(v198, v202, (uint64_t *)v33, v41, v41 + v46, v51, 0);
          ++v50;
        }
      }
      v209 = (unsigned __int16)(v52 - 1);
      utf8_GetPreviousValidUtf8Offset((uint64_t)v47, &v209);
      v208 = 256;
      if (v46)
        --v46;
      else
        v46 = 0;
      if (v48 < (unsigned __int16)v209)
        break;
      v52 = v209;
    }
    while ((unsigned __int16)(v209 - 1) < v45);
    v21 = (_QWORD *)v198;
    v43 = v196;
    if (!v50)
    {
LABEL_172:
      v53 = sysdct_char_LookUp_Chinese((_QWORD *)a3, v47, __s, &v208, 0, 0, "normal");
      if (!(_DWORD)v53)
      {
        v55 = (void *)heap_Calloc((_QWORD *)v21[1], 1, v208 + 1);
        if (!v55)
        {
          v53 = 2583699466;
          goto LABEL_88;
        }
        v56 = (uint64_t)v55;
        v57 = v208;
        if (v208)
        {
          v58 = v208 - 1;
          if (v208 == 1)
          {
LABEL_45:
            v57 = 1;
          }
          else
          {
            while (__s[v58] == 92)
            {
              v208 = --v57;
              if (!--v58)
                goto LABEL_45;
            }
          }
        }
        memcpy(v55, __s, v57);
        *(_BYTE *)(v56 + v208) = 0;
        dag_insert_edge_0((uint64_t)v21, v202, (uint64_t *)v33, v41, v41 + 1, 1, v56);
        v53 = 0;
      }
    }
    v59 = utf8_determineUTF8CharLength(*v47);
    a5 = v191;
    v42 = v193 + v59;
    ++v41;
  }
  while (v191 > (unsigned __int16)(v193 + v59));
  a6 = v175;
  a7 = v177;
  v22 = v180;
  a8 = *(_QWORD *)v182;
  if ((v53 & 0x80000000) == 0)
    goto LABEL_49;
LABEL_88:
  heap_Free((_QWORD *)v21[1], v33);
  return v53;
}

_QWORD *dag_free(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  if (a2)
  {
    v3 = result;
    v4 = *(_QWORD *)a2;
    if (v4)
    {
      v5 = *(_DWORD *)(a2 + 8);
      v6 = (v5 + 1);
      if (v5 != -1)
      {
        v7 = 0;
        do
        {
          v8 = *(_QWORD **)(v4 + 24 * v7);
          if (v8)
          {
            do
            {
              v9 = (_QWORD *)*v8;
              heap_Free((_QWORD *)v3[1], (uint64_t)v8);
              v8 = v9;
            }
            while (v9);
            v4 = *(_QWORD *)a2;
          }
          *(_QWORD *)(v4 + 24 * v7++) = 0;
        }
        while (v7 != v6);
      }
    }
    heap_Free((_QWORD *)v3[1], v4);
    return heap_Free((_QWORD *)v3[1], a2);
  }
  return result;
}

uint64_t dag_insert_edge_0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 32);
  if (result)
  {
    v15 = result;
    *(_DWORD *)(result + 8) = a4;
    *(_DWORD *)(result + 12) = a5;
    *(_QWORD *)(result + 24) = a7;
    v16 = uint32_log2(a6);
    *(_DWORD *)(v15 + 16) = v16 - uint32_log2(*((unsigned int *)a3 + 3));
    v17 = *a3;
    v18 = 24 * a4;
    *(_QWORD *)v15 = *(_QWORD *)(*a3 + v18);
    *(_QWORD *)(v17 + v18) = v15;
    return log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"[DAG]: insert edge (vertex, Chinese Character Positions and weight): %d %d %d %d", v19, v20, v21, a4);
  }
  return result;
}

uint64_t wparserDag_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2350915585;
  result = 0;
  *a2 = &IWparserImplDag;
  return result;
}

uint64_t wparser_impl_dag_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t MaxWordLen;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  MaxWordLen = 2350915591;
  v20 = 0;
  if (a5)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v20);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(_QWORD *)(v20 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL DAG ObjOpen: Begin", v10, v11, v12, v19);
      v13 = (_QWORD *)heap_Calloc(*(_QWORD **)(v20 + 8), 1, 56);
      if (v13)
      {
        v14 = v13;
        *v13 = a3;
        v13[1] = a4;
        v13[2] = v20;
        v13[3] = "WPARSER_IMPL";
        MaxWordLen = wparser_impl_maxwords_loc_GetMaxWordLen((uint64_t)v13);
        *(_QWORD *)a5 = v14;
        *(_DWORD *)(a5 + 8) = 87652;
        log_OutText(*(_QWORD *)(v20 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL DAG ObjOpen: End (%x)", v15, v16, v17, MaxWordLen);
      }
      else
      {
        return 2350915594;
      }
    }
  }
  return MaxWordLen;
}

uint64_t wparser_impl_dag_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((v6 & 0x80000000) == 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL DAG ObjClose : Begin", v3, v4, v5, v12);
    heap_Free(*(_QWORD **)(v7 + 8), a1);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL DAG ObjClose : End (%x)", v8, v9, v10, v6);
  }
  return v6;
}

uint64_t wparser_impl_dag_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t MaxWordLen;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((v3 & 0x80000000) != 0)
    return v3;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL DAG ObjReopen : Begin", v4, v5, v6, v12);
  MaxWordLen = wparser_impl_maxwords_loc_GetMaxWordLen(a1);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL DAG ObjReopen : End (%x)", v8, v9, v10, MaxWordLen);
  return MaxWordLen;
}

uint64_t wparser_impl_dag_Init(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t result;
  int v10;

  v10 = 7549556;
  result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, int *, uint64_t))(*a3 + 72))(a3[1], a3[2], &v10, a1 + 44);
    if ((result & 0x80000000) == 0)
    {
      *(_QWORD *)(a1 + 32) = a3;
      *(_DWORD *)(a1 + 40) = a6;
    }
  }
  return result;
}

uint64_t wparser_impl_dag_Normalize(uint64_t a1, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 a11, _WORD *a12, int a13, uint64_t a14, uint64_t a15)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    a3[a5] = 0;
    if (*(_DWORD *)(a1 + 44) != 1)
      return DoDag(*(_QWORD **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), a3, a5, a6, a7, a8, a9, a10, a11, a12, a13, a15, *(_DWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
    result = wordm_mapt2s(*(_QWORD **)(a1 + 32), (uint64_t)a3, a5);
    if ((result & 0x80000000) == 0)
      return DoDag(*(_QWORD **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), a3, a5, a6, a7, a8, a9, a10, a11, a12, a13, a15, *(_DWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  }
  return result;
}

uint64_t wparser_impl_dag_Spell(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, uint64_t a10, unsigned int a11)
{
  uint64_t result;
  uint64_t v18;

  result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    LOWORD(v18) = a9;
    return DoSpell(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD **)(a1 + 32), a3, a5, a6, a7, a8, v18, a10, a11, *(_BYTE *)(a1 + 48));
  }
  return result;
}

uint64_t wparser_impl_dag_Latin(uint64_t a1, int a2, uint64_t a3, int a4, char **a5)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
    return DoLatin(*(_QWORD *)(a1 + 16), *(_QWORD **)(a1 + 32), a3, a4, a5);
  return result;
}

uint64_t wparser_impl_dag_End(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 56);
}

uint64_t wparser_impl_dag_ProcessStart(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 56);
}

uint64_t wparser_impl_dag_ProcessEnd(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 56);
}

uint64_t wparserDctPlusRules_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2350915585;
  result = 0;
  *a2 = &IWparserImplDctPlusRules;
  return result;
}

uint64_t wparser_impl_plusrules_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v19 = 0;
  if (!a5)
    return 2350915591;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v19);
  if ((inited & 0x80000000) == 0)
  {
    log_OutText(*(_QWORD *)(v19 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjOpen: Begin", v8, v9, v10, v18);
    v12 = (_QWORD *)heap_Calloc(*(_QWORD **)(v19 + 8), 1, 88);
    if (v12)
    {
      *v12 = a3;
      v12[1] = a4;
      v16 = v19;
      v12[2] = v19;
      v12[3] = 0;
      v12[4] = "WPARSER_IMPL";
      *(_QWORD *)a5 = v12;
      *(_DWORD *)(a5 + 8) = 87652;
      log_OutText(*(_QWORD *)(v16 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjOpen: End (%x)", v13, v14, v15, inited);
    }
    else
    {
      return 2350915594;
    }
  }
  return inited;
}

uint64_t wparser_impl_plusrules_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v6 & 0x80000000) == 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : Begin", v3, v4, v5, v12);
    heap_Free(*(_QWORD **)(v7 + 8), a1);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : End (%x)", v8, v9, v10, v6);
  }
  return v6;
}

uint64_t wparser_impl_plusrules_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v6 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v6 & 0x80000000) == 0)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : Begin", v3, v4, v5, v11);
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : End (%x)", v7, v8, v9, v6);
  }
  return v6;
}

uint64_t wparser_impl_plusrules_Init(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, const char *a5, int a6, _BYTE *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v28;

  v12 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v12 & 0x80000000) != 0)
    return v12;
  *(_QWORD *)(a1 + 40) = a3;
  if (!strcmp(a5, "win874"))
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = xcode_Utf16leToWin874;
    *(_QWORD *)(a1 + 56) = 0;
    if (*a7
      && (v18 = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE *, uint64_t))(*a3 + 64))(a3[1], a3[2], a7, a1 + 64),
          (v18 & 0x80000000) != 0))
    {
      v17 = v18;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), *(_QWORD *)(a1 + 32), 1819, 0, v19, v20, v21, v22, v28);
    }
    else
    {
      *(_QWORD *)(a1 + 48) = 0;
      v17 = o2t_ObjOpen(*(_WORD **)a1, *(_QWORD *)(a1 + 8), (_QWORD *)(a1 + 48));
      if ((v17 & 0x80000000) != 0)
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), *(_QWORD *)(a1 + 32), 52002, "%s%s", v23, v24, v25, v26, a5);
      else
        *(_DWORD *)(a1 + 80) = a6;
    }
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), *(_QWORD *)(a1 + 32), 1802, "%s%s", v13, v14, v15, v16, a5);
    return 2350915591;
  }
  return v17;
}

uint64_t wparser_impl_plusrules_Normalize(uint64_t a1, int a2, const char *a3, unsigned int a4, __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 a11, _WORD *a12, int a13, uint64_t a14, uint64_t a15)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v39;
  _WORD v40[5];

  v40[0] = a5;
  v39 = 0;
  v21 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v21 & 0x80000000) != 0)
    return v21;
  v25 = 2350915594;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF8: %s", v22, v23, v24, (uint64_t)a3);
  v26 = Utf8_Utf8NbrOfSymbols(a3);
  v27 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 2 * (v26 + 1));
  if (v27)
  {
    v28 = v27;
    v29 = utf8_Utf8ToUtf16((uint64_t)a3, a4, 0, v27, 2 * v26, &v39, 0);
    if ((v29 & 0x80000000) != 0)
    {
      v34 = 0;
    }
    else
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF16: %s", v30, v31, v32, v28);
      v33 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 2 * (v39 + 1));
      if (!v33)
        return v25;
      v34 = v33;
      v29 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, _WORD *, _QWORD))(a1 + 72))(*(_QWORD *)(a1 + 56), v28, (unsigned __int16)v39, v33, v40, *(_QWORD *)(a1 + 64));
      if ((v29 & 0x80000000) == 0)
      {
        *(_BYTE *)(v34 + v40[0]) = 0;
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL WIN874: %s", v35, v36, v37, v34);
        v29 = DoDctPlusRules(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), *(_QWORD **)(a1 + 40), *(_QWORD *)(a1 + 48), v34, v40[0], a6, a7, a8, a9, a10, a11, a12, a13, a15, *(_DWORD *)(a1 + 80), (uint64_t)a3, v28);
      }
    }
    v25 = v29;
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v28);
    if (v34)
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v34);
  }
  return v25;
}

uint64_t wparser_impl_plusrules_Spell(uint64_t a1, int a2, const char *a3, unsigned int a4, unsigned __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, uint64_t a10, unsigned int a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  int v36;
  unsigned __int16 v37;

  v37 = a5;
  v36 = 0;
  v17 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v17 & 0x80000000) != 0)
    return v17;
  v21 = 2350915594;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF8: %s", v18, v19, v20, (uint64_t)a3);
  v22 = Utf8_Utf8NbrOfSymbols(a3);
  v23 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 2 * (v22 + 1));
  if (v23)
  {
    v24 = v23;
    v25 = utf8_Utf8ToUtf16((uint64_t)a3, a4, 0, v23, 2 * v22, &v36, 0);
    if ((v25 & 0x80000000) != 0)
    {
      v30 = 0;
    }
    else
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF16: %s", v26, v27, v28, v24);
      v29 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 2 * (v36 + 1));
      if (!v29)
        return v21;
      v30 = v29;
      v25 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, unsigned __int16 *, _QWORD))(a1 + 72))(*(_QWORD *)(a1 + 56), v24, (unsigned __int16)v36, v29, &v37, *(_QWORD *)(a1 + 64));
      if ((v25 & 0x80000000) == 0)
      {
        *(_BYTE *)(v30 + v37) = 0;
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL WIN874: %s", v31, v32, v33, v30);
        LOWORD(v35) = a9;
        v25 = DoDctPlusRulesSpell(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), *(_QWORD **)(a1 + 40), v30, v37, a6, a7, a8, v35, a10, a11);
      }
    }
    v21 = v25;
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v24);
    if (v30)
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v30);
  }
  return v21;
}

uint64_t wparser_impl_plusrules_Latin(uint64_t a1, int a2, char *a3, unsigned int a4, char **a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v27;
  unsigned __int16 v28;

  v28 = a4;
  v27 = 0;
  v9 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v9 & 0x80000000) != 0)
    return v9;
  v13 = 2350915594;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF8: %s", v10, v11, v12, (uint64_t)a3);
  v14 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 2 * a4 + 2);
  if (v14)
  {
    v15 = v14;
    v16 = utf8_Utf8ToUtf16((uint64_t)a3, a4, 0, v14, 2 * a4, &v27, 0);
    if ((v16 & 0x80000000) != 0)
    {
      v21 = 0;
    }
    else
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF16: %s", v17, v18, v19, v15);
      v20 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 2 * (v27 + 1));
      if (!v20)
        return v13;
      v21 = (unsigned __int8 *)v20;
      v16 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, unsigned __int16 *, _QWORD))(a1 + 72))(*(_QWORD *)(a1 + 56), v15, (unsigned __int16)v27, v20, &v28, *(_QWORD *)(a1 + 64));
      if ((v16 & 0x80000000) == 0)
      {
        v21[v28] = 0;
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL WIN874: %s", v22, v23, v24, (uint64_t)v21);
        v13 = DoTHTLatin(*(_QWORD *)(a1 + 16), *(_QWORD **)(a1 + 40), v21, v28, a5);
        if (a5)
        {
          v25 = *a3;
          if ((v25 & 0x80000000) == 0)
            *(_WORD *)*a5 = v25;
        }
        goto LABEL_12;
      }
    }
    v13 = v16;
LABEL_12:
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v15);
    if (v21)
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v21);
  }
  return v13;
}

uint64_t wparser_impl_plusrules_End(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v5;

  result = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((result & 0x80000000) == 0)
  {
    v5 = *(_QWORD *)(a1 + 48);
    if (!v5)
      return safeh_HandleCheck(a1, a2, 87652, 88);
    result = wparser_ObjClose1(v5);
    if ((result & 0x80000000) == 0)
      return safeh_HandleCheck(a1, a2, 87652, 88);
  }
  return result;
}

uint64_t wparser_impl_plusrules_ProcessStart(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wparser_impl_plusrules_ProcessEnd(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wordm_sysdct_Lookup_Thai(_QWORD *a1, char *__s, uint64_t a3, int a4, const char *a5)
{
  uint64_t result;
  uint64_t v10;
  unsigned __int16 v11;
  unsigned int v12;
  unsigned __int16 v13;
  uint64_t v14;
  unsigned __int16 v15;
  _BOOL4 v16;
  int v17;
  __int16 v18;
  int v19;
  int v20;
  size_t v21;
  int v22;
  unsigned __int16 v23;
  _BYTE v24[257];
  _BYTE v25[65];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  result = 2370838535;
  if (a1 && __s && a3)
  {
    LODWORD(v10) = a4;
    *(_DWORD *)a3 = 0;
    *(_OWORD *)(a3 + 4) = 0u;
    *(_OWORD *)(a3 + 20) = 0u;
    *(_OWORD *)(a3 + 36) = 0u;
    *(_OWORD *)(a3 + 52) = 0u;
    *(_BYTE *)(a3 + 68) = 0;
    *(_WORD *)(a3 + 70) = 0;
    *(_OWORD *)(a3 + 76) = 0u;
    *(_DWORD *)(a3 + 72) = 0;
    *(_OWORD *)(a3 + 92) = 0u;
    *(_OWORD *)(a3 + 108) = 0u;
    *(_OWORD *)(a3 + 124) = 0u;
    *(_OWORD *)(a3 + 140) = 0u;
    *(_OWORD *)(a3 + 156) = 0u;
    *(_OWORD *)(a3 + 172) = 0u;
    *(_OWORD *)(a3 + 188) = 0u;
    *(_OWORD *)(a3 + 204) = 0u;
    *(_OWORD *)(a3 + 220) = 0u;
    *(_OWORD *)(a3 + 236) = 0u;
    *(_OWORD *)(a3 + 252) = 0u;
    *(_BYTE *)(a3 + 332) = 0;
    *(_OWORD *)(a3 + 268) = 0u;
    *(_OWORD *)(a3 + 284) = 0u;
    *(_OWORD *)(a3 + 300) = 0u;
    *(_OWORD *)(a3 + 316) = 0u;
    *(_WORD *)(a3 + 334) = 0;
    v11 = strlen(__s);
    if ((v11 & 0xFFC0) != 0)
      v12 = 64;
    else
      v12 = v11;
    __memmove_chk();
    v25[v12] = 0;
    if (v12)
    {
      *(_DWORD *)a3 = 2;
      v13 = 0;
      if (v12 <= v10)
        v10 = v12;
      else
        v10 = v10;
      if ((_DWORD)v10)
      {
        v14 = v10;
        v15 = v10;
        do
        {
          if ((v25[v14] + 49) >= 0xCu)
          {
            v16 = 0;
            v17 = v25[v14];
            if ((v17 - 231) >= 7 && v17 != 229)
            {
              v16 = 0;
              v19 = v25[(v14 - 1)];
              if ((v19 - 224) >= 5 && v19 != 230)
              {
                v23 = 256;
                result = sysdct_word_LookUp_Thai(a1, (uint64_t)v25, v15, v24, &v23, a5);
                if ((result & 0x80000000) != 0)
                  return result;
                v13 = v23;
                v16 = v23 != 256;
              }
            }
          }
          else
          {
            v16 = 0;
          }
          v18 = v15 + v16;
          v15 = v15 + v16 - 1;
          v14 = v15;
        }
        while (v10 > (unsigned __int16)(v18 - 2) && !v16);
      }
      else
      {
        v15 = 0;
        v14 = 0;
      }
      if (v10 <= (unsigned __int16)(v15 - 1))
      {
        result = 0;
        *(_BYTE *)(a3 + 4) = v25[0];
        *(_BYTE *)(a3 + 5) = 0;
        *(_WORD *)(a3 + 70) = 1;
        *(_DWORD *)a3 = 0;
      }
      else
      {
        v24[v13] = 0;
        __strcpy_chk();
        *(_DWORD *)(a3 + 72) = 16;
        *(_WORD *)(a3 + 334) = v23;
        if (v25[v14] == 230)
        {
          __strcat_chk();
          *(_WORD *)(a3 + 334) += v23;
          ++v15;
        }
        v25[v15] = 0;
        __strcpy_chk();
        result = 0;
        *(_WORD *)(a3 + 70) = v15;
      }
    }
    else
    {
      v20 = 0;
      do
      {
        v21 = (unsigned __int16)v20;
        v22 = __s[(unsigned __int16)v20++];
      }
      while (v22 == 32);
      memmove((void *)(a3 + 4), __s, v21);
      return 0;
    }
  }
  return result;
}

uint64_t DoDctPlusRules(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int16 a12, _WORD *a13, int a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18)
{
  unsigned int LogLevel;
  uint64_t DomainSegmentations;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int16 v30;
  unsigned __int16 v31;
  unsigned __int16 *v32;
  unsigned int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned __int16 v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  int v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  _BOOL4 v73;
  uint64_t v75;
  uint64_t v76;
  __int16 v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int16 v83;
  uint64_t v84;
  __int16 v85;
  _OWORD v86[4];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int16 v115;
  _BYTE v116[580];
  _DWORD __dst[86];
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v85 = -1;
  memset(__dst, 0, 336);
  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  v107 = 0u;
  v108 = 0u;
  v105 = 0u;
  v106 = 0u;
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  v99 = 0u;
  v100 = 0u;
  v97 = 0u;
  v98 = 0u;
  v95 = 0u;
  v96 = 0u;
  v93 = 0u;
  v94 = 0u;
  v91 = 0u;
  v92 = 0u;
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  memset(v86, 0, sizeof(v86));
  v84 = 0;
  v83 = 0;
  v81 = 0;
  v82 = 0;
  v80 = 0;
  v79 = 0;
  bzero(v116, 0x244uLL);
  LOWORD(v87) = 0;
  BYTE2(v87) = 0;
  v115 = 0;
  *(_WORD *)(a15 + 8) = 0;
  *(_QWORD *)(a15 + 12) = 0x100000001;
  LogLevel = log_GetLogLevel(*(_QWORD *)(a1 + 32));
  v73 = LogLevel > 4;
  DomainSegmentations = bed_GetpElem(a8, 0xFFFFu, &v84);
  if ((DomainSegmentations & 0x80000000) != 0)
    return DomainSegmentations;
  if (!(_DWORD)a6 && (unsigned __int16)*(_DWORD *)(v84 + 36))
    *(_DWORD *)(a15 + 16) = 0;
  log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] (normalizing %d bytes - region length %d %s)", v25, v26, v27, a6);
  UTOITrace(v73, a1, a7, a8, (uint64_t)"START of normalization");
  if (a16 == 1)
  {
    DomainSegmentations = getDomainSegmentations(a1, a3, a5, a6, a8, a11, &v81, (__int16 *)&v80 + 1, 1, 0);
    if ((DomainSegmentations & 0x80000000) != 0)
      return DomainSegmentations;
  }
  v76 = a2;
  v71 = a7;
  v72 = a8;
  v85 = -1;
  v75 = a6;
  if (!(_DWORD)a6)
  {
    v47 = a11;
LABEL_48:
    LOBYTE(__dst[1]) = 0;
    HIWORD(__dst[17]) = 0;
    LOBYTE(__dst[19]) = 0;
    HIWORD(__dst[83]) = 0;
    v49 = a1;
    v50 = handleWordMatch(a1, v76, a4, a5, a6, (unsigned __int16 *)__dst, &v85, (uint64_t)v116, (char *)v86, a9, a14, a13, a10, v47, a12, a17, a18, &v80, &v79);
    if ((v50 & 0x80000000) == 0)
    {
      if (!(_DWORD)v75)
        goto LABEL_76;
      v50 = bed_GetcElem(a9, &v83);
      if ((v50 & 0x80000000) == 0)
      {
        if (!v83)
        {
          log_OutText(*(_QWORD *)(a1 + 32), v76, 5, 0, (uint64_t)"[UTOI] deleting region, no replacement text found", v51, v52, v53, (uint64_t)v70);
          goto LABEL_76;
        }
        UTOISubTrace(v73, a1, a9, (uint64_t)"replacement string");
        if (*(_DWORD *)(a15 + 16) != 1)
        {
LABEL_76:
          v48 = utoin_IncrReplaceCurrentRegion(v71, v72, a9, v75, (uint64_t *)a15);
          if ((v48 & 0x80000000) == 0)
            UTOITrace(v73, a1, v71, v72, (uint64_t)"END of normalization");
          goto LABEL_78;
        }
        v50 = bed_GetpElem(a9, 0, &v82);
        if ((v50 & 0x80000000) == 0)
        {
          if (!v83)
          {
            v66 = 1;
            v61 = LogLevel;
            goto LABEL_70;
          }
          v57 = 0;
          v58 = 0;
          v59 = 1;
          v60 = v82;
          v61 = LogLevel;
          while (1)
          {
            if (*(_BYTE *)(v60 + v57) == 16)
            {
              v62 = *(unsigned __int16 *)(a15 + 8);
              if (v58 >= v62)
              {
LABEL_68:
                log_OutText(*(_QWORD *)(a1 + 32), v76, 5, 0, (uint64_t)"[UTOI] cant find non-deleted word to align new word number %d with", v54, v55, v56, v59);
                v66 = 0;
LABEL_70:
                if (v61 >= 5 && *(_WORD *)(a15 + 8))
                {
                  v67 = 0;
                  v68 = 0;
                  do
                  {
                    log_OutText(*(_QWORD *)(a1 + 32), v76, 5, 0, (uint64_t)"[UTOI] [%d] origWordPos=%d, newPos=%d, bDeleted=%d", v54, v55, v56, v68++);
                    v67 += 12;
                  }
                  while (v68 < *(unsigned __int16 *)(a15 + 8));
                }
                if (v66)
                  *(_DWORD *)(a15 + 12) = 0;
                goto LABEL_76;
              }
              v63 = v58;
              v64 = (int *)(*(_QWORD *)a15 + 12 * v58 + 4);
              while (1)
              {
                v65 = *v64;
                v64 += 3;
                if (v65 != 1)
                  break;
                if (v62 == ++v63)
                  goto LABEL_68;
              }
              *(_WORD *)(*(_QWORD *)a15 + 12 * (unsigned __int16)v63 + 8) = v57;
              ++v59;
              v58 = (unsigned __int16)v63 + 1;
            }
            if (++v57 >= (unint64_t)v83)
            {
              v66 = 1;
              goto LABEL_70;
            }
          }
        }
      }
    }
    v48 = v50;
    goto LABEL_78;
  }
  v28 = 0;
  LOWORD(v29) = 0;
  v30 = 0;
  LOWORD(a6) = 0;
  while (1)
  {
    if (a16 == 1 && HIWORD(v80) > (unsigned __int16)v29)
    {
      v31 = 0;
      v29 = (unsigned __int16)v29;
      v32 = (unsigned __int16 *)(v81 + 340 * (unsigned __int16)v29);
      while (1)
      {
        v33 = *v32;
        if (v33 > (unsigned __int16)a6)
          break;
        v32 += 170;
        if (v33 == (unsigned __int16)a6)
          v31 = v29;
        ++v29;
        if (v33 == (unsigned __int16)a6 || v29 >= HIWORD(v80))
        {
          if (v33 != (unsigned __int16)a6)
            break;
          memcpy(__dst, (const void *)(v81 + 340 * v31 + 4), 0x150uLL);
          goto LABEL_23;
        }
      }
    }
    v38 = wordm_sysdct_Lookup_Thai(a3, (char *)(a5 + (unsigned __int16)a6), (uint64_t)__dst, 22, "normal");
    if ((v38 & 0x80000000) != 0)
    {
LABEL_45:
      v48 = v38;
      goto LABEL_46;
    }
LABEL_23:
    if (__dst[0] == 5 || __dst[0] == 2)
    {
      v38 = handleWordMatch(a1, v76, a4, a5, a6, (unsigned __int16 *)__dst, &v85, (uint64_t)v116, (char *)v86, a9, a14, a13, a10, a11, a12, a17, a18, &v80, &v79);
      if ((v38 & 0x80000000) != 0)
        goto LABEL_45;
      v38 = bed_GetcElem(a9, &v83);
      if ((v38 & 0x80000000) != 0)
        goto LABEL_45;
      v40 = 0;
    }
    else
    {
      log_OutText(*(_QWORD *)(a1 + 32), v76, 5, 0, (uint64_t)"[UTOI] position %d (word.cbOrth=%d) not in dict", v35, v36, v37, v28);
      if (v85 == -1)
        v85 = a6;
      v40 = 1;
    }
    if (*(_DWORD *)(a15 + 16) == 1)
      break;
    v46 = HIWORD(__dst[17]);
LABEL_42:
    LOWORD(a6) = v46 + a6;
    v28 = (unsigned __int16)a6;
    v47 = a11;
    if ((unsigned __int16)a6 >= v75)
      goto LABEL_48;
  }
  v41 = *(unsigned __int16 *)(a15 + 8);
  v42 = *(_QWORD *)a15;
  if (v41 < *(unsigned __int16 *)(a15 + 10))
  {
LABEL_38:
    v44 = v41;
    v45 = v42 + 12 * v41;
    *(_WORD *)v45 = v30;
    *(_QWORD *)(v45 + 2) = 0;
    v46 = HIWORD(__dst[17]);
    if (v40)
      *(_DWORD *)(v42 + 12 * v44 + 4) = 1;
    v30 += 3 * v46;
    *(_WORD *)(a15 + 8) = v44 + 1;
    goto LABEL_42;
  }
  v43 = heap_Realloc(*(uint64_t **)(a1 + 8), v42, 12 * *(unsigned __int16 *)(a15 + 10) + 121);
  if (v43)
  {
    v42 = v43;
    *(_QWORD *)a15 = v43;
    *(_WORD *)(a15 + 10) += 10;
    v41 = *(unsigned __int16 *)(a15 + 8);
    goto LABEL_38;
  }
  v48 = 2350915594;
LABEL_46:
  v49 = a1;
LABEL_78:
  if (HIWORD(v80))
    heap_Free(*(_QWORD **)(v49 + 8), v81);
  return v48;
}

uint64_t handleWordMatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, unsigned __int16 *a6, _WORD *a7, uint64_t a8, char *__dst, uint64_t a10, int a11, _WORD *a12, uint64_t a13, uint64_t a14, unsigned __int16 a15, uint64_t a16, uint64_t a17, _WORD *a18, _WORD *a19)
{
  uint64_t HexArg;
  char v27;
  _WORD *v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  __int16 v36;
  uint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  __int16 v42;
  size_t v43;
  char *v44;
  _BYTE *v45;
  uint64_t v46;
  unsigned __int16 v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _WORD *v52;
  _WORD *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  char v59;
  _BYTE __n[546];

  *(_QWORD *)&__n[522] = *MEMORY[0x1E0C80C00];
  HexArg = 2350915591;
  if (!a4 || !a6 || !a7 || !a8 || !__dst || !a10)
    return HexArg;
  v59 = 0;
  *(_WORD *)__n = 0;
  if ((__int16)*a7 == -1)
  {
    v27 = 0;
    HexArg = 0;
  }
  else
  {
    memmove(__dst, a6 + 2, a6[35]);
    *((_WORD *)__dst + 32) = a6[35];
    memmove(__dst + 66, a6 + 38, a6[167]);
    *((_WORD *)__dst + 289) = a6[167];
    *(_WORD *)__n = 512;
    memset(&__n[2], 0, 512);
    HexArg = o2t_Transcribe(a3, (_BYTE *)(a4 + (unsigned __int16)*a7), (unsigned __int16)(a5 - *a7), a8, (unsigned __int16 *)__dst, &__n[2], (unsigned __int16 *)__n, &v59);
    if ((HexArg & 0x80000000) != 0)
      return HexArg;
    v27 = v59;
  }
  v29 = a18;
  v28 = a19;
  v30 = a16;
  v31 = a17;
  v32 = a15;
  v34 = a13;
  v33 = a14;
  v35 = a11;
  v36 = *(_WORD *)(a8 + 578);
  if (v36 && (v27 & 1) == 0)
  {
    if (a11)
    {
      v37 = bed_Insert(a10, &szWORD_BEG_2, 1);
      if ((v37 & 0x80000000) != 0)
        return v37;
      v49 = a17;
      ++*a12;
      v36 = *(_WORD *)(a8 + 578);
    }
    else
    {
      v49 = a17;
    }
    v38 = (unsigned __int16)(v36 + 1);
    v39 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), v38);
    if (!v39)
      return 2350915594;
    v40 = v39;
    bzero(v39, v38);
    strncpy(v40, (const char *)(a8 + 66), *(unsigned __int16 *)(a8 + 578));
    v40[*(unsigned __int16 *)(a8 + 578)] = 0;
    v41 = bed_Insert(a10, v40, *(unsigned __int16 *)(a8 + 578));
    if ((v41 & 0x80000000) != 0)
    {
LABEL_44:
      HexArg = v41;
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v40);
      return HexArg;
    }
    *a12 += *(_WORD *)(a8 + 578);
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v40);
    v31 = v49;
    if (a11)
    {
      v37 = bed_Insert(a10, &szWORD_END_3, 1);
      if ((v37 & 0x80000000) != 0)
        return v37;
      ++*a12;
    }
    HexArg = getHexArg(a1, a2, *(unsigned __int16 *)(a8 + 64), a13, a15, a14, a16, v49, a18, a19);
    if ((HexArg & 0x80000000) != 0)
      return HexArg;
    v27 = v59;
    v30 = a16;
    v32 = a15;
    v28 = a19;
    v33 = a14;
    v34 = a13;
    v29 = a18;
    v35 = a11;
  }
  v42 = *(_WORD *)__n;
  if (*(_WORD *)__n && ((v27 & 2) == 0 || !*((_WORD *)__dst + 32)))
  {
    v51 = v34;
    v52 = v29;
    v53 = v28;
    v54 = v33;
    v55 = v32;
    v56 = v30;
    v57 = v35;
    if (v35)
    {
      v37 = bed_Insert(a10, &szWORD_BEG_2, 1);
      if ((v37 & 0x80000000) != 0)
        return v37;
      v50 = v31;
      ++*a12;
      v42 = *(_WORD *)__n;
    }
    else
    {
      v50 = v31;
    }
    v43 = (unsigned __int16)(v42 + 1);
    v44 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), v43);
    HexArg = 2350915594;
    if (!v44)
      return HexArg;
    v40 = v44;
    bzero(v44, v43);
    strncpy(v40, &__n[2], *(unsigned __int16 *)__n);
    v40[*(unsigned __int16 *)__n] = 0;
    v41 = bed_Insert(a10, v40, *(unsigned __int16 *)__n);
    if ((v41 & 0x80000000) == 0)
    {
      *a12 += *(_WORD *)__n;
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v40);
      if (!v57)
      {
LABEL_37:
        HexArg = getHexArg(a1, a2, (unsigned __int16)(a5 - *a7), v51, v55, v54, v56, v50, v52, v53);
        if ((HexArg & 0x80000000) != 0)
          return HexArg;
        v27 = v59;
        goto LABEL_39;
      }
      v37 = bed_Insert(a10, &szWORD_END_3, 1);
      if ((v37 & 0x80000000) == 0)
      {
        ++*a12;
        goto LABEL_37;
      }
      return v37;
    }
    goto LABEL_44;
  }
LABEL_39:
  if ((v27 & 2) != 0)
  {
    v46 = (unsigned __int16)*a7;
    v47 = a5 - v46;
    memmove((void *)a8, (const void *)(a4 + v46), v47);
    memmove((void *)(a8 + v47), a6 + 2, a6[35]);
    *(_WORD *)(a8 + 64) = a6[35] + v47;
    memmove((void *)(a8 + 66), &__n[2], *(unsigned __int16 *)__n);
    v45 = __n;
  }
  else
  {
    memmove((void *)a8, a6 + 2, a6[35]);
    *(_WORD *)(a8 + 64) = a6[35];
    v45 = a6 + 167;
    memmove((void *)(a8 + 66), a6 + 38, a6[167]);
  }
  *(_WORD *)(a8 + 578) = *(_WORD *)v45;
  *a7 = -1;
  return HexArg;
}

uint64_t DoDctPlusRulesSpell(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int a11)
{
  uint64_t v15;
  unsigned __int16 i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  char *v22;
  char *v23;
  unsigned __int16 v24;
  __int16 v25;
  _OWORD v29[21];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a5)
    return 0;
  v15 = 0;
  for (i = 0; i < a5; v15 = i)
  {
    memset(v29, 0, sizeof(v29));
    v20 = wordm_sysdct_CharLookup_Thai(a3, (unsigned __int8 *)(a4 + i), (unsigned __int16)(a5 - i), (uint64_t)v29, 0x16u, a11, "normal");
    if ((v20 & 0x80000000) != 0)
      break;
    if ((LODWORD(v29[0]) - 2) > 3)
    {
      log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] (utoi position %d len %d not in dict", v17, v18, v19, v15);
    }
    else
    {
      v21 = (unsigned __int16)(strlen((const char *)&v29[4] + 12) + 3);
      v22 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), v21);
      if (!v22)
        return 2350915594;
      v23 = v22;
      bzero(v22, v21);
      if (i)
      {
        strcpy(v23, (const char *)&v29[4] + 12);
      }
      else
      {
        *(_WORD *)v23 = 32;
        strcat(v23, (const char *)&v29[4] + 12);
      }
      *(_WORD *)&v23[strlen(v23)] = 32;
      v24 = strlen(v23);
      v20 = bed_Insert(a6, v23, v24);
      if ((v20 & 0x80000000) != 0)
      {
        heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v23);
        return v20;
      }
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v23);
    }
    v25 = strlen((const char *)v29 + 4);
    if (v25)
      i += v25;
    else
      i = a5;
  }
  return v20;
}

uint64_t getHexArg(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, _WORD *a9, _WORD *a10)
{
  uint64_t v14;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned __int16 v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46[3];
  uint64_t v47;

  v47 = a6;
  if (a3)
  {
    v14 = a6;
    v18 = 2350915584;
    v19 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 2 * a3 + 2);
    if (v19)
    {
      v20 = v19;
      v44 = a4;
      v45 = a5;
      v21 = (unsigned __int16)*a9 + a3;
      if (LH_wcslen(a8) >= v21)
      {
        v23 = (unsigned __int16 *)(a8 + 2 * (unsigned __int16)*a9);
        v22 = a3;
        LH_wcsncpy(v20, v23, a3);
      }
      else
      {
        v22 = 0;
      }
      *(_WORD *)(v20 + 2 * v22) = 0;
      v24 = utf8_16BitNbrOfUtf8Chars(v20);
      v28 = v24 - 1;
      if (v24 == 1)
      {
        log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] converted utf8 word length is 0, cant get hex args", v25, v26, v27, v43);
        v37 = *(_QWORD **)(a1 + 8);
        v38 = v20;
LABEL_20:
        heap_Free(v37, v38);
        return v18;
      }
      v29 = (unsigned __int16)(v24 - 1);
      v30 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v29 + 1);
      if (v30)
      {
        v31 = v30;
        strncpy(v30, (const char *)(a7 + (unsigned __int16)*a10), v28)[v29] = 0;
        log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] get hex args from UTF16Word(%s,pos=%d) UTF8Word(%s,pos=%d)", v32, v33, v34, v20);
        v35 = *(unsigned __int16 *)(v14 + 16);
        v36 = v35 + 2 * v28 + 1;
        if (*(unsigned __int16 *)(v14 + 18) >= v36)
        {
          v18 = 0;
        }
        else
        {
          v18 = datac_RequestBlock(v44, v45, (unsigned __int16)(v35 + 2 * v28 + 1), &v47);
          if ((v18 & 0x80000000) != 0)
          {
LABEL_19:
            heap_Free(*(_QWORD **)(a1 + 8), v20);
            v37 = *(_QWORD **)(a1 + 8);
            v38 = (uint64_t)v31;
            goto LABEL_20;
          }
          v14 = v47;
          v35 = *(unsigned __int16 *)(v47 + 16);
        }
        v39 = 0;
        v40 = (_BYTE *)(*(_QWORD *)(v14 + 8) + *(unsigned __int16 *)(v14 + 2) * (unint64_t)v35);
        *(_WORD *)(v14 + 16) = v36;
        do
        {
          v41 = v40;
          LH_itoa(v31[v39], v46, 0x10u);
          v46[2] = 0;
          *v41 = v46[0];
          v40 = v41 + 2;
          v41[1] = v46[1];
          ++v39;
        }
        while (v29 != v39);
        *v40 = 0;
        *a9 += a3;
        *a10 += v28;
        goto LABEL_19;
      }
      heap_Free(*(_QWORD **)(a1 + 8), v20);
      return 2350915594;
    }
    else
    {
      return 2350915594;
    }
  }
  else
  {
    v18 = 2350915584;
    log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] that parser : word length is 0, cant get hex args", a6, a7, a8, v43);
  }
  return v18;
}

uint64_t xcode_Utf16leToWin874(uint64_t a1, _WORD *a2, unsigned int a3, uint64_t a4, _WORD *a5)
{
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;

  result = 2370838535;
  if (a2 && a4 && a5)
  {
    v6 = 0;
    if (a3)
    {
      v7 = a3;
      while (v6 < (unsigned __int16)*a5)
      {
        v8 = (unsigned __int16)*a2;
        if (v8 > 0xFF)
        {
          switch(*a2)
          {
            case 0x2013:
              LOBYTE(v8) = -106;
              break;
            case 0x2014:
              LOBYTE(v8) = -105;
              break;
            case 0x2015:
            case 0x2016:
            case 0x2017:
            case 0x201A:
            case 0x201B:
            case 0x201E:
            case 0x201F:
            case 0x2020:
            case 0x2021:
            case 0x2023:
            case 0x2024:
            case 0x2025:
              goto LABEL_15;
            case 0x2018:
              LOBYTE(v8) = -111;
              break;
            case 0x2019:
              LOBYTE(v8) = -110;
              break;
            case 0x201C:
              LOBYTE(v8) = -109;
              break;
            case 0x201D:
              LOBYTE(v8) = -108;
              break;
            case 0x2022:
              LOBYTE(v8) = -107;
              break;
            case 0x2026:
              LOBYTE(v8) = -123;
              break;
            default:
              if (v8 == 8364)
              {
                LOBYTE(v8) = 0x80;
                break;
              }
LABEL_15:
              v9 = 0;
              if ((~v8 & 0xE00) != 0 || v8 - 3585 > 0x5A)
                goto LABEL_9;
              LOBYTE(v8) = v8 - 96;
              break;
          }
        }
        *(_BYTE *)(a4 + v6) = v8;
        v9 = 1;
LABEL_9:
        v6 += v9;
        ++a2;
        if (!--v7)
          goto LABEL_25;
      }
      return 2370838537;
    }
    else
    {
LABEL_25:
      result = 0;
      *a5 = v6;
    }
  }
  return result;
}

uint64_t mDictFind(char *__s2)
{
  const char *v2;
  uint64_t v3;

  v2 = (const char *)&pMorp_Dct;
  v3 = 3677;
  while (strcmp(v2, __s2))
  {
    v2 += 11;
    if (!--v3)
      return 82;
  }
  return v2[10];
}

uint64_t swapMRT(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;

  v3 = *(_DWORD *)(result + 89 + 4 * a2);
  *(_DWORD *)(result + 89 + 4 * a2) = *(_DWORD *)(result + 89 + 4 * a3);
  *(_DWORD *)(result + 89 + 4 * a3) = v3;
  return result;
}

__n128 swapMST(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __n128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[23];

  v3 = a1 + 346 + 71 * a2;
  v11 = *(_OWORD *)(v3 + 32);
  *(_OWORD *)v12 = *(_OWORD *)(v3 + 48);
  *(_QWORD *)&v12[15] = *(_QWORD *)(v3 + 63);
  v9 = *(__n128 *)v3;
  v10 = *(_OWORD *)(v3 + 16);
  v4 = a1 + 346 + 71 * a3;
  *(_OWORD *)v3 = *(_OWORD *)v4;
  v6 = *(_OWORD *)(v4 + 32);
  v5 = *(_OWORD *)(v4 + 48);
  v7 = *(_OWORD *)(v4 + 16);
  *(_QWORD *)(v3 + 63) = *(_QWORD *)(v4 + 63);
  *(_OWORD *)(v3 + 32) = v6;
  *(_OWORD *)(v3 + 48) = v5;
  *(_OWORD *)(v3 + 16) = v7;
  *(_QWORD *)(v4 + 63) = *(_QWORD *)&v12[15];
  *(_OWORD *)(v4 + 32) = v11;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)v12;
  result = v9;
  *(__n128 *)v4 = v9;
  *(_OWORD *)(v4 + 16) = v10;
  return result;
}

uint64_t o2t_ObjOpen(_WORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v10;

  v3 = 2370838535;
  v10 = 0;
  if (a3 && (InitRsrcFunction(a1, a2, &v10) & 0x80000000) == 0)
  {
    *a3 = 0;
    v7 = (_QWORD *)heap_Alloc(*(_QWORD *)(v10 + 8), 9440);
    if (v7)
    {
      v8 = v7;
      bzero(v7, 0x24E0uLL);
      v3 = 0;
      *v8 = a1;
      v8[1] = a2;
      v8[2] = v10;
      *a3 = v8;
    }
    else
    {
      return 2370838538;
    }
  }
  return v3;
}

uint64_t o2t_Transcribe(uint64_t a1, _BYTE *a2, unsigned int a3, uint64_t a4, unsigned __int16 *a5, char *__dst, unsigned __int16 *a7, char *a8)
{
  uint64_t v8;
  unsigned __int16 *v11;
  uint64_t v16;
  int v17;
  unsigned __int16 v18;
  int v19;
  char v20;
  uint64_t v21;
  size_t v22;
  size_t v23;
  char v24;
  char v25;
  uint64_t v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  unsigned __int16 v30;
  unsigned __int16 *v31;
  unsigned __int16 *__src;
  uint64_t v34;
  int v35;
  char v36;
  char v37[512];
  _BYTE v38[64];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v8 = 2370838535;
  v36 = 0;
  if (!a1 || !a2 || (unsigned __int16)(a3 - 64) < 0xFFC1u)
    return v8;
  v11 = a7;
  v34 = *a7;
  v35 = 0;
  v37[0] = 0;
  if (a3 < 2)
  {
    ReadThaiChar((char *)*a2, __dst);
    v17 = *(unsigned __int16 *)(a4 + 64);
    if (*(_WORD *)(a4 + 64) || a5[32])
    {
      v30 = strlen(__dst);
      __memcpy_chk();
      v37[v30] = 0;
      goto LABEL_15;
    }
LABEL_43:
    v8 = 0;
    *v11 = strlen(__dst);
    goto LABEL_44;
  }
  if (SParser(a1, a2, a3) != 255)
  {
    v16 = WParser(a1, __dst, v11, &v36, &v35);
    if ((v16 & 0x80000000) != 0)
      return v16;
    if (v35 != 255)
    {
      if (v36 && (*(_WORD *)(a4 + 64) || a5[32]))
      {
        __strncpy_chk();
        v37[v34] = 0;
        v30 = *v11;
        v17 = *(unsigned __int16 *)(a4 + 64);
LABEL_15:
        v18 = 0;
        v19 = v17 != 0;
        __src = a5;
        if (a5[32])
          v19 |= 2u;
        if (v19 == 3)
          v20 = 7;
        else
          v20 = v19;
        v31 = v11;
        while (1)
        {
          if ((v20 & 1) != 0)
          {
            v21 = *(unsigned __int16 *)(a4 + 64);
            if (v21 + a3 <= 0x3F)
              break;
          }
          if ((v20 & 2) != 0)
          {
            v22 = __src[32];
            if (v22 + a3 <= 0x3F)
            {
              if (*a2 == 224 && *(unsigned __int8 *)__src == 224)
              {
                __memcpy_chk();
                v38[0] = -31;
                v24 = -3;
                v25 = 2;
                v23 = v22;
              }
              else
              {
                __memcpy_chk();
                memcpy(&v38[a3], __src, v22);
                LOWORD(v22) = v22 + a3;
                v23 = (unsigned __int16)v22;
                v24 = -3;
                v25 = 2;
              }
              goto LABEL_33;
            }
          }
          if ((v20 & 4) == 0)
            goto LABEL_34;
          v26 = *(unsigned __int16 *)(a4 + 64);
          v22 = __src[32];
          if (v26 + a3 + v22 <= 0x3F)
          {
            __memcpy_chk();
            memcpy(&v38[v26], a2, a3);
            v27 = v26 + a3;
            memcpy(&v38[v27], __src, v22);
            LOWORD(v22) = v27 + v22;
            v23 = (unsigned __int16)v22;
            v24 = -5;
            v25 = 3;
            v11 = v31;
            goto LABEL_33;
          }
          v11 = v31;
LABEL_34:
          if (SParser(a1, v38, v18) == 255)
            return 2370838535;
          *v11 = v34;
          v16 = WParser(a1, __dst, v11, &v36, &v35);
          if ((v16 & 0x80000000) != 0)
            return v16;
          if (v35 == 255)
            return 2370838535;
          if (!v20 || !v36)
          {
            if (!v36)
              return 0;
            if (a3 == 1 && (*a2 + 32) <= 4u)
            {
              v8 = 2370838535;
              if (__src[289] + v30 < v34)
              {
                strcpy(__dst, v37);
                memcpy(&__dst[v30], __src + 33, __src[289]);
                v8 = 0;
                v28 = __src[289] + v30;
                *v11 = v28;
                __dst[v28] = 0;
                *a8 = 2;
                return v8;
              }
LABEL_53:
              *v11 = 0;
              return v8;
            }
            v8 = 2370838535;
            if (v34 <= v30)
              goto LABEL_53;
            strcpy(__dst, v37);
            v8 = 0;
            *v11 = v30;
LABEL_44:
            *a8 = 0;
            return v8;
          }
        }
        __memcpy_chk();
        memcpy(&v38[v21], a2, a3);
        LOWORD(v22) = v21 + a3;
        v23 = (unsigned __int16)(v21 + a3);
        v24 = -2;
        v25 = 1;
LABEL_33:
        v38[v23] = 0;
        *a8 = v25;
        v20 &= v24;
        v18 = v22;
        goto LABEL_34;
      }
      goto LABEL_43;
    }
  }
  return v8;
}

uint64_t SParser(uint64_t a1, const void *a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  unsigned int v26;
  unsigned __int8 v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  int v40;
  BOOL v41;
  int v42;
  int v43;
  uint64_t v44;
  int v46;
  int v48;
  unsigned __int8 v50;
  unsigned int v52;
  char *v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  unsigned __int8 *v58;
  int v59;
  int v60;
  unsigned __int8 *v61;
  int v62;
  int v63;
  unsigned __int8 *v64;
  int v65;
  int v66;
  char *v67;
  int v68;
  int v69;
  int v70;
  unsigned int v71;
  char *v72;
  int v73;
  int v74;
  unsigned __int8 *v75;
  int v76;
  int v77;
  unsigned __int8 *v78;
  int v79;
  int v80;
  unsigned __int8 *v81;
  int v82;
  int v83;
  char v84;
  unsigned int v86;
  int v87;
  char v89;
  unsigned __int8 v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char v95;
  char v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  _BYTE *v104;
  char v105;
  char *v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  _BYTE *v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unsigned __int8 *v117;
  unint64_t v118;
  char v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  int v123;
  char v124;
  unint64_t v125;
  unint64_t v126;
  int v127;
  uint64_t v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  unint64_t v135;
  unsigned __int8 v136;
  uint64_t v137;
  unsigned __int8 *v138;
  uint64_t v139;
  unsigned __int8 v140;
  int v141;
  uint64_t v142;
  unsigned __int8 *v143;
  unsigned __int8 *v144;
  unsigned __int8 *v145;
  unint64_t v146;
  unsigned int v147;
  unsigned int v148;
  int v149;
  uint64_t v150;
  _BYTE *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  _BYTE *v157;
  char v158;
  uint64_t v159;
  unsigned __int8 v160;
  int v161;
  __int16 v162;
  uint64_t v163;
  int v164;
  int v165;
  char *v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  char *v173;
  uint64_t v174;
  unsigned __int8 v175;
  unsigned __int8 v176;
  char *v177;
  unsigned __int8 v178;
  uint64_t v179;
  char *v180;
  int v181;
  __int16 v182;
  uint64_t v183;
  __int16 v184;
  __int16 v185;
  _BYTE *v186;
  __int16 v187;
  _BOOL4 v188;
  uint64_t v189;
  char *v190;
  __int16 v191;
  _BYTE *v192;
  int v193;
  int v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  _BYTE *v202;
  int v203;
  char *v204;
  uint64_t v205;
  unsigned __int8 v206;
  _BYTE *v207;
  __int16 v208;
  uint64_t v209;
  __int16 v210;
  __int16 v211;
  __int16 v212;
  __int16 v213;
  int v214;
  unint64_t v215;
  unsigned __int8 v216;
  uint64_t v217;
  uint64_t v218;
  unsigned __int8 v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  char v223;
  int v224;
  unsigned int v226;
  _BOOL4 v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t result;
  uint64_t v232;
  int v233;
  uint64_t v234;
  _BYTE *v235;
  char *v236;
  unsigned int v237;
  char v238;
  unsigned __int8 v239;
  int v240;
  unsigned __int8 *v241;
  int v242;
  uint64_t v243;
  char v244;
  unsigned int v245;
  __int16 v246;
  unsigned __int8 *v247;
  __int16 v248;
  __int16 v249;
  _BYTE *v250;
  _BOOL4 v251;
  _BOOL4 v252;
  char v253;
  __int16 v254;
  __int16 v255;
  uint64_t v256;
  __int16 v257;
  __int16 v258;
  uint64_t v259;
  uint64_t v260;
  char *__s;
  char *__sa;
  _BYTE *v263;
  unsigned __int8 *v264;
  char *v265;
  uint64_t v266;
  _BYTE *v267;
  _BYTE *v268;
  uint64_t v269;
  unsigned __int8 *v270;
  __int16 v271;
  __int16 v272;
  uint64_t v273;
  __int128 v274;
  _BYTE *v275;
  char v276[31];
  char v277;
  char __s2[32];
  uint64_t v279;

  v279 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a1 + 249) = 0u;
  *(_OWORD *)(a1 + 233) = 0u;
  *(_OWORD *)(a1 + 217) = 0u;
  *(_OWORD *)(a1 + 201) = 0u;
  *(_OWORD *)(a1 + 185) = 0u;
  *(_OWORD *)(a1 + 169) = 0u;
  *(_OWORD *)(a1 + 153) = 0u;
  *(_OWORD *)(a1 + 137) = 0u;
  *(_OWORD *)(a1 + 121) = 0u;
  *(_OWORD *)(a1 + 105) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 313) = 0u;
  *(_OWORD *)(a1 + 329) = 0u;
  *(_OWORD *)(a1 + 281) = 0u;
  *(_OWORD *)(a1 + 297) = 0u;
  v247 = (unsigned __int8 *)(a1 + 89);
  *(_OWORD *)(a1 + 265) = 0u;
  bzero((void *)(a1 + 346), 0x2380uLL);
  v6 = a1 + 24;
  memcpy((void *)(a1 + 24), a2, a3);
  v7 = 0;
  v8 = 0;
  *(_BYTE *)(a1 + 24 + a3) = 0;
  v270 = (unsigned __int8 *)(a1 + 9434);
  *(_BYTE *)(a1 + 9434) = 0;
  *(_BYTE *)(a1 + 345) = 0;
  v9 = 0xFFFFFFFFLL;
  *(_BYTE *)(a1 + 88) = 0;
  v245 = a3;
  do
  {
    if ((v9 & 0x80000000) != 0)
    {
      v9 = 0;
      v11 = *(unsigned __int8 *)(a1 + 88);
    }
    else
    {
      v10 = a1 + 71 * v9++;
      v11 = *(unsigned __int8 *)(v10 + 347);
      *(_BYTE *)(a1 + 88) = v11;
    }
    if (v11 >= a3)
      continue;
    if (v8)
    {
      v12 = v8;
      v13 = 78;
      v14 = v247;
      v15 = v247;
      do
      {
        v16 = *v15;
        v15 += 4;
        if (v16 == v11)
        {
          if (v14[1] == 1 && *(_BYTE *)(a1 + 71 * v14[3] + 349) == 69)
            *(_BYTE *)(a1 + 71 * (v9 - 1) + 349) = 78;
          v13 = 89;
        }
        v14 = v15;
        --v12;
      }
      while (v12);
      if (v13 != 78)
        continue;
    }
    v256 = v9;
    v17 = v11;
    v250 = (_BYTE *)(v6 + v11);
    if ((*v250 + 95) >= 0x2Eu)
      v18 = csrulesc;
    else
      v18 = 0;
    if ((*v250 + 95) >= 0x2Eu)
      v19 = csrulesv;
    else
      v19 = csrulesc;
    v266 = v19;
    if (v18 >= v19)
      goto LABEL_230;
    v253 = 0;
    LODWORD(v20) = 0;
    HIDWORD(v20) = v11;
    v259 = v20;
    do
    {
      v21 = &psrules[61 * v18];
      v22 = v21 + 30;
      v23 = *v21;
      __s = strchr(v21 + 30, 43);
      v25 = v11;
      v26 = v11;
      if (v23)
      {
        v27 = v23;
        *(_QWORD *)&v24 = v259;
        do
        {
          switch(v27)
          {
            case 'A':
              v28 = *(unsigned __int8 *)(v6 + BYTE4(v24));
              if (v28 == 195)
                goto LABEL_136;
              goto LABEL_83;
            case 'B':
              v28 = *(unsigned __int8 *)(v6 + BYTE4(v24));
              if (v28 == 199)
                goto LABEL_136;
              goto LABEL_83;
            case 'C':
              v35 = *(unsigned __int8 *)(v6 + BYTE4(v24)) - 161 > 0x29;
              v36 = 1 << (*(_BYTE *)(v6 + BYTE4(v24)) + 95);
              v37 = 0x2802C50040BLL;
              goto LABEL_86;
            case 'D':
              v33 = *(unsigned __int8 *)(v6 + BYTE4(v24));
              v38 = (v33 - 164) > 0x13;
              v39 = 1 << (v33 + 92);
              v40 = 655425;
              goto LABEL_101;
            case 'E':
              v28 = *(unsigned __int8 *)(v6 + BYTE4(v24));
              if (v28 == 205)
                goto LABEL_136;
              goto LABEL_83;
            case 'F':
              v33 = *(unsigned __int8 *)(v6 + BYTE4(v24));
              v38 = (v33 - 164) > 0x12;
              v39 = 1 << (v33 + 92);
              v40 = 425985;
              goto LABEL_101;
            case 'G':
              v35 = *(unsigned __int8 *)(v6 + BYTE4(v24)) - 170 > 0x23;
              v36 = 1 << (*(_BYTE *)(v6 + BYTE4(v24)) + 86);
              v37 = 0x94840A001;
              goto LABEL_86;
            case 'H':
              v28 = *(unsigned __int8 *)(v6 + BYTE4(v24));
              if (v28 == 203)
                goto LABEL_136;
LABEL_83:
              if ((v28 + 49) < 0xD2u)
                goto LABEL_136;
              goto LABEL_117;
            case 'J':
              if ((*(_BYTE *)(v6 + BYTE4(v24)) + 49) < 0xD2u)
                goto LABEL_136;
              v31 = *(unsigned __int8 *)(v6 + BYTE4(v24));
              if (v31 == 199 || v31 == 205)
                goto LABEL_136;
              goto LABEL_117;
            case 'K':
              v35 = *(unsigned __int8 *)(v6 + BYTE4(v24)) - 164 > 0x26;
              v36 = 1 << (*(_BYTE *)(v6 + BYTE4(v24)) + 92);
              v37 = 0x4020000001;
              goto LABEL_86;
            case 'L':
              v32 = *(unsigned __int8 *)(v6 + BYTE4(v24));
              if (v32 != 197 && v32 != 195)
                goto LABEL_136;
              goto LABEL_117;
            case 'M':
              v35 = *(unsigned __int8 *)(v6 + BYTE4(v24)) - 161 > 0x2A;
              v36 = 1 << (*(_BYTE *)(v6 + BYTE4(v24)) + 95);
              v37 = 0x40681041401;
              goto LABEL_86;
            case 'N':
              v35 = *(unsigned __int8 *)(v6 + BYTE4(v24)) - 162 > 0x28;
              v36 = 1 << (*(_BYTE *)(v6 + BYTE4(v24)) + 94);
              v37 = 0x1A8006F81C5;
LABEL_86:
              v44 = v36 & v37;
              if (!v35 && v44 != 0)
                goto LABEL_117;
              goto LABEL_136;
            case 'O':
              LOBYTE(v33) = *(_BYTE *)(v6 + BYTE4(v24));
              if ((v33 + 49) < 0xD2u)
                goto LABEL_136;
              if (*(unsigned __int8 *)(v6 + BYTE4(v24)) - 194 <= 5 && ((1 << (v33 + 62)) & 0x23) != 0)
                goto LABEL_136;
              goto LABEL_111;
            case 'P':
              v41 = *(unsigned __int8 *)(v6 + BYTE4(v24)) - 184 > 0x13;
              v42 = 1 << (*(_BYTE *)(v6 + BYTE4(v24)) + 72);
              v43 = 796673;
              goto LABEL_94;
            case 'Q':
              v41 = *(unsigned __int8 *)(v6 + BYTE4(v24)) - 166 > 7;
              v42 = 1 << (*(_BYTE *)(v6 + BYTE4(v24)) + 90);
              v43 = 145;
              goto LABEL_94;
            case 'R':
              v41 = *(unsigned __int8 *)(v6 + BYTE4(v24)) - 195 > 4;
              v42 = 1 << (*(_BYTE *)(v6 + BYTE4(v24)) + 61);
              v43 = 21;
LABEL_94:
              v46 = v42 & v43;
              if (!v41 && v46 != 0)
                goto LABEL_117;
              goto LABEL_136;
            case 'S':
              v33 = *(unsigned __int8 *)(v6 + BYTE4(v24));
              v38 = (v33 - 174) > 0x1B;
              v39 = 1 << (v33 + 82);
              v40 = 134217731;
LABEL_101:
              v48 = v39 & v40;
              if (!v38 && v48 != 0)
                goto LABEL_111;
              goto LABEL_136;
            case 'T':
              if ((*(_BYTE *)(v6 + BYTE4(v24)) & 0xFC) == 0xE8)
                goto LABEL_117;
              if (psrules[61 * v18 + 60] == 78)
                v29 = -2;
              else
                v29 = -1;
              v30 = v24;
              if (psrules[61 * v18 + 60] == 78)
                v30 = v24 + 1;
              LODWORD(v24) = v30;
              break;
            case 'U':
              LOBYTE(v33) = *(_BYTE *)(v6 + BYTE4(v24));
              if ((v33 + 49) < 0xD2u || (v33 | 4) == 0xC7)
                goto LABEL_136;
              goto LABEL_111;
            case 'W':
              v33 = *(unsigned __int8 *)(v6 + BYTE4(v24));
              if (v33 == 194)
                goto LABEL_136;
              goto LABEL_110;
            case 'X':
              if ((*(_BYTE *)(v6 + BYTE4(v24)) + 95) > 0x2Du)
                goto LABEL_136;
              goto LABEL_117;
            case 'Y':
              LOBYTE(v33) = *(_BYTE *)(v6 + BYTE4(v24));
              if ((v33 + 95) > 0x2Du)
                goto LABEL_136;
              goto LABEL_111;
            case 'Z':
              v33 = *(unsigned __int8 *)(v6 + BYTE4(v24));
              if (v33 == 199)
                goto LABEL_136;
LABEL_110:
              if ((v33 + 49) < 0xD2u)
                goto LABEL_136;
LABEL_111:
              *(int32x2_t *)&v24 = vadd_s32(*(int32x2_t *)&v24, (int32x2_t)0x100000001);
              v274 = v24;
              contable((char)v33, 1, (uint64_t)v276);
              v24 = v274;
              if (v276[0] == 45)
                v29 = -1;
              else
                v29 = -2;
              break;
            case 'a':
              if (*(unsigned __int8 *)(v6 + BYTE4(v24)) != 209)
                goto LABEL_136;
              goto LABEL_117;
            case 'b':
              if (*(unsigned __int8 *)(v6 + BYTE4(v24)) != 212)
                goto LABEL_136;
              goto LABEL_117;
            case 'c':
              if (*(unsigned __int8 *)(v6 + BYTE4(v24)) != 213)
                goto LABEL_136;
              goto LABEL_117;
            case 'd':
              if (*(unsigned __int8 *)(v6 + BYTE4(v24)) != 214)
                goto LABEL_136;
              goto LABEL_117;
            case 'e':
              if (*(unsigned __int8 *)(v6 + BYTE4(v24)) != 215)
                goto LABEL_136;
              goto LABEL_117;
            case 'f':
              if (*(unsigned __int8 *)(v6 + BYTE4(v24)) != 216)
                goto LABEL_136;
              goto LABEL_117;
            case 'g':
              if (*(unsigned __int8 *)(v6 + BYTE4(v24)) != 217)
                goto LABEL_136;
              goto LABEL_117;
            case 'h':
              if (*(unsigned __int8 *)(v6 + BYTE4(v24)) != 211)
                goto LABEL_136;
              goto LABEL_117;
            case 'i':
              if (*(unsigned __int8 *)(v6 + BYTE4(v24)) != 231)
                goto LABEL_136;
              goto LABEL_117;
            case 'j':
              if (*(unsigned __int8 *)(v6 + BYTE4(v24)) != 236)
                goto LABEL_136;
              goto LABEL_117;
            default:
              if (*(unsigned __int8 *)(v6 + BYTE4(v24)) != v27)
                goto LABEL_136;
LABEL_117:
              *(int32x2_t *)&v24 = vadd_s32(*(int32x2_t *)&v24, (int32x2_t)0x100000001);
              v29 = -2;
              break;
          }
          if (v29 != -2)
            break;
          v27 = v21[v24];
        }
        while (v27);
        if (v29 != -2)
          goto LABEL_136;
        v26 = BYTE4(v24);
        v25 = BYTE4(v24);
      }
      v50 = *(_BYTE *)(v6 + v25);
      if ((v50 & 0xFC) == 0xE8)
        goto LABEL_136;
      if (v50 - 208 <= 9 && v50 != 211)
        goto LABEL_136;
      v52 = v26 - v11;
      if (v50 == 236 || v52 == -1)
        goto LABEL_136;
      __strncpy_chk();
      __s2[v52] = 0;
      if (!__s)
        goto LABEL_195;
      v54 = strchr(__s, 39);
      v55 = (unsigned __int8 *)&v277;
      if (v54)
      {
        while (1)
        {
          v57 = *++v55;
          v56 = v57;
          if (v57 == 88)
            break;
          if (!v56)
          {
            if (patt_check(v55, "X\xE4\x58X\xE2\x58X\xE0\x58X\xE1\x58\xE0\x58\x52") != 255)
              goto LABEL_192;
            break;
          }
        }
        v58 = (unsigned __int8 *)&v277;
        while (1)
        {
          v60 = *++v58;
          v59 = v60;
          if (v60 == 88)
            break;
          if (!v59)
          {
            if (patt_check(v58, "X\xE2\x58X\xE0\x58X\xE1\x58\xE0\x58\x52") != 255)
              goto LABEL_192;
            break;
          }
        }
        v61 = (unsigned __int8 *)&v277;
        while (1)
        {
          v63 = *++v61;
          v62 = v63;
          if (v63 == 88)
            break;
          if (!v62)
          {
            if (patt_check(v61, "X\xE0\x58X\xE1\x58\xE0\x58\x52") != 255)
              goto LABEL_192;
            break;
          }
        }
        v64 = (unsigned __int8 *)&v277;
        while (1)
        {
          v66 = *++v64;
          v65 = v66;
          if (v66 == 88)
            break;
          if (!v65)
          {
            if (patt_check(v64, "X\xE1\x58\xE0\x58\x52") != 255)
              goto LABEL_192;
            break;
          }
        }
        v67 = __s2;
        do
        {
          v69 = *v67++;
          v68 = v69;
        }
        while ((v69 + 49) < 0xD2u);
        v70 = *v67;
        switch(v70)
        {
          case 199:
            if (v68 == 164)
              goto LABEL_136;
            break;
          case 197:
            v86 = v68 - 161;
            v35 = v86 > 0x1D;
            v87 = (1 << v86) & 0x2C000001;
            if (!v35 && v87 != 0)
              goto LABEL_136;
            break;
          case 195:
            v71 = v68 - 161;
            if (v71 <= 0x29 && ((1 << v71) & 0x2802C500403) != 0)
              goto LABEL_136;
            break;
        }
LABEL_192:
        if (patt_check((unsigned __int8 *)__s2, "\xE0\x58\x52") == 1
          || patt_check((unsigned __int8 *)__s2, "\xE1\x58\x52") == 1
          || patt_check((unsigned __int8 *)__s2, "\xE2\x58\x52") == 1)
        {
          goto LABEL_136;
        }
LABEL_195:
        if (v23 == 33)
        {
          v89 = *(_BYTE *)(a1 + 88);
          if (!v89)
            goto LABEL_136;
          if (patt_check((unsigned __int8 *)__s2, "X\xEC\x58XX\xEC\xECPQS") != 1)
          {
            if (patt_check((unsigned __int8 *)__s2, "XX\xEC\xECPQS") == 1
              && v89 != 1
              && (*(_BYTE *)(v6 + (v89 - 1)) + 49) < 0xD2u)
            {
              goto LABEL_136;
            }
            goto LABEL_212;
          }
          if (v89 == 1)
          {
            v91 = -1;
          }
          else
          {
            if (*(unsigned __int8 *)(v6 + (v89 - 1)) - 205 <= 7
              && ((1 << (*(_BYTE *)(v6 + (v89 - 1)) + 51)) & 0xA1) != 0)
            {
              goto LABEL_212;
            }
            v91 = v89 - 2;
            if (v89 == 2)
              goto LABEL_136;
          }
          if (*(unsigned __int8 *)(v6 + v91) != 226)
            goto LABEL_136;
        }
LABEL_212:
        v92 = *(unsigned __int8 *)(a1 + 345);
        if (v92 > 0x40)
          return 255;
        v93 = *v270;
        if (v93 > 0x80)
          return 255;
        if (v253)
        {
          v94 = a1 + 4 * v92;
          v95 = *(_BYTE *)(v94 + 90) + 1;
          v96 = *(_BYTE *)(v94 + 91) + 1;
        }
        else
        {
          *(_DWORD *)(a1 + 89 + 4 * v92) = 0;
          v92 = *(unsigned __int8 *)(a1 + 345);
          v97 = a1 + 89 + 4 * v92;
          *(_BYTE *)v97 = *(_BYTE *)(a1 + 88);
          *(_WORD *)(v97 + 1) = 0;
          *(_BYTE *)(v97 + 3) = v93;
          v96 = 1;
          v95 = 1;
        }
        v98 = a1 + 4 * v92;
        *(_BYTE *)(v98 + 90) = v95;
        *(_BYTE *)(v98 + 91) = v96;
        v99 = a1 + 346 + 71 * v93;
        *(_QWORD *)(v99 + 63) = 0;
        *(_OWORD *)(v99 + 32) = 0u;
        *(_OWORD *)(v99 + 48) = 0u;
        *(_OWORD *)v99 = 0u;
        *(_OWORD *)(v99 + 16) = 0u;
        v100 = (_BYTE *)(a1 + 346 + 71 * *v270);
        *v100 = *(_BYTE *)(a1 + 88);
        v100[1] = v11 + v52;
        v100[2] = 32;
        v100[5] = v18;
        __strcpy_chk();
        *(_BYTE *)(a1 + 346 + 71 * *v270 + 38) = 0;
        v101 = mDictFind(__s2);
        v102 = *v270;
        v103 = a1 + 346 + 71 * *v270;
        *(_BYTE *)(v103 + 4) = v101;
        v104 = (_BYTE *)(v103 + 4);
        if (*(v104 - 3) == v245)
          v105 = 76;
        else
          v105 = 70;
        *(v104 - 1) = v105;
        if (v101 == 82 && strchr(v22, 33))
        {
          *v104 = 86;
          *(_BYTE *)(a1 + 71 * v102 + 416) = 0;
        }
        else
        {
          v106 = strchr(v22, 39);
          v107 = (_BYTE *)(a1 + 71 * v102 + 416);
          if (v106)
            *v107 = 2;
          else
            *v107 = 1;
        }
        ++v253;
        *v270 = v102 + 1;
        goto LABEL_136;
      }
      v72 = __s2;
      do
      {
        v74 = *v72++;
        v73 = v74;
      }
      while ((v74 + 49) < 0xD2u);
      if (v73 != 187 || *v72 != 197)
      {
        v75 = (unsigned __int8 *)&v277;
        do
        {
          v77 = *++v75;
          v76 = v77;
          if (v77 == 224)
            goto LABEL_171;
        }
        while (v76);
        if (patt_check(v75, "\xE0\x43\x52") != 1)
        {
LABEL_171:
          v78 = (unsigned __int8 *)&v277;
          while (1)
          {
            v80 = *++v78;
            v79 = v80;
            if (v80 == 225)
              break;
            if (!v79)
            {
              if (patt_check(v78, "\xE1\x43\x52") == 1)
                goto LABEL_179;
              break;
            }
          }
          v81 = (unsigned __int8 *)&v277;
          while (1)
          {
            v83 = *++v81;
            v82 = v83;
            if (v83 == 226)
              goto LABEL_195;
            if (!v82)
            {
              if (patt_check(v81, "\xE2\x43\x52") != 1)
                goto LABEL_195;
              break;
            }
          }
        }
LABEL_179:
        v84 = strlen(__s2);
        if (__s2[(v84 - 1)] - 195 > 4
          || ((1 << (__s2[(v84 - 1)] + 61)) & 0x15) == 0)
        {
          goto LABEL_195;
        }
      }
LABEL_136:
      ++v18;
    }
    while (v18 != v266);
    v8 = *(_BYTE *)(a1 + 345);
    if (v253)
    {
      *(_BYTE *)(a1 + 345) = ++v8;
      v7 = *v270;
      a3 = v245;
      v9 = v256;
      continue;
    }
    LOBYTE(v7) = *v270;
    a3 = v245;
    v17 = v11;
LABEL_230:
    v108 = a1 + 4 * v8;
    *(_BYTE *)(v108 + 89) = v11;
    *(_WORD *)(v108 + 90) = 257;
    *(_BYTE *)(v108 + 92) = v7;
    LODWORD(v108) = v7;
    v109 = a1 + 346 + 71 * v7;
    *(_BYTE *)v109 = v11;
    *(_BYTE *)(v109 + 1) = v11 + 1;
    *(_WORD *)(v109 + 2) = 20000;
    *(_BYTE *)(v109 + 4) = 85;
    *(_BYTE *)(v109 + 6) = *(_BYTE *)(a1 + v17 + 24);
    *(_BYTE *)(v109 + 7) = 0;
    *(_BYTE *)(v109 + 38) = 0;
    *(_BYTE *)(v109 + 70) = 1;
    *(_BYTE *)(a1 + 345) = ++v8;
    v7 = (v108 + 1);
    *v270 = v108 + 1;
    v110 = (v108 + 1);
    *(_WORD *)(a1 + 346 + 71 * v110 - 68) = 21573;
    if ((v7 & 0x100) != 0)
    {
      v7 = 0;
      v9 = v256;
    }
    else
    {
      v111 = *(unsigned __int8 *)(a1 + 88);
      v112 = (_BYTE *)(a1 + 349);
      v9 = v256;
      do
      {
        if (*(v112 - 2) == v111 && *v112 != 69)
          *v112 = 78;
        v112 += 71;
        --v110;
      }
      while (v110);
    }
  }
  while ((int)v9 < v7);
  if ((_BYTE)v7)
  {
    v113 = 0;
    v114 = v7;
    v115 = v7;
    while (1)
    {
      v116 = a1 + 71 * v113;
      if (*(_BYTE *)(v116 + 350) == 86)
      {
        v117 = (unsigned __int8 *)(v116 + 346);
        if (v113 >= v115)
        {
          v120 = v114;
        }
        else
        {
          v118 = a1 + 71 * v113;
          v263 = (_BYTE *)(v118 + 349);
          v267 = (_BYTE *)(v118 + 347);
          v119 = 1;
          v120 = v114;
          v121 = v113;
LABEL_243:
          v122 = a1 + 352 + 71 * v121;
          do
          {
            if (*(unsigned __int8 *)(v122 - 5) == *v117)
            {
              __strcpy_chk();
              __strcat_chk();
              v123 = mDictFind(__s2);
              if (v123 != 82)
              {
                v124 = v123;
                __strcat_chk();
                v119 = 0;
                *(_BYTE *)(v122 - 5) = *v267;
                *(_BYTE *)(v122 - 3) = *v263;
                *(_BYTE *)(v122 - 2) = v124;
                ++v121;
                v114 = *v270;
                v120 = v114;
                v125 = v114;
                if (v121 < v114)
                  goto LABEL_243;
                goto LABEL_263;
              }
              v120 = *v270;
            }
            ++v121;
            v122 += 71;
          }
          while (v121 < v120);
          v115 = v120;
          v114 = v120;
          v125 = v120;
          if ((v119 & 1) == 0)
            goto LABEL_263;
        }
        v126 = a1 + 71 * v113;
        *(_BYTE *)(v126 + 349) = 69;
        if (patt_check((unsigned __int8 *)(v126 + 352), "X\xECPQS") == 1)
          *(_WORD *)(a1 + 71 * v113 + 384) = 33;
        *(_BYTE *)(v116 + 350) = 84;
        if (!(_BYTE)v115)
        {
          v125 = 0;
          v114 = v120;
          goto LABEL_263;
        }
        v127 = *v117;
        v128 = v115;
        v129 = (_BYTE *)(a1 + 349);
        do
        {
          if (*(v129 - 2) == v127 && *v129 != 69)
            *v129 = 78;
          v129 += 71;
          --v128;
        }
        while (v128);
        v114 = v120;
      }
      v125 = v115;
LABEL_263:
      ++v113;
      v115 = v125;
      if (v113 >= v125)
      {
        v8 = *(_BYTE *)(a1 + 345);
        goto LABEL_267;
      }
    }
  }
  LOBYTE(v114) = 0;
LABEL_267:
  if (v8 < 2u)
  {
    v136 = v114;
  }
  else
  {
    v130 = 0;
    v131 = 1;
    v132 = 93;
    do
    {
      v133 = v130 + 1;
      if (v130 + 1 < (unint64_t)v8)
      {
        v134 = v132;
        v135 = v131;
        do
        {
          if (*(unsigned __int8 *)(a1 + 4 * v130 + 89) > *(unsigned __int8 *)(a1 + v134))
          {
            swapMRT(a1, v130, v135);
            v8 = *(_BYTE *)(a1 + 345);
          }
          ++v135;
          v134 += 4;
        }
        while (v135 < v8);
      }
      ++v131;
      v132 += 4;
      ++v130;
    }
    while (v8 - 1 > v133);
    v136 = *v270;
  }
  if (v136 >= 2u)
  {
    v137 = 0;
    v138 = (unsigned __int8 *)(a1 + 418);
    v139 = 1;
    v140 = v136;
    do
    {
      v141 = v137 + 1;
      if (v137 + 1 < (unint64_t)v140)
      {
        v142 = a1 + 71 * v137;
        v143 = (unsigned __int8 *)(v142 + 346);
        v144 = (unsigned __int8 *)(v142 + 347);
        v145 = v138;
        v146 = v139;
        do
        {
          v147 = *v143;
          v148 = *(v145 - 1);
          if (v147 > v148 || v147 == v148 && *v144 < *v145)
          {
            swapMST(a1, v137, v146);
            v136 = *v270;
          }
          ++v146;
          v145 += 71;
          v140 = v136;
        }
        while (v146 < v136);
      }
      ++v139;
      v138 += 71;
      ++v137;
    }
    while (v140 - 1 > v141);
    v8 = *(_BYTE *)(a1 + 345);
  }
  if (v8 >= 2u)
  {
    v149 = *(unsigned __int8 *)(a1 + 92);
    v150 = v8 - 1;
    v151 = (_BYTE *)(a1 + 96);
    do
    {
      v149 += *(v151 - 6);
      *v151 = v149;
      v151 += 4;
      --v150;
    }
    while (v150);
  }
  if (!v8)
    return 1;
  v152 = v8;
  v153 = a1 + 350;
  __sa = (char *)(a1 + 348);
  while (2)
  {
    v154 = a1 + 4 * --v152;
    v155 = *(unsigned __int8 *)(v154 + 91);
    v275 = (_BYTE *)(v154 + 91);
    if (v155 >= 2)
    {
      v156 = a1 + 4 * v152;
      v158 = *(_BYTE *)(v156 + 90);
      v157 = (_BYTE *)(v156 + 90);
      v159 = v157[2];
      v160 = v158 + v159;
      if (v159 >= (v158 + v159))
      {
        v165 = -1;
        v162 = -1;
        LOWORD(v164) = -1;
        v167 = -1;
      }
      else
      {
        v161 = -1;
        v162 = -1;
        v163 = v157[2];
        v164 = 0xFFFF;
        v165 = -1;
        v166 = (char *)(v153 + 71 * v163);
        v167 = -1;
        do
        {
          if (*(v166 - 2) != 89)
          {
            v168 = *(v166 - 1);
            if (v168 == 76)
              v169 = v163;
            else
              v169 = v165;
            if (v168 == 78)
            {
              v169 = v165;
              v170 = v163;
            }
            else
            {
              v170 = v161;
            }
            if (v168 == 70)
            {
              v167 = v163;
            }
            else
            {
              v165 = v169;
              v161 = v170;
            }
            v171 = *v166;
            if (v171 == 88)
              v172 = v163;
            else
              v172 = v164;
            if (v171 == 89)
              v162 = v163;
            else
              v164 = v172;
          }
          v166 += 71;
          ++v163;
        }
        while (v160 != v163);
        if ((v161 & 0x80000000) == 0 && ((v165 & 0x80000000) == 0 || (v167 & 0x80000000) == 0))
        {
          v173 = &__sa[71 * v157[2]];
          v174 = v160 - v159;
          do
          {
            if (v173[1] == 78 && *v173 != 89)
            {
              *v275 = --v155;
              *v173 = 89;
            }
            v173 += 71;
            --v174;
          }
          while (v174);
        }
      }
      if (v165 < 0 && v167 < 0 && (v159 + 1) < v160)
      {
        v175 = *(_BYTE *)(a1 + 71 * v159 + 347);
        v176 = v159 + 1;
        v177 = &__sa[71 * (v159 + 1)];
        v178 = v159;
        while (*(v177 - 1) > v175)
        {
          v179 = a1 + 71 * v178;
          if (*(_BYTE *)(v179 + 348) != 89)
          {
            v180 = (char *)(v179 + 348);
            v178 = v176;
            v175 = *(v177 - 1);
LABEL_333:
            *v275 = --v155;
            *v180 = 89;
            goto LABEL_334;
          }
          v178 = v176;
          v175 = *(v177 - 1);
LABEL_334:
          ++v176;
          v177 += 71;
          if (v160 == v176)
            goto LABEL_335;
        }
        v180 = v177;
        if (*v177 == 89)
          goto LABEL_334;
        goto LABEL_333;
      }
LABEL_335:
      if (v155 >= 2u)
      {
        if (v159 >= v160)
        {
          v188 = 0;
          v182 = -1;
          v254 = -1;
          v257 = -1;
          v271 = -1;
        }
        else
        {
          v181 = -1;
          v182 = -1;
          v183 = v159;
          v184 = -1;
          v185 = -1;
          v186 = (_BYTE *)(v153 + 71 * v159);
          v187 = -1;
          do
          {
            if (*(v186 - 2) != 89)
            {
              if (*(v186 - 1) == 76)
                v181 = v183;
              switch(*v186)
              {
                case 'P':
                  v185 = v183;
                  break;
                case 'Q':
                  v184 = v183;
                  break;
                case 'R':
                  v187 = v183;
                  break;
                case 'S':
                  v182 = v183;
                  break;
                case 'X':
                  LOWORD(v164) = v183;
                  break;
                case 'Y':
                  v162 = v183;
                  break;
                default:
                  break;
              }
            }
            v186 += 71;
            ++v183;
          }
          while (v160 != v183);
          v254 = v184;
          v257 = v185;
          v271 = v187;
          v188 = v181 >= 0;
          if ((v181 & 0x80000000) == 0 && (v164 & 0x8000) != 0 && v162 < 0)
          {
            v189 = v160 - v159;
            v190 = &__sa[71 * v159];
            do
            {
              if (v190[1] != 76 && *v190 != 89)
              {
                *v275 = --v155;
                *v190 = 89;
              }
              v190 += 71;
              --v189;
            }
            while (v189);
            v188 = 1;
          }
        }
        v264 = v157 + 2;
        v268 = v157;
        v251 = v188;
        if ((v164 & 0x8000) != 0 && v162 < 0)
        {
LABEL_362:
          v191 = v271;
          if ((v164 & 0x8000) != 0)
            goto LABEL_363;
LABEL_375:
          if ((v257 & 0x8000) == 0 || (v254 & 0x8000) == 0 || (v191 & 0x8000) == 0 || (v182 & 0x8000) == 0)
          {
            if (v159 >= v160)
            {
              if (!v251)
                goto LABEL_432;
            }
            else
            {
              v272 = v191;
              v194 = 0;
              v195 = &__sa[71 * v159];
              v196 = v160 - v159;
              v197 = v159;
              do
              {
                if ((*(_BYTE *)(a1 + 71 * v197 + 350) & 0xFE) == 0x58 && *(_BYTE *)(a1 + 71 * v197 + 348) != 89)
                {
                  if (*(_BYTE *)(a1 + 71 * v197 + 349) != 76
                    && findCfollow(a1, v197, 0x58u) == 255)
                  {
                    if ((v272 & 0x8000) == 0
                      && (findCfollow(a1, v197, 0x51u) != 255
                       || findCfollow(a1, v197, 0x53u) != 255
                       || findCfollow(a1, v197, 0x50u) != 255))
                    {
                      v200 = v160 - v159;
                      v201 = &__sa[71 * v159];
                      do
                      {
                        if (v201[2] == 82)
                        {
                          if (*v201 != 89)
                          {
                            --*v275;
                            *v201 = 89;
                          }
                          v194 = 9;
                        }
                        v201 += 71;
                        --v200;
                      }
                      while (v200);
                    }
                  }
                  else
                  {
                    v198 = &__sa[71 * v159];
                    v199 = v160 - v159;
                    do
                    {
                      if ((v198[2] & 0xFE) != 0x58)
                      {
                        if (*v198 != 89)
                        {
                          --*v275;
                          *v198 = 89;
                        }
                        v194 = 9;
                      }
                      v198 += 71;
                      --v199;
                    }
                    while (v199);
                  }
                }
                ++v197;
              }
              while (v197 != v160);
              if (v194 != 9 && (v272 & 0x8000) == 0)
              {
                v204 = &__sa[71 * v159];
                do
                {
                  if (v204[2] == 82
                    && (allCfollow(a1, v159, 0x52u)
                     || allCfollow(a1, v159, 0x54u))
                    && *v204 != 89)
                  {
                    --*v275;
                    *v204 = 89;
                  }
                  LOBYTE(v159) = v159 + 1;
                  v204 += 71;
                }
                while (v160 != v159);
              }
              v153 = a1 + 350;
              if (v194 == 9)
                goto LABEL_433;
              if (v251)
              {
                do
                {
                  if (v195[1] != 76 && *v195 != 89)
                  {
                    --*v275;
                    *v195 = 89;
                  }
                  v195 += 71;
                  --v196;
                }
                while (v196);
                goto LABEL_433;
              }
LABEL_432:
              keepLongest(a1, v152);
            }
          }
        }
        else
        {
          if ((v164 & 0x8000) != 0)
          {
            if (v159 < v160 && (v162 & 0x8000) == 0)
            {
              v202 = (_BYTE *)(v153 + 71 * v159);
              v203 = v159;
              do
              {
                if (v203 != v162
                  && (*v202 & 0xFE) == 0x58
                  && *(v202 - 2) != 89
                  && compareXX(a1, v152, v203, v162))
                {
                  v162 = v203;
                }
                ++v203;
                v202 += 71;
              }
              while (v160 != v203);
              v153 = a1 + 350;
            }
            goto LABEL_362;
          }
          v191 = v271;
          if (v159 >= v160)
            goto LABEL_375;
          v192 = (_BYTE *)(v153 + 71 * v159);
          v193 = v159;
          do
          {
            if (v193 != (__int16)v164
              && (*v192 & 0xFE) == 0x58
              && *(v192 - 2) != 89
              && compareXX(a1, v152, v193, v164))
            {
              LOWORD(v164) = v193;
            }
            ++v193;
            v192 += 71;
          }
          while (v160 != v193);
          v153 = a1 + 350;
          if ((v164 & 0x8000) == 0)
            goto LABEL_375;
LABEL_363:
          if ((v162 & 0x8000) == 0)
            goto LABEL_375;
        }
LABEL_433:
        if (*v275 >= 2u)
        {
          v205 = *v264;
          v206 = *v268 + v205;
          if (v205 >= v206)
          {
            v208 = -1;
            v213 = -1;
            v212 = -1;
            v255 = -1;
            v258 = -1;
            v211 = -1;
            v210 = -1;
          }
          else
          {
            v207 = (_BYTE *)(v153 + 71 * *v264);
            v208 = -1;
            v255 = -1;
            v258 = -1;
            v209 = *v264;
            v210 = -1;
            v211 = -1;
            v212 = -1;
            v213 = -1;
            do
            {
              if (*(v207 - 2) != 89)
              {
                switch(*v207)
                {
                  case 'P':
                    v255 = v209;
                    break;
                  case 'Q':
                    v211 = v209;
                    break;
                  case 'R':
                    v212 = v209;
                    break;
                  case 'S':
                    v210 = v209;
                    break;
                  case 'T':
                    v258 = v209;
                    break;
                  case 'X':
                    v208 = v209;
                    break;
                  case 'Y':
                    v213 = v209;
                    break;
                  default:
                    break;
                }
              }
              ++v209;
              v207 += 71;
            }
            while ((*v268 + v205) != v209);
          }
          v252 = (v208 & v213 & 0x8000u) != 0;
          if (((unsigned __int16)v208 & (unsigned __int16)v213 & 0x8000) != 0)
          {
            v246 = v211;
            v248 = v210;
            v249 = v212;
            v214 = *v275;
            v215 = 0;
            v265 = &__sa[71 * *v264];
            v269 = 71 * v205 + 350;
            v260 = v152;
            v273 = v205;
            do
            {
              if (v205 >= v206)
              {
                LOBYTE(v218) = v205;
              }
              else
              {
                v216 = v205;
                v217 = v269;
                v218 = v205;
                while (1)
                {
                  if (*(_BYTE *)(a1 + v217) != 82)
                  {
                    v219 = aX_4[v215 + 11];
                    if (findCfollow(a1, v218, v219) != 255)
                      break;
                  }
                  ++v218;
                  v217 += 71;
                  ++v216;
                  if (v206 == v218)
                  {
                    LOBYTE(v218) = v206;
                    goto LABEL_465;
                  }
                }
                v220 = v216;
                v221 = v265;
                v222 = v273;
                do
                {
                  if (v220 != v222
                    && (findCfollow(a1, v222, v219) == 255 || v221[2] == 82)
                    && *v221 != 89)
                  {
                    *v275 = --v214;
                    *v221 = 89;
                  }
                  ++v222;
                  v221 += 71;
                }
                while (v206 != v222);
                v152 = v260;
LABEL_465:
                v205 = v273;
              }
              v223 = v215 + 1;
              v224 = v218;
              if (v218 != v206)
                break;
            }
            while (v215++ < 3);
            v153 = a1 + 350;
            v212 = v249;
            v211 = v246;
            v210 = v248;
            if (v224 == v206 && v223 == 4)
              keepLongest(a1, v152);
          }
          if ((v258 & 0x8000) == 0)
          {
            v226 = *v275;
            if (v226 >= 2)
            {
              v227 = v252;
              if (v255 >= 0)
                v227 = 0;
              if (v227 && v211 < 0 && v212 < 0 && v210 < 0)
              {
                keepLongest(a1, v152);
              }
              else if (v205 < v206)
              {
                v228 = &__sa[71 * v205];
                v229 = v206 - v205;
                do
                {
                  if (v228[2] == 84 && *v228 != 89)
                  {
                    *v275 = --v226;
                    *v228 = 89;
                  }
                  v228 += 71;
                  --v229;
                }
                while (v229);
              }
            }
          }
        }
      }
    }
    if ((_BYTE)v152)
      continue;
    break;
  }
  v230 = *(unsigned __int8 *)(a1 + 345);
  result = 1;
  if (!*(_BYTE *)(a1 + 345))
    return result;
  v232 = 0;
  v233 = 0;
  v234 = 0;
  while (2)
  {
    v235 = (_BYTE *)(a1 + 4 * v232);
    v236 = v235 + 91;
    if (v235[91] != 2)
      goto LABEL_506;
    v237 = v235[92];
    v238 = v235[90];
    v239 = v238 + v237;
    if (v237 >= (v238 + v237))
      goto LABEL_506;
    v240 = 0;
    v241 = (unsigned __int8 *)(a1 + 347 + 71 * v237);
    while (2)
    {
      if (v241[1] == 89)
      {
LABEL_496:
        LOBYTE(v237) = v237 + 1;
        v241 += 71;
        if (v239 == v237)
          goto LABEL_506;
        continue;
      }
      break;
    }
    if (!v240)
    {
      v233 = v241[69];
      v234 = v237;
      v240 = *v241;
      goto LABEL_496;
    }
    if (v240 == *v241)
    {
      v242 = v241[69];
      if (v233 <= v242 || (v243 = a1 + 71 * v234, *(_BYTE *)(v243 + 348) == 89))
      {
        v244 = 1;
      }
      else
      {
        v244 = 0;
        *v236 = 1;
        *(_BYTE *)(v243 + 348) = 89;
      }
      if (v233 < v242 && v241[1] != 89)
      {
        *v236 = v244;
        v241[1] = 89;
      }
    }
LABEL_506:
    if (++v232 != v230)
      continue;
    return 1;
  }
}

uint64_t WParser(uint64_t a1, char *a2, _WORD *a3, _BYTE *a4, int *a5)
{
  uint64_t v9;
  _BYTE *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  int v16;
  int v17;
  char v18;
  int v19;
  unint64_t i;
  unint64_t v21;
  char v22;
  _BYTE *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned __int8 *v26;
  char v27;
  int v28;
  int v29;
  char v30;
  int v31;
  char *v32;
  const char *v33;
  char *v34;
  size_t v35;
  int v36;
  __int16 v37;
  uint64_t result;
  int v39;
  int *v40;

  *a4 = 0;
  *a2 = 0;
  v9 = *(unsigned __int8 *)(a1 + 345);
  if (*(_BYTE *)(a1 + 345))
  {
    v10 = (_BYTE *)(a1 + 90);
    do
    {
      *v10 = 0;
      v10 += 4;
      --v9;
    }
    while (v9);
  }
  v11 = *(unsigned __int8 *)(a1 + 90);
  if (v11 < *(unsigned __int8 *)(a1 + 91))
  {
    LOBYTE(v11) = v11 + 1;
    *(_BYTE *)(a1 + 90) = v11;
  }
  v12 = *(unsigned __int8 *)(a1 + 92);
  v13 = *(unsigned __int8 *)(a1 + 9434);
  if (v12 < v13)
  {
    v14 = (unsigned __int8 *)(a1 + 71 * *(unsigned __int8 *)(a1 + 92) + 348);
    v15 = 1;
    do
    {
      v16 = *v14;
      v14 += 71;
      if (v16 != 89)
      {
        if (v15 == v11)
          goto LABEL_13;
        ++v15;
      }
      LOBYTE(v12) = v12 + 1;
    }
    while (v13 != v12);
  }
  LOBYTE(v12) = -1;
LABEL_13:
  v17 = rule2phone(a1, v12);
  if (v17 < 0)
  {
    v40 = a5;
    v19 = 0;
  }
  else
  {
    v18 = v17;
    v19 = strlen((const char *)(a1 + 71 * v12 + 384));
    if ((unsigned __int16)*a3 <= (unsigned __int16)v19)
    {
      result = 0;
      v39 = 255;
      goto LABEL_48;
    }
    v40 = a5;
    strcpy(a2, (const char *)(a1 + 71 * v12 + 384));
    *a4 = v18;
  }
  if (*(unsigned __int8 *)(a1 + 345) >= 2u)
  {
    for (i = 1; i < *(unsigned __int8 *)(a1 + 345); ++i)
    {
      v21 = a1 + 4 * i;
      if (*(unsigned __int8 *)(v21 + 89) == *(unsigned __int8 *)(a1 + 71 * v12 + 347))
      {
        v24 = *(unsigned __int8 *)(v21 + 90);
        v23 = (_BYTE *)(v21 + 90);
        v22 = v24;
        if (v24 < v23[1])
          *v23 = ++v22;
        v12 = *(unsigned __int8 *)(a1 + 4 * i + 92);
        v25 = *(unsigned __int8 *)(a1 + 9434);
        if (v12 < v25)
        {
          v26 = (unsigned __int8 *)(a1 + 348 + 71 * *(unsigned __int8 *)(a1 + 4 * i + 92));
          v27 = 1;
          do
          {
            v28 = *v26;
            v26 += 71;
            if (v28 != 89)
            {
              if (v27 == v22)
                goto LABEL_29;
              ++v27;
            }
            LOBYTE(v12) = v12 + 1;
          }
          while (v25 != v12);
        }
        LOBYTE(v12) = -1;
LABEL_29:
        v29 = rule2phone(a1, v12);
        if ((v29 & 0x80000000) == 0)
        {
          v30 = v29;
          v19 += strlen((const char *)(a1 + 71 * v12 + 384));
          if ((unsigned __int16)*a3 <= (unsigned __int16)v19)
          {
            result = 0;
LABEL_46:
            v39 = 255;
            goto LABEL_47;
          }
          strcat(a2, (const char *)(a1 + 71 * v12 + 384));
          *a4 |= v30;
        }
      }
    }
  }
  v31 = strlen(a2);
  v32 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, (v31 + 1));
  if (!v32)
  {
    result = 2370838538;
    goto LABEL_46;
  }
  v33 = v32;
  v34 = strcpy(v32, a2);
  if (*a2)
  {
    v35 = 0;
    v34 = (char *)v33;
    do
    {
      v36 = a2[v35];
      if (v36 != 39)
        *v34++ = v36;
      ++v35;
    }
    while (v35 < strlen(a2));
  }
  *v34 = 0;
  strcpy(a2, v33);
  heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v33);
  v37 = strlen(a2);
  result = 0;
  *a3 = v37;
  v39 = 1;
LABEL_47:
  a5 = v40;
LABEL_48:
  *a5 = v39;
  return result;
}

char *ReadThaiChar(char *result, char *__dst)
{
  uint64_t v2;
  const char *i;

  v2 = cchar_dct;
  if (cchar_dct)
  {
    for (i = (const char *)&unk_1DEC670A1; *((unsigned __int8 *)i - 1) != (_DWORD)result; i += 51)
    {
      if (!--v2)
        return result;
    }
    return strcpy(__dst, i);
  }
  return result;
}

uint64_t contable(uint64_t result, int a2, uint64_t a3)
{
  __int16 v3;

  if (a2)
  {
    switch((int)result)
    {
      case -95:
      case -94:
      case -92:
      case -90:
        goto LABEL_9;
      case -89:
        goto LABEL_17;
      case -88:
      case -86:
      case -85:
      case -82:
      case -81:
      case -80:
      case -79:
      case -78:
      case -76:
      case -75:
      case -74:
      case -73:
      case -72:
      case -56:
      case -55:
      case -54:
        goto LABEL_3;
      case -87:
      case -84:
      case -68:
      case -67:
      case -60:
      case -58:
      case -53:
      case -51:
      case -50:
        v3 = 45;
        goto LABEL_27;
      case -83:
      case -77:
      case -71:
      case -61:
      case -59:
      case -52:
        goto LABEL_7;
      case -70:
      case -69:
      case -66:
      case -65:
      case -64:
        goto LABEL_8;
      case -63:
        goto LABEL_18;
      case -62:
        goto LABEL_12;
      case -57:
        goto LABEL_19;
      default:
        goto LABEL_16;
    }
  }
  switch((int)result)
  {
    case -95:
LABEL_9:
      v3 = 107;
      goto LABEL_27;
    case -94:
    case -93:
    case -92:
    case -91:
    case -90:
      *(_BYTE *)(a3 + 2) = 0;
      v3 = 26731;
      goto LABEL_27;
    case -89:
LABEL_17:
      *(_BYTE *)(a3 + 2) = 0;
      v3 = 26478;
      goto LABEL_27;
    case -88:
      v3 = 99;
      goto LABEL_27;
    case -87:
    case -86:
    case -84:
      *(_BYTE *)(a3 + 2) = 0;
      v3 = 26723;
      goto LABEL_27;
    case -85:
    case -56:
    case -55:
    case -54:
      v3 = 115;
      goto LABEL_27;
    case -83:
    case -62:
LABEL_12:
      v3 = 106;
      goto LABEL_27;
    case -82:
    case -76:
      v3 = 100;
      goto LABEL_27;
    case -81:
    case -75:
LABEL_3:
      v3 = 116;
      goto LABEL_27;
    case -80:
    case -79:
    case -78:
    case -74:
    case -73:
    case -72:
      *(_BYTE *)(a3 + 2) = 0;
      v3 = 26740;
      goto LABEL_27;
    case -77:
    case -71:
LABEL_7:
      v3 = 110;
      goto LABEL_27;
    case -70:
      v3 = 98;
      goto LABEL_27;
    case -69:
LABEL_8:
      v3 = 112;
      goto LABEL_27;
    case -68:
    case -66:
    case -64:
      *(_BYTE *)(a3 + 2) = 0;
      v3 = 26736;
      goto LABEL_27;
    case -67:
    case -65:
      v3 = 102;
      goto LABEL_27;
    case -63:
LABEL_18:
      v3 = 109;
      goto LABEL_27;
    case -61:
    case -60:
      v3 = 114;
      goto LABEL_27;
    case -59:
    case -58:
    case -52:
      v3 = 108;
      goto LABEL_27;
    case -57:
LABEL_19:
      v3 = 119;
      goto LABEL_27;
    case -53:
    case -50:
      v3 = 104;
      goto LABEL_27;
    case -51:
      v3 = 35;
LABEL_27:
      *(_WORD *)a3 = v3;
      break;
    default:
LABEL_16:
      *(_BYTE *)a3 = 0;
      break;
  }
  return result;
}

uint64_t patt_check(unsigned __int8 *a1, _BYTE *a2)
{
  unsigned __int8 v2;
  int v3;
  int v4;
  unsigned __int8 v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;

  v2 = *a1;
  if (*a1)
  {
    while (1)
    {
      v3 = (char)*a2;
      if (!*a2)
        return -1;
      if (v3 <= 83)
        break;
      if (v3 != 84)
      {
        if (v3 == 88)
        {
          if ((v2 + 95) >= 0x2Eu)
            return -1;
          goto LABEL_18;
        }
LABEL_17:
        if (*a2 != v2)
          return -1;
        goto LABEL_18;
      }
      v9 = (v2 & 0xFC) == 232;
LABEL_19:
      a1 += v9;
      ++a2;
      v2 = *a1;
      if (!*a1)
        goto LABEL_20;
    }
    if (v3 == 67)
    {
      v7 = v2;
      v5 = -1;
      v8 = v7 - 161;
      if (v8 > 0x29 || ((1 << v8) & 0x2802C50040BLL) == 0)
        return v5;
    }
    else
    {
      if (v3 != 82)
        goto LABEL_17;
      v4 = v2;
      v5 = -1;
      v6 = v4 - 195;
      if (v6 > 4 || ((1 << v6) & 0x15) == 0)
        return v5;
    }
LABEL_18:
    v9 = 1;
    goto LABEL_19;
  }
LABEL_20:
  if (*a2)
    return -1;
  else
    return 1;
}

uint64_t compareXX(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v8 = allCfollow(a1, a3, 0x52u);
  result = allCfollow(a1, a4, 0x52u);
  if (!v8 && (_DWORD)result)
    goto LABEL_3;
  if (!v8)
  {
    v12 = allNfollow(a1, a3);
    result = allNfollow(a1, a4);
    if (!v12 && (_DWORD)result)
    {
LABEL_3:
      v10 = a1 + 71 * a4;
LABEL_4:
      v11 = *(unsigned __int8 *)(v10 + 348);
      result = 1;
      goto LABEL_10;
    }
    if (!v12)
      return 0;
  }
  if ((_DWORD)result)
  {
    if (*(unsigned __int8 *)(a1 + 346 + 71 * a3 + 1) >= *(unsigned __int8 *)(a1 + 346 + 71 * a4 + 1))
    {
      v10 = a1 + 71 * a4;
      goto LABEL_4;
    }
    result = 0;
  }
  v10 = a1 + 71 * a3;
  v11 = *(unsigned __int8 *)(v10 + 348);
LABEL_10:
  if (v11 != 89)
  {
    --*(_BYTE *)(a1 + 4 * a2 + 91);
    *(_BYTE *)(v10 + 348) = 89;
  }
  return result;
}

uint64_t findCfollow(uint64_t a1, unsigned int a2, unsigned __int8 a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned __int8 v6;
  unsigned __int8 *v7;
  int v8;

  if (*(_BYTE *)(a1 + 71 * a2 + 348) != 89 && *(_BYTE *)(a1 + 345))
  {
    v3 = 0;
    do
    {
      v4 = (unsigned __int8 *)(a1 + 4 * v3);
      if (v4[89] == *(unsigned __int8 *)(a1 + 71 * a2 + 347))
      {
        v5 = v4[92];
        v6 = v4[90] + v5;
        if (v5 < v6)
        {
          v7 = (unsigned __int8 *)(a1 + 350 + 71 * v5);
          do
          {
            v8 = *v7;
            if (a3 == 88)
            {
              if ((v8 & 0xFE) == 0x58 && *(v7 - 1) != 78 && *(v7 - 2) != 89)
                return v5;
            }
            else if (v8 == a3 && *(v7 - 2) != 89 && *(v7 - 1) != 78)
            {
              return v5;
            }
            LOBYTE(v5) = v5 + 1;
            v7 += 71;
          }
          while (v6 != v5);
        }
      }
      ++v3;
    }
    while (v3 != *(unsigned __int8 *)(a1 + 345));
  }
  LOBYTE(v5) = -1;
  return v5;
}

uint64_t allCfollow(uint64_t a1, unsigned int a2, unsigned __int8 a3)
{
  uint64_t v3;
  unsigned __int8 *i;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  int v12;
  BOOL v13;

  v3 = *(unsigned __int8 *)(a1 + 345);
  if (!*(_BYTE *)(a1 + 345))
    return 0;
  for (i = (unsigned __int8 *)(a1 + 92); *(i - 3) != *(unsigned __int8 *)(a1 + 71 * a2 + 347); i += 4)
  {
    if (!--v3)
      return 0;
  }
  v6 = *i;
  v7 = *(i - 2);
  if (v6 < (v7 + v6))
  {
    v8 = a1 + 71 * *i + 350;
    v9 = v6 + 1;
    v10 = (v7 + v6);
    v11 = (char *)v8;
    while (1)
    {
      v12 = *v11;
      v11 += 71;
      if (v12 != a3 && *(_BYTE *)(v8 - 2) != 89)
        break;
      v13 = v10 == v9++;
      v8 = (uint64_t)v11;
      if (v13)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t keepLongest(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 *v6;
  int v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 *v10;
  _BYTE *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  v2 = result + 4 * a2;
  v3 = *(unsigned __int8 *)(v2 + 92);
  v4 = *(_BYTE *)(v2 + 90) + v3;
  v5 = v3;
  if (v3 < v4)
  {
    v6 = (unsigned __int8 *)(result + 71 * v3 + 348);
    while (1)
    {
      v7 = *v6;
      v6 += 71;
      if (v7 != 89)
        break;
      LOBYTE(v3) = v3 + 1;
      if (v4 == v3)
      {
        v5 = v4;
        goto LABEL_7;
      }
    }
    v5 = v3;
  }
LABEL_7:
  if ((v5 + 1) < v4)
  {
    v8 = *(unsigned __int8 *)(result + 71 * v5 + 347);
    v9 = v5 + 1;
    v10 = (unsigned __int8 *)(result + 71 * (v5 + 1) + 347);
    do
    {
      v11 = v10 + 1;
      if (v10[1] != 89)
      {
        v12 = *v10;
        if (v12 >= v8)
        {
          if (v12 == v8)
          {
            if (v10[69] < *(unsigned __int8 *)(result + 71 * v5 + 416))
            {
              v13 = result + 71 * v5;
              if (*(_BYTE *)(v13 + 348) == 89)
              {
                v5 = v9;
                goto LABEL_12;
              }
              v11 = (_BYTE *)(v13 + 348);
              v5 = v9;
            }
          }
          else
          {
            v14 = result + 71 * v5;
            if (*(_BYTE *)(v14 + 348) == 89)
            {
              v5 = v9;
              v8 = *v10;
              goto LABEL_12;
            }
            v11 = (_BYTE *)(v14 + 348);
            v5 = v9;
            v8 = *v10;
          }
        }
        --*(_BYTE *)(result + 4 * a2 + 91);
        *v11 = 89;
      }
LABEL_12:
      ++v9;
      v10 += 71;
    }
    while (v4 != v9);
  }
  return result;
}

uint64_t allNfollow(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unsigned __int8 *i;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  BOOL v11;

  v2 = *(unsigned __int8 *)(a1 + 345);
  if (!*(_BYTE *)(a1 + 345))
    return 0;
  for (i = (unsigned __int8 *)(a1 + 92); *(i - 3) != *(unsigned __int8 *)(a1 + 71 * a2 + 347); i += 4)
  {
    if (!--v2)
      return 0;
  }
  v5 = *i;
  v6 = *(i - 2) + v5;
  if (v5 < v6)
  {
    v7 = a1 + 71 * v5 + 349;
    v8 = v5 + 1;
    v9 = (unsigned __int8 *)v7;
    while (1)
    {
      v10 = *v9;
      v9 += 71;
      if (v10 != 78 && *(_BYTE *)(v7 - 1) != 89)
        break;
      v11 = v6 == v8++;
      v7 = (uint64_t)v9;
      if (v11)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t rule2phone(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  int v10;
  size_t v11;
  uint64_t v12;
  int8x8_t v13;
  int8x8_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 *v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  int v26;
  int v27;
  int v29;
  int v31;
  char v32;
  int v33;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  char v41;
  int v43;
  int v45;
  int v47;
  unsigned __int8 v49;
  int v50;
  char v51;
  char v52;
  int v53;
  int32x2_t v54;
  int v55;
  int v56;
  size_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  char v61;
  char *v62;
  unsigned __int8 *v63;
  char v64;
  char v65;
  unsigned __int8 v66;
  const char *v67;
  int v68;
  int v69;
  char *v70;
  char *v71;
  char *v72;
  char *i;
  int v74;
  char *v76;
  unsigned int v77;
  int v78;
  char *v80;
  char *v81;
  char *v82;
  size_t v83;
  char *v84;
  char *v85;
  char v86;
  unsigned __int8 v87;
  int v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  char *v96;
  char *v97;
  char *v98;
  unsigned int v99;
  char *v100;
  int v101;
  char *v102;
  char *v103;
  const char *v104;
  size_t v105;
  char *v106;
  int v107;
  unsigned int v108;
  int v109;
  const char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  int v118;
  int v119;
  BOOL v120;
  BOOL v121;
  char v122;
  __int128 v123;
  char v124;
  char v125;
  _BYTE v126[5];
  _BYTE v127[5];
  _BYTE v128[5];
  unsigned __int8 v129;
  char v130[32];
  char __s[2];
  unsigned __int8 v132;
  char __src[4];
  char v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 71 * a2 + 348) == 89)
    return 0xFFFFFFFFLL;
  v5 = a1 + 71 * a2;
  if (*(_BYTE *)(v5 + 384))
  {
    if (*(_BYTE *)(v5 + 384) == 33)
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
  v6 = a1 + 71 * a2;
  v7 = (char *)*(unsigned __int8 *)(v6 + 352);
  if (!*(_BYTE *)(v6 + 352))
    return 4294967294;
  v8 = (char *)(v5 + 384);
  v9 = (char *)(v6 + 352);
  v10 = *(unsigned __int8 *)(a1 + 71 * a2 + 350);
  if (v10 != 84)
  {
    result = 0;
    if (v10 == 85 || *(_BYTE *)(a1 + 71 * a2 + 349) == 69)
      return result;
    v12 = a1 + 71 * a2;
    __strcpy_chk();
    v15 = *(unsigned __int8 *)(v12 + 351);
    v16 = psrules[61 * v15];
    if (v16)
    {
      v17 = (unsigned __int8 *)(v12 + 351);
      v18 = 0uLL;
      do
      {
        switch(v16)
        {
          case 'A':
            v19 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if (v19 != 195 && (v19 + 49) >= 0xD2u)
            {
              *(int32x2_t *)&v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
              v123 = v18;
              contable((char)v19, 0, (uint64_t)v130);
              v20 = 65;
              goto LABEL_112;
            }
            break;
          case 'B':
            v21 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if (v21 != 199 && (v21 + 49) >= 0xD2u)
            {
              *(int32x2_t *)&v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
              v123 = v18;
              contable((char)v21, 0, (uint64_t)v130);
              v20 = 66;
              goto LABEL_112;
            }
            break;
          case 'C':
            v22 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            v23 = (v22 - 161) > 0x29 || ((1 << (v22 + 95)) & 0x2802C50040BLL) == 0;
            if (!v23)
            {
              *(int32x2_t *)&v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
              v123 = v18;
              contable((char)v22, 0, (uint64_t)v130);
              v20 = 67;
              goto LABEL_112;
            }
            break;
          case 'D':
            v24 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if ((v24 - 164) <= 0x13 && ((1 << (v24 + 92)) & 0xA0041) != 0)
            {
              *(int32x2_t *)&v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
              v123 = v18;
              contable((char)v24, 1, (uint64_t)v130);
              v20 = 68;
              goto LABEL_112;
            }
            break;
          case 'E':
            v26 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if (v26 != 205 && (v26 + 49) >= 0xD2u)
            {
              *(int32x2_t *)&v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
              v123 = v18;
              contable((char)v26, 0, (uint64_t)v130);
              v20 = 69;
              goto LABEL_112;
            }
            break;
          case 'F':
            v27 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if ((v27 - 164) <= 0x12 && ((1 << (v27 + 92)) & 0x68001) != 0)
            {
              *(int32x2_t *)&v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
              v123 = v18;
              contable((char)v27, 1, (uint64_t)v130);
              v20 = 70;
              goto LABEL_112;
            }
            break;
          case 'G':
            v29 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if ((v29 - 170) <= 0x23 && ((1 << (v29 + 86)) & 0x94840A001) != 0)
            {
              *(int32x2_t *)&v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
              v123 = v18;
              contable((char)v29, 0, (uint64_t)v130);
              v20 = 71;
              goto LABEL_112;
            }
            break;
          case 'H':
            v31 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if (v31 != 203 && (v31 + 49) >= 0xD2u)
            {
              *(int32x2_t *)&v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
              v123 = v18;
              contable((char)v31, 0, (uint64_t)v130);
              v20 = 72;
              goto LABEL_112;
            }
            break;
          case 'J':
            v32 = *(_BYTE *)(a1 + 71 * a2 + v18 + 352);
            if ((v32 + 49) >= 0xD2u
              && *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352) != 199
              && *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352) != 205)
            {
              *(int32x2_t *)&v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
              v123 = v18;
              contable(v32, 0, (uint64_t)v130);
              v20 = 74;
              goto LABEL_112;
            }
            break;
          case 'K':
            v33 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if ((v33 - 164) <= 0x26 && ((1 << (v33 + 92)) & 0x4020000001) != 0)
            {
              *(int32x2_t *)&v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
              v123 = v18;
              contable((char)v33, 0, (uint64_t)v130);
              v20 = 75;
              goto LABEL_112;
            }
            break;
          case 'L':
            v35 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if (v35 == 197 || v35 == 195)
            {
              *(int32x2_t *)&v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
              v123 = v18;
              contable((char)v35, 0, (uint64_t)v130);
              v20 = 76;
              goto LABEL_112;
            }
            break;
          case 'M':
            v36 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352) - 161 > 0x2A;
            v37 = 1 << (*(_BYTE *)(a1 + 71 * a2 + v18 + 352) + 95);
            v38 = 0x40681041401;
            goto LABEL_66;
          case 'N':
            v36 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352) - 162 > 0x28;
            v37 = 1 << (*(_BYTE *)(a1 + 71 * a2 + v18 + 352) + 94);
            v38 = 0x1A8006F81C5;
LABEL_66:
            v39 = v37 & v38;
            v40 = v36 || v39 == 0;
            goto LABEL_79;
          case 'O':
            v41 = *(_BYTE *)(a1 + 71 * a2 + v18 + 352);
            if ((v41 + 49) < 0xD2u)
              break;
            if (*(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352) - 194 <= 5
              && ((1 << (v41 + 62)) & 0x23) != 0)
            {
              break;
            }
            *(int32x2_t *)&v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
            v123 = v18;
            contable(v41, 1, (uint64_t)v130);
            v20 = 79;
            goto LABEL_112;
          case 'P':
            v40 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352) - 184 > 0x13
               || ((1 << (*(_BYTE *)(a1 + 71 * a2 + v18 + 352) + 72)) & 0xC2801) == 0;
LABEL_79:
            v13 = (int8x8_t)vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
            if (!v40)
              *(double *)&v18 = *(double *)&v13;
            break;
          case 'Q':
            v43 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if ((v43 - 166) > 7 || ((1 << (v43 + 90)) & 0x91) == 0)
              break;
            *(int32x2_t *)&v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
            v123 = v18;
            contable((char)v43, 0, (uint64_t)v130);
            v20 = 81;
            goto LABEL_112;
          case 'R':
            v45 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if ((v45 - 195) > 4 || ((1 << (v45 + 61)) & 0x15) == 0)
              break;
            *(int32x2_t *)&v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
            v123 = v18;
            contable((char)v45, 0, (uint64_t)v130);
            v20 = 82;
            goto LABEL_112;
          case 'S':
            v47 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if ((v47 - 174) > 0x1B || ((1 << (v47 + 82)) & 0x8000003) == 0)
              break;
            *(int32x2_t *)&v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
            v123 = v18;
            contable((char)v47, 1, (uint64_t)v130);
            v20 = 83;
            goto LABEL_112;
          case 'T':
            if ((*(_BYTE *)(a1 + 71 * a2 + v18 + 352) & 0xFC) == 0xE8)
            {
              v13 = (int8x8_t)0x100000001;
              *(int32x2_t *)&v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
            }
            else
            {
              v23 = psrules[61 * v15 + 60] == 78;
              v56 = DWORD1(v18);
              if (v23)
                v56 = DWORD1(v18) + 1;
              DWORD1(v18) = v56;
            }
            break;
          case 'U':
            v49 = *(_BYTE *)(a1 + 71 * a2 + v18 + 352);
            if ((v49 + 49) < 0xD2u || (v49 | 4) == 0xC7)
              break;
            *(int32x2_t *)&v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
            v123 = v18;
            contable((char)v49, 1, (uint64_t)v130);
            v20 = 85;
            goto LABEL_112;
          case 'W':
            v50 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if (v50 == 194 || (v50 + 49) < 0xD2u)
              break;
            *(int32x2_t *)&v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
            v123 = v18;
            contable((char)v50, 1, (uint64_t)v130);
            v20 = 87;
            goto LABEL_112;
          case 'X':
            v51 = *(_BYTE *)(a1 + 71 * a2 + v18 + 352);
            if ((v51 + 95) > 0x2Du)
              break;
            *(int32x2_t *)&v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
            v123 = v18;
            contable(v51, 0, (uint64_t)v130);
            v20 = 88;
            goto LABEL_112;
          case 'Y':
            v52 = *(_BYTE *)(a1 + 71 * a2 + v18 + 352);
            if ((v52 + 95) > 0x2Du)
              break;
            *(int32x2_t *)&v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
            v123 = v18;
            contable(v52, 1, (uint64_t)v130);
            v20 = 89;
            goto LABEL_112;
          case 'Z':
            v53 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if (v53 == 199 || (v53 + 49) < 0xD2u)
              break;
            *(int32x2_t *)&v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
            v123 = v18;
            contable((char)v53, 1, (uint64_t)v130);
            v20 = 90;
LABEL_112:
            replace((char *)v20, v130, __s);
            v18 = v123;
            break;
          case 'a':
            v13.i8[0] = *(_BYTE *)(a1 + 71 * a2 + v18 + 352);
            v54 = (int32x2_t)vand_s8(v13, (int8x8_t)0xFF000000FFLL);
            v55 = 209;
            goto LABEL_123;
          case 'b':
            v13.i8[0] = *(_BYTE *)(a1 + 71 * a2 + v18 + 352);
            v54 = (int32x2_t)vand_s8(v13, (int8x8_t)0xFF000000FFLL);
            v55 = 212;
            goto LABEL_123;
          case 'c':
            v13.i8[0] = *(_BYTE *)(a1 + 71 * a2 + v18 + 352);
            v54 = (int32x2_t)vand_s8(v13, (int8x8_t)0xFF000000FFLL);
            v55 = 213;
            goto LABEL_123;
          case 'd':
            v13.i8[0] = *(_BYTE *)(a1 + 71 * a2 + v18 + 352);
            v54 = (int32x2_t)vand_s8(v13, (int8x8_t)0xFF000000FFLL);
            v55 = 214;
            goto LABEL_123;
          case 'e':
            v13.i8[0] = *(_BYTE *)(a1 + 71 * a2 + v18 + 352);
            v54 = (int32x2_t)vand_s8(v13, (int8x8_t)0xFF000000FFLL);
            v55 = 215;
            goto LABEL_123;
          case 'f':
            v13.i8[0] = *(_BYTE *)(a1 + 71 * a2 + v18 + 352);
            v54 = (int32x2_t)vand_s8(v13, (int8x8_t)0xFF000000FFLL);
            v55 = 216;
            goto LABEL_123;
          case 'g':
            v13.i8[0] = *(_BYTE *)(a1 + 71 * a2 + v18 + 352);
            v54 = (int32x2_t)vand_s8(v13, (int8x8_t)0xFF000000FFLL);
            v55 = 217;
            goto LABEL_123;
          case 'h':
            v13.i8[0] = *(_BYTE *)(a1 + 71 * a2 + v18 + 352);
            v54 = (int32x2_t)vand_s8(v13, (int8x8_t)0xFF000000FFLL);
            v55 = 211;
            goto LABEL_123;
          case 'i':
            v13.i8[0] = *(_BYTE *)(a1 + 71 * a2 + v18 + 352);
            v54 = (int32x2_t)vand_s8(v13, (int8x8_t)0xFF000000FFLL);
            v55 = 231;
            goto LABEL_123;
          case 'j':
            v13.i8[0] = *(_BYTE *)(a1 + 71 * a2 + v18 + 352);
            v54 = (int32x2_t)vand_s8(v13, (int8x8_t)0xFF000000FFLL);
            v55 = 236;
LABEL_123:
            v14.i32[0] = v55;
            v13 = (int8x8_t)vdup_lane_s32(vceq_s32(v54, (int32x2_t)vand_s8(v14, (int8x8_t)0xFF000000FFLL)), 0);
            *(int8x8_t *)&v18 = vbsl_s8(v13, (int8x8_t)vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001), *(int8x8_t *)&v18);
            break;
          default:
            if (*(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352) != v16)
              return 0xFFFFFFFFLL;
            *(int32x2_t *)&v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
            break;
        }
        v15 = *v17;
        v16 = psrules[61 * v15 + BYTE4(v18)];
      }
      while (v16);
    }
    v129 = 0;
    if (__s[0] == 33)
      goto LABEL_141;
    v62 = __s;
    if (strchr(__s, 39))
    {
      if (strchr(v9, 234) || strchr(v9, 235))
        goto LABEL_223;
      v63 = (unsigned __int8 *)v9;
      do
      {
        v65 = *v63++;
        v64 = v65;
      }
      while ((v65 + 49) < 0xD2u);
      v66 = v64 + 95;
      if (v66 > 0x2Cu)
      {
        v68 = 76;
        v67 = "3";
      }
      else
      {
        v67 = off_1EA940598[(char)v66];
        v68 = byte_1DEC7211A[(char)v66];
      }
      v62 = __s;
      replace((char *)0x2B, v67, __s);
      do
        v118 = *v62++;
      while (v118 != 39);
    }
    else
    {
      v68 = 76;
      v63 = (unsigned __int8 *)v9;
    }
    v69 = 0;
    v70 = &v124;
    v71 = v128;
    v72 = __src;
    for (i = v62; ; ++i)
    {
      v74 = *i;
      if ((v74 - 64) <= 0x38 && ((1 << (v74 - 64)) & 0x162822200000001) != 0)
      {
        v76 = v70++;
        v69 = 1;
        goto LABEL_156;
      }
      if (!*i || v74 == 43)
        break;
      if (v69)
        v76 = v71;
      else
        v76 = v72;
      if (v69)
        ++v71;
      else
        ++v72;
      if (!v69)
        v69 = 0;
LABEL_156:
      *v76 = v74;
    }
    *v72 = 0;
    *v71 = 0;
    *v70 = 0;
    v77 = v128[0] - 106;
    v36 = v77 > 0xD;
    v78 = (1 << v77) & 0x2019;
    if (v36 || v78 == 0)
    {
      v86 = 1;
      if (v128[0] || v124 != v125)
      {
LABEL_185:
        v129 = 32;
        v87 = *v63;
        if (*v63)
        {
          v88 = 0;
          v89 = v63 + 1;
          v90 = v127;
          v91 = v126;
          while ((v87 + 95) > 0x2Du)
          {
            if ((v87 & 0xFC) == 0xE8)
            {
              v92 = &v129;
LABEL_198:
              *v92 = v87;
            }
            v93 = *v89++;
            v87 = v93;
            if (!v93)
              goto LABEL_202;
          }
          if (v88)
            v92 = v91;
          else
            v92 = v90;
          if (v88)
            ++v91;
          else
            ++v90;
          if (!v88)
            v88 = 1;
          goto LABEL_198;
        }
        v91 = v126;
        v90 = v127;
LABEL_202:
        *v91 = 0;
        *v90 = 0;
        if (__src[1] != 104)
        {
          if ((v94 = __src[0] - 98, v94 <= 0x12) && ((1 << v94) & 0x44207) != 0 || __src[0] == 35)
          {
            if ((v86 & 1) != 0)
            {
              v61 = 50;
              switch(v129)
              {
                case 0xE8u:
                case 0xEAu:
                case 0xEBu:
                  goto LABEL_223;
                case 0xE9u:
                  goto LABEL_224;
                default:
                  if (v129 == 32)
                    goto LABEL_286;
                  goto LABEL_141;
              }
            }
            else
            {
              v61 = 49;
              switch(v129)
              {
                case 0xE8u:
                  goto LABEL_224;
                case 0xE9u:
                  goto LABEL_220;
                case 0xEAu:
                  goto LABEL_223;
                case 0xEBu:
                  goto LABEL_284;
                default:
                  goto LABEL_141;
              }
            }
            goto LABEL_224;
          }
        }
        if (v127[0] - 162 <= 0x29 && ((1 << (v127[0] + 94)) & 0x3C00C104081) != 0)
        {
          if ((v86 & 1) != 0)
          {
            if (v129 <= 0xE9u)
            {
              if (v129 != 32)
              {
                if (v129 == 232)
                  goto LABEL_223;
                goto LABEL_217;
              }
              goto LABEL_286;
            }
          }
          else if (v129 <= 0xE9u)
          {
            if (v129 == 32)
            {
LABEL_284:
              v61 = 52;
              goto LABEL_224;
            }
            if (v129 != 232)
            {
LABEL_217:
              if (v129 == 233)
              {
LABEL_220:
                v61 = 50;
                goto LABEL_224;
              }
              goto LABEL_141;
            }
LABEL_286:
            v61 = 49;
            goto LABEL_224;
          }
          v95 = v129 - 234;
          goto LABEL_222;
        }
        if ((v86 & 1) != 0)
        {
          v119 = v129;
          if (v124 == v125)
          {
            if (v129 <= 0xE9u)
            {
              if (v129 != 32)
              {
                if (v129 == 232 || v129 == 233)
                  goto LABEL_223;
LABEL_141:
                v61 = 48;
                goto LABEL_224;
              }
LABEL_304:
              v120 = v68 == 77 || v68 == 72;
LABEL_307:
              v61 = 49;
LABEL_308:
              if (!v120)
                ++v61;
              goto LABEL_224;
            }
LABEL_299:
            v95 = v119 - 234;
LABEL_222:
            if (v95 >= 2)
              goto LABEL_141;
LABEL_223:
            v61 = 51;
            goto LABEL_224;
          }
          if (v129 - 233 < 3)
            goto LABEL_223;
          if (v129 != 32)
          {
            if (v129 != 232)
              goto LABEL_141;
            v120 = v68 == 77;
            goto LABEL_307;
          }
          v121 = v68 == 77 || v68 == 72;
          v61 = 51;
          v122 = 49;
        }
        else
        {
          v119 = v129;
          if (v129 > 0xE9u)
            goto LABEL_299;
          if (v129 != 32)
          {
            if (v129 != 232)
            {
              if (v129 != 233)
                goto LABEL_141;
              v120 = v68 == 72;
              v61 = 50;
              goto LABEL_308;
            }
            goto LABEL_304;
          }
          v121 = v68 == 72;
          v61 = 48;
          v122 = 52;
        }
        if (v121)
          v61 = v122;
LABEL_224:
        v128[0] = v61;
        v128[1] = 0;
        __strcat_chk();
        if (!(*(unsigned __int16 *)__s ^ 0x3021 | v132))
          __s[0] = 0;
        __strcpy_chk();
        if (*v9 == 205 && v9[1] == 194 && (v96 = strchr(v8, 39)) != 0
          || (v97 = strchr(v8, 104)) != 0
          && ((v98 = v97, v99 = *(v97 - 1) - 99, v99 > 0x11) || ((1 << v99) & 0x22101) == 0)
          && (v96 = strchr(v8, 39), v96 > v98))
        {
          v104 = v96 + 1;
LABEL_251:
          v105 = strlen(v104) + 1;
          v106 = v8;
LABEL_252:
          v110 = v104;
LABEL_253:
          memmove(v106, v110, v105);
          return 0;
        }
        v100 = strchr(v9, 195);
        if (v100)
        {
          v101 = *(v100 - 1);
          switch(v101)
          {
            case 202:
LABEL_236:
              if (!strchr(v8, 39))
              {
                v111 = strchr(v8, 114);
                if (v111)
                {
                  v112 = v111;
                  v113 = v111 + 1;
                  v105 = strlen(v111 + 1) + 1;
                  v106 = v112;
                  v110 = v113;
                  goto LABEL_253;
                }
              }
              break;
            case 183:
              if (!strchr(v8, 39)
                && (patt_check((unsigned __int8 *)v9, "\xB7\xC3\xC7\xB4") == 1
                 || patt_check((unsigned __int8 *)v9, "\xB7\xC3\xC7\xA7") == 1
                 || patt_check((unsigned __int8 *)v9, "\xB7ç") == 1
                 || patt_check((unsigned __int8 *)v9, "\xB7\xC3\xD2\xBA") == 1
                 || patt_check((unsigned __int8 *)v9, "\xB7\xC3\xD2\xC1\xB7\xC3\xD2\xC2\xE2\xB7\xC3\xC1\xB7\xC3\xD8\xB4") == 1|| patt_check((unsigned __int8 *)v9, "\xB7\xC3\xD2\xC2\xE2\xB7\xC3\xC1\xB7\xC3\xD8\xB4") == 1|| patt_check((unsigned __int8 *)v9, "\xE2\xB7\xC3\xC1\xB7\xC3\xD8\xB4") == 1|| patt_check((unsigned __int8 *)v9, "\xB7\xC3\xD8\xB4") == 1|| patt_check((unsigned __int8 *)v9, "\xB7\xC3\xD5") == 1))
              {
                v114 = strchr(v8, 114);
                if (v114)
                {
                  v104 = v114;
                  *v114 = 115;
                  v8 = v114 - 2;
                  goto LABEL_251;
                }
              }
              break;
            case 171:
              goto LABEL_236;
          }
        }
        v102 = strchr(v8, 43);
        if (!v102 || (v103 = v102 + 1, v102[1] != 39))
        {
          v107 = *v8;
          if (v107 == 116)
          {
            if (v8[1] == 119)
            {
              v109 = 3236212;
            }
            else
            {
              if (v8[2] != 119)
                return 0;
              v134 = 0;
              v109 = 828467316;
            }
          }
          else
          {
            if (v107 != 115)
              return 0;
            v108 = v8[1] - 108;
            if (v108 > 0xB || ((1 << v108) & 0x841) == 0)
              return 0;
            v109 = 3236211;
          }
          *(_DWORD *)__src = v109;
          __strcat_chk();
          strcpy(v8, __src);
          return 0;
        }
        *v102 = 49;
        v104 = v102 + 2;
        v105 = strlen(v102 + 2) + 1;
        v106 = v103;
        goto LABEL_252;
      }
    }
    if ((patt_check(v63, "\xE0\x58\x54X") == 1 || patt_check(v63, "\xE0\x58\x58TX") == 1)
      && (strchr((char *)v63, 232) || strchr((char *)v63, 233))
      && (v80 = strchr(v62, 101)) != 0
      || (patt_check(v63, "\xE0\x58\xD4\xE8\x58\xE0\x58\x58\xD4\xE8X") == 1
       || patt_check(v63, "\xE0\x58\x58\xD4\xE8X") == 1)
      && (v80 = strchr(v62, 113)) != 0
      || (patt_check(v63, "\xE1\x58\xE8X") == 1
       || patt_check(v63, "\xE1\x58\x58\xE8\x58X\xE8\xCD\x58") == 1)
      && (v80 = strchr(v62, 120)) != 0)
    {
      v81 = v80;
      v82 = v80 + 1;
      v83 = strlen(v80 + 1) + 1;
      v84 = v81;
      v85 = v82;
    }
    else
    {
      if (patt_check(v63, "X\xE8\xCD\x58") != 1 && patt_check(v63, "XX\xE8\xCD\x58") != 1)
        goto LABEL_184;
      v115 = strchr(v62, 64);
      if (!v115)
        goto LABEL_184;
      v116 = v115;
      v117 = v115 + 1;
      v83 = strlen(v115 + 1) + 1;
      v84 = v116;
      v85 = v117;
    }
    memmove(v84, v85, v83);
LABEL_184:
    v86 = 0;
    goto LABEL_185;
  }
  v11 = strlen((const char *)(v6 + 352));
  if (v11 == 1)
  {
    ReadThaiChar(v7, v8);
    return 1;
  }
  v57 = v11;
  *v8 = 0;
  if (!v11)
    return 1;
  v58 = 0;
  do
  {
    if (cchar_dct)
    {
      v59 = (const char *)&unk_1DEC670A1;
      v60 = cchar_dct;
      while (*((unsigned __int8 *)v59 - 1) != v9[v58])
      {
        v59 += 51;
        if (!--v60)
          goto LABEL_137;
      }
      strcat(v8, v59);
    }
LABEL_137:
    ++v58;
    result = 1;
  }
  while (v58 != v57);
  return result;
}

char *replace(char *result, const char *a2, char *a3)
{
  uint64_t v5;
  unsigned __int8 v6;
  char *v7;
  char __s2[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*a3)
  {
    if (*a3 == result)
    {
      v5 = 0;
LABEL_7:
      v7 = &a3[v5];
      __strcpy_chk();
      strcpy(v7, a2);
      return strcat(a3, __s2);
    }
    else
    {
      v6 = 0;
      while (1)
      {
        v5 = ++v6;
        if (!a3[v6])
          break;
        if (a3[v6] == result)
          goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t wparserCrf_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2350915585;
  result = 0;
  *a2 = &IWparserImplCrf;
  return result;
}

uint64_t wparser_impl_crf_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  v7 = 0;
  if (!a3)
    return 2350915591;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t wparser_impl_crf_ClassClose()
{
  return 0;
}

uint64_t wparser_impl_crf_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t MaxWordLen;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v22 = 0;
  MaxWordLen = 2350915591;
  if (a5)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v22);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(_QWORD *)(v22 + 32), (uint64_t)"WPARSER_IMPL_CRF", 4, 0, (uint64_t)"WPARSER_IMPL CRF ObjOpen: Begin", v12, v13, v14, v21);
      v15 = (_QWORD *)heap_Calloc(*(_QWORD **)(v22 + 8), 1, 88);
      if (v15)
      {
        v16 = v15;
        *v15 = a3;
        v15[1] = a4;
        v15[2] = v22;
        v15[3] = a1;
        v15[4] = a2;
        v15[5] = a1;
        v15[6] = "WPARSER_IMPL_CRF";
        MaxWordLen = wparser_impl_crf_loc_GetMaxWordLen((uint64_t)v15);
        *(_QWORD *)a5 = v16;
        *(_DWORD *)(a5 + 8) = 87652;
        log_OutText(*(_QWORD *)(v22 + 32), (uint64_t)"WPARSER_IMPL_CRF", 4, 0, (uint64_t)"WPARSER_IMPL CRF ObjOpen: End (%x)", v17, v18, v19, MaxWordLen);
      }
      else
      {
        return 2350915594;
      }
    }
  }
  return MaxWordLen;
}

uint64_t wparser_impl_crf_ObjClose(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Only_DereferenceCnt;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  Only_DereferenceCnt = safeh_HandleCheck((uint64_t)a1, a2, 87652, 88);
  if ((Only_DereferenceCnt & 0x80000000) == 0)
  {
    v7 = a1[2];
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"WPARSER_IMPL_CRF", 4, 0, (uint64_t)"WPARSER_IMPL CRF ObjClose : Begin", v3, v4, v5, v13);
    v8 = a1[10];
    if (!v8)
    {
LABEL_5:
      heap_Free(*(_QWORD **)(v7 + 8), (uint64_t)a1);
      log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"WPARSER_IMPL_CRF", 4, 0, (uint64_t)"WPARSER_IMPL CRF ObjClose : End (%x)", v9, v10, v11, Only_DereferenceCnt);
      return Only_DereferenceCnt;
    }
    Only_DereferenceCnt = crf_Deinit_ReadOnly_DereferenceCnt(a1[2], a1[5], v8);
    if ((Only_DereferenceCnt & 0x80000000) == 0)
    {
      a1[10] = 0;
      goto LABEL_5;
    }
  }
  return Only_DereferenceCnt;
}

uint64_t wparser_impl_crf_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t MaxWordLen;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v3 & 0x80000000) != 0)
    return v3;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL_CRF", 4, 0, (uint64_t)"WPARSER_IMPL CRF ObjReopen : Begin", v4, v5, v6, v12);
  MaxWordLen = wparser_impl_crf_loc_GetMaxWordLen(a1);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL_CRF", 4, 0, (uint64_t)"WPARSER_IMPL CRF ObjReopen : End (%x)", v8, v9, v10, MaxWordLen);
  return MaxWordLen;
}

uint64_t wparser_impl_crf_Init(_WORD **a1, int a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t inited;
  uint64_t v10;
  int Str;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Only_ReferenceCnt;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26[2];
  _OWORD v27[8];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v24 = 7549556;
  memset(v27, 0, sizeof(v27));
  v23 = 0;
  inited = safeh_HandleCheck((uint64_t)a1, a2, 87652, 88);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = (*(uint64_t (**)(_QWORD, _QWORD, int *, uint64_t))(*a3 + 72))(a3[1], a3[2], &v24, (uint64_t)a1 + 68);
  if ((inited & 0x80000000) != 0)
    return inited;
  a1[7] = a3;
  *((_DWORD *)a1 + 16) = a6;
  inited = InitRsrcFunction(*a1, (int)a1[1], &v23);
  if ((inited & 0x80000000) != 0)
    return inited;
  v10 = v23;
  v25 = 0;
  *(_QWORD *)v26 = 0;
  Str = paramc_ParamGetStr(*(_QWORD *)(v23 + 40), (uint64_t)"langcode", v26);
  if (Str < 0
    || (Str = paramc_ParamGetStr(*(_QWORD *)(v10 + 40), (uint64_t)"fecfg", &v25), Str < 0)
    || (Str = brokeraux_ComposeBrokerString(v10, "wpcrf", 1, 1, *(char **)v26, 0, 0, (char *)v27, 0x80uLL), Str < 0))
  {
    v21 = Str;
    log_OutText(*(_QWORD *)(v23 + 32), (uint64_t)"WPARSER_IMPL_CRF", 0, 0, (uint64_t)"Could not assemble broker string for WPCRF model", v12, v13, v14, v22);
    return v21 | 0x8C202000;
  }
  else
  {
    log_OutText(*(_QWORD *)(v23 + 32), (uint64_t)"WPARSER_IMPL_CRF", 5, 0, (uint64_t)"looking for WPCRF model at %s", v12, v13, v14, (uint64_t)v27);
    v15 = (uint64_t *)(a1 + 10);
    Only_ReferenceCnt = crf_Init_ReadOnly_ReferenceCnt(*a1, (uint64_t)a1[1], a1[3], (uint64_t)a1[4], a1 + 10, 2, (uint64_t)v27, (uint64_t)"CRPH", 12341, 48, 0);
    if ((Only_ReferenceCnt & 0x80000000) != 0)
    {
      log_OutText(*(_QWORD *)(v23 + 32), (uint64_t)"WPARSER_IMPL_CRF", 5, 0, (uint64_t)"no CRF PW model found", v16, v17, v18, (uint64_t)v27);
      if (*v15)
      {
        Only_ReferenceCnt = crf_Deinit_ReadOnly_DereferenceCnt((uint64_t)a1[2], (uint64_t)a1[5], *v15);
        if ((Only_ReferenceCnt & 0x80000000) == 0)
          *v15 = 0;
      }
    }
  }
  return Only_ReferenceCnt;
}

uint64_t wparser_impl_crf_Normalize(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _WORD *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((result & 0x80000000) == 0)
  {
    *(_BYTE *)(a3 + a5) = 0;
    if (*(_DWORD *)(a1 + 68) != 1)
      return DoWPCRF(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48), *(_QWORD **)(a1 + 56), *(_QWORD *)(a1 + 80), a3, a5, a6, a7, a8, a12, a15);
    result = wordm_mapt2s(*(_QWORD **)(a1 + 56), a3, a5);
    if ((result & 0x80000000) == 0)
      return DoWPCRF(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48), *(_QWORD **)(a1 + 56), *(_QWORD *)(a1 + 80), a3, a5, a6, a7, a8, a12, a15);
  }
  return result;
}

uint64_t wparser_impl_crf_Spell(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, uint64_t a10, unsigned int a11)
{
  uint64_t result;
  uint64_t v18;

  result = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((result & 0x80000000) == 0)
  {
    LOWORD(v18) = a9;
    return DoSpell(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48), *(_QWORD **)(a1 + 56), a3, a5, a6, a7, a8, v18, a10, a11, *(_BYTE *)(a1 + 72));
  }
  return result;
}

uint64_t wparser_impl_crf_Latin(uint64_t a1, int a2, uint64_t a3, int a4, char **a5)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((result & 0x80000000) == 0)
    return DoLatin(*(_QWORD *)(a1 + 16), *(_QWORD **)(a1 + 56), a3, a4, a5);
  return result;
}

uint64_t wparser_impl_crf_End(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wparser_impl_crf_ProcessStart(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wparser_impl_crf_ProcessEnd(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wparser_impl_crf_loc_GetMaxWordLen(uint64_t a1)
{
  uint64_t Str;
  uint64_t v3;
  int v4;
  char *v6;

  v6 = 0;
  Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"maxdctwordlen", &v6);
  if ((Str & 0x80000000) != 0)
  {
    v3 = 0;
    LOBYTE(v4) = 7;
    goto LABEL_5;
  }
  v3 = Str;
  v4 = atoi(v6);
  if ((v4 - 1) <= 0xFE)
  {
LABEL_5:
    *(_BYTE *)(a1 + 72) = v4;
    return v3;
  }
  return 15;
}

uint64_t DoWPCRF(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _WORD *a10, uint64_t a11)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  size_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  int v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  unsigned int v59;
  unsigned __int16 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BOOL4 v79;
  uint64_t v81;
  uint64_t v82;
  unsigned int LogLevel;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  __int16 v87;
  char __src[16];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  char v92;
  char __s[16];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  char v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v87 = 0;
  v86 = 0;
  v85 = 0;
  LogLevel = log_GetLogLevel(*(_QWORD *)(a1 + 32));
  *(_QWORD *)__s = 0;
  *(_WORD *)(a11 + 8) = 0;
  *(_DWORD *)(a11 + 16) = 1;
  if ((bed_GetpElem(a8, 0xFFFFu, __s) & 0x80000000) == 0)
  {
    if (!(_DWORD)a6 || (_DWORD)a6 == (unsigned __int16)*(_DWORD *)(*(_QWORD *)__s + 36))
    {
      v21 = *(_QWORD *)(a1 + 32);
    }
    else
    {
      *(_DWORD *)(a11 + 16) = 0;
      v21 = *(_QWORD *)(a1 + 32);
    }
    log_OutText(v21, a2, 5, 0, (uint64_t)"[WPCRF] (length for CRF %d - region length in Marker %d %s)", v18, v19, v20, a6);
  }
  v82 = a2;
  v22 = heap_Calloc(*(_QWORD **)(a1 + 8), a6, 8);
  if (v22)
  {
    v23 = (_QWORD *)v22;
    v79 = LogLevel > 4;
    v24 = heap_Calloc(*(_QWORD **)(a1 + 8), a6, 8);
    if (v24)
    {
      v84 = heap_Calloc(*(_QWORD **)(a1 + 8), a6, 8);
      if (v84)
      {
        v77 = a7;
        v78 = a8;
        v81 = a6;
        if ((_DWORD)a6)
        {
          v25 = 0;
          LODWORD(v26) = 0;
          while (1)
          {
            v97 = 0;
            v95 = 0u;
            v96 = 0u;
            *(_OWORD *)__s = 0u;
            v94 = 0u;
            v92 = 0;
            v90 = 0u;
            v91 = 0u;
            *(_OWORD *)__src = 0u;
            v89 = 0u;
            v27 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(a5 + v25));
            sysdct_wpcrf_LookUp_Chinese(a3, a5 + v25, v27, __s, __src, (_BOOL4 *)(v24 + 8 * v26));
            if (LogLevel >= 5)
              log_OutText(*(_QWORD *)(a1 + 32), v82, 5, 0, (uint64_t)"[WPCRF] Feat: %s", v28, v29, v30, (uint64_t)__s);
            v31 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 65);
            *(_QWORD *)(v84 + 8 * v26) = v31;
            if (!v31)
            {
LABEL_29:
              v34 = 2350915594;
              goto LABEL_78;
            }
            if (__src[0])
            {
              if (!(*(_DWORD *)__src ^ 0x4C4C554E | __src[4]))
              {
                heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v31);
                *(_QWORD *)(v84 + 8 * v26) = 0;
                goto LABEL_22;
              }
              strcpy(v31, __src);
            }
            else
            {
              strncpy(v31, (const char *)(a5 + v25), v27);
            }
            v32 = strlen(__s);
            v33 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v32 + 1);
            v23[v26] = v33;
            if (!v33)
              goto LABEL_29;
            strcpy(v33, __s);
            LODWORD(v26) = v26 + 1;
LABEL_22:
            v25 += v27;
            if (v25 >= a6)
              goto LABEL_31;
          }
        }
        LODWORD(v26) = 0;
LABEL_31:
        crf_Process(a4, v23, v26, &v85, &v86);
        v40 = v77;
        v39 = a8;
        if (v86)
        {
          v41 = heap_Calloc(*(_QWORD **)(a1 + 8), 64, v86);
          if (!v41)
          {
            v34 = 2350915594;
LABEL_78:
            v35 = v85;
            v36 = v86;
            if ((_DWORD)v26)
            {
              v70 = 0;
              v26 = v26;
              do
              {
                v71 = v23[v70];
                if (v71)
                  heap_Free(*(_QWORD **)(a1 + 8), v71);
                ++v70;
              }
              while (v26 != v70);
              heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v23);
              heap_Free(*(_QWORD **)(a1 + 8), v24);
              v72 = (uint64_t *)v84;
              do
              {
                if (*v72)
                  heap_Free(*(_QWORD **)(a1 + 8), *v72);
                ++v72;
                --v26;
              }
              while (v26);
            }
            else
            {
              heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v23);
              heap_Free(*(_QWORD **)(a1 + 8), v24);
            }
            v37 = *(_QWORD **)(a1 + 8);
            v38 = v84;
LABEL_90:
            heap_Free(v37, v38);
            if (!v35)
              return v34;
            goto LABEL_91;
          }
          v45 = (char *)v41;
          if (v86)
          {
            v46 = 0;
            v47 = (_DWORD *)v24;
            do
            {
              v48 = v85;
              if (LogLevel >= 5)
              {
                log_OutText(*(_QWORD *)(a1 + 32), v82, 5, 0, (uint64_t)"[WPCRF] Predicted Tag: %s", v42, v43, v44, *(_QWORD *)(v85 + 8 * v46));
                v48 = v85;
              }
              v49 = **(unsigned __int8 **)(v48 + 8 * v46);
              if ((v49 == 83 || v49 == 66)
                && *v45
                && (v49 != 83 || *v47 != 1)
                && (v46 && !*(v47 - 2) || strlen(v45) >= 2))
              {
                hlp_updateWord(a9, v45, a10, a1, a11, &v87);
                bzero(v45, v86 << 6);
              }
              v50 = *(const char **)(v84 + 8 * v46);
              if (v50)
                strcat(v45, v50);
              ++v46;
              v47 += 2;
            }
            while (v46 < v86);
          }
          if (*v45)
            hlp_updateWord(a9, v45, a10, a1, a11, &v87);
          heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v45);
          v40 = v77;
          v39 = v78;
          if ((_DWORD)a6)
          {
            *(_QWORD *)__s = 0;
            *(_WORD *)__src = 0;
            if ((bed_GetcElem(a9, __src) & 0x80000000) == 0)
            {
              if (*(_WORD *)__src)
              {
                UTOISubTrace(v79, a1, a9, (uint64_t)"replacement string");
                if (*(_DWORD *)(a11 + 16) == 1 && (bed_GetpElem(a9, 0, __s) & 0x80000000) == 0)
                {
                  v57 = *(unsigned __int16 *)__src;
                  if (*(_WORD *)__src)
                  {
                    v58 = 0;
                    v59 = 0;
                    v60 = 1;
                    v61 = *(_QWORD *)__s;
                    do
                    {
                      if (*(_BYTE *)(v61 + v58) == 16)
                      {
                        v62 = *(unsigned __int16 *)(a11 + 8);
                        if (v59 >= v62)
                        {
LABEL_69:
                          v66 = v24;
                          log_OutText(*(_QWORD *)(a1 + 32), v82, 5, 0, (uint64_t)"[WPCRF] cant find non-deleted word to align new word number %d with", v54, v55, v56, v60);
                          v67 = 0;
                          goto LABEL_70;
                        }
                        v63 = v59;
                        v64 = (int *)(*(_QWORD *)a11 + 12 * v59 + 4);
                        while (1)
                        {
                          v65 = *v64;
                          v64 += 3;
                          if (v65 != 1)
                            break;
                          if (v62 == ++v63)
                            goto LABEL_69;
                        }
                        *(_WORD *)(*(_QWORD *)a11 + 12 * (unsigned __int16)v63 + 8) = v58;
                        ++v60;
                        v59 = (unsigned __int16)v63 + 1;
                        v57 = *(unsigned __int16 *)__src;
                      }
                      ++v58;
                    }
                    while (v58 < v57);
                  }
                  v66 = v24;
                  v67 = 1;
LABEL_70:
                  if (LogLevel >= 5 && *(_WORD *)(a11 + 8))
                  {
                    v68 = 0;
                    v69 = 0;
                    do
                    {
                      log_OutText(*(_QWORD *)(a1 + 32), v82, 5, 0, (uint64_t)"[WPCRF] [%d] origWordPos=%d, newPos=%d, bDeleted=%d", v54, v55, v56, v69++);
                      v68 += 12;
                    }
                    while (v69 < *(unsigned __int16 *)(a11 + 8));
                  }
                  v40 = v77;
                  v39 = v78;
                  v24 = v66;
                  a6 = v81;
                  if (v67)
                    *(_DWORD *)(a11 + 12) = 0;
                }
              }
              else
              {
                log_OutText(*(_QWORD *)(a1 + 32), v82, 5, 0, (uint64_t)"[WPCRF] deleting region, no replacement text found", v51, v52, v53, v76);
              }
            }
          }
        }
        v34 = utoin_IncrReplaceCurrentRegion(v40, v39, a9, a6, (uint64_t *)a11);
        if ((v34 & 0x80000000) == 0)
          UTOITrace(v79, a1, v40, v39, (uint64_t)"END of DOWPCRF");
        goto LABEL_78;
      }
    }
    v34 = 2586845194;
    v35 = v85;
    v36 = v86;
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v23);
    if (v24)
    {
      v37 = *(_QWORD **)(a1 + 8);
      v38 = v24;
      goto LABEL_90;
    }
  }
  else
  {
    v34 = 2586845194;
    v35 = v85;
    v36 = v86;
  }
  if (!v35)
    return v34;
LABEL_91:
  if (v36)
  {
    v73 = v36;
    v74 = (uint64_t *)v35;
    do
    {
      if (*v74)
        heap_Free(*(_QWORD **)(a1 + 8), *v74);
      ++v74;
      --v73;
    }
    while (v73);
  }
  heap_Free(*(_QWORD **)(a1 + 8), v35);
  return v34;
}

size_t hlp_updateWord(uint64_t a1, char *a2, _WORD *a3, uint64_t a4, uint64_t a5, __int16 *a6)
{
  unsigned __int16 v12;
  __int16 v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t result;

  if ((bed_Insert(a1, &szWORD_BEG_3, 1) & 0x80000000) == 0)
  {
    ++*a3;
    v12 = strlen(a2);
    if ((bed_Insert(a1, a2, v12) & 0x80000000) == 0)
    {
      *a3 += strlen(a2);
      if ((bed_Insert(a1, &szWORD_END_4, 1) & 0x80000000) == 0)
        ++*a3;
    }
  }
  if (*(_DWORD *)(a5 + 16) == 1)
  {
    v13 = *a6;
    v14 = *(unsigned __int16 *)(a5 + 8);
    v15 = *(_QWORD *)a5;
    if (v14 < *(unsigned __int16 *)(a5 + 10))
    {
LABEL_9:
      v17 = v15 + 12 * v14;
      *(_WORD *)v17 = v13;
      *(_QWORD *)(v17 + 2) = 0;
      *(_WORD *)(a5 + 8) = v14 + 1;
      goto LABEL_10;
    }
    v16 = heap_Realloc(*(uint64_t **)(a4 + 8), v15, 12 * *(unsigned __int16 *)(a5 + 10) + 121);
    if (v16)
    {
      v15 = v16;
      *(_QWORD *)a5 = v16;
      *(_WORD *)(a5 + 10) += 10;
      v14 = *(unsigned __int16 *)(a5 + 8);
      goto LABEL_9;
    }
  }
LABEL_10:
  result = strlen(a2);
  *a6 += result;
  return result;
}

uint64_t wparserDummy_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2350915585;
  result = 0;
  *a2 = &IWparserImplDummy;
  return result;
}

uint64_t wparser_impl_dummy_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  v7 = 0;
  if (!a3)
    return 2350915591;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t wparser_impl_dummy_ClassClose()
{
  return 0;
}

uint64_t wparser_impl_dummy_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t MaxWordLen;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v22 = 0;
  MaxWordLen = 2350915591;
  if (a5)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v22);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(_QWORD *)(v22 + 32), (uint64_t)"WPARSER_IMPL_DUMMY", 4, 0, (uint64_t)"WPARSER_IMPL DUMMY ObjOpen: Begin", v12, v13, v14, v21);
      v15 = (_QWORD *)heap_Calloc(*(_QWORD **)(v22 + 8), 1, 80);
      if (v15)
      {
        v16 = v15;
        *v15 = a3;
        v15[1] = a4;
        v15[2] = v22;
        v15[3] = a1;
        v15[4] = a2;
        v15[5] = a1;
        v15[6] = "WPARSER_IMPL_DUMMY";
        MaxWordLen = wparser_impl_crf_loc_GetMaxWordLen((uint64_t)v15);
        *(_QWORD *)a5 = v16;
        *(_DWORD *)(a5 + 8) = 87652;
        log_OutText(*(_QWORD *)(v22 + 32), (uint64_t)"WPARSER_IMPL_DUMMY", 4, 0, (uint64_t)"WPARSER_IMPL DUMMY ObjOpen: End (%x)", v17, v18, v19, MaxWordLen);
      }
      else
      {
        return 2350915594;
      }
    }
  }
  return MaxWordLen;
}

uint64_t wparser_impl_dummy_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = safeh_HandleCheck(a1, a2, 87652, 80);
  if ((v6 & 0x80000000) == 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"WPARSER_IMPL_DUMMY", 4, 0, (uint64_t)"WPARSER_IMPL DUMMY ObjClose : Begin", v3, v4, v5, v12);
    heap_Free(*(_QWORD **)(v7 + 8), a1);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"WPARSER_IMPL_DUMMY", 4, 0, (uint64_t)"WPARSER_IMPL DUMMY ObjClose : End (%x)", v8, v9, v10, v6);
  }
  return v6;
}

uint64_t wparser_impl_dummy_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t MaxWordLen;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = safeh_HandleCheck(a1, a2, 87652, 80);
  if ((v3 & 0x80000000) != 0)
    return v3;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL_DUMMY", 4, 0, (uint64_t)"WPARSER_IMPL DUMMY ObjReopen : Begin", v4, v5, v6, v12);
  MaxWordLen = wparser_impl_crf_loc_GetMaxWordLen(a1);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL_DUMMY", 4, 0, (uint64_t)"WPARSER_IMPL DUMMY ObjReopen : End (%x)", v8, v9, v10, MaxWordLen);
  return MaxWordLen;
}

uint64_t wparser_impl_dummy_Init(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t result;
  uint64_t v10;
  int v11;

  v11 = 7549556;
  v10 = 0;
  result = safeh_HandleCheck(a1, a2, 87652, 80);
  if ((result & 0x80000000) == 0)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, int *, uint64_t))(*a3 + 72))(a3[1], a3[2], &v11, a1 + 68);
    if ((result & 0x80000000) == 0)
    {
      *(_QWORD *)(a1 + 56) = a3;
      *(_DWORD *)(a1 + 64) = a6;
      return InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v10);
    }
  }
  return result;
}

uint64_t wparser_impl_dummy_Normalize(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _WORD *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 87652, 80);
  if ((result & 0x80000000) == 0)
  {
    *(_BYTE *)(a3 + a5) = 0;
    if (*(_DWORD *)(a1 + 68) != 1)
      return DoWPDUMMY(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48), *(_QWORD **)(a1 + 56), a3, a5, a6, a7, a8, a12, a15);
    result = wordm_mapt2s(*(_QWORD **)(a1 + 56), a3, a5);
    if ((result & 0x80000000) == 0)
      return DoWPDUMMY(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48), *(_QWORD **)(a1 + 56), a3, a5, a6, a7, a8, a12, a15);
  }
  return result;
}

uint64_t wparser_impl_dummy_Spell(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, uint64_t a10, unsigned int a11)
{
  uint64_t result;
  uint64_t v18;

  result = safeh_HandleCheck(a1, a2, 87652, 80);
  if ((result & 0x80000000) == 0)
  {
    LOWORD(v18) = a9;
    return DoSpell(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48), *(_QWORD **)(a1 + 56), a3, a5, a6, a7, a8, v18, a10, a11, *(_BYTE *)(a1 + 72));
  }
  return result;
}

uint64_t wparser_impl_dummy_Latin(uint64_t a1, int a2, uint64_t a3, int a4, char **a5)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 87652, 80);
  if ((result & 0x80000000) == 0)
    return DoLatin(*(_QWORD *)(a1 + 16), *(_QWORD **)(a1 + 56), a3, a4, a5);
  return result;
}

uint64_t wparser_impl_dummy_End(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 80);
}

uint64_t wparser_impl_dummy_ProcessStart(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 80);
}

uint64_t wparser_impl_dummy_ProcessEnd(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 80);
}

uint64_t DoWPDUMMY(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _WORD *a9, uint64_t a10)
{
  unsigned int LogLevel;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  size_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  const char **v39;
  const char *v40;
  unsigned __int16 v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unsigned int v54;
  unsigned __int16 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char __src[16];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  char v81;
  char __s[16];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  char v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  LogLevel = log_GetLogLevel(*(_QWORD *)(a1 + 32));
  v72 = LogLevel > 4;
  *(_QWORD *)__s = 0;
  *(_WORD *)(a10 + 8) = 0;
  *(_DWORD *)(a10 + 16) = 1;
  if ((bed_GetpElem(a7, 0xFFFFu, __s) & 0x80000000) == 0)
  {
    if (!(_DWORD)a5 || (_DWORD)a5 == (unsigned __int16)*(_DWORD *)(*(_QWORD *)__s + 36))
    {
      v22 = *(_QWORD *)(a1 + 32);
    }
    else
    {
      *(_DWORD *)(a10 + 16) = 0;
      v22 = *(_QWORD *)(a1 + 32);
    }
    log_OutText(v22, a2, 5, 0, (uint64_t)"[WPDUMMY] (length for DUMMY %d - region length in Marker %d %s)", v19, v20, v21, a5);
  }
  v73 = a2;
  v23 = 2591039498;
  v75 = heap_Calloc(*(_QWORD **)(a1 + 8), a5, 8);
  if (!v75)
    return v23;
  v24 = heap_Calloc(*(_QWORD **)(a1 + 8), a5, 8);
  v25 = *(_QWORD **)(a1 + 8);
  v74 = v24;
  if (!v24)
  {
    v61 = v75;
    goto LABEL_71;
  }
  v76 = heap_Calloc(v25, a5, 8);
  if (!v76)
  {
    v27 = 0;
    goto LABEL_64;
  }
  if (!(_DWORD)a5)
  {
    v27 = 0;
LABEL_56:
    v37 = (uint64_t *)a10;
    goto LABEL_57;
  }
  v71 = a8;
  v26 = 0;
  v27 = 0;
  do
  {
    v86 = 0;
    v84 = 0u;
    v85 = 0u;
    *(_OWORD *)__s = 0u;
    v83 = 0u;
    v81 = 0;
    v79 = 0u;
    v80 = 0u;
    *(_OWORD *)__src = 0u;
    v78 = 0u;
    v28 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(a4 + v26));
    sysdct_wpdummy_LookUp_Chinese(a3, a4 + v26, v28, __s, __src, (_BOOL4 *)(v74 + 8 * v27));
    if (LogLevel >= 5)
      log_OutText(*(_QWORD *)(a1 + 32), v73, 5, 0, (uint64_t)"[WPCRF] Feat: %s", v29, v30, v31, (uint64_t)__s);
    v32 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 65);
    *(_QWORD *)(v76 + 8 * v27) = v32;
    if (!v32)
    {
LABEL_54:
      v23 = 2350915594;
      goto LABEL_59;
    }
    if (__src[0])
    {
      if (!(*(_DWORD *)__src ^ 0x4C4C554E | __src[4]))
      {
        heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v32);
        *(_QWORD *)(v76 + 8 * v27) = 0;
        goto LABEL_22;
      }
      strcpy(v32, __src);
    }
    else
    {
      strncpy(v32, (const char *)(a4 + v26), v28);
    }
    v33 = strlen(__s);
    v34 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v33 + 1);
    *(_QWORD *)(v75 + 8 * v27) = v34;
    if (!v34)
      goto LABEL_54;
    strcpy(v34, __s);
    ++v27;
LABEL_22:
    v26 += v28;
  }
  while (v26 < a5);
  a8 = v71;
  if (!v27)
    goto LABEL_56;
  v35 = v27;
  v36 = heap_Calloc(*(_QWORD **)(a1 + 8), 64, v27);
  v37 = (uint64_t *)a10;
  if (!v36)
  {
    v23 = 2350915594;
    goto LABEL_60;
  }
  v38 = (char *)v36;
  v39 = (const char **)v76;
  do
  {
    v40 = *v39++;
    strcat(v38, v40);
    --v35;
  }
  while (v35);
  a8 = v71;
  if (*v38)
  {
    if ((bed_Insert(v71, &szWORD_BEG_4, 1) & 0x80000000) == 0)
    {
      ++*a9;
      v41 = strlen(v38);
      if ((bed_Insert(v71, v38, v41) & 0x80000000) == 0)
      {
        *a9 += strlen(v38);
        if ((bed_Insert(v71, &szWORD_END_5, 1) & 0x80000000) == 0)
          ++*a9;
      }
    }
    if (*(_DWORD *)(a10 + 16) == 1)
    {
      v42 = *(unsigned __int16 *)(a10 + 8);
      v43 = *(_QWORD *)a10;
      if (v42 < *(unsigned __int16 *)(a10 + 10))
        goto LABEL_36;
      v44 = heap_Realloc(*(uint64_t **)(a1 + 8), v43, 12 * *(unsigned __int16 *)(a10 + 10) + 121);
      if (v44)
      {
        v43 = v44;
        *(_QWORD *)a10 = v44;
        *(_WORD *)(a10 + 10) += 10;
        v42 = *(unsigned __int16 *)(a10 + 8);
LABEL_36:
        v45 = v43 + 12 * v42;
        *(_WORD *)v45 = 0;
        *(_QWORD *)(v45 + 2) = 0;
        *(_WORD *)(a10 + 8) = v42 + 1;
      }
    }
  }
  heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v38);
  *(_QWORD *)__s = 0;
  *(_WORD *)__src = 0;
  if ((bed_GetcElem(v71, __src) & 0x80000000) == 0)
  {
    if (*(_WORD *)__src)
    {
      UTOISubTrace(v72, a1, v71, (uint64_t)"replacement string");
      if (*(_DWORD *)(a10 + 16) == 1 && (bed_GetpElem(v71, 0, __s) & 0x80000000) == 0)
      {
        v52 = *(unsigned __int16 *)__src;
        if (*(_WORD *)__src)
        {
          v53 = 0;
          v54 = 0;
          v55 = 1;
          v56 = *(_QWORD *)__s;
          do
          {
            if (*(_BYTE *)(v56 + v53) == 16)
            {
              v57 = *(unsigned __int16 *)(a10 + 8);
              if (v54 >= v57)
              {
LABEL_76:
                log_OutText(*(_QWORD *)(a1 + 32), v73, 5, 0, (uint64_t)"[WPDUMMY] cant find non-deleted word to align new word number %d with", v49, v50, v51, v55);
                v70 = 0;
                goto LABEL_77;
              }
              v58 = v54;
              v59 = (int *)(*(_QWORD *)a10 + 12 * v54 + 4);
              while (1)
              {
                v60 = *v59;
                v59 += 3;
                if (v60 != 1)
                  break;
                if (v57 == ++v58)
                  goto LABEL_76;
              }
              *(_WORD *)(*(_QWORD *)a10 + 12 * (unsigned __int16)v58 + 8) = v53;
              ++v55;
              v54 = (unsigned __int16)v58 + 1;
              v52 = *(unsigned __int16 *)__src;
            }
            ++v53;
          }
          while (v53 < v52);
        }
        v70 = 1;
LABEL_77:
        if (LogLevel >= 5 && *(_WORD *)(a10 + 8))
        {
          v67 = 0;
          v68 = 0;
          do
          {
            log_OutText(*(_QWORD *)(a1 + 32), v73, 5, 0, (uint64_t)"[WPDUMMY] [%d] origWordPos=%d, newPos=%d, bDeleted=%d", v49, v50, v51, v68++);
            v67 += 12;
          }
          while (v68 < *(unsigned __int16 *)(a10 + 8));
        }
        a8 = v71;
        if (v70)
          *(_DWORD *)(a10 + 12) = 0;
      }
    }
    else
    {
      log_OutText(*(_QWORD *)(a1 + 32), v73, 5, 0, (uint64_t)"[WPDUMMY] deleting region, no replacement text found", v46, v47, v48, v69);
    }
  }
LABEL_57:
  v23 = utoin_IncrReplaceCurrentRegion(a6, a7, a8, a5, v37);
  if ((v23 & 0x80000000) == 0)
    UTOITrace(v72, a1, a6, a7, (uint64_t)"END of DOWPDUMMY");
LABEL_59:
  if (v27)
  {
LABEL_60:
    v62 = v27;
    v63 = (uint64_t *)v75;
    do
    {
      if (*v63)
        heap_Free(*(_QWORD **)(a1 + 8), *v63);
      ++v63;
      --v62;
    }
    while (v62);
  }
LABEL_64:
  heap_Free(*(_QWORD **)(a1 + 8), v75);
  heap_Free(*(_QWORD **)(a1 + 8), v74);
  if (v76)
  {
    if (v27)
    {
      v64 = v27;
      v65 = (uint64_t *)v76;
      do
      {
        if (*v65)
          heap_Free(*(_QWORD **)(a1 + 8), *v65);
        ++v65;
        --v64;
      }
      while (v64);
    }
    v25 = *(_QWORD **)(a1 + 8);
    v61 = v76;
LABEL_71:
    heap_Free(v25, v61);
  }
  return v23;
}

uint64_t get_char_kind_hash(unsigned int a1, int a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  char *v5;

  v2 = a2 + a1;
  if (a2 == 131)
    v2 = 3;
  if (a1 == 130)
    v2 = a2 | 0x100;
  if (!a2)
    v2 = a1;
  v3 = Char_kind_hash_table[v2];
  if (v3 == 0xFFFF)
    return 0xFFFFFFFFLL;
  while (1)
  {
    v4 = (__int16)v3;
    v5 = (&Char_kind)[2 * (__int16)v3];
    if (*v5 == a1 && v5[1] == a2)
      break;
    v3 = *((unsigned __int16 *)&Char_kind + 8 * v4 + 5);
    if (v3 == 0xFFFF)
      return 0xFFFFFFFFLL;
  }
  return SLOWORD((&Char_kind)[2 * v4 + 1]);
}

unsigned __int8 *get_pron_from_grapheme_hash(unsigned __int8 *result, char *a2, int *a3, _DWORD *a4, int a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int i;
  char *v11;
  BOOL v12;
  int v13;
  char *v14;
  char v15;
  unsigned __int8 *v16;
  int v17;

  if (result[1])
    v5 = 2;
  else
    v5 = 1;
  *a3 = v5;
  while (2)
  {
    *a4 = 0;
    v6 = *result;
    v7 = *a3;
    if (*a3 == 2 && (v8 = result[1]) != 0)
    {
      v9 = v8 + v6;
      if (v8 == 131)
        v9 = 3;
      if (v6 == 130)
        v9 = v8 | 0x100;
    }
    else
    {
      v8 = 0;
      v9 = *result;
    }
    for (i = Char_pron_hash_table[v9]; i != 0xFFFF; i = *((unsigned __int16 *)&Char_pron + 12 * (__int16)i + 9))
    {
      v11 = (&Char_pron)[3 * (__int16)i];
      if (*v11 == v6
        && v11[1] == v8
        && SLOWORD((&Char_pron)[3 * (__int16)i + 2]) == a5)
      {
        v14 = (&Char_pron)[3 * (__int16)i + 1];
        v15 = *v14;
        if (*v14)
        {
          v16 = (unsigned __int8 *)(v14 + 1);
          do
          {
            *a2++ = v15;
            ++*a4;
            v17 = *v16++;
            v15 = v17;
          }
          while (v17);
        }
        *a2 = 0;
        return result;
      }
    }
    v12 = __OFSUB__(v7, 1);
    v13 = v7 - 1;
    *a3 = v13;
    if (!((v13 < 0) ^ v12 | (v13 == 0)))
      continue;
    break;
  }
  *a3 = 0;
  *a4 = 0;
  return result;
}

uint64_t get_name_of_symbol(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char v8;

  if (a3 < 0 || a1[2] <= a3)
    return 0;
  virtual_fseek(*a1, a2, a1[1] + 32 * a3, 0);
  v7 = 0;
  while (1)
  {
    v8 = virtual_getc((_QWORD *)*a1, a2);
    *(_BYTE *)(a4 + v7) = v8;
    if (!v8)
      break;
    if (++v7 == 32)
      return 0;
  }
  return a4;
}

uint64_t get_pointer_of_symbol(uint64_t a1, uint64_t a2)
{
  if (a2 < 0 || *(_QWORD *)(a1 + 16) <= a2)
    return 0;
  else
    return **(_QWORD **)a1 + *(_QWORD *)(a1 + 8) + 32 * a2;
}

uint64_t get_number_of_symbol(uint64_t **a1, char *__s1)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v4 = a1[1];
  v3 = a1[2];
  v5 = **a1;
  v6 = strcmp(__s1, (const char *)v4 + v5);
  if (!v6)
    return 0;
  if (v6 < 0)
    return -1;
  v7 = (uint64_t)v3 - 1;
  v8 = strcmp(__s1, (const char *)&v4[4 * v7] + v5);
  if (!v8)
    return v7;
  if (v8 > 0 || v7 == 1)
    return -1;
  v10 = 0;
  v11 = v7;
  while (1)
  {
    v12 = v7 >= 0 ? v7 : v7 + 1;
    v7 = v10 + (v12 >> 1);
    v13 = strcmp(__s1, (const char *)&v4[4 * v7] + v5);
    if (!v13)
      break;
    if (v13 < 0)
      v11 = v7;
    else
      v10 = v7;
    v7 = v11 - v10;
    if (v11 - v10 == 1)
      return -1;
  }
  return v7;
}

uint64_t log_output_cost(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v5[16];
  char __s[64];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  result = ssftstring_AppendCStr(a1, "[");
  if ((result & 0x80000000) == 0)
  {
    strcpy(__s, "f^=\"");
    LH_itoa(*(_DWORD *)(a2 + 56), v5, 0xAu);
    __strcat_chk();
    __strcat_chk();
    LH_itoa(*(_DWORD *)(a2 + 64), v5, 0xAu);
    __strcat_chk();
    __strcat_chk();
    result = ssftstring_AppendCStr(a1, __s);
    if ((result & 0x80000000) == 0)
      return ssftstring_AppendCStr(a1, "]");
  }
  return result;
}

uint64_t log_output_tree(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t *a12)
{
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t appended;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v48[16];
  char __s[64];
  _BYTE v50[64];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v19 = ssftstring_Clear(a3);
  if ((v19 & 0x80000000) == 0 && get_name_of_symbol(SF_symbol_file, a12, *(_QWORD *)a4, (uint64_t)v50))
  {
    v20 = *(_DWORD *)(a4 + 32);
    if (v20)
    {
      if (v20 == 1)
      {
        if (!(_DWORD)a5 || v50[0] != 95)
        {
          strcpy(__s, "<");
          __strcat_chk();
          if ((_DWORD)a5 != 1)
          {
            __strcat_chk();
            LH_itoa(*(_DWORD *)(a4 + 8), v48, 0xAu);
            __strcat_chk();
          }
          __strcat_chk();
          appended = ssftstring_AppendCStr(a3, __s);
          if ((appended & 0x80000000) != 0)
            return appended;
          if (a11 == 1)
          {
            strcpy(__s, "(");
            LH_itoa(*(_DWORD *)(a4 + 80), v48, 0xAu);
            __strcat_chk();
            __strcat_chk();
            appended = ssftstring_AppendCStr(a3, __s);
            if ((appended & 0x80000000) != 0)
              return appended;
          }
          if (a6 == 1)
          {
            appended = log_output_attribute(a3, *(_QWORD *)(a4 + 24));
            if ((appended & 0x80000000) != 0)
              return appended;
          }
          if (a7 == 1)
          {
            appended = log_output_cost(a3, a4);
            if ((appended & 0x80000000) != 0)
              return appended;
          }
        }
        v37 = *(_QWORD *)(a1 + 32);
        v38 = ssftstring_CStr(a3);
        log_OutText(v37, a2, 5, 0, (uint64_t)"[A*] %s", v39, v40, v41, v38);
        appended = ssftstring_Clear(a3);
        if ((appended & 0x80000000) != 0)
          return appended;
        v27 = *(_QWORD *)(a4 + 48);
        v28 = a1;
        v29 = a2;
        v30 = a3;
        v31 = a5;
      }
      else
      {
        if (v20 != 2)
        {
LABEL_58:
          v42 = *(_QWORD *)(a1 + 32);
          v43 = ssftstring_CStr(a3);
          log_OutText(v42, a2, 5, 0, (uint64_t)"[A*] %s", v44, v45, v46, v43);
          return ssftstring_Clear(a3);
        }
        if (!(_DWORD)a5 || v50[0] != 95)
        {
          strcpy(__s, "<");
          __strcat_chk();
          if ((_DWORD)a5 != 1)
          {
            __strcat_chk();
            LH_itoa(*(_DWORD *)(a4 + 8), v48, 0xAu);
            __strcat_chk();
          }
          __strcat_chk();
          appended = ssftstring_AppendCStr(a3, __s);
          if ((appended & 0x80000000) != 0)
            return appended;
          if (a11 == 1)
          {
            strcpy(__s, "(");
            LH_itoa(*(_DWORD *)(a4 + 80), v48, 0xAu);
            __strcat_chk();
            __strcat_chk();
            appended = ssftstring_AppendCStr(a3, __s);
            if ((appended & 0x80000000) != 0)
              return appended;
          }
          if (a6 == 1)
          {
            appended = log_output_attribute(a3, *(_QWORD *)(a4 + 24));
            if ((appended & 0x80000000) != 0)
              return appended;
          }
          if (a7 == 1)
          {
            appended = log_output_cost(a3, a4);
            if ((appended & 0x80000000) != 0)
              return appended;
          }
        }
        v21 = *(_QWORD *)(a1 + 32);
        v22 = ssftstring_CStr(a3);
        log_OutText(v21, a2, 5, 0, (uint64_t)"[A*] %s", v23, v24, v25, v22);
        appended = ssftstring_Clear(a3);
        if ((appended & 0x80000000) != 0)
          return appended;
        appended = log_output_tree(a1, a2, a3, *(_QWORD *)(a4 + 40), a5);
        if ((appended & 0x80000000) != 0)
          return appended;
        v27 = *(_QWORD *)(a4 + 48);
        v28 = a1;
        v29 = a2;
        v30 = a3;
        v31 = a5;
      }
      appended = log_output_tree(v28, v29, v30, v27, v31);
      if ((appended & 0x80000000) == 0)
        goto LABEL_58;
    }
    else
    {
      strcpy(__s, "<");
      __strcat_chk();
      if ((_DWORD)a5 != 1)
      {
        __strcat_chk();
        LH_itoa(*(_DWORD *)(a4 + 8), v48, 0xAu);
        __strcat_chk();
      }
      __strcat_chk();
      appended = ssftstring_AppendCStr(a3, __s);
      if ((appended & 0x80000000) == 0)
      {
        if (a11 != 1
          || (strcpy(__s, "("),
              LH_itoa(*(_DWORD *)(a4 + 80), v48, 0xAu),
              __strcat_chk(),
              __strcat_chk(),
              appended = ssftstring_AppendCStr(a3, __s),
              (appended & 0x80000000) == 0))
        {
          if (a6 != 1 || (appended = log_output_attribute(a3, *(_QWORD *)(a4 + 24)), (appended & 0x80000000) == 0))
          {
            if (a7 != 1 || (appended = log_output_cost(a3, a4), (appended & 0x80000000) == 0))
            {
              appended = ssftstring_AppendCStr(a3, "(");
              if ((appended & 0x80000000) == 0)
              {
                v32 = *(_QWORD *)(a4 + 48);
                if (v32)
                {
                  v33 = 0;
                  do
                  {
                    if ((v33 & 1) != 0)
                    {
                      appended = ssftstring_AppendCStr(a3, ",");
                      if ((appended & 0x80000000) != 0)
                        return appended;
                    }
                    appended = ssftstring_AppendCStr(a3, *(char **)v32);
                    if ((appended & 0x80000000) != 0)
                      return appended;
                    appended = ssftstring_AppendCStr(a3, ":\"");
                    if ((appended & 0x80000000) != 0)
                      return appended;
                    appended = log_mbs_fput_sjis(a3, *(int **)(v32 + 8));
                    if ((appended & 0x80000000) != 0)
                      return appended;
                    appended = ssftstring_AppendCStr(a3, "\"");
                    if ((appended & 0x80000000) != 0)
                      return appended;
                    v32 = *(_QWORD *)(v32 + 16);
                    v33 = 1;
                  }
                  while (v32);
                }
                appended = ssftstring_AppendCStr(a3, ")");
                if ((appended & 0x80000000) == 0)
                {
                  v34 = *(_QWORD *)(a4 + 48);
                  while (1)
                  {
                    v34 = *(_QWORD *)(v34 + 24);
                    if (!v34)
                      goto LABEL_58;
                    strcpy(__s, "<");
                    __strcat_chk();
                    if ((_DWORD)a5 != 1)
                    {
                      __strcat_chk();
                      LH_itoa(*(_DWORD *)(a4 + 8), v48, 0xAu);
                      __strcat_chk();
                    }
                    __strcat_chk();
                    appended = ssftstring_AppendCStr(a3, __s);
                    if ((appended & 0x80000000) != 0)
                      return appended;
                    if (a11 == 1)
                    {
                      strcpy(__s, "(");
                      LH_itoa(*(_DWORD *)(a4 + 80), v48, 0xAu);
                      __strcat_chk();
                      __strcat_chk();
                      appended = ssftstring_AppendCStr(a3, __s);
                      if ((appended & 0x80000000) != 0)
                        return appended;
                    }
                    if (a6 == 1)
                    {
                      appended = log_output_attribute(a3, *(_QWORD *)(a4 + 24));
                      if ((appended & 0x80000000) != 0)
                        return appended;
                    }
                    if (a7 == 1)
                    {
                      appended = log_output_cost(a3, a4);
                      if ((appended & 0x80000000) != 0)
                        return appended;
                    }
                    v35 = *(_QWORD *)(a4 + 48);
                    if (v35)
                    {
                      v36 = 0;
                      do
                      {
                        if ((v36 & 1) != 0)
                        {
                          appended = ssftstring_AppendCStr(a3, ",");
                          if ((appended & 0x80000000) != 0)
                            return appended;
                        }
                        appended = ssftstring_AppendCStr(a3, *(char **)v35);
                        if ((appended & 0x80000000) != 0)
                          return appended;
                        appended = ssftstring_AppendCStr(a3, ":\"");
                        if ((appended & 0x80000000) != 0)
                          return appended;
                        appended = log_mbs_fput_sjis(a3, *(int **)(v35 + 8));
                        if ((appended & 0x80000000) != 0)
                          return appended;
                        appended = ssftstring_AppendCStr(a3, "\"");
                        if ((appended & 0x80000000) != 0)
                          return appended;
                        v35 = *(_QWORD *)(v35 + 16);
                        v36 = 1;
                      }
                      while (v35);
                    }
                    v19 = ssftstring_AppendCStr(a3, ")");
                    if ((v19 & 0x80000000) != 0)
                      return v19;
                  }
                }
              }
            }
          }
        }
      }
    }
    return appended;
  }
  return v19;
}

uint64_t add_unit_product(_QWORD *a1, int a2, _DWORD *a3, int a4, int a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t *a10, _QWORD *a11)
{
  uint64_t leading_tree;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  int v21;
  uint64_t next_grammar_right;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v36;
  int v39;
  uint64_t grammar_right;
  __int128 *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  leading_tree = cyk_hash_get_leading_tree(a1, a4, a5);
  v18 = 1;
  if (leading_tree)
  {
    v19 = (_QWORD *)leading_tree;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v41 = 0;
    if (a4)
      v20 = 0;
    else
      v20 = a2 - 1 == a5;
    v21 = v20;
    v39 = v21;
    while (1)
    {
      *((_QWORD *)&v42 + 1) = -1;
      *(_QWORD *)&v43 = *v19;
      v41 = &v42;
      grammar_right = find_grammar_right((uint64_t *)&v41);
      if (grammar_right != -1)
        break;
LABEL_31:
      v19 = (_QWORD *)v19[11];
      if (!v19)
        return 1;
    }
    next_grammar_right = grammar_right - 1;
    v36 = v19;
    while (1)
    {
      v23 = heap_Alloc((uint64_t)a11, 96);
      if (!v23)
        return 0;
      v24 = (uint64_t *)v23;
      v25 = (uint64_t)v41;
      *(_QWORD *)v23 = *(_QWORD *)v41;
      *(_QWORD *)(v23 + 24) = 0;
      *(_DWORD *)(v23 + 32) = 1;
      *(_QWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = v19;
      *(_QWORD *)(v23 + 88) = 0;
      *(_QWORD *)(v23 + 8) = -1;
      *(_DWORD *)(v23 + 16) = *(_QWORD *)(v25 + 32);
      v26 = *(_QWORD *)(v25 + 72);
      if ((v26 == -1 || *(_DWORD *)(a6 + 44) == 1 || eval_cond(*(_QWORD *)*(&AC_pac + v26), v23) == 1)
        && (*(_DWORD *)(a6 + 32) != 1 || is_internal(*v24) == 1 || *v24 == a8))
      {
        v27 = cyk_hash_get_leading_tree(a1, a4, a5);
        if (v27)
        {
          do
          {
            v28 = v27;
            v27 = *(_QWORD *)(v27 + 88);
          }
          while (v27);
          *(_QWORD *)(v28 + 88) = v24;
        }
        else if ((cyk_hash_add_leading_tree(a1, (uint64_t)v24, a4, a5, (uint64_t)a11) & 0x1FFF) == 0xA)
        {
          return 0;
        }
        v29 = (uint64_t)v41;
        if (v39 && *(_QWORD *)v41 == a8)
        {
          v30 = a8;
          v31 = *a7;
          v32 = tree_duplicate((uint64_t)v24, a6, a10, a11);
          v33 = v31;
          a8 = v30;
          *a7 = tree_append(v33, (uint64_t)v32);
          v19 = v36;
          ++*a3;
          v29 = (uint64_t)v41;
        }
        v34 = *(_QWORD *)(v29 + 72);
        if (v34 != -1
          && !*(_DWORD *)(a6 + 44)
          && !exec_actions(*((_QWORD *)*(&AC_pac + v34) + 1), (uint64_t)v24, (uint64_t)a11))
        {
          return 0;
        }
      }
      else
      {
        heap_Free(a11, (uint64_t)v24);
      }
      next_grammar_right = find_next_grammar_right(&v41, grammar_right, next_grammar_right);
      if (next_grammar_right == -1)
        goto LABEL_31;
    }
  }
  return v18;
}

uint64_t check_left_upper(_QWORD *a1, int a2, uint64_t a3, int a4, uint64_t a5, _DWORD *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t *a10, _QWORD *a11)
{
  int v13;
  uint64_t v14;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t next_grammar_right;
  uint64_t result;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  int v41;
  int v42;
  int v44;
  int v45;
  int v46;
  int v47;
  int v50;
  uint64_t grammar_right;
  _QWORD *leading_tree;
  __int128 *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;

  if ((a3 & 0x80000000) != 0)
    return 0;
  v13 = a4;
  v14 = a3;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v53 = 0;
  v16 = ~a4;
  v45 = a2 - 1;
  v42 = ~a4;
  do
  {
    v17 = v13 + v16;
    if (v13 + v16 >= 0)
    {
      v44 = v14 + 1;
      if ((_DWORD)v14)
        v18 = 0;
      else
        v18 = v13 == v45;
      v19 = v18;
      v50 = v19;
      v47 = v13;
      do
      {
        v46 = v17;
        leading_tree = (_QWORD *)cyk_hash_get_leading_tree(a1, v14, v17);
        if (leading_tree)
        {
          v20 = v44 + v46;
          v21 = v13 + ~v46;
          v41 = v21;
          while (2)
          {
            v22 = cyk_hash_get_leading_tree(a1, v20, v21);
            if (v22)
            {
              v23 = (_QWORD *)v22;
              do
              {
                *((_QWORD *)&v54 + 1) = *leading_tree;
                *(_QWORD *)&v55 = *v23;
                v53 = &v54;
                grammar_right = find_grammar_right((uint64_t *)&v53);
                if (grammar_right != -1)
                {
                  next_grammar_right = grammar_right - 1;
                  do
                  {
                    result = heap_Alloc((uint64_t)a11, 96);
                    if (!result)
                      return result;
                    v26 = (uint64_t *)result;
                    v27 = (uint64_t)v53;
                    *(_QWORD *)result = *(_QWORD *)v53;
                    *(_DWORD *)(result + 8) = -1;
                    *(_QWORD *)(result + 24) = 0;
                    *(_DWORD *)(result + 32) = 2;
                    *(_QWORD *)(result + 40) = leading_tree;
                    *(_QWORD *)(result + 48) = v23;
                    *(_QWORD *)(result + 88) = 0;
                    *(int32x2_t *)(result + 12) = vmovn_s64(*(int64x2_t *)(v27 + 24));
                    v28 = *(_QWORD *)(v27 + 72);
                    if ((v28 == -1 || eval_cond(*(_QWORD *)*(&AC_pac + v28), result) == 1)
                      && (*(_DWORD *)(a5 + 32) != 1 || is_internal(*v26) == 1 || *v26 == a8))
                    {
                      v29 = cyk_hash_get_leading_tree(a1, v14, v13);
                      if (v29)
                      {
                        do
                        {
                          v30 = v29;
                          v29 = *(_QWORD *)(v29 + 88);
                        }
                        while (v29);
                        *(_QWORD *)(v30 + 88) = v26;
                      }
                      else if ((cyk_hash_add_leading_tree(a1, (uint64_t)v26, v14, v13, (uint64_t)a11) & 0x1FFF) == 0xA)
                      {
                        return 0;
                      }
                      v31 = (uint64_t)v53;
                      if (v50 && *(_QWORD *)v53 == a8)
                      {
                        v32 = a1;
                        v33 = v14;
                        v34 = a8;
                        v35 = *a7;
                        v36 = tree_duplicate((uint64_t)v26, a5, a10, a11);
                        v37 = v35;
                        a8 = v34;
                        v14 = v33;
                        a1 = v32;
                        *a7 = tree_append(v37, (uint64_t)v36);
                        v13 = v47;
                        ++*a6;
                        v31 = (uint64_t)v53;
                      }
                      v38 = *(_QWORD *)(v31 + 72);
                      if (v38 != -1)
                      {
                        result = exec_actions(*((_QWORD *)*(&AC_pac + v38) + 1), (uint64_t)v26, (uint64_t)a11);
                        if (!(_DWORD)result)
                          return result;
                      }
                    }
                    else
                    {
                      heap_Free(a11, (uint64_t)v26);
                    }
                    next_grammar_right = find_next_grammar_right(&v53, grammar_right, next_grammar_right);
                  }
                  while (next_grammar_right != -1);
                }
                v23 = (_QWORD *)v23[11];
              }
              while (v23);
              leading_tree = (_QWORD *)leading_tree[11];
              v21 = v41;
              v20 = v44 + v46;
              if (leading_tree)
                continue;
            }
            break;
          }
        }
        v17 = v46 - 1;
      }
      while (v46 > 0);
    }
    result = add_unit_product(a1, a2, a6, v14, v13, a5, a7, a8, v40, a10, a11);
    if (!(_DWORD)result)
      break;
    ++v13;
    result = 1;
    v39 = (int)v14 <= 0;
    v14 = (v14 - 1);
    v16 = v42;
  }
  while (!v39);
  return result;
}

uint64_t fill_up_table(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t *a8, _QWORD *a9)
{
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;

  result = 0;
  v18 = 0;
  if ((int)a2 < a3)
  {
    v16 = a2;
    while (1)
    {
      result = check_left_upper(a1, a3, v16, 0, a4, &v18, a5, a6, v17, a8, a9);
      if (!(_DWORD)result)
        break;
      v16 = (v16 + 1);
      if (a3 == (_DWORD)v16)
        return v18;
    }
  }
  return result;
}

uint64_t parse_cyk(uint64_t a1, _QWORD *a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t *a6, _QWORD *a7)
{
  int v8;
  uint64_t result;
  uint64_t v10;

  v10 = 0;
  v8 = fill_up_table(a2, 0, a3, a1, &v10, a4, (uint64_t)a7, a6, a7);
  result = parser_result_create(1, v10, (uint64_t)a7);
  *(_QWORD *)(result + 16) = v8;
  return result;
}

double partial_tree_create_as_step(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v13;
  double result;
  int v15;

  v13 = heap_Alloc(a7, 96);
  if (v13)
  {
    *(_QWORD *)v13 = a5;
    *(_QWORD *)(v13 + 24) = 0;
    if (a3)
      v15 = 2;
    else
      v15 = 1;
    *(_DWORD *)(v13 + 32) = v15;
    result = NAN;
    *(_QWORD *)(v13 + 8) = -1;
    *(_QWORD *)(v13 + 40) = a3;
    *(_QWORD *)(v13 + 48) = a4;
    *(_QWORD *)(v13 + 88) = 0;
    *(_DWORD *)(v13 + 16) = -1;
    *(_DWORD *)(v13 + 72) = a1;
    *(_DWORD *)(v13 + 76) = a2;
    *(_DWORD *)(v13 + 80) = a6;
    *(_QWORD *)(v13 + 56) = 0;
    *(_QWORD *)(v13 + 64) = 0;
  }
  return result;
}

uint64_t connect_terminals(int *a1, int a2, int a3, _QWORD *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t leading_tree;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  int v35;
  __int16 v36;
  __int16 v38;
  __int16 v40;
  int v41;
  uint64_t v43;

  if (a2 >= a5)
    return 0;
  v15 = 0;
  v43 = a3;
  v16 = a3 - 1;
  v17 = a2;
  v41 = a5;
  do
  {
    v18 = ~v17 + a5;
    if (v18 < 0)
      goto LABEL_28;
    while (1)
    {
      leading_tree = cyk_hash_get_leading_tree(a4, v17, v18);
      if (leading_tree)
        break;
LABEL_15:
      if (v18-- <= 0)
      {
        v18 = -1;
        goto LABEL_24;
      }
    }
    v20 = leading_tree;
    v21 = *(_QWORD *)(a8 + 8 * v43);
    while (1)
    {
      v22 = *(_QWORD *)v20;
      if (*(_QWORD *)v20 == a7 || v22 == v21)
      {
        v33 = v17 + ~a2;
        goto LABEL_32;
      }
      if (!a3)
        break;
      if (*(_QWORD *)(a8 + 8 * v16) == v22)
        goto LABEL_18;
LABEL_14:
      v20 = *(_QWORD *)(v20 + 88);
      if (!v20)
        goto LABEL_15;
    }
    if (*(_DWORD *)(v20 + 32))
      goto LABEL_14;
LABEL_18:
    v25 = *(_QWORD *)(a9 + 8 * v43);
    if (v15)
    {
      v26 = v17 - a2 + 1 + v18;
      partial_tree_create_as_step(a2, v26, v15, v20, v25, a3, (uint64_t)a10);
      if (!v27)
        return 0;
      v15 = v27;
      v28 = add_partial_tree_checking_FI(a4, v27, a2, v26, *(_DWORD *)(a6 + 52), (uint64_t)a10);
      if ((v28 & 0x80000000) == 0)
        goto LABEL_24;
      v38 = v28;
      heap_Free(a10, v15);
      v15 = 0;
      v31 = 0;
      v32 = (v38 & 0x1FFF) == 10;
LABEL_27:
      a5 = v41;
      if (v32)
        return v31;
    }
    else
    {
      partial_tree_create_as_step(a2, v18, 0, v20, v25, a3, (uint64_t)a10);
      if (!v29)
        return 0;
      v15 = v29;
      v30 = add_partial_tree_checking_FI(a4, v29, a2, v18, *(_DWORD *)(a6 + 52), (uint64_t)a10);
      if (v30 < 0)
      {
        v40 = v30;
        heap_Free(a10, v15);
        v15 = 0;
        v31 = 0;
        v32 = (v40 & 0x1FFF) == 10;
        goto LABEL_27;
      }
LABEL_24:
      a5 = v41;
    }
LABEL_28:
    v17 += v18 + 1;
  }
  while (v17 < a5);
  v33 = v17 + ~a2;
  v21 = *(_QWORD *)(a8 + 8 * v43);
LABEL_32:
  partial_tree_create_as_step(a2, v33, 0, v15, v21, a3 + 1, (uint64_t)a10);
  v31 = v34;
  if (v34)
  {
    v35 = add_partial_tree_checking_FI(a4, v34, a2, v33, *(_DWORD *)(a6 + 52), (uint64_t)a10);
    if ((v35 & 0x80000000) == 0 || (v36 = v35, heap_Free(a10, v31), v31 = 0, (v36 & 0x1FFF) != 0xA))
      *a1 = v17;
  }
  return v31;
}

uint64_t max_len_parse(int a1, int a2, _QWORD *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, _QWORD *a12, _QWORD *a13)
{
  _QWORD *v21;
  int v22;
  int v23;
  uint64_t leading_tree;
  uint64_t v25;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;

  v21 = 0;
  v41 = a1;
  v42 = 0;
  *a13 = 0;
  if (a1 == 1)
  {
    v21 = jp_tree_create(*(_QWORD *)(a10 + 8 * a2), (const char *)(a5 + ((uint64_t)a2 << 6) + 976), 0, 0, 0, 0, a12);
    if (!v21)
      return 2350915840;
  }
  v37 = a2;
  v38 = v21;
  v39 = a5;
  if (a4 >= 1)
  {
    v22 = 0;
    v40 = v37 + 1;
    do
    {
      v23 = ~v22 + a4;
      if (v23 < 0)
      {
LABEL_15:
        v28 = connect_terminals(&v42, v22, v37, a3, a4, v39, a7, a8, a9, a12);
        if (!v28)
          goto LABEL_33;
        v29 = v28;
        *(_DWORD *)(v28 + 80) = v40;
        *(_QWORD *)(a6 + 8) = as_list_insert(v28, *(_QWORD **)(a6 + 8), (uint64_t)a12);
        if (v41 == 1)
        {
          v30 = tree_duplicate(v29, v39, a11, a12);
          if (!v30)
            goto LABEL_33;
          v31 = (uint64_t)v30;
          v32 = v38[4];
          if (v32)
          {
            if (!tree_append(v32, v31))
              goto LABEL_33;
          }
          else
          {
            v38[4] = v31;
          }
        }
        v22 = v42;
      }
      else
      {
        while (1)
        {
          leading_tree = cyk_hash_get_leading_tree(a3, v22, v23);
          if (leading_tree)
            break;
LABEL_13:
          if (v23-- <= 0)
            goto LABEL_15;
        }
        v25 = leading_tree;
        while (*(_QWORD *)v25 != a7 && *(_QWORD *)v25 != *(_QWORD *)(a8 + 8 * v37))
        {
          v25 = *(_QWORD *)(v25 + 88);
          if (!v25)
            goto LABEL_13;
        }
        *(_DWORD *)(v25 + 80) = v40;
        *(_QWORD *)(a6 + 8) = as_list_insert(v25, *(_QWORD **)(a6 + 8), (uint64_t)a12);
        if (v41 == 1)
        {
          v33 = tree_duplicate(v25, v39, a11, a12);
          if (!v33 && *(_QWORD *)v25 != a7)
          {
LABEL_33:
            v35 = 2350915840;
            jpe_FreeTree(v38, a12);
            return v35;
          }
          v34 = v38[4];
          if (v34)
          {
            if (!tree_append(v34, (uint64_t)v33))
              goto LABEL_33;
          }
          else
          {
            v38[4] = v33;
          }
        }
        v22 += v23 + 1;
      }
    }
    while (v22 < a4);
  }
  v35 = 0;
  *a13 = v38;
  return v35;
}

_QWORD *as_list_insert(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;

  if (a2)
  {
    v4 = a2;
    if (*(_QWORD *)(a1 + 56) <= *(_QWORD *)(*a2 + 56))
      a2[1] = as_list_insert(a1, a2[1]);
    else
      a2[2] = as_list_insert(a1, a2[2]);
  }
  else
  {
    v5 = (_QWORD *)heap_Alloc(a3, 24);
    v4 = v5;
    if (v5)
    {
      v5[1] = 0;
      v5[2] = 0;
      *v5 = a1;
    }
  }
  return v4;
}

uint64_t get_word_cost(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  const char *v7;

  if (!a1)
    return -1;
  v3 = a1;
  while (strcmp(*(const char **)v3, "PROB"))
  {
    v3 = *(_QWORD *)(v3 + 16);
    if (!v3)
      return -1;
  }
  v5 = mbs_len_bytes(*(_QWORD *)(v3 + 8)) + 1;
  v6 = heap_Alloc((uint64_t)a2, v5);
  if (v6)
  {
    v7 = (const char *)v6;
    if (mbs2sjis(*(_QWORD *)(v3 + 8), 0, *(_DWORD *)(*(_QWORD *)(v3 + 8) + 8), v6, v5) != -1)
      return atoi(v7);
    heap_Free(a2, (uint64_t)v7);
  }
  return -1;
}

_QWORD *cyk2as_list(_QWORD *a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v8;
  int v9;
  int v10;
  uint64_t leading_tree;
  uint64_t *v12;
  uint64_t word_cost;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  _QWORD *v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;

  v28 = (_QWORD *)heap_Alloc((uint64_t)a4, 24);
  if (!v28)
    return v28;
  *v28 = 0;
  v28[1] = 0;
  v28[2] = 0;
  if (a2 < 1)
    return v28;
  v8 = 0;
  v9 = a2;
  do
  {
    if (v8 < a2)
    {
      v10 = 0;
      do
      {
        leading_tree = cyk_hash_get_leading_tree(a1, v8, v10);
        if (leading_tree)
        {
          v12 = (uint64_t *)leading_tree;
          do
          {
            if (*(_DWORD *)(a3 + 64) == 1)
              word_cost = 0;
            else
              word_cost = get_word_cost(v12[6], a4);
            v12[8] = word_cost;
            v12[7] = v12[8] + get_me_terminal(*v12);
            v28[1] = as_list_insert((uint64_t)v12, (_QWORD *)v28[1], (uint64_t)a4);
            v12 = (uint64_t *)v12[11];
          }
          while (v12);
        }
        ++v10;
      }
      while (v10 != v9);
    }
    ++v8;
    --v9;
  }
  while (v8 != a2);
  v31 = a2 - 2;
  v34 = a2;
  v29 = a2;
  v30 = 1;
  while (2)
  {
    v14 = 0;
    v33 = v34--;
    v32 = 1;
    v35 = v33;
    do
    {
      v15 = cyk_hash_get_leading_tree(a1, v14, v34);
      if (v15)
      {
        v16 = (uint64_t *)v15;
        v36 = v14;
        while (v33 < 2)
        {
LABEL_39:
          v16 = (uint64_t *)v16[11];
          if (!v16)
            goto LABEL_40;
        }
        v17 = v31;
        v18 = v32;
        while (1)
        {
          v19 = v14 <= v18 ? v18 : v14;
          if (v34 - v17 >= 0)
            break;
LABEL_38:
          --v17;
          ++v18;
          v14 = v36;
          if (v18 == v35)
            goto LABEL_39;
        }
        v20 = 100 * (v34 - v17);
        v21 = v36;
        while (1)
        {
          v22 = cyk_hash_get_leading_tree(a1, v21, v17);
          if (v22)
            break;
LABEL_36:
          v26 = v21++ == v19;
          if (v26)
            goto LABEL_38;
        }
        v23 = (uint64_t *)v22;
        while (is_expensive_pos(*v23, *(_QWORD *)(a3 + 56)))
        {
          v24 = v23 + 8;
          if (v23[8] < v20)
          {
            v23[8] = v20;
            v25 = *v23;
LABEL_30:
            *v24 += get_me_terminal(v25);
          }
LABEL_35:
          v23 = (uint64_t *)v23[11];
          if (!v23)
            goto LABEL_36;
        }
        if (is_expensive_pos(*v16, *(_QWORD *)(a3 + 56)))
          goto LABEL_35;
        v25 = *v16;
        if (*v16 != *v23)
          goto LABEL_35;
        v24 = v23 + 8;
        if (v23[8] >= v20)
          goto LABEL_35;
        *v24 = v20;
        goto LABEL_30;
      }
LABEL_40:
      ++v14;
      ++v32;
      ++v35;
    }
    while (v14 != v30);
    --v31;
    v26 = v30++ == v29;
    if (!v26)
      continue;
    return v28;
  }
}

uint64_t is_expensive_pos(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const char *pointer_of_symbol;

  if (!a2)
    return 0;
  v2 = a2;
  while (1)
  {
    pointer_of_symbol = (const char *)get_pointer_of_symbol((uint64_t)SF_symbol_file, a1);
    if (pointer_of_symbol)
    {
      if (!strcmp(pointer_of_symbol, *(const char **)v2))
        break;
    }
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      return 0;
  }
  return 1;
}

_QWORD *as_list_free_all(_QWORD *result, _QWORD *a2)
{
  uint64_t v3;

  if (result)
  {
    v3 = (uint64_t)result;
    as_list_free_all(result[1]);
    as_list_free_all(*(_QWORD *)(v3 + 16));
    return heap_Free(a2, v3);
  }
  return result;
}

uint64_t add_partial_tree_checking_FI(_QWORD *a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t leading_tree;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  leading_tree = cyk_hash_get_leading_tree(a1, a3, a4);
  if (!leading_tree)
    return cyk_hash_add_leading_tree(a1, a2, a3, a4, a6);
  v13 = leading_tree;
  result = 2350907394;
  v15 = *(_QWORD *)(v13 + 88);
  if (v15)
  {
    v16 = 0;
    while (1)
    {
      v17 = v13;
      v13 = v15;
      if (*(_QWORD *)v17 == *(_QWORD *)a2)
      {
        v18 = *(_DWORD *)(v17 + 32);
        if (v18 == *(_DWORD *)(a2 + 32)
          && (v18 == 1 || v18 == 2 && *(_QWORD *)(v17 + 40) == *(_QWORD *)(a2 + 40))
          && *(_QWORD *)(v17 + 48) == *(_QWORD *)(a2 + 48))
        {
          break;
        }
      }
      ++v16;
      v15 = *(_QWORD *)(v13 + 88);
      if (!v15)
        goto LABEL_14;
    }
  }
  else
  {
    v16 = 0;
LABEL_14:
    if (a5 < 1 || v16 < a5 - 1)
    {
      result = 0;
      *(_QWORD *)(v13 + 88) = a2;
    }
  }
  return result;
}

uint64_t cyk_as_make_trees(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, _DWORD *a7, _QWORD *a8)
{
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t grammar_right;
  uint64_t v19;
  uint64_t next_grammar_right;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  *a7 = -1;
  if (a3)
  {
    v13 = *(_DWORD *)(a3 + 72);
    v14 = *(_DWORD *)(a3 + 76) + 1;
    if (v14 + v13 != *((_DWORD *)a4 + 18))
      return 1;
    v15 = v14 + *((_DWORD *)a4 + 19);
    v16 = *(_QWORD *)a3;
  }
  else
  {
    v13 = *((_DWORD *)a4 + 18);
    v15 = *((_DWORD *)a4 + 19);
    v16 = -1;
  }
  v17 = *a4;
  *((_QWORD *)&v40 + 1) = v16;
  *(_QWORD *)&v41 = v17;
  v39 = &v40;
  grammar_right = find_grammar_right((uint64_t *)&v39);
  if (grammar_right == -1)
    return 1;
  v19 = grammar_right;
  v35 = a5;
  next_grammar_right = grammar_right - 1;
  while (1)
  {
    result = heap_Alloc((uint64_t)a8, 96);
    if (!result)
      break;
    v22 = result;
    v23 = (uint64_t)v39;
    *(_QWORD *)result = *(_QWORD *)v39;
    v24 = -1;
    *(_DWORD *)(result + 8) = -1;
    *(_QWORD *)(result + 24) = 0;
    if (a3)
    {
      v24 = *(_DWORD *)(v23 + 24);
      v25 = 2;
    }
    else
    {
      v25 = 1;
    }
    *(_DWORD *)(result + 32) = v25;
    *(_DWORD *)(result + 12) = v24;
    *(_QWORD *)(result + 40) = a3;
    *(_QWORD *)(result + 48) = a4;
    *(_QWORD *)(result + 88) = 0;
    *(_DWORD *)(result + 16) = *(_QWORD *)(v23 + 32);
    *(_DWORD *)(result + 72) = v13;
    *(_DWORD *)(result + 76) = v15;
    v26 = *(_QWORD *)(v23 + 72);
    if (v26 == -1 || *(_DWORD *)(a6 + 44) == 1 || eval_cond(*(_QWORD *)*(&AC_pac + v26), result) == 1)
    {
      if (a3)
      {
        v27 = a4[8] + *(_QWORD *)(a3 + 64);
        v28 = (uint64_t)v39;
        v29 = (_QWORD *)v39 + 11;
      }
      else
      {
        v28 = (uint64_t)v39;
        v27 = *((_QWORD *)v39 + 11);
        v29 = a4 + 8;
      }
      v30 = v27 + *v29;
      *(_QWORD *)(v22 + 64) = v30;
      *(_QWORD *)(v22 + 56) = v30 + *(_QWORD *)(v28 + 120);
      v31 = add_partial_tree_checking_FI(a1, v22, v13, v15, *(_DWORD *)(a6 + 52), (uint64_t)a8);
      if (v31 < 0)
      {
        v34 = v31;
        heap_Free(a8, v22);
        if ((v34 & 0x1FFF) == 0xA)
          return 0;
      }
      else
      {
        *(_QWORD *)(a2 + 8) = as_list_insert(v22, *(_QWORD **)(a2 + 8), (uint64_t)a8);
        v32 = *((_QWORD *)v39 + 9);
        if (v32 != -1 && !*(_DWORD *)(a6 + 44))
        {
          result = exec_actions(*((_QWORD *)*(&AC_pac + v32) + 1), v22, (uint64_t)a8);
          if (!(_DWORD)result)
            return result;
        }
        if (!*(_DWORD *)(v22 + 72))
        {
          v33 = *(_DWORD *)(v22 + 76);
          if (v33 > *a7 && *(_QWORD *)v22 == v35)
            *a7 = v33;
        }
      }
    }
    else
    {
      heap_Free(a8, v22);
    }
    next_grammar_right = find_next_grammar_right(&v39, v19, next_grammar_right);
    if (next_grammar_right == -1)
      return 1;
  }
  return result;
}

uint64_t parse_cyk_as(_DWORD *a1, _QWORD *a2, int a3, uint64_t a4, uint64_t a5, uint64_t *a6, _QWORD *a7)
{
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t leading_tree;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  int v39;

  v39 = 0;
  v13 = cyk2as_list(a2, a3, (uint64_t)a1, a7);
  if (v13)
  {
    v14 = v13;
    v15 = 0;
    v16 = 0;
    v38 = 0;
    while (1)
    {
      do
      {
        v17 = (uint64_t *)v14[1];
        v18 = v14;
        do
        {
          if (!v17)
            goto LABEL_38;
          v19 = v17;
          v20 = v18;
          v17 = (uint64_t *)v17[1];
          v18 = v19;
        }
        while (v17);
        v21 = *v19;
        v20[1] = v19[2];
        heap_Free(a7, (uint64_t)v19);
        if (!v21)
        {
LABEL_38:
          as_list_free_all(v14, a7);
          v33 = 1;
          v34 = v16;
          return parser_result_create(v33, v34, (uint64_t)a7);
        }
        v22 = *(_DWORD *)(v21 + 72);
        if (!v22)
        {
          if (*(_DWORD *)(v21 + 76) == a3 - 1 && *(_QWORD *)v21 == a4)
          {
            v23 = tree_duplicate(v21, (uint64_t)a1, a6, a7);
            v16 = tree_append(v16, (uint64_t)v23);
            if (v38 + 1 >= a1[1])
              goto LABEL_38;
            ++v38;
            v22 = *(_DWORD *)(v21 + 72);
          }
          else
          {
            v22 = 0;
          }
        }
        v24 = a1[67];
        if (v24 < 0)
          break;
        v25 = *(_DWORD *)(v21 + 76) + v22;
        if (v25 >= v15 - v24)
          break;
      }
      while (v25 >= a1[66]);
      v36 = a6;
      v37 = v16;
      if (v22 >= 1)
        break;
LABEL_25:
      v29 = v22 + *(_DWORD *)(v21 + 76) + 1;
      if (v29 < a3)
      {
        v30 = 0;
        while (1)
        {
          leading_tree = cyk_hash_get_leading_tree(a2, v29, v30);
          if (leading_tree)
            break;
LABEL_33:
          ++v30;
          v29 = *(_DWORD *)(v21 + 72) + *(_DWORD *)(v21 + 76) + 1;
          if (v30 >= a3 - v29)
            goto LABEL_34;
        }
        v32 = (uint64_t *)leading_tree;
        while (cyk_as_make_trees(a2, (uint64_t)v14, v21, v32, a4, (uint64_t)a1, &v39, a7))
        {
          if (v39 > v15)
            v15 = v39;
          v32 = (uint64_t *)v32[11];
          if (!v32)
            goto LABEL_33;
        }
        goto LABEL_41;
      }
LABEL_34:
      if (!cyk_as_make_trees(a2, (uint64_t)v14, 0, (uint64_t *)v21, a4, (uint64_t)a1, &v39, a7))
        goto LABEL_41;
      if (v39 > v15)
        v15 = v39;
      a6 = v36;
      v16 = v37;
    }
    v26 = 0;
    while (1)
    {
      v27 = cyk_hash_get_leading_tree(a2, v22 + ~v26, v26);
      if (v27)
        break;
LABEL_24:
      ++v26;
      v22 = *(_DWORD *)(v21 + 72);
      if (v26 >= v22)
        goto LABEL_25;
    }
    v28 = v27;
    while (cyk_as_make_trees(a2, (uint64_t)v14, v28, (uint64_t *)v21, a4, (uint64_t)a1, &v39, a7))
    {
      if (v39 > v15)
        v15 = v39;
      v28 = *(_QWORD *)(v28 + 88);
      if (!v28)
        goto LABEL_24;
    }
LABEL_41:
    v33 = 2;
    v34 = v37;
  }
  else
  {
    v33 = 2;
    v34 = 0;
  }
  return parser_result_create(v33, v34, (uint64_t)a7);
}

_QWORD *set_step_partial_tree(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  int v10;

  v9 = result;
  while (1)
  {
    if (*(_QWORD *)a2 == a3 && *(_DWORD *)(a2 + 80) != (_DWORD)a4)
    {
      *(_DWORD *)(a2 + 80) = a4;
      result = as_list_insert(a2, (_QWORD *)v9[1], a5);
      v9[1] = result;
    }
    v10 = *(_DWORD *)(a2 + 32);
    if (v10 != 1)
      break;
LABEL_8:
    a2 = *(_QWORD *)(a2 + 48);
  }
  if (v10 == 2)
  {
    result = (_QWORD *)set_step_partial_tree(v9, *(_QWORD *)(a2 + 40), a3, a4, a5);
    goto LABEL_8;
  }
  return result;
}

uint64_t cyk_as_make_trees_step(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, int a7, _DWORD *a8, _QWORD *a9)
{
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t grammar_right;
  uint64_t v21;
  uint64_t next_grammar_right;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  __int16 v37;
  int v38;
  uint64_t v39;
  int v42;
  uint64_t *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  *a8 = -1;
  if (a3)
  {
    v15 = *(_DWORD *)(a3 + 72);
    v16 = *(_DWORD *)(a3 + 76) + 1;
    if (v16 + v15 != *((_DWORD *)a4 + 18))
      return 1;
    v17 = v16 + *((_DWORD *)a4 + 19);
    v18 = *(_QWORD *)a3;
  }
  else
  {
    v15 = *((_DWORD *)a4 + 18);
    v17 = *((_DWORD *)a4 + 19);
    v18 = -1;
  }
  v19 = *a4;
  *((_QWORD *)&v44 + 1) = v18;
  *(_QWORD *)&v45 = v19;
  v43 = (uint64_t *)&v44;
  grammar_right = find_grammar_right((uint64_t *)&v43);
  if (grammar_right == -1)
    return 1;
  v21 = grammar_right;
  v39 = a5;
  next_grammar_right = grammar_right - 1;
  v42 = v17;
  while (1)
  {
    result = heap_Alloc((uint64_t)a9, 96);
    if (!result)
      break;
    v24 = result;
    v25 = (uint64_t)v43;
    v26 = *v43;
    *(_QWORD *)v24 = *v43;
    v27 = -1;
    *(_DWORD *)(v24 + 8) = -1;
    *(_QWORD *)(v24 + 24) = 0;
    if (a3)
    {
      v27 = *(_DWORD *)(v25 + 24);
      v28 = 2;
    }
    else
    {
      v28 = 1;
    }
    *(_DWORD *)(v24 + 32) = v28;
    *(_DWORD *)(v24 + 12) = v27;
    *(_QWORD *)(v24 + 40) = a3;
    *(_QWORD *)(v24 + 48) = a4;
    *(_QWORD *)(v24 + 88) = 0;
    *(_DWORD *)(v24 + 16) = *(_QWORD *)(v25 + 32);
    *(_DWORD *)(v24 + 72) = v15;
    *(_DWORD *)(v24 + 76) = v17;
    *(_DWORD *)(v24 + 80) = a7;
    v29 = *(_QWORD *)(v25 + 72);
    if ((!a7 && v29 == -1 || v29 != -1 && *((_DWORD *)*(&AC_pac + v29) + 4) == a7)
      && *((_DWORD *)a4 + 20) == a7
      && (!a3 || *(_DWORD *)(a3 + 80) == a7)
      && (v29 == -1
       || *(_DWORD *)(a6 + 44) == 1
       || is_internal(v26) == 1
       || eval_cond(*(_QWORD *)*(&AC_pac + v43[9]), v24) == 1))
    {
      if (a3)
      {
        v30 = a4[8] + *(_QWORD *)(a3 + 64);
        v31 = (uint64_t)v43;
        v32 = v43 + 11;
      }
      else
      {
        v31 = (uint64_t)v43;
        v30 = v43[11];
        v32 = a4 + 8;
      }
      v33 = v30 + *v32;
      *(_QWORD *)(v24 + 64) = v33;
      *(_QWORD *)(v24 + 56) = v33 + *(_QWORD *)(v31 + 120);
      v34 = a6;
      v35 = add_partial_tree_checking_FI(a1, v24, v15, v42, *(_DWORD *)(a6 + 52), (uint64_t)a9);
      if (v35 < 0)
      {
        v37 = v35;
        heap_Free(a9, v24);
        v38 = v37 & 0x1FFF;
        a6 = v34;
        v17 = v42;
        if (v38 == 10)
          return 0;
      }
      else
      {
        *(_QWORD *)(a2 + 8) = as_list_insert(v24, *(_QWORD **)(a2 + 8), (uint64_t)a9);
        if (v43[9] != -1 && !*(_DWORD *)(a6 + 44) && is_internal(*(_QWORD *)v24) != 1)
        {
          result = exec_actions(*((_QWORD *)*(&AC_pac + v43[9]) + 1), v24, (uint64_t)a9);
          if (!(_DWORD)result)
            return result;
        }
        v17 = v42;
        if (!*(_DWORD *)(v24 + 72))
        {
          v36 = *(_DWORD *)(v24 + 76);
          if (v36 > *a8 && *(_QWORD *)v24 == *(_QWORD *)(v39 + 8 * a7))
            *a8 = v36;
        }
      }
    }
    else
    {
      heap_Free(a9, v24);
    }
    next_grammar_right = find_next_grammar_right(&v43, v21, next_grammar_right);
    if (next_grammar_right == -1)
      return 1;
  }
  return result;
}

uint64_t parse_cyk_as_step(uint64_t a1, _QWORD *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, _QWORD *a10)
{
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  kaldi::nnet1::UpdatableComponent *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t leading_tree;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v64;
  int v65;
  _QWORD *v66;

  v66 = 0;
  v65 = 0;
  v64 = 0;
  v15 = 956;
  LODWORD(v16) = *(_DWORD *)(a1 + 956);
  do
  {
    v17 = *(_DWORD *)(a1 + v15);
    if ((int)v16 <= v17)
      v16 = v17;
    else
      v16 = v16;
    v15 += 4;
  }
  while (v15 != 976);
  v18 = heap_Calloc(a10, 8, v16);
  if (!v18)
    return parser_result_create(2, 0, (uint64_t)a10);
  v19 = v18;
  v20 = cyk2as_list(a2, a3, a1, a10);
  if (!v20)
  {
    v50 = parser_result_create(2, 0, (uint64_t)a10);
    v51 = a10;
    v52 = v19;
LABEL_71:
    heap_Free(v51, v52);
    return v50;
  }
  v21 = v20;
  v58 = a6;
  v59 = 0;
  v60 = a5;
  LODWORD(a5) = 0;
  v22 = 0;
  LODWORD(v23) = 0;
  v24 = 0;
  while (1)
  {
    v25 = (uint64_t *)v21[1];
    v26 = v21;
    do
    {
      if (!v25)
        goto LABEL_74;
      v27 = v25;
      v28 = v26;
      v25 = (uint64_t *)v25[1];
      v26 = v27;
    }
    while (v25);
    v61 = v19;
    v29 = a4;
    v30 = v22;
    v31 = *v27;
    v28[1] = v27[2];
    heap_Free(a10, (uint64_t)v27);
    if (!v31)
      break;
    ++v24;
    v56 = (int)v23;
    v32 = (kaldi::nnet1::UpdatableComponent *)*(unsigned int *)(a1 + 4 * (int)v23 + 1300);
    if ((v32 & 0x80000000) != 0 || kaldi::nnet1::UpdatableComponent::IsUpdatable(v32) != 1)
    {
      if (*(_DWORD *)(v31 + 80) != (_DWORD)v23)
      {
        v22 = v30;
LABEL_29:
        a4 = v29;
        goto LABEL_30;
      }
      v22 = v30;
      if (*(_DWORD *)(v31 + 72))
        goto LABEL_29;
      a4 = v29;
      if (*(_DWORD *)(v31 + 76) != a3 - 1)
        goto LABEL_30;
      v19 = v61;
      if (*(_QWORD *)v31 == *(_QWORD *)(a7 + 8 * (int)v23))
      {
        v35 = (v22 + 1);
        if ((_DWORD)v23 == *(_DWORD *)(a1 + 952) - 1)
        {
          v36 = tree_duplicate(v31, a1, a9, a10);
          v59 = (_QWORD *)tree_append((uint64_t)v59, (uint64_t)v36);
          v66 = v59;
          if ((int)v35 >= *(_DWORD *)(a1 + 4 * (int)v23 + 956))
          {
            LODWORD(v22) = v35;
            goto LABEL_73;
          }
LABEL_62:
          v22 = v35;
        }
        else
        {
          *(_QWORD *)(v61 + 8 * (int)v22) = v31;
          if ((int)v35 < *(_DWORD *)(a1 + 4 * (int)v23 + 956))
            goto LABEL_62;
          if ((v22 & 0x80000000) != 0)
          {
            LODWORD(a5) = 0;
            v22 = 0;
            v24 = 0;
            LODWORD(v23) = v23 + 1;
          }
          else
          {
            v23 = (v23 + 1);
            v47 = (uint64_t *)v61;
            do
            {
              set_step_partial_tree(v21, *v47, *(_QWORD *)(v60 + 8 * v56), v23, (uint64_t)a10);
              v48 = *v47++;
              set_step_partial_tree(v21, v48, a4, v23, (uint64_t)a10);
              --v35;
            }
            while (v35);
            LODWORD(a5) = 0;
            v22 = 0;
            v24 = 0;
          }
        }
LABEL_30:
        v19 = v61;
      }
      if (*(_DWORD *)(v31 + 80) == (_DWORD)v23
        || (int)v23 >= 1 && *(_QWORD *)v31 == *(_QWORD *)(v60 + 8 * (v23 - 1)))
      {
        v37 = *(_DWORD *)(a1 + 4 * (int)v23 + 292);
        v38 = *(_DWORD *)(v31 + 72);
        if (v37 < 0
          || (v39 = *(_DWORD *)(v31 + 76) + v38, v39 >= (int)a5 - v37)
          || v39 < *(_DWORD *)(a1 + 4 * (int)v23 + 272))
        {
          v55 = v24;
          v57 = v22;
          if (v38 >= 1)
          {
            v40 = 0;
            while (1)
            {
              leading_tree = cyk_hash_get_leading_tree(a2, v38 + ~v40, v40);
              if (leading_tree)
                break;
LABEL_45:
              ++v40;
              v38 = *(_DWORD *)(v31 + 72);
              if (v40 >= v38)
                goto LABEL_46;
            }
            v42 = leading_tree;
            while (cyk_as_make_trees_step(a2, (uint64_t)v21, v42, (uint64_t *)v31, a7, a1, v23, &v65, a10))
            {
              if (v65 > (int)a5)
                LODWORD(a5) = v65;
              v42 = *(_QWORD *)(v42 + 88);
              if (!v42)
                goto LABEL_45;
            }
            goto LABEL_70;
          }
LABEL_46:
          v43 = v38 + *(_DWORD *)(v31 + 76) + 1;
          if (v43 < a3)
          {
            v44 = 0;
            while (1)
            {
              v45 = cyk_hash_get_leading_tree(a2, v43, v44);
              if (v45)
                break;
LABEL_54:
              ++v44;
              v43 = *(_DWORD *)(v31 + 72) + *(_DWORD *)(v31 + 76) + 1;
              if (v44 >= a3 - v43)
                goto LABEL_55;
            }
            v46 = (uint64_t *)v45;
            while (cyk_as_make_trees_step(a2, (uint64_t)v21, v31, v46, a7, a1, v23, &v65, a10))
            {
              if (v65 > (int)a5)
                LODWORD(a5) = v65;
              v46 = (uint64_t *)v46[11];
              if (!v46)
                goto LABEL_54;
            }
LABEL_70:
            v50 = parser_result_create(2, (uint64_t)v59, (uint64_t)a10);
            v51 = a10;
            v52 = v61;
            goto LABEL_71;
          }
LABEL_55:
          if (!cyk_as_make_trees_step(a2, (uint64_t)v21, 0, (uint64_t *)v31, a7, a1, v23, &v65, a10))
            goto LABEL_70;
          if (v65 > (int)a5)
            LODWORD(a5) = v65;
          v19 = v61;
          v22 = v57;
          v24 = v55;
        }
      }
    }
    else
    {
      if ((_DWORD)v23 == *(_DWORD *)(a1 + 952) - 1)
        break;
      if (!(_DWORD)v30)
      {
        if ((max_len_parse(0, v23, a2, a3, a1, (uint64_t)v21, v29, v60, v58, a7, a9, a10, &v64) & 0x80000000) == 0)
        {
LABEL_60:
          LODWORD(a5) = 0;
          v22 = 0;
          v24 = 0;
          LODWORD(v23) = v23 + 1;
          a4 = v29;
          v19 = v61;
          continue;
        }
        as_list_free_all(v21, a10);
        heap_Free(a10, v61);
        return 0;
      }
      if ((int)v30 <= 0)
        goto LABEL_60;
      v23 = (v23 + 1);
      a5 = v30;
      v33 = (uint64_t *)v61;
      do
      {
        set_step_partial_tree(v21, *v33, *(_QWORD *)(v60 + 8 * v56), v23, (uint64_t)a10);
        v34 = *v33++;
        set_step_partial_tree(v21, v34, v29, v23, (uint64_t)a10);
        --a5;
      }
      while (a5);
      v22 = 0;
      v24 = 0;
      a4 = v29;
      v19 = v61;
    }
  }
  LODWORD(v22) = v30;
  a4 = v29;
LABEL_73:
  v19 = v61;
LABEL_74:
  if ((_DWORD)v22)
  {
    as_list_free_all(v21, a10);
    heap_Free(a10, v19);
    return parser_result_create(1, (uint64_t)v59, (uint64_t)a10);
  }
  else
  {
    v53 = max_len_parse(1, v23, a2, a3, a1, (uint64_t)v21, a4, v60, v58, a7, a9, a10, &v66);
    as_list_free_all(v21, a10);
    heap_Free(a10, v19);
    if (v53 < 0)
      return 0;
    if (v66)
      v54 = 1;
    else
      v54 = 2;
    v50 = parser_result_create(v54, (uint64_t)v66, (uint64_t)a10);
    if (!v50)
      jpe_FreeTree(v66, a10);
  }
  return v50;
}

uint64_t cyk_one_free_all(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  if (*a1)
  {
    do
    {
      v5 = *(_QWORD *)(v4 + 88);
      heap_Free(a2, v4);
      v4 = v5;
    }
    while (v5);
  }
  heap_Free(a2, (uint64_t)a1);
  return 0;
}

uint64_t cyk_hash_get_leading_tree(_QWORD *a1, int a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;

  v3 = 20 * (a2 % 200);
  v4 = v3 + a3 % 20;
  if (((a3 / 20) & 1) != 0)
    v4 = v3 + 20 * (a3 / 20) - a3 + 19;
  v5 = *(_QWORD *)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  while (*(__int16 *)(v5 + 10) != a3 || *(__int16 *)(v5 + 8) != a2)
  {
    v5 = *(_QWORD *)(v5 + 16);
    if (!v5)
      return 0;
  }
  return *(_QWORD *)v5;
}

uint64_t cyk_hash_add_leading_tree(_QWORD *a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  __int16 v5;
  __int16 v6;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned __int16 v15;
  uint64_t v16;

  v5 = a4;
  v6 = a3;
  v9 = 20 * (a3 % 200);
  if (((a4 / 20) & 1) != 0)
    v10 = v9 + 20 * (a4 / 20) - a4 + 19;
  else
    v10 = v9 + a4 % 20;
  v11 = *(_QWORD *)(*a1 + 8 * v10);
  if (v11)
  {
    while (1)
    {
      v12 = v11;
      if (*(__int16 *)(v11 + 10) == a4 && *(__int16 *)(v11 + 8) == a3)
        break;
      v11 = *(_QWORD *)(v11 + 16);
      if (!v11)
        goto LABEL_10;
    }
    v15 = 1;
    return v15 | 0x8C200000;
  }
  v12 = 0;
LABEL_10:
  v13 = heap_Alloc(a5, 24);
  if (!v13)
  {
    v15 = 8202;
    return v15 | 0x8C200000;
  }
  *(_WORD *)(v13 + 8) = v6;
  *(_WORD *)(v13 + 10) = v5;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)v13 = a2;
  if (v12)
    v14 = (uint64_t *)(v12 + 16);
  else
    v14 = (uint64_t *)(*a1 + 8 * v10);
  v16 = 0;
  *v14 = v13;
  return v16;
}

uint64_t *cyk_hash_free(_QWORD *a1, _QWORD *a2)
{
  uint64_t i;
  uint64_t *result;
  uint64_t *v6;

  for (i = 0; i != 4000; ++i)
  {
    result = *(uint64_t **)(*a1 + 8 * i);
    if (result)
    {
      do
      {
        v6 = (uint64_t *)result[2];
        cyk_one_free_all(result, a2);
        result = v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t SearchTERMINALTable(char *__s2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;

  v2 = 0;
  v3 = 372;
  while (1)
  {
    v4 = v3 - v2;
    if (v3 < v2)
      ++v4;
    v5 = v2 + (v4 >> 1);
    v6 = strcmp((&TERMINALTable)[2 * v5], __s2);
    if (!v6)
      break;
    if (v6 >= 0)
      v3 = v5 - 1;
    else
      v2 = v5 + 1;
    if (v2 > v3)
      return 0;
  }
  return LOBYTE((&TERMINALTable)[2 * v5 + 1]);
}

uint64_t log_intermediate_tree(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, _QWORD *a5, int a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t leading_tree;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  int v26;
  int v27;
  _QWORD *v28;

  v14 = ssftstring_Clear(a3);
  if ((v14 & 0x80000000) == 0)
  {
    if (a5)
    {
      if (a6 >= 1)
      {
        v28 = a5;
        v15 = 0;
        v16 = a6;
        v26 = a6;
        while ((int)v15 >= a6)
        {
LABEL_12:
          v15 = (v15 + 1);
          --v16;
          a6 = v26;
          if ((_DWORD)v15 == v26)
            return v14;
        }
        v17 = 0;
        v27 = v16;
        while (1)
        {
          leading_tree = cyk_hash_get_leading_tree(v28, v15, v17);
          if (leading_tree)
            break;
LABEL_11:
          ++v17;
          v16 = v27;
          if (v17 == v27)
            goto LABEL_12;
        }
        v22 = leading_tree;
        while (1)
        {
          v23 = v22;
          v22 = *(_QWORD *)(v22 + 88);
          log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"[A*] (%d,%d) == (%d,%d)", v19, v20, v21, v15);
          LODWORD(v25) = 0;
          v14 = log_output_tree(a1, a2, a3, v23, 0, a4[3], a4[9], 1, v25, 0, a4[324], a7);
          if ((v14 & 0x80000000) != 0)
            break;
          if (!v22)
            goto LABEL_11;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v14;
}

uint64_t parser_result_create(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = heap_Alloc(a3, 56);
  if (result)
  {
    *(_DWORD *)result = a1;
    *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t connection_table(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  __int16 *v10;
  __int16 *v11;
  __int16 v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  __int16 *v16;
  int v17;
  uint64_t v18;
  int v19;
  __int16 *v20;

  result = 100000;
  v5 = *(unsigned int *)(a3[6] + 4 * a1 + 4);
  if ((v5 & 0x80000000) != 0)
    return result;
  v6 = *(unsigned int *)(a3[7] + 4 * a2 + 4);
  if ((v6 & 0x80000000) != 0)
    return result;
  LOWORD(v7) = 0;
  v8 = *(__int16 *)(a3[3] + 2 * v5);
  v9 = (v8 + ((unsigned __int16)(v8 & 0x8000) >> 15)) << 16 >> 17;
  v10 = (__int16 *)(*(_QWORD *)(a3[2] + 8 * v5) + 8 * v9);
  while ((int)v6 < *v10)
  {
    if (!(_WORD)v9)
    {
      v20 = (__int16 *)(*(_QWORD *)(a3[4] + 8 * v5) + 2 * v6);
      return *v20;
    }
    if ((int)v6 > *(v10 - 3))
    {
      v18 = *(_QWORD *)(a3[4] + 8 * v5);
      v19 = *(v10 - 2);
      goto LABEL_35;
    }
    v11 = v10 - 4;
    if ((int)v6 >= *(v10 - 4))
    {
      v20 = v10 - 1;
      return *v20;
    }
    if ((_WORD)v7)
      v12 = v7;
    else
      v12 = v9;
    v7 = (__int16)(v12 + ((unsigned __int16)(v12 & 0x8000) >> 15)) >> 1;
    v13 = (unsigned __int16)(v12 + 1);
    v10 -= 4 * v7;
    v14 = v13 >= 3;
    if (v13 >= 3)
      v15 = -v7;
    else
      LOWORD(v15) = -1;
    if (!v14)
      v10 = v11;
LABEL_31:
    LOWORD(v9) = v15 + v9;
  }
  if ((int)v6 <= v10[1])
  {
    v20 = v10 + 3;
    return *v20;
  }
  if (v8 - 1 == (__int16)v9 || (v16 = v10 + 4, (int)v6 < v10[4]))
  {
    v18 = *(_QWORD *)(a3[4] + 8 * v5);
    v19 = v10[2];
LABEL_35:
    v20 = (__int16 *)(v18 + 2 * ((int)v6 - v19));
    return *v20;
  }
  if ((int)v6 > v10[5])
  {
    if ((_WORD)v7)
      v7 = (__int16)v7;
    else
      v7 = v8 - (__int16)v9;
    if (v7 >= 0)
      v17 = v7;
    else
      v17 = v7 + 1;
    v7 = v17 >> 1;
    v10 += 4 * (v17 >> 1);
    v15 = (unsigned __int16)(v17 >> 1);
    if (!v15)
      v10 = v16;
    if (v15 <= 1)
      LOWORD(v15) = 1;
    goto LABEL_31;
  }
  v20 = v10 + 7;
  return *v20;
}

uint64_t JpCreate(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 a6, int a7, uint64_t *a8, uint64_t a9)
{
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v25 = 0;
  inited = InitRsrcFunction(a1, a2, &v25);
  if ((inited & 0x80000000) != 0)
    return inited;
  v18 = heap_Calloc(*(_QWORD **)(v25 + 8), 1, 72);
  if (!v18)
    return 2350915594;
  v19 = v18;
  *(_QWORD *)(v18 + 64) = 0;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  v20 = jparser_ClassOpen(a1, a2, v18 + 8);
  if ((v20 & 0x80000000) != 0)
  {
    v22 = v20;
LABEL_13:
    heap_Free(*(_QWORD **)(v25 + 8), v19);
    return v22;
  }
  v21 = jparser_ObjOpen(a1, a2, *(_QWORD *)(v19 + 8), *(_QWORD *)(v19 + 16), (uint64_t *)(v19 + 24), a3, a4, a5, a6, a7, a9);
  if ((v21 & 0x80000000) != 0)
  {
    v22 = v21;
LABEL_12:
    jparser_ClassClose(*(_QWORD ***)(v19 + 8), *(_QWORD *)(v19 + 16));
    goto LABEL_13;
  }
  *(_QWORD *)(v19 + 48) = 0;
  v22 = ssftstring_ObjOpen(*(_QWORD **)(v25 + 8), (_QWORD *)(v19 + 48));
  if ((v22 & 0x80000000) != 0)
  {
    jparser_ObjClose((uint64_t *)(v19 + 24));
    goto LABEL_12;
  }
  *(_DWORD *)v19 = 1;
  v23 = v25;
  *(_QWORD *)(v19 + 56) = a1;
  *(_QWORD *)(v19 + 64) = a2;
  *(_QWORD *)(v19 + 32) = v23;
  *(_QWORD *)(v19 + 40) = a9;
  *a8 = v19;
  return v22;
}

uint64_t JpRemove(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD **v5;

  if (a2 && *a2)
  {
    jparser_ObjClose((uint64_t *)(*a2 + 24));
    jparser_ClassClose(*(_QWORD ***)(*a2 + 8), *(_QWORD *)(*a2 + 16));
    v4 = *a2;
    v5 = *(_QWORD ***)(*a2 + 48);
    if (v5)
    {
      ssftstring_ObjClose(v5);
      *(_QWORD *)(*a2 + 48) = 0;
      v4 = *a2;
    }
    heap_Free(a1, v4);
    *a2 = 0;
  }
  return 0;
}

uint64_t JpParse(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9, _WORD *a10, uint64_t *a11, uint64_t a12, int a13, const char *a14, uint64_t a15)
{
  uint64_t v21;
  uint64_t v22;
  unsigned int LogLevel;
  _BOOL4 v24;
  unsigned int v25;
  uint64_t v26;
  int *v27;
  unsigned __int16 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unsigned __int16 v38;
  uint64_t v39;
  unsigned int v40;
  _OWORD *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  size_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned __int16 v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  int v71;
  int v72;
  int v73;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  _BOOL4 v83;
  _BOOL4 v84;
  unsigned __int16 v87;
  uint64_t v88;
  unsigned __int16 v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  int v94;
  int v95;
  _QWORD *v96;
  unsigned int v97[3];

  v21 = a12;
  v22 = 2350915594;
  v97[0] = 0;
  v96 = 0;
  v94 = 0;
  v95 = 0;
  v93 = 0;
  v92 = 0;
  v91 = 0;
  v90 = 0;
  v89 = 0;
  LogLevel = log_GetLogLevel(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
  v24 = LogLevel > 4;
  v88 = 0;
  v87 = 0;
  *(_WORD *)(a12 + 8) = 0;
  *(_QWORD *)(a12 + 12) = 0x100000001;
  if (!*(_DWORD *)a1)
  {
    v22 = 2350915601;
    goto LABEL_54;
  }
  v25 = LogLevel;
  v26 = bed_GetpElem(a5, 0, &v88);
  if ((v26 & 0x80000000) != 0
    || (v26 = bed_GetcElem(a5, &v87), (v26 & 0x80000000) != 0)
    || (v26 = bed_GetpElem(a5, 0xFFFFu, &v92), (v26 & 0x80000000) != 0))
  {
LABEL_53:
    v22 = v26;
LABEL_54:
    if (v96)
    {
      v73 = jparser_FreeTree(*(_QWORD *)(a1 + 24), &v96);
      if (v73 >= 0 || (int)v22 <= -1)
        return v22;
      else
        return v73;
    }
    return v22;
  }
  if (a13 != 1)
    goto LABEL_12;
  if (v87)
  {
    v27 = (int *)(v88 + 20);
    v28 = 1;
    v29 = v87;
    do
    {
      v30 = *v27;
      v27 += 16;
      if (v30 == 21)
        ++v28;
      --v29;
    }
    while (v29);
    if (!v28)
    {
LABEL_12:
      v22 = jparser_Parse(*(_QWORD *)(a1 + 24), a2, a3, &v96, v24, *(_QWORD *)(a1 + 48), v88, v87, v92, a8, a13);
      v97[0] = v22;
      if ((v22 & 0x80000000) != 0)
        return v22;
      goto LABEL_33;
    }
  }
  else
  {
    v28 = 1;
  }
  v34 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), 1, (unint64_t)v28 << 6);
  if (v34)
  {
    v35 = v34;
    v81 = a4;
    v36 = v87;
    if (v87)
    {
      v37 = 0;
      v38 = 0;
      v39 = v88;
      v40 = v87;
      do
      {
        if (!v37 || *(_DWORD *)(v39 + 20) == 21)
        {
          v41 = (_OWORD *)(v34 + ((unint64_t)v38 << 6));
          v42 = *(_OWORD *)v39;
          v43 = *(_OWORD *)(v39 + 16);
          v44 = *(_OWORD *)(v39 + 48);
          v41[2] = *(_OWORD *)(v39 + 32);
          v41[3] = v44;
          *v41 = v42;
          v41[1] = v43;
          ++v38;
          v36 = v40;
        }
        ++v37;
        v39 += 64;
      }
      while (v37 < v36);
      if (v38)
      {
        v82 = v25;
        v83 = v24;
        v79 = a6;
        v80 = a5;
        v45 = 0;
        while (1)
        {
          if (v45)
          {
            v46 = v35 + v45;
            v47 = *(_DWORD *)(v88 + 32);
            v48 = (unsigned __int16)(*(_WORD *)(v35 + v45 + 32) - v47);
            if (*(_WORD *)(v35 + v45 + 32) != (_WORD)v47)
            {
              v49 = v35;
              v50 = a3;
              v51 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), (v48 + 1), 1);
              if (!v51)
              {
                heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), v49);
                return v22;
              }
              v52 = (uint64_t)v51;
              v53 = strncpy(v51, a14, v48);
              v53[v48] = 0;
              *(_DWORD *)(v46 + 32) = 2 * Utf8_LengthInUtf8chars((unint64_t)v53, v48);
              heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), v52);
              a3 = v50;
              v35 = v49;
            }
          }
          v45 += 64;
          if ((unint64_t)v38 << 6 == v45)
          {
            a6 = v79;
            a5 = v80;
            v25 = v82;
            v24 = v83;
            goto LABEL_32;
          }
        }
      }
    }
    v38 = 0;
LABEL_32:
    v54 = v35;
    v22 = jparser_Parse(*(_QWORD *)(a1 + 24), a2, a3, &v96, v24, *(_QWORD *)(a1 + 48), v35, v38, v92, a8, 1);
    v97[0] = v22;
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), v54);
    v21 = a12;
    a4 = v81;
    if ((v22 & 0x80000000) == 0)
    {
LABEL_33:
      v84 = v24;
      if ((_DWORD)a3 && 3 * (_DWORD)a3 != 2 * (unsigned __int16)*(_DWORD *)(v92 + 36))
        *(_DWORD *)(v21 + 16) = 0;
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(a1 + 40), 5, 0, (uint64_t)"[UTOI] (normalizing %d bytes - region length %d %s)", v31, v32, v33, a3);
      UTOITrace(v24, *(_QWORD *)(a1 + 32), a4, a5, (uint64_t)"START of normalization");
      v91 = 0;
      jparser_extractResult(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v96, (int *)v97, a6, a7, a8, a9, a10, &v93, (_WORD *)&v95 + 1, &v95, (_WORD *)&v94 + 1, *(_QWORD *)(a1 + 48), a11, (unsigned __int16 *)&v94, v21, &v91, (uint64_t)a14,
        a15);
      v22 = v97[0];
      if ((v97[0] & 0x80000000) != 0)
        goto LABEL_54;
      v55 = a6;
      if (!(_DWORD)a3)
        goto LABEL_72;
      v26 = bed_GetcElem(a6, &v89);
      if ((v26 & 0x80000000) == 0)
      {
        v59 = *(_QWORD *)(a1 + 32);
        if (!v89)
        {
          log_OutText(*(_QWORD *)(v59 + 32), *(_QWORD *)(a1 + 40), 5, 0, (uint64_t)"[UTOI] deleting region, no replacement text found", v56, v57, v58, v78);
          goto LABEL_72;
        }
        UTOISubTrace(v24, v59, a6, (uint64_t)"replacement string");
        if (*(_DWORD *)(v21 + 16) != 1)
        {
LABEL_72:
          v22 = utoin_IncrReplaceCurrentRegion(a4, a5, v55, a3 >> 1, (uint64_t *)v21);
          if ((v22 & 0x80000000) == 0)
            UTOITrace(v24, *(_QWORD *)(a1 + 32), a4, a5, (uint64_t)"END of normalization");
          goto LABEL_54;
        }
        v26 = bed_GetpElem(a6, 0, &v90);
        if ((v26 & 0x80000000) == 0)
        {
          if (!v89)
          {
            v72 = 1;
            v67 = v25;
            goto LABEL_66;
          }
          v63 = 0;
          v64 = 0;
          v65 = 1;
          v66 = v90;
          v67 = v25;
          while (1)
          {
            if (*(_BYTE *)(v66 + v63) == 16)
            {
              v68 = *(unsigned __int16 *)(v21 + 8);
              if (v64 >= v68)
              {
LABEL_64:
                log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(a1 + 40), 5, 0, (uint64_t)"[UTOI] cannot find non-deleted word to align new word number %d with", v60, v61, v62, v65);
                v72 = 0;
LABEL_66:
                if (v67 >= 5 && *(_WORD *)(v21 + 8))
                {
                  v76 = 0;
                  v77 = 0;
                  do
                  {
                    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(a1 + 40), 5, 0, (uint64_t)"[UTOI] [%d] origWordPos=%d, newPos=%d, bDeleted=%d", v60, v61, v62, v77++);
                    v76 += 12;
                  }
                  while (v77 < *(unsigned __int16 *)(v21 + 8));
                }
                v24 = v84;
                if (v72)
                  *(_DWORD *)(v21 + 12) = 0;
                goto LABEL_72;
              }
              v69 = v64;
              v70 = (int *)(*(_QWORD *)v21 + 12 * v64 + 4);
              while (1)
              {
                v71 = *v70;
                v70 += 3;
                if (v71 != 1)
                  break;
                if (v68 == ++v69)
                  goto LABEL_64;
              }
              *(_WORD *)(*(_QWORD *)v21 + 12 * (unsigned __int16)v69 + 8) = v63;
              ++v65;
              v64 = (unsigned __int16)v69 + 1;
            }
            if (++v63 >= (unint64_t)v89)
            {
              v72 = 1;
              goto LABEL_66;
            }
          }
        }
      }
      goto LABEL_53;
    }
  }
  return v22;
}

uint64_t jparser_extractResult(uint64_t a1, uint64_t a2, _QWORD *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _WORD *a9, _WORD *a10, _WORD *a11, _WORD *a12, _WORD *a13, uint64_t a14, uint64_t *a15, unsigned __int16 *a16, uint64_t a17, _WORD *a18, uint64_t a19, uint64_t a20)
{
  int v27;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  const char *v38;
  unsigned int v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int appended;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  unsigned __int16 v63;
  uint64_t *v64;
  uint64_t v65;
  _WORD *v66;
  int v67;
  __int16 v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  size_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unsigned __int16 v87;
  int v88;
  _BYTE *v89;
  size_t v90;
  unsigned __int8 *v91;
  unsigned int v92;
  _BYTE *v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v99;
  int v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int16 v112;
  char v113[3];
  uint64_t v114;

  v114 = a7;
  if (*a4 < 0)
    return 0;
  v27 = ssftstring_Clear(a14);
  *a4 = v27;
  if (v27 < 0)
    return 0;
  if (!a3)
    return 1;
  v29 = a17;
  while (1)
  {
    v30 = a3[4];
    if (v30)
    {
      v31 = jparser_extractResult(a1, a2, v30, a4, a5, a6, v114, a8, a9, a10, a11, a12, a13, a14, a15, a16, v29, a18, a19,
              a20);
      v29 = a17;
      if (v31 != 1)
        return 0;
      goto LABEL_7;
    }
    v32 = a3[5];
    if (v32)
      break;
LABEL_7:
    a3 = (_QWORD *)a3[2];
    if (!a3)
      return 1;
  }
  v108 = a20;
  v109 = a2;
  v110 = a5;
  v111 = a1;
  v106 = a6;
  v107 = a8;
  v33 = 0;
  LOWORD(a6) = 0;
  v112 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  do
  {
    v37 = *(const char **)v32;
    if (!strcmp(*(const char **)v32, "WORD"))
    {
      v38 = *(const char **)(v32 + 8);
      v112 = strlen(v38);
      v39 = *(unsigned __int8 *)v38;
      if (*v38)
      {
        a6 = 0;
        do
        {
          v40 = v38 + 2;
          if (v39 > 0xFC)
            v41 = v38 + 1;
          else
            v41 = v38 + 2;
          if (v39 > 0xFC)
            v42 = a6;
          else
            v42 = a6 + 1;
          if (v39 <= 0xA0)
            v43 = a6;
          else
            v43 = a6 + 1;
          if (v39 <= 0xDF)
          {
            v41 = v38 + 1;
            v42 = v43;
          }
          if (v39 >= 0x81)
          {
            v44 = a6 + 1;
          }
          else
          {
            v40 = v38 + 1;
            v44 = a6;
          }
          if (v39 <= 0x9F)
          {
            v45 = v44;
          }
          else
          {
            v40 = v41;
            v45 = v42;
          }
          if ((v39 & 0x80) != 0)
            v38 = v40;
          else
            ++v38;
          if ((v39 & 0x80) != 0)
            a6 = v45;
          else
            ++a6;
          v39 = *(unsigned __int8 *)v38;
        }
        while (*v38);
      }
      else
      {
        LOWORD(a6) = 0;
      }
      appended = ssftstring_AppendCStr(a14, "Word \"");
      *a4 = appended;
      if (appended < 0)
        return 0;
      v47 = ssftstring_AppendCStr(a14, *(char **)(v32 + 8));
      *a4 = v47;
      if (v47 < 0)
        return 0;
      v48 = ssftstring_AppendCStr(a14, "\"");
      *a4 = v48;
      if (v48 < 0)
        return 0;
      v37 = *(const char **)v32;
      v36 = v32;
    }
    if (!strcmp(v37, "POS"))
    {
      v49 = ssftstring_AppendCStr(a14, "POS \"");
      *a4 = v49;
      if (v49 < 0)
        return 0;
      v50 = ssftstring_AppendCStr(a14, *(char **)(v32 + 8));
      *a4 = v50;
      if (v50 < 0)
        return 0;
      v51 = ssftstring_AppendCStr(a14, "\"");
      *a4 = v51;
      if (v51 < 0)
        return 0;
      v37 = *(const char **)v32;
      v34 = v32;
    }
    if (!strcmp(v37, "PRON"))
    {
      v33 = strlen(*(const char **)(v32 + 8));
      v52 = ssftstring_AppendCStr(a14, "Pron \"");
      *a4 = v52;
      if (v52 < 0)
        return 0;
      v53 = ssftstring_AppendCStr(a14, *(char **)(v32 + 8));
      *a4 = v53;
      if (v53 < 0)
        return 0;
      v54 = ssftstring_AppendCStr(a14, "\"");
      *a4 = v54;
      v35 = v32;
      if (v54 < 0)
        return 0;
    }
    v32 = *(_QWORD *)(v32 + 16);
  }
  while (v32);
  if (!v36 || !v35 || !v34)
  {
    v99 = -1944051456;
    goto LABEL_89;
  }
  v55 = *(_QWORD *)(v111 + 32);
  v56 = ssftstring_CStr(a14);
  log_OutText(v55, v109, 5, 0, (uint64_t)"[UTOI RES] %s", v57, v58, v59, v56);
  v60 = ssftstring_Clear(a14);
  *a4 = v60;
  if (v60 < 0)
    return 0;
  v61 = bed_Insert(v110, &szWORD_BEG_5, 1);
  *a4 = v61;
  if (v61 < 0)
    return 0;
  ++*a9;
  v62 = *a15;
  v63 = *a16 + 1;
  *a16 = v63;
  v64 = *(uint64_t **)(v111 + 8);
  v65 = 2 * v63 + 2;
  if (v62)
  {
    v66 = (_WORD *)heap_Realloc(v64, v62, v65);
    if (!v66)
      goto LABEL_86;
    *a15 = (uint64_t)v66;
  }
  else
  {
    v66 = (_WORD *)heap_Calloc(v64, 1, v65);
    *a15 = (uint64_t)v66;
    if (!v66)
      goto LABEL_86;
  }
  *v66 = *a16;
  v67 = SearchTERMINALTable(*(char **)(v34 + 8));
  if (v67)
    v68 = v67;
  else
    v68 = 42;
  *(_WORD *)(*a15 + 2 * *a16) = v68;
  *a4 = bed_Insert(v110, *(void **)(v35 + 8), v33);
  *a9 += v33;
  v69 = bed_Insert(v110, &szWORD_END_6, 1);
  *a4 = v69;
  if (v69 < 0)
    return 0;
  ++*a9;
  if (!v112)
  {
    log_OutText(*(_QWORD *)(v111 + 32), v109, 5, 0, (uint64_t)"[UTOI] jparser word length is 0, cannot get hex args", v70, v71, v72, v103);
    v99 = -1944051712;
    goto LABEL_89;
  }
  a1 = v111;
  v73 = heap_Calloc(*(_QWORD **)(v111 + 8), (unsigned __int16)a6 + 1, 2);
  if (!v73)
    goto LABEL_86;
  v74 = v73;
  LH_wcsncpy(v73, (unsigned __int16 *)(v108 + 2 * (unsigned __int16)*a13), (unsigned __int16)a6);
  *(_WORD *)(v74 + 2 * (unsigned __int16)a6) = 0;
  v75 = utf8_16BitNbrOfUtf8Chars(v74);
  if (!v75)
  {
    log_OutText(*(_QWORD *)(v111 + 32), v109, 5, 0, (uint64_t)"[UTOI] converted utf8 word length is 0, cannot get hex args", v76, v77, v78, v103);
    v100 = -1944051712;
    goto LABEL_92;
  }
  v79 = (unsigned __int16)(v75 - 1);
  v80 = (char *)heap_Calloc(*(_QWORD **)(v111 + 8), v79 + 1, 1);
  a2 = v109;
  if (v80)
  {
    v81 = (uint64_t)v80;
    strncpy(v80, (const char *)(a19 + (unsigned __int16)*a12), v79)[v79] = 0;
    log_OutText(*(_QWORD *)(v111 + 32), v109, 5, 0, (uint64_t)"[UTOI] get hex args from UTF16Word(%s,pos=%d) UTF8Word(%s,pos=%d)", v82, v83, v84, v74);
    v85 = v114;
    v86 = *(unsigned __int16 *)(v114 + 16);
    v87 = v86 + 2 * v79 + 1;
    v104 = v74;
    if (*(unsigned __int16 *)(v114 + 18) < v87)
    {
      v88 = datac_RequestBlock(v106, v107, (unsigned __int16)(v86 + 2 * v79 + 1), &v114);
      *a4 = v88;
      if (v88 < 0)
      {
        heap_Free(*(_QWORD **)(v111 + 8), v74);
        v101 = *(_QWORD **)(v111 + 8);
        v102 = v81;
        goto LABEL_93;
      }
      v85 = v114;
      v86 = *(unsigned __int16 *)(v114 + 16);
    }
    v89 = (_BYTE *)(*(_QWORD *)(v85 + 8) + *(unsigned __int16 *)(v85 + 2) * (unint64_t)v86);
    *(_WORD *)(v85 + 16) = v87;
    v105 = v79;
    if ((_DWORD)v79)
    {
      v90 = v79;
      v91 = (unsigned __int8 *)v81;
      do
      {
        v92 = *v91++;
        LH_itoa(v92, v113, 0x10u);
        v113[2] = 0;
        *v89 = v113[0];
        v93 = v89 + 2;
        v89[1] = v113[1];
        v89 += 2;
        --v90;
      }
      while (v90);
    }
    else
    {
      v93 = v89;
    }
    *v93 = 0;
    *a11 += v112;
    *a12 += v105;
    *a13 += a6;
    heap_Free(*(_QWORD **)(v111 + 8), v104);
    heap_Free(*(_QWORD **)(v111 + 8), v81);
    v29 = a17;
    a8 = v107;
    a6 = v106;
    a5 = v110;
    a20 = v108;
    if (*(_DWORD *)(a17 + 16) != 1)
      goto LABEL_84;
    v94 = *(unsigned __int16 *)(a17 + 8);
    v95 = *(_QWORD *)a17;
    if (v94 < *(unsigned __int16 *)(a17 + 10))
    {
LABEL_83:
      v97 = v95 + 12 * v94;
      *(_WORD *)v97 = *a18;
      *(_QWORD *)(v97 + 2) = 0;
      *a18 += v105;
      ++*(_WORD *)(v29 + 8);
LABEL_84:
      *a10 = *a9;
      goto LABEL_7;
    }
    v96 = heap_Realloc(*(uint64_t **)(v111 + 8), v95, 12 * *(unsigned __int16 *)(a17 + 10) + 121);
    if (v96)
    {
      v95 = v96;
      v29 = a17;
      *(_QWORD *)a17 = v96;
      *(_WORD *)(a17 + 10) += 10;
      v94 = *(unsigned __int16 *)(a17 + 8);
      goto LABEL_83;
    }
LABEL_86:
    v99 = -1944051702;
LABEL_89:
    *a4 = v99;
    return 0;
  }
  v100 = -1944051702;
LABEL_92:
  *a4 = v100;
  v101 = *(_QWORD **)(v111 + 8);
  v102 = v74;
LABEL_93:
  heap_Free(v101, v102);
  return 0;
}

uint64_t wparserJparser_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2350915585;
  result = 0;
  *a2 = &IWparserImplJparser;
  return result;
}

uint64_t wparser_impl_jparser_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v19 = 0;
  if (!a5)
    return 2350915591;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v19);
  if ((inited & 0x80000000) == 0)
  {
    log_OutText(*(_QWORD *)(v19 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjOpen: Begin", v8, v9, v10, v18);
    v12 = (_QWORD *)heap_Calloc(*(_QWORD **)(v19 + 8), 1, 88);
    if (v12)
    {
      *v12 = a3;
      v12[1] = a4;
      v16 = v19;
      v12[2] = v19;
      v12[3] = 0;
      v12[5] = "WPARSER_IMPL";
      *(_QWORD *)a5 = v12;
      *(_DWORD *)(a5 + 8) = 87652;
      log_OutText(*(_QWORD *)(v16 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjOpen: End (%x)", v13, v14, v15, inited);
    }
    else
    {
      return 2350915594;
    }
  }
  return inited;
}

uint64_t wparser_impl_jparser_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v3 & 0x80000000) != 0)
    return v3;
  v7 = *(_QWORD *)(a1 + 16);
  log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : Begin", v4, v5, v6, v13);
  v8 = JpRemove(*(_QWORD **)(v7 + 8), (uint64_t *)(a1 + 32));
  if ((v8 & 0x80000000) == 0)
  {
    heap_Free(*(_QWORD **)(v7 + 8), a1);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : End (%x)", v9, v10, v11, v8);
  }
  return v8;
}

uint64_t wparser_impl_jparser_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v6 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v6 & 0x80000000) == 0)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjReopen : Begin", v3, v4, v5, v11);
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjReopen : End (%x)", v7, v8, v9, v6);
  }
  return v6;
}

uint64_t wparser_impl_jparser_Init(uint64_t a1, int a2, _QWORD *a3, const char *a4, const char *a5, int a6, _BYTE *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  const char *v30;

  v13 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v13 & 0x80000000) != 0)
    return v13;
  *(_QWORD *)(a1 + 48) = a3;
  if (strcmp(a5, "win932"))
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), *(_QWORD *)(a1 + 40), 1802, "%s%s", v14, v15, v16, v17, a5);
    return 2350915591;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = xcode_Utf16leToWin932;
  if (*a7)
  {
    v19 = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE *, uint64_t))(*a3 + 64))(a3[1], a3[2], a7, a1 + 64);
    if ((v19 & 0x80000000) != 0)
    {
      v18 = v19;
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
      v26 = *(_QWORD *)(a1 + 40);
      v27 = 1819;
      v28 = 0;
LABEL_15:
      log_OutPublic(v25, v26, v27, v28, v20, v21, v22, v23, v30);
      return v18;
    }
    a3 = *(_QWORD **)(a1 + 48);
  }
  *(_QWORD *)(a1 + 56) = 0;
  if (!strcmp(a4, "null"))
    goto LABEL_11;
  v24 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*a3 + 64))(a3[1], a3[2], a4, a1 + 56);
  if ((v24 & 0x80000000) != 0)
  {
    v18 = v24;
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    v26 = *(_QWORD *)(a1 + 40);
    v30 = "xlit data : ";
    v28 = "%s%s";
    v27 = 1804;
    goto LABEL_15;
  }
  a3 = *(_QWORD **)(a1 + 48);
LABEL_11:
  v18 = JpCreate(*(_WORD **)a1, *(_QWORD *)(a1 + 8), *a3, a3[1], a3[2], *((_WORD *)a3 + 12), *((_DWORD *)a3 + 7), (uint64_t *)(a1 + 32), *(_QWORD *)(a1 + 40));
  if ((v18 & 0x80000000) == 0)
    *(_DWORD *)(a1 + 80) = a6;
  return v18;
}

uint64_t wparser_impl_jparser_Normalize(uint64_t a1, int a2, const char *a3, unsigned int a4, unsigned __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 a11, _WORD *a12, uint64_t a13, uint64_t *a14, uint64_t a15)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v39;
  unsigned __int16 v40;
  int v41;
  unsigned __int16 v42;

  v42 = a5;
  v41 = 0;
  v21 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v21 & 0x80000000) != 0)
    return v21;
  v25 = 2350915594;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF8: %s", v22, v23, v24, (uint64_t)a3);
  v26 = Utf8_Utf8NbrOfSymbols(a3);
  v27 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 2 * (v26 + 1));
  if (v27)
  {
    v28 = v27;
    v29 = utf8_Utf8ToUtf16((uint64_t)a3, a4, 0, v27, 2 * v26, &v41, 0);
    if ((v29 & 0x80000000) != 0)
    {
      v34 = 0;
    }
    else
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF16: %s", v30, v31, v32, v28);
      v33 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 2 * (v41 + 1));
      if (!v33)
        return v25;
      v34 = (char *)v33;
      v29 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, unsigned __int16 *, _QWORD))(a1 + 72))(*(_QWORD *)(a1 + 56), v28, (unsigned __int16)v41, v33, &v42, *(_QWORD *)(a1 + 64));
      if ((v29 & 0x80000000) == 0)
      {
        v34[v42] = 0;
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL WIN932: %s", v35, v36, v37, (uint64_t)v34);
        if (v42)
        {
          v29 = JpParse(*(_QWORD *)(a1 + 32), v34, v42, a6, a7, a8, a9, a10, a11, a12, a14, a15, *(_DWORD *)(a1 + 80), a3, v28);
        }
        else
        {
          v40 = 0;
          v29 = bed_GetcElem(a8, &v40);
          if ((v29 & 0x80000000) == 0)
          {
            if (!v40 || (v29 = bed_Remove(a8, 0, v40), (v29 & 0x80000000) == 0))
            {
              v39 = utoin_IncrReplaceCurrentRegion(a6, a7, a8, 0, 0);
              v25 = v39 & (v39 >> 31);
LABEL_11:
              heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v28);
              if (v34)
                heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v34);
              return v25;
            }
          }
        }
      }
    }
    v25 = v29;
    goto LABEL_11;
  }
  return v25;
}

uint64_t wparser_impl_jparser_Spell(uint64_t a1, int a2, const char *a3, unsigned int a4, __int16 a5, uint64_t a6, int a7, int a8, __int16 a9, uint64_t a10, int a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  int v36;
  int v37;

  LOWORD(v37) = a5;
  v36 = 0;
  v17 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v17 & 0x80000000) != 0)
    return v17;
  v21 = 2350915594;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF8: %s", v18, v19, v20, (uint64_t)a3);
  v22 = Utf8_Utf8NbrOfSymbols(a3);
  v23 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 2 * (v22 + 1));
  if (v23)
  {
    v24 = v23;
    v25 = utf8_Utf8ToUtf16((uint64_t)a3, a4, 0, v23, 2 * v22, &v36, 0);
    if ((v25 & 0x80000000) != 0)
    {
      v30 = 0;
    }
    else
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF16: %s", v26, v27, v28, v24);
      v29 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 2 * (v36 + 1));
      if (!v29)
        return v21;
      v30 = v29;
      v25 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, int *, _QWORD))(a1 + 72))(*(_QWORD *)(a1 + 56), v24, (unsigned __int16)v36, v29, &v37, *(_QWORD *)(a1 + 64));
      if ((v25 & 0x80000000) == 0)
      {
        *(_BYTE *)(v30 + (unsigned __int16)v37) = 0;
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL WIN932: %s", v31, v32, v33, v30);
        LOWORD(v35) = a9;
        v25 = DoJPJSpell(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v30, (unsigned __int16)v37, a6, a7, a8, v35, a10, a11);
      }
    }
    v21 = v25;
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v24);
    if (v30)
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v30);
  }
  return v21;
}

uint64_t wparser_impl_jparser_Latin(uint64_t a1, int a2, char *a3, unsigned int a4, char **a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v28;
  unsigned __int16 v29;

  v29 = a4;
  v28 = 0;
  v9 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v9 & 0x80000000) != 0)
    return v9;
  v13 = 2350915594;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF8: %s", v10, v11, v12, (uint64_t)a3);
  v14 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 2 * a4 + 2);
  if (v14)
  {
    v15 = v14;
    v16 = utf8_Utf8ToUtf16((uint64_t)a3, a4, 0, v14, 2 * a4, &v28, 0);
    if ((v16 & 0x80000000) != 0)
    {
      v21 = 0;
      v13 = v16;
    }
    else
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF16: %s", v17, v18, v19, v15);
      v20 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 2 * (v28 + 1));
      if (!v20)
        return v13;
      v21 = (char *)v20;
      v13 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, unsigned __int16 *, _QWORD))(a1 + 72))(*(_QWORD *)(a1 + 56), v15, (unsigned __int16)v28, v20, &v29, *(_QWORD *)(a1 + 64));
      if ((v13 & 0x80000000) == 0)
      {
        v21[v29] = 0;
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL WIN932: %s", v22, v23, v24, (uint64_t)v21);
        v25 = *(_QWORD *)(a1 + 48);
        if (*(_DWORD *)(v25 + 28) == 1)
        {
          v13 = DoJPJLatin(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 40), v25, v21, a5);
          if (a5)
          {
            if (*a5)
            {
              v26 = *a3;
              if ((v26 & 0x80000000) == 0)
                *(_WORD *)*a5 = v26;
            }
          }
        }
      }
    }
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v15);
    if (v21)
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v21);
  }
  return v13;
}

uint64_t wparser_impl_jparser_End(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wparser_impl_jparser_ProcessStart(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wparser_impl_jparser_ProcessEnd(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t get_a_rule(uint64_t a1)
{
  uint64_t result;

  result = 0;
  if ((a1 & 0x8000000000000000) == 0 && a1 < 1)
    return (uint64_t)*(&pBG_grammar + a1);
  return result;
}

uint64_t find_grammar_right(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 16);
  v3 = Sparse_index[2 * v2];
  if (v3 != -1)
  {
    v4 = 0;
    v5 = Sparse_index[2 * v2 + 1];
    if ((v3 & 0x8000000000000000) == 0 && v3 < 1)
      v4 = *(&pBG_grammar + v3);
    v6 = 3;
    while (1)
    {
      v7 = *(_QWORD *)(v1 + 8 * --v6);
      v8 = v4[v6];
      if (v7 < v8)
        return -1;
      if (v7 > v8)
        break;
      if (v6 < 2)
      {
        v9 = Sparse_index[2 * v2];
LABEL_21:
        *a1 = (uint64_t)v4;
        return v9;
      }
    }
    v4 = 0;
    if ((v5 & 0x8000000000000000) == 0 && v5 < 1)
      v4 = *(&pBG_grammar + v5);
    v10 = 3;
    while (1)
    {
      v11 = *(_QWORD *)(v1 + 8 * --v10);
      v12 = v4[v10];
      if (v11 < v12)
        break;
      if (v11 > v12)
        return -1;
      if (v10 < 2)
      {
        v9 = Sparse_index[2 * v2 + 1];
        goto LABEL_21;
      }
    }
    v13 = v5 - v3;
    if (v5 - v3 == 1)
    {
      v4 = 0;
      v9 = -1;
    }
    else
    {
      do
      {
        v4 = 0;
        if (v13 >= 0)
          v15 = v13;
        else
          v15 = v13 + 1;
        v9 = v3 + (v15 >> 1);
        if (!v9)
          v4 = &BG_grammar;
        v16 = 3;
        while (1)
        {
          v17 = *(_QWORD *)(v1 + 8 * --v16);
          v18 = v4[v16];
          if (v17 < v18)
            break;
          if (v17 > v18)
          {
            v3 = v9;
            goto LABEL_35;
          }
          if (v16 < 2)
            goto LABEL_21;
        }
        v5 = v9;
LABEL_35:
        v4 = 0;
        v13 = v5 - v3;
        v9 = -1;
      }
      while (v5 - v3 != 1);
    }
    goto LABEL_21;
  }
  return -1;
}

uint64_t find_next_grammar_right(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  if (a2 >= a3)
  {
    if ((a3 & 0x8000000000000000) == 0 && a3 < 1)
    {
      v3 = (uint64_t)*(&pBG_grammar + a3);
      if (v3)
      {
        v4 = 3;
        while (1)
        {
          --v4;
          if (*(_QWORD *)(*a1 + 8 * v4) != *(_QWORD *)(v3 + 8 * v4))
            break;
          if (v4 < 2)
          {
            *a1 = v3;
            return a3 - 1;
          }
        }
      }
    }
    a3 = a2 + 1;
  }
  v5 = -1;
  if ((a3 & 0x8000000000000000) == 0 && a3 < 1)
  {
    v6 = (uint64_t)*(&pBG_grammar + a3);
    if (v6)
    {
      v7 = 3;
      while (1)
      {
        --v7;
        if (*(_QWORD *)(*a1 + 8 * v7) != *(_QWORD *)(v6 + 8 * v7))
          break;
        if (v7 < 2)
        {
          *a1 = v6;
          return a3 + 1;
        }
      }
    }
    return -1;
  }
  return v5;
}

uint64_t get_me_terminal(uint64_t a1)
{
  uint64_t v1;
  _UNKNOWN **i;

  v1 = 1;
  for (i = &pBG_terminal_line; *(_QWORD *)*i != a1; ++i)
  {
    if (!--v1)
      return -1;
  }
  return *((_QWORD *)*i + 8);
}

uint64_t mbs_copy(uint64_t a1, _QWORD *a2, int a3, int a4, _QWORD *a5)
{
  uint64_t v7;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;

  v7 = 2350915594;
  if (a4 < 1)
  {
    if (!a4 || *(_QWORD *)a1)
    {
      v13 = (int *)(a1 + 8);
LABEL_11:
      v7 = 0;
      *v13 = a4;
    }
  }
  else
  {
    v10 = 4 * a4;
    v11 = heap_Calloc(a5, 1, (4 * a4));
    *(_QWORD *)a1 = v11;
    if (v11)
    {
      v12 = 0;
      *(_DWORD *)(a1 + 8) = a4;
      v13 = (int *)(a1 + 8);
      if (v10 <= 1)
        v14 = 1;
      else
        v14 = v10;
      do
      {
        *(_BYTE *)(*(_QWORD *)a1 + v12) = *(_BYTE *)(*a2 + 4 * a3 + v12);
        ++v12;
      }
      while (v14 != v12);
      goto LABEL_11;
    }
  }
  return v7;
}

uint64_t mbs_create(uint64_t a1, int a2, const char *a3, _QWORD *a4)
{
  const char *v5;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  BOOL v15;

  v5 = a3;
  v8 = 2350915591;
  if (a3)
  {
    a2 = sjis_len(a3);
    if (a2 == -1)
      return v8;
  }
  if (a2 > 0)
  {
    v9 = heap_Calloc(a4, 1, (4 * a2));
    *(_QWORD *)a1 = v9;
    goto LABEL_6;
  }
  v9 = *(_QWORD *)a1;
  if (a2)
  {
LABEL_6:
    if (!v9)
      return 2350915594;
  }
  *(_DWORD *)(a1 + 8) = a2;
  if (v5)
  {
    v10 = strlen(v5);
    if (v10 >= 1)
    {
      v11 = 0;
      v12 = 1;
      do
      {
        v13 = *v5;
        if (v12 == 1)
        {
          v14 = 4 * v11;
          *(_BYTE *)(*(_QWORD *)a1 + v14) = 1;
          v15 = (v13 + 32) >= 0x1Du && (v13 + 127) >= 0x1Fu;
          *(_BYTE *)(*(_QWORD *)a1 + (int)v14 + 1) = v13;
          ++v11;
          if (v15)
            v12 = 1;
          else
            v12 = 2;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)a1 + 4 * v11 - 4) = 2;
          *(_BYTE *)(*(_QWORD *)a1 + 4 * v11 - 2) = v13;
          v12 = 1;
        }
        ++v5;
        --v10;
      }
      while (v10);
    }
  }
  return 0;
}

uint64_t mbs_compare(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *i;
  int v10;
  int v11;
  char *v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;

  result = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    v4 = *((unsigned int *)a1 + 2);
    v5 = *(_DWORD *)(a2 + 8);
    if ((int)v4 > v5)
      return 1;
    if ((int)v4 >= v5)
    {
      if ((int)v4 >= 1)
      {
        v6 = 0;
        v7 = *a1;
        v8 = *(_QWORD *)a2 + 1;
        for (i = (char *)(v7 + 1); ; i += 4)
        {
          v10 = *(char *)(v7 + 4 * v6);
          v11 = *(char *)(*(_QWORD *)a2 + 4 * v6);
          if (v10 > v11)
            break;
          if (v10 < v11)
            return 0xFFFFFFFFLL;
          v12 = i;
          v13 = (char *)v8;
          if (v10 >= 1)
          {
            do
            {
              v15 = *v12++;
              v14 = v15;
              v16 = *v13++;
              v17 = v14 < v16;
              if (v14 > v16)
                return 1;
              if (v17)
                return 0xFFFFFFFFLL;
            }
            while (--v10);
          }
          result = 0;
          ++v6;
          v8 += 4;
          if (v6 == v4)
            return result;
        }
        return 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t *mbs_free(uint64_t *result, _QWORD *a2)
{
  if (*result)
    return heap_Free(a2, *result);
  return result;
}

uint64_t log_mbs_fput_sjis(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char __s[4];

  if (a2[2] < 1)
    return 0;
  v4 = 0;
  v5 = 1;
  do
  {
    v6 = *(_QWORD *)a2;
    if (*(char *)(*(_QWORD *)a2 + 4 * v4) < 1)
    {
      LODWORD(v7) = 0;
    }
    else
    {
      v7 = 0;
      do
      {
        __s[v7] = *(_BYTE *)(v6 + v5 + v7);
        ++v7;
      }
      while (v7 < *(char *)(v6 + 4 * v4));
    }
    __s[v7] = 0;
    result = ssftstring_AppendCStr(a1, __s);
    if ((result & 0x80000000) != 0)
      break;
    ++v4;
    v5 += 4;
  }
  while (v4 < a2[2]);
  return result;
}

uint64_t sjis_len(const char *a1)
{
  const char *v1;
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;

  v1 = a1;
  v2 = strlen(a1);
  if (v2 < 1)
    return 0;
  v3 = 0;
  v4 = 1;
  do
  {
    if (v4 == 1)
    {
      v5 = (*v1 + 32) >= 0x1Du && (*v1 + 127) >= 0x1Fu;
      v3 = (v3 + 1);
      if (v5)
        v4 = 1;
      else
        v4 = 2;
    }
    else
    {
      v4 = 1;
    }
    ++v1;
    --v2;
  }
  while (v2);
  return v3;
}

unint64_t mbs_len_bytes(unint64_t result)
{
  uint64_t v1;
  char **v2;
  char *v3;
  int v4;

  v1 = *(unsigned int *)(result + 8);
  if ((int)v1 < 1)
    return 0;
  v2 = (char **)result;
  LODWORD(result) = 0;
  v3 = *v2;
  do
  {
    v4 = *v3;
    v3 += 4;
    result = (result + v4);
    --v1;
  }
  while (v1);
  return result;
}

uint64_t mbs_add_str(uint64_t a1, uint64_t a2, int a3, int a4, char a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = 2350915591;
  if (a3 < 0 || *(_DWORD *)(a2 + 8) < a4 + a3)
    return v6;
  v12 = *(int *)(a1 + 8);
  if (!(_DWORD)v12)
  {
    v14 = (4 * a4);
    v13 = heap_Alloc((uint64_t)a6, v14);
    *(_QWORD *)a1 = v13;
    if (v13)
      goto LABEL_7;
    return 2350915594;
  }
  v13 = heap_Realloc(a6, *(_QWORD *)a1, (4 * (v12 + a4)));
  if (!v13)
    return 2350915594;
  *(_QWORD *)a1 = v13;
  v14 = (4 * a4);
LABEL_7:
  memcpy((void *)(v13 + 4 * v12), (const void *)(*(_QWORD *)a2 + 4 * a3), v14);
  if (a4 >= 1)
  {
    v15 = a4;
    v16 = 4 * v12 + 3;
    do
    {
      *(_BYTE *)(*(_QWORD *)a1 + v16) = a5;
      v16 += 4;
      --v15;
    }
    while (v15);
  }
  v6 = 0;
  *(_DWORD *)(a1 + 8) += a4;
  return v6;
}

uint64_t mbs2sjis(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  int v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = a3 + a2;
  if (*(_DWORD *)(a1 + 8) < a3 + (int)a2)
    return -1;
  if (a3 >= 1)
  {
    v6 = 0;
    v7 = 4 * (int)a2;
    v8 = (a2 << 34) | 0x100000000;
    while (*(char *)(*(_QWORD *)a1 + v7) < 1)
    {
LABEL_9:
      LODWORD(a2) = a2 + 1;
      v7 += 4;
      v8 += 0x400000000;
      if ((int)a2 >= v5)
        goto LABEL_12;
    }
    v9 = *(unsigned __int8 *)(*(_QWORD *)a1 + v7);
    v10 = v8;
    while (1)
    {
      *(_BYTE *)(a4 + v6++) = *(_BYTE *)(*(_QWORD *)a1 + (v10 >> 32));
      if (a5 < v6)
        return -1;
      v10 += 0x100000000;
      if (!--v9)
        goto LABEL_9;
    }
  }
  v6 = 0;
LABEL_12:
  *(_BYTE *)(a4 + v6) = 0;
  return v6;
}

uint64_t compare_tag(uint64_t a1, int a2, char *__s)
{
  char *v3;
  int v6;
  uint64_t v8;
  unsigned __int8 *i;

  v3 = __s;
  v6 = strlen(__s);
  if (v6 + a2 > *(_DWORD *)(a1 + 8))
    return 0;
  if (v6 >= 1)
  {
    v8 = v6;
    for (i = (unsigned __int8 *)(*(_QWORD *)a1 + 4 * a2 + 1); *(i - 1) == 1 && *i == *v3; i += 4)
    {
      ++v3;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t mbs_one_char(_QWORD *a1, int a2)
{
  return *(char *)(*a1 + 4 * a2 + 1);
}

uint64_t *attribute_copy_one(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  int v5;
  char *v6;
  int v7;
  char *v8;

  if (!a1)
    return 0;
  v4 = (uint64_t *)heap_Alloc((uint64_t)a2, 24);
  if (v4)
  {
    v5 = strlen(*(const char **)a1);
    v6 = (char *)heap_Alloc((uint64_t)a2, (v5 + 1));
    *v4 = (uint64_t)v6;
    if (v6)
    {
      strcpy(v6, *(const char **)a1);
      v7 = strlen(*(const char **)(a1 + 8));
      v8 = (char *)heap_Alloc((uint64_t)a2, (v7 + 1));
      v4[1] = (uint64_t)v8;
      if (v8)
      {
        strcpy(v8, *(const char **)(a1 + 8));
        v4[2] = *(_QWORD *)(a1 + 16);
        return v4;
      }
      heap_Free(a2, *v4);
    }
    heap_Free(a2, (uint64_t)v4);
    return 0;
  }
  return v4;
}

uint64_t *attribute_copy_all(uint64_t *result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  char v6;
  uint64_t *v7;

  if (result)
  {
    v3 = (uint64_t)result;
    v4 = 0;
    v5 = 0;
    v6 = 1;
    while (1)
    {
      result = attribute_copy_one(v3, a2);
      if (!result)
        break;
      v7 = result;
      result[2] = 0;
      if ((v6 & 1) == 0)
      {
        v4[2] = (uint64_t)result;
        result = v5;
      }
      v6 = 0;
      v3 = *(_QWORD *)(v3 + 16);
      v4 = v7;
      v5 = result;
      if (!v3)
        return result;
    }
    attribute_free_all(v5, a2);
    return 0;
  }
  return result;
}

uint64_t *attribute_free_all(uint64_t *result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = (uint64_t)result;
    if (*result)
      heap_Free(a2, *result);
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      heap_Free(a2, v4);
    attribute_free_all(*(_QWORD *)(v3 + 16), a2);
    return heap_Free(a2, v3);
  }
  return result;
}

_BYTE *is_internal(uint64_t a1)
{
  _BYTE *result;

  result = (_BYTE *)get_pointer_of_symbol((uint64_t)&SF_symbol_file, a1);
  if (result)
    return (_BYTE *)(*result == 95 && result[1] == 73);
  return result;
}

uint64_t exist_symbol(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _BYTE *pointer_of_symbol;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v10[1] = *(_QWORD *)(a2 + 48);
  if (*(_DWORD *)(a2 + 32) == 2)
  {
    v4 = 0;
    v5 = *(_QWORD *)(a2 + 40);
  }
  else
  {
    v5 = 0;
    v4 = 1;
  }
  v10[0] = v5;
  while (1)
  {
    v6 = v4;
    v7 = (uint64_t *)v10[v4];
    pointer_of_symbol = (_BYTE *)get_pointer_of_symbol((uint64_t)&SF_symbol_file, *v7);
    if (!pointer_of_symbol || *pointer_of_symbol != 95 || pointer_of_symbol[1] != 73)
      break;
    if (exist_symbol(a1, v7))
      return 1;
LABEL_13:
    v4 = 1;
    if (v6)
      return 0;
  }
  if (*(_QWORD *)a1 != *v7 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 4 * v6 + 12))
    goto LABEL_13;
  return 1;
}

uint64_t find_attribute(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _BYTE *pointer_of_symbol;
  uint64_t result;
  uint64_t v12;
  const char *v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v14[1] = *(_QWORD *)(a2 + 48);
  if (*(_DWORD *)(a2 + 32) == 2)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 1;
  }
  v14[0] = v7;
  while (1)
  {
    v8 = v6;
    v9 = (uint64_t *)v14[v6];
    pointer_of_symbol = (_BYTE *)get_pointer_of_symbol((uint64_t)&SF_symbol_file, *v9);
    if (pointer_of_symbol && *pointer_of_symbol == 95 && pointer_of_symbol[1] == 73)
    {
      result = find_attribute(a1, v9, a3);
      if ((_DWORD)result == 1)
        return result;
      goto LABEL_17;
    }
    if (*(_QWORD *)a1 == *v9 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 4 * v8 + 12))
    {
      v12 = v9[3];
      if (v12)
        break;
    }
LABEL_17:
    v6 = 1;
    if (v8)
      return 0;
  }
  v13 = *(const char **)(a1 + 16);
  while (strcmp(*(const char **)v12, v13))
  {
    v12 = *(_QWORD *)(v12 + 16);
    if (!v12)
      goto LABEL_17;
  }
  *a3 = *(_QWORD *)(v12 + 8);
  return 1;
}

uint64_t get_attribute(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = 0;
  if (find_attribute(a1, a2, &v4) == 1)
    return v4;
  if (!strcmp(*(const char **)(a1 + 16), "POS"))
    return get_pointer_of_symbol((uint64_t)&SF_symbol_file, *(_QWORD *)a1);
  return 0;
}

BOOL compare_operand(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *attribute;
  const char *v8;
  BOOL v9;
  int v10;
  _BOOL8 result;
  _BOOL4 v12;

  attribute = *(const char **)(a2 + 8);
  if (!*(_DWORD *)a2)
    attribute = (const char *)get_attribute(*(_QWORD *)(a2 + 8), a4);
  v8 = *(const char **)(a3 + 8);
  if (!*(_DWORD *)a3)
    v8 = (const char *)get_attribute(*(_QWORD *)(a3 + 8), a4);
  if (attribute)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (v9)
    return 0;
  v10 = strcmp(attribute, v8);
  result = v10 == 0;
  if (a1 != 2)
  {
    v12 = v10 != 0;
    return a1 == 3 && v12;
  }
  return result;
}

uint64_t eval_cond(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;

  if (!a1)
    return 1;
  v3 = a1;
  while (1)
  {
    v4 = *(_DWORD *)v3;
    if (*(_DWORD *)v3 != 1)
      break;
    if (!eval_cond(*(_QWORD *)(v3 + 8), a2))
    {
      v3 = *(_QWORD *)(v3 + 16);
      if (v3)
        continue;
    }
    return 1;
  }
  if ((v4 - 2) < 2)
    return compare_operand(v4, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), a2);
  if (v4)
  {
    if (v4 == 4)
      return exist_symbol(*(_QWORD *)(v3 + 8), a2);
    return 0;
  }
  return eval_cond(*(_QWORD *)(v3 + 8), a2) && eval_cond(*(_QWORD *)(v3 + 16), a2);
}

uint64_t assign_attribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t attribute;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int v11;
  uint64_t result;

  attribute = *(_QWORD *)(a2 + 8);
  if (*(_DWORD *)a2 || (attribute = get_attribute(*(_QWORD *)(a2 + 8), a3)) != 0)
  {
    v8 = *(_QWORD *)(a3 + 24);
    if (v8)
    {
      v9 = *(const char **)(*(_QWORD *)(a1 + 8) + 16);
      while (1)
      {
        v10 = v8;
        v8 = *(_QWORD *)(v8 + 16);
        v11 = strcmp(*(const char **)v10, v9);
        if (!v8)
          break;
        if (!v11)
          goto LABEL_13;
      }
      if (!v11)
      {
LABEL_13:
        *(_QWORD *)v10 = v9;
        *(_QWORD *)(v10 + 8) = attribute;
        return 1;
      }
      result = heap_Alloc(a4, 24);
      if (!result)
        return result;
      *(_QWORD *)result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
      *(_QWORD *)(result + 8) = attribute;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(v10 + 16) = result;
    }
    else
    {
      result = heap_Alloc(a4, 24);
      if (!result)
        return result;
      *(_QWORD *)result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
      *(_QWORD *)(result + 8) = attribute;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(a3 + 24) = result;
    }
  }
  return 1;
}

uint64_t exec_actions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;

  if (!a1)
    return 1;
  v5 = a1;
  while (1)
  {
    if (*(_DWORD *)v5 == 1)
    {
      v7 = *(uint64_t **)(v5 + 8);
      if (*v7 && !eval_cond(*v7, a2))
        v8 = v7[2];
      else
        v8 = v7[1];
      result = exec_actions(v8, a2, a3);
      if (!(_DWORD)result)
        return result;
      goto LABEL_12;
    }
    if (*(_DWORD *)v5)
      return 0;
    result = assign_attribute(**(_QWORD **)(v5 + 8), *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8), a2, a3);
    if (!(_DWORD)result)
      return result;
LABEL_12:
    v5 = *(_QWORD *)(v5 + 16);
    if (!v5)
      return 1;
  }
}

BOOL compare_attribute(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2;
  v3 = a1;
  if (!a1 || !a2)
    return (v3 | v2) == 0;
  while (!strcmp(*(const char **)v3, *(const char **)v2) && !strcmp(*(const char **)(v3 + 8), *(const char **)(v2 + 8)))
  {
    v3 = *(_QWORD *)(v3 + 16);
    v2 = *(_QWORD *)(v2 + 16);
    if (!v3 || !v2)
      return (v3 | v2) == 0;
  }
  return 0;
}

uint64_t log_output_attribute(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char i;

  result = ssftstring_AppendCStr(a1, "{");
  if ((result & 0x80000000) == 0)
  {
    if (a2)
    {
      for (i = 0; ; i = 1)
      {
        if ((i & 1) != 0)
        {
          result = ssftstring_AppendCStr(a1, ",");
          if ((result & 0x80000000) != 0)
            break;
        }
        result = ssftstring_AppendCStr(a1, *(char **)a2);
        if ((result & 0x80000000) != 0)
          break;
        result = ssftstring_AppendCStr(a1, "=\"");
        if ((result & 0x80000000) != 0)
          break;
        result = ssftstring_AppendCStr(a1, *(char **)(a2 + 8));
        if ((result & 0x80000000) != 0)
          break;
        result = ssftstring_AppendCStr(a1, "\" ");
        if ((result & 0x80000000) != 0)
          break;
        a2 = *(_QWORD *)(a2 + 16);
        if (!a2)
          return ssftstring_AppendCStr(a1, "}");
      }
    }
    else
    {
      return ssftstring_AppendCStr(a1, "}");
    }
  }
  return result;
}

uint64_t box_hash_get_address(int a1, int a2)
{
  int v2;

  v2 = 20 * (a1 % 200);
  if (((a2 / 20) & 1) != 0)
    return (v2 + 20 * (a2 / 20) - a2 + 19);
  else
    return (v2 + a2 % 20);
}

uint64_t box_hash_get_leading_word(_QWORD *a1, int a2, int a3, int a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*a1 + 8 * a4);
  if (!v4)
    return 0;
  while (*(__int16 *)(v4 + 10) != a3 || *(__int16 *)(v4 + 8) != a2)
  {
    v4 = *(_QWORD *)(v4 + 16);
    if (!v4)
      return 0;
  }
  return *(_QWORD *)v4;
}

uint64_t *box_one_free_all(uint64_t *result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v3 = (uint64_t)result;
    v4 = *result;
    if (v4)
    {
      do
      {
        v5 = *(_QWORD *)(v4 + 24);
        word_data_free_all((uint64_t **)v4, a2);
        v4 = v5;
      }
      while (v5);
    }
    return heap_Free(a2, v3);
  }
  return result;
}

uint64_t *box_hash_free(_QWORD *a1, _QWORD *a2)
{
  uint64_t i;
  uint64_t *result;
  uint64_t *v6;

  for (i = 0; i != 4000; ++i)
  {
    result = *(uint64_t **)(*a1 + 8 * i);
    if (result)
    {
      do
      {
        v6 = (uint64_t *)result[2];
        box_one_free_all(result, a2);
        result = v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t box_hash_set_unknown(uint64_t *a1, int a2, char *__b)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 >= 1)
    memset_pattern16(__b, &unk_1DEC660C0, 4 * a2);
  v5 = *((_DWORD *)a1 + 2);
  if (v5 >= 1)
  {
    v6 = 0;
    v7 = *a1;
    do
    {
      v8 = *(_QWORD *)(v7 + 8 * v6);
      if (v8)
      {
        do
        {
          if (*(_QWORD *)v8 && (*(__int16 *)(v8 + 10) & 0x80000000) == 0)
            bzero(&__b[4 * *(__int16 *)(v8 + 8)], 4 * *(unsigned __int16 *)(v8 + 10) + 4);
          v8 = *(_QWORD *)(v8 + 16);
        }
        while (v8);
        v5 = *((_DWORD *)a1 + 2);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  return 1;
}

uint64_t box_hash_add_word(_QWORD *a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  __int16 v7;
  __int16 v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;

  v7 = a4;
  v8 = a3;
  v11 = *(_QWORD *)(*a1 + 8 * a5);
  if (v11)
  {
    while (1)
    {
      v12 = v11;
      if (*(__int16 *)(v11 + 10) == a4 && *(__int16 *)(v11 + 8) == a3)
        break;
      v11 = *(_QWORD *)(v11 + 16);
      if (!v11)
        goto LABEL_7;
    }
    result = v11;
    goto LABEL_13;
  }
  v12 = 0;
LABEL_7:
  result = heap_Alloc(a6, 24);
  if (result)
  {
    *(_WORD *)(result + 8) = v8;
    *(_WORD *)(result + 10) = v7;
    *(_WORD *)(result + 12) = 0;
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 16) = 0;
    if (v12)
      v14 = (uint64_t *)(v12 + 16);
    else
      v14 = (uint64_t *)(*a1 + 8 * a5);
    *v14 = result;
LABEL_13:
    v15 = 0;
    v16 = (_QWORD *)result;
    do
    {
      v17 = v15;
      v15 = *v16;
      v16 = (_QWORD *)(*v16 + 24);
    }
    while (v15);
    v18 = (_QWORD *)(v17 + 24);
    if (!v17)
      v18 = (_QWORD *)result;
    *v18 = a2;
    return 1;
  }
  return result;
}

uint64_t add_info_to_table(uint64_t a1, int a2, int a3, uint64_t **a4, _QWORD *a5, uint64_t *a6, uint64_t a7, _QWORD *a8)
{
  uint64_t number_of_symbol;
  uint64_t v17;
  int address;
  uint64_t leading_word;
  uint64_t *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  char __s1[64];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (mbs2sjis(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 0, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 8), (uint64_t)__s1, 64) == -1)return 0;
  number_of_symbol = get_number_of_symbol(a4, __s1);
  if (number_of_symbol == -1)
  {
    free_information((uint64_t *)a1, a8);
    attribute_free_all(a6, a8);
    return 1;
  }
  v17 = number_of_symbol;
  address = box_hash_get_address(a2, a3);
  if (*(_DWORD *)(a7 + 40) == 1)
  {
    leading_word = box_hash_get_leading_word(a5, a2, a3, address);
    if (leading_word)
    {
      v20 = (uint64_t *)leading_word;
      while (mbs_compare(*(uint64_t **)(a1 + 8), *(_QWORD *)(*v20 + 8))
           || mbs_compare(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(*(_QWORD *)(*v20 + 16) + 8))|| !compare_attribute((uint64_t)a6, v20[2]))
      {
        v20 = (uint64_t *)v20[3];
        if (!v20)
          goto LABEL_10;
      }
      *(_QWORD *)(a1 + 24) = 0;
      v23 = *v20;
      for (i = *(_QWORD *)(*v20 + 24); i; i = *(_QWORD *)(i + 24))
        v23 = i;
      *(_QWORD *)(v23 + 24) = a1;
      return 1;
    }
  }
LABEL_10:
  result = heap_Alloc((uint64_t)a8, 32);
  if (result)
  {
    v22 = result;
    *(_QWORD *)result = a1;
    *(_QWORD *)(result + 8) = v17;
    *(_QWORD *)(result + 16) = a6;
    *(_QWORD *)(result + 24) = 0;
    result = box_hash_add_word(a5, result, a2, a3, address, (uint64_t)a8);
    if ((_DWORD)result != 1)
    {
      heap_Free(a8, v22);
      return 0;
    }
  }
  return result;
}

uint64_t get_char_kind(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[256];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = mbs2sjis(a1, a2, 1, (uint64_t)v3, 256);
  if ((_DWORD)result != -1)
    return get_char_kind_hash(v3[0], v3[1]);
  return result;
}

uint64_t *unknown_info_create(const char *a1, const char *a2, const char *a3, const char *a4, _QWORD *a5)
{
  uint64_t *info;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  info = (uint64_t *)create_info(0, a1, a5);
  if (info)
  {
    v10 = create_info(1, a2, a5);
    info[2] = v10;
    if (!v10)
      goto LABEL_6;
    v11 = v10;
    *(_QWORD *)(v10 + 16) = 0;
    v12 = create_info(2, a3, a5);
    *(_QWORD *)(v11 + 16) = v12;
    if (!v12)
      goto LABEL_6;
    v13 = v12;
    *(_QWORD *)(v12 + 16) = 0;
    v14 = create_info(3, a4, a5);
    *(_QWORD *)(v13 + 16) = v14;
    if (v14)
    {
      *(_QWORD *)(v14 + 16) = 0;
    }
    else
    {
LABEL_6:
      free_information(info, a5);
      return 0;
    }
  }
  return info;
}

_BYTE *get_pron_from_grapheme(uint64_t a1, uint64_t a2, int a3, int a4, _QWORD *a5)
{
  int v5;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v25;

  v5 = a3 - a2;
  if (a3 < (int)a2)
    return 0;
  v10 = v5 + 1;
  v11 = heap_Alloc((uint64_t)a5, (2 * (v5 + 1)) | 1u);
  if (!v11)
    return 0;
  v12 = (unsigned __int8 *)v11;
  v13 = 8 * v10;
  if (a4 == 3)
    v14 = v13 | 2u;
  else
    v14 = v13 | 1u;
  v15 = (_BYTE *)heap_Alloc((uint64_t)a5, v14);
  if (v15)
  {
    if (mbs2sjis(a1, a2, v10, (uint64_t)v12, (2 * v10) | 1u) != -1)
    {
      v25 = 0;
      *v15 = 0;
      if (*v12)
      {
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v21 = v12;
        do
        {
          get_pron_from_grapheme_hash(v21, &v15[v19], (int *)&v25 + 1, &v25, a4);
          if (HIDWORD(v25))
          {
            v20 += HIDWORD(v25);
            v19 += v25;
            v16 = v17;
            v17 = v18;
            v18 = v19;
          }
          v21 = &v12[v20];
        }
        while (*v21);
        if (a4 == 3 && v16 >= 1)
        {
          if (v19 >= v16)
          {
            v22 = v19;
            do
              v15[v22 + 1] = v15[v22];
            while (v22-- > v16);
          }
          v15[v16] = 39;
        }
      }
      goto LABEL_20;
    }
    heap_Free(a5, (uint64_t)v15);
    heap_Free(a5, (uint64_t)v12);
    return 0;
  }
LABEL_20:
  heap_Free(a5, (uint64_t)v12);
  return v15;
}

uint64_t non_lookup_tag(uint64_t a1, uint64_t a2, int a3, const char *a4, const char *a5, uint64_t **a6, _QWORD *a7, uint64_t a8, _QWORD *a9)
{
  int v9;
  uint64_t result;
  const char *v16;
  uint64_t *v17;
  int v18;

  v9 = a3 - a2;
  if (a3 < (int)a2)
    return 0;
  result = heap_Alloc((uint64_t)a9, (2 * (v9 + 1)) | 1u);
  if (result)
  {
    v16 = (const char *)result;
    if (mbs2sjis(a1, a2, v9 + 1, result, (2 * (v9 + 1)) | 1u) == -1)
    {
      heap_Free(a9, (uint64_t)v16);
    }
    else
    {
      v17 = unknown_info_create(v16, a4, a5, "922", a9);
      heap_Free(a9, (uint64_t)v16);
      if (v17)
      {
        if (*(_BYTE *)(a8 + 68))
          v18 = a2 + 1;
        else
          v18 = a2;
        if (add_info_to_table((uint64_t)v17, v18, v9, a6, a7, 0, a8, a9))
          return 1;
        free_information(v17, a9);
      }
    }
    return 0;
  }
  return result;
}

uint64_t look_up_unknown_word(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t *a4, _QWORD *a5)
{
  unsigned int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *(_DWORD *)(a1 + 8);
  if (*(_BYTE *)(a2 + 68))
    v10 = v9 + 1;
  else
    v10 = v9;
  v11 = (char *)heap_Calloc(a5, v10, 4);
  if (v11 && box_hash_set_unknown(a4, v10, v11))
  {
    if ((int)v10 >= 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = (v10 - 1);
      do
      {
        if (v12 == v14)
        {
          v15 = *(_DWORD *)&v11[4 * v14];
        }
        else
        {
          v16 = v12 + 1;
          v15 = *(_DWORD *)&v11[4 * v12];
          if (*(_DWORD *)&v11[4 * v12 + 4] == v15)
            goto LABEL_14;
        }
        if (v15 == 1
          && !non_lookup_tag(a1, v13 - (*(_BYTE *)(a2 + 68) != 0), v12 - (*(_BYTE *)(a2 + 68) != 0), (const char *)(a2 + 136), (const char *)(a2 + 200), a3, a4, a2, a5))
        {
          goto LABEL_16;
        }
        v16 = v12 + 1;
        v13 = v12 + 1;
LABEL_14:
        v12 = v16;
      }
      while (v16 != v10);
    }
    v17 = 1;
  }
  else
  {
LABEL_16:
    v17 = 0;
  }
  heap_Free(a5, (uint64_t)v11);
  return v17;
}

uint64_t mbs_normalize(uint64_t result)
{
  _QWORD *v1;
  int v2;
  int v3;
  _BYTE *v4;
  int v5;
  char **v6;
  char **v7;
  int v8;
  _BYTE **v9;
  _BYTE *v10;
  unsigned int v11;
  char **v12;
  char *v13;
  int v14;
  char **v15;
  char *v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 **v19;
  char **i;
  char *v21;
  char *v22;

  if (result)
  {
    v1 = (_QWORD *)result;
    v2 = *(_DWORD *)(result + 8);
    result = 1;
    if (v2 >= 1)
    {
      while (1)
      {
        v3 = v2 - 1;
        v4 = (_BYTE *)(*v1 + 4 * (v2 - 1));
        v5 = v4[1];
        if (*v4 == 1)
        {
          if ((v5 & 0xFE) == 0xDE)
          {
            if (v5 == 222)
              v6 = Norm_in1;
            else
              v6 = (char **)&Norm_in2;
            if (v5 == 222)
              v7 = (char **)&Norm_out1;
            else
              v7 = Norm_out2;
            if (v2 == 1)
              return 1;
            if (*(v4 - 4) == 1)
            {
              v8 = **v6;
              if (**v6)
              {
                v9 = v6 + 1;
                while (v8 != *(v4 - 3))
                {
                  v10 = *v9++;
                  v8 = *v10;
                  ++v7;
                  if (!*v10)
                    goto LABEL_51;
                }
LABEL_48:
                *v4 = 0;
                *(v4 - 4) = 2;
                v21 = *v7;
                *(v4 - 3) = **v7;
                *(v4 - 2) = v21[1];
                v3 = v2 - 2;
              }
            }
          }
          else if ((v5 + 90) <= 0x37u)
          {
            v17 = 0;
            v18 = -79;
            while (v5 != v18)
            {
              v18 = *Norm_in3[++v17];
              if (v17 == 56)
                goto LABEL_51;
            }
            *v4 = 2;
            v22 = Norm_out3[v17];
            v4[1] = *v22;
            v4[2] = v22[1];
          }
        }
        else
        {
          v11 = v4[2];
          if (v5 == 129 && (v11 & 0xFE) == 0x4A)
          {
            if (v11 == 74)
              v12 = Norm_in4;
            else
              v12 = Norm_in5;
            if (v11 == 74)
              v7 = (char **)&Norm_out4;
            else
              v7 = Norm_out5;
            if (v2 == 1)
              return 1;
            if (*(v4 - 4) == 2)
            {
              v13 = *v12;
              v14 = **v12;
              if (**v12)
              {
                v15 = v12 + 1;
                while (v14 != *(v4 - 3) || v13[1] != *(v4 - 2))
                {
                  v16 = *v15++;
                  v13 = v16;
                  v14 = *v16;
                  ++v7;
                  if (!*v16)
                    goto LABEL_51;
                }
                goto LABEL_48;
              }
            }
          }
          else if (v5 == 130 && v11 >= 0x60 && v11 <= 0x9A)
          {
            v19 = (unsigned __int8 **)&Norm_in6;
            for (i = Norm_out6; ; ++i)
            {
              if (**v19 == 130)
              {
                if ((*v19)[1] == v11)
                {
                  *v4 = 1;
                  v4[1] = **i;
                  break;
                }
              }
              else if (!**v19)
              {
                break;
              }
              ++v19;
            }
          }
        }
LABEL_51:
        v2 = v3;
        if (v3 <= 0)
          return 1;
      }
    }
  }
  return result;
}

_QWORD *modify_comma(void *a1, int a2, _QWORD *a3)
{
  size_t v6;
  _QWORD *result;
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  char v20;

  v6 = a2;
  result = (_QWORD *)heap_Alloc((uint64_t)a3, a2);
  if (result)
  {
    v8 = result;
    memcpy(result, a1, v6);
    if (a2 >= 1)
    {
      v9 = 0;
      v10 = -1;
      do
      {
        v11 = v10;
        if (v10 >= 4uLL)
          v11 = 4;
        if (v10 >= 4)
          v12 = 4;
        else
          v12 = v10;
        if (!*((_BYTE *)a1 + v9))
        {
          if (v9)
          {
            v13 = 0;
            v14 = v11 + 1;
            v15 = v12 + 1;
            v16 = v10;
            while (*((_BYTE *)a1 + v16) == 1)
            {
              ++v13;
              --v16;
              if (v14 == v13)
              {
                v17 = v13 + 1;
                goto LABEL_17;
              }
            }
            v17 = v13 + 1;
            v15 = v13;
          }
          else
          {
            v15 = 0;
            v16 = -1;
            v17 = 1;
          }
LABEL_17:
          v18 = 0;
          v19 = 1;
          while (v9 + v19 < v6)
          {
            if (*((_BYTE *)a1 + v9 + v19) != 1)
            {
              v18 = v19 - 1;
              break;
            }
            ++v18;
            if ((_DWORD)++v19 == 6)
            {
              v18 = 5;
              break;
            }
          }
          if (v15 <= 4
            && (v15 > 2
             || v15 && ((v16 & 0x80000000) != 0 || v9 == v17 || *((_BYTE *)a1 + v16) || *((_BYTE *)a1 + v16 - 1) != 1))
            && (v18 - 3) < 2)
          {
            v20 = 1;
          }
          else
          {
            v20 = -1;
          }
          v8[v9] = v20;
        }
        ++v9;
        ++v10;
      }
      while (v9 != v6);
    }
    memcpy(a1, v8, v6);
    return heap_Free(a3, (uint64_t)v8);
  }
  return result;
}

uint64_t mark_tag_state(uint64_t a1, uint64_t a2)
{
  int v3;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BYTE *v10;
  void *v11;
  int v12;
  uint64_t result;

  if (!a2)
    return 0;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 < 1)
    return 1;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 36;
  do
  {
    v9 = v7;
    if (v8 == 36 || v8 == 33)
    {
      v7 += 4;
      if (v7 <= v3 && compare_tag(a1, v9, START_TAG_SAPI_PRN) == 1)
      {
        v10 = (_BYTE *)(a2 + v9);
        v8 = 34;
        *v10 = 34;
        v11 = v10 + 1;
        v12 = v9 + 2;
        if (v7 > v9 + 2)
          v12 = v7;
        memset(v11, 35, (v12 - v9 - 2) + 1);
        v5 = 1;
        goto LABEL_13;
      }
      if (mbs_one_char((_QWORD *)a1, v9) == 30)
      {
        v7 = v9 + 1;
        v8 = 34;
        *(_BYTE *)(a2 + v9) = 34;
LABEL_13:
        v6 = v9;
        goto LABEL_23;
      }
      v8 = 33;
    }
    else
    {
      if (v5 == 1)
      {
        v7 += 4;
        if (v7 <= v3 && compare_tag(a1, v9, END_TAG_SAPI_PRN) == 1)
        {
          v5 = 0;
          *(_DWORD *)(a2 + v9) = 606282531;
          v8 = 36;
          goto LABEL_23;
        }
      }
      if (mbs_one_char((_QWORD *)a1, v9) == 31)
      {
        v7 = v9 + 1;
        v8 = 36;
        *(_BYTE *)(a2 + v9) = 36;
        goto LABEL_23;
      }
      v8 = 35;
    }
    *(_BYTE *)(a2 + v9) = v8;
    v7 = v9 + 1;
LABEL_23:
    v3 = *(_DWORD *)(a1 + 8);
  }
  while (v7 < v3);
  result = 1;
  if ((v8 & 0xFFFFFFFE) == 0x22 && v6 < v7)
  {
    memset((void *)(a2 + v6), 33, (v7 + ~v6) + 1);
    return 1;
  }
  return result;
}

uint64_t look_up_dictionary(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t **a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int16 a10, uint64_t a11, uint64_t a12, int a13, _DWORD *a14)
{
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t pron_from_grapheme;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t info;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t j;
  uint64_t v41;
  uint64_t v42;
  char v43;
  int char_kind;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t **v59;
  int v60;
  uint64_t v61;
  int v62;
  BOOL v63;
  char v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  const char *v72;
  char *v73;
  uint64_t v74;
  int v75;
  size_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  unint64_t v101;
  const char *v102;
  unint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  const char *MarkerArgStr;
  int v122;
  const char *v123;
  int v124;
  int v125;
  uint64_t v126;
  unsigned __int16 v127;
  int v128;
  int v129;
  unsigned int *v130;
  unint64_t v131;
  const char *v132;
  int v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int16 v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  uint64_t v144;
  _QWORD *v145;
  const char *v146;
  _QWORD *v147;
  uint64_t *v148;
  uint64_t v149;
  int v150;
  int v151;
  unsigned __int16 v152;
  int v153;
  size_t v154;
  int v155;
  unsigned __int16 v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unsigned __int16 v160;
  char v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *__s;
  _DWORD *v167;
  _DWORD *v168;
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t **v177;
  char *__s1;
  int __s1a;
  uint64_t *__s1b;
  char *__s1c;
  char *__s1d;
  uint64_t v185;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  unsigned __int8 v193;
  const char *v194;
  uint64_t v195[2];
  _QWORD v196[2];
  const char *v197;
  _BYTE v198[936];
  _BYTE v199[80];
  char v200;
  _BYTE v201[79];
  char v202[80];
  uint64_t v203;

  v18 = a14;
  v203 = *MEMORY[0x1E0C80C00];
  v195[0] = 0;
  v195[1] = 0;
  v194 = 0;
  v193 = 0;
  v191 = 0;
  v192 = 0;
  __s1 = (char *)marker_getMarkerArgStr(1u);
  v189 = *(_QWORD *)(a8 + 184);
  v190 = *(_OWORD *)(a8 + 192);
  LOWORD(v191) = *(_WORD *)(a8 + 208);
  HIDWORD(v191) = *(_DWORD *)(a8 + 212);
  bzero(v196, 0x3C0uLL);
  v19 = heap_Alloc(*(_QWORD *)(a8 + 24), 1024);
  v20 = heap_Alloc(*(_QWORD *)(a8 + 24), 1025);
  v21 = heap_Alloc(*(_QWORD *)(a8 + 24), 1025);
  v22 = 0;
  LODWORD(pron_from_grapheme) = 0;
  v187 = v21;
  v188 = v20;
  if (!v19 || !v20)
  {
    v24 = 0;
    v25 = 0;
    goto LABEL_25;
  }
  v176 = a6;
  v177 = a5;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  if (!v21)
    goto LABEL_26;
  v185 = v19;
  for (i = 0; i != 120; ++i)
  {
    v28 = heap_Alloc(*(_QWORD *)(a8 + 24), 80);
    v196[i] = v28;
    if (!v28)
    {
      LODWORD(pron_from_grapheme) = 0;
      v22 = 0;
      v24 = 0;
      v25 = 0;
LABEL_22:
      v26 = 0;
      goto LABEL_23;
    }
  }
  v25 = heap_Alloc(*(_QWORD *)(a8 + 24), *(unsigned int *)(a2 + 8));
  v24 = heap_Alloc(*(_QWORD *)(a8 + 24), *(unsigned int *)(a2 + 8));
  v29 = heap_Alloc(*(_QWORD *)(a8 + 24), *(unsigned int *)(a2 + 8));
  v22 = v29;
  LODWORD(pron_from_grapheme) = 0;
  if (!v25)
  {
    v26 = 0;
    goto LABEL_23;
  }
  if (!v24 || !v29)
  {
LABEL_25:
    v26 = 0;
    goto LABEL_26;
  }
  if (!mark_tag_state(a2, v25))
  {
    LODWORD(pron_from_grapheme) = 0;
    v26 = 0;
    goto LABEL_26;
  }
  v30 = a3;
  v169 = (const char *)(a3 + 68);
  if (!*(_BYTE *)(a3 + 68))
    goto LABEL_17;
  info = create_info(0, &byte_1DEBD87CE, *(_QWORD **)(a8 + 24));
  if (!info)
    goto LABEL_186;
  v32 = (uint64_t *)info;
  v33 = create_info(1, v169, *(_QWORD **)(a8 + 24));
  pron_from_grapheme = v33;
  v32[2] = v33;
  if (!v33)
  {
    free_information(v32, *(_QWORD **)(a8 + 24));
    goto LABEL_22;
  }
  v167 = a14;
  *(_QWORD *)(v33 + 16) = 0;
  v34 = create_info(2, " ", *(_QWORD **)(a8 + 24));
  *(_QWORD *)(pron_from_grapheme + 16) = v34;
  if (!v34
    || (v35 = v34,
        *(_QWORD *)(v34 + 16) = 0,
        v36 = create_info(3, "0", *(_QWORD **)(a8 + 24)),
        (*(_QWORD *)(v35 + 16) = v36) == 0))
  {
    free_information(v32, *(_QWORD **)(a8 + 24));
    goto LABEL_47;
  }
  *(_QWORD *)(v36 + 16) = 0;
  v30 = a3;
  v18 = a14;
  if (!add_info_to_table((uint64_t)v32, 0, 0, v177, v176, 0, a3, *(_QWORD **)(a8 + 24)))
  {
    free_information(v32, *(_QWORD **)(a8 + 24));
LABEL_186:
    LODWORD(pron_from_grapheme) = 0;
    goto LABEL_22;
  }
LABEL_17:
  LODWORD(v37) = *(_DWORD *)(a2 + 8);
  if ((int)v37 < 1)
  {
    v19 = v185;
  }
  else
  {
    v38 = 0;
    v19 = v185;
    do
    {
      *(_BYTE *)(v24 + v38) = 0;
      *(_BYTE *)(v22 + v38++) = 0;
      v37 = *(int *)(a2 + 8);
    }
    while (v38 < v37);
  }
  if (*(_DWORD *)(v30 + 132) == 1)
  {
    v26 = heap_Alloc(*(_QWORD *)(a8 + 24), v37);
    if (!v26)
    {
      LODWORD(pron_from_grapheme) = 0;
      goto LABEL_26;
    }
    LODWORD(v41) = *(_DWORD *)(a2 + 8);
    if ((int)v41 >= 1)
    {
      v42 = 0;
      do
      {
        if (*(_BYTE *)(v25 + v42) != 33 || *(_BYTE *)(v24 + v42) == 1 || *(_BYTE *)(v22 + v42) == 1)
        {
          v43 = -2;
        }
        else
        {
          char_kind = get_char_kind(a2, v42);
          if (char_kind == 4)
            v43 = -1;
          else
            v43 = char_kind;
        }
        *(_BYTE *)(v26 + v42++) = v43;
        v41 = *(int *)(a2 + 8);
      }
      while (v42 < v41);
    }
    modify_comma((void *)v26, v41, *(_QWORD **)(a8 + 24));
    v45 = *(_DWORD *)(a2 + 8);
    if (v45 >= 1)
    {
      v167 = v18;
      v46 = 0;
      v47 = 0;
      while (1)
      {
        if (v46 == v45 - 1)
        {
          v48 = *(unsigned __int8 *)(v26 + v46);
        }
        else
        {
          v49 = v46 + 1;
          v50 = *(unsigned __int8 *)(v26 + v46 + 1);
          v48 = *(unsigned __int8 *)(v26 + v46);
          if (v50 == v48)
          {
            v51 = v46 - v47;
            if ((v50 != 1 || v51 <= 30) && ((v50 & 0xFE) != 2 || v51 <= 14))
              goto LABEL_70;
LABEL_66:
            pron_from_grapheme = (uint64_t)get_pron_from_grapheme(a2, v47, v46, (char)v50, *(_QWORD **)(a8 + 24));
            if (!pron_from_grapheme)
            {
              heap_Free(*(_QWORD **)(a8 + 24), v26);
              goto LABEL_48;
            }
            v54 = non_lookup_tag(a2, v47, v46, Dtype[*(char *)(v26 + v46)], (const char *)pron_from_grapheme, v177, v176, a3, *(_QWORD **)(a8 + 24));
            v55 = *(_QWORD **)(a8 + 24);
            if (!v54)
            {
              heap_Free(v55, v26);
              heap_Free(*(_QWORD **)(a8 + 24), pron_from_grapheme);
LABEL_47:
              LODWORD(pron_from_grapheme) = 0;
LABEL_48:
              v26 = 0;
              v18 = v167;
LABEL_23:
              v19 = v185;
              goto LABEL_26;
            }
            heap_Free(v55, pron_from_grapheme);
            v45 = *(_DWORD *)(a2 + 8);
            goto LABEL_69;
          }
        }
        LOBYTE(v50) = v48;
        if (v48 <= 0xFD)
          goto LABEL_66;
LABEL_69:
        v49 = v46 + 1;
        v47 = v46 + 1;
LABEL_70:
        v46 = v49;
        if (v49 >= v45)
        {
          v18 = v167;
          break;
        }
      }
    }
    v19 = v185;
  }
  else
  {
    v26 = 0;
  }
  heap_Free(*(_QWORD **)(a8 + 24), v26);
  if ((mbs_copy((uint64_t)v195, (_QWORD *)a2, 0, *(_DWORD *)(a2 + 8), *(_QWORD **)(a8 + 24)) & 0x80000000) != 0)
  {
    LODWORD(pron_from_grapheme) = 0;
    v26 = 0;
    goto LABEL_249;
  }
  v56 = a13;
  if (a13 != 1)
  {
    mbs_normalize((uint64_t)v195);
    __s = 0;
    v57 = 0;
    LOWORD(v58) = 0;
    goto LABEL_76;
  }
  if (a10)
  {
    v114 = 0;
    v115 = a11;
    v116 = (unsigned int *)(a9 + 40);
    v117 = __s1;
    while (*(v116 - 2) <= *(_DWORD *)(a11 + 32))
    {
      if (*(v116 - 5) == 21)
        v117 = (char *)(*(_QWORD *)(a12 + 8) + *v116);
      v116 += 16;
      if (a10 == ++v114)
      {
        __s1 = v117;
        LODWORD(v114) = a10;
        goto LABEL_191;
      }
    }
    __s1 = v117;
    LODWORD(v114) = (unsigned __int16)v114;
LABEL_191:
    v162 = v114;
  }
  else
  {
    v162 = 0;
    v115 = a11;
  }
  v26 = 2350915594;
  v120 = *(_QWORD **)(a8 + 24);
  MarkerArgStr = marker_getMarkerArgStr(1u);
  v122 = strlen(MarkerArgStr);
  pron_from_grapheme = heap_Calloc(v120, 1, (v122 + 1));
  if (!pron_from_grapheme)
  {
    v19 = v185;
    goto LABEL_249;
  }
  v123 = marker_getMarkerArgStr(1u);
  __s = (char *)pron_from_grapheme;
  strcpy((char *)pron_from_grapheme, v123);
  mbs_normalize((uint64_t)v195);
  v124 = *(_DWORD *)(v115 + 32);
  v125 = *(_DWORD *)(a9 + 32);
  v126 = heap_Calloc(*(_QWORD **)(a8 + 24), 1, 264);
  if (!v126)
  {
    LODWORD(pron_from_grapheme) = 0;
    v19 = v185;
    goto LABEL_246;
  }
  v57 = v126;
  v127 = v124 - v125;
  if (v162 >= a10)
  {
    LODWORD(v58) = 0;
    v60 = *(_DWORD *)(a2 + 8);
    v132 = __s1;
    if (v60 > 0)
    {
      v168 = v18;
      LOWORD(v60) = 2 * v60;
      v138 = v124 - v125;
      v56 = 1;
      v59 = v177;
      goto LABEL_224;
    }
    v19 = v185;
    v56 = 1;
    v59 = v177;
  }
  else
  {
    v168 = v18;
    v164 = 0;
    v128 = (unsigned __int16)(v124 - v125);
    v129 = *(_DWORD *)(a9 + 32);
    v130 = (unsigned int *)(a9 + ((unint64_t)v162 << 6) + 40);
    v131 = a10 - (unint64_t)v162;
    v156 = 10;
    v152 = v127;
    v153 = v127;
    v160 = v127;
    v132 = __s1;
    do
    {
      v133 = *(v130 - 2);
      if (v128 + 2 * *(_DWORD *)(a2 + 8) < (unsigned __int16)(v133 - v129))
        break;
      if (*(v130 - 5) == 21)
      {
        v173 = v129;
        v174 = v57;
        v163 = *v130;
        v158 = *(_QWORD *)(a12 + 8);
        __s1c = (char *)v132;
        if (!strcmp(v132, (const char *)(v158 + v163)))
        {
          v57 = v174;
          v132 = __s1c;
          v128 = v153;
          v129 = v173;
        }
        else
        {
          v134 = v164;
          v57 = v174;
          v129 = v173;
          if ((unsigned __int16)v164 >= v156)
          {
            v136 = heap_Realloc(*(uint64_t **)(a8 + 24), v174, 24 * v156 + 264);
            if (!v136)
              goto LABEL_242;
            v156 += 10;
            v135 = *(_QWORD *)(a12 + 8);
            v133 = *(v130 - 2);
            v57 = v136;
            v129 = *(_DWORD *)(a9 + 32);
            v134 = v164;
            v128 = v153;
          }
          else
          {
            v128 = v153;
            v135 = v158;
          }
          v137 = v57 + 24 * (unsigned __int16)v134;
          *(_QWORD *)v137 = __s1c;
          v132 = (const char *)(v135 + v163);
          *(_QWORD *)(v137 + 8) = v135 + v163;
          *(_WORD *)(v137 + 16) = v160;
          v160 = v133 - v129;
          *(_WORD *)(v137 + 18) = v133 - v129;
          v164 = (v134 + 1);
        }
      }
      v130 += 16;
      --v131;
    }
    while (v131);
    v60 = *(_DWORD *)(a2 + 8);
    if (v128 + 2 * v60 <= v160)
    {
      v56 = 1;
      v59 = v177;
      v58 = v164;
    }
    else
    {
      LODWORD(v58) = v164;
      v19 = v185;
      if ((unsigned __int16)v164 >= v156)
      {
        v139 = v132;
        v174 = v57;
        v140 = heap_Realloc(*(uint64_t **)(a8 + 24), v57, 24 * v156 + 264);
        if (!v140)
          goto LABEL_218;
        v60 = 2 * *(_DWORD *)(a2 + 8);
        v57 = v140;
        v56 = 1;
        v59 = v177;
        v132 = v139;
        LODWORD(v58) = v164;
      }
      else
      {
        LOWORD(v60) = 2 * v60;
        v56 = 1;
        v59 = v177;
      }
      v127 = v152;
      v138 = v160;
LABEL_224:
      v141 = v57 + 24 * (unsigned __int16)v58;
      *(_QWORD *)v141 = v132;
      *(_QWORD *)(v141 + 8) = 0;
      *(_WORD *)(v141 + 16) = v138;
      *(_WORD *)(v141 + 18) = v60 + v127;
      v58 = (v58 + 1);
    }
    if ((_WORD)v58)
    {
      v142 = 0;
      v143 = (unsigned __int16)v58;
      v175 = v57;
      do
      {
        v144 = v142 + 1;
        if ((int)v144 < v143 && (v145 = (_QWORD *)(v57 + 24 * v144), (v146 = (const char *)v145[1]) != 0))
        {
          v165 = v58;
          __s1d = (char *)(v57 + 24 * v142);
          if (!strcmp(*(const char **)__s1d, v146))
          {
            memmove(__s1d, v145, (int)(24 * (v143 + (~(_WORD)v142 | 0xFFFF0000))));
            v58 = (v165 - 1);
            v56 = 1;
            v57 = v175;
          }
          else
          {
            ++v142;
            v56 = 1;
            v57 = v175;
            v58 = v165;
          }
        }
        else
        {
          ++v142;
          v56 = 1;
        }
        v143 = (unsigned __int16)v58;
      }
      while (v142 < (unsigned __int16)v58);
      v18 = v168;
      v19 = v185;
LABEL_76:
      v59 = v177;
    }
    else
    {
      LOWORD(v58) = 0;
      v18 = v168;
      v19 = v185;
    }
    v60 = *(_DWORD *)(a2 + 8);
  }
  v174 = v57;
  if (v60 < 1)
  {
LABEL_181:
    if (!*(_BYTE *)(a3 + 136) || look_up_unknown_word(a2, a3, v59, v176, *(_QWORD **)(a8 + 24)))
    {
      v26 = 0;
      LODWORD(pron_from_grapheme) = 1;
      goto LABEL_244;
    }
    goto LABEL_216;
  }
  v61 = 0;
  v62 = a4;
  if ((_WORD)v58)
    v63 = v56 == 1;
  else
    v63 = 0;
  v64 = !v63;
  v161 = v64;
  v157 = 24 * (unsigned __int16)v58;
  v172 = 1;
  v168 = v18;
  while (1)
  {
    v200 = 0;
    if (v62 >= 1)
      break;
LABEL_169:
    if (++v61 >= v60)
      goto LABEL_181;
  }
  v65 = 0;
  v170 = (4 * v61);
  v171 = v61;
  v159 = 2 * v61;
  v66 = 1;
  while (2)
  {
    v67 = v66 + v61;
    if (v66 + (int)v61 > *(_DWORD *)(a2 + 8)
      || (v68 = v67 - 1, *(_BYTE *)(v25 + v68) != 33)
      || *(_BYTE *)(v24 + v68) == 1
      || *(_BYTE *)(v22 + v68) == 1)
    {
      v18 = v168;
      goto LABEL_168;
    }
    __s1a = v65;
    v69 = v61;
    if (mbs2sjis(a2, v61, v66, (uint64_t)v202, 80) == -1
      || (v70 = v69, v71 = v66, mbs2sjis((uint64_t)v195, v70, v66, (uint64_t)v199, 80) == -1))
    {
      v26 = 0;
LABEL_218:
      LODWORD(pron_from_grapheme) = 0;
      v18 = v168;
      goto LABEL_244;
    }
    if (!*(_BYTE *)(v195[0] + v170))
    {
      v18 = v168;
      v61 = v171;
LABEL_168:
      v60 = *(_DWORD *)(a2 + 8);
      v59 = v177;
      v62 = a4;
      goto LABEL_169;
    }
    v72 = __s;
    if (a13 != 1)
      v72 = "normal";
    if ((v161 & 1) != 0)
    {
      v73 = (char *)v72;
      v18 = v168;
    }
    else
    {
      v74 = 0;
      v75 = 2 * v67;
      v18 = v168;
      while (v159 < *(unsigned __int16 *)(v174 + v74 + 16) || v75 > *(unsigned __int16 *)(v174 + v74 + 18))
      {
        v74 += 24;
        if (v157 == v74)
        {
          v19 = v185;
          v73 = __s;
          goto LABEL_109;
        }
      }
      v154 = strlen(__s);
      v76 = strlen(*(const char **)(v174 + v74));
      if (v154 >= v76)
      {
        v77 = __s;
      }
      else
      {
        v77 = (char *)heap_Realloc(*(uint64_t **)(a8 + 24), (uint64_t)__s, (v76 + 1));
        if (!v77)
        {
          LODWORD(pron_from_grapheme) = 0;
          v26 = 2350915594;
          v19 = v185;
          v149 = v174;
          goto LABEL_245;
        }
      }
      v73 = strcpy(v77, *(const char **)(v174 + v74));
      v19 = v185;
    }
LABEL_109:
    __s = v73;
    v78 = lookup_JPARSER((uint64_t)&v189, (uint64_t)v199, &v194, &v193, v73);
    if (v78 == -1)
    {
      if (!__s1a)
      {
        v65 = 0;
        ++v66;
LABEL_163:
        v61 = v171;
LABEL_164:
        if (v66 < 0 || v66 > a4)
          goto LABEL_168;
        continue;
      }
      v61 = v171;
      v84 = v201[v172++];
      if (!v84)
        goto LABEL_168;
      v66 = v84 - 48;
LABEL_161:
      v65 = 1;
      goto LABEL_164;
    }
    break;
  }
  CopyOutput_JPARSER(v196, 120, v194, v78, v193);
  if (__s1a)
  {
    v61 = v171;
    v83 = v172 + 1;
    if (v201[v83 - 1])
      v66 = v201[v83 - 1] - 48;
    else
      v66 = a4 + 1;
LABEL_114:
    v172 = v83;
  }
  else
  {
    v83 = 0;
    v85 = v196[0];
    v61 = v171;
    while (*(_BYTE *)(v196[0] + v83) && *(_BYTE *)(v196[0] + v83) != 44)
      ++v83;
    v200 = *(_BYTE *)(v196[0] + v83);
    if (v200)
    {
      v86 = 0;
      do
      {
        v87 = *(unsigned __int8 *)(v85 + v83 + 1 + v86);
        v201[v86++] = v87;
      }
      while (v87);
      if ((_DWORD)v86)
      {
        v66 = v201[0] - 48;
        *(_BYTE *)(v85 + v83) = 0;
        LODWORD(v83) = 1;
        goto LABEL_114;
      }
    }
    v172 = 1;
    v66 = a4 + 1;
  }
  if (!*(_BYTE *)v196[0])
    goto LABEL_161;
  if (*v169)
    v88 = v61 + 1;
  else
    v88 = v61;
  v155 = v88;
  if (!v202[0])
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(a1 + 216), 52003, "%s%s%s%s", v79, v80, v81, v82, "empty field");
    LODWORD(pron_from_grapheme) = 0;
    v26 = 2350915584;
    goto LABEL_244;
  }
  v89 = create_info(0, v202, *(_QWORD **)(a8 + 24));
  if (!v89)
  {
LABEL_216:
    v26 = 0;
    LODWORD(pron_from_grapheme) = 0;
    goto LABEL_244;
  }
  v150 = v66;
  v94 = 0;
  v151 = v71 - 1;
  *(_QWORD *)(v89 + 16) = 0;
  __s1b = (uint64_t *)v89;
  v95 = v89;
  do
  {
    v96 = (const char *)v196[v94];
    if (!v96 || !*v96)
    {
      v118 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
      v119 = *(_QWORD *)(a1 + 216);
LABEL_188:
      log_OutPublic(v118, v119, 52003, "%s%s%s%s", v90, v91, v92, v93, "empty field");
      free_information(__s1b, *(_QWORD **)(a8 + 24));
LABEL_189:
      LODWORD(pron_from_grapheme) = 0;
      v26 = 2350915584;
      goto LABEL_243;
    }
    v97 = create_info((v94 + 1), v96, *(_QWORD **)(a8 + 24));
    v26 = v97;
    *(_QWORD *)(v95 + 16) = v97;
    if (!v97)
    {
      free_information(__s1b, *(_QWORD **)(a8 + 24));
      goto LABEL_242;
    }
    *(_QWORD *)(v97 + 16) = 0;
    ++v94;
    v95 = v97;
  }
  while (v94 != 2);
  if (*v197)
  {
    v98 = create_info(3, v197, *(_QWORD **)(a8 + 24));
    *(_QWORD *)(v26 + 16) = v98;
    if (!v98)
    {
LABEL_237:
      v147 = *(_QWORD **)(a8 + 24);
      v148 = __s1b;
      goto LABEL_240;
    }
    *(_QWORD *)(v98 + 16) = 0;
    v26 = v98;
  }
  v99 = 0;
  v100 = 4;
  v101 = 3;
  while (2)
  {
    v102 = *(const char **)&v198[v99];
    if (*v102 || **(_BYTE **)&v198[v99 + 8])
    {
      v103 = 24 * (v101 / 3);
      if ((_DWORD)v103 - 24 == (_DWORD)v99)
      {
        v104 = v100;
        if (!add_info_to_table((uint64_t)__s1b, v155, v151, v177, v176, 0, a3, *(_QWORD **)(a8 + 24)))
        {
          v147 = *(_QWORD **)(a8 + 24);
          v148 = __s1b;
          goto LABEL_240;
        }
        if (!v202[0])
        {
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(a1 + 216), 52003, "%s%s%s%s", v105, v106, v107, v108, "empty field");
          goto LABEL_189;
        }
        v109 = create_info(0, v202, *(_QWORD **)(a8 + 24));
        if (!v109)
          goto LABEL_241;
        *(_QWORD *)(v109 + 16) = 0;
        v102 = *(const char **)&v198[v99];
        __s1b = (uint64_t *)v109;
        v26 = v109;
        v100 = v104;
        if (!v102)
        {
LABEL_236:
          v118 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
          v119 = *(_QWORD *)(a1 + 216);
          goto LABEL_188;
        }
LABEL_154:
        if (!*v102)
          goto LABEL_236;
        v110 = v100;
        v112 = v100 - 3 * (v101 / 3);
        v111 = *(_QWORD **)(a8 + 24);
LABEL_156:
        v113 = create_info(v112, v102, v111);
        *(_QWORD *)(v26 + 16) = v113;
        if (!v113)
          goto LABEL_237;
        v100 = v110;
        *(_QWORD *)(v113 + 16) = 0;
        v26 = v113;
      }
      else
      {
        if ((_DWORD)v103 - 8 != (_DWORD)v99)
          goto LABEL_154;
        if (*v102)
        {
          v110 = v100;
          v111 = *(_QWORD **)(a8 + 24);
          v112 = 3;
          goto LABEL_156;
        }
      }
      ++v101;
      v99 += 8;
      ++v100;
      if (v99 == 928)
        break;
      continue;
    }
    break;
  }
  if (add_info_to_table((uint64_t)__s1b, v155, v151, v177, v176, 0, a3, *(_QWORD **)(a8 + 24)))
  {
    v65 = 1;
    v66 = v150;
    v18 = v168;
    v19 = v185;
    goto LABEL_163;
  }
  v147 = *(_QWORD **)(a8 + 24);
  v148 = __s1b;
LABEL_240:
  free_information(v148, v147);
LABEL_241:
  v26 = 0;
LABEL_242:
  LODWORD(pron_from_grapheme) = 0;
LABEL_243:
  v18 = v168;
  v19 = v185;
LABEL_244:
  v149 = v174;
  if (v174)
LABEL_245:
    heap_Free(*(_QWORD **)(a8 + 24), v149);
LABEL_246:
  if (a13 == 1 && __s)
    heap_Free(*(_QWORD **)(a8 + 24), (uint64_t)__s);
LABEL_249:
  mbs_free(v195, *(_QWORD **)(a8 + 24));
LABEL_26:
  heap_Free(*(_QWORD **)(a8 + 24), v25);
  heap_Free(*(_QWORD **)(a8 + 24), v24);
  heap_Free(*(_QWORD **)(a8 + 24), v22);
  heap_Free(*(_QWORD **)(a8 + 24), v19);
  heap_Free(*(_QWORD **)(a8 + 24), v188);
  heap_Free(*(_QWORD **)(a8 + 24), v187);
  for (j = 0; j != 120; ++j)
    heap_Free(*(_QWORD **)(a8 + 24), v196[j]);
  *v18 = pron_from_grapheme;
  return v26;
}

uint64_t sapi_prn_tag_conv_replace(uint64_t a1, char *__s, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v20;
  uint64_t v21;
  char *v22;
  int v23;
  uint64_t v24;
  uint64_t v27;
  uint64_t v28;
  char __sa[1024];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  v28 = 0;
  v6 = strlen(__s);
  v7 = mbs_create((uint64_t)&v27, v6, __s, *(_QWORD **)(a3 + 24));
  if ((v7 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) = 0;
    v8 = heap_Alloc(*(_QWORD *)(a3 + 24), v28);
    if (!v8)
    {
      v7 = 2350915594;
      goto LABEL_49;
    }
    if (!mark_tag_state((uint64_t)&v27, v8))
    {
      v7 = 2350915601;
      goto LABEL_49;
    }
    if ((int)v28 < 1)
      goto LABEL_49;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = mbs_one_char(&v27, v10);
      if (v11 <= 0x20 && ((1 << v11) & 0x100002400) != 0)
      {
        v7 = mbs_add_str(a1, (uint64_t)&v27, v10, 1, 0, *(uint64_t **)(a3 + 24));
        if ((v7 & 0x80000000) == 0)
          goto LABEL_11;
        goto LABEL_49;
      }
      if ((int)v10 + 15 >= (int)v28)
        v13 = v28 - v10;
      else
        v13 = 16;
      if (v13 < 1)
        goto LABEL_42;
      v14 = 0;
      v15 = v13 + 1;
      while (mbs_one_char(&v27, (int)v10 + v14) != 30)
      {
        if (v13 == ++v14)
          goto LABEL_22;
      }
      v15 = v14 + 1;
LABEL_22:
      v16 = v15 - 1;
      if (v15 <= 1)
      {
LABEL_30:
        v17 = v16;
      }
      else
      {
        v17 = 0;
        while (1)
        {
          v18 = mbs_one_char(&v27, (int)v10 + v17);
          if (v18 <= 0x20 && ((1 << v18) & 0x100002400) != 0)
            break;
          if (v16 == ++v17)
            goto LABEL_30;
        }
      }
      if (v17 < 1)
      {
LABEL_42:
        v24 = v9;
LABEL_43:
        v7 = mbs_add_str(a1, (uint64_t)&v27, v10, 1, 0, *(uint64_t **)(a3 + 24));
        v9 = v24;
        if ((v7 & 0x80000000) == 0)
          goto LABEL_11;
        goto LABEL_49;
      }
      while (1)
      {
        if (mbs2sjis((uint64_t)&v27, v10, v17, (uint64_t)__sa, 1000) == -1)
        {
          v7 = 2350915840;
          goto LABEL_49;
        }
        v20 = strlen(__sa);
        if (v20 >= 1)
        {
          v21 = v20;
          v22 = __sa;
          while (1)
          {
            v23 = *v22++;
            if ((v23 & 0xFFFFFFDF) - 91 < 0xFFFFFFE6)
              goto LABEL_39;
            if (!--v21)
              goto LABEL_45;
          }
        }
        if ((_DWORD)v9 == 1)
          break;
LABEL_39:
        LODWORD(v9) = 0;
        v24 = 0;
        if (v17-- < 2)
          goto LABEL_43;
      }
LABEL_45:
      v7 = mbs_add_str(a1, (uint64_t)&v27, v10, v17, 0, *(uint64_t **)(a3 + 24));
      if ((v7 & 0x80000000) != 0)
        goto LABEL_49;
      LODWORD(v10) = v10 - 1 + v17;
      v9 = 1;
LABEL_11:
      v10 = (v10 + 1);
      if ((int)v10 >= (int)v28)
      {
LABEL_49:
        heap_Free(*(_QWORD **)(a3 + 24), v8);
        mbs_free(&v27, *(_QWORD **)(a3 + 24));
        return v7;
      }
    }
  }
  return v7;
}

uint64_t jparser_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v7 = 0;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    v5 = heap_Calloc(*(_QWORD **)(v7 + 8), 1, 8);
    if (v5)
    {
      v6 = (_QWORD *)v5;
      result = 0;
      *v6 = *(_QWORD *)(v7 + 8);
      *(_QWORD *)a3 = v6;
      *(_DWORD *)(a3 + 8) = 19024;
    }
    else
    {
      return 2350915594;
    }
  }
  return result;
}

uint64_t jparser_ClassClose(_QWORD **a1, int a2)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 19024, 8) & 0x80000000) != 0)
    return 2350915592;
  if (a1)
    heap_Free(*a1, (uint64_t)a1);
  return 0;
}

uint64_t jparser_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, int a10, uint64_t a11)
{
  uint64_t inited;
  uint64_t v20;
  int v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t number_of_symbol;
  uint64_t v28;
  char *j;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;

  v34 = 0;
  inited = InitRsrcFunction(a1, a2, &v34);
  if ((inited & 0x80000000) != 0)
    return inited;
  v20 = 2350915840;
  if ((safeh_HandleCheck(a3, a4, 19024, 8) & 0x80000000) != 0)
    return 2350915592;
  v21 = 0;
  for (i = 0; i != 1; ++i)
  {
    v23 = *(_QWORD *)(get_a_rule(i) + 72);
    if (v23 > v21)
      v21 = v23;
  }
  if (v21)
    return 2350907394;
  v24 = heap_Alloc(*(_QWORD *)(v34 + 8), 232);
  if (!v24)
    return 2350915594;
  v25 = v24;
  *(_OWORD *)v24 = 0u;
  *(_OWORD *)(v24 + 16) = 0u;
  *(_OWORD *)(v24 + 192) = 0u;
  *(_OWORD *)(v24 + 208) = 0u;
  *(_QWORD *)(v24 + 224) = 0;
  *(_OWORD *)(v24 + 160) = 0u;
  *(_OWORD *)(v24 + 176) = 0u;
  *(_OWORD *)(v24 + 128) = 0u;
  *(_OWORD *)(v24 + 144) = 0u;
  *(_OWORD *)(v24 + 96) = 0u;
  *(_OWORD *)(v24 + 112) = 0u;
  *(_OWORD *)(v24 + 64) = 0u;
  *(_OWORD *)(v24 + 80) = 0u;
  *(_OWORD *)(v24 + 32) = 0u;
  *(_OWORD *)(v24 + 48) = 0u;
  *(_QWORD *)(v24 + 8) = a1;
  *(_QWORD *)(v24 + 16) = a2;
  v26 = v34;
  *(_QWORD *)(v24 + 24) = *(_QWORD *)(v34 + 8);
  *(_QWORD *)(v24 + 32) = v26;
  *(_QWORD *)(v24 + 216) = a11;
  *(_QWORD *)(v24 + 184) = a6;
  *(_QWORD *)(v24 + 192) = a7;
  *(_QWORD *)(v24 + 200) = a8;
  *(_WORD *)(v24 + 208) = a9;
  *(_DWORD *)(v24 + 212) = a10;
  *(_QWORD *)(v24 + 48) = get_number_of_symbol((uint64_t **)&SF_symbol_file, "SENTENCE");
  number_of_symbol = get_number_of_symbol((uint64_t **)&SF_symbol_file, &byte_1EA94373C);
  *(_QWORD *)(v25 + 56) = number_of_symbol;
  if ((number_of_symbol & 0x8000000000000000) == 0)
  {
    v28 = 0;
    for (j = (char *)&unk_1EA943AC8; ; j += 64)
    {
      v30 = get_number_of_symbol((uint64_t **)&SF_symbol_file, j - 664);
      *(_QWORD *)(v25 + v28 + 64) = v30;
      if (v30 == -1)
        break;
      v31 = get_number_of_symbol((uint64_t **)&SF_symbol_file, j);
      *(_QWORD *)(v25 + v28 + 144) = v31;
      if (v31 == -1)
        break;
      v32 = get_number_of_symbol((uint64_t **)&SF_symbol_file, j - 344);
      *(_QWORD *)(v25 + v28 + 104) = v32;
      if (v32 == -1)
        break;
      v28 += 8;
      if (v28 == 24)
      {
        v20 = 0;
        *a5 = v25;
        return v20;
      }
    }
  }
  heap_Free(*(_QWORD **)(v34 + 8), v25);
  return v20;
}

uint64_t jparser_ObjClose(uint64_t *a1)
{
  uint64_t result;

  result = 2350915592;
  if (a1)
  {
    if (*a1)
    {
      heap_Free(*(_QWORD **)(*a1 + 24), *a1);
      result = 0;
      *a1 = 0;
    }
  }
  return result;
}

uint64_t jparser_Parse(uint64_t a1, char *a2, uint64_t a3, _QWORD *a4, int a5, uint64_t a6, uint64_t a7, unsigned __int16 a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v11;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v31[14];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[2];

  v33 = 0;
  v11 = 2350915592;
  if (a1)
  {
    *(_QWORD *)(a1 + 224) = a6;
    v34[0] = 0;
    v34[1] = 0;
    v17 = *(_OWORD *)(a1 + 208);
    v31[12] = *(_OWORD *)(a1 + 192);
    v31[13] = v17;
    v32 = a6;
    v18 = *(_OWORD *)(a1 + 144);
    v31[8] = *(_OWORD *)(a1 + 128);
    v31[9] = v18;
    v19 = *(_OWORD *)(a1 + 176);
    v31[10] = *(_OWORD *)(a1 + 160);
    v31[11] = v19;
    v20 = *(_OWORD *)(a1 + 80);
    v31[4] = *(_OWORD *)(a1 + 64);
    v31[5] = v20;
    v21 = *(_OWORD *)(a1 + 112);
    v31[6] = *(_OWORD *)(a1 + 96);
    v31[7] = v21;
    v22 = *(_OWORD *)(a1 + 16);
    v31[0] = *(_OWORD *)a1;
    v31[1] = v22;
    v23 = *(_OWORD *)(a1 + 48);
    v31[2] = *(_OWORD *)(a1 + 32);
    v31[3] = v23;
    v24 = sapi_prn_tag_conv_replace((uint64_t)v34, a2, (uint64_t)v31);
    if ((v24 & 0x80000000) != 0)
    {
      v28 = v24;
      mbs_free(v34, *(_QWORD **)(a1 + 24));
      return v28;
    }
    else
    {
      v25 = iso_parse_fdp_bas(a1, (uint64_t)&Inifile_global, (uint64_t)v34, CT_connection_table, a5, &v33, a7, a8, a9, a10, a11);
      if ((v25 & 0x80000000) != 0)
      {
        v29 = v25;
        mbs_free(v34, *(_QWORD **)(a1 + 24));
        return v29;
      }
      else
      {
        v26 = v33;
        mbs_free(v34, *(_QWORD **)(a1 + 24));
        if (v26)
        {
          v27 = v33;
          if (*(_DWORD *)v33 == 1)
          {
            *a4 = *(_QWORD *)(v33 + 8);
            heap_Free(*(_QWORD **)(a1 + 24), v27);
            return 0;
          }
          else
          {
            heap_Free(*(_QWORD **)(a1 + 24), v33);
            return 2350915840;
          }
        }
        else
        {
          return 2350915594;
        }
      }
    }
  }
  return v11;
}

uint64_t jparser_FreeTree(uint64_t a1, _QWORD **a2)
{
  if (a1)
    return jpe_FreeTree(*a2, *(_QWORD **)(a1 + 24));
  else
    return 2350915592;
}

uint64_t jpj_sysdct_CharLookup(uint64_t a1, uint64_t a2, uint64_t a3, char *__s, uint64_t a5, unsigned int a6, int a7)
{
  void *v13;
  _BYTE *v14;
  unsigned __int16 v15;
  unsigned int v16;
  __int16 v17;
  int v18;
  size_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  int v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  char *v37;
  unsigned __int16 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int16 v44;
  size_t v45;
  void *v46;
  const char *v47;
  size_t v48;
  char *v49;
  const char *v50;
  char *v51;
  unsigned __int16 v52;
  unsigned int v53;
  const char *v54;
  const char *v55;
  int v57;
  char *__sa;
  unsigned __int16 v59;
  uint64_t v60;
  unsigned __int8 __c[17];
  int64x2_t v62;
  unsigned __int8 v63[66];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  __c[0] = 0;
  v60 = 0;
  v59 = 0;
  *(_DWORD *)a5 = 0;
  *(_OWORD *)(a5 + 4) = 0u;
  v13 = (void *)(a5 + 4);
  *(_OWORD *)(a5 + 20) = 0u;
  *(_OWORD *)(a5 + 36) = 0u;
  *(_OWORD *)(a5 + 52) = 0u;
  *(_BYTE *)(a5 + 68) = 0;
  *(_WORD *)(a5 + 70) = 0;
  *(_OWORD *)(a5 + 76) = 0u;
  v14 = (_BYTE *)(a5 + 76);
  *(_DWORD *)(a5 + 72) = 0;
  *(_OWORD *)(a5 + 92) = 0u;
  *(_OWORD *)(a5 + 108) = 0u;
  *(_OWORD *)(a5 + 124) = 0u;
  *(_OWORD *)(a5 + 140) = 0u;
  *(_OWORD *)(a5 + 156) = 0u;
  *(_OWORD *)(a5 + 172) = 0u;
  *(_OWORD *)(a5 + 188) = 0u;
  *(_OWORD *)(a5 + 204) = 0u;
  *(_OWORD *)(a5 + 220) = 0u;
  *(_OWORD *)(a5 + 236) = 0u;
  *(_OWORD *)(a5 + 252) = 0u;
  *(_BYTE *)(a5 + 332) = 0;
  *(_OWORD *)(a5 + 268) = 0u;
  *(_OWORD *)(a5 + 284) = 0u;
  *(_OWORD *)(a5 + 300) = 0u;
  *(_OWORD *)(a5 + 316) = 0u;
  *(_WORD *)(a5 + 334) = 0;
  v15 = strlen(__s);
  if ((v15 & 0xFFC0) != 0)
    v16 = 64;
  else
    v16 = v15;
  __memmove_chk();
  v63[v16] = 0;
  if (!v16)
  {
    v18 = 0;
    do
    {
      v19 = (unsigned __int16)v18;
      v20 = __s[(unsigned __int16)v18++];
    }
    while (v20 == 32);
    memmove(v13, __s, v19);
    return 0;
  }
  if (v16 > a6)
    v63[a6] = 0;
  if (v63[0] > 0x7Eu)
  {
    v17 = 2;
    *(_DWORD *)a5 = 2;
    *(_WORD *)(a5 + 4) = *(_WORD *)v63;
    *(_BYTE *)(a5 + 6) = 0;
  }
  else
  {
    *(_DWORD *)a5 = 3;
    *(_BYTE *)(a5 + 4) = v63[0];
    *(_BYTE *)(a5 + 5) = 0;
    v17 = 1;
  }
  *(_WORD *)(a5 + 70) = v17;
  if (!*(_DWORD *)(a3 + 28))
  {
    *(_QWORD *)&__c[1] = 0;
    v29 = lookup_JPARSER(a3, (uint64_t)v13, (const char **)&__c[1], __c, "normal");
    if (v29 != -1)
    {
      v30 = v29;
      memmove(v14, *(const void **)&__c[1], v29);
      *(_BYTE *)(a5 + v30 + 76) = 0;
      *(_WORD *)(a5 + 334) = v30;
      v31 = strchr(v14, __c[0]);
      if (v31)
      {
        *v31 = 0;
        v36 = v31 + 1;
        v37 = strchr(v31 + 1, __c[0]);
        if (v37)
        {
          *v37 = 0;
          v38 = strlen(v36);
          *(_WORD *)(a5 + 334) = v38;
          memmove(v14, v36, v38);
          *(_BYTE *)(a5 + *(unsigned __int16 *)(a5 + 334) + 76) = 0;
LABEL_27:
          v21 = 0;
          goto LABEL_28;
        }
        v40 = 1812;
      }
      else
      {
        v40 = 1813;
      }
      v21 = 2350915584;
      v41 = *(_QWORD *)(a1 + 32);
      v42 = a2;
      goto LABEL_41;
    }
    *(_DWORD *)a5 = 0;
    goto LABEL_27;
  }
  v59 = 0;
  v21 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, void *, uint64_t *, unsigned __int16 *, unsigned __int8 *))(*(_QWORD *)a3 + 96))(*(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16), "char", v13, &v60, &v59, __c);
  if ((v21 & 0x80000000) != 0 || !v59)
    goto LABEL_37;
  __sa = 0;
  v57 = 0;
  *(_OWORD *)&__c[1] = 0u;
  v62 = 0u;
  getDictSolutionJPJ(v59, v60, __c[0], (const char **)&__sa, (_WORD *)&v57 + 1, "normal", 4, &v57, (__int128 *)&__c[1]);
  v26 = *(const char **)&__c[9];
  v55 = (const char *)v62.i64[0];
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)&__c[1]), (int32x4_t)vceqzq_s64(v62)))) & 1) != 0
    || !HIWORD(v57))
  {
    log_OutPublic(*(_QWORD *)(a1 + 32), a2, 1817, 0, v22, v23, v24, v25, v53);
    *(_DWORD *)a5 = 0;
  }
  else
  {
    v28 = 1;
    if (**(_BYTE **)&__c[1])
    {
      v54 = *(const char **)&__c[9];
      v27 = strcmp(*(const char **)&__c[1], "1");
      v26 = v54;
      if (v27)
        v28 = 0;
    }
    if (*v26)
    {
      v39 = strcmp(v26, "1");
      if (a7 == 1)
      {
        if (v39)
          goto LABEL_37;
      }
    }
    if (v28)
    {
      if (*__sa == __c[0])
      {
LABEL_37:
        *(_DWORD *)a5 = 0;
        return v21;
      }
      v48 = strlen(__sa);
      memmove(v14, __sa, v48);
      *(_BYTE *)(a5 + v48 + 76) = 0;
      *(_WORD *)(a5 + 334) = v48;
      v49 = strchr(v14, __c[0]);
      if (v49)
      {
        *v49 = 0;
        v50 = v49 + 1;
        v51 = strchr(v49 + 1, __c[0]);
        if (v51)
        {
          *v51 = 0;
          v52 = strlen(v50);
          *(_WORD *)(a5 + 334) = v52;
          v45 = v52;
          v46 = v14;
          v47 = v50;
          goto LABEL_48;
        }
        v21 = 2350915584;
        v41 = *(_QWORD *)(a1 + 32);
        v42 = a2;
        v40 = 1812;
      }
      else
      {
        v21 = 2350915584;
        v41 = *(_QWORD *)(a1 + 32);
        v42 = a2;
        v40 = 1813;
      }
LABEL_41:
      log_OutPublic(v41, v42, v40, 0, v32, v33, v34, v35, v53);
      return v21;
    }
    if (*v55)
    {
      v44 = strlen(v55);
      *(_WORD *)(a5 + 334) = v44;
      v45 = v44;
      v46 = v14;
      v47 = v55;
LABEL_48:
      memmove(v46, v47, v45);
      *(_BYTE *)(a5 + *(unsigned __int16 *)(a5 + 334) + 76) = 0;
    }
  }
LABEL_28:
  if (*(_DWORD *)a5 && *v14 == 35)
  {
    *(_BYTE *)(a5 + 76) = atoi((const char *)(a5 + 77));
    *(_BYTE *)(a5 + 77) = 0;
    *(_WORD *)(a5 + 334) = 1;
  }
  return v21;
}

uint64_t DoJPJSpell(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v16;
  unsigned __int16 i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  char *v23;
  char *v24;
  unsigned __int16 v25;
  __int16 v26;
  _OWORD v29[21];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a5)
    return 0;
  v16 = 0;
  for (i = 0; i < a5; v16 = i)
  {
    memset(v29, 0, sizeof(v29));
    v21 = jpj_sysdct_CharLookup(a1, a2, a3, (char *)(a4 + i), (uint64_t)v29, 0x16u, a11);
    if ((v21 & 0x80000000) != 0)
      break;
    if ((LODWORD(v29[0]) - 2) > 3)
    {
      log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] (utoi position %d len %d not in dict", v18, v19, v20, v16);
    }
    else
    {
      v22 = (unsigned __int16)(strlen((const char *)&v29[4] + 12) + 3);
      v23 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), v22);
      if (!v23)
        return 2350915594;
      v24 = v23;
      bzero(v23, v22);
      if (i)
      {
        strcpy(v24, (const char *)&v29[4] + 12);
      }
      else
      {
        *(_WORD *)v24 = 32;
        strcat(v24, (const char *)&v29[4] + 12);
      }
      *(_WORD *)&v24[strlen(v24)] = 32;
      v25 = strlen(v24);
      v21 = bed_Insert(a6, v24, v25);
      if ((v21 & 0x80000000) != 0)
      {
        heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v24);
        return v21;
      }
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v24);
    }
    v26 = strlen((const char *)v29 + 4);
    if (v26)
      i += v26;
    else
      i = a5;
  }
  return v21;
}

uint64_t DoJPJLatin(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, char **a5)
{
  uint64_t v7;
  int v8;
  char *v9;
  _OWORD v11[21];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  memset(v11, 0, sizeof(v11));
  v7 = jpj_sysdct_CharLookup(a1, a2, a3, a4, (uint64_t)v11, 0x16u, 0);
  if (!(_DWORD)v7)
  {
    v8 = strlen((const char *)&v11[4] + 12);
    v9 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), (v8 + 3));
    *a5 = v9;
    if (v9)
      strcpy(v9, (const char *)&v11[4] + 12);
  }
  return v7;
}

size_t getDictSolutionJPJ(unsigned int a1, uint64_t a2, int a3, const char **a4, _WORD *a5, const char *a6, int a7, _WORD *a8, __int128 *a9)
{
  __int128 *v11;
  uint64_t v14;
  char *v15;
  __int16 v16;
  BOOL v17;
  _BOOL4 v18;
  char *v19;
  int v20;
  int v21;
  unsigned __int16 v22;
  unsigned __int16 v23;
  char *v24;
  __int128 *v25;
  __int128 v26;
  size_t result;
  _WORD *v28;
  const char **v29;
  __int16 v30;
  unsigned __int16 v31;
  _BOOL4 v32;
  unint64_t v33;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v11 = a9;
  v41 = *MEMORY[0x1E0C80C00];
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  if (!a1)
  {
    LOWORD(v14) = 0;
    v23 = 0;
    v25 = &v39;
    goto LABEL_40;
  }
  v28 = a8;
  v29 = a4;
  v30 = 0;
  v14 = 0;
  v31 = 0;
  v32 = a7 != 0;
  v33 = a1;
  while (1)
  {
    v35 = 0u;
    v36 = 0u;
    v15 = *(char **)(a2 + 8 * v14);
    v16 = strlen(v15);
    *a5 = v16;
    if (v16)
      v17 = a7 == 0;
    else
      v17 = 1;
    if (!v17)
    {
      v21 = 0;
      v22 = 0;
      v23 = 0;
      while (1)
      {
        v24 = *(char **)(a2 + 8 * v14);
        if (!*((_QWORD *)&v35 + v22))
          *((_QWORD *)&v35 + v22) = &v24[v23];
        if (a7 == 1 && !v23 && *v24 != a3)
          break;
        if (v24[v23] == a3)
        {
          ++v22;
          v24[v23] = 0;
        }
        ++v23;
        if (v21)
          goto LABEL_30;
        if (v22 + 1 == a7)
        {
          v15 = (char *)(*(_QWORD *)(a2 + 8 * v14) + v23);
LABEL_30:
          v21 = 1;
          goto LABEL_31;
        }
        v21 = 0;
LABEL_31:
        v18 = a7 != v22;
        if ((unsigned __int16)*a5 <= v23 || a7 == v22)
          goto LABEL_9;
      }
      v23 = 1;
      goto LABEL_30;
    }
    v23 = 0;
    v18 = v32;
LABEL_9:
    if (v18)
      *a5 = 0;
    if (*v15)
      break;
    v39 = v35;
    v40 = v36;
    v30 = v14;
    v31 = v23;
LABEL_36:
    if (++v14 >= v33)
    {
      v25 = &v39;
      v11 = a9;
      a4 = v29;
      a8 = v28;
      LOWORD(v14) = v30;
      v23 = v31;
      goto LABEL_40;
    }
  }
  v19 = strchr(v15, 44);
  while (1)
  {
    if (v19)
      *v19 = 0;
    if (!strcmp(v15, a6))
      break;
    if (v19)
    {
      v20 = v19[1];
      v15 = v19 + 1;
      v19 = strchr(v19 + 1, 44);
      if (v20)
        continue;
    }
    goto LABEL_36;
  }
  v37 = v35;
  v38 = v36;
  v25 = &v37;
  v11 = a9;
  a4 = v29;
  a8 = v28;
LABEL_40:
  *a8 = v14;
  *a4 = (const char *)(*(_QWORD *)(a2 + 8 * (unsigned __int16)v14) + v23);
  v26 = v25[1];
  *v11 = *v25;
  v11[1] = v26;
  result = strlen(*a4);
  *a5 = result;
  return result;
}

uint64_t lookup_JPARSER(uint64_t a1, uint64_t a2, const char **a3, unsigned __int8 *a4, const char *a5)
{
  int v10;
  uint64_t result;
  int v12;
  __int16 v13;
  unsigned __int16 v14;
  const char **v15;
  unsigned __int16 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  v14 = 0;
  if (*(_DWORD *)(a1 + 28))
  {
    v16 = 0;
    if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t, const char ***, unsigned __int16 *, unsigned __int8 *, _QWORD))(*(_QWORD *)a1 + 152))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), "word", a2, &v15, &v16, a4, *(unsigned __int8 *)(a1 + 24)) & 0x80000000) == 0&& v16)
    {
      v17 = 0u;
      v18 = 0u;
      getDictSolutionJPJ(v16, (uint64_t)v15, *a4, a3, &v14, a5, 1, &v13, &v17);
      return v14;
    }
    if (*(_DWORD *)(a1 + 28) == 1)
    {
      v16 = 0;
      v12 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t, const char ***, unsigned __int16 *, unsigned __int8 *))(*(_QWORD *)a1 + 96))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), "char", a2, &v15, &v16, a4);
      result = -1;
      if ((v12 & 0x80000000) == 0 && v16)
      {
        v17 = 0u;
        v18 = 0u;
        getDictSolutionJPJ(v16, (uint64_t)v15, *a4, a3, &v14, a5, 4, &v13, &v17);
        return v14;
      }
    }
    else
    {
      return -1;
    }
  }
  else
  {
    v16 = -1;
    v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t, const char ***, unsigned __int16 *, unsigned __int8 *, _QWORD))(*(_QWORD *)a1 + 152))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), "word", a2, &v15, &v16, a4, *(unsigned __int8 *)(a1 + 24));
    result = -1;
    if ((v10 & 0x80000000) == 0 && v16 == 1)
    {
      LOWORD(result) = strlen(*v15);
      *a3 = *v15;
      return (unsigned __int16)result;
    }
  }
  return result;
}

uint64_t FillFields(uint64_t result, unsigned int a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  int v6;
  _BYTE **i;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t j;
  _BYTE *v12;

  if (a2)
  {
    v5 = 0;
    v6 = 0;
    for (i = (_BYTE **)(result + 8); ; ++i)
    {
      v8 = (a4 - v6);
      if (a4 <= v6)
        break;
      v9 = 0;
      while (1)
      {
        v10 = *(unsigned __int8 *)(a3 + v6 + v9);
        if (v10 == a5)
          break;
        *(_BYTE *)(*(_QWORD *)(result + 8 * v5) + v9++) = v10;
        if (v8 == v9)
          goto LABEL_11;
      }
      *(_BYTE *)(*(_QWORD *)(result + 8 * v5) + v9) = 0;
      v6 += v9 + 1;
      if (++v5 == a2)
        return result;
    }
    v8 = 0;
LABEL_11:
    *(_BYTE *)(*(_QWORD *)(result + 8 * (unsigned __int16)v5) + v8) = 0;
    for (j = 1; j != 5; ++j)
    {
      if (v5 + j >= (unint64_t)a2)
        break;
      v12 = *i++;
      *v12 = 0;
    }
  }
  return result;
}

uint64_t virtual_fseek(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t result;

  switch(a4)
  {
    case 0:
      goto LABEL_6;
    case 1:
      a3 += *a2;
      goto LABEL_6;
    case 2:
      a3 = *(_QWORD *)(a1 + 8) + ~a3;
LABEL_6:
      result = 0;
      *a2 = a3;
      return result;
  }
  return 0xFFFFFFFFLL;
}

uint64_t virtual_getc(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *a2;
  if (*a2 < 0 || v2 >= a1[1])
    return 0xFFFFFFFFLL;
  result = *(unsigned __int8 *)(*a1 + v2);
  *a2 = v2 + 1;
  return result;
}

uint64_t xcode_Utf16leToWin932(uint64_t a1, unsigned __int16 *a2, unsigned int a3, uint64_t a4, _WORD *a5, uint64_t a6)
{
  uint64_t v6;
  unsigned __int16 *v10;
  int v12;
  uint64_t v13;
  unsigned int v14;

  v6 = 2370838535;
  if (a2 && a4 && a5)
  {
    if (a3)
    {
      v10 = a2;
      v12 = 0;
      v13 = a3;
      while ((unsigned __int16)*a5 > (unsigned __int16)v12)
      {
        v14 = *v10++;
        v12 += XLIT_chUnicodeWideToSJIS(v14, (char *)(a4 + (unsigned __int16)v12), a1, a6);
        if (!--v13)
          goto LABEL_10;
      }
      return 2370838537;
    }
    else
    {
      LOWORD(v12) = 0;
LABEL_10:
      v6 = 0;
      *a5 = v12;
    }
  }
  return v6;
}

_QWORD *mas_list_insert(_QWORD *result, _QWORD *a2)
{
  if (result)
  {
    if (a2)
    {
      if (result[5] <= a2[5])
        a2[1] = mas_list_insert();
      else
        a2[2] = mas_list_insert();
      return a2;
    }
    else
    {
      result[1] = 0;
      result[2] = 0;
    }
  }
  return result;
}

uint64_t lattice_word_print_all(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t appended;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t i;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  char v33[16];
  char __s[64];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  appended = ssftstring_Reserve(a3, 64);
  if ((appended & 0x80000000) != 0)
    return appended;
  v15 = ssftstring_Clear(a3);
  if ((v15 & 0x80000000) == 0 && a5 >= -1)
  {
    v16 = 0;
    v30 = (a5 + 2);
    v31 = a4;
    while (1)
    {
      log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"[FDP] x=%d", v12, v13, v14, v16);
      v17 = *(_QWORD *)(a4 + 8 * v16);
      if (v17)
        break;
LABEL_25:
      ++v16;
      a4 = v31;
      if (v16 == v30)
        return v15;
    }
    v18 = 0;
    while (1)
    {
      v19 = 560;
      if (a6 == 1)
        v19 = 552;
      v20 = *(_QWORD *)(v17 + v19);
      __sprintf_chk(__s, 0, 0x40uLL, "[FDP] (%3d,%3d,%3d)", v16, *(_DWORD *)(v17 + 580), v18);
      appended = ssftstring_AssignCStr(a3, __s);
      if ((appended & 0x80000000) != 0)
        return appended;
      v21 = *(uint64_t **)v17;
      if (*(_QWORD *)v17)
      {
        for (i = *v21; i; i = *(_QWORD *)(i + 16))
        {
          appended = ssftstring_AppendCStr(a3, *(char **)i);
          if ((appended & 0x80000000) != 0)
            return appended;
          appended = ssftstring_AppendCStr(a3, ":");
          if ((appended & 0x80000000) != 0)
            return appended;
          appended = log_mbs_fput_sjis(a3, *(int **)(i + 8));
          if ((appended & 0x80000000) != 0)
            return appended;
          appended = ssftstring_AppendCStr(a3, " ");
          if ((appended & 0x80000000) != 0)
            return appended;
        }
      }
      else
      {
        if (*(_DWORD *)(v17 + 568) == 1)
          v23 = "<_START>";
        else
          v23 = "<_END>";
        appended = ssftstring_AppendCStr(a3, v23);
        if ((appended & 0x80000000) != 0)
          return appended;
      }
      strcpy(__s, "cost_h = ");
      LH_itoa(*(_DWORD *)(v17 + 8), v33, 0xAu);
      __strcat_chk();
      __strcat_chk();
      LH_itoa(*(_DWORD *)(v17 + 16), v33, 0xAu);
      __strcat_chk();
      appended = ssftstring_AppendCStr(a3, __s);
      if ((appended & 0x80000000) != 0)
        return appended;
      v24 = *(_QWORD *)(a1 + 32);
      v25 = ssftstring_CStr(a3);
      log_OutText(v24, a2, 5, 0, (uint64_t)"%s", v26, v27, v28, v25);
      v15 = ssftstring_Clear(a3);
      if ((v15 & 0x80000000) != 0)
        return v15;
      ++v18;
      v17 = v20;
      if (!v20)
        goto LABEL_25;
    }
  }
  return v15;
}

_QWORD *lattice_word_free_all(_QWORD *result, int a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 >= -1)
  {
    v4 = result;
    v5 = 0;
    v6 = (a2 + 2);
    do
    {
      v7 = v4[v5];
      if (v7)
      {
        do
        {
          v8 = *(_QWORD *)(v7 + 552);
          result = heap_Free(a3, v7);
          v7 = v8;
        }
        while (v8);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return result;
}

uint64_t add_to_lattice(_DWORD *a1, uint64_t a2, uint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, _QWORD *a10)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  char *v32;
  const char *v33;

  v10 = a2;
  if (!a2)
  {
    v18 = heap_Alloc((uint64_t)a10, 584);
    v10 = v18;
    if (!v18)
      return v10;
    *(_DWORD *)(v18 + 544) = 0;
    *(_QWORD *)(v18 + 536) = 0;
    *(_QWORD *)(v18 + 8) = 0;
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)(v18 + 552) = 0;
    *(_QWORD *)(v18 + 568) = 0;
    *(_QWORD *)(v18 + 560) = 0;
    *(_QWORD *)v18 = a3;
    if (a3)
    {
      v19 = *a3;
      if (!*a3)
        return 0;
      while (strcmp(*(const char **)v19, "WCOST"))
      {
        v19 = *(_QWORD *)(v19 + 16);
        if (!v19)
          return 0;
      }
      v31 = mbs_len_bytes(*(_QWORD *)(v19 + 8)) + 1;
      v32 = (char *)heap_Alloc((uint64_t)a10, v31);
      if (!v32)
      {
        heap_Free(a10, v10);
        return 0;
      }
      v33 = v32;
      bzero(v32, v31);
      if (mbs2sjis(*(_QWORD *)(v19 + 8), 0, *(_DWORD *)(*(_QWORD *)(v19 + 8) + 8), (uint64_t)v33, v31) == -1)
        return 0;
      *(_QWORD *)(v10 + 16) = atoi(v33);
      heap_Free(a10, (uint64_t)v33);
    }
    else
    {
      *(_DWORD *)(v18 + 572) = 1;
      *(_QWORD *)(v18 + 16) = 0;
    }
    *(_DWORD *)(v10 + 576) = a4;
    *(_DWORD *)(v10 + 580) = a5;
    v25 = (uint64_t *)(a6 + 8 * (a4 + 1));
    v26 = *v25;
    if (*v25)
    {
      do
      {
        v27 = v26;
        v26 = *(_QWORD *)(v26 + 552);
      }
      while (v26);
      v25 = (uint64_t *)(v27 + 552);
    }
    *v25 = v10;
    v28 = (uint64_t *)(a7 + 8 * (a4 + 1 + a5));
    v29 = *v28;
    if (*v28)
    {
      do
      {
        v30 = v29;
        v29 = *(_QWORD *)(v29 + 560);
      }
      while (v29);
      v28 = (uint64_t *)(v30 + 560);
    }
    *v28 = v10;
  }
  v12 = *(int *)(v10 + 544);
  if ((int)v12 > 31)
    return 0;
  if (a1)
  {
    *(_QWORD *)(v10 + 8 * v12 + 280) = a1;
    if (a1[142] == 1)
      v20 = -1;
    else
      v20 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    if (*(_DWORD *)(v10 + 572) == 1)
      v21 = -1;
    else
      v21 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    v22 = connection_table(v20, v21, a9);
    v23 = *(int *)(v10 + 544);
    *(_QWORD *)(v10 + 8 * v23 + 24) = v22;
    *(_DWORD *)(v10 + 544) = v23 + 1;
  }
  return v10;
}

uint64_t forward_dp(int a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  int address;
  uint64_t leading_word;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;

  if (a1 >= -1)
  {
    v13 = (a1 + 2);
    v14 = a4;
    v15 = a5;
    do
    {
      *v14++ = 0;
      *v15++ = 0;
      --v13;
    }
    while (v13);
  }
  result = heap_Alloc((uint64_t)a7, 584);
  if (result)
  {
    *(_DWORD *)(result + 544) = 0;
    *(_QWORD *)(result + 536) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 568) = 0;
    *(_QWORD *)(result + 552) = 0;
    *(_QWORD *)(result + 560) = 0;
    *(_DWORD *)(result + 568) = 1;
    *(_QWORD *)(result + 576) = 0;
    *a4 = result;
    *a5 = result;
    if (a1 <= 0)
    {
      v19 = a1;
LABEL_22:
      v27 = a5[v19];
      if (v27)
      {
        v28 = 0;
        while (1)
        {
          result = add_to_lattice((_DWORD *)v27, v28, 0, a1, 0, (uint64_t)a4, (uint64_t)a5, v17, a6, a7);
          if (!result)
            break;
          v28 = result;
          v27 = *(_QWORD *)(v27 + 560);
          if (!v27)
            goto LABEL_28;
        }
      }
      else
      {
        result = add_to_lattice(0, 0, 0, a1, 0, (uint64_t)a4, (uint64_t)a5, v17, a6, a7);
        if (result)
        {
LABEL_28:
          v29 = (a1 + 1);
          if ((a1 & 0x80000000) == 0)
          {
            v30 = 0;
            do
            {
              for (i = a4[++v30]; i; i = *(_QWORD *)(i + 552))
              {
                v32 = *(unsigned int *)(i + 544);
                if ((_DWORD)v32)
                {
                  v33 = *(_QWORD *)(i + 280);
                  v34 = *(_QWORD *)(i + 24) + *(_QWORD *)(v33 + 8) + *(_QWORD *)(v33 + 16);
                  *(_QWORD *)(i + 8) = v34;
                  *(_QWORD *)(i + 536) = v33;
                  if ((int)v32 >= 1)
                  {
                    v35 = (uint64_t *)(i + 280);
                    do
                    {
                      v36 = *v35;
                      v37 = *(v35 - 32) + *(_QWORD *)(*v35 + 8) + *(_QWORD *)(*v35 + 16);
                      if (v37 < v34)
                      {
                        *(_QWORD *)(i + 8) = v37;
                        *(_QWORD *)(i + 536) = v36;
                        v34 = v37;
                      }
                      ++v35;
                      --v32;
                    }
                    while (v32);
                  }
                }
                else
                {
                  *(_QWORD *)(i + 8) = 1000000;
                  *(_QWORD *)(i + 536) = 0;
                }
              }
            }
            while (v30 != v29);
          }
          return a5[(int)v29];
        }
      }
    }
    else
    {
      v18 = 0;
      v19 = a1;
      v20 = a1;
      while (v18 >= v19)
      {
LABEL_19:
        ++v18;
        --v20;
        if (v18 == v19)
          goto LABEL_22;
      }
      v21 = 0;
      v38 = v19;
      v39 = a3;
      while (1)
      {
        address = box_hash_get_address(v18, v21);
        leading_word = box_hash_get_leading_word(a3, v18, v21, address);
        if (leading_word)
          break;
LABEL_18:
        ++v21;
        v19 = v38;
        a3 = v39;
        if (v21 == v20)
          goto LABEL_19;
      }
      v24 = (uint64_t *)leading_word;
      while (1)
      {
        v25 = a5[v18];
        if (v25)
          break;
        result = add_to_lattice(0, 0, v24, v18, v21, (uint64_t)a4, (uint64_t)a5, v17, a6, a7);
        if (!result)
          return result;
LABEL_17:
        v24 = (uint64_t *)v24[3];
        if (!v24)
          goto LABEL_18;
      }
      v26 = 0;
      while (1)
      {
        result = add_to_lattice((_DWORD *)v25, v26, v24, v18, v21, (uint64_t)a4, (uint64_t)a5, v17, a6, a7);
        if (!result)
          break;
        v26 = result;
        v25 = *(_QWORD *)(v25 + 560);
        if (!v25)
          goto LABEL_17;
      }
    }
  }
  return result;
}

uint64_t add_lattice_word_to_cyk_table(_QWORD *a1, uint64_t a2, int *a3, _QWORD *a4)
{
  uint64_t leading_tree;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  leading_tree = cyk_hash_get_leading_tree(a1, a3[144], a3[145]);
  if (leading_tree)
  {
    while (*(_DWORD *)(leading_tree + 32) || *(_QWORD *)(leading_tree + 48) != **(_QWORD **)a3)
    {
      leading_tree = *(_QWORD *)(leading_tree + 88);
      if (!leading_tree)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    result = heap_Alloc((uint64_t)a4, 96);
    if (!result)
      return result;
    v9 = result;
    v10 = **(_QWORD **)a3;
    *(_QWORD *)result = *(_QWORD *)(*(_QWORD *)a3 + 8);
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 48) = v10;
    *(_QWORD *)(result + 24) = *(_QWORD *)(*(_QWORD *)a3 + 16);
    *(_QWORD *)(result + 40) = 0;
    v11 = a3[144];
    v12 = a3[145];
    *(_DWORD *)(result + 72) = v11;
    *(_QWORD *)(result + 76) = v12;
    *(_DWORD *)(result + 8) = -1;
    v13 = cyk_hash_get_leading_tree(a1, v11, v12);
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = *(_QWORD *)(v13 + 88);
      }
      while (v13);
      *(_QWORD *)(v14 + 88) = v9;
    }
    else if ((cyk_hash_add_leading_tree(a1, v9, a3[144], a3[145], (uint64_t)a4) & 0x1FFF) == 0xA)
    {
      heap_Free(a4, v9);
      return 0;
    }
  }
  return 1;
}

uint64_t add_word_to_cyk_table(_QWORD *a1, uint64_t a2, int **a3, _QWORD *a4)
{
  int **v5;
  uint64_t result;

  if ((*a3)[142] != 1)
    return 0;
  v5 = a3;
  while (1)
  {
    v5 = (int **)v5[3];
    if (!v5 || (*v5)[143] == 1)
      break;
    result = add_lattice_word_to_cyk_table(a1, a2, *v5, a4);
    if (!(_DWORD)result)
      return result;
  }
  return 1;
}

uint64_t add_unknown_to_cyk_table(uint64_t a1, uint64_t a2, int a3, char *__s1, const char *a5, uint64_t **a6, _QWORD *a7, int a8, uint64_t a9, _QWORD *a10)
{
  uint64_t number_of_symbol;
  uint64_t result;
  int v18;
  const char *v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  uint64_t leading_tree;
  uint64_t v24;

  number_of_symbol = get_number_of_symbol(a6, __s1);
  result = 0;
  v18 = a3 - a2;
  if (a3 >= (int)a2 && number_of_symbol != -1)
  {
    result = heap_Alloc((uint64_t)a10, (2 * (v18 + 1)) | 1u);
    if (result)
    {
      v19 = (const char *)result;
      if (mbs2sjis(a1, a2, v18 + 1, result, (2 * (v18 + 1)) | 1u) == -1)
      {
        heap_Free(a10, (uint64_t)v19);
        return 0;
      }
      v20 = unknown_info_create(v19, __s1, a5, "0", a10);
      heap_Free(a10, (uint64_t)v19);
      if (!v20)
        return 0;
      if (*(_BYTE *)(a9 + 68))
        v21 = a2 + 1;
      else
        v21 = a2;
      result = heap_Alloc((uint64_t)a10, 96);
      if (result)
      {
        v22 = result;
        *(_QWORD *)result = number_of_symbol;
        *(_DWORD *)(result + 32) = 0;
        *(_QWORD *)(result + 88) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_QWORD *)(result + 40) = 0;
        *(_QWORD *)(result + 48) = v20;
        *(_DWORD *)(result + 72) = v21;
        *(_DWORD *)(result + 76) = v18;
        *(_DWORD *)(result + 80) = 0;
        *(_DWORD *)(result + 8) = -1;
        leading_tree = cyk_hash_get_leading_tree(a7, v21, v18);
        if (leading_tree)
        {
          do
          {
            v24 = leading_tree;
            leading_tree = *(_QWORD *)(leading_tree + 88);
          }
          while (leading_tree);
          *(_QWORD *)(v24 + 88) = v22;
          return 1;
        }
        return (cyk_hash_add_leading_tree(a7, v22, v21, v18, (uint64_t)a10) & 0x1FFF) != 0xA;
      }
    }
  }
  return result;
}

_QWORD *backward_as(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t **a7, _QWORD *a8, uint64_t a9, _QWORD *a10)
{
  _OWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t i;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t **v52;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  int v58[2];

  v17 = (_OWORD *)heap_Alloc((uint64_t)a10, 48);
  if (!v17)
    return 0;
  v18 = v17;
  v56 = a5;
  v17[1] = 0u;
  v17[2] = 0u;
  *v17 = 0u;
  v19 = *(_QWORD *)(a1 + 8);
  v20 = (_QWORD *)heap_Alloc((uint64_t)a10, 48);
  if (!v20)
  {
    v18[1] = 0;
    goto LABEL_26;
  }
  v51 = a6;
  v52 = a7;
  v22 = 0;
  v23 = a1;
  v24 = 0;
  v25 = 0;
  v49 = v23;
  v50 = 0;
  *v20 = v23;
  v20[1] = 0;
  v20[2] = 0;
  v20[3] = 0;
  v20[4] = 0;
  v20[5] = v19;
  v18[1] = v20;
  v54 = a4;
  v55 = a8;
  v53 = a2;
  while (1)
  {
    ++v22;
    if ((*(_DWORD *)(a4 + 1320) & 0x80000000) == 0)
      break;
LABEL_7:
    v27 = v18;
    while (v20)
    {
      v28 = v20;
      v29 = v27;
      v20 = (_QWORD *)v20[1];
      v27 = v28;
      if (!v20)
      {
        v30 = v29[1];
        v29[1] = v28[2];
        goto LABEL_12;
      }
    }
    v30 = 0;
LABEL_12:
    v31 = *(int **)v30;
    if (*(_DWORD *)(*(_QWORD *)v30 + 568) == 1)
    {
      add_word_to_cyk_table(a8, v21, (int **)v30, a10);
      if (++v24 >= a2)
        goto LABEL_30;
    }
    else
    {
      v57 = v22;
      *(_QWORD *)v58 = v25;
      if (v31[136] >= 1)
      {
        v32 = 0;
        do
        {
          v33 = *(_QWORD *)(v30 + 32);
          v34 = &v31[2 * v32];
          v35 = *((_QWORD *)v34 + 35);
          v36 = *((_QWORD *)v34 + 3);
          v38 = *(_QWORD *)(v35 + 8);
          v37 = *(_QWORD *)(v35 + 16);
          v39 = (_QWORD *)heap_Alloc((uint64_t)a10, 48);
          if (!v39)
            return 0;
          v40 = v37 + v33 + v36;
          *v39 = v35;
          v39[1] = 0;
          v39[2] = 0;
          v39[3] = v30;
          v39[4] = v40;
          v39[5] = v40 + v38;
          v18[1] = mas_list_insert(v39, (_QWORD *)v18[1]);
          ++v32;
          v31 = *(int **)v30;
        }
        while (v32 < *(int *)(*(_QWORD *)v30 + 544));
      }
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v30 + 16) = 0;
      if (*(_QWORD *)v58)
        *(_QWORD *)(*(_QWORD *)v58 + 8) = v30;
      else
        v50 = (_QWORD *)v30;
      v25 = v30;
      a4 = v54;
      a8 = v55;
      a2 = v53;
      v22 = v57;
    }
    v20 = (_QWORD *)v18[1];
    if (!v20)
      goto LABEL_30;
  }
  if (kaldi::nnet1::UpdatableComponent::IsUpdatable((kaldi::nnet1::UpdatableComponent *)*(unsigned int *)(a4 + 1320)) != 1)
  {
    v20 = (_QWORD *)v18[1];
    goto LABEL_7;
  }
  if (v24)
  {
LABEL_30:
    as_list_free_all(v18, a10);
    as_list_free_all(v50, a10);
    return a8;
  }
  v42 = 0;
  v43 = *(_QWORD *)(v49 + 536);
  for (i = v43; ; v43 = *(_QWORD *)(i + 536))
  {
    v45 = *(_DWORD *)(i + 576);
    v46 = v42;
    while (!v43)
    {
      v47 = v45 - 1;
      v42 = v46;
      if (v45 >= 1)
      {
        v47 = v45;
        while (1)
        {
          v42 = *(_QWORD *)(v56 + 8 * --v47);
          if (v42)
            break;
          if (v47 <= 0)
          {
            v42 = 0;
            v47 = -1;
            break;
          }
        }
      }
      if (*(_BYTE *)(a4 + 68))
        v48 = v45 - 2;
      else
        v48 = v45 - 1;
      if (!add_unknown_to_cyk_table(v51, v47 - (*(_BYTE *)(a4 + 68) != 0), v48, (char *)(a4 + 136), (const char *)(a4 + 200), v52, a8, v26, a4, a10))goto LABEL_49;
      v43 = 0;
      v46 = 0;
      i = v42;
      if (v42)
        goto LABEL_46;
    }
    v42 = v46;
    i = v43;
LABEL_46:
    if (*(_DWORD *)(i + 568) == 1)
      goto LABEL_30;
    if (!add_lattice_word_to_cyk_table(a8, v21, (int *)i, a10))
      break;
  }
LABEL_49:
  cyk_hash_free(a8, a10);
LABEL_26:
  as_list_free_all(v18, a10);
  return 0;
}

uint64_t iso_parse_fdp_bas(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5, uint64_t *a6, uint64_t a7, unsigned __int16 a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  _OWORD v58[14];
  uint64_t v59;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63[3];

  v19 = heap_Alloc(*(_QWORD *)(a1 + 24), 96800);
  if (!v19)
  {
    v26 = 0;
    goto LABEL_7;
  }
  v24 = (uint64_t *)v19;
  v25 = *(_DWORD *)(a3 + 8);
  if (*(_BYTE *)(a2 + 68))
    ++v25;
  if (v25 < 2049)
  {
    v57 = v25;
    v60 = 0;
    v63[1] = 4000;
    v62 = 0;
    v63[0] = v19 + 32800;
    bzero((void *)(v19 + 32800), 0x7D00uLL);
    v29 = *(_OWORD *)(a1 + 176);
    v30 = *(_OWORD *)(a1 + 208);
    v58[12] = *(_OWORD *)(a1 + 192);
    v58[13] = v30;
    v31 = *(_OWORD *)(a1 + 112);
    v32 = *(_OWORD *)(a1 + 144);
    v33 = *(_OWORD *)(a1 + 160);
    v58[8] = *(_OWORD *)(a1 + 128);
    v58[9] = v32;
    v58[10] = v33;
    v58[11] = v29;
    v34 = *(_OWORD *)(a1 + 48);
    v35 = *(_OWORD *)(a1 + 80);
    v36 = *(_OWORD *)(a1 + 96);
    v58[4] = *(_OWORD *)(a1 + 64);
    v58[5] = v35;
    v37 = *(_QWORD *)(a1 + 40);
    v59 = *(_QWORD *)(a1 + 224);
    v58[6] = v36;
    v58[7] = v31;
    v38 = *(_OWORD *)(a1 + 16);
    v58[0] = *(_OWORD *)a1;
    v58[1] = v38;
    v58[2] = *(_OWORD *)(a1 + 32);
    v58[3] = v34;
    v27 = look_up_dictionary(a1, a3, a2, 20, (uint64_t **)SF_symbol_file, v63, v37, (uint64_t)v58, a7, a8, a9, a10, a11, &v60);
    if ((v27 & 0x80000000) != 0)
      return v27;
    if (v60 == 1)
    {
      v47 = forward_dp(v57, v39, v63, v24 + 2050, v24, a4, *(_QWORD **)(a1 + 24));
      if (a5 == 1)
      {
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(a1 + 216), 5, 0, (uint64_t)"[FDP] Dumping LATTICE (RESULT OF FORWARD DP)", v44, v45, v46, v55);
        v27 = lattice_word_print_all(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 224), (uint64_t)(v24 + 2050), v57, 1);
        if ((v27 & 0x80000000) != 0)
          goto LABEL_22;
      }
      if (v47)
      {
        v61 = v24 + 8100;
        LODWORD(v62) = 4000;
        bzero(v24 + 8100, 0x7D00uLL);
        if (backward_as(v47, *(_DWORD *)(a2 + 8), v57, a2, (uint64_t)v24, a3, (uint64_t **)SF_symbol_file, &v61, v55, *(_QWORD **)(a1 + 24)))
        {
          if (a5 != 1
            || (log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(a1 + 216), 5, 0, (uint64_t)"[A*] RESULT OF BACKWARD A Star", v48, v49, v50, v56), v27 = log_intermediate_tree(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 224), (int *)a2, &v61, v57, (uint64_t *)a1), (v27 & 0x80000000) == 0))
          {
            lattice_word_free_all(v24 + 2050, v57, *(_QWORD **)(a1 + 24));
            if (*(_DWORD *)(a2 + 48) == 1)
            {
              v51 = *(_QWORD *)(a1 + 24);
              v52 = 1;
LABEL_30:
              v54 = parser_result_create(v52, 0, v51);
              goto LABEL_31;
            }
            v53 = *(_DWORD *)(a2 + 24);
            switch(v53)
            {
              case 3:
                v54 = parse_cyk_as_step(a2, &v61, v57, *(_QWORD *)(a1 + 56), a1 + 64, a1 + 104, a1 + 144, *(_QWORD *)(a1 + 40), (uint64_t *)a1, *(_QWORD **)(a1 + 24));
                break;
              case 2:
                v54 = parse_cyk_as((_DWORD *)a2, &v61, v57, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), (uint64_t *)a1, *(_QWORD **)(a1 + 24));
                break;
              case 1:
                v54 = parse_cyk(a2, &v61, v57, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), (uint64_t *)a1, *(_QWORD **)(a1 + 24));
                break;
              default:
                v51 = *(_QWORD *)(a1 + 24);
                v52 = 2;
                goto LABEL_30;
            }
LABEL_31:
            v26 = v54;
            cyk_hash_free(&v61, *(_QWORD **)(a1 + 24));
            box_hash_free(v63, *(_QWORD **)(a1 + 24));
            goto LABEL_32;
          }
LABEL_22:
          v26 = 0;
          goto LABEL_8;
        }
      }
      box_hash_free(v63, *(_QWORD **)(a1 + 24));
      v26 = parser_result_create(2, 0, *(_QWORD *)(a1 + 24));
      lattice_word_free_all(v24 + 2050, v57, *(_QWORD **)(a1 + 24));
    }
    else
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(a1 + 216), 52001, 0, v40, v41, v42, v43, v55);
      box_hash_free(v63, *(_QWORD **)(a1 + 24));
      v26 = parser_result_create(2, 0, *(_QWORD *)(a1 + 24));
    }
LABEL_32:
    heap_Free(*(_QWORD **)(a1 + 24), (uint64_t)v24);
    goto LABEL_8;
  }
  log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(a1 + 216), 52000, "%s%d", v20, v21, v22, v23, "maxlength");
  v26 = parser_result_create(2, 0, *(_QWORD *)(a1 + 24));
  heap_Free(*(_QWORD **)(a1 + 24), (uint64_t)v24);
LABEL_7:
  v27 = 0;
LABEL_8:
  *a6 = v26;
  return v27;
}

uint64_t tree_append(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (!result)
    return a2;
  v2 = result;
  do
  {
    v3 = v2;
    v2 = *(_QWORD *)(v2 + 16);
  }
  while (v2);
  *(_QWORD *)(v3 + 16) = a2;
  return result;
}

uint64_t *info_copy_sjis(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t *v7;
  char v8;
  char v9;
  uint64_t *v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  if (a1)
  {
    v3 = a1;
    v4 = (uint64_t *)heap_Calloc(a2, 1, 24);
    v5 = v4 == 0;
    if (v4)
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1;
      while (1)
      {
        v10 = v4;
        if ((v9 & 1) != 0)
          v7 = v4;
        v11 = strlen(*(const char **)v3);
        v12 = (char *)heap_Alloc((uint64_t)a2, (v11 + 1));
        *v4 = (uint64_t)v12;
        if (!v12)
          break;
        strcpy(v12, *(const char **)v3);
        v13 = mbs_len_bytes(*(_QWORD *)(v3 + 8)) + 1;
        v14 = heap_Alloc((uint64_t)a2, v13);
        if (!v14
          || mbs2sjis(*(_QWORD *)(v3 + 8), 0, *(_DWORD *)(*(_QWORD *)(v3 + 8) + 8), v14, v13) == -1)
        {
          goto LABEL_23;
        }
        v10[1] = v14;
        if ((v9 & 1) == 0)
          v6[2] = (uint64_t)v10;
        v3 = *(_QWORD *)(v3 + 16);
        if (!v3)
        {
          v10[2] = 0;
          return v7;
        }
        v8 = 1;
        v4 = (uint64_t *)heap_Calloc(a2, 1, 24);
        v9 = 0;
        v5 = v4 == 0;
        v6 = v10;
        if (!v4)
          goto LABEL_15;
      }
      v14 = 0;
LABEL_23:
      v4 = v10;
      if ((v8 & 1) != 0)
        goto LABEL_16;
    }
    else
    {
      v8 = 0;
      v7 = 0;
LABEL_15:
      v14 = 0;
      if ((v8 & 1) != 0)
LABEL_16:
        WordInfo_free(v7, a2);
    }
    if (!v5)
    {
      heap_Free(a2, *v4);
      heap_Free(a2, (uint64_t)v4);
    }
    heap_Free(a2, v14);
  }
  return 0;
}

uint64_t *WordInfo_free(uint64_t *result, _QWORD *a2)
{
  uint64_t v3;

  if (result)
  {
    v3 = (uint64_t)result;
    heap_Free(a2, *result);
    heap_Free(a2, *(_QWORD *)(v3 + 8));
    WordInfo_free(*(_QWORD *)(v3 + 16), a2);
    return heap_Free(a2, v3);
  }
  return result;
}

_QWORD *tree_duplicate(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v8;
  const char *v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;

  v8 = heap_Alloc((uint64_t)a4, 64);
  if (v8)
  {
    v9 = (const char *)v8;
    if (get_name_of_symbol(SF_symbol_file, a3, *(_QWORD *)a1, v8))
    {
      v10 = *(_DWORD *)(a1 + 32);
      switch(v10)
      {
        case 0:
          if (*v9 == 95 && *(_DWORD *)(a2 + 28) == 1)
            break;
          v15 = info_copy_sjis(*(_QWORD *)(a1 + 48), a4);
          if (!v15)
            break;
          v16 = v15;
          v17 = *(uint64_t **)(a1 + 24);
          if (v17 && *(_DWORD *)(a2 + 12) == 1)
          {
            v18 = attribute_copy_all(v17, a4);
            if (!v18)
            {
              WordInfo_free(v16, a4);
              break;
            }
          }
          else
          {
            v18 = 0;
          }
          v12 = jp_tree_create(*(_QWORD *)a1, v9, 0, (uint64_t)v18, 0, (uint64_t)v16, a4);
          if (!v12)
            WordInfo_free(v16, a4);
          goto LABEL_33;
        case 1:
          v19 = tree_duplicate(*(_QWORD *)(a1 + 48), a2, a3, a4);
          if (v19)
          {
            v20 = (_QWORD *)v19;
            if (*v9 != 95 || *(_DWORD *)(a2 + 28) != 1)
            {
              v21 = *(uint64_t **)(a1 + 24);
              if (v21 && *(_DWORD *)(a2 + 12) == 1)
              {
                v22 = attribute_copy_all(v21, a4);
                if (!v22)
                  break;
              }
              else
              {
                v22 = 0;
              }
              v12 = jp_tree_create(*(_QWORD *)a1, v9, 0, (uint64_t)v22, (uint64_t)v20, 0, a4);
              if (!v12)
                jpe_FreeTree(v20, a4);
              goto LABEL_33;
            }
            v12 = (_QWORD *)v19;
            goto LABEL_33;
          }
          break;
        case 2:
          v11 = tree_duplicate(*(_QWORD *)(a1 + 40), a2, a3, a4);
          if (v11)
          {
            v12 = (_QWORD *)v11;
            v13 = v11;
            do
            {
              v14 = v13;
              v13 = *(_QWORD *)(v13 + 16);
            }
            while (v13);
            *(_QWORD *)(v14 + 16) = tree_duplicate(*(_QWORD *)(a1 + 48), a2, a3, a4);
LABEL_27:
            if (*v9 == 95 && *(_DWORD *)(a2 + 28) == 1)
              goto LABEL_33;
            v23 = *(uint64_t **)(a1 + 24);
            if (v23 && *(_DWORD *)(a2 + 12) == 1)
            {
              v24 = attribute_copy_all(v23, a4);
              if (!v24)
                break;
            }
            else
            {
              v24 = 0;
            }
            v12 = jp_tree_create(*(_QWORD *)a1, v9, 0, (uint64_t)v24, (uint64_t)v12, 0, a4);
            goto LABEL_33;
          }
          v12 = (_QWORD *)tree_duplicate(*(_QWORD *)(a1 + 48), a2, a3, a4);
          if (v12)
            goto LABEL_27;
LABEL_33:
          heap_Free(a4, (uint64_t)v9);
          return v12;
      }
    }
    v12 = 0;
    goto LABEL_33;
  }
  return 0;
}

_QWORD *jp_tree_create(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  char *v17;

  v14 = (_QWORD *)heap_Calloc(a7, 1, 48);
  v15 = v14;
  if (v14)
  {
    *v14 = a1;
    v16 = strlen(a2);
    v17 = (char *)heap_Alloc((uint64_t)a7, (v16 + 1));
    v15[1] = v17;
    if (v17)
    {
      strcpy(v17, a2);
      v15[2] = a3;
      v15[3] = a4;
      v15[4] = a5;
      v15[5] = a6;
    }
    else
    {
      heap_Free(a7, (uint64_t)v15);
      return 0;
    }
  }
  return v15;
}

uint64_t jpe_FreeTree(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;

  if (a1)
  {
    v3 = a1;
    do
    {
      v4 = v3[4];
      if (v4)
      {
        jpe_FreeTree(v4, a2);
      }
      else
      {
        v5 = (uint64_t *)v3[5];
        if (v5)
          WordInfo_free(v5, a2);
      }
      v6 = (_QWORD *)v3[2];
      jpe_FreeTreeOne((uint64_t)v3, a2);
      v3 = v6;
    }
    while (v6);
  }
  return 1;
}

uint64_t jpe_FreeTreeOne(uint64_t a1, _QWORD *a2)
{
  if (a1)
  {
    heap_Free(a2, *(_QWORD *)(a1 + 8));
    attribute_free_all(*(uint64_t **)(a1 + 24), a2);
    heap_Free(a2, a1);
  }
  return 1;
}

uint64_t *free_information(uint64_t *result, _QWORD *a2)
{
  uint64_t v3;

  if (result)
  {
    v3 = (uint64_t)result;
    heap_Free(a2, *result);
    mbs_free(*(uint64_t **)(v3 + 8), a2);
    heap_Free(a2, *(_QWORD *)(v3 + 8));
    free_information(*(_QWORD *)(v3 + 16), a2);
    return heap_Free(a2, v3);
  }
  return result;
}

uint64_t create_info(uint64_t a1, const char *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  char *v10;
  char __s[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = heap_Calloc(a3, 1, 32);
  if (v5)
  {
    v6 = heap_Calloc(a3, 1, 16);
    *(_QWORD *)(v5 + 8) = v6;
    if (v6)
    {
      v7 = v6;
      v8 = strlen(a2);
      if ((mbs_create(v7, v8, a2, a3) & 0x80000000) == 0)
      {
        __strcpy_chk();
        v9 = strlen(__s);
        v10 = (char *)heap_Alloc((uint64_t)a3, (v9 + 1));
        *(_QWORD *)v5 = v10;
        if (v10)
        {
          strcpy(v10, __s);
          *(_QWORD *)(v5 + 16) = 0;
          *(_QWORD *)(v5 + 24) = 0;
          return v5;
        }
        mbs_free(*(uint64_t **)(v5 + 8), a3);
      }
      heap_Free(a3, *(_QWORD *)(v5 + 8));
    }
    heap_Free(a3, v5);
    return 0;
  }
  return v5;
}

_QWORD *word_data_free_all(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;

  v4 = *a1;
  v5 = (uint64_t *)(*a1)[3];
  if (v5)
  {
    do
    {
      v6 = (uint64_t *)v5[3];
      free_information(v5, a2);
      v5 = v6;
    }
    while (v6);
  }
  free_information(v4, a2);
  attribute_free_all(a1[2], a2);
  return heap_Free(a2, (uint64_t)a1);
}

uint64_t BSCompareUniToTts(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = *a1;
  v3 = *a2;
  v4 = v2 >= v3;
  v5 = v2 > v3;
  if (v4)
    return v5;
  else
    return 0xFFFFFFFFLL;
}

uint64_t XLIT_chUnicodeWideToSJIS(unsigned int a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  char v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  char v15;
  char v16;
  unsigned int v17;
  char v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char *v22;
  int v23;
  unint64_t v25;
  uint64_t v26;
  unsigned __int16 v27;
  __int16 v28;

  v28 = a1;
  if (a1 - 65534 >= 2 && a1 != 65279)
  {
    if (a1 <= 0x7E)
    {
      *a2 = a1;
      return 1;
    }
    if (a1 - 1025 <= 0x50)
    {
      *a2 = -124;
      if (a1 == 1025)
      {
        v8 = 70;
      }
      else
      {
        if (a1 <= 0x415)
          v14 = 48;
        else
          v14 = 49;
        v15 = v14 + a1;
        if (a1 > 0x42F)
          v15 += 15;
        v16 = a1 > 0x435;
        if (a1 > 0x43D)
          ++v16;
        v8 = v16 + v15;
      }
      a2[1] = v8;
      return 2;
    }
    if (a1 - 913 <= 0x38)
    {
      if (a1 > 0x3A1)
        v9 = -32755;
      else
        v9 = -32754;
      v10 = v9 + a1;
      if (a1 > 0x3A9)
        ++v10;
      v11 = v10 - (a1 > 0x3C1);
LABEL_21:
      v12 = bswap32(v11);
LABEL_22:
      v13 = HIWORD(v12);
LABEL_23:
      *(_WORD *)a2 = v13;
      return 2;
    }
    if ((unsigned __int16)(a1 + 159) <= 0x3Eu)
    {
      *a2 = a1 + 64;
      return 1;
    }
    if ((unsigned __int16)(a1 + 255) <= 0x5Du)
    {
      v5 = 0;
      v17 = 33097;
      switch(a1)
      {
        case 0xFF01u:
          goto LABEL_88;
        case 0xFF02u:
        case 0xFF07u:
          return v5;
        case 0xFF03u:
          v17 = 33172;
          goto LABEL_88;
        case 0xFF04u:
          v17 = 33168;
          goto LABEL_88;
        case 0xFF05u:
          v17 = 33171;
          goto LABEL_88;
        case 0xFF06u:
          v17 = 33173;
          goto LABEL_88;
        case 0xFF08u:
          v17 = 33129;
          goto LABEL_88;
        case 0xFF09u:
          v17 = 33130;
          goto LABEL_88;
        case 0xFF0Au:
          v17 = 33174;
          goto LABEL_88;
        case 0xFF0Bu:
          v17 = 33147;
          goto LABEL_88;
        case 0xFF0Cu:
          v17 = 33091;
          goto LABEL_88;
        case 0xFF0Du:
          v17 = 33148;
          goto LABEL_88;
        case 0xFF0Eu:
          v17 = 33092;
          goto LABEL_88;
        case 0xFF0Fu:
          v17 = 33118;
          goto LABEL_88;
        case 0xFF10u:
        case 0xFF11u:
        case 0xFF12u:
        case 0xFF13u:
        case 0xFF14u:
        case 0xFF15u:
        case 0xFF16u:
        case 0xFF17u:
        case 0xFF18u:
        case 0xFF19u:
        case 0xFF21u:
        case 0xFF22u:
        case 0xFF23u:
        case 0xFF24u:
        case 0xFF25u:
        case 0xFF26u:
        case 0xFF27u:
        case 0xFF28u:
        case 0xFF29u:
        case 0xFF2Au:
        case 0xFF2Bu:
        case 0xFF2Cu:
        case 0xFF2Du:
        case 0xFF2Eu:
        case 0xFF2Fu:
        case 0xFF30u:
        case 0xFF31u:
        case 0xFF32u:
        case 0xFF33u:
        case 0xFF34u:
        case 0xFF35u:
        case 0xFF36u:
        case 0xFF37u:
        case 0xFF38u:
        case 0xFF39u:
        case 0xFF3Au:
LABEL_57:
          if (a1 <= 0xFF3A)
            v23 = -31937;
          else
            v23 = -31936;
          v17 = v23 + a1;
          goto LABEL_88;
        case 0xFF1Au:
          v17 = 33094;
          goto LABEL_88;
        case 0xFF1Bu:
          v17 = 33095;
          goto LABEL_88;
        case 0xFF1Cu:
          v17 = 33155;
          goto LABEL_88;
        case 0xFF1Du:
          v17 = 33153;
          goto LABEL_88;
        case 0xFF1Eu:
          v17 = 33156;
          goto LABEL_88;
        case 0xFF1Fu:
          v17 = 33096;
          goto LABEL_88;
        case 0xFF20u:
          v17 = 33175;
          goto LABEL_88;
        case 0xFF3Bu:
          v17 = 33133;
          goto LABEL_88;
        case 0xFF3Cu:
          v17 = 33119;
          goto LABEL_88;
        case 0xFF3Du:
          v17 = 33134;
          goto LABEL_88;
        case 0xFF3Eu:
          v17 = 33103;
          goto LABEL_88;
        case 0xFF3Fu:
          v17 = 33105;
          goto LABEL_88;
        case 0xFF40u:
          v17 = 33101;
          goto LABEL_88;
        default:
          switch(a1)
          {
            case 0xFF5Bu:
              v17 = 33135;
              break;
            case 0xFF5Cu:
              v17 = 33122;
              break;
            case 0xFF5Du:
              v17 = 33136;
              break;
            case 0xFF5Eu:
              v17 = 33120;
              break;
            default:
              goto LABEL_57;
          }
LABEL_88:
          v12 = bswap32(v17);
          break;
      }
      goto LABEL_22;
    }
    if (a1 - 12353 <= 0x52)
    {
      a2[1] = a1 + 94;
      v18 = -126;
LABEL_46:
      *a2 = v18;
      return 2;
    }
    if (a1 - 12449 <= 0x55)
    {
      if (a1 >> 5 <= 0x186)
        v19 = -97;
      else
        v19 = -96;
      a2[1] = v19 + a1;
      v18 = -125;
      goto LABEL_46;
    }
    if ((unsigned __int16)(a1 - 19968) > 0x51A5u)
    {
      switch(a1)
      {
        case 0x2500u:
          v13 = 33951;
          goto LABEL_129;
        case 0x2501u:
          v13 = 33962;
          goto LABEL_129;
        case 0x2502u:
          v13 = 33952;
          goto LABEL_129;
        case 0x2503u:
          v13 = 33963;
          goto LABEL_129;
        case 0x2504u:
        case 0x2505u:
        case 0x2506u:
        case 0x2507u:
        case 0x2508u:
        case 0x2509u:
        case 0x250Au:
        case 0x250Bu:
        case 0x250Du:
        case 0x250Eu:
        case 0x2511u:
        case 0x2512u:
        case 0x2515u:
        case 0x2516u:
        case 0x2519u:
        case 0x251Au:
        case 0x251Eu:
        case 0x251Fu:
        case 0x2521u:
        case 0x2522u:
        case 0x2526u:
        case 0x2527u:
        case 0x2529u:
        case 0x252Au:
        case 0x252Du:
        case 0x252Eu:
        case 0x2531u:
        case 0x2532u:
        case 0x2535u:
        case 0x2536u:
        case 0x2539u:
        case 0x253Au:
        case 0x253Du:
        case 0x253Eu:
        case 0x2540u:
        case 0x2541u:
        case 0x2543u:
        case 0x2544u:
        case 0x2545u:
        case 0x2546u:
        case 0x2547u:
        case 0x2548u:
        case 0x2549u:
        case 0x254Au:
LABEL_93:
          v25 = ssft_bsearch((uint64_t)&v28, (unint64_t)&BSUniToTts, 0x93uLL, 2, (uint64_t (*)(uint64_t, unint64_t))BSCompareUniToTts);
          if (v25)
          {
            v22 = (char *)&BSUniToTts + (((_WORD)v25 - (unsigned __int16)&BSUniToTts) & 0x1FE);
            goto LABEL_51;
          }
          if (!a4 || !*(_WORD *)(a4 + 2))
            return 0;
          if (v28 == *(_WORD *)(a4 + 2))
          {
            v26 = 0;
          }
          else
          {
            v27 = 1;
            do
            {
              v27 += 2;
              if (!*(_WORD *)(a4 + 2 * v27))
                return 0;
            }
            while (v28 != *(_WORD *)(a4 + 2 * v27));
            v26 = v27 - 1;
          }
          v11 = *(unsigned __int16 *)(a4 + 2 * v26);
          break;
        case 0x250Cu:
          v13 = 33953;
          goto LABEL_129;
        case 0x250Fu:
          v13 = 33964;
          goto LABEL_129;
        case 0x2510u:
          v13 = 33954;
          goto LABEL_129;
        case 0x2513u:
          v13 = 33965;
          goto LABEL_129;
        case 0x2514u:
          v13 = 33956;
          goto LABEL_129;
        case 0x2517u:
          v13 = 33967;
          goto LABEL_129;
        case 0x2518u:
          v13 = 33955;
          goto LABEL_129;
        case 0x251Bu:
          v13 = 33966;
          goto LABEL_129;
        case 0x251Cu:
          v13 = 33957;
          goto LABEL_129;
        case 0x251Du:
          v13 = 33978;
          goto LABEL_129;
        case 0x2520u:
          v13 = 33973;
          goto LABEL_129;
        case 0x2523u:
          v13 = 33968;
          goto LABEL_129;
        case 0x2524u:
          v13 = 33959;
          goto LABEL_129;
        case 0x2525u:
          v13 = 33980;
          goto LABEL_129;
        case 0x2528u:
          v13 = 33975;
          goto LABEL_129;
        case 0x252Bu:
          v13 = 33970;
          goto LABEL_129;
        case 0x252Cu:
          v13 = 33958;
          goto LABEL_129;
        case 0x252Fu:
          v13 = 33974;
          goto LABEL_129;
        case 0x2530u:
          v13 = 33979;
          goto LABEL_129;
        case 0x2533u:
          v13 = 33969;
          goto LABEL_129;
        case 0x2534u:
          v13 = 33960;
          goto LABEL_129;
        case 0x2537u:
          v13 = 33976;
          goto LABEL_129;
        case 0x2538u:
          v13 = 33981;
          goto LABEL_129;
        case 0x253Bu:
          v13 = 33971;
          goto LABEL_129;
        case 0x253Cu:
          v13 = 33961;
          goto LABEL_129;
        case 0x253Fu:
          v13 = 33977;
          goto LABEL_129;
        case 0x2542u:
          v13 = 33982;
          goto LABEL_129;
        case 0x254Bu:
          v13 = 33972;
          goto LABEL_129;
        default:
          switch(a1)
          {
            case 0xFFE0u:
              v13 = 33169;
              break;
            case 0xFFE1u:
              v13 = 33170;
              break;
            case 0xFFE2u:
              v13 = 33226;
              break;
            case 0xFFE3u:
            case 0xFFE4u:
              goto LABEL_93;
            case 0xFFE5u:
              v13 = 33167;
              break;
            default:
              if (a1 != 8741)
                goto LABEL_93;
              v13 = 33121;
              break;
          }
LABEL_129:
          LOWORD(v13) = __rev16(v13);
          goto LABEL_23;
      }
      goto LABEL_21;
    }
    v20 = jpj_UniToCTts(a1);
    if (v20 != 0x1FFF)
    {
      LOWORD(v13) = __rev16(jpj_CTtsToTts(v20));
      goto LABEL_23;
    }
    v21 = ssft_bsearch((uint64_t)&v28, (unint64_t)&BSUniToTts, 0x93uLL, 2, (uint64_t (*)(uint64_t, unint64_t))BSCompareUniToTts);
    if (v21)
    {
      v22 = (char *)&BSUniToTts + (((_WORD)v21 - (unsigned __int16)&BSUniToTts) & 0x1FE);
LABEL_51:
      v11 = *((unsigned __int16 *)v22 + 147);
      goto LABEL_21;
    }
  }
  return 0;
}

uint64_t jpj_UniToCTts(__int16 a1)
{
  unsigned __int16 *v1;
  int v2;
  unsigned __int16 v3;

  if ((unsigned __int16)(a1 - 19968) > 0x51A5u)
    return 0x1FFFLL;
  v1 = (unsigned __int16 *)((char *)&CUni2CTts + 2 * CUni2CTtsindex[(unsigned __int16)(a1 - 19968) >> 6]);
  LOWORD(v2) = a1 & 0x3F;
  if ((a1 & 0x3F) == 0)
    return *v1 >> 3;
  do
  {
    v3 = *v1 & 7;
    if ((*v1 & 7) != 0)
    {
      ++v1;
    }
    else
    {
      v3 = v1[1];
      v1 += 2;
    }
    v2 = (__int16)(v2 - v3);
  }
  while (v2 > 0);
  if (v2)
    return 0x1FFFLL;
  else
    return *v1 >> 3;
}

uint64_t jpj_CTtsToTts(unsigned int a1)
{
  __int16 v1;
  unsigned __int16 v2;
  __int16 v3;
  unsigned __int8 v4;
  unsigned int v5;
  unsigned __int8 v6;
  __int16 v7;
  unsigned int v8;
  __int16 v9;

  if (a1)
  {
    v1 = a1 + 43;
    if (a1 <= 0xB95)
      v1 = a1;
    v2 = v1 + 1409;
    v3 = v2 / 0xBCu;
    LOBYTE(v2) = v2 % 0xBCu;
    v4 = v2 + 64;
    v5 = (v2 + 64);
    v6 = v2 + 65;
    if (v5 <= 0x7E)
      v6 = v4;
    v7 = v3 - 127;
    v8 = (v3 - 127);
    v9 = v3 - 63;
    if (v8 <= 0x9F)
      v9 = v7;
    return (unsigned __int16)(v6 | (unsigned __int16)(v9 << 8));
  }
  else
  {
    return (unsigned __int16)-32425;
  }
}

const char *marker_getMarkerArgStr(unsigned int a1)
{
  if (a1 > 0xB)
    return "__not_defined__";
  else
    return off_1EA947F50[a1];
}

uint64_t marker_tag2string(int a1, char **a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  char *v6;
  BOOL v7;
  int v8;
  char *v9;
  uint64_t result;

  v3 = 0;
  v4 = 0;
  do
  {
    v5 = *(_DWORD *)&markerTable[56 * v3 + 48];
    if (v5 == a1)
      v3 = v4;
    else
      v3 = v4 + 1;
    v6 = &markerTable[56 * v3];
    if (*v6)
      v7 = v5 == a1;
    else
      v7 = 1;
    v4 = v3;
  }
  while (!v7);
  if (v5 == a1)
  {
    result = 0;
    v9 = v6 + 7;
    v8 = *(_DWORD *)&markerTable[56 * v3 + 52];
  }
  else
  {
    v8 = 0;
    v9 = &byte_1DEBD87CE;
    result = 20;
  }
  *a2 = v9;
  *a3 = v8;
  return result;
}

unint64_t marker_hasNonConstCharPtrArg(int a1)
{
  int v1;
  const char *v2;
  int v3;

  v1 = 0;
  v2 = "!";
  while (1)
  {
    v3 = *(_DWORD *)v2;
    v2 += 56;
    if (v3 == a1)
      break;
    if (++v1 == 56)
      return 0;
  }
  return (0xE7DC3FF9804100uLL >> v1) & 1;
}

unint64_t marker_hasCharPtrArg(int a1)
{
  int v1;
  const char *v2;
  int v3;

  v1 = 0;
  v2 = "!";
  while (1)
  {
    v3 = *(_DWORD *)v2;
    v2 += 56;
    if (v3 == a1)
      break;
    if (++v1 == 56)
      return 0;
  }
  if (v1 == 1)
    return 1;
  else
    return (0xE7DC3FF9804100uLL >> v1) & 1;
}

char *marker_getString(int a1)
{
  char *result;
  uint64_t i;
  uint64_t v4;
  int v5;

  result = "MARKER_PHONEME";
  if (a1 != 33)
  {
    for (i = 0; ; i += 56)
    {
      v4 = i + 56;
      if ((_DWORD)i == 3080)
        break;
      v5 = *(_DWORD *)&markerTable[i + 104];
      if (v5 == a1)
        return &markerTable[v4];
    }
    return "MARKER_UNDEF";
  }
  return result;
}

uint64_t marker_serialize_tostring(void (*a1)(uint64_t, char *), uint64_t a2, uint64_t a3, int a4)
{
  _OWORD *v5;
  int v8;
  char *v9;
  const char *v10;
  unsigned int v11;
  char *v12;
  _OWORD v14[3];
  __int128 v15;
  int v16;
  char *v17;
  char v18[11];
  uint64_t v19;

  v5 = (_OWORD *)a3;
  v19 = *MEMORY[0x1E0C80C00];
  v17 = "UNKNOWN";
  v15 = 0u;
  memset(v14, 0, sizeof(v14));
  if (a4)
  {
    v8 = *(_DWORD *)(a3 + 20);
  }
  else
  {
    v15 = 0uLL;
    memset(v14, 0, sizeof(v14));
    v8 = *(_DWORD *)a3;
    *(_OWORD *)((char *)&v14[1] + 8) = *(_OWORD *)(a3 + 4);
    *((_QWORD *)&v14[2] + 1) = *(_QWORD *)(a3 + 24);
    v5 = v14;
  }
  v16 = 0;
  marker_tag2string(v8, &v17, &v16);
  LH_utoa(*((_DWORD *)v5 + 6), v18, 0xAu);
  a1(a2, v18);
  a1(a2, " ");
  LH_utoa(*((_DWORD *)v5 + 7), v18, 0xAu);
  a1(a2, v18);
  if (a4)
  {
    a1(a2, " ");
    v9 = *(_DWORD *)v5 ? "INT" : "EXT";
    a1(a2, v9);
    a1(a2, " ");
    LH_utoa(*((_DWORD *)v5 + 14), v18, 0xAu);
    a1(a2, v18);
    if (*((_DWORD *)v5 + 14))
    {
      v10 = (const char *)*((_QWORD *)v5 + 6);
      a1(a2, " [");
      if (v10)
      {
        v11 = strlen(v10);
        LH_utoa(v11, v18, 0xAu);
        a1(a2, v18);
        a1(a2, " ");
        a1(a2, (char *)v10);
      }
      a1(a2, "]");
    }
  }
  a1(a2, " ");
  a1(a2, v17);
  if ((v16 - 3) <= 1)
  {
    v12 = (char *)*((_QWORD *)v5 + 5);
    a1(a2, " (");
    if (!v12)
      v12 = &byte_1DEBD87CE;
    goto LABEL_18;
  }
  if ((v16 - 1) <= 1)
  {
    v12 = v18;
    LH_utoa(*((_DWORD *)v5 + 10), v18, 0xAu);
    a1(a2, " (");
LABEL_18:
    a1(a2, v12);
    a1(a2, ")");
  }
  a1(a2, " ");
  LH_utoa(*((_DWORD *)v5 + 8), v18, 0xAu);
  a1(a2, v18);
  a1(a2, " ");
  LH_utoa(*((_DWORD *)v5 + 9), v18, 0xAu);
  return ((uint64_t (*)(uint64_t, char *))a1)(a2, v18);
}

uint64_t marker_copyParts(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  const char *v7;
  int v8;

  result = 1;
  if (a1 && a3)
  {
    if (!marker_hasNonConstCharPtrArg(*(_DWORD *)a1))
      return 1;
    v7 = *(const char **)(a1 + 24);
    if (v7)
      v8 = strlen(v7);
    else
      v8 = 0;
    result = heap_Alloc(a2, (v8 + 1));
    if (result)
    {
      if (v8)
        result = (uint64_t)strcpy((char *)result, *(const char **)(a1 + 24));
      else
        *(_BYTE *)result = 0;
      *(_QWORD *)(a3 + 24) = result;
      return 1;
    }
  }
  return result;
}

int *marker_freeParts(int *result, _QWORD *a2)
{
  int *v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    result = (int *)marker_hasNonConstCharPtrArg(*result);
    if ((_DWORD)result)
    {
      v4 = *((_QWORD *)v3 + 3);
      if (v4)
      {
        result = (int *)heap_Free(a2, v4);
        *((_QWORD *)v3 + 3) = 0;
      }
    }
  }
  return result;
}

uint64_t marker_sort(uint64_t a1, unint64_t a2)
{
  return ssft_qsort(a1, a2, 32, (uint64_t (*)(unint64_t, unint64_t))compare_3);
}

uint64_t compare_3(int *a1, int *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  if (a1 == a2)
    return 0;
  v2 = a1[3];
  v3 = a2[3];
  if (v2 < v3)
    return 0xFFFFFFFFLL;
  if (v2 > v3)
    return 1;
  v6 = *a2;
  if (*a1 == 0x4000)
  {
    if (v6 != 0x4000)
      return 0xFFFFFFFFLL;
    v7 = a1[4];
    v8 = a2[4];
    if (v7 | v8)
      return (v8 - v7);
    v6 = 0x4000;
  }
  else if (v6 == 0x4000)
  {
    return 1;
  }
  v9 = 0;
  v10 = 255;
  v11 = 255;
  do
  {
    v12 = prescribedOrder1[v9];
    if (v12 == *a1)
      v11 = LOWORD(prescribedOrder1[v9 + 1]);
    if (v12 == v6)
      v10 = LOWORD(prescribedOrder1[v9 + 1]);
    v9 += 2;
  }
  while (v9 != 10);
  if (v10 != 255 && v11 != 255)
  {
    v4 = (v11 - v10);
    if (v11 != v10)
      return v4;
  }
  v13 = a1[1];
  v14 = a2[1];
  if (v13 < v14)
    return 0xFFFFFFFFLL;
  if (v13 > v14)
    return 1;
  v15 = a1[2];
  v16 = a2[2];
  if (v15 <= v16)
    return v16 > v15;
  else
    return 0xFFFFFFFFLL;
}

uint64_t marker_logOutText(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  int v15;
  char *v16;

  v16 = 0;
  v15 = 0;
  if ((marker_tag2string(*(_DWORD *)a5, &v16, &v15) & 0x80000000) != 0 || !v16)
  {
    v13 = "%s MARKER_%d : posCur %d, lenCur %d";
  }
  else if ((v15 - 3) <= 1 && *(_QWORD *)(a5 + 24))
  {
    v13 = "%s MARKER_%s [%s] : posCur %u, lenCur %u";
  }
  else if (v15 == 1)
  {
    v13 = "%s MARKER_%s [%u] : posCur %u, lenCur %u";
  }
  else if (v15 == 2)
  {
    v13 = "%s MARKER_%s [%c] : posCur %u, lenCur %u";
  }
  else
  {
    v13 = "%s MARKER_%s [] : posCur %u, lenCur %u";
  }
  return log_OutText(a1, a2, a3, 0, (uint64_t)v13, v10, v11, v12, a4);
}

uint64_t ppint_marker_copyParts(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  const char *v7;
  int v8;
  const char *v9;
  int v10;

  result = 1;
  if (!a1 || !a3)
    return result;
  if (marker_hasNonConstCharPtrArg(*(_DWORD *)(a1 + 20)))
  {
    v7 = *(const char **)(a1 + 40);
    if (v7)
      v8 = strlen(v7);
    else
      v8 = 0;
    result = heap_Alloc(a2, (v8 + 1));
    if (!result)
      return result;
    if (v8)
      result = (uint64_t)strcpy((char *)result, *(const char **)(a1 + 40));
    else
      *(_BYTE *)result = 0;
    *(_QWORD *)(a3 + 40) = result;
  }
  v9 = *(const char **)(a1 + 48);
  if (v9)
  {
    v10 = strlen(v9);
    result = heap_Alloc(a2, (v10 + 1));
    if (!result)
      return result;
    if (v10)
      result = (uint64_t)strcpy((char *)result, *(const char **)(a1 + 48));
    else
      *(_BYTE *)result = 0;
    *(_QWORD *)(a3 + 48) = result;
  }
  return 1;
}

unint64_t ppint_marker_freeParts(unint64_t result, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v3 = result;
    result = marker_hasNonConstCharPtrArg(*(_DWORD *)(result + 20));
    if ((_DWORD)result)
    {
      v4 = *(_QWORD *)(v3 + 40);
      if (v4)
      {
        result = (unint64_t)heap_Free(a2, v4);
        *(_QWORD *)(v3 + 40) = 0;
      }
    }
    v5 = *(_QWORD *)(v3 + 48);
    if (v5)
    {
      result = (unint64_t)heap_Free(a2, v5);
      *(_QWORD *)(v3 + 48) = 0;
    }
  }
  return result;
}

uint64_t ttteg_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2288001025;
  result = 0;
  *a2 = &ITtteg;
  return result;
}

uint64_t ttteg_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Object;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  unsigned __int16 v17;
  int UInt;
  __int16 v19;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;
  char *__s1;
  uint64_t v25;

  v5 = 2288001031;
  if (a5)
  {
    *a5 = safeh_GetNullHandle();
    a5[1] = v9;
    __s1 = 0;
    v25 = 0;
    v22 = 0;
    v23 = 0;
    if ((InitRsrcFunction(a3, a4, &v25) & 0x80000000) == 0)
    {
      v10 = (_QWORD *)heap_Calloc(*(_QWORD **)(v25 + 8), 1, 136);
      if (v10)
      {
        v11 = (uint64_t)v10;
        *v10 = a3;
        v10[1] = a4;
        v10[15] = safeh_GetNullHandle();
        *(_QWORD *)(v11 + 128) = v12;
        Object = objc_GetObject(*(_QWORD *)(v25 + 48), (uint64_t)"SYNTHSTREAM", &v23);
        if ((Object & 0x80000000) != 0)
          goto LABEL_36;
        *(_QWORD *)(v11 + 40) = *(_QWORD *)(v23 + 8);
        Object = sub_ObjOpen(a3, a4, (uint64_t *)(v11 + 16));
        if ((Object & 0x80000000) != 0)
          goto LABEL_36;
        v14 = *(_QWORD **)(v25 + 8);
        *(_OWORD *)v21 = xmmword_1DECA1CB0;
        *(_QWORD *)&v21[16] = 0;
        if (!vector_ObjOpen(v14, (__int128 *)v21, 1, (uint64_t *)(v11 + 24)))
        {
          v11 = 0;
LABEL_35:
          v5 = 0;
          *a5 = v11;
          *((_DWORD *)a5 + 2) = 269;
          return v5;
        }
        if ((paramc_ParamGetStr(*(_QWORD *)(v25 + 40), (uint64_t)"rulesetsfrommarkup", &__s1) & 0x80000000) != 0)
        {
          *(_DWORD *)(v11 + 32) = 0;
          Object = paramc_ParamSetStr(*(_QWORD *)(v25 + 40), (uint64_t)"rulesetsfrommarkup", "0");
          if ((Object & 0x80000000) != 0)
            goto LABEL_36;
        }
        else
        {
          if (__s1)
          {
            v15 = *__s1;
            if (*__s1)
            {
              if (LH_stricmp(__s1, "true"))
                v15 = strcmp(__s1, "1") == 0;
              else
                v15 = 1;
            }
          }
          else
          {
            v15 = 0;
          }
          *(_DWORD *)(v11 + 32) = v15;
        }
        v16 = *(_QWORD *)(v25 + 40);
        *(_QWORD *)v21 = v11;
        *(_OWORD *)&v21[8] = xmmword_1EA947FB8;
        Object = paramc_ListenerAdd(v16, "rulesetsfrommarkup", v21);
        if ((Object & 0x80000000) != 0)
        {
LABEL_36:
          v5 = Object;
          ttteg_pObjClose(v11);
          return v5;
        }
        *(_DWORD *)(v11 + 112) = 0;
        if ((paramc_ParamGetStr(*(_QWORD *)(v25 + 40), (uint64_t)"clcpppipelinemode", &v22) & 0x80000000) == 0
          && v22
          && *v22)
        {
          *(_DWORD *)(v11 + 112) = 1;
        }
        else if (!*(_DWORD *)(v11 + 112))
        {
          *(_DWORD *)v21 = 0;
          Object = nuance_pcre_ObjOpen(a3, a4, v11 + 120);
          if ((Object & 0x80000000) != 0)
            goto LABEL_36;
          if ((int)paramc_ParamGetUInt(*(_QWORD *)(v25 + 40), (uint64_t)"retttmaxpcreframeblocks", (unsigned int *)v21) < 0)
            v17 = 10;
          else
            v17 = *(_WORD *)v21;
          UInt = paramc_ParamGetUInt(*(_QWORD *)(v25 + 40), (uint64_t)"retttnumframesinblock", (unsigned int *)v21);
          v19 = *(_WORD *)v21;
          if (UInt < 0)
            v19 = 10;
          nuance_pcre_Init(*(_QWORD **)(v11 + 120), *(_QWORD *)(v11 + 128), v17, v19);
          goto LABEL_34;
        }
        Object = esc_seq_init(a3, a4, (uint64_t *)(v11 + 120));
        if ((Object & 0x80000000) != 0)
          goto LABEL_36;
LABEL_34:
        Object = paramc_ParamSetInt(*(_QWORD *)(v25 + 40), (uint64_t)"enablerett", 1u);
        if ((Object & 0x80000000) == 0)
          goto LABEL_35;
        goto LABEL_36;
      }
      return 2288001034;
    }
  }
  return v5;
}

uint64_t ttteg_ObjClose(_QWORD *a1, int a2)
{
  uint64_t result;
  int Size;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  result = safeh_HandleCheck((uint64_t)a1, a2, 269, 136);
  if ((result & 0x80000000) == 0)
  {
    v7 = 0;
    v8 = 0;
    if (a1)
    {
      if ((InitRsrcFunction((_WORD *)*a1, a1[1], &v8) & 0x80000000) == 0)
      {
        Size = vector_GetSize(a1[3]);
        if (Size)
        {
          v6 = Size - 1;
          do
          {
            if (!vector_GetElemAt(a1[3], v6, &v7))
              break;
            ruleset_UnloadRules(v7);
            ruleset_ObjClose(v7);
            vector_Remove(a1[3], v6--);
          }
          while (v6 != -1);
        }
      }
    }
    ttteg_ProcessEnd(a1, a2);
    return ttteg_pObjClose((uint64_t)a1);
  }
  return result;
}

uint64_t ttteg_ResourceTypes(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 269, 136);
  if ((result & 0x80000000) == 0)
  {
    result = 0;
    *a3 = ttteg_ResourceTypes_SZ_RETTT_CONTENT_TYPES;
  }
  return result;
}

uint64_t ttteg_ResourceLoad(_WORD **a1, int a2, char *a3, const char *a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v7;
  BOOL v14;
  uint64_t Str;
  int v16;
  const char *AbsName;
  const char *Name;
  char v19;
  uint64_t Rules;
  int v21;
  uint64_t v22;
  int v24[2];
  _OWORD v25[5];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35[2];
  uint64_t v36[129];

  v36[128] = *MEMORY[0x1E0C80C00];
  v34 = 0;
  *(_QWORD *)v35 = 0;
  v7 = 2288001031;
  v33 = 0;
  v32 = 0;
  if (!a3 || !a7)
    return v7;
  if (a4)
  {
    v14 = a6 != 0;
    if (!a5 && a6)
      return v7;
  }
  else
  {
    if (!a5 || !a6)
      return v7;
    v14 = 1;
  }
  Str = safeh_HandleCheck((uint64_t)a1, a2, 269, 136);
  if ((Str & 0x80000000) != 0)
    return Str;
  v31 = 0;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v26 = 0u;
  memset(v25, 0, sizeof(v25));
  *(_QWORD *)a7 = 0;
  *(_DWORD *)(a7 + 8) = 0;
  if ((InitRsrcFunction(*a1, (int)a1[1], v35) & 0x80000000) != 0)
    return v7;
  if (a4)
  {
    if (*a4)
    {
      v36[0] = 0;
      if (vector_GetElemAt((uint64_t)a1[3], 0, v36))
      {
        v16 = 0;
        while (!*(_DWORD *)(v36[0] + 44))
        {
          if (*(_QWORD *)(v36[0] + 24))
          {
            Name = (const char *)ruleset_GetName(v36[0]);
            if (!strcmp(Name, a4))
              return 2288001048;
            if (*(_QWORD *)(v36[0] + 32))
            {
              AbsName = (const char *)ruleset_GetAbsName(v36[0]);
LABEL_18:
              if (!strcmp(AbsName, a4))
                return 2288001048;
            }
          }
          if (!vector_GetElemAt((uint64_t)a1[3], (unsigned __int16)++v16, v36))
            goto LABEL_25;
        }
        AbsName = (const char *)ruleset_GetName(v36[0]);
        goto LABEL_18;
      }
    }
  }
LABEL_25:
  v19 = !v14;
  if (!a5)
    v19 = 1;
  if ((v19 & 1) == 0)
  {
    v33 = a5;
    v32 = a6;
LABEL_36:
    v22 = ruleset_ObjOpen(*a1, (uint64_t)a1[1], (uint64_t)a1[15], (uint64_t)a1[16], (uint64_t)a1[2], (uint64_t)v25);
    if ((v22 & 0x80000000) == 0)
    {
      Rules = ruleset_LoadRules((_WORD **)v25, a4, 0, a3, v33, v32);
      if ((Rules & 0x80000000) == 0)
      {
        if (vector_Add((uint64_t)a1[3], v25) == 1)
        {
          *(_QWORD *)a7 = v26;
          *(_DWORD *)(a7 + 8) = 300;
          goto LABEL_45;
        }
        Rules = 2288001034;
      }
      ruleset_ObjClose((uint64_t)v25);
      goto LABEL_45;
    }
LABEL_41:
    Rules = v22;
    goto LABEL_45;
  }
  *(_QWORD *)v24 = 0;
  bzero(v36, 0x400uLL);
  Rules = brk_DataOpenEx(*(_QWORD *)(*(_QWORD *)v35 + 24), (uint64_t)a4, 1, (uint64_t)&v34);
  if (strstr(a3, ";loader=broker") && (Rules & 0x80000000) != 0)
  {
    Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)v35 + 40), (uint64_t)"langcode", v24);
    if ((Str & 0x80000000) == 0)
    {
      v21 = brokeraux_ComposeBrokerString(*(uint64_t *)v35, a4, 0, 1, *(char **)v24, 0, 0, (char *)v36, 0x400uLL);
      if (v21 < 0)
      {
        Rules = v21 | 0x88602000;
        goto LABEL_45;
      }
      Rules = brk_DataOpenEx(*(_QWORD *)(*(_QWORD *)v35 + 24), (uint64_t)v36, 0, (uint64_t)&v34);
      goto LABEL_34;
    }
    return Str;
  }
LABEL_34:
  if ((Rules & 0x80000000) == 0)
  {
    v22 = brk_DataMapEx(*(_QWORD *)(*(_QWORD *)v35 + 24), v34, 0, (uint64_t)&v32, (uint64_t)&v33);
    if ((v22 & 0x80000000) != 0)
      goto LABEL_41;
    goto LABEL_36;
  }
LABEL_45:
  if (v33)
  {
    brk_DataUnmap(*(_QWORD *)(*(_QWORD *)v35 + 24), v34, v33);
    v33 = 0;
  }
  if (v34)
    brk_DataClose(*(_QWORD *)(*(_QWORD *)v35 + 24), v34);
  return Rules;
}

uint64_t ttteg_ResourceUnload(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;

  v11 = 0;
  v7 = safeh_HandleCheck(a1, a2, 269, 136);
  if ((v7 & 0x80000000) != 0)
    return v7;
  v7 = safeh_HandleCheck(a3, a4, 300, 8);
  if ((v7 & 0x80000000) != 0)
    return v7;
  v8 = 2288002061;
  if (!vector_GetElemAt(*(_QWORD *)(a1 + 24), 0, &v11))
    return v8;
  v9 = 0;
  while (*(_QWORD *)(v11 + 80) != a3)
  {
    if (!vector_GetElemAt(*(_QWORD *)(a1 + 24), ++v9, &v11))
      return v8;
  }
  v7 = ruleset_UnloadRules(v11);
  if ((v7 & 0x80000000) != 0)
    return v7;
  v8 = ruleset_ObjClose(v11);
  if ((v8 & 0x80000000) == 0)
    vector_Remove(*(_QWORD *)(a1 + 24), v9);
  return v8;
}

uint64_t ttteg_ProcessStart(_WORD **a1, int a2, _WORD *a3, _WORD *a4)
{
  uint64_t Int;
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v14;
  uint64_t v15;

  v15 = 0;
  v14 = 0;
  Int = 2288001031;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 269, 136) & 0x80000000) != 0)
    return 2288001032;
  if ((InitRsrcFunction(*a1, (int)a1[1], &v15) & 0x80000000) == 0)
  {
    v9 = 0;
    a1[10] = a3;
    a1[11] = a4;
    do
    {
      v10 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, char *, _QWORD, _QWORD, _WORD **))a1[5] + 8))(a3, a4, 134, ttteg_ProcessStart_szInput[v9], 0, 0, a1 + 12);
      if ((v10 & 0x80000000) == 0)
        break;
    }
    while (v9++ != 6);
    if (v10 < 0)
      a1[12] = 0;
    Int = paramc_ParamGetInt(*(_QWORD *)(v15 + 40), (uint64_t)"enablerett", &v14);
    if ((Int & 0x80000000) != 0)
      goto LABEL_17;
    if (v14 == 1)
    {
      v12 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, const char *, _QWORD, _QWORD, _WORD **))a1[5] + 8))(a3, a4, 134, "text/plain;charset=utf-8",
              0,
              0,
              a1 + 6);
      if ((v12 & 0x80000000) != 0)
      {
        Int = v12;
LABEL_17:
        ttteg_ProcessEnd(a1, a2);
        return Int;
      }
      Int = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, const char *, _QWORD, uint64_t, _WORD **))a1[5] + 8))(a3, a4, 134, "text/plain;charset=utf-8",
              0,
              1,
              a1 + 8);
      if ((Int & 0x80000000) != 0)
        goto LABEL_17;
    }
    else
    {
      a1[6] = 0;
      a1[8] = 0;
    }
  }
  return Int;
}

uint64_t ttteg_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v7;
  uint64_t Int;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Str;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int Size;
  char *v23;
  unsigned int v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  char *v39;
  int v40;
  uint64_t v41;
  size_t v43;
  uint64_t v44;
  int v45;
  _WORD **v46;
  size_t __n;
  char *__s;
  void *v49;
  void *__src;
  uint64_t v51;
  unint64_t v52;

  v52 = 0;
  __src = 0;
  v51 = 0;
  __s = 0;
  v49 = 0;
  v46 = 0;
  __n = 0;
  v45 = 0;
  v7 = safeh_HandleCheck(a1, a2, 269, 136);
  if ((v7 & 0x80000000) != 0)
    return v7;
  if ((InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v52) & 0x80000000) == 0)
  {
    Int = paramc_ParamGetInt(*(_QWORD *)(v52 + 40), (uint64_t)"enablerett", &v45);
    if ((Int & 0x80000000) != 0)
      goto LABEL_39;
    if (!*(_QWORD *)(a1 + 48))
    {
      Str = 0;
LABEL_50:
      v15 = 1;
      goto LABEL_51;
    }
    Str = 0;
    v15 = 1;
    if (!*(_QWORD *)(a1 + 64) || !v45)
      goto LABEL_51;
    *a5 = 0;
    v7 = (*(uint64_t (**)(_QWORD, _QWORD, char *, size_t *))(*(_QWORD *)(a1 + 40) + 144))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), (char *)&__n + 4, &__n);
    if ((v7 & 0x80000000) == 0)
    {
      v15 = *(_DWORD *)(a1 + 112) | __n;
      if (!v15)
      {
        Str = 0;
LABEL_51:
        *a5 = v15;
        return Str;
      }
      v7 = (*(uint64_t (**)(_QWORD, _QWORD, void **, char *))(*(_QWORD *)(a1 + 40) + 88))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), &__src, (char *)&__n + 4);
      if ((v7 & 0x80000000) == 0)
      {
        if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v52 + 32)))
        {
          log_OutTraceTuningData(*(uint64_t ***)(v52 + 32), 4, (uint64_t)"%s%s", v16, v17, v18, v19, v20, "BEG");
          log_OutTraceTuningDataBinary(*(_QWORD *)(v52 + 32), 5, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
            (uint64_t)__src,
            HIDWORD(__n));
        }
        v21 = (char *)heap_Alloc(*(_QWORD *)(v52 + 8), (HIDWORD(__n) + 1));
        __s = v21;
        if (!v21)
          return 2288001034;
        if (__src)
        {
          memcpy(v21, __src, HIDWORD(__n));
          v21 = __s;
        }
        v21[HIDWORD(__n)] = 0;
        Int = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), HIDWORD(__n));
        if ((Int & 0x80000000) == 0)
        {
          __src = 0;
          Str = paramc_ParamGetStr(*(_QWORD *)(v52 + 40), (uint64_t)"langcode", &v51);
          if ((Str & 0x80000000) == 0)
          {
            log_OutTraceTuningData(*(uint64_t ***)(v52 + 32), 7, (uint64_t)"%s%s %s%s %s%s", v9, v10, v11, v12, v13, "BEG");
            Size = vector_GetSize(*(_QWORD *)(a1 + 24));
            v23 = 0;
            if (Size)
            {
              v24 = Size - 1;
              while (1)
              {
                v46 = 0;
                if (vector_GetElemAt(*(_QWORD *)(a1 + 24), v24, &v46))
                {
                  if (*((_DWORD *)v46 + 11))
                  {
                    if (ruleset_GetEnabledForLng((uint64_t)v46, v51) == 1)
                    {
                      v25 = __s;
                      __s = v23;
                      Str = ruleset_Rewrite(v46, v25, (uint64_t *)&__s);
                      v23 = v25;
                      if ((Str & 0x80000000) != 0)
                        break;
                    }
                  }
                }
                if (--v24 == -1)
                  goto LABEL_27;
              }
            }
            else
            {
LABEL_27:
              v26 = *(_QWORD *)(a1 + 96);
              if (v26)
              {
                v9 = strlen(__s);
                if ((_DWORD)v9)
                  (*(void (**)(uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 40) + 176))(v26, *(_QWORD *)(a1 + 104), __s);
              }
              log_OutTraceTuningData(*(uint64_t ***)(v52 + 32), 7, (uint64_t)"%s%s %s%u %s%s", v9, v10, v11, v12, v13, "END");
              log_OutTraceTuningData(*(uint64_t ***)(v52 + 32), 7, (uint64_t)"%s%s %s%s %s%s", v27, v28, v29, v30, v31, "BEG");
              v46 = 0;
              v32 = vector_GetSize(*(_QWORD *)(a1 + 24));
              if (v32)
              {
                v38 = v32 - 1;
                do
                {
                  v46 = 0;
                  if (vector_GetElemAt(*(_QWORD *)(a1 + 24), v38, &v46))
                  {
                    if (!*((_DWORD *)v46 + 11) && ruleset_GetEnabledForLng((uint64_t)v46, v51) == 1)
                    {
                      v39 = __s;
                      __s = v23;
                      Str = ruleset_Rewrite(v46, v39, (uint64_t *)&__s);
                      v23 = v39;
                      if ((Str & 0x80000000) != 0)
                        break;
                    }
                  }
                  --v38;
                }
                while (v38 != -1);
              }
              log_OutTraceTuningData(*(uint64_t ***)(v52 + 32), 7, (uint64_t)"%s%s %s%u %s%s", v33, v34, v35, v36, v37, "END");
              if ((Str & 0x80000000) == 0)
              {
                if (__s)
                {
                  v43 = strlen(__s);
                  if ((_DWORD)v43)
                  {
                    v44 = (*(uint64_t (**)(_QWORD, _QWORD, void **, size_t))(*(_QWORD *)(a1 + 40) + 112))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), &v49, v43);
                    if ((v44 & 0x80000000) == 0)
                    {
                      memcpy(v49, __s, v43);
                      _NashvilleFEModule_ReportModifiedText(v52, v49, v43);
                      log_OutTraceTuningDataBinary(*(_QWORD *)(v52 + 32), 6, (uint64_t)&byte_1DEBD87CE, (uint64_t)"text/plain;charset=utf-8",
                        (uint64_t)v49,
                        v43);
                      v44 = (*(uint64_t (**)(_QWORD, _QWORD, size_t))(*(_QWORD *)(a1 + 40) + 120))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), v43);
                    }
                    Str = v44;
                  }
                }
              }
              v25 = v23;
            }
            goto LABEL_41;
          }
LABEL_40:
          v25 = 0;
LABEL_41:
          log_OutTraceTuningData(*(uint64_t ***)(v52 + 32), 4, (uint64_t)"%s%s %s%u", v9, v10, v11, v12, v13, "END");
          if (v25)
            heap_Free(*(_QWORD **)(v52 + 8), (uint64_t)v25);
          if (__s)
            heap_Free(*(_QWORD **)(v52 + 8), (uint64_t)__s);
          if (!*(_DWORD *)(a1 + 112))
          {
            v40 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
            if (v40 >= 0)
              Str = Str;
            else
              Str = v40;
            *(_QWORD *)(a1 + 64) = safeh_GetNullHandle();
            *(_QWORD *)(a1 + 72) = v41;
          }
          goto LABEL_50;
        }
LABEL_39:
        Str = Int;
        goto LABEL_40;
      }
    }
    return v7;
  }
  return 2288001031;
}

uint64_t ttteg_ProcessEnd(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t NullHandle;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;

  v3 = safeh_HandleCheck((uint64_t)a1, a2, 269, 136);
  if ((v3 & 0x80000000) == 0)
  {
    NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[12], a1[13], NullHandle, v5))
    {
      v6 = (*(uint64_t (**)(_QWORD, _QWORD))(a1[5] + 72))(a1[12], a1[13]);
      if (v6 >= 0)
        v3 = v3;
      else
        v3 = v6;
    }
    a1[12] = safeh_GetNullHandle();
    a1[13] = v7;
    v8 = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[6], a1[7], v8, v9))
    {
      v10 = (*(uint64_t (**)(_QWORD, _QWORD))(a1[5] + 72))(a1[6], a1[7]);
      if (v10 >= 0)
        v3 = v3;
      else
        v3 = v10;
    }
    a1[6] = safeh_GetNullHandle();
    a1[7] = v11;
    v12 = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[8], a1[9], v12, v13))
    {
      v14 = (*(uint64_t (**)(_QWORD, _QWORD))(a1[5] + 72))(a1[8], a1[9]);
      if (v14 >= 0)
        v3 = v3;
      else
        v3 = v14;
    }
    a1[8] = safeh_GetNullHandle();
    a1[9] = v15;
  }
  return v3;
}

uint64_t ttteg_ParamLearnChange(uint64_t a1, char *__s1, char *a3)
{
  int v5;

  if (!strcmp(__s1, "rulesetsfrommarkup"))
  {
    if (a3)
    {
      v5 = *a3;
      if (*a3)
      {
        if (LH_stricmp(a3, "true"))
          v5 = strcmp(a3, "1") == 0;
        else
          v5 = 1;
      }
    }
    else
    {
      v5 = 0;
    }
    *(_DWORD *)(a1 + 32) = v5;
  }
  return 0;
}

uint64_t ttteg_pObjClose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v1 = 2288001031;
  v9 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v9) & 0x80000000) == 0)
  {
    v3 = *(_QWORD *)(v9 + 40);
    v7 = a1;
    v8 = xmmword_1EA947FB8;
    paramc_ListenerRemove(v3, "rulesetsfrommarkup", (__int128 *)&v7);
    if (*(_QWORD *)(a1 + 40))
      objc_ReleaseObject(*(_QWORD *)(v9 + 48), (uint64_t)"SYNTHSTREAM");
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
      sub_ObjClose(v4);
    if (*(_DWORD *)(a1 + 112))
    {
      esc_seq_deinit(*(_WORD **)a1, *(_QWORD *)(a1 + 8), *(_QWORD **)(a1 + 120), *(_QWORD *)(a1 + 128));
    }
    else
    {
      nuance_pcre_DeInit(*(_QWORD **)(a1 + 120), *(_QWORD *)(a1 + 128));
      nuance_pcre_ObjClose(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128));
    }
    v5 = *(_QWORD *)(a1 + 24);
    if (v5)
      vector_ObjClose(v5);
    heap_Free(*(_QWORD **)(v9 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t ruleset_ReadBinaryRules(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  int StringZ;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char *v50;
  int v51;
  int v53;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61[2];
  int v62;
  int v63;
  unsigned __int8 v64;
  int v65[2];
  uint64_t v66;
  char __s[4];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v65 = 0;
  v66 = 0;
  v3 = 2288001031;
  v64 = 0;
  v62 = 0;
  v63 = 0;
  v60 = 0;
  *(_QWORD *)v61 = 0;
  v58 = 0;
  v59 = 0;
  if (!a1 || !a2 || !a3 || (InitRsrcFunction((_WORD *)*a1, a1[1], &v66) & 0x80000000) != 0)
    return v3;
  v7 = ssftriff_reader_ObjOpenEx((_WORD *)*a1, a1[1], 4, (const char *)a1[3], a2, a3, "USRT", 1031, (uint64_t *)v65);
  if ((v7 & 0x80000000) != 0)
    return v7;
  LODWORD(v12) = 0;
  v13 = "RETTT";
  do
  {
    v17 = ssftriff_reader_OpenChunk(*(uint64_t *)v65, &v63, (unsigned int *)&v62, v61, v8, v9, v10, v11);
    if (v17 < 0)
      break;
    if (v63 ^ 0x474E414C | v64)
    {
      if (v63 ^ 0x45505954 | v64)
      {
        if (v63 ^ 0x52455652 | v64)
        {
          if (v63 ^ 0x454C5552 | v64)
          {
            log_OutText(*(_QWORD *)(v66 + 32), (uint64_t)v13, 4, 0, (uint64_t)"ruleset_ReadBinaryRules unknown chunk type: '%s'", v9, v10, v11, (uint64_t)&v63);
          }
          else
          {
            if (!(_DWORD)v12)
            {
              _Gryphon_ReportMissingPCREVersion();
              v17 = -2006966268;
              break;
            }
            v30 = (uint64_t)v13;
            v31 = *(_QWORD *)v61;
            v32 = **(_DWORD **)v61;
            *(_QWORD *)v61 += 4;
            v33 = *(unsigned int *)(v31 + 4);
            *(_QWORD *)v61 = v31 + 8;
            v62 -= 8;
            v34 = heap_Calloc(*(_QWORD **)(v66 + 8), v32, 8);
            v17 = PCRE_SerializeAndDecodeBatch(a1[13], a1[14], *(uint64_t *)v61, v32, v34);
            if (v17 < 0)
              break;
            v35 = *(_QWORD *)v61 + v33;
            *(_QWORD *)v61 += v33;
            v36 = v62 - v33;
            v62 -= v33;
            if ((v33 & 3) != 0)
            {
              v37 = 4 - (v33 & 3);
              *(_QWORD *)v61 = v35 + v37;
              v62 = v36 - v37;
            }
            if ((_DWORD)v32)
            {
              v38 = (uint64_t *)v34;
              while (1)
              {
                *(_DWORD *)__s = 0;
                StringZ = ssftriff_reader_ReadStringZ(*(uint64_t *)v65, *(uint64_t *)v61, v62, 0, 0, (unsigned int *)__s);
                if ((StringZ & 0x1FFF) != 9)
                {
                  v17 = StringZ;
                  goto LABEL_49;
                }
                v40 = (_BYTE *)heap_Alloc(*(_QWORD *)(v66 + 8), (*(_DWORD *)__s + 1));
                if (!v40)
                {
                  v17 = -2006966262;
                  goto LABEL_49;
                }
                v41 = (uint64_t)v40;
                *v40 = 0;
                v17 = ssftriff_reader_ReadStringZ(*(uint64_t *)v65, *(uint64_t *)v61, v62, 0, v40, (unsigned int *)__s);
                if (v17 < 0)
                {
                  heap_Free(*(_QWORD **)(v66 + 8), v41);
                  goto LABEL_49;
                }
                v42 = *(_QWORD *)v61 + *(unsigned int *)__s;
                v60 = v41;
                *(_QWORD *)v61 = v42;
                v43 = v62 - *(_DWORD *)__s;
                v62 -= *(_DWORD *)__s;
                if ((__s[0] & 3) != 0)
                {
                  v44 = 4 - (__s[0] & 3);
                  *(_QWORD *)v61 = v42 + v44;
                  v62 = v43 - v44;
                }
                PCRE_AttachPattern(a1[13], a1[14], *v38, &v58);
                if (!vector_Add(a1[10], &v58))
                  break;
                PCRE_FreePattern(v58, v59);
                heap_Free(*(_QWORD **)(v66 + 8), v41);
                ++v38;
                if (!--v32)
                  goto LABEL_49;
              }
              log_OutPublic(*(_QWORD *)(v66 + 32), v30, 11023, 0, v45, v46, v47, v48, v56);
              v17 = -2006966266;
            }
LABEL_49:
            heap_Free(*(_QWORD **)(v66 + 8), v34);
            v13 = (const char *)v30;
          }
        }
        else
        {
          *(_WORD *)__s = 0;
          LOWORD(v57) = 0;
          v28 = *(_QWORD *)v61;
          v12 = (unsigned __int16)**(_WORD **)v61;
          *(_QWORD *)v61 += 2;
          v29 = (unsigned __int16)**(_WORD **)v61;
          *(_QWORD *)v61 = v28 + 4;
          PCRE_Version(a1[13], a1[14], (uint64_t)__s, (uint64_t)&v57);
          _Gryphon_ReportPCREVersion(v12, *(unsigned __int16 *)__s, v29, (unsigned __int16)v57);
          if ((_DWORD)v12 != *(unsigned __int16 *)__s)
            v17 = -2006966268;
        }
      }
      else
      {
        __s[0] = 0;
        v57 = 1024;
        v25 = ssftriff_reader_ReadStringZ(*(uint64_t *)v65, *(uint64_t *)v61, v62, 0, __s, &v57);
        if (v25 < 0 || !v62)
          goto LABEL_23;
        v57 = 1024;
        v17 = -2006966265;
        if (!a1[8])
        {
          v26 = strlen(__s);
          v27 = (char *)heap_Alloc(*(_QWORD *)(v66 + 8), (v26 + 1));
          a1[8] = (uint64_t)v27;
          if (!v27)
            goto LABEL_44;
          strcpy(v27, __s);
LABEL_23:
          v17 = v25;
        }
      }
    }
    else
    {
      __s[0] = 0;
      v57 = 1024;
      v17 = ssftriff_reader_ReadStringZ(*(uint64_t *)v65, *(uint64_t *)v61, v62, 0, __s, &v57);
      if ((v17 & 0x80000000) == 0 && v62)
      {
        v57 = 1024;
        if (!ruleset_IsLng(a1, __s))
        {
          v22 = *(_QWORD *)(v66 + 32);
          v23 = (uint64_t)v13;
          v24 = 11022;
          goto LABEL_41;
        }
        if (a1[7])
        {
          v22 = *(_QWORD *)(v66 + 32);
          v23 = (uint64_t)v13;
          v24 = 11021;
LABEL_41:
          log_OutPublic(v22, v23, v24, 0, v18, v19, v20, v21, v56);
          v17 = -2006966265;
          goto LABEL_50;
        }
        v49 = strlen(__s);
        v50 = (char *)heap_Alloc(*(_QWORD *)(v66 + 8), (v49 + 1));
        a1[7] = (uint64_t)v50;
        if (!v50)
        {
LABEL_44:
          v17 = -2006966262;
          goto LABEL_50;
        }
        strcpy(v50, __s);
      }
    }
LABEL_50:
    v51 = ssftriff_reader_CloseChunk(*(uint64_t *)v65);
    if (v51 < 0 && v17 > -1)
      v17 = v51;
  }
  while ((v17 & 0x80000000) == 0);
  if ((v17 & 0x1FFF) == 0x14)
    v3 = 0;
  else
    v3 = v17;
  if (*(_QWORD *)v65)
  {
    v53 = ssftriff_reader_ObjClose(*(_QWORD **)v65, v14, v15, v16, v8, v9, v10, v11);
    if (v53 >= 0 || (int)v3 <= -1)
      return v3;
    else
      return v53;
  }
  return v3;
}

uint64_t rule_Compile(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _BYTE v24[256];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  *(_DWORD *)(a5 + 16) = 1;
  *a6 = PCRE_CompilePatternWithOptions(a1, a2, a4, a5, (uint64_t)v24, 256, (uint64_t)&v23 + 4, (int *)&v23);
  a6[1] = v11;
  PCRE_Adapter2PCREOptions(a1, a2, a5);
  if (*a6)
    return v23;
  v16 = 2288001024;
  log_OutPublic(*(_QWORD *)(a3 + 32), (uint64_t)"RETTT", 11006, "%s%s%s%s%s%d", v12, v13, v14, v15, "regularExpression");
  log_OutTraceTuningData(*(uint64_t ***)(a3 + 32), 2, (uint64_t)"%s%s %s%s %s%d %s%s %s%d %s%s %s%u", v17, v18, v19, v20, v21, "END");
  return v16;
}

BOOL ruleset_IsLng(uint64_t *a1, char *__s)
{
  size_t v4;
  int v6;

  v6 = 0;
  if (!__s)
    return 0;
  v4 = strlen(__s);
  return (int)PCRE_Exec(a1[13], a1[14], a1[19], a1[20], (uint64_t)__s, v4, 0, 0, 0, &v6) >= 0;
}

uint64_t ruleset_ScanRuleLine(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *i;
  int v19;
  uint64_t v20;
  uint64_t v22;
  char *v23;
  int v24;
  _BOOL4 v25;
  int v26;
  BOOL v27;
  _BYTE *j;
  int v29;
  int v30;
  int v33;
  _BYTE *v34;
  int v35;
  _BOOL4 v36;
  BOOL v37;
  char v38;
  _BYTE *v39;
  int v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  const char *v47;

  v8 = 2288001031;
  if (!a2 || !a3 || !a5)
    return v8;
  *a3 = 0;
  *a5 = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"RETTT", 5, 0, (uint64_t)"ruleset_ScanRuleLine: '%s'", a6, a7, a8, a2);
  for (i = (unsigned __int8 *)(a2 + 1); ; ++i)
  {
    v19 = *(i - 1);
    if (v19 != 9 && v19 != 32)
      break;
  }
  if (!*(i - 1))
  {
    v20 = *(_QWORD *)(a1 + 32);
    goto LABEL_50;
  }
  if (v19 == 92 || (v19 - 48) <= 9)
  {
    v20 = *(_QWORD *)(a1 + 32);
    v22 = 11015;
    v23 = 0;
    goto LABEL_51;
  }
  *a3 = (uint64_t)i;
  v24 = *i;
  v25 = *i == 0;
  if (*i && v24 != v19)
  {
    do
    {
      if (v24 == 92 && i[1])
        ++i;
      v26 = *++i;
      v24 = v26;
      v25 = v26 == 0;
      if (v26)
        v27 = v24 == v19;
      else
        v27 = 1;
    }
    while (!v27);
  }
  if (v25)
  {
LABEL_26:
    v20 = *(_QWORD *)(a1 + 32);
    goto LABEL_50;
  }
  *i = 0;
  for (j = i + 4; ; ++j)
  {
    v29 = (char)*(j - 3);
    v30 = *(j - 3);
    if (v29 == 45 || v30 == 0)
      break;
    if (v29 > 108)
    {
      switch(v29)
      {
        case 'm':
          *(_DWORD *)(a4 + 4) = 1;
          continue;
        case 's':
          *(_DWORD *)(a4 + 8) = 1;
          continue;
        case 'x':
          *(_DWORD *)(a4 + 12) = 1;
          continue;
      }
      goto LABEL_43;
    }
    if (v29 != 9 && v29 != 32)
    {
      if (v29 == 105)
      {
        *(_DWORD *)a4 = 1;
        continue;
      }
LABEL_43:
      log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"RETTT", 11016, "%s%c", v14, v15, v16, v17, "option");
      continue;
    }
  }
  while (v30 == 9 || v30 == 32)
  {
    LOBYTE(v30) = *(j - 2);
    ++j;
  }
  if (!(_BYTE)v30)
  {
    v20 = *(_QWORD *)(a1 + 32);
    goto LABEL_50;
  }
  if (strncmp(j - 3, "-->", 3uLL))
  {
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"RETTT", 11011, "%s%s", v14, v15, v16, v17, "separator");
    return v8;
  }
  while (1)
  {
    v33 = *j;
    if (v33 != 9 && v33 != 32)
      break;
    ++j;
  }
  if (!*j)
  {
    v20 = *(_QWORD *)(a1 + 32);
LABEL_50:
    v47 = "message";
    v23 = "%s%s";
    v22 = 11026;
LABEL_51:
    log_OutPublic(v20, (uint64_t)"RETTT", v22, v23, v14, v15, v16, v17, v47);
    return v8;
  }
  if (v33 == 34)
    v34 = j + 1;
  else
    v34 = j;
  if (v33 == 34)
    v35 = 34;
  else
    v35 = 32;
  *a5 = v34;
  v36 = *v34 == 0;
  if (*v34)
    v37 = v35 == (char)*v34;
  else
    v37 = 1;
  if (v37)
  {
    v39 = v34;
  }
  else
  {
    v38 = *v34;
    v39 = v34;
    do
    {
      if (v38 == 92 && v39[1])
        ++v39;
      v41 = (char)*++v39;
      v40 = v41;
      v38 = v41;
      v36 = v41 == 0;
      if (v41)
        v42 = v35 == v40;
      else
        v42 = 1;
    }
    while (!v42);
  }
  if (v33 != 34 && v36)
  {
    v43 = *(_QWORD *)(a1 + 32);
    v44 = *a3;
    goto LABEL_95;
  }
  if (v36)
    goto LABEL_26;
  *v39 = 0;
  v45 = v39 + 1;
  while (2)
  {
    v46 = *v45;
    if (v46 <= 0x1F)
    {
      if (v46 != 9)
      {
        if (!*v45)
          goto LABEL_94;
        goto LABEL_93;
      }
      goto LABEL_89;
    }
    if (v46 == 32)
    {
LABEL_89:
      ++v45;
      continue;
    }
    break;
  }
  if (v46 == 35)
    goto LABEL_94;
LABEL_93:
  log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"RETTT", 11018, "%s%s", v14, v15, v16, v17, "trailingString");
LABEL_94:
  v43 = *(_QWORD *)(a1 + 32);
  v44 = *a3;
LABEL_95:
  log_OutText(v43, (uint64_t)"RETTT", 5, 0, (uint64_t)"ruleset_ScanRuleLine:  re = '%s'; tgt = '%s'",
    v15,
    v16,
    v17,
    v44);
  return 0;
}

uint64_t ruleset_ReadHeader(uint64_t *a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 IsSectionHeader;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  char *p_s;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *i;
  int v39;
  char *v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t j;
  int v50;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char *v58;
  const char *v59;
  int v60;
  uint64_t v61;
  uint64_t k;
  int v63;
  char *v64;
  unsigned int v65;
  int v66[2];
  char __s;
  _BYTE v68[1039];

  *(_QWORD *)&v68[1023] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v66 = 0;
  if (!a1 || !a2 || !a3 || (InitRsrcFunction((_WORD *)*a1, a1[1], v66) & 0x80000000) != 0)
    return 2288001031;
  if ((ruleset_ReadDataLine(a1, *(uint64_t *)v66, a2, a3, a4, &__s, v8, v9) & 0x80000000) != 0)
  {
LABEL_8:
    v19 = 11020;
    goto LABEL_9;
  }
  while (1)
  {
    IsSectionHeader = ruleset_IsSectionHeader((unsigned __int8 *)&__s, "header");
    v17 = ruleset_ReadDataLine(a1, *(uint64_t *)v66, a2, a3, a4, &__s, v15, v16);
    v18 = v17;
    if (IsSectionHeader)
      break;
    if ((v17 & 0x80000000) != 0)
      goto LABEL_8;
  }
  if ((v17 & 0x80000000) != 0)
    goto LABEL_20;
  if (ruleset_IsSectionHeader((unsigned __int8 *)&__s, 0))
    goto LABEL_14;
  v31 = "RETTT";
  while (2)
  {
    v32 = *(_QWORD *)v66;
    p_s = &__s;
    log_OutText(*(_QWORD *)(*(_QWORD *)v66 + 32), (uint64_t)v31, 4, 0, (uint64_t)"ruleset_ScanHeaderLine: '%s'", v21, v22, v23, (uint64_t)&__s);
    for (i = v68; ; ++i)
    {
      v39 = *p_s;
      if (v39 != 9 && v39 != 32)
        break;
      ++p_s;
    }
    v40 = p_s;
    if (!*p_s)
    {
      v41 = *(_QWORD *)(v32 + 32);
LABEL_49:
      log_OutPublic(v41, (uint64_t)v31, 11026, "%s%s", v34, v35, v36, v37, "message");
      goto LABEL_50;
    }
    while (1)
    {
      if (!(_BYTE)v39)
      {
LABEL_41:
        v41 = *(_QWORD *)(v32 + 32);
        goto LABEL_49;
      }
      if (v39 == 32)
        break;
      if (v39 == 61)
      {
        *v40 = 0;
        v44 = v40 + 1;
LABEL_45:
        while (1)
        {
          v45 = *v44;
          if (v45 != 9 && v45 != 32)
            break;
          ++v44;
        }
        if (!*v44)
        {
          v41 = *(_QWORD *)(v32 + 32);
          goto LABEL_49;
        }
        for (j = strlen(v44); ; v44[j] = 0)
        {
          v50 = v44[--j];
          if (v50 != 32 && v50 != 9)
            break;
        }
        log_OutText(*(_QWORD *)(v32 + 32), (uint64_t)v31, 5, 0, (uint64_t)"ruleset_ScanHeaderLine:  key = '%s'; val = '%s'",
          v46,
          v47,
          v48,
          (uint64_t)p_s);
        v52 = LH_stricmp(p_s, "language");
        if (v52 || !ruleset_IsLng(a1, v44))
        {
LABEL_65:
          v59 = v31;
          if (!LH_stricmp(p_s, "type"))
          {
            if (a1[8])
              goto LABEL_78;
            v60 = strlen(v44);
            v61 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v66 + 8), (v60 + 1), 1);
            a1[8] = v61;
            if (!v61)
              goto LABEL_76;
            if (v60)
            {
              for (k = 0; k != v60; ++k)
                *(_BYTE *)(a1[8] + k) = ssft_tolower(v44[k]);
            }
          }
          v31 = v59;
          if (LH_stricmp(p_s, "type_out"))
            goto LABEL_50;
          if (!a1[9])
          {
            v63 = strlen(v44);
            v64 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)v66 + 8), (v63 + 1), 1);
            a1[9] = (uint64_t)v64;
            if (v64)
            {
              strcpy(v64, v44);
              goto LABEL_50;
            }
            goto LABEL_76;
          }
        }
        else
        {
          if (!a1[7])
          {
            v57 = strlen(v44);
            v58 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)v66 + 8), (v57 + 1));
            a1[7] = (uint64_t)v58;
            if (v58)
            {
              strcpy(v58, v44);
              goto LABEL_65;
            }
LABEL_76:
            v18 = 2288001034;
            goto LABEL_20;
          }
          log_OutPublic(*(_QWORD *)(*(_QWORD *)v66 + 32), (uint64_t)"RETTT", 11021, 0, v53, v54, v55, v56, v65);
        }
LABEL_78:
        v18 = 2288001031;
        goto LABEL_20;
      }
      v42 = *++v40;
      LOBYTE(v39) = v42;
      ++i;
    }
    *v40 = 0;
    while (1)
    {
      v43 = *i;
      if (v43 > 0x1F)
        break;
      if (v43 != 9)
      {
        if (!*i)
          goto LABEL_41;
        goto LABEL_75;
      }
LABEL_38:
      ++i;
    }
    if (v43 == 32)
      goto LABEL_38;
    if (v43 == 61)
    {
      v44 = i + 1;
      goto LABEL_45;
    }
LABEL_75:
    log_OutPublic(*(_QWORD *)(v32 + 32), (uint64_t)v31, 11011, "%s%s", v34, v35, v36, v37, "separator");
LABEL_50:
    v18 = ruleset_ReadDataLine(a1, *(uint64_t *)v66, a2, a3, a4, &__s, v12, v13);
    if ((v18 & 0x80000000) == 0)
    {
      if (ruleset_IsSectionHeader((unsigned __int8 *)&__s, 0))
      {
LABEL_14:
        v24 = strlen(&__s);
        v25 = (*a2)--;
        v26 = (*a3)++;
        v27 = *(unsigned __int8 *)(v25 - 2);
        v28 = v27 == 13;
        if (v27 == 13)
          v29 = v26 + 2;
        else
          v29 = v26 + 1;
        v30 = -2;
        if (!v28)
          v30 = -1;
        *a2 = v25 + v30 - v24;
        *a3 = v29 + v24;
        --*a4;
        break;
      }
      continue;
    }
    break;
  }
LABEL_20:
  if (!a1[7])
  {
    v19 = 11022;
LABEL_9:
    log_OutPublic(*(_QWORD *)(*(_QWORD *)v66 + 32), (uint64_t)"RETTT", v19, 0, v10, v11, v12, v13, v65);
    return 2288001031;
  }
  return v18;
}

uint64_t ruleset_ReadDataLine(uint64_t *a1, uint64_t a2, uint64_t *a3, unsigned int *a4, _DWORD *a5, char *__s, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  size_t v21;
  int v22;
  unsigned int v23;

  ++*a5;
  for (result = ruleset_ReadLine(a2, a3, a4, __s, (uint64_t)a5, (uint64_t)__s, a7, a8);
        (result & 0x80000000) == 0;
        result = ruleset_ReadLine(a2, a3, a4, __s, v16, v17, v18, v19))
  {
    v23 = 0;
    v15 = strlen(__s);
    v20 = PCRE_Exec(a1[13], a1[14], a1[15], a1[16], (uint64_t)__s, v15, 0, 0, 0, &v23);
    result = v23;
    if ((v23 & 0x80000000) != 0)
      break;
    if (v20 < 0)
    {
      v21 = strlen(__s);
      v22 = PCRE_Exec(a1[13], a1[14], a1[17], a1[18], (uint64_t)__s, v21, 0, 0, 0, &v23);
      result = v23;
      if ((v23 & 0x80000000) != 0)
        return result;
      if (v22 < 0)
        return 0;
    }
    ++*a5;
  }
  return result;
}

BOOL ruleset_IsSectionHeader(unsigned __int8 *a1, const char *a2)
{
  int v3;
  uint64_t v4;
  const char *v5;
  int v6;
  const char *v7;
  char v8;
  char v10;
  const char *v11;
  int v12;
  size_t v13;
  unsigned __int8 *v15;
  int v16;

  v3 = *a1;
  if (v3 == 239)
  {
    if (a1[1] != 187)
    {
      LOBYTE(v3) = -17;
      goto LABEL_9;
    }
    v4 = 3;
    if (a1[2] != 191)
      v4 = 0;
    a1 += v4;
    v3 = *a1;
  }
  if (!v3)
    return 0;
LABEL_9:
  v5 = (const char *)(a1 + 1);
  while (memchr("\t ", (char)v3, 3uLL))
  {
    v6 = *(unsigned __int8 *)v5++;
    LOBYTE(v3) = v6;
    if (!v6)
      return 0;
  }
  if (v3 != 91)
    return 0;
  do
  {
    v7 = v5;
    v8 = *v5;
    if (!*v5)
    {
      if (!a2)
      {
        v10 = 0;
        return v10 == 93;
      }
      goto LABEL_22;
    }
  }
  while (memchr("\t ", *v5++, 3uLL));
  if (!a2)
  {
    v10 = v8;
    v11 = v5 - 1;
    while (!memchr("\t ]", v10, 4uLL))
    {
      v12 = *(unsigned __int8 *)++v11;
      v10 = v12;
      if (!v12)
        return v10 == 93;
    }
LABEL_25:
    v15 = (unsigned __int8 *)(v11 + 1);
    do
    {
      if (!memchr("\t ", v10, 3uLL))
        break;
      v16 = *v15++;
      v10 = v16;
    }
    while (v16);
    return v10 == 93;
  }
LABEL_22:
  v13 = strlen(a2);
  if (strncmp(a2, v7, v13))
    return 0;
  v11 = &v7[v13];
  v10 = *v11;
  if (*v11)
    goto LABEL_25;
  return v10 == 93;
}

uint64_t ruleset_ReadRules(uint64_t *a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int DataLine;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t **v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v47;
  int v48[2];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[2];
  int v54;
  char __s[1024];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v51 = 0;
  v52 = 0;
  *(_QWORD *)v48 = 0;
  v49 = 0;
  v4 = 2288001031;
  v50 = 0;
  if (!a1)
    return v4;
  if (!a2)
    return v4;
  if (!a3)
    return v4;
  v53[0] = 0;
  v53[1] = 0;
  v54 = 0;
  if ((InitRsrcFunction((_WORD *)*a1, a1[1], v48) & 0x80000000) != 0)
    return v4;
  if ((ruleset_ReadDataLine(a1, *(uint64_t *)v48, a2, a3, a4, __s, v9, v10) & 0x80000000) == 0)
  {
    while (!ruleset_IsSectionHeader((unsigned __int8 *)__s, "data")
         && (ruleset_ReadDataLine(a1, *(uint64_t *)v48, a2, a3, a4, __s, v11, v12) & 0x80000000) == 0)
      ;
  }
  DataLine = ruleset_ReadDataLine(a1, *(uint64_t *)v48, a2, a3, a4, __s, v11, v12);
  if ((DataLine & 0x80000000) != 0)
  {
    if ((DataLine & 0x1FFF) == 0x17)
      return 0;
    else
      return DataLine;
  }
  v4 = 0;
  while (1)
  {
    while (1)
    {
      log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)v48 + 32), 2, (uint64_t)"%s%s %s%s %s%d", v14, v15, v16, v17, v18, "BEG");
      v22 = ruleset_ScanRuleLine(*(uint64_t *)v48, (uint64_t)__s, &v52, (uint64_t)v53, &v51, v19, v20, v21);
      PCRE_Adapter2PCREOptions(a1[13], a1[14], (uint64_t)v53);
      if ((v22 & 0x80000000) == 0)
        break;
      log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)v48 + 32), 2, (uint64_t)"%s%s %s%s %s%u", v23, v24, v25, v26, v27, "END");
LABEL_19:
      if ((_DWORD)v4)
        v4 = v4;
      else
        v4 = v22;
      if ((ruleset_ReadDataLine(a1, *(uint64_t *)v48, a2, a3, a4, __s, v43, v44) & 0x80000000) != 0)
        return v4;
    }
    v28 = rule_Compile(a1[13], a1[14], *(uint64_t *)v48, v52, (uint64_t)v53, &v49);
    if ((v28 & 0x80000000) != 0)
    {
      v22 = v28;
      _Gryphon_ReportInvalidRule(v52);
      goto LABEL_19;
    }
    v29 = vector_Add(a1[10], &v49);
    v34 = *(uint64_t ***)(*(_QWORD *)v48 + 32);
    if (!v29)
      break;
    vector_GetSize(a1[10]);
    log_OutTraceTuningData(v34, 2, (uint64_t)"%s%s %s%s %s%d %s%s %s%d %s%u", v35, v36, v37, v38, v39, "END");
    if (v49)
      PCRE_FreePattern(v49, v50);
    v42 = ruleset_ReadDataLine(a1, *(uint64_t *)v48, a2, a3, a4, __s, v40, v41);
    if ((v42 & 0x80000000) != 0)
      goto LABEL_28;
  }
  log_OutPublic(*(_QWORD *)(*(_QWORD *)v48 + 32), (uint64_t)"RETTT", 11023, 0, v30, v31, v32, v33, v47);
  PCRE_FreePattern(v49, v50);
  v42 = -2006966266;
LABEL_28:
  if ((v42 & 0x1FFF) == 0x17)
    v45 = 0;
  else
    v45 = v42;
  if (!(_DWORD)v4)
    return v45;
  return v4;
}

uint64_t ruleset_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t NullHandle;
  int v19;
  uint64_t v20;
  _QWORD *i;
  uint64_t v22;
  __int128 v24;
  _QWORD *(*v25)(_QWORD *, _QWORD *);
  unsigned int v26;
  _QWORD *v27;

  v27 = 0;
  v26 = 0;
  v6 = 2288001031;
  if (a6 && (InitRsrcFunction(a1, a2, &v27) & 0x80000000) == 0)
  {
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    *(_QWORD *)(a6 + 160) = 0;
    *(_OWORD *)(a6 + 128) = 0u;
    *(_OWORD *)(a6 + 144) = 0u;
    *(_OWORD *)(a6 + 96) = 0u;
    *(_OWORD *)(a6 + 112) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 80) = 0u;
    *(_QWORD *)a6 = a1;
    *(_QWORD *)(a6 + 8) = a2;
    *(_QWORD *)(a6 + 16) = a5;
    *(_DWORD *)(a6 + 40) = 1;
    v13 = (_QWORD *)v27[1];
    v24 = xmmword_1EA948020;
    v25 = rule_FreeParts;
    if (vector_ObjOpen(v13, &v24, 8, (uint64_t *)(a6 + 80)))
    {
      LODWORD(v24) = PCRE_Adapter_Create(1, a6 + 104, a1, a2);
      if ((v24 & 0x80000000) == 0)
      {
        NullHandle = safeh_GetNullHandle();
        if (safeh_HandlesEqual(a3, a4, NullHandle, v19))
        {
          *(_OWORD *)(a6 + 88) = *(_OWORD *)(a6 + 104);
        }
        else
        {
          *(_QWORD *)(a6 + 88) = a3;
          *(_QWORD *)(a6 + 96) = a4;
        }
        paramc_ParamGetUInt(v27[5], (uint64_t)"retttmaxpcreframeblocks", &v26);
        paramc_ParamGetUInt(v27[5], (uint64_t)"retttnumframesinblock", &v26);
        LODWORD(v24) = PCRE_ObjOpen(*(_QWORD *)(a6 + 104), *(_QWORD *)(a6 + 112), 0);
        if ((v24 & 0x80000000) == 0)
        {
          v20 = 0;
          for (i = (_QWORD *)(a6 + 128); ; i += 2)
          {
            *(i - 1) = PCRE_CompilePattern(*(_QWORD *)(a6 + 104), *(_QWORD *)(a6 + 112), (uint64_t)&HARDCODED_RULESET_PATTERN[v20], 0, 0, 0, (int *)&v24);
            *i = v22;
            v6 = v24;
            if ((v24 & 0x80000000) != 0)
              break;
            v20 += 128;
            if (v20 == 384)
              return v6;
          }
        }
      }
      vector_ObjClose(*(_QWORD *)(a6 + 80));
      *(_QWORD *)(a6 + 80) = 0;
      PCRE_ObjClose(*(_QWORD *)(a6 + 104), *(_QWORD *)(a6 + 112));
      return v24;
    }
    else
    {
      log_OutPublic(v27[4], (uint64_t)"RETTT", 11002, 0, v14, v15, v16, v17, v24);
      return 2288001034;
    }
  }
  return v6;
}

uint64_t *rule_CopyParts(uint64_t *result, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v7;
  char *v8;
  int v9;

  v9 = 0;
  if (result)
  {
    v3 = result;
    v4 = *result;
    if (!*result)
      return 0;
    result = 0;
    if (a3 && v3[2])
    {
      if ((PCRE_CopyPattern(v4, v3[1], (uint64_t)a3, &v9) & 0x80000000) == 0)
      {
        v7 = strlen((const char *)v3[2]);
        v8 = (char *)heap_Alloc(a2, (v7 + 1));
        a3[2] = (uint64_t)v8;
        if (v8)
        {
          strcpy(v8, (const char *)v3[2]);
          return (uint64_t *)1;
        }
        PCRE_FreePattern(*a3, a3[1]);
      }
      return 0;
    }
  }
  return result;
}

_QWORD *rule_FreeParts(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    result = (_QWORD *)*result;
    if (result)
    {
      result = (_QWORD *)PCRE_FreePattern((uint64_t)result, v3[1]);
      *v3 = 0;
    }
    v4 = v3[2];
    if (v4)
    {
      result = heap_Free(a2, v4);
      v3[2] = 0;
    }
  }
  return result;
}

uint64_t ruleset_ObjClose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t i;
  uint64_t v6;

  v1 = 2288001031;
  v6 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v6) & 0x80000000) == 0)
  {
    if (*(_QWORD *)(a1 + 24))
      ruleset_UnloadRules(a1);
    v3 = *(_QWORD *)(a1 + 80);
    if (v3)
    {
      vector_ObjClose(v3);
      *(_QWORD *)(a1 + 80) = 0;
    }
    for (i = 0; i != 48; i += 16)
      PCRE_FreePattern(*(_QWORD *)(a1 + i + 120), *(_QWORD *)(a1 + i + 128));
    PCRE_ObjClose(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112));
    v1 = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_QWORD *)(a1 + 160) = 0;
  }
  return v1;
}

uint64_t ruleset_UnloadRules(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;

  v1 = 2288001031;
  v25 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v25) & 0x80000000) == 0)
  {
    log_OutTraceTuningData(*(uint64_t ***)(v25 + 32), 3, (uint64_t)"%s%s %s%s", v3, v4, v5, v6, v7, "BEG");
    v26 = 0;
    if (*(_QWORD *)(a1 + 24) && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v26) & 0x80000000) == 0)
    {
      if (vector_Clear(*(_QWORD *)(a1 + 80)))
      {
        v18 = *(_QWORD *)(a1 + 32);
        if (v18)
        {
          heap_Free(*(_QWORD **)(v25 + 8), v18);
          *(_QWORD *)(a1 + 32) = 0;
        }
        v19 = *(_QWORD *)(a1 + 56);
        if (v19)
        {
          heap_Free(*(_QWORD **)(v25 + 8), v19);
          *(_QWORD *)(a1 + 56) = 0;
        }
        v20 = *(_QWORD *)(a1 + 64);
        if (v20)
        {
          heap_Free(*(_QWORD **)(v25 + 8), v20);
          *(_QWORD *)(a1 + 64) = 0;
        }
        v21 = *(_QWORD *)(a1 + 72);
        if (v21)
        {
          heap_Free(*(_QWORD **)(v25 + 8), v21);
          *(_QWORD *)(a1 + 72) = 0;
        }
        log_OutTraceTuningData(*(uint64_t ***)(v25 + 32), 3, (uint64_t)"%s%s %s%u", v13, v14, v15, v16, v17, "END");
        v22 = *(_QWORD *)(a1 + 24);
        if (v22)
        {
          heap_Free(*(_QWORD **)(v25 + 8), v22);
          v1 = 0;
          *(_QWORD *)(a1 + 24) = 0;
          return v1;
        }
        return 0;
      }
      log_OutPublic(*(_QWORD *)(v26 + 32), (uint64_t)"RETTT", 11024, 0, v14, v15, v16, v17, v24);
    }
    log_OutTraceTuningData(*(uint64_t ***)(v25 + 32), 3, (uint64_t)"%s%s %s%u", v8, v9, v10, v11, v12, "END");
    return 0;
  }
  return v1;
}

uint64_t ruleset_GetName(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

uint64_t ruleset_GetAbsName(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 32);
  return result;
}

uint64_t ruleset_GetEnabledForLng(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  unsigned int v8;
  char v9[8];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v2 = result;
    if (!*(_DWORD *)(result + 40))
      return 0;
    result = 0;
    if (a2 && *(_QWORD *)(v2 + 56))
    {
      __strcpy_chk();
      if (!LH_stricmp("*", *(char **)(v2 + 56)))
        return 1;
      v3 = *(char **)(v2 + 56);
      if (*v3)
      {
        v4 = 0;
        v5 = 1;
        do
        {
          v3[v4] = __tolower(v3[v4]);
          v4 = v5;
          v3 = *(char **)(v2 + 56);
          v6 = strlen(v3) > v5++;
        }
        while (v6);
      }
      if (v9[0])
      {
        v7 = 0;
        v8 = 1;
        do
        {
          v9[v7] = __tolower(v9[v7]);
          v7 = v8;
          v6 = strlen(v9) > v8++;
        }
        while (v6);
        v3 = *(char **)(v2 + 56);
      }
      if (strstr(v3, v9))
        return 1;
      if (v9[0] == *v3 && v9[1] == v3[1])
        return v3[2] == 42;
      return 0;
    }
  }
  return result;
}

uint64_t ruleset_LoadRules(_WORD **a1, const char *a2, const char *a3, const char *a4, uint64_t a5, int a6)
{
  uint64_t v6;
  const char *v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t BinaryRules;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t **v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;

  v43 = a5;
  v42 = a6;
  v6 = 2288001031;
  v41 = 0;
  v40 = 0;
  if (a1 && a5 && a6)
  {
    if (a1[3])
      return 2288001041;
    v13 = a2;
    a1[4] = 0;
    if (!a2 || !*a2)
      v13 = "in-memory RETT";
    if ((InitRsrcFunction(*a1, (int)a1[1], &v41) & 0x80000000) == 0)
    {
      v14 = strlen(v13);
      v15 = (char *)heap_Alloc(*(_QWORD *)(v41 + 8), (v14 + 1));
      a1[3] = v15;
      if (v15)
      {
        strcpy(v15, v13);
        if ((paramc_ParamGetStr(*(_QWORD *)(v41 + 40), (uint64_t)"__NUAN_alternative_esc_seq__", &v40) & 0x80000000) == 0
          && v40
          && !strcmp("__NUAN_alternative_esc_seq__", (const char *)a1[3]))
        {
          *((_DWORD *)a1 + 11) = 1;
        }
        if (!a3)
          goto LABEL_19;
        v25 = strlen(a3);
        v26 = (char *)heap_Alloc(*(_QWORD *)(v41 + 8), (v25 + 1));
        a1[4] = v26;
        if (v26)
        {
          strcpy(v26, a3);
LABEL_19:
          log_OutTraceTuningData(*(uint64_t ***)(v41 + 32), 1, (uint64_t)"%s%s %s%s %s%s", v20, v21, v22, v23, v24, "BEG");
          if (!strcmp(a4, "application/x-vocalizer-rettt+bin")
            || !strcmp(a4, "application/x-vocalizer-rettt+bin;loader=broker"))
          {
            BinaryRules = ruleset_ReadBinaryRules((uint64_t *)a1, a5, a6);
          }
          else
          {
            v39 = 0;
            BinaryRules = ruleset_ReadHeader((uint64_t *)a1, &v43, (unsigned int *)&v42, &v39);
            if ((BinaryRules & 0x80000000) == 0)
              BinaryRules = ruleset_ReadRules((uint64_t *)a1, &v43, (unsigned int *)&v42, &v39);
          }
          v6 = BinaryRules;
          v37 = *(uint64_t ***)(v41 + 32);
          if ((v6 & 0x80000000) != 0)
          {
            log_OutTraceTuningData(v37, 1, (uint64_t)"%s%s %s%u", v32, v33, v34, v35, v36, "END");
            ruleset_UnloadRules((uint64_t)a1);
          }
          else
          {
            log_OutTraceTuningData(v37, 1, (uint64_t)"%s%s %s%s %s%s %s%s %s%u", v32, v33, v34, v35, v36, "END");
          }
          return v6;
        }
        log_OutPublic(*(_QWORD *)(v41 + 32), (uint64_t)"RETTT", 11002, 0, v27, v28, v29, v30, v38);
        ruleset_UnloadRules((uint64_t)a1);
      }
      else
      {
        log_OutPublic(*(_QWORD *)(v41 + 32), (uint64_t)"RETTT", 11002, 0, v16, v17, v18, v19, v38);
      }
      return 2288001034;
    }
  }
  return v6;
}

uint64_t ruleset_Rewrite(_WORD **a1, const char *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t inited;
  uint64_t v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  int IsMatchingEscTn;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  int Size;
  int v28;
  unsigned int v29;
  char *v30;
  char *v31;
  char *v32;
  int v33;
  int v34;
  unsigned int v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int ElemAt;
  uint64_t **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  unsigned int v54;
  uint64_t v55;
  char *__s;
  uint64_t v57;
  __int16 v58;
  char *v59;

  v57 = 0;
  v55 = 0;
  v3 = 2288001031;
  if (!a1)
    return v3;
  if (!a2)
    return v3;
  if (!a3)
    return v3;
  inited = InitRsrcFunction(*a1, (int)a1[1], &v57);
  if ((inited & 0x80000000) != 0)
    return v3;
  if (!a1[3])
    return 2288001041;
  v8 = inited;
  v9 = strlen(a2);
  v10 = (char *)heap_Alloc(*(_QWORD *)(v57 + 8), (v9 + 1));
  __s = v10;
  if (!v10)
  {
    log_OutPublic(*(_QWORD *)(v57 + 32), (uint64_t)"RETTT", 11002, 0, v11, v12, v13, v14, v54);
    return 2288001034;
  }
  strcpy(v10, a2);
  v15 = (const char *)a1[8];
  if (!v15
    || (v16 = __s,
        v58 = 0,
        v17 = strlen(__s),
        esc_seq_tn_strncmp(*a1, (int)a1[1], a1[11], (int)a1[12], __s, v17, &v58))
    && !strcmp(v15, "normal"))
  {
LABEL_12:
    v20 = 1;
  }
  else
  {
    while (1)
    {
      v18 = strlen(v16);
      v59 = esc_seq_tn_seq(*a1, (int)a1[1], a1[11], (int)a1[12], v16, v18);
      if (!v59)
        break;
      IsMatchingEscTn = ruleset_IsMatchingEscTn((uint64_t)a1, v15, &v59);
      v16 = ++v59;
      if (IsMatchingEscTn)
        goto LABEL_12;
    }
    v20 = 0;
  }
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v57 + 32)))
  {
    v26 = *(uint64_t ***)(v57 + 32);
    if (a1[8])
      log_OutTraceTuningData(v26, 8, (uint64_t)"%s%s %s%s %s%s %s%s", v21, v22, v23, v24, v25, "BEG");
    else
      log_OutTraceTuningData(v26, 8, (uint64_t)"%s%s %s%s %s%s", v21, v22, v23, v24, v25, "BEG");
  }
  if (!v20)
    goto LABEL_37;
  Size = vector_GetSize((uint64_t)a1[10]);
  if (!a1[8])
  {
    v33 = vector_GetSize((uint64_t)a1[10]);
    if (v33)
    {
      v34 = v33;
      v35 = 0;
      v32 = 0;
      while (1)
      {
        v36 = v32;
        v32 = __s;
        __s = v36;
        ElemAt = vector_GetElemAt((uint64_t)a1[10], v35, &v55);
        v43 = *(uint64_t ***)(v57 + 32);
        if (!ElemAt)
          break;
        log_OutTraceTuningData(v43, 9, (uint64_t)"%s%s %s%d %s%s", v37, v38, v39, v40, v41, "BEG");
        v8 = sub_GsubCompiledRe((uint64_t)a1[2], *(_QWORD *)v55, *(_QWORD *)(v55 + 8), *(char **)(v55 + 16), v32, (const char **)&__s);
        log_OutTraceTuningData(*(uint64_t ***)(v57 + 32), 9, (uint64_t)"%s%s %s%u %s%s", v44, v45, v46, v47, v48, "END");
        if ((v8 & 0x80000000) != 0)
          goto LABEL_43;
        if (v34 == ++v35)
          goto LABEL_38;
      }
      log_OutPublic((uint64_t)v43, (uint64_t)"RETTT", 11025, 0, v38, v39, v40, v41, v54);
      v3 = 2288001030;
      if (!v32)
        goto LABEL_48;
      goto LABEL_47;
    }
    goto LABEL_37;
  }
  v28 = Size;
  if (Size)
  {
    v29 = 0;
    v30 = 0;
    do
    {
      v31 = __s;
      __s = v30;
      if (v30)
      {
        heap_Free(*(_QWORD **)(v57 + 8), (uint64_t)v30);
        __s = 0;
      }
      ruleset_RewriteTnRegions((uint64_t)a1, v29++, 0, v31, (const char **)&__s);
      v30 = v31;
    }
    while (v28 != v29);
    if (v31)
      heap_Free(*(_QWORD **)(v57 + 8), (uint64_t)v31);
  }
  v32 = __s;
  __s = 0;
  ruleset_RewriteTnRegions((uint64_t)a1, 0, 1, v32, (const char **)&__s);
  if (v32)
  {
    heap_Free(*(_QWORD **)(v57 + 8), (uint64_t)v32);
LABEL_37:
    v32 = 0;
  }
LABEL_38:
  if (__s)
  {
    v50 = strlen(__s) + 1;
    v51 = *(uint64_t **)(v57 + 8);
    if (*a3)
    {
      v52 = (char *)heap_Realloc(v51, *a3, v50);
      if (v52)
        goto LABEL_41;
    }
    else
    {
      v52 = (char *)heap_Alloc((uint64_t)v51, v50);
      if (v52)
      {
LABEL_41:
        *a3 = (uint64_t)v52;
        strcpy(v52, __s);
        if (strcmp(a2, (const char *)*a3))
          log_OutEvent(*(uint64_t ***)(v57 + 32), 29, "%s%s", v49, v22, v23, v24, v25, "RULSET_NAME");
LABEL_43:
        v3 = v8;
        if (!v32)
          goto LABEL_48;
        goto LABEL_47;
      }
    }
  }
  log_OutPublic(*(_QWORD *)(v57 + 32), (uint64_t)"RETTT", 11002, 0, v22, v23, v24, v25, v54);
  v3 = 2288001034;
  if (v32)
LABEL_47:
    heap_Free(*(_QWORD **)(v57 + 8), (uint64_t)v32);
LABEL_48:
  if (__s)
    heap_Free(*(_QWORD **)(v57 + 8), (uint64_t)__s);
  log_OutTraceTuningData(*(uint64_t ***)(v57 + 32), 8, (uint64_t)"%s%s %s%u %s%s", v49, v22, v23, v24, v25, "END");
  return v3;
}

uint64_t ruleset_RewriteTnRegions(uint64_t result, unsigned int a2, int a3, const char *a4, const char **a5)
{
  _WORD **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  int v20;
  const char *v21;
  int64_t v22;
  uint64_t v23;
  const char *v24;
  int v25;
  const char *v26;
  unsigned __int16 v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  const char *v32;
  unsigned __int16 v33;
  int IsMatchingEscTn;
  char *v35;
  char *v36;
  char *v37;
  char v38;
  _BYTE *v39;
  unsigned __int16 v40;
  int v41;
  const char *v42;
  void *v43;
  size_t v44;
  size_t v45;
  int v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t **v57;
  int v58;
  char *v59;
  uint64_t v60;
  const char *v61;
  int v62;
  char *v63;
  char *v64;
  uint64_t *v65;
  uint64_t v66;
  int v67;
  int v68;
  char *v69;
  char *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  const char *v86;
  uint64_t v87;
  char *__s;
  uint64_t v89;
  __int16 v90;
  char *v91;

  v89 = 0;
  v87 = 0;
  __s = 0;
  if (a4)
  {
    if (a5)
    {
      if (!*a5)
      {
        v9 = (_WORD **)result;
        result = InitRsrcFunction(*(_WORD **)result, *(_QWORD *)(result + 8), &v89);
        if ((result & 0x80000000) == 0)
        {
          if (v9[3])
          {
            if (a3 || vector_GetElemAt((uint64_t)v9[10], a2, &v87))
            {
              if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v89 + 32)))
              {
                v19 = *(uint64_t ***)(v89 + 32);
                if (a3)
                  log_OutTraceTuningData(v19, 16, (uint64_t)"%s%s %s%s", v14, v15, v16, v17, v18, "BEG");
                else
                  log_OutTraceTuningData(v19, 9, (uint64_t)"%s%s %s%d %s%s", v14, v15, v16, v17, v18, "BEG");
              }
              v20 = strlen(a4);
              v21 = (const char *)heap_Alloc(*(_QWORD *)(v89 + 8), (v20 + 1));
              *a5 = v21;
              if (v21)
              {
                *v21 = 0;
                v22 = strlen(a4);
                if (v22 >= 1)
                {
                  v23 = 0;
                  v24 = &a4[v22];
                  if (a3)
                    v25 = 18;
                  else
                    v25 = 11;
                  v85 = v25;
                  v26 = a4;
                  v86 = &a4[v22];
                  do
                  {
                    v27 = strlen(v26 + 1);
                    v28 = esc_seq_tn_seq(*v9, (int)v9[1], v9[11], (int)v9[12], (char *)v26 + 1, v27);
                    if (v28)
                      v29 = v28;
                    else
                      v29 = (char *)v24;
                    v30 = (char *)heap_Alloc(*(_QWORD *)(v89 + 8), ((_DWORD)v29 - (_DWORD)v26 + 1));
                    if (!v30)
                      break;
                    v31 = v30;
                    memcpy(v30, v26, ((_DWORD)v29 - (_DWORD)v26));
                    v31[(_DWORD)v29 - (_DWORD)v26] = 0;
                    v32 = (const char *)v9[8];
                    v91 = v31;
                    v90 = 0;
                    v33 = strlen(v31);
                    if (esc_seq_tn_strncmp(*v9, (int)v9[1], v9[11], (int)v9[12], v31, v33, &v90))
                    {
                      IsMatchingEscTn = strcmp(v32, "normal") == 0;
                    }
                    else
                    {
                      IsMatchingEscTn = ruleset_IsMatchingEscTn((uint64_t)v9, v32, &v91);
                      if (a3 && IsMatchingEscTn)
                      {
                        v35 = v91;
                        IsMatchingEscTn = 1;
                        goto LABEL_37;
                      }
                    }
                    v35 = v31;
                    if (!a3 && IsMatchingEscTn)
                    {
                      v36 = ruleset_stristr(v31, (char *)v9[8]);
                      if (v36)
                      {
                        v37 = strchr(v36, 92);
                        if (v37)
                          v23 = ((_DWORD)v37 + 1 - (_DWORD)v31);
                        else
                          v23 = 0;
                        v38 = 0;
                        if (v37)
                          v35 = v37 + 1;
                        else
                          v35 = v31;
                      }
                      else
                      {
                        v38 = 0;
                        v35 = v31;
                      }
                      goto LABEL_49;
                    }
LABEL_37:
                    v38 = 1;
                    if (a3)
                    {
                      if (IsMatchingEscTn)
                      {
                        v39 = v9[9];
                        if (v39)
                        {
                          if (*v39)
                          {
                            v84 = v23;
                            LOWORD(v91) = 0;
                            v40 = strlen(v31);
                            if (esc_seq_tn_strncmp(*v9, (int)v9[1], v9[11], (int)v9[12], v31, v40, &v91))
                            {
                              v41 = strlen(v35);
                              v42 = (const char *)heap_Realloc(*(uint64_t **)(v89 + 8), (uint64_t)v35, (v41 + 13));
                              if (!v42)
                                goto LABEL_79;
                              v35 = (char *)v42;
                              v43 = (void *)(v42 + 12);
                              v44 = strlen(v42);
                              memmove(v43, v35, v44 + 1);
                              *(_DWORD *)v35 = 1853119515;
                              *(_QWORD *)(v35 + 4) = 0x5C6C616D726F6E3DLL;
                            }
                            else
                            {
                              v45 = strlen((const char *)v9[9]);
                              v46 = strlen(v31);
                              v47 = (char *)heap_Realloc(*(uint64_t **)(v89 + 8), (uint64_t)v31, (v45 + v46 + 1));
                              if (!v47)
                                goto LABEL_79;
                              v35 = v47;
                              v48 = ruleset_stristr(v47, (char *)v9[8]);
                              v49 = strchr(v48, 92);
                              if (v49)
                              {
                                v50 = v49;
                                v51 = strlen(v49);
                                memmove(&v48[v45], v50, v51 + 1);
                                memcpy(v48, v9[9], v45);
                              }
                            }
                            v38 = 1;
                            v31 = v35;
                            v23 = v84;
                          }
                        }
                      }
                    }
LABEL_49:
                    if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v89 + 32)))
                    {
                      v57 = *(uint64_t ***)(v89 + 32);
                      if (a3)
                        log_OutTraceTuningData(v57, 18, (uint64_t)"%s%s %s%d %s%d", v52, v53, v54, v55, v56, "FOCUS");
                      else
                        log_OutTraceTuningData(v57, 10, (uint64_t)"%s%s %s%s %s%d %s%d", v52, v53, v54, v55, v56, "BEG");
                    }
                    if ((v38 & 1) != 0)
                    {
                      v58 = strlen(v35);
                      v59 = (char *)heap_Alloc(*(_QWORD *)(v89 + 8), (v58 + 1));
                      __s = v59;
                      if (!v59)
                        goto LABEL_79;
                      v60 = v23;
                      strcpy(v59, v35);
                      v61 = 0;
                    }
                    else
                    {
                      if ((sub_GsubCompiledRe((uint64_t)v9[2], *(_QWORD *)v87, *(_QWORD *)(v87 + 8), *(char **)(v87 + 16), v35, (const char **)&__s) & 0x80000000) != 0|| (v62 = strlen(__s), (v63 = (char *)heap_Alloc(*(_QWORD *)(v89 + 8), (v23 + v62 + 1))) == 0))
                      {
LABEL_79:
                        heap_Free(*(_QWORD **)(v89 + 8), (uint64_t)v31);
                        break;
                      }
                      v61 = v63;
                      v64 = strncpy(v63, v26, v23);
                      v60 = v23;
                      v64[v23] = 0;
                      strcat(v64, __s);
                    }
                    heap_Free(*(_QWORD **)(v89 + 8), (uint64_t)v31);
                    v65 = *(uint64_t **)(v89 + 8);
                    v66 = (uint64_t)*a5;
                    v67 = strlen(*a5);
                    if (v61)
                    {
                      v68 = strlen(v61);
                      v69 = (char *)heap_Realloc(v65, v66, (v67 + v68 + 1));
                      *a5 = v69;
                      if (!v69)
                        break;
                      v70 = (char *)v61;
                    }
                    else
                    {
                      v71 = strlen(__s);
                      v69 = (char *)heap_Realloc(v65, v66, (v67 + v71 + 1));
                      *a5 = v69;
                      if (!v69)
                        break;
                      v70 = __s;
                    }
                    strcat(v69, v70);
                    v23 = v60;
                    if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v89 + 32)))
                      log_OutTraceTuningData(*(uint64_t ***)(v89 + 32), v85, (uint64_t)"%s%s", v72, v73, v74, v75, v76, "APPEND");
                    if (__s)
                    {
                      heap_Free(*(_QWORD **)(v89 + 8), (uint64_t)__s);
                      __s = 0;
                    }
                    if (v61)
                      heap_Free(*(_QWORD **)(v89 + 8), (uint64_t)v61);
                    if (!a3)
                      log_OutTraceTuningData(*(uint64_t ***)(v89 + 32), 10, (uint64_t)"%s%s %s%s", v72, v73, v74, v75, v76, "END");
                    v26 = v29;
                    v24 = v86;
                  }
                  while (v29 < v86);
                }
              }
              result = log_HasTraceTuningDataSubscriber(*(_QWORD *)(v89 + 32));
              if ((_DWORD)result)
              {
                if (a3)
                  v82 = 16;
                else
                  v82 = 9;
                return log_OutTraceTuningData(*(uint64_t ***)(v89 + 32), v82, (uint64_t)"%s%s %s%u %s%s", v77, v78, v79, v80, v81, "END");
              }
            }
            else
            {
              return log_OutPublic(*(_QWORD *)(v89 + 32), (uint64_t)"RETTT", 11025, 0, v10, v11, v12, v13, v83);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ruleset_ReadLine(uint64_t a1, uint64_t *a2, unsigned int *a3, char *__s, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v27;

  v10 = 0;
  v11 = *a3;
  v12 = *a2;
  if (*a3 >= 0x3FF)
    v13 = 1023;
  else
    v13 = v11;
  v14 = v11 - v13;
  while (v13 != v10)
  {
    v15 = *(unsigned __int8 *)(v12 + v10);
    v16 = v10 + 1;
    __s[v10++] = v15;
    if (v15 == 10)
    {
      LODWORD(v13) = (unsigned __int16)v16;
      v14 = v11 - v16;
      v17 = v12 + v16;
      goto LABEL_9;
    }
  }
  LODWORD(v13) = (unsigned __int16)v13;
  v17 = v12 + v10;
LABEL_9:
  __s[v13] = 0;
  *a3 = v14;
  *a2 = v17;
  if (__s && (_DWORD)v13)
  {
    v18 = strlen(__s);
    if (!v18)
      return 0;
    v23 = v18 - 1;
    if (v14 && __s[v23] != 10)
    {
      v25 = 2288001024;
      log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"RETTT", 11008, "%s%u%s%s", v19, v20, v21, v22, "maximumCharacters");
      return v25;
    }
    if (__s[v23] == 10)
      __s[v23] = 0;
    if (v18 >= 2 && (v24 = v18 - 2, __s[v24] == 13))
    {
      v25 = 0;
      __s[v24] = 0;
    }
    else
    {
      return 0;
    }
  }
  else if (v14)
  {
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"RETTT", 11010, 0, a5, a6, a7, a8, v27);
    return 2288001028;
  }
  else
  {
    return 2288001047;
  }
  return v25;
}

uint64_t ruleset_IsMatchingEscTn(uint64_t a1, const char *a2, char **a3)
{
  char *v6;
  unsigned __int16 v7;
  int v8;
  uint64_t result;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  size_t v13;
  unsigned __int16 v14;

  v6 = *a3;
  v14 = 0;
  v7 = strlen(v6);
  v8 = esc_seq_tn_strncmp(*(_WORD **)a1, *(_QWORD *)(a1 + 8), *(_QWORD **)(a1 + 88), *(_QWORD *)(a1 + 96), v6, v7, &v14);
  result = 0;
  if (!v8)
  {
    v10 = &v6[v14];
    if (*v10 == 61
      && (v11 = (uint64_t)(v10 + 1), v12 = strlen(a2), !LH_strnicmp(v11, (uint64_t)a2, v12))
      && (v13 = strlen(a2), *(_BYTE *)(v11 + v13) == 92))
    {
      *a3 = (char *)(v11 + v13 + 1);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

char *ruleset_stristr(char *a1, char *__s)
{
  char *result;
  __darwin_ct_rune_t v5;
  unsigned int v6;
  char v7;
  char v8;
  unint64_t v9;
  int v10;
  int v11;

  result = 0;
  if (a1 && __s)
  {
    if (*a1 && (v5 = *__s) != 0 && (v6 = strlen(__s), v7 = __tolower(v5), (v8 = *a1) != 0))
    {
      v9 = v6;
      v10 = v7;
      while (__tolower(v8) != v10 || LH_strnicmp((uint64_t)a1, (uint64_t)__s, v9))
      {
        v11 = *++a1;
        v8 = v11;
        if (!v11)
          return 0;
      }
      return a1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_ObjOpen(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v17;
  unsigned int v18;
  uint64_t *v19;

  v3 = 2147491847;
  v19 = 0;
  v18 = 0;
  if (a3 && (InitRsrcFunction(a1, a2, &v19) & 0x80000000) == 0)
  {
    *a3 = 0;
    v7 = heap_Alloc(v19[1], 32);
    if (!v7)
    {
      log_OutPublic(v19[4], (uint64_t)"RETTT", 11002, 0, v8, v9, v10, v11, v17);
      return 2147491850;
    }
    v12 = v7;
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_QWORD *)v7 = a1;
    *(_QWORD *)(v7 + 8) = a2;
    v13 = PCRE_Adapter_Create(1, v7 + 16, a1, a2);
    v14 = v19;
    if ((v13 & 0x80000000) != 0)
    {
      v3 = v13;
    }
    else
    {
      paramc_ParamGetUInt(v19[5], (uint64_t)"retttmaxpcreframeblocks", &v18);
      paramc_ParamGetUInt(v19[5], (uint64_t)"retttnumframesinblock", &v18);
      v15 = PCRE_ObjOpen(*(_QWORD *)(v12 + 16), *(_QWORD *)(v12 + 24), 0);
      if ((v15 & 0x80000000) == 0)
      {
        v3 = 0;
        *a3 = v12;
        return v3;
      }
      v3 = v15;
      v14 = v19;
    }
    heap_Free((_QWORD *)v14[1], v12);
  }
  return v3;
}

uint64_t sub_ObjClose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v1 = 2147491847;
  v5 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v5) & 0x80000000) == 0)
  {
    v3 = PCRE_ObjClose(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    if ((v3 & 0x80000000) != 0)
    {
      return v3;
    }
    else
    {
      heap_Free(*(_QWORD **)(v5 + 8), a1);
      return 0;
    }
  }
  return v1;
}

uint64_t sub_Substitute(uint64_t a1, uint64_t a2, int a3, char *a4, const char *a5, int a6, const char **a7)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t ***v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 HasTraceTuningDataSubscriber;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  _BOOL4 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t **v80;
  const char *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unsigned int v87;
  const char *v88;
  const char **v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD v94[2];
  const char *v95;
  uint64_t v96;
  size_t v97;
  void *v98;
  unsigned int inited;
  int v100;
  unsigned int v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v7 = 2147491847;
  v98 = 0;
  if (a1)
  {
    if (a2)
    {
      if (a5)
      {
        if (a7)
        {
          v95 = 0;
          v96 = 0;
          v97 = 0;
          inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v98);
          if ((inited & 0x80000000) == 0)
          {
            v17 = strlen(a5);
            if ((v17 & 0x80000000) != 0)
            {
              log_OutPublic(*((_QWORD *)v98 + 4), (uint64_t)"RETTT", 11004, "%s%u", v13, v14, v15, v16, "bufferBytes");
              return 2147491849;
            }
            else
            {
              v18 = (uint64_t ***)v98;
              v19 = *((_QWORD *)v98 + 1);
              v20 = *((_QWORD *)v98 + 4);
              v94[0] = v19;
              v94[1] = v20;
              v91 = v17;
              v96 = v17;
              v21 = *a7;
              if (*a7)
              {
                LODWORD(v97) = strlen(*a7);
                v95 = v21;
                *a7 = 0;
                goto LABEL_12;
              }
              LODWORD(v97) = 128;
              v27 = (char *)heap_Alloc(v19, 128);
              v95 = v27;
              if (v27)
              {
                bzero(v27, v97);
                v18 = (uint64_t ***)v98;
LABEL_12:
                v90 = a1;
                v89 = a7;
                log_OutTraceTuningData(v18[4], 12, (uint64_t)"%s%s", v22, v23, v24, v25, v26, "BEG");
                HasTraceTuningDataSubscriber = log_HasTraceTuningDataSubscriber(*((_QWORD *)v98 + 4));
                v38 = v91;
                if (!(_DWORD)v91 && HasTraceTuningDataSubscriber)
                {
                  log_OutTraceTuningData(*((uint64_t ***)v98 + 4), 13, (uint64_t)"%s%s %s%d", v33, v34, v35, v36, v37, "BEG");
                  log_OutTraceTuningData(*((uint64_t ***)v98 + 4), 13, (uint64_t)"%s%s %s%s", v39, v40, v41, v42, v43, "RES");
                }
                v44 = 0;
                v45 = -1;
                v46 = -1;
                while (v44 < v38)
                {
                  log_OutTraceTuningData(*((uint64_t ***)v98 + 4), 13, (uint64_t)"%s%s %s%d", v33, v34, v35, v36, v37, "BEG");
                  v47 = PCRE_Exec(*(_QWORD *)(v90 + 16), *(_QWORD *)(v90 + 24), a2, a3, (uint64_t)a5, v38, v44, (uint64_t)&v100, 0x1Eu, &inited);
                  if ((inited & 0x80000000) != 0)
                    goto LABEL_58;
                  v53 = v47;
                  if ((v47 & 0x80000000) != 0)
                  {
                    inited = PCRE_ErrorToLhError(*(_QWORD *)(v90 + 16), *(_QWORD *)(v90 + 24), v47);
                    v80 = (uint64_t **)*((_QWORD *)v98 + 4);
                    v81 = "RES";
LABEL_45:
                    log_OutTraceTuningData(v80, 13, (uint64_t)"%s%s %s%s %s%u", v75, v76, v77, v78, v79, v81);
                    break;
                  }
                  if (v100 == v46 && v101 == v45)
                  {
                    log_OutTraceTuningData(*((uint64_t ***)v98 + 4), 13, (uint64_t)"%s%s %s%s", v48, v49, v50, v51, v52, "RES");
                    log_OutTraceTuningData(*((uint64_t ***)v98 + 4), 13, (uint64_t)"%s%s %s%d", v54, v55, v56, v57, v58, "BEG");
                    v59 = a5[v44];
                    if ((~v59 & 0xC0) != 0)
                      v60 = 0;
                    else
                      v60 = pcre_sub_utf8_table4[v59 & 0x3F];
                    v61 = PCRE_Exec(*(_QWORD *)(v90 + 16), *(_QWORD *)(v90 + 24), a2, a3, (uint64_t)a5, v91, (v60 + v44 + 1), (uint64_t)&v100, 0x1Eu, &inited);
                    if ((inited & 0x80000000) != 0)
                      goto LABEL_58;
                    v53 = v61;
                    if ((v61 & 0x80000000) != 0)
                    {
                      inited = PCRE_ErrorToLhError(*(_QWORD *)(v90 + 16), *(_QWORD *)(v90 + 24), v61);
                      v80 = (uint64_t **)*((_QWORD *)v98 + 4);
                      v81 = "END";
                      goto LABEL_45;
                    }
                  }
                  if (log_HasTraceTuningDataSubscriber(*((_QWORD *)v98 + 4)))
                  {
                    if ((_DWORD)v53)
                    {
                      v67 = 0;
                      do
                      {
                        log_OutTraceTuningData(*((uint64_t ***)v98 + 4), 14, (uint64_t)"%s%d %s%d %s%d", v62, v63, v64, v65, v66, "$");
                        v67 += 2;
                      }
                      while (((unsigned __int16)v67 | 1u) < 2 * (int)v53);
                    }
                    else
                    {
                      log_OutTraceTuningData(*((uint64_t ***)v98 + 4), 13, (uint64_t)"%s%d %s%s", v62, v63, v64, v65, v66, "IDXBEG");
                    }
                    log_OutTraceTuningData(*((uint64_t ***)v98 + 4), 13, (uint64_t)"%s%s %s%s %s%d %s%d", v62, v63, v64, v65, v66, "END");
                  }
                  inited = sub_Append((uint64_t)v94, (void *)&a5[v44], (v100 - v44), v62, v63, v64, v65, v66);
                  if ((inited & 0x80000000) != 0)
                    goto LABEL_58;
                  v68 = log_HasTraceTuningDataSubscriber(*((_QWORD *)v98 + 4));
                  v74 = HIDWORD(v96);
                  if (v68)
                  {
                    log_OutTraceTuningData(*((uint64_t ***)v98 + 4), 15, (uint64_t)"%s%.*s", v69, v70, v71, v72, v73, "APPEND");
                    v74 = HIDWORD(v96);
                  }
                  inited = sub_AppendSubstitute((uint64_t)v94, a4, (uint64_t)a5, &v100, v53, v71, v72, v73);
                  if ((inited & 0x80000000) != 0)
                    goto LABEL_58;
                  _Gryphon_TrackSubstitution((unint64_t)v98, v101 - v100, v74, HIDWORD(v96) - v74);
                  if (log_HasTraceTuningDataSubscriber(*((_QWORD *)v98 + 4)))
                    log_OutTraceTuningData(*((uint64_t ***)v98 + 4), 15, (uint64_t)"%s%.*s", v33, v34, v35, v36, v37, "APPEND");
                  v38 = v91;
                  v46 = v100;
                  v45 = v101;
                  v44 = v101;
                  if (!a6)
                    goto LABEL_47;
                }
                v45 = v44;
LABEL_47:
                v82 = inited;
                if (inited >> 20 == 2213)
                {
                  if ((inited & 0x1FFF) == 0xA)
                  {
                    v83 = *((_QWORD *)v98 + 4);
                    v84 = 11002;
                    v85 = 0;
                  }
                  else
                  {
                    if ((inited & 0x1FFF) == 0x14)
                    {
                      inited = 0;
LABEL_55:
                      inited = sub_Append((uint64_t)v94, (void *)&a5[v45], v91 - v45 + 1, v33, v34, v35, v36, v37);
                      if ((inited & 0x80000000) != 0)
                      {
LABEL_58:
                        *v89 = v95;
                        log_OutTraceTuningData(*((uint64_t ***)v98 + 4), 12, (uint64_t)"%s%s %s%u %s%s", v48, v49, v50, v51, v52, "END");
                        return inited;
                      }
LABEL_56:
                      if (log_HasTraceTuningDataSubscriber(*((_QWORD *)v98 + 4)))
                        log_OutTraceTuningData(*((uint64_t ***)v98 + 4), 15, (uint64_t)"%s%.*s", v48, v49, v50, v51, v52, "APPEND");
                      goto LABEL_58;
                    }
                    v83 = *((_QWORD *)v98 + 4);
                    v88 = "lhError";
                    v85 = "%s%x";
                    v84 = 11027;
                  }
                  log_OutPublic(v83, (uint64_t)"RETTT", v84, v85, v34, v35, v36, v37, v88);
                  v82 = inited;
                }
                if ((v82 & 0x80000000) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
              log_OutPublic(*((_QWORD *)v98 + 4), (uint64_t)"RETTT", 11002, 0, v28, v29, v30, v31, v87);
              return 2147491850;
            }
          }
        }
      }
    }
  }
  return v7;
}

uint64_t sub_GsubCompiledRe(uint64_t a1, uint64_t a2, int a3, char *a4, const char *a5, const char **a6)
{
  return sub_Substitute(a1, a2, a3, a4, a5, 1, a6);
}

uint64_t sub_Append(uint64_t a1, void *__src, size_t __n, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;

  if (a1 && __src)
  {
    v10 = __n;
    if (!(_DWORD)__n)
      return 0;
    v11 = *(_DWORD *)(a1 + 28);
    v12 = v11 + __n;
    if (v11 > (__n ^ 0x7FFFFFFF) || v12 >= 0xF4240 && v12 > 2 * *(_DWORD *)(a1 + 24))
    {
      log_OutPublic(*(_QWORD *)(a1 + 8), (uint64_t)"RETTT", 11001, "%s%u", a5, a6, a7, a8, "bufferLimitBytes");
      return 2147491849;
    }
    if (*(_DWORD *)(a1 + 32) >= v12)
    {
      v22 = *(_QWORD *)(a1 + 16);
LABEL_21:
      memcpy((void *)(v22 + v11), __src, v10);
      v13 = 0;
      *(_DWORD *)(a1 + 28) += v10;
      return v13;
    }
    if (v12 <= 0x7FFFFF7F)
      v14 = (v12 & 0xFFFFFF80) + 128;
    else
      v14 = 0x7FFFFFFFLL;
    v15 = *(_QWORD *)(a1 + 16);
    v16 = *(uint64_t **)a1;
    if (v15)
    {
      v17 = heap_Realloc(v16, v15, v14);
      if (v17)
      {
        v22 = v17;
        bzero((void *)(v17 + *(unsigned int *)(a1 + 32) + 1), (v14 + ~*(_DWORD *)(a1 + 32)));
LABEL_20:
        *(_QWORD *)(a1 + 16) = v22;
        *(_DWORD *)(a1 + 32) = v14;
        v11 = *(_DWORD *)(a1 + 28);
        goto LABEL_21;
      }
    }
    else
    {
      v22 = heap_Calloc(v16, v14, 1);
      if (v22)
        goto LABEL_20;
    }
    log_OutPublic(*(_QWORD *)(a1 + 8), (uint64_t)"RETTT", 11002, 0, v18, v19, v20, v21, v24);
    return 2147491850;
  }
  v13 = 2147491847;
  if (a1)
    log_OutPublic(*(_QWORD *)(a1 + 8), (uint64_t)"RETTT", 11000, 0, a5, a6, a7, a8, v24);
  return v13;
}

uint64_t sub_AppendSubstitute(uint64_t a1, char *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  int v21;
  char v22;
  char *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  size_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  char v35;
  int v37;
  char v38;
  char v39;
  int v40;
  char v41;
  uint64_t v42;
  unsigned int v44;
  __int16 __src;

  if (a1 && a2 && a4)
  {
    v11 = a5;
    _Gryphon_ReportSubstitution(a4[1] - *a4, (void *)(a3 + *a4), a2);
    v18 = strlen(a2);
    if (v18)
    {
      v19 = 0;
      while (1)
      {
        v20 = (unsigned __int8 *)&a2[v19];
        v21 = (char)*v20;
        if (v21 == 36)
          break;
        if (v21 == 92)
        {
          __src = 0;
          v22 = v20[1];
          if ((v22 - 48) < 8)
          {
            v23 = (char *)(v20 + 2);
            v22 -= 48;
            v33 = v19 + (_DWORD)a2 + 4;
            v34 = 1;
            while (1)
            {
              v35 = *v23;
              if ((*v23 & 0xF8) != 0x30)
                break;
              ++v23;
              v22 = v35 + 8 * v22 - 48;
              if (v34++ >= 2)
              {
LABEL_35:
                LODWORD(v23) = v33;
                break;
              }
            }
          }
          else
          {
            switch(v20[1])
            {
              case 'n':
                LODWORD(v23) = (_DWORD)v20 + 2;
                v22 = 10;
                break;
              case 'o':
              case 'p':
              case 'q':
              case 's':
              case 'u':
              case 'w':
LABEL_55:
                LODWORD(v23) = (_DWORD)v20 + 2;
                break;
              case 'r':
                LODWORD(v23) = (_DWORD)v20 + 2;
                v22 = 13;
                break;
              case 't':
                LODWORD(v23) = (_DWORD)v20 + 2;
                v22 = 9;
                break;
              case 'v':
                LODWORD(v23) = (_DWORD)v20 + 2;
                v22 = 11;
                break;
              case 'x':
                v22 = 0;
                v23 = (char *)(v20 + 2);
                v33 = v19 + (_DWORD)a2 + 4;
                v38 = 1;
                while (1)
                {
                  v39 = v38;
                  v40 = *v23;
                  v41 = v40 - 48;
                  if ((v40 - 48) >= 0xA)
                  {
                    if ((v40 - 97) >= 6)
                    {
                      if ((v40 - 65) > 5)
                        goto LABEL_36;
                      v41 = v40 - 55;
                    }
                    else
                    {
                      v41 = v40 - 87;
                    }
                  }
                  v38 = 0;
                  v22 = v41 + 16 * v22;
                  ++v23;
                  if ((v39 & 1) == 0)
                    goto LABEL_35;
                }
              default:
                switch(v20[1])
                {
                  case 'a':
                    LODWORD(v23) = (_DWORD)v20 + 2;
                    v22 = 7;
                    break;
                  case 'b':
                    LODWORD(v23) = (_DWORD)v20 + 2;
                    v22 = 8;
                    break;
                  case 'e':
                    LODWORD(v23) = (_DWORD)v20 + 2;
                    v22 = 27;
                    break;
                  case 'f':
                    LODWORD(v23) = (_DWORD)v20 + 2;
                    v22 = 12;
                    break;
                  default:
                    goto LABEL_55;
                }
                break;
            }
          }
LABEL_36:
          v37 = (_DWORD)v23 - (_DWORD)a2;
          LOBYTE(__src) = v22;
          v28 = sub_Append(a1, &__src, 1uLL, v13, v14, v15, v16, v17);
          v24 = v37;
          if ((v28 & 0x80000000) != 0)
            return v28;
        }
        else
        {
          v28 = sub_Append(a1, v20, 1uLL, v13, v14, v15, v16, v17);
          if ((v28 & 0x80000000) != 0)
            return v28;
          v24 = v19 + 1;
        }
LABEL_37:
        v19 = v24;
        if (v24 >= v18)
          return 0;
      }
      v24 = v19 + 1;
      v25 = a2[v19 + 1];
      v26 = v25 - 58;
      if ((v25 - 58) <= 0xFFFFFFF5)
      {
        if (v25 != 123)
        {
          v32 = a1;
          v31 = 1;
LABEL_29:
          v28 = sub_Append(v32, v20, v31, v13, v14, v15, v16, v17);
          if ((v28 & 0x80000000) != 0)
            return v28;
          goto LABEL_37;
        }
        v24 = v19 + 2;
        v25 = a2[v19 + 2];
      }
      if ((v25 - 48) > 9)
      {
        v27 = 0;
      }
      else
      {
        v27 = 0;
        do
        {
          v27 = v25 + 10 * v27 - 48;
          v25 = a2[++v24];
        }
        while ((v25 - 48) < 0xA);
      }
      if (v26 <= 0xFFFFFFF5)
      {
        if (v25 != 125)
          goto LABEL_37;
        ++v24;
      }
      if (v27 >= v11)
        goto LABEL_37;
      v29 = a4[2 * v27];
      if ((v29 & 0x80000000) != 0)
        goto LABEL_37;
      v30 = *(int *)((char *)a4 + ((8 * v27) | 4));
      if (v30 < 0)
        goto LABEL_37;
      v20 = (unsigned __int8 *)(a3 + v29);
      v31 = (v30 - v29);
      v32 = a1;
      goto LABEL_29;
    }
    return 0;
  }
  else
  {
    v42 = 2147491847;
    if (a1)
      log_OutPublic(*(_QWORD *)(a1 + 8), (uint64_t)"RETTT", 11003, 0, a5, a6, a7, a8, v44);
  }
  return v42;
}

uint64_t PCRE_V10_Adapter_Init(_QWORD *a1)
{
  a1[2] = PCRE_V10_ObjOpen;
  a1[3] = PCRE_V10_ObjClose;
  a1[4] = PCRE_V10_ErrorToLhError;
  a1[5] = PCRE_V10_CompilePattern;
  a1[8] = PCRE_V10_SerializeAndEncode;
  a1[9] = PCRE_V10_SerializeAndEncodeBatch;
  a1[6] = PCRE_V10_SerializeAndDecode;
  a1[7] = PCRE_V10_SerializeAndDecodeBatch;
  a1[10] = PCRE_V10_SerializeFree;
  a1[11] = PCRE_V10_Exec;
  a1[12] = &PCRE_V10_OPTIONS_MAP;
  a1[13] = PCRE_V10_GetVersion;
  return 0;
}

uint64_t PCRE_V10_ObjOpen(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *(**v8)(size_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v5 = 2320506890;
  v6 = heap_Alloc(*(_QWORD *)(a3 + 8), 32);
  if (v6)
  {
    v7 = (_QWORD *)v6;
    v8 = pcre2_general_context_create_8((void *(*)(size_t))loc_PCRE_V10_private_malloc, (void (__cdecl *)(void *))loc_PCRE_V10_private_free, *(void *(**)(size_t))(a3 + 8));
    if (v8)
    {
      v9 = (uint64_t)v8;
      pcre2_compile_context_create_8((uint64_t)v8);
      v11 = v10;
      pcre2_match_context_create_8(v9);
      if (v11)
        v13 = v12 == 0;
      else
        v13 = 1;
      if (!v13)
      {
        v5 = 0;
        *v7 = a3;
        v7[1] = v9;
        v7[2] = v11;
        v7[3] = v12;
        *a1 = v7;
      }
    }
  }
  return v5;
}

uint64_t PCRE_V10_ObjClose(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!a1)
    return 2320506886;
  v2 = a1[3];
  if (v2)
    pcre2_general_context_free_8(v2);
  v3 = a1[2];
  if (v3)
    pcre2_general_context_free_8(v3);
  v4 = a1[1];
  if (v4)
    pcre2_general_context_free_8(v4);
  heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)a1);
  return 0;
}

uint64_t PCRE_V10_ErrorToLhError(int a1)
{
  uint64_t result;

  if ((a1 & 0x80000000) == 0)
    return 0;
  result = 2320506887;
  switch(a1)
  {
    case -55:
    case -54:
    case -53:
    case -52:
    case -50:
    case -46:
    case -45:
    case -43:
    case -42:
    case -41:
    case -40:
    case -39:
    case -38:
    case -36:
    case -35:
    case -33:
    case -32:
    case -30:
      goto LABEL_7;
    case -51:
      return 2320507149;
    case -49:
      goto LABEL_6;
    case -48:
      return 2320506890;
    case -47:
      return 2320514656;
    case -44:
      return 2320514660;
    case -37:
      return 2320514657;
    case -34:
    case -29:
      return result;
    case -31:
      return 2320514662;
    default:
      if (a1 == -2)
      {
        result = 2320514658;
      }
      else if (a1 == -1)
      {
LABEL_6:
        result = 2320506900;
      }
      else
      {
LABEL_7:
        result = 2320514663;
      }
      break;
  }
  return result;
}

uint64_t PCRE_V10_CompilePattern(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _DWORD *a6)
{
  uint64_t v9;

  v9 = pcre2_compile_8();
  if (!v9)
  {
    pcre2_get_error_message_8(0, a4, a5);
    if (!a6)
      return v9;
    goto LABEL_3;
  }
  if (a6)
LABEL_3:
    *a6 = 0;
  return v9;
}

uint64_t PCRE_V10_Exec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int32x2_t *a7, int a8, int *a9)
{
  _QWORD *v11;
  uint64_t matched;
  uint64_t v13;
  uint64_t v14;
  int64x2_t *ovector_pointer_8;
  int64x2_t v16;
  int v17;

  v11 = pcre2_match_data_create_from_pattern_8(a2, *(__int128 **)(a1 + 8));
  if (v11)
  {
    matched = pcre2_match_8();
    v13 = matched;
    if ((matched & 0x80000000) == 0)
    {
      if (a8 / 3 >= (int)matched)
        v14 = matched;
      else
        v14 = (a8 / 3);
      ovector_pointer_8 = (int64x2_t *)pcre2_get_ovector_pointer_8((uint64_t)v11);
      if ((int)v14 >= 1)
      {
        do
        {
          v16 = *ovector_pointer_8++;
          *a7++ = vmovn_s64(v16);
          --v14;
        }
        while (v14);
      }
    }
    v17 = 0;
  }
  else
  {
    v17 = -1974460406;
    *a9 = -1974460406;
    v13 = 0xFFFFFFFFLL;
  }
  pcre2_match_data_free_8((uint64_t)v11);
  *a9 = v17;
  return v13;
}

uint64_t PCRE_V10_SerializeAndEncode(uint64_t a1, size_t *a2, _DWORD *a3, _QWORD *a4)
{
  int v6;
  uint64_t v8;
  uint64_t v9;
  size_t *v10[2];

  v10[1] = *(size_t **)MEMORY[0x1E0C80C00];
  v8 = 0;
  v9 = 0;
  v10[0] = a2;
  v6 = pcre2_serialize_encode_8(v10, 1, &v9, &v8, *(__int128 **)(a1 + 8));
  if ((v6 & 0x80000000) == 0)
  {
    *a3 = v8;
    *a4 = v9;
  }
  return PCRE_V10_ErrorToLhError(v6);
}

uint64_t PCRE_V10_SerializeAndEncodeBatch(uint64_t a1, size_t **a2, uint64_t a3, _DWORD *a4, _QWORD *a5)
{
  int v7;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  v7 = pcre2_serialize_encode_8(a2, a3, &v10, &v9, *(__int128 **)(a1 + 8));
  if ((v7 & 0x80000000) == 0)
  {
    *a4 = v9;
    *a5 = v10;
  }
  return PCRE_V10_ErrorToLhError(v7);
}

uint64_t PCRE_V10_SerializeAndDecode(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  int v4;
  uint64_t result;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0;
  v4 = pcre2_serialize_decode_8((uint64_t)v6, 1, a2, *(__int128 **)(a1 + 8));
  result = PCRE_V10_ErrorToLhError(v4);
  *a3 = v6[0];
  return result;
}

uint64_t PCRE_V10_SerializeAndDecodeBatch(uint64_t a1, _DWORD *a2, int a3, uint64_t a4)
{
  if (pcre2_serialize_decode_8(a4, a3, a2, *(__int128 **)(a1 + 8)) == a3)
    return 0;
  else
    return 2320514662;
}

_WORD *PCRE_V10_GetVersion(_WORD *result, _WORD *a2)
{
  *result = 10;
  *a2 = 32;
  return result;
}

uint64_t PCRE_V10_Adapter_Pattern_Init(_QWORD *a1)
{
  a1[2] = PCRE_V10_FreePattern;
  a1[3] = PCRE_V10_GetPatternSize;
  a1[4] = PCRE_V10_CopyPattern;
  return 0;
}

uint64_t PCRE_V10_GetPatternSize(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = pcre2_pattern_info_8(a1, 0x16u, a2);
  return PCRE_V10_ErrorToLhError(v2);
}

uint64_t loc_PCRE_V10_private_malloc(uint64_t a1, uint64_t a2)
{
  return heap_Alloc(a2, a1);
}

_QWORD *loc_PCRE_V10_private_free(uint64_t a1, _QWORD *a2)
{
  return heap_Free(a2, a1);
}

uint64_t PCRE_Adapter_Create(int a1, uint64_t a2, _WORD *a3, int a4)
{
  uint64_t inited;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;

  v11 = 0;
  inited = InitRsrcFunction(a3, a4, &v11);
  if ((inited & 0x80000000) != 0)
    return inited;
  v7 = 2320506890;
  v8 = (_QWORD *)heap_Alloc(*(_QWORD *)(v11 + 8), 112);
  if (v8)
  {
    v9 = v8;
    if (a1 == 1)
      v7 = PCRE_V10_Adapter_Init(v8);
    else
      v7 = 2320506898;
    *v9 = v11;
    v9[1] = 0;
    *(_QWORD *)a2 = v9;
    *(_DWORD *)(a2 + 8) = 56664;
  }
  return v7;
}

uint64_t PCRE_ObjOpen(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 56664, 112);
  if ((result & 0x80000000) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1 + 16))(a1 + 8, a3, *(_QWORD *)a1);
  return result;
}

uint64_t PCRE_ObjClose(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;

  result = safeh_HandleCheck(a1, a2, 56664, 112);
  if ((result & 0x80000000) == 0)
  {
    v4 = (*(uint64_t (**)(_QWORD))(a1 + 24))(*(_QWORD *)(a1 + 8));
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), a1);
    return v4;
  }
  return result;
}

uint64_t PCRE_ErrorToLhError(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 56664, 112);
  if ((result & 0x80000000) == 0)
    return (*(uint64_t (**)(uint64_t))(a1 + 32))(a3);
  return result;
}

_QWORD *PCRE_CompilePattern(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  _QWORD v8[2];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = 0;
  v8[1] = 0;
  v9 = 0;
  return PCRE_CompilePatternWithOptions(a1, a2, a3, (uint64_t)v8, a4, a5, a6, a7);
}

_QWORD *PCRE_CompilePatternWithOptions(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v15 = safeh_HandleCheck(a1, a2, 56664, 112);
  if (v15 < 0)
  {
    v20 = 0;
    goto LABEL_13;
  }
  v16 = 0;
  LODWORD(v17) = 0;
  do
  {
    v18 = *(_DWORD *)(a4 + v16);
    if (v18)
      v18 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + v16);
    v17 = v18 | v17;
    v16 += 4;
  }
  while (v16 != 20);
  v19 = (_QWORD *)heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), 40);
  v20 = v19;
  if (!v19)
  {
LABEL_12:
    v15 = -1974460406;
    goto LABEL_13;
  }
  PCRE_V10_Adapter_Pattern_Init(v19);
  v21 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 40))(*(_QWORD *)(a1 + 8), a3, v17, a5, a6, a7);
  if (!v21)
  {
    v20 = 0;
    goto LABEL_12;
  }
  *v20 = *(_QWORD *)a1;
  v20[1] = v21;
LABEL_13:
  *a8 = v15;
  return v20;
}

uint64_t PCRE_FreePattern(uint64_t a1, int a2)
{
  uint64_t v3;

  v3 = safeh_HandleCheck(a1, a2, 56665, 0);
  if ((v3 & 0x80000000) == 0)
  {
    (*(void (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), a1);
  }
  return v3;
}

uint64_t PCRE_CopyPattern(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v7 = safeh_HandleCheck(a1, a2, 56665, 0);
  if ((v7 & 0x80000000) != 0)
    goto LABEL_5;
  v8 = 2320506890;
  v9 = (_QWORD *)heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), 40);
  if (v9)
  {
    v10 = v9;
    PCRE_V10_Adapter_Pattern_Init(v9);
    v11 = *(_QWORD *)(a1 + 8);
    *v10 = *(_QWORD *)a1;
    v12 = (*(uint64_t (**)(uint64_t))(a1 + 32))(v11);
    v10[1] = v12;
    if (v12)
    {
      *(_QWORD *)a3 = v10;
      *(_DWORD *)(a3 + 8) = 56665;
LABEL_5:
      v8 = v7;
    }
  }
  *a4 = v8;
  return v8;
}

uint64_t PCRE_Exec(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, _DWORD *a10)
{
  _QWORD v11[2];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11[0] = 0;
  v11[1] = 0;
  v12 = 0;
  return PCRE_ExecWithOptions(a1, a2, a3, a4, a5, a6, a7, (uint64_t)v11, a8, a9, a10);
}

uint64_t PCRE_ExecWithOptions(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, _DWORD *a11)
{
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v18 = safeh_HandleCheck(a1, a2, 56664, 112);
  if (v18 < 0 || (v18 = safeh_HandleCheck(a3, a4, 56665, 0), v18 < 0))
  {
    *a11 = v18;
    return 0xFFFFFFFFLL;
  }
  else
  {
    v19 = 0;
    LODWORD(v20) = 0;
    do
    {
      v21 = *(_DWORD *)(a8 + v19);
      if (v21)
        v21 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + v19);
      v20 = v21 | v20;
      v19 += 4;
    }
    while (v19 != 20);
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _DWORD *))(a1 + 88))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a3 + 8), a5, a6, a7, v20, a9, a10, a11);
  }
}

uint64_t PCRE_Adapter2PCREOptions(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  int v7;

  if ((safeh_HandleCheck(a1, a2, 56664, 112) & 0x80000000) != 0)
    return 0;
  v5 = 0;
  LODWORD(result) = 0;
  do
  {
    v7 = *(_DWORD *)(a3 + v5);
    if (v7)
      v7 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + v5);
    result = v7 | result;
    v5 += 4;
  }
  while (v5 != 20);
  return result;
}

uint64_t PCRE_Version(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = safeh_HandleCheck(a1, a2, 56664, 112);
  if ((v7 & 0x80000000) == 0)
    (*(void (**)(uint64_t, uint64_t))(a1 + 104))(a3, a4);
  return v7;
}

uint64_t PCRE_AttachPattern(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v7 = safeh_HandleCheck(a1, a2, 56664, 112);
  if ((v7 & 0x80000000) != 0)
    return v7;
  v8 = 2320506890;
  v9 = (_QWORD *)heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), 40);
  if (v9)
  {
    v10 = v9;
    PCRE_V10_Adapter_Pattern_Init(v9);
    if (a3)
    {
      *v10 = *(_QWORD *)a1;
      v10[1] = a3;
      *a4 = v10;
      a4[1] = 56665;
      return v7;
    }
  }
  return v8;
}

uint64_t PCRE_SerializeAndDecodeBatch(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 56664, 112);
  if ((result & 0x80000000) == 0)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(a1 + 56))(*(_QWORD *)(a1 + 8), a3, a4, a5);
  return result;
}

uint64_t luattt_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2711625729;
  result = 0;
  *a2 = &ILuattt;
  return result;
}

uint64_t luattt_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  _QWORD *v10;
  _WORD **v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t Object;
  _QWORD *v15;
  int Allocator;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = 2711625735;
  if (a5)
  {
    *a5 = safeh_GetNullHandle();
    a5[1] = v9;
    v20 = 0;
    v21 = 0;
    if ((InitRsrcFunction(a3, a4, &v21) & 0x80000000) == 0)
    {
      v10 = (_QWORD *)heap_Calloc(*(_QWORD **)(v21 + 8), 1, 144);
      if (v10)
      {
        v11 = (_WORD **)v10;
        v10[2] = 0;
        v12 = v10 + 2;
        *v10 = a3;
        v10[1] = a4;
        v10[8] = 0;
        v13 = v10 + 8;
        Object = objc_GetObject(*(_QWORD *)(v21 + 48), (uint64_t)"SYNTHSTREAM", &v20);
        if ((Object & 0x80000000) == 0)
        {
          v11[9] = *(_WORD **)(v20 + 8);
          v15 = *(_QWORD **)(v21 + 8);
          v18 = xmmword_1DECA1F98;
          v19 = 0;
          if (!vector_ObjOpen(v15, &v18, 1, v13))
          {
            v11 = 0;
            goto LABEL_14;
          }
          Allocator = ooc_utils_createAllocator((uint64_t)(v11 + 3), *v11, (int)v11[1]);
          Object = LH_ERROR_to_VERROR(Allocator);
          if ((Object & 0x80000000) == 0)
          {
            v5 = 2711626240;
            if ((luavmldoutil_initialize_lua_vm_from_buffer(*v11, (uint64_t)v11[1], (uint64_t)(v11 + 3), (uint64_t)"TTT_rewrite_process", (uint64_t)luattt_log_callback, v12, "TTT_script_set = {}\n\n-- Load a resource\n-- argument: the resource name\n-- return: the identifier\nfunction TTT_resource_load(name)\n    local id = 0\n    for _, info in ipairs(TTT_script_set) do\n        if id < info.id then\n            id = info.id\n        end\n    end\n    id = id + 1\n"
                    "    local info = {}\n"
                    "    info.id = id\n"
                    "    info.func = _G[name]\n"
                    "    table.insert(TTT_script_set, 1, info)\n"
                    "    return tostring(id)\n"
                    "end\n"
                    "\n"
                    "-- Unload a resource\n"
                    "-- argument: the identifier\n"
                    "-- return: the identifier or an empty string if not present\n"
                    "function TTT_resource_unload(id_str)\n"
                    "    local id = tonumber(id_str)\n"
                    "    for pos, info in ipairs(TTT_script_set) do\n"
                    "        if info.id == id then\n"
                    "            table.remove(TTT_script_set, pos)\n"
                    "            return id_str\n"
                    "        end\n"
                    "    end\n"
                    "    return \"\"\n"
                    "end\n"
                    "\n"
                    "-- Call the rewrite process of all resources\n"
                    "-- argument: input text\n"
                    "-- return: output text\n"
                    "function TTT_rewrite_process(text)\n"
                    "    local buffer = text\n"
                    "    for _, info in ipairs(TTT_script_set) do\n"
                    "        buffer = info.func(buffer)\n"
                    "    end\n"
                    "    return buffer\n"
                    "end\n",
                    0x412u) & 0x80000000) != 0
              || !*v12)
            {
              goto LABEL_12;
            }
LABEL_14:
            v5 = 0;
            *a5 = (uint64_t)v11;
            *((_DWORD *)a5 + 2) = 1077;
            return v5;
          }
        }
        v5 = Object;
LABEL_12:
        luattt_pObjClose((uint64_t)v11);
        return v5;
      }
      return 2711625738;
    }
  }
  return v5;
}

uint64_t luattt_ObjClose(_QWORD *a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck((uint64_t)a1, a2, 1077, 144);
  if ((result & 0x80000000) == 0)
  {
    result = luattt_UnloadAllScripts((uint64_t)a1);
    if ((result & 0x80000000) == 0)
    {
      luattt_ProcessEnd(a1, a2);
      return luattt_pObjClose((uint64_t)a1);
    }
  }
  return result;
}

uint64_t luattt_ObjReopen(uint64_t a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 1077, 144);
  if ((result & 0x80000000) == 0)
    return luattt_UnloadAllScripts(a1);
  return result;
}

uint64_t luattt_ResourceTypes(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 1077, 144);
  if ((result & 0x80000000) == 0)
  {
    result = 0;
    *a3 = &luattt_ResourceTypes_SZ_LUATTT_CONTENT_TYPES;
  }
  return result;
}

uint64_t luattt_ResourceLoad(uint64_t a1, int a2, char *a3, const char *a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;
  BOOL v14;
  uint64_t v15;
  unsigned int v16;
  const char *v17;
  char v19;
  uint64_t v20;
  int ScriptFromBuffer;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v29;
  const char *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = 0;
  v34 = 0;
  v32 = 0;
  v7 = 2711625735;
  v31 = 0;
  if (a3 && a7)
  {
    v9 = a6;
    v10 = a5;
    if (a4)
    {
      v14 = a6 != 0;
      if (!a5 && a6)
        return v7;
    }
    else
    {
      if (!a5 || !a6)
        return v7;
      v14 = 1;
    }
    v15 = safeh_HandleCheck(a1, a2, 1077, 144);
    if ((v15 & 0x80000000) != 0)
      return v15;
    v29 = 0;
    v30 = 0;
    *(_QWORD *)a7 = 0;
    *(_DWORD *)(a7 + 8) = 0;
    if ((InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v34) & 0x80000000) == 0)
    {
      v35 = 0;
      if (a4 && *a4 && vector_GetElemAt(*(_QWORD *)(a1 + 64), 0, &v35))
      {
        v16 = 1;
        do
        {
          v17 = *(const char **)(v35 + 8);
          if (v17)
          {
            if (!strcmp(v17, a4))
              return 2711625752;
          }
        }
        while (vector_GetElemAt(*(_QWORD *)(a1 + 64), v16++, &v35));
      }
      v19 = !v14;
      if (!v10)
        v19 = 1;
      if ((v19 & 1) != 0)
      {
        v20 = luattt_DataOpen(v34, a4, &v33, a3, (uint64_t)&v32, (uint64_t)&v31);
        if ((v20 & 0x80000000) != 0)
          goto LABEL_32;
        v10 = v32;
        v9 = v31;
      }
      else
      {
        v32 = v10;
        v31 = v9;
      }
      ScriptFromBuffer = LuaVMLDO_LoadScriptFromBuffer(*(_QWORD *)(a1 + 16), v10, v9);
      v20 = LH_ERROR_to_VERROR(ScriptFromBuffer);
      if ((v20 & 0x80000000) == 0)
      {
        v22 = LuaVMLDO_RunFunctionReturningString(*(_QWORD *)(a1 + 16), (uint64_t)"TTT_resource_load", (uint64_t)"TTT_script", 4u, (char *)&v29);
        v23 = LH_ERROR_to_VERROR(v22);
        v27 = v23;
        if ((v23 & 0x80000000) != 0)
        {
          v7 = v23;
        }
        else
        {
          v30 = a4;
          log_OutText(*(_QWORD *)(v34 + 32), (uint64_t)"LUATTT", 5, 0, (uint64_t)"Loaded resource %s", v24, v25, v26, (uint64_t)&v29);
          if (vector_Add(*(_QWORD *)(a1 + 64), &v29) == 1)
            v7 = v27;
          else
            v7 = 2711625738;
          *(_QWORD *)a7 = v30;
          *(_DWORD *)(a7 + 8) = 1108;
        }
        goto LABEL_34;
      }
LABEL_32:
      v7 = v20;
LABEL_34:
      if (v32)
      {
        brk_DataUnmap(*(_QWORD *)(v34 + 24), v33, v32);
        v32 = 0;
      }
      if (v33)
        brk_DataClose(*(_QWORD *)(v34 + 24), v33);
    }
  }
  return v7;
}

uint64_t luattt_ResourceUnload(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  v7 = safeh_HandleCheck(a1, a2, 1077, 144);
  if ((v7 & 0x80000000) != 0)
    return v7;
  v8 = 2711626765;
  if ((InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v16) & 0x80000000) != 0)
    return 2711625735;
  v7 = safeh_HandleCheck(a3, a4, 1108, 16);
  if ((v7 & 0x80000000) != 0)
    return v7;
  if (vector_GetElemAt(*(_QWORD *)(a1 + 64), 0, &v15))
  {
    v9 = 0;
    while (*((_QWORD *)v15 + 1) != a3)
    {
      if (!vector_GetElemAt(*(_QWORD *)(a1 + 64), ++v9, &v15))
        return v8;
    }
    v11 = LuaVMLDO_RunFunctionReturningString(*(_QWORD *)(a1 + 16), (uint64_t)"TTT_resource_unload", (uint64_t)v15, 4u, v15);
    v8 = LH_ERROR_to_VERROR(v11);
    if ((v8 & 0x80000000) == 0)
    {
      log_OutText(*(_QWORD *)(v16 + 32), (uint64_t)"LUATTT", 5, 0, (uint64_t)"Unloaded resource %s", v12, v13, v14, (uint64_t)v15);
      vector_Remove(*(_QWORD *)(a1 + 64), v9);
    }
  }
  return v8;
}

uint64_t luattt_ProcessStart(_WORD **a1, int a2, _WORD *a3, _WORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v14;

  v14 = 0;
  v8 = 2711625735;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 1077, 144) & 0x80000000) != 0)
    return 2711625736;
  if ((InitRsrcFunction(*a1, (int)a1[1], &v14) & 0x80000000) == 0)
  {
    v9 = 0;
    a1[14] = a3;
    a1[15] = a4;
    do
    {
      v10 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, char *, _QWORD, _QWORD, _WORD **))a1[9] + 8))(a3, a4, 538, luattt_ProcessStart_szInput[v9], 0, 0, a1 + 16);
      if ((v10 & 0x80000000) == 0)
        break;
    }
    while (v9++ != 6);
    if (v10 < 0)
      a1[16] = 0;
    v12 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, const char *, _QWORD, _QWORD, _WORD **))a1[9] + 8))(a3, a4, 538, "text/plain;charset=utf-8",
            0,
            0,
            a1 + 10);
    if ((v12 & 0x80000000) != 0)
    {
      v8 = v12;
LABEL_14:
      luattt_ProcessEnd(a1, a2);
      return v8;
    }
    v8 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, const char *, _QWORD, uint64_t, _WORD **))a1[9] + 8))(a3, a4, 538, "text/plain;charset=utf-8",
           0,
           1,
           a1 + 12);
    if ((v8 & 0x80000000) != 0)
      goto LABEL_14;
  }
  return v8;
}

uint64_t luattt_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v7;
  int v8;
  size_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;
  char *__s;
  char *v21;
  uint64_t v22;

  v21 = 0;
  v22 = 0;
  v18 = 0;
  v19 = 0;
  v7 = safeh_HandleCheck(a1, a2, 1077, 144);
  if ((v7 & 0x80000000) == 0)
  {
    if ((InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v22) & 0x80000000) != 0)
      return 2711625735;
    if (!*(_QWORD *)(a1 + 80) || !*(_QWORD *)(a1 + 96))
    {
      v15 = 0;
LABEL_24:
      v8 = 1;
LABEL_25:
      *a5 = v8;
      return v15;
    }
    *a5 = 0;
    v7 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)(a1 + 72) + 144))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), (char *)&v18 + 4, &v18);
    if ((v7 & 0x80000000) == 0)
    {
      v8 = v18;
      if (!(_DWORD)v18)
      {
        v15 = 0;
        goto LABEL_25;
      }
      v7 = (*(uint64_t (**)(_QWORD, _QWORD, char **, char *))(*(_QWORD *)(a1 + 72) + 88))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), &v21, (char *)&v18 + 4);
      if ((v7 & 0x80000000) == 0)
      {
        __s = v21;
        v9 = HIDWORD(v18);
        if (vector_GetSize(*(_QWORD *)(a1 + 64)))
        {
          v10 = LuaVMLDO_RunFunctionReturningPointerToString(*(_QWORD *)(a1 + 16), (uint64_t)"TTT_rewrite_process", (uint64_t)v21, (uint64_t *)&__s);
          v11 = LH_ERROR_to_VERROR(v10);
          if ((v11 & 0x80000000) != 0)
            goto LABEL_17;
          v9 = strlen(__s);
        }
        if (!(_DWORD)v9
          || (v11 = (*(uint64_t (**)(_QWORD, _QWORD, void **, size_t))(*(_QWORD *)(a1 + 72) + 112))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), &v19, v9), (v11 & 0x80000000) == 0)&& (memcpy(v19, __s, v9), v11 = (*(uint64_t (**)(_QWORD, _QWORD, size_t))(*(_QWORD *)(a1 + 72) + 120))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), v9), (v11 & 0x80000000) == 0))
        {
          v12 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 72) + 96))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), HIDWORD(v18));
          if ((v12 & 0x80000000) != 0 || !vector_GetSize(*(_QWORD *)(a1 + 64)))
          {
LABEL_18:
            v14 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 72) + 72))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
            if (v14 >= 0)
              v15 = v12;
            else
              v15 = v14;
            *(_QWORD *)(a1 + 96) = safeh_GetNullHandle();
            *(_QWORD *)(a1 + 104) = v16;
            goto LABEL_24;
          }
          v13 = LuaVMLDO_ReleasePointerToString(*(_QWORD *)(a1 + 16));
          v11 = LH_ERROR_to_VERROR(v13);
        }
LABEL_17:
        v12 = v11;
        goto LABEL_18;
      }
    }
  }
  return v7;
}

uint64_t luattt_ProcessEnd(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t NullHandle;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;

  v3 = safeh_HandleCheck((uint64_t)a1, a2, 1077, 144);
  if ((v3 & 0x80000000) == 0)
  {
    NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[16], a1[17], NullHandle, v5))
    {
      v6 = (*(uint64_t (**)(_QWORD, _QWORD))(a1[9] + 72))(a1[16], a1[17]);
      if (v6 >= 0)
        v3 = v3;
      else
        v3 = v6;
    }
    a1[16] = safeh_GetNullHandle();
    a1[17] = v7;
    v8 = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[10], a1[11], v8, v9))
    {
      v10 = (*(uint64_t (**)(_QWORD, _QWORD))(a1[9] + 72))(a1[10], a1[11]);
      if (v10 >= 0)
        v3 = v3;
      else
        v3 = v10;
    }
    a1[10] = safeh_GetNullHandle();
    a1[11] = v11;
    v12 = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[12], a1[13], v12, v13))
    {
      v14 = (*(uint64_t (**)(_QWORD, _QWORD))(a1[9] + 72))(a1[12], a1[13]);
      if (v14 >= 0)
        v3 = v3;
      else
        v3 = v14;
    }
    a1[12] = safeh_GetNullHandle();
    a1[13] = v15;
  }
  return v3;
}

uint64_t luattt_log_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return log_OutText(a1, (uint64_t)"LUATTT", 4, 0, a2, a6, a7, a8, 0);
}

uint64_t luattt_pObjClose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v1 = 2711625735;
  v5 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v5) & 0x80000000) == 0)
  {
    if (*(_QWORD *)(a1 + 72))
      objc_ReleaseObject(*(_QWORD *)(v5 + 48), (uint64_t)"SYNTHSTREAM");
    if (*(_QWORD *)(a1 + 16))
      luavmldoutil_destroy_lua_vm(a1 + 24, (uint64_t *)(a1 + 16));
    kaldi::nnet1::Component::IsUpdatable((kaldi::nnet1::Component *)(a1 + 24));
    v3 = *(_QWORD *)(a1 + 64);
    if (v3)
      vector_ObjClose(v3);
    heap_Free(*(_QWORD **)(v5 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t luattt_UnloadAllScripts(uint64_t a1)
{
  uint64_t i;
  uint64_t inited;
  uint64_t v4;
  int Size;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;

  i = 2711625735;
  v12 = 0;
  v13 = 0;
  if (a1)
  {
    inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v13);
    if ((inited & 0x80000000) == 0)
    {
      v4 = inited;
      Size = vector_GetSize(*(_QWORD *)(a1 + 64));
      if (Size)
      {
        v6 = Size - 1;
        for (i = v4; vector_GetElemAt(*(_QWORD *)(a1 + 64), v6, &v12); --v6)
        {
          v7 = LuaVMLDO_RunFunctionReturningString(*(_QWORD *)(a1 + 16), (uint64_t)"TTT_resource_unload", (uint64_t)v12, 4u, v12);
          i = LH_ERROR_to_VERROR(v7);
          if ((i & 0x80000000) != 0)
            break;
          log_OutText(*(_QWORD *)(v13 + 32), (uint64_t)"LUATTT", 5, 0, (uint64_t)"Unloaded resource %s", v8, v9, v10, (uint64_t)v12);
          vector_Remove(*(_QWORD *)(a1 + 64), v6);
          if (!v6)
            break;
        }
      }
      else
      {
        return v4;
      }
    }
  }
  return i;
}

uint64_t luattt_DataOpen(uint64_t a1, const char *a2, uint64_t *a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t Str;
  int v14;
  int v16[2];
  char v17[1024];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v16 = 0;
  bzero(v17, 0x400uLL);
  v12 = brk_DataOpenEx(*(_QWORD *)(a1 + 24), (uint64_t)a2, 1, (uint64_t)a3);
  if (strstr(a4, ";loader=broker") && (v12 & 0x80000000) != 0)
  {
    Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"langcode", v16);
    if ((Str & 0x80000000) != 0)
      return Str;
    v14 = brokeraux_ComposeBrokerString(a1, a2, 0, 1, *(char **)v16, 0, 0, v17, 0x400uLL);
    if (v14 < 0)
      return v14 | 0xA1A02000;
    v12 = brk_DataOpenEx(*(_QWORD *)(a1 + 24), (uint64_t)v17, 0, (uint64_t)a3);
  }
  if ((v12 & 0x80000000) == 0)
    return brk_DataMapEx(*(_QWORD *)(a1 + 24), *a3, 0, a6, a5);
  return v12;
}

uint64_t araparser_loc_getStandardizeRule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  char i;
  char *v9;
  char *v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  unsigned int v19;
  __int16 v20;
  char **v21;
  int __c;

  LOBYTE(__c) = 0;
  v21 = 0;
  v20 = -1;
  v5 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t, char ***, __int16 *, int *))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 96))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), "fecfg", a2, &v21, &v20, &__c);
  if ((v5 & 0x80000000) == 0 && v20)
  {
    v6 = *v21;
    v7 = strchr(*v21, __c);
    if (v7)
      *v7 = 0;
    if (v6)
    {
      for (i = 0; ; ++i)
      {
        v9 = strchr(v6, 95);
        v10 = v9;
        if (v9)
          *v9 = 0;
        v11 = strlen(v6);
        v12 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, (v11 + 1));
        if (!v12)
          break;
        v17 = v12;
        strcpy(v12, v6);
        if (i == 1)
        {
          *(_QWORD *)(a3 + 8) = v17;
        }
        else if (i)
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v17);
        }
        else
        {
          *(_QWORD *)a3 = v17;
          *(_WORD *)(a3 + 16) = strlen(v17);
        }
        v6 = v10 + 1;
        if (!v10)
          return v5;
      }
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 54000, 0, v13, v14, v15, v16, v19);
      return 2356158474;
    }
  }
  return v5;
}

uint64_t fe_ara_parser_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t PosparserIGTreesAndDict;
  uint64_t inited;
  uint64_t Object;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  const char *v28;
  unsigned int v30;
  __int128 v31[2];
  _QWORD *(*v32)(_QWORD *, _QWORD *);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v36 = 0;
  v37 = 0;
  PosparserIGTreesAndDict = 2356158471;
  v35 = 0;
  v33 = 0;
  v34 = 0;
  if (!a5)
    return PosparserIGTreesAndDict;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v37);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = objc_GetObject(*(_QWORD *)(v37 + 48), (uint64_t)"SYNTHSTREAM", &v36);
  if ((inited & 0x80000000) != 0)
    return inited;
  Object = objc_GetObject(*(_QWORD *)(v37 + 48), (uint64_t)"FE_DEPES", &v34);
  v11 = *(_QWORD *)(v37 + 48);
  if ((Object & 0x80000000) != 0)
  {
    v28 = "SYNTHSTREAM";
LABEL_17:
    objc_ReleaseObject(v11, (uint64_t)v28);
    return Object;
  }
  v12 = objc_GetObject(v11, (uint64_t)"FE_DCTLKP", &v35);
  if ((v12 & 0x80000000) != 0)
  {
    Object = v12;
    objc_ReleaseObject(*(_QWORD *)(v37 + 48), (uint64_t)"SYNTHSTREAM");
    v11 = *(_QWORD *)(v37 + 48);
    v28 = "FE_DEPES";
    goto LABEL_17;
  }
  v17 = heap_Calloc(*(_QWORD **)(v37 + 8), 952, 1);
  if (!v17)
  {
    log_OutPublic(*(_QWORD *)(v37 + 32), (uint64_t)"FE_ARAPARSER", 54000, 0, v13, v14, v15, v16, v30);
    objc_ReleaseObject(*(_QWORD *)(v37 + 48), (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(*(_QWORD *)(v37 + 48), (uint64_t)"FE_DCTLKP");
    objc_ReleaseObject(*(_QWORD *)(v37 + 48), (uint64_t)"FE_DEPES");
    return 2356158474;
  }
  v18 = (_QWORD **)(v17 + 24);
  inited = posparser_Open(v37, (uint64_t *)(v17 + 24));
  if ((inited & 0x80000000) != 0)
    return inited;
  *(_WORD *)(v17 + 56) = 0;
  *(_QWORD *)(v17 + 48) = 0;
  inited = paramc_ParamGetStr(*(_QWORD *)(v37 + 40), (uint64_t)"langcode", &v33);
  if ((inited & 0x80000000) != 0)
    return inited;
  __strcpy_chk();
  *(_DWORD *)(*(_QWORD *)(v17 + 24) + 243) = 7565168;
  v19 = v37;
  *(_QWORD *)(v17 + 8) = a4;
  *(_QWORD *)(v17 + 16) = v19;
  *(_QWORD *)v17 = a3;
  *(_QWORD *)(v17 + 32) = *(_QWORD *)(v36 + 8);
  v20 = v35;
  v21 = *(_QWORD *)(v17 + 24);
  *(_QWORD *)(v21 + 24) = *(_QWORD *)(v35 + 8);
  *(_OWORD *)(v21 + 8) = *(_OWORD *)(v20 + 16);
  v22 = v34;
  v23 = *(_QWORD *)(v17 + 24);
  *(_QWORD *)(v23 + 56) = *(_QWORD *)(v34 + 8);
  *(_OWORD *)(v23 + 40) = *(_OWORD *)(v22 + 16);
  *(_QWORD *)a5 = v17;
  *(_DWORD *)(a5 + 8) = 85954;
  v24 = *(_QWORD *)(v17 + 24);
  PosparserIGTreesAndDict = getPosparserIGTreesAndDict(*(_QWORD *)(v17 + 16), *(_WORD **)v17, *(_QWORD *)(v17 + 8), *(_QWORD *)(v24 + 8), *(_QWORD *)(v24 + 16), *(_QWORD *)(v24 + 24), (_DWORD *)(v24 + 232), (uint64_t *)(v24 + 216), (uint64_t *)(v24 + 224), (_DWORD *)(v24 + 236), v24 + 240, (_DWORD *)(v17 + 40));
  if ((PosparserIGTreesAndDict & 0x80000000) != 0)
  {
LABEL_21:
    fe_ara_parser_ObjClose(*(_QWORD *)a5, *(_QWORD *)(a5 + 8));
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    return PosparserIGTreesAndDict;
  }
  if (!*(_DWORD *)(v17 + 40))
    return PosparserIGTreesAndDict;
  v25 = *(_QWORD **)(v37 + 8);
  v26 = *v18 + 32;
  v31[0] = xmmword_1EA948088;
  v31[1] = *(_OWORD *)&off_1EA948098;
  v32 = ssftmap_ElemFreeString;
  v27 = ssftmap_ObjOpen(v25, 0, v31, v26);
  if ((v27 & 0x80000000) != 0)
  {
    PosparserIGTreesAndDict = v27;
    goto LABEL_21;
  }
  PosparserIGTreesAndDict = posparser_getPosMap(*v18);
  if ((PosparserIGTreesAndDict & 0x80000000) != 0)
    goto LABEL_21;
  return PosparserIGTreesAndDict;
}

uint64_t fe_ara_parser_ObjClose(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = safeh_HandleCheck(a1, a2, 85954, 952);
  if ((result & 0x80000000) != 0)
    return 2356158472;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 40) && (ssftmap_ObjClose(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 256)) & 0x80000000) == 0)
    {
      v9 = *(_QWORD *)(a1 + 24);
      if (*(_DWORD *)(v9 + 232) == 1)
        freePosparserIGTrees(*(_QWORD *)(a1 + 16), (uint64_t *)(v9 + 216), (uint64_t *)(v9 + 224), v4, v5, v6, v7, v8);
    }
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), (uint64_t)"FE_DCTLKP");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), (uint64_t)"FE_DEPES");
    posparser_Close(*(_QWORD **)(a1 + 24));
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), a1);
    return 0;
  }
  return result;
}

uint64_t fe_ara_parser_ObjReopen(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;

  v12 = 0;
  result = safeh_HandleCheck(a1, a2, 85954, 952);
  if ((result & 0x80000000) != 0)
    return 2356158472;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 40) != 1
      || (result = ssftmap_Clear(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 256)), (result & 0x80000000) == 0)
      && (result = posparser_getPosMap(*(_QWORD **)(a1 + 24)), (result & 0x80000000) == 0)
      && ((v9 = *(_QWORD *)(a1 + 24), *(_DWORD *)(v9 + 232) != 1)
       || (result = freePosparserIGTrees(*(_QWORD *)(a1 + 16), (uint64_t *)(v9 + 216), (uint64_t *)(v9 + 224), v4, v5, v6, v7, v8), (result & 0x80000000) == 0)))
    {
      result = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"langcode", &v12);
      if ((result & 0x80000000) == 0)
      {
        __strcpy_chk();
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 243) = 7565168;
        v10 = *(_QWORD *)(a1 + 16);
        v11 = *(_DWORD **)(a1 + 24);
        v11[58] = 0;
        v11 += 58;
        return getPosparserIGTreesAndDict(v10, *(_WORD **)a1, *(_QWORD *)(a1 + 8), *((_QWORD *)v11 - 28), *((_QWORD *)v11 - 27), *((_QWORD *)v11 - 26), v11, (uint64_t *)v11 - 2, (uint64_t *)v11 - 1, v11 + 1, (uint64_t)(v11 + 2), (_DWORD *)(a1 + 40));
      }
    }
  }
  return result;
}

uint64_t fe_ara_parser_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t StandardizeRule;
  const char *v10;
  char *v11;
  unsigned __int16 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v22;
  char v23[3];
  _BYTE __c[11];
  _DWORD v25[10];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = 2356158472;
  *(_WORD *)&__c[1] = -1;
  v8 = safeh_HandleCheck(a1, a2, 85954, 952);
  if ((v8 & 0x80000000) != 0)
    return v7;
  if (!*(_DWORD *)(a1 + 40))
    return v8;
  *(_QWORD *)&__c[3] = 0;
  __c[0] = 0;
  StandardizeRule = posparser_ProcessStart(*(char **)(a1 + 24));
  if ((StandardizeRule & 0x80000000) != 0)
    goto LABEL_19;
  *(_WORD *)&__c[1] = -1;
  v8 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 96))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), "fecfg", "araparsernumstandardize", &__c[3], &__c[1], __c);
  if ((v8 & 0x80000000) != 0)
    return v8;
  if (!*(_WORD *)&__c[1])
  {
    v13 = *(unsigned __int16 *)(a1 + 56);
    if (!*(_WORD *)(a1 + 56))
      goto LABEL_17;
    goto LABEL_12;
  }
  v10 = **(const char ***)&__c[3];
  v11 = strchr(**(char ***)&__c[3], __c[0]);
  if (v11)
  {
    *v11 = 0;
    v10 = **(const char ***)&__c[3];
  }
  v12 = atoi(v10);
  v13 = v12;
  *(_WORD *)(a1 + 56) = v12;
  if (v12)
  {
LABEL_12:
    v14 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, (24 * v13) | 1);
    *(_QWORD *)(a1 + 48) = v14;
    if (!v14)
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 54000, 0, v15, v16, v17, v18, v22);
      v7 = 2356158474;
      goto LABEL_20;
    }
    if (!*(_WORD *)(a1 + 56))
      goto LABEL_17;
    v19 = 0;
    v20 = 0;
    while (1)
    {
      v25[7] = 0;
      *(_QWORD *)((char *)&v25[5] + 1) = 0;
      strcpy((char *)v25, "araparserstandardize");
      LH_itoa(v20, v23, 0xAu);
      __strcat_chk();
      StandardizeRule = araparser_loc_getStandardizeRule(a1, (uint64_t)v25, *(_QWORD *)(a1 + 48) + v19);
      if ((StandardizeRule & 0x80000000) != 0)
        break;
      ++v20;
      v19 += 24;
      if (v20 >= *(unsigned __int16 *)(a1 + 56))
        goto LABEL_17;
    }
LABEL_19:
    v7 = StandardizeRule;
LABEL_20:
    synstrmaux_CloseStreams((_WORD *)(a1 + 64), *(_QWORD *)(a1 + 32));
    return v7;
  }
LABEL_17:
  synstrmaux_InitStreamOpener(a1 + 64, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER");
  synstrmaux_RegisterInStream((_WORD *)(a1 + 64), (uint64_t)"text/plain;charset=utf-8", 0, a1 + 888);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 64), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    0,
    a1 + 904);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 64), (uint64_t)"text/plain;charset=utf-8", a1 + 920);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 64), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 936);
  v7 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 64), *(_QWORD *)(a1 + 32), a3, a4);
  if ((v7 & 0x80000000) != 0)
    goto LABEL_20;
  return v7;
}

uint64_t fe_ara_parser_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int v25;
  unsigned __int16 v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  _BOOL4 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  unsigned __int16 v78;
  void *v79;
  char *v80;
  void *__src;
  uint64_t v82;
  unsigned __int16 v83;
  size_t __n;
  char *v85;
  char *__s;
  char *v87;

  __s = 0;
  v87 = 0;
  __n = 0;
  v85 = 0;
  v9 = 2356158474;
  v83 = 0;
  v82 = 0;
  v79 = 0;
  v78 = 0;
  v77 = 0;
  v10 = safeh_HandleCheck(a1, a2, 85954, 952);
  if ((v10 & 0x80000000) != 0)
    return 2356158472;
  *a5 = 1;
  if (!*(_DWORD *)(a1 + 40))
    return v10;
  __src = 0;
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, char **, char *))(*(_QWORD *)(a1 + 32) + 88))(*(_QWORD *)(a1 + 888), *(_QWORD *)(a1 + 896), &v87, (char *)&__n + 4);
  if ((v10 & 0x80000000) != 0)
    return v10;
  v11 = HIDWORD(__n);
  v12 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)(a1 + 32) + 144))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), (char *)&v82 + 4, &v82);
  if ((v12 & 0x80000000) != 0)
    return v12;
  if (HIDWORD(__n))
  {
    v10 = (*(uint64_t (**)(_QWORD, _QWORD, void **, size_t *))(*(_QWORD *)(a1 + 32) + 88))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), &__src, &__n);
    if ((v10 & 0x80000000) == 0)
    {
      v13 = __n;
      v83 = __n >> 5;
      v14 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), __n);
      v19 = v14;
      v80 = v14;
      if (!v14)
        goto LABEL_69;
      memcpy(v14, __src, __n);
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Processing Sentence \"%s\"", v20, v21, v22, (uint64_t)v87);
      if (v83)
      {
        v23 = 0;
        v24 = (int *)(v19 + 12);
        while (1)
        {
          v25 = *v24;
          v24 += 8;
          if (v25 != *((_DWORD *)v19 + 3))
            break;
          if (v83 == ++v23)
          {
            v26 = v83;
            v23 = v83;
            goto LABEL_30;
          }
        }
        v26 = v23;
      }
      else
      {
        v26 = 0;
        v23 = 0;
      }
LABEL_30:
      v29 = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 4 * v83);
      if (v29)
      {
        v34 = v29;
        v35 = (uint64_t)&v19[32 * v23];
        v36 = v83;
        if (v83 != v26)
        {
          v37 = 0;
          v38 = (_DWORD *)(v35 + 4);
          do
          {
            *(_DWORD *)(v34 + 4 * v37) = *v38;
            *v38 = v37;
            v38 += 8;
            ++v37;
          }
          while ((unsigned __int16)(v36 - v26) != v37);
        }
        marker_sort(v35, v36 - v23);
        if (v83 != v26)
        {
          v39 = (unsigned __int16)(v83 - v26);
          v40 = &v19[32 * v23 + 4];
          do
          {
            *(_DWORD *)v40 = *(_DWORD *)(v34 + 4 * *(unsigned int *)v40);
            v40 += 32;
            --v39;
          }
          while (v39);
        }
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v34);
        v41 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, (HIDWORD(__n) + 1));
        __s = v41;
        if (v41)
        {
          v42 = strcpy(v41, v87);
          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Processing This Sentence \"%s\"", v43, v44, v45, (uint64_t)v42);
          araParser_SanitizeSentence(a1, &__s, (_DWORD *)&__n + 1, (uint64_t *)&v80, &v83);
          v46 = __s;
          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Processing Sanitized Sentence \"%s\"", v47, v48, v49, (uint64_t)__s);
          if (!*(_WORD *)(a1 + 56))
          {
            v19 = 0;
LABEL_45:
            v56 = v80;
            v57 = posparser_ExtractWords(*(_DWORD **)(a1 + 24), (uint64_t)v80, v83, v46, HIDWORD(__n), (uint64_t *)&v79, &v78);
            if ((v57 & 0x80000000) == 0)
            {
              if (*(_WORD *)(a1 + 56))
              {
                araParser_setStandardizedWords(v79, v78, (uint64_t)v46, (uint64_t)v19);
                if (v19)
                {
                  heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v19);
                  v19 = 0;
                  v85 = 0;
                }
              }
              v58 = *(_QWORD *)(a1 + 24);
              if (!*(_WORD *)(v58 + 184))
                goto LABEL_52;
              v57 = posparser_applyEmbeddedRules(v58, (uint64_t)v79, v78, (uint64_t)v46, HIDWORD(__n));
              if ((v57 & 0x80000000) == 0)
              {
                v58 = *(_QWORD *)(a1 + 24);
LABEL_52:
                if (*(_DWORD *)(v58 + 192) != 1)
                  goto LABEL_55;
                *(_WORD *)(v58 + 210) = 50;
                v59 = (void *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 306);
                v60 = *(_QWORD *)(a1 + 24);
                *(_QWORD *)(v60 + 200) = v59;
                if (v59)
                {
                  *(_WORD *)(v60 + 208) = 0;
                  bzero(v59, 6 * *(unsigned __int16 *)(v60 + 210));
LABEL_55:
                  v57 = araParser_NormalizeSentence(a1, (const char **)&__s, (_DWORD *)&__n + 1, v56, v83, (uint64_t)v79, v78);
                  if ((v57 & 0x80000000) == 0)
                  {
                    v64 = *(_QWORD *)(a1 + 24);
                    if (*(_DWORD *)(v64 + 192) == 1)
                    {
                      v65 = *(unsigned __int16 *)(v64 + 208);
                      if ((_DWORD)v65)
                      {
                        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Identified %d Diacritics", v61, v62, v63, v65);
                        v66 = *(_QWORD *)(a1 + 24);
                        if (*(_WORD *)(v66 + 208))
                        {
                          v67 = 0;
                          v68 = 0;
                          do
                          {
                            log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"(%d,%s)", v61, v62, v63, *(unsigned __int16 *)(*(_QWORD *)(v66 + 200) + v67));
                            ++v68;
                            v66 = *(_QWORD *)(a1 + 24);
                            v67 += 6;
                          }
                          while (v68 < *(unsigned __int16 *)(v66 + 208));
                        }
                      }
                    }
                    v69 = __s;
                    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Processing Normalized Sentence \"%s\"", v61, v62, v63, (uint64_t)__s);
                    v70 = araParser_checkIfIsolatedWord(a1, (uint64_t)v79, v78, (uint64_t)v69);
                    v57 = posparser_Process(*(unsigned __int16 **)(a1 + 24), a3, a4, (uint64_t)v79, v78, v70, 0, &__s, (uint64_t *)&v80, &v83);
                    if ((v57 & 0x80000000) == 0)
                    {
                      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Final Sentence \"%s\"", v71, v72, v73, (uint64_t)__s);
                      v74 = strlen(__s);
                      LODWORD(__n) = 32 * v83;
                      HIDWORD(__n) = v74 + 1;
                      v57 = (*(uint64_t (**)(_QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 32) + 104))(*(_QWORD *)(a1 + 920), *(_QWORD *)(a1 + 928), __s);
                      if ((v57 & 0x80000000) == 0)
                      {
                        v57 = (*(uint64_t (**)(_QWORD, _QWORD, char *, _QWORD))(*(_QWORD *)(a1 + 32) + 104))(*(_QWORD *)(a1 + 936), *(_QWORD *)(a1 + 944), v80, __n);
                        if ((v57 & 0x80000000) == 0)
                        {
                          v57 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 96))(*(_QWORD *)(a1 + 888), *(_QWORD *)(a1 + 896), v11);
                          if ((v57 & 0x80000000) == 0)
                          {
                            v57 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 96))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), v13);
                            if ((v57 & 0x80000000) == 0)
                            {
                              v57 = (*(uint64_t (**)(_QWORD, _QWORD, int *, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56)
                                                                                             + 112))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 48), &v77, 0);
                              if ((v57 & 0x80000000) == 0)
                              {
                                v77 += HIDWORD(__n) - v11;
                                v57 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56)
                                                                                + 104))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 48));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  goto LABEL_68;
                }
LABEL_69:
                log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 54000, 0, v15, v16, v17, v18, v76);
                goto LABEL_70;
              }
            }
LABEL_68:
            v9 = v57;
            goto LABEL_70;
          }
          v50 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, (HIDWORD(__n) + 1));
          v85 = v50;
          if (v50)
          {
            strcpy(v50, v46);
            araParser_ApplyStandardizations((char *)a1, &v85);
            v19 = v85;
            log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Got Standardized Sentence     \"%s\"", v51, v52, v53, (uint64_t)v85);
            goto LABEL_45;
          }
        }
        v54 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
        v55 = 54000;
      }
      else
      {
        v54 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
        v55 = 30000;
      }
      log_OutPublic(v54, (uint64_t)"FE_ARAPARSER", v55, 0, v30, v31, v32, v33, v76);
      v19 = 0;
LABEL_70:
      if (v80)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v80);
        v80 = 0;
      }
      posparser_FreeWords(*(_QWORD **)(a1 + 24), (uint64_t)v79, v78);
      v79 = 0;
      if (__s)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)__s);
        __s = 0;
      }
      if (v19)
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v19);
      v75 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 200);
      if (v75)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v75);
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 200) = 0;
      }
      return v9;
    }
    return v10;
  }
  v27 = v82;
  if (v82)
  {
    if (HIDWORD(v82))
    {
      v10 = (*(uint64_t (**)(_QWORD, _QWORD, void **, size_t *))(*(_QWORD *)(a1 + 32) + 88))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), &__src, &__n);
      if ((v10 & 0x80000000) != 0)
        return v10;
      v10 = (*(uint64_t (**)(_QWORD, _QWORD, void *, _QWORD))(*(_QWORD *)(a1 + 32) + 104))(*(_QWORD *)(a1 + 936), *(_QWORD *)(a1 + 944), __src, __n);
      if ((v10 & 0x80000000) != 0)
        return v10;
      v12 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 96))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), __n);
      if ((v12 & 0x80000000) != 0)
        return v12;
      v27 = v82;
    }
    if (!v27)
      return v12;
    return synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 64), *(_QWORD *)(a1 + 32));
  }
  v80 = 0;
  if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"clcpppipelinemode", &v80) & 0x80000000) != 0
    || !v80
    || !*v80)
  {
    *a5 = 0;
  }
  return v12;
}

size_t araParser_SanitizeSentence(uint64_t a1, char **a2, _DWORD *a3, uint64_t *a4, _WORD *a5)
{
  uint64_t *v6;
  char **v8;
  unsigned __int16 v10;
  unsigned __int16 v11;
  unsigned int v12;
  unsigned __int16 v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  _BOOL4 v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  _DWORD *v32;
  unint64_t v33;
  unsigned int v34;
  BOOL v35;
  char v36;
  char v37;
  unint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t i;
  int v42;
  _DWORD *v43;
  unint64_t v44;
  int v45;
  BOOL v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  unsigned __int16 v53;
  size_t result;
  int v55;
  unsigned __int16 v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  _DWORD *v60;
  unint64_t v61;
  unsigned int v62;
  BOOL v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  unsigned __int8 *v82;
  char *v83;
  unsigned __int16 v84;
  char *v85;
  char *v86;
  int v87;
  int v88;
  unsigned __int16 v89;
  unint64_t v90;
  int v91;
  int *v92;
  unint64_t v93;
  unsigned int v94;
  BOOL v95;
  int v96;
  _DWORD *v97;
  char **v98;
  uint64_t *v99;
  unsigned __int16 v100;
  _DWORD *v101;
  __int16 v102;
  char *__s;

  v6 = a4;
  v8 = a2;
  __s = *a2;
  v102 = 0;
  v101 = (_DWORD *)*a4;
  v100 = 0;
  v10 = strlen(__s);
  if (!v10)
    goto LABEL_160;
  v97 = a3;
  v98 = v8;
  v99 = v6;
  v11 = 0;
  v12 = v10;
  v13 = v10;
  do
  {
    if ((unsigned __int16)*a5 < 2u)
      goto LABEL_23;
    v14 = 1;
    v15 = (uint64_t)v101;
    v16 = 64;
    do
    {
      v17 = v14;
      if (*(_DWORD *)(v15 + 32 * v14) == 21
        && (v18 = *(char **)(v15 + 32 * v14 + 24)) != 0
        && (v19 = LH_stricmp(v18, "spell"), v15 = (uint64_t)v101, !v19)
        && ((v21 = v101[3], v22 = v101[8 * v17 + 3] - v21, v22 == v11) || v22 == (unsigned __int16)(v11 + 1)))
      {
        v23 = v16;
        v24 = v17;
        do
        {
          if (++v24 >= (unint64_t)(unsigned __int16)*a5)
          {
            LOWORD(v26) = v13;
            goto LABEL_21;
          }
          v25 = *(_DWORD *)((char *)v101 + v23);
          v23 += 32;
        }
        while (v25 != 21);
        LOWORD(v26) = v13;
        if (v101[8 * (unsigned __int16)v24] == 21)
          v26 = v101[8 * (unsigned __int16)v24 + 3] - v21;
LABEL_21:
        v20 = v11 != (unsigned __int16)v26;
        v11 = v26;
      }
      else
      {
        v20 = 0;
      }
      if (*(_DWORD *)(v15 + 32 * v17 + 12) - *(_DWORD *)(v15 + 12) > v11)
        break;
      if (v20)
        break;
      v14 = v17 + 1;
      v16 += 32;
    }
    while ((int)v17 + 1 < (unsigned __int16)*a5);
    if (!v20)
    {
LABEL_23:
      v27 = v11;
      v28 = (unsigned __int8 *)&__s[v11];
      if (*v28 != 32)
        goto LABEL_39;
      v29 = v11;
      v30 = v11 + 1;
      if (v30 < v12 && __s[v30] == 32)
      {
        v31 = (unsigned __int16)*a5;
        if (v31 >= 2)
        {
          v32 = v101 + 8;
          v33 = 2;
          do
          {
            v34 = v32[3] - v101[3];
            v35 = v34 == v11;
            if (v34 == (unsigned __int16)(v11 + 1))
              v35 = 1;
            v36 = *v32 == 21 && v35;
            if (v34 > v11)
              break;
            v32 += 8;
            v37 = v33++ >= v31 ? 1 : v36;
          }
          while ((v37 & 1) == 0);
          if ((v36 & 1) != 0)
          {
LABEL_39:
            if (!isPunc_0(*(_QWORD *)(a1 + 24), v28))
              goto LABEL_99;
            v38 = (unsigned __int16)*a5;
            if (v38 > 1)
            {
              v39 = v101 + 11;
              v40 = 2;
              for (i = 1; i < v38; ++i)
              {
                if (v101[8 * i] == 34)
                {
                  v42 = v101[3];
                  if (v101[8 * i + 3] - v42 <= v11)
                  {
                    v43 = v39;
                    v44 = v40;
                    do
                    {
                      v45 = *(v43 - 3);
                      if (v45 == 21 || v45 == 3)
                      {
                        if (*v43 - v42 > v11 || (_DWORD)v38 == (_DWORD)v44)
                        {
LABEL_73:
                          inSMSMode(v11, (uint64_t)v101, v38);
                          goto LABEL_99;
                        }
                      }
                      else if ((_DWORD)v38 == (_DWORD)v44)
                      {
                        goto LABEL_73;
                      }
                      v48 = v45 == 21 || v44++ >= v38;
                      v43 += 8;
                    }
                    while (!v48);
                  }
                }
                ++v40;
                v39 += 8;
              }
            }
            v49 = inSMSMode(v11, (uint64_t)v101, v38);
            v50 = v49;
            if (!v11)
              goto LABEL_92;
            v51 = v11 - 1;
            v52 = __s[v51];
            if (v52 == 32)
              goto LABEL_92;
            if (v49)
            {
              if (v49 != 1)
                goto LABEL_92;
              if (isSMSPunc(*(_QWORD *)(a1 + 24), (unsigned __int8 *)&__s[v51]))
              {
                v50 = 1;
                goto LABEL_92;
              }
              LOBYTE(v52) = __s[v51];
            }
            if (!isDigit(v52))
            {
              v68 = v11 + 1;
              if ((_DWORD)v68 == v12)
              {
                if (v11 < 2u)
                  goto LABEL_92;
                v69 = __s;
              }
              else
              {
                if (v68 >= v12)
                  goto LABEL_92;
                if (v11 < 2u)
                  goto LABEL_92;
                v69 = __s;
                if (__s[v68] != 32)
                  goto LABEL_92;
              }
              if (strncmp(&v69[v11 - 2], "§", 2uLL))
              {
                result = posparserGrowStr(*(_QWORD *)(a1 + 24), (uint64_t *)&__s, (unsigned __int16)(v12 + 1), &v102, 0);
                if ((result & 0x80000000) != 0
                  || (result = posparserInsertWordMarker(*(_QWORD *)(a1 + 24), (uint64_t *)&v101, a5, v11, 1, __s, &v100),
                      (result & 0x80000000) != 0))
                {
LABEL_145:
                  v83 = __s;
                  goto LABEL_146;
                }
                memmove(&__s[v68], &__s[v11], (int)(v12 - v11));
                __s[v12 + 1] = 0;
                v13 = strlen(__s);
                __s[v11] = 32;
                v77 = (unsigned __int16)*a5;
                v72 = (uint64_t)v101;
                if (v77 >= 2)
                {
                  v78 = 0;
                  v79 = 32 * v100 - 32;
                  v80 = 32 * v77 - 32;
                  do
                  {
                    if (v79 != v78)
                    {
                      v81 = *(_DWORD *)(v72 + v78 + 44);
                      if (v11 <= (unsigned __int16)(v81 - *(_WORD *)(v72 + 12)))
                        *(_DWORD *)(v72 + v78 + 44) = v81 + 1;
                    }
                    v78 += 32;
                  }
                  while (v80 != v78);
                }
LABEL_128:
                ++*(_DWORD *)(v72 + 16);
                if (v11)
                  --v11;
                else
                  v11 = 0;
                goto LABEL_100;
              }
            }
LABEL_92:
            v65 = v11 + 1;
            v66 = v12 - v65;
            if (v12 <= v65)
              goto LABEL_99;
            if (v50 == 1)
            {
              if (isSMSPunc(*(_QWORD *)(a1 + 24), (unsigned __int8 *)&__s[v65]))
                goto LABEL_99;
            }
            else if (v50)
            {
              goto LABEL_99;
            }
            v67 = __s[v65];
            if (v67 == 32 || isDigit(v67) || v11 && __s[v11 - 1] != 32)
              goto LABEL_99;
            v70 = v12 + 1;
            result = posparserGrowStr(*(_QWORD *)(a1 + 24), (uint64_t *)&__s, (unsigned __int16)v70, &v102, 0);
            if ((result & 0x80000000) != 0)
              goto LABEL_145;
            result = posparserInsertWordMarker(*(_QWORD *)(a1 + 24), (uint64_t *)&v101, a5, (unsigned __int16)(v11 + 1), 1, __s, &v100);
            if ((result & 0x80000000) != 0)
              goto LABEL_145;
            memmove(&__s[v11 + 2], &__s[v65], v66);
            __s[v70] = 0;
            v13 = strlen(__s);
            __s[v65] = 32;
            v71 = (unsigned __int16)*a5;
            v72 = (uint64_t)v101;
            if (v71 >= 2)
            {
              v73 = 0;
              v74 = 32 * v100 - 32;
              v75 = 32 * v71 - 32;
              do
              {
                if (v74 != v73)
                {
                  v76 = *(_DWORD *)(v72 + v73 + 44);
                  if (v11 < (unsigned __int16)(v76 - *(_WORD *)(v72 + 12)))
                    *(_DWORD *)(v72 + v73 + 44) = v76 + 1;
                }
                v73 += 32;
              }
              while (v75 != v73);
            }
            goto LABEL_128;
          }
        }
      }
      v53 = v11;
      if (v11 >= v13)
        goto LABEL_77;
      while (__s[v27] == 32)
      {
        if (v13 == ++v27)
        {
          v53 = v13;
          goto LABEL_75;
        }
      }
      v53 = v27;
LABEL_75:
      v29 = v53;
      if (!v11 || (_DWORD)v30 != v53)
      {
LABEL_77:
        result = posparserGrowStr(*(_QWORD *)(a1 + 24), (uint64_t *)&__s, (unsigned __int16)(v13 + 1), &v102, 0);
        if ((result & 0x80000000) != 0)
          goto LABEL_145;
        memmove(&__s[v30], &__s[v53], (int)(v12 - v29));
        v55 = v29 - v30;
        __s[(int)(v12 - (v29 - v30))] = 0;
        v56 = strlen(__s);
        v57 = (unsigned __int16)*a5;
        v58 = (uint64_t)v101;
        if (v57 >= 2)
        {
          v59 = v101[3];
          v60 = v101 + 11;
          v61 = v57 - 1;
          while (1)
          {
            v62 = (unsigned __int16)(*v60 - v59);
            v63 = v62 <= v30 || v62 >= v29;
            v64 = v59 + v30;
            if (!v63)
              goto LABEL_87;
            if (v62 >= v29)
              break;
LABEL_88:
            v60 += 8;
            if (!--v61)
              goto LABEL_89;
          }
          v64 = *v60 - v55;
LABEL_87:
          *v60 = v64;
          goto LABEL_88;
        }
LABEL_89:
        *(_DWORD *)(v58 + 16) -= v55;
        v13 = v56;
      }
LABEL_99:
      ++v11;
    }
LABEL_100:
    v12 = v13;
  }
  while (v13 > v11);
  v8 = v98;
  v6 = v99;
  if (!v13)
    goto LABEL_160;
  v82 = (unsigned __int8 *)&__s[v13 - 1];
  if (*v82 == 32
    || v13 >= 3u && !strncmp(&__s[v13 - 3], "§", 2uLL) && isPunc_0(*(_QWORD *)(a1 + 24), v82))
  {
    v8 = v98;
    v6 = v99;
    a3 = v97;
LABEL_138:
    v84 = v13 - 1;
    if (v13 != 1)
    {
      v85 = __s;
      v86 = &__s[v84];
      if (*v86 == 32)
      {
        v87 = 0;
        v88 = (unsigned __int16)(v13 - 1);
        while (1)
        {
          if (v85[v88 - 1] != 32)
            goto LABEL_148;
          v89 = v84;
          *v86 = 0;
          if (!--v84)
            break;
          ++v87;
          v88 = v84;
          v85 = __s;
          v86 = &__s[v84];
          v13 = v89;
          if (*v86 != 32)
          {
            v13 = v89;
            goto LABEL_149;
          }
        }
        v13 = 1;
LABEL_149:
        v90 = (unsigned __int16)*a5;
        if (v90 >= 2)
        {
          v91 = v101[3];
          v92 = v101 + 11;
          v93 = v90 - 1;
          while (1)
          {
            v94 = (unsigned __int16)(*v92 - v91);
            v95 = v94 <= v13 || v94 >= v11;
            v96 = v91 + v13;
            if (!v95)
              goto LABEL_158;
            if (v94 >= v11)
              break;
LABEL_159:
            v92 += 8;
            if (!--v93)
              goto LABEL_160;
          }
          v96 = v13 - v11 + *v92;
LABEL_158:
          *v92 = v96;
          goto LABEL_159;
        }
        goto LABEL_160;
      }
      v87 = 0;
LABEL_148:
      if (v87)
        goto LABEL_149;
    }
LABEL_160:
    v83 = __s;
    result = strlen(__s);
    *a3 = result;
    goto LABEL_161;
  }
  result = posparserGrowStr(*(_QWORD *)(a1 + 24), (uint64_t *)&__s, (unsigned __int16)(v13 + 1), &v102, 0);
  v83 = __s;
  if ((result & 0x80000000) == 0)
  {
    __s[v13] = 32;
    __s[v13 + 1] = 0;
    v13 = strlen(__s);
    v8 = v98;
    v6 = v99;
    a3 = v97;
    if (!v13)
      goto LABEL_160;
    goto LABEL_138;
  }
LABEL_146:
  v8 = v98;
  v6 = v99;
LABEL_161:
  *v6 = (uint64_t)v101;
  *v8 = v83;
  return result;
}

char *araParser_ApplyStandardizations(char *result, char **a2)
{
  char *v3;
  unsigned int v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;

  v3 = *a2;
  v4 = *((unsigned __int16 *)result + 28);
  if (*((_WORD *)result + 28))
  {
    v5 = result;
    v6 = 0;
    v7 = *((_QWORD *)result + 6);
    do
    {
      result = strstr(v3, *(const char **)(v7 + 24 * v6));
      if (result)
      {
        v8 = result;
        do
        {
          memcpy(v8, *(const void **)(v7 + 24 * v6 + 8), *(unsigned __int16 *)(v7 + 24 * v6 + 16));
          v7 = *((_QWORD *)v5 + 6);
          result = strstr(v8, *(const char **)(v7 + 24 * v6));
          v8 = result;
        }
        while (result);
        v4 = *((unsigned __int16 *)v5 + 28);
      }
      ++v6;
    }
    while (v6 < v4);
  }
  *a2 = v3;
  return result;
}

void *araParser_setStandardizedWords(void *result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  size_t v11;

  if (a2)
  {
    v6 = a2;
    v7 = (char *)result + 92;
    do
    {
      if (!*(v7 - 1) && !*v7)
      {
        v8 = *((unsigned __int16 *)v7 - 42);
        v9 = (void *)(a3 + v8);
        v10 = (const void *)(a4 + v8);
        v11 = *((unsigned __int16 *)v7 - 41) - v8;
        result = (void *)strncmp((const char *)(a3 + v8), (const char *)(a4 + v8), v11);
        if ((_DWORD)result)
          result = memcpy(v9, v10, v11);
      }
      v7 += 26;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t araParser_NormalizeSentence(uint64_t a1, const char **a2, _DWORD *a3, _DWORD *a4, unsigned int a5, uint64_t a6, unsigned int a7)
{
  const char *v10;
  unsigned __int16 v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _WORD *v31;
  unsigned int v32;
  _WORD *v33;
  int v34;
  _DWORD *v35;
  uint64_t v36;
  unsigned __int16 v41;

  v10 = *a2;
  v41 = 0;
  v11 = strlen(v10);
  if (v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = v11;
    if (a7 <= 1)
      v15 = 1;
    else
      v15 = a7;
    v36 = v15;
    v16 = v11;
    while (1)
    {
      if (a7)
      {
        v17 = a7;
        v18 = (_DWORD *)(a6 + 92);
        while (*((unsigned __int16 *)v18 - 42) > (unsigned __int16)v13
             || *((unsigned __int16 *)v18 - 41) <= (unsigned __int16)v13)
        {
          v18 += 26;
          if (!--v17)
            goto LABEL_15;
        }
        if (!*(v18 - 1) && !*(v18 - 20) && !*v18)
          break;
      }
LABEL_15:
      v13 += Utf8_LengthInBytes((unsigned __int8 *)&v10[(unsigned __int16)v13], 1);
LABEL_16:
      v12 = (unsigned __int16)v13;
      v14 = v16;
      if ((unsigned __int16)v13 >= v16)
        goto LABEL_42;
    }
    v35 = a3;
    v19 = (unsigned __int8 *)&v10[(unsigned __int16)v13];
    v20 = isMAPPINGXBI2A(*(_QWORD *)(a1 + 24), v19);
    v21 = *(_QWORD *)(a1 + 24);
    if (v20 == 1)
    {
      if (*(_DWORD *)(v21 + 192) == 1)
      {
        result = storeDiacritic(a1, v13, (unsigned __int8 *)&v10[(unsigned __int16)v13], (uint64_t *)(v21 + 200), (_WORD *)(v21 + 208), (_WORD *)(v21 + 210), &v41);
        if ((result & 0x80000000) != 0)
          return result;
      }
      *v19 = 65;
      ++v13;
      goto LABEL_41;
    }
    if (!isDiacritic(v21, (unsigned __int8 *)&v10[(unsigned __int16)v13]))
    {
      v13 += Utf8_LengthInBytes(v19, 1);
LABEL_41:
      a3 = v35;
      goto LABEL_16;
    }
    v23 = *(_QWORD *)(a1 + 24);
    if (*(_DWORD *)(v23 + 192) != 1
      || (result = storeDiacritic(a1, v13, v19, (uint64_t *)(v23 + 200), (_WORD *)(v23 + 208), (_WORD *)(v23 + 210), &v41), (result & 0x80000000) == 0))
    {
      v24 = v41;
      v25 = v12 + v41;
      if (v25 < v14)
        memmove((void *)&v10[(unsigned __int16)v13], &v10[v25], (int)(v14 - v12));
      v10[(int)v14 - v24] = 0;
      v16 = strlen(v10);
      if (a5 >= 2)
      {
        v26 = a4[3];
        v27 = a5 - 1;
        v28 = a4 + 11;
        do
        {
          if (v12 < (unsigned __int16)(*v28 - v26))
            *v28 -= v24;
          v28 += 8;
          --v27;
        }
        while (v27);
      }
      v29 = 0;
      a4[4] -= v24;
      v31 = (_WORD *)(a6 + 10);
      v30 = v36;
      while (1)
      {
        v32 = (unsigned __int16)*(v31 - 1);
        if (v32 > (unsigned __int16)v13)
          break;
        v32 = (unsigned __int16)*v31;
        if (v32 > (unsigned __int16)v13)
        {
          v33 = (_WORD *)(a6 + 104 * v29 + 10);
          goto LABEL_37;
        }
LABEL_38:
        ++v29;
        v31 += 52;
        if (!--v30)
          goto LABEL_41;
      }
      *(v31 - 1) = v32 - v24;
      LOWORD(v32) = *v31;
      v33 = v31;
LABEL_37:
      *v33 = v32 - v24;
      goto LABEL_38;
    }
  }
  else
  {
LABEL_42:
    v34 = strlen(v10);
    result = 0;
    *a3 = v34;
    *a2 = v10;
  }
  return result;
}

BOOL araParser_checkIfIsolatedWord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unsigned __int16 *v8;
  unint64_t v9;
  uint64_t v10;

  v4 = a3;
  if (!(_DWORD)a3)
    return (_DWORD)v4 == 1;
  if ((_DWORD)a3 != 1)
  {
    v7 = a3;
    v8 = (unsigned __int16 *)(a2 + 10);
    v9 = 1;
    LODWORD(v4) = 0;
    do
    {
      v10 = *(v8 - 1);
      if (*v8 - (_DWORD)v10 != 1 || !isPunc_0(*(_QWORD *)(a1 + 24), (unsigned __int8 *)(a4 + v10)))
        LODWORD(v4) = v4 + 1;
      if (v9 >= v7)
        break;
      v8 += 52;
      ++v9;
    }
    while (v4 < 2);
    return (_DWORD)v4 == 1;
  }
  return v4;
}

uint64_t fe_ara_parser_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  result = safeh_HandleCheck(a1, a2, 85954, 952);
  if ((result & 0x80000000) != 0)
    return 2356158472;
  if (*(_DWORD *)(a1 + 40))
  {
    if (*(_WORD *)(a1 + 56))
    {
      v4 = 0;
      v5 = 0;
      v6 = *(_QWORD *)(a1 + 48);
      do
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(v6 + v4));
        v7 = (_QWORD *)(*(_QWORD *)(a1 + 48) + v4);
        *v7 = 0;
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v7[1]);
        v6 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(v6 + v4 + 8) = 0;
        ++v5;
        v4 += 24;
      }
      while (v5 < *(unsigned __int16 *)(a1 + 56));
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 48);
      if (!v6)
      {
LABEL_11:
        *(_WORD *)(a1 + 56) = 0;
        posparser_ProcessEnd(*(_QWORD **)(a1 + 24));
        return synstrmaux_CloseStreams((_WORD *)(a1 + 64), *(_QWORD *)(a1 + 32));
      }
    }
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v6);
    *(_QWORD *)(a1 + 48) = 0;
    goto LABEL_11;
  }
  return result;
}

uint64_t fe_ara_parser_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2356158465;
  result = 0;
  *a2 = &IAraParser;
  return result;
}

uint64_t storeDiacritic(uint64_t a1, __int16 a2, unsigned __int8 *a3, uint64_t *a4, _WORD *a5, _WORD *a6, unsigned __int16 *a7)
{
  uint64_t v14;
  unsigned __int16 v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unsigned int v24;

  v14 = *a4;
  v15 = Utf8_LengthInBytes(a3, 1);
  *a7 = v15;
  v16 = (unsigned __int16)*a5;
  v17 = (unsigned __int16)*a6;
  if (v16 < v17)
    goto LABEL_4;
  *a6 = v17 + 50;
  v18 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), v14, 6 * (unsigned __int16)(v17 + 50) + 6);
  if (v18)
  {
    v14 = v18;
    v16 = (unsigned __int16)*a5;
    v15 = *a7;
LABEL_4:
    strncpy((char *)(v14 + 6 * v16 + 2), (const char *)a3, v15);
    result = 0;
    *(_BYTE *)(v14 + 6 * (unsigned __int16)*a5 + *a7 + 2) = 0;
    *(_WORD *)(v14 + 6 * (unsigned __int16)(*a5)++) = a2;
    *a4 = v14;
    return result;
  }
  log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 54000, 0, v19, v20, v21, v22, v24);
  return 2356158474;
}

uint64_t embed_dict_getName(char *a1, char *a2)
{
  _OWORD v5[8];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  memset(v5, 0, sizeof(v5));
  if (!strncmp(a1, "clm", 3uLL))
  {
    if (!strchr(a1, 95))
      return 2693799943;
    __strncat_chk();
    __strcat_chk();
  }
  else
  {
    __strcat_chk();
  }
  __strcat_chk();
  strcpy(a2, (const char *)v5);
  return 0;
}

uint64_t embed_vect_getBrokerString(uint64_t a1, char *a2, char *a3, char *a4, unint64_t a5)
{
  uint64_t result;
  const char *v11;
  char *v12;
  uint64_t v13;
  int v14[2];
  _OWORD v15[8];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  *(_QWORD *)v14 = 0;
  memset(v15, 0, sizeof(v15));
  result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"langcode", v14);
  if ((result & 0x80000000) == 0)
  {
    result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"fecfg", &v13);
    if ((result & 0x80000000) == 0)
    {
      if (!strncmp(a2, "clm", 3uLL))
      {
        result = (uint64_t)strchr(a2, 95);
        if (!result)
          return result;
        v11 = (const char *)result;
        strcpy(a3, "clmnn:");
        v12 = strncat(a3, a2, result - (_QWORD)a2);
        strcpy(&a3[strlen(v12)], "_embed_vect");
        strcat(a3, v11);
        return 0;
      }
      if (!strcmp(a2, "lid"))
      {
        __strcat_chk();
        result = brokeraux_ComposeBrokerString(a1, (const char *)v15, 1, 0, *(char **)v14, 0, 0, a3, a5);
        if ((result & 0x80000000) != 0)
          return result;
        strcpy((char *)v15, "ml2emb");
        __strcat_chk();
        result = brokeraux_ComposeBrokerString(a1, (const char *)v15, 1, 0, *(char **)v14, 0, 0, a4, a5);
      }
      else
      {
        __strcat_chk();
        __strcat_chk();
        __strcat_chk();
        __strcat_chk();
        __strcat_chk();
        __strcat_chk();
        result = brokeraux_ComposeBrokerString(a1, (const char *)v15, 1, 1, *(char **)v14, 0, 0, a3, a5);
      }
      if ((result & 0x80000000) == 0)
        return 0;
    }
  }
  return result;
}

uint64_t nn_word_lkp_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2693799937;
  result = 0;
  *a2 = &INnWordLkp;
  return result;
}

uint64_t nn_word_lkp_ObjOpen(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = 0;
  v6 = 2693799943;
  if (a6)
  {
    *(_QWORD *)a6 = 0;
    *(_DWORD *)(a6 + 8) = 0;
    inited = InitRsrcFunction(a4, a5, &v28);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(_QWORD *)(v28 + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"Entering nn_word_lkp_ObjOpen", v14, v15, v16, v26);
      v17 = (_QWORD *)heap_Calloc(*(_QWORD **)(v28 + 8), 1, 128);
      if (v17)
      {
        *(_QWORD *)a6 = v17;
        *(_DWORD *)(a6 + 8) = 62639;
        *v17 = a1;
        v17[1] = a2;
        v17[2] = a4;
        v17[3] = a5;
        v17[4] = v28;
        v17[15] = a3;
        v6 = nn_word_lkp_ObjOpenHelper((uint64_t)v17, a6);
        if ((v6 & 0x80000000) == 0)
          log_OutText(*(_QWORD *)(v28 + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"Leaving nn_word_lkp_ObjOpen", v22, v23, v24, v27);
      }
      else
      {
        log_OutPublic(*(_QWORD *)(v28 + 32), (uint64_t)"NN_WORD_LKP", 41000, 0, v18, v19, v20, v21, v27);
        return 2693799946;
      }
    }
  }
  return v6;
}

uint64_t nn_word_lkp_ObjClose(_QWORD *a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = safeh_HandleCheck((uint64_t)a1, a2, 62639, 128);
  if ((result & 0x80000000) != 0)
    return 2693799944;
  if (a1)
  {
    log_OutText(*(_QWORD *)(a1[4] + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"Entering nn_word_lookup_ObjClose", v4, v5, v6, v12);
    nn_word_lkp_ObjCloseHelper(a1);
    v10 = a1[4];
    v11 = *(_QWORD *)(v10 + 48);
    if (v11)
    {
      objc_ReleaseObject(v11, (uint64_t)"FE_DCTLKP");
      v10 = a1[4];
    }
    log_OutText(*(_QWORD *)(v10 + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"Leaving nn_word_lookup_ObjClose", v7, v8, v9, v13);
    heap_Free(*(_QWORD **)(a1[4] + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t nn_word_lkp_ObjReopen(uint64_t a1, uint64_t a2)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;

  v2 = a2;
  v3 = (_QWORD *)a1;
  v13 = (_QWORD *)a1;
  v14 = a2;
  v7 = 2693799944;
  if ((safeh_HandleCheck(a1, a2, 62639, 128) & 0x80000000) == 0 && v3)
  {
    log_OutText(*(_QWORD *)(v3[4] + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"Entering nn_word_lkp_ObjReOpen", v4, v5, v6, (uint64_t)v13);
    v8 = nn_word_lkp_ObjCloseHelper(v3);
    if ((v8 & 0x80000000) != 0)
    {
      v7 = v8;
    }
    else
    {
      v7 = nn_word_lkp_ObjOpenHelper((uint64_t)v3, (uint64_t)&v13);
      if ((v7 & 0x80000000) == 0)
      {
        log_OutText(*(_QWORD *)(v3[4] + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"Leaving nn_word_lkp_ObjReOpen", v9, v10, v11, (uint64_t)v13);
        return v7;
      }
      v3 = v13;
      v2 = v14;
    }
    nn_word_lkp_ObjClose(v3, v2);
  }
  return v7;
}

uint64_t nn_word_lkp_getVectorLength(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 62639, 128);
  if ((result & 0x80000000) != 0)
    return 2693799944;
  *a3 = *(_DWORD *)(a1 + 68);
  return result;
}

uint64_t nn_word_lkp_getVectorExtLength(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 62639, 128);
  if ((result & 0x80000000) != 0)
    return 2693799944;
  *a3 = *(_DWORD *)(a1 + 72);
  return result;
}

uint64_t nn_word_lkp_word2fvector(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int Name;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v32;
  char v33;
  __int16 v34;
  const char **v35;
  char __s[16];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v35 = 0;
  v34 = 0;
  v7 = 2693799944;
  v33 = 0;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  *(_OWORD *)__s = 0u;
  v37 = 0u;
  if ((safeh_HandleCheck(a1, a2, 62639, 128) & 0x80000000) == 0)
  {
    Name = embed_dict_getName(*(char **)(a1 + 120), __s);
    if (Name < 0)
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to generate the embedding dict name. Returns %u", v9, v10, v11, Name & 0x1FFF);
      return v7;
    }
    if (*(_DWORD *)(a1 + 84) < 2u)
    {
      if (strstr(__s, "lid") || (*(unsigned __int16 *)__s == 27747 ? (v24 = __s[2] == 109) : (v24 = 0), v24))
        v34 = 1;
      v20 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t, const char ***, __int16 *, char *))(*(_QWORD *)(a1 + 40) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), __s, a3, &v35, &v34, &v33);
      if ((v20 & 0x80000000) != 0)
      {
LABEL_6:
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to lookup word %s returns %u", v21, v22, v23, a3);
        return v20;
      }
    }
    else
    {
      v12 = strlen(__s);
      v13 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), v12 + 2);
      if (!v13)
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 41000, 0, v14, v15, v16, v17, v32);
        return 2693799946;
      }
      v18 = (uint64_t)v13;
      v19 = strcpy(v13, __s);
      *(_WORD *)(v18 + strlen(v19)) = 95;
      v20 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, const char ***, __int16 *, char *, _QWORD))(*(_QWORD *)(a1 + 40) + 152))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v18, a3, &v35, &v34, &v33, *(unsigned __int8 *)(a1 + 84));
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), v18);
      if ((v20 & 0x80000000) != 0)
        goto LABEL_6;
    }
    if (!v34)
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"No index found for word %s", v21, v22, v23, a3);
      return 2693799956;
    }
    v25 = atoi(*v35);
    v29 = *(_DWORD *)(a1 + 64);
    if (v29 <= 6)
    {
      if (((1 << v29) & 0x12) != 0)
        return nn_word_lkp_get_vector_u16linear(a1, v25, a3, 0, a4, v26, v27, v28);
      if (((1 << v29) & 0x24) != 0)
        return nn_word_lkp_get_vector_u8kmeans(a1, v25, a3, 0, a4, v26, v27, v28);
      if (((1 << v29) & 0x48) != 0)
        return nn_word_lkp_get_vector_binary(a1, v25, a3, 0, a4, v26, v27, v28);
    }
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Got invalid or unsupported vector data format %u", v26, v27, v28, *(unsigned int *)(a1 + 64));
    return 2693799952;
  }
  return v7;
}

uint64_t nn_word_lkp_word2extfvector(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int Name;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v31;
  char v32;
  __int16 v33;
  const char **v34;
  char __s[16];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v34 = 0;
  v33 = 0;
  v7 = 2693799944;
  v32 = 0;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  *(_OWORD *)__s = 0u;
  v36 = 0u;
  if ((safeh_HandleCheck(a1, a2, 62639, 128) & 0x80000000) == 0)
  {
    Name = embed_dict_getName(*(char **)(a1 + 120), __s);
    if (Name < 0)
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to generate the embedding dict name. Returns %u", v9, v10, v11, Name & 0x1FFF);
      return v7;
    }
    if (*(_DWORD *)(a1 + 84) < 2u)
    {
      v20 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t, const char ***, __int16 *, char *))(*(_QWORD *)(a1 + 40) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), __s, a3, &v34, &v33, &v32);
      if ((v20 & 0x80000000) != 0)
      {
LABEL_6:
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to lookup word %s returns %u", v21, v22, v23, a3);
        return v20;
      }
    }
    else
    {
      v12 = strlen(__s);
      v13 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), v12 + 2);
      if (!v13)
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 41000, 0, v14, v15, v16, v17, v31);
        return 2693799946;
      }
      v18 = (uint64_t)v13;
      v19 = strcpy(v13, __s);
      *(_WORD *)(v18 + strlen(v19)) = 95;
      v20 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, const char ***, __int16 *, char *, _QWORD))(*(_QWORD *)(a1 + 40) + 152))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v18, a3, &v34, &v33, &v32, *(unsigned __int8 *)(a1 + 84));
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), v18);
      if ((v20 & 0x80000000) != 0)
        goto LABEL_6;
    }
    if (v33)
    {
      v24 = atoi(*v34);
      v28 = *(_DWORD *)(a1 + 64);
      if (v28 == 6)
        return nn_word_lkp_get_vector_binary(a1, v24, a3, 1, a4, v25, v26, v27);
      if (v28 == 5)
        return nn_word_lkp_get_vector_u8kmeans(a1, v24, a3, 1, a4, v25, v26, v27);
      if (v28 != 4)
      {
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Got invalid or unsupported vector data format %u", v25, v26, v27, *(unsigned int *)(a1 + 64));
        return 2693799952;
      }
      return nn_word_lkp_get_vector_u16linear(a1, v24, a3, 1, a4, v25, v26, v27);
    }
    else
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"No index found for word %s", v21, v22, v23, a3);
      return 2693799956;
    }
  }
  return v7;
}

uint64_t nn_word_lkp_word2id(uint64_t a1, int a2, uint64_t a3, float *a4)
{
  uint64_t v7;
  int Name;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unsigned int v26;
  char v27;
  __int16 v28;
  const char **v29;
  char __s[16];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v28 = 0;
  v7 = 2693799944;
  v27 = 0;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  *(_OWORD *)__s = 0u;
  v31 = 0u;
  if ((safeh_HandleCheck(a1, a2, 62639, 128) & 0x80000000) == 0)
  {
    Name = embed_dict_getName(*(char **)(a1 + 120), __s);
    if (Name < 0)
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to generate the embedding dict name. Returns %u", v9, v10, v11, Name & 0x1FFF);
      return v7;
    }
    if (*(_DWORD *)(a1 + 84) < 2u)
    {
      if (strstr(__s, "lid") || (*(unsigned __int16 *)__s == 27747 ? (v24 = __s[2] == 109) : (v24 = 0), v24))
        v28 = 1;
      v20 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t, const char ***, __int16 *, char *))(*(_QWORD *)(a1 + 40) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), __s, a3, &v29, &v28, &v27);
      if ((v20 & 0x80000000) != 0)
      {
LABEL_6:
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to lookup word %s returns %u", v21, v22, v23, a3);
        return v20;
      }
    }
    else
    {
      v12 = strlen(__s);
      v13 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), v12 + 2);
      if (!v13)
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 41000, 0, v14, v15, v16, v17, v26);
        return 2693799946;
      }
      v18 = (uint64_t)v13;
      v19 = strcpy(v13, __s);
      *(_WORD *)(v18 + strlen(v19)) = 95;
      v20 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, const char ***, __int16 *, char *, _QWORD))(*(_QWORD *)(a1 + 40) + 152))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v18, a3, &v29, &v28, &v27, *(unsigned __int8 *)(a1 + 84));
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), v18);
      if ((v20 & 0x80000000) != 0)
        goto LABEL_6;
    }
    if (v28)
    {
      v7 = 0;
      *a4 = (float)atoi(*v29);
    }
    else
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"No index found for word %s", v21, v22, v23, a3);
      return 2693799956;
    }
  }
  return v7;
}

uint64_t nn_word_lkp_ObjOpenHelper(uint64_t a1, uint64_t a2)
{
  uint64_t BrokerString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int32x2_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v42;
  size_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t Interface;
  unsigned int v56;
  _QWORD *v57;
  void *__src;
  unsigned int v59;
  int v60;
  unsigned __int8 v61;
  _OWORD v62[16];
  _OWORD v63[16];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v57 = 0;
  memset(v63, 0, sizeof(v63));
  memset(v62, 0, sizeof(v62));
  BrokerString = embed_vect_getBrokerString(*(_QWORD *)(a1 + 32), *(char **)(a1 + 120), (char *)v63, (char *)v62, 0x100uLL);
  if ((BrokerString & 0x80000000) != 0)
  {
    v9 = BrokerString;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
    v11 = v9 & 0x1FFF;
    v12 = "Failed to generate the embedding vector brokerstring. Returns %u";
LABEL_32:
    log_OutText(v10, (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)v12, v5, v6, v7, v11);
    goto LABEL_33;
  }
  if ((ssftriff_reader_ObjOpen(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), 2, (const char *)v62, "CRPH", 5, (uint64_t *)&v57) & 0x80000000) != 0)
  {
    v13 = ssftriff_reader_ObjOpen(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), 0, (const char *)v63, "CRPH", 5, (uint64_t *)&v57);
    v17 = *(_QWORD *)(a1 + 32);
    if ((v13 & 0x80000000) != 0)
    {
      v9 = v13;
      log_OutText(*(_QWORD *)(v17 + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to open the word vector riff file (%s). Returns %u", v14, v15, v16, (uint64_t)v63);
      goto LABEL_33;
    }
    v8 = *(_QWORD *)(v17 + 24);
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  }
  v18 = brk_DataOpen(v8);
  if ((v18 & 0x80000000) != 0)
  {
    v9 = v18;
    goto LABEL_33;
  }
  v23 = v57;
  v61 = 0;
  v59 = 0;
  v60 = 0;
  __src = 0;
  v24 = ssftriff_reader_OpenChunk((uint64_t)v57, &v60, &v59, &__src, v19, v20, v21, v22);
  if ((v24 & 0x80000000) != 0)
  {
LABEL_31:
    v9 = v24;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
    v11 = v9 & 0x1FFF;
    v12 = "Failed to open riff chunk. Returns %u";
    goto LABEL_32;
  }
  if (!(v60 ^ 0x44414548 | v61))
  {
    v11 = v59;
    if (v59 > 0xF)
    {
      v26 = (char *)__src;
      v27 = *(_QWORD *)__src;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)__src;
      if ((v27 - 4) > 2)
      {
        v28 = 0;
        v29 = 2;
      }
      else
      {
        v28 = *((_DWORD *)v26 + 2);
        v29 = 3;
      }
      *(_DWORD *)(a1 + 72) = v28;
      *(_DWORD *)(a1 + 84) = *(_DWORD *)&v26[4 * v29];
      switch((int)v27)
      {
        case 1:
          v31 = *(int32x2_t *)(v26 + 12);
          goto LABEL_26;
        case 2:
        case 3:
          v30 = *((_DWORD *)v26 + 3);
          goto LABEL_22;
        case 4:
          v31 = *(int32x2_t *)(v26 + 16);
LABEL_26:
          *(float32x2_t *)(a1 + 76) = vcvt_f32_s32(v31);
          *(_DWORD *)(a1 + 88) = 0;
          goto LABEL_27;
        case 5:
        case 6:
          v30 = *((_DWORD *)v26 + 4);
LABEL_22:
          *(_DWORD *)(a1 + 88) = v30;
          *(_DWORD *)(a1 + 76) = 0;
          *(_DWORD *)(a1 + 80) = 0;
LABEL_27:
          v32 = ssftriff_reader_CloseChunk((uint64_t)v23);
          if ((v32 & 0x80000000) != 0)
            goto LABEL_53;
          v34 = v57;
          v61 = 0;
          v59 = 0;
          v60 = 0;
          __src = 0;
          v24 = ssftriff_reader_OpenChunk((uint64_t)v57, &v60, &v59, &__src, v33, v5, v6, v7);
          if ((v24 & 0x80000000) != 0)
            goto LABEL_31;
          if (v60 ^ 0x54434556 | v61)
          {
            v9 = 2693799953;
            v25 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
            goto LABEL_11;
          }
          v42 = *(_DWORD *)(a1 + 64);
          if (v42 <= 6 && ((1 << v42) & 0x6C) != 0)
          {
            v43 = (4 * *(_DWORD *)(a1 + 88));
            v44 = (void *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), 1, v43);
            *(_QWORD *)(a1 + 104) = v44;
            if (!v44)
            {
              log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 41000, 0, v45, v46, v47, v48, v56);
              v9 = 2693799946;
              goto LABEL_33;
            }
            memcpy(v44, __src, v43);
            *(_DWORD *)(a1 + 112) = ssftriff_reader_GetPosition((uint64_t)v34) + v43;
            v49 = v59 - v43;
          }
          else
          {
            *(_DWORD *)(a1 + 112) = ssftriff_reader_GetPosition((uint64_t)v34);
            v49 = v59;
          }
          *(_DWORD *)(a1 + 116) = v49;
          v32 = ssftriff_reader_CloseChunk((uint64_t)v34);
          if ((v32 & 0x80000000) != 0)
          {
LABEL_53:
            v9 = v32;
            v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
            v11 = v9 & 0x1FFF;
            v12 = "Failed to close riff chunk. Returns %u";
          }
          else
          {
            v54 = ssftriff_reader_ObjClose(v57, v50, v51, v52, v53, v5, v6, v7);
            v57 = 0;
            if ((v54 & 0x80000000) != 0)
            {
              v9 = v54;
              v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
              v11 = v9 & 0x1FFF;
              v12 = "Failed to close the riff file; ssftriff_reader_ObjClose returns %u";
            }
            else
            {
              Interface = fe_dctlkp_GetInterface(1u, (_QWORD *)(a1 + 40));
              if ((Interface & 0x80000000) != 0)
              {
                v9 = Interface;
                v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
                v11 = v9 & 0x1FFF;
                v12 = "fe_dctlkp_GetInterface returns %u";
              }
              else
              {
                v9 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 32))(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a1 + 48);
                if ((v9 & 0x80000000) == 0)
                  goto LABEL_33;
                v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
                v11 = v9 & 0x1FFF;
                v12 = "pfObjOpen returns %u";
              }
            }
          }
          break;
        default:
          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Got invalid or unsupported vector data format %u", v5, v6, v7, v27);
          v9 = 2693799952;
          goto LABEL_33;
      }
    }
    else
    {
      v9 = 2693799953;
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
      v12 = "Found riff chunk of size %u. Expected at least %u";
    }
    goto LABEL_32;
  }
  v9 = 2693799953;
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
LABEL_11:
  log_OutText(v25, (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Found riff chunk (%s). Expected %s", v5, v6, v7, (uint64_t)&v60);
LABEL_33:
  if (v57)
  {
    v35 = ssftriff_reader_CloseChunk((uint64_t)v57);
    if ((v35 & 0x80000000) != 0)
    {
      v39 = v35;
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to close the riff file; ssftriff_reader_CloseChunk returns %u",
        v36,
        v37,
        v38,
        v35 & 0x1FFF);
      if ((int)v9 >= 0)
        v9 = v39;
      else
        v9 = v9;
      goto LABEL_40;
    }
  }
  if ((v9 & 0x80000000) != 0)
  {
LABEL_40:
    nn_word_lkp_ObjClose(*(_QWORD **)a2, *(_QWORD *)(a2 + 8));
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_QWORD *)a2 = safeh_GetNullHandle();
    *(_QWORD *)(a2 + 8) = v40;
  }
  return v9;
}

uint64_t nn_word_lkp_ObjCloseHelper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  v2 = a1[5];
  if (v2 && (v3 = (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 40))(a1[6], a1[7]), (v3 & 0x80000000) != 0))
  {
    v7 = v3;
    log_OutText(*(_QWORD *)(a1[4] + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to close dct. pIDct->pfObjClose returns %u", v4, v5, v6, v3 & 0x1FFF);
  }
  else
  {
    v7 = 0;
  }
  v8 = a1[13];
  if (v8)
  {
    heap_Free(*(_QWORD **)(a1[4] + 8), v8);
    a1[13] = 0;
  }
  v9 = a1[12];
  if (v9)
  {
    v10 = brk_DataClose(*(_QWORD *)(a1[4] + 24), v9);
    if ((v10 & 0x80000000) != 0)
    {
      v14 = v10;
      log_OutText(*(_QWORD *)(a1[4] + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to close the riff file; brk_DataClose returns %u",
        v11,
        v12,
        v13,
        v10 & 0x1FFF);
      if ((_DWORD)v7)
        return v7;
      else
        return v14;
    }
  }
  return v7;
}

uint64_t nn_word_lkp_get_vector_u16linear(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v28;

  v9 = *(_DWORD *)(a1 + 68);
  v10 = *(_DWORD *)(a1 + 72) + v9;
  v11 = *(_DWORD *)(a1 + 116) - v10;
  v28 = 0;
  if (v10 * a2 <= v11)
  {
    if (a4)
      v14 = v10;
    else
      v14 = v9;
    v15 = brk_DataMap(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), *(_QWORD *)(a1 + 96), *(_DWORD *)(a1 + 112) + v10 * a2, (2 * v14), (uint64_t)&v28);
    if ((v15 & 0x80000000) != 0)
    {
      v12 = v15;
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
      v25 = v12 & 0x1FFF;
      v26 = "Failed to map data, brk_DataMap returns %u.";
    }
    else
    {
      v20 = v28;
      if ((_DWORD)v14)
      {
        v21 = 0;
        v22 = *(unsigned int *)(a1 + 68);
        do
        {
          LOWORD(v19) = *(_WORD *)(v20 + 2 * v21);
          v19 = (float)LODWORD(v19);
          if (v21 < v22)
            v19 = *(float *)(a1 + 76)
                + (float)((float)((float)(*(float *)(a1 + 80) - *(float *)(a1 + 76)) * v19) * 0.000030518);
          *(float *)(a5 + 4 * v21++) = v19;
        }
        while (v14 != v21);
      }
      v23 = brk_DataUnmap(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), *(_QWORD *)(a1 + 96), v20);
      if ((v23 & 0x80000000) == 0)
        return 0;
      v12 = v23;
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
      v25 = v12 & 0x1FFF;
      v26 = "Failed to unmap data, brk_DataUnMap returns %u.";
    }
    log_OutText(v24, (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)v26, v16, v17, v18, v25);
    return v12;
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Got invalid index for word %s, (%u > %u)", a6, a7, a8, a3);
  return 2693799952;
}

uint64_t nn_word_lkp_get_vector_binary(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  float *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v36;

  v9 = *(_DWORD *)(a1 + 68);
  v10 = *(_DWORD *)(a1 + 72) + v9;
  v11 = (v10 + 7) >> 3;
  v12 = *(_DWORD *)(a1 + 116) - v11;
  v36 = 0;
  if (v11 * a2 <= v12)
  {
    if (a4)
      v15 = v10;
    else
      v15 = v9;
    if (a4)
      v16 = v11;
    else
      v16 = (v9 + 7) >> 3;
    v17 = brk_DataMap(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), *(_QWORD *)(a1 + 96), *(_DWORD *)(a1 + 112) + v11 * a2, v16, (uint64_t)&v36);
    if ((v17 & 0x80000000) != 0)
    {
      v13 = v17;
      v32 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
      v33 = v13 & 0x1FFF;
      v34 = "Failed to map data, brk_DataMap returns %u.";
    }
    else
    {
      v21 = v36;
      if ((_DWORD)v16)
      {
        v22 = 0;
        v23 = (*(_DWORD *)(a1 + 68) + 7) >> 3;
        v24 = (float *)(a5 + 16);
        do
        {
          v25 = *(unsigned __int8 *)(v21 + v22);
          if (v15 >= 8)
            v26 = 8;
          else
            v26 = v15;
          v27 = v25 >> 7;
          v28 = v26 - 1;
          if (v22 >= v23)
          {
            switch(v28)
            {
              case 0:
                goto LABEL_40;
              case 1:
                goto LABEL_39;
              case 2:
                goto LABEL_38;
              case 3:
                goto LABEL_37;
              case 4:
                goto LABEL_36;
              case 5:
                goto LABEL_35;
              case 6:
                goto LABEL_34;
              default:
                v24[3] = (float)(v25 & 1);
LABEL_34:
                v24[2] = (float)((v25 >> 1) & 1);
LABEL_35:
                v24[1] = (float)((v25 >> 2) & 1);
LABEL_36:
                *v24 = (float)((v25 >> 3) & 1);
LABEL_37:
                *(v24 - 1) = (float)((v25 >> 4) & 1);
LABEL_38:
                *(v24 - 2) = (float)((v25 >> 5) & 1);
LABEL_39:
                *(v24 - 3) = (float)((v25 >> 6) & 1);
LABEL_40:
                v30 = (float)v27;
                break;
            }
          }
          else
          {
            switch(v28)
            {
              case 0:
                v29 = *(_QWORD *)(a1 + 104);
                goto LABEL_32;
              case 1:
                v29 = *(_QWORD *)(a1 + 104);
                goto LABEL_31;
              case 2:
                v29 = *(_QWORD *)(a1 + 104);
                goto LABEL_30;
              case 3:
                v29 = *(_QWORD *)(a1 + 104);
                goto LABEL_29;
              case 4:
                v29 = *(_QWORD *)(a1 + 104);
                goto LABEL_28;
              case 5:
                v29 = *(_QWORD *)(a1 + 104);
                goto LABEL_27;
              case 6:
                v29 = *(_QWORD *)(a1 + 104);
                goto LABEL_26;
              default:
                v29 = *(_QWORD *)(a1 + 104);
                v24[3] = *(float *)(v29 + 4 * (v25 & 1));
LABEL_26:
                v24[2] = *(float *)(v29 + 4 * ((v25 >> 1) & 1));
LABEL_27:
                v24[1] = *(float *)(v29 + 4 * ((v25 >> 2) & 1));
LABEL_28:
                *v24 = *(float *)(v29 + 4 * ((v25 >> 3) & 1));
LABEL_29:
                *(v24 - 1) = *(float *)(v29 + 4 * ((v25 >> 4) & 1));
LABEL_30:
                *(v24 - 2) = *(float *)(v29 + 4 * ((v25 >> 5) & 1));
LABEL_31:
                *(v24 - 3) = *(float *)(v29 + 4 * ((v25 >> 6) & 1));
LABEL_32:
                v30 = *(float *)(v29 + 4 * v27);
                break;
            }
          }
          *(v24 - 4) = v30;
          ++v22;
          v24 += 8;
          v15 -= 8;
        }
        while (v16 != v22);
      }
      v31 = brk_DataUnmap(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), *(_QWORD *)(a1 + 96), v21);
      if ((v31 & 0x80000000) == 0)
        return 0;
      v13 = v31;
      v32 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
      v33 = v13 & 0x1FFF;
      v34 = "Failed to unmap data, brk_DataUnMap returns %u.";
    }
    log_OutText(v32, (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)v34, v18, v19, v20, v33);
    return v13;
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Got invalid index for word %s, (%u > %u)", a6, a7, a8, a3);
  return 2693799952;
}

uint64_t nn_word_lkp_get_vector_u8kmeans(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v28;

  v9 = *(_DWORD *)(a1 + 68);
  v10 = *(_DWORD *)(a1 + 72) + v9;
  v11 = *(_DWORD *)(a1 + 116) - v10;
  v28 = 0;
  if (v10 * a2 <= v11)
  {
    if (a4)
      v14 = v10;
    else
      v14 = v9;
    v15 = brk_DataMap(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), *(_QWORD *)(a1 + 96), *(_DWORD *)(a1 + 112) + v10 * a2, v14, (uint64_t)&v28);
    if ((v15 & 0x80000000) != 0)
    {
      v12 = v15;
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
      v25 = v12 & 0x1FFF;
      v26 = "Failed to map data, brk_DataMap returns %u.";
    }
    else
    {
      v20 = v28;
      if ((_DWORD)v14)
      {
        v21 = 0;
        v22 = *(unsigned int *)(a1 + 68);
        do
        {
          if (v21 >= v22)
          {
            LOBYTE(v19) = *(_BYTE *)(v20 + v21);
            v19 = (float)LODWORD(v19);
          }
          else
          {
            v19 = *(float *)(*(_QWORD *)(a1 + 104) + 4 * *(unsigned __int8 *)(v20 + v21));
          }
          *(float *)(a5 + 4 * v21++) = v19;
        }
        while (v14 != v21);
      }
      v23 = brk_DataUnmap(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), *(_QWORD *)(a1 + 96), v20);
      if ((v23 & 0x80000000) == 0)
        return 0;
      v12 = v23;
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
      v25 = v12 & 0x1FFF;
      v26 = "Failed to unmap data, brk_DataUnMap returns %u.";
    }
    log_OutText(v24, (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)v26, v16, v17, v18, v25);
    return v12;
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Got invalid index for word %s, (%u > %u)", a6, a7, a8, a3);
  return 2693799952;
}

uint64_t tnplus_word_copyParts(char **a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  if (!a1)
    return 1;
  if (!a3)
    return 1;
  result = hlp_DuplicateString(a2, *a1, a3);
  if ((_DWORD)result)
  {
    result = hlp_DuplicateString(a2, a1[1], a3 + 1);
    if ((_DWORD)result)
    {
      result = hlp_DuplicateString(a2, a1[2], a3 + 2);
      if ((_DWORD)result)
      {
        result = hlp_DuplicateString(a2, a1[3], a3 + 3);
        if ((_DWORD)result)
        {
          result = hlp_DuplicateString(a2, a1[4], a3 + 4);
          if ((_DWORD)result)
          {
            result = hlp_DuplicateString(a2, a1[6], a3 + 6);
            if ((_DWORD)result)
            {
              result = hlp_DuplicateString(a2, a1[7], a3 + 7);
              if ((_DWORD)result)
              {
                result = hlp_DuplicateString(a2, a1[9], a3 + 9);
                if ((_DWORD)result)
                {
                  result = hlp_DuplicateString(a2, a1[10], a3 + 10);
                  if ((_DWORD)result)
                  {
                    result = hlp_DuplicateString(a2, a1[11], a3 + 11);
                    if ((_DWORD)result)
                    {
                      result = hlp_DuplicateString(a2, a1[12], a3 + 12);
                      if ((_DWORD)result)
                      {
                        result = hlp_DuplicateString(a2, a1[13], a3 + 13);
                        if ((_DWORD)result)
                        {
                          result = hlp_DuplicateString(a2, a1[15], a3 + 15);
                          if ((_DWORD)result)
                            return 1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t hlp_DuplicateString(_QWORD *a1, char *__s, _QWORD *a3)
{
  size_t v6;
  uint64_t result;

  if (!a3)
    return 0;
  if (__s)
  {
    v6 = strlen(__s);
    result = heap_Calloc(a1, v6 + 1, 1);
    *a3 = result;
    if (!result)
      return result;
    strcpy((char *)result, __s);
  }
  else
  {
    *a3 = 0;
  }
  return 1;
}

uint64_t *tnplus_word_freeParts(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (result)
  {
    v3 = result;
    if (*result)
    {
      result = heap_Free(a2, *result);
      *v3 = 0;
    }
    v4 = v3[1];
    if (v4)
    {
      result = heap_Free(a2, v4);
      v3[1] = 0;
    }
    v5 = v3[2];
    if (v5)
    {
      result = heap_Free(a2, v5);
      v3[2] = 0;
    }
    v6 = v3[3];
    if (v6)
    {
      result = heap_Free(a2, v6);
      v3[3] = 0;
    }
    v7 = v3[4];
    if (v7)
    {
      result = heap_Free(a2, v7);
      v3[4] = 0;
    }
    v8 = v3[6];
    if (v8)
    {
      result = heap_Free(a2, v8);
      v3[6] = 0;
    }
    v9 = v3[7];
    if (v9)
    {
      result = heap_Free(a2, v9);
      v3[7] = 0;
    }
    v10 = v3[9];
    if (v10)
    {
      result = heap_Free(a2, v10);
      v3[9] = 0;
    }
    v11 = v3[10];
    if (v11)
    {
      result = heap_Free(a2, v11);
      v3[10] = 0;
    }
    v12 = v3[11];
    if (v12)
    {
      result = heap_Free(a2, v12);
      v3[11] = 0;
    }
    v13 = v3[12];
    if (v13)
    {
      result = heap_Free(a2, v13);
      v3[12] = 0;
    }
    v14 = v3[13];
    if (v14)
    {
      result = heap_Free(a2, v14);
      v3[13] = 0;
    }
    v15 = v3[15];
    if (v15)
    {
      result = heap_Free(a2, v15);
      v3[15] = 0;
    }
  }
  return result;
}

uint64_t p_xcoder_ObjOpen(uint64_t a1)
{
  uint64_t inited;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;

  v10 = 0;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v10);
  if ((inited & 0x80000000) == 0)
  {
    v3 = (_DWORD *)heap_Alloc(*(_QWORD *)(v10 + 8), 4);
    *(_QWORD *)(a1 + 280) = v3;
    if (v3)
    {
      *v3 = 0;
    }
    else
    {
      log_OutPublic(*(_QWORD *)(v10 + 32), (uint64_t)"XCODER", 15000, 0, v4, v5, v6, v7, v9);
      return 2282758154;
    }
  }
  return inited;
}

uint64_t p_xcoder_ObjClose(uint64_t a1)
{
  uint64_t inited;
  uint64_t v4;

  v4 = 0;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v4);
  if ((inited & 0x80000000) == 0)
  {
    heap_Free(*(_QWORD **)(v4 + 8), *(_QWORD *)(a1 + 280));
    *(_QWORD *)(a1 + 280) = 0;
  }
  return inited;
}

uint64_t p_xcoder_OpenXCoder(uint64_t a1)
{
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;
  uint64_t v14;

  v14 = 0;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v14);
  if ((inited & 0x80000000) != 0)
    return inited;
  if (*(_BYTE *)(a1 + 16) || *(_BYTE *)(a1 + 144))
  {
    **(_DWORD **)(a1 + 280) = 0;
    if (LH_stricmp((char *)(a1 + 16), "UTF-16"))
    {
      v11 = 2282758145;
      log_OutPublic(*(_QWORD *)(v14 + 32), (uint64_t)"XCODER", 15004, "%s%s%s%s", v7, v8, v9, v10, "charsetIn");
    }
    else
    {
      v11 = 0;
      **(_DWORD **)(a1 + 280) = 2;
    }
  }
  else
  {
    log_OutPublic(*(_QWORD *)(v14 + 32), (uint64_t)"XCODER", 15002, 0, v3, v4, v5, v6, v13);
    v11 = 2282758151;
  }
  *(_DWORD *)(a1 + 272) = v11;
  return v11;
}

uint64_t p_xcoder_Convert(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4, uint64_t a5, unsigned int a6, unsigned int *a7, _DWORD *a8)
{
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  const char *v27;
  uint64_t v28;

  v28 = 0;
  *a4 = 0;
  *a7 = 0;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v28);
  if ((inited & 0x80000000) != 0)
    return inited;
  v21 = 2282758158;
  if (**(_DWORD **)(a1 + 280) == 2)
  {
    if ((a3 & 1) != 0)
    {
      v21 = 2282758405;
      goto LABEL_10;
    }
    v21 = utf8_Utf16ToUtf8(a2, a3 >> 1, a4, a5, a6, a7, a8);
    v22 = v21 & 0x1FFF;
    if ((v21 & 0x1FFF) != 0 && v22 != 7)
    {
      if (v22 == 9)
      {
        v23 = *(_QWORD *)(v28 + 32);
        v24 = 15015;
        v25 = 0;
LABEL_11:
        log_OutPublic(v23, (uint64_t)"XCODER", v24, v25, v17, v18, v19, v20, v27);
        return v21;
      }
LABEL_10:
      v23 = *(_QWORD *)(v28 + 32);
      v27 = "input";
      v25 = "%s%s%s%s%s%x";
      v24 = 15016;
      goto LABEL_11;
    }
  }
  return v21;
}

uint64_t xcoder_mrksync_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2282758145;
  result = 0;
  *a2 = &IXCoderMrkSync;
  return result;
}

uint64_t xcoder_mrksync_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t Object;
  uint64_t NullHandle;
  int v10;
  _BOOL4 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  Object = 2282758151;
  v23 = 0;
  v24 = 0;
  NullHandle = safeh_GetNullHandle();
  v11 = safeh_HandlesEqual((uint64_t)a3, a4, NullHandle, v10);
  if (a5)
  {
    if (!v11)
    {
      *(_QWORD *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      if ((InitRsrcFunction(a3, a4, &v24) & 0x80000000) == 0)
      {
        v12 = (_QWORD *)heap_Calloc(*(_QWORD **)(v24 + 8), 1, 72);
        if (v12)
        {
          v17 = (uint64_t)v12;
          *v12 = a3;
          v12[1] = a4;
          Object = objc_GetObject(*(_QWORD *)(v24 + 48), (uint64_t)"SYNTHSTREAM", &v23);
          if ((Object & 0x80000000) != 0)
          {
            log_OutPublic(*(_QWORD *)(v24 + 32), (uint64_t)"XCODER", 15024, 0, v18, v19, v20, v21, v23);
            heap_Free(*(_QWORD **)(v24 + 8), v17);
          }
          else
          {
            *(_QWORD *)(v17 + 16) = *(_QWORD *)(v23 + 8);
            *(_QWORD *)a5 = v17;
            *(_DWORD *)(a5 + 8) = 854;
          }
        }
        else
        {
          log_OutPublic(*(_QWORD *)(v24 + 32), (uint64_t)"XCODER", 15000, 0, v13, v14, v15, v16, v23);
          return 2282758154;
        }
      }
    }
  }
  return Object;
}

uint64_t xcoder_mrksync_ObjClose(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = 0;
  v6 = 0;
  v2 = p_xcoder_mrksync_BeginFunction(a1, a2, &v6, &v5);
  if ((v2 & 0x80000000) != 0)
    return v2;
  v3 = objc_ReleaseObject(*(_QWORD *)(v6 + 48), (uint64_t)"SYNTHSTREAM");
  if ((v3 & 0x80000000) == 0)
    heap_Free(*(_QWORD **)(v6 + 8), v5);
  return v3;
}

uint64_t xcoder_mrksync_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  v6 = p_xcoder_mrksync_BeginFunction(a1, a2, &v17, &v16);
  if ((v6 & 0x80000000) != 0)
    return v6;
  v7 = v16;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(v16 + 16) + 64))(a3, a4, 129, "application/x-realspeak-xcoder-sync;version=5.0",
          0,
          0,
          v16 + 24) & 0x80000000) != 0)
    return 0;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(v7 + 16) + 64))(a3, a4, 129, "application/x-realspeak-markers-pp;version=4.0",
         0,
         0,
         v7 + 40);
  if ((v8 & 0x80000000) != 0)
  {
    v13 = v8;
    v14 = 15026;
    goto LABEL_9;
  }
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 + 16) + 64))(a3, a4, 129, "application/x-realspeak-markers-pp;version=4.0",
          0,
          1,
          v7 + 56);
  if ((v13 & 0x80000000) != 0)
  {
    v14 = 15027;
LABEL_9:
    log_OutPublic(*(_QWORD *)(v17 + 32), (uint64_t)"XCODER", v14, "%s%s", v9, v10, v11, v12, "contentType");
  }
  return v13;
}

uint64_t xcoder_mrksync_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  unsigned int v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v47;
  int v48;
  int *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  size_t __n;
  uint64_t v55;
  _QWORD *v56;

  v56 = 0;
  __n = 0;
  v55 = 0;
  v52 = 0;
  v53 = 0;
  v50 = 0;
  v51 = 0;
  v6 = p_xcoder_mrksync_BeginFunction(a1, a2, &v55, (uint64_t *)&v56);
  if ((v6 & 0x80000000) != 0)
    return v6;
  *a5 = 1;
  v7 = v56;
  if (!v56[7])
    return 0;
  v12 = (*(uint64_t (**)(_QWORD, _QWORD, size_t *, char *))(v56[2] + 144))(v56[5], v56[6], &__n, (char *)&__n + 4);
  if ((v12 & 0x80000000) != 0)
  {
    log_OutPublic(*(_QWORD *)(v55 + 32), (uint64_t)"XCODER", 15028, "%s%s%s%x", v8, v9, v10, v11, "stream");
    return v12;
  }
  if ((_DWORD)__n)
  {
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, char **, size_t *))(v7[2] + 88))(v7[5], v7[6], &v53, &__n);
    if ((v13 & 0x80000000) != 0)
    {
      v12 = v13;
      v35 = *(_QWORD *)(v55 + 32);
    }
    else
    {
      v18 = (*(uint64_t (**)(_QWORD, _QWORD, char *))(v7[2] + 136))(v7[3], v7[4], (char *)&v51 + 4);
      if ((v18 & 0x80000000) != 0)
      {
        v12 = v18;
        log_OutPublic(*(_QWORD *)(v55 + 32), (uint64_t)"XCODER", 15029, "%s%s%s%x", v19, v20, v21, v22, "stream");
        return v12;
      }
      v23 = (*(uint64_t (**)(_QWORD, _QWORD, int **, uint64_t *))(v7[2] + 88))(v7[3], v7[4], &v50, &v51);
      if ((v23 & 0x80000000) == 0)
      {
        v12 = (*(uint64_t (**)(_QWORD, _QWORD, char **, _QWORD))(v7[2] + 112))(v7[7], v7[8], &v52, __n);
        if ((v12 & 0x80000000) != 0)
        {
          log_OutPublic(*(_QWORD *)(v55 + 32), (uint64_t)"XCODER", 15031, "%s%s%s%x", v24, v25, v26, v27, "stream");
          (*(void (**)(_QWORD, _QWORD, _QWORD))(v7[2] + 96))(v7[5], v7[6], 0);
        }
        else
        {
          memcpy(v52, v53, __n);
          v30 = v51 >> 2;
          LODWORD(v51) = v51 >> 2;
          HIDWORD(v51) >>= 2;
          v31 = __n;
          if (__n >= 0x20)
          {
            v37 = 0;
            v38 = 0;
            v32 = 0;
            v39 = v53;
            do
            {
              v40 = *(_DWORD *)&v39[v37];
              v41 = v40 > 0x1D || ((1 << v40) & 0x215F0112) == 0;
              if (!v41 || v40 == 0x4000)
              {
                p_xcoder_GetRefPosition(v55, HIDWORD(v51), v50, v51, *(unsigned int *)&v39[v37 + 4], (int *)&v52[v37 + 4], v28, v29);
                p_xcoder_GetRefPosition(v55, HIDWORD(v51), v50, v51, (*(_DWORD *)&v53[v37 + 8] + *(_DWORD *)&v53[v37 + 4]), (int *)&v52[v37 + 8], v42, v43);
                LODWORD(v12) = 0;
                *(_DWORD *)&v52[v37 + 8] -= *(_DWORD *)&v52[v37 + 4];
                v39 = v53;
                if (*(_DWORD *)&v53[v37 + 4] > v32)
                  v32 = *(_DWORD *)&v53[v37 + 4];
                v31 = __n;
              }
              ++v38;
              v37 += 32;
            }
            while (v38 < v31 >> 5);
            v30 = v51;
          }
          else
          {
            v32 = 0;
          }
          if (v32 >= v30)
            v32 = v30 - 1;
          v44 = (*(uint64_t (**)(_QWORD, _QWORD))(v7[2] + 120))(v7[7], v7[8]);
          if (v44 < 0)
            LODWORD(v12) = v44;
          v45 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v7[2] + 96))(v7[5], v7[6], __n);
          if (v45 < 0 && (int)v12 > -1)
            LODWORD(v12) = v45;
          if (v32 <= HIDWORD(v51))
            v47 = 0;
          else
            v47 = 4 * (v32 - HIDWORD(v51));
          v48 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v7[2] + 96))(v7[3], v7[4], v47);
          if (v48 >= 0 || (int)v12 <= -1)
            return v12;
          else
            return v48;
        }
        return v12;
      }
      v12 = v23;
      v35 = *(_QWORD *)(v55 + 32);
    }
    log_OutPublic(v35, (uint64_t)"XCODER", 15030, "%s%s%s%x", v14, v15, v16, v17, "stream");
    return v12;
  }
  if (HIDWORD(__n))
  {
    v33 = v7[7];
    if (v33)
    {
      v12 = (*(uint64_t (**)(uint64_t, _QWORD))(v7[2] + 72))(v33, v7[8]);
      v7[7] = safeh_GetNullHandle();
      v7[8] = v34;
    }
  }
  else
  {
    *a5 = 1;
  }
  return v12;
}

uint64_t xcoder_mrksync_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  v2 = p_xcoder_mrksync_BeginFunction(a1, a2, &v12, (uint64_t *)&v11);
  if ((v2 & 0x80000000) == 0)
  {
    v3 = v11;
    v4 = v11[3];
    if (v4)
    {
      (*(void (**)(uint64_t, _QWORD))(v11[2] + 72))(v4, v11[4]);
      v3[3] = safeh_GetNullHandle();
      v3[4] = v5;
    }
    v6 = v3[5];
    if (v6)
    {
      (*(void (**)(uint64_t, _QWORD))(v3[2] + 72))(v6, v3[6]);
      v3[5] = safeh_GetNullHandle();
      v3[6] = v7;
    }
    v8 = v3[7];
    if (v8)
    {
      (*(void (**)(uint64_t, _QWORD))(v3[2] + 72))(v8, v3[8]);
      v3[7] = safeh_GetNullHandle();
      v3[8] = v9;
    }
  }
  return v2;
}

uint64_t p_xcoder_mrksync_BeginFunction(uint64_t a1, int a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t result;

  *a3 = 0;
  *a4 = 0;
  LODWORD(result) = safeh_HandleCheck(a1, a2, 854, 72);
  if ((result & 0x80000000) != 0)
  {
    if ((result & 0x1FFF) == 8)
      return 2282758152;
    else
      return result;
  }
  else
  {
    *a4 = a1;
    return InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), a3);
  }
}

uint64_t p_xcoder_GetRefPosition(uint64_t result, unsigned int a2, int *a3, int a4, uint64_t a5, int *a6, uint64_t a7, uint64_t a8)
{
  int v8;

  if (a5 >= a2)
  {
    if (a4 + a2 >= a5)
    {
      if (a4 + a2 == (_DWORD)a5)
        v8 = a3[a4 - 1] + 2;
      else
        v8 = a3[a5 - a2];
      *a6 = v8;
    }
    else
    {
      *a6 = a3[a4 - 1] + 2;
      return log_OutText(*(_QWORD *)(result + 32), (uint64_t)"XCODER", 3, 0, (uint64_t)"Marker text position is beyond the end of the sync object, charPos=%u, maxSyncPos=%u, return position=%u", (uint64_t)a6, a7, a8, a5);
    }
  }
  else
  {
    *a6 = *a3;
    return log_OutText(*(_QWORD *)(result + 32), (uint64_t)"XCODER", 3, 0, (uint64_t)"Marker text position is before the synch object, charPos=%u, syncPos=%u, return position=%u", (uint64_t)a6, a7, a8, a5);
  }
  return result;
}

uint64_t xcoder_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2282758145;
  result = 0;
  *a2 = &IXCoder;
  return result;
}

uint64_t xcoder_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t NullHandle;
  int v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v8 = 2282758151;
  v23 = 0;
  v24 = 0;
  NullHandle = safeh_GetNullHandle();
  v11 = safeh_HandlesEqual((uint64_t)a3, a4, NullHandle, v10);
  if (a5)
  {
    if (!v11)
    {
      *(_QWORD *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      if ((InitRsrcFunction(a3, a4, &v24) & 0x80000000) == 0)
      {
        v12 = heap_Calloc(*(_QWORD **)(v24 + 8), 1, 344);
        if (v12)
        {
          v17 = v12;
          *(_QWORD *)v12 = a3;
          *(_QWORD *)(v12 + 8) = a4;
          *(_DWORD *)(v12 + 272) = -2012209145;
          strcpy((char *)(v12 + 144), "UTF-8");
          if ((objc_GetObject(*(_QWORD *)(v24 + 48), (uint64_t)"SYNTHSTREAM", &v23) & 0x80000000) != 0)
            log_OutPublic(*(_QWORD *)(v24 + 32), (uint64_t)"XCODER", 15024, 0, v18, v19, v20, v21, v23);
          else
            *(_QWORD *)(v17 + 288) = *(_QWORD *)(v23 + 8);
          v8 = p_xcoder_ObjOpen(v17);
          if ((v8 & 0x80000000) != 0)
          {
            heap_Free(*(_QWORD **)(v24 + 8), v17);
            if (v23)
              objc_ReleaseObject(*(_QWORD *)(v24 + 48), (uint64_t)"SYNTHSTREAM");
          }
          else
          {
            *(_QWORD *)a5 = v17;
            *(_DWORD *)(a5 + 8) = 852;
          }
        }
        else
        {
          log_OutPublic(*(_QWORD *)(v24 + 32), (uint64_t)"XCODER", 15000, 0, v13, v14, v15, v16, v23);
          return 2282758154;
        }
      }
    }
  }
  return v8;
}

uint64_t xcoder_ObjClose(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  v2 = p_xcoder_BeginFunction(a1, a2, &v7, &v6);
  if ((v2 & 0x80000000) != 0)
    return v2;
  v3 = v6;
  v2 = p_xcoder_ObjClose(v6);
  if ((v2 & 0x80000000) != 0)
    return v2;
  v4 = objc_ReleaseObject(*(_QWORD *)(v7 + 48), (uint64_t)"SYNTHSTREAM");
  if ((v4 & 0x80000000) == 0)
    heap_Free(*(_QWORD **)(v7 + 8), v3);
  return v4;
}

uint64_t xcoder_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  kaldi::nnet1::Component *v12;
  uint64_t v13;
  uint64_t IsUpdatable;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v27;
  char *__s1;
  uint64_t v29;
  uint64_t v30;
  char v31[128];
  char v32[136];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = 0;
  v27 = 0;
  __s1 = 0;
  v6 = p_xcoder_BeginFunction(a1, a2, &v30, &v29);
  if ((v6 & 0x80000000) == 0)
  {
    v31[0] = 0;
    if ((paramc_ParamGetStr(*(_QWORD *)(v30 + 40), (uint64_t)"inputmimetype", &__s1) & 0x80000000) == 0
      && (v7 = __s1) != 0
      && *__s1)
    {
      if (!strcmp(__s1, "text/plain"))
      {
        if ((paramc_ParamGetStr(*(_QWORD *)(v30 + 40), (uint64_t)"nativetypeofchar", &v27) & 0x80000000) != 0
          || !v27
          || !*v27)
        {
          v27 = "UTF-8";
        }
        __strcpy_chk();
      }
      else
      {
        if (strncmp(v7, "text/plain;", 0xBuLL))
          return 0;
        v8 = strstr(v7, ";charset=");
        if (!v8)
          return 0;
        v9 = v8[9];
        if (v8[9])
        {
          v10 = 0;
          while (v10 <= 0x7E && v9 != 59)
          {
            v31[v10] = v9;
            v11 = v10 + 1;
            v9 = v8[v10++ + 10];
            if (!v9)
              goto LABEL_43;
          }
          v11 = v10;
        }
        else
        {
          v11 = 0;
        }
LABEL_43:
        v31[v11] = 0;
      }
    }
    else
    {
      if ((paramc_ParamGetStr(*(_QWORD *)(v30 + 40), (uint64_t)"nativetypeofchar", &v27) & 0x80000000) != 0
        || !v27
        || !*v27)
      {
        v27 = "UTF-8";
      }
      __strcpy_chk();
      strcpy(v32, "text/plain;charset=");
      __strcat_chk();
      __s1 = v32;
    }
    if (LH_stricmp(v31, "UTF-8"))
    {
      v12 = (kaldi::nnet1::Component *)v29;
      if (*(_DWORD *)(v29 + 272) || LH_stricmp(v31, (char *)(v29 + 16)))
      {
        __strcpy_chk();
        v13 = p_xcoder_OpenXCoder((uint64_t)v12);
        if ((v13 & 0x1FFF) == 1)
          return 0;
        v6 = v13;
        if ((v13 & 0x80000000) != 0)
          return v6;
      }
      else
      {
        IsUpdatable = kaldi::nnet1::Component::IsUpdatable(v12);
        if ((IsUpdatable & 0x80000000) != 0)
          return IsUpdatable;
      }
      v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, _QWORD, _QWORD, _QWORD *))(*((_QWORD *)v12 + 36) + 64))(a3, a4, 129, __s1, 0, 0, (_QWORD *)v12 + 37);
      if ((v15 & 0x80000000) != 0)
      {
        v6 = v15;
        log_OutPublic(*(_QWORD *)(v30 + 32), (uint64_t)"XCODER", 15026, "%s%s", v16, v17, v18, v19, "contentType");
        return v6;
      }
      v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, _QWORD *))(*((_QWORD *)v12 + 36) + 64))(a3, a4, 129, "text/plain;charset=utf-8",
              0,
              1,
              (_QWORD *)v12 + 39);
      if ((v20 & 0x80000000) != 0)
      {
        v6 = v20;
        v25 = *(_QWORD *)(v30 + 32);
      }
      else
      {
        v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, _QWORD *))(*((_QWORD *)v12 + 36) + 64))(a3, a4, 129, "application/x-realspeak-xcoder-sync;version=5.0",
               0,
               1,
               (_QWORD *)v12 + 41);
        if ((v6 & 0x80000000) == 0)
          return v6;
        v25 = *(_QWORD *)(v30 + 32);
      }
      log_OutPublic(v25, (uint64_t)"XCODER", 15027, "%s%s", v21, v22, v23, v24, "contentType");
    }
  }
  return v6;
}

uint64_t xcoder_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v43;
  int v44;
  int v46;
  int v48;
  void *__b;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;

  v56 = 0;
  v57 = 0;
  v55 = 0;
  v54 = 0;
  v51 = 0;
  v52 = 0;
  __b = 0;
  v6 = p_xcoder_BeginFunction(a1, a2, &v57, (uint64_t *)&v56);
  if ((v6 & 0x80000000) == 0)
  {
    *a5 = 1;
    v7 = v56;
    if (v56[39])
    {
      v6 = (*(uint64_t (**)(_QWORD, _QWORD, unsigned int *, char *))(v56[36] + 144))(v56[37], v56[38], &v54, (char *)&v55 + 4);
      if ((v6 & 0x80000000) != 0)
      {
        log_OutPublic(*(_QWORD *)(v57 + 32), (uint64_t)"XCODER", 15028, "%s%s%s%x", v8, v9, v10, v11, "stream");
      }
      else if (v54)
      {
        v12 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *))(v7[36] + 136))(v7[37], v7[38], &v55);
        if ((v12 & 0x80000000) != 0)
        {
          v6 = v12;
          log_OutPublic(*(_QWORD *)(v57 + 32), (uint64_t)"XCODER", 15029, "%s%s%s%x", v13, v14, v15, v16, "stream");
        }
        else
        {
          v17 = (*(uint64_t (**)(_QWORD, _QWORD, unsigned __int8 **, unsigned int *))(v7[36] + 88))(v7[37], v7[38], &v52, &v54);
          if ((v17 & 0x80000000) != 0)
          {
            v6 = v17;
            log_OutPublic(*(_QWORD *)(v57 + 32), (uint64_t)"XCODER", 15030, "%s%s%s%x", v18, v19, v20, v21, "stream");
          }
          else
          {
            v22 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, _QWORD))(v7[36] + 112))(v7[39], v7[40], &v51, 4 * v54);
            if ((v22 & 0x80000000) != 0)
            {
              v6 = v22;
              log_OutPublic(*(_QWORD *)(v57 + 32), (uint64_t)"XCODER", 15031, "%s%s%s%x", v23, v24, v25, v26, "stream");
            }
            else
            {
              v27 = (*(uint64_t (**)(_QWORD, _QWORD, void **, _QWORD))(v7[36] + 112))(v7[41], v7[42], &__b, 16 * v54);
              if ((v27 & 0x80000000) != 0)
              {
                v6 = v27;
                log_OutPublic(*(_QWORD *)(v57 + 32), (uint64_t)"XCODER", 15031, "%s%s%s%x", v28, v29, v30, v31, "stream");
                (*(void (**)(_QWORD, _QWORD, _QWORD))(v7[36] + 96))(v7[37], v7[38], 0);
              }
              else if (!(_DWORD)v55
                     && p_xcoder_CheckBom((uint64_t)v7, v52, v54)
                     && (v43 = p_xcoder_OpenXCoder((uint64_t)v7), (v43 & 0x80000000) != 0))
              {
                return v43;
              }
              else
              {
                v32 = 4 * v54;
                v53 = 4 * v54;
                memset(__b, 255, 16 * v54);
                v33 = p_xcoder_Convert((uint64_t)v7, (uint64_t)v52, v54, &v54, v51, v32, &v53, __b);
                if (v33 < 0 && ((LODWORD(v6) = v33, (v33 & 0x1FFF) != 7) || HIDWORD(v55)))
                {
                  v34 = 0;
                  v53 = 0;
                  v54 = 0;
                }
                else
                {
                  LODWORD(v6) = 0;
                  v34 = v53;
                  if ((_DWORD)v55 && v53)
                  {
                    v35 = 0;
                    v36 = __b;
                    do
                    {
                      v36[v35++] += v55;
                      v34 = v53;
                    }
                    while (v35 < v53);
                    LODWORD(v6) = 0;
                  }
                }
                v44 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v7[36] + 120))(v7[41], v7[42], 4 * v34);
                if (v44 < 0 && (int)v6 > -1)
                  LODWORD(v6) = v44;
                v46 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v7[36] + 120))(v7[39], v7[40], v53);
                if (v46 < 0 && (int)v6 > -1)
                  LODWORD(v6) = v46;
                v48 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v7[36] + 96))(v7[37], v7[38], v54);
                if (v48 >= 0 || (int)v6 <= -1)
                  return v6;
                else
                  return v48;
              }
            }
          }
        }
      }
      else if (HIDWORD(v55))
      {
        v37 = v7[39];
        if (v37)
        {
          LODWORD(v6) = (*(uint64_t (**)(uint64_t, _QWORD))(v7[36] + 72))(v37, v7[40]);
          v7[39] = safeh_GetNullHandle();
          v7[40] = v38;
          v39 = (*(uint64_t (**)(_QWORD, _QWORD))(v7[36] + 72))(v7[41], v7[42]);
          v7[41] = safeh_GetNullHandle();
          v7[42] = v40;
          if (v39 >= 0 || (int)v6 <= -1)
            return v6;
          else
            return v39;
        }
      }
      else
      {
        *a5 = 0;
      }
    }
  }
  return v6;
}

uint64_t xcoder_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  v2 = p_xcoder_BeginFunction(a1, a2, &v12, (uint64_t *)&v11);
  if ((v2 & 0x80000000) == 0)
  {
    v3 = v11;
    v4 = v11[37];
    if (v4)
    {
      (*(void (**)(uint64_t, _QWORD))(v11[36] + 72))(v4, v11[38]);
      v3[37] = safeh_GetNullHandle();
      v3[38] = v5;
    }
    v6 = v3[39];
    if (v6)
    {
      (*(void (**)(uint64_t, _QWORD))(v3[36] + 72))(v6, v3[40]);
      v3[39] = safeh_GetNullHandle();
      v3[40] = v7;
    }
    v8 = v3[41];
    if (v8)
    {
      (*(void (**)(uint64_t, _QWORD))(v3[36] + 72))(v8, v3[42]);
      v3[41] = safeh_GetNullHandle();
      v3[42] = v9;
    }
  }
  return v2;
}

uint64_t p_xcoder_BeginFunction(uint64_t a1, int a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t result;

  *a3 = 0;
  *a4 = 0;
  LODWORD(result) = safeh_HandleCheck(a1, a2, 852, 344);
  if ((result & 0x80000000) != 0)
  {
    if ((result & 0x1FFF) == 8)
      return 2282758152;
    else
      return result;
  }
  else
  {
    *a4 = a1;
    return InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), a3);
  }
}

uint64_t p_xcoder_CheckBom(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  char *v4;
  uint64_t result;

  if (a3 < 2)
    return 0;
  v4 = (char *)(a1 + 16);
  if (LH_stricmp((char *)(a1 + 16), "UTF-16") && LH_stricmp(v4, "UCS-2"))
    return 0;
  if (*a2 == 254 && a2[1] == 255)
  {
    strcpy(v4, "UTF-16BE");
    return 1;
  }
  else
  {
    result = 0;
    strcpy(v4, "UTF-16");
  }
  return result;
}

uint64_t synthstream_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2297438209;
  result = 0;
  *a2 = &ISynthStream;
  return result;
}

uint64_t synthstream_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  unsigned int v28;
  __int128 v29[2];
  _QWORD *(*v30)(_QWORD *);
  uint64_t v31;

  v5 = 2297438214;
  v31 = 0;
  if (a5)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v31);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(_QWORD *)(v31 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ObjOpen: Begin", v10, v11, v12, v27);
      v13 = heap_Calloc(*(_QWORD **)(v31 + 8), 1, 48);
      if (v13)
      {
        v18 = v13;
        *(_QWORD *)v13 = a3;
        *(_QWORD *)(v13 + 8) = a4;
        v19 = (_DWORD *)(v13 + 32);
        if ((paramc_ParamGetUInt(*(_QWORD *)(v31 + 40), (uint64_t)"synthstreamminmemalloc", (unsigned int *)(v13 + 32)) & 0x80000000) != 0
          || !*v19)
        {
          *v19 = 1024;
        }
        v20 = (_DWORD *)(v18 + 36);
        if ((paramc_ParamGetUInt(*(_QWORD *)(v31 + 40), (uint64_t)"synthstreamminmemmove", (unsigned int *)(v18 + 36)) & 0x80000000) != 0
          || !*v20)
        {
          *v20 = 128;
        }
        v21 = (_DWORD *)(v18 + 40);
        if ((paramc_ParamGetUInt(*(_QWORD *)(v31 + 40), (uint64_t)"synthstreamminmemfree", (unsigned int *)(v18 + 40)) & 0x80000000) != 0
          || !*v21)
        {
          *v21 = 4097;
        }
        paramc_ParamGetInt(*(_QWORD *)(v31 + 40), (uint64_t)"loginputtext", (int *)(v18 + 44));
        v22 = *(_QWORD **)(v31 + 8);
        v29[0] = xmmword_1EA9480B0;
        v29[1] = *(_OWORD *)off_1EA9480C0;
        v30 = synthstream_loc_ElemReleaseStreamImpl;
        v5 = ssftmap_ObjOpen(v22, 0, v29, (uint64_t *)(v18 + 24));
        if ((v5 & 0x80000000) != 0)
        {
          heap_Free(*(_QWORD **)(v31 + 8), v18);
        }
        else
        {
          *(_QWORD *)a5 = v18;
          *(_DWORD *)(a5 + 8) = 18397;
        }
      }
      else
      {
        log_OutPublic(*(_QWORD *)(v31 + 32), (uint64_t)"SYNTHSTREAM", 22000, 0, v14, v15, v16, v17, v28);
        v5 = 2297438218;
      }
      log_OutText(*(_QWORD *)(v31 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ObjOpen: End (%x)", v23, v24, v25, v5);
    }
  }
  return v5;
}

uint64_t synthstream_ObjClose(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int ElemAt;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v28 = 0;
  v29 = 0;
  v27 = 0;
  v2 = synthstream_loc_BeginFunction(a1, a2, &v28, &v29);
  if ((v2 & 0x80000000) != 0)
    return v2;
  log_OutText(*(_QWORD *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ObjClose : Begin", v3, v4, v5, v23);
  v6 = v29;
  v10 = ssftmap_IteratorOpen(*(_QWORD *)(v29 + 24), 0, 1, (uint64_t)&v27);
  if ((v10 & 0x80000000) == 0)
  {
    v25 = 0;
    v26 = 0;
    v24 = 0;
    while ((ssftmap_IteratorNext(v27, &v26, &v25) & 0x80000000) == 0)
    {
      v15 = v25;
      if (!*(_DWORD *)(v25 + 108))
      {
        log_OutPublic(*(_QWORD *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 22001, "%s%u%s%s%s%u", v11, v12, v13, v14, "writer");
        v15 = v25;
      }
      if (*(_QWORD *)(v15 + 16))
      {
        log_OutPublic(*(_QWORD *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 22001, "%s%u%s%s%s%u", v11, v12, v13, v14, "module");
        heap_Free(*(_QWORD **)(v28 + 8), *(_QWORD *)(v25 + 16));
        v15 = v25;
        *(_QWORD *)(v25 + 16) = 0;
      }
      if (vector_GetElemAt(*(_QWORD *)(v15 + 24), 0, &v24) == 1)
      {
        v20 = 1;
        do
        {
          log_OutPublic(*(_QWORD *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 22001, "%s%u%s%s%s%u", v16, v17, v18, v19, "module");
          heap_Free(*(_QWORD **)(v28 + 8), *v24);
          ElemAt = vector_GetElemAt(*(_QWORD *)(v25 + 24), v20++, &v24);
        }
        while (ElemAt == 1);
      }
      if (*(unsigned __int16 *)(v25 + 42) >= 2u)
        *(_WORD *)(v25 + 42) = 1;
    }
    ssftmap_IteratorClose((uint64_t)v27);
  }
  if ((v10 & 0x80000000) == 0 || (v10 & 0x1FFF) == 0x14)
  {
    v10 = ssftmap_ObjClose(*(_QWORD *)(v6 + 24));
    if ((v10 & 0x80000000) == 0)
      heap_Free(*(_QWORD **)(v28 + 8), v6);
  }
  log_OutText(*(_QWORD *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ObjClose : End (%x)", v7, v8, v9, v10);
  return v10;
}

uint64_t synthstream_SetPipelinePos(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  v7 = synthstream_loc_BeginFunction(a1, a2, &v12, &v13);
  if ((v7 & 0x80000000) == 0)
  {
    log_OutText(*(_QWORD *)(v12 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM SetPipelinePos : Begin (%u)", v4, v5, v6, a3);
    *(_WORD *)(v13 + 16) = a3;
    log_OutText(*(_QWORD *)(v12 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM SetPipelinePos : End (%x)", v8, v9, v10, v7);
  }
  return v7;
}

uint64_t synthstream_StreamOpen(uint64_t a1, int a2, unsigned int a3, const char *a4, __int128 *a5, int a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  _BOOL4 v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  char *v54;
  BOOL v55;
  BOOL v56;
  BOOL v57;
  BOOL v58;
  BOOL v59;
  BOOL v60;
  BOOL v61;
  BOOL v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned int v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  char *p_s1;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 __s1;
  _BYTE v83[11];
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v80 = 0;
  v81 = 0;
  v79 = 0;
  v12 = synthstream_loc_BeginFunction(a1, a2, &v79, &v81);
  if ((v12 & 0x80000000) != 0)
    return v12;
  v16 = v81;
  log_OutText(*(_QWORD *)(v79 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM StreamOpen : Begin (%u, %s, %p, %d, %u)", v13, v14, v15, a3);
  if (a4 && a7 && *a4 && strlen(a4) < 0x80)
  {
    *(_QWORD *)a7 = 0;
    *(_DWORD *)(a7 + 8) = 0;
    p_s1 = 0;
    v78 = 0;
    v76 = 0;
    if (*a4)
    {
      v22 = 0;
      v23 = 1;
      do
      {
        v83[v22 - 16] = __tolower(a4[v22]);
        v22 = v23;
      }
      while (strlen(a4) > v23++);
    }
    else
    {
      v22 = 0;
    }
    v83[v22 - 16] = 0;
    p_s1 = (char *)&__s1;
    LOWORD(v78) = 0;
    v21 = ssftmap_IteratorOpen(*(_QWORD *)(v16 + 24), (uint64_t)&p_s1, 1, (uint64_t)&v76);
    if ((v21 & 0x80000000) != 0)
    {
      v30 = 0;
      v31 = 0;
    }
    else
    {
      *(_QWORD *)&v73 = 0;
      v75 = 0;
      if ((ssftmap_IteratorNext(v76, &v73, &v75) & 0x80000000) == 0
        && (v29 = v73, !strcmp((const char *)&__s1, *(const char **)v73)))
      {
        v34 = 0;
        v31 = 0;
        do
        {
          v30 = v34;
          v35 = a6 == 0;
          v36 = *(unsigned __int16 *)(v75 + 40);
          v37 = *(unsigned __int16 *)(v16 + 16);
          if (v36 != v37)
            v35 = 0;
          if (v36 >= v37 && !v35)
            break;
          v34 = v29;
          v31 = v75;
          if ((ssftmap_IteratorNext(v76, &v73, &v75) & 0x80000000) != 0)
          {
            v30 = v29;
            break;
          }
          v29 = v73;
          v30 = v34;
        }
        while (!strcmp((const char *)&__s1, *(const char **)v73));
      }
      else
      {
        v30 = 0;
        v31 = 0;
      }
      ssftmap_IteratorClose((uint64_t)v76);
    }
    if ((v21 & 0x1FFF) == 0x14)
      v32 = 0;
    else
      v32 = v21;
    if ((v32 & 0x80000000) != 0)
      goto LABEL_109;
    if ((a6 - 1) < 2)
    {
      if (v31 && *(unsigned __int16 *)(v31 + 40) == *(unsigned __int16 *)(v16 + 16))
      {
        log_OutText(*(_QWORD *)(v79 + 32), (uint64_t)"SYNTHSTREAM", 3, 0, (uint64_t)"SYNTHSTREAM ObjOpen for write failed for %s %u, already present", v26, v27, v28, (uint64_t)&__s1);
        v21 = 2297438210;
LABEL_109:
        log_OutText(*(_QWORD *)(v79 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM StreamOpen : End (%x, %p, %p, %u)", v26, v27, v28, v21);
        return v21;
      }
      if (v30)
        v33 = *(_WORD *)(v30 + 8) + 1;
      else
        v33 = 0;
      LOWORD(v78) = v33;
      v39 = heap_Calloc(*(_QWORD **)(v79 + 8), 1, 120);
      v41 = v79;
      if (!v39)
      {
        v21 = 2297438218;
LABEL_108:
        log_OutPublic(*(_QWORD *)(v41 + 32), (uint64_t)"SYNTHSTREAM", 22000, 0, v40, v26, v27, v28, v72);
        goto LABEL_109;
      }
      v31 = v39;
      v42 = *(_QWORD **)(v79 + 8);
      v73 = xmmword_1DECA2168;
      v74 = 0;
      if (vector_ObjOpen(v42, &v73, 1, (uint64_t *)(v31 + 24)) == 1)
      {
        v47 = strlen((const char *)&__s1);
        v48 = (char *)heap_Alloc(*(_QWORD *)(v79 + 8), (v47 + 1));
        *(_QWORD *)(v31 + 32) = v48;
        if (v48)
        {
          if (!a5)
          {
            if (!strcmp((const char *)&__s1, "application/x-realspeak-markers-pp;version=4.0"))
            {
              a5 = &IElemMarkerT;
            }
            else if (!strcmp((const char *)&__s1, "application/x-realspeak-int-markers-pp;version=4.0"))
            {
              a5 = &IElemIntMarkerT;
            }
            else if (!strcmp((const char *)&__s1, "application/x-tnplus-words;version=1.0"))
            {
              a5 = (__int128 *)&IElemGeeneWordT;
            }
            else
            {
              a5 = 0;
            }
          }
          *(_QWORD *)v31 = v16;
          *(_QWORD *)(v31 + 8) = v79;
          strcpy(v48, (const char *)&__s1);
          *(_WORD *)(v31 + 40) = *(_WORD *)(v16 + 16);
          *(_WORD *)(v31 + 42) = 1;
          *(_WORD *)(v31 + 44) = a3;
          if (a5 && *(_WORD *)a5)
          {
            v53 = *a5;
            *(_QWORD *)(v31 + 64) = *((_QWORD *)a5 + 2);
            *(_OWORD *)(v31 + 48) = v53;
          }
          *(_BYTE *)(v31 + 72) = a6 == 2;
          v54 = p_s1;
          v55 = !strncmp(p_s1, "text/", 5uLL) && strstr(v54, "charset=wchar_t") == 0;
          *(_BYTE *)(v31 + 73) = v55;
          if (*(_DWORD *)(v16 + 44))
          {
            v56 = (_QWORD)__s1 == 0x616C702F74786574 && *((_QWORD *)&__s1 + 1) == 0x73726168633B6E69;
            v57 = v56 && *(_QWORD *)v83 == 0x312D6674753D7465;
            v58 = v57 && *(unsigned __int16 *)&v83[8] == 54;
            if (v58
              || !((unint64_t)__s1 ^ 0x616C702F74786574 | *((_QWORD *)&__s1 + 1) ^ 0x73726168633B6E69 | *(_QWORD *)v83 ^ 0x382D6674753D7465 | v83[8])
              || ((_QWORD)__s1 == 0x746163696C707061
                ? (v59 = *((_QWORD *)&__s1 + 1) == 0x746E79732F6E6F69)
                : (v59 = 0),
                  v59 ? (v60 = *(_QWORD *)v83 == 0x73732B7369736568) : (v60 = 0),
                  v60 ? (v61 = *(_QWORD *)&v83[3] == 0x6C6D73732B7369) : (v61 = 0),
                  v61
               || ((_QWORD)__s1 == 0x6D74682F74786574 ? (v62 = WORD4(__s1) == 108) : (v62 = 0),
                   v62
                || ((_QWORD)__s1 == 0x616D652F74786574
                  ? (v63 = *(_QWORD *)((char *)&__s1 + 3) == 0x6C69616D652F74)
                  : (v63 = 0),
                    v63 || !((unint64_t)__s1 ^ 0x6C6D782F74786574 | BYTE8(__s1))))))
            {
              *(_DWORD *)(v16 + 44) = 0;
              *(_BYTE *)(v31 + 72) = 1;
              *(_BYTE *)(v31 + 74) = 1;
            }
          }
          v21 = ssftmap_Insert(*(_QWORD *)(v16 + 24), (uint64_t)&p_s1, v31);
          if ((v21 & 0x80000000) != 0)
            log_OutPublic(*(_QWORD *)(v79 + 32), (uint64_t)"SYNTHSTREAM", 22002, "%s%u%s%s%s%u", v64, v65, v66, v67, "module");
          synthstream_loc_ElemReleaseStreamImpl((_QWORD *)v31);
          if ((v21 & 0x80000000) != 0)
            goto LABEL_109;
LABEL_100:
          v68 = heap_Calloc(*(_QWORD **)(v79 + 8), 1, 24);
          v80 = v68;
          if (v68)
          {
            v69 = v68;
            if (a6 || (v70 = vector_Add(*(_QWORD *)(v31 + 24), &v80), v69 = v80, v70))
            {
              *(_DWORD *)v69 = a6;
              *(_WORD *)(v69 + 4) = a3;
              *(_QWORD *)(v69 + 8) = v31;
              *(_DWORD *)(v69 + 16) = *(_DWORD *)(v31 + 80);
              ++*(_WORD *)(v31 + 42);
              if ((a6 - 1) <= 1)
                *(_QWORD *)(v31 + 16) = v69;
              *(_QWORD *)a7 = v69;
              *(_DWORD *)(a7 + 8) = 18398;
              goto LABEL_109;
            }
            v21 = 2297438218;
            heap_Free(*(_QWORD **)(v79 + 8), v80);
            v80 = 0;
          }
          else
          {
            v21 = 2297438218;
          }
          v41 = v79;
          goto LABEL_108;
        }
        v21 = 2297438218;
        log_OutPublic(*(_QWORD *)(v79 + 32), (uint64_t)"SYNTHSTREAM", 22000, 0, v49, v50, v51, v52, v72);
        vector_ObjClose(*(_QWORD *)(v31 + 24));
      }
      else
      {
        v21 = 2297438218;
        log_OutPublic(*(_QWORD *)(v79 + 32), (uint64_t)"SYNTHSTREAM", 22000, 0, v43, v44, v45, v46, v72);
      }
      heap_Free(*(_QWORD **)(v79 + 8), v31);
      goto LABEL_109;
    }
    if (a6)
    {
      log_OutPublic(*(_QWORD *)(v79 + 32), (uint64_t)"SYNTHSTREAM", 22007, "%s%d%s%u%s%s", v25, v26, v27, v28, "openMode");
      v21 = 2297438215;
      goto LABEL_109;
    }
    if (!v31)
    {
      log_OutText(*(_QWORD *)(v79 + 32), (uint64_t)"SYNTHSTREAM", 3, 0, (uint64_t)"SYNTHSTREAM ObjOpen for read failed for %s %u, not found", v26, v27, v28, (uint64_t)&__s1);
      v21 = 2297438228;
      goto LABEL_109;
    }
    v21 = v32;
    goto LABEL_100;
  }
  log_OutPublic(*(_QWORD *)(v79 + 32), (uint64_t)"SYNTHSTREAM", 22006, "%s%s%s%u%s%s%s%p", v17, v18, v19, v20, "function");
  return 2297438215;
}

uint64_t synthstream_StreamClose(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;
  _QWORD *v19;

  v6 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v6 & 0x80000000) == 0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM StreamClose : Begin (%u, %p, %d)", v3, v4, v5, *(unsigned __int16 *)(a1 + 4));
    if (*(_DWORD *)a1)
    {
      v8 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(v8 + 16) = 0;
      *(_DWORD *)(v8 + 108) = 1;
      synthstream_loc_StreamImplDump(v8, 0, 0);
    }
    else
    {
      v19 = 0;
      v13 = 0;
      if (vector_GetElemAt(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), 0, &v19) == 1)
      {
        v13 = 0;
        do
        {
          if (*v19 == a1)
            break;
          ++v13;
        }
        while (vector_GetElemAt(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), v13, &v19) == 1);
      }
      if (*v19 == a1)
        vector_Remove(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), v13);
      else
        log_OutPublic(*(_QWORD *)(v7 + 32), (uint64_t)"SYNTHSTREAM", 22003, 0, v9, v10, v11, v12, v18);
    }
    synthstream_loc_ElemReleaseStreamImpl(*(_QWORD **)(a1 + 8));
    heap_Free(*(_QWORD **)(v7 + 8), a1);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM StreamClose : End (%x)", v14, v15, v16, v6);
  }
  return v6;
}

uint64_t synthstream_Read(uint64_t a1, int a2, void *a3, unsigned int a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;

  v12 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v12 & 0x80000000) == 0)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    log_OutText(*(_QWORD *)(v13 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM Read : Begin (%u, %p, %lu bytes)", v9, v10, v11, *(unsigned __int16 *)(a1 + 4));
    if (a3 && a4 && a5)
    {
      if (*(_DWORD *)a1)
      {
        v12 = 2297438215;
        log_OutPublic(*(_QWORD *)(v13 + 32), (uint64_t)"SYNTHSTREAM", 22009, "%s%s%s%u%s%s", v14, v15, v16, v17, "function");
      }
      else
      {
        v18 = *(_DWORD *)(a1 + 16);
        v19 = *(_QWORD *)(a1 + 8);
        v20 = *(_DWORD *)(v19 + 88);
        v21 = v18 - v20;
        if (v18 >= v20)
        {
          v23 = *(_DWORD *)(v19 + 76) - v18;
          if (v23 >= a4)
            v24 = a4;
          else
            v24 = v23;
          *a5 = v24;
          if ((_DWORD)v24)
          {
            memcpy(a3, (const void *)(*(_QWORD *)(v19 + 96) + v21), v24);
            v29 = *(_DWORD *)(a1 + 16) + *a5;
            *(_DWORD *)(a1 + 16) = v29;
            v30 = *(_QWORD *)(a1 + 8);
            if (v29 > *(_DWORD *)(v30 + 80))
              *(_DWORD *)(v30 + 80) = v29;
            if (*(_QWORD *)(v30 + 56))
              log_OutPublic(*(_QWORD *)(v13 + 32), (uint64_t)"SYNTHSTREAM", 22014, "%s%s%s%u%s%s", v25, v26, v27, v28, "function");
            else
              synthstream_loc_StreamImplRecoverExcessBuffer(v30, 0);
          }
          goto LABEL_12;
        }
        log_OutPublic(*(_QWORD *)(v13 + 32), (uint64_t)"SYNTHSTREAM", 22011, "%s%s%s%u%s%s%s%u%s%u", v14, v15, v16, v17, "function");
        v12 = 2297438212;
      }
    }
    else
    {
      v12 = 2297438215;
      log_OutPublic(*(_QWORD *)(v13 + 32), (uint64_t)"SYNTHSTREAM", 22006, "%s%s%s%u%s%s%s%p%s%d%s%p", v14, v15, v16, v17, "function");
      if (!a5)
        return v12;
    }
    *a5 = 0;
LABEL_12:
    log_OutText(*(_QWORD *)(v13 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM Read : End (%x, %lu bytes)", v15, v16, v17, v12);
  }
  return v12;
}

uint64_t synthstream_ReadDirectStart(uint64_t a1, int a2, _QWORD *a3, unsigned int *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v22;

  v10 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v10 & 0x80000000) == 0)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    log_OutText(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ReadDirectStart : Begin (%u, %p)", v7, v8, v9, *(unsigned __int16 *)(a1 + 4));
    if (a3 && a4)
    {
      if (*(_DWORD *)a1)
      {
        v10 = 2297438215;
        log_OutPublic(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22009, "%s%s%s%u%s%s", v12, v13, v14, v15, "function");
      }
      else
      {
        v16 = *(_DWORD *)(a1 + 16);
        v17 = *(_QWORD *)(a1 + 8);
        v18 = *(_DWORD *)(v17 + 88);
        v19 = v16 - v18;
        if (v16 >= v18)
        {
          v20 = *(_DWORD *)(v17 + 76) - v16;
          *a4 = v20;
          v21 = *(_QWORD *)(v17 + 96);
          *a3 = v21 + v19;
          if (v20)
            v22 = v21 == 0;
          else
            v22 = 0;
          if (!v22)
            goto LABEL_19;
          v10 = 2297438218;
        }
        else
        {
          log_OutPublic(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22011, "%s%s%s%u%s%s%s%u%s%u", v12, v13, v14, v15, "function");
          v10 = 2297438212;
        }
      }
    }
    else
    {
      v10 = 2297438215;
      log_OutPublic(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22006, "%s%s%s%u%s%s%s%p%s%p", v12, v13, v14, v15, "function");
      if (!a3)
      {
        if (!a4)
          return v10;
        goto LABEL_18;
      }
    }
    *a3 = 0;
    if (a4)
    {
LABEL_18:
      *a4 = 0;
LABEL_19:
      log_OutText(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ReadDirectStart : End (%x, %lu bytes)", v13, v14, v15, v10);
    }
  }
  return v10;
}

uint64_t synthstream_ReadDirectEnd(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;

  v8 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v8 & 0x80000000) == 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ReadDirectEnd : Begin (%u, %p, %lu bytes)", v5, v6, v7, *(unsigned __int16 *)(a1 + 4));
    if (*(_DWORD *)a1)
    {
      v8 = 2297438215;
      log_OutPublic(*(_QWORD *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 22009, "%s%s%s%u%s%s", v10, v11, v12, v13, "function");
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 8);
      v18 = *(_DWORD *)(a1 + 16);
      v19 = *(_DWORD *)(v17 + 76) - v18;
      if (v19 >= a3)
      {
        v20 = v18 + a3;
      }
      else
      {
        v8 = 2297438215;
        log_OutPublic(*(_QWORD *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 22004, "%s%u%s%s%s%u%s%u", v10, v11, v12, v13, "module");
        v20 = *(_DWORD *)(a1 + 16) + v19;
        v17 = *(_QWORD *)(a1 + 8);
      }
      *(_DWORD *)(a1 + 16) = v20;
      if (v20 > *(_DWORD *)(v17 + 80))
        *(_DWORD *)(v17 + 80) = v20;
      synthstream_loc_StreamImplRecoverExcessBuffer(v17, 0);
    }
    log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ReadDirectEnd : End (%x)", v14, v15, v16, v8);
  }
  return v8;
}

uint64_t synthstream_Write(uint64_t a1, int a2, char *a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  BOOL v29;
  unsigned int v30;
  int v31;

  v31 = 1;
  v7 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v7 & 0x80000000) == 0)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    log_OutText(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM Write : Begin (%u, %p, %lu bytes)", v8, v9, v10, *(unsigned __int16 *)(a1 + 4));
    if (!a3 || !a4)
    {
      v20 = 2297438215;
      log_OutText(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"%s%u%s%s%s%p%s%u", v13, v14, v15, (uint64_t)"function=Write|module=");
      goto LABEL_22;
    }
    if ((*(_DWORD *)a1 - 1) >= 2)
    {
      v20 = 2297438215;
      log_OutPublic(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22008, "%s%s%s%u%s%s", v12, v13, v14, v15, "function");
      goto LABEL_22;
    }
    v16 = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(v16 + 76) < *(_DWORD *)(v16 + 88))
    {
      log_OutPublic(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22012, "%s%s%s%u%s%s%s%u%s%u", v12, v13, v14, v15, "function");
      v20 = 2297438213;
LABEL_22:
      log_OutText(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM Write : End (%x)", v17, v18, v19, v20);
      return v20;
    }
    v21 = synthstream_loc_StreamImplGrowBuf(v16, a4, &v31);
    if ((v21 & 0x80000000) != 0)
    {
      v20 = v21;
      goto LABEL_22;
    }
    v22 = *(_QWORD *)(a1 + 8);
    if (v31 == 1)
    {
      v23 = *(_DWORD *)(v22 + 76);
      v24 = *(_DWORD *)(v22 + 88);
      v25 = v23 - v24;
      if (v23 >= v24)
      {
        memcpy((void *)(*(_QWORD *)(v22 + 96) + v25), a3, a4);
        v22 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)(v22 + 56))
        {
          v26 = 0;
          while (1)
          {
            v27 = (*(uint64_t (**)(char *, _QWORD, _QWORD))(v22 + 56))(&a3[v26], *(_QWORD *)(*(_QWORD *)(v22 + 8) + 8), *(_QWORD *)(v22 + 96) + v26 + v25);
            v22 = *(_QWORD *)(a1 + 8);
            if (!v27)
              break;
            v26 += *(unsigned __int16 *)(v22 + 48);
            if (v26 >= a4)
              goto LABEL_21;
          }
          if (*(_QWORD *)(v22 + 64))
            v29 = v26 == 0;
          else
            v29 = 1;
          if (!v29)
          {
            v30 = 0;
            do
            {
              (*(void (**)(_QWORD, _QWORD))(v22 + 64))(*(_QWORD *)(v22 + 96) + v30 + v25, *(_QWORD *)(*(_QWORD *)(v22 + 8) + 8));
              v22 = *(_QWORD *)(a1 + 8);
              v30 += *(unsigned __int16 *)(v22 + 48);
            }
            while (v30 < v26);
          }
          v20 = 2297438218;
          goto LABEL_22;
        }
        goto LABEL_21;
      }
    }
    else
    {
      v24 = *(_DWORD *)(v22 + 88);
    }
    *(_DWORD *)(v22 + 88) = v24 + a4;
LABEL_21:
    *(_DWORD *)(v22 + 76) += a4;
    synthstream_loc_StreamImplDump(v22, (uint64_t)a3, a4);
    v20 = 0;
    goto LABEL_22;
  }
  return v7;
}

uint64_t synthstream_WriteDirectStart(uint64_t a1, int a2, _QWORD *a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void *v23;

  v7 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v7 & 0x80000000) == 0)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    log_OutText(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM WriteDirectStart : Begin (%u, %p, %lu bytes)", v8, v9, v10, *(unsigned __int16 *)(a1 + 4));
    if (a3 && a4)
    {
      if ((*(_DWORD *)a1 - 1) >= 2)
      {
        v20 = 2297438215;
        log_OutPublic(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22008, "%s%s%s%u%s%s", v12, v13, v14, v15, "function");
      }
      else
      {
        v16 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(v16 + 76) >= *(_DWORD *)(v16 + 88))
        {
          v22 = synthstream_loc_StreamImplGrowBuf(v16, a4, 0);
          if ((v22 & 0x80000000) == 0)
          {
            v23 = (void *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 96)
                         + (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 76)
                                        - *(_DWORD *)(*(_QWORD *)(a1 + 8) + 88)));
            *a3 = v23;
            bzero(v23, a4);
            v20 = 0;
            goto LABEL_12;
          }
          v20 = v22;
        }
        else
        {
          log_OutPublic(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22012, "%s%s%s%u%s%s%s%u%s%u", v12, v13, v14, v15, "function");
          v20 = 2297438213;
        }
      }
    }
    else
    {
      v20 = 2297438215;
      log_OutPublic(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22006, "%s%s%s%u%s%s%s%p%s%u", v12, v13, v14, v15, "function");
      if (!a3)
        goto LABEL_12;
    }
    *a3 = 0;
LABEL_12:
    log_OutText(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM WriteDirectStart : End (%x)", v17, v18, v19, v20);
    return v20;
  }
  return v7;
}

uint64_t synthstream_WriteDirectEnd(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unsigned int v29;

  v8 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v8 & 0x80000000) == 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM WriteDirectEnd : Begin (%u, %p, %lu bytes)", v5, v6, v7, *(unsigned __int16 *)(a1 + 4));
    if ((*(_DWORD *)a1 - 1) >= 2)
    {
      v8 = 2297438215;
      log_OutPublic(*(_QWORD *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 22008, "%s%s%s%u%s%s", v10, v11, v12, v13, "function");
      goto LABEL_6;
    }
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_DWORD *)(v14 + 76);
    v16 = *(_DWORD *)(v14 + 88);
    v17 = v15 - v16;
    if (v15 < v16)
    {
      log_OutPublic(*(_QWORD *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 22012, "%s%s%s%u%s%s%s%u%s%u", v10, v11, v12, v13, "function");
      v8 = 2297438213;
LABEL_6:
      log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM WriteDirectEnd : End (%x)", v18, v19, v20, v8);
      return v8;
    }
    v22 = v17 + a3;
    if (v17 + a3 > *(_DWORD *)(v14 + 104))
    {
      v8 = 2297438215;
      log_OutPublic(*(_QWORD *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 22005, "%s%u%s%s%s%u%s%u", v10, v11, v12, v13, "module");
      goto LABEL_6;
    }
    if (*(_QWORD *)(v14 + 56))
    {
      if (a3)
      {
        v23 = 0;
        while (1)
        {
          v24 = (*(uint64_t (**)(_QWORD, _QWORD))(v14 + 56))(*(_QWORD *)(v14 + 96) + v23 + v17, *(_QWORD *)(*(_QWORD *)(v14 + 8) + 8));
          v14 = *(_QWORD *)(a1 + 8);
          if (!v24)
            break;
          v23 += *(unsigned __int16 *)(v14 + 48);
          if (v23 >= a3)
            goto LABEL_15;
        }
        if (*(_QWORD *)(v14 + 64))
          v28 = v23 == 0;
        else
          v28 = 1;
        if (!v28)
        {
          v29 = 0;
          do
          {
            (*(void (**)(_QWORD, _QWORD))(v14 + 64))(*(_QWORD *)(v14 + 96) + v29 + v17, *(_QWORD *)(*(_QWORD *)(v14 + 8) + 8));
            v14 = *(_QWORD *)(a1 + 8);
            v29 += *(unsigned __int16 *)(v14 + 48);
          }
          while (v29 < v23);
        }
        v8 = 2297438218;
        goto LABEL_6;
      }
LABEL_15:
      v15 = *(_DWORD *)(v14 + 76);
    }
    *(_DWORD *)(v14 + 76) = v15 + a3;
    synthstream_loc_StreamImplDump(v14, *(_QWORD *)(v14 + 96) + v17, a3);
    v25 = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(v25 + 104) - v22 >= *(_DWORD *)(*(_QWORD *)v25 + 40))
    {
      *(_DWORD *)(v25 + 104) = v22;
      v26 = *(_QWORD *)(v25 + 96);
      if (v22)
      {
        v27 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(v25 + 8) + 8), v26, v22 + 1);
        v25 = *(_QWORD *)(a1 + 8);
        if (!v27)
          goto LABEL_29;
      }
      else
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)(v25 + 8) + 8), v26);
        v27 = 0;
        v25 = *(_QWORD *)(a1 + 8);
      }
      *(_QWORD *)(v25 + 96) = v27;
    }
LABEL_29:
    synthstream_loc_StreamImplRecoverExcessBuffer(v25, 0);
    goto LABEL_6;
  }
  return v8;
}

uint64_t synthstream_WriteCopy(uint64_t a1, int a2, uint64_t a3, int a4, unsigned int a5, unsigned int *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v27;
  char *v28;

  v12 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v12 & 0x80000000) == 0)
  {
    v16 = 2297438215;
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    log_OutText(*(_QWORD *)(v17 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM WriteCopy : Begin (%u, %p, %p, %lu bytes)", v13, v14, v15, *(unsigned __int16 *)(a1 + 4));
    if (a5 && a6)
    {
      if ((*(_DWORD *)a1 - 1) < 2)
      {
        v28 = 0;
        v27 = 0;
        *a6 = 0;
        v16 = synthstream_ReadDirectStart(a3, a4, &v28, &v27);
        if ((v16 & 0x80000000) == 0 && v27)
        {
          if (v27 < a5)
            a5 = v27;
          v25 = synthstream_Write(a1, a2, v28, a5);
          if ((v25 & 0x80000000) != 0)
          {
            v16 = v25;
            a5 = 0;
          }
          else
          {
            v16 = 0;
            *a6 = a5;
          }
          synthstream_ReadDirectEnd(a3, a4, a5);
        }
        goto LABEL_18;
      }
      log_OutPublic(*(_QWORD *)(v17 + 32), (uint64_t)"SYNTHSTREAM", 22008, "%s%s%s%u%s%s", v18, v19, v20, v21, "function");
    }
    else
    {
      log_OutPublic(*(_QWORD *)(v17 + 32), (uint64_t)"SYNTHSTREAM", 22006, "%s%s%s%u%s%s%s%u%s%p", v18, v19, v20, v21, "function");
      if (!a6)
        return v16;
    }
    *a6 = 0;
LABEL_18:
    log_OutText(*(_QWORD *)(v17 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM WriteCopy : End (%x, %lu bytes)", v22, v23, v24, v16);
    return v16;
  }
  return v12;
}

uint64_t synthstream_GetPosition(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;

  v8 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v8 & 0x80000000) == 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM GetPosition : Begin (%u, %p)", v5, v6, v7, *(unsigned __int16 *)(a1 + 4));
    if (a3)
    {
      if (*(_DWORD *)a1)
        v14 = (_DWORD *)(*(_QWORD *)(a1 + 8) + 76);
      else
        v14 = (_DWORD *)(a1 + 16);
      *a3 = *v14;
      log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM GetPosition : End (%x, %lu)", v11, v12, v13, v8);
    }
    else
    {
      log_OutPublic(*(_QWORD *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 22006, "%s%s%s%u%s%s%s%p", v10, v11, v12, v13, "function");
      return 2297438215;
    }
  }
  return v8;
}

uint64_t synthstream_GetRemaining(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v10 & 0x80000000) == 0)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    log_OutText(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM GetRemaining : Begin (%u, %p)", v7, v8, v9, *(unsigned __int16 *)(a1 + 4));
    if (a3)
    {
      if (!*(_DWORD *)a1)
      {
        v16 = *(_QWORD *)(a1 + 8);
        *a3 = *(_DWORD *)(v16 + 76) - *(_DWORD *)(a1 + 16);
        if (a4)
          *a4 = *(_DWORD *)(v16 + 108);
LABEL_12:
        log_OutText(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM GetRemaining : End (%x, %lu)", v13, v14, v15, v10);
        return v10;
      }
      log_OutPublic(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22009, "%s%s%s%u%s%s", v12, v13, v14, v15, "function");
      *a3 = 0;
      if (a4)
        goto LABEL_5;
    }
    else
    {
      log_OutPublic(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22006, "%s%s%s%u%s%s%s%p", v12, v13, v14, v15, "function");
      if (a4)
LABEL_5:
        *a4 = 1;
    }
    v10 = 2297438215;
    if (!a3)
      return v10;
    goto LABEL_12;
  }
  return v10;
}

__int128 *synthstream_GetMarkerTIElem()
{
  return &IElemMarkerT;
}

uint64_t synthstream_Reset(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int Str;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int ElemAt;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  const char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v28 = 0;
  v29 = 0;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v4 = synthstream_loc_BeginFunction(a1, a2, &v28, &v29);
  if ((v4 & 0x80000000) != 0)
    return v4;
  log_OutText(*(_QWORD *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM Reset : Begin (%u)", v5, v6, v7, a3);
  Str = paramc_ParamGetStr(*(_QWORD *)(v28 + 40), (uint64_t)"clcpppipelinemode", &v26);
  v9 = ssftmap_IteratorOpen(*(_QWORD *)(v29 + 24), 0, 1, (uint64_t)&v27);
  LODWORD(v13) = v9;
  if (Str < 0)
  {
    if ((v9 & 0x80000000) == 0)
    {
      v23 = 0;
      v24 = 0;
      while ((ssftmap_IteratorNext(v27, &v24, &v23) & 0x80000000) == 0)
      {
        if (*(_WORD *)(v23 + 42) == 1)
        {
          v20 = *(unsigned __int16 *)(v23 + 40);
          if (v20 >= a3)
            v21 = "Clear";
          else
            v21 = "Keep";
          log_OutText(*(_QWORD *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 3, 0, (uint64_t)"%s stream %s %u", v17, v18, v19, (uint64_t)v21);
          if (v20 >= a3)
            ssftmap_IteratorRemove(v27);
        }
        else
        {
          log_OutText(*(_QWORD *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 3, 0, (uint64_t)"%s stream %s %u", v17, v18, v19, (uint64_t)"Keep");
        }
      }
      goto LABEL_21;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    v23 = 0;
    v24 = 0;
    while ((ssftmap_IteratorNext(v27, &v24, &v23) & 0x80000000) == 0)
    {
      v14 = v23;
      *(_QWORD *)(v23 + 84) = 0;
      *(_QWORD *)(v14 + 76) = 0;
      if (vector_GetElemAt(*(_QWORD *)(v14 + 24), 0, &v25) == 1)
      {
        v15 = 1;
        do
        {
          *(_DWORD *)(*(_QWORD *)v25 + 16) = 0;
          ElemAt = vector_GetElemAt(*(_QWORD *)(v23 + 24), v15++, &v25);
        }
        while (ElemAt == 1);
      }
    }
LABEL_21:
    ssftmap_IteratorClose((uint64_t)v27);
  }
  if ((v13 & 0x1FFF) == 0x14)
    v13 = 0;
  else
    v13 = v13;
  log_OutText(*(_QWORD *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM Reset : End (%x)", v10, v11, v12, v13);
  return v13;
}

__int128 *synthstream_GetIntMarkerTIElem()
{
  return &IElemIntMarkerT;
}

uint64_t synthstream_SetRulRes(uint64_t a1, int a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;

  v7 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v7 & 0x80000000) == 0)
  {
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(v8 + 8);
    if (a4)
    {
      v10 = 0;
      v11 = a4;
      v12 = a3;
      do
      {
        v13 = *v12++;
        if ((v13 - 1) < 0x1F)
          ++v10;
        --v11;
      }
      while (v11);
      v14 = 4 * v10;
    }
    else
    {
      v14 = 0;
    }
    v15 = *(_QWORD *)(v8 + 112);
    if (v15)
    {
      heap_Free(*(_QWORD **)(v9 + 8), v15);
      v16 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(v16 + 112) = 0;
      v9 = *(_QWORD *)(v16 + 8);
    }
    v17 = (char *)heap_Alloc(*(_QWORD *)(v9 + 8), a4 + v14 + 1);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 112) = v17;
    if (v17)
      v18 = v7;
    else
      v18 = 2297438218;
    if (v17)
      v19 = a4 == 0;
    else
      v19 = 1;
    if (v19)
    {
      return v18;
    }
    else
    {
      v20 = a4;
      do
      {
        v22 = *a3++;
        v21 = v22;
        if ((v22 - 1) > 0x1E)
        {
          *v17 = v21;
          v23 = 1;
        }
        else
        {
          switch(v21)
          {
            case 7:
              strcpy(v17, "\\a");
              goto LABEL_32;
            case 8:
              strcpy(v17, "\\b");
              goto LABEL_32;
            case 9:
              strcpy(v17, "\\t");
              goto LABEL_32;
            case 10:
              strcpy(v17, "\\n");
              goto LABEL_32;
            case 11:
              strcpy(v17, "\\v");
              goto LABEL_32;
            case 12:
              strcpy(v17, "\\f");
              goto LABEL_32;
            case 13:
              strcpy(v17, "\\r");
LABEL_32:
              v23 = 2;
              break;
            default:
              if (v21 == 27)
                strcpy(v17, "<ESC>");
              else
                strcpy(v17, "<SPC>");
              v23 = 5;
              break;
          }
        }
        v17 += v23;
        --v20;
      }
      while (v20);
    }
  }
  return v7;
}

void *synthstream_GetGeeneMarkerTIElem()
{
  return &IElemGeeneWordT;
}

uint64_t synthstream_loc_ElemCopyMapKey(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  v3 = 2297438215;
  if (a1 && a2 && a3)
  {
    v7 = heap_Calloc(a2, 1, 16);
    if (v7)
    {
      v8 = v7;
      *(_WORD *)(v7 + 8) = *(_WORD *)(a1 + 8);
      v3 = ssftmap_ElemCopyString(*(const char **)a1, (uint64_t)a2, (char **)v7);
      if ((v3 & 0x80000000) != 0)
        heap_Free(a2, v8);
      else
        *a3 = v8;
    }
    else
    {
      return 2297438218;
    }
  }
  return v3;
}

uint64_t *synthstream_loc_ElemFreeMapKey(uint64_t *result, _QWORD *a2)
{
  uint64_t v3;

  if (result)
  {
    v3 = (uint64_t)result;
    if (*result)
      heap_Free(a2, *result);
    return heap_Free(a2, v3);
  }
  return result;
}

uint64_t synthstream_loc_ElemCompareKeysMapKey(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  _BOOL4 v10;

  if (a1)
  {
    v4 = *(const char **)a1;
    if (*(_QWORD *)a1)
    {
      if (!a2)
        return 1;
      v5 = *(const char **)a2;
      if (!*(_QWORD *)a2)
        return 1;
LABEL_13:
      result = strcmp(v4, v5);
      if (!(_DWORD)result)
      {
        v7 = *(unsigned __int16 *)(a1 + 8);
        v8 = *(unsigned __int16 *)(a2 + 8);
        v9 = v7 >= v8;
        v10 = v7 > v8;
        if (v9)
          return v10;
        else
          return 0xFFFFFFFFLL;
      }
      return result;
    }
  }
  if (!a2)
    return 0;
  v5 = *(const char **)a2;
  if (*(_QWORD *)a2)
    result = 0xFFFFFFFFLL;
  else
    result = 0;
  if (a1 && v5)
  {
    v4 = *(const char **)a1;
    if (!*(_QWORD *)a1)
      return 0xFFFFFFFFLL;
    goto LABEL_13;
  }
  return result;
}

uint64_t synthstream_loc_ElemCopyStreamImpl(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;

  result = 2297438215;
  if (a1 && a2)
  {
    if (a3)
    {
      result = 0;
      ++*(_WORD *)(a1 + 42);
      *a3 = a1;
    }
  }
  return result;
}

_QWORD *synthstream_loc_ElemReleaseStreamImpl(_QWORD *result)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD **v25;
  _BYTE *v26;
  char v27;
  _BYTE v28[128];
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = (uint64_t)result;
    v2 = *((unsigned __int16 *)result + 21);
    if (v2 < 2)
    {
      v3 = result[1];
      if (*((_BYTE *)result + 74))
      {
        v25 = 0;
        v26 = 0;
        v4 = (char *)result[4];
        v27 = 0;
        __strcpy_chk();
        if (!strcmp(v4, "application/synthesis+ssml")
          || !strcmp(v4, "text/html")
          || !strcmp(v4, "text/email")
          || !strcmp(v4, "text/xml"))
        {
          if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 40), (uint64_t)"ssmldocumentencoding", &v26) & 0x80000000) == 0
            && v26
            && *v26)
          {
            __strcat_chk();
            __strcat_chk();
          }
        }
        else if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 40), (uint64_t)"inputmimetype", &v26) & 0x80000000) != 0
               || !v26
               || !*v26)
        {
          v26 = strstr(v4, ";charset=");
          if (v26)
          {
            __strcpy_chk();
            v28[v26 - v4] = 0;
          }
        }
        if ((ssftstring_ObjOpen(*(_QWORD **)(*(_QWORD *)(v1 + 8) + 8), &v25) & 0x80000000) == 0)
        {
          log_OutBinary(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 32), (uint64_t)"SYNTHSTREAM", 0, 0, (uint64_t)"input text", (uint64_t)v29, *(_QWORD *)(v1 + 96), *(_DWORD *)(v1 + 76), (uint64_t)v25);
          v26 = (_BYTE *)ssftstring_CStr((uint64_t)v25);
          v10 = *(uint64_t ***)(*(_QWORD *)(v1 + 8) + 32);
          if (v26)
          {
            log_OutEvent(v10, 17, "%s%s%s%s%s%u", v5, v6, v7, v8, v9, "MIME");
            __strcpy_chk();
          }
          else
          {
            log_OutEvent(v10, 17, "%s%s%s%u", v5, v6, v7, v8, v9, "MIME");
          }
          ssftstring_ObjClose(v25);
          if (v27)
          {
            if (*(_QWORD *)(v1 + 112))
              log_OutEvent(*(uint64_t ***)(*(_QWORD *)(v1 + 8) + 32), 20, "%s%s%s%s", v11, v12, v13, v14, v15, "TXID");
          }
        }
      }
      v16 = *(_QWORD *)(v1 + 32);
      if (v16)
        heap_Free(*(_QWORD **)(v3 + 8), v16);
      v17 = *(_QWORD *)(v1 + 112);
      if (v17)
      {
        heap_Free(*(_QWORD **)(v3 + 8), v17);
        *(_QWORD *)(v1 + 112) = 0;
      }
      v18 = *(_QWORD *)(v1 + 24);
      if (v18)
        vector_ObjClose(v18);
      v19 = *(_QWORD *)(v1 + 96);
      if (v19)
      {
        if (*(_QWORD *)(v1 + 64))
        {
          v20 = *(_DWORD *)(v1 + 88);
          v21 = *(_DWORD *)(v1 + 84) - v20;
          if (v21 < *(_DWORD *)(v1 + 76) - v20)
          {
            v22 = v19 + v21;
            do
            {
              (*(void (**)(unint64_t, _QWORD))(v1 + 64))(v22, *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8));
              v23 = *(unsigned __int16 *)(v1 + 48);
              v24 = *(_DWORD *)(v1 + 88);
              *(_DWORD *)(v1 + 84) += v23;
              v22 += v23;
              v19 = *(_QWORD *)(v1 + 96);
            }
            while (v22 < v19 + (unint64_t)(*(_DWORD *)(v1 + 76) - v24));
          }
        }
        heap_Free(*(_QWORD **)(v3 + 8), v19);
      }
      return heap_Free(*(_QWORD **)(v3 + 8), v1);
    }
    else
    {
      *((_WORD *)result + 21) = v2 - 1;
    }
  }
  return result;
}

uint64_t synthstream_loc_BeginFunction(uint64_t a1, int a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t result;

  *a4 = 0;
  result = safeh_HandleCheck(a1, a2, 18397, 48);
  if ((result & 0x80000000) == 0)
  {
    result = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), a3);
    if ((result & 0x80000000) == 0)
      *a4 = a1;
  }
  return result;
}

uint64_t synthstream_loc_StreamImplDump(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  char v13[64];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  result = log_GetLogLevel(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32));
  if (result >= 6)
  {
    if (a2 && a3)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
      v11 = *(unsigned __int16 *)(a1 + 44);
      if (*(_BYTE *)(a1 + 73))
      {
        log_OutText(v10, (uint64_t)"SYNTHSTREAM", 6, 0, (uint64_t)"writerID=%u, szContentType=%s, pipelinePos=%u, refCount=%u, writePos=%u, bufPos=%u, eos=%d, writing %u bytes [%.*s]", v7, v8, v9, v11);
        LH_utoa(*(unsigned __int16 *)(a1 + 44), v13, 0xAu);
        return log_OutBinary(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), (uint64_t)"SYNTHSTREAM", 99, 0, (uint64_t)v13, *(_QWORD *)(a1 + 32), a2, a3, 0);
      }
      v12 = "writerID=%u, szContentType=%s, pipelinePos=%u, refCount=%u, writePos=%u, bufPos=%u, eos=%d, writing %u bytes";
    }
    else
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
      v11 = *(unsigned __int16 *)(a1 + 44);
      v12 = "writerID=%u, szContentType=%s, pipelinePos=%u, refCount=%u, writePos=%u, bufPos=%u, eos=%d";
    }
    return log_OutText(v10, (uint64_t)"SYNTHSTREAM", 6, 0, (uint64_t)v12, v7, v8, v9, v11);
  }
  return result;
}

uint64_t synthstream_loc_StreamImplRecoverExcessBuffer(uint64_t result, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v2 = *(_DWORD *)(result + 76);
  v17 = 0;
  if (!*(_QWORD *)(result + 96))
    return result;
  v3 = result;
  if (*(_BYTE *)(result + 72))
    return result;
  result = vector_GetElemAt(*(_QWORD *)(result + 24), 0, &v17);
  if ((_DWORD)result == 1)
  {
    v5 = 1;
    do
    {
      if (*(_DWORD *)(*(_QWORD *)v17 + 16) < v2)
        v2 = *(_DWORD *)(*(_QWORD *)v17 + 16);
      result = vector_GetElemAt(*(_QWORD *)(v3 + 24), v5++, &v17);
    }
    while ((_DWORD)result == 1);
  }
  v6 = *(_DWORD *)(v3 + 88);
  v7 = v2 - v6;
  v8 = *(unsigned __int16 *)(v3 + 48);
  if (v8 >= 2)
    v7 = v7 / v8 * v8;
  if (*(_QWORD *)(v3 + 64))
  {
    if (v7)
    {
      v9 = *(_DWORD *)(v3 + 84) - v6;
      if (v9 < v7)
      {
        v10 = *(_QWORD *)(v3 + 96) + v9;
        do
        {
          result = (*(uint64_t (**)(unint64_t, _QWORD))(v3 + 64))(v10, *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8));
          v11 = *(unsigned __int16 *)(v3 + 48);
          *(_DWORD *)(v3 + 84) += v11;
          v10 += v11;
        }
        while (v10 < *(_QWORD *)(v3 + 96) + (unint64_t)v7);
      }
    }
  }
  if (a2)
  {
    if (v7 >= a2)
      goto LABEL_21;
    v12 = *(_DWORD *)(*(_QWORD *)v3 + 36);
  }
  else
  {
    v12 = *(_DWORD *)(*(_QWORD *)v3 + 40);
  }
  if (v7 < v12)
    return result;
LABEL_21:
  v13 = *(_DWORD *)(v3 + 76);
  if (v13 != v2)
    result = (uint64_t)memmove(*(void **)(v3 + 96), (const void *)(*(_QWORD *)(v3 + 96) + v7), v13 - v2);
  *(_DWORD *)(v3 + 88) += v7;
  if (!a2)
  {
    v14 = *(_DWORD *)(v3 + 104);
    if (v14 == v7)
    {
      v15 = *(_QWORD *)(v3 + 96);
    }
    else
    {
      v15 = *(_QWORD *)(v3 + 96);
      if (v2 != *(_DWORD *)(v3 + 76))
      {
        result = heap_Realloc(*(uint64_t **)(*(_QWORD *)(v3 + 8) + 8), v15, v14 - v7);
        if (!result)
          return result;
        *(_QWORD *)(v3 + 96) = result;
        v16 = *(_DWORD *)(v3 + 104) - v7;
LABEL_28:
        *(_DWORD *)(v3 + 104) = v16;
        return result;
      }
    }
    result = (uint64_t)heap_Free(*(_QWORD **)(*(_QWORD *)(v3 + 8) + 8), v15);
    v16 = 0;
    *(_QWORD *)(v3 + 96) = 0;
    goto LABEL_28;
  }
  return result;
}

uint64_t synthstream_loc_StreamImplGrowBuf(uint64_t a1, int a2, _DWORD *a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;

  if (!a3)
  {
    v6 = *(_DWORD *)(a1 + 76) - *(_DWORD *)(a1 + 88) + a2;
    v7 = *(_DWORD *)(a1 + 104);
    if (v6 > v7)
      goto LABEL_7;
    return 0;
  }
  *a3 = 1;
  v6 = *(_DWORD *)(a1 + 76) - *(_DWORD *)(a1 + 88) + a2;
  v7 = *(_DWORD *)(a1 + 104);
  if (v6 <= v7)
    return 0;
  if (!*(_BYTE *)(a1 + 72))
  {
    result = vector_GetSize(*(_QWORD *)(a1 + 24));
    if (!(_DWORD)result)
    {
      *a3 = 0;
      return result;
    }
    v7 = *(_DWORD *)(a1 + 104);
  }
LABEL_7:
  synthstream_loc_StreamImplRecoverExcessBuffer(a1, v6 - v7);
  v9 = *(_DWORD *)(a1 + 76) - *(_DWORD *)(a1 + 88) + a2;
  if (v9 <= *(_DWORD *)(a1 + 104))
    return 0;
  if (v9 <= *(_DWORD *)(*(_QWORD *)a1 + 32))
    v10 = *(_DWORD *)(*(_QWORD *)a1 + 32);
  else
    v10 = *(_DWORD *)(a1 + 76) - *(_DWORD *)(a1 + 88) + a2;
  v11 = *(_QWORD *)(a1 + 96);
  v12 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 8);
  v13 = (v10 + 1);
  if (v11)
    v14 = heap_Realloc(v12, v11, v13);
  else
    v14 = heap_Calloc(v12, 1, v13);
  v19 = v14;
  if (v14)
  {
    result = 0;
    *(_QWORD *)(a1 + 96) = v19;
    *(_DWORD *)(a1 + 104) = v10;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), (uint64_t)"SYNTHSTREAM", 22000, 0, v15, v16, v17, v18, v20);
    return 2297438218;
  }
  return result;
}

uint64_t DecoAddr(_QWORD *a1, int a2)
{
  unsigned int *v3;
  uint64_t v4;
  int v5;
  char v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v3 = (unsigned int *)a1[2];
  v4 = *(_QWORD *)v3;
  v5 = *(unsigned __int8 *)(*(_QWORD *)v3 + 19);
  v6 = v5 * a2;
  v7 = (v5 * a2) >> 3;
  v8 = a1[6];
  if (v8)
  {
    a1[1] = v8 + v3[34] + v7;
  }
  else
  {
    v15 = *(unsigned __int16 *)(v4 + 54);
    v16 = *(_DWORD *)(v4 + 68);
    if (v7 + v15 <= v16)
      v17 = v15;
    else
      v17 = v16 - v7;
    v18 = brk_DataMap(a1[3], a1[4], v3[34] + v7, v17, (uint64_t)(a1 + 1));
    if ((v18 & 0x1FFF) == 0xA)
      return 4294967294;
    if (v18)
      return 0xFFFFFFFFLL;
  }
  v9 = (v6 & 7) + v5;
  v10 = (unsigned __int8 *)a1[1];
  v11 = *v10;
  if (v9 < 9)
  {
    v19 = (v11 >> (8 - v9)) & (0xFFFFFFFF >> -(char)v5);
  }
  else
  {
    v12 = ((0xFFu >> (v6 & 7)) & v11) << (v9 - 8);
    if (v9 < 0x11)
    {
      v14 = 16;
      v13 = 1;
    }
    else
    {
      LOBYTE(v13) = 1;
      v14 = 16;
      do
      {
        v12 += v10[v13] << (v9 - v14);
        LOBYTE(v13) = v13 + 1;
        v14 = 8 * v13 + 8;
      }
      while (v9 > (v14 & 0xF8u));
      v13 = v13;
    }
    v19 = (v10[v13] >> (v14 - v9)) + v12;
  }
  if (!a1[6])
    brk_DataUnmap(a1[3], a1[4], (uint64_t)v10);
  return v19;
}

uint64_t WordToHashOpt(uint64_t a1, uint64_t a2, unsigned int a3, __int16 a4, int a5, uint64_t a6)
{
  unsigned int v12;
  unsigned __int16 v13;
  uint64_t v14;
  unsigned __int16 v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t result;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  unsigned __int16 v35;
  unsigned int v36;

  v34 = 0;
  v12 = *(_DWORD *)a6;
  if (*(_DWORD *)a6)
  {
    v13 = 0;
    goto LABEL_3;
  }
  v23 = *(_QWORD **)(a1 + 16);
  v24 = v23[1];
  v25 = *(unsigned __int8 *)(a2 + a3);
  if (a5)
  {
    LODWORD(v25) = depes_tolower(v25);
    v23 = *(_QWORD **)(a1 + 16);
  }
  v26 = *v23;
  v27 = *(unsigned __int8 *)(v24 - *(unsigned __int8 *)(*v23 + 4) + v25);
  v28 = *(unsigned __int16 *)(*v23 + 46);
  if (*(_WORD *)(*v23 + 46))
  {
    v29 = 0;
    v30 = 0;
    while (v27 > *(unsigned __int8 *)(v23[3] + v29))
    {
      v30 += *(_DWORD *)(v23[5] + 4 * v29++);
      if (v28 == v29)
        return 0xFFFFFFFFLL;
    }
    LODWORD(v29) = (unsigned __int16)v29;
  }
  else
  {
    v30 = 0;
    LODWORD(v29) = 0;
  }
  v34 = v30;
  if ((_DWORD)v29 != (_DWORD)v28 && v27 == *(unsigned __int8 *)(v23[3] + v29))
  {
    *(_DWORD *)(a6 + 4) = v30;
    v12 = *(_DWORD *)(v23[4] + 4 * v29);
    if (v12 <= *(unsigned __int8 *)(v26 + 18))
    {
      v32 = *(_DWORD *)(v26 + 56);
      *(_DWORD *)a1 = v32;
      v33 = *(unsigned __int8 *)(v26 + 17);
      *(_BYTE *)(a1 + 4) = v33;
      v12 = v33 + 8 * v32;
    }
    *(_DWORD *)a6 = v12;
    v13 = 1;
LABEL_3:
    v14 = a3;
    v15 = a4 - a3 + 1;
    while (v13 != v15)
    {
      v16 = *(_QWORD **)(a1 + 16);
      v17 = v16[1];
      v18 = *(unsigned __int8 *)(a2 + v14 + v13);
      if (a5)
      {
        v19 = depes_tolower(v18) - (unint64_t)*(unsigned __int8 *)(**(_QWORD **)(a1 + 16) + 4);
        v12 = *(_DWORD *)a6;
      }
      else
      {
        v19 = v18 - *(unsigned __int8 *)(*v16 + 4);
      }
      v20 = *(unsigned __int8 *)(v17 + v19);
      if ((SearchEntry(a1, v12, v20, (unsigned __int16 *)(a6 + 8), &v34, (unsigned int *)a6) & 0x1FFF) == 0xA)
        return 4294967294;
      v12 = *(_DWORD *)a6;
      if (!*(_DWORD *)a6)
      {
        result = 0xFFFFFFFFLL;
        *(_DWORD *)(a6 + 4) = -1;
        return result;
      }
      v21 = *(_DWORD *)(a6 + 4) + v34;
      *(_DWORD *)(a6 + 4) = v21;
      ++v13;
      if (v20 == *(unsigned __int8 *)(**(_QWORD **)(a1 + 16) + 16))
      {
        if (v12 == 1)
          return v21;
        else
          return 0xFFFFFFFFLL;
      }
    }
    v36 = 0;
    v31 = *(unsigned __int8 *)(**(_QWORD **)(a1 + 16) + 16);
    v35 = *(_WORD *)(a6 + 8);
    if ((SearchEntry(a1, v12, v31, &v35, &v34, &v36) & 0x1FFF) == 0xA)
      return 4294967294;
    if (v36 == 1)
      return (v34 + *(_DWORD *)(a6 + 4));
  }
  return 0xFFFFFFFFLL;
}

uint64_t SearchEntry(uint64_t a1, unsigned int a2, unsigned int a3, unsigned __int16 *a4, _DWORD *a5, unsigned int *a6)
{
  unsigned int *v6;
  unsigned int SourceAddress;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  unsigned int v18;
  unsigned __int16 v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int16 v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t result;
  _BOOL4 v31;
  unsigned __int16 v32;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  unsigned int *v46;

  v6 = a6;
  SourceAddress = a2;
  v12 = a2 >> 3;
  v13 = *(_QWORD *)(a1 + 48);
  if (v13)
  {
    v46 = a6;
    v14 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v13 + *(unsigned int *)(v14 + 128) + v12;
  }
  else
  {
    result = brk_DataMap(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_DWORD *)(*(_QWORD *)(a1 + 16) + 128) + v12, *(unsigned __int16 *)(**(_QWORD **)(a1 + 16) + 50), a1 + 8);
    if ((_DWORD)result)
    {
      SourceAddress = 0;
      goto LABEL_72;
    }
    v46 = v6;
    v14 = *(_QWORD *)(a1 + 16);
  }
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = SourceAddress & 7;
  *a5 = 0;
  v15 = *(_QWORD *)(v14 + 88);
  v16 = *(unsigned __int16 *)(v15
                            + 2
                            * HuffDecode((unsigned int *)a1, *(_QWORD *)(v14 + 48), *(unsigned __int16 *)(*(_QWORD *)v14 + 26)));
  v17 = *(uint64_t **)(a1 + 16);
  v18 = *(unsigned __int16 *)(*v17 + 24);
  v19 = v16 - v18;
  if (v16 > v18)
  {
    v20 = 0;
    do
    {
      v21 = *(uint64_t **)(a1 + 16);
      v22 = v21[12];
      v23 = HuffDecode((unsigned int *)a1, v21[7], *(unsigned __int16 *)(*v21 + 28));
      ++v20;
      v24 = *a4;
    }
    while (v24 >= (unsigned __int16)v20);
    if (*(unsigned __int8 *)(v22 + v23) == a3)
    {
      *a5 = 0;
      v25 = v24 + 1;
      *a4 = v25;
      if (v25 < v19)
      {
        v26 = *(_QWORD *)(a1 + 48);
        goto LABEL_44;
      }
      *a4 = 0;
      if (*(unsigned __int8 *)(**(_QWORD **)(a1 + 16) + 16) == a3)
      {
LABEL_43:
        v26 = *(_QWORD *)(a1 + 48);
        SourceAddress = 1;
LABEL_44:
        v6 = v46;
        if (!v26)
          goto LABEL_70;
LABEL_71:
        result = 0;
        goto LABEL_72;
      }
      v43 = DecodeSourceLink(a1);
      v6 = v46;
      if (!v43)
      {
        SourceAddress = GetSourceAddress((unsigned int *)a1);
        goto LABEL_69;
      }
      SourceAddress = v43;
      v44 = **(_QWORD **)(a1 + 16);
      if (v43 > *(unsigned __int8 *)(v44 + 18))
        goto LABEL_69;
      v40 = *(unsigned __int8 *)(a1 + 4);
      v45 = *(unsigned __int8 *)(v44 + 15);
      if ((v45 & v40) != 0)
      {
        do
          ++v40;
        while ((v45 & v40) != 0);
        *(_BYTE *)(a1 + 4) = v40;
      }
LABEL_59:
      v42 = *(_DWORD *)a1;
      if (v40 == 8)
      {
        LOBYTE(v40) = 0;
        *(_BYTE *)(a1 + 4) = 0;
        *(_DWORD *)a1 = ++v42;
      }
      SourceAddress = 8 * (v42 + v12) + v40;
LABEL_69:
      if (*(_QWORD *)(a1 + 48))
        goto LABEL_71;
LABEL_70:
      brk_DataUnmap(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 8));
      goto LABEL_71;
    }
    goto LABEL_39;
  }
  v27 = v17[12];
  v28 = *(unsigned __int8 *)(v27 + HuffDecode((unsigned int *)a1, v17[7], *(unsigned __int16 *)(*v17 + 28)));
  if (v28 == *(unsigned __int8 *)(**(_QWORD **)(a1 + 16) + 16))
  {
    SourceAddress = 0;
    if (v28 == a3)
      goto LABEL_19;
    v29 = 1;
    goto LABEL_18;
  }
  SourceAddress = DecodeSourceLink(a1);
  if (!SourceAddress)
    SourceAddress = GetSourceAddress((unsigned int *)a1);
  if (v28 != a3)
  {
    v29 = DecodeSourceHash(a1);
LABEL_18:
    *a5 += v29;
  }
LABEL_19:
  v31 = v16 > 1;
  v32 = 1;
  if (v28 < a3 && v16 >= 2)
  {
    do
    {
      v34 = *(uint64_t **)(a1 + 16);
      v35 = v34[13];
      LOBYTE(v28) = *(_BYTE *)(v35
                             + HuffDecode((unsigned int *)a1, v34[8], *(unsigned __int16 *)(*v34 + 30)))
                  + v28;
      if (*(unsigned __int8 *)(**(_QWORD **)(a1 + 16) + 16) == v28)
      {
        if (a3 == v28)
          goto LABEL_32;
        v36 = 1;
      }
      else
      {
        SourceAddress = DecodeSourceLink(a1);
        if (!SourceAddress)
          SourceAddress = GetSourceAddress((unsigned int *)a1);
        if (a3 == v28)
          goto LABEL_32;
        v36 = DecodeSourceHash(a1);
      }
      *a5 += v36;
LABEL_32:
      v31 = v16 > ++v32;
    }
    while (a3 > v28 && v16 > v32);
  }
  if (a3 != v28)
  {
LABEL_39:
    SourceAddress = 0;
    result = 0;
    v6 = v46;
    if (!*(_QWORD *)(a1 + 48))
      goto LABEL_70;
    goto LABEL_72;
  }
  v37 = **(_QWORD **)(a1 + 16);
  if (*(unsigned __int8 *)(v37 + 16) == a3)
    goto LABEL_43;
  if (SourceAddress <= *(unsigned __int8 *)(v37 + 18))
  {
    if (v31)
      DecodeSourceHash(a1);
    while (v16 > v32)
    {
      v38 = *(uint64_t **)(a1 + 16);
      v39 = v38[13];
      LOBYTE(a3) = *(_BYTE *)(v39
                            + HuffDecode((unsigned int *)a1, v38[8], *(unsigned __int16 *)(*v38 + 30)))
                 + a3;
      if (*(unsigned __int8 *)(**(_QWORD **)(a1 + 16) + 16) != a3)
      {
        if (!DecodeSourceLink(a1))
          GetSourceAddress((unsigned int *)a1);
        if (v32 < (unsigned __int16)(v16 - 1))
          DecodeSourceHash(a1);
      }
      ++v32;
    }
    v40 = *(unsigned __int8 *)(a1 + 4);
    v41 = *(unsigned __int8 *)(**(_QWORD **)(a1 + 16) + 15);
    if ((v41 & v40) != 0)
    {
      do
        ++v40;
      while ((v41 & v40) != 0);
      *(_BYTE *)(a1 + 4) = v40;
    }
    v6 = v46;
    goto LABEL_59;
  }
  if (!*(_QWORD *)(a1 + 48))
  {
    v6 = v46;
    goto LABEL_70;
  }
  result = 0;
  v6 = v46;
LABEL_72:
  *v6 = SourceAddress;
  return result;
}

uint64_t open_DctRom(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  _DWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v11;

  v11 = 0;
  v5 = (_DWORD *)a1[6];
  if (v5)
  {
    v11 = (_DWORD *)a1[6];
  }
  else
  {
    v8 = brk_DataOpenEx(a1[3], a2, 1, (uint64_t)(a1 + 4));
    if ((_DWORD)v8)
    {
      v6 = v8;
      a1[4] = 0;
      return v6;
    }
    v9 = brk_DataMap(a1[3], a1[4], 0, 40, (uint64_t)&v11);
    if ((_DWORD)v9)
    {
      v6 = v9;
      brk_DataClose(a1[3], a1[4]);
      a1[4] = 0;
      return v6;
    }
    v5 = v11;
  }
  v6 = 2306875417;
  if (*v5 == 65279
    && !LH_strnicmp((uint64_t)(v5 + 1), (uint64_t)"SCANSOFT", 8uLL)
    && !LH_strnicmp((uint64_t)(v11 + 3), (uint64_t)"SYS_DCT", 7uLL))
  {
    v7 = v11[5];
    if (!a1[6])
      brk_DataUnmap(a1[3], a1[4], (uint64_t)v11);
    v6 = 0;
    *a3 = v7 - 40;
  }
  return v6;
}

uint64_t close_DctRom(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    brk_DataClose(*(_QWORD *)(a1 + 24), v1);
  return 0;
}

uint64_t query_DctRom(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  unsigned int v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v15;

  v6 = a3;
  v15 = 0;
  *a5 = 0;
  v9 = brk_DataMap(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), 40, a3, (uint64_t)&v15);
  if ((_DWORD)v9)
  {
    v10 = v9;
    brk_DataClose(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
    *(_QWORD *)(a1 + 32) = 0;
  }
  else
  {
    v11 = v15;
    if (v6)
    {
      v12 = 0;
      while (LH_stricmp((char *)(v11 + v12), a2))
      {
        v11 = v15;
        v13 = strlen((const char *)(v15 + v12));
        v12 += v13 + ((~(_BYTE)v13 - (_BYTE)v12) & 3) + 5;
        if (v12 >= v6)
          goto LABEL_9;
      }
      *a5 = 1;
      v11 = v15;
    }
LABEL_9:
    brk_DataUnmap(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v11);
    return 0;
  }
  return v10;
}

uint64_t init_DctRom(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  const char *v36;

  v5 = a3;
  v36 = 0;
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
  {
    v36 = (const char *)(v8 + 40);
  }
  else
  {
    v15 = brk_DataMap(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), 40, a3, (uint64_t)&v36);
    if ((_DWORD)v15)
    {
LABEL_10:
      v14 = v15;
      brk_DataClose(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
      *(_QWORD *)(a1 + 32) = 0;
      return v14;
    }
  }
  if (v5)
  {
    v9 = 0;
    v10 = (char *)v36;
    while (1)
    {
      v11 = LH_stricmp(&v10[v9], a2);
      v10 = (char *)v36;
      v12 = strlen(&v36[v9]);
      v13 = (~(_BYTE)v12 - (_BYTE)v9) & 3;
      if (!v11)
        break;
      v9 += v13 + v12 + 5;
      if (v9 >= v5)
        goto LABEL_7;
    }
    v16 = *(unsigned int *)&v36[(v12 + v9 + v13 + 1) & 0xFFFFFFFC];
    v17 = *(_QWORD *)(a1 + 48);
    if (v17
      || (brk_DataUnmap(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)v36), (v17 = *(_QWORD *)(a1 + 48)) != 0))
    {
      if (v16 > *(_DWORD *)(a1 + 56))
        return 2306875412;
      LODWORD(v18) = *(_DWORD *)(v17 + v16);
      goto LABEL_16;
    }
    v15 = brk_DataMap(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v16, 4, (uint64_t)&v36);
    if (!(_DWORD)v15)
    {
      v17 = *(_QWORD *)(a1 + 48);
      v18 = *(unsigned int *)v36;
      if (!v17)
      {
        brk_DataUnmap(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)v36);
        v14 = brk_DataMap(*(_QWORD *)(a1 + 24), a4, v16, v18, *(_QWORD *)(a1 + 16));
        if ((_DWORD)v14)
          return v14;
        v20 = *(uint64_t **)(a1 + 16);
        v19 = *v20;
        goto LABEL_17;
      }
LABEL_16:
      v19 = v17 + v16;
      v20 = *(uint64_t **)(a1 + 16);
      *v20 = v19;
LABEL_17:
      v14 = 0;
      v21 = v19 + 72 + ((*(unsigned __int8 *)(v19 + 5) - *(unsigned __int8 *)(v19 + 4) + 4) & 0xFFFFFFFC);
      v20[1] = v19 + 72;
      v20[2] = v21;
      v22 = v21 + ((2 * (*(unsigned __int8 *)(v19 + 7) - *(unsigned __int8 *)(v19 + 6)) + 5) & 0xFFFFFFFC);
      LODWORD(v21) = *(unsigned __int16 *)(v19 + 46);
      v23 = v22 + (((_DWORD)v21 + 3) & 0x1FFFC);
      v20[3] = v22;
      v20[4] = v23;
      v24 = v23 + 4 * v21;
      v25 = v24 + 4 * v21;
      v20[5] = v24;
      v20[6] = v25;
      v26 = v25 + 4 * *(unsigned __int16 *)(v19 + 26) + 4;
      v27 = v26 + 4 * *(unsigned __int16 *)(v19 + 28) + 4;
      v20[7] = v26;
      v20[8] = v27;
      v28 = v27 + 4 * *(unsigned __int16 *)(v19 + 30) + 4;
      v29 = v28 + 4 * *(unsigned __int16 *)(v19 + 32) + 4;
      v20[9] = v28;
      v20[10] = v29;
      v30 = v29 + 4 * *(unsigned __int16 *)(v19 + 34) + 4;
      v31 = v30 + ((2 * *(unsigned __int16 *)(v19 + 36) + 3) & 0x3FFFC);
      v20[11] = v30;
      v20[12] = v31;
      v32 = v31 + ((*(unsigned __int16 *)(v19 + 38) + 3) & 0x1FFFC);
      v33 = v32 + ((*(unsigned __int16 *)(v19 + 40) + 3) & 0x1FFFC);
      v20[13] = v32;
      v20[14] = v33;
      v20[15] = v33 + ((2 * *(unsigned __int16 *)(v19 + 42) + 3) & 0x3FFFC);
      LODWORD(v33) = *(_DWORD *)(v19 + 60);
      v34 = *(_DWORD *)(v19 + 64);
      LODWORD(v33) = ((v33 + 3) & 0xFFFFFFFC) + v18 + v16;
      *((_DWORD *)v20 + 32) = v18 + v16;
      *((_DWORD *)v20 + 33) = v33;
      *((_DWORD *)v20 + 34) = ((v34 + 3) & 0xFFFFFFFC) + v33;
      return v14;
    }
    goto LABEL_10;
  }
LABEL_7:
  v14 = 2306875412;
  if (!*(_QWORD *)(a1 + 48))
    brk_DataUnmap(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)v36);
  return v14;
}

uint64_t exit_DctRom(uint64_t a1, uint64_t a2)
{
  if (a2)
    brk_DataUnmap(*(_QWORD *)(a1 + 24), a2, **(_QWORD **)(a1 + 16));
  return 0;
}

uint64_t GetMaxOutLen(uint64_t a1)
{
  return *(unsigned __int16 *)(**(_QWORD **)(a1 + 16) + 48);
}

uint64_t GetFieldSeparator(uint64_t a1)
{
  return *(unsigned __int8 *)(**(_QWORD **)(a1 + 16) + 9);
}

uint64_t set_DctBrk(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

BOOL test_DCT(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;

  if (a3 > a4)
    return a4 >= a3;
  LOWORD(v10) = a3;
  while (1)
  {
    v11 = *(unsigned __int8 *)(a2 + (__int16)v10);
    if (a5)
      LODWORD(v11) = depes_tolower(v11);
    v12 = **(_QWORD **)(a1 + 16);
    if (v11 < *(unsigned __int8 *)(v12 + 4) || v11 > *(unsigned __int8 *)(v12 + 5))
      break;
    v10 = (__int16)(v10 + 1);
    if (v10 > a4)
      return a4 >= a3;
  }
  return 0;
}

uint64_t DctLookup(uint64_t a1, uint64_t a2, unsigned __int16 *a3, __int16 *a4, int a5, _WORD *a6, uint64_t a7)
{
  int v14;
  unsigned int v15;
  uint64_t result;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned __int8 *v23;
  unsigned __int8 **v24;
  unsigned __int8 *v25;
  unsigned __int8 v26;
  __int16 v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned __int8 *v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned __int8 v40;
  uint64_t v42;
  int v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _OWORD v54[3];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  memset(v54, 0, 41);
  if ((unsigned __int16)(*a4 - *a3) > 0x7FFEu
    || *(__int16 *)(**(_QWORD **)(a1 + 16) + 22) <= (__int16)(*a4 - *a3)
    || !test_DCT(a1, a2, (__int16)*a3, *a4, a5))
  {
    return 20;
  }
  v14 = WordToHashOpt(a1, a2, *a3, *a4, a5, a7);
  if (v14 == -2)
    return 10;
  if (v14 < 0)
    return 20;
  v15 = DecoAddr((_QWORD *)a1, v14);
  if (v15 == -2)
    return 10;
  if ((v15 & 0x80000000) != 0)
    return 20;
  v17 = *(_QWORD *)(a1 + 48);
  if (v17)
  {
    v18 = (_BYTE *)(v17 + *(unsigned int *)(*(_QWORD *)(a1 + 16) + 132) + v15);
    *(_QWORD *)(a1 + 8) = v18;
  }
  else
  {
    result = brk_DataMap(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_DWORD *)(*(_QWORD *)(a1 + 16) + 132) + v15, *(unsigned __int16 *)(**(_QWORD **)(a1 + 16) + 52), a1 + 8);
    if ((_DWORD)result)
      return result;
    v18 = *(_BYTE **)(a1 + 8);
  }
  v19 = 0;
  LOWORD(v20) = 0;
  v21 = 0;
  LOBYTE(v22) = *v18;
  v23 = *(unsigned __int8 **)(a1 + 40);
  do
  {
    v23[(__int16)v21++] = v22;
    v24 = *(unsigned __int8 ***)(a1 + 16);
    v23 = *(unsigned __int8 **)(a1 + 40);
    v25 = *v24;
    do
    {
      v20 = (__int16)v20;
      v26 = v24[2][2 * (v23[(__int16)v20] - (unint64_t)v25[6])];
      if (v26)
      {
        v27 = v21 - 1;
        do
        {
          if ((int)v20 < (__int16)(v21 - 1))
          {
            v28 = v27;
            do
            {
              *(_BYTE *)(*(_QWORD *)(a1 + 40) + v28 + 1) = *(_BYTE *)(*(_QWORD *)(a1 + 40) + v28);
              --v28;
            }
            while (v28 > v20);
            v24 = *(unsigned __int8 ***)(a1 + 16);
            v23 = *(unsigned __int8 **)(a1 + 40);
            v25 = *v24;
          }
          ++v21;
          v23[v20 + 1] = v24[2][2 * (v23[v20] - (unint64_t)v25[6]) + 1];
          *(_BYTE *)(*(_QWORD *)(a1 + 40) + v20) = v26;
          v24 = *(unsigned __int8 ***)(a1 + 16);
          v23 = *(unsigned __int8 **)(a1 + 40);
          v25 = *v24;
          v26 = v24[2][2 * (v23[v20] - (unint64_t)(*v24)[6])];
          ++v27;
        }
        while (v26);
      }
      LODWORD(v20) = (__int16)(v20 + 1);
    }
    while ((int)v20 < (__int16)v21);
    ++v19;
    v22 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v19);
    v29 = v25[10];
  }
  while (v22 != v25[8] && (v22 < v29 || v22 > v25[11]));
  v30 = *v23;
  if (v30 >= v29)
  {
    do
    {
      v31 = v30;
      v32 = v25[11];
      if (v30 > v32)
        break;
      v33 = *(_QWORD *)(a1 + 8);
      v34 = v25[8];
      v35 = *(unsigned __int8 *)(v33 + (int)v19);
      if (v35 == v34)
      {
LABEL_34:
        v38 = 1;
      }
      else
      {
        v36 = (unsigned __int8 *)(v33 + (int)v19 + 1);
        while (v35 < v29 || v32 < v35)
        {
          LODWORD(v19) = v19 + 1;
          v37 = *v36++;
          LOBYTE(v35) = v37;
          if (v37 == v34)
            goto LABEL_34;
        }
        v38 = 0;
        LOBYTE(v34) = v35;
      }
      LODWORD(v19) = v19 + v38;
      v39 = v29;
      v40 = v29 - 1;
      if (v34 <= v32 && v34 >= v39)
        v40 = v34;
      if (v40 >= v30)
      {
        LODWORD(v19) = v19 + 1;
      }
      else
      {
        LOWORD(v42) = 0;
        v43 = 0;
        v44 = v24[2];
        v45 = v25[6];
        v19 = (int)v19;
        do
        {
          v46 = (__int16)v43++;
          *((_BYTE *)v54 + v46) = *(_BYTE *)(v33 + v19);
          do
          {
            v42 = (__int16)v42;
            v47 = *((unsigned __int8 *)v54 + (__int16)v42);
            if (v44[2 * (v47 - v45)])
            {
              v48 = v43 - 1;
              do
              {
                if ((int)v42 < (__int16)(v43 - 1))
                {
                  v49 = v48;
                  do
                  {
                    *((_BYTE *)v54 + v49 + 1) = *((_BYTE *)v54 + v49);
                    --v49;
                  }
                  while (v49 > v42);
                  v47 = *((unsigned __int8 *)v54 + v42);
                }
                v50 = &v44[2 * (v47 - v45)];
                *((_BYTE *)v54 + v42 + 1) = v50[1];
                v47 = *v50;
                *((_BYTE *)v54 + v42) = v47;
                ++v43;
                ++v48;
              }
              while (v44[2 * (v47 - v45)]);
            }
            LODWORD(v42) = (__int16)(v42 + 1);
            LOBYTE(v30) = v30 - 1;
          }
          while ((int)v42 < (__int16)v43 && v30 >= v40);
          ++v19;
        }
        while (v30 >= v40);
        v30 = v31 - v40;
        if ((__int16)v21 >= 2)
        {
          v51 = (unsigned __int16)v21 - 1;
          v52 = (__int16)(v21 + v31 - v40) - 1;
          do
            *(_BYTE *)(*(_QWORD *)(a1 + 40) + v52--) = *(_BYTE *)(*(_QWORD *)(a1 + 40) + v51--);
          while (v51);
        }
        if ((v30 & 0x80000000) == 0)
        {
          v53 = 0;
          do
          {
            *(_BYTE *)(*(_QWORD *)(a1 + 40) + (__int16)v53) = *((_BYTE *)v54 + (__int16)v53);
            ++v53;
          }
          while ((int)v30 >= (__int16)v53);
        }
        LOWORD(v21) = v21 + v30;
        LOBYTE(v30) = v40;
      }
      v24 = *(unsigned __int8 ***)(a1 + 16);
      v25 = *v24;
      v29 = (*v24)[10];
    }
    while (v29 <= v30);
  }
  if (!*(_QWORD *)(a1 + 48))
    brk_DataUnmap(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 8));
  result = 0;
  *a6 = v21;
  return result;
}

uint64_t HuffDecode(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned int v7;

  v3 = (__int16 *)(a2 + 4 * a3);
  if (*v3 != -1)
  {
    v4 = *((_QWORD *)a1 + 1);
    a3 = a3;
    v5 = *a1;
    v6 = *(_BYTE *)(v4 + v5);
    v7 = *((unsigned __int8 *)a1 + 4);
    do
    {
      if (!v7)
        v6 = *(_BYTE *)(v4 + v5);
      if (((1 << v7) & v6) == 0)
        v3 = (__int16 *)(a2 + 4 * a3 + 2);
      a3 = (unsigned __int16)*v3;
      if (v7 > 6)
      {
        v7 = 0;
        LODWORD(v5) = v5 + 1;
        *a1 = v5;
      }
      else
      {
        ++v7;
      }
      *((_BYTE *)a1 + 4) = v7;
      v3 = (__int16 *)(a2 + 4 * a3);
    }
    while (*v3 != -1);
  }
  return a3;
}

uint64_t DecodeSourceLink(uint64_t a1)
{
  uint64_t *v2;
  unsigned int v3;
  int v4;
  int v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t result;
  uint64_t v13;

  v2 = *(uint64_t **)(a1 + 16);
  v3 = *(unsigned __int8 *)(*v2 + 12);
  v4 = HuffDecode((unsigned int *)a1, v2[10], *(unsigned __int16 *)(*v2 + 34));
  v5 = (v4 * v3) & 0xF;
  v6 = 16 - v5;
  v7 = *(uint64_t **)(a1 + 16);
  v8 = v7[15];
  v9 = (unsigned __int16)((v4 * v3) >> 4);
  v10 = *(unsigned __int16 *)(v8 + 2 * (unsigned __int16)((v4 * v3) >> 4)) >> ((v4 * v3) & 0xF);
  if (16 - v5 >= v3)
  {
    result = v10 & (0xFFFFu >> (16 - v3));
  }
  else
  {
    v11 = *(unsigned __int16 *)(v8 + 2 * (v9 + 1));
    if (32 - v5 >= v3)
      result = (((0xFFFFu >> (-(char)v3 - v5)) & v11) << v6) + v10;
    else
      result = (v11 << v6)
             + v10
             + (((0xFFFFu >> (48 - v3 - v5)) & *(unsigned __int16 *)(v8 + 2 * (v9 + 2))) << (32 - v5));
  }
  v13 = *v7;
  if (result > *(unsigned __int8 *)(v13 + 18))
    return ((_DWORD)result << *(_BYTE *)(v13 + 14));
  return result;
}

uint64_t GetSourceAddress(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;
  unsigned int v12;
  unsigned int v13;

  v1 = *((_QWORD *)a1 + 1);
  v2 = **((_QWORD **)a1 + 2);
  v3 = *(unsigned __int8 *)(v2 + 12);
  v4 = *((unsigned __int8 *)a1 + 4);
  v5 = v4 + v3;
  v6 = *a1;
  v7 = *(unsigned __int8 *)(v1 + v6) >> v4;
  if ((v4 + v3) < 9)
  {
    v12 = v7 & (0xFFu >> (8 - v3));
  }
  else
  {
    if (v5 < 0x11)
    {
      v11 = 16;
      LOBYTE(v9) = 8;
      v8 = 1;
    }
    else
    {
      v8 = 1;
      LOBYTE(v9) = 8;
      v10 = 1;
      do
      {
        v7 += *(unsigned __int8 *)(v1 + (v8 + v6)) << (v9 - v4);
        v8 = ++v10;
        v9 = 8 * v10;
        v11 = 8 * v10 + 8;
      }
      while (v5 > v9 + 8);
    }
    v12 = (((0xFFu >> (v11 - v5)) & *(unsigned __int8 *)(v1 + (v8 + v6))) << (v9 - v4)) + v7;
  }
  v13 = v4 + v3;
  *a1 = v6 + ((v13 >> 3) & 7);
  *((_BYTE *)a1 + 4) = v13 & 7;
  return v12 << *(_BYTE *)(v2 + 14);
}

uint64_t DecodeSourceHash(uint64_t a1)
{
  uint64_t *v2;
  unsigned int v3;
  unsigned int v4;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  v2 = *(uint64_t **)(a1 + 16);
  v3 = *(unsigned __int8 *)(*v2 + 13);
  v4 = HuffDecode((unsigned int *)a1, v2[9], *(unsigned __int16 *)(*v2 + 32));
  if (v3 <= 0x10)
    return *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 112) + 2 * v4);
  v6 = (v4 * v3) & 0xF;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 112);
  v8 = (unsigned __int16)((v4 * v3) >> 4);
  v9 = *(unsigned __int16 *)(v7 + 2 * (unsigned __int16)((v4 * v3) >> 4)) >> ((v4 * v3) & 0xF);
  v10 = *(unsigned __int16 *)(v7 + 2 * (v8 + 1));
  if (32 - v6 >= v3)
    return (((0xFFFFu >> (-(char)v3 - v6)) & v10) << (16 - v6)) + v9;
  else
    return (v10 << (16 - v6))
         + v9
         + (((0xFFFFu >> (48 - v3 - v6)) & *(unsigned __int16 *)(v7 + 2 * (v8 + 2))) << (32 - v6));
}

uint64_t try_flipped(__int128 *a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*(_DWORD *)a1 != 1163019088)
    return 0;
  v4 = *a1;
  v5 = a1[2];
  *(_OWORD *)(a2 + 16) = a1[1];
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v4;
  *(int8x8_t *)(a2 + 4) = vrev32_s8(*(int8x8_t *)((char *)a1 + 4));
  *(int8x8_t *)(a2 + 16) = vrev16_s8((int8x8_t)a1[1]);
  *(_WORD *)(a2 + 24) = bswap32(*((unsigned __int16 *)a1 + 12)) >> 16;
  *(_WORD *)(a2 + 26) = bswap32(*((unsigned __int16 *)a1 + 13)) >> 16;
  *(_WORD *)(a2 + 28) = bswap32(*((unsigned __int16 *)a1 + 14)) >> 16;
  if (a3)
  {
    v6 = *a3;
    v7 = a3[1];
    *(_QWORD *)(a4 + 32) = *((_QWORD *)a3 + 4);
    *(_OWORD *)a4 = v6;
    *(_OWORD *)(a4 + 16) = v7;
    *(int8x8_t *)a4 = vrev32_s8(*(int8x8_t *)a3);
  }
  return a2;
}

uint64_t nuance_pcre_fullinfo(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  _OWORD v14[3];
  _OWORD v15[2];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  result = 4294967294;
  if (a1 && a4)
  {
    if (a2 && (*(_BYTE *)a2 & 1) != 0)
      v9 = *(__int128 **)(a2 + 8);
    else
      v9 = 0;
    memset(v14, 0, sizeof(v14));
    memset(v15, 0, sizeof(v15));
    v16 = 0;
    if (*(_DWORD *)a1 != 1346589253)
    {
      v10 = try_flipped((__int128 *)a1, (uint64_t)v14, v9, (uint64_t)v15);
      if (!v10)
        return 4294967292;
      a1 = v10;
      if (v9)
        v9 = v15;
      else
        v9 = 0;
    }
    switch(a3)
    {
      case 0:
        result = 0;
        v11 = *(_DWORD *)(a1 + 8) & 0x7A7FLL;
        goto LABEL_36;
      case 1:
        result = 0;
        v11 = *(unsigned int *)(a1 + 4);
        goto LABEL_36;
      case 2:
        result = 0;
        v12 = *(unsigned __int16 *)(a1 + 16);
        goto LABEL_40;
      case 3:
        result = 0;
        v12 = *(unsigned __int16 *)(a1 + 18);
        goto LABEL_40;
      case 4:
        v13 = *(_DWORD *)(a1 + 8);
        if ((v13 & 0x40000000) != 0)
        {
          v12 = *(unsigned __int16 *)(a1 + 20);
        }
        else if ((v13 & 0x10000000) != 0)
        {
          v12 = -1;
        }
        else
        {
          v12 = -2;
        }
        goto LABEL_39;
      case 5:
        if (!v9 || (*((_BYTE *)v9 + 4) & 1) == 0)
          goto LABEL_34;
        v11 = *(_QWORD *)(a2 + 8) + 8;
        goto LABEL_35;
      case 6:
        if ((*(_BYTE *)(a1 + 11) & 0x20) != 0)
          v12 = *(unsigned __int16 *)(a1 + 22);
        else
          v12 = -1;
LABEL_39:
        result = 0;
        goto LABEL_40;
      case 7:
        result = 0;
        v12 = *(unsigned __int16 *)(a1 + 26);
        goto LABEL_40;
      case 8:
        result = 0;
        v12 = *(unsigned __int16 *)(a1 + 28);
LABEL_40:
        *a4 = v12;
        return result;
      case 9:
        result = 0;
        v11 = a1 + *(unsigned __int16 *)(a1 + 24);
        goto LABEL_36;
      case 10:
        if (v9)
          v11 = *(unsigned int *)v9;
        else
LABEL_34:
          v11 = 0;
LABEL_35:
        result = 0;
        goto LABEL_36;
      case 11:
        result = 0;
        v11 = (uint64_t)&pcre_default_tables;
LABEL_36:
        *(_QWORD *)a4 = v11;
        break;
      default:
        result = 4294967293;
        break;
    }
  }
  return result;
}

uint64_t nuance_pcre_compile(uint64_t a1, int a2, char *a3, uint64_t a4, const char **a5, _DWORD *a6, char *a7)
{
  int valid;
  uint64_t v14;
  const char *v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned __int8 v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t i;
  uint64_t v43;
  int v44;
  unsigned __int8 *v45;
  int v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  char *v58;
  int v59;
  BOOL v60;
  int v61;
  int v62;
  unsigned __int8 *v63;
  int v64;
  int v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  int v69;
  char v70;
  int v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  int v79;
  char v80;
  BOOL v81;
  _BOOL4 v82;
  int v84;
  int v85;
  unsigned __int8 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v93;
  int v94;
  unsigned __int8 *v95;
  unsigned int v96;
  uint64_t v97;
  int v98;
  unsigned __int8 *repeat_counts_0;
  int v100;
  unsigned int v101;
  int v102;
  const char *v103;
  int v104;
  int v105;
  int v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  BOOL v109;
  int *v110;
  int v111;
  unsigned __int8 v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  uint64_t v115;
  unsigned __int8 *v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  unsigned __int8 *v122;
  int v123;
  int v124;
  int v125;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  BOOL v128;
  const char *v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  const char *v133;
  char v134;
  char v135;
  int v136;
  unsigned __int8 *v137;
  int v138;
  int v139;
  int v141;
  unsigned __int8 *v142;
  int v143;
  char v144;
  int v146;
  unsigned __int8 *v147;
  int v148;
  int v149;
  int v150;
  int v151;
  uint64_t v152;
  int v153;
  unsigned int v154;
  uint64_t v155;
  char *v156;
  _BYTE *v157;
  int v158;
  _BYTE *v159;
  const char *v160;
  int v161;
  int v162;
  int firstassertedchar;
  __int16 v164;
  __int16 v165;
  int v166;
  char *v167;
  int v168;
  int v169;
  int v170;
  int v171;
  unsigned int v172;
  unsigned int v173;
  int v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  char *v178;
  int v179;
  int v180;
  int v181;
  int v182;
  uint64_t v183;
  unsigned __int8 *v184;
  int v185;
  unsigned int v186;
  int v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  unsigned __int8 *v198;
  _BYTE *v199;
  int v200;
  _QWORD v201[128];

  v201[126] = *MEMORY[0x1E0C80C00];
  v201[0] = 0;
  v200 = 0;
  v199 = 0;
  if ((safeh_HandleCheck(a1, a2, 56663, 32) & 0x80000000) != 0 || !a5)
    return 0;
  *a5 = 0;
  if (!a6)
  {
    v14 = 0;
    v15 = "erroffset passed as NULL";
    goto LABEL_11;
  }
  *a6 = 0;
  if ((a4 & 0x2800) == 0x800)
  {
    valid = valid_utf8(a3, -1);
    *a6 = valid;
    if ((valid & 0x80000000) == 0)
    {
      v14 = 0;
      v15 = "invalid UTF-8 string";
LABEL_11:
      *a5 = v15;
      return v14;
    }
  }
  if ((a4 & 0xFFFF8580) != 0)
  {
    v14 = 0;
    v15 = "unknown option bit(s) set";
    goto LABEL_11;
  }
  v183 = 0;
  v182 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v196 = 0u;
  v197 = 0u;
  v195 = 0u;
  if (a7)
    v20 = a7;
  else
    v20 = (char *)&pcre_default_tables;
  v191 = v20;
  v192 = v20 + 256;
  v178 = v20;
  v184 = (unsigned __int8 *)a3;
  v193 = v20 + 512;
  v194 = v20 + 832;
  *(_QWORD *)&v197 = 0;
  v198 = (unsigned __int8 *)(a3 - 1);
  v21 = a4;
  v22 = 3;
  v23 = -1;
  while (1)
  {
    v24 = v198;
    v25 = v198 + 1;
    v26 = *++v198;
    if (!(_DWORD)v26)
    {
LABEL_395:
      if ((v21 & 0x4000) != 0)
        v150 = 10;
      else
        v150 = 4;
      v151 = v150 + v22;
      if (v150 + v22 > 0x10000)
      {
        v14 = 0;
        v15 = "regular expression too large";
        goto LABEL_11;
      }
      v152 = v21;
      v153 = v17 + 3;
      v154 = v151 + (v17 + 3) * v182 + 48;
      v155 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, v154);
      v14 = v155;
      if (!v155)
      {
        v15 = "failed to get memory";
        goto LABEL_11;
      }
      *(_DWORD *)v155 = 1346589253;
      *(_DWORD *)(v155 + 4) = v154;
      *(_WORD *)(v155 + 30) = 0;
      *(_DWORD *)(v155 + 8) = v152;
      *(_DWORD *)(v155 + 12) = 0;
      *(_WORD *)(v155 + 24) = 48;
      *(_WORD *)(v155 + 26) = v153;
      *(_WORD *)(v155 + 28) = v182;
      if (v178 == (char *)&pcre_default_tables)
        v156 = 0;
      else
        v156 = v178;
      *(_QWORD *)(v155 + 32) = v156;
      *(_QWORD *)(v155 + 40) = 0;
      DWORD2(v196) = 0;
      HIDWORD(v196) = v153;
      *(_QWORD *)&v196 = v155 + 48;
      v157 = (_BYTE *)(v155 + 48 + (unsigned __int16)v153 * (unint64_t)(unsigned __int16)v182);
      *(_QWORD *)&v195 = v157;
      *((_QWORD *)&v195 + 1) = v184;
      *((_QWORD *)&v197 + 1) = 0;
      v198 = v184;
      v199 = v157;
      *v157 = 80;
      v200 = 0;
      compile_regex_0(v152, v152 & 7, &v200, (unint64_t *)&v199, &v198, a5, 0, 0, (int *)v201 + 1, (int *)v201, 0, (uint64_t)&v191);
      *(_WORD *)(v14 + 16) = v200;
      v158 = HIDWORD(v197);
      *(_WORD *)(v14 + 18) = v197;
      if (v158)
        *(_DWORD *)(v14 + 8) |= 0x4000000u;
      if (!*a5 && *v198)
        *a5 = "unmatched parentheses";
      v159 = v199;
      *v199 = 0;
      if (v159 - v157 + 1 > v151)
        *a5 = "internal error: code overflow";
      if (*(unsigned __int16 *)(v14 + 18) > *(unsigned __int16 *)(v14 + 16))
      {
        *a5 = "reference to non-existent subpattern";
LABEL_415:
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v14);
        goto LABEL_418;
      }
      if (*a5)
        goto LABEL_415;
      if ((v152 & 0x10) == 0)
      {
        v189 = v152;
        v161 = DWORD1(v197);
        if (is_anchored_0(v14 + 48 + (unsigned __int16)v153 * (unint64_t)(unsigned __int16)v182, &v189, 0, SDWORD1(v197)))
        {
          v162 = 16;
        }
        else
        {
          LOWORD(firstassertedchar) = WORD2(v201[0]);
          if ((v201[0] & 0x8000000000000000) != 0
            && (firstassertedchar = find_firstassertedchar(v14 + 48 + (unsigned __int16)v153 * (unint64_t)(unsigned __int16)v182, &v189, 0), firstassertedchar < 0))
          {
            if (!is_startline_0(v14 + 48 + (unsigned __int16)v153 * (unint64_t)(unsigned __int16)v182, 0, v161))goto LABEL_429;
            v162 = 0x10000000;
          }
          else
          {
            if ((firstassertedchar & 0x100) == 0
              || (v164 = firstassertedchar,
                  v192[firstassertedchar] != firstassertedchar))
            {
              v164 = firstassertedchar;
            }
            *(_WORD *)(v14 + 20) = v164;
            v162 = 0x40000000;
          }
        }
        *(_DWORD *)(v14 + 8) |= v162;
      }
LABEL_429:
      v165 = v201[0];
      if ((v201[0] & 0x80000000) == 0)
      {
        v166 = *(_DWORD *)(v14 + 8);
        if ((v201[0] & 0x200) != 0 || (v166 & 0x10) == 0)
        {
          if ((v201[0] & 0x100) != 0 && v192[LOBYTE(v201[0])] == LOBYTE(v201[0]))
            v165 = v201[0] & 0xFEFF;
          *(_WORD *)(v14 + 22) = v165;
          *(_DWORD *)(v14 + 8) = v166 | 0x20000000;
        }
      }
      return v14;
    }
    v190 = 0;
    if (v19)
    {
      if ((v21 & 0x4000) != 0)
        v22 += 6;
      if ((_DWORD)v26 != 92)
        goto LABEL_63;
      v28 = v24[2];
      v27 = v24 + 2;
      if (v28 == 69)
      {
        v19 = 0;
        v198 = v27;
        goto LABEL_77;
      }
      v22 += 2;
LABEL_74:
      v41 = 2;
      v18 = 1;
      goto LABEL_78;
    }
    if ((v21 & 8) != 0)
    {
      if ((v194[v26] & 1) != 0)
        goto LABEL_72;
      if ((_DWORD)v26 == 35)
      {
        while (1)
        {
          v37 = *++v25;
          v36 = v37;
          if (v37 == 10)
            break;
          if (!v36)
            goto LABEL_395;
        }
        v19 = 0;
        goto LABEL_76;
      }
    }
    ++v23;
    v186 = v21;
    if ((v21 & 0x4000) != 0 && (v26 - 42) >= 2 && (_DWORD)v26 != 63)
    {
      if ((_DWORD)v26 == 123)
      {
        v176 = v17;
        v179 = v23;
        v29 = v18;
        v30 = is_counted_repeat(v24 + 2);
        v18 = v29;
        v23 = v179;
        v17 = v176;
        v21 = v186;
        if (v30)
          goto LABEL_85;
      }
      v22 += 6;
    }
    if ((int)v26 <= 62)
    {
      switch((int)v26)
      {
        case '$':
        case '.':
          goto LABEL_73;
        case '(':
          if (v24[2] == 63)
          {
            HIDWORD(v188) = 0;
            v189 = 0;
            v25 = v24 + 3;
            v31 = v24[3];
            switch(v31)
            {
              case '!':
              case ':':
              case '=':
              case '>':
                v54 = 0;
                v198 = v24 + 3;
                goto LABEL_257;
              case '#':
                v113 = v24 + 4;
                while (2)
                {
                  if (!*v113)
                  {
                    v198 = v113;
                    v129 = "missing) after comment";
                    goto LABEL_362;
                  }
                  if (*v113 != 41)
                  {
                    ++v113;
                    continue;
                  }
                  break;
                }
                v198 = v113;
                v41 = 2;
                goto LABEL_381;
              case '(':
                v114 = v24 + 4;
                v115 = v24[4];
                if ((_DWORD)v115 == 82)
                {
                  v117 = v24[5];
                  v116 = v24 + 5;
                  if (v117 == 41)
                  {
                    v54 = 0;
                    v198 = v116;
                    v22 += 3;
                    goto LABEL_257;
                  }
LABEL_350:
                  v198 = v114;
                  v129 = "assertion expected after (?(";
                  goto LABEL_362;
                }
                if ((digitab[v115] & 4) == 0)
                {
                  v198 = v24 + 2;
                  if ((_DWORD)v115 == 63)
                  {
                    v130 = v24[5];
                    if (v130 <= 0x3D && ((1 << v130) & 0x3000000200000000) != 0)
                    {
                      v54 = 0;
                      goto LABEL_257;
                    }
                  }
                  goto LABEL_350;
                }
                v137 = v24 + 4;
                do
                {
                  v139 = *++v137;
                  v138 = v139;
                }
                while ((digitab[v139] & 4) != 0);
                v22 += 3;
                v198 = v137;
                if (v138 == 41)
                {
LABEL_360:
                  v54 = 0;
                  v21 = v186;
                  goto LABEL_257;
                }
                v133 = "malformed number after (?(";
LABEL_380:
                *a5 = v133;
                v41 = 8;
                v21 = v186;
                goto LABEL_381;
              case '0':
              case '1':
              case '2':
              case '3':
              case '4':
              case '5':
              case '6':
              case '7':
              case '8':
              case '9':
                do
                {
                  v33 = *++v25;
                  v32 = v33;
                }
                while ((digitab[v33] & 4) != 0);
                goto LABEL_36;
              case '<':
                v119 = v24[4];
                v118 = v119;
                v198 = v24 + 4;
                if (v119 == 61 || v118 == 33)
                {
                  v22 += 3;
                  v54 = 3;
                  goto LABEL_257;
                }
                v129 = "unrecognized character after (?<";
                goto LABEL_362;
              case 'C':
                do
                {
                  v121 = *++v25;
                  v120 = v121;
                }
                while ((digitab[v121] & 4) != 0);
                v198 = v25;
                if (v120 == 41)
                {
                  v22 += 6;
                  goto LABEL_311;
                }
                v103 = "closing) for (?C expected";
                goto LABEL_255;
              case 'P':
                v122 = v24 + 4;
                v123 = v24[4];
                v198 = v24 + 4;
                if ((v123 - 61) < 2)
                {
                  do
                  {
                    v125 = *++v122;
                    v124 = v125;
                  }
                  while ((v194[v125] & 0x10) != 0);
                  v198 = v122;
                  if (v124 != 41)
                  {
LABEL_351:
                    v133 = "syntax error after (?P";
                    goto LABEL_380;
                  }
                  goto LABEL_360;
                }
                if (v123 != 60)
                {
                  v129 = "unrecognized character after (?P";
                  goto LABEL_362;
                }
                v131 = -1;
                do
                  v132 = v24[v131++ + 6];
                while ((v194[v132] & 0x10) != 0);
                v198 = &v24[v131 + 5];
                if ((_DWORD)v132 != 62)
                  goto LABEL_351;
                v54 = 0;
                ++v182;
                if (v131 <= (int)v17)
                  v17 = v17;
                else
                  v17 = v131;
                v21 = v186;
                goto LABEL_257;
              case 'R':
                v32 = v24[4];
                v25 = v24 + 4;
LABEL_36:
                v198 = v25;
                if (v32 != 41)
                {
                  v103 = "(?R or (?digits must be followed by)";
LABEL_255:
                  *a5 = v103;
                  v41 = 8;
                  goto LABEL_381;
                }
                v34 = v25[1];
                if ((v34 - 42) >= 2 && v34 != 63 && v34 != 123)
                {
                  v22 += 3;
LABEL_311:
                  v41 = 2;
                  goto LABEL_381;
                }
                v22 += 9;
                v35 = 11;
LABEL_221:
                v95 = v25 + 1;
                v96 = v25[1];
                if (v96 > 0x3E)
                {
                  if (v96 == 63)
                  {
                    v100 = 1;
                    v190 = 1;
                    v198 = v25 + 1;
                    ++v22;
                    ++v25;
LABEL_245:
                    v22 += (v100 - 1) * (v35 + 7);
                    goto LABEL_70;
                  }
                  if (v96 != 123)
                    goto LABEL_239;
                  v97 = v17;
                  v181 = v23;
                  v173 = v18;
                  v98 = is_counted_repeat(v25 + 2);
                  v18 = v173;
                  v23 = v181;
                  v17 = v97;
                  v21 = v186;
                  if (!v98)
                  {
LABEL_239:
                    v190 = 0x100000001;
                    goto LABEL_70;
                  }
                  repeat_counts_0 = read_repeat_counts_0(v25 + 2, (int *)&v190 + 1, (int *)&v190, a5);
                  v198 = repeat_counts_0;
                  if (*a5)
                    goto LABEL_418;
                  v25 = repeat_counts_0;
                  v100 = v190;
                  if (HIDWORD(v190))
                  {
                    if ((int)v190 > SHIDWORD(v190))
                      v22 = v22 + (HIDWORD(v190) - 1) * v35 + (v190 - HIDWORD(v190)) * (v35 + 7) - 6;
                    else
                      v22 += (HIDWORD(v190) - 1) * v35;
                    v21 = v186;
                    v17 = v97;
                    v23 = v181;
                    v18 = v173;
                  }
                  else
                  {
                    ++v22;
                    v21 = v186;
                    v17 = v97;
                    v23 = v181;
                    v18 = v173;
                    if ((int)v190 >= 1)
                      goto LABEL_245;
                  }
                }
                else
                {
                  if (v96 == 42)
                  {
                    v190 = 0xFFFFFFFFLL;
                    ++v22;
                  }
                  else
                  {
                    if (v96 != 43)
                      goto LABEL_239;
                    v190 = 0x1FFFFFFFFLL;
                  }
                  ++v25;
                  v198 = v95;
                }
                goto LABEL_70;
              default:
                v189 = 0;
                v110 = &v189;
                while (2)
                {
                  if (v31 > 0x68u)
                  {
                    if (v31 > 0x72u)
                    {
                      if (v31 == 115)
                      {
                        v111 = 4;
                        goto LABEL_296;
                      }
                      if (v31 == 120)
                      {
                        v111 = 8;
                        goto LABEL_296;
                      }
                    }
                    else
                    {
                      if (v31 == 105)
                      {
                        v111 = 1;
                        goto LABEL_296;
                      }
                      if (v31 == 109)
                      {
                        v111 = 2;
LABEL_296:
                        *v110 |= v111;
                        goto LABEL_297;
                      }
                    }
LABEL_356:
                    v198 = v25;
                    v129 = "unrecognized character after (?";
LABEL_362:
                    *a5 = v129;
                    v41 = 8;
                    goto LABEL_381;
                  }
                  if (v31 > 0x54u)
                  {
                    if (v31 == 85)
                    {
                      v111 = 512;
                      goto LABEL_296;
                    }
                    if (v31 == 88)
                    {
                      v111 = 64;
                      goto LABEL_296;
                    }
                    goto LABEL_356;
                  }
                  if (v31 == 45)
                  {
                    v110 = (int *)&v188 + 1;
LABEL_297:
                    v112 = *++v25;
                    v31 = v112;
                    continue;
                  }
                  break;
                }
                if (v31 == 41)
                {
                  v198 = v25;
                  v134 = BYTE4(v188);
                  v135 = v189;
                  if (v23)
                  {
                    v136 = v23;
                  }
                  else
                  {
                    v186 = (v189 | v186) & ~HIDWORD(v188);
                    HIDWORD(v188) = 0;
                    v189 = 0;
                    v136 = -1;
                    v134 = 0;
                    v135 = 0;
                  }
                  v144 = v134 | v135;
                  if ((v144 & 7) != 0)
                  {
                    v22 += 4;
                    v186 |= (v144 & 1) << 27;
                    if ((_DWORD)v183 == 3 || !(_DWORD)v183)
                      LODWORD(v183) = v183 + 2;
                  }
                  v41 = 2;
                  v21 = v186;
                  v23 = v136;
LABEL_381:
                  v19 = 0;
                  goto LABEL_78;
                }
                if (v31 != 58)
                  goto LABEL_356;
                v198 = v25;
                if (((BYTE4(v188) | v189) & 7) != 0)
                  v21 = (((BYTE4(v188) | v189) & 1) << 27) | v21;
                else
                  v21 = v21;
                if (((BYTE4(v188) | v189) & 7) != 0)
                {
                  v22 += 4;
                  v54 = 2;
                }
                else
                {
                  v54 = 0;
                }
LABEL_257:
                v101 = HIDWORD(v183);
                v56 = 3;
                break;
            }
          }
          else
          {
            v54 = 0;
            if ((v21 & 0x1000) != 0)
            {
              v56 = 3;
            }
            else
            {
              v55 = v200++;
              if (v55 <= 99)
                v56 = 3;
              else
                v56 = 6;
            }
            v101 = HIDWORD(v183);
          }
          if (v101 > 0xC7)
          {
            v160 = "parentheses nested too deeply";
            goto LABEL_417;
          }
          v19 = 0;
          *((_BYTE *)&v201[1] + v101) = v183;
          *((_DWORD *)&v201[26] + v101) = v22;
          v22 += v56;
          v41 = 2;
          LODWORD(v183) = v54;
          HIDWORD(v183) = v101 + 1;
          break;
        case ')':
          v22 += 3;
          if (HIDWORD(v183))
          {
            v35 = v22 - *((_DWORD *)&v201[26] + (HIDWORD(v183) - 1));
            LODWORD(v183) = *((unsigned __int8 *)&v201[1] + --HIDWORD(v183));
          }
          else
          {
            HIDWORD(v183) = 0;
            v35 = 0;
          }
          goto LABEL_221;
        case '*':
        case '+':
          goto LABEL_69;
        default:
          goto LABEL_63;
      }
      goto LABEL_78;
    }
    if ((int)v26 > 93)
    {
      if ((_DWORD)v26 != 94)
      {
        if ((_DWORD)v26 != 123)
        {
          if ((_DWORD)v26 == 124)
          {
            v19 = 0;
            v22 += v183 + 3;
            goto LABEL_77;
          }
LABEL_63:
          v22 += 2;
          v41 = 2;
          v18 = 1;
          if ((a4 & 0x800) == 0 || v26 < 0xC0)
            goto LABEL_78;
          if ((v24[2] & 0xC0) == 0x80)
          {
            v43 = 0;
            do
              v44 = v24[v43++ + 3] & 0xC0;
            while (v44 == 128);
            v25 = &v24[v43 + 1];
            v18 = (v43 + 1);
            v22 += v43;
          }
LABEL_76:
          v198 = v25;
          goto LABEL_77;
        }
        v29 = v18;
        v179 = v23;
        v176 = v17;
LABEL_85:
        if (!is_counted_repeat(v24 + 2))
        {
          v19 = 0;
          v22 += 2;
          v41 = 2;
          v18 = 1;
          v21 = v186;
          v17 = v176;
          v23 = v179;
          goto LABEL_78;
        }
        v50 = read_repeat_counts_0(v24 + 2, (int *)&v190 + 1, (int *)&v190, a5);
        v198 = v50;
        if (*a5)
          goto LABEL_418;
        v25 = v50;
        if (HIDWORD(v190))
        {
          v51 = v190;
          v21 = v186;
          v18 = v29;
          if (v190 != 0x1FFFFFFFFLL)
          {
            if (SHIDWORD(v190) <= 0)
              v52 = -(int)v29;
            else
              v52 = 3;
            if (HIDWORD(v190) == 1)
              v53 = 0;
            else
              v53 = v52;
LABEL_249:
            v81 = v51 < 1;
            v102 = v22 + v18 + v53;
            if (v81)
              v22 = v102 + 1;
            else
              v22 = v102 + 3;
LABEL_252:
            v17 = v176;
            v23 = v179;
            if (v50[1] == 63)
            {
              v198 = v50 + 1;
              v25 = v50 + 1;
            }
LABEL_70:
            v46 = v25[1];
            v45 = v25 + 1;
            if (v46 == 43)
            {
              v19 = 0;
              v198 = v45;
              v22 += 6;
            }
            else
            {
LABEL_72:
              v19 = 0;
            }
LABEL_77:
            v41 = 2;
            goto LABEL_78;
          }
        }
        else
        {
          v51 = v190;
          v21 = v186;
          v18 = v29;
          if ((_DWORD)v190 != -1 && (_DWORD)v190 != 1)
          {
            v53 = -(int)v29;
            goto LABEL_249;
          }
        }
        ++v22;
        goto LABEL_252;
      }
LABEL_73:
      v19 = 0;
      ++v22;
      goto LABEL_74;
    }
    if ((_DWORD)v26 == 63)
    {
LABEL_69:
      ++v22;
      goto LABEL_70;
    }
    if ((_DWORD)v26 == 91)
      break;
    if ((_DWORD)v26 != 92)
      goto LABEL_63;
    v38 = v23;
    v39 = v17;
    v40 = check_escape(&v198, a5, v200, v21, 0);
    if (*a5)
      goto LABEL_418;
    if ((v40 & 0x80000000) != 0)
    {
      if (v40 + 14 < 2)
      {
        if ((get_ucp_0(&v198, &v189, a5) & 0x80000000) != 0)
          goto LABEL_418;
        v19 = 0;
        v22 += 2;
        v18 = 2;
        v41 = 2;
LABEL_237:
        v21 = v186;
LABEL_238:
        v17 = v39;
        v23 = v38;
        goto LABEL_78;
      }
      v21 = v186;
      v17 = v39;
      v23 = v38;
      if (v40 == -19)
      {
        v41 = 2;
        v18 = 1;
        v19 = 1;
        goto LABEL_78;
      }
      v18 = 1;
      if (v40 <= 0xFFFFFFEC)
      {
        v104 = -20 - v40;
        v105 = 1 << (-20 - v40);
        if (v40 <= 0xFFFFFFCC)
          v105 = 1;
        v106 = DWORD1(v197) | v105;
        if (v104 <= (int)v197)
          v104 = v197;
        *(_QWORD *)&v197 = __PAIR64__(v106, v104);
        if (v198[1] != 123)
        {
          v19 = 0;
          v41 = 2;
          v22 += 3;
          v17 = v39;
          goto LABEL_78;
        }
        v107 = v198 + 2;
        if (is_counted_repeat(v198 + 2))
        {
          v108 = read_repeat_counts_0(v107, (int *)&v190 + 1, (int *)&v190, a5);
          v198 = v108;
          if (*a5)
            goto LABEL_418;
          if (HIDWORD(v190))
            v109 = HIDWORD(v190) == 1 && (_DWORD)v190 == -1;
          else
            v109 = (((_DWORD)v190 + 1) & 0xFFFFFFFD) == 0;
          if (v109)
            v141 = 4;
          else
            v141 = 8;
          v22 += v141;
          v143 = v108[1];
          v142 = v108 + 1;
          v19 = 0;
          if (v143 == 63)
            v198 = v142;
          v41 = 2;
          v18 = 1;
        }
        else
        {
          v19 = 0;
          v41 = 2;
          v18 = 1;
          v22 += 3;
        }
        goto LABEL_237;
      }
      v19 = 0;
      ++v22;
      goto LABEL_77;
    }
    v19 = 0;
    v22 += 2;
    v41 = 2;
    v18 = 1;
    v21 = v186;
    if ((a4 & 0x800) == 0)
      goto LABEL_238;
    v17 = v39;
    v23 = v38;
    if (v40 >= 0x80)
    {
      for (i = 0; i != 6; ++i)
      {
        if ((signed int)v40 <= utf8_table1[i])
          break;
      }
      v19 = 0;
      v22 += i;
      v18 = (i + 1);
      goto LABEL_77;
    }
LABEL_78:
    if (v41 != 2)
      goto LABEL_418;
  }
  v47 = v24 + 2;
  v48 = v24[2];
  v198 = v24 + 2;
  if (v48 == 94)
  {
    v48 = v24[3];
    v198 = v24 + 3;
    v49 = 10;
    v47 = v24 + 3;
  }
  else
  {
    v49 = 0;
  }
  if (!v48)
  {
LABEL_416:
    v160 = "missing terminating ] for character class";
    goto LABEL_417;
  }
  v174 = v49;
  v177 = v17;
  v57 = 0;
  v58 = v194;
  v185 = v200;
  v168 = v21 & 1;
  if ((v21 & 1) != 0)
    v59 = 127;
  else
    v59 = 255;
  v169 = v59;
  v170 = 0;
  v60 = 1;
  v180 = v23;
  v172 = v18;
  while (1)
  {
    v61 = v57;
    while (1)
    {
      if (!v60)
      {
        v23 = v180;
        v18 = v172;
        if (v48 == 92 && v47[1] == 69)
        {
          v61 = 0;
          v198 = v47 + 1;
          goto LABEL_191;
        }
LABEL_126:
        if ((a4 & 0x800) != 0)
        {
          if ((~v48 & 0xC0) != 0)
          {
            LODWORD(v66) = 0;
          }
          else
          {
            v66 = utf8_table4[v48 & 0x3F];
            v48 = (utf8_table3[v66] & v48) << (6 * v66);
            v67 = (char *)(v47 + 1);
            if (v66 <= 1)
              v68 = 1;
            else
              v68 = v66;
            v69 = 6 * v66 - 6;
            do
            {
              v70 = *v67++;
              v48 |= (v70 & 0x3F) << v69;
              v69 -= 6;
              --v68;
            }
            while (v68);
          }
          v198 = &v47[v66];
        }
        goto LABEL_143;
      }
      if (v48 != 92)
      {
        v23 = v180;
        v18 = v172;
        if (v48 == 91)
        {
          v63 = v47 + 2;
          if (v47[2] == 94)
            v63 = v47 + 3;
          do
          {
            v65 = *v63++;
            v64 = v65;
          }
          while ((v58[v65] & 2) != 0);
          if (v64 == v47[1] && *v63 == 93)
          {
            v61 = 0;
            v198 = v63;
            goto LABEL_190;
          }
        }
        goto LABEL_126;
      }
      v62 = check_escape(&v198, a5, v185, v21, 1);
      if (*a5)
        goto LABEL_418;
      v48 = v62;
      if (v62 != -19)
        break;
      v60 = 0;
      v47 = v198 + 1;
      v48 = *++v198;
      v61 = 1;
      v21 = v186;
      if (!v48)
        goto LABEL_416;
    }
    v21 = v186;
    if (v62 == -15)
    {
      v48 = 88;
LABEL_135:
      v23 = v180;
      v18 = v172;
    }
    else
    {
      if (v62 == -4)
      {
        v48 = 8;
        goto LABEL_135;
      }
      v23 = v180;
      v18 = v172;
      if (v62 < 0)
      {
        if ((v62 & 0xFFFFFFFE) == 0xFFFFFFF2)
        {
          v61 = 0;
          v71 = v22 + 4;
          if (v170)
            v71 = v22;
          v22 = v71 + 2;
LABEL_189:
          v174 = 10;
          v170 = 1;
          goto LABEL_191;
        }
        v61 = 0;
LABEL_190:
        v174 = 10;
        goto LABEL_191;
      }
    }
LABEL_143:
    v72 = v198;
    if (v198[1] != 45)
      goto LABEL_183;
    v73 = v198 + 2;
    v74 = v198[2];
    if (v198[2])
    {
      if ((_DWORD)v74 != 93)
        break;
    }
LABEL_182:
    v198 = v72;
LABEL_183:
    ++v174;
    if ((a4 & 0x800) != 0 && v48 > v169)
    {
      if (v170)
        v84 = v22;
      else
        v84 = v22 + 4;
      v85 = ord2utf8(v48, (uint64_t)&v189);
      v18 = v172;
      v23 = v180;
      v21 = v186;
      v22 = ((v85 + 1) << v168) + v84;
      goto LABEL_189;
    }
LABEL_191:
    v86 = v198;
    v47 = v198 + 1;
    v48 = *++v198;
    if (!v48)
      goto LABEL_416;
    v60 = v61 == 0;
    v57 = 1;
    if (!v61)
    {
      v57 = 0;
      if (v48 == 93)
      {
        if (v174 == 1)
        {
          v19 = 0;
          v22 += 3;
          v41 = 2;
          v17 = v177;
        }
        else
        {
          if (v86[2] == 123 && (v126 = v86 + 3, is_counted_repeat(v86 + 3)))
          {
            v127 = read_repeat_counts_0(v126, (int *)&v190 + 1, (int *)&v190, a5);
            v198 = v127;
            if (*a5)
              goto LABEL_418;
            if (HIDWORD(v190))
              v128 = HIDWORD(v190) == 1 && (_DWORD)v190 == -1;
            else
              v128 = (((_DWORD)v190 + 1) & 0xFFFFFFFD) == 0;
            if (v128)
              v146 = 34;
            else
              v146 = 38;
            v22 += v146;
            v149 = v127[1];
            v147 = v127 + 1;
            v148 = v149;
            if (v149 == 63)
            {
              v19 = 0;
              v198 = v147;
            }
            else
            {
              v19 = 0;
              if (v148 == 43)
              {
                v198 = v147;
                v22 += 6;
              }
            }
            v41 = 2;
          }
          else
          {
            v19 = 0;
            v41 = 2;
            v22 += 33;
          }
          v21 = v186;
          v17 = v177;
          v23 = v180;
          v18 = v172;
        }
        goto LABEL_78;
      }
    }
  }
  if ((_DWORD)v74 != 92)
  {
    v198 += 2;
    if ((a4 & 0x800) == 0)
    {
      if (v48 <= (int)v74)
        goto LABEL_190;
      goto LABEL_437;
    }
    if ((~(_DWORD)v74 & 0xC0) != 0)
    {
      LODWORD(v76) = 0;
    }
    else
    {
      v76 = utf8_table4[v74 & 0x3F];
      LODWORD(v74) = (utf8_table3[v76] & v74) << (6 * v76);
      v77 = (char *)(v72 + 3);
      if (v76 <= 1)
        v78 = 1;
      else
        v78 = v76;
      v79 = 6 * v76 - 6;
      do
      {
        v80 = *v77++;
        v74 = ((v80 & 0x3F) << v79) | v74;
        v79 -= 6;
        --v78;
      }
      while (v78);
    }
    v198 = &v73[v76];
LABEL_165:
    if ((v74 & 0x80000000) == 0)
      goto LABEL_166;
    goto LABEL_182;
  }
  v198 += 2;
  v75 = check_escape(&v198, a5, v185, v21, 1);
  if (*a5)
    goto LABEL_418;
  v74 = v75;
  if ((_DWORD)v75 == -15)
  {
    v74 = 88;
    v21 = v186;
    v23 = v180;
    v18 = v172;
    goto LABEL_166;
  }
  v21 = v186;
  v23 = v180;
  v18 = v172;
  if ((_DWORD)v75 != -4)
    goto LABEL_165;
  v74 = 8;
LABEL_166:
  if ((int)v74 >= v48)
  {
    if ((a4 & 0x800) != 0)
    {
      v81 = v168 && v74 > 0x7F;
      v82 = v81;
      if (v74 > 0xFF || v82)
      {
        if (!v170)
          v22 += 4;
        if (v168)
        {
          v188 = 0;
          v87 = v74;
          v187 = v48;
          v167 = v58;
LABEL_196:
          v175 = v22;
LABEL_197:
          v88 = v87;
LABEL_198:
          v87 = v88;
          while (1)
          {
            v89 = v87;
            if (!get_othercase_range(&v187, v74, (_DWORD *)&v188 + 1, &v188))
              break;
            v88 = v188;
            v90 = HIDWORD(v188);
            v87 = v89;
            if (SHIDWORD(v188) < v48 || (int)v188 > (int)v89)
            {
              if (SHIDWORD(v188) < v48 && (int)v188 >= v48 - 1)
              {
                v48 = HIDWORD(v188);
                goto LABEL_197;
              }
              if ((int)v188 <= (int)v89 || SHIDWORD(v188) > (int)v89 + 1)
              {
                v171 = ord2utf8(SHIDWORD(v188), (uint64_t)&v189);
                if (v90 == (_DWORD)v88)
                  v93 = 0;
                else
                  v93 = ord2utf8(v88, (uint64_t)&v189);
                v22 = v175 + v171 + v93 + 1;
                v87 = v89;
                goto LABEL_196;
              }
              goto LABEL_198;
            }
          }
          v22 = v175;
          LODWORD(v74) = v89;
          v58 = v167;
        }
        v94 = ord2utf8(v48, (uint64_t)&v189);
        v22 += v94 + ord2utf8(v74, (uint64_t)&v189) + 1;
        v174 = 10;
        v170 = 1;
        v21 = v186;
        v23 = v180;
        v18 = v172;
        goto LABEL_191;
      }
    }
    goto LABEL_190;
  }
LABEL_437:
  v160 = "range out of order in character class";
LABEL_417:
  *a5 = v160;
LABEL_418:
  v14 = 0;
  *a6 = (_DWORD)v198 - (_DWORD)v184;
  return v14;
}

uint64_t valid_utf8(char *a1, int a2)
{
  char *v2;
  int v3;
  char *v4;
  int v5;
  unsigned __int8 *v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  char v10;

  if (a2 < 0)
  {
    a2 = -1;
    v2 = a1;
    do
    {
      v3 = *v2++;
      ++a2;
    }
    while (v3);
  }
  if (a2 >= 1)
  {
    v4 = a1;
    do
    {
      v5 = a2 - 1;
      if (*v4 < 0)
      {
        v7 = *v4;
        if ((~v7 & 0xC0) != 0)
          return ((_DWORD)v4 - (_DWORD)a1);
        v8 = utf8_table4[*v4 & 0x3F];
        if (a2 <= v8)
          return ((_DWORD)v4 - (_DWORD)a1);
        v6 = (unsigned __int8 *)(v4 + 1);
        if ((v4[1] & 0xC0) != 0x80)
          return ((_DWORD)v6 - (_DWORD)a1);
        v5 -= v8;
        switch(*v4 & 0x3F)
        {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
            if ((v7 & 0x3E) == 0)
              return ((_DWORD)v6 - (_DWORD)a1);
            goto LABEL_8;
          case 0x20:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
          case 0x2A:
          case 0x2B:
          case 0x2C:
          case 0x2D:
          case 0x2E:
          case 0x2F:
            if (v7 == 224 && (v4[1] & 0x20) == 0)
              return ((_DWORD)v6 - (_DWORD)a1);
            break;
          case 0x30:
          case 0x31:
          case 0x32:
          case 0x33:
          case 0x34:
          case 0x35:
          case 0x36:
          case 0x37:
            if (v7 == 240 && (v4[1] & 0x30) == 0)
              return ((_DWORD)v6 - (_DWORD)a1);
            break;
          case 0x38:
          case 0x39:
          case 0x3A:
          case 0x3B:
            if (v7 == 248 && (v4[1] & 0x38) == 0)
              return ((_DWORD)v6 - (_DWORD)a1);
            break;
          case 0x3C:
          case 0x3D:
          case 0x3E:
          case 0x3F:
            if (v7 > 0xFD || v7 == 252 && (v4[1] & 0x3C) == 0)
              return ((_DWORD)v6 - (_DWORD)a1);
            break;
          default:
            break;
        }
        LODWORD(v4) = 1 - (_DWORD)a1 + (_DWORD)v4;
        while (1)
        {
          v9 = __OFSUB__(v8--, 1);
          if ((v8 < 0) ^ v9 | (v8 == 0))
            break;
          v10 = *++v6;
          v4 = (char *)((_DWORD)v4 + 1);
          if ((v10 & 0xC0) != 0x80)
            return (uint64_t)v4;
        }
      }
      else
      {
        v6 = (unsigned __int8 *)v4;
      }
LABEL_8:
      v4 = (char *)(v6 + 1);
      a2 = v5;
    }
    while (v5 >= 1);
  }
  return 0xFFFFFFFFLL;
}

uint64_t is_counted_repeat(unsigned __int8 *a1)
{
  unsigned __int8 *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((digitab[*a1] & 4) == 0)
    return 0;
  do
  {
    v2 = a1;
    v4 = *++a1;
    v3 = v4;
  }
  while ((digitab[v4] & 4) != 0);
  if (v3 != 44)
    return v3 == 125;
  v5 = v2[2];
  if (v5 == 125)
    return 1;
  if ((digitab[v5] & 4) == 0)
    return 0;
  v6 = 2;
  do
    v7 = a1[v6++];
  while ((digitab[v7] & 4) != 0);
  return (_DWORD)v7 == 125;
}

uint64_t check_escape(unsigned __int8 **a1, const char **a2, int a3, __int16 a4, int a5)
{
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  const char *v9;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char v16;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned int v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;

  v5 = *a1;
  v7 = *a1 + 1;
  v6 = *v7;
  if (!*v7)
  {
    v9 = "\\ at end of pattern";
    goto LABEL_6;
  }
  if ((v6 - 123) < 0xFFFFFFB5)
    goto LABEL_7;
  v8 = v6 - 48;
  if (escapes_0[(v6 - 48)])
  {
    v6 = escapes_0[v8];
    goto LABEL_7;
  }
  if ((v6 - 49) < 9)
  {
    if (!a5)
    {
      v11 = v5[2];
      if ((digitab[v5[2]] & 4) != 0)
      {
        v12 = v6 - 48;
        do
        {
          v12 = v11 + 10 * v12 - 48;
          v11 = v7[2];
          v16 = digitab[v7[2]];
          ++v7;
        }
        while ((v16 & 4) != 0);
      }
      else
      {
        v12 = v6 - 48;
      }
      if (v12 < 10 || v12 <= a3)
      {
        v6 = (-20 - v12);
        goto LABEL_7;
      }
    }
    if (v6 > 0x37)
    {
      v6 = 0;
LABEL_35:
      v7 = v5;
      goto LABEL_7;
    }
LABEL_36:
    v18 = 0;
    v7 = v5 + 3;
    while (1)
    {
      v19 = v5[v18 + 2];
      if ((v19 & 0xF8) != 0x30)
        break;
      LOBYTE(v8) = v19 + 8 * v8 - 48;
      if ((_DWORD)++v18 == 2)
        goto LABEL_41;
    }
    v7 = &v5[v18 + 1];
LABEL_41:
    v6 = v8;
    goto LABEL_7;
  }
  v13 = (v6 - 76);
  if (v13 > 0x2C)
    goto LABEL_22;
  if (((1 << (v6 - 76)) & 0x20100000205) != 0)
  {
    v9 = "PCRE does not support \\L, \\l, \\N, \\U, or \\u";
    goto LABEL_6;
  }
  if (v13 == 23)
  {
    v20 = v5[2];
    v5 += 2;
    v6 = v20;
    if (!v20)
    {
      *a2 = "\\c at end of pattern";
      return v6;
    }
    if ((v6 - 97) < 0x1A)
      LODWORD(v6) = v6 - 32;
    v6 = v6 ^ 0x40;
    goto LABEL_35;
  }
  if (v13 != 44)
  {
LABEL_22:
    if ((_DWORD)v6 == 48)
      goto LABEL_36;
    if ((a4 & 0x40) == 0)
      goto LABEL_7;
    v9 = "unrecognized character follows \\";
LABEL_6:
    *a2 = v9;
    goto LABEL_7;
  }
  if ((a4 & 0x800) == 0 || v5[2] != 123)
    goto LABEL_59;
  v7 = v5 + 3;
  v14 = v5[3];
  if ((digitab[v5[3]] & 8) != 0)
  {
    v15 = 0;
    LODWORD(v6) = 0;
    do
    {
      v21 = &v5[v15];
      if (v14 > 0x60)
        v14 -= 32;
      v22 = v14 + 16 * v6;
      if (v14 >= 65)
        v23 = -55;
      else
        v23 = -48;
      v6 = (v22 + v23);
      v14 = v21[4];
      ++v15;
    }
    while ((digitab[v21[4]] & 8) != 0);
    v7 = &v5[v15 + 3];
  }
  else
  {
    v6 = 0;
    LODWORD(v15) = 0;
  }
  if (v14 != 125)
  {
LABEL_59:
    v24 = 0;
    v6 = 0;
    v7 = v5 + 3;
    while (1)
    {
      v25 = v5[v24 + 2];
      if ((digitab[v25] & 8) == 0)
        break;
      if (v25 > 0x60)
        LODWORD(v25) = v25 - 32;
      v26 = v25 + 16 * v6;
      if ((int)v25 >= 65)
        v27 = -55;
      else
        v27 = -48;
      v6 = (v26 + v27);
      if ((_DWORD)++v24 == 2)
        goto LABEL_7;
    }
    v7 = &v5[v24 + 1];
    goto LABEL_7;
  }
  if ((v6 & 0x80000000) != 0 || v15 >= 9)
  {
    v9 = "character value in \\x{...} sequence is too large";
    goto LABEL_6;
  }
LABEL_7:
  *a1 = v7;
  return v6;
}

uint64_t get_ucp_0(_QWORD *a1, _DWORD *a2, const char **a3)
{
  uint64_t v5;
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  int v9;
  uint64_t i;
  int v11;
  int v12;
  int v13;
  const char *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  char __s1[4];

  v5 = *a1;
  v7 = (_BYTE *)(*a1 + 1);
  v6 = *v7;
  if (!*v7)
  {
LABEL_15:
    v14 = "malformed \\P or \\p sequence";
LABEL_26:
    *a3 = v14;
    *a1 = v7;
    return 0xFFFFFFFFLL;
  }
  *a2 = 0;
  if (v6 == 123)
  {
    v9 = *(unsigned __int8 *)(v5 + 2);
    v8 = (_BYTE *)(v5 + 2);
    if (v9 == 94)
    {
      *a2 = 1;
      v7 = v8;
    }
    for (i = 0; i != 3; ++i)
    {
      v11 = v7[i + 1];
      if (!v7[i + 1])
      {
        v7 += i + 1;
        goto LABEL_15;
      }
      if (v11 == 125)
      {
        v7 += i + 1;
        goto LABEL_17;
      }
      __s1[i] = v11;
    }
    v7 += 3;
    while (1)
    {
      v13 = *++v7;
      v12 = v13;
      if (!v13)
        goto LABEL_15;
      if (v12 == 125)
        goto LABEL_25;
    }
  }
  __s1[0] = v6;
  i = 1;
LABEL_17:
  v15 = 0;
  __s1[i] = 0;
  *a1 = v7;
  v16 = 37;
  while (1)
  {
    v17 = v16 + v15;
    if (v16 + v15 < 0 != __OFADD__(v16, v15))
      ++v17;
    v18 = (uint64_t)v17 >> 1;
    v19 = strcmp(__s1, (&utt)[2 * (v17 >> 1)]);
    if (!v19)
      return LODWORD((&utt)[2 * v18 + 1]);
    if (v19 <= 0)
      v16 = v18;
    else
      v15 = v18 + 1;
    if (v15 >= v16)
    {
LABEL_25:
      v14 = "unknown property name after \\P or \\p";
      goto LABEL_26;
    }
  }
}

unsigned __int8 *read_repeat_counts_0(unsigned __int8 *result, int *a2, int *a3, const char **a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  const char *v13;

  v4 = *result;
  if ((digitab[*result] & 4) != 0)
  {
    v5 = 0;
    v6 = *result;
    do
    {
      v7 = *++result;
      v4 = v7;
      v5 = v6 + 10 * v5 - 48;
      v6 = v7;
    }
    while ((digitab[v7] & 4) != 0);
  }
  else
  {
    v5 = 0;
  }
  if (v4 == 125)
  {
    v8 = v5;
  }
  else
  {
    v10 = *++result;
    v9 = v10;
    if (v10 == 125)
    {
      v8 = -1;
    }
    else
    {
      if ((digitab[v9] & 4) != 0)
      {
        v8 = 0;
        do
        {
          v11 = v9 + 10 * v8;
          v12 = *++result;
          LODWORD(v9) = v12;
          v8 = v11 - 48;
        }
        while ((digitab[v12] & 4) != 0);
      }
      else
      {
        v8 = 0;
      }
      if (v8 < v5)
      {
        v13 = "numbers out of order in {} quantifier";
        goto LABEL_19;
      }
    }
  }
  if (v5 < 0x10000 && v8 < 0x10000)
  {
    *a2 = v5;
    *a3 = v8;
    return result;
  }
  v13 = "number too big in {} quantifier";
LABEL_19:
  *a4 = v13;
  return result;
}

uint64_t get_othercase_range(int *a1, int a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result;
  int v6;
  int v10;
  int v11;
  unsigned int v12;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v19;
  int v20;

  result = 0;
  v19 = 0;
  v6 = *a1;
  if (*a1 <= a2)
  {
    v10 = a2 + 1;
    while (1)
    {
      v11 = ucp_findchar(v6, &v20, &v19);
      v12 = v19;
      if (v11 == 1 && v19 != 0)
        break;
      if (v10 == ++v6)
        return 0;
    }
    v14 = 0;
    *a3 = v19;
    do
    {
      v15 = v14;
      v16 = v6 + v14;
      v17 = v6 + v14 + 1;
      if (v6 + v14 >= a2)
        break;
      ++v14;
    }
    while (ucp_findchar(v16 + 1, &v20, &v19) == 1 && v14 + v12 == v19);
    *a4 = v12 + v15;
    *a1 = v17;
    return 1;
  }
  return result;
}

uint64_t ord2utf8(int a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  int v4;
  unsigned int v5;

  v2 = 0;
  while (utf8_table1[v2] < a1)
  {
    if (++v2 == 6)
    {
      v3 = (_BYTE *)(a2 + 6);
      v4 = 6;
      goto LABEL_6;
    }
  }
  v3 = (_BYTE *)(a2 + v2);
  v4 = v2;
  if ((int)v2 <= 0)
    goto LABEL_8;
LABEL_6:
  v5 = v4 + 1;
  do
  {
    *v3-- = a1 & 0x3F | 0x80;
    a1 >>= 6;
    --v5;
  }
  while (v5 > 1);
LABEL_8:
  *v3 = utf8_table2[4 * v2] | a1;
  return (v4 + 1);
}

uint64_t compile_regex_0(uint64_t a1, int a2, int *a3, unint64_t *a4, unsigned __int8 **a5, const char **a6, int a7, int a8, int *a9, int *a10, uint64_t a11, uint64_t a12)
{
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  char *v18;
  _BYTE *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  __int16 v33;
  unsigned __int8 *v34;
  unsigned __int8 v35;
  uint64_t v36;
  int v37;
  unsigned __int8 v38;
  char v39;
  __int16 v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *repeat_counts_0;
  unsigned __int8 *v49;
  int v50;
  int v51;
  unsigned __int8 *v52;
  int v53;
  uint64_t v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  char v60;
  unsigned int v61;
  __int16 v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  char v72;
  int v73;
  int v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  BOOL v80;
  unsigned __int8 *v81;
  unsigned int v82;
  unsigned int v83;
  unint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  int v90;
  char v91;
  unsigned __int8 *v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  unsigned __int8 *v96;
  int v97;
  int v98;
  unsigned __int8 *v99;
  int v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  unsigned __int8 *v105;
  uint64_t v106;
  unsigned __int8 *v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  int v112;
  char v113;
  uint64_t v114;
  int v115;
  BOOL v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  int8x16_t *v124;
  int ucp_0;
  char v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  __int8 v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v140;
  uint64_t v141;
  int8x16_t *v142;
  int8x16_t v143;
  int8x16_t v144;
  uint64_t i;
  __int8 v146;
  uint64_t j;
  uint64_t v148;
  int8x16_t *v149;
  unsigned int v150;
  BOOL v151;
  char v152;
  int *v153;
  int v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  char v160;
  char v161;
  char *v162;
  size_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  char *v167;
  int v168;
  int v169;
  char *v170;
  int8x16_t v171;
  char v172;
  uint64_t v173;
  unsigned __int8 *v174;
  unsigned __int8 v175;
  _BOOL4 v177;
  int v178;
  size_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  char *v183;
  int v184;
  int v185;
  unsigned int v186;
  unsigned int v187;
  int8x16_t *v188;
  uint64_t v189;
  int v190;
  int v191;
  unsigned __int8 *v192;
  unsigned int v193;
  unsigned int v194;
  uint64_t v195;
  unsigned __int8 *v196;
  unsigned int v197;
  uint64_t v198;
  int v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  char v204;
  _WORD *v205;
  int v206;
  int v207;
  unsigned int v208;
  BOOL v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int8x16_t v215;
  char v216;
  char v217;
  size_t v218;
  _BYTE *v219;
  int v220;
  size_t v221;
  __int16 v222;
  __int16 v223;
  char *v224;
  __int16 v225;
  size_t v226;
  unint64_t v227;
  size_t v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _BYTE *v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  int v244;
  size_t v245;
  int v246;
  char v247;
  char *v248;
  uint64_t v249;
  unsigned int v250;
  BOOL v251;
  unsigned __int8 *v252;
  int *v253;
  int v254;
  unsigned int v255;
  unsigned __int8 *v256;
  int v257;
  unsigned __int8 *v258;
  uint64_t v259;
  int v260;
  unsigned __int8 *v261;
  uint64_t v262;
  int v263;
  int v264;
  const char *v265;
  const char *v266;
  unsigned __int8 *v267;
  uint64_t v268;
  int v269;
  int v270;
  size_t v271;
  uint64_t v272;
  int v273;
  int v274;
  unsigned __int8 *v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  _BYTE *v279;
  unsigned __int8 *v280;
  uint64_t v281;
  uint64_t v282;
  unsigned __int8 *v283;
  int v284;
  int v285;
  size_t v286;
  uint64_t v287;
  int v288;
  unint64_t v289;
  int v290;
  int v291;
  uint64_t v292;
  int v293;
  _BOOL4 v294;
  BOOL v295;
  int v296;
  uint64_t v297;
  int v298;
  int v299;
  int v300;
  int v301;
  unsigned __int8 *v302;
  int v303;
  _BOOL4 v305;
  int v306;
  BOOL v307;
  int v308;
  int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  unsigned int fixedlength;
  unsigned int v317;
  const char *v318;
  uint64_t result;
  unsigned __int8 *v320;
  unsigned int v321;
  uint64_t v322;
  unint64_t v323;
  unint64_t *v324;
  int v325;
  int v326;
  const char *v327;
  __int16 v329;
  char *v330;
  char *v331;
  int v332;
  int v333;
  int v334;
  int v335;
  unsigned __int8 *v336;
  _WORD *v337;
  unsigned int v338;
  void *v339;
  unsigned int v340;
  unsigned int v341;
  unsigned int v342;
  unsigned int v343;
  unsigned int v344;
  _BOOL4 v347;
  BOOL v348;
  unsigned int v349;
  unsigned int v350;
  unsigned int v351;
  unsigned int v352;
  unsigned int v353;
  unsigned int v354;
  unsigned int v355;
  int v356;
  unsigned int v357;
  unsigned int v358;
  int v360;
  unsigned int v361;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  unsigned int v365;
  int v367;
  char *v368;
  int v369;
  int v370;
  int v371;
  _BYTE *v372;
  unsigned int v373;
  char v374;
  unsigned int v375;
  unsigned int v376;
  int v377;
  int v378;
  unsigned int v379;
  unsigned int v380;
  uint64_t v381;
  unint64_t v382;
  int v383;
  uint64_t v384;
  uint64_t v385;
  int __src;
  __int16 v387;
  unsigned __int8 *v388;
  char *v389;
  uint64_t v390;
  _BYTE v391[8];
  int8x16_t v392;
  int8x16_t v393;
  uint64_t v394;

  v337 = 0;
  v394 = *MEMORY[0x1E0C80C00];
  v13 = (unsigned __int8 *)*a4;
  v14 = (unsigned __int8 *)(*a4 + (a8 + 3));
  v15 = a12;
  v16 = *a5;
  v381 = a11;
  v382 = (unint64_t)v13;
  *(_WORD *)(v13 + 1) = 0;
  v329 = (__int16)v13;
  v336 = v13;
  v334 = -2;
  v335 = -2;
  v333 = a2;
  while (2)
  {
    if ((a1 & 7) != a2)
    {
      *v14 = 18;
      v14[1] = a1 & 7;
      v14 += 2;
    }
    if (a7)
    {
      v337 = v14 + 1;
      *(_WORD *)v14 = 73;
      v14[2] = 0;
      v14 += 3;
    }
    v367 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v389 = 0;
    v390 = 0;
    v20 = a1 & 0x800;
    v338 = (a1 >> 11) & 1;
    v388 = v16;
    v387 = 0;
    v355 = (a1 >> 9) & 1;
    v356 = 0;
    v347 = 0;
    v348 = (a1 & 0x200) == 0;
    v371 = (a1 & 1) << 8;
    v21 = 4294967294;
    __src = 0;
    v22 = 4294967294;
    v380 = -2;
    v23 = 4294967294;
    v370 = v20;
    while (1)
    {
      v385 = 0;
      v24 = *v16;
      if ((_DWORD)v17 && *v16)
      {
        if ((_DWORD)v24 == 92 && v16[1] == 69)
        {
          v17 = 0;
          v388 = v16 + 1;
LABEL_87:
          v32 = (unint64_t)v18;
          goto LABEL_499;
        }
        if (v19)
          *((_WORD *)v19 + 2) = bswap32((_DWORD)v16 - *(_DWORD *)(v15 + 40) - (bswap32(*((unsigned __int16 *)v19 + 1)) >> 16)) >> 16;
        if ((a1 & 0x4000) != 0)
        {
          v33 = (__int16)v388;
          *(_WORD *)v14 = -192;
          v14[2] = (unsigned __int16)(v33 - *(_WORD *)(v15 + 40)) >> 8;
          v14[3] = v33 - *(_BYTE *)(v15 + 40);
          *((_WORD *)v14 + 2) = 0;
          v32 = (unint64_t)(v14 + 6);
          v19 = v14;
        }
        else
        {
          v19 = 0;
          v32 = (unint64_t)v14;
        }
LABEL_25:
        v391[0] = v24;
        if (!v20 || (v24 & 0xC0) != 0xC0)
          goto LABEL_351;
        v34 = v388;
        v35 = v388[1];
        if ((v35 & 0xC0) == 0x80)
        {
          v36 = 0;
          do
          {
            v391[v36 + 1] = v35;
            v35 = v34[v36++ + 2];
          }
          while ((v35 & 0xC0) == 0x80);
          v37 = v36 + 1;
          v34 += v36;
        }
        else
        {
          v37 = 1;
        }
        v388 = v34;
LABEL_33:
        if ((a1 & 1) != 0)
          v38 = 22;
        else
          v38 = 21;
        *(_BYTE *)v32 = v38;
        v14 = (unsigned __int8 *)(v32 + 1);
        if (v37 >= 1)
          goto LABEL_355;
        goto LABEL_357;
      }
      v25 = 1;
      v373 = v23;
      if ((v24 - 42) >= 2 && (_DWORD)v24 != 63)
      {
        if ((_DWORD)v24 == 123)
        {
          v26 = v21;
          v27 = v19;
          v28 = v17;
          v29 = v15;
          v30 = v22;
          v31 = is_counted_repeat(v16 + 1);
          v22 = v30;
          v15 = v29;
          v17 = v28;
          v23 = v373;
          v19 = v27;
          v20 = v370;
          v80 = v31 == 0;
          v21 = v26;
          v25 = !v80;
          if ((v25 & 1) != 0)
            goto LABEL_42;
        }
        else
        {
          v25 = 0;
        }
        if (v19)
        {
          if (v367 <= 0)
          {
            v25 = 0;
            *((_WORD *)v19 + 2) = bswap32((_DWORD)v16- *(_DWORD *)(v15 + 40)- (bswap32(*((unsigned __int16 *)v19 + 1)) >> 16)) >> 16;
            --v367;
            v19 = 0;
            if ((a1 & 8) == 0)
              goto LABEL_43;
            goto LABEL_66;
          }
          v25 = 0;
          --v367;
        }
      }
LABEL_42:
      if ((a1 & 8) == 0)
        goto LABEL_43;
LABEL_66:
      if ((*(_BYTE *)(*(_QWORD *)(v15 + 24) + v24) & 1) != 0)
        goto LABEL_87;
      if ((_DWORD)v24 == 35)
      {
        v49 = v388;
        while (1)
        {
          v51 = *++v49;
          v50 = v51;
          if (v51 == 10)
            break;
          if (!v50)
          {
            LODWORD(v24) = 0;
            v388 = v49;
            goto LABEL_43;
          }
        }
        v388 = v49;
        goto LABEL_87;
      }
LABEL_43:
      if ((a1 & 0x4000) != 0)
        v39 = v25;
      else
        v39 = 1;
      if ((v39 & 1) != 0)
      {
        v32 = (unint64_t)v14;
      }
      else
      {
        v40 = (__int16)v388;
        *(_WORD *)v14 = -192;
        v14[2] = (unsigned __int16)(v40 - *(_WORD *)(v15 + 40)) >> 8;
        v14[3] = v40 - *(_BYTE *)(v15 + 40);
        *((_WORD *)v14 + 2) = 0;
        v32 = (unint64_t)(v14 + 6);
        v19 = v14;
      }
      v372 = v19;
      if ((int)v24 <= 62)
      {
        switch((int)v24)
        {
          case '$':
            v41 = 20;
            goto LABEL_289;
          case '%':
          case '&':
          case '\'':
          case ',':
          case '-':
            goto LABEL_25;
          case '(':
            v52 = v388;
            v53 = *++v388;
            if (v53 != 63)
            {
              if ((a1 & 0x1000) != 0)
              {
                v155 = 0;
                v156 = 80;
                v157 = a1;
                v153 = a3;
                goto LABEL_606;
              }
              goto LABEL_310;
            }
            break;
          case ')':
            goto LABEL_651;
          case '*':
            HIDWORD(v390) = 0;
            goto LABEL_78;
          case '+':
            HIDWORD(v390) = 1;
LABEL_78:
            LODWORD(v390) = -1;
            goto LABEL_79;
          case '.':
            if ((_DWORD)v23 == -2)
              v21 = 0xFFFFFFFFLL;
            else
              v21 = v23;
            *(_BYTE *)v32 = 11;
            v14 = (unsigned __int8 *)(v32 + 1);
            goto LABEL_85;
          default:
            if (!(_DWORD)v24)
              goto LABEL_651;
            goto LABEL_25;
        }
        v384 = 0;
        v55 = v52 + 2;
        v54 = v52[2];
        v388 = v52 + 2;
        switch(v54)
        {
          case '!':
            v155 = 0;
            v388 = v52 + 3;
            v156 = 70;
            goto LABEL_603;
          case '#':
            v256 = v52 + 2;
            do
              v257 = *++v256;
            while (v257 != 41);
            v388 = v256;
            v199 = 4;
            goto LABEL_548;
          case '(':
            v258 = v52 + 3;
            v259 = v52[3];
            if (v259 == 82)
            {
              *(_WORD *)(v32 + 3) = -180;
              *(_BYTE *)(v32 + 5) = -1;
              v388 += 3;
LABEL_583:
              v156 = 75;
              v155 = 3;
LABEL_603:
              v157 = a1;
              goto LABEL_604;
            }
            if (!digitab[v259])
            {
              v155 = 0;
              v156 = 75;
              goto LABEL_603;
            }
            v273 = v259 - 48;
            v275 = v52 + 4;
            v274 = v52[4];
            if (v274 != 41)
            {
              v258 = v52 + 3;
              do
              {
                v273 = v274 + 10 * v273 - 48;
                v274 = v258[2];
                ++v258;
              }
              while (v274 != 41);
              v275 = v258 + 1;
            }
            v388 = v275;
            if (v273)
            {
              v388 = v258 + 2;
              *(_BYTE *)(v32 + 3) = 76;
              *(_BYTE *)(v32 + 4) = BYTE1(v273);
              *(_BYTE *)(v32 + 5) = v273;
              goto LABEL_583;
            }
            *a6 = "invalid condition (?(0)";
            v356 = 75;
            v199 = 9;
LABEL_548:
            v14 = (unsigned __int8 *)v32;
            goto LABEL_644;
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
            goto LABEL_74;
          case ':':
            v155 = 0;
            v388 = v52 + 3;
            v156 = 80;
            goto LABEL_603;
          case '<':
            v260 = v52[3];
            v388 = v52 + 3;
            if (v260 == 33)
            {
              v155 = 0;
              v388 = v52 + 4;
              v156 = 72;
              goto LABEL_603;
            }
            v153 = a3;
            v155 = 0;
            if (v260 == 61)
            {
              v388 = v52 + 4;
              v156 = 71;
              goto LABEL_427;
            }
            v157 = a1;
            v156 = v356;
            goto LABEL_605;
          case '=':
            v155 = 0;
            v388 = v52 + 3;
            v156 = 69;
            goto LABEL_603;
          case '>':
            v155 = 0;
            v388 = v52 + 3;
            v156 = 74;
            goto LABEL_603;
          case 'C':
            *(_BYTE *)v32 = 64;
            v14 = (unsigned __int8 *)(v32 + 1);
            v261 = v388 + 1;
            v262 = v388[1];
            if ((digitab[v262] & 4) == 0)
            {
              LOBYTE(v263) = 0;
              ++v388;
LABEL_587:
              *(_BYTE *)(v32 + 1) = v263;
              *(_BYTE *)(v32 + 2) = (unsigned __int16)((_WORD)v388 - *(_WORD *)(v15 + 40) + 1) >> 8;
              v14 = (unsigned __int8 *)(v32 + 6);
              *(_BYTE *)(v32 + 3) = (_BYTE)v388 - *(_DWORD *)(v15 + 40) + 1;
              *(_WORD *)(v32 + 4) = 0;
              v199 = 4;
              v367 = 1;
              v19 = (_BYTE *)v32;
              v32 = 0;
              goto LABEL_645;
            }
            v263 = 0;
            do
            {
              v263 = v262 + 10 * v263 - 48;
              v276 = *++v261;
              LODWORD(v262) = v276;
            }
            while ((digitab[v276] & 4) != 0);
            v388 = v261;
            if (v263 < 256)
              goto LABEL_587;
            *a6 = "number after (?C is > 255";
            v199 = 9;
            v367 = 1;
            v19 = (_BYTE *)v32;
            goto LABEL_644;
          case 'P':
            v264 = v52[3];
            v388 = v52 + 3;
            if ((v264 - 61) < 2)
            {
              v343 = v22;
              v353 = v21;
              v365 = v17;
              v265 = (const char *)(v52 + 4);
              v266 = *(const char **)(v15 + 48);
              v267 = v52 + 3;
              v268 = 0xFFFFFFFF00000000;
              do
              {
                v269 = *++v267;
                v268 += 0x100000000;
              }
              while (v269 != 41);
              v388 = v267;
              v270 = *(_DWORD *)(v15 + 56);
              if (v270 < 1)
              {
LABEL_566:
                *a6 = "reference to non-existent subpattern";
                v199 = 9;
                v14 = (unsigned __int8 *)v32;
                v20 = v370;
                v19 = v372;
                v23 = v373;
                v17 = v365;
                v21 = v353;
                v22 = v343;
              }
              else
              {
                v271 = v268 >> 32;
                while (strncmp(v265, v266 + 2, v271))
                {
                  v266 += *(int *)(v15 + 60);
                  if (!--v270)
                    goto LABEL_566;
                }
                v298 = *(unsigned __int8 *)v266;
                v299 = *((unsigned __int8 *)v266 + 1);
                v56 = v299 | (v298 << 8);
                v20 = v370;
                if (v264 == 62)
                {
                  v19 = v372;
                  v23 = v373;
                  v17 = v365;
                  v21 = v353;
                  v22 = v343;
LABEL_407:
                  *(_BYTE *)v32 = 0;
                  v192 = *(unsigned __int8 **)(v15 + 32);
                  if (v56)
                  {
                    v193 = *v192;
                    if (*v192)
                    {
                      while (1)
                      {
                        if (v193 < 0x51)
                        {
                          v195 = OP_lengths[v193];
                          v196 = &v192[v195];
                          if (v20)
                          {
                            if (v193 - 24 < 9 || v193 - 21 < 2)
                            {
                              v196 = &v192[v195 - 1];
                              do
                              {
                                v197 = *++v196;
                                v193 = v197;
                              }
                              while ((v197 & 0xC0) == 0x80);
                              goto LABEL_421;
                            }
                            if (v193 == 61)
                              v196 += __rev16(*(unsigned __int16 *)(v196 + 1)) + 1;
                          }
                        }
                        else
                        {
                          if (v193 < 0xB5)
                            v194 = v193 - 80;
                          else
                            v194 = __rev16(*((unsigned __int16 *)v192 + 2));
                          if (v194 == v56)
                            goto LABEL_437;
                          v196 = v192 + 3;
                        }
                        v193 = *v196;
LABEL_421:
                        v192 = v196;
                        if (!v193)
                          goto LABEL_439;
                      }
                    }
                    goto LABEL_439;
                  }
                  if (!v192)
                  {
LABEL_439:
                    *a6 = "reference to non-existent subpattern";
                    v199 = 9;
                    v14 = (unsigned __int8 *)v32;
                    goto LABEL_645;
                  }
LABEL_437:
                  v198 = v21;
                  if (__rev16(*(unsigned __int16 *)(v192 + 1)))
                  {
LABEL_438:
                    *(_BYTE *)v32 = 63;
                    *(_BYTE *)(v32 + 1) = (unsigned __int16)((_WORD)v192 - *(_WORD *)(v15 + 32)) >> 8;
                    *(_BYTE *)(v32 + 2) = (_BYTE)v192 - *(_DWORD *)(v15 + 32);
                    v14 = (unsigned __int8 *)(v32 + 3);
                    v199 = 4;
                  }
                  else
                  {
                    v241 = &v381;
                    do
                    {
                      v242 = v241[1];
                      if (v242 < (unint64_t)v192)
                        break;
                      v243 = v22;
                      v244 = could_be_empty_branch(v242, v32, v338);
                      v22 = v243;
                      v23 = v373;
                      v19 = v372;
                      if (!v244)
                        goto LABEL_438;
                      v241 = (uint64_t *)*v241;
                    }
                    while (v241);
                    *a6 = "recursive call could loop indefinitely";
                    v199 = 9;
                    v14 = (unsigned __int8 *)v32;
                  }
                  v20 = v370;
                  v21 = v198;
                  goto LABEL_645;
                }
                *(_BYTE *)v32 = 62;
                *(_BYTE *)(v32 + 1) = v298;
                *(_BYTE *)(v32 + 2) = v299;
                v14 = (unsigned __int8 *)(v32 + 3);
                v300 = 1 << v299;
                if (v56 >= 0x20)
                  v300 = 1;
                v301 = *(_DWORD *)(v15 + 64);
                *(_DWORD *)(v15 + 68) |= v300;
                v23 = v373;
                v17 = v365;
                v21 = v353;
                v22 = v343;
                if (v56 > v301)
                  *(_DWORD *)(v15 + 64) = v56;
                v199 = 4;
                v18 = (char *)v32;
                v19 = v372;
              }
LABEL_644:
              v32 = (unint64_t)v18;
              goto LABEL_645;
            }
            if (v264 != 60)
            {
              v155 = 0;
              v157 = a1;
              v156 = v356;
              goto LABEL_604;
            }
            v277 = v15;
            v278 = a1;
            v279 = *(_BYTE **)(v277 + 48);
            v280 = v52 + 4;
            v281 = 0x100000000;
            v282 = 0xFFFFFFFF00000000;
            v283 = v280;
            do
            {
              v284 = *v283++;
              v281 += 0x100000000;
              v282 += 0x100000000;
            }
            while (v284 != 62);
            v388 = v283;
            v285 = *(_DWORD *)(a12 + 56);
            v286 = v282 >> 32;
            v287 = v281 >> 32;
            if (v285 < 1)
              goto LABEL_649;
            v344 = v22;
            v354 = v21;
            while (1)
            {
              v288 = memcmp(v280, v279 + 2, v286);
              if (!v288)
                break;
              if (v288 < 0)
                goto LABEL_648;
              v279 += *(int *)(a12 + 60);
              if (!--v285)
                goto LABEL_649;
            }
            if (v279[v287])
            {
LABEL_648:
              memmove(&v279[*(int *)(a12 + 60)], v279, *(int *)(a12 + 60) * (uint64_t)v285);
LABEL_649:
              *v279 = (unsigned __int16)(*(_WORD *)a3 + 1) >> 8;
              v279[1] = *(_BYTE *)a3 + 1;
              memcpy(v279 + 2, v280, v286);
              v279[v287] = 0;
              ++*(_DWORD *)(a12 + 56);
              a1 = v278;
              v15 = a12;
LABEL_310:
              v153 = a3;
              v154 = (*a3)++;
              if (v154 >= 100)
              {
                *(_BYTE *)(v32 + 3) = 79;
                *(_BYTE *)(v32 + 4) = BYTE1(*a3);
                *(_BYTE *)(v32 + 5) = *a3;
                v155 = 3;
                v156 = 181;
                v157 = a1;
                goto LABEL_606;
              }
              v155 = 0;
              v156 = v154 + 81;
LABEL_427:
              v157 = a1;
LABEL_605:
              if (v156 < 74)
              {
                v289 = 0;
LABEL_608:
                *(_BYTE *)v32 = v156;
                v389 = (char *)v32;
                v290 = *(_DWORD *)(v15 + 72);
                v356 = v156;
                v291 = compile_regex_0(v157, a1 & 7, v153, &v389, &v388, a6, (v156 - 71) < 2, v155, &v385, (char *)&v385 + 4, &v381, v15);
                v20 = v370;
                v19 = v372;
                v292 = v373;
                if (v291)
                {
                  if (v356 == 75)
                  {
                    v293 = 1;
                    do
                    {
                      v32 += __rev16(*(unsigned __int16 *)(v32 + 1));
                      --v293;
                    }
                    while (*(_BYTE *)v32 != 66);
                    if (-v293 != 1 && v293 != 0)
                    {
                      v318 = "conditional group contains more than two branches";
                      goto LABEL_689;
                    }
                    if (!v293)
                      v385 = -1;
                  }
                  if (v356 > 79 || (v356 & 0xFFFFFFFE) == 0x4A)
                  {
                    if (v373 == -2)
                    {
                      v294 = (int)v385 >= 0;
                      if ((int)v385 < 0)
                        v297 = 0xFFFFFFFFLL;
                      else
                        v297 = v385;
                      v292 = 0xFFFFFFFFLL;
                      v296 = HIDWORD(v385);
                    }
                    else
                    {
                      v294 = 0;
                      v296 = HIDWORD(v385);
                      if ((v385 & 0x80000000) == 0 && v385 < 0)
                      {
                        v294 = 0;
                        v296 = v385 | v290;
                        HIDWORD(v385) = v385 | v290;
                      }
                      v297 = v373;
                    }
                    if (v296 < 0)
                      v296 = v380;
                  }
                  else
                  {
                    v294 = 0;
                    v295 = SHIDWORD(v385) > -1 && v356 == 69;
                    v296 = v380;
                    if (v295)
                      v296 = HIDWORD(v385);
                    v297 = v373;
                  }
                  if (*v388 == 41)
                  {
                    v347 = v294;
                    v32 = v289;
                    v14 = (unsigned __int8 *)v389;
                    v21 = v292;
                    v22 = v380;
                    v380 = v296;
                    v23 = v297;
                    goto LABEL_499;
                  }
                  v318 = "missing)";
LABEL_689:
                  *a6 = v318;
                }
                goto LABEL_690;
              }
LABEL_606:
              v289 = v32;
              goto LABEL_608;
            }
            *a6 = "two named groups have the same name";
            v199 = 9;
            v14 = (unsigned __int8 *)v32;
            v32 = (unint64_t)v18;
            a1 = v278;
            v15 = a12;
            v20 = v370;
            v19 = v372;
            v23 = v373;
            v21 = v354;
            v22 = v344;
            goto LABEL_645;
          case 'R':
            v54 = v52[3];
            v55 = v52 + 3;
LABEL_74:
            if ((digitab[v54] & 4) != 0)
            {
              v56 = 0;
              do
              {
                v190 = 10 * v56 + v54;
                v191 = *++v55;
                LOBYTE(v54) = v191;
                v56 = v190 - 48;
              }
              while ((digitab[v191] & 4) != 0);
            }
            else
            {
              v56 = 0;
            }
            v388 = v55;
            goto LABEL_407;
          default:
            HIDWORD(v384) = 0;
            v252 = v52 + 3;
            v253 = (int *)&v384 + 1;
            while (2)
            {
              if (v54 == 41 || v54 == 58)
              {
                v272 = v21;
                v388 = v252 - 1;
                v157 = (HIDWORD(v384) | a1) & ~(_DWORD)v384;
                if (v54 != 41)
                {
                  v155 = 0;
                  v388 = v252;
                  v156 = 80;
LABEL_604:
                  v153 = a3;
                  goto LABEL_605;
                }
                if ((a1 & 7) != ((BYTE4(v384) | a1) & ~(_BYTE)v384 & 7))
                {
                  *(_BYTE *)v32 = 18;
                  *(_BYTE *)(v32 + 1) = v157 & 7;
                  v32 += 2;
                }
                v355 = (v157 >> 9) & 1;
                v348 = (v157 & 0x200) == 0;
                v371 = (v157 & 1) << 8;
                v199 = 4;
                a1 = v157;
                v14 = (unsigned __int8 *)v32;
                v32 = 0;
                v21 = v272;
LABEL_645:
                if (v199 == 4)
                  goto LABEL_499;
LABEL_690:
                result = 0;
                *a5 = v388;
                return result;
              }
              if (v54 <= 104)
              {
                switch(v54)
                {
                  case '-':
                    v253 = (int *)&v384;
                    break;
                  case 'U':
                    v254 = *v253 | 0x200;
                    goto LABEL_543;
                  case 'X':
                    v254 = *v253 | 0x40;
                    goto LABEL_543;
                }
              }
              else if (v54 > 114)
              {
                if (v54 == 115)
                {
                  v254 = *v253 | 4;
                  goto LABEL_543;
                }
                if (v54 == 120)
                {
                  v254 = *v253 | 8;
                  goto LABEL_543;
                }
              }
              else
              {
                if (v54 == 105)
                {
                  v254 = *v253 | 1;
                  goto LABEL_543;
                }
                if (v54 == 109)
                {
                  v254 = *v253 | 2;
LABEL_543:
                  *v253 = v254;
                }
              }
              v255 = *v252++;
              v54 = v255;
              continue;
            }
        }
      }
      if ((int)v24 > 93)
        break;
      if ((_DWORD)v24 == 63)
      {
        v390 = 1;
        if (!v18)
          goto LABEL_688;
        goto LABEL_89;
      }
      if ((_DWORD)v24 == 91)
      {
        v75 = v388;
        v78 = v388[1];
        v76 = v388 + 1;
        v77 = v78;
        v79 = (1 << v78) & 0x2400400000000000;
        v80 = v78 > 0x3D || v79 == 0;
        if (!v80)
        {
          v81 = v388 + 2;
          if (v388[2] == 94)
            v81 = v388 + 3;
          do
          {
            v83 = *v81++;
            v82 = v83;
          }
          while ((*(_BYTE *)(*(_QWORD *)(v15 + 24) + v83) & 2) != 0);
          if (v82 == v77 && *v81 == 93)
          {
            v318 = "POSIX collating elements are not supported";
            if (v77 == 58)
              v318 = "POSIX named classes are supported only within a class";
            goto LABEL_689;
          }
        }
        ++v388;
        LODWORD(v84) = v77;
        v349 = v77;
        if (v77 == 94)
        {
          LODWORD(v84) = v75[2];
          v388 = v75 + 2;
          v76 = v75 + 2;
        }
        v360 = 0;
        v85 = 0;
        v14 = (unsigned __int8 *)(v32 + 2);
        v392 = 0u;
        v393 = 0u;
        v86 = -1;
        v339 = (void *)(v32 + 36);
        v368 = (char *)(v32 + 36);
        while (1)
        {
          if (v20 && (char)v84 < 0 && (v84 & 0xC0) == 0xC0)
          {
            v87 = utf8_table4[v84 & 0x3F];
            LODWORD(v84) = (utf8_table3[v87] & v84) << (6 * v87);
            v88 = (char *)(v76 + 1);
            if (v87 <= 1)
              v89 = 1;
            else
              v89 = v87;
            v90 = 6 * v87 - 6;
            do
            {
              v91 = *v88++;
              LODWORD(v84) = ((v91 & 0x3F) << v90) | v84;
              v90 -= 6;
              --v89;
            }
            while (v89);
            v76 += v87;
            v388 = v76;
          }
          if ((_DWORD)v17)
          {
            if ((_DWORD)v84 != 92)
              goto LABEL_175;
            v93 = v76[1];
            v92 = v76 + 1;
            if (v93 != 69)
            {
              LODWORD(v84) = 92;
LABEL_178:
              v392.i8[(int)v84 / 8] |= 1 << (v84 & 7);
              if ((a1 & 1) != 0)
              {
                v84 = *(unsigned __int8 *)(*(_QWORD *)(v15 + 8) + (int)v84);
                v392.i8[v84 >> 3] |= 1 << (v84 & 7);
              }
              ++v85;
              v86 = v84;
              goto LABEL_181;
            }
          }
          else
          {
            if ((_DWORD)v84 != 92)
            {
              if ((_DWORD)v84 == 91)
              {
                v94 = v76[1];
                LODWORD(v84) = 91;
                if (v94 <= 0x3D && ((1 << v94) & 0x2400400000000000) != 0)
                {
                  v95 = 0;
                  v98 = v76[2];
                  v96 = v76 + 2;
                  v97 = v98;
                  if (v98 == 94)
                    v99 = v96 + 1;
                  else
                    v99 = v96;
                  do
                  {
                    v100 = v99[v95];
                    v101 = *(_BYTE *)(*(_QWORD *)(a12 + 24) + v99[v95++]);
                  }
                  while ((v101 & 2) != 0);
                  if (v100 == v94 && v99[v95] == 93)
                  {
                    if (v94 == 58)
                    {
                      v102 = 0;
                      v103 = 0;
                      v330 = *(char **)(a12 + 16);
                      v388 = v99;
                      while (posix_name_lengths_0[v103] + 1 != (_DWORD)v95
                           || strncmp((const char *)v99, (&posix_names_0)[v103], (v95 - 1)))
                      {
                        ++v103;
                        v102 += 0x300000000;
                        if (v103 == 14)
                          goto LABEL_687;
                      }
                      if ((v103 & 0x80000000) != 0)
                      {
LABEL_687:
                        v318 = "unknown POSIX class name";
                        goto LABEL_689;
                      }
                      v127 = v102 >> 32;
                      v128 = strncmp((const char *)v99, "blank", 5uLL);
                      v23 = v373;
                      v19 = v372;
                      v20 = v370;
                      v129 = 0;
                      a1 = a1;
                      if ((a1 & (v103 < 3)) != 0)
                        v130 = 0;
                      else
                        v130 = v127;
                      while (2)
                      {
                        if (((0x36DB6DB41B4uLL >> (v129 + v130)) & 1) != 0)
                        {
LABEL_240:
                          LODWORD(v17) = 0;
                          v388 = &v99[v95];
                          v85 = 10;
                          goto LABEL_241;
                        }
                        v131 = posix_class_maps_0[v129 + v130];
                        if (v97 == 94)
                        {
                          v132 = 0;
                          v133 = &v330[v131];
                          if (v129)
                          {
                            do
                            {
                              *(int8x16_t *)((char *)&v392 + v132) = vbicq_s8(*(int8x16_t *)((char *)&v392 + v132), *(int8x16_t *)&v133[v132]);
                              v132 += 16;
                            }
                            while (v132 != 32);
                          }
                          else
                          {
                            do
                            {
                              *(int8x16_t *)((char *)&v392 + v132) = vornq_s8(*(int8x16_t *)((char *)&v392 + v132), *(int8x16_t *)&v133[v132]);
                              v132 += 16;
                            }
                            while (v132 != 32);
                          }
                          if (!v128)
                          {
                            v134 = v392.i8[1] | 0x3C;
                            goto LABEL_238;
                          }
                        }
                        else
                        {
                          v135 = 0;
                          v136 = &v330[v131];
                          do
                          {
                            *(int8x16_t *)((char *)&v392 + v135) = vorrq_s8(*(int8x16_t *)((char *)&v392 + v135), *(int8x16_t *)&v136[v135]);
                            v135 += 16;
                          }
                          while (v135 != 32);
                          if (!v128)
                          {
                            v134 = v392.i8[1] & 0xC3;
LABEL_238:
                            v392.i8[1] = v134;
                          }
                        }
                        if (++v129 == 3)
                          goto LABEL_240;
                        continue;
                      }
                    }
                    v318 = "POSIX collating elements are not supported";
                    goto LABEL_689;
                  }
                  LODWORD(v84) = 91;
                }
              }
LABEL_160:
              v105 = v388;
              if (v388[1] == 45)
              {
                v106 = a1;
                v107 = v388 + 2;
                v108 = v388[2];
                if ((_DWORD)v108 == 93)
                  goto LABEL_173;
                v388 += 2;
                if (v20 && (v108 & 0xC0) == 0xC0)
                {
                  v109 = utf8_table4[v108 & 0x3F];
                  LODWORD(v108) = (utf8_table3[v109] & v108) << (6 * v109);
                  v110 = (char *)(v105 + 3);
                  if (v109 <= 1)
                    v111 = 1;
                  else
                    v111 = v109;
                  v112 = 6 * v109 - 6;
                  do
                  {
                    v113 = *v110++;
                    v108 = ((v113 & 0x3F) << v112) | v108;
                    v112 -= 6;
                    --v111;
                  }
                  while (v111);
                  v107 += v109;
                  v388 = v107;
                }
                if ((_DWORD)v108 != 92
                  || (v114 = check_escape(&v388, a6, *a3, v106, 1),
                      v23 = v373,
                      v19 = v372,
                      v20 = v370,
                      v108 = v114,
                      (v114 & 0x80000000) == 0))
                {
LABEL_172:
                  if ((_DWORD)v108 == (_DWORD)v84)
                    goto LABEL_173;
                  a1 = v106;
                  if (!v20
                    || ((int)v108 <= 255 ? (v117 = (v106 & ((int)v108 > 127)) == 0) : (v117 = 0), v117))
                  {
                    if ((int)v84 <= (int)v108)
                    {
                      v120 = (int)v84;
                      v86 = v84 - 1;
                      do
                      {
                        v121 = v86++;
                        if (v86 >= 0)
                          v122 = v121 + 1;
                        else
                          v122 = v121 + 8;
                        v392.i8[v122 >> 3] |= 1 << (v86 & 7);
                        if ((v106 & 1) != 0)
                        {
                          v123 = *(unsigned __int8 *)(*(_QWORD *)(a12 + 8) + v120);
                          v392.i8[v123 >> 3] |= 1 << (v123 & 7);
                        }
                        ++v120;
                      }
                      while ((_DWORD)v108 != v86);
                      LODWORD(v17) = 0;
                      v85 = v108 + v85 + 1 - v84;
                    }
                    else
                    {
                      LODWORD(v17) = 0;
                    }
LABEL_241:
                    v15 = a12;
                    goto LABEL_181;
                  }
                  if ((v106 & 1) != 0)
                  {
                    v384 = 0;
                    v118 = v108;
                    v383 = v84;
LABEL_245:
                    v137 = v118;
LABEL_246:
                    v118 = v137;
                    while (get_othercase_range(&v383, v108, (_DWORD *)&v384 + 1, &v384))
                    {
                      v137 = v384;
                      if (SHIDWORD(v384) < (int)v84 || (int)v384 > (int)v118)
                      {
                        if (SHIDWORD(v384) < (int)v84 && (int)v384 >= (int)v84 - 1)
                        {
                          LODWORD(v84) = HIDWORD(v384);
                          goto LABEL_245;
                        }
                        if ((int)v384 <= (int)v118 || SHIDWORD(v384) > (int)v118 + 1)
                        {
                          v140 = (uint64_t)(v368 + 1);
                          if (HIDWORD(v384) == (_DWORD)v384)
                          {
                            *v368 = 1;
                          }
                          else
                          {
                            *v368 = 2;
                            v140 += (int)ord2utf8(SHIDWORD(v384), v140);
                          }
                          v368 = (char *)(v140 + (int)ord2utf8(v384, v140));
                          goto LABEL_245;
                        }
                        goto LABEL_246;
                      }
                    }
                  }
                  else
                  {
                    LODWORD(v118) = v108;
                  }
                  *v368 = 2;
                  v119 = (uint64_t)&v368[(int)ord2utf8(v84, (uint64_t)(v368 + 1)) + 1];
                  LODWORD(v17) = 0;
                  v368 = (char *)(v119 + (int)ord2utf8(v118, v119));
                  v360 = 1;
                  a1 = v106;
                  v15 = a12;
LABEL_188:
                  v20 = v370;
                  v19 = v372;
                  v23 = v373;
                  goto LABEL_181;
                }
                if ((_DWORD)v114 == -4)
                {
                  v108 = 8;
                  goto LABEL_172;
                }
                if ((_DWORD)v114 == -15)
                {
                  v108 = 88;
                  goto LABEL_172;
                }
                v388 = v107 - 2;
LABEL_173:
                a1 = v106;
              }
              v15 = a12;
LABEL_175:
              if (!v20 || (int)v84 <= 255 && (a1 & ((int)v84 > 127)) == 0)
                goto LABEL_178;
              v360 = 1;
              *v368 = 1;
              v368 += (int)ord2utf8(v84, (uint64_t)(v368 + 1)) + 1;
              if ((a1 & 1) != 0)
              {
                LODWORD(v384) = 0;
                if ((ucp_findchar(v84, (int *)&v384 + 1, (unsigned int *)&v384) & 0x80000000) == 0 && (int)v384 >= 1)
                {
                  *v368 = 1;
                  v368 += (int)ord2utf8(v384, (uint64_t)(v368 + 1)) + 1;
                }
                v19 = v372;
                v23 = v373;
                v360 = 1;
                goto LABEL_203;
              }
              goto LABEL_188;
            }
            v104 = check_escape(&v388, a6, *a3, a1, 1);
            if (v104 != -19)
            {
              LODWORD(v84) = v104;
              v19 = v372;
              v23 = v373;
              if (v104 == -4)
              {
                LODWORD(v84) = 8;
                v20 = v370;
              }
              else
              {
                v20 = v370;
                if (v104 == -15)
                {
                  LODWORD(v84) = 88;
                }
                else if (v104 < 0)
                {
                  v15 = a12;
                  v124 = *(int8x16_t **)(a12 + 16);
                  switch(-5 - v104)
                  {
                    case 0:
                      v141 = 0;
                      v142 = v124 + 4;
                      do
                      {
                        *(int8x16_t *)((char *)&v392 + v141 * 16) = vornq_s8(*(int8x16_t *)((char *)&v392 + v141 * 16), v142[v141]);
                        ++v141;
                      }
                      while (v141 != 2);
                      goto LABEL_276;
                    case 1:
                      LODWORD(v17) = 0;
                      v143 = v124[4];
                      v144 = v124[5];
                      goto LABEL_278;
                    case 2:
                      for (i = 0; i != 2; ++i)
                        *(int8x16_t *)((char *)&v392 + i * 16) = vornq_s8(*(int8x16_t *)((char *)&v392 + i * 16), v124[i]);
                      LODWORD(v17) = 0;
                      v146 = v392.i8[1] | 8;
                      goto LABEL_273;
                    case 3:
                      for (j = 0; j != 2; ++j)
                        *(int8x16_t *)((char *)&v392 + j * 16) = vorrq_s8(*(int8x16_t *)((char *)&v392 + j * 16), v124[j]);
                      LODWORD(v17) = 0;
                      v146 = v392.i8[1] & 0xF7;
LABEL_273:
                      v392.i8[1] = v146;
                      goto LABEL_279;
                    case 4:
                      v148 = 0;
                      v149 = v124 + 10;
                      do
                      {
                        *(int8x16_t *)((char *)&v392 + v148 * 16) = vornq_s8(*(int8x16_t *)((char *)&v392 + v148 * 16), v149[v148]);
                        ++v148;
                      }
                      while (v148 != 2);
LABEL_276:
                      LODWORD(v17) = 0;
                      goto LABEL_279;
                    case 5:
                      LODWORD(v17) = 0;
                      v143 = v124[10];
                      v144 = v124[11];
LABEL_278:
                      v392 = vorrq_s8(v392, v143);
                      v393 = vorrq_s8(v393, v144);
LABEL_279:
                      v85 += 2;
                      goto LABEL_181;
                    case 8:
                    case 9:
                      HIDWORD(v384) = 0;
                      ucp_0 = get_ucp_0(&v388, (_DWORD *)&v384 + 1, a6);
                      if (ucp_0 < 0)
                        goto LABEL_690;
                      LODWORD(v17) = 0;
                      if (HIDWORD(v384) == ((_DWORD)v84 == -14))
                        v126 = 4;
                      else
                        v126 = 3;
                      *v368 = v126;
                      v368[1] = ucp_0;
                      v360 = 1;
                      v368 += 2;
                      goto LABEL_188;
                    default:
                      if ((a1 & 0x40) != 0)
                      {
                        v318 = "invalid escape sequence in character class";
                        goto LABEL_689;
                      }
                      LODWORD(v84) = *v388;
                      break;
                  }
                }
              }
              goto LABEL_160;
            }
            v19 = v372;
            v23 = v373;
            if (v388[1] != 92)
            {
              LODWORD(v17) = 1;
LABEL_203:
              v20 = v370;
              goto LABEL_181;
            }
            v92 = v388 + 2;
            v20 = v370;
            if (v388[2] != 69)
            {
              LODWORD(v17) = 1;
              goto LABEL_181;
            }
          }
          LODWORD(v17) = 0;
          v388 = v92;
LABEL_181:
          v115 = v388[1];
          v76 = v388 + 1;
          LODWORD(v84) = v115;
          ++v388;
          if (v115 == 93 && (_DWORD)v17 == 0)
          {
            if (v85 != 1
              || v20
              && (v349 == 94 ? (v151 = v86 <= 127) : (v151 = 1), v151 ? (v152 = 0) : (v152 = 1), v360 || (v152 & 1) != 0))
            {
              if ((_DWORD)v23 == -2)
                v21 = 0xFFFFFFFFLL;
              else
                v21 = v23;
              if (v360)
              {
                *v368 = 0;
                v14 = (unsigned __int8 *)(v368 + 1);
                *(_BYTE *)v32 = 61;
                *(_BYTE *)(v32 + 3) = v349 == 94;
                if (v85 < 1)
                {
                  v200 = (_DWORD)v14 - (_DWORD)v339;
                  v201 = v21;
                  memmove((void *)(v32 + 4), v339, v200);
                  v21 = v201;
                  v19 = v372;
                  v20 = v370;
                  v14 = (unsigned __int8 *)(v32 + 3 + (int)(v200 + 1));
                }
                else
                {
                  *(_BYTE *)(v32 + 3) = (v349 == 94) | 2;
                  v171 = v392;
                  *(int8x16_t *)(v32 + 20) = v393;
                  *(int8x16_t *)(v32 + 4) = v171;
                }
                v17 = 0;
                *(_WORD *)(v32 + 1) = bswap32((_DWORD)v14 - v32) >> 16;
              }
              else
              {
                v188 = (int8x16_t *)(v32 + 1);
                if (v349 == 94)
                {
                  v189 = 0;
                  *(_BYTE *)v32 = 60;
                  do
                  {
                    v188->i8[v189] = ~v392.i8[v189];
                    ++v189;
                  }
                  while (v189 != 32);
                }
                else
                {
                  *(_BYTE *)v32 = 59;
                  v215 = v393;
                  *v188 = v392;
                  *(int8x16_t *)(v32 + 17) = v215;
                }
                v17 = 0;
                v14 = (unsigned __int8 *)(v32 + 33);
              }
              goto LABEL_85;
            }
            if (v349 == 94)
            {
              v17 = 0;
              if ((_DWORD)v23 == -2)
                v21 = 0xFFFFFFFFLL;
              else
                v21 = v23;
              *(_BYTE *)v32 = 23;
              *(_BYTE *)(v32 + 1) = v86;
              goto LABEL_85;
            }
            if (v20 && v86 >= 128)
            {
              v37 = ord2utf8(v86, (uint64_t)v391);
              v23 = v373;
              v19 = v372;
              v20 = v370;
              v17 = 0;
              goto LABEL_33;
            }
            v17 = 0;
            v391[0] = v86;
LABEL_351:
            if ((a1 & 1) != 0)
              v172 = 22;
            else
              v172 = 21;
            *(_BYTE *)v32 = v172;
            v14 = (unsigned __int8 *)(v32 + 1);
            v37 = 1;
LABEL_355:
            v173 = v37;
            v174 = v391;
            do
            {
              v175 = *v174++;
              v38 = v175;
              *v14++ = v175;
              --v173;
            }
            while (v173);
LABEL_357:
            v177 = v37 == 1 || v371 == 0;
            if ((_DWORD)v23 != -2)
            {
              if (v177)
              {
                v22 = v380;
                v178 = *(_DWORD *)(v15 + 72) | v371 | v38;
                v21 = v23;
LABEL_366:
                v380 = v178;
                goto LABEL_499;
              }
              v21 = v23;
LABEL_368:
              v22 = v380;
              goto LABEL_499;
            }
            if (v177)
            {
              v23 = v371 | v391[0];
              if (v37 != 1)
              {
                v22 = v380;
                v178 = *(_DWORD *)(v15 + 72) | v38;
                v21 = 0xFFFFFFFFLL;
                goto LABEL_366;
              }
              v21 = 0xFFFFFFFFLL;
              goto LABEL_368;
            }
            v21 = 0xFFFFFFFFLL;
            v22 = v380;
            v380 = -1;
            v23 = 0xFFFFFFFFLL;
            goto LABEL_499;
          }
        }
      }
      if ((_DWORD)v24 != 92)
        goto LABEL_25;
      v42 = v22;
      v43 = v21;
      v44 = check_escape(&v388, a6, *a3, a1, 0);
      v45 = v44;
      if ((v44 & 0x80000000) == 0)
      {
        v20 = v370;
        if (v370 && v44 >= 0x80)
        {
          v37 = ord2utf8(v44, (uint64_t)v391);
          v20 = v370;
          v19 = v372;
          v23 = v373;
          goto LABEL_33;
        }
        v391[0] = v44;
        v19 = v372;
        v23 = v373;
        goto LABEL_351;
      }
      v20 = v370;
      v23 = v373;
      if (v44 != -19)
      {
        v186 = v44 + 15;
        if (v44 + 15 >= 0xB)
          v187 = -2;
        else
          v187 = -1;
        if (v373 == -2)
          v21 = v187;
        else
          v21 = v373;
        v19 = v372;
        if (v45 > 0xFFFFFFEC)
        {
          if ((v45 & 0xFFFFFFFE) == 0xFFFFFFF2)
          {
            HIDWORD(v384) = 0;
            v202 = v21;
            v203 = get_ucp_0(&v388, (_DWORD *)&v384 + 1, a6);
            v19 = v372;
            v20 = v370;
            if (HIDWORD(v384) == (v45 == -14))
              v204 = 13;
            else
              v204 = 14;
            *(_BYTE *)v32 = v204;
            v14 = (unsigned __int8 *)(v32 + 2);
            *(_BYTE *)(v32 + 1) = v203;
            v21 = v202;
            v22 = v380;
            v23 = v202;
            goto LABEL_499;
          }
          if (v186 >= 0xB)
            v227 = 0;
          else
            v227 = v32;
          *(_BYTE *)v32 = -(char)v45;
          v14 = (unsigned __int8 *)(v32 + 1);
          v32 = v227;
        }
        else
        {
          *(_BYTE *)v32 = 62;
          *(_BYTE *)(v32 + 1) = (unsigned __int16)(-20 - v45) >> 8;
          *(_BYTE *)(v32 + 2) = -20 - v45;
          v14 = (unsigned __int8 *)(v32 + 3);
        }
LABEL_85:
        v22 = v380;
        v23 = v21;
        goto LABEL_499;
      }
      v19 = v372;
      if (v388[1] == 92)
      {
        v21 = v43;
        v22 = v42;
        if (v388[2] == 69)
          v388 += 2;
        else
          v17 = 1;
        v14 = (unsigned __int8 *)v32;
        goto LABEL_87;
      }
      v17 = 1;
      v14 = (unsigned __int8 *)v32;
      v32 = (unint64_t)v18;
      v21 = v43;
      v22 = v42;
LABEL_499:
      v16 = ++v388;
      v18 = (char *)v32;
    }
    if ((_DWORD)v24 == 94)
    {
      if ((_DWORD)v23 == -2)
        v150 = -1;
      else
        v150 = v23;
      if ((a1 & 2) != 0)
        v23 = v150;
      else
        v23 = v23;
      v41 = 19;
LABEL_289:
      *(_BYTE *)v32 = v41;
      v14 = (unsigned __int8 *)(v32 + 1);
      v32 = 0;
      goto LABEL_499;
    }
    if ((_DWORD)v24 == 123)
    {
      if ((v25 & 1) == 0)
      {
        v391[0] = 123;
        goto LABEL_351;
      }
      v46 = v21;
      v47 = v22;
      repeat_counts_0 = read_repeat_counts_0(v388 + 1, (int *)&v390 + 1, (int *)&v390, a6);
      v22 = v47;
      LODWORD(v23) = v373;
      v19 = v372;
      v20 = v370;
      v388 = repeat_counts_0;
      v21 = v46;
      if (*a6)
        goto LABEL_690;
LABEL_79:
      if (!v18)
      {
LABEL_688:
        v318 = "nothing to repeat";
        goto LABEL_689;
      }
LABEL_89:
      v57 = HIDWORD(v390) != v390;
      v58 = v380;
      if (!HIDWORD(v390))
        v58 = v22;
      v380 = v58;
      if (HIDWORD(v390))
        v23 = v23;
      else
        v23 = v21;
      v389 = v18;
      v59 = v388[1];
      if (v59 == 43)
      {
        v60 = 0;
        ++v388;
      }
      else
      {
        v60 = v355;
        if (v59 == 63)
        {
          ++v388;
          v60 = v348;
        }
      }
      v61 = *v18;
      if (v61 == 63)
      {
        *(_WORD *)(v18 + 3) = *(_WORD *)v18;
        v18[5] = v18[2];
        *v18 = 80;
        v62 = v32 + 3 - (_WORD)v18;
        v18[1] = HIBYTE(v62);
        v18[2] = v62;
        *(_BYTE *)(v32 + 3) = 66;
        *(_BYTE *)(v32 + 4) = HIBYTE(v62);
        *(_BYTE *)(v32 + 5) = v62;
        v32 += 6;
        v61 = *v18;
      }
      if (v61 - 21 < 2)
      {
        if (v20 && *(char *)(v32 - 1) < 0)
        {
          v374 = v60;
          v357 = a1;
          v63 = v59;
          v64 = v57;
          v65 = v22;
          v66 = v21;
          v67 = v17;
          v68 = v23;
          v69 = 0;
          do
            v70 = *(_BYTE *)(v32 + v69-- - 1) & 0xC0;
          while (v70 == 128);
          v71 = -v69;
          __memcpy_chk();
          v72 = 0;
          v73 = v71 | 0x80;
          v61 = *v18;
          v20 = v370;
          v19 = v372;
          v23 = v68;
          v17 = v67;
          v21 = v66;
          v22 = v65;
          v57 = v64;
          v59 = v63;
          a1 = v357;
          v60 = v374;
        }
        else
        {
          v73 = *(unsigned __int8 *)(v32 - 1);
          v72 = 0;
          if (SHIDWORD(v390) >= 2)
            v380 = *(_DWORD *)(v15 + 72) | v73 | v371;
        }
LABEL_313:
        if (v61 - 13 > 1)
          v74 = -1;
        else
          v74 = v18[1];
LABEL_316:
        v158 = v390;
        if ((_DWORD)v390)
        {
          v159 = a1;
          if ((_DWORD)v390 != 1)
            *(_DWORD *)(a12 + 76) = 1;
          v160 = v72 + v60;
          if (HIDWORD(v390) != 1)
          {
            v369 = v57;
            if (!HIDWORD(v390))
            {
              if (v158 != 1)
              {
                if (v158 == -1)
                {
                  v161 = v160 + 24;
                  goto LABEL_383;
                }
                *v18 = v160 + 30;
                v18[1] = BYTE1(v390);
                v18[2] = v390;
                v162 = v18 + 3;
                goto LABEL_488;
              }
              v161 = v160 + 28;
LABEL_383:
              *v18 = v161;
              v162 = v18 + 1;
              goto LABEL_488;
            }
            *v18 = v72 | 0x20;
            v18[1] = BYTE5(v390);
            v18[2] = BYTE4(v390);
            v162 = v18 + 3;
            if ((v390 & 0x80000000) != 0)
            {
              if (v20 && v73 >= 128)
              {
                v179 = v73 & 7;
                v362 = v17;
                v376 = v23;
                v180 = v21;
                v181 = v22;
                v182 = v73;
                memcpy(v162, &__src, v179);
                v73 = v182;
                v22 = v181;
                v21 = v180;
                v23 = v376;
                v17 = v362;
                v19 = v372;
                v20 = v370;
                v183 = &v162[v179];
              }
              else
              {
                v18[3] = v73;
                if (v74 < 0)
                {
                  v183 = v18 + 4;
                }
                else
                {
                  v183 = v18 + 5;
                  v18[4] = v74;
                }
              }
              *v183 = v160 + 24;
              v162 = v183 + 1;
              goto LABEL_488;
            }
            if ((_DWORD)v390 != HIDWORD(v390))
            {
              if (v20 && v73 >= 128)
              {
                v163 = v73 & 7;
                v361 = v17;
                v375 = v23;
                v164 = v21;
                v165 = v22;
                v166 = v73;
                memcpy(v162, &__src, v163);
                v73 = v166;
                v22 = v165;
                v21 = v164;
                v23 = v375;
                v17 = v361;
                v19 = v372;
                v20 = v370;
                v167 = &v162[v163];
                if (v74 < 0)
                  goto LABEL_435;
LABEL_434:
                *v167++ = v74;
              }
              else
              {
                v167 = v18 + 4;
                v18[3] = v73;
                if ((v74 & 0x80000000) == 0)
                  goto LABEL_434;
              }
LABEL_435:
              LODWORD(v390) = v390 - HIDWORD(v390);
              *v167 = v160 + 30;
              v167[1] = BYTE1(v390);
              v167[2] = v390;
              v162 = v167 + 3;
            }
LABEL_488:
            a1 = v159;
            if (v20 && v73 >= 128)
            {
              v228 = v73 & 7;
              v229 = v159;
              v230 = v59;
              v231 = v23;
              v232 = v21;
              v233 = v22;
              memcpy(v162, &__src, v228);
              v22 = v233;
              v21 = v232;
              v23 = v231;
              v59 = v230;
              a1 = v229;
              v19 = v372;
              v20 = v370;
              v170 = &v162[v228];
            }
            else
            {
              *v162 = v73;
              v170 = v162 + 1;
            }
            v15 = a12;
            if ((v74 & 0x80000000) == 0)
              *v170++ = v74;
LABEL_494:
            if (v59 == 43)
            {
              v234 = v389;
              v235 = (_DWORD)v170 - (_DWORD)v389;
              v236 = v21;
              v237 = v15;
              v238 = v22;
              v239 = v17;
              v240 = v23;
              memmove(v389 + 3, v389, (int)v170 - (int)v389);
              v22 = v238;
              v15 = v237;
              v21 = v236;
              v23 = v240;
              v17 = v239;
              v19 = v372;
              v20 = v370;
              *v234 = 74;
              v170[3] = 66;
              v170[4] = (unsigned __int16)(v235 + 3) >> 8;
              v170[5] = v235 + 3;
              v18 = v170 + 6;
              *(_WORD *)(v389 + 1) = bswap32(v235 + 3) >> 16;
            }
            else
            {
              v18 = v170;
            }
            v57 = v369;
LABEL_498:
            v32 = 0;
            *(_DWORD *)(v15 + 72) |= v57 << 9;
            v14 = (unsigned __int8 *)v18;
            goto LABEL_499;
          }
          if (v158 != 1)
          {
            v369 = v57;
            if (v158 != -1)
            {
              *(_BYTE *)v32 = v160 + 30;
              *(_BYTE *)(v32 + 1) = (unsigned __int16)(v390 - 1) >> 8;
              *(_BYTE *)(v32 + 2) = v390 - 1;
              v162 = (char *)(v32 + 3);
              goto LABEL_488;
            }
            v161 = v160 + 26;
            goto LABEL_383;
          }
          v18 = (char *)v32;
          a1 = v159;
        }
        v15 = a12;
        goto LABEL_498;
      }
      if (v61 == 23)
      {
        v73 = v18[1];
        v74 = -1;
        v72 = 9;
        goto LABEL_316;
      }
      if (v61 <= 0xF)
      {
        v72 = 18;
        v73 = v61;
        goto LABEL_313;
      }
      if (v61 - 59 <= 3)
      {
        v168 = v390;
        if (!(_DWORD)v390)
          goto LABEL_498;
        v369 = v57;
        if ((_DWORD)v390 == 1)
        {
          if (HIDWORD(v390))
          {
LABEL_337:
            *(_BYTE *)v32 = v60 + 57;
            *(_BYTE *)(v32 + 1) = BYTE5(v390);
            *(_BYTE *)(v32 + 2) = BYTE4(v390);
            v169 = v390;
            if ((_DWORD)v390 == -1)
              v169 = 0;
            LODWORD(v390) = v169;
            *(_BYTE *)(v32 + 3) = BYTE1(v169);
            *(_BYTE *)(v32 + 4) = v390;
            v170 = (char *)(v32 + 5);
            goto LABEL_494;
          }
          v216 = v60 + 55;
        }
        else
        {
          *(_DWORD *)(v15 + 76) = 1;
          if (v168 != -1 || HIDWORD(v390))
          {
            if (v168 != -1 || HIDWORD(v390) != 1)
              goto LABEL_337;
            v216 = v60 + 53;
          }
          else
          {
            v216 = v60 + 51;
          }
        }
        *(_BYTE *)v32 = v216;
        v170 = (char *)(v32 + 1);
        goto LABEL_494;
      }
      if (v61 <= 0x4F && (v61 & 0xFE) != 0x4A)
      {
        v318 = "internal error: unexpected repeat";
        goto LABEL_689;
      }
      v184 = v390;
      v358 = a1;
      if ((_DWORD)v390 == -1)
      {
        v205 = v18;
        do
          v205 = (_WORD *)((char *)v205 + __rev16(*(unsigned __int16 *)((char *)v205 + 1)));
        while (*(_BYTE *)v205 != 66);
        v185 = (_DWORD)v205 - v32;
      }
      else
      {
        v185 = 0;
      }
      v206 = v32 - (_DWORD)v18;
      v207 = HIDWORD(v390);
      if (HIDWORD(v390))
      {
        v332 = v59;
        v369 = v57;
        v170 = (char *)v32;
        if (SHIDWORD(v390) > 1)
        {
          v377 = v185;
          v340 = v22;
          v350 = v21;
          v363 = v17;
          v208 = v380;
          v209 = (v380 & 0x80000000) == 0 || !v347;
          v210 = v23;
          if (!v209)
            v208 = v23;
          v380 = v208;
          v211 = 1;
          v170 = (char *)v32;
          do
          {
            memcpy(v170, v18, v206);
            v170 += v206;
            ++v211;
            v207 = HIDWORD(v390);
          }
          while (v211 < SHIDWORD(v390));
          v184 = v390;
          v20 = v370;
          v19 = v372;
          v185 = v377;
          v23 = v210;
          v17 = v363;
          v21 = v350;
          v22 = v340;
        }
        v212 = 0;
        if (v184 >= 1)
        {
          v184 -= v207;
          LODWORD(v390) = v184;
        }
        v331 = v18;
        if ((v184 & 0x80000000) == 0)
          goto LABEL_473;
LABEL_574:
        v170[v185] = v60 + 67;
        a1 = v358;
      }
      else
      {
        if (!(_DWORD)v390)
        {
          a1 = v358;
          goto LABEL_498;
        }
        v378 = v185;
        v332 = v59;
        v369 = v57;
        v341 = v22;
        v351 = v21;
        v213 = v17;
        v214 = v23;
        *(_BYTE *)v32 = 0;
        if (v184 > 1)
        {
          adjust_recurse((unsigned __int8 *)v18, 4, v338, v15);
          v331 = v18 + 4;
          memmove(v18 + 4, v18, v206);
          v170 = (char *)(v32 + 4);
          v212 = (uint64_t)(v18 + 2);
          *(_WORD *)(v18 + 1) = 80;
          v18[3] = 0;
        }
        else
        {
          adjust_recurse((unsigned __int8 *)v18, 1, v338, v15);
          v331 = v18 + 1;
          memmove(v18 + 1, v18, v206);
          v212 = 0;
          v170 = (char *)(v32 + 1);
        }
        *v18 = v60 + 77;
        v184 = v390 - 1;
        LODWORD(v390) = v184;
        v20 = v370;
        v19 = v372;
        v185 = v378;
        v23 = v214;
        v17 = v213;
        v21 = v351;
        v22 = v341;
        if (v184 < 0)
          goto LABEL_574;
LABEL_473:
        if (v184)
        {
          v342 = v22;
          v352 = v21;
          v379 = v23;
          v217 = v60 + 77;
          v218 = v206;
          *v170 = v217;
          v219 = v170 + 1;
          v220 = v184 - 1;
          if (v184 == 1)
          {
            v224 = v331;
          }
          else
          {
            v364 = v17;
            v221 = v218 + 4;
            v222 = (_WORD)v170 + 2;
            v223 = v32 - (_WORD)v18 + 4;
            v224 = v331;
            do
            {
              v225 = v222 - v212;
              if (!v212)
                v225 = 0;
              v219[1] = HIBYTE(v225);
              v212 = (uint64_t)(v219 + 1);
              *v219 = 80;
              v219[2] = v225;
              v226 = v218;
              memcpy(v219 + 3, v331, v218);
              v218 = v226;
              v219 += v221;
              *(v219 - 1) = v217;
              v222 += v223;
              --v220;
            }
            while (v220);
            v212 = (uint64_t)&v219[-v226 - 3];
            v17 = v364;
          }
          v245 = v218;
          memcpy(v219, v224, v218);
          v170 = &v219[v245];
          v15 = a12;
          v20 = v370;
          v19 = v372;
          v23 = v379;
          v21 = v352;
          v22 = v342;
        }
        a1 = v358;
        if (v212)
        {
          v246 = (_DWORD)v170 + 1;
          do
          {
            v247 = v246 - v212;
            v248 = &v170[-(v246 - (int)v212)];
            v249 = __rev16(*(unsigned __int16 *)(v248 + 1));
            *v170 = 66;
            v250 = (v246 - v212) >> 8;
            v170[1] = (unsigned __int16)(v246 - v212) >> 8;
            v170[2] = v246 - v212;
            if ((_DWORD)v249)
              v251 = v212 == 0;
            else
              v251 = 1;
            v212 -= v249;
            v170 += 3;
            v248[1] = v250;
            v248[2] = v247;
            v246 += 3;
          }
          while (!v251);
        }
      }
      v59 = v332;
      goto LABEL_494;
    }
    if ((_DWORD)v24 != 124)
      goto LABEL_25;
LABEL_651:
    v302 = v388;
    v303 = *v336;
    v305 = v334 < 0 || v334 == (_DWORD)v23;
    if (v335 >= 0)
      v306 = v335;
    else
      v306 = v334;
    v307 = !v305;
    if (v305)
      v308 = v334;
    else
      v308 = -1;
    if (!v307)
      v306 = v335;
    if ((v380 & 0x80000000) != 0 && (int)v23 > -1 && v308 < 0)
      v311 = v23;
    else
      v311 = v380;
    v312 = v311 ^ v306;
    v313 = v311 | v306;
    if ((v312 & 0xFFFFFDFF) != 0)
      v313 = -1;
    if (v303 == 65)
      v314 = v308;
    else
      v314 = v23;
    if (v303 == 65)
      v315 = v313;
    else
      v315 = v380;
    v334 = v314;
    v335 = v315;
    if (!a7)
    {
LABEL_685:
      if (*v302 != 124)
      {
        v320 = v336;
        v321 = v32 - (_DWORD)v336;
        do
        {
          v322 = __rev16(*(unsigned __int16 *)(v320 + 1));
          *(_WORD *)(v320 + 1) = bswap32(v321) >> 16;
          v320 -= v322;
          v321 = v322;
        }
        while ((_DWORD)v322);
        *(_BYTE *)v32 = 66;
        *(_BYTE *)(v32 + 1) = (unsigned __int16)(v32 - v329) >> 8;
        *(_BYTE *)(v32 + 2) = v32 - v329;
        v323 = v32 + 3;
        if ((a1 & 7) == v333)
        {
          v324 = a4;
          v326 = v334;
          v325 = v335;
        }
        else
        {
          v324 = a4;
          v326 = v334;
          v325 = v335;
          if (*v302 == 41)
          {
            *(_BYTE *)(v32 + 3) = 18;
            v323 = v32 + 5;
            *(_BYTE *)(v32 + 4) = v333;
          }
        }
        *v324 = v323;
        *a5 = v302;
        *a9 = v326;
        result = 1;
        *a10 = v325;
        return result;
      }
      *(_BYTE *)v32 = 65;
      *(_BYTE *)(v32 + 1) = (unsigned __int16)(v32 - (_WORD)v336) >> 8;
      *(_BYTE *)(v32 + 2) = v32 - (_BYTE)v336;
      v382 = v32;
      v14 = (unsigned __int8 *)(v32 + 3);
      v16 = v302 + 1;
      v336 = (unsigned __int8 *)v32;
      a2 = v333;
      continue;
    }
    break;
  }
  *(_BYTE *)v32 = 0;
  fixedlength = find_fixedlength((uint64_t)v336, a1);
  v317 = fixedlength;
  if ((fixedlength & 0x80000000) == 0)
  {
    *v337 = bswap32(fixedlength) >> 16;
    goto LABEL_685;
  }
  result = 0;
  if (v317 == -2)
    v327 = "\\C not allowed in lookbehind assertion";
  else
    v327 = "lookbehind assertion is not fixed length";
  *a6 = v327;
  *a5 = v302;
  return result;
}

uint64_t is_anchored_0(uint64_t a1, _DWORD *a2, int a3, int a4)
{
  int v6;
  unsigned __int8 *significant_code_0;
  unsigned int v8;
  uint64_t v10;

  v6 = a4 & a3;
  while (1)
  {
    significant_code_0 = first_significant_code_0((unsigned __int8 *)(a1 + 3), a2, 2, 0);
    v8 = *significant_code_0;
    if (v8 < 0x51 && (v8 - 69 > 0xB || ((1 << (v8 - 69)) & 0x861) == 0))
      break;
    if (!is_anchored_0())
      return 0;
LABEL_8:
    a1 += __rev16(*(unsigned __int16 *)(a1 + 1));
    if (*(_BYTE *)a1 != 65)
      return 1;
  }
  if ((v8 & 0xFE) != 0x2A)
  {
    if (v8 - 3 <= 0xFFFFFFFD)
    {
      v10 = 0;
      if (v8 != 19 || (*a2 & 2) != 0)
        return v10;
    }
    goto LABEL_8;
  }
  if ((*(_BYTE *)a2 & 4) != 0)
  {
    v10 = 0;
    if (v6 || significant_code_0[1] != 11)
      return v10;
    goto LABEL_8;
  }
  return 0;
}

uint64_t find_firstassertedchar(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v6;
  unsigned __int8 *significant_code_0;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t firstassertedchar;
  int v12;

  v6 = 0xFFFFFFFFLL;
  do
  {
    significant_code_0 = first_significant_code_0((unsigned __int8 *)(a1 + 3), a2, 1, 1);
    v8 = *significant_code_0;
    if (v8 >= 0x50)
      v8 = 80;
    result = 0xFFFFFFFFLL;
    v10 = v8 - 21;
    if (v10 > 0x3B)
      break;
    if (((1 << (v8 - 21)) & 0x63) != 0)
      goto LABEL_14;
    if (((1 << (v8 - 21)) & 0x861000000000000) == 0)
    {
      if (v10 != 11)
        return result;
      significant_code_0 += 2;
LABEL_14:
      if (!a3)
        return result;
      v12 = significant_code_0[1];
      if ((v6 & 0x80000000) != 0)
      {
        v6 = v12 & 0xFFFFFEFF | ((*a2 & 1) << 8);
      }
      else if ((_DWORD)v6 != v12)
      {
        return result;
      }
      goto LABEL_19;
    }
    firstassertedchar = find_firstassertedchar(significant_code_0, a2, v8 == 69);
    if ((firstassertedchar & 0x80000000) != 0)
      return 0xFFFFFFFFLL;
    if ((v6 & 0x80000000) != 0)
    {
      v6 = firstassertedchar;
    }
    else if ((_DWORD)v6 != (_DWORD)firstassertedchar)
    {
      return 0xFFFFFFFFLL;
    }
LABEL_19:
    a1 += __rev16(*(unsigned __int16 *)(a1 + 1));
    result = v6;
  }
  while (*(_BYTE *)a1 == 65);
  return result;
}

uint64_t is_startline_0(uint64_t a1, int a2, int a3)
{
  int v4;
  unsigned __int8 *significant_code_0;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;

  v4 = a3 & a2;
  while (1)
  {
    significant_code_0 = first_significant_code_0((unsigned __int8 *)(a1 + 3), 0, 0, 0);
    v6 = *significant_code_0;
    if (v6 >= 0x51 || (v6 - 69 <= 0xB ? (v7 = ((1 << (v6 - 69)) & 0x861) == 0) : (v7 = 1), !v7))
    {
      if (!is_startline_0())
        return 0;
      goto LABEL_8;
    }
    if ((v6 & 0xFE) == 0x2A)
    {
      v8 = 0;
      if (v4 || significant_code_0[1] != 11)
        return v8;
      goto LABEL_8;
    }
    if (v6 != 19)
      return 0;
LABEL_8:
    a1 += __rev16(*(unsigned __int16 *)(a1 + 1));
    if (*(_BYTE *)a1 != 65)
      return 1;
  }
}

uint64_t nuance_pcre_exec(_QWORD *a1, int a2, uint64_t a3, int *a4, char *a5, int a6, int a7, unsigned int a8, _DWORD *a9, int a10)
{
  return nuance_pcre_exec2(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0);
}

uint64_t nuance_pcre_exec2(_QWORD *a1, int a2, uint64_t a3, int *a4, char *a5, int a6, int a7, unsigned int a8, _DWORD *a9, int a10, uint64_t (*a11)(__int128 *))
{
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  int32x4_t v21;
  char *v22;
  int v23;
  __int128 *v24;
  char *v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  unsigned int v29;
  char *v30;
  int8x16_t v31;
  int8x16_t v32;
  char *v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  char v37;
  uint64_t v38;
  char *v39;
  unsigned int v40;
  char *v41;
  unint64_t v42;
  char *v43;
  int v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  int v49;
  int v50;
  __int16 v51;
  char *v52;
  BOOL v53;
  char *v54;
  int64_t v55;
  char *v56;
  int64_t v57;
  unsigned __int8 *v59;
  int v60;
  int64_t v62;
  uint64_t v63;
  BOOL v64;
  int v65;
  char v66;
  BOOL v67;
  uint64_t v68;
  _BOOL8 v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  __int128 *v73;
  __int128 *v74;
  char v75;
  char *v76;
  char *v77;
  char *v78;
  int v79;
  _OWORD v80[3];
  uint64_t v81;
  uint64_t v82;
  void *__b[2];
  __int128 v84;
  _OWORD v85[2];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _OWORD v91[2];
  uint64_t v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  if ((safeh_HandleCheck((uint64_t)a1, a2, 56663, 32) & 0x80000000) != 0)
    return 4294967280;
  pcre_clearMem(a1);
  if ((a8 & 0xFFFF5A6F) != 0)
    return 4294967293;
  result = 4294967294;
  if (a3 && a5 && (a9 || a10 <= 0))
  {
    if (a10 < 0)
      return 4294967281;
    v21 = 0uLL;
    v89 = 0u;
    v87 = 0u;
    v88 = 0u;
    v86 = 0u;
    v84 = 0u;
    memset(v85, 0, sizeof(v85));
    v81 = 0;
    *(_OWORD *)__b = 0u;
    v82 = 10000000;
    v90 = 0uLL;
    v22 = *(char **)(a3 + 32);
    if (!a4)
    {
      v24 = 0;
      goto LABEL_21;
    }
    v23 = *a4;
    if ((*a4 & 1) != 0)
      v24 = (__int128 *)*((_QWORD *)a4 + 1);
    else
      v24 = 0;
    if ((v23 & 2) != 0)
    {
      v82 = *((_QWORD *)a4 + 2);
      if ((v23 & 4) == 0)
      {
LABEL_19:
        if ((v23 & 8) == 0)
          goto LABEL_21;
        goto LABEL_20;
      }
    }
    else if ((v23 & 4) == 0)
    {
      goto LABEL_19;
    }
    *(_QWORD *)&v90 = *((_QWORD *)a4 + 3);
    if ((v23 & 8) == 0)
    {
LABEL_21:
      v92 = 0;
      memset(v91, 0, sizeof(v91));
      memset(v80, 0, sizeof(v80));
      if (v22)
        v25 = v22;
      else
        v25 = (char *)&pcre_default_tables;
      if (*(_DWORD *)a3 == 1346589253)
      {
        v26 = a3;
      }
      else
      {
        v76 = v25;
        v27 = v24;
        v28 = try_flipped((__int128 *)a3, (uint64_t)v80, v24, (uint64_t)v91);
        if (!v28)
          return 4294967292;
        v26 = v28;
        if (v27)
          v24 = v91;
        else
          v24 = 0;
        v25 = v76;
      }
      v29 = *(_DWORD *)(v26 + 8);
      *(_QWORD *)&v86 = a3
                      + *(unsigned __int16 *)(v26 + 24)
                      + *(unsigned __int16 *)(v26 + 26) * (unint64_t)*(unsigned __int16 *)(v26 + 28);
      *((_QWORD *)&v86 + 1) = a5;
      LODWORD(v89) = a7;
      v30 = &a5[a6];
      v21.i64[0] = __PAIR64__(v29, a8);
      *(_QWORD *)&v87 = v30;
      v31.i64[0] = 0x100000001;
      v31.i64[1] = 0x100000001;
      v32 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vzip1q_s32(v21, v21), (uint32x4_t)xmmword_1DECB8E70), v31);
      *(int8x16_t *)((char *)v85 + 4) = v32;
      DWORD1(v85[1]) = (a8 >> 10) & 1;
      *((_QWORD *)&v85[1] + 1) = a8 >> 15;
      *((_QWORD *)&v89 + 1) = 0;
      *(_QWORD *)&v84 = v25;
      *((_QWORD *)&v84 + 1) = v25 + 832;
      if (a8 >= 0x8000 && (v29 & 0x4000000) != 0)
        return 4294967283;
      v72 = v29;
      v33 = &a5[a7];
      if ((a8 & 0x2000) == 0 && v32.i32[2])
      {
        v73 = v24;
        v77 = v25;
        if ((valid_utf8(a5, a6) & 0x80000000) == 0)
          return 4294967286;
        v24 = v73;
        v25 = v77;
        if (a7 >= 1 && a7 < a6 && *v33 < -64)
          return 4294967285;
      }
      v34 = *(unsigned __int16 *)(v26 + 18);
      v35 = a10 / 3u;
      if (*(_WORD *)(v26 + 18))
        v36 = v35 > v34;
      else
        v36 = 1;
      v37 = v36;
      v66 = v37;
      if (v36)
      {
        LODWORD(v38) = 3 * v35;
        __b[0] = a9;
        v39 = (char *)a9;
      }
      else
      {
        v74 = v24;
        v78 = v25;
        v38 = 3 * v34 + 3;
        v39 = (char *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 4 * v38);
        __b[0] = v39;
        if (!v39)
          return 4294967290;
        v24 = v74;
        v25 = v78;
      }
      v75 = v72 | a8;
      LODWORD(__b[1]) = v38;
      HIDWORD(__b[1]) = 2 * (int)v38 / 3u;
      LODWORD(v85[0]) = 0;
      HIDWORD(v88) = -1;
      v40 = 2 * *(unsigned __int16 *)(v26 + 16) + 2;
      if (v40 > a10)
        v40 = v38;
      v79 = v40;
      if (v39 && v40 >= 4)
      {
        v41 = &v39[4 * v38];
        v42 = (unint64_t)&v41[-4 * (v40 >> 1) + 4];
        v43 = v41 - 4;
        do
        {
          *(_DWORD *)v43 = -1;
          v43 -= 4;
        }
        while ((unint64_t)v43 >= v42);
      }
      v44 = *(_DWORD *)(v26 + 8);
      if (((v72 | a8) & 0x10) == 0)
      {
        if ((v44 & 0x40000000) != 0)
        {
          v46 = *(_WORD *)(v26 + 20);
          if ((*(_WORD *)(v26 + 20) & 0x100) != 0)
          {
            v45 = 0;
            LODWORD(v46) = *(unsigned __int8 *)(v84 + v46);
            v71 = 1;
          }
          else
          {
            v71 = 0;
            v45 = 0;
          }
        }
        else
        {
          v45 = 0;
          v71 = 0;
          LODWORD(v46) = -1;
          if ((v72 & 0x10000000) == 0 && v24)
          {
            v71 = 0;
            if ((*((_BYTE *)v24 + 4) & 1) != 0)
              v45 = (char *)v24 + 8;
            else
              v45 = 0;
            goto LABEL_71;
          }
        }
LABEL_72:
        v47 = v33 - 1;
        v48 = a6;
        if ((v44 & 0x20000000) != 0)
        {
          v51 = *(_WORD *)(v26 + 22);
          v49 = v51;
          v50 = v25[v51 + 256];
          v67 = (v51 & 0x100) == 0;
        }
        else
        {
          v67 = 1;
          v49 = -1;
          v50 = -1;
        }
        v68 = a7;
        v69 = (int)v46 >= 0;
        v52 = &a5[v48];
        v70 = 4 * v79;
        while (1)
        {
          if (__b[0])
            v53 = v79 < 1;
          else
            v53 = 1;
          if (!v53)
          {
            v54 = (char *)__b[0] + v70;
            if ((char *)__b[0] + v70 <= (char *)__b[0] + 4)
              v54 = (char *)__b[0] + 4;
            memset(__b[0], 255, ((unint64_t)&v54[~(uint64_t)__b[0]] & 0xFFFFFFFFFFFFFFFCLL) + 4);
          }
          if ((v46 & 0x80000000) == 0)
            break;
          if ((v72 & 0x10000000) != 0)
          {
            if ((unint64_t)v33 > *((_QWORD *)&v86 + 1) + v68 && v33 < v30)
            {
              v62 = v52 - v33;
              while (*(v33 - 1) != 10)
              {
                ++v33;
                if (!--v62)
                {
LABEL_124:
                  v56 = v52;
                  if ((v49 & 0x80000000) == 0)
                    goto LABEL_107;
                  goto LABEL_125;
                }
              }
            }
            goto LABEL_105;
          }
          if (!v45)
            goto LABEL_105;
          do
          {
            v56 = v33;
            if (v33 >= v30)
              break;
            ++v33;
          }
          while (((v45[(unint64_t)*v56 >> 3] >> (*v56 & 7)) & 1) == 0);
LABEL_106:
          if ((v49 & 0x80000000) == 0)
          {
LABEL_107:
            if (v30 - v56 <= 999 && !DWORD2(v85[1]))
            {
              v59 = (unsigned __int8 *)&v56[v69];
              if (&v56[v69] > v47)
              {
                if (v67)
                {
                  do
                  {
                    v47 = (char *)v59;
                    if (v59 >= (unsigned __int8 *)v30)
                      break;
                    ++v59;
                  }
                  while (v49 != *v47);
                }
                else
                {
                  do
                  {
                    v47 = (char *)v59;
                    if (v59 >= (unsigned __int8 *)v30)
                      break;
                    ++v59;
                    v60 = *v47;
                  }
                  while (v49 != v60 && v50 != v60);
                }
                if (v47 >= v30)
                  goto LABEL_134;
              }
            }
          }
LABEL_125:
          *((_QWORD *)&v87 + 1) = v56;
          v81 = 0;
          result = match_2((uint64_t)a1, (uint64_t)v56, v86, (uint64_t)&v81, v72 & 7, a11, v18, v19);
          if ((_DWORD)result)
          {
            if ((_DWORD)result == 1)
            {
              if ((v66 & 1) == 0)
              {
                if (a10 >= 4)
                  memcpy(a9 + 2, (char *)__b[0] + 8, 4 * (a10 - 2));
                if (SDWORD2(v88) > a10)
                  LODWORD(v85[0]) = 1;
                heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)__b[0]);
              }
              if (LODWORD(v85[0]))
                result = 0;
              else
                result = (SDWORD2(v88) / 2);
              if (a10 >= 2)
              {
                v65 = v88 - DWORD2(v86);
                *a9 = (_DWORD)v56 - DWORD2(v86);
                a9[1] = v65;
              }
              else
              {
                return 0;
              }
            }
            return result;
          }
          v33 = v56 + 1;
          if (HIDWORD(v85[0]) && v33 < v30)
          {
            v63 = v52 - 1 - v56;
            while ((*v33 & 0xC0) == 0x80)
            {
              ++v33;
              if (!--v63)
              {
                v33 = v30;
                break;
              }
            }
          }
          if ((v75 & 0x10) != 0 || v33 > v30)
          {
LABEL_134:
            if ((v66 & 1) == 0)
              heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)__b[0]);
            if (HIDWORD(v85[1]))
              v64 = DWORD2(v85[1]) == 0;
            else
              v64 = 1;
            if (v64)
              return 0xFFFFFFFFLL;
            else
              return 4294967284;
          }
        }
        if ((v71 & 1) != 0)
        {
          if (v33 < v30)
          {
            v55 = v52 - v33;
            while ((_DWORD)v46 != *(unsigned __int8 *)(v84 + *v33))
            {
              ++v33;
              if (!--v55)
                goto LABEL_124;
            }
          }
        }
        else if (v33 < v30)
        {
          v57 = v52 - v33;
          while ((_DWORD)v46 != *v33)
          {
            ++v33;
            if (!--v57)
              goto LABEL_124;
          }
        }
LABEL_105:
        v56 = v33;
        goto LABEL_106;
      }
      v71 = 0;
      v45 = 0;
LABEL_71:
      LODWORD(v46) = -1;
      goto LABEL_72;
    }
LABEL_20:
    v22 = (char *)*((_QWORD *)a4 + 4);
    goto LABEL_21;
  }
  return result;
}

_QWORD *pcre_clearMem(_QWORD *result)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = result;
  if (*((unsigned __int16 *)result + 8) >= 2u)
  {
    v2 = 1;
    do
    {
      v3 = *(uint64_t **)(v1[1] + 8 * v2);
      if (v3)
      {
        heap_Free(*(_QWORD **)(*v1 + 8), *v3);
        v5 = *v1;
        v4 = v1[1];
        **(_QWORD **)(v4 + 8 * v2) = 0;
        heap_Free(*(_QWORD **)(v5 + 8), *(_QWORD *)(*(_QWORD *)(v4 + 8 * v2) + 16));
        v6 = v1[1];
        *(_QWORD *)(*(_QWORD *)(v6 + 8 * v2) + 16) = 0;
        v7 = *(_QWORD *)(v6 + 8 * v2);
      }
      else
      {
        v7 = 0;
      }
      result = heap_Free(*(_QWORD **)(*v1 + 8), v7);
      *(_QWORD *)(v1[1] + 8 * v2++) = 0;
    }
    while (v2 < *((unsigned __int16 *)v1 + 8));
  }
  *((_WORD *)v1 + 8) = 1;
  *((_DWORD *)v1 + 6) = 0;
  *((_WORD *)v1 + 14) = 0;
  return result;
}

uint64_t match_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(__int128 *), uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned __int8 *v29;
  int i;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t **v44;
  uint64_t v45;
  int v46;
  unsigned __int8 *v47;
  int v48;
  uint64_t v49;
  char v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  BOOL v53;
  int v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  int v58;
  unsigned __int8 *v59;
  unsigned int v60;
  int v61;
  int v62;
  _BYTE *v63;
  uint64_t v64;
  char v65;
  uint64_t *v66;
  char *v67;
  char v68;
  unint64_t v69;
  unsigned __int8 *v70;
  uint64_t *v71;
  uint64_t v72;
  char *v73;
  char v74;
  int v75;
  char *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t *v79;
  char *v80;
  char *v81;
  int v82;
  unsigned __int8 *v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  unsigned __int8 *v87;
  int v88;
  unsigned __int8 *v89;
  int v90;
  unint64_t v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  int v98;
  unsigned __int8 *v99;
  int v100;
  uint64_t v101;
  char v102;
  int v103;
  unsigned __int8 *v104;
  int v105;
  uint64_t v106;
  uint64_t *v107;
  char *v108;
  char v109;
  unint64_t v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  _BYTE *v113;
  int v114;
  int v115;
  int v116;
  unsigned int v117;
  _BYTE *v118;
  int v119;
  unsigned __int8 *v120;
  int v121;
  uint64_t *v122;
  char *v123;
  char v124;
  unint64_t v125;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  int v128;
  int v129;
  unsigned __int8 *v130;
  int v131;
  unsigned int v132;
  int v133;
  unsigned __int8 *v134;
  int v135;
  int v136;
  unsigned __int8 *v137;
  int v138;
  unsigned int v139;
  int v140;
  unsigned __int8 *j;
  int v142;
  unsigned int v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  int v147;
  char v148;
  int v149;
  int v150;
  unsigned __int8 *v151;
  int v152;
  int v153;
  unsigned __int8 *v154;
  int v155;
  unsigned int v156;
  int v157;
  unsigned __int8 *v158;
  uint64_t v159;
  uint64_t *v160;
  char *v161;
  char v162;
  uint64_t *v163;
  unsigned __int8 *v164;
  int v165;
  int v166;
  unsigned __int8 *v167;
  int v168;
  BOOL v169;
  unint64_t v170;
  int v171;
  char *v172;
  int v173;
  char v174;
  int v175;
  uint64_t *v176;
  char *v177;
  char v178;
  unint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t *v184;
  int v185;
  unsigned __int8 *v186;
  int v187;
  int v188;
  int v189;
  unsigned __int8 *v190;
  unsigned int v191;
  int v192;
  uint64_t *v193;
  uint64_t *v194;
  int Mem;
  uint64_t v196;
  uint64_t v197;
  char v198;
  int v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  int v205;
  uint64_t *v206;
  uint64_t v207;
  int v208;
  unsigned __int8 *v209;
  unsigned int v210;
  unint64_t v211;
  unsigned __int8 *v212;
  uint64_t v213;
  _BOOL4 v214;
  int v215;
  unsigned int v216;
  unsigned __int8 *v217;
  uint64_t v218;
  _BOOL4 v219;
  int v220;
  signed int v221;
  unsigned __int8 *v222;
  uint64_t v223;
  int v224;
  int v225;
  uint64_t v226;
  unsigned __int8 *v227;
  uint64_t **v228;
  uint64_t *v229;
  unsigned int v230;
  int v231;
  int v232;
  uint64_t v233;
  int v234;
  unsigned __int8 *v235;
  unsigned __int8 *v236;
  uint64_t *v237;
  int v238;
  int v239;
  int v240;
  uint64_t v241;
  unint64_t v242;
  int v243;
  int v244;
  int v245;
  unsigned __int8 *v246;
  int v247;
  int v248;
  int v249;
  unsigned __int8 *v250;
  unsigned int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  BOOL v257;
  _BOOL4 v258;
  unsigned __int8 *v259;
  int v260;
  uint64_t v261;
  _BOOL4 v262;
  int v263;
  signed int v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t *v267;
  unsigned __int8 *v268;
  int v269;
  int v270;
  int v271;
  unsigned __int8 *v272;
  unsigned int v273;
  int v274;
  unsigned __int8 *v275;
  int v276;
  int v277;
  int v278;
  unsigned __int8 *v279;
  unsigned int v280;
  int v281;
  unsigned __int8 *v282;
  int v283;
  int v284;
  int v285;
  unsigned __int8 *v286;
  unsigned int v287;
  int v288;
  unsigned __int8 *v289;
  int v290;
  int v291;
  int v292;
  unsigned __int8 *v293;
  unsigned int v294;
  int v295;
  unsigned __int8 *v296;
  int v297;
  int v298;
  int v299;
  unsigned __int8 *v300;
  unsigned int v301;
  int v302;
  unsigned __int8 *v303;
  int v304;
  int v305;
  int v306;
  unsigned __int8 *v307;
  unsigned int v308;
  int v309;
  uint64_t *v310;
  unint64_t v311;
  _BYTE *v312;
  unint64_t v313;
  uint64_t *v314;
  unint64_t v315;
  unsigned __int8 *v316;
  unint64_t v317;
  _BYTE *v318;
  int v319;
  int v320;
  int v321;
  int v322;
  unsigned int v323;
  int v324;
  unsigned __int8 *v325;
  uint64_t *v326;
  unint64_t v327;
  unint64_t v328;
  int v329;
  int v330;
  unint64_t v331;
  int v332;
  char *v333;
  uint64_t v334;
  int v335;
  char v336;
  uint64_t *v337;
  uint64_t *v338;
  unsigned __int8 *v339;
  BOOL v340;
  int v341;
  int v342;
  unsigned int v343;
  unsigned __int8 *v344;
  int v345;
  unint64_t v346;
  char *v347;
  uint64_t v348;
  int v349;
  char v350;
  unsigned __int8 *v351;
  uint64_t v352;
  int v353;
  unsigned __int8 *v354;
  int v355;
  int v356;
  int v357;
  unsigned __int8 *v358;
  unsigned int v359;
  int v360;
  int v361;
  int v362;
  int v363;
  unint64_t v364;
  char *v365;
  uint64_t v366;
  int v367;
  char v368;
  unint64_t v369;
  unsigned int v370;
  int v371;
  uint64_t v372;
  int v373;
  int v374;
  int v375;
  uint64_t *v376;
  size_t v377;
  int v378;
  char *v379;
  int v380;
  int v381;
  int v382;
  int v383;
  unint64_t v384;
  unsigned __int8 *v385;
  uint64_t v386;
  int v387;
  int v388;
  _BYTE *v389;
  int v390;
  int v391;
  unsigned int v392;
  int v393;
  uint64_t v394;
  int v395;
  int v396;
  int v397;
  unsigned __int8 *v398;
  int v399;
  int v400;
  int v401;
  unsigned int v402;
  int v403;
  unsigned __int8 *v404;
  int v405;
  int v406;
  int v407;
  int v408;
  int v409;
  uint64_t *v410;
  uint64_t *v411;
  uint64_t *v412;
  int v413;
  int v414;
  unsigned __int8 *v415;
  int v416;
  int v417;
  unsigned __int8 *v418;
  int v419;
  unsigned int v420;
  int v421;
  BOOL v422;
  int v423;
  unsigned __int8 *v424;
  int v425;
  int v426;
  unsigned __int8 *v427;
  int v428;
  unsigned int v429;
  int v430;
  unsigned __int8 *k;
  int v432;
  unsigned int v433;
  unint64_t v434;
  char *v435;
  uint64_t v436;
  int v437;
  char v438;
  int v439;
  int v440;
  int v441;
  int v442;
  _BYTE *v443;
  int v444;
  int v445;
  int v446;
  unsigned int v447;
  _BYTE *v448;
  unsigned __int8 *v449;
  int v450;
  uint64_t v451;
  _BOOL4 v452;
  int v453;
  signed int v454;
  uint64_t v455;
  uint64_t v456;
  int v457;
  uint64_t *v458;
  unint64_t v459;
  int v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  int v464;
  int v465;
  unint64_t v466;
  uint64_t *v467;
  uint64_t *v468;
  char *v469;
  char v470;
  int v471;
  int v472;
  uint64_t v473;
  int v474;
  int v475;
  unint64_t v476;
  unsigned __int8 *v477;
  int v478;
  unsigned __int8 *v479;
  int v480;
  int v481;
  int v482;
  unsigned int v483;
  int v484;
  unsigned __int8 *v485;
  char v486;
  uint64_t v487;
  unint64_t v488;
  uint64_t *v489;
  _BYTE *v490;
  uint64_t v491;
  uint64_t v492;
  int v493;
  unint64_t v494;
  int v495;
  char *v496;
  int v497;
  char v498;
  unsigned __int8 *v499;
  uint64_t *v500;
  int v501;
  int v502;
  unsigned int v503;
  unint64_t v504;
  char *v505;
  uint64_t v506;
  int v507;
  char v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t *v511;
  int v512;
  uint64_t v513;
  uint64_t *v514;
  unsigned __int8 *v515;
  int v516;
  unsigned __int8 *v517;
  uint64_t v518;
  int v519;
  unint64_t v520;
  uint64_t v521;
  unint64_t v522;
  unsigned __int8 *v523;
  int v524;
  _BYTE *v525;
  int v526;
  int v527;
  int v528;
  unsigned int v529;
  int v530;
  unsigned int v531;
  uint64_t *v532;
  uint64_t v533;
  unsigned __int8 *v534;
  int v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  int v539;
  int v540;
  int v541;
  unsigned __int8 *v542;
  unsigned int v543;
  int v544;
  unsigned __int8 *v545;
  unsigned __int8 *v546;
  unsigned __int8 *v547;
  int v548;
  int v549;
  uint64_t v550;
  uint64_t v551;
  int v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  unsigned __int8 *v556;
  uint64_t v557;
  int v558;
  uint64_t *v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t *v562;
  uint64_t v563;
  uint64_t *v564;
  uint64_t v565;
  uint64_t *v566;
  uint64_t v567;
  uint64_t *v568;
  uint64_t v569;
  uint64_t *v570;
  uint64_t *v571;
  uint64_t v572;
  uint64_t *v573;
  uint64_t *v574;
  unsigned int v575;
  unsigned int v576;
  uint64_t v577;
  signed int v578;
  int v579;
  uint64_t *v580;
  uint64_t *v581;
  uint64_t *v582;
  uint64_t *v583;
  uint64_t *v584;
  uint64_t *v585;
  int v586;
  uint64_t v587;
  unint64_t v588;
  char *v589;
  uint64_t v590;
  int v591;
  char v592;
  unsigned int v593;
  int v594;
  uint64_t *v595;
  int v596;
  uint64_t *v597;
  int v598;
  unint64_t v599;
  char *v600;
  uint64_t v601;
  int v602;
  char v603;
  unsigned int v604;
  int v605;
  unint64_t v606;
  char *v607;
  uint64_t v608;
  int v609;
  char v610;
  unsigned int v611;
  unsigned __int8 *v612;
  unsigned int v613;
  uint64_t v614;
  void *v615;
  uint64_t *v616;
  int v617;
  _BOOL4 v618;
  int v619;
  uint64_t *v620;
  unsigned __int8 *v621;
  int v622;
  int v623;
  unsigned __int8 *v624;
  int v625;
  int v626;
  unsigned __int8 *v627;
  int v628;
  unsigned int v629;
  int v630;
  uint64_t v631;
  unsigned __int8 *m;
  int v633;
  unsigned int v634;
  unint64_t v635;
  char *v636;
  uint64_t v637;
  int v638;
  char v639;
  int v640;
  int v641;
  uint64_t v642;
  int v643;
  uint64_t v644;
  int v645;
  int v646;
  size_t v647;
  unint64_t v648;
  int v649;
  uint64_t v650;
  int v651;
  int v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t **v659;
  uint64_t *v660;
  int v661;
  int v662;
  uint64_t v663;
  int v664;
  uint64_t v665;
  unint64_t v666;
  int v667;
  unint64_t v668;
  char *v669;
  uint64_t v670;
  int v671;
  char v672;
  unsigned int v673;
  int v674;
  uint64_t v675;
  unint64_t v676;
  int v677;
  uint64_t v678;
  uint64_t v679;
  unsigned __int8 *v680;
  signed int v681;
  uint64_t v682;
  unint64_t v683;
  int v684;
  unint64_t v685;
  char *v686;
  uint64_t v687;
  int v688;
  char v689;
  unsigned int v690;
  unint64_t v691;
  int v692;
  unint64_t v693;
  char *v694;
  uint64_t v695;
  int v696;
  char v697;
  unsigned int v698;
  int v699;
  uint64_t v700;
  unint64_t v701;
  _BYTE *v702;
  int v703;
  uint64_t *v704;
  uint64_t v705;
  uint64_t v706;
  unint64_t v707;
  int v708;
  unint64_t v709;
  char *v710;
  uint64_t v711;
  int v712;
  char v713;
  unsigned int v714;
  unint64_t v715;
  int v716;
  unint64_t v717;
  char *v718;
  uint64_t v719;
  int v720;
  char v721;
  unsigned int v722;
  unint64_t v723;
  int v724;
  unint64_t v725;
  char *v726;
  uint64_t v727;
  int v728;
  char v729;
  unsigned int v730;
  unint64_t v731;
  int v732;
  unint64_t v733;
  char *v734;
  uint64_t v735;
  int v736;
  char v737;
  unsigned int v738;
  unint64_t v739;
  int v740;
  unint64_t v741;
  char *v742;
  uint64_t v743;
  int v744;
  char v745;
  unsigned int v746;
  uint64_t *v747;
  unint64_t v748;
  int v749;
  uint64_t v750;
  int v751;
  unint64_t v752;
  int v753;
  unint64_t v754;
  int v755;
  unint64_t v756;
  int v757;
  unint64_t v758;
  int v759;
  unint64_t v760;
  int v761;
  unint64_t v762;
  int v763;
  __int128 v764;
  unint64_t v765;
  unint64_t v766;
  uint64_t v767;
  uint64_t *v768;
  uint64_t v769;
  unint64_t v770;
  uint64_t *v771;
  unint64_t v772;
  unsigned int v774;
  _BOOL4 v775;
  int v776;
  signed int v777;
  int v778;
  uint64_t v779;
  uint64_t v780;
  _QWORD *v781;
  _QWORD *v782;
  unsigned int __n;
  int v785;
  uint64_t v787;
  int v788;
  int v789;
  unsigned int v790;
  __int128 v791;
  __int128 v792;
  __int128 v793;
  __int128 v794;
  uint64_t *v795;
  int v796;
  _QWORD __s2[3];

  __n = 0;
  v8 = a5;
  v787 = a3;
  v11 = 0;
  v12 = 0;
  __s2[1] = *MEMORY[0x1E0C80C00];
  v13 = 99;
  v796 = 99;
  v795 = 0;
  v14 = (_QWORD *)(a4 + 152);
  while (1)
  {
    switch(v13)
    {
      case 0:
        goto LABEL_254;
      case 1:
        v15 = v795;
        if ((_DWORD)v12)
          goto LABEL_49;
        *(_DWORD *)(a4 + 124) = *((_DWORD *)v795 + 63);
        v16 = v15[2];
        v17 = __rev16(*(unsigned __int16 *)(v16 + 1));
        v15[2] = v16 + v17;
        if (*(_BYTE *)(v16 + v17) == 65)
          goto LABEL_7;
        v207 = *(_QWORD *)(a4 + 16);
        *(_DWORD *)(v207 + 4 * *((int *)v15 + 61)) = *((_DWORD *)v15 + 64);
        *(_DWORD *)(v207 + 4 * *((int *)v15 + 61) + 4) = *((_DWORD *)v15 + 65);
        *(_DWORD *)(v207 + 4 * (*(_DWORD *)(a4 + 24) - *((_DWORD *)v15 + 60))) = *((_DWORD *)v15 + 66);
        goto LABEL_885;
      case 2:
        v15 = v795;
        if ((_DWORD)v12)
          goto LABEL_49;
        v20 = v795[2];
        v21 = __rev16(*(unsigned __int16 *)(v20 + 1));
        v795[2] = v20 + v21;
        if (*(_BYTE *)(v20 + v21) == 65)
          goto LABEL_10;
        goto LABEL_885;
      case 3:
      case 5:
        goto LABEL_48;
      case 4:
        if ((_DWORD)v12)
        {
          if ((_DWORD)v12 != 1)
            goto LABEL_48;
          v28 = v795;
          v29 = (unsigned __int8 *)(__rev16(*(unsigned __int16 *)(v795[2] + 4)) + v795[2] + 3);
          v795[2] = (uint64_t)v29;
          for (i = *v29; i == 65; i = *v29)
          {
            v29 += __rev16(*(unsigned __int16 *)(v29 + 1));
            v28[2] = (uint64_t)v29;
          }
        }
        else
        {
          v795[2] += __rev16(*(unsigned __int16 *)(v795[2] + 1));
        }
        *(_QWORD *)&v791 = 0;
        Mem = pcre_getMem(a1, 5, &v791, a4, a5, (uint64_t)a6, a7, a8);
        v23 = (uint64_t *)v791;
        v24 = v795;
        if ((_QWORD)v791 && (Mem & 0x80000000) == 0)
        {
          v25 = 0;
          v26 = v795[1];
          *(_QWORD *)(v791 + 8) = v26;
          v196 = v24[2];
LABEL_276:
          v42 = v196 + 3;
          goto LABEL_277;
        }
        goto LABEL_1176;
      case 6:
        if ((_DWORD)v12)
        {
          if ((_DWORD)v12 == 1)
          {
            v15 = v795;
            v31 = (unsigned __int8 *)v795[2];
            v32 = *v31;
            goto LABEL_281;
          }
LABEL_48:
          v15 = v795;
LABEL_49:
          v43 = (uint64_t *)*v15;
LABEL_251:
          v795 = v43;
          pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v774);
          v180 = v795;
          if (!v795)
            return v12;
          goto LABEL_1374;
        }
        v15 = v795;
        v31 = (unsigned __int8 *)(v795[2] + __rev16(*(unsigned __int16 *)(v795[2] + 1)));
        v795[2] = (uint64_t)v31;
        v32 = *v31;
        if (v32 != 65)
        {
LABEL_281:
          if (v32 != 66)
          {
            if ((v15[6] & 1) == 0)
            {
              do
              {
                v31 += __rev16(*(unsigned __int16 *)(v31 + 1));
                v15[2] = (uint64_t)v31;
              }
              while (*v31 == 65);
              v15[2] = (uint64_t)(v31 + 3);
              *((_DWORD *)v15 + 6) = *(_DWORD *)(a4 + 120);
              goto LABEL_321;
            }
LABEL_880:
            v795 = (uint64_t *)*v15;
            pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v774);
            v180 = v795;
            v12 = 1;
            if (!v795)
              return v12;
            goto LABEL_1374;
          }
          goto LABEL_885;
        }
LABEL_280:
        *(_QWORD *)&v791 = 0;
        v197 = a1;
        v198 = 6;
        goto LABEL_287;
      case 7:
        if ((_DWORD)v12)
        {
          if ((_DWORD)v12 != 1)
            goto LABEL_48;
LABEL_884:
          v15 = v795;
LABEL_885:
          v194 = (uint64_t *)*v15;
LABEL_886:
          v795 = v194;
          pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v774);
          v180 = v795;
          if (!v795)
            return 0;
LABEL_887:
          v12 = 0;
          *((_DWORD *)v180 + 102) = 0;
LABEL_1375:
          *v14 = v180;
          goto LABEL_1376;
        }
        v15 = v795;
        v34 = (unsigned __int8 *)(v795[2] + __rev16(*(unsigned __int16 *)(v795[2] + 1)));
        v795[2] = (uint64_t)v34;
        if (*v34 == 65)
        {
LABEL_286:
          *(_QWORD *)&v791 = 0;
          v197 = a1;
          v198 = 7;
LABEL_287:
          v199 = pcre_getMem(v197, v198, &v791, a4, a5, (uint64_t)a6, a7, a8);
          v23 = (uint64_t *)v791;
          v24 = v795;
          if (!(_QWORD)v791 || v199 < 0)
            goto LABEL_1176;
          v181 = 0;
          v25 = 0;
          v26 = v795[1];
          *(_QWORD *)(v791 + 8) = v26;
          v23[2] = v24[2] + 3;
          *((_DWORD *)v23 + 6) = *((_DWORD *)v24 + 6);
          v182 = v24[4];
          *v23 = (uint64_t)v24;
          v23[4] = v182;
          v23[5] = 0;
LABEL_295:
          *((_DWORD *)v23 + 12) = 2;
          goto LABEL_296;
        }
        if ((v15[6] & 1) != 0)
          goto LABEL_880;
        goto LABEL_319;
      case 8:
        if ((_DWORD)v12)
        {
          if ((_DWORD)v12 == 1)
          {
            v15 = v795;
            *(_QWORD *)(a4 + 136) = v795[14];
            v33 = v15[18];
            if ((uint64_t *)v33 != (uint64_t *)((char *)v15 + 268))
            {
              heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v33);
              v15 = v795;
            }
            goto LABEL_880;
          }
          goto LABEL_48;
        }
        v200 = v795;
        *(_QWORD *)(a4 + 136) = v795 + 14;
        memcpy(*(void **)(a4 + 16), (const void *)v200[18], 4 * *((unsigned int *)v200 + 38));
        v15 = v795;
        v201 = v795[7];
        v202 = __rev16(*(unsigned __int16 *)(v201 + 1));
        v795[7] = v201 + v202;
        if (*(_BYTE *)(v201 + v202) == 65)
          goto LABEL_291;
        *(_QWORD *)(a4 + 136) = v15[14];
        v572 = v15[18];
        if ((uint64_t *)v572 == (uint64_t *)((char *)v15 + 268))
          goto LABEL_885;
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v572);
        goto LABEL_884;
      case 9:
        if ((_DWORD)v12)
        {
          if ((_DWORD)v12 != 1)
            goto LABEL_48;
          v15 = v795;
          v34 = (unsigned __int8 *)v795[2];
          v35 = *v34;
        }
        else
        {
          v15 = v795;
          v34 = (unsigned __int8 *)(v795[2] + __rev16(*(unsigned __int16 *)(v795[2] + 1)));
          v795[2] = (uint64_t)v34;
          v35 = *v34;
          if (v35 == 65)
          {
LABEL_298:
            *(_QWORD *)&v791 = 0;
            v18 = a1;
            v19 = 9;
LABEL_11:
            v22 = pcre_getMem(v18, v19, &v791, a4, a5, (uint64_t)a6, a7, a8);
            v23 = (uint64_t *)v791;
            v24 = v795;
            if (!(_QWORD)v791 || v22 < 0)
              goto LABEL_1176;
            v25 = 0;
            v26 = v795[1];
            *(_QWORD *)(v791 + 8) = v26;
            v27 = v24[2];
LABEL_294:
            v23[2] = v27 + 3;
            *((_DWORD *)v23 + 6) = *((_DWORD *)v24 + 6);
            v182 = v24[4];
            v23[4] = v182;
            v181 = v24[5];
            *v23 = (uint64_t)v24;
            v23[5] = v181;
            goto LABEL_295;
          }
        }
        if (v35 != 74 && v35 != 65)
          goto LABEL_885;
        do
        {
          v34 += __rev16(*(unsigned __int16 *)(v34 + 1));
          v15[2] = (uint64_t)v34;
        }
        while (*v34 == 65);
        *((_DWORD *)v15 + 6) = *(_DWORD *)(a4 + 120);
        v204 = *(_QWORD *)(a4 + 112);
        v15[1] = v204;
        v205 = *v34;
        if (v205 != 66 && v204 != v15[13])
        {
          if (v34[3] == 18)
          {
            v15[4] = v15[4] & 0xFFFFFFFFFFFFFFF8 | v34[4];
            v205 = *v34;
          }
          if (v205 == 68)
          {
            *(_QWORD *)&v791 = 0;
            v38 = a1;
            v39 = 10;
LABEL_258:
            v183 = pcre_getMem(v38, v39, &v791, a4, a5, (uint64_t)a6, a7, a8);
            v23 = (uint64_t *)v791;
            v184 = v795;
            if ((_QWORD)v791 && (v183 & 0x80000000) == 0)
              goto LABEL_260;
            goto LABEL_1005;
          }
          *(_QWORD *)&v791 = 0;
          v36 = a1;
          v37 = 12;
LABEL_44:
          v41 = pcre_getMem(v36, v37, &v791, a4, a5, (uint64_t)a6, a7, a8);
          v23 = (uint64_t *)v791;
          v24 = v795;
          if ((_QWORD)v791 && (v41 & 0x80000000) == 0)
          {
LABEL_46:
            v25 = 0;
            v26 = v24[1];
            v23[1] = v26;
            v42 = v24[12];
LABEL_277:
            v23[2] = v42;
            *((_DWORD *)v23 + 6) = *((_DWORD *)v24 + 6);
            v182 = v24[4];
            v23[4] = v182;
            v181 = v24[5];
            *((_DWORD *)v23 + 12) = 2;
            v23[5] = v181;
LABEL_278:
            *v23 = (uint64_t)v24;
LABEL_296:
            v795 = v23;
            goto LABEL_1368;
          }
LABEL_1176:
          v597 = (uint64_t *)*v24;
          goto LABEL_1372;
        }
LABEL_319:
        v40 = (uint64_t)(v34 + 3);
LABEL_320:
        v15[2] = v40;
LABEL_321:
        v785 = v11;
        break;
      case 10:
        if ((_DWORD)v12)
          goto LABEL_48;
        *(_QWORD *)&v791 = 0;
        v36 = a1;
        v37 = 11;
        goto LABEL_44;
      case 11:
      case 13:
      case 17:
      case 19:
        v15 = v795;
        if (!(_DWORD)v12)
          goto LABEL_885;
        goto LABEL_49;
      case 12:
        if ((_DWORD)v12)
          goto LABEL_48;
        *(_QWORD *)&v791 = 0;
        v38 = a1;
        v39 = 13;
        goto LABEL_258;
      case 14:
        v15 = v795;
        if ((_DWORD)v12)
          goto LABEL_49;
        v34 = (unsigned __int8 *)v795[10];
        do
        {
          v34 += __rev16(*(unsigned __int16 *)(v34 + 1));
          v15[10] = (uint64_t)v34;
        }
        while (*v34 == 65);
        goto LABEL_319;
      case 15:
        v15 = v795;
        if ((_DWORD)v12)
          goto LABEL_49;
        v40 = v795[2] + 1;
        goto LABEL_320;
      case 16:
        if ((_DWORD)v12)
          goto LABEL_48;
        *(_QWORD *)&v791 = 0;
        v36 = a1;
        v37 = 17;
        goto LABEL_44;
      case 18:
        if ((_DWORD)v12)
          goto LABEL_48;
        *(_QWORD *)&v791 = 0;
        v38 = a1;
        v39 = 19;
        goto LABEL_258;
      case 20:
        v44 = (uint64_t **)v795;
        if ((_DWORD)v12)
          goto LABEL_250;
        v785 = v11;
        v45 = v8;
        v46 = *((_DWORD *)v795 + 56);
        if (v46 >= *((_DWORD *)v795 + 58))
          goto LABEL_99;
        v47 = (unsigned __int8 *)v795[1];
        v48 = *((_DWORD *)v795 + 57);
        if (!match_ref_0(*((_DWORD *)v795 + 61), v47, v48, (_QWORD *)a4, v795[4]))
          goto LABEL_99;
        v44[1] = (uint64_t *)&v47[v48];
        *((_DWORD *)v44 + 56) = v46 + 1;
        goto LABEL_54;
      case 21:
        v44 = (uint64_t **)v795;
        if ((_DWORD)v12)
          goto LABEL_250;
        v785 = v11;
        v51 = (unsigned __int8 *)(v795[1] - *((int *)v795 + 57));
        v795[1] = (uint64_t)v51;
        v52 = (unsigned __int8 *)v44[11];
        goto LABEL_57;
      case 22:
        v15 = v795;
        if ((_DWORD)v12)
          goto LABEL_49;
        v54 = *((_DWORD *)v795 + 56);
        if (v54 >= *((_DWORD *)v795 + 58))
          goto LABEL_885;
        v55 = (unsigned __int8 *)v795[1];
        if ((unint64_t)v55 >= *(_QWORD *)(a4 + 96))
          goto LABEL_885;
        v795[1] = (uint64_t)(v55 + 1);
        v56 = *v55;
        if ((~v56 & 0xC0) != 0)
          goto LABEL_891;
        v57 = utf8_table4[v56 & 0x3F];
        v58 = 6 * v57;
        v56 = (utf8_table3[utf8_table4[v56 & 0x3F]] & v56) << (6 * v57);
        v59 = v55 + 2;
        v60 = v57 + 1;
        v61 = v58 - 6;
        do
        {
          v15[1] = (uint64_t)v59;
          v56 |= (*(v59++ - 1) & 0x3F) << v61;
          --v60;
          v61 -= 6;
        }
        while (v60 > 1);
        if (v56 < 256)
        {
LABEL_891:
          if (((*(unsigned __int8 *)(v15[9] + v56 / 8) >> (v56 & 7)) & 1) != 0)
          {
LABEL_892:
            *((_DWORD *)v15 + 56) = v54 + 1;
LABEL_893:
            *(_QWORD *)&v791 = 0;
            v64 = a1;
            v65 = 22;
            goto LABEL_1229;
          }
        }
        else if (*((_DWORD *)v15 + 62) != 59)
        {
          goto LABEL_892;
        }
        goto LABEL_885;
      case 23:
        v15 = v795;
        if ((_DWORD)v12)
          goto LABEL_49;
        v62 = *((_DWORD *)v795 + 56);
        if (v62 >= *((_DWORD *)v795 + 58))
          goto LABEL_885;
        v63 = (_BYTE *)v795[1];
        if ((unint64_t)v63 >= *(_QWORD *)(a4 + 96))
          goto LABEL_885;
        v795[1] = (uint64_t)(v63 + 1);
        if (((*(unsigned __int8 *)(v15[9] + ((unint64_t)*v63 >> 3)) >> (*v63 & 7)) & 1) == 0)
          goto LABEL_885;
        *((_DWORD *)v15 + 56) = v62 + 1;
        goto LABEL_74;
      case 24:
        v44 = (uint64_t **)v795;
        if ((_DWORD)v12)
          goto LABEL_250;
        v66 = (uint64_t *)v795[1];
        v795[1] = (uint64_t)v66 - 1;
        if (v66 == v44[11])
          goto LABEL_271;
        if ((*((_BYTE *)v66 - 1) & 0xC0) == 0x80)
        {
          v67 = (char *)v66 - 2;
          do
          {
            v44[1] = (uint64_t *)v67;
            v68 = *v67--;
          }
          while ((v68 & 0xC0) == 0x80);
        }
        goto LABEL_80;
      case 25:
        v44 = (uint64_t **)v795;
        v69 = v795[1] - 1;
        v795[1] = v69;
        if ((_DWORD)v12)
          goto LABEL_250;
        v70 = (unsigned __int8 *)v44[11];
        goto LABEL_83;
      case 26:
        v71 = v795;
        if ((_DWORD)v12)
        {
          v43 = (uint64_t *)*v795;
          goto LABEL_251;
        }
        v185 = *((_DWORD *)v795 + 56);
        if (v185 < *((_DWORD *)v795 + 58))
        {
          v186 = (unsigned __int8 *)v795[1];
          if ((unint64_t)v186 < *(_QWORD *)(a4 + 96))
          {
            v795[1] = (uint64_t)(v186 + 1);
            v187 = *v186;
            if ((~v187 & 0xC0) == 0)
            {
              v188 = utf8_table4[v187 & 0x3F];
              v189 = 6 * v188;
              v187 = (utf8_table3[utf8_table4[v187 & 0x3F]] & v187) << (6 * v188);
              v190 = v186 + 2;
              v191 = v188 + 1;
              v192 = v189 - 6;
              do
              {
                v71[1] = (uint64_t)v190;
                v187 |= (*(v190++ - 1) & 0x3F) << v192;
                --v191;
                v192 -= 6;
              }
              while (v191 > 1);
            }
            if (match_xclass(v187, (_BYTE *)v71[9]))
            {
              *((_DWORD *)v71 + 56) = v185 + 1;
              goto LABEL_268;
            }
          }
        }
        v194 = (uint64_t *)*v71;
        goto LABEL_886;
      case 27:
        v15 = v795;
        if ((_DWORD)v12)
          goto LABEL_49;
        v72 = v795[1];
        v795[1] = v72 - 1;
        if (v72 == v15[11])
          goto LABEL_885;
        if ((*(_BYTE *)(v72 - 1) & 0xC0) == 0x80)
        {
          v73 = (char *)(v72 - 2);
          do
          {
            v15[1] = (uint64_t)v73;
            v74 = *v73--;
          }
          while ((v74 & 0xC0) == 0x80);
        }
        goto LABEL_92;
      case 28:
        v44 = (uint64_t **)v795;
        if ((_DWORD)v12)
          goto LABEL_250;
        v45 = v8;
        v75 = *((_DWORD *)v795 + 56);
        if (v75 >= *((_DWORD *)v795 + 58) || (v76 = (char *)v795[1], (unint64_t)v76 >= *(_QWORD *)(a4 + 96)))
        {
          v795 = (uint64_t *)*v795;
          pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v774);
          v206 = v795;
          if (!v795)
            return 0;
          v12 = 0;
          *((_DWORD *)v795 + 102) = 0;
          *v14 = v206;
          v8 = v45;
          goto LABEL_1376;
        }
        v785 = v11;
        v77 = *((_DWORD *)v795 + 57);
        if (!memcmp(v76, (const void *)v795[8], v77))
          goto LABEL_901;
        v77 = __n;
        if (!__n)
        {
          v795 = *v44;
          pcre_freeMem(a1, &v796, v78, a4, a5, (uint64_t)a6, a7, a8, v774);
          v582 = v795;
          if (!v795)
            return 0;
          __n = 0;
          goto LABEL_913;
        }
        if (!memcmp(v76, __s2, __n))
        {
LABEL_901:
          v44[1] = (uint64_t *)&v76[v77];
          *((_DWORD *)v44 + 56) = v75 + 1;
          goto LABEL_902;
        }
LABEL_99:
        v795 = *v44;
        pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v774);
        v79 = v795;
        if (!v795)
          return 0;
        v8 = v45;
        v12 = 0;
        *((_DWORD *)v795 + 102) = 0;
LABEL_101:
        *v14 = v79;
        goto LABEL_102;
      case 29:
        v44 = (uint64_t **)v795;
        if ((_DWORD)v12)
          goto LABEL_250;
        v785 = v11;
        v80 = (char *)(v795[1] - *((int *)v795 + 57));
        v795[1] = (uint64_t)v80;
        v81 = (char *)v44[11];
        goto LABEL_105;
      case 30:
        v15 = v795;
        if ((_DWORD)v12)
          goto LABEL_49;
        v82 = *((_DWORD *)v795 + 56);
        if (v82 >= *((_DWORD *)v795 + 58))
          goto LABEL_885;
        v83 = (unsigned __int8 *)v795[1];
        if ((unint64_t)v83 >= *(_QWORD *)(a4 + 96))
          goto LABEL_885;
        v84 = *((_DWORD *)v795 + 55);
        v85 = *(_QWORD *)(a4 + 32);
        v795[1] = (uint64_t)(v83 + 1);
        if (v84 != *(unsigned __int8 *)(v85 + *v83))
          goto LABEL_885;
        *((_DWORD *)v15 + 56) = v82 + 1;
        goto LABEL_113;
      case 31:
        v44 = (uint64_t **)v795;
        v86 = v795[1] - 1;
        v795[1] = v86;
        if ((_DWORD)v12)
          goto LABEL_250;
        v87 = (unsigned __int8 *)v44[11];
        goto LABEL_116;
      case 32:
        v15 = v795;
        if ((_DWORD)v12)
          goto LABEL_49;
        v88 = *((_DWORD *)v795 + 56);
        if (v88 >= *((_DWORD *)v795 + 58))
          goto LABEL_885;
        v89 = (unsigned __int8 *)v795[1];
        if ((unint64_t)v89 >= *(_QWORD *)(a4 + 96))
          goto LABEL_885;
        v90 = *((_DWORD *)v795 + 55);
        v795[1] = (uint64_t)(v89 + 1);
        if (v90 != *v89)
          goto LABEL_885;
        *((_DWORD *)v15 + 56) = v88 + 1;
        goto LABEL_123;
      case 33:
        v44 = (uint64_t **)v795;
        v91 = v795[1] - 1;
        v795[1] = v91;
        if ((_DWORD)v12)
          goto LABEL_250;
        v87 = (unsigned __int8 *)v44[11];
        goto LABEL_126;
      case 34:
        v15 = v795;
        if ((_DWORD)v12)
          goto LABEL_49;
        v92 = (unsigned __int8 *)v795[1];
        v93 = v92 + 1;
        v795[1] = (uint64_t)(v92 + 1);
        v94 = *v92;
        if ((~v94 & 0xC0) != 0)
          goto LABEL_133;
        v95 = utf8_table4[v94 & 0x3F];
        v96 = 6 * v95;
        v94 = (utf8_table3[utf8_table4[v94 & 0x3F]] & v94) << (6 * v95);
        v97 = v95 + 1;
        v98 = v96 - 6;
        do
        {
          v99 = v93++;
          v15[1] = (uint64_t)v93;
          v94 |= (*v99 & 0x3F) << v98;
          --v97;
          v98 -= 6;
        }
        while (v97 > 1);
        if (v94 <= 255)
LABEL_133:
          v94 = *(unsigned __int8 *)(*(_QWORD *)(a4 + 32) + v94);
        v100 = *((_DWORD *)v15 + 56);
        if (v100 >= *((_DWORD *)v15 + 58)
          || (unint64_t)v93 >= *(_QWORD *)(a4 + 96)
          || *((_DWORD *)v15 + 55) == v94)
        {
          goto LABEL_885;
        }
        *((_DWORD *)v15 + 56) = v100 + 1;
        goto LABEL_138;
      case 35:
        v15 = v795;
        if ((_DWORD)v12)
          goto LABEL_49;
        v103 = *((_DWORD *)v795 + 56);
        if (v103 >= *((_DWORD *)v795 + 58))
          goto LABEL_885;
        v104 = (unsigned __int8 *)v795[1];
        if ((unint64_t)v104 >= *(_QWORD *)(a4 + 96))
          goto LABEL_885;
        v105 = *((_DWORD *)v795 + 55);
        v106 = *(_QWORD *)(a4 + 32);
        v795[1] = (uint64_t)(v104 + 1);
        if (v105 == *(unsigned __int8 *)(v106 + *v104))
          goto LABEL_885;
        *((_DWORD *)v15 + 56) = v103 + 1;
        goto LABEL_144;
      case 36:
        v44 = (uint64_t **)v795;
        if ((_DWORD)v12)
          goto LABEL_250;
        v107 = (uint64_t *)v795[1];
        v795[1] = (uint64_t)v107 - 1;
        if (v107 == v44[11])
          goto LABEL_271;
        if ((*((_BYTE *)v107 - 1) & 0xC0) == 0x80)
        {
          v108 = (char *)v107 - 2;
          do
          {
            v44[1] = (uint64_t *)v108;
            v109 = *v108--;
          }
          while ((v109 & 0xC0) == 0x80);
        }
        goto LABEL_150;
      case 37:
        v44 = (uint64_t **)v795;
        if ((_DWORD)v12)
          goto LABEL_250;
        v110 = v795[1] - 1;
        v795[1] = v110;
        v111 = (unsigned __int8 *)v44[11];
        goto LABEL_153;
      case 38:
        v15 = v795;
        if ((_DWORD)v12)
          goto LABEL_49;
        v112 = (unsigned __int8 *)v795[1];
        v113 = v112 + 1;
        v795[1] = (uint64_t)(v112 + 1);
        v114 = *v112;
        if ((~v114 & 0xC0) != 0)
        {
          v118 = v113;
        }
        else
        {
          v115 = utf8_table4[v114 & 0x3F];
          v114 = (utf8_table3[utf8_table4[v114 & 0x3F]] & v114) << (6 * v115);
          v116 = 6 * v115 - 6;
          v117 = v115 + 1;
          do
          {
            v118 = v113 + 1;
            v15[1] = (uint64_t)(v113 + 1);
            v114 |= (*v113 & 0x3F) << v116;
            v116 -= 6;
            --v117;
            ++v113;
          }
          while (v117 > 1);
        }
        v208 = *((_DWORD *)v15 + 56);
        if (v208 >= *((_DWORD *)v15 + 58)
          || (unint64_t)v118 >= *(_QWORD *)(a4 + 96)
          || *((_DWORD *)v15 + 55) == v114)
        {
          goto LABEL_885;
        }
        *((_DWORD *)v15 + 56) = v208 + 1;
        goto LABEL_317;
      case 39:
        v15 = v795;
        if ((_DWORD)v12)
          goto LABEL_49;
        v119 = *((_DWORD *)v795 + 56);
        if (v119 >= *((_DWORD *)v795 + 58))
          goto LABEL_885;
        v120 = (unsigned __int8 *)v795[1];
        if ((unint64_t)v120 >= *(_QWORD *)(a4 + 96))
          goto LABEL_885;
        v121 = *((_DWORD *)v795 + 55);
        v795[1] = (uint64_t)(v120 + 1);
        if (v121 == *v120)
          goto LABEL_885;
        *((_DWORD *)v15 + 56) = v119 + 1;
        goto LABEL_165;
      case 40:
        v44 = (uint64_t **)v795;
        if ((_DWORD)v12)
          goto LABEL_250;
        v122 = (uint64_t *)v795[1];
        v795[1] = (uint64_t)v122 - 1;
        if (v122 == v44[11])
          goto LABEL_271;
        if ((*((_BYTE *)v122 - 1) & 0xC0) == 0x80)
        {
          v123 = (char *)v122 - 2;
          do
          {
            v44[1] = (uint64_t *)v123;
            v124 = *v123--;
          }
          while ((v124 & 0xC0) == 0x80);
        }
        goto LABEL_171;
      case 41:
        v44 = (uint64_t **)v795;
        if ((_DWORD)v12)
          goto LABEL_250;
        v125 = v795[1] - 1;
        v795[1] = v125;
        v126 = (unsigned __int8 *)v44[11];
        goto LABEL_174;
      case 42:
        v15 = v795;
        if ((_DWORD)v12)
          goto LABEL_49;
        if (*((_DWORD *)v795 + 56) >= *((_DWORD *)v795 + 58))
          goto LABEL_885;
        v127 = (unsigned __int8 *)v795[1];
        if ((unint64_t)v127 >= *(_QWORD *)(a4 + 96))
          goto LABEL_885;
        v795[1] = (uint64_t)(v127 + 1);
        v128 = *v127;
        if ((~v128 & 0xC0) == 0)
        {
          v129 = utf8_table4[v128 & 0x3F];
          v128 = (utf8_table3[utf8_table4[v128 & 0x3F]] & v128) << (6 * v129);
          v130 = v127 + 2;
          v131 = 6 * v129 - 6;
          v132 = v129 + 1;
          do
          {
            v15[1] = (uint64_t)v130;
            v128 |= (*(v130++ - 1) & 0x3F) << v131;
            v131 -= 6;
            --v132;
          }
          while (v132 > 1);
        }
        v133 = ucp_findchar(v128, (int *)v15 + 49, (unsigned int *)v15 + 50);
        v15 = v795;
        *((_DWORD *)v795 + 48) = v133;
        if (*((_DWORD *)v15 + 47) == (*(_DWORD *)v15[26] == *((_DWORD *)v15 + 51)))
          goto LABEL_885;
        ++*((_DWORD *)v15 + 56);
        goto LABEL_184;
      case 43:
        v15 = v795;
        if ((_DWORD)v12)
          goto LABEL_49;
        if (*((_DWORD *)v795 + 56) >= *((_DWORD *)v795 + 58))
          goto LABEL_885;
        v134 = (unsigned __int8 *)v795[1];
        if ((unint64_t)v134 >= *(_QWORD *)(a4 + 96))
          goto LABEL_885;
        v795[1] = (uint64_t)(v134 + 1);
        v135 = *v134;
        if (*(_DWORD *)(a4 + 60) && (v135 & 0xC0) == 0xC0)
        {
          v136 = utf8_table4[v135 & 0x3F];
          v135 = (utf8_table3[utf8_table4[v135 & 0x3F]] & v135) << (6 * v136);
          v137 = v134 + 2;
          v138 = 6 * v136 - 6;
          v139 = v136 + 1;
          do
          {
            v15[1] = (uint64_t)v137;
            v135 |= (*(v137++ - 1) & 0x3F) << v138;
            v138 -= 6;
            --v139;
          }
          while (v139 > 1);
        }
        v140 = ucp_findchar(v135, (int *)v15 + 49, (unsigned int *)v15 + 50);
        v15 = v795;
        *((_DWORD *)v795 + 48) = v140;
        if (v140 == 2)
          goto LABEL_885;
        for (j = (unsigned __int8 *)v15[1]; (unint64_t)j < *(_QWORD *)(a4 + 96); v15[1] = (uint64_t)j)
        {
          v142 = *j;
          v143 = 1;
          if (*(_DWORD *)(a4 + 60) && (v142 & 0xC0) == 0xC0)
          {
            v144 = utf8_table4[v142 & 0x3F];
            v142 = (utf8_table3[v144] & v142) << (6 * v144);
            v145 = (char *)(j + 1);
            if (v144 <= 1)
              v146 = 1;
            else
              v146 = v144;
            v147 = 6 * v144 - 6;
            do
            {
              v148 = *v145++;
              v142 |= (v148 & 0x3F) << v147;
              v147 -= 6;
              --v146;
            }
            while (v146);
            v143 = v144 + 1;
          }
          v149 = ucp_findchar(v142, (int *)v15 + 49, (unsigned int *)v15 + 50);
          v15 = v795;
          *((_DWORD *)v795 + 48) = v149;
          if (v149 != 2)
            break;
          j = (unsigned __int8 *)(v15[1] + v143);
        }
        ++*((_DWORD *)v15 + 56);
        goto LABEL_906;
      case 44:
        v15 = v795;
        if ((_DWORD)v12)
          goto LABEL_49;
        v150 = *((_DWORD *)v795 + 56);
        if (v150 < *((_DWORD *)v795 + 58))
        {
          v151 = (unsigned __int8 *)v795[1];
          if ((unint64_t)v151 < *(_QWORD *)(a4 + 96))
          {
            v795[1] = (uint64_t)(v151 + 1);
            v152 = *v151;
            if ((~v152 & 0xC0) == 0)
            {
              v153 = utf8_table4[v152 & 0x3F];
              v152 = (utf8_table3[utf8_table4[v152 & 0x3F]] & v152) << (6 * v153);
              v154 = v151 + 2;
              v155 = 6 * v153 - 6;
              v156 = v153 + 1;
              do
              {
                v15[1] = (uint64_t)v154;
                v152 |= (*(v154++ - 1) & 0x3F) << v155;
                v155 -= 6;
                --v156;
              }
              while (v156 > 1);
            }
            switch(*((_DWORD *)v15 + 54))
            {
              case 5:
                if (v152 > 255 || (*(_BYTE *)(*(_QWORD *)(a4 + 40) + v152) & 4) == 0)
                  goto LABEL_940;
                goto LABEL_885;
              case 6:
                if (v152 <= 255 && (*(_BYTE *)(*(_QWORD *)(a4 + 40) + v152) & 4) != 0)
                  goto LABEL_940;
                goto LABEL_885;
              case 7:
                if (v152 > 255 || (*(_BYTE *)(*(_QWORD *)(a4 + 40) + v152) & 1) == 0)
                  goto LABEL_940;
                goto LABEL_885;
              case 8:
                if (v152 <= 255 && (*(_BYTE *)(*(_QWORD *)(a4 + 40) + v152) & 1) != 0)
                  goto LABEL_940;
                goto LABEL_885;
              case 9:
                if (v152 > 255 || (*(_BYTE *)(*(_QWORD *)(a4 + 40) + v152) & 0x10) == 0)
                  goto LABEL_940;
                goto LABEL_885;
              case 0xA:
                if (v152 < 256 || (*(_BYTE *)(*(_QWORD *)(a4 + 40) + v152) & 0x10) != 0)
                  goto LABEL_940;
                goto LABEL_885;
              case 0xB:
                if ((v15[4] & 4) != 0 || v152 != 10)
                  goto LABEL_940;
                goto LABEL_885;
              case 0xC:
LABEL_940:
                *((_DWORD *)v15 + 56) = v150 + 1;
                goto LABEL_941;
              default:
                goto LABEL_914;
            }
          }
        }
        goto LABEL_885;
      case 45:
        v15 = v795;
        if ((_DWORD)v12)
          goto LABEL_49;
        v157 = *((_DWORD *)v795 + 56);
        if (v157 < *((_DWORD *)v795 + 58))
        {
          v158 = (unsigned __int8 *)v795[1];
          if ((unint64_t)v158 < *(_QWORD *)(a4 + 96))
          {
            v795[1] = (uint64_t)(v158 + 1);
            v159 = *v158;
            switch(*((_DWORD *)v15 + 54))
            {
              case 5:
                if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v159) & 4) == 0)
                  goto LABEL_954;
                goto LABEL_885;
              case 6:
                if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v159) & 4) != 0)
                  goto LABEL_954;
                goto LABEL_885;
              case 7:
                if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v159) & 1) == 0)
                  goto LABEL_954;
                goto LABEL_885;
              case 8:
                if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v159) & 1) != 0)
                  goto LABEL_954;
                goto LABEL_885;
              case 9:
                if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v159) & 0x10) == 0)
                  goto LABEL_954;
                goto LABEL_885;
              case 0xA:
                if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v159) & 0x10) != 0)
                  goto LABEL_954;
                goto LABEL_885;
              case 0xB:
                if ((v15[4] & 4) != 0 || (_DWORD)v159 != 10)
                  goto LABEL_954;
                goto LABEL_885;
              case 0xC:
LABEL_954:
                *((_DWORD *)v15 + 56) = v157 + 1;
                goto LABEL_955;
              default:
LABEL_914:
                v795 = (uint64_t *)*v15;
                pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v774);
                v180 = v795;
                v12 = 4294967282;
                if (!v795)
                  return v12;
                goto LABEL_1374;
            }
          }
        }
        goto LABEL_885;
      case 46:
        v44 = (uint64_t **)v795;
        if ((_DWORD)v12)
          goto LABEL_250;
        v160 = (uint64_t *)v795[1];
        v795[1] = (uint64_t)v160 - 1;
        if (v160 == v44[11])
          goto LABEL_271;
        if ((*((_BYTE *)v160 - 1) & 0xC0) == 0x80)
        {
          v161 = (char *)v160 - 2;
          do
          {
            v44[1] = (uint64_t *)v161;
            v162 = *v161--;
          }
          while ((v162 & 0xC0) == 0x80);
        }
        goto LABEL_226;
      case 47:
        v44 = (uint64_t **)v795;
        if ((_DWORD)v12)
          goto LABEL_250;
        v163 = (uint64_t *)v795[1];
        v164 = (unsigned __int8 *)v163 - 1;
        v795[1] = (uint64_t)v163 - 1;
        if (v163 == v44[11])
          goto LABEL_271;
        while (1)
        {
          v165 = *v164;
          v166 = v165 & 0xC0;
          if (v166 == 128)
          {
            v167 = v164 - 1;
            do
            {
              v44[1] = (uint64_t *)v167;
              v168 = *v167--;
              v165 = v168;
              v166 = v168 & 0xC0;
            }
            while (v166 == 128);
            v164 = v167 + 1;
          }
          v169 = v166 != 192 || *(_DWORD *)(a4 + 60) == 0;
          if (!v169)
          {
            v170 = utf8_table4[v165 & 0x3F];
            v171 = 6 * v170;
            v165 = (utf8_table3[v170] & v165) << (6 * v170);
            v172 = (char *)(v164 + 1);
            if (v170 <= 1)
              v170 = 1;
            v173 = v171 - 6;
            do
            {
              v174 = *v172++;
              v165 |= (v174 & 0x3F) << v173;
              v173 -= 6;
              --v170;
            }
            while (v170);
          }
          v175 = ucp_findchar(v165, (int *)v44 + 49, (unsigned int *)v44 + 50);
          v44 = (uint64_t **)v795;
          *((_DWORD *)v795 + 48) = v175;
          if (v175 != 2)
            break;
          v164 = (unsigned __int8 *)v44[1] - 1;
          v44[1] = (uint64_t *)v164;
        }
        goto LABEL_1232;
      case 48:
        v44 = (uint64_t **)v795;
        if ((_DWORD)v12)
          goto LABEL_250;
        v176 = (uint64_t *)v795[1];
        v795[1] = (uint64_t)v176 - 1;
        if (v176 == v44[11])
          goto LABEL_271;
        if ((*((_BYTE *)v176 - 1) & 0xC0) == 0x80)
        {
          v177 = (char *)v176 - 2;
          do
          {
            v44[1] = (uint64_t *)v177;
            v178 = *v177--;
          }
          while ((v178 & 0xC0) == 0x80);
        }
        goto LABEL_248;
      case 49:
        v44 = (uint64_t **)v795;
        v179 = v795[1] - 1;
        v795[1] = v179;
        if ((_DWORD)v12)
        {
LABEL_250:
          v43 = *v44;
          goto LABEL_251;
        }
        v193 = v44[11];
        goto LABEL_270;
      default:
        v11 = pcre_getMem(a1, v13, &v795, a4, a5, (uint64_t)a6, a7, a8);
LABEL_254:
        v12 = 4294967290;
        if (!v795 || v11 < 0)
          return v12;
        v181 = 0;
        v25 = 0;
        *v795 = 0;
        v23 = v795;
        v26 = a2;
        v795[1] = a2;
        v23[2] = v787;
        *((_DWORD *)v23 + 6) = 2;
        v23[4] = v8;
        v23[5] = 0;
        *((_DWORD *)v23 + 12) = 2;
        v182 = v8;
        goto LABEL_1368;
    }
LABEL_322:
    while (2)
    {
      v44 = (uint64_t **)v795;
      v209 = (unsigned __int8 *)v795[2];
      v210 = *v209;
      *((_DWORD *)v795 + 62) = v210;
      *((_DWORD *)v44 + 42) = 0;
      if (*(_DWORD *)(a4 + 72))
      {
        v211 = (unint64_t)v44[1];
        if (v211 >= *(_QWORD *)(a4 + 96) && v211 > *(_QWORD *)(a4 + 104))
          *(_DWORD *)(a4 + 76) = 1;
      }
      if (v210 >= 0x51)
      {
        v575 = v210 - 80;
        *((_DWORD *)v44 + 60) = v210 - 80;
        if (v210 - 80 >= 0x65)
        {
          v575 = __rev16(*((unsigned __int16 *)v209 + 2));
          *((_DWORD *)v44 + 60) = v575;
        }
        v576 = 2 * v575;
        *((_DWORD *)v44 + 61) = 2 * v575;
        v11 = v785;
        if ((signed int)(2 * v575) >= *(_DWORD *)(a4 + 28))
        {
          *((_DWORD *)v44 + 62) = 80;
LABEL_10:
          *(_QWORD *)&v791 = 0;
          v18 = a1;
          v19 = 2;
        }
        else
        {
          v577 = *(_QWORD *)(a4 + 16);
          *((_DWORD *)v44 + 64) = *(_DWORD *)(v577 + 4 * v576);
          *((_DWORD *)v44 + 65) = *(_DWORD *)(v577 + 4 * (v576 | 1));
          v578 = *(_DWORD *)(a4 + 24) - v575;
          *((_DWORD *)v44 + 66) = *(_DWORD *)(v577 + 4 * v578);
          *((_DWORD *)v44 + 63) = *(_DWORD *)(a4 + 124);
          *(_DWORD *)(v577 + 4 * v578) = *((_DWORD *)v44 + 2) - *(_DWORD *)(a4 + 88);
LABEL_7:
          *(_QWORD *)&v791 = 0;
          v18 = a1;
          v19 = 1;
        }
        goto LABEL_11;
      }
      switch(v210)
      {
        case 0u:
          v265 = *(_QWORD *)(a4 + 136);
          if (!v265 || *(_DWORD *)(v265 + 8))
          {
            v595 = v44[1];
            if (*(_DWORD *)(a4 + 68) && v595 == *(uint64_t **)(a4 + 104))
            {
LABEL_996:
              v795 = *v44;
              pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v774);
              v180 = v795;
              v11 = v785;
              if (!v795)
                return 0;
              goto LABEL_887;
            }
            *(_QWORD *)(a4 + 112) = v595;
            *(_DWORD *)(a4 + 120) = *((_DWORD *)v44 + 6);
            v795 = *v44;
            pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v774);
            v180 = v795;
            v12 = 1;
            v11 = v785;
            if (!v795)
              return v12;
LABEL_1374:
            *((_DWORD *)v180 + 102) = v12;
            goto LABEL_1375;
          }
          *(_QWORD *)(a4 + 136) = *(_QWORD *)v265;
          memmove(*(void **)(a4 + 16), *(const void **)(v265 + 32), 4 * *(unsigned int *)(v265 + 40));
          *(_QWORD *)(a4 + 104) = *(_QWORD *)(v265 + 24);
          v266 = v795;
          v795[4] = v795[22];
          v266[2] = *(_QWORD *)(v265 + 16);
          continue;
        case 1u:
          v267 = *(uint64_t **)(a4 + 88);
          v11 = v785;
          goto LABEL_455;
        case 2u:
          if (v44[1] != (uint64_t *)(*(_QWORD *)(a4 + 88) + *(int *)(a4 + 128)))
            goto LABEL_907;
          goto LABEL_807;
        case 3u:
        case 4u:
          v235 = (unsigned __int8 *)v44[1];
          v236 = *(unsigned __int8 **)(a4 + 88);
          if (*(_DWORD *)(a4 + 60))
          {
            if (v235 == v236)
              goto LABEL_699;
            v237 = v44[1];
            do
            {
              v239 = *((unsigned __int8 *)v237 - 1);
              v237 = (uint64_t *)((char *)v237 - 1);
              v238 = v239;
              v240 = v239 & 0xC0;
            }
            while (v240 == 128);
            if (v240 != 192)
              goto LABEL_359;
            v241 = 0;
            v242 = utf8_table4[v238 & 0x3F];
            v243 = 6 * v242;
            v238 = (utf8_table3[v242] & v238) << (6 * v242);
            if (v242 <= 1)
              v242 = 1;
            v244 = v243 - 6;
            do
            {
              v238 |= (*((_BYTE *)v237 + ++v241) & 0x3F) << v244;
              v244 -= 6;
            }
            while (v242 != v241);
            if (v238 >= 256)
LABEL_699:
              v245 = 0;
            else
LABEL_359:
              v245 = (*(unsigned __int8 *)(*(_QWORD *)(a4 + 40) + v238) >> 4) & 1;
            *((_DWORD *)v44 + 43) = v245;
            if ((unint64_t)v235 < *(_QWORD *)(a4 + 96))
            {
              v493 = *v235;
              if ((~v493 & 0xC0) != 0)
                goto LABEL_707;
              v494 = utf8_table4[v493 & 0x3F];
              v495 = 6 * v494;
              v493 = (utf8_table3[v494] & v493) << (6 * v494);
              v496 = (char *)(v235 + 1);
              if (v494 <= 1)
                v494 = 1;
              v497 = v495 - 6;
              do
              {
                v498 = *v496++;
                v493 |= (v498 & 0x3F) << v497;
                v497 -= 6;
                --v494;
              }
              while (v494);
              if (v493 <= 255)
              {
LABEL_707:
                v499 = (unsigned __int8 *)(*(_QWORD *)(a4 + 40) + v493);
LABEL_794:
                v353 = (*v499 >> 4) & 1;
                goto LABEL_796;
              }
            }
          }
          else
          {
            if (v235 == v236)
              v245 = 0;
            else
              v245 = (*(unsigned __int8 *)(*(_QWORD *)(a4 + 40) + *(v235 - 1)) >> 4) & 1;
            *((_DWORD *)v44 + 43) = v245;
            if ((unint64_t)v235 < *(_QWORD *)(a4 + 96))
            {
              v499 = (unsigned __int8 *)(*(_QWORD *)(a4 + 40) + *v235);
              goto LABEL_794;
            }
          }
          v353 = 0;
LABEL_796:
          *((_DWORD *)v44 + 40) = v353;
          v44[2] = (uint64_t *)(v209 + 1);
          if (*v209 != 4)
            goto LABEL_799;
          if (v245 == v353)
            goto LABEL_964;
          continue;
        case 5u:
          v268 = (unsigned __int8 *)v44[1];
          if ((unint64_t)v268 >= *(_QWORD *)(a4 + 96))
            goto LABEL_996;
          v44[1] = (uint64_t *)(v268 + 1);
          v269 = *v268;
          v11 = v785;
          if (!*(_DWORD *)(a4 + 60))
            goto LABEL_387;
          if ((v269 & 0xC0) != 0xC0)
            goto LABEL_387;
          v270 = utf8_table4[v269 & 0x3F];
          v271 = 6 * v270;
          v269 = (utf8_table3[utf8_table4[v269 & 0x3F]] & v269) << (6 * v270);
          v272 = v268 + 2;
          v273 = v270 + 1;
          v274 = v271 - 6;
          do
          {
            v44[1] = (uint64_t *)v272;
            v269 |= (*(v272++ - 1) & 0x3F) << v274;
            --v273;
            v274 -= 6;
          }
          while (v273 > 1);
          if (v269 <= 255)
          {
LABEL_387:
            if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v269) & 4) != 0)
              goto LABEL_271;
          }
          goto LABEL_807;
        case 6u:
          v275 = (unsigned __int8 *)v44[1];
          if ((unint64_t)v275 >= *(_QWORD *)(a4 + 96))
            goto LABEL_996;
          v44[1] = (uint64_t *)(v275 + 1);
          v276 = *v275;
          v11 = v785;
          if (*(_DWORD *)(a4 + 60))
          {
            if ((v276 & 0xC0) == 0xC0)
            {
              v277 = utf8_table4[v276 & 0x3F];
              v278 = 6 * v277;
              v276 = (utf8_table3[utf8_table4[v276 & 0x3F]] & v276) << (6 * v277);
              v279 = v275 + 2;
              v280 = v277 + 1;
              v281 = v278 - 6;
              do
              {
                v44[1] = (uint64_t *)v279;
                v276 |= (*(v279++ - 1) & 0x3F) << v281;
                --v280;
                v281 -= 6;
              }
              while (v280 > 1);
              if (v276 > 255)
                goto LABEL_271;
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v276) & 4) == 0)
            goto LABEL_271;
          goto LABEL_807;
        case 7u:
          v282 = (unsigned __int8 *)v44[1];
          if ((unint64_t)v282 >= *(_QWORD *)(a4 + 96))
            goto LABEL_996;
          v44[1] = (uint64_t *)(v282 + 1);
          v283 = *v282;
          v11 = v785;
          if (!*(_DWORD *)(a4 + 60))
            goto LABEL_403;
          if ((v283 & 0xC0) != 0xC0)
            goto LABEL_403;
          v284 = utf8_table4[v283 & 0x3F];
          v285 = 6 * v284;
          v283 = (utf8_table3[utf8_table4[v283 & 0x3F]] & v283) << (6 * v284);
          v286 = v282 + 2;
          v287 = v284 + 1;
          v288 = v285 - 6;
          do
          {
            v44[1] = (uint64_t *)v286;
            v283 |= (*(v286++ - 1) & 0x3F) << v288;
            --v287;
            v288 -= 6;
          }
          while (v287 > 1);
          if (v283 <= 255)
          {
LABEL_403:
            if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v283) & 1) != 0)
              goto LABEL_271;
          }
          goto LABEL_807;
        case 8u:
          v289 = (unsigned __int8 *)v44[1];
          if ((unint64_t)v289 >= *(_QWORD *)(a4 + 96))
            goto LABEL_996;
          v44[1] = (uint64_t *)(v289 + 1);
          v290 = *v289;
          v11 = v785;
          if (*(_DWORD *)(a4 + 60))
          {
            if ((v290 & 0xC0) == 0xC0)
            {
              v291 = utf8_table4[v290 & 0x3F];
              v292 = 6 * v291;
              v290 = (utf8_table3[utf8_table4[v290 & 0x3F]] & v290) << (6 * v291);
              v293 = v289 + 2;
              v294 = v291 + 1;
              v295 = v292 - 6;
              do
              {
                v44[1] = (uint64_t *)v293;
                v290 |= (*(v293++ - 1) & 0x3F) << v295;
                --v294;
                v295 -= 6;
              }
              while (v294 > 1);
              if (v290 > 255)
                goto LABEL_271;
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v290) & 1) == 0)
            goto LABEL_271;
          goto LABEL_807;
        case 9u:
          v296 = (unsigned __int8 *)v44[1];
          if ((unint64_t)v296 >= *(_QWORD *)(a4 + 96))
            goto LABEL_996;
          v44[1] = (uint64_t *)(v296 + 1);
          v297 = *v296;
          v11 = v785;
          if (!*(_DWORD *)(a4 + 60))
            goto LABEL_419;
          if ((v297 & 0xC0) != 0xC0)
            goto LABEL_419;
          v298 = utf8_table4[v297 & 0x3F];
          v299 = 6 * v298;
          v297 = (utf8_table3[utf8_table4[v297 & 0x3F]] & v297) << (6 * v298);
          v300 = v296 + 2;
          v301 = v298 + 1;
          v302 = v299 - 6;
          do
          {
            v44[1] = (uint64_t *)v300;
            v297 |= (*(v300++ - 1) & 0x3F) << v302;
            --v301;
            v302 -= 6;
          }
          while (v301 > 1);
          if (v297 <= 255)
          {
LABEL_419:
            if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v297) & 0x10) != 0)
              goto LABEL_271;
          }
          goto LABEL_807;
        case 0xAu:
          v303 = (unsigned __int8 *)v44[1];
          if ((unint64_t)v303 >= *(_QWORD *)(a4 + 96))
            goto LABEL_996;
          v44[1] = (uint64_t *)(v303 + 1);
          v304 = *v303;
          v11 = v785;
          if (*(_DWORD *)(a4 + 60))
          {
            if ((v304 & 0xC0) == 0xC0)
            {
              v305 = utf8_table4[v304 & 0x3F];
              v306 = 6 * v305;
              v304 = (utf8_table3[utf8_table4[v304 & 0x3F]] & v304) << (6 * v305);
              v307 = v303 + 2;
              v308 = v305 + 1;
              v309 = v306 - 6;
              do
              {
                v44[1] = (uint64_t *)v307;
                v304 |= (*(v307++ - 1) & 0x3F) << v309;
                --v308;
                v309 -= 6;
              }
              while (v308 > 1);
              if (v304 > 255)
                goto LABEL_271;
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v304) & 0x10) == 0)
            goto LABEL_271;
          goto LABEL_807;
        case 0xBu:
          v310 = v44[1];
          v311 = *(_QWORD *)(a4 + 96);
          if (((_BYTE)v44[4] & 4) == 0 && (unint64_t)v310 < v311 && *(_BYTE *)v310 == 10)
            goto LABEL_996;
          v312 = (char *)v310 + 1;
          v44[1] = (uint64_t *)((char *)v310 + 1);
          v11 = v785;
          if ((unint64_t)v310 >= v311)
            goto LABEL_271;
          if (*(_DWORD *)(a4 + 60) && (unint64_t)v312 < v311)
          {
            v313 = v311 - (_QWORD)v312;
            v314 = (uint64_t *)((char *)v310 + 2);
            do
            {
              if ((*((_BYTE *)v314 - 1) & 0xC0) != 0x80)
                break;
              v44[1] = v314;
              v314 = (uint64_t *)((char *)v314 + 1);
              --v313;
            }
            while (v313);
          }
          goto LABEL_807;
        case 0xCu:
          v315 = (unint64_t)v44[1];
          v44[1] = (uint64_t *)(v315 + 1);
          if (v315 >= *(_QWORD *)(a4 + 96))
            goto LABEL_907;
          goto LABEL_807;
        case 0xDu:
        case 0xEu:
          v246 = (unsigned __int8 *)v44[1];
          if ((unint64_t)v246 >= *(_QWORD *)(a4 + 96))
            goto LABEL_907;
          v44[1] = (uint64_t *)(v246 + 1);
          v247 = *v246;
          if (*(_DWORD *)(a4 + 60) && (v247 & 0xC0) == 0xC0)
          {
            v248 = utf8_table4[v247 & 0x3F];
            v249 = 6 * v248;
            v247 = (utf8_table3[utf8_table4[v247 & 0x3F]] & v247) << (6 * v248);
            v250 = v246 + 2;
            v251 = v248 + 1;
            v252 = v249 - 6;
            do
            {
              v44[1] = (uint64_t *)v250;
              v247 |= (*(v250++ - 1) & 0x3F) << v252;
              --v251;
              v252 -= 6;
            }
            while (v251 > 1);
          }
          LODWORD(v791) = 0;
          v253 = ucp_findchar(v247, (int *)&v791, &v790);
          v44[2] = (uint64_t *)(v209 + 1);
          v254 = (char)v209[1];
          v255 = v209[1];
          v44[2] = (uint64_t *)(v209 + 2);
          if (v254 < 0)
          {
            v256 = v210 == 14;
            v257 = v255 - 128 == v253;
          }
          else
          {
            v256 = v210 == 14;
            v257 = (_DWORD)v791 == v255;
          }
          v471 = v257;
          if (v256 != v471)
            goto LABEL_996;
          continue;
        case 0xFu:
          v45 = v8;
          v316 = (unsigned __int8 *)v44[1];
          v317 = *(_QWORD *)(a4 + 96);
          if ((unint64_t)v316 >= v317)
            goto LABEL_99;
          v318 = v316 + 1;
          v44[1] = (uint64_t *)(v316 + 1);
          v319 = *v316;
          v320 = *(_DWORD *)(a4 + 60);
          if (v320 && (v319 & 0xC0) == 0xC0)
          {
            v321 = utf8_table4[v319 & 0x3F];
            v322 = 6 * v321;
            v319 = (utf8_table3[utf8_table4[v319 & 0x3F]] & v319) << (6 * v321);
            v323 = v321 + 1;
            v324 = v322 - 6;
            do
            {
              v325 = v318 + 1;
              v44[1] = (uint64_t *)(v318 + 1);
              v319 |= (*v318 & 0x3F) << v324;
              --v323;
              v324 -= 6;
              ++v318;
            }
            while (v323 > 1);
          }
          else
          {
            v325 = v316 + 1;
          }
          v790 = 0;
          LODWORD(v791) = 0;
          if (ucp_findchar(v319, (int *)&v791, &v790) != 2)
          {
            while ((unint64_t)v325 < v317)
            {
              v502 = *v325;
              v503 = 1;
              if (v320 && (v502 & 0xC0) == 0xC0)
              {
                v504 = utf8_table4[v502 & 0x3F];
                v502 = (utf8_table3[v504] & v502) << (6 * v504);
                v505 = (char *)(v325 + 1);
                if (v504 <= 1)
                  v506 = 1;
                else
                  v506 = v504;
                v507 = 6 * v504 - 6;
                do
                {
                  v508 = *v505++;
                  v502 |= (v508 & 0x3F) << v507;
                  v507 -= 6;
                  --v506;
                }
                while (v506);
                v503 = v504 + 1;
              }
              if (ucp_findchar(v502, (int *)&v791, &v790) != 2)
                break;
              v325 += v503;
              v44[1] = (uint64_t *)v325;
            }
            v44[2] = (uint64_t *)(v209 + 1);
            v8 = v45;
            continue;
          }
          v795 = *v44;
          pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v774);
          v582 = v795;
          if (!v795)
            return 0;
LABEL_913:
          v12 = 0;
          *((_DWORD *)v582 + 102) = 0;
          *v14 = v582;
          v8 = v45;
LABEL_102:
          v11 = v785;
LABEL_1376:
          v13 = v796;
          break;
        case 0x10u:
          v326 = v44[1];
          v327 = *(_QWORD *)(a4 + 96) - 1;
          if ((unint64_t)v326 < v327)
            goto LABEL_907;
          if (v326 == (uint64_t *)v327)
            goto LABEL_709;
          goto LABEL_807;
        case 0x11u:
          v328 = *(_QWORD *)(a4 + 96);
          v11 = v785;
          goto LABEL_460;
        case 0x12u:
          v44[4] = (uint64_t *)v209[1];
          goto LABEL_751;
        case 0x13u:
          v267 = *(uint64_t **)(a4 + 88);
          if (*(_DWORD *)(a4 + 52) && v44[1] == v267)
            goto LABEL_996;
          v11 = v785;
          if (((_BYTE)v44[4] & 2) == 0)
          {
LABEL_455:
            if (v44[1] != v267)
              goto LABEL_271;
            goto LABEL_807;
          }
          v500 = v44[1];
          if (v500 == v267)
            goto LABEL_807;
          v501 = *((unsigned __int8 *)v500 - 1);
          goto LABEL_713;
        case 0x14u:
          if (((_BYTE)v44[4] & 2) != 0)
          {
            v326 = v44[1];
            if ((unint64_t)v326 >= *(_QWORD *)(a4 + 96))
            {
              if (*(_DWORD *)(a4 + 56))
                goto LABEL_907;
            }
            else
            {
LABEL_709:
              if (*(_BYTE *)v326 != 10)
                goto LABEL_907;
            }
          }
          else
          {
            if (*(_DWORD *)(a4 + 56))
              goto LABEL_996;
            v328 = *(_QWORD *)(a4 + 96);
            v11 = v785;
            if (*(_DWORD *)(a4 + 64))
            {
LABEL_460:
              if ((unint64_t)v44[1] < v328)
                goto LABEL_271;
            }
            else
            {
              v545 = (unsigned __int8 *)v44[1];
              v546 = (unsigned __int8 *)(v328 - 1);
              if (v545 < v546)
                goto LABEL_271;
              if (v545 == v546)
              {
                v501 = *v545;
LABEL_713:
                if (v501 != 10)
                  goto LABEL_271;
              }
            }
          }
LABEL_807:
          v44[2] = (uint64_t *)(v209 + 1);
          continue;
        case 0x15u:
          if (!*(_DWORD *)(a4 + 60))
          {
            v515 = (unsigned __int8 *)v44[1];
            if ((uint64_t)(*(_QWORD *)(a4 + 96) - (_QWORD)v515) <= 0)
              goto LABEL_907;
            v516 = v209[1];
            v44[1] = (uint64_t *)(v515 + 1);
            if (v516 != *v515)
              goto LABEL_907;
            goto LABEL_751;
          }
          v329 = 1;
          *((_DWORD *)v44 + 57) = 1;
          v44[2] = (uint64_t *)(v209 + 1);
          v330 = v209[1];
          *((_DWORD *)v44 + 55) = v330;
          v11 = v785;
          if ((~v330 & 0xC0) == 0)
          {
            v331 = utf8_table4[v330 & 0x3F];
            v332 = (utf8_table3[v331] & v330) << (6 * v331);
            *((_DWORD *)v44 + 55) = v332;
            v333 = (char *)(v209 + 2);
            if (v331 <= 1)
              v334 = 1;
            else
              v334 = v331;
            v335 = 6 * v331 - 6;
            do
            {
              v336 = *v333++;
              v332 |= (v336 & 0x3F) << v335;
              *((_DWORD *)v44 + 55) = v332;
              v335 -= 6;
              --v334;
            }
            while (v334);
            v329 = v331 + 1;
            *((_DWORD *)v44 + 57) = v329;
          }
          v337 = v44[1];
          if (*(_QWORD *)(a4 + 96) - (_QWORD)v337 < (uint64_t)v329)
            goto LABEL_271;
          v338 = (uint64_t *)((char *)v337 + 1);
          v339 = v209 + 2;
          while (1)
          {
            v340 = __OFSUB__(v329--, 1);
            *((_DWORD *)v44 + 57) = v329;
            if (v329 < 0 != v340)
              goto LABEL_322;
            v44[2] = (uint64_t *)v339;
            v341 = *(v339 - 1);
            v44[1] = v338;
            v342 = *((unsigned __int8 *)v338 - 1);
            v338 = (uint64_t *)((char *)v338 + 1);
            ++v339;
            if (v341 != v342)
              goto LABEL_271;
          }
        case 0x16u:
          if (*(_DWORD *)(a4 + 60))
          {
            v343 = 1;
            *((_DWORD *)v44 + 57) = 1;
            v344 = v209 + 1;
            v44[2] = (uint64_t *)(v209 + 1);
            v345 = v209[1];
            *((_DWORD *)v44 + 55) = v345;
            if ((~v345 & 0xC0) == 0)
            {
              v346 = utf8_table4[v345 & 0x3F];
              v345 = (utf8_table3[v346] & v345) << (6 * v346);
              *((_DWORD *)v44 + 55) = v345;
              v347 = (char *)(v209 + 2);
              if (v346 <= 1)
                v348 = 1;
              else
                v348 = v346;
              v349 = 6 * v346 - 6;
              do
              {
                v350 = *v347++;
                v345 |= (v350 & 0x3F) << v349;
                *((_DWORD *)v44 + 55) = v345;
                v349 -= 6;
                --v348;
              }
              while (v348);
              v343 = v346 + 1;
              *((_DWORD *)v44 + 57) = v343;
            }
            v11 = v785;
            v351 = (unsigned __int8 *)v44[1];
            if (*(_QWORD *)(a4 + 96) - (_QWORD)v351 < (uint64_t)v343)
              goto LABEL_271;
            if (v345 > 127)
            {
              v44[1] = (uint64_t *)(v351 + 1);
              v539 = *v351;
              if ((~v539 & 0xC0) == 0)
              {
                v540 = utf8_table4[v539 & 0x3F];
                v541 = 6 * v540;
                v539 = (utf8_table3[utf8_table4[v539 & 0x3F]] & v539) << (6 * v540);
                v542 = v351 + 2;
                v543 = v540 + 1;
                v544 = v541 - 6;
                do
                {
                  v44[1] = (uint64_t *)v542;
                  v539 |= (*(v542++ - 1) & 0x3F) << v544;
                  --v543;
                  v544 -= 6;
                }
                while (v543 > 1);
              }
              v44[2] = (uint64_t *)&v344[v343];
              if (v345 != v539)
              {
                v790 = 0;
                if ((ucp_findchar(v345, (int *)&v791, &v790) & 0x80000000) != 0 || v539 != v790)
                {
LABEL_964:
                  v795 = *v44;
                  pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v774);
                  v583 = v795;
                  if (!v795)
                    return 0;
                  v12 = 0;
                  *((_DWORD *)v795 + 102) = 0;
LABEL_920:
                  *v14 = v583;
                  goto LABEL_963;
                }
              }
            }
            else
            {
              v352 = *(_QWORD *)(a4 + 32);
              v44[2] = (uint64_t *)(v209 + 2);
              v245 = *(unsigned __int8 *)(v352 + v209[1]);
              v44[1] = (uint64_t *)(v351 + 1);
              v353 = *(unsigned __int8 *)(v352 + *v351);
LABEL_799:
              if (v245 != v353)
                goto LABEL_964;
            }
          }
          else
          {
            v517 = (unsigned __int8 *)v44[1];
            if ((uint64_t)(*(_QWORD *)(a4 + 96) - (_QWORD)v517) <= 0)
              goto LABEL_907;
            v518 = *(_QWORD *)(a4 + 32);
            v519 = *(unsigned __int8 *)(v518 + v209[1]);
            v44[1] = (uint64_t *)(v517 + 1);
            if (v519 != *(unsigned __int8 *)(v518 + *v517))
              goto LABEL_907;
LABEL_751:
            v44[2] = (uint64_t *)(v209 + 2);
          }
          continue;
        case 0x17u:
          v354 = (unsigned __int8 *)v44[1];
          if ((unint64_t)v354 >= *(_QWORD *)(a4 + 96))
            goto LABEL_996;
          v44[1] = (uint64_t *)(v354 + 1);
          v44[2] = (uint64_t *)(v209 + 1);
          v355 = *v354;
          if (*(_DWORD *)(a4 + 60) && (v355 & 0xC0) == 0xC0)
          {
            v356 = utf8_table4[v355 & 0x3F];
            v357 = 6 * v356;
            v355 = (utf8_table3[utf8_table4[v355 & 0x3F]] & v355) << (6 * v356);
            v358 = v354 + 2;
            v359 = v356 + 1;
            v360 = v357 - 6;
            do
            {
              v44[1] = (uint64_t *)v358;
              v355 |= (*(v358++ - 1) & 0x3F) << v360;
              --v359;
              v360 -= 6;
            }
            while (v359 > 1);
          }
          if (((_BYTE)v44[4] & 1) != 0)
          {
            v509 = *(_QWORD *)(a4 + 32);
            if (v355 <= 255)
              v355 = *(unsigned __int8 *)(v509 + v355);
            v44[2] = (uint64_t *)(v209 + 2);
            v361 = *(unsigned __int8 *)(v509 + v209[1]);
          }
          else
          {
            v44[2] = (uint64_t *)(v209 + 2);
            v361 = v209[1];
          }
          if (v355 == v361)
            goto LABEL_964;
          continue;
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
          v212 = v209 + 1;
          v44[2] = (uint64_t *)(v209 + 1);
          v213 = *v209;
          v214 = v213 & 1;
          *((_DWORD *)v44 + 42) = v214;
          v215 = rep_min_0[v213 - 24];
          *((_DWORD *)v44 + 59) = v215;
          v216 = rep_max_0[v213 - 24];
          if ((v213 - 30) < 0xFFFFFFFE)
            v216 = 0x7FFFFFFF;
          *((_DWORD *)v44 + 58) = v216;
          goto LABEL_495;
        case 0x1Eu:
        case 0x1Fu:
          v215 = 0;
          *((_DWORD *)v44 + 59) = 0;
          v216 = __rev16(*(unsigned __int16 *)(v209 + 1));
          *((_DWORD *)v44 + 58) = v216;
          v214 = *v209 == 31;
          *((_DWORD *)v44 + 42) = v214;
          goto LABEL_494;
        case 0x20u:
          v214 = 0;
          v216 = __rev16(*(unsigned __int16 *)(v209 + 1));
          *((_DWORD *)v44 + 58) = v216;
          *((_DWORD *)v44 + 59) = v216;
          v215 = v216;
LABEL_494:
          v212 = v209 + 3;
          v44[2] = (uint64_t *)(v209 + 3);
LABEL_495:
          if (*(_DWORD *)(a4 + 60))
          {
            v362 = 1;
            *((_DWORD *)v44 + 57) = 1;
            v44[8] = (uint64_t *)v212;
            v363 = *v212;
            *((_DWORD *)v44 + 55) = v363;
            v11 = v785;
            if ((~v363 & 0xC0) == 0)
            {
              v364 = utf8_table4[v363 & 0x3F];
              v363 = (utf8_table3[v364] & v363) << (6 * v364);
              *((_DWORD *)v44 + 55) = v363;
              v365 = (char *)(v212 + 1);
              if (v364 <= 1)
                v366 = 1;
              else
                v366 = v364;
              v367 = 6 * v364 - 6;
              do
              {
                v368 = *v365++;
                v363 |= (v368 & 0x3F) << v367;
                *((_DWORD *)v44 + 55) = v363;
                v367 -= 6;
                --v366;
              }
              while (v366);
              v362 = v364 + 1;
              *((_DWORD *)v44 + 57) = v364 + 1;
            }
            v369 = *(_QWORD *)(a4 + 96);
            v87 = (unsigned __int8 *)v44[1];
            if ((uint64_t)(v369 - (_QWORD)v87) < v362 * v215)
              goto LABEL_894;
            v44[2] = (uint64_t *)&v212[v362];
            if (v362 >= 2)
            {
              __s2[0] = 0;
              v788 = 0;
              v789 = 0;
              v780 = v8;
              if (((_BYTE)v44[4] & 1) != 0)
              {
                v375 = ucp_findchar(v363, &v788, (unsigned int *)&v789);
                v370 = 0;
                if ((v375 & 0x80000000) == 0 && v789 >= 1)
                {
                  v370 = ord2utf8(v789, (uint64_t)__s2);
                  v44 = (uint64_t **)v795;
                  v215 = *((_DWORD *)v795 + 59);
                }
              }
              else
              {
                v370 = 0;
              }
              __n = v370;
              if (v215 >= 1)
              {
                v376 = v44[8];
                v377 = *((unsigned int *)v44 + 57);
                v378 = v215;
                v379 = (char *)v44[1];
                while (1)
                {
                  v380 = memcmp(v379, v376, v377);
                  v381 = v377;
                  if (v380)
                  {
                    if (!__n)
                    {
                      v795 = *v44;
                      pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v774);
                      v583 = v795;
                      if (v795)
                      {
                        __n = 0;
                        goto LABEL_919;
                      }
                      return 0;
                    }
                    v382 = memcmp(v379, __s2, __n);
                    v381 = __n;
                    if (v382)
                      break;
                  }
                  v379 += v381;
                  v44[1] = (uint64_t *)v379;
                  if (!--v378)
                    goto LABEL_529;
                }
                v795 = *v44;
                pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v774);
                v583 = v795;
                if (v795)
                {
LABEL_919:
                  v12 = 0;
                  *((_DWORD *)v583 + 102) = 0;
                  v8 = v780;
                  goto LABEL_920;
                }
                return 0;
              }
LABEL_529:
              v383 = *((_DWORD *)v44 + 58);
              v8 = v780;
              if (v383 != v215)
              {
                v45 = v780;
                if (!*((_DWORD *)v44 + 42))
                {
                  v81 = (char *)v44[1];
                  v44[11] = (uint64_t *)v81;
                  v646 = v383 - v215;
                  if (v383 <= v215)
                  {
                    v8 = v780;
                    v11 = v785;
                  }
                  else
                  {
                    v647 = *((unsigned int *)v44 + 57);
                    v648 = *(_QWORD *)(a4 + 96) - (int)v647;
                    v774 = __n;
                    v80 = v81;
                    while ((unint64_t)v80 <= v648)
                    {
                      v649 = memcmp(v80, v44[8], v647);
                      v650 = (int)v647;
                      if (v649)
                      {
                        if (!__n)
                        {
                          __n = 0;
                          break;
                        }
                        v651 = memcmp(v80, __s2, __n);
                        v650 = (int)__n;
                        if (v651)
                          break;
                      }
                      v80 += v650;
                      v44[1] = (uint64_t *)v80;
                      if (!--v646)
                        break;
                    }
                    v8 = v780;
LABEL_105:
                    v53 = v80 >= v81;
                    v11 = v785;
                    if (!v53)
                      goto LABEL_271;
                  }
                  *(_QWORD *)&v791 = 0;
                  v64 = a1;
                  v65 = 29;
                  goto LABEL_1229;
                }
                *((_DWORD *)v44 + 56) = v215;
LABEL_902:
                *(_QWORD *)&v791 = 0;
                v49 = a1;
                v50 = 28;
LABEL_903:
                v579 = pcre_getMem(v49, v50, &v791, a4, a5, (uint64_t)a6, a7, a8);
                v23 = (uint64_t *)v791;
                v580 = v795;
                v8 = v45;
                v11 = v785;
                if ((_QWORD)v791)
                  goto LABEL_1230;
LABEL_1371:
                v597 = (uint64_t *)*v580;
                goto LABEL_1372;
              }
              continue;
            }
          }
          else
          {
            v369 = *(_QWORD *)(a4 + 96);
            v87 = (unsigned __int8 *)v44[1];
            v11 = v785;
            if ((uint64_t)(v369 - (_QWORD)v87) < v215)
              goto LABEL_894;
            v44[2] = (uint64_t *)(v212 + 1);
            v363 = *v212;
            *((_DWORD *)v44 + 55) = v363;
          }
          if (((_BYTE)v44[4] & 1) != 0)
          {
            v372 = *(_QWORD *)(a4 + 32);
            v373 = *(unsigned __int8 *)(v372 + v363);
            *((_DWORD *)v44 + 55) = v373;
            v374 = v215;
            if (v215 >= 1)
            {
              do
              {
                v44[1] = (uint64_t *)(v87 + 1);
                if (v373 != *(unsigned __int8 *)(v372 + *v87))
                  goto LABEL_894;
                ++v87;
              }
              while (--v374);
            }
            if (v216 != v215)
            {
              if (v214)
              {
                *((_DWORD *)v44 + 56) = v215;
                v11 = v785;
LABEL_113:
                *(_QWORD *)&v791 = 0;
                v64 = a1;
                v65 = 30;
                goto LABEL_1229;
              }
              v44[11] = (uint64_t *)v87;
              v340 = __OFSUB__(v216, v215);
              v643 = v216 - v215;
              if ((v643 < 0) ^ v340 | (v643 == 0))
              {
                v11 = v785;
              }
              else
              {
                v644 = 0;
                v86 = (unint64_t)v87;
                while ((unint64_t)&v87[v644] < v369)
                {
                  if (v373 == *(unsigned __int8 *)(v372 + v87[v644]))
                  {
                    ++v86;
                    v44[1] = (uint64_t *)&v87[++v644];
                    if (v643 != (_DWORD)v644)
                      continue;
                  }
                  v86 = (unint64_t)&v87[v644];
                  break;
                }
                v11 = v785;
LABEL_116:
                if (v86 < (unint64_t)v87)
                  goto LABEL_271;
              }
              *(_QWORD *)&v791 = 0;
              v64 = a1;
              v65 = 31;
              goto LABEL_1229;
            }
          }
          else
          {
            v371 = v215;
            if (v215 >= 1)
            {
              while (1)
              {
                v44[1] = (uint64_t *)(v87 + 1);
                if (v363 != *v87)
                  break;
                ++v87;
                if (!--v371)
                  goto LABEL_513;
              }
LABEL_894:
              v795 = *v44;
              pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v774);
              v574 = v795;
              if (!v795)
                return 0;
              v12 = 0;
              *((_DWORD *)v795 + 102) = 0;
              *v14 = v574;
              goto LABEL_1376;
            }
LABEL_513:
            if (v216 != v215)
            {
              if (v214)
              {
                *((_DWORD *)v44 + 56) = v215;
                v11 = v785;
LABEL_123:
                *(_QWORD *)&v791 = 0;
                v64 = a1;
                v65 = 32;
                goto LABEL_1229;
              }
              v44[11] = (uint64_t *)v87;
              v340 = __OFSUB__(v216, v215);
              v641 = v216 - v215;
              if ((v641 < 0) ^ v340 | (v641 == 0))
              {
                v11 = v785;
              }
              else
              {
                v642 = 0;
                v91 = (unint64_t)v87;
                while ((unint64_t)&v87[v642] < v369)
                {
                  if (v363 == v87[v642])
                  {
                    ++v91;
                    v44[1] = (uint64_t *)&v87[++v642];
                    if (v641 != (_DWORD)v642)
                      continue;
                  }
                  v91 = (unint64_t)&v87[v642];
                  break;
                }
                v11 = v785;
LABEL_126:
                if (v91 < (unint64_t)v87)
                  goto LABEL_271;
              }
              *(_QWORD *)&v791 = 0;
              v64 = a1;
              v65 = 33;
              goto LABEL_1229;
            }
          }
          continue;
        case 0x21u:
        case 0x22u:
        case 0x23u:
        case 0x24u:
        case 0x25u:
        case 0x26u:
          v217 = v209 + 1;
          v44[2] = (uint64_t *)(v209 + 1);
          v218 = *v209;
          v219 = (v218 - 33) & 1;
          *((_DWORD *)v44 + 42) = v219;
          v220 = rep_min_0[v218 - 33];
          *((_DWORD *)v44 + 59) = v220;
          v221 = rep_max_0[v218 - 33];
          if ((v218 - 39) < 0xFFFFFFFE)
            v221 = 0x7FFFFFFF;
          *((_DWORD *)v44 + 58) = v221;
          goto LABEL_533;
        case 0x27u:
        case 0x28u:
          v220 = 0;
          *((_DWORD *)v44 + 59) = 0;
          v221 = __rev16(*(unsigned __int16 *)(v209 + 1));
          *((_DWORD *)v44 + 58) = v221;
          v219 = *v209 == 40;
          *((_DWORD *)v44 + 42) = v219;
          goto LABEL_532;
        case 0x29u:
          v219 = 0;
          v221 = __rev16(*(unsigned __int16 *)(v209 + 1));
          *((_DWORD *)v44 + 58) = v221;
          *((_DWORD *)v44 + 59) = v221;
          v220 = v221;
LABEL_532:
          v217 = v209 + 3;
          v44[2] = (uint64_t *)(v209 + 3);
LABEL_533:
          v384 = *(_QWORD *)(a4 + 96);
          v385 = (unsigned __int8 *)v44[1];
          v11 = v785;
          if ((uint64_t)(v384 - (_QWORD)v385) < v220)
            goto LABEL_271;
          v44[2] = (uint64_t *)(v217 + 1);
          v386 = *v217;
          *((_DWORD *)v44 + 55) = v386;
          if (((_BYTE)v44[4] & 1) != 0)
          {
            v394 = *(_QWORD *)(a4 + 32);
            v395 = *(unsigned __int8 *)(v394 + v386);
            *((_DWORD *)v44 + 55) = v395;
            v396 = *(_DWORD *)(a4 + 60);
            if (v396)
            {
              if (v220 >= 1)
              {
                v397 = 1;
                v111 = v385;
                while (1)
                {
                  v398 = v111++;
                  v44[1] = (uint64_t *)v111;
                  v399 = *v398;
                  if ((~v399 & 0xC0) != 0)
                    goto LABEL_554;
                  v400 = utf8_table4[v399 & 0x3F];
                  v401 = 6 * v400;
                  v399 = (utf8_table3[utf8_table4[v399 & 0x3F]] & v399) << (6 * v400);
                  v402 = v400 + 1;
                  v403 = v401 - 6;
                  do
                  {
                    v404 = v111++;
                    v44[1] = (uint64_t *)v111;
                    a3 = (*v404 & 0x3F) << v403;
                    v399 |= a3;
                    --v402;
                    v403 -= 6;
                  }
                  while (v402 > 1);
                  if (v399 <= 255)
LABEL_554:
                    v399 = *(unsigned __int8 *)(v394 + v399);
                  if (v399 == v395)
                    goto LABEL_271;
                  v169 = v397++ == v220;
                  if (v169)
                    goto LABEL_571;
                }
              }
              v111 = v385;
            }
            else
            {
              v406 = v220;
              v111 = v385;
              if (v220 >= 1)
              {
                do
                {
                  v111 = v385 + 1;
                  v44[1] = (uint64_t *)(v385 + 1);
                  if (v395 == *(unsigned __int8 *)(v394 + *v385))
                    goto LABEL_271;
                  ++v385;
                }
                while (--v406);
              }
            }
LABEL_571:
            if (v221 != v220)
            {
              if (v219)
              {
                *((_DWORD *)v44 + 56) = v220;
                v11 = v785;
                if (v396)
                {
LABEL_138:
                  *(_QWORD *)&v791 = 0;
                  v101 = a1;
                  v102 = 34;
                }
                else
                {
LABEL_144:
                  *(_QWORD *)&v791 = 0;
                  v101 = a1;
                  v102 = 35;
                }
                goto LABEL_1364;
              }
              v44[11] = (uint64_t *)v111;
              if (v396)
              {
                v11 = v785;
                if (v221 > v220)
                {
                  while ((unint64_t)v111 < v384)
                  {
                    v605 = *v111;
                    if ((~v605 & 0xC0) != 0)
                    {
                      v611 = 1;
                    }
                    else
                    {
                      v606 = utf8_table4[v605 & 0x3F];
                      v605 = (utf8_table3[v606] & v605) << (6 * v606);
                      v607 = (char *)(v111 + 1);
                      if (v606 <= 1)
                        v608 = 1;
                      else
                        v608 = v606;
                      v609 = 6 * v606 - 6;
                      do
                      {
                        v610 = *v607++;
                        v605 |= (v610 & 0x3F) << v609;
                        v609 -= 6;
                        --v608;
                      }
                      while (v608);
                      v611 = v606 + 1;
                      if (v605 > 255)
                        goto LABEL_1033;
                    }
                    v605 = *(unsigned __int8 *)(v394 + v605);
LABEL_1033:
                    if (v605 != v395)
                    {
                      v111 += v611;
                      v44[1] = (uint64_t *)v111;
                      if (++v220 != v221)
                        continue;
                    }
                    break;
                  }
                }
LABEL_150:
                *(_QWORD *)&v791 = 0;
                v101 = a1;
                v102 = 36;
              }
              else
              {
                v340 = __OFSUB__(v221, v220);
                v664 = v221 - v220;
                v11 = v785;
                if (!((v664 < 0) ^ v340 | (v664 == 0)))
                {
                  v665 = 0;
                  v110 = (unint64_t)v111;
                  while ((unint64_t)&v111[v665] < v384)
                  {
                    if (v395 != *(unsigned __int8 *)(v394 + v111[v665]))
                    {
                      ++v110;
                      v44[1] = (uint64_t *)&v111[++v665];
                      if (v664 != (_DWORD)v665)
                        continue;
                    }
                    v110 = (unint64_t)&v111[v665];
                    break;
                  }
LABEL_153:
                  if (v110 < (unint64_t)v111)
                    goto LABEL_271;
                }
                *(_QWORD *)&v791 = 0;
                v101 = a1;
                v102 = 37;
              }
LABEL_1364:
              v763 = pcre_getMem(v101, v102, &v791, a4, a5, (uint64_t)a6, a7, a8);
              v23 = (uint64_t *)v791;
              v580 = v795;
              if ((_QWORD)v791 && (v763 & 0x80000000) == 0)
                goto LABEL_1366;
              goto LABEL_1371;
            }
          }
          else
          {
            v387 = *(_DWORD *)(a4 + 60);
            if (v387)
            {
              if (v220 >= 1)
              {
                v388 = 1;
                v126 = v385;
                while (1)
                {
                  v389 = v126 + 1;
                  v44[1] = (uint64_t *)(v126 + 1);
                  v390 = *v126;
                  if ((~v390 & 0xC0) != 0)
                  {
                    ++v126;
                  }
                  else
                  {
                    v391 = utf8_table4[v390 & 0x3F];
                    v390 = (utf8_table3[utf8_table4[v390 & 0x3F]] & v390) << (6 * v391);
                    v392 = v391 + 1;
                    v393 = 6 * v391 - 6;
                    do
                    {
                      v126 = v389 + 1;
                      v44[1] = (uint64_t *)(v389 + 1);
                      v390 |= (*v389 & 0x3F) << v393;
                      --v392;
                      v393 -= 6;
                      ++v389;
                    }
                    while (v392 > 1);
                  }
                  if (v390 == (_DWORD)v386)
                    goto LABEL_271;
                  v169 = v388++ == v220;
                  if (v169)
                    goto LABEL_568;
                }
              }
              v126 = v385;
            }
            else
            {
              v405 = v220;
              v126 = v385;
              if (v220 >= 1)
              {
                do
                {
                  v126 = v385 + 1;
                  v44[1] = (uint64_t *)(v385 + 1);
                  if ((_DWORD)v386 == *v385)
                    goto LABEL_271;
                  ++v385;
                }
                while (--v405);
              }
            }
LABEL_568:
            if (v221 != v220)
            {
              if (v219)
              {
                *((_DWORD *)v44 + 56) = v220;
                v11 = v785;
                if (v387)
                {
LABEL_317:
                  *(_QWORD *)&v791 = 0;
                  v101 = a1;
                  v102 = 38;
                }
                else
                {
LABEL_165:
                  *(_QWORD *)&v791 = 0;
                  v101 = a1;
                  v102 = 39;
                }
                goto LABEL_1364;
              }
              v44[11] = (uint64_t *)v126;
              if (v387)
              {
                v11 = v785;
                if (v221 > v220)
                {
                  do
                  {
                    if ((unint64_t)v126 >= v384)
                      break;
                    v598 = *v126;
                    if ((~v598 & 0xC0) != 0)
                    {
                      v604 = 1;
                    }
                    else
                    {
                      v599 = utf8_table4[v598 & 0x3F];
                      v598 = (utf8_table3[v599] & v598) << (6 * v599);
                      v600 = (char *)(v126 + 1);
                      v601 = v599 <= 1 ? 1 : v599;
                      v602 = 6 * v599 - 6;
                      do
                      {
                        v603 = *v600++;
                        v598 |= (v603 & 0x3F) << v602;
                        v602 -= 6;
                        --v601;
                      }
                      while (v601);
                      v604 = v599 + 1;
                    }
                    if (v598 == (_DWORD)v386)
                      break;
                    v126 += v604;
                    v44[1] = (uint64_t *)v126;
                    ++v220;
                  }
                  while (v220 != v221);
                }
LABEL_171:
                *(_QWORD *)&v791 = 0;
                v64 = a1;
                v65 = 40;
                goto LABEL_1229;
              }
              v340 = __OFSUB__(v221, v220);
              v662 = v221 - v220;
              v11 = v785;
              if ((v662 < 0) ^ v340 | (v662 == 0))
                goto LABEL_1129;
              v663 = 0;
              v125 = (unint64_t)v126;
              while ((unint64_t)&v126[v663] < v384)
              {
                if ((_DWORD)v386 != v126[v663])
                {
                  ++v125;
                  v44[1] = (uint64_t *)&v126[++v663];
                  if (v662 != (_DWORD)v663)
                    continue;
                }
                v125 = (unint64_t)&v126[v663];
                break;
              }
LABEL_174:
              if (v125 >= (unint64_t)v126)
              {
LABEL_1129:
                *(_QWORD *)&v791 = 0;
                v64 = a1;
                v65 = 41;
                goto LABEL_1229;
              }
              goto LABEL_271;
            }
          }
          continue;
        case 0x2Au:
        case 0x2Bu:
        case 0x2Cu:
        case 0x2Du:
        case 0x2Eu:
        case 0x2Fu:
          v222 = v209 + 1;
          v44[2] = (uint64_t *)(v209 + 1);
          v223 = *v209;
          *((_DWORD *)v44 + 42) = v223 & 1;
          v224 = rep_min_0[v223 - 42];
          *((_DWORD *)v44 + 59) = v224;
          if ((v223 - 48) >= 0xFFFFFFFE)
            v225 = rep_max_0[v223 - 42];
          else
            v225 = 0x7FFFFFFF;
          *((_DWORD *)v44 + 58) = v225;
          goto LABEL_575;
        case 0x30u:
        case 0x31u:
          v224 = 0;
          *((_DWORD *)v44 + 59) = 0;
          *((_DWORD *)v44 + 58) = __rev16(*(unsigned __int16 *)(v209 + 1));
          v258 = *v209 == 49;
          goto LABEL_574;
        case 0x32u:
          v224 = __rev16(*(unsigned __int16 *)(v209 + 1));
          *((_DWORD *)v44 + 58) = v224;
          *((_DWORD *)v44 + 59) = v224;
          v258 = 1;
LABEL_574:
          *((_DWORD *)v44 + 42) = v258;
          v222 = v209 + 3;
          v44[2] = (uint64_t *)(v209 + 3);
LABEL_575:
          v44[2] = (uint64_t *)(v222 + 1);
          v407 = *v222;
          *((_DWORD *)v44 + 54) = v407;
          if ((v407 - 13) > 1)
          {
            v409 = -1;
            *((_DWORD *)v44 + 46) = -1;
          }
          else
          {
            *((_DWORD *)v44 + 47) = v407 == 13;
            v44[2] = (uint64_t *)(v222 + 2);
            v408 = (char)v222[1];
            v409 = v408;
            *((_DWORD *)v44 + 46) = v408;
            if (v408 < 0)
            {
              *((_DWORD *)v44 + 51) = v408 - 128;
              v410 = (uint64_t *)(v44 + 24);
            }
            else
            {
              *((_DWORD *)v44 + 51) = v408;
              v410 = (uint64_t *)((char *)v44 + 196);
            }
            v44[26] = v410;
          }
          v11 = v785;
          v411 = *(uint64_t **)(a4 + 96);
          v412 = v44[1];
          if ((char *)v411 - (char *)v412 < v224)
            goto LABEL_271;
          v413 = v224;
          if (v224 <= 0)
            goto LABEL_612;
          if (v409 >= 1)
          {
            v226 = v8;
            v414 = 1;
            while (1)
            {
              v415 = (unsigned __int8 *)v44[1];
              v44[1] = (uint64_t *)(v415 + 1);
              v416 = *v415;
              if ((~v416 & 0xC0) == 0)
              {
                v417 = utf8_table4[v416 & 0x3F];
                v416 = (utf8_table3[utf8_table4[v416 & 0x3F]] & v416) << (6 * v417);
                v418 = v415 + 2;
                v419 = 6 * v417 - 6;
                v420 = v417 + 1;
                do
                {
                  v44[1] = (uint64_t *)v418;
                  v416 |= (*(v418++ - 1) & 0x3F) << v419;
                  v419 -= 6;
                  --v420;
                }
                while (v420 > 1);
              }
              v421 = ucp_findchar(v416, (int *)v44 + 49, (unsigned int *)v44 + 50);
              v44 = (uint64_t **)v795;
              *((_DWORD *)v795 + 48) = v421;
              if (*((_DWORD *)v44 + 47) == (*(_DWORD *)v44[26] == *((_DWORD *)v44 + 51)))
                break;
              v413 = *((_DWORD *)v44 + 59);
              v422 = v414++ < v413;
              if (!v422)
                goto LABEL_611;
            }
LABEL_888:
            v795 = *v44;
            pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v774);
            v573 = v795;
            if (!v795)
              return 0;
            v12 = 0;
            *((_DWORD *)v795 + 102) = 0;
LABEL_890:
            *v14 = v573;
            v8 = v226;
            goto LABEL_1376;
          }
          if (v407 != 15)
          {
            if (*(_DWORD *)(a4 + 60))
            {
              switch(v407)
              {
                case 5:
                  v442 = 1;
                  while (v412 < v411)
                  {
                    v443 = (char *)v412 + 1;
                    v44[1] = (uint64_t *)((char *)v412 + 1);
                    v444 = *(unsigned __int8 *)v412;
                    if ((~v444 & 0xC0) != 0)
                    {
                      v412 = (uint64_t *)((char *)v412 + 1);
                    }
                    else
                    {
                      v445 = utf8_table4[v444 & 0x3F];
                      v444 = (utf8_table3[utf8_table4[v444 & 0x3F]] & v444) << (6 * v445);
                      v446 = 6 * v445 - 6;
                      v447 = v445 + 1;
                      do
                      {
                        v412 = (uint64_t *)(v443 + 1);
                        v44[1] = (uint64_t *)(v443 + 1);
                        v444 |= (*v443 & 0x3F) << v446;
                        v446 -= 6;
                        --v447;
                        ++v443;
                      }
                      while (v447 > 1);
                    }
                    if (v444 <= 127 && (*(_BYTE *)(*(_QWORD *)(a4 + 40) + v444) & 4) != 0)
                      break;
                    v169 = v442++ == v224;
                    if (v169)
                      goto LABEL_612;
                  }
                  goto LABEL_271;
                case 6:
                  while (v412 < v411)
                  {
                    if (*(char *)v412 < 0)
                      break;
                    v491 = *(_QWORD *)(a4 + 40);
                    v44[1] = (uint64_t *)((char *)v412 + 1);
                    if ((*(_BYTE *)(v491 + *(unsigned __int8 *)v412) & 4) == 0)
                      break;
                    v412 = (uint64_t *)((char *)v412 + 1);
                    if (!--v224)
                      goto LABEL_612;
                  }
                  goto LABEL_271;
                case 7:
                  v549 = 1;
                  while (v412 < v411)
                  {
                    if ((*(char *)v412 & 0x80000000) == 0)
                    {
                      v550 = *(_QWORD *)(a4 + 40);
                      v44[1] = (uint64_t *)((char *)v412 + 1);
                      LOBYTE(v550) = *(_BYTE *)(v550 + *(unsigned __int8 *)v412);
                      v412 = (uint64_t *)((char *)v412 + 1);
                      if ((v550 & 1) != 0)
                        break;
                    }
                    if (v412 < v411)
                    {
                      v551 = (char *)v411 - (char *)v412;
                      while ((*(_BYTE *)v412 & 0xC0) == 0x80)
                      {
                        v412 = (uint64_t *)((char *)v412 + 1);
                        v44[1] = v412;
                        if (!--v551)
                        {
                          v412 = v411;
                          break;
                        }
                      }
                    }
                    v169 = v549++ == v224;
                    if (v169)
                      goto LABEL_612;
                  }
                  goto LABEL_271;
                case 8:
                  while (v412 < v411)
                  {
                    if (*(char *)v412 < 0)
                      break;
                    v492 = *(_QWORD *)(a4 + 40);
                    v44[1] = (uint64_t *)((char *)v412 + 1);
                    if ((*(_BYTE *)(v492 + *(unsigned __int8 *)v412) & 1) == 0)
                      break;
                    v412 = (uint64_t *)((char *)v412 + 1);
                    if (!--v224)
                      goto LABEL_612;
                  }
                  goto LABEL_271;
                case 9:
                  v552 = 1;
                  while (v412 < v411)
                  {
                    if ((*(char *)v412 & 0x80000000) == 0)
                    {
                      v553 = *(_QWORD *)(a4 + 40);
                      v44[1] = (uint64_t *)((char *)v412 + 1);
                      LOBYTE(v553) = *(_BYTE *)(v553 + *(unsigned __int8 *)v412);
                      v412 = (uint64_t *)((char *)v412 + 1);
                      if ((v553 & 0x10) != 0)
                        break;
                    }
                    if (v412 < v411)
                    {
                      v554 = (char *)v411 - (char *)v412;
                      while ((*(_BYTE *)v412 & 0xC0) == 0x80)
                      {
                        v412 = (uint64_t *)((char *)v412 + 1);
                        v44[1] = v412;
                        if (!--v554)
                        {
                          v412 = v411;
                          break;
                        }
                      }
                    }
                    v169 = v552++ == v224;
                    if (v169)
                      goto LABEL_612;
                  }
                  goto LABEL_271;
                case 10:
                  v555 = 0;
                  while (1)
                  {
                    v556 = (unsigned __int8 *)v412 + v555;
                    if ((uint64_t *)((char *)v412 + v555) >= v411)
                      goto LABEL_271;
                    if ((char)*v556 < 0)
                      goto LABEL_271;
                    v557 = *(_QWORD *)(a4 + 40);
                    v44[1] = (uint64_t *)(v556 + 1);
                    if ((*(_BYTE *)(v557 + *v556) & 0x10) == 0)
                      goto LABEL_271;
                    if (v413 == (_DWORD)++v555)
                      goto LABEL_612;
                  }
                case 11:
                  v558 = 1;
                  break;
                case 12:
                  goto LABEL_879;
                default:
                  goto LABEL_1217;
              }
              while (v412 < v411)
              {
                v559 = (uint64_t *)((char *)v412 + 1);
                v44[1] = (uint64_t *)((char *)v412 + 1);
                if (*(_BYTE *)v412 == 10 && ((_BYTE)v44[4] & 4) == 0)
                  break;
                if (v559 < v411)
                {
                  v560 = (char *)v411 - (char *)v559;
                  while ((*(_BYTE *)v559 & 0xC0) == 0x80)
                  {
                    v559 = (uint64_t *)((char *)v559 + 1);
                    v44[1] = v559;
                    if (!--v560)
                    {
                      v559 = v411;
                      break;
                    }
                  }
                }
                v412 = v559;
                v169 = v558++ == v224;
                if (v169)
                  goto LABEL_612;
              }
            }
            else
            {
              switch(v407)
              {
                case 5:
                  v513 = *(_QWORD *)(a4 + 40);
                  v514 = (uint64_t *)((char *)v412 + 1);
                  while (1)
                  {
                    v44[1] = v514;
                    if ((*(_BYTE *)(v513 + *((unsigned __int8 *)v514 - 1)) & 4) != 0)
                      goto LABEL_271;
                    v514 = (uint64_t *)((char *)v514 + 1);
                    if (!--v224)
                      goto LABEL_612;
                  }
                case 6:
                  v561 = *(_QWORD *)(a4 + 40);
                  v562 = (uint64_t *)((char *)v412 + 1);
                  while (1)
                  {
                    v44[1] = v562;
                    if ((*(_BYTE *)(v561 + *((unsigned __int8 *)v562 - 1)) & 4) == 0)
                      goto LABEL_271;
                    v562 = (uint64_t *)((char *)v562 + 1);
                    if (!--v224)
                      goto LABEL_612;
                  }
                case 7:
                  v563 = *(_QWORD *)(a4 + 40);
                  v564 = (uint64_t *)((char *)v412 + 1);
                  while (1)
                  {
                    v44[1] = v564;
                    if ((*(_BYTE *)(v563 + *((unsigned __int8 *)v564 - 1)) & 1) != 0)
                      goto LABEL_271;
                    v564 = (uint64_t *)((char *)v564 + 1);
                    if (!--v224)
                      goto LABEL_612;
                  }
                case 8:
                  v565 = *(_QWORD *)(a4 + 40);
                  v566 = (uint64_t *)((char *)v412 + 1);
                  while (1)
                  {
                    v44[1] = v566;
                    if ((*(_BYTE *)(v565 + *((unsigned __int8 *)v566 - 1)) & 1) == 0)
                      goto LABEL_271;
                    v566 = (uint64_t *)((char *)v566 + 1);
                    if (!--v224)
                      goto LABEL_612;
                  }
                case 9:
                  v567 = *(_QWORD *)(a4 + 40);
                  v568 = (uint64_t *)((char *)v412 + 1);
                  while (1)
                  {
                    v44[1] = v568;
                    if ((*(_BYTE *)(v567 + *((unsigned __int8 *)v568 - 1)) & 0x10) != 0)
                      goto LABEL_271;
                    v568 = (uint64_t *)((char *)v568 + 1);
                    if (!--v224)
                      goto LABEL_612;
                  }
                case 10:
                  v569 = *(_QWORD *)(a4 + 40);
                  v570 = (uint64_t *)((char *)v412 + 1);
                  while (1)
                  {
                    v44[1] = v570;
                    if ((*(_BYTE *)(v569 + *((unsigned __int8 *)v570 - 1)) & 0x10) == 0)
                      goto LABEL_271;
                    v570 = (uint64_t *)((char *)v570 + 1);
                    if (!--v224)
                      goto LABEL_612;
                  }
                case 11:
                  if (((_BYTE)v44[4] & 4) != 0)
                    goto LABEL_879;
                  v571 = (uint64_t *)((char *)v412 + 1);
                  break;
                case 12:
LABEL_879:
                  v44[1] = (uint64_t *)((char *)v412 + v224);
                  goto LABEL_612;
                default:
LABEL_1217:
                  v795 = *v44;
                  pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v774);
                  v79 = v795;
                  v12 = 4294967282;
                  if (!v795)
                    return v12;
                  *((_DWORD *)v795 + 102) = -14;
                  goto LABEL_101;
              }
              while (1)
              {
                v44[1] = v571;
                if (*((_BYTE *)v571 - 1) == 10)
                  break;
                v571 = (uint64_t *)((char *)v571 + 1);
                if (!--v224)
                  goto LABEL_612;
              }
            }
LABEL_271:
            v194 = *v44;
            goto LABEL_886;
          }
          v226 = v8;
          v423 = 1;
          do
          {
            v424 = (unsigned __int8 *)v44[1];
            v44[1] = (uint64_t *)(v424 + 1);
            v425 = *v424;
            if (*(_DWORD *)(a4 + 60) && (v425 & 0xC0) == 0xC0)
            {
              v426 = utf8_table4[v425 & 0x3F];
              v425 = (utf8_table3[utf8_table4[v425 & 0x3F]] & v425) << (6 * v426);
              v427 = v424 + 2;
              v428 = 6 * v426 - 6;
              v429 = v426 + 1;
              do
              {
                v44[1] = (uint64_t *)v427;
                v425 |= (*(v427++ - 1) & 0x3F) << v428;
                v428 -= 6;
                --v429;
              }
              while (v429 > 1);
            }
            v430 = ucp_findchar(v425, (int *)v44 + 49, (unsigned int *)v44 + 50);
            v44 = (uint64_t **)v795;
            *((_DWORD *)v795 + 48) = v430;
            if (v430 == 2)
              goto LABEL_888;
            for (k = (unsigned __int8 *)v44[1]; (unint64_t)k < *(_QWORD *)(a4 + 96); v44[1] = (uint64_t *)k)
            {
              v432 = *k;
              v433 = 1;
              if (*(_DWORD *)(a4 + 60) && (v432 & 0xC0) == 0xC0)
              {
                v434 = utf8_table4[v432 & 0x3F];
                v432 = (utf8_table3[v434] & v432) << (6 * v434);
                v435 = (char *)(k + 1);
                if (v434 <= 1)
                  v436 = 1;
                else
                  v436 = v434;
                v437 = 6 * v434 - 6;
                do
                {
                  v438 = *v435++;
                  v432 |= (v438 & 0x3F) << v437;
                  v437 -= 6;
                  --v436;
                }
                while (v436);
                v433 = v434 + 1;
              }
              v439 = ucp_findchar(v432, (int *)v44 + 49, (unsigned int *)v44 + 50);
              v44 = (uint64_t **)v795;
              *((_DWORD *)v795 + 48) = v439;
              if (v439 != 2)
                break;
              k = (unsigned __int8 *)v44[1] + v433;
            }
            v413 = *((_DWORD *)v44 + 59);
            v422 = v423++ < v413;
          }
          while (v422);
LABEL_611:
          v8 = v226;
LABEL_612:
          v440 = *((_DWORD *)v44 + 58);
          v441 = v440 - v413;
          if (v440 == v413)
            continue;
          if (*((_DWORD *)v44 + 42))
          {
            if (*((int *)v44 + 46) < 1)
            {
              v11 = v785;
              if (*((_DWORD *)v44 + 54) == 15)
              {
                *((_DWORD *)v44 + 56) = v413;
LABEL_906:
                *(_QWORD *)&v791 = 0;
                v101 = a1;
                v102 = 43;
              }
              else
              {
                v645 = *(_DWORD *)(a4 + 60);
                *((_DWORD *)v44 + 56) = v413;
                if (v645)
                {
LABEL_941:
                  *(_QWORD *)&v791 = 0;
                  v101 = a1;
                  v102 = 44;
                }
                else
                {
LABEL_955:
                  *(_QWORD *)&v791 = 0;
                  v101 = a1;
                  v102 = 45;
                }
              }
            }
            else
            {
              *((_DWORD *)v44 + 56) = v413;
              v11 = v785;
LABEL_184:
              *(_QWORD *)&v791 = 0;
              v101 = a1;
              v102 = 42;
            }
            goto LABEL_1364;
          }
          v193 = v44[1];
          v44[11] = v193;
          if (*((int *)v44 + 46) >= 1)
          {
            v11 = v785;
            if (v440 > v413)
            {
              while ((unint64_t)v193 < *(_QWORD *)(a4 + 96))
              {
                v586 = *(unsigned __int8 *)v193;
                v587 = v8;
                if ((~v586 & 0xC0) != 0)
                {
                  v593 = 1;
                }
                else
                {
                  v588 = utf8_table4[v586 & 0x3F];
                  v586 = (utf8_table3[v588] & v586) << (6 * v588);
                  v589 = (char *)v193 + 1;
                  if (v588 <= 1)
                    v590 = 1;
                  else
                    v590 = v588;
                  v591 = 6 * v588 - 6;
                  do
                  {
                    v592 = *v589++;
                    v586 |= (v592 & 0x3F) << v591;
                    v591 -= 6;
                    --v590;
                  }
                  while (v590);
                  v593 = v588 + 1;
                }
                v594 = ucp_findchar(v586, (int *)v44 + 49, (unsigned int *)v44 + 50);
                v44 = (uint64_t **)v795;
                *((_DWORD *)v795 + 48) = v594;
                if (*((_DWORD *)v44 + 47) == (*(_DWORD *)v44[26] == *((_DWORD *)v44 + 51)))
                {
                  v8 = v587;
                  break;
                }
                v193 = (uint64_t *)((char *)v44[1] + v593);
                v44[1] = v193;
                ++v413;
                v8 = v587;
                if (v413 >= *((_DWORD *)v44 + 58))
                  break;
              }
            }
LABEL_226:
            *(_QWORD *)&v791 = 0;
            v101 = a1;
            v102 = 46;
            goto LABEL_1364;
          }
          v623 = *((_DWORD *)v44 + 54);
          if (v623 == 15)
          {
            v11 = v785;
            if (v440 > v413)
            {
              do
              {
                v624 = (unsigned __int8 *)v44[1];
                if ((unint64_t)v624 >= *(_QWORD *)(a4 + 96))
                  break;
                v44[1] = (uint64_t *)(v624 + 1);
                v625 = *v624;
                if (*(_DWORD *)(a4 + 60) && (v625 & 0xC0) == 0xC0)
                {
                  v626 = utf8_table4[v625 & 0x3F];
                  v625 = (utf8_table3[utf8_table4[v625 & 0x3F]] & v625) << (6 * v626);
                  v627 = v624 + 2;
                  v628 = 6 * v626 - 6;
                  v629 = v626 + 1;
                  do
                  {
                    v44[1] = (uint64_t *)v627;
                    v625 |= (*(v627++ - 1) & 0x3F) << v628;
                    v628 -= 6;
                    --v629;
                  }
                  while (v629 > 1);
                }
                v630 = ucp_findchar(v625, (int *)v44 + 49, (unsigned int *)v44 + 50);
                v44 = (uint64_t **)v795;
                *((_DWORD *)v795 + 48) = v630;
                if (v630 == 2)
                  break;
                v631 = v8;
                for (m = (unsigned __int8 *)v44[1]; (unint64_t)m < *(_QWORD *)(a4 + 96); v44[1] = (uint64_t *)m)
                {
                  v633 = *m;
                  v634 = 1;
                  if (*(_DWORD *)(a4 + 60) && (v633 & 0xC0) == 0xC0)
                  {
                    v635 = utf8_table4[v633 & 0x3F];
                    v633 = (utf8_table3[v635] & v633) << (6 * v635);
                    v636 = (char *)(m + 1);
                    if (v635 <= 1)
                      v637 = 1;
                    else
                      v637 = v635;
                    v638 = 6 * v635 - 6;
                    do
                    {
                      v639 = *v636++;
                      v633 |= (v639 & 0x3F) << v638;
                      v638 -= 6;
                      --v637;
                    }
                    while (v637);
                    v634 = v635 + 1;
                  }
                  v640 = ucp_findchar(v633, (int *)v44 + 49, (unsigned int *)v44 + 50);
                  v44 = (uint64_t **)v795;
                  *((_DWORD *)v795 + 48) = v640;
                  if (v640 != 2)
                    break;
                  m = (unsigned __int8 *)v44[1] + v634;
                }
                ++v413;
                v8 = v631;
              }
              while (v413 < *((_DWORD *)v44 + 58));
            }
LABEL_1232:
            *(_QWORD *)&v791 = 0;
            v101 = a1;
            v102 = 47;
            goto LABEL_1364;
          }
          if (!*(_DWORD *)(a4 + 60))
          {
            switch(v623)
            {
              case 5:
                v699 = v440 - v413;
                if (v440 <= v413)
                  goto LABEL_1362;
                v700 = 0;
                v701 = *(_QWORD *)(a4 + 96);
                v179 = (unint64_t)v193;
                while (1)
                {
                  v702 = (char *)v193 + v700;
                  if ((unint64_t)v193 + v700 >= v701)
                    goto LABEL_1382;
                  if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + *v702) & 4) != 0)
                    goto LABEL_1383;
                  ++v179;
                  v44[1] = (uint64_t *)((char *)v193 + ++v700);
                  if (v699 == (_DWORD)v700)
                    goto LABEL_1361;
                }
              case 6:
                v751 = v440 - v413;
                if (v440 <= v413)
                  goto LABEL_1362;
                v700 = 0;
                v752 = *(_QWORD *)(a4 + 96);
                v179 = (unint64_t)v193;
                while (1)
                {
                  v702 = (char *)v193 + v700;
                  if ((unint64_t)v193 + v700 >= v752)
                    goto LABEL_1382;
                  if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + *v702) & 4) == 0)
                    goto LABEL_1383;
                  ++v179;
                  v44[1] = (uint64_t *)((char *)v193 + ++v700);
                  if (v751 == (_DWORD)v700)
                    goto LABEL_1361;
                }
              case 7:
                v753 = v440 - v413;
                if (v440 <= v413)
                  goto LABEL_1362;
                v700 = 0;
                v754 = *(_QWORD *)(a4 + 96);
                v179 = (unint64_t)v193;
                while (1)
                {
                  v702 = (char *)v193 + v700;
                  if ((unint64_t)v193 + v700 >= v754)
                    goto LABEL_1382;
                  if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + *v702) & 1) != 0)
                    goto LABEL_1383;
                  ++v179;
                  v44[1] = (uint64_t *)((char *)v193 + ++v700);
                  if (v753 == (_DWORD)v700)
                    goto LABEL_1361;
                }
              case 8:
                v755 = v440 - v413;
                if (v440 <= v413)
                  goto LABEL_1362;
                v700 = 0;
                v756 = *(_QWORD *)(a4 + 96);
                v179 = (unint64_t)v193;
                while (1)
                {
                  v702 = (char *)v193 + v700;
                  if ((unint64_t)v193 + v700 >= v756)
                    goto LABEL_1382;
                  if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + *v702) & 1) == 0)
                    goto LABEL_1383;
                  ++v179;
                  v44[1] = (uint64_t *)((char *)v193 + ++v700);
                  if (v755 == (_DWORD)v700)
                    goto LABEL_1361;
                }
              case 9:
                v757 = v440 - v413;
                if (v440 <= v413)
                  goto LABEL_1362;
                v700 = 0;
                v758 = *(_QWORD *)(a4 + 96);
                v179 = (unint64_t)v193;
                while (1)
                {
                  v702 = (char *)v193 + v700;
                  if ((unint64_t)v193 + v700 >= v758)
                    goto LABEL_1382;
                  if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + *v702) & 0x10) != 0)
                    goto LABEL_1383;
                  ++v179;
                  v44[1] = (uint64_t *)((char *)v193 + ++v700);
                  if (v757 == (_DWORD)v700)
                    goto LABEL_1361;
                }
              case 10:
                v759 = v440 - v413;
                if (v440 <= v413)
                  goto LABEL_1362;
                v700 = 0;
                v760 = *(_QWORD *)(a4 + 96);
                v179 = (unint64_t)v193;
                while (1)
                {
                  v702 = (char *)v193 + v700;
                  if ((unint64_t)v193 + v700 >= v760)
                    goto LABEL_1382;
                  if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + *v702) & 0x10) == 0)
                    goto LABEL_1383;
                  ++v179;
                  v44[1] = (uint64_t *)((char *)v193 + ++v700);
                  if (v759 == (_DWORD)v700)
                    goto LABEL_1361;
                }
              case 11:
                if (((_BYTE)v44[4] & 4) != 0)
                  goto LABEL_1379;
                v761 = v440 - v413;
                if (v440 <= v413)
                {
LABEL_1362:
                  v11 = v785;
                  goto LABEL_1363;
                }
                v700 = 0;
                v762 = *(_QWORD *)(a4 + 96);
                v179 = (unint64_t)v193;
                while (1)
                {
                  v702 = (char *)v193 + v700;
                  if ((unint64_t)v193 + v700 >= v762)
                    break;
                  if (*v702 == 10)
                    goto LABEL_1383;
                  ++v179;
                  v44[1] = (uint64_t *)((char *)v193 + ++v700);
                  if (v761 == (_DWORD)v700)
                  {
LABEL_1361:
                    v179 = (unint64_t)v193 + v700;
                    goto LABEL_1383;
                  }
                }
LABEL_1382:
                v179 = (unint64_t)v702;
LABEL_1383:
                v11 = v785;
                break;
              case 12:
LABEL_1379:
                v767 = *(_QWORD *)(a4 + 96) - (_QWORD)v193;
                if (v767 >= v441)
                  LODWORD(v767) = v441;
                v179 = (unint64_t)v193 + (int)v767;
                v44[1] = (uint64_t *)v179;
                v11 = v785;
                break;
              default:
                goto LABEL_1217;
            }
LABEL_270:
            if (v179 < (unint64_t)v193)
              goto LABEL_271;
LABEL_1363:
            *(_QWORD *)&v791 = 0;
            v101 = a1;
            v102 = 49;
            goto LABEL_1364;
          }
          switch(v623)
          {
            case 5:
              if (v440 <= v413)
                goto LABEL_1324;
              v666 = *(_QWORD *)(a4 + 96);
              while (2)
              {
                if ((unint64_t)v193 >= v666)
                  goto LABEL_1407;
                v667 = *(unsigned __int8 *)v193;
                if ((~v667 & 0xC0) != 0)
                {
                  v673 = 1;
                }
                else
                {
                  v668 = utf8_table4[v667 & 0x3F];
                  v667 = (utf8_table3[v668] & v667) << (6 * v668);
                  v669 = (char *)v193 + 1;
                  if (v668 <= 1)
                    v670 = 1;
                  else
                    v670 = v668;
                  v671 = 6 * v668 - 6;
                  do
                  {
                    v672 = *v669++;
                    v667 |= (v672 & 0x3F) << v671;
                    v671 -= 6;
                    --v670;
                  }
                  while (v670);
                  v673 = v668 + 1;
                  if (v667 > 255)
                    goto LABEL_1152;
                }
                if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v667) & 4) != 0)
                  goto LABEL_1407;
LABEL_1152:
                v193 = (uint64_t *)((char *)v193 + v673);
                v44[1] = v193;
                if (++v413 == v440)
                  goto LABEL_1407;
                continue;
              }
            case 6:
              if (v440 <= v413)
                goto LABEL_1324;
              v707 = *(_QWORD *)(a4 + 96);
              while (2)
              {
                if ((unint64_t)v193 >= v707)
                  goto LABEL_1407;
                v708 = *(unsigned __int8 *)v193;
                if ((~v708 & 0xC0) != 0)
                {
                  v714 = 1;
                  goto LABEL_1249;
                }
                v709 = utf8_table4[v708 & 0x3F];
                v708 = (utf8_table3[v709] & v708) << (6 * v709);
                v710 = (char *)v193 + 1;
                if (v709 <= 1)
                  v711 = 1;
                else
                  v711 = v709;
                v712 = 6 * v709 - 6;
                do
                {
                  v713 = *v710++;
                  v708 |= (v713 & 0x3F) << v712;
                  v712 -= 6;
                  --v711;
                }
                while (v711);
                if (v708 <= 255)
                {
                  v714 = v709 + 1;
LABEL_1249:
                  if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v708) & 4) == 0)
                    goto LABEL_1407;
                  v193 = (uint64_t *)((char *)v193 + v714);
                  v44[1] = v193;
                  if (++v413 == v440)
                    goto LABEL_1407;
                  continue;
                }
                goto LABEL_1407;
              }
            case 7:
              if (v440 <= v413)
                goto LABEL_1324;
              v715 = *(_QWORD *)(a4 + 96);
              while (2)
              {
                if ((unint64_t)v193 >= v715)
                  goto LABEL_1407;
                v716 = *(unsigned __int8 *)v193;
                if ((~v716 & 0xC0) != 0)
                {
                  v722 = 1;
                }
                else
                {
                  v717 = utf8_table4[v716 & 0x3F];
                  v716 = (utf8_table3[v717] & v716) << (6 * v717);
                  v718 = (char *)v193 + 1;
                  if (v717 <= 1)
                    v719 = 1;
                  else
                    v719 = v717;
                  v720 = 6 * v717 - 6;
                  do
                  {
                    v721 = *v718++;
                    v716 |= (v721 & 0x3F) << v720;
                    v720 -= 6;
                    --v719;
                  }
                  while (v719);
                  v722 = v717 + 1;
                  if (v716 > 255)
                    goto LABEL_1265;
                }
                if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v716) & 1) != 0)
                  goto LABEL_1407;
LABEL_1265:
                v193 = (uint64_t *)((char *)v193 + v722);
                v44[1] = v193;
                if (++v413 == v440)
                  goto LABEL_1407;
                continue;
              }
            case 8:
              if (v440 <= v413)
                goto LABEL_1324;
              v723 = *(_QWORD *)(a4 + 96);
              while (2)
              {
                if ((unint64_t)v193 >= v723)
                  goto LABEL_1407;
                v724 = *(unsigned __int8 *)v193;
                if ((~v724 & 0xC0) != 0)
                {
                  v730 = 1;
                  goto LABEL_1279;
                }
                v725 = utf8_table4[v724 & 0x3F];
                v724 = (utf8_table3[v725] & v724) << (6 * v725);
                v726 = (char *)v193 + 1;
                if (v725 <= 1)
                  v727 = 1;
                else
                  v727 = v725;
                v728 = 6 * v725 - 6;
                do
                {
                  v729 = *v726++;
                  v724 |= (v729 & 0x3F) << v728;
                  v728 -= 6;
                  --v727;
                }
                while (v727);
                if (v724 <= 255)
                {
                  v730 = v725 + 1;
LABEL_1279:
                  if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v724) & 1) == 0)
                    goto LABEL_1407;
                  v193 = (uint64_t *)((char *)v193 + v730);
                  v44[1] = v193;
                  if (++v413 == v440)
                    goto LABEL_1407;
                  continue;
                }
                goto LABEL_1407;
              }
            case 9:
              if (v440 <= v413)
                goto LABEL_1324;
              v731 = *(_QWORD *)(a4 + 96);
              while (2)
              {
                if ((unint64_t)v193 >= v731)
                  goto LABEL_1407;
                v732 = *(unsigned __int8 *)v193;
                if ((~v732 & 0xC0) != 0)
                {
                  v738 = 1;
                }
                else
                {
                  v733 = utf8_table4[v732 & 0x3F];
                  v732 = (utf8_table3[v733] & v732) << (6 * v733);
                  v734 = (char *)v193 + 1;
                  if (v733 <= 1)
                    v735 = 1;
                  else
                    v735 = v733;
                  v736 = 6 * v733 - 6;
                  do
                  {
                    v737 = *v734++;
                    v732 |= (v737 & 0x3F) << v736;
                    v736 -= 6;
                    --v735;
                  }
                  while (v735);
                  v738 = v733 + 1;
                  if (v732 > 255)
                    goto LABEL_1295;
                }
                if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v732) & 0x10) != 0)
                  goto LABEL_1407;
LABEL_1295:
                v193 = (uint64_t *)((char *)v193 + v738);
                v44[1] = v193;
                if (++v413 == v440)
                  goto LABEL_1407;
                continue;
              }
            case 10:
              if (v440 <= v413)
                goto LABEL_1324;
              v739 = *(_QWORD *)(a4 + 96);
              while (2)
              {
                if ((unint64_t)v193 >= v739)
                  goto LABEL_1407;
                v740 = *(unsigned __int8 *)v193;
                if ((~v740 & 0xC0) != 0)
                {
                  v746 = 1;
                  goto LABEL_1309;
                }
                v741 = utf8_table4[v740 & 0x3F];
                v740 = (utf8_table3[v741] & v740) << (6 * v741);
                v742 = (char *)v193 + 1;
                if (v741 <= 1)
                  v743 = 1;
                else
                  v743 = v741;
                v744 = 6 * v741 - 6;
                do
                {
                  v745 = *v742++;
                  v740 |= (v745 & 0x3F) << v744;
                  v744 -= 6;
                  --v743;
                }
                while (v743);
                if (v740 <= 255)
                {
                  v746 = v741 + 1;
LABEL_1309:
                  if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v740) & 0x10) == 0)
                    goto LABEL_1407;
                  v193 = (uint64_t *)((char *)v193 + v746);
                  v44[1] = v193;
                  if (++v413 == v440)
                    goto LABEL_1407;
                  continue;
                }
                goto LABEL_1407;
              }
            case 11:
              v747 = v44[4];
              if (v440 == 0x7FFFFFFF)
              {
                if ((v747 & 4) != 0)
                {
                  v750 = v413 ^ 0x7FFFFFFFu;
                  if (*(_QWORD *)(a4 + 96) - (_QWORD)v193 < v750)
                    LODWORD(v750) = *(_DWORD *)(a4 + 96) - (_DWORD)v193;
LABEL_1323:
                  v44[1] = (uint64_t *)((char *)v193 + (int)v750);
                }
                else if (v413 != 0x7FFFFFFF)
                {
                  v748 = *(_QWORD *)(a4 + 96);
                  v749 = v413 - 0x7FFFFFFF;
                  do
                  {
                    if ((unint64_t)v193 >= v748)
                      break;
                    if (*(_BYTE *)v193 == 10)
                      break;
                    v193 = (uint64_t *)((char *)v193 + 1);
                    v44[1] = v193;
                    v53 = __CFADD__(v749++, 1);
                  }
                  while (!v53);
LABEL_1407:
                  v11 = v785;
LABEL_248:
                  *(_QWORD *)&v791 = 0;
                  v101 = a1;
                  v102 = 48;
                  goto LABEL_1364;
                }
              }
              else if ((v747 & 4) != 0)
              {
                if (v440 > v413)
                {
                  v770 = *(_QWORD *)(a4 + 96);
                  do
                  {
                    v771 = (uint64_t *)((char *)v193 + 1);
                    v44[1] = (uint64_t *)((char *)v193 + 1);
                    if ((unint64_t)v193 + 1 < v770)
                    {
                      v772 = v770 - 1 - (_QWORD)v193;
                      while ((*(_BYTE *)v771 & 0xC0) == 0x80)
                      {
                        v771 = (uint64_t *)((char *)v771 + 1);
                        v44[1] = v771;
                        if (!--v772)
                        {
                          v771 = (uint64_t *)v770;
                          break;
                        }
                      }
                    }
                    ++v413;
                    v193 = v771;
                  }
                  while (v413 != v440);
                  goto LABEL_1407;
                }
              }
              else if (v440 > v413)
              {
                v768 = *(uint64_t **)(a4 + 96);
                do
                {
                  if (v193 >= v768 || *(_BYTE *)v193 == 10)
                    break;
                  v193 = (uint64_t *)((char *)v193 + 1);
                  v44[1] = v193;
                  if (v193 < v768)
                  {
                    v769 = (char *)v768 - (char *)v193;
                    while ((*(_BYTE *)v193 & 0xC0) == 0x80)
                    {
                      v193 = (uint64_t *)((char *)v193 + 1);
                      v44[1] = v193;
                      if (!--v769)
                      {
                        v193 = v768;
                        break;
                      }
                    }
                  }
                  ++v413;
                }
                while (v413 != v440);
                goto LABEL_1407;
              }
LABEL_1324:
              v11 = v785;
              goto LABEL_248;
            case 12:
              v750 = *(_QWORD *)(a4 + 96) - (_QWORD)v193;
              if (v750 >= v441)
                LODWORD(v750) = v441;
              goto LABEL_1323;
            default:
              goto LABEL_1217;
          }
        case 0x3Bu:
        case 0x3Cu:
          v259 = v209 + 1;
          v44[9] = (uint64_t *)(v209 + 1);
          v44[2] = (uint64_t *)(v209 + 33);
          v260 = v209[33];
          if ((v260 - 51) >= 6)
          {
            if ((v260 - 57) < 2)
            {
              v262 = v260 == 58;
              *((_DWORD *)v44 + 42) = v262;
              v263 = __rev16(*((unsigned __int16 *)v209 + 17));
              *((_DWORD *)v44 + 59) = v263;
              v264 = __rev16(*((unsigned __int16 *)v209 + 18));
              if (!v264)
                v264 = 0x7FFFFFFF;
              *((_DWORD *)v44 + 58) = v264;
              v44[2] = (uint64_t *)(v209 + 38);
              goto LABEL_667;
            }
            v262 = 0;
            v44[29] = (uint64_t *)0x100000001;
            v264 = 1;
            v263 = 1;
            if (*(_DWORD *)(a4 + 60))
            {
LABEL_669:
              v476 = *(_QWORD *)(a4 + 96);
              v477 = (unsigned __int8 *)v44[1];
              v478 = 1;
              while ((unint64_t)v477 < v476)
              {
                v479 = v477 + 1;
                v44[1] = (uint64_t *)(v477 + 1);
                v480 = *v477;
                if ((~v480 & 0xC0) != 0)
                  goto LABEL_677;
                v481 = utf8_table4[v480 & 0x3F];
                v482 = 6 * v481;
                v480 = (utf8_table3[utf8_table4[v480 & 0x3F]] & v480) << (6 * v481);
                v483 = v481 + 1;
                v484 = v482 - 6;
                do
                {
                  v485 = v479++;
                  v44[1] = (uint64_t *)v479;
                  v480 |= (*v485 & 0x3F) << v484;
                  --v483;
                  v484 -= 6;
                }
                while (v483 > 1);
                if (v480 < 256)
                {
LABEL_677:
                  if (((v259[v480 / 8] >> (v480 & 7)) & 1) == 0)
                    break;
                }
                else if (v210 == 59)
                {
                  break;
                }
                v477 = v479;
                v169 = v478++ == v263;
                if (v169)
                  goto LABEL_680;
              }
            }
            else
            {
LABEL_682:
              v487 = 0;
              v488 = *(_QWORD *)(a4 + 96);
              v489 = v44[1];
              while (1)
              {
                v490 = (char *)v489 + v487;
                if ((unint64_t)v489 + v487 >= v488)
                  break;
                v44[1] = (uint64_t *)(v490 + 1);
                if (((v259[(unint64_t)*v490 >> 3] >> (*v490 & 7)) & 1) == 0)
                  break;
                if (v263 == (_DWORD)++v487)
                  goto LABEL_686;
              }
            }
LABEL_907:
            v795 = *v44;
            pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v774);
            v581 = v795;
            if (v795)
            {
              v12 = 0;
              *((_DWORD *)v795 + 102) = 0;
LABEL_909:
              *v14 = v581;
              v11 = v785;
              goto LABEL_1376;
            }
            return 0;
          }
          v44[2] = (uint64_t *)(v209 + 34);
          v261 = v209[33];
          v262 = (v261 - 51) & 1;
          *((_DWORD *)v44 + 42) = v262;
          v263 = rep_min_0[v261 - 51];
          *((_DWORD *)v44 + 59) = v263;
          if ((v261 - 57) >= 0xFFFFFFFE)
            v264 = rep_max_0[v261 - 51];
          else
            v264 = 0x7FFFFFFF;
          *((_DWORD *)v44 + 58) = v264;
LABEL_667:
          if (*(_DWORD *)(a4 + 60))
          {
            if (v263 >= 1)
              goto LABEL_669;
LABEL_680:
            v486 = 0;
          }
          else
          {
            if (v263 >= 1)
              goto LABEL_682;
LABEL_686:
            v486 = 1;
          }
          if (v264 != v263)
          {
            if (v262)
            {
              *((_DWORD *)v44 + 56) = v263;
              v11 = v785;
              if ((v486 & 1) != 0)
              {
LABEL_74:
                *(_QWORD *)&v791 = 0;
                v64 = a1;
                v65 = 23;
                goto LABEL_1229;
              }
              goto LABEL_893;
            }
            v70 = (unsigned __int8 *)v44[1];
            v44[11] = (uint64_t *)v70;
            if ((v486 & 1) != 0)
            {
              v340 = __OFSUB__(v264, v263);
              v674 = v264 - v263;
              if ((v674 < 0) ^ v340 | (v674 == 0))
              {
                v11 = v785;
LABEL_1225:
                *(_QWORD *)&v791 = 0;
                v64 = a1;
                v65 = 25;
                goto LABEL_1229;
              }
              v675 = 0;
              v676 = *(_QWORD *)(a4 + 96);
              v69 = (unint64_t)v70;
              while ((unint64_t)&v70[v675] < v676)
              {
                if (((v259[(unint64_t)v70[v675] >> 3] >> (v70[v675] & 7)) & 1) == 0)
                  goto LABEL_1236;
                ++v69;
                v44[1] = (uint64_t *)&v70[++v675];
                if (v674 == (_DWORD)v675)
                {
                  v69 = (unint64_t)&v70[v675];
                  goto LABEL_1236;
                }
              }
              v69 = (unint64_t)&v70[v675];
LABEL_1236:
              v11 = v785;
LABEL_83:
              if (v69 >= (unint64_t)v70)
                goto LABEL_1225;
              goto LABEL_271;
            }
            if (v264 <= v263)
            {
LABEL_1207:
              v11 = v785;
LABEL_80:
              *(_QWORD *)&v791 = 0;
              v64 = a1;
              v65 = 24;
              goto LABEL_1229;
            }
            v691 = *(_QWORD *)(a4 + 96);
            while (2)
            {
              if ((unint64_t)v70 >= v691)
                goto LABEL_1207;
              v692 = *v70;
              if ((~v692 & 0xC0) != 0)
              {
                v698 = 1;
              }
              else
              {
                v693 = utf8_table4[v692 & 0x3F];
                v692 = (utf8_table3[v693] & v692) << (6 * v693);
                v694 = (char *)(v70 + 1);
                if (v693 <= 1)
                  v695 = 1;
                else
                  v695 = v693;
                v696 = 6 * v693 - 6;
                do
                {
                  v697 = *v694++;
                  v692 |= (v697 & 0x3F) << v696;
                  v696 -= 6;
                  --v695;
                }
                while (v695);
                v698 = v693 + 1;
                if (v692 >= 256)
                {
                  if (v210 == 59)
                    goto LABEL_1207;
                  goto LABEL_1206;
                }
              }
              if (((v259[v692 / 8] >> (v692 & 7)) & 1) == 0)
                goto LABEL_1207;
LABEL_1206:
              v70 += v698;
              v44[1] = (uint64_t *)v70;
              if (++v263 == v264)
                goto LABEL_1207;
              continue;
            }
          }
          continue;
        case 0x3Du:
          v448 = v209 + 3;
          v44[9] = (uint64_t *)(v209 + 3);
          v449 = &v209[__rev16(*(unsigned __int16 *)(v209 + 1))];
          v44[2] = (uint64_t *)v449;
          v450 = *v449;
          if ((v450 - 51) >= 6)
          {
            if ((v450 - 57) >= 2)
            {
              v452 = 0;
              v44[29] = (uint64_t *)0x100000001;
              v453 = 1;
              v454 = 1;
              goto LABEL_759;
            }
            v452 = v450 == 58;
            *((_DWORD *)v44 + 42) = v452;
            v453 = __rev16(*(unsigned __int16 *)(v449 + 1));
            *((_DWORD *)v44 + 59) = v453;
            v454 = __rev16(*(unsigned __int16 *)(v449 + 3));
            if (!v454)
              v454 = 0x7FFFFFFF;
            *((_DWORD *)v44 + 58) = v454;
            v44[2] = (uint64_t *)(v449 + 5);
          }
          else
          {
            v44[2] = (uint64_t *)(v449 + 1);
            v451 = *v449;
            v452 = (v451 - 51) & 1;
            *((_DWORD *)v44 + 42) = v452;
            v453 = rep_min_0[v451 - 51];
            *((_DWORD *)v44 + 59) = v453;
            v454 = rep_max_0[v451 - 51];
            if ((v451 - 57) < 0xFFFFFFFE)
              v454 = 0x7FFFFFFF;
            *((_DWORD *)v44 + 58) = v454;
          }
          if (v453 < 1)
            goto LABEL_770;
LABEL_759:
          v775 = v452;
          v777 = v454;
          v521 = v8;
          v522 = *(_QWORD *)(a4 + 96);
          v523 = (unsigned __int8 *)v44[1];
          v524 = 1;
          do
          {
            if ((unint64_t)v523 >= v522)
              goto LABEL_921;
            v525 = v523 + 1;
            v44[1] = (uint64_t *)(v523 + 1);
            v526 = *v523;
            if ((~v526 & 0xC0) != 0)
            {
              ++v523;
            }
            else
            {
              v527 = utf8_table4[v526 & 0x3F];
              v528 = 6 * v527;
              v526 = (utf8_table3[utf8_table4[v526 & 0x3F]] & v526) << (6 * v527);
              v529 = v527 + 1;
              v530 = v528 - 6;
              do
              {
                v523 = v525 + 1;
                v44[1] = (uint64_t *)(v525 + 1);
                v526 |= (*v525 & 0x3F) << v530;
                --v529;
                v530 -= 6;
                ++v525;
              }
              while (v529 > 1);
            }
            if (!match_xclass(v526, v448))
            {
LABEL_921:
              v795 = *v44;
              pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v774);
              v584 = v795;
              if (!v795)
                return 0;
              v12 = 0;
              *((_DWORD *)v795 + 102) = 0;
              *v14 = v584;
              v8 = v521;
              goto LABEL_963;
            }
            v169 = v524++ == v453;
          }
          while (!v169);
          v8 = v521;
          v454 = v777;
          v452 = v775;
LABEL_770:
          if (v453 == v454)
            continue;
          if (v452)
          {
            *((_DWORD *)v44 + 56) = v453;
            v11 = v785;
LABEL_268:
            *(_QWORD *)&v791 = 0;
            v64 = a1;
            v65 = 26;
          }
          else
          {
            v680 = (unsigned __int8 *)v44[1];
            v44[11] = (uint64_t *)v680;
            if (v453 >= v454)
            {
              v11 = v785;
            }
            else
            {
              v681 = v454;
              v782 = v14;
              v682 = v8;
              v683 = *(_QWORD *)(a4 + 96);
              do
              {
                if ((unint64_t)v680 >= v683)
                  break;
                v684 = *v680;
                if ((~v684 & 0xC0) != 0)
                {
                  v690 = 1;
                }
                else
                {
                  v685 = utf8_table4[v684 & 0x3F];
                  v684 = (utf8_table3[v685] & v684) << (6 * v685);
                  v686 = (char *)(v680 + 1);
                  v687 = v685 <= 1 ? 1 : v685;
                  v688 = 6 * v685 - 6;
                  do
                  {
                    v689 = *v686++;
                    v684 |= (v689 & 0x3F) << v688;
                    v688 -= 6;
                    --v687;
                  }
                  while (v687);
                  v690 = v685 + 1;
                }
                if (!match_xclass(v684, v448))
                  break;
                v680 += v690;
                v44[1] = (uint64_t *)v680;
                ++v453;
              }
              while (v453 != v681);
              v8 = v682;
              v11 = v785;
              v14 = v782;
            }
LABEL_92:
            *(_QWORD *)&v791 = 0;
            v64 = a1;
            v65 = 27;
          }
LABEL_1229:
          v579 = pcre_getMem(v64, v65, &v791, a4, a5, (uint64_t)a6, a7, a8);
          v23 = (uint64_t *)v791;
          v580 = v795;
          if (!(_QWORD)v791)
            goto LABEL_1371;
LABEL_1230:
          if (v579 < 0)
            goto LABEL_1371;
LABEL_1366:
          v764 = *(_OWORD *)(v580 + 1);
          *(_OWORD *)(v23 + 1) = v764;
          *((_DWORD *)v23 + 6) = *((_DWORD *)v580 + 6);
          v182 = v580[4];
          v23[4] = v182;
          v181 = v580[5];
          v23[5] = v181;
          *((_DWORD *)v23 + 12) = 0;
          *v23 = (uint64_t)v580;
          v795 = v23;
          v26 = v764;
LABEL_1367:
          v25 = 1;
LABEL_1368:
          *((_DWORD *)v23 + 47) = 0;
          *((_DWORD *)v23 + 51) = 0;
          v23[26] = 0;
          v765 = *(_QWORD *)a4;
          v766 = *(_QWORD *)(a4 + 8);
          ++*(_QWORD *)a4;
          if (v765 < v766)
          {
            v23[22] = v182;
            if ((v25 & 1) == 0)
            {
              v23[49] = v181;
              v23[50] = v26;
              v23[5] = (uint64_t)(v23 + 49);
            }
            goto LABEL_321;
          }
          v795 = (uint64_t *)*v23;
          pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v774);
          v180 = v795;
          v12 = 4294967288;
          if (v795)
            goto LABEL_1374;
          return v12;
        case 0x3Eu:
          v455 = (v209[1] << 9) | (2 * v209[2]);
          *((_DWORD *)v44 + 61) = v455;
          v44[2] = (uint64_t *)(v209 + 3);
          if ((int)v455 >= *((_DWORD *)v44 + 6)
            || (v456 = *(_QWORD *)(a4 + 16), v457 = *(_DWORD *)(v456 + 4 * v455), v457 < 0))
          {
            a3 = *(_QWORD *)(a4 + 96) - (_QWORD)v44[1] + 1;
          }
          else
          {
            a3 = (*(_DWORD *)(v456 + 4 * (v455 | 1)) - v457);
          }
          *((_DWORD *)v44 + 57) = a3;
          v472 = v209[3];
          if ((v472 - 51) >= 6)
          {
            if ((v472 - 57) >= 2)
            {
              v547 = (unsigned __int8 *)v44[1];
              v548 = a3;
              if (!match_ref_0(v455, v547, a3, (_QWORD *)a4, (char)v44[4]))
                goto LABEL_964;
              v44[1] = (uint64_t *)&v547[v548];
              continue;
            }
            v774 = v472 == 58;
            *((_DWORD *)v44 + 42) = v774;
            v474 = __rev16(*((unsigned __int16 *)v209 + 2));
            *((_DWORD *)v44 + 59) = v474;
            v531 = __rev16(*((unsigned __int16 *)v209 + 3));
            if (v531)
              v475 = v531;
            else
              v475 = 0x7FFFFFFF;
            *((_DWORD *)v44 + 58) = v475;
            v44[2] = (uint64_t *)(v209 + 8);
          }
          else
          {
            v44[2] = (uint64_t *)(v209 + 4);
            v473 = v209[3];
            v774 = (v473 - 51) & 1;
            *((_DWORD *)v44 + 42) = v774;
            v474 = rep_min_0[v473 - 51];
            *((_DWORD *)v44 + 59) = v474;
            v475 = rep_max_0[v473 - 51];
            if ((v473 - 57) < 0xFFFFFFFE)
              v475 = 0x7FFFFFFF;
            *((_DWORD *)v44 + 58) = v475;
          }
          if ((_DWORD)a3)
          {
            v776 = v475;
            v781 = v14;
            v45 = v8;
            v778 = v474;
            if (v474 >= 1)
            {
              v532 = v44[4];
              v533 = (int)a3;
              v534 = (unsigned __int8 *)v44[1];
              v535 = v474;
              while (1)
              {
                v536 = v455;
                v537 = a3;
                if (!match_ref_0(v455, v534, a3, (_QWORD *)a4, (char)v532))
                  break;
                v534 += v533;
                v44[1] = (uint64_t *)v534;
                --v535;
                v455 = v536;
                a3 = v537;
                if (!v535)
                  goto LABEL_782;
              }
              v795 = *v44;
              pcre_freeMem(a1, &v796, v538, a4, a5, (uint64_t)a6, a7, a8, v774);
              v585 = v795;
              if (!v795)
                return 0;
              v12 = 0;
              *((_DWORD *)v795 + 102) = 0;
              v14 = v781;
              *v781 = v585;
              v8 = v45;
LABEL_963:
              v11 = v785;
              goto LABEL_1376;
            }
LABEL_782:
            v8 = v45;
            v14 = v781;
            if (v776 != v778)
            {
              if (!v774)
              {
                v52 = (unsigned __int8 *)v44[1];
                v44[11] = (uint64_t *)v52;
                v703 = v776 - v778;
                if (v776 <= v778)
                {
                  v8 = v45;
                  v11 = v785;
                }
                else
                {
                  v704 = v44[4];
                  v779 = (int)a3;
                  v51 = v52;
                  do
                  {
                    v705 = v455;
                    v706 = a3;
                    if (!match_ref_0(v455, v51, a3, (_QWORD *)a4, (char)v704))
                      break;
                    v51 += v779;
                    v44[1] = (uint64_t *)v51;
                    --v703;
                    v455 = v705;
                    a3 = v706;
                  }
                  while (v703);
                  v8 = v45;
                  v14 = v781;
LABEL_57:
                  v53 = v51 >= v52;
                  v11 = v785;
                  if (!v53)
                    goto LABEL_271;
                }
                *(_QWORD *)&v791 = 0;
                v64 = a1;
                v65 = 21;
                goto LABEL_1229;
              }
              *((_DWORD *)v44 + 56) = v778;
LABEL_54:
              *(_QWORD *)&v791 = 0;
              v49 = a1;
              v50 = 20;
              goto LABEL_903;
            }
          }
          continue;
        case 0x3Fu:
          v612 = (unsigned __int8 *)(*(_QWORD *)(a4 + 80) + __rev16(*(unsigned __int16 *)(v209 + 1)));
          v44[7] = (uint64_t *)v612;
          v613 = *v612;
          *((_DWORD *)v44 + 30) = v613 - 80;
          if (v613 >= 0xB5)
            *((_DWORD *)v44 + 30) = __rev16(*((unsigned __int16 *)v612 + 2));
          v44[14] = *(uint64_t **)(a4 + 136);
          *(_QWORD *)(a4 + 136) = v44 + 14;
          v44[2] = (uint64_t *)(v209 + 3);
          v44[16] = (uint64_t *)(v209 + 3);
          v614 = *(unsigned int *)(a4 + 24);
          *((_DWORD *)v44 + 38) = v614;
          if ((int)v614 > 30)
          {
            v615 = (void *)heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 4 * v614);
            v659 = (uint64_t **)v795;
            v795[18] = (uint64_t)v615;
            if (!v615)
            {
              v795 = *v659;
              pcre_freeMem(a1, &v796, v653, v654, v655, v656, v657, v658, v774);
              v581 = v795;
              v12 = 4294967290;
              if (!v795)
                return v12;
              goto LABEL_1112;
            }
            v614 = *((unsigned int *)v659 + 38);
          }
          else
          {
            v615 = (char *)v44 + 268;
            v44[18] = (uint64_t *)((char *)v44 + 268);
          }
          v11 = v785;
          memcpy(v615, *(const void **)(a4 + 16), 4 * v614);
          v660 = v795;
          v795[17] = *(_QWORD *)(a4 + 104);
          *(_QWORD *)(a4 + 104) = v660[1];
LABEL_291:
          *(_QWORD *)&v791 = 0;
          v203 = pcre_getMem(a1, 8, &v791, a4, a5, (uint64_t)a6, a7, a8);
          v23 = (uint64_t *)v791;
          v24 = v795;
          if (!(_QWORD)v791 || v203 < 0)
            goto LABEL_1176;
          v25 = 0;
          v26 = v795[1];
          *(_QWORD *)(v791 + 8) = v26;
          v27 = v24[7];
          goto LABEL_294;
        case 0x40u:
          if (!a6)
            goto LABEL_639;
          v793 = 0u;
          v794 = 0u;
          v791 = 0u;
          v792 = 0u;
          LODWORD(v791) = 1;
          v458 = v44[2];
          DWORD1(v791) = *((unsigned __int8 *)v458 + 1);
          v459 = *(_QWORD *)(a4 + 88);
          *((_QWORD *)&v791 + 1) = *(_QWORD *)(a4 + 16);
          *(_QWORD *)&v792 = v459;
          *((int32x2_t *)&v792 + 1) = vmovn_s64(vsubq_s64(*(int64x2_t *)(a4 + 96), vdupq_n_s64(v459)));
          LODWORD(v793) = *((_DWORD *)v44 + 2) - v459;
          DWORD2(v794) = __rev16(*((unsigned __int16 *)v458 + 1));
          HIDWORD(v794) = __rev16(*((unsigned __int16 *)v458 + 2));
          v460 = *(_DWORD *)(a4 + 124);
          DWORD1(v793) = *((_DWORD *)v44 + 6) / 2;
          DWORD2(v793) = v460;
          *(_QWORD *)&v794 = *(_QWORD *)(a4 + 144);
          v461 = a6(&v791);
          if ((int)v461 >= 1)
          {
            v795 = (uint64_t *)*v795;
            pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v774);
            v12 = 0;
LABEL_1111:
            v581 = v795;
            if (!v795)
              return v12;
LABEL_1112:
            *((_DWORD *)v581 + 102) = v12;
            goto LABEL_909;
          }
          v12 = v461;
          if ((v461 & 0x80000000) != 0)
          {
            v795 = (uint64_t *)*v795;
            pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v774);
            goto LABEL_1111;
          }
          v44 = (uint64_t **)v795;
          v209 = (unsigned __int8 *)v795[2];
LABEL_639:
          v44[2] = (uint64_t *)(v209 + 6);
          continue;
        case 0x41u:
          do
          {
            v209 += __rev16(*(unsigned __int16 *)(v209 + 1));
            v44[2] = (uint64_t *)v209;
          }
          while (*v209 == 65);
          continue;
        case 0x42u:
        case 0x43u:
        case 0x44u:
          v226 = v8;
          v227 = &v209[-__rev16(*(unsigned __int16 *)(v209 + 1))];
          v44[12] = (uint64_t *)v227;
          v228 = (uint64_t **)v44[5];
          v229 = v228[1];
          v44[13] = v229;
          v44[5] = *v228;
          v230 = *v227;
          if (v230 == 75)
            goto LABEL_738;
          if (v230 - 69 < 4 || v230 == 74)
          {
            *(_QWORD *)(a4 + 112) = v44[1];
            *(_DWORD *)(a4 + 120) = *((_DWORD *)v44 + 6);
            v795 = *v44;
            pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v774);
            v573 = v795;
            v12 = 1;
            v11 = v785;
            if (!v795)
              return v12;
            *((_DWORD *)v795 + 102) = 1;
            goto LABEL_890;
          }
          v231 = v230 - 80;
          *((_DWORD *)v44 + 60) = v230 - 80;
          if (v230 >= 0xB5)
          {
            v231 = __rev16(*((unsigned __int16 *)v227 + 2));
            *((_DWORD *)v44 + 60) = v231;
          }
          v232 = 2 * v231;
          *((_DWORD *)v44 + 61) = 2 * v231;
          if (v231 < 1)
            goto LABEL_738;
          *(_DWORD *)(a4 + 124) = v231;
          if (v232 >= *(_DWORD *)(a4 + 28))
          {
            *(_DWORD *)(a4 + 48) = 1;
          }
          else
          {
            v233 = *(_QWORD *)(a4 + 16);
            *(_DWORD *)(v233 + 4 * v232) = *(_DWORD *)(v233 + 4 * (*(_DWORD *)(a4 + 24) - v231));
            *(_DWORD *)(v233 + 4 * *((int *)v44 + 61) + 4) = *((_DWORD *)v44 + 2) - *(_DWORD *)(a4 + 88);
            v234 = *((_DWORD *)v44 + 61);
            if (*((_DWORD *)v44 + 6) <= v234)
              *((_DWORD *)v44 + 6) = v234 + 2;
          }
          v510 = *(_QWORD *)(a4 + 136);
          if (v510 && *(_DWORD *)(v510 + 8) == *((_DWORD *)v44 + 60))
          {
            *(_QWORD *)(a4 + 136) = *(_QWORD *)v510;
            *(_QWORD *)(a4 + 104) = *(_QWORD *)(v510 + 24);
            memcpy(*(void **)(a4 + 16), *(const void **)(v510 + 32), 4 * *(unsigned int *)(v510 + 40));
            v511 = v795;
            v795[2] = *(_QWORD *)(v510 + 16);
            v511[4] = v511[22];
            v8 = v226;
          }
          else
          {
LABEL_738:
            v44[4] = v44[22];
            v512 = *v209;
            if (v512 != 66 && v44[1] != v229)
            {
              v8 = v226;
              v11 = v785;
              if (v512 != 68)
              {
                *(_QWORD *)&v791 = 0;
                v652 = pcre_getMem(a1, 18, &v791, a4, a5, (uint64_t)a6, a7, a8);
                v23 = (uint64_t *)v791;
                v24 = v795;
                if ((_QWORD)v791 && (v652 & 0x80000000) == 0)
                  goto LABEL_46;
                goto LABEL_1176;
              }
              *(_QWORD *)&v791 = 0;
              v596 = pcre_getMem(a1, 16, &v791, a4, a5, (uint64_t)a6, a7, a8);
              v23 = (uint64_t *)v791;
              v184 = v795;
              if ((_QWORD)v791 && (v596 & 0x80000000) == 0)
              {
LABEL_260:
                v26 = v184[1];
                v23[1] = v26;
                v23[2] = v184[2] + 3;
                *((_DWORD *)v23 + 6) = *((_DWORD *)v184 + 6);
                v182 = v184[4];
                v23[4] = v182;
                v181 = v184[5];
                v23[5] = v181;
                *((_DWORD *)v23 + 12) = 0;
                *v23 = (uint64_t)v184;
                v795 = v23;
                goto LABEL_1367;
              }
LABEL_1005:
              v597 = (uint64_t *)*v184;
LABEL_1372:
              v795 = v597;
              pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v774);
              v180 = v795;
              if (!v795)
                return 4294967290;
LABEL_1373:
              v12 = 4294967290;
              goto LABEL_1374;
            }
            v44[2] = (uint64_t *)(v209 + 3);
            v8 = v226;
          }
          continue;
        case 0x45u:
        case 0x47u:
          v11 = v785;
          goto LABEL_280;
        case 0x46u:
        case 0x48u:
          v11 = v785;
          goto LABEL_286;
        case 0x49u:
          v462 = v209[1];
          v463 = v209[2];
          if (*(_DWORD *)(a4 + 60))
          {
            v464 = v463 | ((_DWORD)v462 << 8);
            v11 = v785;
            if (v464)
            {
              v465 = 0;
              v466 = *(_QWORD *)(a4 + 88);
              v467 = v44[1];
              do
              {
                v468 = (uint64_t *)((char *)v467 - 1);
                v44[1] = (uint64_t *)((char *)v467 - 1);
                if ((unint64_t)v467 - 1 < v466)
                  goto LABEL_271;
                if ((*(_BYTE *)v468 & 0xC0) == 0x80)
                {
                  v469 = (char *)v467 - 2;
                  do
                  {
                    v44[1] = (uint64_t *)v469;
                    v470 = *v469--;
                  }
                  while ((v470 & 0xC0) == 0x80);
                  v468 = (uint64_t *)(v469 + 1);
                }
                ++v465;
                v467 = v468;
              }
              while (v465 != v464);
            }
          }
          else
          {
            v520 = (unint64_t)v44[1] - (v463 | (v462 << 8));
            v44[1] = (uint64_t *)v520;
            v11 = v785;
            if (v520 < *(_QWORD *)(a4 + 88))
              goto LABEL_271;
          }
LABEL_753:
          v44[2] = (uint64_t *)(v209 + 3);
          continue;
        case 0x4Au:
          v616 = v44[1];
          v44[12] = (uint64_t *)v209;
          v44[13] = v616;
          v11 = v785;
          goto LABEL_298;
        case 0x4Bu:
          if (v209[3] == 76)
          {
            v617 = (v209[4] << 9) | (2 * v209[5]);
            *((_DWORD *)v44 + 61) = v617;
            v11 = v785;
            if (v617 == 131070)
            {
              v618 = *(_QWORD *)(a4 + 136) != 0;
            }
            else
            {
              v618 = 0;
              if (v617 < *((_DWORD *)v44 + 6))
                v618 = *(_DWORD *)(*(_QWORD *)(a4 + 16) + 4 * v617) >= 0;
            }
            *((_DWORD *)v44 + 41) = v618;
            *(_QWORD *)&v791 = 0;
            v677 = pcre_getMem(a1, 3, &v791, a4, a5, (uint64_t)a6, a7, a8);
            v23 = (uint64_t *)v791;
            v24 = v795;
            if ((_QWORD)v791 && (v677 & 0x80000000) == 0)
            {
              v26 = v795[1];
              *(_QWORD *)(v791 + 8) = v26;
              v678 = v24[2];
              v679 = 6;
              if (!*((_DWORD *)v24 + 41))
                v679 = __rev16(*(unsigned __int16 *)(v678 + 1)) + 3;
              v25 = 0;
              v23[2] = v678 + v679;
              *((_DWORD *)v23 + 6) = *((_DWORD *)v24 + 6);
              v182 = v24[4];
              v23[4] = v182;
              v181 = v24[5];
              v23[5] = v181;
              *((_DWORD *)v23 + 12) = 2;
              goto LABEL_278;
            }
          }
          else
          {
            *(_QWORD *)&v791 = 0;
            v661 = pcre_getMem(a1, 4, &v791, a4, a5, (uint64_t)a6, a7, a8);
            v23 = (uint64_t *)v791;
            v24 = v795;
            v11 = v785;
            if ((_QWORD)v791 && (v661 & 0x80000000) == 0)
            {
              v181 = 0;
              v25 = 0;
              v26 = v795[1];
              *(_QWORD *)(v791 + 8) = v26;
              v23[2] = v24[2] + 3;
              *((_DWORD *)v23 + 6) = *((_DWORD *)v24 + 6);
              v182 = v24[4];
              *((_DWORD *)v23 + 12) = 3;
              *v23 = (uint64_t)v24;
              v23[4] = v182;
              v23[5] = 0;
              goto LABEL_296;
            }
          }
          goto LABEL_1176;
        case 0x4Cu:
        case 0x4Fu:
          goto LABEL_753;
        case 0x4Du:
          v44[10] = (uint64_t *)(v209 + 1);
          *(_QWORD *)&v791 = 0;
          v619 = pcre_getMem(a1, 14, &v791, a4, a5, (uint64_t)a6, a7, a8);
          v23 = (uint64_t *)v791;
          v620 = v795;
          if ((_QWORD)v791 && (v619 & 0x80000000) == 0)
          {
            v25 = 0;
            v26 = v795[1];
            *(_QWORD *)(v791 + 8) = v26;
            v23[2] = v620[10];
            *((_DWORD *)v23 + 6) = *((_DWORD *)v620 + 6);
            v182 = v620[4];
            v23[4] = v182;
            v181 = v620[5];
            *((_DWORD *)v23 + 12) = 2;
            v23[5] = v181;
            *v23 = (uint64_t)v620;
            v795 = v23;
            v11 = v785;
            goto LABEL_1368;
          }
          v795 = (uint64_t *)*v795;
          pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v774);
          v180 = v795;
          v11 = v785;
          if (!v795)
            return 4294967290;
          goto LABEL_1373;
        case 0x4Eu:
          v621 = v209 + 1;
          v44[10] = (uint64_t *)(v209 + 1);
          do
          {
            v621 += __rev16(*(unsigned __int16 *)(v621 + 1));
            v44[10] = (uint64_t *)v621;
          }
          while (*v621 == 65);
          *(_QWORD *)&v791 = 0;
          v622 = pcre_getMem(a1, 15, &v791, a4, a5, (uint64_t)a6, a7, a8);
          v23 = (uint64_t *)v791;
          v24 = v795;
          v11 = v785;
          if (!(_QWORD)v791 || v622 < 0)
            goto LABEL_1176;
          v25 = 0;
          v26 = v795[1];
          *(_QWORD *)(v791 + 8) = v26;
          v196 = v24[10];
          goto LABEL_276;
        case 0x50u:
          v11 = v785;
          goto LABEL_10;
        default:
          v795 = *v44;
          pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v774);
          v581 = v795;
          v12 = 4294967291;
          if (!v795)
            return v12;
          goto LABEL_1112;
      }
      break;
    }
  }
}

uint64_t nuance_pcre_ObjOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v16 = 0;
  if (!a3)
    return 2320506887;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  inited = InitRsrcFunction(a1, a2, &v16);
  if ((inited & 0x80000000) == 0)
  {
    log_OutText(*(_QWORD *)(v16 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"PCRE ObjOpen: Begin", v4, v5, v6, v14);
    v8 = (_QWORD *)heap_Calloc(*(_QWORD **)(v16 + 8), 1, 32);
    if (v8)
    {
      *v8 = v16;
      *(_QWORD *)a3 = v8;
      *(_DWORD *)(a3 + 8) = 56663;
    }
    else
    {
      log_OutPublic(*(_QWORD *)(v16 + 32), (uint64_t)"PCRE", 1000, 0, v9, v10, v11, v12, v15);
      inited = 2320506890;
    }
    log_OutText(*(_QWORD *)(v16 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"PCRE ObjOpen: End (%x)", v10, v11, v12, inited);
  }
  return inited;
}

uint64_t nuance_pcre_Init(_QWORD *a1, int a2, unsigned int a3, __int16 a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v26;
  unsigned int v27;

  v11 = safeh_HandleCheck((uint64_t)a1, a2, 56663, 32);
  if ((v11 & 0x80000000) == 0)
  {
    v12 = *a1;
    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"PCRE Init: Begin", v8, v9, v10, v26);
    *((_WORD *)a1 + 10) = 416;
    *((_WORD *)a1 + 8) = 0;
    *((_WORD *)a1 + 11) = a3;
    *((_DWORD *)a1 + 6) = 0;
    *((_WORD *)a1 + 14) = 0;
    *((_WORD *)a1 + 9) = a4;
    v13 = heap_Calloc(*(_QWORD **)(v12 + 8), 1, 8 * a3 + 8);
    a1[1] = v13;
    if (!v13)
      goto LABEL_7;
    v18 = heap_Calloc(*(_QWORD **)(v12 + 8), 1, 32);
    v19 = *((unsigned __int16 *)a1 + 8);
    *(_QWORD *)(a1[1] + 8 * v19) = v18;
    v20 = *(_QWORD *)(a1[1] + 8 * v19);
    if (!v20)
      goto LABEL_7;
    v21 = *((unsigned __int16 *)a1 + 9) * *((unsigned __int16 *)a1 + 10) + 1;
    *(_QWORD *)(v20 + 8) = v21;
    *(_QWORD *)v20 = 0;
    v22 = heap_Calloc(*(_QWORD **)(v12 + 8), 1, v21);
    *(_QWORD *)v20 = v22;
    if (!v22)
      goto LABEL_7;
    *(_BYTE *)(v20 + 24) = 0;
    *(_QWORD *)(v20 + 16) = 0;
    v23 = heap_Calloc(*(_QWORD **)(v12 + 8), 1, *((unsigned __int16 *)a1 + 9) + 1);
    *(_QWORD *)(v20 + 16) = v23;
    if (v23)
    {
      v24 = *((_WORD *)a1 + 8) + 1;
      *((_WORD *)a1 + 8) = v24;
      *((_WORD *)a1 + 13) = v24;
    }
    else
    {
LABEL_7:
      log_OutPublic(*(_QWORD *)(v12 + 32), (uint64_t)"PCRE", 1000, 0, v14, v15, v16, v17, v27);
      nuance_pcre_DeInit(a1, a2);
      v11 = 2320506890;
    }
    log_OutText(*(_QWORD *)(v12 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"PCRE ObjOpen: End (%x)", v15, v16, v17, v11);
  }
  return v11;
}

uint64_t nuance_pcre_DeInit(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v16;

  v6 = safeh_HandleCheck((uint64_t)a1, a2, 56663, 32);
  if ((v6 & 0x80000000) == 0)
  {
    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"PCRE DeInit : Begin", v3, v4, v5, v16);
    pcre_clearMem(a1);
    v10 = (uint64_t **)a1[1];
    if (v10)
    {
      if (*v10)
      {
        heap_Free(*(_QWORD **)(*a1 + 8), **v10);
        v12 = *a1;
        v11 = a1[1];
        **(_QWORD **)v11 = 0;
        heap_Free(*(_QWORD **)(v12 + 8), *(_QWORD *)(*(_QWORD *)v11 + 16));
        v14 = *a1;
        v13 = (uint64_t *)a1[1];
        *(_QWORD *)(*v13 + 16) = 0;
        heap_Free(*(_QWORD **)(v14 + 8), *v13);
        *(_QWORD *)a1[1] = 0;
        v10 = (uint64_t **)a1[1];
      }
      heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v10);
      a1[1] = 0;
    }
    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"PCRE DeInit : End (%x)", v7, v8, v9, v6);
    return 0;
  }
  return v6;
}

uint64_t nuance_pcre_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = safeh_HandleCheck(a1, a2, 56663, 32);
  if ((v6 & 0x80000000) == 0)
  {
    v7 = *(_QWORD *)a1;
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"PCRE ObjClose : Begin", v3, v4, v5, v12);
    heap_Free(*(_QWORD **)(v7 + 8), a1);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"PCRE ObjClose : End (%x)", v8, v9, v10, v6);
    return 0;
  }
  return v6;
}

uint64_t nuance_pcre_ErrorToLhError(unsigned int a1)
{
  if (a1 < 0xFFFFFFF0)
    return 2320514663;
  else
    return *((unsigned int *)&unk_1DECB8E30 + (int)(a1 + 16));
}

uint64_t ucp_findchar(int a1, int *a2, unsigned int *a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned __int16 v12;
  unsigned int v13;
  unsigned int v14;

  if (a1 == 12063)
  {
    *a2 = 26;
    return 5;
  }
  else
  {
    LOWORD(v4) = -26112;
    v5 = 12063;
    v6 = (unsigned __int16 *)&ucp_table;
    do
    {
      v7 = v6;
      if (v5 <= a1)
      {
        v9 = v6[2];
        if (v9 < 0x1000)
          return 0xFFFFFFFFLL;
        v8 = 1 << ((v9 >> 12) - 1);
      }
      else
      {
        if ((v4 & 0x8000) == 0)
          return 0xFFFFFFFFLL;
        v8 = 1;
      }
      v6 += 3 * v8;
      v4 = *v6;
      v5 = v6[1] | (*v6 << 16);
    }
    while (v5 != a1);
    v10 = (v4 >> 8) & 0x3F;
    *a2 = v10;
    v3 = 0;
    switch(v10)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
        return v3;
      case 5:
      case 9:
        v12 = v7[3 * v8 + 2];
        if ((v12 & 0x100) != 0)
          v13 = v12 & 0xFFF | 0xFFFFF000;
        else
          v13 = v12 & 0xFFF;
        if (v13)
          v14 = v13 + a1;
        else
          v14 = 0;
        *a3 = v14;
        goto LABEL_26;
      case 6:
      case 7:
      case 8:
        *a3 = 0;
LABEL_26:
        v3 = 1;
        break;
      case 10:
      case 11:
      case 12:
        v3 = 2;
        break;
      case 13:
      case 14:
      case 15:
        v3 = 3;
        break;
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
        v3 = 4;
        break;
      case 23:
      case 24:
      case 25:
      case 26:
        return 5;
      case 27:
      case 28:
      case 29:
        v3 = 6;
        break;
      default:
        return 0xFFFFFFFFLL;
    }
  }
  return v3;
}

uint64_t find_fixedlength(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  int v8;
  uint64_t result;
  char v10;
  int v11;
  unsigned int v12;
  unsigned int v13;

  v3 = 0;
  v4 = (unsigned __int8 *)(a1 + 3);
  v5 = 0xFFFFFFFFLL;
  while (2)
  {
    v6 = v4;
    v7 = *v4;
    if (v7 >= 0x50)
      v8 = 80;
    else
      v8 = v7;
    result = 4294967294;
    switch(v8)
    {
      case 0:
      case 65:
      case 66:
      case 67:
      case 68:
        if ((v5 & 0x80000000) != 0)
        {
          v5 = v3;
        }
        else if ((_DWORD)v5 != (_DWORD)v3)
        {
          return 0xFFFFFFFFLL;
        }
        if (v7 == 65)
        {
          v3 = 0;
          v4 = v6 + 3;
          continue;
        }
        return v5;
      case 1:
      case 2:
      case 3:
      case 4:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 64:
      case 73:
      case 76:
      case 79:
        goto LABEL_10;
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
        goto LABEL_15;
      case 12:
        return result;
      case 13:
      case 14:
        ++v6;
LABEL_15:
        v3 = (v3 + 1);
        v4 = v6 + 1;
        continue;
      case 21:
      case 22:
        v3 = (v3 + 1);
        v4 = v6 + 2;
        if ((a2 & 0x800) != 0)
        {
          v4 = v6 + 1;
          do
            v10 = *++v4;
          while ((v10 & 0xC0) == 0x80);
        }
        continue;
      case 32:
        v3 = v3 + (bswap32(*(unsigned __int16 *)(v6 + 1)) >> 16);
        v4 = v6 + 4;
        if ((a2 & 0x800) != 0)
        {
          v4 = v6 + 3;
          do
            v11 = (char)*++v4;
          while (v11 < 0);
        }
        continue;
      case 50:
        v3 = v3 + (bswap32(*(unsigned __int16 *)(v6 + 1)) >> 16);
        v4 = v6 + 4;
        continue;
      case 59:
      case 60:
        goto LABEL_29;
      case 61:
        v6 = &v6[__rev16(*(unsigned __int16 *)(v6 + 1)) - 33];
LABEL_29:
        v4 = v6 + 33;
        v12 = v6[33];
        if (v12 > 0x3A)
          goto LABEL_34;
        if (((1 << v12) & 0x600000000000000) != 0)
        {
          v13 = __rev16(*((unsigned __int16 *)v6 + 17));
          if (v13 != bswap32(*((unsigned __int16 *)v6 + 18)) >> 16)
            return 0xFFFFFFFFLL;
          v3 = v13 + v3;
          v4 = v6 + 38;
        }
        else
        {
          if (((1 << v12) & 0x198000000000000) != 0)
            return 0xFFFFFFFFLL;
LABEL_34:
          v3 = (v3 + 1);
        }
        continue;
      case 69:
      case 70:
      case 71:
      case 72:
        do
        {
          v6 += __rev16(*(unsigned __int16 *)(v6 + 1));
          v7 = *v6;
        }
        while (v7 == 65);
LABEL_10:
        v4 = &v6[OP_lengths[v7]];
        continue;
      case 74:
      case 75:
      case 80:
        result = find_fixedlength(v6, a2);
        if ((result & 0x80000000) != 0)
          return result;
        do
          v6 += __rev16(*(unsigned __int16 *)(v6 + 1));
        while (*v6 == 65);
        v3 = (result + v3);
        v4 = v6 + 3;
        continue;
      default:
        return 0xFFFFFFFFLL;
    }
  }
}

unsigned __int8 *adjust_recurse(unsigned __int8 *result, int a2, int a3, uint64_t a4)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v4 = result;
  while (1)
  {
    while (1)
    {
      v5 = v4;
      v6 = *v4;
      if ((_DWORD)v6 != 63)
        break;
      v9 = __rev16(*(unsigned __int16 *)(v4 + 1));
      if (*(_QWORD *)(a4 + 32) + v9 >= (unint64_t)result)
        *(_WORD *)(v5 + 1) = bswap32(v9 + a2) >> 16;
LABEL_12:
      v4 = v5 + 3;
    }
    if (!*v4)
      return result;
    if (v6 >= 0x51)
      goto LABEL_12;
    v7 = OP_lengths[v6];
    v4 += v7;
    if (a3)
    {
      if ((v6 - 24) < 9 || (v6 - 21) < 2)
      {
        v4 = &v5[v7 - 1];
        do
          v8 = *++v4;
        while ((v8 & 0xC0) == 0x80);
      }
      else if ((_DWORD)v6 == 61)
      {
        v4 += __rev16(*(unsigned __int16 *)(v4 + 1)) + 1;
      }
    }
  }
}

uint64_t could_be_empty_branch(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int8 *significant_code_0;
  unsigned int v7;
  BOOL v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  unsigned int v15;

  v5 = 1;
  significant_code_0 = first_significant_code_0((unsigned __int8 *)(a1 + 3), 0, 0, 1);
  if ((unint64_t)significant_code_0 < a2)
  {
    while (1)
    {
      v7 = *significant_code_0;
      if (v7 < 0x50)
      {
        v5 = 0;
        v12 = 33;
        switch(*significant_code_0)
        {
          case 5u:
          case 6u:
          case 7u:
          case 8u:
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x15u:
          case 0x16u:
          case 0x17u:
          case 0x1Au:
          case 0x1Bu:
          case 0x20u:
          case 0x23u:
          case 0x24u:
          case 0x29u:
          case 0x2Cu:
          case 0x2Du:
          case 0x32u:
            return v5;
          case 0x18u:
          case 0x19u:
          case 0x1Cu:
          case 0x1Du:
          case 0x1Eu:
          case 0x1Fu:
            if ((_DWORD)a3)
            {
              --significant_code_0;
              do
              {
                v13 = significant_code_0[3] & 0xC0;
                ++significant_code_0;
              }
              while (v13 == 128);
            }
            goto LABEL_17;
          case 0x3Bu:
          case 0x3Cu:
            goto LABEL_20;
          case 0x3Du:
            v12 = __rev16(*(unsigned __int16 *)(significant_code_0 + 1));
LABEL_20:
            v5 = 0;
            v14 = &significant_code_0[v12];
            v15 = *v14;
            if (v15 > 0x3A)
              return v5;
            if (((1 << v15) & 0x198000000000000) != 0)
              goto LABEL_17;
            if (((1 << v15) & 0x600000000000000) == 0)
              return v5;
            if (__rev16(*(unsigned __int16 *)(v14 + 1)))
              return 0;
            goto LABEL_17;
          case 0x41u:
          case 0x42u:
          case 0x43u:
          case 0x44u:
            return 1;
          default:
            goto LABEL_17;
        }
      }
      if (!__rev16(*(unsigned __int16 *)(significant_code_0 + 1)))
        return 1;
      v8 = 1;
      do
      {
        while (1)
        {
          v9 = significant_code_0;
          if (v8)
            break;
          v8 = 0;
          v11 = __rev16(*(unsigned __int16 *)(significant_code_0 + 1));
          significant_code_0 += v11;
          if (v9[v11] != 65)
            goto LABEL_16;
        }
        v10 = could_be_empty_branch(significant_code_0, a2, a3);
        v8 = v10 == 0;
        v11 = __rev16(*(unsigned __int16 *)(v9 + 1));
        significant_code_0 = &v9[v11];
      }
      while (v9[v11] == 65);
      if (!v10)
        return 0;
LABEL_16:
      significant_code_0 = &v9[v11 + 3];
      v7 = *significant_code_0;
LABEL_17:
      v5 = 1;
      significant_code_0 = first_significant_code_0(&significant_code_0[OP_lengths[v7]], 0, 0, 1);
      if ((unint64_t)significant_code_0 >= a2)
        return v5;
    }
  }
  return v5;
}

unsigned __int8 *first_significant_code_0(unsigned __int8 *result, _DWORD *a2, int a3, int a4)
{
  uint64_t v4;
  char v5;
  int v6;

  while (1)
  {
    v4 = *result;
    v5 = v4 - 18;
    if ((v4 - 18) > 0x3D)
      break;
    if (((1 << v5) & 0x70000000000000) != 0)
    {
      if (!a4)
        return result;
      do
      {
        result += __rev16(*(unsigned __int16 *)(result + 1));
        v4 = *result;
      }
      while (v4 == 65);
LABEL_16:
      result += OP_lengths[v4];
    }
    else
    {
      if (((1 << v5) & 0x2400400000000000) != 0)
        goto LABEL_16;
      if ((_DWORD)v4 != 18)
        break;
      if (a3 >= 1)
      {
        v6 = result[1];
        if (((*a2 ^ v6) & a3) != 0)
          *a2 = v6;
      }
      result += 2;
    }
  }
  if ((v4 - 3) < 2 && a4 != 0)
    goto LABEL_16;
  return result;
}

uint64_t pcre_getMem(uint64_t a1, char a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 v33;
  uint64_t v35;
  const char *v36;

  *a3 = 0;
  v9 = *(unsigned __int16 *)(a1 + 16);
  if (!*(_WORD *)(a1 + 16))
  {
    v18 = 2320506880;
    v19 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v20 = 1001;
    v21 = 0;
    goto LABEL_16;
  }
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(unsigned __int16 *)(a1 + 24);
  v14 = *(_QWORD *)(v12 + 8 * v13);
  if (*(_DWORD *)(v14 + 12) + *(unsigned __int16 *)(a1 + 20) >= *(_DWORD *)(v14 + 8))
  {
    if (v9 < *(unsigned __int16 *)(a1 + 22))
    {
      if ((int)v13 + 1 < v9)
        goto LABEL_13;
      v22 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 32);
      v27 = *(unsigned __int16 *)(a1 + 16);
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v27) = v22;
      v28 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v27);
      if (v28)
      {
        v29 = *(unsigned __int16 *)(a1 + 18) * *(unsigned __int16 *)(a1 + 20) + 1;
        *(_QWORD *)(v28 + 8) = v29;
        *(_QWORD *)v28 = 0;
        *(_QWORD *)(v28 + 16) = 0;
        v30 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, v29);
        *(_QWORD *)v28 = v30;
        if (v30)
        {
          *(_BYTE *)(v28 + 24) = 0;
          v32 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, *(unsigned __int16 *)(a1 + 18) + 1);
          *(_QWORD *)(v28 + 16) = v32;
          if (v32)
          {
            ++*(_WORD *)(a1 + 16);
            LOWORD(v13) = *(_WORD *)(a1 + 24);
            v12 = *(_QWORD *)(a1 + 8);
LABEL_13:
            v33 = v13 + 1;
            *(_WORD *)(a1 + 24) = v33;
            v14 = *(_QWORD *)(v12 + 8 * v33);
            if (*(unsigned __int16 *)(a1 + 26) < v33)
              *(_WORD *)(a1 + 26) = v33;
            goto LABEL_3;
          }
        }
        log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PCRE", 1000, 0, v31, a6, a7, a8, v36);
        if (*(_QWORD *)v28)
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), *(_QWORD *)v28);
          *(_QWORD *)v28 = 0;
        }
        v35 = *(_QWORD *)(v28 + 16);
        if (v35)
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v35);
          *(_QWORD *)(v28 + 16) = 0;
        }
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v28);
      }
      else
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PCRE", 1000, 0, v23, v24, v25, v26, v36);
      }
      return 2320506890;
    }
    v18 = 2320506880;
    v19 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v36 = "maxBlocks";
    v21 = "%s%hu%s%hu";
    v20 = 1002;
LABEL_16:
    log_OutPublic(v19, (uint64_t)"PCRE", v20, v21, a5, a6, a7, a8, v36);
    return v18;
  }
LABEL_3:
  v15 = *(unsigned int *)(v14 + 12);
  *(_DWORD *)(v14 + 12) = v15 + *(unsigned __int16 *)(a1 + 20);
  *(_BYTE *)(*(_QWORD *)(v14 + 16) + *(unsigned __int8 *)(v14 + 24)) = a2;
  v16 = *(_BYTE *)(v14 + 24) + 1;
  *(_BYTE *)(v14 + 24) = v16;
  v17 = *(unsigned __int16 *)(a1 + 28);
  if (v17 < v16)
  {
    v17 = v16;
    *(_WORD *)(a1 + 28) = v16;
  }
  *a3 = *(_QWORD *)v14 + v15;
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"Memory now in use: %d of %d", a6, a7, a8, *(_DWORD *)(v14 + 12) + *(unsigned __int16 *)(a1 + 20) * *(unsigned __int16 *)(a1 + 24) * v17);
  return 0;
}

uint64_t pcre_freeMem(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_WORD *)(result + 16))
  {
    v9 = *(_QWORD *)(result + 8);
    v10 = *(unsigned __int16 *)(result + 24);
    v11 = *(_QWORD *)(v9 + 8 * v10);
    v12 = *(_DWORD *)(v11 + 12);
    if (v12)
    {
LABEL_5:
      *(_DWORD *)(v11 + 12) = v12 - *(unsigned __int16 *)(result + 20);
      v13 = *(_BYTE *)(v11 + 24) - 1;
      *(_BYTE *)(v11 + 24) = v13;
      *a2 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 16) + v13);
      return result;
    }
    if (*(_WORD *)(result + 24))
    {
      *(_WORD *)(result + 24) = v10 - 1;
      v11 = *(_QWORD *)(v9 + 8 * (unsigned __int16)(v10 - 1));
      v12 = *(_DWORD *)(v11 + 12);
      goto LABEL_5;
    }
    v14 = *(_QWORD *)(*(_QWORD *)result + 32);
    v15 = 1004;
  }
  else
  {
    v14 = *(_QWORD *)(*(_QWORD *)result + 32);
    v15 = 1003;
  }
  return log_OutPublic(v14, (uint64_t)"PCRE", v15, 0, a5, a6, a7, a8, a9);
}

uint64_t match_ref_0(int a1, unsigned __int8 *a2, int a3, _QWORD *a4, char a5)
{
  unsigned __int8 *v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;

  if (a4[12] - (_QWORD)a2 < a3)
    return 0;
  v6 = (unsigned __int8 *)(a4[11] + *(int *)(a4[2] + 4 * a1));
  if ((a5 & 1) != 0)
  {
    while (1)
    {
      v7 = __OFSUB__(a3--, 1);
      if (a3 < 0 != v7)
        break;
      v11 = a4[4];
      v12 = *v6++;
      v13 = *(unsigned __int8 *)(v11 + v12);
      v14 = *a2++;
      if (v13 != *(unsigned __int8 *)(v11 + v14))
        return 0;
    }
  }
  else
  {
    while (1)
    {
      v7 = __OFSUB__(a3--, 1);
      if (a3 < 0 != v7)
        break;
      v9 = *v6++;
      v8 = v9;
      v10 = *a2++;
      if (v8 != v10)
        return 0;
    }
  }
  return 1;
}

uint64_t match_xclass(int a1, _BYTE *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  char v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  char v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  char v26;
  uint64_t v28;

  v3 = *a2 & 1;
  if (a1 <= 255 && (*a2 & 2) != 0 && ((a2[a1 / 8 + 1] >> (a1 & 7)) & 1) != 0)
    return !(*a2 & 1);
  if ((*a2 & 2) != 0)
    v4 = a2 + 33;
  else
    v4 = a2 + 1;
  do
  {
    while (1)
    {
      v5 = *v4;
      if (v5 == 1)
        break;
      if (v5 == 2)
      {
        v16 = (char *)(v4 + 2);
        v17 = v4[1];
        if ((~v17 & 0xC0) == 0)
        {
          v18 = utf8_table4[v17 & 0x3F];
          v17 = (utf8_table3[utf8_table4[v17 & 0x3F]] & v17) << (6 * v18);
          v19 = 6 * v18 - 6;
          v20 = v18 + 1;
          do
          {
            v21 = *v16++;
            v17 |= (v21 & 0x3F) << v19;
            v19 -= 6;
            --v20;
          }
          while (v20 > 1);
        }
        v22 = *v16;
        v4 = (unsigned __int8 *)(v16 + 1);
        if ((~v22 & 0xC0) == 0)
        {
          v23 = utf8_table4[v22 & 0x3F];
          v22 = (utf8_table3[utf8_table4[v22 & 0x3F]] & v22) << (6 * v23);
          v24 = 6 * v23 - 6;
          v25 = v23 + 1;
          do
          {
            v26 = *v4++;
            v22 |= (v26 & 0x3F) << v24;
            v24 -= 6;
            --v25;
          }
          while (v25 > 1);
        }
        if (v17 <= a1 && v22 >= a1)
          return v3 ^ 1;
      }
      else
      {
        if (!*v4)
          return v3;
        v28 = 0;
        v6 = v4 + 2;
        v7 = (char)v4[1];
        v8 = v4[1];
        v9 = ucp_findchar(a1, (int *)&v28 + 1, (unsigned int *)&v28);
        if (v7 < 0)
        {
          v4 = v6;
          if ((v5 == 3) != (v8 - 128 != v9))
            return v3 ^ 1;
        }
        else
        {
          v4 = v6;
          if ((v5 == 3) != (HIDWORD(v28) != v8))
            return v3 ^ 1;
        }
      }
    }
    v10 = v4 + 2;
    v11 = v4[1];
    if ((~v11 & 0xC0) == 0)
    {
      v12 = utf8_table4[v11 & 0x3F];
      v11 = (utf8_table3[utf8_table4[v11 & 0x3F]] & v11) << (6 * v12);
      v13 = 6 * v12 - 6;
      v14 = v12 + 1;
      do
      {
        v15 = *v10++;
        v11 |= (v15 & 0x3F) << v13;
        v13 -= 6;
        --v14;
      }
      while (v14 > 1);
    }
    v4 = v10;
  }
  while (v11 != a1);
  return v3 ^ 1;
}

uint64_t clcml_ObjOpen(_WORD *a1, int a2, char *a3, uint64_t *a4)
{
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t Object;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t Str;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t NullHandle;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  unint64_t v38;
  __int16 v39;
  _QWORD *v40;
  unsigned int v42;
  unsigned int v43;
  __int128 v44;
  uint64_t *(*v45)(uint64_t *, _QWORD *);
  unsigned int v46;
  char *v47;
  char *v48;
  char *v49;
  char *__src;
  __int128 *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  int v56[2];
  char v57[1024];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v55 = 0;
  *(_QWORD *)v56 = 0;
  v53 = 0;
  v54 = 0;
  v52 = 0;
  __src = 0;
  v51 = 0;
  v48 = 0;
  v49 = 0;
  v47 = 0;
  v46 = 0;
  inited = InitRsrcFunction(a1, a2, v56);
  if ((inited & 0x80000000) != 0)
    return inited;
  v12 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v56 + 8), 1, 544);
  *a4 = v12;
  v13 = *(uint64_t ***)(*(_QWORD *)v56 + 32);
  if (!v12)
  {
    Str = 2358255626;
    log_OutPublic((uint64_t)v13, (uint64_t)"FE_CLCML", 60000, 0, v8, v9, v10, v11, v42);
    return Str;
  }
  log_OutTraceTuningData(v13, 600, (uint64_t)"%s%s", v7, v8, v9, v10, v11, "BEG");
  Object = rsrc_Open(*(_QWORD **)(*(_QWORD *)v56 + 8), *(_QWORD *)(*(_QWORD *)v56 + 16), 0, 0, *a4 + 8);
  if ((Object & 0x80000000) != 0)
    goto LABEL_53;
  Object = InitRsrcFunction(*(_WORD **)(*a4 + 8), *(_QWORD *)(*a4 + 16), (_QWORD *)*a4);
  if ((Object & 0x80000000) != 0)
    goto LABEL_53;
  v20 = *(_QWORD *)v56;
  *(_QWORD *)(*(_QWORD *)*a4 + 64) = *(_QWORD *)(*(_QWORD *)v56 + 64);
  *(_OWORD *)(*(_QWORD *)*a4 + 384) = *(_OWORD *)(v20 + 384);
  *(_QWORD *)(*(_QWORD *)*a4 + 24) = *(_QWORD *)(v20 + 24);
  *(_QWORD *)(*(_QWORD *)*a4 + 32) = *(_QWORD *)(v20 + 32);
  Object = paramc_ObjOpen(0, *(_QWORD *)(*a4 + 8), *(_QWORD *)(*a4 + 16), *(_QWORD *)*a4 + 40);
  if ((Object & 0x80000000) != 0)
    goto LABEL_53;
  Object = objc_ObjOpen(0, *(_WORD **)(*a4 + 8), *(_QWORD *)(*a4 + 16), (uint64_t *)(*(_QWORD *)*a4 + 48));
  if ((Object & 0x80000000) != 0)
    goto LABEL_53;
  *(_DWORD *)(*a4 + 540) = 0;
  if ((objc_GetObject(*(_QWORD *)(*(_QWORD *)v56 + 48), (uint64_t)"LANGCODECONVERTER", &v51) & 0x80000000) == 0)
  {
    Object = objc_RegisterObject(*(_QWORD *)(*(_QWORD *)*a4 + 48), (uint64_t)"LANGCODECONVERTER", v51);
    if ((Object & 0x80000000) != 0)
    {
LABEL_53:
      Str = Object;
      goto LABEL_54;
    }
    *(_DWORD *)(*a4 + 540) = 1;
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)v56 + 48), (uint64_t)"LANGCODECONVERTER");
  }
  if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"noclmset", &v49) & 0x80000000) != 0)
    v49 = 0;
  if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"datapackagename", &v48) & 0x80000000) != 0)
    v48 = 0;
  if ((paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"pipelineswitchexecuting", &v46) & 0x80000000) != 0)
    v46 = 0;
  if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"blockautoinsertionfeclm", &v47) & 0x80000000) != 0)
    v47 = 0;
  *(_QWORD *)v56 = *(_QWORD *)*a4;
  paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"pipelineswitchexecuting", v46);
  paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"readmode", 1u);
  paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"infiniteloopdetectlimit", 0x2710u);
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"inputmimetype", "text/plain;charset=utf-8");
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"numberoutputtranscriptions", "1");
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"numberoutputorthsubstitutes", "1");
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"numberpartialorthvariants", "1");
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"clmvariants", "no");
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"norichtranscription", "false");
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"clcpppipelinemode", "internal");
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"fedatapackaging", a3);
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"foreignpron", "yes");
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"fedataprefix", &byte_1DEBD87CE);
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"feextcfgdataprefix", &byte_1DEBD87CE);
  if (v48)
    paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"datapackagename", v48);
  if (v49)
    paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"noclmset", v49);
  if (v47)
    paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"blockautoinsertionfeclm", v47);
  *(_QWORD *)(*a4 + 120) = 0;
  brokeraux_ComposeBrokerString(*(uint64_t *)v56, "pipeline", 0, 1, 0, 0, 0, v57, 0x400uLL);
  Object = brk_DataOpen(*(_QWORD *)(*(_QWORD *)v56 + 24));
  if ((Object & 0x80000000) != 0)
    goto LABEL_53;
  Object = brk_DataMap(*(_QWORD *)(*(_QWORD *)v56 + 24), *(_QWORD *)(*a4 + 120), 0, 0, (uint64_t)&v55);
  if ((Object & 0x80000000) != 0)
    goto LABEL_53;
  Object = hdrpars_ReadHeader(*(_WORD **)(*a4 + 8), *(_QWORD *)(*a4 + 16), 0, v55, &v54, &v53);
  if ((Object & 0x80000000) != 0)
    goto LABEL_53;
  if (v53)
  {
    *(_QWORD *)&v44 = 0;
    if (vector_GetElemAt(v53, 0, &v44))
    {
      v21 = 1;
      do
        ssftmap_ObjClose(*(_QWORD *)v44);
      while (vector_GetElemAt(v53, v21++, &v44));
    }
    vector_ObjClose(v53);
    v53 = 0;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)v56 + 32), (uint64_t)"FE_CLCML", 60001, 0, v23, v24, v25, v26, v43);
    Str = 2358255623;
    goto LABEL_54;
  }
  if (v55)
  {
    brk_DataUnmap(*(_QWORD *)(*(_QWORD *)v56 + 24), *(_QWORD *)(*a4 + 120), (uint64_t)v55);
    v55 = 0;
  }
  v28 = *(_QWORD **)(*(_QWORD *)v56 + 8);
  v29 = (uint64_t *)(*a4 + 32);
  v44 = xmmword_1EA948398;
  v45 = vclc_loc_ElemFreePartsString;
  if (vector_ObjOpen(v28, &v44, 1, v29))
  {
    Object = clcpipeline_LoadObject(*(_WORD **)(*a4 + 8), *(_QWORD *)(*a4 + 16), (uint64_t)"SYNTHSTREAM", (uint64_t)"synthstream", *(_QWORD *)(*a4 + 32), 0);
    if ((Object & 0x80000000) == 0)
    {
      Object = objc_GetObject(*(_QWORD *)(*(_QWORD *)v56 + 48), (uint64_t)"SYNTHSTREAM", &v51);
      if ((Object & 0x80000000) == 0)
      {
        *(_QWORD *)(*a4 + 40) = *((_QWORD *)v51 + 1);
        Object = clcpipeline_LoadObject(*(_WORD **)(*a4 + 8), *(_QWORD *)(*a4 + 16), (uint64_t)"LINGDB", (uint64_t)"lingdb", *(_QWORD *)(*a4 + 32), 0);
        if ((Object & 0x80000000) == 0)
        {
          Object = objc_GetObject(*(_QWORD *)(*(_QWORD *)v56 + 48), (uint64_t)"LINGDB", &v51);
          if ((Object & 0x80000000) == 0)
          {
            *(_QWORD *)(*a4 + 48) = *((_QWORD *)v51 + 1);
            Object = clcpipeline_ObjOpen(*(_WORD **)(*a4 + 8), *(_QWORD *)(*a4 + 16), v54, *(_QWORD *)(*a4 + 32), (uint64_t *)(*a4 + 24), &v52);
            if ((Object & 0x80000000) == 0)
            {
              paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"nativetypeofchar", "utf-8");
              paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"inputmimetype", "text/plain;charset=utf-8");
              if (v54)
                ssftmap_ObjClose(v54);
              v34 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(*a4 + 40) + 32);
              NullHandle = safeh_GetNullHandle();
              Object = v34(NullHandle);
              if ((Object & 0x80000000) == 0)
              {
                v36 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(*a4 + 48) + 32);
                v37 = safeh_GetNullHandle();
                Object = v36(v37);
                if ((Object & 0x80000000) == 0)
                {
                  Object = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(*a4 + 40) + 64))(*(_QWORD *)(*a4 + 56), *(_QWORD *)(*a4 + 64), 201, "text/plain;charset=utf-8",
                             0,
                             1,
                             *a4 + 88);
                  if ((Object & 0x80000000) == 0)
                  {
                    v38 = 0;
                    while (v38 < *(unsigned __int16 *)(*(_QWORD *)(*a4 + 24) + 16))
                    {
                      v39 = v38 + 1;
                      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*a4 + 40) + 56))(*(_QWORD *)(*a4 + 56), *(_QWORD *)(*a4 + 64), (unsigned __int16)(v38 + 1));
                      v40 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*a4 + 24) + 8) + 8 * v38++);
                      if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v40[2] + 96))(v40[3], v40[4], *(_QWORD *)(*a4 + 56), *(_QWORD *)(*a4 + 64)) & 0x80000000) != 0)
                      {
                        *(_WORD *)(*(_QWORD *)(*a4 + 24) + 16) = v39 - 1;
                        break;
                      }
                    }
                    Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"langcode", &__src);
                    if ((Str & 0x80000000) == 0)
                      strncpy((char *)(*a4 + 128), __src, 3uLL);
                    goto LABEL_54;
                  }
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_53;
  }
  Str = 2358255626;
  log_OutPublic(*(_QWORD *)(*(_QWORD *)v56 + 32), (uint64_t)"FE_CLCML", 60000, 0, v30, v31, v32, v33, v43);
LABEL_54:
  log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)v56 + 32), 600, (uint64_t)"%s%s", v15, v16, v17, v18, v19, "END");
  if ((Str & 0x80000000) != 0)
    clcml_ObjClose(*a4);
  return Str;
}

uint64_t vclc_loc_ElemCopyPartsString(const char **a1, uint64_t a2, uint64_t *a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t result;
  const char *v8;

  v5 = *a1;
  if (*a1)
    v6 = strlen(*a1) + 1;
  else
    v6 = 1;
  result = heap_Alloc(a2, v6);
  *a3 = result;
  if (result)
  {
    if (v5)
      v8 = v5;
    else
      v8 = &byte_1DEBD87CE;
    strcpy((char *)result, v8);
    return 1;
  }
  return result;
}

uint64_t *vclc_loc_ElemFreePartsString(uint64_t *result, _QWORD *a2)
{
  if (*result)
    return heap_Free(a2, *result);
  return result;
}

uint64_t clcml_ObjClose(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t v8;
  uint64_t NullHandle;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  int v21;
  uint64_t v23;
  int v24;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  uint64_t v39;
  int v40;
  _QWORD *v42;
  _WORD *v43;
  int v44;
  uint64_t v46;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 && *(_WORD *)(v2 + 16))
  {
    v3 = 0;
    LODWORD(v4) = 0;
    do
    {
      v5 = *(_QWORD **)(*(_QWORD *)(v2 + 8) + 8 * v3);
      v6 = (*(uint64_t (**)(_QWORD, _QWORD))(v5[2] + 112))(v5[3], v5[4]);
      if ((int)v4 > -1 && v6 < 0)
        v4 = v6;
      else
        v4 = v4;
      ++v3;
      v2 = *(_QWORD *)(a1 + 24);
    }
    while (v3 < *(unsigned __int16 *)(v2 + 16));
  }
  else
  {
    v4 = 0;
  }
  v8 = *(_QWORD *)(a1 + 120);
  if (v8)
  {
    brk_DataClose(*(_QWORD *)(*(_QWORD *)a1 + 24), v8);
    *(_QWORD *)(a1 + 120) = 0;
  }
  NullHandle = safeh_GetNullHandle();
  if (!safeh_HandlesEqual(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), NullHandle, v10))
  {
    v18 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
    *(_QWORD *)(a1 + 88) = safeh_GetNullHandle();
    *(_QWORD *)(a1 + 96) = v11;
    if (v18 >= 0 || (int)v4 <= -1)
      v4 = v4;
    else
      v4 = v18;
  }
  v20 = *(_QWORD *)(a1 + 56);
  if (v20)
  {
    v21 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 40))(v20, *(_QWORD *)(a1 + 64));
    if ((int)v4 > -1 && v21 < 0)
      v4 = v21;
    else
      v4 = v4;
  }
  v23 = *(_QWORD *)(a1 + 72);
  if (v23)
  {
    v24 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 48) + 40))(v23, *(_QWORD *)(a1 + 80));
    if ((int)v4 > -1 && v24 < 0)
      v4 = v24;
    else
      v4 = v4;
  }
  v26 = *(_QWORD *)(a1 + 24);
  if (v26)
  {
    v27 = clcpipeline_ObjClose(v26, v11, v12, v13, v14, v15, v16, v17);
    if (v27 >= 0)
      v4 = v4;
    else
      v4 = v27;
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)(a1 + 48))
  {
    v28 = objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"LINGDB");
    if (v28 >= 0)
      v4 = v4;
    else
      v4 = v28;
    *(_QWORD *)(a1 + 48) = 0;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v29 = objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"SYNTHSTREAM");
    if (v29 >= 0)
      v4 = v4;
    else
      v4 = v29;
    *(_QWORD *)(a1 + 40) = 0;
  }
  v30 = *(_QWORD *)(a1 + 32);
  if (v30)
  {
    v31 = clcpipeline_UnloadObjects(*(_WORD **)(a1 + 8), *(_QWORD *)(a1 + 16), v30);
    if (v31 >= 0)
      v4 = v4;
    else
      v4 = v31;
    vector_ObjClose(*(_QWORD *)(a1 + 32));
    *(_QWORD *)(a1 + 32) = 0;
  }
  v32 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    if ((v33 = v32[6]) == 0
      || !*(_DWORD *)(a1 + 540)
      || ((v34 = objc_UnregisterObject(v33, (uint64_t)"LANGCODECONVERTER"), (int)v4 > -1) ? (v35 = v34 < 0) : (v35 = 0),
          !v35 ? (v4 = v4) : (v4 = v34),
          (v32 = *(_QWORD **)a1) != 0))
    {
      v36 = v32[6];
      if (v36)
      {
        v37 = objc_ObjClose(v36);
        v32 = *(_QWORD **)a1;
        *(_QWORD *)(*(_QWORD *)a1 + 48) = 0;
        if ((int)v4 > -1 && v37 < 0)
          v4 = v37;
        else
          v4 = v4;
      }
      v39 = v32[5];
      if (v39)
      {
        v40 = paramc_ObjClose(v39);
        v32 = *(_QWORD **)a1;
        *(_QWORD *)(*(_QWORD *)a1 + 40) = 0;
        if ((int)v4 > -1 && v40 < 0)
          v4 = v40;
        else
          v4 = v4;
      }
      v42 = (_QWORD *)v32[1];
      v43 = *(_WORD **)(a1 + 8);
      if (v43)
      {
        v44 = rsrc_Close(v43, *(_QWORD *)(a1 + 16));
        if ((int)v4 > -1 && v44 < 0)
          v4 = v44;
        else
          v4 = v4;
      }
      v46 = *(_QWORD *)(a1 + 528);
      if (v46)
        heap_Free(v42, v46);
      heap_Free(v42, a1);
    }
  }
  return v4;
}

uint64_t clcml_Process(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int PreviousUtf8Offset, char *__s1, const char *a6)
{
  uint64_t j;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned __int16 v34;
  __int16 v35;
  uint64_t k;
  uint64_t m;
  unint64_t v39;
  uint64_t v40;
  uint64_t n;
  char *v42;
  size_t v43;
  size_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  size_t v54;
  __int16 v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  const void *v60;
  size_t v61;
  char *v62;
  char *v63;
  const void *v64;
  size_t v65;
  uint64_t v66;
  int *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  _DWORD *v72;
  _DWORD *v73;
  _DWORD *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v83;
  unsigned int v84;
  char __s2[12];
  int v86;
  _BYTE *v87;
  char __s1a[4];
  char *v89;
  unsigned __int16 v90;
  unsigned int v91;
  int v92;
  char __s[1024];
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v91 = 0;
  v92 = 0;
  v90 = 0;
  HIWORD(v86) = 0;
  **(_BYTE **)(a1 + 104) = 0;
  *(_WORD *)(a1 + 260) = 0;
  if (!__s1 || !strcmp(__s1, "normal"))
  {
    for (i = 0; i != 3; ++i)
      __s1a[i] = ssft_tolower(*(unsigned __int8 *)(a1 + 128 + i));
  }
  else
  {
    for (j = 0; j != 3; ++j)
      __s1a[j] = ssft_tolower(__s1[j]);
  }
  for (__s1a[3] = 0; PreviousUtf8Offset > a3; PreviousUtf8Offset = utf8_GetPreviousUtf8Offset(a2, PreviousUtf8Offset))
  {
    if (*(unsigned __int8 *)(a2 + utf8_GetPreviousUtf8Offset(a2, PreviousUtf8Offset)) > 0x20u)
      break;
  }
  v14 = PreviousUtf8Offset - a3;
  if (PreviousUtf8Offset != a3)
  {
    v16 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), *(unsigned __int16 *)(*(_QWORD *)(a1 + 24) + 16), 4);
    if (!v16)
    {
      v15 = 2358255626;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_CLCML", 60000, 0, v18, v19, v20, v21, v83);
      return v15;
    }
    v22 = v16;
    v89 = 0;
    v87 = 0;
    log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)a1 + 32), 600, (uint64_t)"%s%s", v17, v18, v19, v20, v21, "BEG");
    v23 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 64))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
    if ((v23 & 0x80000000) == 0)
    {
      if (!__s1
        || (strcpy(__s, "\x1B\\lang="),
            __strcat_chk(),
            __strcat_chk(),
            v24 = strlen(__s),
            v23 = (*(uint64_t (**)(_QWORD, _QWORD, char *, size_t))(*(_QWORD *)(a1 + 40) + 104))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), __s, v24), (v23 & 0x80000000) == 0))
      {
        if (!strcmp(a6, "normal")
          || !strcmp(a6, "mpthree")
          || (strcpy(__s, "\x1B\\tn="),
              __strcat_chk(),
              __strcat_chk(),
              v25 = strlen(__s),
              v23 = (*(uint64_t (**)(_QWORD, _QWORD, char *, size_t))(*(_QWORD *)(a1 + 40) + 104))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), __s, v25), (v23 & 0x80000000) == 0))
        {
          v23 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 104))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), a2 + a3, v14);
          if ((v23 & 0x80000000) == 0)
          {
            v29 = 0;
            v30 = v22;
            while (1)
            {
              v31 = *(_QWORD *)(a1 + 24);
              if (v29 >= *(unsigned __int16 *)(v31 + 16))
                break;
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Calling Process for %s", v26, v27, v28, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 8) + 8 * v29) + 8));
              v32 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 8 * v29);
              v15 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(v32[2] + 104))(v32[3], v32[4], *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v30);
              v33 = *(_QWORD *)(a1 + 48);
              if (*(_QWORD *)(v33 + 200))
              {
                *(_DWORD *)__s2 = 0;
                if (((*(uint64_t (**)(_QWORD, _QWORD, char *))(v33 + 216))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), __s2) & 0x80000000) == 0)
                {
                  if (*(_DWORD *)__s2)
                    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 48) + 200))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 8 * v29) + 8), 1);
                }
              }
              ++v29;
              v30 += 4;
              if ((v15 & 0x80000000) != 0)
                goto LABEL_100;
            }
            v15 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 48) + 104))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), 1, 0, (char *)&v92 + 2);
            if ((v15 & 0x80000000) != 0)
              goto LABEL_100;
            if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 48) + 184))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), HIWORD(v92), 0, (char *)&v86 + 2) & 0x80000000) != 0|| HIWORD(v86) != 1)
            {
              goto LABEL_76;
            }
            v15 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, int *))(*(_QWORD *)(a1 + 48)
                                                                                            + 176))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), HIWORD(v92), 0, a1 + 520, &v92);
            if ((v15 & 0x80000000) != 0)
              goto LABEL_100;
            if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 48) + 152))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), 2, HIWORD(v92), (char *)&v86 + 2) & 0x80000000) == 0)
            {
              if (HIWORD(v86))
              {
                v15 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 48) + 104))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), 2, HIWORD(v92), &v90);
                if ((v15 & 0x80000000) != 0)
                  goto LABEL_100;
              }
            }
            *(_DWORD *)(a1 + 112) = 0;
            v34 = v90;
            if (!v90)
            {
LABEL_76:
              v56 = *(char **)(a1 + 104);
              if (*(_WORD *)(a1 + 112))
              {
                v57 = *(unsigned __int16 *)(a1 + 112) - 1;
                if (v56[v57] == 95)
                {
                  v56[v57] = 0;
                  --*(_WORD *)(a1 + 112);
                  v56 = *(char **)(a1 + 104);
                }
              }
              v58 = strstr(v56, "_\\TQ\\_");
              if (v58)
              {
                v59 = v58;
                v60 = v58 + 6;
                v61 = strlen(v58 + 6);
                memmove(v59, v60, v61 + 1);
                *(_WORD *)(a1 + 112) -= 6;
                v56 = *(char **)(a1 + 104);
              }
              v62 = strstr(v56, "\\TQ\\");
              if (v62)
              {
                v63 = v62;
                v64 = v62 + 4;
                v65 = strlen(v62 + 4);
                memmove(v63, v64, v65 + 1);
                *(_WORD *)(a1 + 112) -= 4;
              }
              if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, char *))(*(_QWORD *)(a1 + 48) + 184))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), HIWORD(v92), 1, (char *)&v86 + 2) & 0x80000000) == 0&& HIWORD(v86) == 1)
              {
                *(_QWORD *)__s2 = 0;
                LOWORD(v86) = 0;
                *(_WORD *)(a1 + 536) = 0;
                v15 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, char *, int *))(*(_QWORD *)(a1 + 48)
                                                                                                + 176))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), HIWORD(v92), 1, __s2, &v86);
                if ((v15 & 0x80000000) == 0)
                {
                  v66 = (unsigned __int16)v86;
                  if ((_WORD)v86)
                  {
                    v67 = *(int **)__s2;
                    do
                    {
                      v68 = *v67;
                      v67 += 8;
                      if (v68 == 1)
                        ++*(_WORD *)(a1 + 536);
                      --v66;
                    }
                    while (v66);
                  }
                  if (*(_WORD *)(a1 + 536))
                  {
                    v69 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 528), 4 * *(unsigned __int16 *)(a1 + 536));
                    if (v69)
                    {
                      *(_QWORD *)(a1 + 528) = v69;
                      v70 = (unsigned __int16)v86;
                      if ((_WORD)v86)
                      {
                        v71 = 0;
                        v72 = *(_DWORD **)__s2;
                        v73 = *(_DWORD **)__s2;
                        v74 = *(_DWORD **)__s2;
                        do
                        {
                          v75 = *v74;
                          v74 += 8;
                          if (v75 == 1)
                          {
                            v76 = (unsigned __int16)v71++;
                            *(_DWORD *)(v69 + 4 * v76) = v73[3] - v72[3];
                          }
                          v73 = v74;
                          --v70;
                        }
                        while (v70);
                      }
                    }
                    else
                    {
LABEL_102:
                      v15 = 2358255626;
                      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_CLCML", 60000, 0, v50, v51, v52, v53, v84);
                    }
                  }
                }
              }
              goto LABEL_100;
            }
            v35 = 0;
            while (1)
            {
              v23 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, unsigned int *, int *))(*(_QWORD *)(a1 + 48) + 168))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v34, 0, 1, &v91, &v92);
              if ((v23 & 0x80000000) != 0)
                break;
              if (v91 <= 0xA && ((1 << v91) & 0x610) != 0)
              {
                v86 = 0;
                v23 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a1 + 48)
                                                                                                 + 176))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v90, 3, &v89, &v92);
                if ((v23 & 0x80000000) != 0)
                  break;
                if (!strcmp(a6, "mpthree"))
                {
                  v23 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, _BYTE **, int *))(*(_QWORD *)(a1 + 48) + 176))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v90, 9, &v87, &v92);
                  if ((v23 & 0x80000000) != 0)
                    break;
                  if (*v87)
                  {
                    for (k = 0; k != 3; ++k)
                      __s2[k] = ssft_tolower(v87[k]);
                  }
                  else
                  {
                    for (m = 0; m != 3; ++m)
                      __s2[m] = ssft_tolower(*(unsigned __int8 *)(a1 + 128 + m));
                  }
                  __s2[3] = 0;
                  if (strcmp(__s1a, __s2))
                  {
                    v39 = *(unsigned __int16 *)(a1 + 260);
                    if (v39 <= 0x3F)
                    {
                      strcpy((char *)(a1 + 4 * v39 + 262), __s2);
                      v40 = *(unsigned __int16 *)(a1 + 260);
                      *(_WORD *)(a1 + 260) = v40 + 1;
                      *(_WORD *)(a1 + 2 * v40 + 132) = v35;
                    }
                  }
                  for (n = 0; n != 4; ++n)
                    __s1a[n] = ssft_tolower(__s2[n]);
                  ++v35;
                }
                if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, char *))(*(_QWORD *)(a1 + 48) + 184))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v90, 8, (char *)&v86 + 2) & 0x80000000) == 0&& HIWORD(v86) == 1)
                {
                  v23 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a1 + 48) + 168))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v90, 8, 1, &v86, &v92);
                  if ((v23 & 0x80000000) != 0)
                    break;
                }
                v42 = v89;
                v43 = strlen(v89);
                if (!v43 || (v44 = v43, !strcmp(v89, "_")))
                {
                  if ((_WORD)v86 && *(_WORD *)(a1 + 112))
                    *(_BYTE *)(*(_QWORD *)(a1 + 104) + *(unsigned __int16 *)(a1 + 112) - 1) = 35;
                }
                else
                {
                  v45 = *(unsigned __int16 *)(a1 + 112);
                  v46 = v44 + v45;
                  v47 = v44 + v45 - 1023;
                  v48 = *(char **)(a1 + 104);
                  if (v47 <= 0xFFFFFFFFFFFFFBFFLL)
                  {
                    v49 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 104), (v46 + 2));
                    if (!v49)
                      goto LABEL_102;
                    v48 = (char *)v49;
                    *(_QWORD *)(a1 + 104) = v49;
                    LOWORD(v45) = *(_WORD *)(a1 + 112);
                    v42 = v89;
                  }
                  *(_WORD *)(a1 + 112) = v45 + strlen(v42) + 1;
                  strcat(v48, v42);
                  v54 = strlen(*(const char **)(a1 + 104));
                  if ((_WORD)v86)
                    v55 = 35;
                  else
                    v55 = 95;
                  *(_WORD *)(*(_QWORD *)(a1 + 104) + v54) = v55;
                }
              }
              v15 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 48) + 120))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v90, &v90);
              if ((v15 & 0x80000000) != 0)
                goto LABEL_100;
              v34 = v90;
              if (!v90)
                goto LABEL_76;
            }
          }
        }
      }
    }
    v15 = v23;
LABEL_100:
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v22);
    log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)a1 + 32), 600, (uint64_t)"%s%s", v77, v78, v79, v80, v81, "END");
    return v15;
  }
  return 0;
}

uint64_t fe_clcml_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Object;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v24;
  uint64_t (*v25)(const char *, uint64_t, char **);
  __int128 v26;
  uint64_t (*v27)(uint64_t, uint64_t, _QWORD *);
  uint64_t (*v28)();
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v32 = 0;
  v33 = 0;
  v5 = 2358255623;
  v30 = 0;
  v31 = 0;
  v29 = 0;
  if (a5)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v33);
    if ((inited & 0x80000000) != 0)
      return inited;
    v10 = (_QWORD *)heap_Calloc(*(_QWORD **)(v33 + 8), 1, 1000);
    if (!v10)
    {
      log_OutPublic(*(_QWORD *)(v33 + 32), (uint64_t)"FE_CLCML", 60000, 0, v11, v12, v13, v14, v24);
      return 2358255626;
    }
    v15 = (uint64_t)v10;
    *v10 = v33;
    v10[1] = a3;
    v10[2] = a4;
    Object = objc_GetObject(*(_QWORD *)(v33 + 48), (uint64_t)"SYNTHSTREAM", &v32);
    if ((Object & 0x80000000) != 0)
      goto LABEL_19;
    Object = objc_GetObject(*(_QWORD *)(v33 + 48), (uint64_t)"FE_DEPES", &v31);
    if ((Object & 0x80000000) != 0)
      goto LABEL_19;
    Object = objc_GetObject(*(_QWORD *)(v33 + 48), (uint64_t)"FE_DCTLKP", &v30);
    if ((Object & 0x80000000) != 0)
      goto LABEL_19;
    *(_QWORD *)(v15 + 24) = *(_QWORD *)(v32 + 8);
    v17 = v31;
    *(_QWORD *)(v15 + 48) = *(_QWORD *)(v31 + 8);
    *(_OWORD *)(v15 + 32) = *(_OWORD *)(v17 + 16);
    v18 = v30;
    *(_QWORD *)(v15 + 72) = *(_QWORD *)(v30 + 8);
    *(_OWORD *)(v15 + 56) = *(_OWORD *)(v18 + 16);
    *(_DWORD *)(v15 + 992) = 0;
    *(_QWORD *)(v15 + 976) = 0;
    *(_QWORD *)(v15 + 984) = 0;
    *(_QWORD *)(v15 + 968) = 0;
    if ((paramc_ParamGetStr(*(_QWORD *)(v33 + 40), (uint64_t)"extraesclang", &v29) & 0x80000000) != 0)
    {
      Object = paramc_ParamSetStr(*(_QWORD *)(v33 + 40), (uint64_t)"extraesclang", &byte_1DEBD87CE);
      if ((Object & 0x80000000) != 0)
        goto LABEL_19;
    }
    if ((paramc_ParamGetStr(*(_QWORD *)(v33 + 40), (uint64_t)"extraesctn", &v29) & 0x80000000) != 0)
    {
      Object = paramc_ParamSetStr(*(_QWORD *)(v33 + 40), (uint64_t)"extraesctn", &byte_1DEBD87CE);
      if ((Object & 0x80000000) != 0)
        goto LABEL_19;
    }
    if ((paramc_ParamGetStr(*(_QWORD *)(v33 + 40), (uint64_t)"lidvoiceswitch", &v29) & 0x80000000) != 0)
    {
      Object = paramc_ParamSetStr(*(_QWORD *)(v33 + 40), (uint64_t)"lidvoiceswitch", &byte_1DEBD87CE);
      if ((Object & 0x80000000) != 0)
        goto LABEL_19;
    }
    v19 = *(_QWORD *)(v33 + 40);
    v25 = (uint64_t (*)(const char *, uint64_t, char **))v15;
    v26 = xmmword_1EA9483B8;
    Object = paramc_ListenerAdd(v19, "extraesclang", &v25);
    if ((Object & 0x80000000) != 0)
      goto LABEL_19;
    v20 = *(_QWORD *)(v33 + 40);
    v25 = (uint64_t (*)(const char *, uint64_t, char **))v15;
    v26 = xmmword_1EA9483B8;
    Object = paramc_ListenerAdd(v20, "extraesctn", &v25);
    if ((Object & 0x80000000) != 0)
      goto LABEL_19;
    v21 = *(_QWORD *)(v33 + 40);
    v25 = (uint64_t (*)(const char *, uint64_t, char **))v15;
    v26 = xmmword_1EA9483B8;
    Object = paramc_ListenerAdd(v21, "lidvoiceswitch", &v25);
    if ((Object & 0x80000000) != 0
      || (v22 = *(_QWORD **)(*(_QWORD *)v15 + 8),
          v25 = ssftmap_ElemCopyString,
          *(_QWORD *)&v26 = ssftmap_ElemFreeString,
          *((_QWORD *)&v26 + 1) = ssftmap_ElemCompareKeysString,
          v27 = stringmap_loc_ElemCopyPtr_1,
          v28 = stringmap_loc_ElemFreeNoOp_1,
          Object = ssftmap_ObjOpen(v22, 0, (__int128 *)&v25, (uint64_t *)(v15 + 976)),
          (Object & 0x80000000) != 0))
    {
LABEL_19:
      v5 = Object;
      *(_QWORD *)a5 = v15;
      *(_DWORD *)(a5 + 8) = 62600;
LABEL_20:
      fe_clcml_ObjClose((_QWORD *)v15, *(_QWORD *)(a5 + 8));
      *(_QWORD *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      return v5;
    }
    v5 = hlp_activate(v15);
    *(_QWORD *)a5 = v15;
    *(_DWORD *)(a5 + 8) = 62600;
    if ((v5 & 0x80000000) != 0)
      goto LABEL_20;
  }
  return v5;
}

uint64_t fe_clcml_ParamCheckChange()
{
  return 0;
}

uint64_t fe_clcml_ParamLearnChange(uint64_t a1, const char *a2)
{
  uint64_t Str;
  uint64_t v5;
  char *__s2;

  __s2 = 0;
  Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"clcpreventhlpactivate", &__s2);
  if ((Str & 0x80000000) != 0)
    return hlp_activate(a1);
  v5 = Str;
  if (strcmp("yes", __s2))
    return hlp_activate(a1);
  if (strcmp("extraesclang", a2) && strcmp("extraesctn", a2))
    paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"clcpreventhlpactivate", "no");
  return v5;
}

uint64_t stringmap_loc_ElemCopyPtr_1(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = a1;
  return 0;
}

uint64_t hlp_activate(uint64_t a1)
{
  uint64_t Str;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  _BYTE *v28;
  _BYTE *v29;
  int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v55;
  uint64_t v56;
  char *__s1;
  char *v58;
  uint64_t v59;
  char *__src;
  char *v61;
  char *v62;
  char *__s;
  _BYTE *v64;
  char v65[256];
  char v66[2];
  char __s2[2];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  __s = 0;
  v64 = 0;
  v61 = 0;
  v62 = 0;
  v59 = 0;
  __src = 0;
  __s1 = 0;
  v58 = 0;
  Str = 0;
  if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"extclccfg", &v64) & 0x80000000) != 0 || !v64)
    return Str;
  if (!*v64)
    return 0;
  paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"extraesclang", &__s);
  paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"extraesctn", &v62);
  paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"mlset", &v61);
  paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"langcode", &__src);
  paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"fedataprefix", &v59);
  paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"feextcfgdataprefix", &v58);
  if (LH_stricmp(v62, "mpthree") && LH_stricmp(v62, &byte_1DEBD87CE))
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_CLCML", 60002, "%s%s", v3, v4, v5, v6, "extraesctn");
  Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"voiceml", &__s1);
  if ((Str & 0x80000000) == 0)
  {
    v11 = __s1;
    if (!strcmp(__s1, "no") || !*v11)
    {
      Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"lidvoiceswitch", &__s1);
      if ((Str & 0x80000000) == 0 && !LH_stricmp(__s1, "yes"))
        return 0;
    }
  }
  v12 = __s;
  if (!*__s)
    goto LABEL_29;
  if ((Str & 0x80000000) == 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v12 = __s;
    do
    {
      if ((++v14 & 3) != 0)
      {
        v16 = v12[v13];
        if ((v16 & 0xFFFFFFDF) - 91 > 0xFFFFFFE5)
          __s2[v15++] = ssft_tolower(v16);
        else
          log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_CLCML", 60003, "%s%s", v7, v8, v9, v10, "extraesclang");
      }
      else
      {
        __s2[v15] = 0;
        if (v12[v13] && v12[v13] != 44)
        {
          log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_CLCML", 60003, "%s%s", v7, v8, v9, v10, "extraesclang");
        }
        else if (!strstr(v61, __s2) || !LH_stricmp(__src, __s2))
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Ignoring language in extraesclang, language=%s", v17, v18, v19, (uint64_t)__s2);
        }
        v15 = 0;
      }
      v13 = v14;
      v12 = __s;
    }
    while (strlen(__s) >= v14);
  }
  v20 = strlen(v12);
  v21 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), (v20 + 5));
  if (!v21)
  {
LABEL_102:
    Str = 2358255626;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_CLCML", 60000, 0, v22, v23, v24, v25, v55);
    return Str;
  }
  v26 = v21;
  v27 = strcpy(v21, __src);
  *(_WORD *)&v26[strlen(v27)] = 44;
  strcat(v26, __s);
  Str = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"lidlanguages", v26);
  heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v26);
  if ((Str & 0x80000000) == 0)
  {
LABEL_29:
    v28 = *(_BYTE **)(a1 + 984);
    if (v28)
      *v28 = 0;
    if (*__s || *v62)
    {
      v29 = v64;
      if (*v64)
      {
        while (1)
        {
          v56 = 0;
          v30 = *v29;
          if (v30 == 43)
          {
            v31 = 0;
          }
          else
          {
            v32 = 0;
            v31 = 0;
            while (v30 && v32 <= 0xFE)
            {
              v33 = v32 + 1;
              ++v31;
              __s2[v32] = v30;
              v30 = v29[++v32];
              if (v30 == 43)
              {
                v29 += v33;
                goto LABEL_42;
              }
            }
            v31 = (unsigned __int16)v32;
            v29 += v32;
LABEL_42:
            if (v31 == 255)
              return 0;
          }
          __s2[v31] = 0;
          v34 = v29 + 1;
          if (*v29 != 43)
            v34 = v29;
          v35 = *v34;
          if (v35 == 61)
          {
            v36 = 0;
          }
          else
          {
            v37 = 0;
            v36 = 0;
            while (v35 && v37 <= 0xFE)
            {
              v38 = v37 + 1;
              ++v36;
              v66[v37] = v35;
              v35 = v34[++v37];
              if (v35 == 61)
              {
                v34 += v38;
                goto LABEL_53;
              }
            }
            v36 = (unsigned __int16)v37;
            v34 += v37;
LABEL_53:
            if (v36 == 255)
              return 0;
          }
          v66[v36] = 0;
          if (*v34 == 61)
            v29 = v34 + 1;
          else
            v29 = v34;
          if (v58)
          {
            v39 = (unsigned __int16)strlen(v58);
            __strcpy_chk();
          }
          else
          {
            v39 = 0;
            v65[0] = 0;
          }
          v40 = *v29;
          if (v40 == 44)
          {
            v41 = v39;
          }
          else
          {
            v41 = v39;
            while (v40 && v39 <= 0xFE)
            {
              v65[v39] = v40;
              v42 = *++v29;
              v40 = v42;
              ++v39;
              ++v41;
              if (v42 == 44)
                goto LABEL_68;
            }
            v41 = (unsigned __int16)v39;
          }
LABEL_68:
          if (v41 == 255)
            return 0;
          v65[v41] = 0;
          if (*v29 == 44)
            ++v29;
          if ((*(unsigned __int16 *)__s2 == 42
             || !LH_stricmp(__s2, __src)
             || strstr(v61, __s2) && __s && strstr(__s, __s2))
            && (*(unsigned __int16 *)v66 == 42 || v62 && strstr(v62, v66)))
          {
            v43 = *(char **)(a1 + 984);
            if (!v43)
            {
              v44 = hlp_StringAppend(*(uint64_t **)(*(_QWORD *)a1 + 8), 0, &byte_1DEBD87CE, (unsigned int *)(a1 + 992));
              *(_QWORD *)(a1 + 984) = v44;
              if (!v44)
                goto LABEL_102;
              *v44 = 0;
              v43 = *(char **)(a1 + 984);
            }
            v45 = hlp_StringAppend(*(uint64_t **)(*(_QWORD *)a1 + 8), v43, __s2, (unsigned int *)(a1 + 992));
            *(_QWORD *)(a1 + 984) = v45;
            if (!v45)
              goto LABEL_102;
            v46 = hlp_StringAppend(*(uint64_t **)(*(_QWORD *)a1 + 8), v45, "+", (unsigned int *)(a1 + 992));
            *(_QWORD *)(a1 + 984) = v46;
            if (!v46)
              goto LABEL_102;
            v47 = hlp_StringAppend(*(uint64_t **)(*(_QWORD *)a1 + 8), v46, v66, (unsigned int *)(a1 + 992));
            *(_QWORD *)(a1 + 984) = v47;
            if (!v47)
              goto LABEL_102;
            v48 = hlp_StringAppend(*(uint64_t **)(*(_QWORD *)a1 + 8), v47, "=", (unsigned int *)(a1 + 992));
            *(_QWORD *)(a1 + 984) = v48;
            if (!v48)
              goto LABEL_102;
            v49 = hlp_StringAppend(*(uint64_t **)(*(_QWORD *)a1 + 8), v48, v65, (unsigned int *)(a1 + 992));
            *(_QWORD *)(a1 + 984) = v49;
            if (!v49)
              goto LABEL_102;
            v50 = hlp_StringAppend(*(uint64_t **)(*(_QWORD *)a1 + 8), v49, ",", (unsigned int *)(a1 + 992));
            *(_QWORD *)(a1 + 984) = v50;
            if (!v50)
              goto LABEL_102;
            if (!*(_QWORD *)(a1 + 968))
            {
              v51 = heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), 1024);
              *(_QWORD *)(a1 + 968) = v51;
              if (!v51)
                goto LABEL_102;
            }
            Str = ssftmap_FindReadOnly(*(_QWORD *)(a1 + 976), (uint64_t)v65, &v56);
            if ((Str & 0x80000000) != 0)
            {
              v52 = clcml_ObjOpen(*(_WORD **)(a1 + 8), *(_QWORD *)(a1 + 16), v65, &v56);
              if ((v52 & 0x80000000) != 0)
                return v52;
              v53 = ssftmap_Insert(*(_QWORD *)(a1 + 976), (uint64_t)v65, v56);
LABEL_96:
              Str = v53;
              if ((v53 & 0x80000000) != 0)
                return Str;
            }
          }
          else
          {
            if ((ssftmap_FindReadOnly(*(_QWORD *)(a1 + 976), (uint64_t)v65, &v56) & 0x80000000) == 0)
            {
              v52 = ssftmap_Remove(*(_QWORD *)(a1 + 976), (uint64_t)v65);
              if ((v52 & 0x80000000) != 0)
                return v52;
              v53 = clcml_ObjClose(v56);
              goto LABEL_96;
            }
            Str = 0;
          }
          if (!*v29)
            return Str;
        }
      }
      return Str;
    }
    return 0;
  }
  return Str;
}

uint64_t fe_clcml_ObjClose(_QWORD *a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;

  result = safeh_HandleCheck((uint64_t)a1, a2, 62600, 1000);
  if ((result & 0x80000000) != 0)
    return 2358255624;
  if (a1)
  {
    v4 = *(_QWORD *)(*a1 + 40);
    v9 = a1;
    v10 = xmmword_1EA9483B8;
    paramc_ListenerRemove(v4, "extraesclang", (__int128 *)&v9);
    v5 = *(_QWORD *)(*a1 + 40);
    v9 = a1;
    v10 = xmmword_1EA9483B8;
    paramc_ListenerRemove(v5, "extraesctn", (__int128 *)&v9);
    v6 = *(_QWORD *)(*a1 + 40);
    v9 = a1;
    v10 = xmmword_1EA9483B8;
    paramc_ListenerRemove(v6, "lidvoiceswitch", (__int128 *)&v9);
    if (a1[122])
    {
      hlp_deactivate((uint64_t)a1);
      ssftmap_ObjClose(a1[122]);
    }
    if (a1[3])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"SYNTHSTREAM");
    if (a1[6])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"FE_DEPES");
    if (a1[9])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"FE_DCTLKP");
    v7 = a1[121];
    if (v7)
      heap_Free(*(_QWORD **)(*a1 + 8), v7);
    v8 = a1[123];
    if (v8)
      heap_Free(*(_QWORD **)(*a1 + 8), v8);
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t hlp_deactivate(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v4 = 0;
  result = *(_QWORD *)(a1 + 976);
  if (result)
  {
    result = ssftmap_IteratorOpen(result, 0, 1, (uint64_t)&v4);
    if ((result & 0x80000000) == 0)
    {
      v2 = 0;
      v3 = 0;
      while ((ssftmap_IteratorNext(v4, &v3, &v2) & 0x80000000) == 0)
      {
        clcml_ObjClose(v2);
        ssftmap_IteratorRemove(v4);
      }
      return ssftmap_IteratorClose((uint64_t)v4);
    }
  }
  return result;
}

uint64_t fe_clcml_ObjReopen(_QWORD *a1, int a2)
{
  uint64_t result;
  uint64_t v4;

  result = safeh_HandleCheck((uint64_t)a1, a2, 62600, 1000);
  if ((result & 0x80000000) != 0)
    return 2358255624;
  if (a1)
  {
    hlp_deactivate((uint64_t)a1);
    v4 = a1[123];
    if (v4)
    {
      heap_Free(*(_QWORD **)(*a1 + 8), v4);
      a1[123] = 0;
    }
    return hlp_activate((uint64_t)a1);
  }
  return result;
}

uint64_t fe_clcml_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if ((safeh_HandleCheck(a1, a2, 62600, 1000) & 0x80000000) != 0)
    return 2358255624;
  synstrmaux_InitStreamOpener(a1 + 80, *(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_CLCML");
  synstrmaux_RegisterInStream((_WORD *)(a1 + 80), (uint64_t)"text/plain;charset=utf-8", 0, a1 + 904);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 80), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    0,
    a1 + 920);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 80), (uint64_t)"text/plain;charset=utf-8", a1 + 936);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 80), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 952);
  v7 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 80), *(_QWORD *)(a1 + 24), a3, a4);
  if ((v7 & 0x80000000) != 0)
    synstrmaux_CloseStreams((_WORD *)(a1 + 80), *(_QWORD *)(a1 + 24));
  return v7;
}

uint64_t fe_clcml_Process(const char **a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  unsigned int v21;
  unsigned int v22;
  char *v23;
  unsigned int v24;
  int v25;
  const char *v26;
  int v27;
  char *v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  _DWORD *v35;
  unsigned int v36;
  char *v38;
  char *v39;
  char **v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  unsigned int v44;
  BOOL v45;
  size_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  void *v59;
  _DWORD __n[3];
  void *__src;
  _BYTE v62[12];

  v7 = 2358255626;
  memset(v62, 0, sizeof(v62));
  __src = 0;
  memset(__n, 0, sizeof(__n));
  v58 = 0;
  v59 = 0;
  v56 = 0;
  v57 = 0;
  v55 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62600, 1000) & 0x80000000) != 0)
    return 2358255624;
  v54 = 0;
  *a5 = 1;
  result = (*((uint64_t (**)(const char *, const char *, _BYTE *, _BYTE *))a1[3] + 18))(a1[113], a1[114], &v62[8], v62);
  if ((result & 0x80000000) == 0)
  {
    result = (*((uint64_t (**)(const char *, const char *, _BYTE *, _BYTE *))a1[3] + 18))(a1[115], a1[116], &v62[4], v62);
    if ((result & 0x80000000) == 0)
    {
      if (*(_DWORD *)&v62[8])
      {
        v9 = (*((uint64_t (**)(const char *, const char *, void **, _DWORD *))a1[3] + 11))(a1[113], a1[114], &__src, __n);
        if ((v9 & 0x80000000) != 0)
          goto LABEL_82;
        v10 = (char *)heap_Alloc(*((_QWORD *)*a1 + 1), (__n[0] + 1));
        *(_QWORD *)&__n[1] = v10;
        if (v10)
        {
          v15 = v10;
          memcpy(v10, __src, __n[0]);
          v15[__n[0]] = 0;
          v9 = (*((uint64_t (**)(const char *, const char *, void **, char *))a1[3] + 11))(a1[115], a1[116], &v59, (char *)&v56 + 4);
          if ((v9 & 0x80000000) != 0)
            goto LABEL_82;
          v16 = HIDWORD(v56);
          v17 = HIDWORD(v56) >> 5;
          LODWORD(v56) = HIDWORD(v56) >> 5;
          HIDWORD(v56) >>= 5;
          v18 = heap_Calloc(*((_QWORD **)*a1 + 1), 1, v16 & 0xFFFFFFE0);
          v58 = (uint64_t *)v18;
          v19 = *a1;
          if (!v18)
          {
LABEL_23:
            log_OutPublic(*((_QWORD *)v19 + 4), (uint64_t)"FE_CLCML", 60000, 0, v11, v12, v13, v14, v52);
LABEL_83:
            if (*(_QWORD *)&__n[1])
              heap_Free(*((_QWORD **)*a1 + 1), *(uint64_t *)&__n[1]);
            v47 = (uint64_t)v58;
            if (v58)
            {
              v48 = v56;
              if ((_DWORD)v56)
              {
                v49 = 0;
                v50 = v57;
                v51 = v58 + 3;
                do
                {
                  if (v50 && *(_DWORD *)(v50 + 4 * v49) && *v51)
                    heap_Free(*((_QWORD **)*a1 + 1), *v51);
                  ++v49;
                  v51 += 4;
                }
                while (v49 < v48);
              }
              heap_Free(*((_QWORD **)*a1 + 1), v47);
            }
            if (v57)
              heap_Free(*((_QWORD **)*a1 + 1), v57);
            return v7;
          }
          v20 = (char *)v18;
          v57 = heap_Calloc(*((_QWORD **)v19 + 1), 1, 4 * HIDWORD(v56));
          if (v57)
          {
            v53 = *((_DWORD *)v59 + 3);
            memcpy(v20, v59, 32 * HIDWORD(v56));
            v9 = (*((uint64_t (**)(const char *, const char *, int *, _QWORD))a1[6] + 14))(a1[4], a1[5], &v55, 0);
            if ((v9 & 0x80000000) != 0)
              goto LABEL_82;
            if (!a1[123])
              goto LABEL_76;
            if (v16 < 0x20)
            {
              v21 = 0;
              v22 = 0;
              v23 = 0;
              v24 = 0;
              v25 = 0;
              v26 = "normal";
LABEL_67:
              v54 = 0;
              v43 = strlen(v15);
              v44 = v24 - v53;
              v45 = v44 < v43 && v25 == 0;
              if (!v45 || (hlp_getclcml((uint64_t)a1, v23, v26, &v54) & 0x80000000) != 0 || !v54)
              {
LABEL_76:
                v46 = strlen(v15);
                if (!v46
                  || (v9 = (*((uint64_t (**)(const char *, const char *, const char *, _QWORD))a1[3] + 13))(a1[117], a1[118], v15, (v46 + 1)), (v9 & 0x80000000) == 0))
                {
                  v9 = (*((uint64_t (**)(const char *, const char *, _QWORD))a1[3] + 12))(a1[113], a1[114], __n[0]);
                  if ((v9 & 0x80000000) == 0)
                  {
                    v9 = (*((uint64_t (**)(const char *, const char *, uint64_t *, _QWORD))a1[3] + 13))(a1[119], a1[120], v58, (32 * v56));
                    if ((v9 & 0x80000000) == 0)
                    {
                      v9 = (*((uint64_t (**)(const char *, const char *, _QWORD))a1[3] + 12))(a1[115], a1[116], (32 * HIDWORD(v56)));
                      if ((v9 & 0x80000000) == 0)
                      {
                        v55 = v55 + strlen(v15) - __n[0] + 1;
                        v9 = (*((uint64_t (**)(const char *, const char *))a1[6] + 13))(a1[4], a1[5]);
                      }
                    }
                  }
                }
                goto LABEL_82;
              }
              v9 = hlp_processclcml(a1, v54, (uint64_t *)&__n[1], v44, v43, (uint64_t *)&v58, &v57, v22, v21, &v56, v23, v26);
              if ((v9 & 0x80000000) == 0)
              {
                v15 = *(const char **)&__n[1];
                goto LABEL_76;
              }
LABEL_82:
              v7 = v9;
              goto LABEL_83;
            }
            v25 = 0;
            v24 = 0;
            v28 = 0;
            v22 = 0;
            v21 = 0;
            v26 = "normal";
            while (1)
            {
              v29 = *(_DWORD *)&v20[32 * v21];
              v30 = v29 > 0x33;
              v31 = (1 << v29) & 0x8011400200080;
              if (!v30 && v31 != 0)
              {
                v33 = v21;
                v54 = 0;
                v34 = &v20[32 * v21];
                v36 = *((_DWORD *)v34 + 3);
                v35 = v34 + 12;
                if (v36 > v24 && v25 == 0)
                {
                  v38 = v28;
                  if ((hlp_getclcml((uint64_t)a1, v28, v26, &v54) & 0x80000000) == 0 && v54)
                  {
                    v9 = hlp_processclcml(a1, v54, (uint64_t *)&__n[1], v24 - v53, *v35 - v53, (uint64_t *)&v58, &v57, v22, v21, &v56, v38, v26);
                    if ((v9 & 0x80000000) != 0)
                      goto LABEL_82;
                    if (**(_BYTE **)(v54 + 104))
                      v33 = v21 + 2;
                    else
                      v33 = v21;
                    v20 = (char *)v58;
                    v21 = v33;
                  }
                  v28 = v38;
                }
                if (*(_DWORD *)&v20[32 * v33] == 51)
                  *(_DWORD *)&v20[32 * v33 + 16] = 0;
                v39 = &v20[32 * v33];
                v24 = *((_DWORD *)v39 + 3);
                v17 = v56;
                if (v21 < v56)
                {
                  v40 = (char **)(v39 + 24);
                  while (1)
                  {
                    if (*((_DWORD *)v40 - 3) != v24)
                    {
                      v21 = v33;
                      break;
                    }
                    v41 = *((_DWORD *)v40 - 6);
                    if (v41 == 7)
                    {
                      if (v25)
                        goto LABEL_54;
                      v25 = 1;
                    }
                    else
                    {
                      if (v41 != 21)
                      {
                        if (v41 == 36)
                        {
                          v25 = 0;
                          v28 = *v40;
                        }
                        else
                        {
                          if (v25)
                            v42 = 0;
                          else
                            v42 = v41 == 34;
                          if (v42)
                            v25 = 1;
                        }
                        goto LABEL_61;
                      }
                      v26 = *v40;
                      if (v25)
LABEL_54:
                        v25 = 0;
                    }
LABEL_61:
                    v40 += 4;
                    if (v56 == ++v33)
                    {
                      v21 = v56;
                      break;
                    }
                  }
                }
                v22 = v21--;
              }
              if (++v21 >= v17)
              {
                v23 = v28;
                v15 = *(const char **)&__n[1];
                goto LABEL_67;
              }
            }
          }
        }
        v19 = *a1;
        goto LABEL_23;
      }
      v27 = *(_DWORD *)v62;
      if (*(_QWORD *)v62)
      {
        if (*(_DWORD *)&v62[4])
        {
          result = (*((uint64_t (**)(const char *, const char *, const char *, const char *, uint64_t, uint64_t *))a1[3]
                    + 16))(a1[119], a1[120], a1[115], a1[116], 0xFFFFFFFFLL, &v56);
          if ((result & 0x80000000) != 0)
            return result;
          v27 = *(_DWORD *)v62;
        }
        if (v27)
          return synstrmaux_CloseOutStreamsOnly((_WORD *)a1 + 40, (uint64_t)a1[3]);
      }
      else
      {
        *a5 = 0;
      }
    }
  }
  return result;
}

uint64_t hlp_getclcml(uint64_t a1, char *a2, const char *a3, _QWORD *a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int16 v15;
  BOOL v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v35;
  char *i;
  int v37;
  unsigned __int16 v38;
  unint64_t v39;
  char v41[8];
  char v42[256];
  char __s2[2];
  _BYTE v44[254];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  strcpy(v41, "normal");
  if (a2)
    v7 = a2;
  else
    v7 = v41;
  if (strstr(v7, "_lid"))
  {
    v8 = 0;
    do
    {
      __s2[v8] = ssft_tolower(v7[v8]);
      v9 = v8 + 1;
      v8 = v9;
    }
    while (v9 != 3);
  }
  else
  {
    LODWORD(v9) = *v7;
    if (*v7)
    {
      v14 = 0;
      do
      {
        v15 = v14 + 1;
        __s2[v14] = ssft_tolower(v7[v14]);
        if (strlen(v7) <= v14 + 1)
          break;
        v16 = v14++ >= 0xFE;
      }
      while (!v16);
      LODWORD(v9) = v15;
      if (v15 > 0xFEu)
      {
        LODWORD(v10) = 255;
        goto LABEL_20;
      }
    }
  }
  v10 = v9 + 1;
  __s2[v9] = 43;
  if (*a3 && v9 <= 0xFD)
  {
    v11 = 0;
    do
    {
      __s2[v10 + v11] = ssft_tolower(a3[v11]);
      v12 = v11 + 1;
      if (strlen(a3) <= v11 + 1)
        break;
      v13 = v10 + v11++;
    }
    while (v13 < 0xFE);
    LODWORD(v10) = (unsigned __int16)(v10 + v12);
  }
LABEL_20:
  __s2[v10] = 0;
  v17 = strstr(*(char **)(a1 + 984), __s2);
  if (strstr(v7, "_lid"))
  {
    v18 = 0;
    do
    {
      __s2[v18] = ssft_tolower(v7[v18]);
      v19 = v18 + 1;
      v18 = v19;
    }
    while (v19 != 3);
    goto LABEL_23;
  }
  LODWORD(v19) = *v7;
  if (!*v7)
  {
LABEL_23:
    __s2[v19] = 43;
LABEL_24:
    v20 = &__s2[v19];
    v21 = (v19 + 2);
    v20[1] = 42;
    goto LABEL_25;
  }
  v30 = 0;
  do
  {
    v31 = v30 + 1;
    __s2[v30] = ssft_tolower(v7[v30]);
    if (strlen(v7) <= v30 + 1)
      break;
    v16 = v30++ >= 0xFE;
  }
  while (!v16);
  LODWORD(v19) = (unsigned __int16)v31;
  if ((unsigned __int16)v31 <= 0xFEu)
  {
    __s2[v31] = 43;
    if ((unsigned __int16)v31 != 254)
      goto LABEL_24;
  }
  v21 = 255;
LABEL_25:
  __s2[v21] = 0;
  v22 = *(char **)(a1 + 984);
  v23 = strstr(v22, __s2);
  if (v23 < v17 || v17 == 0)
    v25 = v23;
  else
    v25 = v17;
  if (v23)
    v17 = v25;
  *(_WORD *)__s2 = 11050;
  if (*a3)
  {
    v26 = 0;
    do
    {
      v44[v26] = ssft_tolower(a3[v26]);
      v27 = v26 + 1;
      if (strlen(a3) <= v26 + 1)
        break;
      v28 = v26 + 2;
      ++v26;
    }
    while (v28 < 0xFE);
    v22 = *(char **)(a1 + 984);
    v29 = v27 + 2;
  }
  else
  {
    v29 = 2;
  }
  v32 = 2358255616;
  __s2[v29] = 0;
  v33 = strstr(v22, __s2);
  if (v33 < v17 || v17 == 0)
    v35 = v33;
  else
    v35 = v17;
  if (!v33)
    v35 = v17;
  if (v35)
  {
    for (i = v35 + 2; *(i - 2); ++i)
    {
      if (*(i - 2) == 61)
      {
        v37 = *(i - 1);
        if (v37 == 44)
        {
          v38 = 0;
        }
        else
        {
          v39 = 0;
          v38 = 0;
          while (v37 && v39 <= 0xFE)
          {
            v42[v39] = v37;
            v37 = i[v39++];
            ++v38;
            if (v37 == 44)
              goto LABEL_68;
          }
          v38 = v39;
        }
LABEL_68:
        v42[v38] = 0;
        return ssftmap_FindReadOnly(*(_QWORD *)(a1 + 976), (uint64_t)v42, a4);
      }
    }
  }
  return v32;
}

uint64_t hlp_processclcml(const char **a1, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned int a5, uint64_t *a6, uint64_t *a7, unsigned int a8, unsigned int a9, _DWORD *a10, char *a11, const char *a12)
{
  uint64_t result;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int NextUtf8Offset;
  int v47;
  unsigned int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  unsigned int v63;
  unint64_t v64;
  unsigned int *v65;
  unint64_t v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  BOOL v69;
  int v70;
  int v71;
  size_t v72;
  int v73;
  int v74;
  size_t v75;
  void *v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  unsigned __int8 *v81;
  __int16 v82;
  __int16 v83;
  __int16 v84;
  int v85;
  __int16 v86;
  const char *v87;
  char *v88;
  const char *v89;
  size_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unint64_t v94;
  unsigned int *v95;
  uint64_t *v96;
  unsigned int v97;
  unsigned int v98;
  const char *v99;
  size_t v100;
  int v101;
  size_t v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int PreviousUtf8Offset;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned __int16 v114;
  uint64_t v115;
  unsigned int v116;
  unsigned __int16 v117;
  unsigned int v118;
  BOOL v119;
  unsigned __int16 v120;
  unsigned __int16 v121;
  unsigned __int16 v122;
  uint64_t v123;
  unsigned int v124;
  char *v125;
  unsigned __int16 v126;
  int v127;
  unsigned int v128;
  __int16 v129;
  unsigned __int16 v130;
  uint64_t v131;
  size_t v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  unint64_t v137;
  unsigned int *v138;
  int v139;
  char *v140;
  char *v141;
  _DWORD *v142;
  int v143;
  uint64_t *v144;
  unsigned __int16 v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  _DWORD *v151;
  unsigned int v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  _WORD *v156;
  int v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  uint64_t *v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  _DWORD *v175;
  int v176;
  uint64_t v177;
  unsigned int v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  _DWORD *v183;
  int v184;
  unsigned int v185;
  uint64_t v186;
  int v187;
  int v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _DWORD *v197;
  int v198;
  unsigned int v199;
  unint64_t v200;
  char v201;
  uint64_t v202;
  unsigned __int16 v203;
  uint64_t v204;
  _BOOL4 v205;
  unsigned int v206;
  unsigned int v207;
  char *__src;
  char *__dst;
  uint64_t *v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t v215;
  int v216;
  uint64_t *v217;
  char __s[20];
  uint64_t v220;

  v220 = *MEMORY[0x1E0C80C00];
  strcpy(__s, " ");
  __strcat_chk();
  v214 = strlen(__s);
  v216 = *(_DWORD *)(*a6 + 12);
  *(_QWORD *)(a2 + 104) = a1[121];
  result = clcml_Process(a2, *a3, a4, a5, a11, a12);
  if ((result & 0x80000000) != 0)
    return result;
  v20 = *(const char **)(a2 + 104);
  a1[121] = v20;
  if (!*v20)
    return result;
  v211 = a4;
  v213 = a8;
  v207 = result;
  v217 = a6;
  v21 = heap_Realloc(*((uint64_t **)*a1 + 1), *a6, 32 * (*a10 + 2));
  v26 = (uint64_t *)a1;
  if (!v21)
    goto LABEL_229;
  v27 = v21;
  bzero((void *)(v21 + 32 * *a10), 32 * ((*a10 + 2) - (unint64_t)*a10));
  *a6 = v27;
  v28 = heap_Realloc(*((uint64_t **)*a1 + 1), *a7, 4 * (*a10 + 2));
  if (!v28)
    goto LABEL_229;
  *a7 = v28;
  v29 = strlen(a1[121]);
  __dst = (char *)heap_Calloc(*((_QWORD **)*a1 + 1), v29 + 8, 1);
  if (!__dst)
    goto LABEL_229;
  v30 = strcpy(__dst, a1[121]);
  *(_WORD *)&__dst[strlen(v30)] = 20;
  strcat(__dst, "EXTCLC");
  log_OutText(*((_QWORD *)*a1 + 4), (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Inserting phon marker with transcription %s at position %d", v31, v32, v33, (uint64_t)a1[121]);
  v34 = a10;
  v35 = *a10;
  LODWORD(v36) = a8;
  if (*a10 <= a8)
  {
    v39 = a8;
    v37 = v217;
  }
  else
  {
    v37 = a6;
    v38 = a8 + 1;
    v39 = a8;
    memmove((void *)(*v217 + 32 * v38), (const void *)(*v217 + 32 * a8), 32 * (*a10 - a8));
    memmove((void *)(*a7 + 4 * v38), (const void *)(*a7 + 4 * a8), 4 * (*a10 - a8));
    v34 = a10;
    v35 = *a10;
  }
  *v34 = v35 + 1;
  v40 = *v37 + 32 * v39;
  *(_DWORD *)v40 = 34;
  *(_QWORD *)(v40 + 24) = __dst;
  v41 = *v37;
  v42 = (_DWORD *)(*v37 + 32 * v39);
  v42[3] = v216 + v211;
  if (a8)
    v43 = *(_DWORD *)(v41 + 32 * (a8 - 1) + 4);
  else
    v43 = 0;
  v210 = v26;
  v42[1] = v43;
  v42[2] = 0;
  v42[4] = 0;
  v200 = v39;
  *(_DWORD *)(*a7 + 4 * v39) = 1;
  v44 = strlen((const char *)*a3);
  v45 = utf8_BelongsToSet(0, (_BYTE *)*a3, v211, v44);
  NextUtf8Offset = v211;
  if (v211 < a5)
  {
    NextUtf8Offset = v211;
    if (v45)
    {
      NextUtf8Offset = v211;
      do
      {
        NextUtf8Offset = utf8_GetNextUtf8Offset((char *)*a3, NextUtf8Offset);
        v47 = utf8_BelongsToSet(0, (_BYTE *)*a3, NextUtf8Offset, v44);
      }
      while (NextUtf8Offset < a5 && v47 != 0);
    }
  }
  v49 = strlen((const char *)*a3);
  v50 = v216;
  if (NextUtf8Offset < a5)
  {
    v51 = v49;
    v52 = 0;
    LODWORD(v36) = v213;
    do
    {
      if (!utf8_BelongsToSet(0, (_BYTE *)*a3, NextUtf8Offset, v51))
      {
        do
        {
          NextUtf8Offset = utf8_GetNextUtf8Offset((char *)*a3, NextUtf8Offset);
          v53 = utf8_BelongsToSet(0, (_BYTE *)*a3, NextUtf8Offset, v51);
        }
        while (NextUtf8Offset < a5 && v53 == 0);
      }
      if (v36 < *a10)
      {
        v55 = *v37;
        v36 = v36;
        v56 = (_DWORD *)(*v37 + 32 * v36 + 12);
        do
        {
          if (*v56 >= NextUtf8Offset + v216)
            break;
          v57 = *(_QWORD *)(a2 + 528);
          if (!v57)
            break;
          if (v52 >= *(unsigned __int16 *)(a2 + 536) || (v58 = *(_DWORD *)(v57 + 4 * v52) + v211, v58 >= a5))
            v59 = *(_DWORD *)(v55 + 32 * (v36 - 1) + 12);
          else
            v59 = v58 + v216;
          *v56 = v59;
          v56 += 8;
          ++v36;
        }
        while (v36 < *a10);
      }
      v60 = utf8_BelongsToSet(0, (_BYTE *)*a3, NextUtf8Offset, v51);
      if (NextUtf8Offset < a5 && v60)
      {
        do
        {
          NextUtf8Offset = utf8_GetNextUtf8Offset((char *)*a3, NextUtf8Offset);
          v61 = utf8_BelongsToSet(0, (_BYTE *)*a3, NextUtf8Offset, v51);
        }
        while (NextUtf8Offset < a5 && v61 != 0);
      }
      ++v52;
    }
    while (NextUtf8Offset < a5);
  }
  v202 = a9 + 1;
  if (v36 < *a10)
  {
    v63 = v216 + a5;
    v64 = v36;
    v65 = (unsigned int *)(*v37 + 32 * v36 + 12);
    do
    {
      if (*v65 >= v63)
        break;
      *v65 = v63;
      v65 += 8;
      ++v64;
    }
    while (v64 < *a10);
  }
  v66 = *a3;
  v67 = (unsigned __int8 *)(*a3 + a5);
  v68 = v67 - 1;
  do
  {
    v69 = (unint64_t)v68 > v66;
    v71 = *v68--;
    v70 = v71;
  }
  while (v69 && memchr("_ \r\n\x1B\t", v70, 7uLL));
  if (memchr("(),;:", v70, 6uLL))
  {
    v72 = strlen(*(const char **)(a2 + 520));
    v205 = memchr("(),;:", *(char *)(v72 + *(_QWORD *)(a2 + 520) - 1), 6uLL) == 0;
  }
  else
  {
    v205 = 0;
  }
  v73 = *(v67 - 1);
  if (*(v67 - 1))
  {
    while (memchr("_ \r\n\x1B\t", v73, 7uLL))
    {
      v74 = *v67++;
      v73 = v74;
      if (!v74)
        goto LABEL_63;
    }
    if (memchr("(),;:", v73, 6uLL))
    {
      v75 = strlen(*(const char **)(a2 + 520));
      v76 = memchr("(),;:", *(char *)(v75 + *(_QWORD *)(a2 + 520) - 1), 6uLL);
      v77 = v205;
      if (!v76)
        v77 = 1;
      v205 = v77;
    }
  }
LABEL_63:
  v78 = v66 + v211 - 1;
  do
  {
    v80 = *(unsigned __int8 *)++v78;
    v79 = v80;
  }
  while (memchr("_ \r\n\x1B\t", v80, 7uLL));
  if (!memchr("(),;:", v79, 6uLL))
    goto LABEL_71;
  v81 = (unsigned __int8 *)((__PAIR128__(v78, v66) - (unint64_t)v78) >> 64);
  if ((unint64_t)v81 > v66)
  {
    while (memchr("_ \r\n\x1B\t", *v81, 7uLL))
    {
      if ((unint64_t)--v81 <= v66)
      {
        v81 = (unsigned __int8 *)v66;
        break;
      }
    }
  }
  if (!memchr("(),;:", *v81, 6uLL))
  {
    v82 = 0;
    v81[1] = 44;
  }
  else
  {
LABEL_71:
    v82 = 1;
  }
  v83 = v211 - a5 + strlen(*(const char **)(a2 + 520));
  if (v205)
    v84 = 2;
  else
    v84 = 1;
  v85 = (__int16)(v84 + (v82 ^ 1) + v83);
  if (v85 < 1)
  {
    if (!(v84 + ((unsigned __int16)v82 ^ 1) + v83))
    {
      v96 = v210;
      v97 = v214;
      if ((v82 & 1) != 0)
        goto LABEL_89;
      goto LABEL_91;
    }
    v201 = v82;
    v87 = (const char *)*a3;
  }
  else
  {
    v26 = v210;
    v86 = strlen((const char *)*a3);
    v87 = (const char *)heap_Realloc(*(uint64_t **)(*v210 + 8), *a3, (unsigned __int16)(v85 + v86 + 1));
    if (!v87)
      goto LABEL_229;
    v201 = v82;
    *a3 = (uint64_t)v87;
    v50 = v216;
  }
  v88 = (char *)&v87[v85 + a5];
  v89 = &v87[a5];
  v90 = strlen(v87);
  memmove(v88, v89, v90 - a5 + 1);
  v91 = *v217;
  *(_DWORD *)(*v217 + 16) += v85;
  v92 = *a10;
  if (v36 >= *a10)
  {
    a5 += v85;
    v96 = v210;
    v97 = v214;
    if ((v201 & 1) != 0)
      goto LABEL_89;
LABEL_91:
    *(_BYTE *)(*a3 + v211) = 32;
    v98 = v211 + 1;
    goto LABEL_92;
  }
  v93 = v50 + a5;
  v94 = v36;
  v95 = (unsigned int *)(v91 + 32 * v36 + 12);
  v96 = v210;
  v97 = v214;
  do
  {
    if (*v95 >= v93)
    {
      *v95 += v85;
      v92 = *a10;
    }
    ++v94;
    v95 += 8;
  }
  while (v94 < v92);
  a5 += v85;
  if ((v201 & 1) == 0)
    goto LABEL_91;
LABEL_89:
  v98 = v211;
LABEL_92:
  v99 = *(const char **)(a2 + 520);
  if (*v99)
  {
    v100 = 0;
    v101 = 0;
    do
    {
      *(_BYTE *)(*a3 + v98 + v101) = v99[v100];
      v100 = (v101 + 1);
      v99 = *(const char **)(a2 + 520);
      v102 = strlen(v99);
      v101 = v100;
    }
    while (v102 > v100);
  }
  else
  {
    LODWORD(v100) = 0;
  }
  v103 = *a3;
  if (v205)
  {
    *(_BYTE *)(v103 + v100 + v98) = 44;
    LODWORD(v100) = v100 + 1;
    v103 = *a3;
  }
  *(_BYTE *)(v103 + v100 + v98) = 32;
  v104 = strlen((const char *)*a3);
  v105 = v98;
  if (utf8_BelongsToSet(1u, (_BYTE *)*a3, v98, v104))
  {
    v105 = v98;
    do
      v105 = utf8_GetNextUtf8Offset((char *)*a3, v105);
    while (utf8_BelongsToSet(1u, (_BYTE *)*a3, v105, v104));
  }
  v212 = v98;
  PreviousUtf8Offset = utf8_GetPreviousUtf8Offset(*a3, a5);
  if (a5)
  {
    v110 = PreviousUtf8Offset;
    v111 = a5;
    if (utf8_BelongsToSet(1u, (_BYTE *)*a3, PreviousUtf8Offset, v104))
    {
      do
      {
        v111 = v110;
        v112 = utf8_GetPreviousUtf8Offset(*a3, v110);
        if (!v110)
          break;
        v110 = v112;
      }
      while (utf8_BelongsToSet(1u, (_BYTE *)*a3, v112, v104));
    }
  }
  else
  {
    v111 = 0;
  }
  v206 = v105;
  if (v105 >= v111)
  {
    v114 = 1;
  }
  else
  {
    v113 = v105;
    v114 = 1;
    do
    {
      if (!*(_BYTE *)(*a3 + v113))
        break;
      if (utf8_BelongsToSet(1u, (_BYTE *)*a3, v113, v104))
      {
        ++v114;
        for (; v113 < v111; v113 = utf8_GetNextUtf8Offset((char *)*a3, v113))
        {
          if (!utf8_BelongsToSet(1u, (_BYTE *)*a3, v113, v104))
            break;
        }
      }
      v113 = utf8_GetNextUtf8Offset((char *)*a3, v113);
    }
    while (v113 < v111);
  }
  v115 = v96[121];
  v116 = 1;
  v117 = 1;
  while (1)
  {
    v118 = *(unsigned __int8 *)(v115 + v116 - 1);
    if (v118 > 0x5E)
    {
      if (v118 != 95)
        goto LABEL_129;
LABEL_124:
      ++v117;
      goto LABEL_129;
    }
    if (v118 != 35)
      break;
    if (*(_BYTE *)(v115 + v116))
      goto LABEL_124;
LABEL_129:
    ++v116;
  }
  if (*(_BYTE *)(v115 + v116 - 1))
    v119 = v118 == 18;
  else
    v119 = 1;
  if (!v119)
    goto LABEL_129;
  v120 = v114;
  v121 = v117;
  if (v114 < v117)
  {
    v122 = v117 - v114;
    v123 = (unsigned __int16)(v117 - v120);
    log_OutText(*(_QWORD *)(*v96 + 32), (uint64_t)"FE_CLCML", 5, 0, (uint64_t)"TYPE1 modification : insert %u dummy words (%u orthographic words, %u phonetic words)", v107, v108, v109, (unsigned __int16)(v121 - v120));
    v124 = strlen((const char *)*a3);
    v204 = v123 * v97;
    v125 = (char *)heap_Realloc(*(uint64_t **)(*v96 + 8), *a3, v204 + v124 + 2);
    v26 = v96;
    if (v125)
    {
      *a3 = (uint64_t)v125;
      if (a5)
        v126 = a5 - 1;
      else
        v126 = 0;
      while (1)
      {
        if ((v125[v126] | 0x20) != 0x20)
        {
          v127 = (*(uint64_t (**)(uint64_t, uint64_t))(v96[9] + 128))(v96[7], v96[8]);
          v125 = (char *)*a3;
          if (!v127)
            break;
        }
        v126 = utf8_GetPreviousUtf8Offset((uint64_t)v125, v126);
        v125 = (char *)*a3;
      }
      v203 = v122;
      v131 = (unsigned __int16)utf8_GetNextUtf8Offset(v125, v126);
      v132 = strlen((const char *)*a3);
      memmove((void *)(*a3 + (v204 + v131)), (const void *)(*a3 + v131), v132 - v131 + 2);
      if ((_DWORD)v123)
      {
        v133 = 0;
        do
        {
          strncpy((char *)(*a3 + v131 + v133), __s, v214);
          v133 += v214;
          --v123;
        }
        while (v123);
      }
      v134 = *v217;
      *(_DWORD *)(*v217 + 16) += v204;
      v111 += v204;
      v135 = *a10;
      if (*a10 <= v213)
      {
        v96 = v210;
        v130 = v203;
      }
      else
      {
        v136 = v131 + v216;
        v137 = v200;
        v138 = (unsigned int *)(v134 + 32 * v200 + 12);
        v96 = v210;
        v130 = v203;
        do
        {
          if (*v138 >= v136)
          {
            *v138 += v204;
            v135 = *a10;
          }
          ++v137;
          v138 += 8;
        }
        while (v137 < v135);
      }
      goto LABEL_166;
    }
    goto LABEL_229;
  }
  if (v114 > v117)
  {
    log_OutText(*(_QWORD *)(*v96 + 32), (uint64_t)"FE_CLCML", 5, 0, (uint64_t)"TYPE2 modification : hyphenate words (%u orthographic words, %u phonetic words)", v107, v108, v109, v114);
    v128 = a5 - 1;
    if (a5 != 1)
    {
      v129 = v114 - v117;
      while (*(_BYTE *)(*a3 + v128) == 32)
      {
        v128 = utf8_GetPreviousUtf8Offset(*a3, v128);
        if (!v128)
          goto LABEL_143;
      }
      while (*(_BYTE *)(*a3 + v128) != 32)
      {
        v128 = utf8_GetPreviousUtf8Offset(*a3, v128);
        if (!v128)
          goto LABEL_143;
      }
      while (v129)
      {
        while (*(_BYTE *)(*a3 + v128) == 32)
        {
          *(_BYTE *)(*a3 + v128) = 45;
          v128 = utf8_GetPreviousUtf8Offset(*a3, v128);
          if (!v128)
            goto LABEL_143;
        }
        --v129;
        while (*(_BYTE *)(*a3 + v128) != 32)
        {
          v128 = utf8_GetPreviousUtf8Offset(*a3, v128);
          if (!v128)
            goto LABEL_143;
        }
      }
    }
  }
LABEL_143:
  v130 = 0;
LABEL_166:
  v139 = strlen(a12);
  v140 = (char *)heap_Calloc(*(_QWORD **)(*v96 + 8), (v139 + 1), 1);
  v26 = v96;
  if (v140)
  {
    v141 = v140;
    strcpy(v140, a12);
    v142 = a10;
    v143 = *a10;
    v144 = v217;
    if (*a10 > v202)
    {
      v145 = v130;
      v146 = a9 + 2;
      memmove((void *)(*v217 + 32 * v146), (const void *)(*v217 + 32 * v202), 32 * (*a10 - v202));
      v147 = (void *)(*a7 + 4 * v146);
      v130 = v145;
      memmove(v147, (const void *)(*a7 + 4 * v202), 4 * (*a10 - v202));
      v142 = a10;
      v143 = *a10;
    }
    v26 = v210;
    *v142 = v143 + 1;
    v148 = *v217 + 32 * v202;
    *(_DWORD *)v148 = 21;
    *(_QWORD *)(v148 + 24) = v141;
    v149 = v130 * v214;
    v150 = *v217;
    v151 = (_DWORD *)(*v217 + 32 * v202);
    if (v149 + a5 <= v104)
      v152 = a5 + v216 + v149;
    else
      v152 = v216 + v104;
    v151[3] = v152;
    if (a9 == -1)
      v153 = 0;
    else
      v153 = *(_DWORD *)(v150 + 32 * a9 + 4);
    v151[1] = v153;
    v151[2] = 0;
    v151[4] = 0;
    *(_DWORD *)(*a7 + 4 * v202) = 1;
    if (*(_WORD *)(a2 + 260))
    {
      v154 = 0;
      while (1)
      {
        v215 = v154;
        v155 = a2 + 2 * v154;
        v157 = *(unsigned __int16 *)(v155 + 132);
        v156 = (_WORD *)(v155 + 132);
        v158 = v157 ? 3 : 1;
        v159 = heap_Realloc(*(uint64_t **)(*v26 + 8), *v144, 32 * (*v142 + v158));
        if (!v159)
          goto LABEL_229;
        *v217 = v159;
        v160 = heap_Realloc(*(uint64_t **)(*v26 + 8), *a7, 4 * (*a10 + v158));
        if (!v160)
          goto LABEL_229;
        *a7 = v160;
        v161 = strlen((const char *)*a3);
        if (*v156)
        {
          v162 = v161;
          v163 = 0;
          v164 = v206;
          v165 = v217;
          v26 = v210;
          do
          {
            if (utf8_BelongsToSet(1u, (_BYTE *)*a3, v164, v162))
            {
              ++v163;
              for (; v164 < v111; v164 = utf8_GetNextUtf8Offset((char *)*a3, v164))
              {
                if (!utf8_BelongsToSet(1u, (_BYTE *)*a3, v164, v162))
                  break;
              }
            }
            v164 = utf8_GetNextUtf8Offset((char *)*a3, v164);
            v166 = (unsigned __int16)*v156;
          }
          while (v163 < v166);
        }
        else
        {
          v166 = 0;
          v164 = v206;
          v165 = v217;
          v26 = v210;
        }
        if (v164 > v212)
        {
          v164 = utf8_GetPreviousUtf8Offset(*a3, v164);
          v166 = (unsigned __int16)*v156;
        }
        LODWORD(v167) = v213;
        v168 = *v165;
        v169 = v164 + v216;
        if (v166)
        {
          LODWORD(v167) = v213 - 1;
          do
            v167 = (v167 + 1);
          while (*(_DWORD *)(v168 + 32 * v167 + 12) + 1 < v169);
          v170 = (char *)heap_Calloc(*(_QWORD **)(*v26 + 8), 7, 1);
          if (!v170)
            goto LABEL_229;
          v171 = v170;
          v172 = (v167 + 1);
          strcpy(v170, "normal");
          memmove((void *)(*v217 + 32 * v172), (const void *)(*v217 + 32 * v167), 32 * (*a10 - v167));
          memmove((void *)(*a7 + 4 * v172), (const void *)(*a7 + 4 * v167), 4 * (*a10 - v167));
          ++*a10;
          v173 = *v217 + 32 * v167;
          *(_DWORD *)v173 = 21;
          *(_QWORD *)(v173 + 24) = v171;
          if (v164)
            v174 = v216 - 1 + v164;
          else
            v174 = v216;
          v168 = *v217;
          v175 = (_DWORD *)(*v217 + 32 * v167);
          v175[3] = v174;
          if ((_DWORD)v167)
            v176 = *(_DWORD *)(v168 + 32 * (v167 - 1) + 4);
          else
            v176 = 0;
          v26 = v210;
          v175[1] = v176;
          v175[2] = 0;
          v175[4] = 0;
          *(_DWORD *)(*a7 + 4 * v167) = 1;
          LODWORD(v167) = v167 + 1;
        }
        do
        {
          v177 = v167;
          v178 = *(_DWORD *)(v168 + 32 * v167 + 12);
          v167 = (v167 + 1);
        }
        while (v178 < v169);
        v179 = (char *)heap_Calloc(*(_QWORD **)(*v26 + 8), 4, 1);
        if (!v179)
          goto LABEL_229;
        v180 = v179;
        strcpy(v179, (const char *)(a2 + 4 * v215 + 262));
        memmove((void *)(*v217 + 32 * v167), (const void *)(*v217 + 32 * v177), 32 * (*a10 - v167 + 1));
        memmove((void *)(*a7 + 4 * v167), (const void *)(*a7 + 4 * v177), 4 * (*a10 - v167 + 1));
        v142 = a10;
        ++*a10;
        v181 = *v217 + 32 * v177;
        *(_DWORD *)v181 = 36;
        *(_QWORD *)(v181 + 24) = v180;
        v182 = *v217;
        v183 = (_DWORD *)(*v217 + 32 * v177);
        v183[3] = v169;
        if ((_DWORD)v167 == 1)
          v184 = 0;
        else
          v184 = *(_DWORD *)(v182 + 32 * (v167 - 2) + 4);
        v26 = v210;
        v183[1] = v184;
        v183[2] = 0;
        v183[4] = 0;
        *(_DWORD *)(*a7 + 4 * v177) = 1;
        if (*v156)
        {
          if (v215)
            v185 = *(unsigned __int16 *)(a2 + 2 * (v215 - 1) + 132);
          else
            v185 = 0;
          if (v185 >= (unsigned __int16)*v156)
          {
            v186 = 0;
          }
          else
          {
            v186 = 0;
            do
            {
              v187 = __dst[v186];
              if (v187 == 95 || v187 == 35)
                ++v185;
              v186 = (unsigned __int16)utf8_GetNextUtf8Offset(__dst, (unsigned __int16)v186);
            }
            while (v185 < (unsigned __int16)*v156);
          }
          v26 = v210;
          v188 = strlen(&__dst[v186]);
          v189 = (char *)heap_Calloc(*(_QWORD **)(*v210 + 8), (v188 + 1), 1);
          if (!v189)
            goto LABEL_229;
          __src = v189;
          strcpy(v189, &__dst[v186]);
          v190 = &__dst[(unsigned __int16)utf8_GetPreviousUtf8Offset((uint64_t)__dst, v186)];
          *(_WORD *)v190 = 20;
          strcat(v190, "EXTCLC");
          log_OutText(*(_QWORD *)(*v210 + 32), (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Inserting phon marker with transcription %s at position %d", v191, v192, v193, v210[121]);
          v194 = (v167 + 1);
          memmove((void *)(*v217 + 32 * v194), (const void *)(*v217 + 32 * v167), 32 * (*a10 - v167));
          memmove((void *)(*a7 + 4 * v194), (const void *)(*a7 + 4 * v167), 4 * (*a10 - v167));
          v142 = a10;
          ++*a10;
          v195 = *v217 + 32 * v167;
          *(_DWORD *)v195 = 34;
          *(_QWORD *)(v195 + 24) = __src;
          v196 = *v217;
          v197 = (_DWORD *)(*v217 + 32 * v167);
          v197[3] = v169;
          if ((_DWORD)v167)
            v198 = *(_DWORD *)(v196 + 32 * v177 + 4);
          else
            v198 = 0;
          v197[1] = v198;
          v197[2] = 0;
          v197[4] = 0;
          *(_DWORD *)(*a7 + 4 * v167) = 1;
          v213 = v167 + 1;
          __dst = __src;
          v144 = v217;
          v26 = v210;
        }
        else
        {
          v213 = v167 + 1;
          v144 = v217;
        }
        v154 = v215 + 1;
        if (v215 + 1 >= (unint64_t)*(unsigned __int16 *)(a2 + 260))
          return v207;
      }
    }
    return v207;
  }
  else
  {
LABEL_229:
    log_OutPublic(*(_QWORD *)(*v26 + 32), (uint64_t)"FE_CLCML", 60000, 0, v22, v23, v24, v25, v199);
    return 2358255626;
  }
}

uint64_t fe_clcml_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 62600, 1000) & 0x80000000) != 0)
    return 2358255624;
  else
    return synstrmaux_CloseStreams((_WORD *)(a1 + 80), *(_QWORD *)(a1 + 24));
}

uint64_t fe_clcml_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2358255617;
  result = 0;
  *a2 = &IFeClcml;
  return result;
}

char *hlp_StringAppend(uint64_t *a1, char *a2, char *__s, unsigned int *a4)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;

  if (!__s)
    return a2;
  v8 = strlen(__s);
  v9 = v8;
  if (!a2)
  {
    v12 = v8 + 129;
    v13 = (char *)heap_Alloc((uint64_t)a1, v8 + 129);
    a2 = v13;
    if (!v13)
      return a2;
    if (a4)
      *a4 = v12;
    v10 = 0;
    *v13 = 0;
LABEL_11:
    strncat(a2, __s, v9);
    a2[v10 + v9] = 0;
    return a2;
  }
  if (!a4)
    return 0;
  v10 = strlen(a2);
  if (v9 + v10 + 1 < *a4)
    goto LABEL_11;
  v11 = v9 + *a4 + 129;
  *a4 = v11;
  a2 = (char *)heap_Realloc(a1, (uint64_t)a2, v11);
  if (a2)
    goto LABEL_11;
  return a2;
}

uint64_t clcpipeline_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t ReadOnly;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int16 i;
  uint64_t *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _WORD *v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  int v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  _BYTE *v93;
  uint64_t Object;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unint64_t v98;
  _QWORD *v99;
  uint64_t *v100;
  uint64_t NullHandle;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  _DWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t v118;
  char *v119;
  uint64_t *v120;
  uint64_t *v121;
  const char *v122;
  uint64_t *v123;

  v122 = 0;
  v123 = 0;
  v120 = 0;
  v121 = 0;
  inited = InitRsrcFunction(a1, a2, &v121);
  if ((inited & 0x80000000) != 0)
    return inited;
  v13 = 2358255626;
  *a5 = 0;
  *a6 = 0;
  if ((ssftmap_FindReadOnly(a3, (uint64_t)"BROKERSTRING", &v123) & 0x80000000) != 0 || !*v123)
    return 2358255623;
  log_OutText(v121[4], (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"clcpipeline_ObjOpen : Begin %s", v14, v15, v16, *v123);
  v17 = (_QWORD *)heap_Calloc((_QWORD *)v121[1], 1, 48);
  v22 = (uint64_t)v17;
  if (!v17)
  {
    log_OutPublic(v121[4], (uint64_t)"FE_CLCML", 16000, 0, v18, v19, v20, v21, v111);
    v80 = 0;
    goto LABEL_52;
  }
  v112 = a4;
  v113 = a6;
  v114 = a2;
  v115 = a3;
  v117 = a5;
  v118 = 0;
  *v17 = v121;
  v23 = v17 + 3;
  v24 = 1;
  do
  {
    ReadOnly = ssftmap_FindReadOnly(a3, (uint64_t)"COMPONENTS", &v123);
    if ((ReadOnly & 0x80000000) != 0
      || (ReadOnly = ssftmap_IteratorOpen(v123[2], 0, 0, (uint64_t)&v120), (ReadOnly & 0x80000000) != 0))
    {
      v13 = ReadOnly;
      v81 = v121[4];
      v111 = "clcpipeline";
      v83 = "%s%s";
      v82 = 16072;
      goto LABEL_49;
    }
    for (i = 0; (ssftmap_IteratorNext(v120, &v122, &v123) & 0x80000000) == 0; ++i)
    {
      if (v24 == 1)
      {
        if (!v122 || strcmp(v122, "COMPONENT"))
        {
          log_OutPublic(v121[4], (uint64_t)"FE_CLCML", 16091, "%s%s%s%s", v30, v31, v32, v33, "clcpipeline");
          goto LABEL_40;
        }
        if (!*v123 || !*(_BYTE *)*v123)
        {
          log_OutPublic(v121[4], (uint64_t)"FE_CLCML", 16092, "%s%s", v30, v31, v32, v33, "clcpipeline");
LABEL_40:
          v13 = 2358255620;
          goto LABEL_50;
        }
      }
      else
      {
        v35 = v121;
        v36 = (char *)*v123;
        if (*v23)
        {
          v37 = heap_strdup(v121[1], (char *)*v123);
          v38 = i + 2;
          *(_QWORD *)(*(_QWORD *)(v22 + 40) + 8 * v38) = v37;
          compstats_Start(*(_QWORD *)(v22 + 24), *(_QWORD *)(v22 + 32), v38, v39, v40, v41, v42, v43);
        }
        v44 = (_WORD *)heap_Calloc((_QWORD *)v35[1], 1, 40);
        if (!v44)
        {
          v81 = v35[4];
          goto LABEL_42;
        }
        v45 = v44;
        *(_QWORD *)(*(_QWORD *)(v22 + 8) + 8 * i) = v44;
        *v44 = 1;
        v46 = heap_strdup(v35[1], v36);
        v45[1] = v46;
        if (!v46)
        {
          log_OutPublic(v35[4], (uint64_t)"FE_CLCML", 16000, 0, v47, v48, v49, v50, v111);
LABEL_45:
          v84 = v45[1];
          a5 = v117;
          v80 = v118;
          if (v84)
            heap_Free((_QWORD *)v35[1], v84);
          heap_Free((_QWORD *)v35[1], (uint64_t)v45);
          *(_QWORD *)(*(_QWORD *)(v22 + 8) + 8 * i) = 0;
          goto LABEL_52;
        }
        v45[3] = safeh_GetNullHandle();
        v45[4] = v51;
        v52 = brk_InterfaceQuery(v35[3]);
        if ((v52 & 0x80000000) != 0)
        {
          v13 = v52;
          goto LABEL_45;
        }
        if (*v23)
          compstats_Stop(*v23, *(_QWORD *)(v22 + 32), i + 2, v53, v54, v55, v56, v57);
      }
    }
    ssftmap_IteratorClose((uint64_t)v120);
    v120 = 0;
    if (v24 != 1)
    {
LABEL_30:
      a3 = v115;
      continue;
    }
    v58 = heap_Calloc((_QWORD *)v121[1], i, 8);
    *(_QWORD *)(v22 + 8) = v58;
    if (!v58)
    {
      v81 = v121[4];
LABEL_42:
      v82 = 16000;
      v83 = 0;
LABEL_49:
      log_OutPublic(v81, (uint64_t)"FE_CLCML", v82, v83, v26, v27, v28, v29, v111);
      goto LABEL_50;
    }
    *(_WORD *)(v22 + 16) = i;
    v63 = heap_Calloc((_QWORD *)v121[1], i, 16);
    v64 = v121[4];
    v118 = v63;
    if (!v63)
    {
      log_OutPublic(v64, (uint64_t)"FE_CLCML", 16000, 0, v59, v60, v61, v62, v111);
      v80 = 0;
      a5 = v117;
      goto LABEL_52;
    }
    if (log_GetLogLevel(v64) < 2)
      goto LABEL_30;
    compstats_ObjOpen(a1, v114, *(unsigned __int16 *)(v22 + 16) + 3, v22 + 24);
    compstats_Start(*(_QWORD *)(v22 + 24), *(_QWORD *)(v22 + 32), 0, v65, v66, v67, v68, v69);
    a3 = v115;
    if (*(_QWORD *)(v22 + 24))
    {
      v70 = heap_Calloc((_QWORD *)v121[1], *(unsigned __int16 *)(v22 + 16) + 3, 8);
      *(_QWORD *)(v22 + 40) = v70;
      if (v70)
      {
        **(_QWORD **)(v22 + 40) = heap_strdup(v121[1], "Total");
        *(_QWORD *)(*(_QWORD *)(v22 + 40) + 8) = heap_strdup(v121[1], "TTSEG input CB");
        *(_QWORD *)(*(_QWORD *)(v22 + 40) + 8 * *(unsigned __int16 *)(v22 + 16) + 16) = heap_strdup(v121[1], "TTSEG output CB");
      }
      else
      {
        compstats_ObjClose(*(_QWORD *)(v22 + 24), *(_QWORD *)(v22 + 32));
        *(_QWORD *)(v22 + 24) = safeh_GetNullHandle();
        *(_QWORD *)(v22 + 32) = v72;
      }
    }
  }
  while (v24++ < 2);
  v86 = ssftmap_FindReadOnly(a3, (uint64_t)"PARAMETERS", &v123);
  a5 = v117;
  if ((v86 & 0x80000000) == 0 && (ssftmap_IteratorOpen(v123[2], 0, 0, (uint64_t)&v120) & 0x80000000) == 0)
  {
    while ((ssftmap_IteratorNext(v120, &v122, &v123) & 0x80000000) == 0)
    {
      if (v122 && *v122)
      {
        if (*v123)
          v87 = (char *)*v123;
        else
          v87 = &byte_1DEBD87CE;
        paramc_ParamSetStr(v121[5], (uint64_t)v122, v87);
      }
    }
    ssftmap_IteratorClose((uint64_t)v120);
    v120 = 0;
  }
  if ((ssftmap_FindReadOnly(a3, (uint64_t)"OBJECTS", &v123) & 0x80000000) == 0
    && (ssftmap_IteratorOpen(v123[2], 0, 0, (uint64_t)&v120) & 0x80000000) == 0)
  {
    if ((ssftmap_IteratorNext(v120, &v122, &v123) & 0x80000000) == 0)
    {
      while (1)
      {
        v92 = v122;
        if (!v122 || (v93 = (_BYTE *)*v123) == 0 || !*v93)
        {
          log_OutPublic(v121[4], (uint64_t)"FE_CLCML", 16099, "%s%s%s%s", v88, v89, v90, v91, "clcpipeline");
          v13 = 2358255620;
          goto LABEL_51;
        }
        if (strcmp(v122, "INET"))
        {
          Object = clcpipeline_LoadObject(a1, v114, (uint64_t)v92, (uint64_t)v93, v112, v113);
          if ((Object & 0x80000000) != 0)
            break;
          if (!strcmp(v122, "FE_DCTLKP") && !strcmp((const char *)*v123, "fe/fe_dctlkp"))
          {
            Object = clcpipeline_LoadObject(a1, v114, (uint64_t)"FE_NN", (uint64_t)"fe/fe_nn", v112, v113);
            if ((Object & 0x80000000) != 0)
              break;
          }
        }
        if ((ssftmap_IteratorNext(v120, &v122, &v123) & 0x80000000) != 0)
          goto LABEL_86;
      }
LABEL_131:
      v13 = Object;
      goto LABEL_51;
    }
LABEL_86:
    Object = clcpipeline_LoadObject(a1, v114, (uint64_t)"CLMOBJECT", (uint64_t)"clmobjectinterface", v112, v113);
    if ((Object & 0x80000000) != 0)
      goto LABEL_131;
    ssftmap_IteratorClose((uint64_t)v120);
    v120 = 0;
  }
  v95 = clcpipeline_disclose_location_of_fe_clm_component((uint64_t)v121, v22);
  v96 = v95;
  if ((v95 & 0x80000000) != 0)
  {
    v13 = v95;
    goto LABEL_51;
  }
  v97 = *(unsigned __int16 *)(v22 + 16);
  if (!*(_WORD *)(v22 + 16))
  {
LABEL_104:
    v104 = ssftmap_FindReadOnly(v115, (uint64_t)"RESOURCES", &v123);
    if ((v104 & 0x80000000) != 0)
    {
      a5 = v117;
      v80 = v118;
    }
    else
    {
      v104 = ssftmap_IteratorOpen(v123[2], 0, 0, (uint64_t)&v120);
      v105 = v104;
      a5 = v117;
      v80 = v118;
      if ((v104 & 0x80000000) == 0)
        goto LABEL_111;
    }
    v105 = 0;
    if ((v104 & 0x1FFF) != 0xD && (v104 & 0x1FFF) != 0x14)
    {
      v13 = v104;
      goto LABEL_52;
    }
LABEL_111:
    v116 = (uint64_t *)(v22 + 24);
    v119 = 0;
    while ((ssftmap_IteratorNext(v120, &v122, &v123) & 0x80000000) == 0)
    {
      if (v122 && !strcmp(v122, "RESOURCE"))
      {
        if (*v123 && *(_BYTE *)*v123)
        {
          v110 = v123[1];
          if (v110 && (ssftmap_FindReadOnly(v110, (uint64_t)"content-type", &v119) & 0x80000000) == 0 && v119 && *v119)
          {
            log_OutText(v121[4], (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"ResourceLoad: %s, %s", v107, v108, v109, *v123);
            clcpipeline_ResourceLoad((uint64_t *)v22, 1, v119, (const char *)*v123, 0, 0, 0);
          }
          else
          {
            log_OutPublic(v121[4], (uint64_t)"FE_CLCML", 16095, "%s%s", v106, v107, v108, v109, "clcpipeline");
            v105 = 2358255620;
          }
        }
        else
        {
          log_OutPublic(v121[4], (uint64_t)"FE_CLCML", 16094, "%s%s", v106, v107, v108, v109, "clcpipeline");
        }
      }
      else
      {
        log_OutPublic(v121[4], (uint64_t)"FE_CLCML", 16093, "%s%s%s%s", v106, v107, v108, v109, "clcpipeline");
      }
    }
    ssftmap_IteratorClose((uint64_t)v120);
    v120 = 0;
    if (*v116)
    {
      a5 = v117;
      v80 = v118;
      if (*(_QWORD *)(v22 + 40))
      {
        compstats_Stop(*v116, *(_QWORD *)(v22 + 32), 0, v75, v76, v77, v78, v79);
        compstats_Log(*(_QWORD *)(v22 + 24), *(_QWORD *)(v22 + 32), v121[4], "Pipeline Open", *(_QWORD *)(v22 + 40), 0, 0);
      }
      v13 = v105;
      goto LABEL_52;
    }
    v13 = v105;
    a5 = v117;
    v80 = v118;
    if (v118)
      goto LABEL_55;
    goto LABEL_56;
  }
  v98 = 0;
  v99 = (_QWORD *)(v118 + 8);
  while (1)
  {
    v100 = *(uint64_t **)(*(_QWORD *)(v22 + 8) + 8 * v98);
    if (v100)
      break;
LABEL_103:
    ++v98;
    v99 += 2;
    if (v98 >= v97)
      goto LABEL_104;
  }
  if (*v23)
    compstats_Start(*v23, *(_QWORD *)(v22 + 32), (v98 + 2), v75, v76, v77, v78, v79);
  NullHandle = safeh_GetNullHandle();
  if (safeh_HandlesEqual(v100[3], v100[4], NullHandle, v102))
  {
    log_OutText(v121[4], (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Open component: %s", v77, v78, v79, v100[1]);
    v103 = (*(uint64_t (**)(_QWORD, _QWORD, _WORD *, uint64_t, uint64_t *))(v100[2] + 32))(*(v99 - 1), *v99, a1, v114, v100 + 3);
    goto LABEL_98;
  }
  if (*(_QWORD *)(v100[2] + 48))
  {
    log_OutText(v121[4], (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Reopen component: %s", v77, v78, v79, v100[1]);
    *v113 = 1;
    v103 = (*(uint64_t (**)(uint64_t, uint64_t))(v100[2] + 48))(v100[3], v100[4]);
LABEL_98:
    v96 = v103;
  }
  if (*v23)
    compstats_Stop(*v23, *(_QWORD *)(v22 + 32), (v98 + 2), v75, v76, v77, v78, v79);
  if ((v96 & 0x80000000) == 0)
  {
    v97 = *(unsigned __int16 *)(v22 + 16);
    goto LABEL_103;
  }
  log_OutPublic(v121[4], (uint64_t)"FE_CLCML", 16001, "%s%s%s%x", v76, v77, v78, v79, "component");
  v13 = v96;
LABEL_50:
  a5 = v117;
LABEL_51:
  v80 = v118;
LABEL_52:
  if (v120)
    ssftmap_IteratorClose((uint64_t)v120);
  if (v80)
LABEL_55:
    heap_Free((_QWORD *)v121[1], v80);
LABEL_56:
  if ((v13 & 0x80000000) != 0)
  {
    if (v22)
      clcpipeline_ObjClose(v22, v73, v74, v75, v76, v77, v78, v79);
  }
  else
  {
    *a5 = v22;
  }
  log_OutText(v121[4], (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"clcpipeline_ObjOpen : End (%x)", v77, v78, v79, v13);
  return v13;
}

uint64_t clcpipeline_LoadObject(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t NullHandle;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;

  v47 = 0;
  v48 = a3;
  NullHandle = safeh_GetNullHandle();
  v46 = v12;
  v44 = 0;
  inited = InitRsrcFunction(a1, a2, &v47);
  if ((inited & 0x80000000) == 0)
  {
    if ((objc_GetObject(v47[6], a3, &v44) & 0x80000000) != 0)
    {
      v43 = 0;
      v41 = 0u;
      v42 = 0u;
      LOBYTE(v41) = 1;
      v23 = brk_InterfaceQuery(v47[3]);
      if ((v23 & 0x80000000) != 0)
        return v23;
      log_OutText(v47[4], (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Open component: %s", v24, v25, v26, a4);
      v27 = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, uint64_t, __int128 *))(*((_QWORD *)&v41 + 1) + 32))(NullHandle, v46, a1, a2, &v42);
      if ((v27 & 0x80000000) != 0)
      {
        inited = v27;
        log_OutPublic(v47[4], (uint64_t)"FE_CLCML", 16001, "%s%s%s%x", v28, v29, v30, v31, "component");
        brk_InterfaceRelease(v47[3], *((uint64_t *)&v41 + 1));
        return inited;
      }
      inited = objc_RegisterObject(v47[6], a3, &v41);
      if ((inited & 0x80000000) != 0)
      {
        log_OutPublic(v47[4], (uint64_t)"FE_CLCML", 16001, "%s%s%s%x", v32, v33, v34, v35, "component");
      }
      else
      {
        if (!a5 || vector_Add(a5, &v48))
          return inited;
        log_OutPublic(v47[4], (uint64_t)"FE_CLCML", 16000, 0, v36, v37, v38, v39, v40);
        inited = 2358255626;
      }
      (*(void (**)(_QWORD, _QWORD))(*((_QWORD *)&v41 + 1) + 40))(v42, *((_QWORD *)&v42 + 1));
      brk_InterfaceRelease(v47[3], *((uint64_t *)&v41 + 1));
      return inited;
    }
    v17 = v44[1];
    if (*(_QWORD *)(v17 + 48))
    {
      log_OutText(v47[4], (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Reopen object: %s", v14, v15, v16, a3);
      if (a6)
        *a6 = 1;
      inited = (*(uint64_t (**)(_QWORD, _QWORD))(v17 + 48))(v44[2], v44[3]);
      if ((inited & 0x80000000) != 0)
        log_OutPublic(v47[4], (uint64_t)"FE_CLCML", 16001, "%s%s%s%x", v18, v19, v20, v21, "component");
    }
    objc_ReleaseObject(v47[6], a3);
  }
  return inited;
}

uint64_t clcpipeline_disclose_location_of_fe_clm_component(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  unsigned __int16 v9;
  uint64_t v10;
  const char *v11;
  unsigned int v12;

  v4 = paramc_ParamSetUInt(*(_QWORD *)(a1 + 40), (uint64_t)"fe_clm_component", 0);
  if ((v4 & 0x80000000) != 0)
    return v4;
  v5 = *(unsigned __int16 *)(a2 + 16);
  if (!*(_WORD *)(a2 + 16))
    return v4;
  v6 = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = -1;
  v9 = -1;
  do
  {
    v10 = *(_QWORD *)(v7 + 8 * v6);
    if (v10)
    {
      v11 = *(const char **)(v10 + 8);
      if (!strcmp(v11, "fe/fe_clm"))
      {
        v9 = v6;
      }
      else if (!strcmp(v11, "fe/fe_global"))
      {
        v8 = v6;
      }
    }
    ++v6;
  }
  while (v5 != v6);
  if (v9 == 0xFFFF || v8 == 0xFFFF)
    return v4;
  if (v8 >= v9)
    v12 = 1;
  else
    v12 = 2;
  return paramc_ParamSetUInt(*(_QWORD *)(a1 + 40), (uint64_t)"fe_clm_component", v12);
}

uint64_t clcpipeline_ResourceLoad(uint64_t *a1, int a2, char *a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Str;
  int v18;
  uint64_t v19;
  uint64_t ResourceOwner;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD, _QWORD, char *, const char *, uint64_t, uint64_t, __int128 *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v33[2];
  __int128 v34;
  _QWORD *v35;
  char v36[1024];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v14 = 2358255623;
  v35 = 0;
  *(_QWORD *)&v34 = safeh_GetNullHandle();
  *((_QWORD *)&v34 + 1) = v15;
  if (a1 && a3)
  {
    v16 = *a1;
    if (a4)
    {
      if (strstr(a3, ";loader=broker"))
      {
        *(_QWORD *)v33 = 0;
        Str = paramc_ParamGetStr(*(_QWORD *)(v16 + 40), (uint64_t)"langcode", v33);
        if ((Str & 0x80000000) != 0)
          return Str;
        v18 = brokeraux_ComposeBrokerString(v16, a4, 1, 1, *(char **)v33, 0, 0, v36, 0x400uLL);
        if (v18 < 0)
          return v18 | 0x8C902000;
        a4 = v36;
      }
    }
    else
    {
      a4 = &byte_1DEBD87CE;
    }
    if (a7)
    {
      *a7 = safeh_GetNullHandle();
      a7[1] = v19;
    }
    ResourceOwner = clcpipeline_FindResourceOwner((uint64_t)a1, a3, (uint64_t *)&v35);
    if ((ResourceOwner & 0x80000000) != 0)
    {
      v31 = ResourceOwner;
      log_OutPublic(*(_QWORD *)(v16 + 32), (uint64_t)"FE_CLCML", 16077, "%s%s%s%s", v21, v22, v23, v24, "uri");
      return v31;
    }
    else
    {
      v25 = *(uint64_t (**)(_QWORD, _QWORD, char *, const char *, uint64_t, uint64_t, __int128 *))(v35[2] + 64);
      if (v25)
      {
        v26 = v25(v35[3], v35[4], a3, a4, a5, a6, &v34);
        v14 = v26;
        if ((v26 & 0x80000000) != 0)
        {
          if (!a2 || (v26 & 0x1FFF) != 0x40C)
            log_OutPublic(*(_QWORD *)(v16 + 32), (uint64_t)"FE_CLCML", 16038, "%s%s%s%s%s%s%s%x", v27, v28, v29, v30, "component");
        }
        else if (a7)
        {
          *(_OWORD *)a7 = v34;
        }
      }
      else
      {
        log_OutPublic(*(_QWORD *)(v16 + 32), (uint64_t)"FE_CLCML", 16039, "%s%s%s%s%s%s", v21, v22, v23, v24, "component");
      }
    }
  }
  return v14;
}

uint64_t clcpipeline_ObjClose(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  uint64_t v20;
  unsigned __int16 *v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t NullHandle;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 v50;
  uint64_t v51;

  if (!a1)
    return 2358255622;
  v9 = *(_QWORD *)a1;
  if (*(_QWORD *)(a1 + 8))
  {
    v10 = *(_QWORD *)(a1 + 24);
    if (v10)
    {
      compstats_Reset(v10);
      compstats_Start(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), 0, v11, v12, v13, v14, v15);
    }
    v16 = *(_WORD *)(a1 + 16);
    if (v16)
    {
      v17 = 0;
      v18 = (unsigned __int16)(v16 - 1) + 2;
      v19 = v16 - 1;
      do
      {
        v20 = v19;
        v21 = *(unsigned __int16 **)(*(_QWORD *)(a1 + 8) + 8 * v19);
        if (v21)
        {
          v22 = *v21;
          v23 = v22 != 0;
          v24 = v22 - 1;
          if (v24 != 0 && v23)
          {
            *v21 = v24;
          }
          else
          {
            NullHandle = safeh_GetNullHandle();
            if (!safeh_HandlesEqual(*((_QWORD *)v21 + 3), *((_QWORD *)v21 + 4), NullHandle, v26))
            {
              log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Close component: %s", v27, v28, v29, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v19) + 8));
              v35 = *(_QWORD *)(a1 + 24);
              if (v35)
                compstats_Start(v35, *(_QWORD *)(a1 + 32), v18, v30, v31, v32, v33, v34);
              v36 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * v19);
              v42 = (*(uint64_t (**)(_QWORD, _QWORD))(v36[2] + 40))(v36[3], v36[4]);
              v43 = *(_QWORD *)(a1 + 24);
              if (v43)
                compstats_Stop(v43, *(_QWORD *)(a1 + 32), v18, v37, v38, v39, v40, v41);
              if ((v42 & 0x80000000) != 0)
              {
                log_OutPublic(*(_QWORD *)(v9 + 32), (uint64_t)"FE_CLCML", 16002, "%s%s%s%x", v38, v39, v40, v41, "component");
                if ((int)v17 >= 0)
                  v17 = v42;
                else
                  v17 = v17;
              }
            }
            v44 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v19);
            v45 = *(_QWORD *)(v44 + 16);
            if (v45)
            {
              v46 = brk_InterfaceRelease(*(_QWORD *)(v9 + 24), v45);
              if (v46 >= 0 || (int)v17 <= -1)
                v17 = v17;
              else
                v17 = v46;
              v44 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v19);
            }
            heap_Free(*(_QWORD **)(v9 + 8), *(_QWORD *)(v44 + 8));
            heap_Free(*(_QWORD **)(v9 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v19));
          }
        }
        v18 = (v18 - 1);
        --v19;
      }
      while (v20);
    }
    else
    {
      v17 = 0;
    }
    v48 = *(_QWORD *)(a1 + 24);
    if (v48)
    {
      compstats_Stop(v48, *(_QWORD *)(a1 + 32), 0, a4, a5, a6, a7, a8);
      compstats_Log(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(v9 + 32), "Pipeline Close", *(_QWORD *)(a1 + 40), 0, 0);
    }
    heap_Free(*(_QWORD **)(v9 + 8), *(_QWORD *)(a1 + 8));
  }
  else
  {
    v17 = 0;
  }
  v49 = *(_QWORD *)(a1 + 24);
  if (v49)
    compstats_ObjClose(v49, *(_QWORD *)(a1 + 32));
  if (*(_QWORD *)(a1 + 40))
  {
    v50 = 0;
    do
    {
      v51 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v50);
      if (v51)
        heap_Free(*(_QWORD **)(v9 + 8), v51);
      ++v50;
    }
    while (*(unsigned __int16 *)(a1 + 16) + 3 > v50);
    heap_Free(*(_QWORD **)(v9 + 8), *(_QWORD *)(a1 + 40));
  }
  heap_Free(*(_QWORD **)(v9 + 8), a1);
  return v17;
}

uint64_t clcpipeline_FindResourceOwner(uint64_t a1, const char *a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)(_QWORD, _QWORD, uint64_t *);
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  const char *v14;
  size_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v20;

  v3 = 2358255623;
  if (a1 && a2 && *a2)
  {
    v7 = 0;
    *a3 = 0;
    while (v7 < *(unsigned __int16 *)(a1 + 16))
    {
      v20 = 0;
      v8 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * v7);
      v9 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t *))(v8[2] + 56);
      if (v9)
      {
        v10 = v9(v8[3], v8[4], &v20);
        v11 = *a3;
        if ((v10 & 0x80000000) == 0)
        {
          v12 = v20;
          if (v20)
          {
            if (v11)
              return 0;
            v13 = 0;
            do
            {
              v14 = *(const char **)(v12 + 8 * v13);
              if (!v14)
                break;
              v15 = strlen(*(const char **)(v12 + 8 * v13));
              if (!strncmp(a2, v14, v15)
                && ((v17 = a2[v15], v17 != 59) ? (v18 = v17 == 0) : (v18 = 1), v18))
              {
                v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v7);
                *a3 = v11;
                v16 = v11;
              }
              else
              {
                v16 = 0;
              }
              ++v13;
            }
            while (!v16);
          }
        }
      }
      else
      {
        v11 = 0;
      }
      ++v7;
      if (v11)
        return 0;
    }
    return 2358255636;
  }
  return v3;
}

uint64_t clcpipeline_UnloadObjects(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t inited;
  int i;
  int Size;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;

  v20 = 0;
  v21 = 0;
  v19 = 0;
  inited = InitRsrcFunction(a1, a2, &v21);
  if ((inited & 0x80000000) == 0)
  {
    for (i = 1; i != 3; ++i)
    {
      Size = vector_GetSize(a3);
      if (Size)
      {
        v7 = Size - 1;
        do
        {
          if (!vector_GetElemAt(a3, v7, &v20))
            break;
          if ((objc_GetObject(v21[6], *v20, &v19) & 0x80000000) == 0)
          {
            objc_ReleaseObject(v21[6], *v20);
            if (i == 1)
            {
              v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v19[1] + 40))(v19[2], v19[3]);
              if (v8 < 0)
              {
                v13 = v8;
                log_OutPublic(v21[4], (uint64_t)"FE_CLCML", 16100, "%s%x%s%s", v9, v10, v11, v12, "lherror");
              }
              else
              {
                v13 = brk_InterfaceRelease(v21[3], v19[1]);
              }
            }
            else
            {
              v13 = objc_UnregisterObject(v21[6], *v20);
              if (v13 < 0)
                log_OutPublic(v21[4], (uint64_t)"FE_CLCML", 16101, "%s%x%s%s", v14, v15, v16, v17, "lherror");
            }
            if (v13 >= 0)
              inited = inited;
            else
              inited = v13;
          }
          --v7;
        }
        while (v7 != -1);
      }
    }
  }
  return inited;
}

uint64_t fe_deinitlingdb_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, int a4, uint64_t a5)
{
  uint64_t inited;
  uint64_t Object;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;

  v22 = 0;
  v23 = 0;
  v20 = 0;
  v21 = 0;
  v19 = 0;
  if (!a5)
    return 2308972551;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v23);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = objc_GetObject(v23[6], (uint64_t)"LINGDB", &v21);
  if ((inited & 0x80000000) != 0)
    return inited;
  Object = objc_GetObject(v23[6], (uint64_t)"SYNTHSTREAM", &v22);
  v8 = v23[6];
  if ((Object & 0x80000000) != 0)
  {
    v16 = "LINGDB";
LABEL_15:
    objc_ReleaseObject(v8, (uint64_t)v16);
    return Object;
  }
  Object = objc_GetObject(v8, (uint64_t)"FE_DEPES", &v20);
  if ((Object & 0x80000000) != 0)
  {
    objc_ReleaseObject(v23[6], (uint64_t)"LINGDB");
    v8 = v23[6];
    v16 = "SYNTHSTREAM";
    goto LABEL_15;
  }
  v9 = heap_Alloc(v23[1], 928);
  if (v9)
  {
    v14 = v9;
    *(_QWORD *)v9 = v23;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v21 + 8);
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(v22 + 8);
    v15 = v20;
    *(_QWORD *)(v9 + 40) = *(_QWORD *)(v20 + 8);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v15 + 16);
    *(_DWORD *)(v9 + 920) = 0;
    if ((paramc_ParamGetUInt(v23[5], (uint64_t)"usewordorthography", &v19) & 0x80000000) == 0 && v19 == 1)
      *(_DWORD *)(v14 + 920) = 1;
    *(_QWORD *)a5 = v14;
    *(_DWORD *)(a5 + 8) = 62337;
  }
  else
  {
    log_OutPublic(v23[4], (uint64_t)"FE_DEINITLINGDB", 31000, 0, v10, v11, v12, v13, v18);
    objc_ReleaseObject(v23[6], (uint64_t)"LINGDB");
    objc_ReleaseObject(v23[6], (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(v23[6], (uint64_t)"FE_DEPES");
    return 2308972554;
  }
  return Object;
}

uint64_t fe_deinitlingdb_ObjClose(uint64_t a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 62337, 928);
  if ((result & 0x80000000) != 0)
    return 2308972552;
  if (a1)
  {
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"LINGDB");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"FE_DEPES");
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), a1);
    return 0;
  }
  return result;
}

uint64_t fe_deinitlingdb_ObjReopen(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 62337, 928);
  if ((int)result >= 0)
    return result;
  else
    return 2308972552;
}

uint64_t fe_deinitlingdb_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  if ((safeh_HandleCheck(a1, a2, 62337, 928) & 0x80000000) != 0)
    return 2308972552;
  synstrmaux_InitStreamOpener(a1 + 48, *(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_DEINITLINGDB");
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 48), (uint64_t)"text/plain;charset=depes", a1 + 872);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 48), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 888);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 48), (uint64_t)"text/x-realspeak-phonemes;charset=tts", a1 + 904);
  v7 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 48), *(_QWORD *)(a1 + 16), a3, a4);
  if ((v7 & 0x80000000) != 0)
  {
    v8 = v7;
LABEL_7:
    synstrmaux_CloseStreams((_WORD *)(a1 + 48), *(_QWORD *)(a1 + 16));
    return v8;
  }
  v8 = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"willbeprocessingdeinitlingdb", "yes");
  if ((v8 & 0x80000000) != 0)
    goto LABEL_7;
  return v8;
}

uint64_t fe_deinitlingdb_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t result;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned __int16 v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v34;
  size_t v35;
  int v36;
  BOOL v37;
  int v38;
  int v39;
  int v40;
  char *v41;
  int v42;
  uint64_t v43;
  char v44;
  __int16 v45;
  __int16 v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  int *v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  int *v58;
  int v59;
  uint64_t (*v60)(uint64_t, uint64_t, const char *, ...);
  uint64_t v61;
  uint64_t v62;
  size_t v63;
  int v64;
  unsigned __int16 v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;
  __int16 v69;
  size_t v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  int v78;
  unsigned __int16 v79;
  unsigned __int16 v80;
  unsigned int v81;
  int v82;
  int v83;
  char *v84;
  int v85;
  unsigned __int16 v86;
  uint64_t v87;
  int v88;
  char *__s;
  char v90;
  char v91;
  char v92[30];
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  __s = 0;
  v87 = 0;
  v84 = 0;
  v83 = 0;
  v79 = 0;
  v78 = 0;
  v77 = 0;
  result = safeh_HandleCheck(a1, a2, 62337, 928);
  if ((result & 0x80000000) != 0)
    return 2308972552;
  *a5 = 1;
  if (*(_QWORD *)(a1 + 872))
  {
    v88 = 0;
    v86 = 0;
    v85 = 0;
    v81 = 0;
    v82 = 0;
    v80 = 0;
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 272))(a3, a4, 98, 3, 0, 0);
    if (v10 < 0)
      goto LABEL_46;
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 8) + 104))(a3, a4, 1, 0, (char *)&v88 + 2);
    if (v10 < 0)
      goto LABEL_46;
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a1 + 8)
                                                                                              + 168))(a3, a4, HIWORD(v88), 3, 1, &v78, &v88);
    if (v10 < 0)
      goto LABEL_46;
    v10 = (*(uint64_t (**)(_QWORD, _QWORD, int *, uint64_t))(*(_QWORD *)(a1 + 40) + 112))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), &v82, 1);
    if (v10 < 0)
      goto LABEL_46;
    v10 = (*(uint64_t (**)(_QWORD, _QWORD, unsigned int *, _QWORD))(*(_QWORD *)(a1 + 40) + 112))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), &v81, 0);
    if (v10 < 0)
      goto LABEL_46;
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, int *))(*(_QWORD *)(a1 + 8) + 184))(a3, a4, HIWORD(v88), 0, &v83);
    v12 = *(_QWORD *)(a1 + 8);
    if (v11 < 0 || (unsigned __int16)v83 != 1)
    {
      v13 = 0;
      if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(v12 + 184))(a3, a4, HIWORD(v88), 1, &v83) & 0x80000000) != 0|| (unsigned __int16)v83 != 1|| (v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, int *))(*(_QWORD *)(a1 + 8)+ 176))(a3, a4, HIWORD(v88), 1, &v87, &v88), (v10 & 0x80000000) == 0)&& ((v13 = (unsigned __int16)v88, !(_WORD)v88)|| (v10 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 888), *(_QWORD *)(a1 + 896),
                     v87,
                     32 * (unsigned __int16)v88),
             (v10 & 0x80000000) == 0)))
      {
        v14 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 872), *(_QWORD *)(a1 + 880), "##", 3);
        if (v13)
        {
          v15 = 0;
          v16 = 0;
          v17 = (_DWORD *)(v87 + 12);
          v18 = v13;
          do
          {
            if (*(v17 - 3) == 8)
            {
              v19 = v17[3];
              v20 = v19 + v15;
              v21 = v19 + v16;
              if (*v17 == *(_DWORD *)(v87 + 12))
                v16 = v21;
              else
                v15 = v20;
            }
            v17 += 8;
            --v18;
          }
          while (v18);
        }
        else
        {
          v16 = 0;
          v15 = 0;
        }
        if (!(v16 | v15))
          goto LABEL_47;
        v90 = 35;
        if (v16)
        {
          v91 = 91;
          LH_utoa(v16, v92, 0xAu);
          v29 = strlen(&v90);
          *(&v90 + v29) = 93;
          *(&v90 + v29 + 1) = 35;
          v30 = v29 + 2;
        }
        else
        {
          v91 = 35;
          v30 = 2;
        }
        v10 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), &v90, v30);
        if ((v10 & 0x80000000) == 0)
        {
          if (v15)
          {
            v90 = 91;
            LH_utoa(v15, &v91, 0xAu);
            v31 = strlen(&v90);
            *(&v90 + v31) = 93;
            *(&v90 + v31 + 1) = 0;
            v32 = v31 + 2;
          }
          else
          {
            v90 = 0;
            v32 = 1;
          }
          v10 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), &v90, v32);
        }
      }
    }
    else
    {
      v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char **, int *))(v12 + 176))(a3, a4, HIWORD(v88), 0, &__s, &v88);
      if ((v10 & 0x80000000) == 0)
      {
        if ((unsigned __int16)v88 <= 1u)
        {
          v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 872), *(_QWORD *)(a1 + 880), "##", 3);
          goto LABEL_46;
        }
        v22 = strlen(__s);
        v10 = (*(uint64_t (**)(_QWORD, _QWORD, char *, _QWORD))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 872), *(_QWORD *)(a1 + 880), __s, (v22 + 1));
        if (v10 < 0)
          goto LABEL_46;
        v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, int *))(*(_QWORD *)(a1 + 8)
                                                                                             + 176))(a3, a4, HIWORD(v88), 1, &v87, &v88);
        if (v10 < 0)
          goto LABEL_46;
        v23 = (unsigned __int16)v88;
        v24 = v87 + 12;
        v25 = *(_DWORD *)(v87 + 12);
        v75 = v22;
        if ((_WORD)v88)
        {
          v26 = 0;
          v27 = 0;
          while (*(_DWORD *)v24 == v25)
          {
            if (*(_DWORD *)(v24 - 12) == 8)
              v27 += *(_WORD *)(v24 + 12);
            ++v26;
            v24 += 32;
            if ((unsigned __int16)v88 == v26)
            {
              v28 = (unsigned __int16)v88;
              goto LABEL_58;
            }
          }
          v28 = (unsigned __int16)v26;
        }
        else
        {
          v27 = 0;
          v28 = 0;
        }
LABEL_58:
        v34 = 1;
        (*(void (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "#", 1);
        if (v27)
        {
          v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "[", 1);
          if (v10 < 0)
            goto LABEL_46;
          LH_itoa(v27, &v90, 0xAu);
          v35 = strlen(&v90);
          v10 = (*(uint64_t (**)(_QWORD, _QWORD, char *, size_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), &v90, v35);
          if (v10 < 0)
            goto LABEL_46;
          v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "]", 1);
          if (v10 < 0)
            goto LABEL_46;
          v34 = strlen(&v90) + 3;
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)(a1 + 8) + 152))(a3, a4, 2, HIWORD(v88), &v83) & 0x80000000) != 0|| !(_WORD)v83)
        {
          v65 = v79;
        }
        else
        {
          v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 8)
                                                                                                 + 104))(a3, a4, 2, HIWORD(v88), &v86);
          if (v10 < 0)
            goto LABEL_46;
          v73 = 0;
          v74 = 0;
          v76 = 0;
          v72 = 1;
          while (v86)
          {
            v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 168))(a3, a4);
            if (v10 < 0)
              goto LABEL_46;
            v36 = v85;
            v37 = (v85 - 9) < 6 || v85 == 4;
            if (v37)
            {
              if (v85 == 11)
              {
                v38 = HIDWORD(v76);
              }
              else
              {
                v38 = HIDWORD(v76);
                if (HIDWORD(v76))
                {
                  v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "\x12\x10", 2);
                  if (v10 < 0)
                    goto LABEL_46;
                  v38 = 0;
                  v34 += 2;
                  v36 = v85;
                }
              }
              if (v36 != 12 && HIDWORD(v74))
              {
                v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "\x13\x10", 2);
                if (v10 < 0)
                  goto LABEL_46;
                HIDWORD(v74) = 0;
                v34 += 2;
              }
              v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(*(_QWORD *)(a1 + 8) + 168))(a3, a4, v86, 1, 1, &v80, &v88);
              if (v10 < 0)
                goto LABEL_46;
              HIDWORD(v76) = v38;
              v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(*(_QWORD *)(a1 + 8) + 168))(a3, a4, v86, 2, 1, &v79, &v88);
              if (v10 < 0)
                goto LABEL_46;
              v39 = v80;
              v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a1 + 8)
                                                                                                 + 176))(a3, a4, v86, 3, &v84, &v88);
              if (v10 < 0)
                goto LABEL_46;
              v40 = v34 - v39 + v76;
              v41 = v84;
              if (!v84 || !*v84)
                goto LABEL_106;
              v42 = strlen(v84);
              v73 = v42;
              if (!*(_DWORD *)(a1 + 920))
              {
                if ((_WORD)v42)
                {
                  v43 = 0;
                  v44 = 0;
                  do
                  {
                    while (v43 && v84[v43] == 42 && v84[(v43 - 1)] != 45)
                    {
                      v84[v43] = 45;
                      v44 = 1;
                      v37 = (unsigned __int16)v42 - 1 == v43++;
                      if (v37)
                      {
                        v41 = v84;
                        goto LABEL_100;
                      }
                    }
                    ++v43;
                  }
                  while ((unsigned __int16)v42 != v43);
                  v41 = v84;
                  if ((v44 & 1) == 0)
                    goto LABEL_102;
LABEL_100:
                  v45 = strlen(v41);
                  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, __int16 *))(*(_QWORD *)(a1 + 8) + 160))(a3, a4, v86, 3, (unsigned __int16)(v45 + 1), v41, &v77);
                  if (v10 < 0)
                    goto LABEL_46;
                  v41 = v84;
LABEL_102:
                  if (!v41)
                    goto LABEL_106;
                }
              }
              if (*v41)
              {
                if (v72)
                {
                  v46 = 0;
                  v47 = v40;
                }
                else
                {
                  v60 = *(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)(a1 + 16) + 104);
                  v61 = *(_QWORD *)(a1 + 904);
                  v62 = *(_QWORD *)(a1 + 912);
                  if (HIWORD(v83))
                  {
                    v10 = v60(v61, v62, "%#[", 3);
                    if (v10 < 0)
                      goto LABEL_46;
                    LH_itoa(HIWORD(v83), &v90, 0xAu);
                    v63 = strlen(&v90);
                    v10 = (*(uint64_t (**)(_QWORD, _QWORD, char *, size_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), &v90, v63);
                    if (v10 < 0)
                      goto LABEL_46;
                    v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "]", 1);
                    if (v10 < 0)
                      goto LABEL_46;
                    v47 = v40 + strlen(&v90) + 4;
                    v46 = v40;
                  }
                  else
                  {
                    v10 = v60(v61, v62, "-*", 2);
                    if (v10 < 0)
                      goto LABEL_46;
                    v46 = 0;
                    v47 = v40 + 2;
                  }
                }
                v64 = v85;
                if (v85 == 13)
                {
                  v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "\x10\x12", 2);
                  if (v10 < 0)
                    goto LABEL_46;
                  v47 += 2;
                  HIDWORD(v76) = 1;
                  v64 = v85;
                }
                if (v64 == 14)
                {
                  v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "\x10\x13", 2);
                  if (v10 < 0)
                    goto LABEL_46;
                  v40 = v47 + 2;
                  HIDWORD(v74) = 1;
                }
                else
                {
                  v40 = v47;
                }
                if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(*(_QWORD *)(a1 + 8) + 184))(a3, a4, v86, 8, &v83) & 0x80000000) != 0|| (unsigned __int16)v83 != 1)
                {
                  v72 = 0;
                  HIWORD(v83) = 0;
                }
                else
                {
                  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 8) + 168))(a3, a4, v86, 8, 1, (char *)&v83 + 2, &v88);
                  if (v10 < 0)
                    goto LABEL_46;
                  v72 = 0;
                }
              }
              else
              {
LABEL_106:
                v46 = 0;
              }
              v48 = v80;
              if (v28 >= v23)
              {
                v27 = 0;
              }
              else
              {
                v27 = 0;
                v49 = v87;
                v50 = v25 + (__int16)v80 + (__int16)v40;
                v51 = v25 + (__int16)v80 + v46;
                v52 = v74;
                while (1)
                {
                  v53 = v49 + 32 * v28;
                  v55 = *(_DWORD *)(v53 + 12);
                  v54 = (int *)(v53 + 12);
                  if (v48 < (unsigned __int16)(v55 - v25))
                    break;
                  *v54 = v50;
                  if (*(_DWORD *)(v49 + 32 * v28) == 8)
                  {
                    if (v28)
                    {
                      v56 = v28;
                      do
                      {
                        v57 = v49 + 32 * (v56 - 1);
                        v59 = *(_DWORD *)(v57 + 12);
                        v58 = (int *)(v57 + 12);
                        if (v59 == *v54)
                          *v58 = v51;
                        --v56;
                      }
                      while ((_WORD)v56);
                    }
                    v27 += *(_WORD *)(v49 + 32 * v28 + 24);
                    *v54 = v51;
                    v52 = v48;
                  }
                  if (++v28 >= v23)
                  {
                    LODWORD(v74) = v52;
                    v28 = v23;
                    goto LABEL_121;
                  }
                }
                LODWORD(v74) = v52;
              }
LABEL_121:
              LODWORD(v76) = v79;
              v34 = v48 - v79 + v40;
              if (v84 && *v84)
              {
                v10 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912));
                if (v10 < 0)
                  goto LABEL_46;
                v34 += v73;
              }
            }
            v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 8) + 120))(a3, a4, v86, &v86);
            if (v14 < 0)
              goto LABEL_47;
          }
          if (HIDWORD(v76))
          {
            v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "\x12\x10", 2);
            if (v10 < 0)
              goto LABEL_46;
            LOWORD(v34) = v34 + 2;
          }
          if (HIDWORD(v74))
          {
            v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "\x13\x10", 2);
            if (v10 < 0)
              goto LABEL_46;
            LOWORD(v34) = v34 + 2;
          }
          v65 = v79;
          if ((_WORD)v74 && (unsigned __int16)v74 == (unsigned __int16)(v79 - 1))
          {
LABEL_148:
            if (v28 >= v23)
            {
              v68 = v75;
            }
            else
            {
              v66 = v87 + 32 * v28 + 12;
              v67 = v23 - v28;
              v68 = v75;
              do
              {
                *(_DWORD *)v66 = v25 + (__int16)v34 + (__int16)v65 + 1;
                if (*(_DWORD *)(v66 - 12) == 8)
                  v27 += *(_WORD *)(v66 + 12);
                v66 += 32;
                --v67;
              }
              while (v67);
            }
            (*(void (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "#", 1);
            v69 = v34 - v68 + v65 + 1;
            if (v27)
            {
              v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "[", 1);
              if (v10 < 0)
                goto LABEL_46;
              LH_itoa(v27, &v90, 0xAu);
              v70 = strlen(&v90);
              v10 = (*(uint64_t (**)(_QWORD, _QWORD, char *, size_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), &v90, v70);
              if (v10 < 0)
                goto LABEL_46;
              v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "]", 1);
              if (v10 < 0)
                goto LABEL_46;
              v69 += strlen(&v90) + 2;
            }
            (*(void (**)(_QWORD, _QWORD, char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), &byte_1DEBD87CE, 1);
            *(_DWORD *)(v87 + 16) += v69;
            v71 = v81 + v69 + v82;
            v81 = 0;
            v82 = v71;
            v10 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 104))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
            if ((v10 & 0x80000000) == 0)
            {
              v10 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 104))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v81, 0);
              if ((v10 & 0x80000000) == 0)
                v10 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 888), *(_QWORD *)(a1 + 896), v87, (32 * v23));
            }
            goto LABEL_46;
          }
        }
        v27 = 0;
        goto LABEL_148;
      }
    }
LABEL_46:
    v14 = v10;
LABEL_47:
    if (v78)
      v14 = synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 48), *(_QWORD *)(a1 + 16));
    LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 64))(a3, a4);
    if (v14 > -1 && (int)result < 0)
      return result;
    else
      return v14;
  }
  return result;
}

uint64_t fe_deinitlingdb_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t result;

  if ((safeh_HandleCheck(a1, a2, 62337, 928) & 0x80000000) != 0)
    return 2308972552;
  result = synstrmaux_CloseStreams((_WORD *)(a1 + 48), *(_QWORD *)(a1 + 16));
  if ((result & 0x80000000) == 0)
    return paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"willbeprocessingdeinitlingdb", "no");
  return result;
}

uint64_t fe_deinitlingdb_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2308972545;
  result = 0;
  *a2 = &IFeDeinitlingdb;
  return result;
}

uint64_t sprop_str_realloc(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v3;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unsigned int v14;

  v3 = *(_DWORD *)(a2 + 16);
  if (a3 + 1 <= v3)
    return 0;
  if (v3 <= 1)
    v3 = 1;
  do
  {
    v6 = v3;
    v3 *= 2;
  }
  while (v6 < a3 + 1);
  v7 = heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)a2, v6);
  if (v7)
  {
    v12 = v7;
    result = 0;
    *(_QWORD *)a2 = v12;
    *(_DWORD *)(a2 + 16) = v6;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 39000, 0, v8, v9, v10, v11, v14);
    return 2409635850;
  }
  return result;
}

uint64_t sprop_str_dealloc(uint64_t a1, uint64_t *a2)
{
  if (*((_DWORD *)a2 + 4))
  {
    heap_Free(*(_QWORD **)(a1 + 8), *a2);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  a2[1] = 0;
  return 0;
}

uint64_t sprop_str_clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = 0;
    **(_BYTE **)a1 = 0;
  }
  return 0;
}

uint64_t sprop_str_cat(uint64_t a1, uint64_t a2, char *__s, unsigned int a4)
{
  unsigned int v4;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v4 = a4;
  v8 = *(unsigned int *)(a2 + 8);
  if (!a4)
    v4 = strlen(__s);
  v9 = v4 + v8;
  v10 = sprop_str_realloc(a1, a2, v4 + v8);
  if ((v10 & 0x80000000) == 0)
  {
    memcpy((void *)(*(_QWORD *)a2 + v8), __s, v4);
    *(_BYTE *)(*(_QWORD *)a2 + v9) = 0;
    *(_DWORD *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 12) += Utf8_LengthInUtf8chars((unint64_t)__s, v4);
  }
  return v10;
}

uint64_t sprop_str_copy(uint64_t a1, uint64_t a2, char *a3, unsigned int a4)
{
  uint64_t result;

  if (*(_DWORD *)(a2 + 16))
  {
    *(_QWORD *)(a2 + 8) = 0;
    **(_BYTE **)a2 = 0;
  }
  if (!a3)
    return 0;
  result = sprop_str_cat(a1, a2, a3, a4);
  if ((result & 0x80000000) == 0)
    return 0;
  return result;
}

uint64_t sprop_str_take_ownership(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_DWORD *)(a2 + 16))
  {
    heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_QWORD *)a2 = a3;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = a4;
  *(_DWORD *)(a2 + 8) = a4 - 1;
  *(_BYTE *)(a3 + (a4 - 1)) = 0;
  v8 = Utf8_LengthInUtf8chars(*(_QWORD *)a2, *(_DWORD *)(a2 + 8));
  *(_DWORD *)(a2 + 12) = v8;
  if (*(_DWORD *)(a2 + 8) != (_DWORD)v8)
    log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"utf8length = %d, byte length = %d", v9, v10, v11, v8);
  return 0;
}

uint64_t sprop_ne_load(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Str;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v36;
  uint64_t v37;
  _QWORD *v38;
  const char *v39;
  char *__s1;
  int v41[2];
  char v42[16];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v38 = 0;
  v39 = 0;
  *(_DWORD *)(a4 + 352) = 0;
  __s1 = 0;
  *(_QWORD *)v41 = 0;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  *(_OWORD *)v42 = 0u;
  v43 = 0u;
  Str = paramc_ParamGetStr(*(_QWORD *)(a3 + 40), (uint64_t)"langcode", v41);
  if ((Str & 0x80000000) != 0)
    return Str;
  Str = paramc_ParamGetStr(*(_QWORD *)(a3 + 40), (uint64_t)"voice", &__s1);
  if ((Str & 0x80000000) != 0)
    return Str;
  Str = paramc_ParamGetStr(*(_QWORD *)(a3 + 40), (uint64_t)"fecfg", &v39);
  if ((Str & 0x80000000) != 0)
    return Str;
  v9 = heap_Realloc(*(uint64_t **)(a3 + 8), *(_QWORD *)a4, 256);
  if (v9)
  {
    v14 = (char *)v9;
    *(_QWORD *)a4 = v9;
    v15 = __s1;
    if (strstr(__s1, "uni"))
    {
      __sprintf_chk(v42, 0, 0x80uLL, "crf/ne/%s/%s/ne", *(const char **)v41, v39);
      v16 = 0;
      __s1 = 0;
    }
    else
    {
      __sprintf_chk(v42, 0, 0x80uLL, "crf/ne/%s/%s/%s/ne", *(const char **)v41, v15, v39);
      v16 = __s1;
    }
    v17 = brokeraux_ComposeBrokerString(a3, v42, 1, 1, *(char **)v41, v16, 0, v14, 0x100uLL);
    if ((v17 & 0x80000000) == 0)
    {
      log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"broker string = %s", v18, v19, v20, *(_QWORD *)a4);
      if ((ssftriff_reader_ObjOpen(a1, a2, 2, *(const char **)a4, "CRPH", 1031, (uint64_t *)&v38) & 0x80000000) == 0)
      {
        v24 = crf_Init(a1, a2, (uint64_t)v38, a4 + 8);
        if ((v24 & 0x80000000) != 0)
        {
          log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_SPROP", 0, 0, (uint64_t)"error reading named entity model (NE): %x", v25, v26, v27, v24);
        }
        else
        {
          *(_DWORD *)(a4 + 352) = 1;
          log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_SPROP", 4, 0, (uint64_t)"loaded %s", v25, v26, v27, *(_QWORD *)a4);
        }
        return ssftriff_reader_ObjClose(v38, v28, v29, v30, v31, v32, v33, v34);
      }
      log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_SPROP", 4, 0, (uint64_t)"no named entity model (NE)", v21, v22, v23, v37);
    }
  }
  else
  {
    log_OutPublic(*(_QWORD *)(a3 + 32), (uint64_t)"FE_SPROP", 39000, 0, v10, v11, v12, v13, v36);
    return 2409635850;
  }
  return v17;
}

uint64_t sprop_ne_unload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;

  v10 = *(_QWORD *)a2;
  if (v10)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v10);
    *(_QWORD *)a2 = 0;
  }
  if (*(_DWORD *)(a2 + 352) == 1)
    crf_Deinit(a2 + 8, v10, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a2 + 352) = 0;
  v11 = *(_QWORD *)(a2 + 360);
  if (v11 && *(_DWORD *)(a2 + 376))
  {
    v12 = 0;
    while (1)
    {
      v13 = sprop_str_set_dealloc(a1, *(_QWORD *)(a2 + 360) + 16 * v12);
      if ((v13 & 0x80000000) != 0)
        break;
      if (*(_DWORD *)(a2 + 376) <= ++v12)
      {
        v11 = *(_QWORD *)(a2 + 360);
        goto LABEL_12;
      }
    }
  }
  else
  {
    v13 = 0;
LABEL_12:
    heap_Free(*(_QWORD **)(a1 + 8), v11);
    *(_QWORD *)(a2 + 360) = 0;
    heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 368));
    *(_QWORD *)(a2 + 368) = 0;
    *(_DWORD *)(a2 + 376) = 0;
  }
  return v13;
}

uint64_t sprop_ne_label(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t word_features;
  unsigned __int16 i;
  unsigned __int16 v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  int v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  int v36;
  uint64_t v37;
  __int128 v38;

  v9 = *(_DWORD *)(a2 + 352);
  v38 = SPROP_STR_SET_null;
  if (v9)
  {
    v14 = *(_DWORD *)(a5 + 8);
    if (v14)
    {
      v15 = (void *)heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)(a2 + 360), (16 * v14));
      if (!v15
        || (*(_QWORD *)(a2 + 360) = v15,
            bzero(v15, (16 * v14)),
            (v20 = heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)(a2 + 368), (8 * v14))) == 0))
      {
        v33 = 2409635850;
        log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 39000, 0, v16, v17, v18, v19, v35);
        return v33;
      }
      *(_QWORD *)(a2 + 368) = v20;
    }
    *(_DWORD *)(a2 + 376) = v14;
    word_features = sprop_get_word_features(a1, a3, *(_QWORD *)(a2 + 360));
    if ((word_features & 0x80000000) == 0)
    {
      v37 = 0;
      v36 = 0;
      if (*(_DWORD *)(a2 + 376))
      {
        for (i = 0; ; ++i)
        {
          sprop_str_set_add(a1, (uint64_t)&v38, &byte_1DEBD87CE, &byte_1DEBD87CE, 0);
          v23 = i;
          word_features = sprop_str_set_join(a1, v38 + 24 * i, *(_QWORD *)(a2 + 360) + 16 * i);
          if ((word_features & 0x80000000) != 0)
            break;
          word_features = sprop_str_set_dealloc(a1, *(_QWORD *)(a2 + 360) + 16 * i);
          if ((word_features & 0x80000000) != 0)
            break;
          *(_QWORD *)(*(_QWORD *)(a2 + 368) + 8 * i) = *(_QWORD *)(v38 + 24 * i);
          v24 = *(_DWORD *)(a2 + 376);
          if (v24 <= (unsigned __int16)(v23 + 1))
          {
            if (!v24)
              return sprop_str_set_dealloc(a1, (uint64_t)&v38);
            word_features = crf_Process(a2 + 8, *(_QWORD **)(a2 + 368), v24, &v37, &v36);
            if ((word_features & 0x80000000) == 0)
            {
              if (v36 == *(_DWORD *)(a2 + 376))
              {
                if (v36)
                {
                  v28 = 0;
                  do
                  {
                    sprop_str_set_add(a1, (uint64_t)a4, &byte_1DEBD87CE, &byte_1DEBD87CE, 0);
                    v29 = strlen(*(const char **)(v37 + 8 * v28));
                    sprop_str_take_ownership(a1, *a4 + 24 * v28, *(_QWORD *)(v37 + 8 * v28), v29);
                    if (a5 && *(_DWORD *)(*(_QWORD *)a5 + 24 * v28 + 8))
                      log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 4, 0, (uint64_t)"traceFeatureVector ne : %s %s : %s", v25, v26, v27, *(_QWORD *)(*(_QWORD *)(a2 + 368) + 8 * v28));
                    ++v28;
                  }
                  while (*(_DWORD *)(a2 + 376) > v28);
                }
                v30 = *(_QWORD *)(a1 + 32);
                v31 = "traceFeatureVector ne : END_OF_SEQUENCE : ";
                v32 = 4;
              }
              else
              {
                v30 = *(_QWORD *)(a1 + 32);
                v31 = "sprop_dcme_label: crf_Process returned no predictions";
                v32 = 0;
              }
              log_OutText(v30, (uint64_t)"FE_SPROP", v32, 0, (uint64_t)v31, v25, v26, v27, v35);
              if (v37)
                heap_Free(*(_QWORD **)(a1 + 8), v37);
              return sprop_str_set_dealloc(a1, (uint64_t)&v38);
            }
            return word_features;
          }
        }
      }
      else
      {
        return sprop_str_set_dealloc(a1, (uint64_t)&v38);
      }
    }
    return word_features;
  }
  else
  {
    log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 0, 0, (uint64_t)"sprop_ne_label: called while model not loaded", a6, a7, a8, v35);
    return 2409635842;
  }
}

uint64_t sprop_str_set_realloc(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;

  v3 = *(_DWORD *)(a2 + 12);
  if (v3 >= a3)
    return 0;
  if (v3 <= 1)
    v3 = 1;
  do
  {
    v6 = v3;
    v3 *= 2;
  }
  while (v6 < a3);
  v7 = heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)a2, 24 * v6);
  if (v7)
  {
    *(_QWORD *)a2 = v7;
    *(_DWORD *)(a2 + 12) = v6;
    bzero((void *)(v7 + 24 * *(unsigned int *)(a2 + 8)), 24 * (v6 - *(_DWORD *)(a2 + 8)));
    return 0;
  }
  log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 39000, 0, v8, v9, v10, v11, v13);
  return 2409635850;
}

uint64_t sprop_str_set_dealloc(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;

  v2 = *(_DWORD *)(a2 + 12);
  if (!v2)
    return 0;
  *(_DWORD *)(a2 + 8) = 0;
  while (1)
  {
    v5 = sprop_str_dealloc(a1, (uint64_t *)(*(_QWORD *)a2 + 24 * v2 - 24));
    if ((v5 & 0x80000000) != 0)
      break;
    v2 = *(_DWORD *)(a2 + 12) - 1;
    *(_DWORD *)(a2 + 12) = v2;
    if (!v2)
    {
      heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)a2);
      *(_QWORD *)a2 = 0;
      return v5;
    }
  }
  return v5;
}

uint64_t sprop_str_set_clear(uint64_t a1)
{
  unsigned int v1;
  uint64_t result;

  v1 = *(_DWORD *)(a1 + 8);
  if (!v1)
    return 0;
  do
  {
    result = sprop_str_clear(*(_QWORD *)a1 + 24 * v1 - 24);
    if ((result & 0x80000000) != 0)
      break;
    v1 = *(_DWORD *)(a1 + 8) - 1;
    *(_DWORD *)(a1 + 8) = v1;
  }
  while (v1);
  return result;
}

uint64_t sprop_str_set_add(uint64_t a1, uint64_t a2, char *a3, char *a4, unsigned int a5)
{
  uint64_t result;

  result = sprop_str_set_realloc(a1, a2, *(_DWORD *)(a2 + 8) + 1);
  if ((result & 0x80000000) == 0)
  {
    result = sprop_str_cat(a1, *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8), a3, 0);
    if ((result & 0x80000000) == 0)
    {
      result = sprop_str_cat(a1, *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8), a4, a5);
      if ((result & 0x80000000) == 0)
        ++*(_DWORD *)(a2 + 8);
    }
  }
  return result;
}

uint64_t sprop_str_set_join(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;

  sprop_str_clear(a2);
  if (!*(_DWORD *)(a3 + 8))
    return 0;
  result = sprop_str_copy(a1, a2, **(char ***)a3, *(_DWORD *)(*(_QWORD *)a3 + 8));
  if ((result & 0x80000000) == 0 && *(_DWORD *)(a3 + 8) >= 2u)
  {
    v7 = 0;
    v8 = 1;
    do
    {
      result = sprop_str_cat(a1, a2, " ", 1u);
      if ((result & 0x80000000) != 0)
        break;
      result = sprop_str_cat(a1, a2, *(char **)(*(_QWORD *)a3 + v7 + 24), *(_DWORD *)(*(_QWORD *)a3 + v7 + 32));
      if ((result & 0x80000000) != 0)
        break;
      ++v8;
      v7 += 24;
    }
    while (v8 < *(unsigned int *)(a3 + 8));
  }
  return result;
}

uint64_t sprop_dcme_load(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Str;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  _BYTE **v46;
  _BYTE *i;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  const char *v53;
  char *__s1;
  int v55[2];
  char v56[16];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v52 = 0;
  v53 = 0;
  *(_DWORD *)(a4 + 352) = 0;
  __s1 = 0;
  *(_QWORD *)v55 = 0;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  *(_OWORD *)v56 = 0u;
  v57 = 0u;
  Str = paramc_ParamGetStr(*(_QWORD *)(a3 + 40), (uint64_t)"langcode", v55);
  if ((Str & 0x80000000) != 0)
    return Str;
  Str = paramc_ParamGetStr(*(_QWORD *)(a3 + 40), (uint64_t)"voice", &__s1);
  if ((Str & 0x80000000) != 0)
    return Str;
  Str = paramc_ParamGetStr(*(_QWORD *)(a3 + 40), (uint64_t)"fecfg", &v53);
  if ((Str & 0x80000000) != 0)
    return Str;
  v9 = heap_Realloc(*(uint64_t **)(a3 + 8), *(_QWORD *)a4, 256);
  if (!v9)
  {
    log_OutPublic(*(_QWORD *)(a3 + 32), (uint64_t)"FE_SPROP", 39000, 0, v10, v11, v12, v13, v49);
    return 2409635850;
  }
  v14 = (char *)v9;
  *(_QWORD *)a4 = v9;
  v15 = __s1;
  if (strstr(__s1, "uni"))
  {
    __sprintf_chk(v56, 0, 0x80uLL, "crf/dcls/%s/%s/default", *(const char **)v55, v53);
    v16 = 0;
    __s1 = 0;
  }
  else
  {
    __sprintf_chk(v56, 0, 0x80uLL, "crf/dcls/%s/%s/%s/default", *(const char **)v55, v15, v53);
    v16 = __s1;
  }
  v17 = brokeraux_ComposeBrokerString(a3, v56, 1, 1, *(char **)v55, v16, 0, v14, 0x100uLL);
  if ((v17 & 0x80000000) == 0)
  {
    log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"broker string = %s", v18, v19, v20, *(_QWORD *)a4);
    if ((ssftriff_reader_ObjOpen(a1, a2, 2, *(const char **)a4, "CRPH", 1031, (uint64_t *)&v52) & 0x80000000) != 0)
    {
      log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_SPROP", 4, 0, (uint64_t)"no maxent doc class model (DCME)", v21, v22, v23, v50);
      return v17;
    }
    v24 = crf_Init(a1, a2, (uint64_t)v52, a4 + 8);
    if ((v24 & 0x80000000) != 0)
    {
      log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_SPROP", 0, 0, (uint64_t)"error reading maxent doc class model (DCME): %x", v25, v26, v27, v24);
      return ssftriff_reader_ObjClose(v52, v28, v29, v30, v31, v32, v33, v34);
    }
    *(_DWORD *)(a4 + 352) = 1;
    log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_SPROP", 4, 0, (uint64_t)"loaded %s", v25, v26, v27, *(_QWORD *)a4);
    if (*(_DWORD *)(a4 + 352) == 1)
    {
      if (*(_DWORD *)(a4 + 48))
      {
        v35 = 0;
        v36 = 0;
        do
        {
          strlen(*(const char **)(*(_QWORD *)(a4 + 40) + v35));
          log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"_dcme_dump_params: param[%d].key   = %.40s%s", v37, v38, v39, v36);
          strlen(*(const char **)(*(_QWORD *)(a4 + 40) + v35 + 8));
          log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"_dcme_dump_params: param[%d].value = %.40s%s", v40, v41, v42, v36++);
          v35 += 16;
        }
        while (v36 < *(unsigned int *)(a4 + 48));
      }
      else
      {
        log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_SPROP", 3, 0, (uint64_t)"_dcme_dump_params: no params loaded", v32, v33, v34, v51);
      }
      if (*(_DWORD *)(a4 + 352) == 1 && *(_DWORD *)(a4 + 48))
      {
        v43 = 0;
        v17 = 0;
        while (1)
        {
          v44 = *(_QWORD *)(a4 + 40);
          v45 = *(const char **)(v44 + 16 * v43);
          if (!strcmp("features", v45))
          {
            v17 = sprop_str_copy(a3, a4 + 400, *(char **)(v44 + 16 * v43 + 8), 0);
            v46 = (_BYTE **)(a4 + 400);
            if ((v17 & 0x80000000) != 0)
              return v17;
            goto LABEL_32;
          }
          if (!strcmp("uni500", v45))
            break;
          if (!strcmp("threshold", v45))
          {
            v17 = sprop_str_copy(a3, a4 + 448, *(char **)(v44 + 16 * v43 + 8), 0);
            if ((v17 & 0x80000000) != 0)
              return v17;
          }
          else if (!strcmp("numbers", v45))
          {
            v46 = (_BYTE **)(a4 + 472);
            v17 = sprop_str_copy(a3, a4 + 472, *(char **)(v44 + 16 * v43 + 8), 0);
            if ((v17 & 0x80000000) != 0)
              return v17;
            goto LABEL_32;
          }
LABEL_39:
          if (++v43 >= (unint64_t)*(unsigned int *)(a4 + 48))
          {
            if ((v17 & 0x80000000) == 0)
              return ssftriff_reader_ObjClose(v52, v28, v29, v30, v31, v32, v33, v34);
            return v17;
          }
        }
        v17 = sprop_str_copy(a3, a4 + 424, *(char **)(v44 + 16 * v43 + 8), 0);
        v46 = (_BYTE **)(a4 + 424);
        if ((v17 & 0x80000000) != 0)
          return v17;
LABEL_32:
        for (i = *v46; ; ++i)
        {
          if (*i == 32)
          {
            *i = 0;
          }
          else if (!*i)
          {
            goto LABEL_39;
          }
        }
      }
    }
    return ssftriff_reader_ObjClose(v52, v28, v29, v30, v31, v32, v33, v34);
  }
  return v17;
}

uint64_t sprop_dcme_unload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;

  v10 = *(_QWORD *)a2;
  if (v10)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v10);
    *(_QWORD *)a2 = 0;
  }
  if (*(_DWORD *)(a2 + 352) == 1)
    crf_Deinit(a2 + 8, v10, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a2 + 352) = 0;
  result = sprop_str_set_dealloc(a1, a2 + 360);
  if ((result & 0x80000000) == 0)
  {
    result = sprop_str_dealloc(a1, (uint64_t *)(a2 + 376));
    if ((result & 0x80000000) == 0)
    {
      result = sprop_str_dealloc(a1, (uint64_t *)(a2 + 400));
      if ((result & 0x80000000) == 0)
      {
        result = sprop_str_dealloc(a1, (uint64_t *)(a2 + 424));
        if ((result & 0x80000000) == 0)
        {
          result = sprop_str_dealloc(a1, (uint64_t *)(a2 + 448));
          if ((result & 0x80000000) == 0)
            return sprop_str_dealloc(a1, (uint64_t *)(a2 + 472));
        }
      }
    }
  }
  return result;
}

uint64_t sprop_dcme_label(uint64_t a1, uint64_t a2, int32x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t features;
  _QWORD *v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  const char **v40;
  uint64_t v41;

  if (*(_DWORD *)(a2 + 352))
  {
    v13 = a2 + 360;
    features = sprop_str_set_clear(a2 + 360);
    if ((features & 0x80000000) != 0)
      return features;
    v15 = (_QWORD *)(a2 + 448);
    features = sprop_get_features(a1, a3, a2 + 400, a2 + 424, (_QWORD *)(a2 + 448), a2 + 472, v13);
    if ((features & 0x80000000) != 0)
      return features;
    v16 = (char **)(a2 + 376);
    features = sprop_str_set_join(a1, a2 + 376, v13);
    if ((features & 0x80000000) != 0)
      return features;
    v40 = 0;
    v39 = 0;
    v20 = *v16;
    if (!*v15)
    {
      v21 = strstr(*v16, " lc");
      if (v21)
      {
        v21[3] = 0;
        v20 = *v16;
      }
    }
    log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"sprop_dcme_label: features = %s", v17, v18, v19, (uint64_t)v20);
    v41 = *(_QWORD *)(a2 + 376);
    features = crf_Process(a2 + 8, &v41, 1u, (uint64_t *)&v40, &v39);
    if ((features & 0x80000000) != 0)
    {
      return features;
    }
    else
    {
      if (v39)
      {
        v25 = *v40;
        if (v39 != 1)
          log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 1, 0, (uint64_t)"sprop_dcme_label: crf_Process returned %d predictions, using only first one", v22, v23, v24, v39);
        log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"sprop_dcme_label: pred[0] = %s", v22, v23, v24, (uint64_t)v25);
        v26 = strlen(v25);
        v30 = sprop_str_take_ownership(a1, a4, (uint64_t)v25, v26);
        if (a5 && *(_DWORD *)(a5 + 8))
        {
          if (*v15)
            v31 = "intc ";
          else
            v31 = &byte_1DEBD87CE;
          log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 4, 0, (uint64_t)"traceFeatureVector dcls : %s%s %s : %s", v27, v28, v29, (uint64_t)v31);
        }
      }
      else
      {
        log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 0, 0, (uint64_t)"sprop_dcme_label: crf_Process returned no predictions", v22, v23, v24, v38);
        v30 = 2409635847;
      }
      v33 = (uint64_t)v40;
      if (v40)
      {
        v34 = v39;
        v35 = --v39;
        if (v34 >= 2)
        {
          do
          {
            heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v40[v35]);
            v35 = v39 - 1;
          }
          while (v39-- > 1);
          v33 = (uint64_t)v40;
        }
        heap_Free(*(_QWORD **)(a1 + 8), v33);
      }
    }
  }
  else
  {
    v30 = 2409635842;
    log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 0, 0, (uint64_t)"sprop_dcme_label: called while model not loaded", a6, a7, a8, v37);
  }
  return v30;
}

uint64_t sprop_input_dealloc(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = sprop_str_dealloc(a1, a2);
  if ((result & 0x80000000) == 0)
  {
    result = sprop_str_dealloc(a1, a2 + 3);
    if ((result & 0x80000000) == 0)
      return sprop_str_dealloc(a1, a2 + 6);
  }
  return result;
}

uint64_t sprop_input_clear(uint64_t a1)
{
  uint64_t result;

  result = sprop_str_clear(a1);
  if ((result & 0x80000000) == 0)
  {
    result = sprop_str_clear(a1 + 24);
    if ((result & 0x80000000) == 0)
      return sprop_str_clear(a1 + 48);
  }
  return result;
}

uint64_t sprop_input_mrk_cnt(uint64_t a1)
{
  return (unsigned __int16)(*(_DWORD *)(a1 + 56) >> 5);
}

uint64_t sprop_input_mrk(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_DWORD *sprop_input_find_marker(uint64_t a1, int a2, _DWORD *a3)
{
  unsigned int v3;
  unsigned int v4;
  _DWORD *result;

  v3 = (unsigned __int16)(*(_DWORD *)(a1 + 56) >> 5);
  if ((unsigned __int16)(*(_DWORD *)(a1 + 56) >> 5))
  {
    v4 = 0;
    result = *(_DWORD **)(a1 + 48);
    do
    {
      if (a3)
      {
        if (result == a3)
          a3 = 0;
      }
      else
      {
        if (*result == a2)
          return result;
        a3 = 0;
      }
      result += 8;
      ++v4;
    }
    while (v4 < v3);
  }
  return 0;
}

_DWORD *sprop_input_rfind_marker(uint64_t a1, int a2, _DWORD *a3)
{
  unsigned int v3;
  unsigned int v4;
  _DWORD *result;

  v3 = *(_DWORD *)(a1 + 56);
  if ((unsigned __int16)(v3 >> 5))
  {
    v4 = 0;
    result = (_DWORD *)((*(_QWORD *)&v3 & 0x1FFFE0) + *(_QWORD *)(a1 + 48) - 32);
    do
    {
      if (a3)
      {
        if (result == a3)
          a3 = 0;
      }
      else
      {
        if (*result == a2)
          return result;
        a3 = 0;
      }
      ++v4;
      result -= 8;
    }
    while (v4 < (unsigned __int16)(v3 >> 5));
  }
  return 0;
}

_OWORD *sprop_input_insert_marker(uint64_t a1, uint64_t a2, unint64_t a3, _OWORD *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  int v13;
  _OWORD *v14;
  __int128 v15;

  v7 = *(_QWORD *)(a2 + 48);
  v5 = a2 + 48;
  v6 = v7;
  v8 = *(unsigned int *)(v5 + 8);
  v9 = v7 + 32 * (unsigned __int16)(v8 >> 5);
  v10 = v7 <= a3 && v9 > a3;
  if (!v10 || (sprop_str_realloc(a1, v5, (int)v8 + 32) & 0x80000000) != 0)
    return 0;
  v13 = (v8 >> 5) - ((a3 - v6) >> 5);
  v14 = (_OWORD *)(*(_QWORD *)(a2 + 48) + a3 - v6);
  memmove(v14 + 2, v14, 32 * (unsigned __int16)v13);
  *(_DWORD *)(a2 + 56) += 32;
  v15 = a4[1];
  *v14 = *a4;
  v14[1] = v15;
  return v14;
}

uint64_t fe_sprop_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2409635841;
  result = 0;
  *a2 = &ISProp;
  return result;
}

uint64_t fe_sprop_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t inited;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v3 = 2409635847;
  if (a3)
  {
    v11 = 0;
    inited = InitRsrcFunction(a1, a2, &v11);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      v8 = (_QWORD *)heap_Calloc(*(_QWORD **)(v11 + 8), 1, 24);
      if (v8)
      {
        v3 = 0;
        v9 = v11;
        v8[1] = a2;
        v8[2] = v9;
        *v8 = a1;
        *(_QWORD *)a3 = v8;
        *(_DWORD *)(a3 + 8) = 501;
      }
      else
      {
        return 2409635850;
      }
    }
  }
  return v3;
}

uint64_t fe_sprop_ClassClose(uint64_t a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 501, 24);
  if ((result & 0x80000000) == 0)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), a1);
    return 0;
  }
  return result;
}

uint64_t fe_sprop_ObjOpen(uint64_t a1, int a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t UInt;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;

  v5 = 2409635847;
  if (a5)
  {
    inited = safeh_HandleCheck(a1, a2, 501, 24);
    if ((inited & 0x80000000) != 0)
      return inited;
    v17 = 0;
    v18 = 0;
    inited = InitRsrcFunction(a3, a4, &v18);
    if ((inited & 0x80000000) != 0)
      return inited;
    inited = objc_GetObject(*(_QWORD *)(v18 + 48), (uint64_t)"SYNTHSTREAM", &v17);
    if ((inited & 0x80000000) != 0)
      return inited;
    v11 = (uint64_t *)heap_Calloc(*(_QWORD **)(v18 + 8), 1, 1944);
    if (!v11)
      return 2409635850;
    v12 = v11;
    v13 = v18;
    *v11 = v18;
    v11[1] = (uint64_t)a3;
    v11[2] = a4;
    v11[3] = a1;
    v14 = v18;
    v11[4] = *(_QWORD *)(v17 + 8);
    v19 = 0;
    inited = sprop_dcme_load(a3, a4, v13, (uint64_t)(v11 + 125));
    if ((inited & 0x80000000) != 0)
      return inited;
    inited = sprop_ne_load((_WORD *)v12[1], v12[2], *v12, (uint64_t)(v12 + 187));
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      *((_DWORD *)v12 + 484) = 0;
      UInt = paramc_ParamGetUInt(*(_QWORD *)(v14 + 40), (uint64_t)"dont_insert_ne_markers", &v19);
      if ((UInt & 0x1FFF) == 0x14)
      {
LABEL_16:
        v5 = 0;
        *(_QWORD *)a5 = v12;
        *(_DWORD *)(a5 + 8) = 501;
        return v5;
      }
      v5 = UInt;
      if ((UInt & 0x80000000) == 0 && v19 == 1)
      {
        *((_DWORD *)v12 + 484) = 1;
        goto LABEL_16;
      }
      if ((UInt & 0x80000000) == 0)
        goto LABEL_16;
    }
  }
  return v5;
}

uint64_t fe_sprop_ObjClose(uint64_t *a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = safeh_HandleCheck((uint64_t)a1, a2, 501, 1944);
  if ((result & 0x80000000) == 0)
  {
    if (a1)
    {
      v10 = *a1;
      result = sprop_dcme_unload(*a1, (uint64_t)(a1 + 125), v4, v5, v6, v7, v8, v9);
      if ((result & 0x80000000) == 0)
      {
        result = sprop_ne_unload(v10, (uint64_t)(a1 + 187), v11, v12, v13, v14, v15, v16);
        if ((result & 0x80000000) == 0)
        {
          result = sprop_input_dealloc(v10, a1 + 116);
          if ((result & 0x80000000) == 0)
          {
            result = sprop_str_dealloc(v10, a1 + 237);
            if ((result & 0x80000000) == 0)
            {
              result = sprop_str_set_dealloc(v10, (uint64_t)(a1 + 240));
              if ((result & 0x80000000) == 0)
              {
                result = sprop_str_set_dealloc(v10, (uint64_t)(a1 + 235));
                if ((result & 0x80000000) == 0)
                {
                  objc_ReleaseObject(*(_QWORD *)(v10 + 48), (uint64_t)"SYNTHSTREAM");
                  heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)a1);
                  return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t fe_sprop_ObjReopen(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  result = safeh_HandleCheck(a1, a2, 501, 1944);
  if ((result & 0x80000000) == 0)
  {
    result = sprop_dcme_unload(*(_QWORD *)a1, a1 + 1000, v4, v5, v6, v7, v8, v9);
    if ((result & 0x80000000) == 0)
    {
      result = sprop_dcme_load(*(_WORD **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)a1, a1 + 1000);
      if ((result & 0x80000000) == 0)
      {
        result = sprop_ne_unload(*(_QWORD *)a1, a1 + 1496, v10, v11, v12, v13, v14, v15);
        if ((result & 0x80000000) == 0)
        {
          v16 = sprop_ne_load(*(_WORD **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)a1, a1 + 1496);
          return v16 & (v16 >> 31);
        }
      }
    }
  }
  return result;
}

uint64_t fe_sprop_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if ((safeh_HandleCheck(a1, a2, 501, 1944) & 0x80000000) != 0)
    return 2409635848;
  synstrmaux_InitStreamOpener(a1 + 40, *(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_SPROP");
  synstrmaux_RegisterInStream((_WORD *)(a1 + 40), (uint64_t)"text/plain;charset=utf-8", 0, a1 + 864);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 40), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    0,
    a1 + 880);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 40), (uint64_t)"text/plain;charset=utf-8", a1 + 896);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 40), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 912);
  v7 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 40), *(_QWORD *)(a1 + 32), a3, a4);
  if ((v7 & 0x80000000) != 0)
    synstrmaux_CloseStreams((_WORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  return v7;
}

uint64_t fe_sprop_Process(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  char **v24;
  uint64_t v25;
  int *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  _BOOL4 v34;
  char **marker;
  char **v36;
  char *v37;
  _BOOL4 v38;
  char **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char **v43;
  char *v44;
  BOOL v45;
  const char *v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  char **v57;
  char *v58;
  char *v59;
  int v60;
  int v61;
  const char *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned __int16 v66;
  uint64_t v67;
  unsigned int v68;
  const char *v69;
  const char *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int16 v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  unsigned int v79;
  const char **v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  _QWORD *v84;
  const char **v85;
  uint64_t v86;
  int v87;
  _DWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  _DWORD *v99;
  int v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  int v105;
  uint64_t v106;
  int *v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  BOOL v117;
  _BOOL4 v118;
  _DWORD __n[5];
  __int128 v120;
  char *__s1[2];
  uint64_t v122;
  __int128 v123;
  uint64_t v124[2];

  if ((safeh_HandleCheck((uint64_t)a1, a2, 501, 1944) & 0x80000000) != 0)
    return 2409635848;
  log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"fe_sprop_Process: start", v7, v8, v9, v113);
  *a5 = 1;
  *(_QWORD *)&__n[1] = 0;
  LODWORD(v123) = 0;
  LODWORD(v124[0]) = 0;
  __n[0] = 0;
  v10 = a1[4];
  v11 = a1[108];
  v12 = a1[109];
  LODWORD(__s1[0]) = 0;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, char **, uint64_t *))(v10 + 144))(v11, v12, __s1, v124);
  if ((v13 & 0x80000000) != 0)
    return v13;
  if (LODWORD(__s1[0]))
  {
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, __int128 *))(v10 + 88))(v11, v12, &__n[1], &v123);
    if ((v13 & 0x80000000) != 0)
      return v13;
    v14 = *(char **)&__n[1];
  }
  else
  {
    v14 = 0;
    *(_QWORD *)&__n[1] = 0;
    LODWORD(v123) = 0;
  }
  v13 = sprop_str_copy(*a1, (uint64_t)(a1 + 116), v14, 0);
  if ((v13 & 0x80000000) != 0)
    return v13;
  v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[4] + 96))(a1[108], a1[109], v123);
  if ((v13 & 0x80000000) != 0)
    return v13;
  v16 = a1[4];
  v17 = a1[110];
  v18 = a1[111];
  LODWORD(__s1[0]) = 0;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, char **, _DWORD *))(v16 + 144))(v17, v18, __s1, __n);
  if ((v13 & 0x80000000) != 0)
    return v13;
  if (LODWORD(__s1[0]))
  {
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, __int128 *))(v16 + 88))(v17, v18, &__n[1], &v123);
    if ((v13 & 0x80000000) != 0)
      return v13;
    v19 = *(char **)&__n[1];
    v20 = v123;
  }
  else
  {
    v20 = 0;
    v19 = 0;
    *(_QWORD *)&__n[1] = 0;
    LODWORD(v123) = 0;
  }
  v13 = sprop_str_copy(*a1, (uint64_t)(a1 + 122), v19, v20);
  if ((v13 & 0x80000000) != 0)
    return v13;
  v21 = sprop_input_mrk((uint64_t)(a1 + 116));
  v22 = sprop_input_mrk_cnt((uint64_t)(a1 + 116));
  if (!v22)
    goto LABEL_23;
  v15 = 0;
  v23 = v22;
  v24 = (char **)(v21 + 24);
  do
  {
    if (marker_hasNonConstCharPtrArg(*((_DWORD *)v24 - 6)))
    {
      v15 = sprop_str_set_add(*a1, (uint64_t)(a1 + 235), &byte_1DEBD87CE, *v24, 0);
      if ((v15 & 0x80000000) != 0)
        return v15;
      *v24 = *(char **)(a1[235] + 24 * (*((_DWORD *)a1 + 472) - 1));
    }
    v24 += 4;
    --v23;
  }
  while (v23);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_23:
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[4] + 96))(a1[110], a1[111], v123);
    if ((v13 & 0x80000000) != 0)
      return v13;
    v25 = *a1;
    v26 = (int *)sprop_input_mrk((uint64_t)(a1 + 116));
    v27 = sprop_input_mrk_cnt((uint64_t)(a1 + 116));
    _dump_markers(v25, v26, v27);
    v31 = v124[0];
    v32 = v124[0];
    if (LODWORD(v124[0]) != __n[0])
    {
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_SPROP", 1, 0, (uint64_t)"_read_streams: detected sync loss: bEndText=%d, bEndMrk=%d", v28, v29, v30, LODWORD(v124[0]));
      v32 = v124[0];
      v31 = __n[0];
    }
    v34 = v32 == 1 || v31 == 1;
    if (!*((_DWORD *)a1 + 234))
      goto LABEL_129;
    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_SPROP", 4, 0, (uint64_t)"fe_sprop_Process: input = %s", v28, v29, v30, a1[116]);
    if (*((_DWORD *)a1 + 338) != 1)
      goto LABEL_144;
    *(_OWORD *)__s1 = SPROP_STR_null;
    v122 = 0;
    *(_QWORD *)&__n[1] = 0;
    *(_QWORD *)&v123 = &byte_1DEBD87CE;
    LOWORD(v124[0]) = 0;
    LOWORD(__n[0]) = 0;
    marker = (char **)sprop_input_find_marker((uint64_t)(a1 + 116), 51, 0);
    if (marker)
    {
      v36 = marker;
      do
      {
        v37 = hlp_NLUStrFind(v36[3], "S_CLASS", (uint64_t *)&__n[1], (unsigned __int16 *)v124);
        v38 = v37 == 0;
        if (v37)
          break;
        v36 = (char **)sprop_input_find_marker((uint64_t)(a1 + 116), 51, v36);
      }
      while (v36);
    }
    else
    {
      v38 = 1;
    }
    v39 = (char **)sprop_input_rfind_marker((uint64_t)(a1 + 116), 51, 0);
    if (v39)
    {
      v43 = v39;
      do
      {
        v44 = hlp_NLUStrFind(v43[3], "E_CLASS", (uint64_t *)&v123, (unsigned __int16 *)__n);
        v45 = v44 == 0;
        if (v44)
          break;
        v43 = (char **)sprop_input_rfind_marker((uint64_t)(a1 + 116), 51, v43);
      }
      while (v43);
    }
    else
    {
      v45 = 1;
    }
    if (!v38)
    {
      if (*((_DWORD *)a1 + 476))
        log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_SPROP", 1, 0, (uint64_t)"unbalanced NLU mark-up: S_CLASS:%s implicitly closed by S_CLASS:%*s", v40, v41, v42, a1[237]);
      sprop_str_copy(*a1, (uint64_t)(a1 + 237), *(char **)&__n[1], LOWORD(v124[0]));
    }
    if (!v45)
    {
      if (*((_DWORD *)a1 + 476))
      {
        v46 = (const char *)a1[237];
        if (strncmp(v46, (const char *)v123, LOWORD(__n[0])))
          log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_SPROP", 1, 0, (uint64_t)"unbalanced NLU mark-up: S_CLASS:%s closed by E_CLASS:%*s", v40, v41, v42, (uint64_t)v46);
      }
    }
    if (v38 && !*((_DWORD *)a1 + 476))
    {
      v47 = (uint64_t)(a1 + 237);
      v87 = sprop_dcme_label(*a1, (uint64_t)(a1 + 125), (int32x2_t *)a1 + 116, (uint64_t)__s1, 0, v40, v41, v42);
      v88 = sprop_input_find_marker((uint64_t)(a1 + 116), 1, 0);
      if (v88)
      {
        v92 = (unint64_t)v88;
        *(_QWORD *)&__n[3] = 0;
        *(_QWORD *)&v120 = 0;
        v93 = v88[1];
        __n[1] = 51;
        __n[2] = v93;
        __n[4] = v88[3];
        if (v87 < 0 || (v94 = __s1[0], !strcmp(__s1[0], "1")))
        {
          v95 = *a1;
          v96 = (uint64_t)(a1 + 235);
          v97 = "none";
        }
        else
        {
          v95 = *a1;
          v96 = (uint64_t)(a1 + 235);
          v97 = v94;
        }
        v98 = sprop_str_set_add(v95, v96, "S_CLASS:", v97, 0);
        if ((v98 & 0x80000000) != 0)
        {
          v15 = v98;
        }
        else
        {
          *((_QWORD *)&v120 + 1) = *(_QWORD *)(a1[235] + 24 * (*((_DWORD *)a1 + 472) - 1));
          sprop_input_insert_marker(*a1, (uint64_t)(a1 + 116), v92, &__n[1]);
          v99 = sprop_input_rfind_marker((uint64_t)(a1 + 116), 1, 0);
          v100 = v99[3];
          __n[2] = v99[1];
          __n[4] = v100;
          if (v87 < 0 || (v101 = __s1[0], !strcmp(__s1[0], "1")))
          {
            v102 = *a1;
            v104 = "none";
            v103 = (uint64_t)(a1 + 235);
          }
          else
          {
            v102 = *a1;
            v103 = (uint64_t)(a1 + 235);
            v104 = v101;
          }
          v15 = sprop_str_set_add(v102, v103, "E_CLASS:", v104, 0);
          if ((v15 & 0x80000000) == 0)
          {
            *((_QWORD *)&v120 + 1) = *(_QWORD *)(a1[235] + 24 * (*((_DWORD *)a1 + 472) - 1));
            sprop_input_insert_marker(*a1, (uint64_t)(a1 + 116), (unint64_t)v99, &__n[1]);
          }
        }
      }
      else
      {
        log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_SPROP", 0, 0, (uint64_t)"unable to insert NLU CLASS markers", v89, v90, v91, v114);
        v15 = 2409635847;
      }
    }
    else
    {
      v47 = (uint64_t)(a1 + 237);
      v48 = sprop_dcme_label(*a1, (uint64_t)(a1 + 125), (int32x2_t *)a1 + 116, (uint64_t)__s1, (uint64_t)(a1 + 237), v40, v41, v42);
      v15 = v48 & ~(v48 >> 31);
    }
    if (!v45)
      sprop_str_clear(v47);
    sprop_str_dealloc(*a1, (uint64_t *)__s1);
    if ((v15 & 0x80000000) == 0)
    {
LABEL_144:
      if (*((_DWORD *)a1 + 462) != 1)
        goto LABEL_127;
      v123 = SPROP_STR_SET_null;
      v122 = 0;
      v120 = 0u;
      *(_OWORD *)__s1 = SPROP_STR_null;
      *(_OWORD *)&__n[1] = 0u;
      v15 = sprop_str_set_clear((uint64_t)(a1 + 240));
      v118 = v34;
      if ((v15 & 0x80000000) != 0)
        goto LABEL_126;
      v49 = sprop_input_mrk_cnt((uint64_t)(a1 + 116));
      v50 = sprop_input_mrk((uint64_t)(a1 + 116));
      if (!v49)
        goto LABEL_81;
      v54 = 0;
      v55 = 0;
      v124[0] = 0;
      LOWORD(__n[0]) = 0;
      v56 = v49;
      v57 = (char **)(v50 + 24);
      v58 = &byte_1DEBD87CE;
      v59 = "O";
      do
      {
        v60 = *((_DWORD *)v57 - 6);
        if (v60 == 1)
        {
          v15 = sprop_str_set_add(*a1, (uint64_t)(a1 + 240), v59, v58, v55);
          if ((v15 & 0x80000000) != 0)
            goto LABEL_126;
          v61 = strcmp(v59, "B-");
          v62 = "I-";
          if (v61)
            v62 = v59;
          if (v54)
          {
            v58 = &byte_1DEBD87CE;
            v59 = "O";
          }
          else
          {
            v59 = (char *)v62;
          }
          if (v54)
            v55 = 0;
          v54 = 0;
        }
        else if (v60 == 51)
        {
          if (hlp_NLUStrFind(*v57, "S_NE", v124, (unsigned __int16 *)__n))
          {
            v58 = (char *)v124[0];
            v59 = "B-";
            v55 = LOWORD(__n[0]);
          }
          if (hlp_NLUStrFind(*v57, "E_NE", v124, (unsigned __int16 *)__n))
            v54 = 1;
        }
        v57 += 4;
        --v56;
      }
      while (v56);
      if ((v15 & 0x80000000) == 0)
      {
LABEL_81:
        v63 = sprop_ne_label(*a1, (uint64_t)(a1 + 187), (uint64_t)(a1 + 116), &v123, (uint64_t)(a1 + 240), v51, v52, v53);
        if ((v63 & 0x80000000) != 0)
        {
          v15 = 0;
          goto LABEL_126;
        }
        v15 = v63;
        v64 = *((_DWORD *)a1 + 468);
        if (v64)
        {
          v65 = 0;
          v66 = 0;
          do
          {
            v67 = v123;
            v68 = v66;
            v69 = *(const char **)(v123 + 24 * v66);
            if (!strncmp(v69, "I-", 2uLL))
            {
              if (!v68 || (v70 = *(const char **)(v67 + 24 * (v65 - 1)), strlen(v70) < 3) || strcmp(v69 + 2, v70 + 2))
              {
                v71 = sprop_str_copy(*a1, (uint64_t)__s1, "B-", 0);
                if ((v71 & 0x80000000) != 0
                  || (v71 = sprop_str_cat(*a1, (uint64_t)__s1, (char *)(*(_QWORD *)(v123 + 24 * v68) + 2), 0),
                      (v71 & 0x80000000) != 0))
                {
LABEL_125:
                  v15 = v71;
                  goto LABEL_126;
                }
                v15 = sprop_str_copy(*a1, v123 + 24 * v68, __s1[0], 0);
                if ((v15 & 0x80000000) != 0)
                  goto LABEL_126;
                v64 = *((_DWORD *)a1 + 468);
              }
            }
            v66 = v68 + 1;
            v65 = (unsigned __int16)(v68 + 1);
          }
          while (v64 > v65);
        }
        if (!*((_DWORD *)a1 + 484))
        {
          v72 = sprop_input_mrk_cnt((uint64_t)(a1 + 116));
          v73 = sprop_input_mrk((uint64_t)(a1 + 116));
          if (v72)
          {
            v74 = v73;
            v115 = (uint64_t)(a1 + 235);
            v116 = *((_DWORD *)a1 + 468);
            v75 = v72 - 1;
            do
            {
              v76 = v75;
              if (*(_DWORD *)(v74 + 32 * v75) == 1)
              {
                v77 = v123;
                v78 = v116;
                v117 = *((_DWORD *)a1 + 468) != (unsigned __int16)v116
                    && strncmp(*(const char **)(v123 + 24 * (unsigned __int16)v116), "I-", 2uLL) == 0;
                LOWORD(v116) = v116 - 1;
                v79 = (unsigned __int16)(v78 - 1);
                v80 = (const char **)(v77 + 24 * v79);
                v81 = v74;
                if (!strncmp(*v80, "B-", 2uLL))
                {
                  *(_OWORD *)&__n[1] = 0u;
                  v120 = 0u;
                  __n[1] = 51;
                  v82 = v74 + 32 * v75;
                  __n[2] = *(_DWORD *)(v82 + 4);
                  __n[4] = *(_DWORD *)(v82 + 12);
                  v15 = sprop_str_set_add(*a1, v115, "S_NE:", (char *)*v80 + 2, 0);
                  if ((v15 & 0x80000000) != 0)
                    break;
                  v83 = *((_DWORD *)a1 + 472);
                  v84 = (_QWORD *)(a1[235] + 24 * v83 - 24);
                  if (!v117)
                  {
                    v71 = sprop_str_cat(*a1, a1[235] + 24 * v83 - 24, ";E_NE:", 0);
                    if ((v71 & 0x80000000) != 0)
                      goto LABEL_125;
                    v15 = sprop_str_cat(*a1, (uint64_t)v84, (char *)(*(_QWORD *)(v123 + 24 * v79) + 2), 0);
                    if ((v15 & 0x80000000) != 0)
                      break;
                  }
                  *((_QWORD *)&v120 + 1) = *v84;
                  sprop_input_insert_marker(*a1, (uint64_t)(a1 + 116), v74 + 32 * v75, &__n[1]);
                  v81 = sprop_input_mrk((uint64_t)(a1 + 116));
                }
                if (v117)
                {
                  v74 = v81;
                }
                else
                {
                  v85 = (const char **)(v123 + 24 * v79);
                  if (!strncmp(*v85, "I-", 2uLL))
                  {
                    *(_OWORD *)&__n[1] = 0u;
                    v120 = 0u;
                    __n[1] = 51;
                    v86 = v74 + 32 * v75;
                    __n[2] = *(_DWORD *)(v86 + 4);
                    __n[4] = *(_DWORD *)(v86 + 12);
                    v15 = sprop_str_set_add(*a1, v115, "E_NE:", (char *)*v85 + 2, 0);
                    if ((v15 & 0x80000000) != 0)
                      break;
                    *((_QWORD *)&v120 + 1) = *(_QWORD *)(a1[235] + 24 * *((unsigned int *)a1 + 472) - 24);
                    sprop_input_insert_marker(*a1, (uint64_t)(a1 + 116), v74 + 32 * v75, &__n[1]);
                    v74 = sprop_input_mrk((uint64_t)(a1 + 116));
                  }
                  else
                  {
                    v74 = v81;
                  }
                }
              }
              --v75;
            }
            while (v76);
          }
        }
      }
LABEL_126:
      sprop_str_set_dealloc(*a1, (uint64_t)&v123);
      sprop_str_dealloc(*a1, (uint64_t *)__s1);
      v34 = v118;
      if ((v15 & 0x80000000) == 0)
      {
LABEL_127:
        v105 = *((_DWORD *)a1 + 234);
        if (v105)
        {
          v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[4] + 104))(a1[112], a1[113], a1[116], (v105 + 1));
          if ((v13 & 0x80000000) != 0)
            return v13;
        }
LABEL_129:
        if (!*((_DWORD *)a1 + 246)
          || (v106 = *a1,
              v107 = (int *)sprop_input_mrk((uint64_t)(a1 + 116)),
              v108 = sprop_input_mrk_cnt((uint64_t)(a1 + 116)),
              _dump_markers(v106, v107, v108),
              v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[4] + 104))(a1[114], a1[115], a1[122], *((unsigned int *)a1 + 246)), (v13 & 0x80000000) == 0))
        {
          if (!v34 || (v13 = synstrmaux_CloseOutStreamsOnly((_WORD *)a1 + 20, a1[4]), (v13 & 0x80000000) == 0))
          {
            v13 = sprop_input_clear((uint64_t)(a1 + 116));
            if ((v13 & 0x80000000) == 0)
            {
              v15 = sprop_str_set_clear((uint64_t)(a1 + 235));
              if ((v15 & 0x80000000) == 0)
                log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"fe_sprop_Process: end (fRet=0x%x)", v109, v110, v111, v15);
              return v15;
            }
          }
        }
        return v13;
      }
    }
  }
  return v15;
}

uint64_t fe_sprop_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 501, 1944) & 0x80000000) != 0)
    return 2409635848;
  else
    return synstrmaux_CloseStreams((_WORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t _dump_markers(uint64_t result, int *a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a3)
  {
    v4 = result;
    v5 = 0;
    v6 = a3;
    do
    {
      marker_hasCharPtrArg(*a2);
      result = log_OutText(*(_QWORD *)(v4 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"mrk[%02d] = %-4s (%05d) %3d %3d %3d %3d %p %s", v7, v8, v9, v5++);
      a2 += 8;
    }
    while (v6 != v5);
  }
  return result;
}

const char *sprop_bigrams(const char *a1, char *__s)
{
  char *v4;
  const char *v5;
  size_t v6;
  size_t v7;

  v4 = strchr(__s, 95);
  if (!v4 || !*a1)
    return 0;
  v5 = v4 + 1;
  v6 = (unsigned __int16)((_WORD)v4 - (_WORD)__s);
  while (1)
  {
    if (!strncmp(a1, __s, v6) && a1[v6] == 32)
    {
      v7 = strlen(v5);
      if (!strncmp(&a1[v6 + 1], v5, v7))
        break;
    }
    if (!*(unsigned __int8 *)++a1)
      return 0;
  }
  return a1;
}

uint64_t sprop_get_features(uint64_t a1, int32x2_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  char **v15;
  char **v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a2[1].i32[0] && !a2[4].i32[0])
  {
    v19 = (uint64_t *)&a2[3];
    v14 = sprop_normalize(a1, a2 + 3, (uint64_t)a2, 1);
    if ((v14 & 0x80000000) != 0)
      return v14;
    log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"sprop_get_features: normalized input = %s", v20, v21, v22, *v19);
  }
  else
  {
    v14 = 0;
  }
  v15 = (&_sprop_feature_set_catalogs)[*a5 == 0];
  if (*v15)
  {
    v16 = v15 + 2;
    do
    {
      if (*a5)
        v17 = a3;
      else
        v17 = a4;
      v14 = ((uint64_t (*)(uint64_t, _QWORD, int32x2_t *, uint64_t, _QWORD *, uint64_t, uint64_t))*v16)(a1, *(v16 - 1), a2, v17, a5, a6, a7);
      if ((v14 & 0x80000000) != 0)
        break;
      v18 = v16[1];
      v16 += 3;
    }
    while (v18);
  }
  return v14;
}

uint64_t sprop_normalize(uint64_t a1, int32x2_t *a2, uint64_t a3, int a4)
{
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  int v13;
  unsigned int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int32 v19;
  uint64_t v20;
  _BYTE v22[7];

  v8 = *(unsigned __int8 **)a3;
  v9 = *(unsigned int *)(a3 + 8);
  v10 = sprop_str_clear((uint64_t)a2);
  if ((v10 & 0x80000000) == 0)
  {
    v11 = (unint64_t)&v8[v9];
    v12 = *(unsigned __int8 **)a3;
    if (v12 < &v8[v9])
    {
      v13 = 0;
      do
      {
        v14 = Utf8_LengthInBytes(v12, 1);
        if (utf8_BelongsToSet(0, v12, 0, v14) == 1)
        {
          if (v13)
          {
            v13 = 1;
          }
          else
          {
            v13 = 1;
            sprop_str_cat(a1, (uint64_t)a2, " ", 1u);
          }
        }
        else if (!utf8_BelongsToSet(0xAu, v12, 0, v14))
        {
          if (a4 && utf8_ToLower((char *)v12, 0, (uint64_t)v22) == 1)
          {
            v15 = v22;
            v16 = a1;
            v17 = (uint64_t)a2;
            v18 = 0;
          }
          else
          {
            v16 = a1;
            v17 = (uint64_t)a2;
            v15 = (char *)v12;
            v18 = v14;
          }
          sprop_str_cat(v16, v17, v15, v18);
          v13 = 0;
        }
        v12 += v14;
      }
      while ((unint64_t)v12 < v11);
    }
    if (!*(_QWORD *)a2)
      sprop_str_cat(a1, (uint64_t)a2, " ", 1u);
    v19 = a2[1].i32[0];
    if (v19)
    {
      v20 = (v19 - 1);
      if (*(_BYTE *)(*(_QWORD *)a2 + v20) == 32)
      {
        *(_BYTE *)(*(_QWORD *)a2 + v20) = 0;
        a2[1] = vadd_s32(a2[1], (int32x2_t)-1);
      }
    }
  }
  return v10;
}

uint64_t sprop_get_word_features(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t result;
  uint64_t (**v8)();
  uint64_t (*v9)();

  v6 = *(_DWORD *)(a2 + 8);
  if (!v6
    || *(_DWORD *)(a2 + 32)
    || (result = sprop_str_copy(a1, a2 + 24, *(char **)a2, v6), (result & 0x80000000) == 0))
  {
    v8 = &off_1EA9381E8;
    do
    {
      result = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))*v8)(a1, *(v8 - 1), a2, 0, 0, 0, a3);
      if ((result & 0x80000000) != 0)
        break;
      v9 = v8[1];
      v8 += 3;
    }
    while (v9);
  }
  return result;
}

uint64_t SPROP_sen_len(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  _BYTE *v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  char v18;

  v12 = *(_BYTE **)(a3 + 24);
  v13 = 1;
  while (*v12 == 32)
  {
    v13 = (v13 + 1);
LABEL_6:
    ++v12;
  }
  if (*v12)
    goto LABEL_6;
  v14 = uint32_log2(v13);
  if (v14 >= 8)
    v15 = 8;
  else
    v15 = v14;
  v18 = v15 | 0x30;
  if (*a5)
    v16 = a4;
  else
    v16 = 0;
  return sprop_add_feature(a1, a7, v16, "SENTLEN=", a2, &v18, 1u);
}

uint64_t SPROP_avg_wrd_len(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  char v18;

  v12 = *(_BYTE **)(a3 + 24);
  v13 = 1;
  while (*v12 == 32)
  {
    ++v13;
LABEL_6:
    ++v12;
  }
  if (*v12)
    goto LABEL_6;
  v14 = uint32_log2(4 * *(_DWORD *)(a3 + 36) / v13);
  if (v14 >= 8)
    v15 = 8;
  else
    v15 = v14;
  v18 = v15 | 0x30;
  if (*a5)
    v16 = a4;
  else
    v16 = 0;
  return sprop_add_feature(a1, a7, v16, "WORDLEN=", a2, &v18, 1u);
}

uint64_t SPROP_freq10_caps(uint64_t a1, char *a2, unsigned __int8 **a3, uint64_t a4, _QWORD *a5, int a6, uint64_t a7)
{
  unsigned int v12;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  _BYTE v20[7];
  char v21;

  v12 = *((_DWORD *)a3 + 2);
  if (v12)
  {
    v14 = *a3;
    v15 = **a3;
    if (**a3)
    {
      v16 = 0;
      do
      {
        v17 = Utf8_LengthInBytes(v14, 1);
        if (utf8_ToLower((char *)v14, 0, (uint64_t)v20) == 1)
          ++v16;
        v14 += v17;
      }
      while (*v14);
      v15 = 10 * v16;
    }
    v12 = v15 / *((_DWORD *)a3 + 3);
  }
  if (v12 >= 9)
    LOBYTE(v12) = 9;
  v21 = v12 | 0x30;
  if (*a5)
    v18 = a4;
  else
    v18 = 0;
  return sprop_add_feature(a1, a7, v18, "CAPS=", a2, &v21, 1u);
}

uint64_t SPROP_freq10_puncs(uint64_t a1, char *a2, unsigned __int8 **a3, uint64_t a4, _QWORD *a5, int a6, uint64_t a7)
{
  unsigned __int8 *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  char v20;

  if (*((_DWORD *)a3 + 2))
  {
    v13 = *a3;
    v14 = **a3;
    if (**a3)
    {
      v15 = 0;
      do
      {
        v16 = Utf8_LengthInBytes(v13, 1);
        if (utf8_BelongsToSet(0xAu, v13, 0, v16) == 1)
          ++v15;
        v13 += v16;
      }
      while (*v13);
      v14 = 10 * v15;
    }
    v17 = v14 / *((_DWORD *)a3 + 3) + 48;
  }
  else
  {
    LOBYTE(v17) = 48;
  }
  v20 = v17;
  if (*a5)
    v18 = a4;
  else
    v18 = 0;
  return sprop_add_feature(a1, a7, v18, "PUNC=", a2, &v20, 1u);
}

uint64_t SPROP_first_wrd(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  char *v13;
  char *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;

  v13 = utf8_strchr(*(char **)(a3 + 24), " ");
  v14 = *(char **)(a3 + 24);
  v15 = strlen(v14);
  if (v13)
    v16 = (_DWORD)v13 - (_DWORD)v14;
  else
    v16 = v15;
  if (*a5)
    v17 = a4;
  else
    v17 = 0;
  return sprop_add_feature(a1, a7, v17, "FIRSTWD=", a2, v14, v16);
}

uint64_t SPROP_last_char(uint64_t a1, char *a2, _BYTE **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v19;

  v7 = *((_DWORD *)a3 + 2);
  if (v7)
  {
    do
    {
      v19 = v7 - 1;
      if (v7 == 1)
        break;
      utf8_GetPreviousValidUtf8Offset((uint64_t)*a3, &v19);
      if (!utf8_BelongsToSet(0, *a3, v19, *((_DWORD *)a3 + 2)))
      {
        v14 = (uint64_t)*a3;
        v15 = &(*a3)[v19];
        v16 = Utf8_LengthInBytes(v15, 1);
        if (!v14)
          return 0;
        if (*a5)
          v17 = a4;
        else
          v17 = 0;
        return sprop_add_feature(a1, a7, v17, "LASTCH=", a2, (char *)v15, v16);
      }
      v7 = v19;
    }
    while (v19);
  }
  return 0;
}

uint64_t SPROP_freq4_singlechars(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 *v7;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  char v19;

  if (!*(_DWORD *)(a3 + 32))
    return 0;
  v7 = *(unsigned __int8 **)(a3 + 24);
  if (!*v7)
    return 0;
  v13 = 0;
  v14 = 0;
  v15 = *(unsigned __int8 **)(a3 + 24);
  do
  {
    v16 = &v15[Utf8_LengthInBytes(v15, 1)];
    if ((*v15 | 0x20) == 0x20)
    {
      ++v13;
      if (Utf8_LengthInUtf8chars((unint64_t)v7, (int)v15 - (int)v7) == 1)
      {
        ++v14;
        v7 = v16;
      }
    }
    v15 = v16;
  }
  while (*v16);
  if (!v13)
    return 0;
  v19 = v14 / v13 + 48;
  if (*a5)
    v17 = a4;
  else
    v17 = 0;
  return sprop_add_feature(a1, a7, v17, "SINGLECH=", a2, &v19, 1u);
}

uint64_t SPROP_numeral(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  char *v15;
  int v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unsigned int v22;
  uint64_t v24;

  v9 = *(unsigned int *)(a6 + 8);
  v10 = *(char **)(a3 + 24);
  v11 = *(unsigned int *)(a3 + 32);
  v12 = (unint64_t)&v10[v11];
  if ((_DWORD)v9)
  {
    v13 = *(const char **)a6;
    v14 = *(_QWORD *)a6 + v9;
    v15 = "1";
    do
    {
      v16 = strlen(v13);
      if ((_DWORD)v11)
      {
        v17 = v10;
        do
        {
          v18 = strstr(v17, v13);
          if (!v18)
            break;
          v19 = v18;
          v17 = &v18[v16];
          if ((*v17 | 0x20) == 0x20 && (v19 == v10 || *(v19 - 1) == 32))
          {
            v20 = a7;
            goto LABEL_22;
          }
        }
        while ((unint64_t)v17 < v12);
      }
      v13 += (v16 + 1);
    }
    while ((unint64_t)v13 < v14);
  }
  v20 = a7;
  if (!(_DWORD)v11)
    goto LABEL_19;
  v21 = v10 + 1;
  do
    v22 = *(v21 - 1) - 58;
  while (v22 <= 0xFFFFFFF5 && (unint64_t)v21++ < v12);
  if (v22 > 0xFFFFFFF5)
    v15 = "1";
  else
LABEL_19:
    v15 = "0";
LABEL_22:
  if (*a5)
    v24 = a4;
  else
    v24 = 0;
  return sprop_add_feature(a1, v20, v24, "NUMERAL=", a2, v15, 0);
}

uint64_t SPROP_keywords(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unsigned int v16;
  char *v17;
  char *v18;
  char *v19;

  v7 = *(unsigned int *)(a4 + 8);
  if (!(_DWORD)v7)
    return 0;
  v11 = 0;
  v12 = *(char **)a4;
  v13 = *(_QWORD *)a4 + v7;
  v14 = *(_QWORD *)(a3 + 24) + *(unsigned int *)(a3 + 32);
  do
  {
    v15 = *(char **)(a3 + 24);
    v16 = strlen(v12);
    if ((unint64_t)v15 < v14)
    {
      v17 = *(char **)(a3 + 24);
      do
      {
        v18 = strstr(v17, v12);
        if (!v18)
          break;
        v19 = v18;
        v17 = &v18[v16];
        if ((*v17 | 0x20) == 0x20 && (v19 == v15 || *(v19 - 1) == 32))
        {
          v11 = sprop_str_set_add(a1, a7, a2, v12, v16);
          if ((v11 & 0x80000000) != 0)
            return v11;
          break;
        }
      }
      while ((unint64_t)v17 < v14);
    }
    v12 += v16 + 1;
  }
  while ((unint64_t)v12 < v13);
  return v11;
}

uint64_t SPROP_keywords_bigrams(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  const char *v15;
  unsigned int v16;
  const char *v17;
  const char *v18;
  const char *v19;

  v7 = *(unsigned int *)(a4 + 8);
  if (!(_DWORD)v7)
    return 0;
  v11 = 0;
  v12 = *(char **)a4;
  v13 = *(_QWORD *)a4 + v7;
  v14 = *(_QWORD *)(a3 + 24) + *(unsigned int *)(a3 + 32);
  do
  {
    v15 = *(const char **)(a3 + 24);
    v16 = strlen(v12);
    if ((unint64_t)v15 < v14)
    {
      v17 = *(const char **)(a3 + 24);
      do
      {
        v18 = sprop_bigrams(v17, v12);
        if (!v18)
          break;
        v19 = v18;
        v17 = &v18[v16];
        if ((*(unsigned __int8 *)v17 | 0x20) == 0x20 && (v19 == v15 || *(v19 - 1) == 32))
        {
          v11 = sprop_str_set_add(a1, a7, a2, v12, v16);
          if ((v11 & 0x80000000) != 0)
            return v11;
          break;
        }
      }
      while ((unint64_t)v17 < v14);
    }
    v12 += v16 + 1;
  }
  while ((unint64_t)v12 < v13);
  return v11;
}

uint64_t sprop_add_feature(uint64_t a1, uint64_t a2, uint64_t a3, char *__s, char *a5, char *a6, unsigned int a7)
{
  const char *v13;
  uint64_t v14;
  unsigned __int16 v15;
  unsigned __int16 v16;
  const char *v17;
  size_t v18;

  if (a3)
  {
    v13 = *(const char **)a3;
    v14 = *(unsigned int *)(a3 + 8);
    v15 = strlen(__s);
    if (a7)
    {
      v16 = a7;
      if (!(_DWORD)v14)
        return 0;
    }
    else
    {
      v16 = strlen(a6);
      if (!(_DWORD)v14)
        return 0;
    }
    v17 = &v13[v14];
    v18 = v16;
    while (strncmp(v13, __s, v15) || strncmp(&v13[v15], a6, v18))
    {
      v13 += strlen(v13) + 1;
      if (v13 >= v17)
        return 0;
    }
  }
  return sprop_str_set_add(a1, a2, a5, a6, a7);
}

uint64_t SPROP_word_token(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v23;
  uint64_t v24;

  v10 = sprop_input_mrk_cnt((uint64_t)a3);
  v11 = sprop_input_mrk((uint64_t)a3);
  v23 = SPROP_STR_null;
  v24 = 0;
  if (v10)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = v10;
    v16 = (unsigned int *)(v11 + 12);
    while (1)
    {
      v17 = *(v16 - 3);
      if (v17 == 1)
      {
        v18 = sprop_str_set_add(a1, a7 + 16 * v13, &byte_1DEBD87CE, &byte_1DEBD87CE, 0);
        if ((v18 & 0x80000000) != 0
          || (v19 = *(_QWORD *)(a7 + 16 * v13),
              v20 = *(_DWORD *)(a7 + 16 * v13 + 8),
              v18 = sprop_str_copy(a1, (uint64_t)&v23, (char *)(*a3 + *v16 - v12), v16[1]),
              (v18 & 0x80000000) != 0))
        {
          v14 = v18;
          goto LABEL_16;
        }
        v21 = v19 + 24 * v20;
        v14 = sprop_normalize(a1, (int32x2_t *)(v21 - 24), (uint64_t)&v23, 0);
        if ((v14 & 0x80000000) != 0)
          goto LABEL_16;
        if (!*(_DWORD *)(v21 - 16))
        {
          v14 = sprop_str_cat(a1, v21 - 24, "-", 0);
          if ((v14 & 0x80000000) != 0)
            goto LABEL_16;
        }
        ++v13;
      }
      else if (v17 == 0x4000)
      {
        v12 = *v16;
      }
      v16 += 8;
      if (!--v15)
        goto LABEL_16;
    }
  }
  v14 = 0;
LABEL_16:
  sprop_str_dealloc(a1, (uint64_t *)&v23);
  return v14;
}

uint64_t SPROP_word_lowercase_token(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v23;
  uint64_t v24;

  v10 = sprop_input_mrk_cnt((uint64_t)a3);
  v11 = sprop_input_mrk((uint64_t)a3);
  v23 = SPROP_STR_null;
  v24 = 0;
  if (v10)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = v10;
    v16 = (unsigned int *)(v11 + 12);
    while (1)
    {
      v17 = *(v16 - 3);
      if (v17 == 1)
      {
        v18 = sprop_str_set_add(a1, a7 + 16 * v13, &byte_1DEBD87CE, &byte_1DEBD87CE, 0);
        if ((v18 & 0x80000000) != 0
          || (v19 = *(_QWORD *)(a7 + 16 * v13),
              v20 = *(_DWORD *)(a7 + 16 * v13 + 8),
              v18 = sprop_str_copy(a1, (uint64_t)&v23, (char *)(*a3 + *v16 - v12), v16[1]),
              (v18 & 0x80000000) != 0))
        {
          v14 = v18;
          goto LABEL_16;
        }
        v21 = v19 + 24 * v20;
        v14 = sprop_normalize(a1, (int32x2_t *)(v21 - 24), (uint64_t)&v23, 1);
        if ((v14 & 0x80000000) != 0)
          goto LABEL_16;
        if (!*(_DWORD *)(v21 - 16))
        {
          v14 = sprop_str_cat(a1, v21 - 24, "-", 0);
          if ((v14 & 0x80000000) != 0)
            goto LABEL_16;
        }
        ++v13;
      }
      else if (v17 == 0x4000)
      {
        v12 = *v16;
      }
      v16 += 8;
      if (!--v15)
        goto LABEL_16;
    }
  }
  v14 = 0;
LABEL_16:
  sprop_str_dealloc(a1, (uint64_t *)&v23);
  return v14;
}

uint64_t SPROP_word_token_class(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  __int16 v22;
  _BYTE *v23;
  unsigned int v24;
  uint64_t NextUtf8OffsetLimit;
  unsigned int v26;
  char *v27;
  BOOL v28;
  const char *v29;
  const char *v30;
  _QWORD *v31;

  v8 = sprop_input_mrk_cnt(a3);
  v31 = (_QWORD *)a3;
  v9 = sprop_input_mrk(a3);
  if (v8)
  {
    v10 = v9;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    result = 0;
    v15 = v8;
    while (1)
    {
      v16 = *(_DWORD *)(v10 + 32 * v11);
      if (v16 == 1)
        break;
      if (v16 == 0x4000)
        v12 = *(unsigned int *)(v10 + 32 * v11 + 12);
LABEL_48:
      if (++v11 == v15)
        return result;
    }
    v17 = v10 + 32 * v11;
    v20 = *(_DWORD *)(v17 + 16);
    v19 = (unsigned int *)(v17 + 16);
    v18 = v20;
    if (v20)
    {
      v21 = 0;
      v22 = 0;
      v23 = (_BYTE *)(*v31 + *(v19 - 1) - v12);
      v24 = 30;
      do
      {
        if (utf8_BelongsToSet(6u, v23, v21, v18))
        {
          v24 = v24 & 0xFFFFFEF1 | 0x100;
          ++v22;
        }
        else if (utf8_BelongsToSet(0xAu, v23, v21, *v19))
        {
          v24 &= 0xFFFFFFE1;
          switch(v23[v21])
          {
            case ',':
              v24 |= 0x40u;
              break;
            case '-':
              v24 |= 0x200u;
              break;
            case '.':
              v24 |= 0x20u;
              break;
            case '/':
              v24 |= 0x80u;
              break;
            default:
              break;
          }
        }
        else if (utf8_BelongsToSet(0x12u, v23, v21, *v19)
               || utf8_BelongsToSet(0x15u, v23, v21, *v19)
               || utf8_BelongsToSet(0x18u, v23, v21, *v19)
               || utf8_BelongsToSet(0x1Bu, v23, v21, *v19)
               || utf8_BelongsToSet(0x1Eu, v23, v21, *v19))
        {
          v26 = v24 | 0xC01;
          if ((_DWORD)v21)
            v26 = v24 & 0xFFFFFBEF | 0x400;
          v24 = v26 & 0xFFFFFFEB;
        }
        else
        {
          v24 = v24 & 0xFFFFFBED | 0x400;
        }
        NextUtf8OffsetLimit = utf8_GetNextUtf8OffsetLimit(v23, v21, *v19);
        v21 = NextUtf8OffsetLimit;
        v18 = *v19;
      }
      while ((_DWORD)NextUtf8OffsetLimit != *v19);
      v27 = "lc";
      if ((v24 & 4) != 0)
        goto LABEL_46;
      if (v22 == 2)
      {
        v27 = "2d";
      }
      else
      {
        if (v22 != 4)
        {
          if ((v24 & 0x100) != 0)
          {
            v27 = "an";
            if ((v24 & 0x400) != 0)
              goto LABEL_46;
            v27 = "dd";
            if ((v24 & 0x200) != 0)
              goto LABEL_46;
            v27 = "ds";
            if ((v24 & 0x80) != 0)
              goto LABEL_46;
            v27 = "dc";
            if ((v24 & 0x40) != 0)
              goto LABEL_46;
            v28 = (v24 & 0x20) == 0;
            v29 = "dp";
            v30 = "num";
          }
          else if ((v24 & 2) != 0)
          {
            v28 = (_DWORD)NextUtf8OffsetLimit == 1;
            v29 = "ac";
            v30 = "sc";
          }
          else
          {
            v27 = "cp";
            if ((v24 & 0x20) != 0)
              goto LABEL_46;
            v28 = (v24 & 1) == 0;
            v29 = "ic";
            v30 = "other";
          }
          if (v28)
            v27 = (char *)v30;
          else
            v27 = (char *)v29;
          goto LABEL_46;
        }
        v27 = "4d";
      }
    }
    else
    {
      v27 = "lc";
    }
LABEL_46:
    result = sprop_str_set_add(a1, a7 + 16 * v13, &byte_1DEBD87CE, v27, 0);
    if ((result & 0x80000000) != 0)
      return result;
    ++v13;
    goto LABEL_48;
  }
  return 0;
}

uint64_t SPROP_word_begin_sentence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v10;
  uint64_t v11;
  int *v12;
  unsigned __int16 v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  int v17;

  v10 = sprop_input_mrk_cnt(a3);
  v11 = sprop_input_mrk(a3);
  if (!v10)
    return 0;
  v12 = (int *)v11;
  v13 = 0;
  result = 0;
  v15 = v10;
  v16 = "1";
  do
  {
    v17 = *v12;
    v12 += 8;
    if (v17 == 1)
    {
      result = sprop_str_set_add(a1, a7 + 16 * v13, &byte_1DEBD87CE, v16, 0);
      if ((result & 0x80000000) != 0)
        return result;
      ++v13;
      v16 = "0";
    }
    --v15;
  }
  while (v15);
  return result;
}

uint64_t be_adapt_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Object;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = 0;
  v28 = 0;
  v5 = 2410684423;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  if (a5)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v28);
    if ((inited & 0x80000000) == 0)
    {
      v10 = heap_Calloc(*(_QWORD **)(v28 + 8), 1, 656);
      if (v10)
      {
        v15 = v10;
        Object = objc_GetObject(*(_QWORD *)(v28 + 48), (uint64_t)"LINGDB", &v27);
        if ((Object & 0x80000000) != 0)
          goto LABEL_13;
        *(_QWORD *)(v15 + 8) = *(_QWORD *)(v27 + 8);
        Object = objc_GetObject(*(_QWORD *)(v28 + 48), (uint64_t)"FE_DEPES", &v26);
        if ((Object & 0x80000000) != 0)
          goto LABEL_13;
        v17 = v26;
        *(_QWORD *)(v15 + 32) = *(_QWORD *)(v26 + 8);
        *(_OWORD *)(v15 + 16) = *(_OWORD *)(v17 + 16);
        Object = objc_GetObject(*(_QWORD *)(v28 + 48), (uint64_t)"FE_DCTLKP", &v25);
        if ((Object & 0x80000000) != 0)
          goto LABEL_13;
        v18 = v25;
        *(_QWORD *)(v15 + 56) = *(_QWORD *)(v25 + 8);
        *(_OWORD *)(v15 + 40) = *(_OWORD *)(v18 + 16);
        *(_QWORD *)(v15 + 80) = 0;
        *(_QWORD *)(v15 + 64) = safeh_GetNullHandle();
        *(_QWORD *)(v15 + 72) = v19;
        if ((objc_GetObject(*(_QWORD *)(v28 + 48), (uint64_t)"PHONMAP", &v24) & 0x80000000) == 0)
        {
          v20 = v24;
          *(_QWORD *)(v15 + 80) = *(_QWORD *)(v24 + 8);
          *(_OWORD *)(v15 + 64) = *(_OWORD *)(v20 + 16);
        }
        *(_QWORD *)v15 = v28;
        *(_DWORD *)(v15 + 88) = 0;
        *(_QWORD *)(v15 + 296) = a3;
        *(_QWORD *)(v15 + 304) = a4;
        Object = hlp_VoiceSetup_0(v15);
        if ((Object & 0x80000000) != 0)
        {
LABEL_13:
          v5 = Object;
        }
        else
        {
          v5 = globalbeadapt_SetFEBOOLKeyword((_QWORD *)v15, (uint64_t)"feGlobalmergemorphemes", (_DWORD *)(v15 + 280), 1);
          if ((v5 & 0x80000000) == 0)
          {
            v21 = 503;
LABEL_16:
            *(_QWORD *)a5 = v15;
            *(_DWORD *)(a5 + 8) = v21;
            return v5;
          }
        }
      }
      else
      {
        log_OutPublic(*(_QWORD *)(v28 + 32), (uint64_t)"BE_ADAPT", 64000, 0, v11, v12, v13, v14, v23);
        v5 = 2410684426;
      }
      be_adapt_ObjClose(*(_QWORD **)a5, *(_QWORD *)(a5 + 8));
      v15 = 0;
      v21 = 0;
      goto LABEL_16;
    }
    return inited;
  }
  return v5;
}

uint64_t hlp_VoiceSetup_0(uint64_t a1)
{
  uint64_t inited;
  __int16 v3;
  __int16 v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  int v8;
  _BOOL4 v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  size_t v21;
  char *v22;
  const char *v23;
  char *v24;
  const char *v25;
  char *v26;
  char *v27;
  unsigned int v28;
  unsigned int v29;
  const char *v30;
  char *v31;
  char *v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  _QWORD *v47;
  uint64_t *v48;
  int v49;
  char *v50;
  const char *v51;
  char *v52;
  const char *v53;
  char *v54;
  const char *v55;
  char *v56;
  char *v57;
  unsigned int v58;
  unsigned int v59;
  const char *v60;
  char *v61;
  char *v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  __int128 v75;
  __int128 v76;
  _QWORD *v77;
  uint64_t *v78;
  int v79;
  char *v80;
  unsigned int v82;
  __int128 v83;
  __int128 v84;
  _QWORD *(*v85)(_QWORD *, _QWORD *);
  int v86;
  char *__s1;
  unsigned int v88;
  unsigned __int8 __c;
  __int16 __c_1;
  const char **__c_3;
  char v92[10];
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  __c_3 = 0;
  __c_1 = 0;
  __c = 0;
  v88 = 0;
  __s1 = 0;
  v86 = 0;
  *(_DWORD *)(a1 + 636) = 0;
  if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"voicelexicontraining", &__s1) & 0x80000000) == 0
    && __s1
    && !strcmp(__s1, "yes"))
  {
    *(_DWORD *)(a1 + 636) = 1;
  }
  *(_DWORD *)(a1 + 264) = 0;
  if ((paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"prmigexists", &v88) & 0x80000000) == 0
    && v88 == 1)
  {
    *(_DWORD *)(a1 + 264) = 1;
  }
  *(_DWORD *)(a1 + 248) = 0;
  __c_1 = 0;
  inited = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "fecfg", "usetntag", &__c_3, &__c_1, &__c);
  if ((inited & 0x80000000) != 0)
    return inited;
  if (__c_1 == 1 && __c_3 && **__c_3 == 49)
    *(_DWORD *)(a1 + 248) = 1;
  *(_DWORD *)(a1 + 252) = 0;
  __c_1 = 0;
  inited = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "fecfg", "docclassmap", &__c_3, &__c_1, &__c);
  if ((inited & 0x80000000) != 0)
    return inited;
  if (__c_1 == 1 && __c_3 && !strncmp(*__c_3, "yes", 3uLL))
    *(_DWORD *)(a1 + 252) = 1;
  inited = com_depes_InitLayers(*(_QWORD *)a1, a1 + 96);
  if ((inited & 0x80000000) != 0)
    return inited;
  *(_QWORD *)(a1 + 224) = 0x3000200010000;
  *(_WORD *)(a1 + 232) = 4;
  if (*(_DWORD *)(a1 + 264))
  {
    v3 = 8;
    v4 = 7;
    v5 = 6;
    v6 = 5;
  }
  else
  {
    v6 = 0;
    v3 = 7;
    v4 = 6;
    v5 = 5;
  }
  *(_WORD *)(a1 + 234) = v6;
  *(_WORD *)(a1 + 238) = v5;
  *(_WORD *)(a1 + 240) = v4;
  v7 = v3 - (*(_DWORD *)(a1 + 248) == 0);
  *(_WORD *)(a1 + 236) = v7;
  *(_WORD *)(a1 + 106) = v7 + 1;
  inited = globalbeadapt_Init_SpecialSymbolsFromPhonmap(a1);
  if ((inited & 0x80000000) != 0)
    return inited;
  v8 = (*(uint64_t (**)(_QWORD, _QWORD, const char *))(*(_QWORD *)(a1 + 32) + 72))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), "pre_be_adapt");
  v9 = 1;
  if (!v8)
    v9 = (*(uint64_t (**)(_QWORD, _QWORD, const char *))(*(_QWORD *)(a1 + 32) + 72))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), "post_be_adapt") != 0;
  *(_DWORD *)(a1 + 320) = v9;
  *(_DWORD *)(a1 + 312) = 1;
  inited = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 56) + 72))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptlex", a1 + 312);
  if ((inited & 0x80000000) != 0)
    return inited;
  *(_BYTE *)(a1 + 480) = 1;
  *(_DWORD *)(a1 + 316) = 1;
  inited = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 56) + 72))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptlexmw", a1 + 316);
  if ((inited & 0x80000000) != 0)
    return inited;
  *(_WORD *)(a1 + 632) = 513;
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, int *))(*(_QWORD *)(a1 + 56) + 72))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfg", &v86);
  if ((v10 & 0x80000000) != 0)
    return v10;
  *(_OWORD *)(a1 + 640) = 0u;
  if (v86)
  {
    __c_1 = 2;
    inited = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfg", "loo", &__c_3, &__c_1, &__c);
    if ((inited & 0x80000000) != 0)
      return inited;
    if (__c_1 == 1)
    {
      v11 = *__c_3;
      v12 = strchr((char *)*__c_3, __c);
      if (v12)
      {
        *v12 = 0;
        v11 = *__c_3;
      }
      v13 = strlen(v11);
      v14 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), v13 + 1);
      *(_QWORD *)(a1 + 640) = v14;
      if (!v14)
        goto LABEL_143;
      strcpy(v14, *__c_3);
    }
    __c_1 = 2;
    v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfg", "loodiff", &__c_3, &__c_1, &__c);
    if ((v10 & 0x80000000) != 0)
      return v10;
    if (__c_1 == 1)
    {
      v19 = *__c_3;
      v20 = strchr((char *)*__c_3, __c);
      if (v20)
      {
        *v20 = 0;
        v19 = *__c_3;
      }
      v21 = strlen(v19);
      v22 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), v21 + 1);
      *(_QWORD *)(a1 + 648) = v22;
      if (!v22)
        goto LABEL_143;
      strcpy(v22, *__c_3);
    }
  }
  if (*(_DWORD *)(a1 + 312))
  {
    __c_1 = 2;
    inited = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfg", "nrdctpart", &__c_3, &__c_1, &__c);
    if ((inited & 0x80000000) != 0)
      return inited;
    if (__c_1 == 1)
    {
      v23 = *__c_3;
      v24 = strchr((char *)*__c_3, __c);
      if (v24)
      {
        *v24 = 0;
        v23 = *__c_3;
      }
      *(_BYTE *)(a1 + 480) = atoi(v23);
    }
    __c_1 = 2;
    v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfg", "fn", &__c_3, &__c_1, &__c);
    if ((v10 & 0x80000000) != 0)
      return v10;
    if (__c_1 == 1)
    {
      v25 = *__c_3;
      v26 = strchr((char *)*__c_3, 59);
      if (v26)
      {
        v27 = v26;
        do
        {
          *v27 = 0;
          v28 = *(unsigned __int8 *)(a1 + 324);
          *(_BYTE *)(a1 + 324) = v28 + 1;
          strcpy((char *)(a1 + 10 * v28 + 325), v25);
          v25 = v27 + 1;
          v27 = strchr(v27 + 1, 59);
        }
        while (v27);
      }
      v29 = *(unsigned __int8 *)(a1 + 324);
      *(_BYTE *)(a1 + 324) = v29 + 1;
      strcpy((char *)(a1 + 10 * v29 + 325), v25);
      __c_1 = 2;
      v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfg", "ft", &__c_3, &__c_1, &__c);
      if ((v10 & 0x80000000) != 0)
        return v10;
      if (__c_1 == 1)
      {
        v30 = *__c_3;
        v31 = strchr((char *)*__c_3, 59);
        *(_BYTE *)(a1 + 324) = 0;
        if (v31)
        {
          v32 = v31;
          while (1)
          {
            *v32 = 0;
            if (!strcmp(v30, "NLU"))
              break;
            if (!strcmp(v30, "PRM"))
            {
              v33 = 1;
              goto LABEL_64;
            }
            if (!strcmp(v30, "BND"))
            {
              v33 = 2;
              goto LABEL_64;
            }
            if (!strcmp(v30, "LNG"))
            {
              v33 = 3;
LABEL_64:
              v34 = *(unsigned __int8 *)(a1 + 324);
              *(_BYTE *)(a1 + 324) = v34 + 1;
              *(_DWORD *)(a1 + 4 * v34 + 428) = v33;
            }
            v30 = v32 + 1;
            v32 = strchr(v32 + 1, 59);
            if (!v32)
              goto LABEL_66;
          }
          v33 = 0;
          goto LABEL_64;
        }
LABEL_66:
        if (!strcmp(v30, "NLU"))
        {
          v38 = *(unsigned __int8 *)(a1 + 324);
          LOBYTE(v36) = v38 + 1;
          *(_BYTE *)(a1 + 324) = v38 + 1;
          *(_DWORD *)(a1 + 4 * v38 + 428) = 0;
        }
        else
        {
          if (!strcmp(v30, "PRM"))
          {
            v39 = *(unsigned __int8 *)(a1 + 324);
            LOBYTE(v36) = v39 + 1;
            *(_BYTE *)(a1 + 324) = v39 + 1;
            v40 = a1 + 4 * v39;
            v41 = 1;
          }
          else
          {
            if (strcmp(v30, "BND"))
            {
              v35 = strcmp(v30, "LNG");
              v36 = *(unsigned __int8 *)(a1 + 324);
              if (!v35)
              {
                v37 = a1 + 4 * v36;
                LOBYTE(v36) = v36 + 1;
                *(_BYTE *)(a1 + 324) = v36;
                *(_DWORD *)(v37 + 428) = 3;
              }
              goto LABEL_76;
            }
            v42 = *(unsigned __int8 *)(a1 + 324);
            LOBYTE(v36) = v42 + 1;
            *(_BYTE *)(a1 + 324) = v42 + 1;
            v40 = a1 + 4 * v42;
            v41 = 2;
          }
          *(_DWORD *)(v40 + 428) = v41;
        }
      }
      else
      {
        LOBYTE(v36) = *(_BYTE *)(a1 + 324);
      }
LABEL_76:
      v43 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 8 * v36);
      *(_QWORD *)(a1 + 472) = v43;
      if (!v43)
      {
LABEL_143:
        v10 = 2410684426;
        log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"BE_ADAPT", 64000, 0, v15, v16, v17, v18, v82);
        return v10;
      }
      if (*(_BYTE *)(a1 + 324))
      {
        v44 = 0;
        v45 = xmmword_1EA9483D8;
        v46 = *(_OWORD *)off_1EA9483E8;
        v82 = off_1EA9483E8[0];
        do
        {
          v47 = *(_QWORD **)(*(_QWORD *)a1 + 8);
          v48 = (uint64_t *)(*(_QWORD *)(a1 + 472) + 8 * v44);
          v83 = v45;
          v84 = v46;
          v85 = ssftmap_ElemFreeString;
          inited = ssftmap_ObjOpen(v47, 0, &v83, v48);
          if ((inited & 0x80000000) != 0)
            return inited;
          __c_1 = 2;
          LH_itoa(1u, v92, 0xAu);
          __strcat_chk();
          v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfg", v92, &__c_3, &__c_1, &__c);
          if ((v10 & 0x80000000) != 0)
            return v10;
          if (__c_1)
          {
            v49 = 1;
            do
            {
              v50 = strchr((char *)*__c_3, 59);
              if (v50)
              {
                *v50 = 0;
                inited = ssftmap_Insert(*(_QWORD *)(*(_QWORD *)(a1 + 472) + 8 * v44), (uint64_t)*__c_3, (uint64_t)(v50 + 1));
                if ((inited & 0x80000000) != 0)
                  return inited;
              }
              __c_1 = 2;
              LH_itoa((unsigned __int16)++v49, v92, 0xAu);
              __strcat_chk();
              v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfg", v92, &__c_3, &__c_1, &__c);
              if ((v10 & 0x80000000) != 0)
                return v10;
            }
            while (__c_1);
          }
          ++v44;
          v46 = *(_OWORD *)off_1EA9483E8;
          v45 = xmmword_1EA9483D8;
        }
        while (v44 < *(unsigned __int8 *)(a1 + 324));
      }
    }
  }
  if (!*(_DWORD *)(a1 + 316))
    return v10;
  __c_1 = 2;
  inited = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfgmw", "nrdctpart", &__c_3, &__c_1, &__c);
  if ((inited & 0x80000000) != 0)
    return inited;
  if (__c_1 == 1)
  {
    v51 = *__c_3;
    v52 = strchr((char *)*__c_3, __c);
    if (v52)
    {
      *v52 = 0;
      v51 = *__c_3;
    }
    *(_BYTE *)(a1 + 632) = atoi(v51);
  }
  __c_1 = 2;
  inited = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfgmw", "maxnrword", &__c_3, &__c_1, &__c);
  if ((inited & 0x80000000) != 0)
    return inited;
  if (__c_1 == 1)
  {
    v53 = *__c_3;
    v54 = strchr((char *)*__c_3, __c);
    if (v54)
    {
      *v54 = 0;
      v53 = *__c_3;
    }
    *(_BYTE *)(a1 + 633) = atoi(v53);
  }
  __c_1 = 2;
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfgmw", "fn", &__c_3, &__c_1, &__c);
  if ((v10 & 0x80000000) != 0 || __c_1 != 1)
    return v10;
  v55 = *__c_3;
  v56 = strchr((char *)*__c_3, 59);
  if (v56)
  {
    v57 = v56;
    do
    {
      *v57 = 0;
      v58 = *(unsigned __int8 *)(a1 + 481);
      *(_BYTE *)(a1 + 481) = v58 + 1;
      strcpy((char *)(a1 + 10 * v58 + 482), v55);
      v55 = v57 + 1;
      v57 = strchr(v57 + 1, 59);
    }
    while (v57);
  }
  v59 = *(unsigned __int8 *)(a1 + 481);
  *(_BYTE *)(a1 + 481) = v59 + 1;
  strcpy((char *)(a1 + 10 * v59 + 482), v55);
  __c_1 = 2;
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfgmw", "ft", &__c_3, &__c_1, &__c);
  if ((v10 & 0x80000000) != 0)
    return v10;
  if (__c_1 != 1)
  {
    LOBYTE(v66) = *(_BYTE *)(a1 + 481);
    goto LABEL_128;
  }
  v60 = *__c_3;
  v61 = strchr((char *)*__c_3, 59);
  *(_BYTE *)(a1 + 481) = 0;
  if (v61)
  {
    v62 = v61;
    while (1)
    {
      *v62 = 0;
      if (!strcmp(v60, "NLU"))
        break;
      if (!strcmp(v60, "PRM"))
      {
        v63 = 1;
        goto LABEL_116;
      }
      if (!strcmp(v60, "BND"))
      {
        v63 = 2;
        goto LABEL_116;
      }
      if (!strcmp(v60, "LNG"))
      {
        v63 = 3;
LABEL_116:
        v64 = *(unsigned __int8 *)(a1 + 481);
        *(_BYTE *)(a1 + 481) = v64 + 1;
        *(_DWORD *)(a1 + 4 * v64 + 584) = v63;
      }
      v60 = v62 + 1;
      v62 = strchr(v62 + 1, 59);
      if (!v62)
        goto LABEL_118;
    }
    v63 = 0;
    goto LABEL_116;
  }
LABEL_118:
  if (!strcmp(v60, "NLU"))
  {
    v68 = *(unsigned __int8 *)(a1 + 481);
    LOBYTE(v66) = v68 + 1;
    *(_BYTE *)(a1 + 481) = v68 + 1;
    *(_DWORD *)(a1 + 4 * v68 + 584) = 0;
    goto LABEL_128;
  }
  if (!strcmp(v60, "PRM"))
  {
    v69 = *(unsigned __int8 *)(a1 + 481);
    LOBYTE(v66) = v69 + 1;
    *(_BYTE *)(a1 + 481) = v69 + 1;
    v70 = a1 + 4 * v69;
    v71 = 1;
LABEL_127:
    *(_DWORD *)(v70 + 584) = v71;
    goto LABEL_128;
  }
  if (!strcmp(v60, "BND"))
  {
    v72 = *(unsigned __int8 *)(a1 + 481);
    LOBYTE(v66) = v72 + 1;
    *(_BYTE *)(a1 + 481) = v72 + 1;
    v70 = a1 + 4 * v72;
    v71 = 2;
    goto LABEL_127;
  }
  v65 = strcmp(v60, "LNG");
  v66 = *(unsigned __int8 *)(a1 + 481);
  if (!v65)
  {
    v67 = a1 + 4 * v66;
    LOBYTE(v66) = v66 + 1;
    *(_BYTE *)(a1 + 481) = v66;
    *(_DWORD *)(v67 + 584) = 3;
  }
LABEL_128:
  v73 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 8 * v66);
  *(_QWORD *)(a1 + 624) = v73;
  if (!v73)
    goto LABEL_143;
  if (*(_BYTE *)(a1 + 481))
  {
    v74 = 0;
    v75 = xmmword_1EA9483D8;
    v76 = *(_OWORD *)off_1EA9483E8;
    while (1)
    {
      v77 = *(_QWORD **)(*(_QWORD *)a1 + 8);
      v78 = (uint64_t *)(*(_QWORD *)(a1 + 624) + 8 * v74);
      v83 = v75;
      v84 = v76;
      v85 = ssftmap_ElemFreeString;
      inited = ssftmap_ObjOpen(v77, 0, &v83, v78);
      if ((inited & 0x80000000) != 0)
        return inited;
      __c_1 = 2;
      LH_itoa(1u, v92, 0xAu);
      __strcat_chk();
      v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfgmw", v92, &__c_3, &__c_1, &__c);
      if ((v10 & 0x80000000) != 0)
        return v10;
      if (__c_1)
      {
        v79 = 1;
        do
        {
          v80 = strchr((char *)*__c_3, 59);
          if (v80)
          {
            *v80 = 0;
            inited = ssftmap_Insert(*(_QWORD *)(*(_QWORD *)(a1 + 624) + 8 * v74), (uint64_t)*__c_3, (uint64_t)(v80 + 1));
            if ((inited & 0x80000000) != 0)
              return inited;
          }
          __c_1 = 2;
          LH_itoa((unsigned __int16)++v79, v92, 0xAu);
          __strcat_chk();
          v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfgmw", v92, &__c_3, &__c_1, &__c);
          if ((v10 & 0x80000000) != 0)
            return v10;
        }
        while (__c_1);
      }
      ++v74;
      v76 = *(_OWORD *)off_1EA9483E8;
      v75 = xmmword_1EA9483D8;
      if (v74 >= *(unsigned __int8 *)(a1 + 481))
        return v10;
    }
  }
  return v10;
}

uint64_t be_adapt_ObjClose(_QWORD *a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck((uint64_t)a1, a2, 503, 656);
  if ((result & 0x80000000) != 0)
    return 2410684424;
  if (a1)
  {
    globalbeadapt_DeInit_SpecialSymbolsFromPhonmap(a1);
    if (a1[1])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"LINGDB");
    if (a1[4])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"FE_DEPES");
    if (a1[7])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"FE_DCTLKP");
    if (a1[10])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"PHONMAP");
    FreeFeatureMaps(a1);
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t be_adapt_ObjReopen(_QWORD *a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck((uint64_t)a1, a2, 503, 656);
  if ((result & 0x80000000) != 0)
    return 2410684424;
  if (a1)
  {
    FreeFeatureMaps(a1);
    return hlp_VoiceSetup_0((uint64_t)a1);
  }
  return result;
}

_QWORD *FreeFeatureMaps(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = result;
  v2 = result[59];
  if (v2)
  {
    v3 = *((unsigned __int8 *)result + 324);
    if (*((_BYTE *)result + 324))
    {
      v4 = 0;
      do
      {
        v5 = v1[59];
        v6 = *(_QWORD *)(v5 + 8 * v4);
        if (v6)
        {
          ssftmap_ObjClose(v6);
          v5 = v1[59];
          v3 = *((unsigned __int8 *)v1 + 324);
        }
        *(_QWORD *)(v5 + 8 * v4++) = 0;
      }
      while (v4 < v3);
      v2 = v1[59];
    }
    result = heap_Free(*(_QWORD **)(*v1 + 8), v2);
    *((_BYTE *)v1 + 324) = 0;
    v1[59] = 0;
  }
  v7 = v1[78];
  if (v7)
  {
    v8 = *((unsigned __int8 *)v1 + 481);
    if (*((_BYTE *)v1 + 481))
    {
      v9 = 0;
      do
      {
        v10 = v1[78];
        v11 = *(_QWORD *)(v10 + 8 * v9);
        if (v11)
        {
          ssftmap_ObjClose(v11);
          v10 = v1[78];
          v8 = *((unsigned __int8 *)v1 + 481);
        }
        *(_QWORD *)(v10 + 8 * v9++) = 0;
      }
      while (v9 < v8);
      v7 = v1[78];
    }
    result = heap_Free(*(_QWORD **)(*v1 + 8), v7);
    *((_BYTE *)v1 + 481) = 0;
    v1[78] = 0;
  }
  v12 = v1[80];
  if (v12)
  {
    result = heap_Free(*(_QWORD **)(*v1 + 8), v12);
    v1[80] = 0;
  }
  v13 = v1[81];
  if (v13)
  {
    result = heap_Free(*(_QWORD **)(*v1 + 8), v13);
    v1[81] = 0;
  }
  return result;
}

uint64_t be_adapt_ProcessStart(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 503, 656);
  if ((int)result >= 0)
    return result;
  else
    return 2410684424;
}

uint64_t be_adapt_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t updated;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  unsigned __int16 v29;
  unsigned __int16 v30;
  __int16 v31;
  unsigned __int16 v32;
  size_t v33;
  int v34;
  unsigned __int8 v35;
  size_t v36;
  int v38;
  char v39;
  __int16 v40;
  char **v41;
  unsigned int v42;
  unsigned __int16 v43;
  __int16 v44;
  unsigned __int16 v45;
  char *v46;
  __int16 v47;
  int v48;
  const char *v49;
  unsigned int v50;
  int v51;
  unsigned __int16 v52;
  unsigned __int16 v53;
  unsigned int v54;
  char *v55;
  __int16 v56;
  unsigned __int16 v57;
  char __s[256];
  char v59[128];
  _BYTE v60[256];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v44 = 0;
  v40 = 2;
  if ((safeh_HandleCheck(a1, a2, 503, 656) & 0x80000000) != 0)
    return 2410684424;
  v49 = 0;
  v48 = 0;
  v47 = 0;
  v46 = 0;
  v45 = 0;
  v43 = 0;
  v42 = 0;
  v41 = 0;
  v39 = 0;
  *a5 = 1;
  v9 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 144))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a1 + 104);
  if ((v9 & 0x80000000) != 0)
    goto LABEL_99;
  updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 8) + 104))(a3, a4, 1, 0, (char *)&v48 + 2);
  if ((updated & 0x80000000) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, __int16 *))(*(_QWORD *)(a1 + 8) + 184))(a3, a4, HIWORD(v48), 0, &v44) & 0x80000000) == 0&& v44 == 1)
  {
    updated = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, const char **, int *))(*(_QWORD *)(a1 + 8)
                                                                                                + 176))(a3, a4, HIWORD(v48), 0, &v49, &v48);
    if ((updated & 0x80000000) == 0 && (unsigned __int16)v48 >= 2u)
    {
      updated = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(*(_QWORD *)(a1 + 8) + 160))(a3, a4, HIWORD(v48), 2, 1, &byte_1DEBD87CE, &v47);
      if ((updated & 0x80000000) != 0)
        goto LABEL_100;
      if (!*(_DWORD *)(a1 + 312) && !*(_DWORD *)(a1 + 320))
      {
LABEL_27:
        if (*(_QWORD *)(a1 + 640) && *(_QWORD *)(a1 + 648) && *(_QWORD *)(a1 + 80))
          hlp_DifferentiatorLOO((_QWORD *)a1, a3, a4, HIWORD(v48));
        goto LABEL_100;
      }
      *(_DWORD *)(a1 + 268) = 0;
      strcpy(v59, "pre_be_adapt");
      v9 = globalbeadapt_SetupDepesInput(a1, a3, a4, HIWORD(v48), (uint64_t)v59, 1, v11, v12);
      if ((v9 & 0x80000000) == 0)
      {
        if (((*(uint64_t (**)(_QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 32) + 80))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v59) & 0x80000000) != 0|| (v9 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char **, unsigned __int16 *))(*(_QWORD *)(a1 + 32)+ 128))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 0, &v46, &v45), (v9 & 0x80000000) == 0)&& (v46[v45] = 0, v9 = globalbeadapt_DoPostprocessing((_QWORD *)a1, v49, &v46, 0), (v9 & 0x80000000) == 0)&& (v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 8) + 320))(a3, a4, 0), (v9 & 0x80000000) == 0)&& (log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"BE_ADAPT", 5, 0,
                (uint64_t)"%s O1: %s",
                v13,
                v14,
                v15,
                (uint64_t)v59),
              v9 = globalbeadapt_OutputToLingDB(a1, a3, a4, HIWORD(v48), (uint64_t)v49, v46),
              (v9 & 0x80000000) == 0))
        {
          com_depes_FreeLayers(*(_QWORD *)a1, a1 + 96);
          if (*(_DWORD *)(a1 + 312) && !*(_DWORD *)(a1 + 636))
          {
            v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 8)
                                                                                                  + 104))(a3, a4, 2, HIWORD(v48), &v43);
            if ((v9 & 0x80000000) != 0)
              goto LABEL_99;
            while (v43)
            {
              updated = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 168))(a3, a4);
              if ((updated & 0x80000000) != 0)
                goto LABEL_100;
              if (v42 <= 0xA && ((1 << v42) & 0x610) != 0)
              {
                v38 = 0;
                v22 = *(unsigned __int8 *)(a1 + 633);
                if (*(_BYTE *)(a1 + 633))
                {
                  while (1)
                  {
                    v23 = v43;
                    v53 = v43;
                    v52 = 0;
                    v50 = 0;
                    v51 = 0;
                    v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(*(_QWORD *)(a1 + 8) + 168))(a3, a4, v43, 1, 1, &v52, &v51);
                    if ((v9 & 0x80000000) != 0)
                      goto LABEL_99;
                    updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 8) + 168))(a3, a4, v23, 2, 1, (char *)&v51 + 2, &v51);
                    if ((updated & 0x80000000) != 0)
                      goto LABEL_100;
                    if (HIWORD(v51) - v52 < 256)
                    {
                      __strncpy_chk();
                      v28 = HIWORD(v51);
                      v29 = v52;
                      __s[HIWORD(v51) - v52] = 0;
                      v9 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, _QWORD))(*(_QWORD *)(a1 + 56) + 112))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "normal", __s, (unsigned __int16)(v28 - v29));
                      if ((v9 & 0x80000000) != 0)
                        goto LABEL_99;
                      v27 = 1;
                      if (v22 >= 2u && (_DWORD)v23)
                      {
                        v30 = v23;
                        while (1)
                        {
                          v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 8) + 120))(a3, a4, v30, &v53);
                          if ((v9 & 0x80000000) != 0)
                            goto LABEL_99;
                          if (v53)
                          {
                            v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 168))(a3, a4);
                            if ((v9 & 0x80000000) != 0)
                              goto LABEL_99;
                            if (v50 - 11 < 5)
                              break;
                            if (v50 <= 0xA && ((1 << v50) & 0x610) != 0)
                            {
                              v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(*(_QWORD *)(a1 + 8) + 168))(a3, a4, v53, 1, 1, &v52, &v51);
                              if ((v9 & 0x80000000) != 0)
                                goto LABEL_99;
                              v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 8) + 168))(a3, a4, v53, 2, 1, (char *)&v51 + 2, &v51);
                              if ((v9 & 0x80000000) != 0)
                                goto LABEL_99;
                              if (strlen(__s) + HIWORD(v51) - v52 - 255 < 0xFFFFFFFFFFFFFF00)
                                break;
                              __strncpy_chk();
                              v31 = HIWORD(v51);
                              v32 = v52;
                              v60[HIWORD(v51) - v52] = 0;
                              v9 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, _BYTE *, _QWORD))(*(_QWORD *)(a1 + 56) + 112))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "normal", v60, (unsigned __int16)(v31 - v32));
                              if ((v9 & 0x80000000) != 0)
                                goto LABEL_99;
                              __strcat_chk();
                              __strcat_chk();
                              ++v27;
                            }
                          }
                          if (v27 < v22)
                          {
                            v30 = v53;
                            if (v53)
                              continue;
                          }
                          break;
                        }
                      }
                      v57 = v23;
                      v56 = 0;
                      v55 = 0;
                      v54 = 0;
                      updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, __int16 *))(*(_QWORD *)(a1 + 8) + 176))(a3, a4, v23, 3, &v55, &v56);
                      if ((updated & 0x80000000) != 0)
                        goto LABEL_100;
                      v33 = strlen(__s);
                      if (v33 + strlen(v55) - 255 >= 0xFFFFFFFFFFFFFF00)
                      {
                        __strcat_chk();
                        __strcat_chk();
                        if ((_DWORD)v23 && v27 >= 2u)
                        {
                          v35 = 1;
                          while (1)
                          {
                            updated = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 8) + 120))(a3, a4, (unsigned __int16)v23, &v57);
                            if ((updated & 0x80000000) != 0)
                              goto LABEL_100;
                            if (v57)
                            {
                              updated = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 168))(a3, a4);
                              if ((updated & 0x80000000) != 0)
                                goto LABEL_100;
                              if (v54 <= 0xA && ((1 << v54) & 0x610) != 0)
                              {
                                updated = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, __int16 *))(*(_QWORD *)(a1 + 8) + 176))(a3, a4, v57, 3, &v55, &v56);
                                if ((updated & 0x80000000) != 0)
                                  goto LABEL_100;
                                v36 = strlen(__s);
                                if (v36 + strlen(v55) - 255 < 0xFFFFFFFFFFFFFF00)
                                  goto LABEL_63;
                                ++v35;
                                __strcat_chk();
                                __strcat_chk();
                              }
                            }
                            if (v35 < v27)
                            {
                              LOWORD(v23) = v57;
                              if (v57)
                                continue;
                            }
                            break;
                          }
                        }
                      }
                      else
                      {
LABEL_63:
                        __s[0] = 0;
                      }
                    }
                    else
                    {
                      __s[0] = 0;
                      v27 = v22;
                    }
                    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"BE_ADAPT", 5, 0, (uint64_t)"voice lexicon key= %s", v24, v25, v26, (uint64_t)__s);
                    v34 = 0;
                    if (v27 == 1 && __s[0])
                    {
                      v40 = 2;
                      updated = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, char ***, __int16 *, char *, _QWORD))(*(_QWORD *)(a1 + 56) + 152))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptlex", __s, &v41, &v40, &v39, *(unsigned __int8 *)(a1 + 480));
                      if ((updated & 0x80000000) != 0)
                        goto LABEL_100;
                      if (v40 == 1)
                      {
                        v38 = 1;
                        updated = hlp_UpdateLdb((_QWORD *)a1, a3, a4, &v43, *v41, 1u, 0, &v38, (uint64_t)v49);
                        if ((updated & 0x80000000) != 0)
                          goto LABEL_100;
                        v34 = v38;
                      }
                      else
                      {
                        v34 = 0;
                      }
                    }
                    if (__s[0])
                    {
                      if (!v34)
                      {
                        v34 = *(_DWORD *)(a1 + 316);
                        if (v34)
                        {
                          v40 = 2;
                          updated = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, char ***, __int16 *, char *, _QWORD))(*(_QWORD *)(a1 + 56) + 152))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptlexmw", __s, &v41, &v40, &v39, *(unsigned __int8 *)(a1 + 632));
                          if ((updated & 0x80000000) != 0)
                            goto LABEL_100;
                          if (v40 == 1)
                          {
                            v38 = 1;
                            updated = hlp_UpdateLdb((_QWORD *)a1, a3, a4, &v43, *v41, v27, 1, &v38, (uint64_t)v49);
                            if ((updated & 0x80000000) != 0)
                              goto LABEL_100;
                            v34 = v38;
                          }
                          else
                          {
                            v34 = 0;
                          }
                        }
                      }
                    }
                    v22 = v27 - 1;
                    if ((_BYTE)v27 == 1 || v34)
                      break;
                  }
                }
              }
              if (v43)
                updated = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 120))(a3, a4);
              if ((updated & 0x80000000) != 0)
                goto LABEL_100;
            }
          }
          strcpy(v59, "post_be_adapt");
          v9 = globalbeadapt_SetupDepesInput(a1, a3, a4, HIWORD(v48), (uint64_t)v59, 0, v16, v17);
          if ((v9 & 0x80000000) == 0)
          {
            if (!*(_DWORD *)(a1 + 636))
              (*(void (**)(_QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 32) + 80))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v59);
            v9 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char **, unsigned __int16 *))(*(_QWORD *)(a1 + 32)
                                                                                                + 128))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 0, &v46, &v45);
            if ((v9 & 0x80000000) == 0)
            {
              v46[v45] = 0;
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"BE_ADAPT", 5, 0, (uint64_t)"%s O1: %s", v18, v19, v20, (uint64_t)v59);
              v9 = globalbeadapt_DoPostprocessing((_QWORD *)a1, v49, &v46, 1);
              if ((v9 & 0x80000000) == 0)
              {
                v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 320))(a3, a4, 1);
                if ((v9 & 0x80000000) == 0)
                {
                  v9 = globalbeadapt_OutputToLingDB(a1, a3, a4, HIWORD(v48), (uint64_t)v49, v46);
                  if ((v9 & 0x80000000) == 0)
                  {
                    updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 272))(a3, a4, 4, 1, 0, 0);
                    if ((updated & 0x80000000) == 0)
                      goto LABEL_27;
LABEL_100:
                    com_depes_FreeLayers(*(_QWORD *)a1, a1 + 96);
                    return updated;
                  }
                }
              }
            }
          }
        }
      }
LABEL_99:
      updated = v9;
      goto LABEL_100;
    }
  }
  return updated;
}

uint64_t hlp_UpdateLdb(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, char *a5, unsigned int a6, int a7, _DWORD *a8, uint64_t a9)
{
  uint64_t ReadOnly;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned __int8 v36;
  int v37;
  uint64_t v38;
  char *v39;
  int v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  unsigned __int8 v43;
  unsigned __int8 *v44;
  int v45;
  char *v46;
  char *v47;
  unsigned __int16 v48;
  unsigned __int8 v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  unsigned __int16 v55;
  char *v56;
  uint64_t v57;
  unsigned __int16 v58;
  char *v59;
  int v60;
  unsigned __int8 v61;
  char *v62;
  char *v63;
  unsigned __int16 v64;
  int v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  _DWORD *v71;
  char *v72;
  unsigned int v73;
  __int16 v74;
  unsigned __int16 v75;
  int v76;
  unsigned __int16 v77;
  unsigned __int16 v78;
  unsigned int v79;
  uint64_t *v80;
  char *v81;
  uint64_t v82;
  char *__s1;
  const char *v84;
  __int16 v85;
  _QWORD v86[2];
  int v87;
  char __s[256];
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v85 = 0;
  __s1 = 0;
  v84 = 0;
  v81 = 0;
  v82 = 0;
  v80 = 0;
  v79 = 0;
  ReadOnly = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, __int16 *))(a1[1] + 176))(a2, a3, *a4, 3, &v81, &v85);
  if ((ReadOnly & 0x80000000) != 0)
    return ReadOnly;
  v71 = a8;
  v73 = a6;
  v18 = 481;
  if (a7)
  {
    v19 = a1 + 73;
  }
  else
  {
    v18 = 324;
    v19 = (_QWORD *)((char *)a1 + 428);
  }
  v20 = 78;
  if (!a7)
    v20 = 59;
  v21 = a1[v20];
  v86[0] = 0;
  v86[1] = 0;
  v87 = 0;
  strcpy(__s, "|");
  v22 = *((unsigned __int8 *)a1 + v18);
  if (*((_BYTE *)a1 + v18))
  {
    v23 = 0;
    do
    {
      if (v23)
      {
        __strcat_chk();
        *((_WORD *)v86 + v23) = strlen(__s);
      }
      switch(*((_DWORD *)v19 + v23))
      {
        case 0:
          ReadOnly = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, __int16 *))(a1[1] + 176))(a2, a3, *a4, 14, &__s1, &v85);
          if ((ReadOnly & 0x80000000) == 0)
          {
            if ((ssftmap_IteratorOpen(*(_QWORD *)(v21 + 8 * v23), 0, 0, (uint64_t)&v80) & 0x80000000) == 0)
            {
              while ((ssftmap_IteratorNext(v80, &v84, &v82) & 0x80000000) == 0)
              {
                if (strstr(__s1, v84))
                  __strcat_chk();
              }
              ssftmap_IteratorClose((uint64_t)v80);
            }
            goto LABEL_35;
          }
          return ReadOnly;
        case 1:
          v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, __int16 *))(a1[1] + 176))(a2, a3, *a4, 13, &v84, &v85);
          goto LABEL_31;
        case 2:
          v77 = 0;
          v76 = 0;
          v75 = 3;
          v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(a1[1] + 168))(a2, a3, *a4, 1, 1, (char *)&v76 + 2, &v85);
          if ((v24 & 0x80000000) != 0)
            return v24;
          LOWORD(v76) = *a4;
          v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 120))(a2, a3);
          break;
        case 3:
          v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, __int16 *))(a1[1] + 176))(a2, a3, *a4, 9, &v84, &v85);
LABEL_31:
          if ((v24 & 0x80000000) != 0)
            return v24;
          ReadOnly = ssftmap_FindReadOnly(*(_QWORD *)(v21 + 8 * v23), (uint64_t)v84, &v82);
          goto LABEL_33;
        default:
          goto LABEL_35;
      }
      while (1)
      {
        if ((v24 & 0x80000000) != 0)
          return v24;
        if (!(_WORD)v76 || v77 > HIWORD(v76))
          break;
        v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 168))(a2, a3);
        if ((v24 & 0x80000000) != 0)
          return v24;
        v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(a1[1] + 168))(a2, a3, (unsigned __int16)v76, 1, 1, &v77, &v85);
        if ((v24 & 0x80000000) != 0)
          return v24;
        if (v79 == 15)
        {
          v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(a1[1] + 168))(a2, a3, (unsigned __int16)v76, 7, 1, &v75, &v85);
          if ((v24 & 0x80000000) != 0)
            return v24;
        }
        v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 120))(a2, a3);
      }
      if ((_WORD)v76)
      {
        v26 = v75;
      }
      else
      {
        v26 = 0;
        v75 = 0;
      }
      LH_itoa(v26, (char *)&v78, 0xAu);
      ReadOnly = ssftmap_FindReadOnly(*(_QWORD *)(v21 + 8 * v23), (uint64_t)&v78, &v82);
LABEL_33:
      __strcat_chk();
LABEL_35:
      ++v23;
    }
    while (v23 != v22);
  }
  __strcat_chk();
  v27 = strstr(a5, __s);
  if (!v27 && (_DWORD)v22)
  {
    do
    {
      __s[*((unsigned __int16 *)v86 + (v22 - 1))] = 0;
      v27 = strstr(a5, __s);
      if (v27)
        break;
      LODWORD(v22) = v22 - 1;
    }
    while ((_BYTE)v22);
  }
  if (!v27)
    v27 = a5;
  v28 = strchr(v27, 59);
  if (v28)
  {
    v29 = v28 + 1;
    v30 = strchr(v28 + 1, 124);
    if (v30)
    {
      *v30 = 0;
      v81 = v29;
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"BE_ADAPT", 5, 0, (uint64_t)"adapted transcription= %s", v31, v32, v33, (uint64_t)v29);
    }
  }
  v34 = v81;
  v35 = *v81 != 0;
  v36 = 1;
  while (v81[v35] == 95)
  {
    ++v36;
LABEL_55:
    ++v35;
  }
  if (v81[v35])
    goto LABEL_55;
  if (v73 != 1)
  {
    if (v36 != 1)
    {
      if (v73 == v36)
      {
        v46 = strchr(v81, 95);
        v47 = v46;
        if (v46)
        {
          *v46 = 0;
          v34 = v81;
        }
        ReadOnly = hlp_AdjustWordRecord(a1, a2, a3, *a4, v34);
        if ((ReadOnly & 0x80000000) == 0 && v73 >= 2)
        {
          v48 = *a4;
          if (*a4)
          {
            if (v47)
            {
              v49 = 1;
              while (1)
              {
                ReadOnly = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1[1] + 120))(a2, a3, v48, a4);
                if ((ReadOnly & 0x80000000) != 0)
                  break;
                if (*a4)
                {
                  ReadOnly = (*(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 168))(a2, a3);
                  if ((ReadOnly & 0x80000000) != 0)
                    return ReadOnly;
                  if (v79 <= 0xA && ((1 << v79) & 0x610) != 0)
                  {
                    v50 = v47 + 1;
                    v81 = v47 + 1;
                    v51 = strchr(v47 + 1, 95);
                    v47 = v51;
                    if (v51)
                    {
                      *v51 = 0;
                      v50 = v81;
                    }
                    ReadOnly = hlp_AdjustWordRecord(a1, a2, a3, *a4, v50);
                    if ((ReadOnly & 0x80000000) != 0)
                      return ReadOnly;
                    ++v49;
                  }
                }
                if (v73 > v49)
                {
                  v48 = *a4;
                  if (*a4)
                  {
                    if (v47)
                      continue;
                  }
                }
                return ReadOnly;
              }
            }
          }
        }
      }
      else
      {
        *v71 = 0;
      }
      return ReadOnly;
    }
    v38 = *a4;
    ReadOnly = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, __int16 *))(a1[1] + 176))(a2, a3, v38, 14, &__s1, &v85);
    if ((ReadOnly & 0x80000000) != 0)
      return ReadOnly;
    v39 = __s1;
    if (!strstr(__s1, "E_") && !strstr(v39, "e_"))
    {
      if (v73 >= 2)
      {
        v60 = 1;
        v61 = 1;
        while (*a4)
        {
          v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 120))(a2, a3);
          if ((v24 & 0x80000000) != 0)
            return v24;
          if (*a4)
          {
            v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 168))(a2, a3);
            if ((v24 & 0x80000000) != 0)
              return v24;
            if (v79 <= 0xA && ((1 << v79) & 0x610) != 0)
            {
              ReadOnly = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, __int16 *))(a1[1] + 176))(a2, a3, *a4, 14, &__s1, &v85);
              if ((ReadOnly & 0x80000000) != 0)
                return ReadOnly;
              v62 = __s1;
              if (v73 - 1 != v60 && (strstr(__s1, "E_") || strstr(v62, "e_"))
                || strstr(v62, "S_")
                || strstr(v62, "s_")
                || strstr(v62, "B-"))
              {
                *a4 = v38;
                goto LABEL_144;
              }
              ++v61;
            }
          }
          v60 = v61;
          if (v61 >= v73)
            break;
        }
      }
      ReadOnly = hlp_AdjustWordRecord(a1, a2, a3, v38, v81);
      if ((ReadOnly & 0x80000000) == 0)
      {
        *a4 = v38;
        if (v73 >= 2)
        {
          if ((_DWORD)v38)
          {
            v40 = 1;
            v41 = v38;
            do
            {
              ReadOnly = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1[1] + 120))(a2, a3, v41, a4);
              if ((ReadOnly & 0x80000000) != 0)
                break;
              if (*a4)
              {
                ReadOnly = (*(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 168))(a2, a3);
                if ((ReadOnly & 0x80000000) != 0)
                  break;
                if (v79 <= 0xA && ((1 << v79) & 0x610) != 0)
                {
                  ReadOnly = hlp_DeleteWordRecord(a1, a2, a3, a4, v38, a9);
                  if ((ReadOnly & 0x80000000) != 0)
                    break;
                  if (v73 <= ++v40)
                    break;
                }
              }
              v41 = *a4;
            }
            while (*a4);
          }
        }
      }
      return ReadOnly;
    }
    goto LABEL_144;
  }
  v37 = v36 - 1;
  if (v36 == 1)
    return hlp_AdjustWordRecord(a1, a2, a3, *a4, v81);
  v78 = 0;
  HIWORD(v76) = 0;
  v42 = *a4;
  v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(a1[1] + 168))(a2, a3, *a4, 1, 1, &v78, &v85);
  if ((v24 & 0x80000000) != 0)
    return v24;
  ReadOnly = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(a1[1] + 168))(a2, a3, *a4, 2, 1, (char *)&v76 + 2, &v85);
  if ((ReadOnly & 0x80000000) == 0)
  {
    if (v78 >= HIWORD(v76))
    {
      v43 = 0;
    }
    else
    {
      v43 = 0;
      v44 = (unsigned __int8 *)(a9 + v78);
      do
      {
        v45 = *v44++;
        if (v45 == 45)
          ++v43;
      }
      while ((unint64_t)v44 < a9 + (unint64_t)HIWORD(v76));
    }
    if (v37 == v43)
    {
      v52 = v81;
      v53 = strchr(v81, 95);
      v54 = v53;
      if (v53)
      {
        *v53 = 0;
        v52 = v81;
      }
      v24 = hlp_AdjustWordRecord(a1, a2, a3, *a4, v52);
      if ((v24 & 0x80000000) != 0)
        return v24;
      v55 = v78;
      v56 = strchr((char *)(a9 + v78), 45);
      if (v56)
      {
        *v56 = 32;
        v74 = (_WORD)v56 - a9 + 1;
        v55 = v78;
      }
      else
      {
        v74 = 0;
      }
      v77 = v55;
      v57 = *a4;
      if (*a4)
      {
        v58 = *a4;
        do
        {
          v42 = v58;
          v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1[1] + 120))(a2, a3, v58, a4);
          if ((v24 & 0x80000000) != 0)
            return v24;
          if (!*a4)
            break;
          v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 168))(a2, a3);
          if ((v24 & 0x80000000) != 0)
            return v24;
          v58 = *a4;
        }
        while (*a4 && v77 == v78);
      }
      v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1[1] + 80))(a2, a3, v42, a4);
      if ((v24 & 0x80000000) != 0)
        return v24;
      v24 = hlp_CopyWordRec_0(a1, a2, a3, v57, *a4, v74);
      if ((v24 & 0x80000000) != 0)
        return v24;
      if (v54)
      {
        v59 = v54 + 1;
        v81 = v59;
      }
      else
      {
        v59 = v81;
      }
      v63 = strchr(v59, 95);
      if (v63)
      {
        *v63 = 0;
        v59 = v81;
      }
      v72 = v63;
      ReadOnly = hlp_AdjustWordRecord(a1, a2, a3, *a4, v59);
      if ((ReadOnly & 0x80000000) == 0)
      {
        v64 = v74;
        v78 = v74;
        if (v43 >= 2u)
        {
          v65 = 1;
          while (1)
          {
            v66 = strchr((char *)(a9 + v64), 45);
            if (v66)
            {
              *v66 = 32;
              v64 = (_WORD)v66 - a9 + 1;
            }
            v67 = *a4;
            v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))(a1[1] + 80))(a2, a3, v67, a4);
            if ((v24 & 0x80000000) != 0)
              break;
            v24 = hlp_CopyWordRec_0(a1, a2, a3, v67, *a4, v64);
            if ((v24 & 0x80000000) != 0)
              break;
            if (v72)
            {
              v68 = v72 + 1;
              v81 = v72 + 1;
            }
            else
            {
              v68 = v81;
            }
            v69 = strchr(v68, 95);
            if (v69)
            {
              *v69 = 0;
              v68 = v81;
            }
            v72 = v69;
            ReadOnly = hlp_AdjustWordRecord(a1, a2, a3, *a4, v68);
            if ((ReadOnly & 0x80000000) == 0)
            {
              v78 = v64;
              if (++v65 < v43)
                continue;
            }
            return ReadOnly;
          }
          return v24;
        }
      }
      return ReadOnly;
    }
LABEL_144:
    *v71 = 0;
  }
  return ReadOnly;
}

uint64_t hlp_DifferentiatorLOO(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t NullHandle;
  int v12;
  uint64_t result;
  BOOL v14;
  _BOOL4 v15;
  unsigned __int16 v16;
  char *v17;
  char *v19;
  char *v20;
  _BYTE *v21;
  size_t v22;
  int v23;
  char *v24;
  size_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  _BOOL4 v34;
  __int16 v35;
  uint64_t v36;
  uint64_t (*v37)(_QWORD, _QWORD, _OWORD *);
  unsigned int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  char v44;
  char __s2[2];
  char *v46;
  char *__s;
  _QWORD *v48;
  char v49[64];
  _OWORD v50[152];
  uint64_t v51;

  v8 = 0;
  v51 = *MEMORY[0x1E0C80C00];
  v46 = 0;
  __s = 0;
  *(_WORD *)__s2 = 0;
  v44 = 0;
  v43 = 0;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  v48 = 0;
  memset(v50, 0, 512);
  while (1)
  {
    v9 = off_1EA948400[v8];
    if ((objc_GetObject(*(_QWORD *)(*a1 + 48), (uint64_t)v9, &v48) & 0x80000000) == 0)
      break;
    if (++v8 == 3)
    {
      LODWORD(v10) = 0;
      goto LABEL_9;
    }
  }
  v10 = v48;
  if (v48)
  {
    NullHandle = safeh_GetNullHandle();
    if (safeh_HandlesEqual(v10[2], v10[3], NullHandle, v12)
      || (v36 = v48[1]) == 0
      || (v37 = *(uint64_t (**)(_QWORD, _QWORD, _OWORD *))(v36 + 120)) == 0
      || (v37(v48[2], v48[3], v50) & 0x80000000) != 0)
    {
      LODWORD(v10) = 0;
    }
    else
    {
      __strcpy_chk();
      LODWORD(v10) = 1;
    }
  }
  objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)v9);
LABEL_9:
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[1] + 104))(a2, a3, 2, a4, (char *)&v41 + 2);
  if ((result & 0x80000000) == 0)
  {
    result = paramc_ParamGetUInt(*(_QWORD *)(*a1 + 40), (uint64_t)"disableloodifferentiator", (unsigned int *)&v40);
    v14 = (int)result >= 0 && (_DWORD)v40 == 1;
    v15 = !v14;
    v16 = HIWORD(v41);
    if (HIWORD(v41))
    {
      v38 = v15;
      v39 = (int)v10;
      v17 = 0;
      do
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, char *, char *))(a1[1] + 168))(a2, a3, v16, 0, 1, (char *)&v40 + 4, (char *)&v42 + 2);
        if ((result & 0x80000000) != 0)
          break;
        if (HIDWORD(v40) <= 0xA && ((1 << SBYTE4(v40)) & 0x610) != 0)
        {
          LOWORD(v41) = 0;
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a1[1] + 184))(a2, a3, HIWORD(v41), 12, &v41);
          if ((result & 0x80000000) != 0)
            break;
          if ((unsigned __int16)v41 == 1)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, HIWORD(v41), 12, &__s, (char *)&v42 + 2);
            if ((result & 0x80000000) != 0)
              break;
            v19 = (char *)a1[80];
            if (v19)
            {
              v20 = __s;
              v21 = (_BYTE *)a1[81];
              v22 = (unsigned __int16)strlen(__s);
              do
              {
                v23 = (char)*v21;
                if (!*v21)
                  break;
                if (!strncmp(v20, v19, v22))
                {
                  if (v39 && !strchr(v49, v23))
                    break;
                  v44 = v23;
                  if (!v38)
                    goto LABEL_32;
                  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, HIWORD(v41), 3, &v46, (char *)&v42 + 2);
                  if ((result & 0x80000000) == 0)
                  {
                    v25 = (2 * (strlen(v46) & 0x7FFF)) | 1;
                    v26 = (char *)heap_Realloc(*(uint64_t **)(*a1 + 8), (uint64_t)v17, v25);
                    if (!v26)
                    {
                      result = log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"BE_ADAPT", 64000, 0, v27, v28, v29, v30, v38);
                      goto LABEL_56;
                    }
                    v17 = v26;
                    bzero(v26, v25);
                    v43 = 0;
                    v31 = v46;
                    if (*v46)
                    {
                      v32 = 0;
                      v33 = 0;
                      v34 = 1;
                      do
                      {
                        __s2[0] = v31[v32];
                        strcat(v17, __s2);
                        if (__s2[0] == 92)
                        {
                          v34 = !v34;
                        }
                        else if (v34)
                        {
                          v34 = 1;
                          if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char *, uint64_t *, _QWORD))(a1[10] + 64))(a1[8], a1[9], 0, __s2, &v43, 0) & 0x80000000) == 0)
                          {
                            if (v43)
                            {
                              v34 = 1;
                              strncat(v17, &v44, 1uLL);
                            }
                          }
                        }
                        v32 = (unsigned __int16)++v33;
                        v31 = v46;
                      }
                      while (strlen(v46) > (unsigned __int16)v33);
                    }
                    v35 = strlen(v17);
                    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, int *))(a1[1] + 160))(a2, a3, HIWORD(v41), 3, (unsigned __int16)(v35 + 1), v17, &v42);
                    if ((result & 0x80000000) == 0)
                      goto LABEL_32;
                  }
                  goto LABEL_56;
                }
                v24 = strchr(v19, 44);
                v19 = v24 + 1;
                ++v21;
              }
              while (v24);
            }
            v44 = 0;
          }
        }
LABEL_32:
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(a1[1] + 120))(a2, a3, HIWORD(v41), (char *)&v41 + 2);
        if ((result & 0x80000000) != 0)
          break;
        v16 = HIWORD(v41);
      }
      while (HIWORD(v41));
LABEL_56:
      if (v17)
        return (uint64_t)heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v17);
    }
  }
  return result;
}

uint64_t be_adapt_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 503, 656);
  if ((int)result >= 0)
    return result;
  else
    return 2410684424;
}

uint64_t be_adapt_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2410684417;
  result = 0;
  *a2 = &IFeBeadapt;
  return result;
}

uint64_t hlp_AdjustWordRecord(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *__s)
{
  _BOOL4 v10;
  uint64_t result;
  char *v12;
  _BOOL4 v13;
  __int16 v14;
  __int16 v15;
  char *v16;
  _BYTE *v17;
  int v18;
  int v19;
  char *__sa;
  char *__s1;

  __sa = 0;
  __s1 = 0;
  v16 = 0;
  v17 = 0;
  v10 = !strchr(__s, 39) && !strchr(__s, 34);
  v18 = 0;
  v19 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, a4, 3, &__sa, (char *)&v19 + 2);
  if ((result & 0x80000000) == 0)
  {
    v12 = __sa;
    v13 = strchr(__sa, 39) || strchr(v12, 34);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, a4, 13, &__s1, (char *)&v19 + 2);
    if ((result & 0x80000000) == 0)
    {
      if (!v10 && !v13 && !strcmp(__s1, "0"))
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, int *))(a1[1] + 160))(a2, a3, a4, 13, 2, "1", &v19);
      }
      else
      {
        if (!v10 || !strcmp(__s1, "0"))
        {
LABEL_18:
          v14 = strlen(__s);
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *))(a1[1] + 160))(a2, a3, a4, 3, (unsigned __int16)(v14 + 1), __s, &v19);
          if ((result & 0x80000000) == 0)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, int *, char *))(a1[1] + 168))(a2, a3, a4, 0, 1, &v18, (char *)&v19 + 2);
            if ((result & 0x80000000) == 0 && v18 == 10)
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE **, char *))(a1[1] + 176))(a2, a3, a4, 9, &v17, (char *)&v19 + 2);
              if ((result & 0x80000000) == 0)
              {
                if (v17 && *v17
                  || (result = paramc_ParamGetStr(*(_QWORD *)(*a1 + 40), (uint64_t)"langcode", &v16),
                      (result & 0x80000000) == 0)
                  && (!v16
                   || (v15 = strlen(v16),
                       result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *))(a1[1] + 160))(a2, a3, a4, 9, (unsigned __int16)(v15 + 1), v16, &v19), (result & 0x80000000) == 0)))
                {
                  v18 = 4;
                  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, int *, int *))(a1[1] + 160))(a2, a3, a4, 0, 4, &v18, &v19);
                }
              }
            }
          }
          return result;
        }
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, int *))(a1[1] + 160))(a2, a3, a4, 13, 2, "0", &v19);
      }
      if ((result & 0x80000000) != 0)
        return result;
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t hlp_CopyWordRec_0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, __int16 a6)
{
  char *v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  size_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  const char *v39;
  size_t v40;
  char *i;
  __int16 v42;
  __int16 v43;
  unsigned int v45;
  int v47;
  char *__s1;
  __int16 v49;
  __int16 v50;
  __int16 v51;

  v47 = 0;
  v10 = 0;
  v11 = 0;
  v51 = a6;
  v50 = 0;
  v49 = 0;
  __s1 = 0;
  do
  {
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, __int16 *))(a1[1] + 184))(a2, a3, a4, v11, &v50);
    if ((v12 & 0x80000000) != 0)
      break;
    if (v50)
    {
      if (v11 > 0x11u || ((1 << v11) & 0x20186) == 0)
      {
        v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1[1] + 176))(a2, a3, a4);
        if ((v13 & 0x80000000) != 0)
        {
LABEL_47:
          v12 = v13;
          break;
        }
        if (v11 == 14)
        {
          v21 = __s1;
          v22 = strstr(__s1, "e_");
          if (v22)
          {
            do
            {
              *v22 = 69;
              v22 = strstr(v22 + 1, "e_");
            }
            while (v22);
            v21 = __s1;
          }
          v23 = strstr(v21, "s_");
          if (v23)
          {
            do
            {
              *v23 = 83;
              v23 = strstr(v23 + 1, "s_");
            }
            while (v23);
            v21 = __s1;
          }
          v24 = strlen(v21);
          v25 = (char *)heap_Alloc(*(_QWORD *)(*a1 + 8), (v24 + 1));
          if (!v25)
          {
            log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"BE_ADAPT", 64000, 0, v26, v27, v28, v29, v45);
            return 2410684426;
          }
          v10 = v25;
          strcpy(v25, __s1);
          v30 = strstr(__s1, "E_");
          if (v30)
          {
            v31 = v30;
            do
            {
              *v31 = 83;
              v32 = strchr(v31, 59);
              if (v32)
              {
                v33 = v32;
                *v32 = 0;
                if (strstr(v10, v31))
                {
                  v34 = strlen(v33 + 1);
                  memmove(v31, v33 + 1, v34 + 1);
                }
                else
                {
                  *v31 = 73;
                  *v33 = 59;
                }
              }
              else if (strstr(v10, v31))
              {
                *v31 = 0;
              }
              else
              {
                *v31 = 73;
              }
              v31 = strstr(v31 + 1, "E_");
            }
            while (v31);
          }
          v35 = strstr(v10, "S_");
          if (v35)
          {
            v36 = v35;
            do
            {
              *v36 = 69;
              v37 = strchr(v36, 59);
              if (v37)
              {
                v38 = v37;
                *v37 = 0;
                v39 = v37 + 1;
                if (strstr(v37 + 1, v36))
                {
                  v40 = strlen(v39);
                  memmove(v36, v39, v40 + 1);
                }
                else
                {
                  *v36 = 73;
                  *v38 = 59;
                }
              }
              else
              {
                *v36 = 73;
              }
              v36 = strstr(v36 + 1, "S_");
            }
            while (v36);
          }
          for (i = strstr(v10, "PHR:B-"); i; i = strstr(i + 1, "PHR:B-"))
            i[4] = 73;
          v42 = strlen(v10);
          v19 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, int *))(a1[1] + 160))(a2, a3, a5, 14, (unsigned __int16)(v42 + 1), v10, &v47);
        }
        else
        {
          v43 = strlen(__s1);
          v19 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, char *, int *))(a1[1] + 160))(a2, a3, a5, v11, (unsigned __int16)(v43 + 1), __s1, &v47);
        }
        goto LABEL_13;
      }
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int16 *, char *))(a1[1] + 168))(a2, a3, a4, v11, 1, &v49, (char *)&v47 + 2);
      if ((v13 & 0x80000000) != 0)
        goto LABEL_47;
      v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))(a1[1] + 160);
      if (v11 == 1)
      {
        v15 = a2;
        v16 = a3;
        v17 = a5;
        v18 = 1;
        goto LABEL_12;
      }
      v12 = v14(a2, a3, a5, v11, 1, &v49, &v47);
      if ((v12 & 0x80000000) != 0)
        break;
      if (v11 == 2)
      {
        --v51;
        v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))(a1[1] + 160);
        v15 = a2;
        v16 = a3;
        v17 = a4;
        v18 = 2;
LABEL_12:
        v19 = v14(v15, v16, v17, v18, 1, &v51, &v47);
LABEL_13:
        v12 = v19;
        if ((v19 & 0x80000000) != 0)
          break;
      }
    }
    v20 = v11++;
  }
  while (v20 < 0x15);
  if (v10)
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v10);
  return v12;
}

uint64_t hlp_DeleteWordRecord(_QWORD *a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  BOOL v31;
  __int16 v32;
  unsigned int v34;
  unsigned __int16 v35;
  int v36;
  char *__s;
  char *v38;

  __s = 0;
  v38 = 0;
  v36 = 0;
  v35 = 0;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *, char *))(a1[1] + 168))(a2, a3, a5, 2, 1, &v35, (char *)&v36 + 2);
  if ((v12 & 0x80000000) != 0)
    return v12;
  *(_BYTE *)(a6 + v35) = 45;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(a1[1] + 168))(a2, a3, (unsigned __int16)*a4, 2, 1, &v35, (char *)&v36 + 2);
  if ((v12 & 0x80000000) != 0)
    return v12;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *, int *))(a1[1] + 160))(a2, a3, a5, 2, 1, &v35, &v36);
  if ((v12 & 0x80000000) != 0)
    return v12;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, (unsigned __int16)*a4, 14, &v38, (char *)&v36 + 2);
  if ((v12 & 0x80000000) != 0)
    return v12;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, a5, 14, &__s, (char *)&v36 + 2);
  if ((v13 & 0x80000000) == 0)
  {
    v14 = v38;
    if (v38)
    {
      v15 = 0;
      do
      {
        if ((*v14 | 0x20) == 0x65 && v14[1] == 95)
        {
          LODWORD(v16) = hlp_NLUStrLength(v14);
          v17 = *(uint64_t **)(*a1 + 8);
          if (v15)
          {
            v18 = strlen(v15);
            v19 = heap_Realloc(v17, (uint64_t)v15, (v16 + v18 + 2));
            if (!v19)
            {
              v13 = 2410684426;
              log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"BE_ADAPT", 64000, 0, v20, v21, v22, v23, v34);
              goto LABEL_27;
            }
            v16 = v16;
            v15 = (const char *)v19;
          }
          else
          {
            v24 = strlen(__s);
            v25 = (char *)heap_Alloc((uint64_t)v17, (v16 + v24 + 2));
            if (!v25)
            {
              v13 = 2410684426;
              log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"BE_ADAPT", 64000, 0, v26, v27, v28, v29, v34);
              return v13;
            }
            v15 = v25;
            v16 = v16;
            strcpy(v25, __s);
          }
          v30 = v38[v16];
          v38[v16] = 0;
          hlp_NLUStrJoin(v15, v38);
          v38[v16] = v30;
          v14 = v38;
        }
        v14 = hlp_NLUStrNext(v14);
        v38 = v14;
      }
      while (v14);
      v31 = v15 == 0;
      if (v15)
      {
        v32 = strlen(v15);
        v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, int *))(a1[1] + 160))(a2, a3, a5, 14, (unsigned __int16)(v32 + 1), v15, &v36);
      }
      if ((v13 & 0x80000000) != 0)
        goto LABEL_26;
    }
    else
    {
      v15 = 0;
      v31 = 1;
    }
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1[1] + 192))(a2, a3, (unsigned __int16)*a4);
    if ((v13 & 0x80000000) == 0)
      *a4 = a5;
LABEL_26:
    if (!v31)
LABEL_27:
      heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v15);
  }
  return v13;
}

uint64_t prmfx_CommonProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t result;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  const char *v16;
  int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  _BOOL4 v26;
  char *v27;
  const char *v28;
  int v29;
  char *v30;
  char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  char *v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *i;
  char *v43;
  char *j;
  char *v45;
  char *k;
  char *v47;
  size_t v48;
  char *v49;
  char *v50;
  char *v51;
  unsigned __int16 v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  const char *v63;
  const char *v64;
  unsigned __int16 *v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int16 v75;
  char *v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  char *v81;
  char *v82;
  char *v83;
  _BOOL4 v84;
  char *v85;
  unsigned __int16 v86;
  int v87;
  BOOL v88;
  int v89;
  uint64_t v90;
  int v91;
  unsigned __int16 v92;
  const char *v93;
  size_t v94;
  unsigned __int16 v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  char *v120;
  int v121;
  int v122;
  char *__s1;
  uint64_t v124;
  uint64_t v125;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  unsigned __int16 __n[5];
  const char *v132;
  unsigned __int16 v133;
  const char *v134;
  unsigned __int16 v135;
  const char *v136;
  char *v137;
  unsigned __int16 v138;
  uint64_t v139;
  int v140;
  int v141;
  char __s[16];
  uint64_t v143;

  v7 = a5;
  v8 = a4;
  v143 = *MEMORY[0x1E0C80C00];
  v140 = 0;
  v141 = 0;
  v139 = 0;
  v137 = 0;
  v132 = "null";
  v10 = *(_QWORD *)(a1 + 32);
  v120 = *(char **)(a1 + 72);
  __s1 = *(char **)(*(_QWORD *)(a1 + 64) + 1304);
  v122 = *(_DWORD *)(a1 + 84);
  v138 = 0;
  v136 = "null";
  v135 = 0;
  v134 = "null";
  v133 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(v10 + 104))(a4, a5, 1, 0, (char *)&v141 + 2);
  if ((result & 0x80000000) != 0)
    return result;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v10 + 104))(v8, v7, 2, HIWORD(v141), &v141);
  if ((result & 0x80000000) != 0)
    return result;
  v12 = 0;
  v127 = 0;
  v124 = v7;
  v125 = 0;
  v13 = 0xFFFF;
  v119 = 0;
  v129 = v10;
  v130 = v8;
  while (2)
  {
    if (!(_WORD)v141)
    {
      v95 = v13;
      goto LABEL_205;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 168))(v8, v7);
    if ((result & 0x80000000) != 0)
      return result;
    switch(HIDWORD(v139))
    {
      case 4:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
        memset(__n, 0, sizeof(__n));
        v14 = (unsigned __int16)v12;
        if ((unsigned __int16)v12 >= *a6)
          return 2382372873;
        v15 = (unsigned __int16)v12;
        prmfx_setFeature("phrase_type", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v12), v132);
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(v10 + 176))(v8, v7, (unsigned __int16)v141, 14, &v137, &v140) & 0x80000000) != 0)
        {
          v16 = "null";
          v137 = "null";
        }
        else
        {
          v16 = v137;
        }
        v17 = strlen(v16);
        v18 = heap_Alloc(*(_QWORD *)(a2 + 8), (7 * v17 + 15));
        if (!v18)
          return 2382372874;
        v19 = (char *)v18;
        v20 = *((_QWORD *)a6 + 2);
        v21 = a6[12];
        a6[12] = v21 + 1;
        *(_QWORD *)(v20 + 8 * v21) = v18;
        if (hlp_NLUStrFind(v137, "POS", (uint64_t *)&__n[1], __n))
        {
          strncpy(v19, *(const char **)&__n[1], __n[0]);
          v22 = &v19[__n[0]];
          *v22 = 0;
          v23 = v22 + 1;
        }
        else
        {
          v23 = v19;
          v19 = "null";
        }
        if ((_WORD)v12)
          prmfx_setFeature("pos_next_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * ((unsigned __int16)v12 - 1)), v19);
        v128 = v12;
        prmfx_setFeature("pos_current_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v12), v19);
        if (*a6 - 1 > (unsigned __int16)v12)
          prmfx_setFeature("pos_previous_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * ((unsigned __int16)v12 + 1)), v19);
        v24 = strstr(__s1, v19);
        if (!v24)
          goto LABEL_27;
        v25 = v24;
        do
        {
          v26 = *(v25 - 1) == 32 && v25[strlen(v19)] == 32;
          v27 = strstr(v25 + 1, v19);
          if (!v27)
            break;
          v25 = v27;
        }
        while (!v26);
        v28 = "A";
        v29 = v128;
        if (!v26)
        {
LABEL_27:
          v28 = "F";
          v29 = v13;
        }
        v121 = v29;
        prmfx_setFeature("accentable", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * v15), v28);
        if (hlp_NLUStrFind(v137, "PHR", (uint64_t *)&__n[1], __n))
        {
          strncpy(v23, *(const char **)&__n[1], __n[0]);
          v30 = &v23[__n[0]];
          *v30 = 0;
          v31 = v30 + 1;
        }
        else
        {
          v31 = v23;
          v23 = "null";
        }
        if ((_WORD)v128)
          prmfx_setFeature("phr_next_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (v14 - 1)), v23);
        prmfx_setFeature("phr_current_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * v15), v23);
        if (*a6 - 1 > v14)
          prmfx_setFeature("phr_previous_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (v14 + 1)), v23);
        v32 = *((_QWORD *)a6 + 4);
        v33 = *(const char **)(v32 + 56 * v15 + 32);
        if (v33)
        {
          strncpy(v31, v33, *(_QWORD *)(v32 + 56 * v15 + 24));
          v34 = *(_QWORD *)(*((_QWORD *)a6 + 4) + 56 * v15 + 24);
          v31[v34] = 0;
          v35 = &v31[v34 + 1];
        }
        else
        {
          v35 = v31;
          v31 = "null";
        }
        if ((_WORD)v128)
          prmfx_setFeature("bndshape_next_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (v14 - 1)), v31);
        prmfx_setFeature("bndshape", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * v15), v31);
        if (*a6 - 1 > v14)
          prmfx_setFeature("bndshape_previous_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (v14 + 1)), v31);
        if (v122)
        {
          if (hlp_NLUStrFind(v137, "S_COMP", (uint64_t *)&__n[1], __n))
          {
            v36 = 11586;
LABEL_50:
            *(_WORD *)v35 = v36;
            v35[2] = 0;
            v38 = __n[0];
            strncpy(v35 + 2, *(const char **)&__n[1], __n[0] + 1);
            v37 = v38 + 2;
            goto LABEL_51;
          }
          if (hlp_NLUStrFind(v137, "I_COMP", (uint64_t *)&__n[1], __n)
            || hlp_NLUStrFind(v137, "E_COMP", (uint64_t *)&__n[1], __n))
          {
            v36 = 11593;
            goto LABEL_50;
          }
        }
        else if (hlp_NLUStrFind(v137, "COMP", (uint64_t *)&__n[1], __n))
        {
          strncpy(v35, *(const char **)&__n[1], __n[0] + 1);
          v37 = __n[0];
LABEL_51:
          v35[v37] = 0;
          v39 = &v35[v37 + 1];
          goto LABEL_52;
        }
        v39 = v35;
        v35 = "null";
LABEL_52:
        prmfx_setFeature("compound", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * v15), v35);
        if (hlp_NLUStrFind(v137, "S_CLASS", (uint64_t *)&__n[1], __n)
          || hlp_NLUStrFind(v137, "I_CLASS", (uint64_t *)&__n[1], __n)
          || hlp_NLUStrFind(v137, "E_CLASS", (uint64_t *)&__n[1], __n))
        {
          strncpy(v39, *(const char **)&__n[1], __n[0] + 1);
          v40 = &v39[__n[0]];
          *v40 = 0;
          v41 = v40 + 1;
        }
        else
        {
          v41 = v39;
          v39 = "null";
        }
        prmfx_setFeature("doc_class", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * v15), v39);
        *v41 = 0;
        for (i = v137; hlp_NLUStrFind(i, "S_PUNC", (uint64_t *)&__n[1], __n); i = (char *)(*(_QWORD *)&__n[1] + __n[0]))
        {
          if (*v41)
            *(_WORD *)&v41[strlen(v41)] = 59;
          v43 = strncat(v41, (const char *)(*(_QWORD *)&__n[1] - 7), 7uLL);
          strncat(v43, *(const char **)&__n[1], __n[0]);
        }
        for (j = v137; hlp_NLUStrFind(j, "I_PUNC", (uint64_t *)&__n[1], __n); j = (char *)(*(_QWORD *)&__n[1] + __n[0]))
        {
          if (*v41)
            *(_WORD *)&v41[strlen(v41)] = 59;
          v45 = strncat(v41, (const char *)(*(_QWORD *)&__n[1] - 7), 7uLL);
          strncat(v45, *(const char **)&__n[1], __n[0]);
        }
        for (k = v137; hlp_NLUStrFind(k, "E_PUNC", (uint64_t *)&__n[1], __n); k = (char *)(*(_QWORD *)&__n[1] + __n[0]))
        {
          if (*v41)
            *(_WORD *)&v41[strlen(v41)] = 59;
          v47 = strncat(v41, (const char *)(*(_QWORD *)&__n[1] - 7), 7uLL);
          strncat(v47, *(const char **)&__n[1], __n[0]);
        }
        v48 = strlen(v41);
        if (v48)
        {
          v41[v48] = 0;
          v49 = &v41[v48 + 1];
        }
        else
        {
          v49 = v41;
          v41 = "null";
        }
        if ((_WORD)v128)
          prmfx_setFeature("doc_punc_next_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (v14 - 1)), v41);
        prmfx_setFeature("doc_punc", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * v15), v41);
        if (*a6 - 1 > v14)
          prmfx_setFeature("doc_punc_previous_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (v14 + 1)), v41);
        if (hlp_NLUStrFind(v137, "S_NE", (uint64_t *)&__n[1], __n)
          || hlp_NLUStrFind(v137, "I_NE", (uint64_t *)&__n[1], __n)
          || hlp_NLUStrFind(v137, "E_NE", (uint64_t *)&__n[1], __n))
        {
          strncpy(v49, *(const char **)&__n[1], __n[0] + 1);
          v50 = &v49[__n[0]];
          *v50 = 0;
          v51 = v50 + 1;
        }
        else
        {
          v51 = v49;
          v49 = "null";
        }
        if ((_WORD)v128)
          prmfx_setFeature("ne_next_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (v14 - 1)), v49);
        prmfx_setFeature("ne_current_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * v15), v49);
        if (*a6 - 1 > v14)
          prmfx_setFeature("ne_previous_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (v14 + 1)), v49);
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(v129 + 176))(v130, v124, (unsigned __int16)v141, 9, &v137, &v140) & 0x80000000) != 0)
        {
          v137 = "null";
        }
        else
        {
          *v51 = 0;
          strncat(v51, v137, 2uLL);
        }
        prmfx_setFeature("language_tag", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * v15), v51);
        v52 = 0;
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(v129 + 176))(v130, v124, (unsigned __int16)v141, 3, &v137, &v140) & 0x80000000) == 0)
        {
          v53 = v137;
          if (v137)
          {
            v52 = 0;
            do
            {
              ++v52;
              v54 = strchr(v53, 46);
              v53 = v54 + 1;
              if (v54)
                v55 = v54 + 1;
              else
                v55 = 0;
              v137 = v55;
            }
            while (v54);
          }
        }
        v56 = &v51[strlen(v51) + 1];
        snprintf(v56, 4uLL, "%u", v52 >> 1);
        prmfx_setFeature("word_length", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * v15), v56);
        if (WORD2(v125) == 1)
        {
          prmfx_setFeature("phrase_length", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * v15), "0");
          v57 = v130;
        }
        else
        {
          v57 = v130;
          if (WORD2(v125) < 6u)
            v58 = "1";
          else
            v58 = "2";
          prmfx_setFeature("phrase_length", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * v15), v58);
        }
        if (WORD2(v125) - 1 == WORD2(v127))
        {
          prmfx_setFeature("position", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * v15), "3");
        }
        else
        {
          if (WORD2(v127))
          {
            v59 = *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * v15);
            if (WORD2(v125) - 2 == WORD2(v127))
              v60 = "2";
            else
              v60 = "1";
          }
          else
          {
            v59 = *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * v15);
            v60 = "0";
          }
          prmfx_setFeature("position", v59, v60);
        }
        if ((unsigned __int16)v125 - 1 == (unsigned __int16)v127)
        {
          v61 = *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * v15);
          v62 = "3";
        }
        else if ((_WORD)v127)
        {
          v61 = *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * v15);
          if ((unsigned __int16)v125 - 2 == (unsigned __int16)v127)
            v62 = "2";
          else
            v62 = "1";
        }
        else
        {
          v61 = *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * v15);
          v62 = "0";
        }
        prmfx_setFeature("position_major_ip", v61, v62);
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(v129 + 168))(v57, v124, (unsigned __int16)v141, 1, 1, &v138, &v140);
        if ((result & 0x80000000) == 0)
        {
          if (v138 >= v135)
          {
            v63 = "null";
            v136 = "null";
          }
          else
          {
            v63 = v136;
          }
          prmfx_setFeature("domain", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * v15), v63);
          if (v138 >= v133)
          {
            v64 = "null";
            v134 = "null";
          }
          else
          {
            v64 = v134;
          }
          prmfx_setFeature("tn", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * v15), v64);
          v65 = (unsigned __int16 *)(*((_QWORD *)a6 + 4) + 56 * v15);
          v66 = v65[1];
          v67 = *v65;
          v68 = (unsigned __int16)(v66 - v67);
          v69 = heap_Alloc(*(_QWORD *)(a2 + 8), v68 + 5);
          if (!v69)
            return 2382372874;
          v70 = (const char *)v69;
          v71 = *((_QWORD *)a6 + 2);
          v72 = a6[12];
          a6[12] = v72 + 1;
          *(_QWORD *)(v71 + 8 * v72) = v69;
          v73 = *(unsigned __int16 *)(*((_QWORD *)a6 + 4) + 56 * v15);
          v74 = *((_QWORD *)a6 + 5);
          if (v66 == v67)
          {
            v75 = 0;
          }
          else
          {
            v75 = 0;
            v76 = (char *)(v74 + v73);
            v77 = v68;
            do
            {
              v79 = *v76++;
              v78 = v79;
              if (*(_DWORD *)(a1 + 88) || !strchr(__s, v78))
                v70[v75++] = v78;
              --v77;
            }
            while (v77);
          }
          v70[v75] = 0;
          if (*(_DWORD *)(a1 + 88))
          {
            result = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(a1 + 56) + 112))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "normal", v70, v68);
            v80 = v128;
            v81 = v120;
            if ((result & 0x80000000) != 0)
              return result;
          }
          else
          {
            v80 = v128;
            v81 = v120;
          }
          if (!*v70)
            goto LABEL_148;
          v82 = strstr(v81, v70);
          if (!v82)
            goto LABEL_148;
          v83 = v82;
          do
          {
            v84 = (v83 == v81 || v83 > v81 && *(v83 - 1) == 32) && v83[strlen(v70)] == 32;
            v85 = strstr(v83 + 1, v70);
            if (!v85)
              break;
            v83 = v85;
          }
          while (!v84);
          if (!v84)
LABEL_148:
            v70 = "null";
          prmfx_setFeature("orth", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * v15), v70);
          v12 = v80 + 1;
          LOWORD(v127) = v127 + 1;
          ++WORD2(v127);
          v13 = v121;
          v7 = v124;
          v10 = v129;
          v8 = v130;
          goto LABEL_150;
        }
        return result;
      case 5:
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(v10 + 168))(v8, v7, (unsigned __int16)v141, 1, 1, &v135, &v140);
        if ((result & 0x80000000) != 0)
          return result;
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, int *))(v10 + 176))(v8, v7, (unsigned __int16)v141, 4, &v136, &v140) & 0x80000000) != 0)v136 = "null";
        if (v135 == v138 && (_WORD)v12)
          prmfx_setFeature("domain", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * ((unsigned __int16)v12 - 1)), v136);
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(v10 + 168))(v8, v7, (unsigned __int16)v141, 2, 1, &v135, &v140) & 0x80000000) != 0)v135 = v138;
        goto LABEL_150;
      case 6:
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(v10 + 168))(v8, v7, (unsigned __int16)v141, 1, 1, &v133, &v140);
        if ((result & 0x80000000) != 0)
          return result;
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, int *))(v10 + 176))(v8, v7, (unsigned __int16)v141, 4, &v134, &v140) & 0x80000000) != 0)v134 = "null";
        if (v133 == v138 && (_WORD)v12)
          prmfx_setFeature("tn", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * ((unsigned __int16)v12 - 1)), v134);
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(v10 + 168))(v8, v7, (unsigned __int16)v141, 2, 1, &v133, &v140) & 0x80000000) != 0)v133 = v138;
        goto LABEL_150;
      case 0xF:
        if ((v13 & 0x8000) == 0)
          prmfx_setFeature("accentable", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v13), "L");
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, int *))(v10 + 176))(v8, v7, (unsigned __int16)v141, 4, &v132, &v140) & 0x80000000) != 0)v132 = "null";
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(v10 + 120))(v8, v7, (unsigned __int16)v141, (char *)&v140 + 2);
        if ((result & 0x80000000) != 0)
          return result;
        if (HIWORD(v140))
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 168))(v8, v7);
          if ((result & 0x80000000) != 0)
            return result;
          WORD2(v125) = 0;
          v86 = HIWORD(v140);
          if (HIWORD(v140))
          {
            v87 = v139;
            if ((_DWORD)v139 != 15)
            {
              HIDWORD(v125) = 0;
              while (1)
              {
                v88 = (v87 - 9) < 6 || v87 == 4;
                v89 = HIDWORD(v125);
                if (v88)
                  v89 = HIDWORD(v125) + 1;
                HIDWORD(v125) = v89;
                result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(v10 + 120))(v8, v7, v86, (char *)&v140 + 2);
                if ((result & 0x80000000) != 0)
                  return result;
                if (!HIWORD(v140))
                  break;
                result = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 168))(v8, v7);
                if ((result & 0x80000000) != 0)
                  return result;
                v86 = HIWORD(v140);
                if (HIWORD(v140))
                {
                  v87 = v139;
                  if ((_DWORD)v139 != 15)
                    continue;
                }
                break;
              }
            }
          }
          v90 = *((_QWORD *)a6 + 4);
          if ((_WORD)v12 && v119 != *(unsigned __int16 *)(v90 + 56 * ((unsigned __int16)v12 - 1) + 4))
          {
            WORD2(v127) = 0;
            v13 = 0xFFFF;
          }
          else
          {
            v91 = *a6 - 1;
            if (v91 <= (unsigned __int16)v12)
            {
              LOWORD(v125) = 1;
              v92 = v12;
            }
            else
            {
              LOWORD(v125) = 1;
              v92 = v12;
              do
              {
                if (*(_DWORD *)(v90 + 56 * v92 + 48))
                  break;
                v93 = *(const char **)(v90 + 56 * v92 + 32);
                if (v93)
                {
                  v94 = *(_QWORD *)(v90 + 56 * v92 + 24);
                  if (v94)
                  {
                    if (strncmp(v93, "%", v94))
                      break;
                  }
                }
                LOWORD(v125) = v125 + 1;
                ++v92;
              }
              while (v91 > v92);
            }
            v127 = 0;
            v119 = *(unsigned __int16 *)(v90 + 56 * v92 + 4);
            v13 = 0xFFFF;
            v7 = v124;
            v10 = v129;
            v8 = v130;
          }
LABEL_150:
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(v10 + 120))(v8, v7, (unsigned __int16)v141, &v141);
          if ((result & 0x80000000) != 0)
            return result;
          continue;
        }
        v95 = -1;
LABEL_205:
        if (*a6)
        {
          v96 = 0;
          v97 = (uint64_t *)*((_QWORD *)a6 + 1);
          v98 = *v97;
          while (strcmp("prm_previous_word", g_FeatureNames[v96]))
          {
            if (++v96 == 29)
              goto LABEL_212;
          }
          *(_QWORD *)(v98 + v96 * 8) = "null";
          v97 = (uint64_t *)*((_QWORD *)a6 + 1);
          v98 = *v97;
LABEL_212:
          v99 = 0;
          while (strcmp("pos_previous_word", g_FeatureNames[v99]))
          {
            if (++v99 == 29)
              goto LABEL_217;
          }
          *(_QWORD *)(v98 + v99 * 8) = "null";
          v97 = (uint64_t *)*((_QWORD *)a6 + 1);
LABEL_217:
          v100 = 0;
          v101 = (unsigned __int16)v12 - 1;
          v102 = v97[v101];
          while (strcmp("pos_next_word", g_FeatureNames[v100]))
          {
            if (++v100 == 29)
              goto LABEL_222;
          }
          *(_QWORD *)(v102 + v100 * 8) = "null";
          v97 = (uint64_t *)*((_QWORD *)a6 + 1);
LABEL_222:
          v103 = 0;
          v104 = *v97;
          while (strcmp("phr_previous_word", g_FeatureNames[v103]))
          {
            if (++v103 == 29)
              goto LABEL_227;
          }
          *(_QWORD *)(v104 + v103 * 8) = "null";
          v97 = (uint64_t *)*((_QWORD *)a6 + 1);
LABEL_227:
          v105 = 0;
          v106 = v97[v101];
          while (strcmp("phr_next_word", g_FeatureNames[v105]))
          {
            if (++v105 == 29)
              goto LABEL_232;
          }
          *(_QWORD *)(v106 + v105 * 8) = "null";
          v97 = (uint64_t *)*((_QWORD *)a6 + 1);
LABEL_232:
          v107 = 0;
          v108 = *v97;
          while (strcmp("ne_previous_word", g_FeatureNames[v107]))
          {
            if (++v107 == 29)
              goto LABEL_237;
          }
          *(_QWORD *)(v108 + v107 * 8) = "null";
          v97 = (uint64_t *)*((_QWORD *)a6 + 1);
LABEL_237:
          v109 = 0;
          v110 = v97[v101];
          while (strcmp("ne_next_word", g_FeatureNames[v109]))
          {
            if (++v109 == 29)
              goto LABEL_242;
          }
          *(_QWORD *)(v110 + v109 * 8) = "null";
          v97 = (uint64_t *)*((_QWORD *)a6 + 1);
LABEL_242:
          v111 = 0;
          v112 = *v97;
          while (strcmp("doc_punc_previous_word", g_FeatureNames[v111]))
          {
            if (++v111 == 29)
              goto LABEL_247;
          }
          *(_QWORD *)(v112 + v111 * 8) = "null";
          v97 = (uint64_t *)*((_QWORD *)a6 + 1);
LABEL_247:
          v113 = 0;
          v114 = v97[v101];
          while (strcmp("doc_punc_next_word", g_FeatureNames[v113]))
          {
            if (++v113 == 29)
              goto LABEL_252;
          }
          *(_QWORD *)(v114 + v113 * 8) = "null";
          v97 = (uint64_t *)*((_QWORD *)a6 + 1);
LABEL_252:
          v115 = 0;
          v116 = *v97;
          while (strcmp("bndshape_previous_word", g_FeatureNames[v115]))
          {
            if (++v115 == 29)
              goto LABEL_257;
          }
          *(_QWORD *)(v116 + v115 * 8) = "null";
          v97 = (uint64_t *)*((_QWORD *)a6 + 1);
LABEL_257:
          v117 = 0;
          v118 = v97[v101];
          while (strcmp("bndshape_next_word", g_FeatureNames[v117]))
          {
            if (++v117 == 29)
              goto LABEL_262;
          }
          *(_QWORD *)(v118 + v117 * 8) = "null";
        }
LABEL_262:
        if ((v95 & 0x8000) == 0)
          prmfx_setFeature("accentable", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * v95), "L");
        return 0;
      default:
        goto LABEL_150;
    }
  }
}

uint64_t prmfx_setFeature(char *__s1, uint64_t a2, const char *a3)
{
  uint64_t v6;
  uint64_t result;
  const char *v8;

  v6 = 0;
  while (1)
  {
    result = strcmp(__s1, g_FeatureNames[v6]);
    if (!(_DWORD)result)
      break;
    if (++v6 == 29)
      return result;
  }
  if (*a3)
    v8 = a3;
  else
    v8 = "null";
  *(_QWORD *)(a2 + v6 * 8) = v8;
  return result;
}

uint64_t fe_prmfx_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2382372865;
  result = 0;
  *a2 = &IPrmFx;
  return result;
}

uint64_t prmfx_AllocateResults(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _WORD *v12;
  int v13;

  v13 = 0;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a3 + 104))(a4, a5, 1, 0, (char *)&v13 + 2);
  if ((v9 & 0x80000000) != 0)
    return v9;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(a3 + 104))(a4, a5, 2, HIWORD(v13), &v13);
  if ((v9 & 0x80000000) != 0)
    return v9;
  while ((_WORD)v13)
  {
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 168))(a4, a5);
    if ((v9 & 0x80000000) == 0)
    {
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(a3 + 120))(a4, a5, (unsigned __int16)v13, &v13);
      if ((v9 & 0x80000000) == 0)
        continue;
    }
    return v9;
  }
  v10 = 2382372874;
  v12 = (_WORD *)heap_Alloc(*(_QWORD *)(a1 + 8), 56);
  if (v12)
  {
    *v12 = 0;
    return 0;
  }
  return v10;
}

uint64_t fillWordInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned __int16 v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned __int16 v19;
  __int16 v20;
  unsigned __int16 v21;
  __int16 v22;
  int v23[2];

  v19 = 0;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1 + 104))(a2, a3, 1, 0, &v19);
  if ((result & 0x80000000) == 0)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char *))(a1 + 184))(a2, a3, v19, 0, (char *)&v16 + 2);
    if ((result & 0x80000000) == 0 && HIWORD(v16) == 1)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *))(a1 + 176))(a2, a3, v19, 0, a4 + 40, &v18);
      if ((result & 0x80000000) == 0 && (unsigned __int16)v18 >= 2u)
      {
        *(_QWORD *)(a4 + 48) = strlen(*(const char **)(a4 + 40));
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a1 + 104))(a2, a3, 2, v19, (char *)&v18 + 2);
        if ((result & 0x80000000) == 0)
        {
          v9 = HIWORD(v18);
          if (HIWORD(v18))
          {
            v10 = 0;
            while (1)
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(a1 + 168))(a2, a3, v9, 0, 1, &v17, &v18);
              if ((result & 0x80000000) != 0)
                return result;
              if ((v17 - 9) < 6)
                goto LABEL_11;
              if (v17 == 15)
              {
                result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(a1 + 168))(a2, a3, HIWORD(v18), 7, 1, &v16, &v18);
                if ((result & 0x80000000) != 0)
                  return result;
                if (v10 && (unsigned __int16)v16 <= 1u)
                  *(_DWORD *)(*(_QWORD *)(a4 + 32) + 56 * (v10 - 1) + 48) = 1;
                goto LABEL_15;
              }
              if (v17 == 4)
              {
LABEL_11:
                v11 = *(_QWORD *)(a4 + 32);
                v12 = v10;
                v13 = v11 + 56 * v10;
                v14 = HIWORD(v18);
                v20 = 0;
                *(_WORD *)(v13 + 4) = HIWORD(v18);
                *(_DWORD *)(v13 + 48) = 0;
                result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 168))(a2, a3, v14, 1, 1);
                if ((result & 0x80000000) != 0
                  || (result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(a1 + 168))(a2, a3, v14, 2, 1, v11 + 56 * v10 + 2, &v20), (result & 0x80000000) != 0)|| (*(_QWORD *)v23 = 0, v22 = 0, result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, __int16 *))(a1 + 176))(a2, a3, v14, 14, v23, &v22), (result & 0x80000000) != 0))
                {
                  *(_DWORD *)(v11 + 56 * v10 + 44) = 0;
                  return result;
                }
                ++v10;
                v21 = 0;
                v15 = v11 + 56 * v12;
                hlp_NLUStrFind(*(char **)v23, "PRM", (uint64_t *)(v15 + 16), &v21);
                *(_QWORD *)(v15 + 8) = v21;
                hlp_NLUStrFind(*(char **)v23, "BNDSHAPE", (uint64_t *)(v15 + 32), &v21);
                *(_QWORD *)(v15 + 24) = v21;
                *(_DWORD *)(v15 + 44) = 1;
              }
LABEL_15:
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(a1 + 120))(a2, a3, HIWORD(v18), (char *)&v18 + 2);
              if ((result & 0x80000000) == 0)
              {
                v9 = HIWORD(v18);
                if (HIWORD(v18))
                  continue;
              }
              return result;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t prmfx_FreeResults(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  unint64_t v5;
  unint64_t v6;

  if (*a3)
  {
    v5 = 0;
    do
      heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(*((_QWORD *)a3 + 1) + 8 * v5++));
    while (v5 < *a3);
  }
  heap_Free(*(_QWORD **)(a1 + 8), *((_QWORD *)a3 + 1));
  if (a3[12])
  {
    v6 = 0;
    do
      heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(*((_QWORD *)a3 + 2) + 8 * v6++));
    while (v6 < a3[12]);
  }
  heap_Free(*(_QWORD **)(a1 + 8), *((_QWORD *)a3 + 2));
  heap_Free(*(_QWORD **)(a1 + 8), *((_QWORD *)a3 + 4));
  heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)a3);
  return 0;
}

uint64_t prmfx_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t inited;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;

  v3 = 2382372871;
  if (a3)
  {
    v11 = 0;
    inited = InitRsrcFunction(a1, a2, &v11);
    if ((inited & 0x80000000) != 0)
      return inited;
    v8 = (_QWORD *)heap_Calloc(*(_QWORD **)(v11 + 8), 1, 32);
    if (!v8)
      return 2382372874;
    v9 = v8;
    *v8 = v11;
    v8[1] = a1;
    v8[2] = a2;
    inited = critsec_ObjOpen(*(_QWORD *)(v11 + 16), *(_QWORD **)(v11 + 8), v8 + 3);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      v3 = 0;
      *(_QWORD *)a3 = v9;
      *(_DWORD *)(a3 + 8) = 449;
    }
  }
  return v3;
}

uint64_t prmfx_ClassClose(uint64_t *a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck((uint64_t)a1, a2, 449, 32);
  if ((result & 0x80000000) == 0)
  {
    critsec_ObjClose(a1[3]);
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t prmfx_ObjOpen(uint64_t a1, int a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22[256];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = 2382372871;
  v19 = 0;
  v18 = 0;
  if (!a5)
    return v5;
  v20 = 0;
  v21 = 0;
  inited = InitRsrcFunction(a3, a4, &v21);
  if ((inited & 0x80000000) != 0)
    return inited;
  v12 = (_QWORD *)heap_Calloc(*(_QWORD **)(v21 + 8), 1, 96);
  if (!v12)
    return 2382372874;
  v13 = (uint64_t)v12;
  *v12 = v21;
  v12[1] = a3;
  v12[2] = a4;
  v12[3] = 0;
  v14 = v12 + 3;
  v12[4] = 0;
  inited = safeh_HandleCheck(a1, a2, 449, 32);
  if ((inited & 0x80000000) != 0)
    return inited;
  *v14 = a1;
  inited = objc_GetObject(*(_QWORD *)(v21 + 48), (uint64_t)"LINGDB", &v20);
  if ((inited & 0x80000000) != 0)
    return inited;
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(v20 + 8);
  inited = objc_GetObject(*(_QWORD *)(v21 + 48), (uint64_t)"FE_DCTLKP", &v19);
  if ((inited & 0x80000000) != 0)
    return inited;
  v15 = v19;
  *(_QWORD *)(v13 + 56) = *(_QWORD *)(v19 + 8);
  *(_OWORD *)(v13 + 40) = *(_OWORD *)(v15 + 16);
  if ((paramc_ParamGetUInt(*(_QWORD *)(v21 + 40), (uint64_t)"prmigactive", &v18) & 0x80000000) != 0 || v18 != 1)
  {
    *(_QWORD *)(v13 + 64) = 0;
    inited = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)v13 + 40), (uint64_t)"prmigexists", 0);
    if ((inited & 0x80000000) == 0)
    {
LABEL_20:
      v5 = 0;
      *(_QWORD *)a5 = v13;
      *(_DWORD *)(a5 + 8) = 449;
      return v5;
    }
    return inited;
  }
  inited = hlp_CreateVoiceBrokerString_1(*(_QWORD *)v13, v22);
  if ((inited & 0x80000000) != 0)
    return inited;
  critsec_Enter(*(_QWORD **)(*(_QWORD *)(v13 + 24) + 24));
  if ((igtree_Init_ReadOnly_ReferenceCnt(*(_WORD **)(v13 + 8), *(_QWORD *)(v13 + 16), *(_WORD **)(*(_QWORD *)(v13 + 24) + 8), *(_QWORD *)(*(_QWORD *)(v13 + 24) + 16), (_QWORD *)(v13 + 64), 2, (uint64_t)v22, (uint64_t)"IGTR", 5, 0) & 0x80000000) != 0)
  {
    *(_QWORD *)(v13 + 64) = 0;
    paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)v13 + 40), (uint64_t)"prmigexists", 0);
    v5 = 0;
  }
  else
  {
    v16 = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)v13 + 40), (uint64_t)"prmigexists", 1u);
    if ((v16 & 0x80000000) == 0)
      v16 = processIgParams(v13);
    v5 = v16;
  }
  critsec_Leave(*(_QWORD **)(*v14 + 24));
  if ((v5 & 0x80000000) == 0)
    goto LABEL_20;
  return v5;
}

uint64_t prmfx_ObjClose(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = safeh_HandleCheck(a1, a2, 449, 96);
  if ((result & 0x80000000) == 0)
  {
    v4 = *(_QWORD *)a1;
    v5 = **(_QWORD **)(a1 + 24);
    if (*(_QWORD *)(a1 + 32))
      objc_ReleaseObject(*(_QWORD *)(v4 + 48), (uint64_t)"LINGDB");
    if (*(_QWORD *)(a1 + 56))
      objc_ReleaseObject(*(_QWORD *)(v4 + 48), (uint64_t)"FE_DCTLKP");
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
      igtree_Deinit_ReadOnly_DereferenceCnt(v4, v5, v6);
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), a1);
    return 0;
  }
  return result;
}

uint64_t prmfx_ObjReopen(uint64_t a1, int a2)
{
  uint64_t VoiceBrokerString_1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  char v10[256];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  VoiceBrokerString_1 = safeh_HandleCheck(a1, a2, 449, 96);
  if ((VoiceBrokerString_1 & 0x80000000) != 0)
    return VoiceBrokerString_1;
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
    igtree_Deinit_ReadOnly_DereferenceCnt(*(_QWORD *)a1, **(_QWORD **)(a1 + 24), v5);
  if ((paramc_ParamGetUInt(*(_QWORD *)(v4 + 40), (uint64_t)"prmigactive", &v9) & 0x80000000) != 0 || v9 != 1)
  {
    *(_QWORD *)(a1 + 64) = 0;
    VoiceBrokerString_1 = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"prmigexists", 0);
    if ((VoiceBrokerString_1 & 0x80000000) == 0)
      return 0;
    return VoiceBrokerString_1;
  }
  VoiceBrokerString_1 = hlp_CreateVoiceBrokerString_1(*(_QWORD *)a1, v10);
  if ((VoiceBrokerString_1 & 0x80000000) != 0)
    return VoiceBrokerString_1;
  critsec_Enter(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 24));
  if ((igtree_Init_ReadOnly_ReferenceCnt(*(_WORD **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_WORD **)(*(_QWORD *)(a1 + 24) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), (_QWORD *)(a1 + 64), 2, (uint64_t)v10, (uint64_t)"IGTR", 5, 0) & 0x80000000) != 0)
  {
    *(_QWORD *)(a1 + 64) = 0;
    paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"prmigexists", 0);
    v7 = 0;
  }
  else
  {
    v6 = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"prmigexists", 1u);
    if ((v6 & 0x80000000) == 0)
      v6 = processIgParams(a1);
    v7 = v6;
  }
  critsec_Leave(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 24));
  if ((v7 & 0x80000000) == 0)
    return 0;
  return v7;
}

uint64_t prmfx_ProcessStart(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  int Int;
  int v6;

  result = safeh_HandleCheck(a1, a2, 449, 96);
  if ((result & 0x80000000) == 0)
  {
    v6 = 0;
    v4 = *(_QWORD *)a1;
    *(_DWORD *)(a1 + 84) = 1;
    Int = paramc_ParamGetInt(*(_QWORD *)(v4 + 40), (uint64_t)"statcompwidescope", &v6);
    result = 0;
    if ((Int & 0x80000000) == 0 && !v6)
    {
      result = 0;
      *(_DWORD *)(a1 + 84) = 0;
    }
  }
  return result;
}

uint64_t prmfx_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Results;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  int v37;
  unsigned int v38;
  unsigned __int16 *v39;
  int v40;
  int v41;
  char *__s1;
  unsigned int v43;
  char v44[8];
  char *v45;
  int v46;
  _BYTE *v47;
  unsigned __int16 v48;
  unsigned __int16 *v49;
  _OWORD v50[14];
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v43 = 0;
  __s1 = 0;
  v9 = safeh_HandleCheck(a1, a2, 449, 96);
  if ((v9 & 0x80000000) == 0)
  {
    v48 = 0;
    v47 = 0;
    v46 = 0;
    memset(v50, 0, sizeof(v50));
    v51 = 0;
    *a5 = 1;
    v10 = *(_QWORD *)a1;
    if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"basicclcprosody", &__s1) & 0x80000000) == 0
      && __s1
      && !strcmp(__s1, "yes"))
    {
      log_OutText(*(_QWORD *)(v10 + 32), (uint64_t)"PRMFX", 5, 0, (uint64_t)"<%s> disables voice-dependent igtree", v11, v12, v13, (uint64_t)"basicclcprosody");
      return v9;
    }
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 32) + 104))(a3, a4, 1, 0, &v48);
    if ((v9 & 0x80000000) == 0
      && ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 32) + 184))(a3, a4, v48, 0, (char *)&v46 + 2) & 0x80000000) == 0&& HIWORD(v46) == 1)
    {
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _BYTE **, int *))(*(_QWORD *)(a1 + 32) + 176))(a3, a4, v48, 0, &v47, &v46);
      if ((v9 & 0x80000000) == 0 && (unsigned __int16)v46 >= 2u)
      {
        Results = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32)
                                                                                                + 272))(a3, a4, 9, 1, 0, 0);
        if ((Results & 0x80000000) != 0)
          return Results;
        v9 = 0;
        if ((paramc_ParamGetUInt(*(_QWORD *)(v10 + 40), (uint64_t)"prmigactive", &v43) & 0x80000000) == 0 && v43 == 1)
        {
          if (!*(_QWORD *)(a1 + 64))
            return 0;
          v49 = 0;
          Results = prmfx_AllocateResults(v10, v15, *(_QWORD *)(a1 + 32), a3, a4);
          if ((Results & 0x80000000) != 0)
            return Results;
          critsec_Enter(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 24));
          v16 = v49;
          v9 = prmfx_CommonProcess(a1, v10, v17, a3, a4, v49);
          critsec_Leave(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 24));
          if ((v9 & 0x80000000) == 0)
          {
            strcpy(v44, "null");
            v45 = v44;
            if (*v16)
            {
              v19 = 0;
              while (1)
              {
                v20 = *(unsigned __int16 *)(*((_QWORD *)v16 + 4) + 56 * v19 + 4);
                prmfx_setFeature("prm_previous_word", *(_QWORD *)(*((_QWORD *)v16 + 1) + 8 * v19), v45);
                v21 = *(_QWORD *)(a1 + 64);
                v22 = *(unsigned __int8 *)(v21 + 1296);
                if (v22 >= 2)
                {
                  v23 = 0;
                  v37 = v22 - 1;
                  v38 = v20;
                  v39 = v16;
                  while (2)
                  {
                    v24 = 0;
                    v25 = *(const char **)(*(_QWORD *)(v21 + 1312) + 8 * v23);
                    v26 = *(_QWORD *)(*((_QWORD *)v16 + 1) + 8 * v19);
                    while (strcmp(v25, g_FeatureNames[v24]))
                    {
                      if (++v24 == 29)
                        return 2382372889;
                    }
                    v27 = *(_QWORD *)(v26 + v24 * 8);
                    *((_QWORD *)v50 + v23) = v27;
                    if (!v27)
                      return 2382372889;
                    ++v23;
                    v20 = v38;
                    v16 = v39;
                    if (v37 > (unsigned __int16)v23)
                      continue;
                    break;
                  }
                }
                Results = igtree_Process(v21, (uint64_t)v50, &v47);
                if ((Results & 0x80000000) != 0)
                  return Results;
                traceFeatureVector_0(v10, *(_QWORD *)(a1 + 64), (const char **)v50, (uint64_t)v16, (unsigned __int16)v19);
                *(_BYTE *)(*((_QWORD *)v16 + 4) + 56 * v19 + 40) = *v47;
                if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, int *))(*(_QWORD *)(a1 + 32) + 176))(a3, a4, v20, 13, &v45, &v46) & 0x80000000) != 0)
                {
                  strcpy(v44, "null");
                  v45 = v44;
                }
                v31 = *((_QWORD *)v16 + 4);
                v32 = *(const char **)(v31 + 56 * v19 + 16);
                if (v32)
                {
                  *v45 = *v32;
                  v33 = *((_QWORD *)v16 + 4);
                  v34 = *(_QWORD *)(v33 + 56 * v19 + 8);
                  if (v34 >= 2)
                  {
                    log_OutText(*(_QWORD *)(v10 + 32), (uint64_t)"PRMFX", 1, 0, (uint64_t)"PRMFX: reference PRM %.*s truncated", v28, v29, v30, v34);
                    v33 = *((_QWORD *)v16 + 4);
                  }
                  *(_BYTE *)(v33 + 56 * v19 + 40) = *v45;
                }
                else
                {
                  *v45 = *(_BYTE *)(v31 + 56 * v19 + 40);
                }
                if (*(_BYTE *)(a1 + 92))
                {
                  v40 = 0;
                  v41 = 0;
                  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)(a1 + 32)
                                                                                              + 184))(a3, a4, v20, 8, (char *)&v41 + 2) & 0x80000000) == 0&& HIWORD(v41) == 1)
                  {
                    Results = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a1 + 32) + 168))(a3, a4, v20, 8, 1, &v41, &v46);
                    if ((Results & 0x80000000) != 0)
                      return Results;
                    if ((_WORD)v41 && *v45 == *(_BYTE *)(a1 + 92))
                    {
                      Results = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)(a1 + 32) + 160))(a3, a4, v20, 8, 1, a1 + 94, &v40);
                      if ((Results & 0x80000000) != 0)
                        return Results;
                      Results = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)(a1 + 32)
                                                                                             + 120))(a3, a4, v20, (char *)&v40 + 2);
                      if ((Results & 0x80000000) != 0)
                        return Results;
                      while (HIWORD(v40))
                      {
                        Results = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 168))(a3, a4);
                        if ((Results & 0x80000000) == 0)
                        {
                          Results = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 32)
                                                                                                + 120))(a3, a4, HIWORD(v40), (char *)&v40 + 2);
                          if ((Results & 0x80000000) == 0)
                            continue;
                        }
                        return Results;
                      }
                    }
                  }
                }
                if (++v19 >= (unint64_t)*v16)
                  break;
              }
            }
            v35 = *(unsigned __int8 *)(a1 + 80);
            if (v35 != 50)
            {
              if (v35 == 51)
              {
                Results = consistencyCheck3(*(_QWORD *)(a1 + 32), a3, a4, (signed __int16 *)v16);
                if ((Results & 0x80000000) != 0)
                  return Results;
              }
              goto LABEL_55;
            }
            Results = consistencyCheck2(*(_QWORD *)(a1 + 32), a3, a4, v16);
            if ((Results & 0x80000000) == 0)
            {
LABEL_55:
              prmfx_FreeResults(v10, v18, v16);
              return 0;
            }
            return Results;
          }
        }
      }
    }
  }
  return v9;
}

uint64_t prmfx_ProcessEnd(uint64_t a1, int a2)
{
  int v2;

  v2 = safeh_HandleCheck(a1, a2, 449, 96);
  return v2 & (v2 >> 31);
}

uint64_t hlp_CreateVoiceBrokerString_1(uint64_t a1, char *a2)
{
  uint64_t result;
  const char *v5;
  char *v6;

  v5 = 0;
  v6 = 0;
  result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"langcode", &v6);
  if ((result & 0x80000000) == 0)
  {
    result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"voice", &v5);
    if ((result & 0x80000000) == 0)
      return brokeraux_ComposeBrokerString(a1, "igtree", 1, 1, v6, v5, 0, a2, 0x100uLL);
  }
  return result;
}

uint64_t processIgParams(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned __int16 v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char **v9;
  const char *v10;
  int v11;
  char *v12;
  char *v13;

  v1 = 2382372871;
  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 64);
    if (v3)
    {
      *(_QWORD *)(a1 + 72) = &byte_1DEBD87CE;
      *(_BYTE *)(a1 + 80) = 48;
      *(_QWORD *)(a1 + 88) = 0x50000000000000;
      if (*(_DWORD *)(v3 + 1336))
      {
        v4 = 0;
        do
        {
          v5 = *(_QWORD *)(v3 + 1328);
          v6 = v4;
          v7 = *(const char **)(v5 + 16 * v4);
          if (!strcmp("accentable_pos", v7))
          {
            v8 = v5 + 16 * v6;
            v10 = *(const char **)(v8 + 8);
            v9 = (const char **)(v8 + 8);
            v11 = strlen(v10);
            v12 = (char *)heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(v3 + 1304), (v11 + 1));
            *(_QWORD *)(v3 + 1304) = v12;
            if (!v12)
              return 2382372874;
            strcpy(v12, *v9);
          }
          else if (!strcmp("orth_top200", v7))
          {
            *(_QWORD *)(a1 + 72) = *(_QWORD *)(v5 + 16 * v6 + 8);
          }
          else if (!strcmp("canonical_conversion", v7) && !strcmp("yes", *(const char **)(v5 + 16 * v6 + 8)))
          {
            *(_DWORD *)(a1 + 88) = 1;
          }
          else if (!strcmp("consistency_check", v7))
          {
            v13 = strstr(*(char **)(v5 + 16 * v6 + 8), "prm");
            if (v13)
              *(_BYTE *)(a1 + 80) = v13[3];
          }
          else if (!strcmp("pause_prm_value", v7))
          {
            *(_BYTE *)(a1 + 92) = **(_BYTE **)(v5 + 16 * v6 + 8);
          }
          else if (!strcmp("pause_prm_length", v7))
          {
            *(_WORD *)(a1 + 94) = atoi(*(const char **)(v5 + 16 * v6 + 8));
          }
          v4 = v6 + 1;
        }
        while (*(_DWORD *)(v3 + 1336) > (unsigned __int16)(v6 + 1));
      }
      return 0;
    }
  }
  return v1;
}

_QWORD *traceFeatureVector_0(uint64_t a1, uint64_t a2, const char **a3, uint64_t a4, uint64_t a5)
{
  const char **v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char **v11;
  const char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  const char *v18;

  v6 = a3;
  v8 = 1;
  LODWORD(v9) = (unsigned __int16)(*(unsigned __int8 *)(a2 + 1296) - 1);
  if (*(_BYTE *)(a2 + 1296) != 1)
  {
    v10 = (unsigned __int16)(*(unsigned __int8 *)(a2 + 1296) - 1);
    v11 = a3;
    do
    {
      v12 = *v11++;
      v8 += strlen(v12) + 1;
      --v10;
    }
    while (v10);
  }
  v13 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), v8);
  if (!v13)
    return (_QWORD *)log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"PRMFX", 0, 0, (uint64_t)"in traceFeatureVector(): allocating %d bytes failed", v14, v15, v16, v8);
  v17 = v13;
  *v13 = 0;
  if ((_DWORD)v9)
  {
    v9 = v9;
    do
    {
      *(_WORD *)&v17[strlen(v17)] = 32;
      v18 = *v6++;
      strcat(v17, v18);
      --v9;
    }
    while (v9);
  }
  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"PRMFX", 5, 0, (uint64_t)"traceFeatureVector igtree [%02d] %-16.*s | %-54s | %.*s %s", v14, v15, v16, a5);
  return heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v17);
}

uint64_t consistencyCheck3(uint64_t a1, uint64_t a2, uint64_t a3, signed __int16 *a4)
{
  signed __int16 v8;
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  const char *v16;
  size_t v17;
  __int16 v19;

  if (!*a4)
    return 0;
  v8 = 0;
  v9 = 0;
  v19 = 0;
  v10 = -1;
  do
  {
    v11 = *((_QWORD *)a4 + 4);
    v12 = *(unsigned __int8 *)(v11 + 56 * v8 + 40);
    if (v12 == 49)
    {
      if ((v10 & 0x8000) != 0)
        goto LABEL_17;
      v15 = *(unsigned __int8 *)(v11 + 56 * v10 + 40) >= 0x32u;
LABEL_15:
      if (!v15)
        v10 = v8;
      goto LABEL_17;
    }
    if (v12 == 50)
    {
      if ((v10 & 0x8000) != 0)
        goto LABEL_17;
      v15 = *(unsigned __int8 *)(v11 + 56 * v10 + 40) >= 0x33u;
      goto LABEL_15;
    }
    if (v12 != 51)
      goto LABEL_17;
    if ((v10 & 0x8000) == 0)
    {
      v13 = v10;
      v14 = *(unsigned __int8 *)(v11 + 56 * v10 + 40);
      v10 = v8;
      if (v14 != 51)
        goto LABEL_17;
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, __int16 *))(a1 + 160))(a2, a3, *(unsigned __int16 *)(v11 + 56 * v13 + 4), 13, 2, "2", &v19);
      if ((v9 & 0x80000000) != 0)
        return v9;
      v11 = *((_QWORD *)a4 + 4);
    }
    v10 = v8;
LABEL_17:
    if ((v10 & 0x8000u) != 0)
      v10 = v8;
    v16 = *(const char **)(v11 + 56 * v8 + 32);
    if (v16)
    {
      v17 = *(_QWORD *)(v11 + 56 * v8 + 24);
      if (v17)
      {
        if (strncmp(v16, "%", v17))
        {
          v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, __int16 *))(a1 + 160))(a2, a3, *(unsigned __int16 *)(v11 + 56 * (__int16)v10 + 4), 13, 2, "3", &v19);
          if ((v9 & 0x80000000) != 0)
            return v9;
          v10 = -1;
        }
      }
    }
    ++v8;
  }
  while ((unsigned __int16)*a4 > v8);
  if ((v10 & 0x8000) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, __int16 *))(a1 + 160))(a2, a3, *(unsigned __int16 *)(*((_QWORD *)a4 + 4) + 56 * v10 + 4), 13, 2, "3", &v19);
  return v9;
}

uint64_t consistencyCheck2(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4)
{
  int v4;
  __int16 v9;
  uint64_t result;
  __int16 v11;
  uint64_t v12;
  int v13;
  __int16 v14;

  v4 = *a4;
  if (!*a4)
    return 0;
  v9 = 0;
  result = 0;
  v14 = 0;
  v11 = -1;
  do
  {
    v12 = *((_QWORD *)a4 + 4);
    v13 = *(unsigned __int8 *)(v12 + 56 * v9 + 40);
    if (v13 == 49)
    {
      if ((v11 & 0x8000) == 0 && *(unsigned __int8 *)(v12 + 56 * (unsigned __int16)v11 + 40) < 0x32u)
        v11 = v9;
    }
    else if (v13 == 50)
    {
      v11 = v9;
    }
    if (v11 < 0)
      v11 = v9;
    if (*(_DWORD *)(v12 + 56 * v9 + 48))
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, __int16 *))(a1 + 160))(a2, a3, *(unsigned __int16 *)(v12 + 56 * v11 + 4), 13, 2, "2", &v14);
      if ((result & 0x80000000) != 0)
        return result;
      v4 = *a4;
      v11 = -1;
    }
    ++v9;
  }
  while (v4 > v9);
  if ((v11 & 0x8000) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, __int16 *))(a1 + 160))(a2, a3, *(unsigned __int16 *)(*((_QWORD *)a4 + 4) + 56 * (unsigned __int16)v11 + 4), 13, 2, "2", &v14);
  return result;
}

uint64_t fe_msp_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t Object;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = 0;
  v25 = 0;
  v5 = 2705334279;
  v23 = 0;
  if (a5)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v25);
    if ((inited & 0x80000000) != 0)
      return inited;
    Object = objc_GetObject(*(_QWORD *)(v25 + 48), (uint64_t)"LINGDB", &v24);
    if ((Object & 0x80000000) != 0)
      goto LABEL_11;
    Object = objc_GetObject(*(_QWORD *)(v25 + 48), (uint64_t)"FE_DCTLKP", &v23);
    if ((Object & 0x80000000) != 0)
      goto LABEL_11;
    v11 = heap_Alloc(*(_QWORD *)(v25 + 8), 216);
    v16 = v25;
    if (v11)
    {
      v17 = v11;
      *(_QWORD *)v11 = v25;
      *(_QWORD *)(v11 + 8) = a3;
      *(_QWORD *)(v11 + 16) = a4;
      *(_QWORD *)(v11 + 200) = *(_QWORD *)(v24 + 8);
      v18 = v23;
      *(_QWORD *)(v11 + 40) = *(_QWORD *)(v23 + 8);
      *(_OWORD *)(v11 + 24) = *(_OWORD *)(v18 + 16);
      *(_QWORD *)(v11 + 120) = 0;
      *(_QWORD *)(v11 + 208) = 0;
      log_OutText(*(_QWORD *)(v16 + 32), (uint64_t)"FE_MSP", 4, 0, (uint64_t)"Entering fe_msp_ObjOpen", v13, v14, v15, v22);
      Object = msp_check_dctlkp_version((_QWORD *)v17);
      if ((Object & 0x80000000) != 0)
        goto LABEL_11;
      *(_QWORD *)(v17 + 48) = heap_Alloc;
      *(_QWORD *)(v17 + 56) = heap_Calloc;
      *(_QWORD *)(v17 + 64) = heap_Realloc;
      *(_QWORD *)(v17 + 72) = heap_Free;
      v19 = OOCAllocator_Con(v17 + 80, (_OWORD *)(v17 + 48), *(_QWORD *)(*(_QWORD *)v17 + 8));
      v20 = LH_ERROR_to_VERROR(v19);
      if ((v20 & 0x80000000) == 0)
      {
        *(_DWORD *)(v17 + 192) = 0;
        *(_OWORD *)(v17 + 160) = 0u;
        *(_OWORD *)(v17 + 176) = 0u;
        *(_OWORD *)(v17 + 128) = 0u;
        *(_OWORD *)(v17 + 144) = 0u;
        Object = msp_prepare_voice_specific_msp_luavm(v17);
        if ((Object & 0x80000000) == 0)
        {
          v5 = msp_prepare_common_msp_luavm(v17);
          if ((v5 & 0x80000000) == 0)
          {
            *(_QWORD *)a5 = v17;
            *(_DWORD *)(a5 + 8) = 1065;
            return v5;
          }
LABEL_16:
          fe_msp_ObjClose(*(uint64_t **)a5, *(_QWORD *)(a5 + 8));
          return v5;
        }
LABEL_11:
        v5 = Object;
        goto LABEL_16;
      }
      v5 = v20;
      v16 = v25;
    }
    else
    {
      v5 = 2705334282;
    }
    log_OutPublic(*(_QWORD *)(v16 + 32), (uint64_t)"FE_MSP", 78000, 0, v12, v13, v14, v15, v22);
    goto LABEL_16;
  }
  return v5;
}

uint64_t fe_msp_ObjClose(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = 2705334280;
  v4 = safeh_HandleCheck((uint64_t)a1, a2, 1065, 216);
  if ((v4 & 0x80000000) == 0)
  {
    if (a1)
    {
      v8 = v4;
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_MSP", 4, 0, (uint64_t)"Entering fe_msp_ObjClose", v5, v6, v7, v10);
      msp_deallocate_supported_styles((uint64_t)a1, (uint64_t)(a1 + 20));
      msp_deallocate_supported_styles((uint64_t)a1, (uint64_t)(a1 + 16));
      luavmldoutil_destroy_lua_vm((uint64_t)(a1 + 10), a1 + 20);
      luavmldoutil_destroy_lua_vm((uint64_t)(a1 + 10), a1 + 16);
      kaldi::nnet1::Component::IsUpdatable((kaldi::nnet1::Component *)(a1 + 10));
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"LINGDB");
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"FE_DCTLKP");
      heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)a1);
      return v8;
    }
    else
    {
      return 2705334282;
    }
  }
  return v3;
}

uint64_t fe_msp_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = 2705334280;
  if ((safeh_HandleCheck(a1, a2, 1065, 216) & 0x80000000) == 0)
  {
    if (a1)
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_MSP", 4, 0, (uint64_t)"Entering fe_msp_ObjReopen", v4, v5, v6, v9);
      v7 = msp_check_dctlkp_version((_QWORD *)a1);
      if ((v7 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 192) = 0;
        v7 = msp_prepare_voice_specific_msp_luavm(a1);
        if ((v7 & 0x80000000) == 0)
          return msp_prepare_common_msp_luavm(a1);
      }
      return v7;
    }
    else
    {
      return 2705334282;
    }
  }
  return v3;
}

uint64_t fe_msp_ProcessStart(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 1065, 216);
  if ((int)result >= 0)
    return result;
  else
    return 2705334280;
}

uint64_t fe_msp_Process(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t has_set_style_marker;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v31 = 0;
  v30 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 1065, 216) & 0x80000000) != 0)
    return 2705334280;
  *a5 = 1;
  log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_MSP", 4, 0, (uint64_t)"Entering fe_msp_Process", v9, v10, v11, v29);
  has_set_style_marker = LingDBIsValid(a1[25], a3, a4, &v31);
  if ((has_set_style_marker & 0x80000000) == 0)
  {
    if ((_DWORD)v31 == 1)
    {
      has_set_style_marker = LingDBHasSentence(a1[25], a3, a4, (_DWORD *)&v31 + 1);
      if ((has_set_style_marker & 0x80000000) != 0)
        goto LABEL_24;
      if (HIDWORD(v31) == 1)
      {
        v16 = auxTouchLingdbInstance(a1[25], a3, a4);
        if ((v16 & 0x80000000) != 0)
        {
LABEL_19:
          has_set_style_marker = v16;
          goto LABEL_24;
        }
        has_set_style_marker = msp_lingDB_has_set_style_marker(a1[25], a3, a4, &v30);
        if ((has_set_style_marker & 0x80000000) != 0)
          goto LABEL_24;
        if (v30 == 1 || a1[26])
        {
          has_set_style_marker = initLDO((uint64_t)(a1 + 10), a1 + 15);
          if ((has_set_style_marker & 0x80000000) != 0)
            goto LABEL_24;
          v17 = *a1;
          if (a1[15])
          {
            v16 = importFromLingDBWordRecord(v17, a1[25], a3, a4, a1 + 15, 1);
            if ((v16 & 0x80000000) == 0)
            {
              v16 = msp_prepare_ldo_for_lua_style_processing((uint64_t)a1, v18, v19, v20, v21, v22, v23, v24);
              if ((v16 & 0x80000000) == 0)
              {
                if (!a1[20]
                  || (v16 = msp_execute_voice_specific_msp_entry_point(a1, (uint64_t)"FE_MSP"), (v16 & 0x80000000) == 0))
                {
                  if (!a1[16]
                    || (v16 = msp_execute_common_msp_entry_point(a1, (uint64_t)"FE_MSP"), (v16 & 0x80000000) == 0))
                  {
                    v16 = exportToLingDBWordRecord(*a1, a1[25], a3, a4, (uint64_t)(a1 + 10), a1[15], 1);
                  }
                }
              }
            }
            goto LABEL_19;
          }
          v25 = *(_QWORD *)(v17 + 32);
          v26 = "Init LDO is NULL, returning";
        }
        else
        {
          v25 = *(_QWORD *)(*a1 + 32);
          v26 = "Sentence does not contain <esc>style, returning";
        }
      }
      else
      {
        v25 = *(_QWORD *)(*a1 + 32);
        v26 = "LingDB has no sentence, returning";
      }
    }
    else
    {
      v25 = *(_QWORD *)(*a1 + 32);
      v26 = "Empty or Invalid LingDB, returning";
    }
    log_OutText(v25, (uint64_t)"FE_MSP", 5, 0, (uint64_t)v26, v12, v13, v14, 0);
  }
LABEL_24:
  v27 = a1[15];
  if (v27)
  {
    deinitLDO((uint64_t)(a1 + 10), v27);
    a1[15] = 0;
  }
  return has_set_style_marker;
}

uint64_t fe_msp_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;

  result = safeh_HandleCheck(a1, a2, 1065, 216);
  if ((result & 0x80000000) != 0)
    return 2705334280;
  v4 = *(_QWORD *)(a1 + 208);
  if (v4)
  {
    v5 = OOC_PlacementDeleteObject(a1 + 80, v4);
    result = LH_ERROR_to_VERROR(v5);
    if ((result & 0x80000000) == 0)
      *(_QWORD *)(a1 + 208) = 0;
  }
  return result;
}

uint64_t fe_msp_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2705334273;
  result = 0;
  *a2 = &IFeMSP;
  return result;
}

uint64_t msp_check_dctlkp_version(_QWORD *a1)
{
  int v2;
  int v3;

  v3 = 0;
  v2 = 0;
  return (*(uint64_t (**)(_QWORD, _QWORD, int *, int *))(a1[5] + 88))(a1[3], a1[4], &v3, &v2);
}

uint64_t msp_deallocate_supported_styles(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    result = OOC_PlacementDeleteObject(result + 80, v3);
    *(_QWORD *)(a2 + 8) = 0;
  }
  return result;
}

uint64_t msp_execute_common_msp_entry_point(_QWORD *a1, uint64_t a2)
{
  return loc_process_ldo_with_lua(a1, a1 + 16, (uint64_t)"runMsp", a1[21], a2);
}

uint64_t loc_process_ldo_with_lua(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v17;

  v8 = *a2;
  v9 = a1[15];
  if (a4)
    v10 = LuaVMLDO_RunFunctionWithLDOAndTableArguments(v8, a3, v9, a4);
  else
    v10 = LuaVMLDO_RunFunction(v8, a3, v9);
  v15 = LH_ERROR_to_VERROR(v10);
  if ((v15 & 0x80000000) != 0)
    log_OutPublic(*(_QWORD *)(*a1 + 32), a5, 78002, 0, v11, v12, v13, v14, v17);
  return v15;
}

uint64_t msp_execute_voice_specific_msp_entry_point(_QWORD *a1, uint64_t a2)
{
  return loc_process_ldo_with_lua(a1, a1 + 20, (uint64_t)"runVoiceMsp", 0, a2);
}

uint64_t msp_lingDB_has_set_style_marker(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  int *v10;
  int v11;
  int *v12;
  int v13;

  v13 = 0;
  v12 = 0;
  *a4 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a1 + 104))(a2, a3, 1, 0, (char *)&v13 + 2);
  if ((result & 0x80000000) == 0)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int **, int *))(a1 + 176))(a2, a3, HIWORD(v13), 1, &v12, &v13);
    if ((result & 0x80000000) == 0)
    {
      v9 = (unsigned __int16)v13;
      if ((_WORD)v13)
      {
        v10 = v12;
        while (1)
        {
          v11 = *v10;
          v10 += 8;
          if (v11 == 60)
            break;
          if (!--v9)
            return result;
        }
        *a4 = 1;
      }
    }
  }
  return result;
}

uint64_t msp_prepare_common_msp_luavm(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v9;

  v2 = (_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 144) = "runMsp";
  *(_QWORD *)(a1 + 152) = "getSupportedStylesMsp";
  v6 = loc_prepare_luavm(a1, (uint64_t *)(a1 + 128), "msp");
  if ((v6 & 0x80000000) == 0)
  {
    if (*v2)
    {
      *(_DWORD *)(a1 + 192) = 1;
      v7 = "Common MSP data available";
    }
    else
    {
      v7 = "No common MSP data available";
    }
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_MSP", 4, 0, (uint64_t)v7, v3, v4, v5, v9);
  }
  return v6;
}

uint64_t loc_prepare_luavm(uint64_t a1, uint64_t *a2, char *a3)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int IsLuaFunctionAvailable;
  int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v21;
  int v22;

  v7 = a2 + 1;
  v6 = a2[1];
  if (v6)
  {
    OOC_PlacementDeleteObject(a1 + 80, v6);
    *v7 = 0;
  }
  v8 = PNEW_LDOObject_Con(a1 + 80, a1 + 80, v7);
  v9 = LH_ERROR_to_VERROR(v8);
  if ((v9 & 0x80000000) != 0)
  {
    v14 = v9;
    v19 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v18 = "Error creating LDOObject for supported styles";
LABEL_17:
    log_OutText(v19, (uint64_t)"FE_MSP", 4, 0, (uint64_t)v18, v10, v11, v12, v21);
    return v14;
  }
  v13 = luavmldoutil_initialize_lua_vm(*(_WORD **)(a1 + 8), *(_QWORD *)(a1 + 16), a1 + 80, a2[2], (uint64_t)loc_lua_log_callback, a2, a3);
  v14 = v13;
  if ((v13 & 0x80000000) != 0)
  {
    if ((v13 & 0x1FFF) != 0xA)
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_MSP", 4, 0, (uint64_t)"Ignoring error from LuaVM initialize", v10, v11, v12, v21);
      return 0;
    }
    return v14;
  }
  v15 = *a2;
  if (!*a2)
  {
    v19 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v18 = "No data to initialize LuaVM, returning";
    goto LABEL_17;
  }
  v22 = 0;
  IsLuaFunctionAvailable = LuaVMLDO_IsLuaFunctionAvailable(v15, a2[3], &v22);
  v14 = LH_ERROR_to_VERROR(IsLuaFunctionAvailable);
  if ((v14 & 0x80000000) != 0)
  {
    v18 = "Ignoring error from LuaVM get supported styles";
    goto LABEL_16;
  }
  if (v22 != 1)
  {
    v18 = "No Lua function to get supported styles found";
    goto LABEL_16;
  }
  LuaVMLDO_RunFunctionReturningTable(*a2, a2[3], a2[1]);
  v14 = LH_ERROR_to_VERROR(v17);
  if ((v14 & 0x80000000) != 0)
  {
    v18 = "Error executing the Lua function to get supported styles";
LABEL_16:
    v19 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    goto LABEL_17;
  }
  return v14;
}

uint64_t msp_prepare_ldo_for_lua_style_processing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  int Type;
  uint64_t is_style_supported_by_lua;
  int StringAttribute;
  char *v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  const char *v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v44;
  int AbsoluteFrom;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  char **v52;
  char **v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  int v64;
  char *v65;
  char *v66;
  int v67;
  uint64_t v68;
  uint64_t **v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t **v72;
  uint64_t **v73;
  uint64_t *v74;
  uint64_t *v75;
  size_t v76;
  size_t v77;
  int v78;
  int v79;
  const char *v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char **v90;
  char **v91;
  int v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t *v96;
  char *__s1;
  uint64_t v98;
  const char *v99[2];

  v8 = a1;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_MSP", 4, 0, (uint64_t)"Entering prepare ldo for lua processing", a6, a7, a8, v82);
  v93 = 0;
  v94 = 0;
  v99[0] = 0;
  v96 = 0;
  __s1 = 0;
  v95 = 0;
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 120) + 32);
  v10 = *(uint64_t **)(v9 + 24);
  v88 = v8;
  if ((unint64_t)v10 < *(_QWORD *)(v9 + 32))
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v84 = v8 + 128;
    v86 = v8 + 160;
    v83 = v8 + 80;
    while (1)
    {
      v14 = (uint64_t *)*v10;
      Type = LDOObject_GetType(*v10, (uint64_t *)v99);
      is_style_supported_by_lua = LH_ERROR_to_VERROR(Type);
      if ((is_style_supported_by_lua & 0x80000000) != 0)
        goto LABEL_134;
      if (!strcmp(v99[0], "MARKER_SET_STYLE"))
      {
        StringAttribute = LDOObject_GetStringAttribute(v14, "STRARGS", &v93, (uint64_t *)&__s1);
        is_style_supported_by_lua = LH_ERROR_to_VERROR(StringAttribute);
        if ((is_style_supported_by_lua & 0x80000000) != 0)
          goto LABEL_134;
        if ((_DWORD)v93 == 1)
        {
          v18 = __s1;
          v92 = 0;
          if (!strcmp(__s1, "default"))
          {
            v92 = 1;
          }
          else
          {
            is_style_supported_by_lua = loc_is_style_supported_by_lua(v8, v86, v18, &v92);
            if ((is_style_supported_by_lua & 0x80000000) != 0)
              goto LABEL_134;
            is_style_supported_by_lua = loc_is_style_supported_by_lua(v8, v84, v18, &v92);
            if ((is_style_supported_by_lua & 0x80000000) != 0)
              goto LABEL_134;
            if (!v92)
            {
              v19 = (unint64_t)v11 - v12;
              v20 = (((unint64_t)v11 - v12) >> 3) + 1;
              if (v20 > v13)
              {
                v21 = 2 * v13;
                if (2 * v13 >= v13 + 1000000)
                  v21 = v13 + 1000000;
                if (v21 > v20)
                  v20 = v21;
                if (v20 <= 8)
                  v13 = 8;
                else
                  v13 = v20;
                v22 = OOCAllocator_Realloc(v83, v12, 8 * v13, (_DWORD *)&v93 + 1);
                if (HIDWORD(v93))
                {
                  v8 = v88;
                  goto LABEL_27;
                }
                v12 = v22;
                v11 = (uint64_t **)(v22 + (v19 & 0x7FFFFFFF8));
              }
              v8 = v88;
              *v11++ = v14;
            }
          }
        }
      }
      if ((unint64_t)++v10 >= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 120) + 32) + 32))
        goto LABEL_26;
    }
  }
  v13 = 0;
  v12 = 0;
  v11 = 0;
LABEL_26:
  v95 = v12;
  v96 = (uint64_t *)v11;
  LODWORD(v94) = v13;
  is_style_supported_by_lua = loc_delete_style_markers(v8, (uint64_t)&v94);
  if ((is_style_supported_by_lua & 0x80000000) != 0)
  {
LABEL_134:
    v31 = is_style_supported_by_lua;
    goto LABEL_135;
  }
LABEL_27:
  LODWORD(__s1) = 0;
  v99[0] = 0;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v23 = *(_QWORD *)(*(_QWORD *)(v8 + 120) + 32);
  v24 = *(uint64_t **)(v23 + 24);
  if ((unint64_t)v24 < *(_QWORD *)(v23 + 32))
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = v8 + 80;
    while (1)
    {
      v29 = *v24;
      v30 = LDOObject_GetType(*v24, (uint64_t *)v99);
      v31 = LH_ERROR_to_VERROR(v30);
      if ((v31 & 0x80000000) != 0)
        goto LABEL_71;
      v32 = v99[0];
      if (!strcmp(v99[0], "MARKER_SET_STYLE")
        || !strcmp(v32, "MARKER_INSERT_PROMPT")
        || !strcmp(v32, "MARKER_INSERT_AUDIO")
        || !strcmp(v32, "MARKER_SET_TYPE_OF_INPUT")
        || !strcmp(v32, "MARKER_SET_PINYIN"))
      {
        v33 = (unint64_t)v25 - v26;
        v34 = (((unint64_t)v25 - v26) >> 3) + 1;
        if (v34 > v27)
        {
          v35 = 2 * v27;
          if (2 * v27 >= v27 + 1000000)
            v35 = v27 + 1000000;
          if (v35 > v34)
            v34 = v35;
          if (v34 <= 8)
            v27 = 8;
          else
            v27 = v34;
          v36 = OOCAllocator_Realloc(v28, v26, 8 * v27, &__s1);
          v26 = v36;
          if ((_DWORD)__s1)
          {
            v8 = v88;
            goto LABEL_71;
          }
          v25 = (uint64_t *)(v36 + (v33 & 0x7FFFFFFF8));
        }
        v8 = v88;
        *v25++ = v29;
      }
      if ((unint64_t)++v24 >= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 120) + 32) + 32))
        goto LABEL_49;
    }
  }
  v31 = 0;
  v26 = 0;
  v25 = 0;
LABEL_49:
  if ((((unint64_t)v25 - v26) & 0x7FFFFFFF0) == 0)
  {
LABEL_71:
    if (v26)
      goto LABEL_72;
    goto LABEL_73;
  }
  v37 = 0;
  v38 = v96;
  v85 = v8 + 80;
  v87 = v95;
  v39 = (((unint64_t)v25 - v26) >> 3);
  v40 = v94;
  while (1)
  {
    v41 = *(_QWORD *)(v26 + 8 * v37);
    LDOObject_GetType(v41, (uint64_t *)v99);
    v42 = v37 + 1;
    if (strcmp(v99[0], "MARKER_SET_STYLE") || v42 >= v39)
      goto LABEL_68;
    v44 = *(_QWORD *)(v26 + 8 * v37 + 8);
    LDOObject_GetType(v44, (uint64_t *)v99);
    if (strcmp(v99[0], "MARKER_SET_STYLE"))
      goto LABEL_68;
    AbsoluteFrom = LDOLabel_GetAbsoluteFrom(v41);
    if (AbsoluteFrom != LDOLabel_GetAbsoluteFrom(v44))
      goto LABEL_68;
    v46 = (unint64_t)v38 - v87;
    v47 = (((unint64_t)v38 - v87) >> 3) + 1;
    if (v47 > v40)
      break;
LABEL_67:
    *v38++ = v41;
    v96 = v38;
LABEL_68:
    v37 = v42;
    if (v39 == v42)
    {
      v8 = v88;
      v31 = loc_delete_style_markers(v88, (uint64_t)&v94);
      goto LABEL_72;
    }
  }
  v48 = 2 * v40;
  if (2 * v40 >= v40 + 1000000)
    v48 = v40 + 1000000;
  if (v48 > v47)
    v47 = v48;
  if (v47 <= 8)
    v40 = 8;
  else
    v40 = v47;
  v49 = OOCAllocator_Realloc(v85, v87, 8 * v40, &__s1);
  v95 = v49;
  if (!(_DWORD)__s1)
  {
    LODWORD(v94) = v40;
    v87 = v49;
    v38 = (uint64_t *)(v49 + (v46 & 0x7FFFFFFF8));
    goto LABEL_67;
  }
  v8 = v88;
LABEL_72:
  OOCAllocator_Free(v8 + 80, v26);
LABEL_73:
  if ((v31 & 0x80000000) != 0)
  {
LABEL_135:
    v52 = v90;
    goto LABEL_136;
  }
  LODWORD(v99[0]) = 0;
  v94 = 0;
  v50 = *(_QWORD *)(*(_QWORD *)(v8 + 120) + 32);
  v51 = *(uint64_t **)(v50 + 24);
  v52 = v90;
  v53 = v91;
  if ((unint64_t)v51 >= *(_QWORD *)(v50 + 32))
  {
LABEL_91:
    v94 = 0;
    if (v53 > v52 && (((char *)v53 - (char *)v52) & 0x7FFFFFFF8) != 0)
    {
      while (1)
      {
        v94 = *v52;
        if (!LDOLabel_GetAbsoluteFrom((uint64_t)v94))
          break;
        if (++v52 >= v53)
          goto LABEL_100;
      }
    }
    if (!*(_QWORD *)(v8 + 208))
      goto LABEL_100;
    LODWORD(v99[0]) = 0;
    LODWORD(__s1) = 0;
    v63 = LDO_AddLabelOnSubstring(*(_QWORD *)(v8 + 120), "MARKER", "MARKER_SET_STYLE", (unsigned int *)v99, (unsigned int *)&__s1, &v94);
    is_style_supported_by_lua = LH_ERROR_to_VERROR(v63);
    if ((is_style_supported_by_lua & 0x80000000) == 0)
    {
      LDOObject_SetU32Attribute((uint64_t)v94, "_MTYPE", 60);
      is_style_supported_by_lua = LH_ERROR_to_VERROR(v64);
      if ((is_style_supported_by_lua & 0x80000000) == 0)
      {
        v65 = v94;
        v66 = (char *)fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(*(_QWORD *)(v8 + 208));
        v67 = LDOObject_SetStringAttribute((uint64_t)v65, "STRARGS", v66);
        is_style_supported_by_lua = LH_ERROR_to_VERROR(v67);
        if ((is_style_supported_by_lua & 0x80000000) == 0)
        {
LABEL_100:
          v94 = 0;
          v95 = 0;
          v99[0] = 0;
          v99[1] = 0;
          __s1 = 0;
          v98 = 0;
          v68 = *(_QWORD *)(*(_QWORD *)(v8 + 120) + 16);
          v69 = *(uint64_t ***)(v68 + 80);
          v70 = *(_QWORD *)(v68 + 88);
          if ((unint64_t)v69 >= v70)
          {
            v31 = 0;
            goto LABEL_135;
          }
          v71 = (uint64_t *)(v8 + 208);
          v72 = *(uint64_t ***)(v68 + 80);
          v73 = v69;
          while (1)
          {
            v75 = *v73++;
            v74 = v75;
            v76 = (unint64_t)v73 >= v70 ? 0 : (size_t)*v73;
            v77 = v72 <= v69 ? 0 : (size_t)*(v72 - 1);
            is_style_supported_by_lua = loc_find_style_suitable_for_given_node((size_t)v74, (uint64_t)&v89, (uint64_t)&v94);
            if ((is_style_supported_by_lua & 0x80000000) != 0)
              break;
            is_style_supported_by_lua = loc_find_style_suitable_for_given_node(v77, (uint64_t)&v89, (uint64_t)v99);
            if ((is_style_supported_by_lua & 0x80000000) != 0)
              break;
            is_style_supported_by_lua = loc_find_style_suitable_for_given_node(v76, (uint64_t)&v89, (uint64_t)&__s1);
            if ((is_style_supported_by_lua & 0x80000000) != 0)
              break;
            if (v94)
            {
              v78 = *v71 ? LHString_Erase(*v71) : PNEW_LDOString_Con(v8 + 80, v8 + 80, (_QWORD *)(v8 + 208));
              is_style_supported_by_lua = LH_ERROR_to_VERROR(v78);
              if ((is_style_supported_by_lua & 0x80000000) != 0)
                break;
              v79 = LHString_Append(*v71, v94);
              is_style_supported_by_lua = LH_ERROR_to_VERROR(v79);
              if ((is_style_supported_by_lua & 0x80000000) != 0)
                break;
            }
            if (*v71)
            {
              v31 = 0;
              if ((_DWORD)v98)
              {
                if (HIDWORD(v98))
                {
                  v31 = loc_set_nlu_attribute(v8, v94, v74, 2);
                  if ((v31 & 0x80000000) != 0)
                    goto LABEL_135;
                }
              }
              if (!(_DWORD)v95)
                goto LABEL_145;
              v31 = loc_set_nlu_attribute(v8, v94, v74, 0);
              if ((v31 & 0x80000000) != 0)
                goto LABEL_135;
              if (!HIDWORD(v95))
              {
                if (v99[0])
                {
                  v31 = loc_set_nlu_attribute(v8, v99[0], v74, 2);
                  if ((v31 & 0x80000000) != 0)
                    goto LABEL_135;
                }
              }
              if (!(_DWORD)v95)
              {
LABEL_145:
                if (!(_DWORD)v98 || !HIDWORD(v98))
                {
                  v80 = (const char *)fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(*(_QWORD *)(v8 + 208));
                  v31 = loc_set_nlu_attribute(v8, v80, v74, 1);
                  if ((v31 & 0x80000000) != 0)
                    goto LABEL_135;
                }
              }
            }
            else
            {
              v31 = 0;
            }
            v72 = v73;
            if ((unint64_t)v73 >= v70)
              goto LABEL_135;
          }
        }
      }
    }
    goto LABEL_134;
  }
  v54 = v89;
  while (1)
  {
    v55 = *v51;
    v56 = LDOObject_GetType(*v51, (uint64_t *)&v94);
    v57 = LH_ERROR_to_VERROR(v56);
    if ((v57 & 0x80000000) != 0)
      break;
    if (!strcmp(v94, "MARKER_SET_STYLE"))
    {
      v58 = (char *)v53 - (char *)v52;
      v59 = ((unint64_t)((char *)v53 - (char *)v52) >> 3) + 1;
      if (v59 > v54)
      {
        v60 = 2 * v54;
        if (2 * v54 >= v54 + 1000000)
          v60 = v54 + 1000000;
        if (v60 > v59)
          v59 = v60;
        if (v59 <= 8)
          v61 = 8;
        else
          v61 = v59;
        v62 = OOCAllocator_Realloc(v8 + 80, (uint64_t)v52, 8 * v61, v99);
        v52 = (char **)v62;
        if (LODWORD(v99[0]))
        {
LABEL_90:
          v90 = v52;
          v91 = v53;
          LODWORD(v89) = v54;
          v8 = v88;
          goto LABEL_91;
        }
        v53 = (char **)(v62 + (v58 & 0x7FFFFFFF8));
        v54 = v61;
      }
      *v53++ = (char *)v55;
    }
    if ((unint64_t)++v51 >= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v88 + 120) + 32) + 32))
      goto LABEL_90;
  }
  v31 = v57;
  v90 = v52;
  v91 = v53;
  v8 = v88;
LABEL_136:
  LODWORD(v89) = 0;
  if (v52)
    OOCAllocator_Free(v8 + 80, (uint64_t)v52);
  return v31;
}

